; ModuleID = '../../headless/lib/browser/headless_screen.cc'
source_filename = "../../headless/lib/browser/headless_screen.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%union.anon = type { i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%union.anon.4 = type { %"struct.gfx::HDRStaticMetadata" }
%"struct.gfx::HDRStaticMetadata" = type { double, double, double }
%"class.headless::HeadlessScreen" = type { %"class.display::ScreenBase" }
%"class.display::ScreenBase" = type { %"class.display::Screen", %"class.display::DisplayList" }
%"class.display::Screen" = type { i32 (...)**, i64, i64 }
%"class.display::DisplayList" = type { %"class.std::__1::vector", i64, i64, %"class.base::ObserverList" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.display::Display"*, %"class.display::Display"*, %"class.std::__1::__compressed_pair" }
%"class.display::Display" = type { i64, %"class.gfx::Rect", %"class.gfx::Size", %"class.gfx::Rect", float, i32, %"class.absl::optional", i32, i32, %"class.gfx::Size", %"class.gfx::DisplayColorSpaces", i32, i32, i8, i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%"class.gfx::DisplayColorSpaces" = type { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, %"class.absl::optional.0" }
%"class.absl::optional.0" = type { %"class.absl::optional_internal::optional_data.1" }
%"class.absl::optional_internal::optional_data.1" = type { %"class.absl::optional_internal::optional_data_base.2" }
%"class.absl::optional_internal::optional_data_base.2" = type { %"class.absl::optional_internal::optional_data_dtor_base.3" }
%"class.absl::optional_internal::optional_data_dtor_base.3" = type { i8, %union.anon.4 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.display::Display"* }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.6", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.base::internal::CheckedObserverAdapter"*, %"class.base::internal::CheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.14" }
%"class.base::internal::CheckedObserverAdapter" = type { %"class.base::WeakPtr" }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.9" }
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__cxx_atomic_impl.12" }
%"struct.std::__1::__cxx_atomic_impl.12" = type { %"struct.std::__1::__cxx_atomic_base_impl.13" }
%"struct.std::__1::__cxx_atomic_base_impl.13" = type { i8 }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.base::internal::CheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.aura::Env" = type { %"class.ui::EventTarget", %"class.base::SupportsUserData.base", [7 x i8], %"class.base::ObserverList.52", %"class.base::ObserverList.63", %"class.base::ObserverList.67", %"class.std::__1::set", %"class.std::__1::unique_ptr.80", i32, %"class.gfx::Point", i8, %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.98", %"class.std::__1::unique_ptr.104", %"class.ui::ContextFactory"*, i8, %"class.std::__1::unique_ptr.110", %"class.std::__1::vector.116" }
%"class.ui::EventTarget" = type { i32 (...)**, %"class.std::__1::vector.19", %"class.std::__1::vector.32", %"class.ui::EventHandler"* }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"struct.ui::EventTarget::PrioritizedHandler"*, %"struct.ui::EventTarget::PrioritizedHandler"*, %"class.std::__1::__compressed_pair.39" }
%"struct.ui::EventTarget::PrioritizedHandler" = type <{ %"class.ui::EventHandler"*, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"struct.ui::EventTarget::PrioritizedHandler"* }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.ui::EventHandler"**, %"class.ui::EventHandler"**, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.ui::EventHandler"** }
%"class.ui::EventHandler" = type { i32 (...)**, %"class.std::__1::stack" }
%"class.std::__1::stack" = type { %"class.base::circular_deque" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.ui::EventDispatcher"**, i64 }
%"class.ui::EventDispatcher" = type { i32 (...)**, %"class.ui::EventDispatcherDelegate"*, %"class.ui::Event"*, %"class.std::__1::vector.32" }
%"class.ui::EventDispatcherDelegate" = type { i32 (...)**, %"class.ui::EventDispatcher"* }
%"class.ui::Event" = type { i32 (...)**, i32, %"class.base::TimeTicks", %"class.ui::LatencyInfo", i32, %"class.ui::Event"*, i8, i8, %"class.ui::EventTarget"*, i32, i32, i32, %"class.std::__1::unique_ptr" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.ui::LatencyInfo" = type { %"class.base::flat_map", i64, i64, i8, i8, i8, i32, float, float, i64 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.21" }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.23" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"struct.std::__1::pair"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.base::flat_map.30"* }
%"class.base::flat_map.30" = type opaque
%"class.base::SupportsUserData.base" = type <{ i32 (...)**, %"class.std::__1::map", %"class.base::SequenceCheckerDoNothing" }>
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.44", %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { i64 }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::ObserverList.52" = type <{ %"class.std::__1::vector.53", %"class.base::LinkedList.60", i64, i32, [4 x i8] }>
%"class.std::__1::vector.53" = type { %"class.std::__1::__vector_base.54" }
%"class.std::__1::__vector_base.54" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.55" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList.60" = type { %"class.base::LinkNode.61" }
%"class.base::LinkNode.61" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::ObserverList.63" = type <{ %"class.std::__1::vector.53", %"class.base::LinkedList.64", i64, i32, [4 x i8] }>
%"class.base::LinkedList.64" = type { %"class.base::LinkNode.65" }
%"class.base::LinkNode.65" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::ObserverList.67" = type <{ %"class.std::__1::vector.6", %"class.base::LinkedList.68", i64, i32, [4 x i8] }>
%"class.base::LinkedList.68" = type { %"class.base::LinkNode.69" }
%"class.base::LinkNode.69" = type { %"class.base::internal::LinkNodeBase" }
%"class.std::__1::set" = type { %"class.std::__1::__tree.71" }
%"class.std::__1::__tree.71" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.72", %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.aura::EnvInputStateController"* }
%"class.aura::EnvInputStateController" = type opaque
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.ui::GestureRecognizer"* }
%"class.ui::GestureRecognizer" = type opaque
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.ui::CursorFactory"* }
%"class.ui::CursorFactory" = type opaque
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.aura::InputStateLookup"* }
%"class.aura::InputStateLookup" = type opaque
%"class.std::__1::unique_ptr.104" = type { %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"class.ui::PlatformEventSource"* }
%"class.ui::PlatformEventSource" = type opaque
%"class.ui::ContextFactory" = type opaque
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.aura::WindowOcclusionTracker"* }
%"class.aura::WindowOcclusionTracker" = type opaque
%"class.std::__1::vector.116" = type { %"class.std::__1::__vector_base.117" }
%"class.std::__1::__vector_base.117" = type { %"class.aura::WindowTreeHost"**, %"class.aura::WindowTreeHost"**, %"class.std::__1::__compressed_pair.118" }
%"class.aura::WindowTreeHost" = type opaque
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.aura::WindowTreeHost"** }
%"class.aura::Window" = type { %"class.ui::LayerDelegate", %"class.ui::LayerOwner", %"class.ui::EventTarget", %"class.ui::GestureConsumer", %"class.ui::PropertyHandler", %"class.ui::metadata::MetaDataProvider", %"class.viz::HostFrameSinkClient", %"class.gfx::Rect", %"class.aura::WindowTreeHost"*, i32, i8, i8, %"class.aura::WindowDelegate"*, %"class.aura::Window"*, %"class.std::__1::vector.151", i8, i32, %class.SkRegion, i32, i8, i8, %"class.std::__1::unique_ptr.158", %"class.std::__1::unique_ptr.164", %"class.std::__1::vector.170", i32, i32, i32, [4 x i8], %"class.base::ObserverList.177", i32, %"class.viz::SubtreeCaptureId", float, %"class.viz::FrameSinkId", i8, i8, i8, %"class.std::__1::unique_ptr.181", %"class.base::WeakPtr.187" }
%"class.ui::LayerDelegate" = type { i32 (...)** }
%"class.ui::LayerOwner" = type { i32 (...)**, %"class.std::__1::unique_ptr.123", %"class.ui::Layer"*, %"class.base::ObserverList.129" }
%"class.std::__1::unique_ptr.123" = type { %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"class.ui::Layer"* }
%"class.ui::Layer" = type opaque
%"class.base::ObserverList.129" = type <{ %"class.std::__1::vector.53", %"class.base::LinkedList.130", i64, i32, [4 x i8] }>
%"class.base::LinkedList.130" = type { %"class.base::LinkNode.131" }
%"class.base::LinkNode.131" = type { %"class.base::internal::LinkNodeBase" }
%"class.ui::GestureConsumer" = type { i32 (...)** }
%"class.ui::PropertyHandler" = type { i32 (...)**, %"class.std::__1::map.133" }
%"class.std::__1::map.133" = type { %"class.std::__1::__tree.134" }
%"class.std::__1::__tree.134" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.135", %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"class.ui::metadata::MetaDataProvider" = type { i32 (...)**, %"class.std::__1::map.142" }
%"class.std::__1::map.142" = type { %"class.std::__1::__tree.143" }
%"class.std::__1::__tree.143" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.144", %"class.std::__1::__compressed_pair.148" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"class.viz::HostFrameSinkClient" = type { i32 (...)** }
%"class.aura::WindowDelegate" = type opaque
%"class.std::__1::vector.151" = type { %"class.std::__1::__vector_base.152" }
%"class.std::__1::__vector_base.152" = type { %"class.aura::Window"**, %"class.aura::Window"**, %"class.std::__1::__compressed_pair.153" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.aura::Window"** }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%"class.std::__1::unique_ptr.158" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"class.aura::LayoutManager"* }
%"class.aura::LayoutManager" = type opaque
%"class.std::__1::unique_ptr.164" = type { %"class.std::__1::__compressed_pair.165" }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"class.aura::WindowTargeter"* }
%"class.aura::WindowTargeter" = type opaque
%"class.std::__1::vector.170" = type { %"class.std::__1::__vector_base.171" }
%"class.std::__1::__vector_base.171" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.172" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"class.gfx::Rect"* }
%"class.base::ObserverList.177" = type <{ %"class.std::__1::vector.6", %"class.base::LinkedList.178", i64, i32, [4 x i8] }>
%"class.base::LinkedList.178" = type { %"class.base::LinkNode.179" }
%"class.base::LinkNode.179" = type { %"class.base::internal::LinkNodeBase" }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.std::__1::unique_ptr.181" = type { %"class.std::__1::__compressed_pair.182" }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"class.viz::ParentLocalSurfaceIdAllocator"* }
%"class.viz::ParentLocalSurfaceIdAllocator" = type opaque
%"class.base::WeakPtr.187" = type { %"class.base::internal::WeakPtrBase" }
%"class.std::__1::set.188" = type opaque
%"class.display::DisplayObserver" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.189" }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.191 }
%union.anon.191 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.209" }
%"union.absl::variant_internal::DestructibleUnionImpl.209" = type { %"union.absl::variant_internal::DestructibleUnionImpl.210" }
%"union.absl::variant_internal::DestructibleUnionImpl.210" = type { %"union.absl::variant_internal::DestructibleUnionImpl.211" }
%"union.absl::variant_internal::DestructibleUnionImpl.211" = type { %"union.absl::variant_internal::DestructibleUnionImpl.212" }
%"union.absl::variant_internal::DestructibleUnionImpl.212" = type { %"class.std::__1::basic_string" }
%"struct.gfx::GpuExtraInfo" = type { %"class.std::__1::vector.195", %"class.std::__1::vector.202" }
%"class.std::__1::vector.195" = type { %"class.std::__1::__vector_base.196" }
%"class.std::__1::__vector_base.196" = type { %"struct.gfx::ANGLEFeature"*, %"struct.gfx::ANGLEFeature"*, %"class.std::__1::__compressed_pair.197" }
%"struct.gfx::ANGLEFeature" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.198" }
%"struct.std::__1::__compressed_pair_elem.198" = type { %"struct.gfx::ANGLEFeature"* }
%"class.std::__1::vector.202" = type { %"class.std::__1::__vector_base.203" }
%"class.std::__1::__vector_base.203" = type { %"struct.gfx::BufferUsageAndFormat"*, %"struct.gfx::BufferUsageAndFormat"*, %"class.std::__1::__compressed_pair.204" }
%"struct.gfx::BufferUsageAndFormat" = type { i32, i32 }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.205" }
%"struct.std::__1::__compressed_pair_elem.205" = type { %"struct.gfx::BufferUsageAndFormat"* }

@_ZTVN8headless14HeadlessScreenE = hidden unnamed_addr constant { [25 x i8*] } { [25 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.headless::HeadlessScreen"*)* @_ZN8headless14HeadlessScreenD2Ev to i8*), i8* bitcast (void (%"class.headless::HeadlessScreen"*)* @_ZN8headless14HeadlessScreenD0Ev to i8*), i8* bitcast (i64 (%"class.headless::HeadlessScreen"*)* @_ZN8headless14HeadlessScreen20GetCursorScreenPointEv to i8*), i8* bitcast (i1 (%"class.headless::HeadlessScreen"*, %"class.aura::Window"*)* @_ZN8headless14HeadlessScreen19IsWindowUnderCursorEPN4aura6WindowE to i8*), i8* bitcast (%"class.aura::Window"* (%"class.headless::HeadlessScreen"*, %"class.gfx::Point"*)* @_ZN8headless14HeadlessScreen22GetWindowAtScreenPointERKN3gfx5PointE to i8*), i8* bitcast (%"class.aura::Window"* (%"class.headless::HeadlessScreen"*, %"class.gfx::Point"*, %"class.std::__1::set.188"*)* @_ZN8headless14HeadlessScreen28GetLocalProcessWindowAtPointERKN3gfx5PointERKNSt3__13setIPN4aura6WindowENS5_4lessIS9_EENS5_9allocatorIS9_EEEE to i8*), i8* bitcast (i32 (%"class.display::ScreenBase"*)* @_ZNK7display10ScreenBase14GetNumDisplaysEv to i8*), i8* bitcast (%"class.std::__1::vector"* (%"class.display::ScreenBase"*)* @_ZNK7display10ScreenBase14GetAllDisplaysEv to i8*), i8* bitcast (void (%"class.display::Display"*, %"class.headless::HeadlessScreen"*, %"class.aura::Window"*)* @_ZNK8headless14HeadlessScreen23GetDisplayNearestWindowEPN4aura6WindowE to i8*), i8* bitcast (void (%"class.display::Display"*, %"class.display::Screen"*, %"class.aura::Window"*)* @_ZNK7display6Screen21GetDisplayNearestViewEPN4aura6WindowE to i8*), i8* bitcast (void (%"class.display::Display"*, %"class.display::ScreenBase"*, %"class.gfx::Point"*)* @_ZNK7display10ScreenBase22GetDisplayNearestPointERKN3gfx5PointE to i8*), i8* bitcast (void (%"class.display::Display"*, %"class.display::ScreenBase"*, %"class.gfx::Rect"*)* @_ZNK7display10ScreenBase18GetDisplayMatchingERKN3gfx4RectE to i8*), i8* bitcast (void (%"class.display::Display"*, %"class.display::ScreenBase"*)* @_ZNK7display10ScreenBase17GetPrimaryDisplayEv to i8*), i8* bitcast (void (%"class.display::Screen"*, i1)* @_ZN7display6Screen23SetScreenSaverSuspendedEb to i8*), i8* bitcast (i1 (%"class.display::Screen"*)* @_ZNK7display6Screen19IsScreenSaverActiveEv to i8*), i8* bitcast (i64 (%"class.display::Screen"*)* @_ZNK7display6Screen17CalculateIdleTimeEv to i8*), i8* bitcast (void (%"class.display::ScreenBase"*, %"class.display::DisplayObserver"*)* @_ZN7display10ScreenBase11AddObserverEPNS_15DisplayObserverE to i8*), i8* bitcast (void (%"class.display::ScreenBase"*, %"class.display::DisplayObserver"*)* @_ZN7display10ScreenBase14RemoveObserverEPNS_15DisplayObserverE to i8*), i8* bitcast ({ i64, i64 } (%"class.display::Screen"*, %"class.aura::Window"*, %"class.gfx::Rect"*)* @_ZNK7display6Screen23ScreenToDIPRectInWindowEPN4aura6WindowERKN3gfx4RectE to i8*), i8* bitcast ({ i64, i64 } (%"class.display::Screen"*, %"class.aura::Window"*, %"class.gfx::Rect"*)* @_ZNK7display6Screen23DIPToScreenRectInWindowEPN4aura6WindowERKN3gfx4RectE to i8*), i8* bitcast (void (%"class.display::ScreenBase"*, i64, i32)* @_ZN7display10ScreenBase26SetPanelRotationForTestingElNS_7Display8RotationE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.display::Screen"*)* @_ZN7display6Screen19GetCurrentWorkspaceEv to i8*), i8* bitcast (void (%"class.base::Value"*, %"class.display::Screen"*, %"struct.gfx::GpuExtraInfo"*)* @_ZN7display6Screen26GetGpuExtraInfoAsListValueERKN3gfx12GpuExtraInfoE to i8*)] }, align 8
@_ZZN8headless14HeadlessScreenC1ERKN3gfx4RectEE22synthesized_display_id = internal unnamed_addr global i64 2000, align 8
@__const.HeadlessScreen.display = private unnamed_addr constant { i64, %"class.gfx::Rect", %"class.gfx::Size", %"class.gfx::Rect", float, i32, { { { { i8, [3 x i8], %union.anon } } } }, i32, i32, %"class.gfx::Size", { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, [4 x i8], { { { { i8, [7 x i8], %union.anon.4 } } } } }, i32, i32, i8, [3 x i8], i32 } { i64 -6148914691236517206, %"class.gfx::Rect" { %"class.gfx::Point" { i32 -1431655766, i32 -1431655766 }, %"class.gfx::Size" { i32 -1431655766, i32 -1431655766 } }, %"class.gfx::Size" { i32 -1431655766, i32 -1431655766 }, %"class.gfx::Rect" { %"class.gfx::Point" { i32 -1431655766, i32 -1431655766 }, %"class.gfx::Size" { i32 -1431655766, i32 -1431655766 } }, float 0xFFFFFFFFE0000000, i32 -1431655766, { { { { i8, [3 x i8], %union.anon } } } } { { { { i8, [3 x i8], %union.anon } } } { { { i8, [3 x i8], %union.anon } } { { i8, [3 x i8], %union.anon } { i8 -86, [3 x i8] c"\AA\AA\AA", %union.anon { i32 -1431655766 } } } } }, i32 -1431655766, i32 -1431655766, %"class.gfx::Size" { i32 -1431655766, i32 -1431655766 }, { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, [4 x i8], { { { { i8, [7 x i8], %union.anon.4 } } } } } { [6 x %"class.gfx::ColorSpace"] [%"class.gfx::ColorSpace" { i8 -86, i8 -86, i8 -86, i8 -86, [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [7 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"class.gfx::ColorSpace" { i8 -86, i8 -86, i8 -86, i8 -86, [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [7 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"class.gfx::ColorSpace" { i8 -86, i8 -86, i8 -86, i8 -86, [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [7 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"class.gfx::ColorSpace" { i8 -86, i8 -86, i8 -86, i8 -86, [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [7 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"class.gfx::ColorSpace" { i8 -86, i8 -86, i8 -86, i8 -86, [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [7 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"class.gfx::ColorSpace" { i8 -86, i8 -86, i8 -86, i8 -86, [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [7 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }], [6 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", { { { { i8, [7 x i8], %union.anon.4 } } } } { { { { i8, [7 x i8], %union.anon.4 } } } { { { i8, [7 x i8], %union.anon.4 } } { { i8, [7 x i8], %union.anon.4 } { i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %union.anon.4 { %"struct.gfx::HDRStaticMetadata" { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF } } } } } } }, i32 -1431655766, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766 }, align 8

@_ZN8headless14HeadlessScreenD1Ev = hidden unnamed_addr alias void (%"class.headless::HeadlessScreen"*), void (%"class.headless::HeadlessScreen"*)* @_ZN8headless14HeadlessScreenD2Ev
@_ZN8headless14HeadlessScreenC1ERKN3gfx4RectE = hidden unnamed_addr alias void (%"class.headless::HeadlessScreen"*, %"class.gfx::Rect"*), void (%"class.headless::HeadlessScreen"*, %"class.gfx::Rect"*)* @_ZN8headless14HeadlessScreenC2ERKN3gfx4RectE

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %"class.headless::HeadlessScreen"* @_ZN8headless14HeadlessScreen6CreateERKN3gfx4SizeE(%"class.gfx::Size"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.display::Display", align 8
  %3 = alloca %"class.gfx::Rect", align 4
  %4 = tail call i8* @_Znwm(i64 120) #7
  %5 = bitcast i8* %4 to %"class.headless::HeadlessScreen"*
  %6 = bitcast %"class.gfx::Rect"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 0
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 1
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 1
  %10 = bitcast %"class.gfx::Size"* %0 to i64*
  %11 = bitcast %"class.gfx::Size"* %9 to i64*
  %12 = load i64, i64* %10, align 4
  store i64 %12, i64* %11, align 4
  %13 = bitcast i8* %4 to %"class.display::ScreenBase"*
  tail call void @_ZN7display10ScreenBaseC2Ev(%"class.display::ScreenBase"* nonnull %13) #8
  %14 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [25 x i8*] }, { [25 x i8*] }* @_ZTVN8headless14HeadlessScreenE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = bitcast %"class.display::Display"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 568, i8* nonnull %15) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %15, i8* align 8 bitcast ({ i64, %"class.gfx::Rect", %"class.gfx::Size", %"class.gfx::Rect", float, i32, { { { { i8, [3 x i8], %union.anon } } } }, i32, i32, %"class.gfx::Size", { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, [4 x i8], { { { { i8, [7 x i8], %union.anon.4 } } } } }, i32, i32, i8, [3 x i8], i32 }* @__const.HeadlessScreen.display to i8*), i64 568, i1 false) #8
  %16 = load i64, i64* @_ZZN8headless14HeadlessScreenC1ERKN3gfx4RectEE22synthesized_display_id, align 8
  %17 = add nsw i64 %16, 1
  store i64 %17, i64* @_ZZN8headless14HeadlessScreenC1ERKN3gfx4RectEE22synthesized_display_id, align 8
  call void @_ZN7display7DisplayC1El(%"class.display::Display"* nonnull %2, i64 %16) #8
  call void @_ZN7display7Display17SetScaleAndBoundsEfRKN3gfx4RectE(%"class.display::Display"* nonnull %2, float 1.000000e+00, %"class.gfx::Rect"* nonnull dereferenceable(16) %3) #8
  call void @_ZN7display10ScreenBase21ProcessDisplayChangedERKNS_7DisplayEb(%"class.display::ScreenBase"* nonnull %13, %"class.display::Display"* nonnull dereferenceable(568) %2, i1 zeroext true) #8
  call void @_ZN7display7DisplayD1Ev(%"class.display::Display"* nonnull %2) #8
  call void @llvm.lifetime.end.p0i8(i64 568, i8* nonnull %15) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8
  ret %"class.headless::HeadlessScreen"* %5
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare void @_ZN7display10ScreenBaseD2Ev(%"class.display::ScreenBase"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8headless14HeadlessScreenD2Ev(%"class.headless::HeadlessScreen"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.headless::HeadlessScreen", %"class.headless::HeadlessScreen"* %0, i64 0, i32 0
  tail call void @_ZN7display10ScreenBaseD2Ev(%"class.display::ScreenBase"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8headless14HeadlessScreenD0Ev(%"class.headless::HeadlessScreen"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.headless::HeadlessScreen", %"class.headless::HeadlessScreen"* %0, i64 0, i32 0
  tail call void @_ZN7display10ScreenBaseD2Ev(%"class.display::ScreenBase"* %2) #8
  %3 = bitcast %"class.headless::HeadlessScreen"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN8headless14HeadlessScreen20GetCursorScreenPointEv(%"class.headless::HeadlessScreen"* nocapture readnone) unnamed_addr #0 align 2 {
  %2 = tail call %"class.aura::Env"* @_ZN4aura3Env11GetInstanceEv() #8
  %3 = getelementptr inbounds %"class.aura::Env", %"class.aura::Env"* %2, i64 0, i32 9
  %4 = bitcast %"class.gfx::Point"* %3 to i64*
  %5 = load i64, i64* %4, align 4
  ret i64 %5
}

declare %"class.aura::Env"* @_ZN4aura3Env11GetInstanceEv() local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8headless14HeadlessScreen19IsWindowUnderCursorEPN4aura6WindowE(%"class.headless::HeadlessScreen"*, %"class.aura::Window"* readnone) unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to %"class.gfx::Point"*
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = bitcast %"class.headless::HeadlessScreen"* %0 to i64 (%"class.headless::HeadlessScreen"*)***
  %7 = load i64 (%"class.headless::HeadlessScreen"*)**, i64 (%"class.headless::HeadlessScreen"*)*** %6, align 8
  %8 = getelementptr inbounds i64 (%"class.headless::HeadlessScreen"*)*, i64 (%"class.headless::HeadlessScreen"*)** %7, i64 2
  %9 = load i64 (%"class.headless::HeadlessScreen"*)*, i64 (%"class.headless::HeadlessScreen"*)** %8, align 8
  %10 = tail call i64 %9(%"class.headless::HeadlessScreen"* %0) #8
  store i64 %10, i64* %3, align 8
  %11 = bitcast %"class.headless::HeadlessScreen"* %0 to %"class.aura::Window"* (%"class.headless::HeadlessScreen"*, %"class.gfx::Point"*)***
  %12 = load %"class.aura::Window"* (%"class.headless::HeadlessScreen"*, %"class.gfx::Point"*)**, %"class.aura::Window"* (%"class.headless::HeadlessScreen"*, %"class.gfx::Point"*)*** %11, align 8
  %13 = getelementptr inbounds %"class.aura::Window"* (%"class.headless::HeadlessScreen"*, %"class.gfx::Point"*)*, %"class.aura::Window"* (%"class.headless::HeadlessScreen"*, %"class.gfx::Point"*)** %12, i64 4
  %14 = load %"class.aura::Window"* (%"class.headless::HeadlessScreen"*, %"class.gfx::Point"*)*, %"class.aura::Window"* (%"class.headless::HeadlessScreen"*, %"class.gfx::Point"*)** %13, align 8
  %15 = call %"class.aura::Window"* %14(%"class.headless::HeadlessScreen"* %0, %"class.gfx::Point"* nonnull dereferenceable(8) %4) #8
  %16 = icmp eq %"class.aura::Window"* %15, %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  ret i1 %16
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.aura::Window"* @_ZN8headless14HeadlessScreen22GetWindowAtScreenPointERKN3gfx5PointE(%"class.headless::HeadlessScreen"* nocapture readnone, %"class.gfx::Point"* nocapture readnone dereferenceable(8)) unnamed_addr #6 align 2 {
  ret %"class.aura::Window"* null
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.aura::Window"* @_ZN8headless14HeadlessScreen28GetLocalProcessWindowAtPointERKN3gfx5PointERKNSt3__13setIPN4aura6WindowENS5_4lessIS9_EENS5_9allocatorIS9_EEEE(%"class.headless::HeadlessScreen"* nocapture readnone, %"class.gfx::Point"* nocapture readnone dereferenceable(8), %"class.std::__1::set.188"* nocapture readnone) unnamed_addr #6 align 2 {
  ret %"class.aura::Window"* null
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8headless14HeadlessScreen23GetDisplayNearestWindowEPN4aura6WindowE(%"class.display::Display"* noalias sret, %"class.headless::HeadlessScreen"*, %"class.aura::Window"* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.headless::HeadlessScreen", %"class.headless::HeadlessScreen"* %1, i64 0, i32 0
  %5 = bitcast %"class.headless::HeadlessScreen"* %1 to void (%"class.display::Display"*, %"class.display::ScreenBase"*)***
  %6 = load void (%"class.display::Display"*, %"class.display::ScreenBase"*)**, void (%"class.display::Display"*, %"class.display::ScreenBase"*)*** %5, align 8
  %7 = getelementptr inbounds void (%"class.display::Display"*, %"class.display::ScreenBase"*)*, void (%"class.display::Display"*, %"class.display::ScreenBase"*)** %6, i64 12
  %8 = load void (%"class.display::Display"*, %"class.display::ScreenBase"*)*, void (%"class.display::Display"*, %"class.display::ScreenBase"*)** %7, align 8
  tail call void %8(%"class.display::Display"* sret %0, %"class.display::ScreenBase"* %4) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8headless14HeadlessScreenC2ERKN3gfx4RectE(%"class.headless::HeadlessScreen"*, %"class.gfx::Rect"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.display::Display", align 8
  %4 = getelementptr inbounds %"class.headless::HeadlessScreen", %"class.headless::HeadlessScreen"* %0, i64 0, i32 0
  tail call void @_ZN7display10ScreenBaseC2Ev(%"class.display::ScreenBase"* %4) #8
  %5 = getelementptr inbounds %"class.headless::HeadlessScreen", %"class.headless::HeadlessScreen"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [25 x i8*] }, { [25 x i8*] }* @_ZTVN8headless14HeadlessScreenE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = bitcast %"class.display::Display"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 568, i8* nonnull %6) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 bitcast ({ i64, %"class.gfx::Rect", %"class.gfx::Size", %"class.gfx::Rect", float, i32, { { { { i8, [3 x i8], %union.anon } } } }, i32, i32, %"class.gfx::Size", { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, [4 x i8], { { { { i8, [7 x i8], %union.anon.4 } } } } }, i32, i32, i8, [3 x i8], i32 }* @__const.HeadlessScreen.display to i8*), i64 568, i1 false)
  %7 = load i64, i64* @_ZZN8headless14HeadlessScreenC1ERKN3gfx4RectEE22synthesized_display_id, align 8
  %8 = add nsw i64 %7, 1
  store i64 %8, i64* @_ZZN8headless14HeadlessScreenC1ERKN3gfx4RectEE22synthesized_display_id, align 8
  call void @_ZN7display7DisplayC1El(%"class.display::Display"* nonnull %3, i64 %7) #8
  call void @_ZN7display7Display17SetScaleAndBoundsEfRKN3gfx4RectE(%"class.display::Display"* nonnull %3, float 1.000000e+00, %"class.gfx::Rect"* dereferenceable(16) %1) #8
  call void @_ZN7display10ScreenBase21ProcessDisplayChangedERKNS_7DisplayEb(%"class.display::ScreenBase"* %4, %"class.display::Display"* nonnull dereferenceable(568) %3, i1 zeroext true) #8
  call void @_ZN7display7DisplayD1Ev(%"class.display::Display"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 568, i8* nonnull %6) #8
  ret void
}

declare void @_ZN7display10ScreenBaseC2Ev(%"class.display::ScreenBase"*) unnamed_addr #5

declare void @_ZN7display7DisplayC1El(%"class.display::Display"*, i64) unnamed_addr #5

declare void @_ZN7display7Display17SetScaleAndBoundsEfRKN3gfx4RectE(%"class.display::Display"*, float, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #5

declare void @_ZN7display10ScreenBase21ProcessDisplayChangedERKNS_7DisplayEb(%"class.display::ScreenBase"*, %"class.display::Display"* dereferenceable(568), i1 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7display7DisplayD1Ev(%"class.display::Display"*) unnamed_addr #3

declare i32 @_ZNK7display10ScreenBase14GetNumDisplaysEv(%"class.display::ScreenBase"*) unnamed_addr #5

declare dereferenceable(24) %"class.std::__1::vector"* @_ZNK7display10ScreenBase14GetAllDisplaysEv(%"class.display::ScreenBase"*) unnamed_addr #5

declare void @_ZNK7display6Screen21GetDisplayNearestViewEPN4aura6WindowE(%"class.display::Display"* sret, %"class.display::Screen"*, %"class.aura::Window"*) unnamed_addr #5

declare void @_ZNK7display10ScreenBase22GetDisplayNearestPointERKN3gfx5PointE(%"class.display::Display"* sret, %"class.display::ScreenBase"*, %"class.gfx::Point"* dereferenceable(8)) unnamed_addr #5

declare void @_ZNK7display10ScreenBase18GetDisplayMatchingERKN3gfx4RectE(%"class.display::Display"* sret, %"class.display::ScreenBase"*, %"class.gfx::Rect"* dereferenceable(16)) unnamed_addr #5

declare void @_ZNK7display10ScreenBase17GetPrimaryDisplayEv(%"class.display::Display"* sret, %"class.display::ScreenBase"*) unnamed_addr #5

declare void @_ZN7display6Screen23SetScreenSaverSuspendedEb(%"class.display::Screen"*, i1 zeroext) unnamed_addr #5

declare zeroext i1 @_ZNK7display6Screen19IsScreenSaverActiveEv(%"class.display::Screen"*) unnamed_addr #5

declare i64 @_ZNK7display6Screen17CalculateIdleTimeEv(%"class.display::Screen"*) unnamed_addr #5

declare void @_ZN7display10ScreenBase11AddObserverEPNS_15DisplayObserverE(%"class.display::ScreenBase"*, %"class.display::DisplayObserver"*) unnamed_addr #5

declare void @_ZN7display10ScreenBase14RemoveObserverEPNS_15DisplayObserverE(%"class.display::ScreenBase"*, %"class.display::DisplayObserver"*) unnamed_addr #5

declare { i64, i64 } @_ZNK7display6Screen23ScreenToDIPRectInWindowEPN4aura6WindowERKN3gfx4RectE(%"class.display::Screen"*, %"class.aura::Window"*, %"class.gfx::Rect"* dereferenceable(16)) unnamed_addr #5

declare { i64, i64 } @_ZNK7display6Screen23DIPToScreenRectInWindowEPN4aura6WindowERKN3gfx4RectE(%"class.display::Screen"*, %"class.aura::Window"*, %"class.gfx::Rect"* dereferenceable(16)) unnamed_addr #5

declare void @_ZN7display10ScreenBase26SetPanelRotationForTestingElNS_7Display8RotationE(%"class.display::ScreenBase"*, i64, i32) unnamed_addr #5

declare void @_ZN7display6Screen19GetCurrentWorkspaceEv(%"class.std::__1::basic_string"* sret, %"class.display::Screen"*) unnamed_addr #5

declare void @_ZN7display6Screen26GetGpuExtraInfoAsListValueERKN3gfx12GpuExtraInfoE(%"class.base::Value"* sret, %"class.display::Screen"*, %"struct.gfx::GpuExtraInfo"* dereferenceable(48)) unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
