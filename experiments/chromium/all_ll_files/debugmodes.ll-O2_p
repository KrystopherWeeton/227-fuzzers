; ModuleID = '../../third_party/libaom/source/libaom/av1/common/debugmodes.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/debugmodes.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%union.int_mv = type { i32 }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.mv = type { i16, i16 }

@.str = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"Partitions:\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Modes:\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"Ref frame:\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"Transform:\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"UV Modes:\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"Skips:\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"S \00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"%2d \00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"Vectors \00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"V \00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"%4d:%4d \00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"%c \00", align 1
@.str.17 = private unnamed_addr constant [29 x i8] c"(Frame %u, Show:%d, Q:%d): \0A\00", align 1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @av1_print_modes_and_motion_vectors(%struct.AV1Common* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %3 = tail call %struct._IO_FILE* @fopen64(i8* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %4 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 9
  %5 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %4, align 8
  %6 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 4
  %9 = load i32, i32* %8, align 8
  tail call fastcc void @print_mi_data(%struct.AV1Common* %0, %struct._IO_FILE* %3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i64 0)
  tail call fastcc void @print_mi_data(%struct.AV1Common* %0, %struct._IO_FILE* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i64 2)
  tail call fastcc void @print_mi_data(%struct.AV1Common* %0, %struct._IO_FILE* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i64 16)
  tail call fastcc void @print_mi_data(%struct.AV1Common* %0, %struct._IO_FILE* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 153)
  tail call fastcc void @print_mi_data(%struct.AV1Common* %0, %struct._IO_FILE* %3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i64 3)
  %10 = tail call i64 @fwrite(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i64 6, i64 1, %struct._IO_FILE* %3)
  %11 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 0, i32 4
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 17
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 22, i32 0
  %16 = load i32, i32* %15, align 16
  %17 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.17, i64 0, i64 0), i32 %12, i32 %14, i32 %16) #3
  %18 = icmp sgt i32 %7, 0
  br i1 %18, label %19, label %57

19:                                               ; preds = %2
  %20 = icmp sgt i32 %9, 0
  %21 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 11
  br label %33

22:                                               ; preds = %37
  %23 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %3)
  %24 = tail call i64 @fwrite(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %3)
  %25 = load i32, i32* %11, align 4
  %26 = load i32, i32* %13, align 8
  %27 = load i32, i32* %15, align 16
  %28 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.17, i64 0, i64 0), i32 %25, i32 %26, i32 %27) #3
  br i1 %18, label %29, label %64

29:                                               ; preds = %22
  %30 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %4, align 8
  %31 = icmp sgt i32 %9, 0
  %32 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 11
  br label %67

33:                                               ; preds = %37, %19
  %34 = phi i32 [ 0, %19 ], [ %44, %37 ]
  %35 = phi %struct.MB_MODE_INFO** [ %5, %19 ], [ %43, %37 ]
  %36 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %3)
  br i1 %20, label %46, label %37

37:                                               ; preds = %46, %33
  %38 = phi %struct.MB_MODE_INFO** [ %35, %33 ], [ %54, %46 ]
  %39 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %3)
  %40 = load i32, i32* %21, align 4
  %41 = sub nsw i32 %40, %9
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %38, i64 %42
  %44 = add nuw nsw i32 %34, 1
  %45 = icmp eq i32 %44, %7
  br i1 %45, label %22, label %33

46:                                               ; preds = %33, %46
  %47 = phi i32 [ %55, %46 ], [ 0, %33 ]
  %48 = phi %struct.MB_MODE_INFO** [ %54, %46 ], [ %35, %33 ]
  %49 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %48, align 8
  %50 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %49, i64 0, i32 23
  %51 = load i8, i8* %50, align 8
  %52 = sext i8 %51 to i32
  %53 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i32 %52)
  %54 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %48, i64 1
  %55 = add nuw nsw i32 %47, 1
  %56 = icmp eq i32 %55, %9
  br i1 %56, label %37, label %46

57:                                               ; preds = %2
  %58 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %3)
  %59 = tail call i64 @fwrite(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %3)
  %60 = load i32, i32* %11, align 4
  %61 = load i32, i32* %13, align 8
  %62 = load i32, i32* %15, align 16
  %63 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.17, i64 0, i64 0), i32 %60, i32 %61, i32 %62) #3
  br label %64

64:                                               ; preds = %71, %57, %22
  %65 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %3)
  %66 = tail call i32 @fclose(%struct._IO_FILE* %3)
  ret void

67:                                               ; preds = %71, %29
  %68 = phi i32 [ 0, %29 ], [ %78, %71 ]
  %69 = phi %struct.MB_MODE_INFO** [ %30, %29 ], [ %77, %71 ]
  %70 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %3)
  br i1 %31, label %80, label %71

71:                                               ; preds = %80, %67
  %72 = phi %struct.MB_MODE_INFO** [ %69, %67 ], [ %93, %80 ]
  %73 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %3)
  %74 = load i32, i32* %32, align 4
  %75 = sub nsw i32 %74, %9
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %72, i64 %76
  %78 = add nuw nsw i32 %68, 1
  %79 = icmp eq i32 %78, %7
  br i1 %79, label %64, label %67

80:                                               ; preds = %67, %80
  %81 = phi i32 [ %94, %80 ], [ 0, %67 ]
  %82 = phi %struct.MB_MODE_INFO** [ %93, %80 ], [ %69, %67 ]
  %83 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %82, align 8
  %84 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %83, i64 0, i32 5, i64 0
  %85 = bitcast %union.int_mv* %84 to %struct.mv*
  %86 = bitcast %union.int_mv* %84 to i16*
  %87 = load i16, i16* %86, align 8
  %88 = sext i16 %87 to i32
  %89 = getelementptr inbounds %struct.mv, %struct.mv* %85, i64 0, i32 1
  %90 = load i16, i16* %89, align 2
  %91 = sext i16 %90 to i32
  %92 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0), i32 %88, i32 %91)
  %93 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %82, i64 1
  %94 = add nuw nsw i32 %81, 1
  %95 = icmp eq i32 %94, %9
  br i1 %95, label %71, label %80
}

; Function Attrs: nofree nounwind
declare noalias %struct._IO_FILE* @fopen64(i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @print_mi_data(%struct.AV1Common* nocapture readonly, %struct._IO_FILE* nocapture, i8* nocapture readonly, i64) unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 9
  %6 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %5, align 8
  %7 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = load i8, i8* %2, align 1
  %12 = tail call i32 @fputs(i8* %2, %struct._IO_FILE* %1) #3
  %13 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 0, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 17
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 22, i32 0
  %18 = load i32, i32* %17, align 16
  %19 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.17, i64 0, i64 0), i32 %14, i32 %16, i32 %18) #3
  %20 = icmp sgt i32 %8, 0
  br i1 %20, label %21, label %25

21:                                               ; preds = %4
  %22 = sext i8 %11 to i32
  %23 = icmp sgt i32 %10, 0
  %24 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 11
  br label %27

25:                                               ; preds = %31, %4
  %26 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %1)
  ret void

27:                                               ; preds = %31, %21
  %28 = phi i32 [ 0, %21 ], [ %38, %31 ]
  %29 = phi %struct.MB_MODE_INFO** [ %6, %21 ], [ %37, %31 ]
  %30 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i64 0, i64 0), i32 %22)
  br i1 %23, label %40, label %31

31:                                               ; preds = %40, %27
  %32 = phi %struct.MB_MODE_INFO** [ %29, %27 ], [ %49, %40 ]
  %33 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %1)
  %34 = load i32, i32* %24, align 4
  %35 = sub nsw i32 %34, %10
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %32, i64 %36
  %38 = add nuw nsw i32 %28, 1
  %39 = icmp eq i32 %38, %8
  br i1 %39, label %25, label %27

40:                                               ; preds = %27, %40
  %41 = phi i32 [ %50, %40 ], [ 0, %27 ]
  %42 = phi %struct.MB_MODE_INFO** [ %49, %40 ], [ %29, %27 ]
  %43 = bitcast %struct.MB_MODE_INFO** %42 to i8**
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 %3
  %46 = load i8, i8* %45, align 1
  %47 = sext i8 %46 to i32
  %48 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i32 %47)
  %49 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %42, i64 1
  %50 = add nuw nsw i32 %41, 1
  %51 = icmp eq i32 %50, %10
  br i1 %51, label %31, label %40
}

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @av1_print_uncompressed_frame_header(i8* nocapture, i32, i8* nocapture readonly) local_unnamed_addr #0 {
  %4 = tail call %struct._IO_FILE* @fopen64(i8* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0))
  %5 = sext i32 %1 to i64
  %6 = tail call i64 @fwrite(i8* %0, i64 %5, i64 1, %struct._IO_FILE* %4)
  %7 = tail call i32 @fseek(%struct._IO_FILE* %4, i64 1, i32 0)
  %8 = tail call i32 @fputc(i32 0, %struct._IO_FILE* %4)
  %9 = tail call i32 @fclose(%struct._IO_FILE* %4)
  ret void
}

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare i32 @fseek(%struct._IO_FILE* nocapture, i64, i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @av1_print_frame_contexts(%struct.frame_contexts* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %3 = tail call %struct._IO_FILE* @fopen64(i8* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0))
  %4 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %0, i64 0, i32 0, i64 0, i64 0, i64 0
  br label %5

5:                                                ; preds = %5, %2
  %6 = phi i32 [ 0, %2 ], [ %12, %5 ]
  %7 = phi i16* [ %4, %2 ], [ %8, %5 ]
  %8 = getelementptr inbounds i16, i16* %7, i64 1
  %9 = load i16, i16* %7, align 2
  %10 = zext i16 %9 to i32
  %11 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0), i32 %10)
  %12 = add nuw nsw i32 %6, 1
  %13 = icmp eq i32 %12, 10632
  br i1 %13, label %14, label %5

14:                                               ; preds = %5
  %15 = tail call i32 @fclose(%struct._IO_FILE* %3)
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @fputs(i8* nocapture readonly, %struct._IO_FILE* nocapture) local_unnamed_addr #2

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
