; ModuleID = '../../third_party/pdfium/xfa/fxfa/parser/xfa_document_datamerger_imp.cpp'
source_filename = "../../third_party/pdfium/xfa/fxfa/parser/xfa_document_datamerger_imp.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CXFA_Node = type { %class.CXFA_Object, %"class.fxjs::GCedTreeNodeMixin", i32, i8, i8, i8, %"class.pdfium::span.2", %"class.pdfium::span.4", i32, %"class.fxcrt::UnownedPtr.6", i8, i8, i8, i32, %"class.cppgc::internal::BasicMember.1", %"class.std::__1::vector", %"class.cppgc::internal::BasicMember.8", %"class.cppgc::internal::BasicMember.9" }
%class.CXFA_Object = type { i32 (...)**, i32, i16, %"class.fxcrt::StringViewTemplate", i32, %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember.0" }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.cppgc::internal::BasicMember" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::MemberBase" = type { i8* }
%"class.cppgc::internal::BasicMember.0" = type { %"class.cppgc::internal::MemberBase" }
%"class.fxjs::GCedTreeNodeMixin" = type { %"class.cppgc::GarbageCollectedMixin", %"class.fxcrt::TreeNode" }
%"class.cppgc::GarbageCollectedMixin" = type { i32 (...)** }
%"class.fxcrt::TreeNode" = type { i32 (...)**, %"class.cppgc::internal::BasicMember.1", %"class.cppgc::internal::BasicMember.1", %"class.cppgc::internal::BasicMember.1", %"class.cppgc::internal::BasicMember.1", %"class.cppgc::internal::BasicMember.1" }
%"class.pdfium::span.2" = type { %"class.fxcrt::UnownedPtr.3", i64 }
%"class.fxcrt::UnownedPtr.3" = type { %"struct.CXFA_Node::PropertyData"* }
%"struct.CXFA_Node::PropertyData" = type { i16, i8, i8 }
%"class.pdfium::span.4" = type { %"class.fxcrt::UnownedPtr.5", i64 }
%"class.fxcrt::UnownedPtr.5" = type { %"struct.CXFA_Node::AttributeData"* }
%"struct.CXFA_Node::AttributeData" = type { i16, i8, i8* }
%"class.fxcrt::UnownedPtr.6" = type { %class.CFX_XMLNode* }
%class.CFX_XMLNode = type opaque
%"class.cppgc::internal::BasicMember.1" = type { %"class.cppgc::internal::MemberBase" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.cppgc::internal::BasicMember.1"*, %"class.cppgc::internal::BasicMember.1"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.cppgc::internal::BasicMember.1"* }
%"class.cppgc::internal::BasicMember.8" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.9" = type { %"class.cppgc::internal::MemberBase" }
%class.CXFA_Document = type { %"class.fxcrt::UnownedPtr.11", %"class.cppgc::internal::BasicMember.12", %"class.cppgc::internal::BasicMember.13", %"class.cppgc::internal::BasicMember.1", %"class.std::__1::unique_ptr", %"class.cppgc::internal::BasicMember.17", %"class.cppgc::internal::BasicMember.18", %"class.cppgc::internal::BasicMember.19", %"class.cppgc::internal::BasicMember.20", %"class.cppgc::internal::BasicMember.21", %"class.cppgc::internal::BasicMember.22", %"class.cppgc::internal::BasicMember.23", %"class.cppgc::internal::BasicMember.24", %"class.std::__1::map", %"class.std::__1::vector", i32, %"class.pdfium::Optional", i8, i8 }
%"class.fxcrt::UnownedPtr.11" = type { %"class.cppgc::Heap"* }
%"class.cppgc::Heap" = type { i32 (...)** }
%"class.cppgc::internal::BasicMember.12" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.13" = type { %"class.cppgc::internal::MemberBase" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %class.CFXJSE_Engine* }
%class.CFXJSE_Engine = type opaque
%"class.cppgc::internal::BasicMember.17" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.18" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.19" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.20" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.21" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.22" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.23" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.24" = type { %"class.cppgc::internal::MemberBase" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.25", %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { i64 }
%"class.pdfium::Optional" = type { %"class.pdfium::internal::OptionalBase" }
%"class.pdfium::internal::OptionalBase" = type { %"struct.pdfium::internal::OptionalStorage" }
%"struct.pdfium::internal::OptionalStorage" = type { %"struct.pdfium::internal::OptionalStorageBase" }
%"struct.pdfium::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { %"struct.pdfium::internal::DummyUnionMember" }
%"struct.pdfium::internal::DummyUnionMember" = type { i8 }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { %class.CXFA_Node**, %class.CXFA_Node**, %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %class.CXFA_Node** }

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_Z30XFA_DataMerge_NeedGenerateFormP9CXFA_Nodeb(%class.CXFA_Node* nocapture readonly, i1 zeroext) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %0, i64 0, i32 0, i32 2
  %4 = load i16, i16* %3, align 4
  %5 = icmp eq i16 %4, 285
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %0, i64 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 8
  br i1 %9, label %16, label %10

10:                                               ; preds = %6
  %11 = icmp eq i16 %4, 265
  %12 = icmp eq i16 %4, 295
  %13 = and i1 %12, %1
  %14 = or i1 %11, %13
  %15 = xor i1 %14, true
  ret i1 %15

16:                                               ; preds = %6, %2
  %17 = phi i1 [ true, %2 ], [ false, %6 ]
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.CXFA_Node* @_Z33XFA_DataMerge_FindFormDOMInstanceP13CXFA_Document11XFA_ElementjP9CXFA_Node(%class.CXFA_Document* nocapture readnone, i16 signext, i32, %class.CXFA_Node* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %3, i64 0, i32 1, i32 1, i32 2
  %6 = bitcast %"class.cppgc::internal::BasicMember.1"* %5 to %class.CXFA_Node**
  %7 = load %class.CXFA_Node*, %class.CXFA_Node** %6, align 8
  %8 = icmp eq %class.CXFA_Node* %7, null
  br i1 %8, label %25, label %9

9:                                                ; preds = %4, %20
  %10 = phi %class.CXFA_Node* [ %23, %20 ], [ %7, %4 ]
  %11 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %10, i64 0, i32 0, i32 2
  %12 = load i16, i16* %11, align 4
  %13 = icmp eq i16 %12, %1
  br i1 %13, label %14, label %20

14:                                               ; preds = %9
  %15 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %10, i64 0, i32 13
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, %2
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  %19 = tail call zeroext i1 @_ZNK9CXFA_Node7HasFlagE12XFA_NodeFlag(%class.CXFA_Node* nonnull %10, i8 zeroext 32) #4
  br i1 %19, label %25, label %20

20:                                               ; preds = %9, %14, %18
  %21 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %10, i64 0, i32 1, i32 1, i32 4
  %22 = bitcast %"class.cppgc::internal::BasicMember.1"* %21 to %class.CXFA_Node**
  %23 = load %class.CXFA_Node*, %class.CXFA_Node** %22, align 8
  %24 = icmp eq %class.CXFA_Node* %23, null
  br i1 %24, label %25, label %9

25:                                               ; preds = %18, %20, %4
  %26 = phi %class.CXFA_Node* [ null, %4 ], [ null, %20 ], [ %10, %18 ]
  ret %class.CXFA_Node* %26
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.CXFA_Node* @_Z35XFA_NodeMerge_CloneOrMergeContainerP13CXFA_DocumentP9CXFA_NodeS2_bPNSt3__16vectorIS2_NS3_9allocatorIS2_EEEE(%class.CXFA_Document* nocapture readnone, %class.CXFA_Node*, %class.CXFA_Node*, i1 zeroext, %"class.std::__1::vector.33"*) local_unnamed_addr #1 {
  %6 = icmp eq %"class.std::__1::vector.33"* %4, null
  br i1 %6, label %7, label %32

7:                                                ; preds = %5
  %8 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %2, i64 0, i32 0, i32 2
  %9 = load i16, i16* %8, align 4
  %10 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %2, i64 0, i32 13
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %1, i64 0, i32 1, i32 1, i32 2
  %13 = bitcast %"class.cppgc::internal::BasicMember.1"* %12 to %class.CXFA_Node**
  %14 = load %class.CXFA_Node*, %class.CXFA_Node** %13, align 8
  %15 = icmp eq %class.CXFA_Node* %14, null
  br i1 %15, label %88, label %16

16:                                               ; preds = %7, %27
  %17 = phi %class.CXFA_Node* [ %30, %27 ], [ %14, %7 ]
  %18 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %17, i64 0, i32 0, i32 2
  %19 = load i16, i16* %18, align 4
  %20 = icmp eq i16 %19, %9
  br i1 %20, label %21, label %27

21:                                               ; preds = %16
  %22 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %17, i64 0, i32 13
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, %11
  br i1 %24, label %25, label %27

25:                                               ; preds = %21
  %26 = tail call zeroext i1 @_ZNK9CXFA_Node7HasFlagE12XFA_NodeFlag(%class.CXFA_Node* nonnull %17, i8 zeroext 32) #4
  br i1 %26, label %52, label %27

27:                                               ; preds = %25, %21, %16
  %28 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %17, i64 0, i32 1, i32 1, i32 4
  %29 = bitcast %"class.cppgc::internal::BasicMember.1"* %28 to %class.CXFA_Node**
  %30 = load %class.CXFA_Node*, %class.CXFA_Node** %29, align 8
  %31 = icmp eq %class.CXFA_Node* %30, null
  br i1 %31, label %88, label %16

32:                                               ; preds = %5
  %33 = getelementptr inbounds %"class.std::__1::vector.33", %"class.std::__1::vector.33"* %4, i64 0, i32 0, i32 0
  %34 = load %class.CXFA_Node**, %class.CXFA_Node*** %33, align 8
  %35 = getelementptr inbounds %"class.std::__1::vector.33", %"class.std::__1::vector.33"* %4, i64 0, i32 0, i32 1
  %36 = load %class.CXFA_Node**, %class.CXFA_Node*** %35, align 8
  %37 = icmp eq %class.CXFA_Node** %34, %36
  br i1 %37, label %88, label %38

38:                                               ; preds = %32
  %39 = ptrtoint %class.CXFA_Node** %36 to i64
  %40 = load %class.CXFA_Node*, %class.CXFA_Node** %34, align 8
  %41 = getelementptr inbounds %class.CXFA_Node*, %class.CXFA_Node** %34, i64 1
  %42 = ptrtoint %class.CXFA_Node** %41 to i64
  %43 = sub i64 %39, %42
  %44 = ashr exact i64 %43, 3
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %49, label %46

46:                                               ; preds = %38
  %47 = bitcast %class.CXFA_Node** %34 to i8*
  %48 = bitcast %class.CXFA_Node** %41 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 %43, i1 false) #4
  br label %49

49:                                               ; preds = %46, %38
  %50 = getelementptr inbounds %class.CXFA_Node*, %class.CXFA_Node** %34, i64 %44
  store %class.CXFA_Node** %50, %class.CXFA_Node*** %35, align 8
  %51 = icmp eq %class.CXFA_Node* %40, null
  br i1 %51, label %88, label %57

52:                                               ; preds = %25
  %53 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %17, i64 0, i32 0, i32 1
  %54 = load i32, i32* %53, align 8
  %55 = icmp eq i32 %54, 8
  br i1 %55, label %56, label %59

56:                                               ; preds = %52
  tail call void @_ZN9CXFA_Node20RemoveChildAndNotifyEPS_b(%class.CXFA_Node* %1, %class.CXFA_Node* nonnull %17, i1 zeroext true) #4
  br label %57

57:                                               ; preds = %49, %56
  %58 = phi %class.CXFA_Node* [ %17, %56 ], [ %40, %49 ]
  tail call void @_ZN9CXFA_Node20InsertChildAndNotifyEPS_S0_(%class.CXFA_Node* %1, %class.CXFA_Node* nonnull %58, %class.CXFA_Node* null) #4
  br label %59

59:                                               ; preds = %57, %52
  %60 = phi %class.CXFA_Node* [ %17, %52 ], [ %58, %57 ]
  tail call void @_ZN9CXFA_Node9ClearFlagEj(%class.CXFA_Node* nonnull %60, i32 32) #4
  tail call void @_ZN9CXFA_Node15SetTemplateNodeEPS_(%class.CXFA_Node* nonnull %60, %class.CXFA_Node* %2) #4
  br i1 %3, label %61, label %87

61:                                               ; preds = %59
  %62 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %60, i64 0, i32 0, i32 2
  %63 = load i16, i16* %62, align 4
  %64 = icmp eq i16 %63, 303
  br i1 %64, label %87, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %2, i64 0, i32 1, i32 1, i32 2
  %67 = bitcast %"class.cppgc::internal::BasicMember.1"* %66 to %class.CXFA_Node**
  %68 = load %class.CXFA_Node*, %class.CXFA_Node** %67, align 8
  %69 = icmp eq %class.CXFA_Node* %68, null
  br i1 %69, label %87, label %70

70:                                               ; preds = %65, %82
  %71 = phi %class.CXFA_Node* [ %85, %82 ], [ %68, %65 ]
  %72 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %71, i64 0, i32 0, i32 2
  %73 = load i16, i16* %72, align 4
  %74 = icmp eq i16 %73, 285
  br i1 %74, label %80, label %75

75:                                               ; preds = %70
  %76 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %71, i64 0, i32 0, i32 1
  %77 = load i32, i32* %76, align 8
  %78 = icmp eq i32 %77, 8
  br i1 %78, label %82, label %79

79:                                               ; preds = %75
  switch i16 %73, label %80 [
    i16 295, label %82
    i16 265, label %82
  ]

80:                                               ; preds = %79, %70
  %81 = tail call %class.CXFA_Node* @_Z35XFA_NodeMerge_CloneOrMergeContainerP13CXFA_DocumentP9CXFA_NodeS2_bPNSt3__16vectorIS2_NS3_9allocatorIS2_EEEE(%class.CXFA_Document* %0, %class.CXFA_Node* nonnull %60, %class.CXFA_Node* nonnull %71, i1 zeroext true, %"class.std::__1::vector.33"* null)
  br label %82

82:                                               ; preds = %79, %79, %75, %80
  %83 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %71, i64 0, i32 1, i32 1, i32 4
  %84 = bitcast %"class.cppgc::internal::BasicMember.1"* %83 to %class.CXFA_Node**
  %85 = load %class.CXFA_Node*, %class.CXFA_Node** %84, align 8
  %86 = icmp eq %class.CXFA_Node* %85, null
  br i1 %86, label %87, label %70

87:                                               ; preds = %82, %65, %61, %59
  tail call void @_ZN9CXFA_Node16SetFlagAndNotifyEj(%class.CXFA_Node* nonnull %60, i32 1) #4
  br label %112

88:                                               ; preds = %27, %7, %32, %49
  %89 = tail call %class.CXFA_Node* @_ZN9CXFA_Node19CloneTemplateToFormEb(%class.CXFA_Node* %2, i1 zeroext false) #4
  tail call void @_ZN9CXFA_Node20InsertChildAndNotifyEPS_S0_(%class.CXFA_Node* %1, %class.CXFA_Node* %89, %class.CXFA_Node* null) #4
  br i1 %3, label %90, label %112

90:                                               ; preds = %88
  %91 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %2, i64 0, i32 1, i32 1, i32 2
  %92 = bitcast %"class.cppgc::internal::BasicMember.1"* %91 to %class.CXFA_Node**
  %93 = load %class.CXFA_Node*, %class.CXFA_Node** %92, align 8
  %94 = icmp eq %class.CXFA_Node* %93, null
  br i1 %94, label %112, label %95

95:                                               ; preds = %90, %107
  %96 = phi %class.CXFA_Node* [ %110, %107 ], [ %93, %90 ]
  %97 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %96, i64 0, i32 0, i32 2
  %98 = load i16, i16* %97, align 4
  %99 = icmp eq i16 %98, 285
  br i1 %99, label %105, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %96, i64 0, i32 0, i32 1
  %102 = load i32, i32* %101, align 8
  %103 = icmp eq i32 %102, 8
  br i1 %103, label %107, label %104

104:                                              ; preds = %100
  switch i16 %98, label %105 [
    i16 295, label %107
    i16 265, label %107
  ]

105:                                              ; preds = %104, %95
  %106 = tail call %class.CXFA_Node* @_ZN9CXFA_Node19CloneTemplateToFormEb(%class.CXFA_Node* nonnull %96, i1 zeroext true) #4
  tail call void @_ZN9CXFA_Node20InsertChildAndNotifyEPS_S0_(%class.CXFA_Node* %89, %class.CXFA_Node* %106, %class.CXFA_Node* null) #4
  br label %107

107:                                              ; preds = %104, %104, %100, %105
  %108 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %96, i64 0, i32 1, i32 1, i32 4
  %109 = bitcast %"class.cppgc::internal::BasicMember.1"* %108 to %class.CXFA_Node**
  %110 = load %class.CXFA_Node*, %class.CXFA_Node** %109, align 8
  %111 = icmp eq %class.CXFA_Node* %110, null
  br i1 %111, label %112, label %95

112:                                              ; preds = %107, %90, %88, %87
  %113 = phi %class.CXFA_Node* [ %60, %87 ], [ %89, %88 ], [ %89, %90 ], [ %89, %107 ]
  ret %class.CXFA_Node* %113
}

declare void @_ZN9CXFA_Node20InsertChildAndNotifyEPS_S0_(%class.CXFA_Node*, %class.CXFA_Node*, %class.CXFA_Node*) local_unnamed_addr #2

declare void @_ZN9CXFA_Node20RemoveChildAndNotifyEPS_b(%class.CXFA_Node*, %class.CXFA_Node*, i1 zeroext) local_unnamed_addr #2

declare void @_ZN9CXFA_Node9ClearFlagEj(%class.CXFA_Node*, i32) local_unnamed_addr #2

declare void @_ZN9CXFA_Node15SetTemplateNodeEPS_(%class.CXFA_Node*, %class.CXFA_Node*) local_unnamed_addr #2

declare void @_ZN9CXFA_Node16SetFlagAndNotifyEj(%class.CXFA_Node*, i32) local_unnamed_addr #2

declare %class.CXFA_Node* @_ZN9CXFA_Node19CloneTemplateToFormEb(%class.CXFA_Node*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %class.CXFA_Node* @_Z27XFA_DataMerge_FindDataScopeP9CXFA_Node(%class.CXFA_Node*) local_unnamed_addr #1 {
  %2 = icmp eq %class.CXFA_Node* %0, null
  br i1 %2, label %22, label %3

3:                                                ; preds = %1, %11
  %4 = phi %class.CXFA_Node* [ %14, %11 ], [ %0, %1 ]
  %5 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %4, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 8
  br i1 %7, label %8, label %16

8:                                                ; preds = %3
  %9 = tail call %class.CXFA_Node* @_ZN9CXFA_Node11GetBindDataEv(%class.CXFA_Node* nonnull %4) #4
  %10 = icmp eq %class.CXFA_Node* %9, null
  br i1 %10, label %11, label %22

11:                                               ; preds = %8
  %12 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %4, i64 0, i32 1, i32 1, i32 1
  %13 = bitcast %"class.cppgc::internal::BasicMember.1"* %12 to %class.CXFA_Node**
  %14 = load %class.CXFA_Node*, %class.CXFA_Node** %13, align 8
  %15 = icmp eq %class.CXFA_Node* %14, null
  br i1 %15, label %16, label %3

16:                                               ; preds = %3, %11
  %17 = getelementptr inbounds %class.CXFA_Node, %class.CXFA_Node* %0, i64 0, i32 0, i32 5
  %18 = bitcast %"class.cppgc::internal::BasicMember"* %17 to %class.CXFA_Document**
  %19 = load %class.CXFA_Document*, %class.CXFA_Document** %18, align 8
  %20 = tail call %class.CXFA_Object* @_ZN13CXFA_Document12GetXFAObjectE12XFA_HashCode(%class.CXFA_Document* %19, i32 -1108759590) #4
  %21 = tail call %class.CXFA_Node* @_Z6ToNodeP11CXFA_Object(%class.CXFA_Object* %20) #4
  br label %22

22:                                               ; preds = %8, %1, %16
  %23 = phi %class.CXFA_Node* [ %21, %16 ], [ null, %1 ], [ %9, %8 ]
  ret %class.CXFA_Node* %23
}

declare %class.CXFA_Node* @_ZN9CXFA_Node11GetBindDataEv(%class.CXFA_Node*) local_unnamed_addr #2

declare %class.CXFA_Node* @_Z6ToNodeP11CXFA_Object(%class.CXFA_Object*) local_unnamed_addr #2

declare %class.CXFA_Object* @_ZN13CXFA_Document12GetXFAObjectE12XFA_HashCode(%class.CXFA_Document*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZNK9CXFA_Node7HasFlagE12XFA_NodeFlag(%class.CXFA_Node*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
