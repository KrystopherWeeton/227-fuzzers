; ModuleID = '../../third_party/libjxl/src/lib/jxl/blending.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/blending.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::PassesDecoderState" = type { %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"*, [3 x %"struct.jxl::Upsampler"], %"class.jxl::Image3", %"class.jxl::Image3", %"class.std::__1::vector.169", %"class.std::__1::vector.177", %"class.std::__1::vector.108", float, float, %"class.jxl::Image3", %"class.std::__1::vector.169", %"class.jxl::Image3", %"class.jxl::Image3", i8*, i64, i8, i8, %"class.std::__1::function", %"class.std::__1::vector.205", %"class.std::__1::vector.211", i64, %"struct.std::__1::atomic", %"class.std::__1::unique_ptr.219", %"class.std::__1::vector.225", %"struct.jxl::FilterWeights", %"class.jxl::GroupBorderAssigner", %"class.std::__1::vector.239", %"class.std::__1::vector.239", %"class.std::__1::vector.239", [4 x %"class.std::__1::vector.239"], %"class.std::__1::vector.169", %"class.std::__1::vector.239", %"struct.jxl::OutputEncodingInfo" }
%"struct.jxl::PassesSharedState" = type { %"struct.jxl::CodecMetadata"*, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.53", %"class.jxl::Plane", %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ImageFeatures", i64, %"class.std::__1::vector.9", %"class.jxl::Plane", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x %struct.anon.104], i64 }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.4" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.9", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.16", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameSize" = type { i32, i32 }
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane", i8*, i64 }
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr.23", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector.27" }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25", %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.25" = type { float* }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.48" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon.30, %"struct.jxl::DctQuantWeightParams", %union.anon.47 }>
%union.anon.30 = type { %"struct.std::__1::array.37", [4 x i8] }
%"struct.std::__1::array.37" = type { [3 x %"struct.std::__1::array.38"] }
%"struct.std::__1::array.38" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array", [4 x i8] }>
%"struct.std::__1::array" = type { [3 x %"struct.std::__1::array.29"] }
%"struct.std::__1::array.29" = type { [17 x float] }
%union.anon.47 = type { i8 }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.jxl::QuantEncoding"* }
%"class.jxl::Quantizer" = type { [4 x float], [4 x float], i32, i32, float, float, float, [3 x float], %"class.jxl::DequantMatrices"* }
%"class.jxl::Plane.53" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.54", %"class.jxl::Plane.54", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.54" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ImageFeatures" = type { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", %"class.jxl::Splines" }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::PatchDictionary" = type { %"struct.jxl::PassesSharedState"*, %"class.std::__1::vector.55", %"class.std::__1::vector.69", %"class.std::__1::vector.69" }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"*, %"class.std::__1::__compressed_pair.64" }
%"struct.jxl::PatchPosition" = type { i64, i64, %"class.std::__1::vector.57", %"struct.jxl::PatchReferencePosition" }
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"*, %"class.std::__1::__compressed_pair.59" }
%"struct.jxl::PatchBlending" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"struct.jxl::PatchBlending"* }
%"struct.jxl::PatchReferencePosition" = type { i64, i64, i64, i64, i64 }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.jxl::PatchPosition"* }
%"class.std::__1::vector.69" = type { %"class.std::__1::__vector_base.70" }
%"class.std::__1::__vector_base.70" = type { i64*, i64*, %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { i64* }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.76", %"class.std::__1::vector.90" }
%"class.std::__1::vector.76" = type { %"class.std::__1::__vector_base.77" }
%"class.std::__1::__vector_base.77" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.85" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.78", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.80" }
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.92" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"struct.jxl::Spline::Point"* }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { i32*, i32*, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i32* }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.40"], %"class.std::__1::vector.9", %"class.std::__1::vector.98", i64, i64 }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { i32*, i32*, %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { i32* }
%"class.std::__1::vector.98" = type { %"class.std::__1::__vector_base.99" }
%"class.std::__1::__vector_base.99" = type { i8*, i8*, %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem" }
%struct.anon.104 = type <{ %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, i8, [7 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.105", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.169", i64 }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.108", %"class.std::__1::vector.115", %"class.std::__1::vector.108", %"class.std::__1::vector.122", %"class.std::__1::vector.130", %"class.std::__1::vector.139", %"class.std::__1::vector.153", %"class.std::__1::vector.98", %"class.std::__1::vector.108", %"class.std::__1::vector.98", i32, i8, %"class.std::__1::vector.98" }
%"class.std::__1::vector.115" = type { %"class.std::__1::__vector_base.116" }
%"class.std::__1::__vector_base.116" = type { i32*, i32*, %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { i32* }
%"class.std::__1::vector.122" = type { %"class.std::__1::__vector_base.123" }
%"class.std::__1::__vector_base.123" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.125" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.124", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.124" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.130" = type { %"class.std::__1::__vector_base.131" }
%"class.std::__1::__vector_base.131" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.134" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.132", %"struct.std::__1::array.133", i32, i8, [3 x i8] }>
%"struct.std::__1::array.132" = type { [17 x i32] }
%"struct.std::__1::array.133" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.148" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.141" }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { i16*, i16*, %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { i16* }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.153" = type { %"class.std::__1::__vector_base.154" }
%"class.std::__1::__vector_base.154" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.163" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.155", i32, %"class.std::__1::vector.9", %"class.std::__1::vector.156" }
%"struct.std::__1::array.155" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.158" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"struct.jxl::Upsampler" = type { i64, [4 x [4 x [5 x [5 x float]]]] }
%"class.std::__1::vector.177" = type { %"class.std::__1::__vector_base.178" }
%"class.std::__1::__vector_base.178" = type { %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"*, %"class.std::__1::__compressed_pair.200" }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector.179", %"class.std::__1::vector.193", %"class.std::__1::vector.40", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::vector.179" = type { %"class.std::__1::__vector_base.180" }
%"class.std::__1::__vector_base.180" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.188" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.181" }
%"class.std::__1::vector.181" = type { %"class.std::__1::__vector_base.182" }
%"class.std::__1::__vector_base.182" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.183" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.183" = type { %"struct.std::__1::__compressed_pair_elem.184" }
%"struct.std::__1::__compressed_pair_elem.184" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::vector.193" = type { %"class.std::__1::__vector_base.194" }
%"class.std::__1::__vector_base.194" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.195" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"struct.jxl::ANSCode"* }
%"class.std::__1::vector.108" = type { %"class.std::__1::__vector_base.109" }
%"class.std::__1::__vector_base.109" = type { %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"*, %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.std::__1::vector.98"* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane.97"] }
%"class.jxl::Plane.97" = type { %"struct.jxl::PlaneBase" }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::vector.205" = type { %"class.std::__1::__vector_base.206" }
%"class.std::__1::__vector_base.206" = type { float*, float*, %"class.std::__1::__compressed_pair.207" }
%"class.std::__1::__compressed_pair.207" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"class.std::__1::vector.211" = type { %"class.std::__1::__vector_base.212" }
%"class.std::__1::__vector_base.212" = type { %"class.std::__1::vector.205"*, %"class.std::__1::vector.205"*, %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.std::__1::vector.205"* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.218" }
%"struct.std::__1::__atomic_base.218" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr.219" = type { %"class.std::__1::__compressed_pair.220" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"class.jxl::ACImage"* }
%"class.jxl::ACImage" = type { i32 (...)** }
%"class.std::__1::vector.225" = type { %"class.std::__1::__vector_base.226" }
%"class.std::__1::__vector_base.226" = type { %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"*, %"class.std::__1::__compressed_pair.227" }
%"class.jxl::FilterPipeline" = type { %"class.jxl::Image3", i64, [4 x %"struct.jxl::FilterPipeline::FilterStep"], i64, i8, i64 }
%"struct.jxl::FilterPipeline::FilterStep" = type { %"class.jxl::Image3"*, i64, %"class.jxl::Image3"*, i64, %"class.jxl::Rect", %"class.jxl::Rect", %"class.jxl::Rect", i64, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, %"struct.jxl::FilterDefinition", i64 }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"struct.jxl::FilterRows" = type <{ [3 x float*], [7 x i64], [3 x float*], float*, i32, [4 x i8] }>
%"struct.jxl::FilterDefinition" = type { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)*, i64 }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.jxl::FilterPipeline"* }
%"struct.jxl::FilterWeights" = type { [9 x float], %"class.jxl::Plane.97" }
%"class.jxl::GroupBorderAssigner" = type { %"struct.jxl::FrameDimensions", %"class.std::__1::unique_ptr.232" }
%"class.std::__1::unique_ptr.232" = type { %"class.std::__1::__compressed_pair.233" }
%"class.std::__1::__compressed_pair.233" = type { %"struct.std::__1::__compressed_pair_elem.234" }
%"struct.std::__1::__compressed_pair_elem.234" = type { %"struct.std::__1::atomic.235"* }
%"struct.std::__1::atomic.235" = type opaque
%"class.std::__1::vector.169" = type { %"class.std::__1::__vector_base.170" }
%"class.std::__1::__vector_base.170" = type { %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"*, %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.jxl::Plane.97"* }
%"class.std::__1::vector.239" = type { %"class.std::__1::__vector_base.240" }
%"class.std::__1::__vector_base.240" = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.std::__1::__compressed_pair.241" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"class.jxl::Image3"* }
%"struct.jxl::OutputEncodingInfo" = type <{ %"struct.jxl::ColorEncoding", float, %"struct.jxl::OpsinParams", i8, i8, [2 x i8] }>
%"struct.jxl::OpsinParams" = type { [36 x float], [4 x float], [4 x float], [4 x float] }
%"class.jxl::ImageBlender" = type { %"struct.jxl::BlendingInfo", %"class.jxl::ImageBundle"*, %"class.jxl::Rect", %"class.jxl::Rect", i8, %"class.std::__1::vector.16"*, %"struct.jxl::FrameOrigin" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.jxl::ImageBlender::RectBlender" = type { i8, %"class.jxl::Rect", %"class.jxl::Rect", %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, %"class.std::__1::vector.246", %"class.std::__1::vector.253", %"class.std::__1::vector.57" }
%"class.std::__1::vector.246" = type { %"class.std::__1::__vector_base.247" }
%"class.std::__1::__vector_base.247" = type { float**, float**, %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { float** }
%"class.std::__1::vector.253" = type { %"class.std::__1::__vector_base.254" }
%"class.std::__1::__vector_base.254" = type { float**, float**, %"class.std::__1::__compressed_pair.255" }
%"class.std::__1::__compressed_pair.255" = type { %"struct.std::__1::__compressed_pair_elem.256" }
%"struct.std::__1::__compressed_pair_elem.256" = type { float** }
%"struct.jxl::AlphaBlendingInputLayer" = type { float*, float*, float*, float* }
%"struct.jxl::AlphaBlendingOutput" = type { float*, float*, float*, float* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::allocator.166" = type { i8 }

$_ZN3jxl11ImageBundleaSEOS0_ = comdat any

$_ZN3jxl11ImageBundleD2Ev = comdat any

$_ZNK3jxl11ImageBundle4CopyEv = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm = comdat any

$_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_ = comdat any

$_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_ = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_ = comdat any

$_ZN3jxl4jpeg8JPEGDataC2ERKS1_ = comdat any

$_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_ = comdat any

$_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEEC2ERKS6_ = comdat any

$_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRS3_EEEvPT_DpOT0_ = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_ = comdat any

$_ZNSt3__16vectorIN3jxl13PatchBlendingENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIPKfNS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIPfNS_9allocatorIS1_EEE8__appendEm = comdat any

@.str.1 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/blending.cc\00", align 1
@.str.6 = private unnamed_addr constant [31 x i8] c"%s:%d: JXL_ABORT: Unreachable\0A\00", align 1
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.7 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/image_ops.h\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c"SameSize(rect_from, rect_to)\00", align 1
@_ZTVN3jxl4jpeg8JPEGDataE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.11 = private unnamed_addr constant [38 x i8] c"%s:%d: JXL_ABORT: Invalid blend mode\0A\00", align 1
@.str.12 = private unnamed_addr constant [20 x i8] c"SameSize(from, *to)\00", align 1

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN3jxl12ImageBlender13NeedsBlendingEPNS_18PassesDecoderStateE(%"struct.jxl::PassesDecoderState"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 1
  %3 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %2, align 8
  %4 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %3, i64 0, i32 1, i32 3
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %33 [
    i32 0, label %6
    i32 3, label %6
  ]

6:                                                ; preds = %1, %1
  %7 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %3, i64 0, i32 1, i32 18, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %3, i64 0, i32 1, i32 19, i32 0, i32 0
  %12 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %11, align 8
  %13 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %3, i64 0, i32 1, i32 19, i32 0, i32 1
  %14 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %13, align 8
  %15 = icmp eq %"struct.jxl::BlendingInfo"* %12, %14
  br i1 %15, label %16, label %24

16:                                               ; preds = %24, %6
  %17 = phi i8 [ %10, %6 ], [ %30, %24 ]
  %18 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %3, i64 0, i32 1, i32 13
  %19 = load i8, i8* %18, align 8, !range !2
  %20 = icmp ne i8 %19, 0
  %21 = and i8 %17, 1
  %22 = icmp eq i8 %21, 0
  %23 = or i1 %22, %20
  ret i1 %23

24:                                               ; preds = %6, %24
  %25 = phi i8 [ %30, %24 ], [ %10, %6 ]
  %26 = phi %"struct.jxl::BlendingInfo"* [ %31, %24 ], [ %12, %6 ]
  %27 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %26, i64 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i8 %25, i8 0
  %31 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %26, i64 1
  %32 = icmp eq %"struct.jxl::BlendingInfo"* %31, %14
  br i1 %32, label %16, label %24

33:                                               ; preds = %1
  ret i1 false
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl12ImageBlender15PrepareBlendingEPNS_18PassesDecoderStateENS_11FrameOriginEmmRKNS_13ColorEncodingEPNS_11ImageBundleE(%"class.jxl::ImageBlender"* nocapture, %"struct.jxl::PassesDecoderState"* nocapture readonly, i64, i64, i64, %"struct.jxl::ColorEncoding"* dereferenceable(152), %"class.jxl::ImageBundle"*) local_unnamed_addr #2 align 2 {
  %8 = alloca %"class.jxl::ImageBundle", align 8
  %9 = alloca %"class.jxl::Image3", align 8
  %10 = alloca %"class.std::__1::vector.169", align 8
  %11 = alloca %"class.jxl::Plane.97", align 8
  %12 = alloca %"class.jxl::ImageBundle", align 8
  %13 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %1, i64 0, i32 1
  %14 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %13, align 8
  %15 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %0, i64 0, i32 0, i32 1
  %16 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %14, i64 0, i32 1, i32 18, i32 1
  %17 = bitcast i32* %15 to i8*
  %18 = bitcast i32* %16 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 25, i1 false) #9
  %19 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %14, i64 0, i32 0
  %20 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %19, align 8
  %21 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %20, i64 0, i32 0, i32 17
  %22 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %14, i64 0, i32 1, i32 19
  %23 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %0, i64 0, i32 5
  store %"class.std::__1::vector.16"* %22, %"class.std::__1::vector.16"** %23, align 8
  %24 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %14, i64 0, i32 1, i32 25
  %25 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %24, align 8
  %26 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %25, i64 0, i32 1
  %27 = tail call i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"* %26) #9
  %28 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %24, align 8
  %29 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %28, i64 0, i32 1, i32 1
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %37, label %32

32:                                               ; preds = %7
  %33 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %28, i64 0, i32 1, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = shl i32 %34, 3
  %36 = add i32 %35, 8
  br label %40

37:                                               ; preds = %7
  %38 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %28, i64 0, i32 1, i32 3
  %39 = load i32, i32* %38, align 8
  br label %40

40:                                               ; preds = %32, %37
  %41 = phi i32 [ %36, %32 ], [ %39, %37 ]
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %0, i64 0, i32 2, i32 0
  %44 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %0, i64 0, i32 2, i32 1
  %45 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %0, i64 0, i32 2, i32 2
  %46 = bitcast i64* %43 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 16, i1 false)
  store i64 %27, i64* %45, align 8
  %47 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %0, i64 0, i32 2, i32 3
  store i64 %42, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %0, i64 0, i32 6
  %49 = bitcast %"struct.jxl::FrameOrigin"* %48 to i64*
  store i64 %2, i64* %49, align 8
  %50 = trunc i64 %2 to i32
  %51 = icmp sgt i32 %50, 0
  %52 = select i1 %51, i32 %50, i32 0
  %53 = lshr i64 %2, 32
  %54 = trunc i64 %53 to i32
  %55 = icmp sgt i32 %54, 0
  %56 = select i1 %55, i32 %54, i32 0
  %57 = trunc i64 %3 to i32
  %58 = icmp slt i32 %50, 0
  %59 = select i1 %58, i32 %50, i32 0
  %60 = add nsw i32 %59, %57
  %61 = trunc i64 %4 to i32
  %62 = icmp slt i32 %54, 0
  %63 = select i1 %62, i32 %54, i32 0
  %64 = add nsw i32 %63, %61
  %65 = trunc i64 %27 to i32
  %66 = sub nsw i32 %65, %52
  %67 = icmp slt i32 %60, 0
  %68 = icmp sgt i32 %60, %66
  %69 = select i1 %68, i32 %66, i32 %60
  %70 = select i1 %67, i32 0, i32 %69
  %71 = sub nsw i32 %41, %56
  %72 = icmp slt i32 %64, 0
  %73 = icmp sgt i32 %64, %71
  %74 = select i1 %73, i32 %71, i32 %64
  %75 = select i1 %72, i32 0, i32 %74
  %76 = zext i32 %52 to i64
  %77 = zext i32 %56 to i64
  %78 = sext i32 %70 to i64
  %79 = sext i32 %75 to i64
  store i64 %76, i64* %43, align 8
  store i64 %77, i64* %44, align 8
  store i64 %78, i64* %45, align 8
  store i64 %79, i64* %47, align 8
  %80 = shl i64 %2, 32
  %81 = sub i64 0, %80
  %82 = ashr exact i64 %81, 32
  %83 = select i1 %58, i64 %82, i64 0
  %84 = and i64 %2, -4294967296
  %85 = sub i64 0, %84
  %86 = ashr exact i64 %85, 32
  %87 = select i1 %62, i64 %86, i64 0
  %88 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %0, i64 0, i32 3, i32 0
  store i64 %83, i64* %88, align 8
  %89 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %0, i64 0, i32 3, i32 1
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %0, i64 0, i32 3, i32 2
  store i64 %78, i64* %90, align 8
  %91 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %0, i64 0, i32 3, i32 3
  store i64 %79, i64* %91, align 8
  %92 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %0, i64 0, i32 0, i32 5
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %14, i64 0, i32 17, i64 %94, i32 1
  %96 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %95, align 8
  %97 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 0, i32 0, i32 0, i32 0
  %98 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %97, align 8
  %99 = icmp eq %"struct.jxl::jpeg::JPEGData"* %98, null
  br i1 %99, label %104, label %100

100:                                              ; preds = %40
  %101 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %98, i64 0, i32 1
  %102 = load i32, i32* %101, align 8
  %103 = sext i32 %102 to i64
  br label %119

104:                                              ; preds = %40
  %105 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %106 = load i32, i32* %105, align 8
  %107 = zext i32 %106 to i64
  %108 = icmp eq i32 %106, 0
  br i1 %108, label %109, label %119

109:                                              ; preds = %104
  %110 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 12, i32 0, i32 0
  %111 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %110, align 8
  %112 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 12, i32 0, i32 1
  %113 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %112, align 8
  %114 = icmp eq %"class.jxl::Plane.97"* %111, %113
  br i1 %114, label %127, label %115

115:                                              ; preds = %109
  %116 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %111, i64 0, i32 0, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = zext i32 %117 to i64
  br label %119

119:                                              ; preds = %100, %104, %115
  %120 = phi i64 [ %103, %100 ], [ %118, %115 ], [ %107, %104 ]
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %357

122:                                              ; preds = %119
  br i1 %99, label %127, label %123

123:                                              ; preds = %122
  %124 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %98, i64 0, i32 2
  %125 = load i32, i32* %124, align 4
  %126 = sext i32 %125 to i64
  br label %142

127:                                              ; preds = %109, %122
  %128 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %129 = load i32, i32* %128, align 4
  %130 = zext i32 %129 to i64
  %131 = icmp eq i32 %129, 0
  br i1 %131, label %132, label %142

132:                                              ; preds = %127
  %133 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 12, i32 0, i32 0
  %134 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %133, align 8
  %135 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 12, i32 0, i32 1
  %136 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %135, align 8
  %137 = icmp eq %"class.jxl::Plane.97"* %134, %136
  br i1 %137, label %145, label %138

138:                                              ; preds = %132
  %139 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %134, i64 0, i32 0, i32 1
  %140 = load i32, i32* %139, align 4
  %141 = zext i32 %140 to i64
  br label %142

142:                                              ; preds = %123, %127, %138
  %143 = phi i64 [ %126, %123 ], [ %141, %138 ], [ %130, %127 ]
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %357

145:                                              ; preds = %132, %142
  %146 = bitcast %"class.jxl::ImageBundle"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %146) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %146, i8 -86, i64 368, i1 false)
  %147 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %19, align 8
  %148 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %147, i64 0, i32 0
  %149 = bitcast %"class.jxl::ImageBundle"* %8 to i64*
  store i64 0, i64* %149, align 8
  %150 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 1
  store i32 1, i32* %150, align 8
  %151 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %151) #9
  %152 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 4, i32 0
  %153 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 8
  %154 = bitcast %"class.std::__1::basic_string"* %153 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %154, i8 0, i64 24, i1 false) #9
  %155 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 9
  %156 = bitcast i32* %152 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %156, i8 0, i64 14, i1 false) #9
  store %"struct.jxl::ImageMetadata"* %148, %"struct.jxl::ImageMetadata"** %155, align 8
  %157 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 10
  %158 = bitcast %"class.jxl::Image3"* %157 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %158, i8 0, i64 96, i1 false) #9
  %159 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %159) #9
  %160 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 12
  %161 = bitcast %"class.std::__1::vector.169"* %160 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %161, i8 0, i64 32, i1 false) #9
  %162 = bitcast %"class.jxl::Image3"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %162) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %162, i8 -86, i64 96, i1 false)
  %163 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %163, i64 %27, i64 %42, i64 4) #9
  %164 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %164, i64 %27, i64 %42, i64 4) #9
  %165 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %165, i64 %27, i64 %42, i64 4) #9
  %166 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 1
  %167 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 4
  %168 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 0
  %169 = load i32, i32* %166, align 4
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %238, label %171

171:                                              ; preds = %145
  %172 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %175

173:                                              ; preds = %175
  %174 = icmp eq i32 %191, 0
  br i1 %174, label %238, label %194

175:                                              ; preds = %175, %171
  %176 = phi i64 [ 0, %171 ], [ %190, %175 ]
  %177 = load i64, i64* %167, align 8
  %178 = mul i64 %177, %176
  %179 = load i8*, i8** %172, align 8
  %180 = ptrtoint i8* %179 to i64
  %181 = and i64 %180, 63
  %182 = icmp eq i64 %181, 0
  call void @llvm.assume(i1 %182) #9
  %183 = getelementptr inbounds i8, i8* %179, i64 %178
  %184 = ptrtoint i8* %183 to i64
  %185 = and i64 %184, 63
  %186 = icmp eq i64 %185, 0
  call void @llvm.assume(i1 %186) #9
  %187 = load i32, i32* %168, align 8
  %188 = zext i32 %187 to i64
  %189 = shl nuw nsw i64 %188, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %183, i8 0, i64 %189, i1 false) #9
  %190 = add nuw nsw i64 %176, 1
  %191 = load i32, i32* %166, align 4
  %192 = zext i32 %191 to i64
  %193 = icmp ult i64 %190, %192
  br i1 %193, label %175, label %173

194:                                              ; preds = %173
  %195 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %196

196:                                              ; preds = %196, %194
  %197 = phi i64 [ 0, %194 ], [ %211, %196 ]
  %198 = load i64, i64* %167, align 8
  %199 = mul i64 %198, %197
  %200 = load i8*, i8** %195, align 8
  %201 = ptrtoint i8* %200 to i64
  %202 = and i64 %201, 63
  %203 = icmp eq i64 %202, 0
  call void @llvm.assume(i1 %203) #9
  %204 = getelementptr inbounds i8, i8* %200, i64 %199
  %205 = ptrtoint i8* %204 to i64
  %206 = and i64 %205, 63
  %207 = icmp eq i64 %206, 0
  call void @llvm.assume(i1 %207) #9
  %208 = load i32, i32* %168, align 8
  %209 = zext i32 %208 to i64
  %210 = shl nuw nsw i64 %209, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %204, i8 0, i64 %210, i1 false) #9
  %211 = add nuw nsw i64 %197, 1
  %212 = load i32, i32* %166, align 4
  %213 = zext i32 %212 to i64
  %214 = icmp ult i64 %211, %213
  br i1 %214, label %196, label %215

215:                                              ; preds = %196
  %216 = icmp eq i32 %212, 0
  br i1 %216, label %238, label %217

217:                                              ; preds = %215
  %218 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %219

219:                                              ; preds = %219, %217
  %220 = phi i64 [ 0, %217 ], [ %234, %219 ]
  %221 = load i64, i64* %167, align 8
  %222 = mul i64 %221, %220
  %223 = load i8*, i8** %218, align 8
  %224 = ptrtoint i8* %223 to i64
  %225 = and i64 %224, 63
  %226 = icmp eq i64 %225, 0
  call void @llvm.assume(i1 %226) #9
  %227 = getelementptr inbounds i8, i8* %223, i64 %222
  %228 = ptrtoint i8* %227 to i64
  %229 = and i64 %228, 63
  %230 = icmp eq i64 %229, 0
  call void @llvm.assume(i1 %230) #9
  %231 = load i32, i32* %168, align 8
  %232 = zext i32 %231 to i64
  %233 = shl nuw nsw i64 %232, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %227, i8 0, i64 %233, i1 false) #9
  %234 = add nuw nsw i64 %220, 1
  %235 = load i32, i32* %166, align 4
  %236 = zext i32 %235 to i64
  %237 = icmp ult i64 %234, %236
  br i1 %237, label %219, label %238

238:                                              ; preds = %219, %145, %173, %215
  call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* nonnull %8, %"class.jxl::Image3"* nonnull dereferenceable(96) %9, %"struct.jxl::ColorEncoding"* dereferenceable(152) %5) #9
  %239 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %21, i64 0, i32 0, i32 0
  %240 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %239, align 8
  %241 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %20, i64 0, i32 0, i32 17, i32 0, i32 1
  %242 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %241, align 8
  %243 = icmp eq %"struct.jxl::ExtraChannelInfo"* %240, %242
  br i1 %243, label %339, label %244

244:                                              ; preds = %238
  %245 = bitcast %"class.std::__1::vector.169"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %245) #9
  %246 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %10, i64 0, i32 0, i32 0
  %247 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %10, i64 0, i32 0, i32 1
  %248 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %10, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %245, i8 0, i64 24, i1 false) #9
  %249 = bitcast %"struct.jxl::ExtraChannelInfo"** %241 to i64*
  %250 = bitcast %"class.std::__1::vector"* %21 to i64*
  %251 = bitcast %"class.jxl::Plane.97"* %11 to i8*
  %252 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %11, i64 0, i32 0, i32 0
  %253 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %11, i64 0, i32 0, i32 1
  %254 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %11, i64 0, i32 0, i32 4
  %255 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %11, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %256 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %11, i64 0, i32 0
  %257 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %11, i64 0, i32 0, i32 5
  %258 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %257, i64 0, i32 0, i32 0, i32 0
  %259 = bitcast %"class.std::__1::unique_ptr"* %257 to i64*
  %260 = bitcast %"class.jxl::Plane.97"** %247 to i64*
  %261 = bitcast %"class.jxl::Plane.97"* %11 to i8*
  br label %284

262:                                              ; preds = %332
  call void @_ZN3jxl11ImageBundle16SetExtraChannelsEONSt3__16vectorINS_5PlaneIfEENS1_9allocatorIS4_EEEE(%"class.jxl::ImageBundle"* nonnull %8, %"class.std::__1::vector.169"* nonnull dereferenceable(24) %10) #9
  %263 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %246, align 8
  %264 = icmp eq %"class.jxl::Plane.97"* %263, null
  br i1 %264, label %283, label %265

265:                                              ; preds = %262
  %266 = bitcast %"class.jxl::Plane.97"* %263 to i8*
  %267 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %247, align 8
  %268 = icmp eq %"class.jxl::Plane.97"* %267, %263
  br i1 %268, label %281, label %269

269:                                              ; preds = %265, %276
  %270 = phi %"class.jxl::Plane.97"* [ %271, %276 ], [ %267, %265 ]
  %271 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %270, i64 -1
  %272 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %270, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %273 = load i8*, i8** %272, align 8
  store i8* null, i8** %272, align 8
  %274 = icmp eq i8* %273, null
  br i1 %274, label %276, label %275

275:                                              ; preds = %269
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %273) #9
  br label %276

276:                                              ; preds = %275, %269
  %277 = icmp eq %"class.jxl::Plane.97"* %271, %263
  br i1 %277, label %278, label %269

278:                                              ; preds = %276
  %279 = bitcast %"class.std::__1::vector.169"* %10 to i8**
  %280 = load i8*, i8** %279, align 8
  br label %281

281:                                              ; preds = %278, %265
  %282 = phi i8* [ %280, %278 ], [ %266, %265 ]
  store %"class.jxl::Plane.97"* %263, %"class.jxl::Plane.97"** %247, align 8
  call void @_ZdlPv(i8* %282) #11
  br label %283

283:                                              ; preds = %262, %281
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %245) #9
  br label %339

284:                                              ; preds = %244, %332
  %285 = phi i64 [ 0, %244 ], [ %333, %332 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %251) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %261, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %256, i64 %27, i64 %42, i64 4) #9
  %286 = load i32, i32* %252, align 8
  %287 = icmp eq i32 %286, 0
  %288 = load i32, i32* %253, align 4
  %289 = icmp eq i32 %288, 0
  %290 = or i1 %287, %289
  br i1 %290, label %316, label %291

291:                                              ; preds = %284
  %292 = load i8*, i8** %255, align 8
  %293 = ptrtoint i8* %292 to i64
  %294 = and i64 %293, 63
  %295 = icmp eq i64 %294, 0
  call void @llvm.assume(i1 %295) #9
  %296 = zext i32 %286 to i64
  %297 = shl nuw nsw i64 %296, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %292, i8 0, i64 %297, i1 false) #9
  %298 = load i32, i32* %253, align 4
  %299 = icmp ugt i32 %298, 1
  br i1 %299, label %300, label %316

300:                                              ; preds = %291, %300
  %301 = phi i64 [ %312, %300 ], [ 1, %291 ]
  %302 = load i32, i32* %252, align 8
  %303 = load i8*, i8** %255, align 8
  %304 = load i64, i64* %254, align 8
  %305 = mul i64 %304, %301
  %306 = getelementptr inbounds i8, i8* %303, i64 %305
  %307 = ptrtoint i8* %306 to i64
  %308 = and i64 %307, 63
  %309 = icmp eq i64 %308, 0
  call void @llvm.assume(i1 %309) #9
  %310 = zext i32 %302 to i64
  %311 = shl nuw nsw i64 %310, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %306, i8 0, i64 %311, i1 false) #9
  %312 = add nuw nsw i64 %301, 1
  %313 = load i32, i32* %253, align 4
  %314 = zext i32 %313 to i64
  %315 = icmp ult i64 %312, %314
  br i1 %315, label %300, label %316

316:                                              ; preds = %300, %291, %284
  %317 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %247, align 8
  %318 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %248, align 8
  %319 = icmp ult %"class.jxl::Plane.97"* %317, %318
  br i1 %319, label %320, label %327

320:                                              ; preds = %316
  %321 = bitcast %"class.jxl::Plane.97"* %317 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %321, i8* nonnull align 8 %251, i64 24, i1 false) #9
  %322 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %317, i64 0, i32 0, i32 5
  %323 = load i64, i64* %259, align 8
  store i8* null, i8** %258, align 8
  %324 = bitcast %"class.std::__1::unique_ptr"* %322 to i64*
  store i64 %323, i64* %324, align 8
  %325 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %317, i64 1
  %326 = ptrtoint %"class.jxl::Plane.97"* %325 to i64
  store i64 %326, i64* %260, align 8
  br label %328

327:                                              ; preds = %316
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.169"* nonnull %10, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %11) #9
  br label %328

328:                                              ; preds = %320, %327
  %329 = load i8*, i8** %255, align 8
  store i8* null, i8** %255, align 8
  %330 = icmp eq i8* %329, null
  br i1 %330, label %332, label %331

331:                                              ; preds = %328
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %329) #9
  br label %332

332:                                              ; preds = %328, %331
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %251) #9
  %333 = add nuw i64 %285, 1
  %334 = load i64, i64* %249, align 8
  %335 = load i64, i64* %250, align 8
  %336 = sub i64 %334, %335
  %337 = sdiv exact i64 %336, 96
  %338 = icmp ult i64 %333, %337
  br i1 %338, label %284, label %262

339:                                              ; preds = %283, %238
  %340 = call dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"* %96, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %8) #9
  %341 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %342 = load i8*, i8** %341, align 8
  store i8* null, i8** %341, align 8
  %343 = icmp eq i8* %342, null
  br i1 %343, label %345, label %344

344:                                              ; preds = %339
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %342) #9
  br label %345

345:                                              ; preds = %344, %339
  %346 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %347 = load i8*, i8** %346, align 8
  store i8* null, i8** %346, align 8
  %348 = icmp eq i8* %347, null
  br i1 %348, label %350, label %349

349:                                              ; preds = %345
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %347) #9
  br label %350

350:                                              ; preds = %349, %345
  %351 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %352 = load i8*, i8** %351, align 8
  store i8* null, i8** %351, align 8
  %353 = icmp eq i8* %352, null
  br i1 %353, label %355, label %354

354:                                              ; preds = %350
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %352) #9
  br label %355

355:                                              ; preds = %350, %354
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %162) #9
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %8) #9
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %146) #9
  %356 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %97, align 8
  br label %361

357:                                              ; preds = %142, %119
  %358 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %14, i64 0, i32 17, i64 %94, i32 2
  %359 = load i8, i8* %358, align 8, !range !2
  %360 = icmp eq i8 %359, 0
  br i1 %360, label %361, label %417

361:                                              ; preds = %357, %355
  %362 = phi %"struct.jxl::jpeg::JPEGData"* [ %98, %357 ], [ %356, %355 ]
  %363 = icmp eq %"struct.jxl::jpeg::JPEGData"* %362, null
  br i1 %363, label %368, label %364

364:                                              ; preds = %361
  %365 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %362, i64 0, i32 1
  %366 = load i32, i32* %365, align 8
  %367 = sext i32 %366 to i64
  br label %383

368:                                              ; preds = %361
  %369 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %370 = load i32, i32* %369, align 8
  %371 = zext i32 %370 to i64
  %372 = icmp eq i32 %370, 0
  br i1 %372, label %373, label %383

373:                                              ; preds = %368
  %374 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 12, i32 0, i32 0
  %375 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %374, align 8
  %376 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 12, i32 0, i32 1
  %377 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %376, align 8
  %378 = icmp eq %"class.jxl::Plane.97"* %375, %377
  br i1 %378, label %383, label %379

379:                                              ; preds = %373
  %380 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %375, i64 0, i32 0, i32 0
  %381 = load i32, i32* %380, align 8
  %382 = zext i32 %381 to i64
  br label %383

383:                                              ; preds = %364, %368, %373, %379
  %384 = phi i64 [ %367, %364 ], [ %382, %379 ], [ 0, %373 ], [ %371, %368 ]
  %385 = icmp eq i64 %384, %27
  br i1 %385, label %386, label %417

386:                                              ; preds = %383
  br i1 %363, label %391, label %387

387:                                              ; preds = %386
  %388 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %362, i64 0, i32 2
  %389 = load i32, i32* %388, align 4
  %390 = sext i32 %389 to i64
  br label %406

391:                                              ; preds = %386
  %392 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %393 = load i32, i32* %392, align 4
  %394 = zext i32 %393 to i64
  %395 = icmp eq i32 %393, 0
  br i1 %395, label %396, label %406

396:                                              ; preds = %391
  %397 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 12, i32 0, i32 0
  %398 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %397, align 8
  %399 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 12, i32 0, i32 1
  %400 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %399, align 8
  %401 = icmp eq %"class.jxl::Plane.97"* %398, %400
  br i1 %401, label %406, label %402

402:                                              ; preds = %396
  %403 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %398, i64 0, i32 0, i32 1
  %404 = load i32, i32* %403, align 4
  %405 = zext i32 %404 to i64
  br label %406

406:                                              ; preds = %387, %391, %396, %402
  %407 = phi i64 [ %390, %387 ], [ %405, %402 ], [ 0, %396 ], [ %394, %391 ]
  %408 = icmp eq i64 %407, %42
  br i1 %408, label %409, label %417

409:                                              ; preds = %406
  %410 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 4, i32 0
  %411 = load i32, i32* %410, align 8
  %412 = icmp eq i32 %411, 0
  br i1 %412, label %413, label %417

413:                                              ; preds = %409
  %414 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 4, i32 1
  %415 = load i32, i32* %414, align 4
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %419, label %417

417:                                              ; preds = %689, %463, %489, %519, %383, %406, %409, %413, %357, %424, %428, %434
  %418 = phi i32 [ 1, %357 ], [ 1, %424 ], [ 1, %434 ], [ 1, %428 ], [ 0, %519 ], [ 1, %413 ], [ 1, %409 ], [ 1, %406 ], [ 1, %383 ], [ 1, %489 ], [ 1, %463 ], [ 0, %689 ]
  ret i32 %418

419:                                              ; preds = %413
  %420 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %19, align 8
  %421 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %420, i64 0, i32 0, i32 5
  %422 = load i8, i8* %421, align 1, !range !2
  %423 = icmp eq i8 %422, 0
  br i1 %423, label %428, label %424

424:                                              ; preds = %419
  %425 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %1, i64 0, i32 33, i32 4
  %426 = load i8, i8* %425, align 1, !range !2
  %427 = icmp eq i8 %426, 0
  br i1 %427, label %417, label %428

428:                                              ; preds = %419, %424
  %429 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %0, i64 0, i32 3, i32 0
  %430 = load i64, i64* %429, align 8
  %431 = load i64, i64* %90, align 8
  %432 = add i64 %431, %430
  %433 = icmp ugt i64 %432, %3
  br i1 %433, label %417, label %434

434:                                              ; preds = %428
  %435 = load i64, i64* %89, align 8
  %436 = load i64, i64* %91, align 8
  %437 = add i64 %436, %435
  %438 = icmp ugt i64 %437, %4
  br i1 %438, label %417, label %439

439:                                              ; preds = %434
  %440 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %0, i64 0, i32 2, i32 0
  %441 = load i64, i64* %440, align 8
  %442 = load i64, i64* %45, align 8
  %443 = add i64 %442, %441
  br i1 %363, label %448, label %444

444:                                              ; preds = %439
  %445 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %362, i64 0, i32 1
  %446 = load i32, i32* %445, align 8
  %447 = sext i32 %446 to i64
  br label %463

448:                                              ; preds = %439
  %449 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %450 = load i32, i32* %449, align 8
  %451 = zext i32 %450 to i64
  %452 = icmp eq i32 %450, 0
  br i1 %452, label %453, label %463

453:                                              ; preds = %448
  %454 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 12, i32 0, i32 0
  %455 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %454, align 8
  %456 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 12, i32 0, i32 1
  %457 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %456, align 8
  %458 = icmp eq %"class.jxl::Plane.97"* %455, %457
  br i1 %458, label %463, label %459

459:                                              ; preds = %453
  %460 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %455, i64 0, i32 0, i32 0
  %461 = load i32, i32* %460, align 8
  %462 = zext i32 %461 to i64
  br label %463

463:                                              ; preds = %459, %453, %448, %444
  %464 = phi i64 [ %447, %444 ], [ %462, %459 ], [ 0, %453 ], [ %451, %448 ]
  %465 = icmp ugt i64 %443, %464
  br i1 %465, label %417, label %466

466:                                              ; preds = %463
  %467 = load i64, i64* %44, align 8
  %468 = load i64, i64* %47, align 8
  %469 = add i64 %468, %467
  br i1 %363, label %474, label %470

470:                                              ; preds = %466
  %471 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %362, i64 0, i32 2
  %472 = load i32, i32* %471, align 4
  %473 = sext i32 %472 to i64
  br label %489

474:                                              ; preds = %466
  %475 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %476 = load i32, i32* %475, align 4
  %477 = zext i32 %476 to i64
  %478 = icmp eq i32 %476, 0
  br i1 %478, label %479, label %489

479:                                              ; preds = %474
  %480 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 12, i32 0, i32 0
  %481 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %480, align 8
  %482 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %96, i64 0, i32 12, i32 0, i32 1
  %483 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %482, align 8
  %484 = icmp eq %"class.jxl::Plane.97"* %481, %483
  br i1 %484, label %489, label %485

485:                                              ; preds = %479
  %486 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %481, i64 0, i32 0, i32 1
  %487 = load i32, i32* %486, align 4
  %488 = zext i32 %487 to i64
  br label %489

489:                                              ; preds = %470, %474, %479, %485
  %490 = phi i64 [ %473, %470 ], [ %488, %485 ], [ 0, %479 ], [ %477, %474 ]
  %491 = icmp ugt i64 %469, %490
  br i1 %491, label %417, label %492

492:                                              ; preds = %489
  %493 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %0, i64 0, i32 1
  store %"class.jxl::ImageBundle"* %6, %"class.jxl::ImageBundle"** %493, align 8
  %494 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %14, i64 0, i32 1, i32 21
  %495 = load i8, i8* %494, align 8, !range !2
  %496 = icmp eq i8 %495, 0
  br i1 %496, label %497, label %515

497:                                              ; preds = %492
  %498 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %14, i64 0, i32 1, i32 3
  %499 = load i32, i32* %498, align 8
  %500 = icmp eq i32 %499, 1
  br i1 %500, label %515, label %501

501:                                              ; preds = %497
  %502 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %14, i64 0, i32 1, i32 20, i32 1
  %503 = load i32, i32* %502, align 8
  %504 = icmp ne i32 %503, 0
  %505 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %14, i64 0, i32 1, i32 22
  %506 = load i32, i32* %505, align 4
  %507 = icmp eq i32 %506, 0
  %508 = and i1 %504, %507
  br i1 %508, label %515, label %509

509:                                              ; preds = %501
  %510 = zext i32 %506 to i64
  %511 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %14, i64 0, i32 17, i64 %510, i32 0
  %512 = icmp eq %"class.jxl::ImageBundle"* %96, %511
  br i1 %512, label %513, label %515

513:                                              ; preds = %509
  %514 = call dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"* %6, %"class.jxl::ImageBundle"* dereferenceable(368) %96) #9
  br label %519

515:                                              ; preds = %501, %492, %497, %509
  %516 = bitcast %"class.jxl::ImageBundle"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %516) #9
  call void @_ZNK3jxl11ImageBundle4CopyEv(%"class.jxl::ImageBundle"* nonnull sret %12, %"class.jxl::ImageBundle"* %96)
  %517 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %493, align 8
  %518 = call dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"* %517, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %12) #9
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %12) #9
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %516) #9
  br label %519

519:                                              ; preds = %515, %513
  %520 = load %"class.std::__1::vector.16"*, %"class.std::__1::vector.16"** %23, align 8
  %521 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %520, i64 0, i32 0, i32 1
  %522 = bitcast %"struct.jxl::BlendingInfo"** %521 to i64*
  %523 = load i64, i64* %522, align 8
  %524 = bitcast %"class.std::__1::vector.16"* %520 to i64*
  %525 = load i64, i64* %524, align 8
  %526 = icmp eq i64 %523, %525
  br i1 %526, label %417, label %527

527:                                              ; preds = %519, %689
  %528 = phi %"class.std::__1::vector.16"* [ %691, %689 ], [ %520, %519 ]
  %529 = phi i64 [ %690, %689 ], [ 0, %519 ]
  %530 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %528, i64 0, i32 0, i32 0
  %531 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %530, align 8
  %532 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %531, i64 %529, i32 5
  %533 = load i32, i32* %532, align 4
  %534 = load i32, i32* %92, align 4
  %535 = icmp eq i32 %533, %534
  br i1 %535, label %689, label %536

536:                                              ; preds = %527
  %537 = zext i32 %533 to i64
  %538 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %14, i64 0, i32 17, i64 %537, i32 1
  %539 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %538, align 8
  %540 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %539, i64 0, i32 0, i32 0, i32 0, i32 0
  %541 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %540, align 8
  %542 = icmp eq %"struct.jxl::jpeg::JPEGData"* %541, null
  br i1 %542, label %547, label %543

543:                                              ; preds = %536
  %544 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %541, i64 0, i32 1
  %545 = load i32, i32* %544, align 8
  %546 = sext i32 %545 to i64
  br label %562

547:                                              ; preds = %536
  %548 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %539, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %549 = load i32, i32* %548, align 8
  %550 = zext i32 %549 to i64
  %551 = icmp eq i32 %549, 0
  br i1 %551, label %552, label %562

552:                                              ; preds = %547
  %553 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %539, i64 0, i32 12, i32 0, i32 0
  %554 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %553, align 8
  %555 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %539, i64 0, i32 12, i32 0, i32 1
  %556 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %555, align 8
  %557 = icmp eq %"class.jxl::Plane.97"* %554, %556
  br i1 %557, label %570, label %558

558:                                              ; preds = %552
  %559 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %554, i64 0, i32 0, i32 0
  %560 = load i32, i32* %559, align 8
  %561 = zext i32 %560 to i64
  br label %562

562:                                              ; preds = %543, %547, %558
  %563 = phi i64 [ %546, %543 ], [ %561, %558 ], [ %550, %547 ]
  %564 = icmp eq i64 %563, 0
  br i1 %564, label %565, label %626

565:                                              ; preds = %562
  br i1 %542, label %570, label %566

566:                                              ; preds = %565
  %567 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %541, i64 0, i32 2
  %568 = load i32, i32* %567, align 4
  %569 = sext i32 %568 to i64
  br label %585

570:                                              ; preds = %552, %565
  %571 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %539, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %572 = load i32, i32* %571, align 4
  %573 = zext i32 %572 to i64
  %574 = icmp eq i32 %572, 0
  br i1 %574, label %575, label %585

575:                                              ; preds = %570
  %576 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %539, i64 0, i32 12, i32 0, i32 0
  %577 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %576, align 8
  %578 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %539, i64 0, i32 12, i32 0, i32 1
  %579 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %578, align 8
  %580 = icmp eq %"class.jxl::Plane.97"* %577, %579
  br i1 %580, label %588, label %581

581:                                              ; preds = %575
  %582 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %577, i64 0, i32 0, i32 1
  %583 = load i32, i32* %582, align 4
  %584 = zext i32 %583 to i64
  br label %585

585:                                              ; preds = %566, %570, %581
  %586 = phi i64 [ %569, %566 ], [ %584, %581 ], [ %573, %570 ]
  %587 = icmp eq i64 %586, 0
  br i1 %587, label %588, label %626

588:                                              ; preds = %575, %585
  %589 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %493, align 8
  %590 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %589, i64 0, i32 12, i32 0, i32 0
  %591 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %590, align 8
  %592 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %591, i64 %529, i32 0, i32 0
  %593 = load i32, i32* %592, align 8
  %594 = icmp eq i32 %593, 0
  br i1 %594, label %689, label %595

595:                                              ; preds = %588
  %596 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %591, i64 %529, i32 0, i32 1
  %597 = load i32, i32* %596, align 4
  %598 = icmp eq i32 %597, 0
  br i1 %598, label %689, label %599

599:                                              ; preds = %595
  %600 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %591, i64 %529, i32 0, i32 5, i32 0, i32 0, i32 0
  %601 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %591, i64 %529, i32 0, i32 4
  %602 = load i8*, i8** %600, align 8
  %603 = ptrtoint i8* %602 to i64
  %604 = and i64 %603, 63
  %605 = icmp eq i64 %604, 0
  call void @llvm.assume(i1 %605) #9
  %606 = zext i32 %593 to i64
  %607 = shl nuw nsw i64 %606, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %602, i8 0, i64 %607, i1 false) #9
  %608 = load i32, i32* %596, align 4
  %609 = icmp ugt i32 %608, 1
  br i1 %609, label %610, label %689

610:                                              ; preds = %599, %610
  %611 = phi i64 [ %622, %610 ], [ 1, %599 ]
  %612 = load i32, i32* %592, align 8
  %613 = load i8*, i8** %600, align 8
  %614 = load i64, i64* %601, align 8
  %615 = mul i64 %614, %611
  %616 = getelementptr inbounds i8, i8* %613, i64 %615
  %617 = ptrtoint i8* %616 to i64
  %618 = and i64 %617, 63
  %619 = icmp eq i64 %618, 0
  call void @llvm.assume(i1 %619) #9
  %620 = zext i32 %612 to i64
  %621 = shl nuw nsw i64 %620, 2
  call void @llvm.memset.p0i8.i64(i8* align 64 %616, i8 0, i64 %621, i1 false) #9
  %622 = add nuw nsw i64 %611, 1
  %623 = load i32, i32* %596, align 4
  %624 = zext i32 %623 to i64
  %625 = icmp ult i64 %622, %624
  br i1 %625, label %610, label %689

626:                                              ; preds = %585, %562
  %627 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %539, i64 0, i32 12, i32 0, i32 0
  %628 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %627, align 8
  %629 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %493, align 8
  %630 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %629, i64 0, i32 12, i32 0, i32 0
  %631 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %630, align 8
  %632 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %628, i64 %529, i32 0, i32 0
  %633 = load i32, i32* %632, align 8, !noalias !3
  %634 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %631, i64 %529, i32 0, i32 0
  %635 = load i32, i32* %634, align 8, !alias.scope !3
  %636 = icmp eq i32 %633, %635
  br i1 %636, label %637, label %643

637:                                              ; preds = %626
  %638 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %628, i64 %529, i32 0, i32 1
  %639 = load i32, i32* %638, align 4, !noalias !3
  %640 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %631, i64 %529, i32 0, i32 1
  %641 = load i32, i32* %640, align 4, !alias.scope !3
  %642 = icmp eq i32 %639, %641
  br i1 %642, label %646, label %643

643:                                              ; preds = %637, %626
  %644 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.8, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)) #9, !noalias !3
  %645 = call zeroext i1 @_ZN3jxl5AbortEv() #12, !noalias !3
  unreachable

646:                                              ; preds = %637
  %647 = icmp eq i32 %639, 0
  %648 = icmp eq i32 %633, 0
  %649 = or i1 %648, %647
  br i1 %649, label %689, label %650

650:                                              ; preds = %646
  %651 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %628, i64 %529, i32 0, i32 5, i32 0, i32 0, i32 0
  %652 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %628, i64 %529, i32 0, i32 4
  %653 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %631, i64 %529, i32 0, i32 5, i32 0, i32 0, i32 0
  %654 = load i8*, i8** %653, align 8, !alias.scope !3
  %655 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %631, i64 %529, i32 0, i32 4
  %656 = load i64, i64* %655, align 8, !alias.scope !3
  %657 = load i8*, i8** %651, align 8, !noalias !3
  %658 = ptrtoint i8* %657 to i64
  %659 = and i64 %658, 63
  %660 = icmp eq i64 %659, 0
  call void @llvm.assume(i1 %660) #9, !noalias !3
  %661 = ptrtoint i8* %654 to i64
  %662 = and i64 %661, 63
  %663 = icmp eq i64 %662, 0
  call void @llvm.assume(i1 %663) #9, !noalias !3
  %664 = zext i32 %633 to i64
  %665 = shl nuw nsw i64 %664, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %654, i8* align 64 %657, i64 %665, i1 false) #9, !noalias !3
  %666 = load i32, i32* %638, align 4, !noalias !3
  %667 = icmp ugt i32 %666, 1
  br i1 %667, label %668, label %689

668:                                              ; preds = %650, %668
  %669 = phi i64 [ %685, %668 ], [ 1, %650 ]
  %670 = load i32, i32* %632, align 8, !noalias !3
  %671 = load i8*, i8** %651, align 8, !noalias !3
  %672 = load i64, i64* %652, align 8, !noalias !3
  %673 = mul i64 %672, %669
  %674 = getelementptr inbounds i8, i8* %671, i64 %673
  %675 = ptrtoint i8* %674 to i64
  %676 = and i64 %675, 63
  %677 = icmp eq i64 %676, 0
  call void @llvm.assume(i1 %677) #9, !noalias !3
  %678 = mul i64 %669, %656
  %679 = getelementptr inbounds i8, i8* %654, i64 %678
  %680 = ptrtoint i8* %679 to i64
  %681 = and i64 %680, 63
  %682 = icmp eq i64 %681, 0
  call void @llvm.assume(i1 %682) #9, !noalias !3
  %683 = zext i32 %670 to i64
  %684 = shl nuw nsw i64 %683, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %679, i8* align 64 %674, i64 %684, i1 false) #9, !noalias !3
  %685 = add nuw nsw i64 %669, 1
  %686 = load i32, i32* %638, align 4, !noalias !3
  %687 = zext i32 %686 to i64
  %688 = icmp ult i64 %685, %687
  br i1 %688, label %668, label %689

689:                                              ; preds = %668, %610, %650, %599, %646, %595, %588, %527
  %690 = add nuw i64 %529, 1
  %691 = load %"class.std::__1::vector.16"*, %"class.std::__1::vector.16"** %23, align 8
  %692 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %691, i64 0, i32 0, i32 1
  %693 = bitcast %"struct.jxl::BlendingInfo"** %692 to i64*
  %694 = load i64, i64* %693, align 8
  %695 = bitcast %"class.std::__1::vector.16"* %691 to i64*
  %696 = load i64, i64* %695, align 8
  %697 = sub i64 %694, %696
  %698 = sdiv exact i64 %697, 40
  %699 = icmp ult i64 %690, %698
  br i1 %699, label %527, label %417
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #3

declare void @_ZN3jxl11ImageBundle16SetExtraChannelsEONSt3__16vectorINS_5PlaneIfEENS1_9allocatorIS4_EEEE(%"class.jxl::ImageBundle"*, %"class.std::__1::vector.169"* dereferenceable(24)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"* dereferenceable(368)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.jxl::ImageBundle"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %3, align 8
  %6 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %6, align 8
  %8 = bitcast %"class.jxl::ImageBundle"* %0 to i64*
  store i64 %5, i64* %8, align 8
  %9 = icmp eq %"struct.jxl::jpeg::JPEGData"* %7, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = bitcast %"struct.jxl::jpeg::JPEGData"* %7 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %12 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %12, i64 1
  %14 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %13, align 8
  tail call void %14(%"struct.jxl::jpeg::JPEGData"* nonnull %7) #9
  br label %15

15:                                               ; preds = %2, %10
  %16 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 1
  store i32 %17, i32* %18, align 8
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 1
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 3, i32 1
  %21 = bitcast [3 x i32]* %19 to i8*
  %22 = bitcast [3 x i32]* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 14, i1 false) #9
  %23 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4
  %24 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 4
  %25 = bitcast %"struct.jxl::FrameOrigin"* %23 to i8*
  %26 = bitcast %"struct.jxl::FrameOrigin"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 14, i1 false)
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %28 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 8
  %29 = bitcast %"class.std::__1::basic_string"* %27 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %15
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  tail call void @_ZdlPv(i8* %35) #11
  br label %36

36:                                               ; preds = %15, %33
  %37 = bitcast %"class.std::__1::basic_string"* %27 to i8*
  %38 = bitcast %"class.std::__1::basic_string"* %28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #9
  %39 = bitcast %"class.std::__1::basic_string"* %28 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  store i8 0, i8* %40, align 1
  store i8 0, i8* %38, align 1
  %41 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %42 = bitcast %"struct.jxl::ImageMetadata"** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %45 = bitcast %"struct.jxl::ImageMetadata"** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  %48 = bitcast %"class.jxl::Image3"* %46 to i8*
  %49 = bitcast %"class.jxl::Image3"* %47 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 24, i1 false) #9
  %50 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %52 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %51, i64 0, i32 0, i32 0, i32 0
  %53 = bitcast %"class.std::__1::unique_ptr"* %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i8* null, i8** %52, align 8
  %55 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %50, i64 0, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = bitcast %"class.std::__1::unique_ptr"* %50 to i64*
  store i64 %54, i64* %57, align 8
  %58 = icmp eq i8* %56, null
  br i1 %58, label %60, label %59

59:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %56) #9
  br label %60

60:                                               ; preds = %59, %36
  %61 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1
  %62 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1
  %63 = bitcast %"class.jxl::Plane.97"* %62 to i8*
  %64 = bitcast %"class.jxl::Plane.97"* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 24, i1 false) #9
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %66 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %67 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %66, i64 0, i32 0, i32 0, i32 0
  %68 = bitcast %"class.std::__1::unique_ptr"* %66 to i64*
  %69 = load i64, i64* %68, align 8
  store i8* null, i8** %67, align 8
  %70 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %65, i64 0, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = bitcast %"class.std::__1::unique_ptr"* %65 to i64*
  store i64 %69, i64* %72, align 8
  %73 = icmp eq i8* %71, null
  br i1 %73, label %75, label %74

74:                                               ; preds = %60
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %71) #9
  br label %75

75:                                               ; preds = %74, %60
  %76 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2
  %77 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2
  %78 = bitcast %"class.jxl::Plane.97"* %77 to i8*
  %79 = bitcast %"class.jxl::Plane.97"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 24, i1 false) #9
  %80 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %81 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %82 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %81, i64 0, i32 0, i32 0, i32 0
  %83 = bitcast %"class.std::__1::unique_ptr"* %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i8* null, i8** %82, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %80, i64 0, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  %87 = bitcast %"class.std::__1::unique_ptr"* %80 to i64*
  store i64 %84, i64* %87, align 8
  %88 = icmp eq i8* %86, null
  br i1 %88, label %90, label %89

89:                                               ; preds = %75
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %86) #9
  br label %90

90:                                               ; preds = %75, %89
  %91 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %92 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 12, i1 false) #9
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %94 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 1
  %95 = bitcast i32* %93 to i8*
  %96 = bitcast i32* %94 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %96, i64 16, i1 false) #9
  %97 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %98 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 5
  %99 = bitcast i32* %97 to i8*
  %100 = bitcast i32* %98 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 6, i1 false) #9
  %101 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8
  %102 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %101, i64 0, i32 0
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 0
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 1
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  store i64 %106, i64* %107, align 8
  %108 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 2
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %108, i64 0, i32 0, i32 0, i32 0
  %111 = bitcast %"class.std::__1::unique_ptr"* %108 to i64*
  %112 = load i64, i64* %111, align 8
  store i8* null, i8** %110, align 8
  %113 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %109, i64 0, i32 0, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  %115 = bitcast %"class.std::__1::unique_ptr"* %109 to i64*
  store i64 %112, i64* %115, align 8
  %116 = icmp eq i8* %114, null
  br i1 %116, label %118, label %117

117:                                              ; preds = %90
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %114) #9
  br label %118

118:                                              ; preds = %117, %90
  %119 = icmp eq %"class.jxl::ImageBundle"* %1, %0
  br i1 %119, label %122, label %120

120:                                              ; preds = %118
  %121 = bitcast %"class.jxl::PaddedBytes"* %101 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %121, i8 0, i64 16, i1 false) #9
  br label %122

122:                                              ; preds = %118, %120
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %124 = load i32, i32* %123, align 8
  %125 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  store i32 %124, i32* %125, align 8
  %126 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 10, i32 1
  %128 = bitcast i32* %127 to i64*
  %129 = bitcast i32* %126 to i64*
  %130 = load i64, i64* %128, align 8
  store i64 %130, i64* %129, align 8
  %131 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %132 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 11, i32 1
  %133 = bitcast i32* %132 to i64*
  %134 = bitcast i32* %131 to i64*
  %135 = load i64, i64* %133, align 8
  store i64 %135, i64* %134, align 8
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %137 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 12, i32 1
  %138 = bitcast i32* %137 to i64*
  %139 = bitcast i32* %136 to i64*
  %140 = load i64, i64* %138, align 8
  store i64 %140, i64* %139, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %142 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 13, i32 1
  %143 = bitcast i32* %142 to i64*
  %144 = bitcast i32* %141 to i64*
  %145 = load i64, i64* %143, align 8
  store i64 %145, i64* %144, align 8
  %146 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %147 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12
  %148 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %146, i64 0, i32 0, i32 0
  %149 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %148, align 8
  %150 = icmp eq %"class.jxl::Plane.97"* %149, null
  br i1 %150, label %171, label %151

151:                                              ; preds = %122
  %152 = bitcast %"class.jxl::Plane.97"* %149 to i8*
  %153 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %154 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %153, align 8
  %155 = icmp eq %"class.jxl::Plane.97"* %154, %149
  br i1 %155, label %168, label %156

156:                                              ; preds = %151, %163
  %157 = phi %"class.jxl::Plane.97"* [ %158, %163 ], [ %154, %151 ]
  %158 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %157, i64 -1
  %159 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %157, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %160 = load i8*, i8** %159, align 8
  store i8* null, i8** %159, align 8
  %161 = icmp eq i8* %160, null
  br i1 %161, label %163, label %162

162:                                              ; preds = %156
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %160) #9
  br label %163

163:                                              ; preds = %162, %156
  %164 = icmp eq %"class.jxl::Plane.97"* %158, %149
  br i1 %164, label %165, label %156

165:                                              ; preds = %163
  %166 = bitcast %"class.std::__1::vector.169"* %146 to i8**
  %167 = load i8*, i8** %166, align 8
  br label %168

168:                                              ; preds = %165, %151
  %169 = phi i8* [ %167, %165 ], [ %152, %151 ]
  store %"class.jxl::Plane.97"* %149, %"class.jxl::Plane.97"** %153, align 8
  tail call void @_ZdlPv(i8* %169) #11
  %170 = bitcast %"class.std::__1::vector.169"* %146 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %170, i8 0, i64 24, i1 false) #9
  br label %171

171:                                              ; preds = %122, %168
  %172 = bitcast %"class.std::__1::vector.169"* %147 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = bitcast %"class.std::__1::vector.169"* %146 to i64*
  store i64 %173, i64* %174, align 8
  %175 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %176 = bitcast %"class.jxl::Plane.97"** %175 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %179 = bitcast %"class.jxl::Plane.97"** %178 to i64*
  store i64 %177, i64* %179, align 8
  %180 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %181 = bitcast %"class.jxl::Plane.97"** %180 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %184 = bitcast %"class.jxl::Plane.97"** %183 to i64*
  store i64 %182, i64* %184, align 8
  %185 = bitcast %"class.std::__1::vector.169"* %147 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %185, i8 0, i64 24, i1 false) #9
  %186 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 13
  %187 = load i64, i64* %186, align 8
  %188 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 13
  store i64 %187, i64* %188, align 8
  ret %"class.jxl::ImageBundle"* %0
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %3, align 8
  %5 = icmp eq %"class.jxl::Plane.97"* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Plane.97"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %9 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %8, align 8
  %10 = icmp eq %"class.jxl::Plane.97"* %9, %4
  br i1 %10, label %23, label %11

11:                                               ; preds = %6, %18
  %12 = phi %"class.jxl::Plane.97"* [ %13, %18 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %12, i64 -1
  %14 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %12, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %15) #9
  br label %18

18:                                               ; preds = %17, %11
  %19 = icmp eq %"class.jxl::Plane.97"* %13, %4
  br i1 %19, label %20, label %11

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.169"* %2 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %6
  %24 = phi i8* [ %22, %20 ], [ %7, %6 ]
  store %"class.jxl::Plane.97"* %4, %"class.jxl::Plane.97"** %8, align 8
  tail call void @_ZdlPv(i8* %24) #11
  br label %25

25:                                               ; preds = %1, %23
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %28) #9
  br label %31

31:                                               ; preds = %25, %30
  %32 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #9
  br label %36

36:                                               ; preds = %35, %31
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #9
  br label %41

41:                                               ; preds = %40, %36
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #9
  br label %46

46:                                               ; preds = %41, %45
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #11
  br label %55

55:                                               ; preds = %46, %52
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  %58 = icmp eq %"struct.jxl::jpeg::JPEGData"* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = bitcast %"struct.jxl::jpeg::JPEGData"* %57 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %61 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %61, i64 1
  %63 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %62, align 8
  tail call void %63(%"struct.jxl::jpeg::JPEGData"* nonnull %57) #9
  br label %64

64:                                               ; preds = %55, %59
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl11ImageBundle4CopyEv(%"class.jxl::ImageBundle"* noalias sret, %"class.jxl::ImageBundle"*) local_unnamed_addr #2 comdat align 2 {
  %3 = alloca %"class.jxl::Rect", align 8
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = alloca %"class.jxl::Image3", align 8
  %6 = alloca %"class.jxl::Plane.97", align 8
  %7 = bitcast %"class.jxl::ImageBundle"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 368, i1 false)
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %9 = bitcast %"struct.jxl::ImageMetadata"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.jxl::ImageBundle"* %0 to i64*
  store i64 0, i64* %11, align 8
  %12 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 1
  store i32 1, i32* %12, align 8
  %13 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %13) #9
  %14 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4, i32 0
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %16 = bitcast %"class.std::__1::basic_string"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false) #9
  %17 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %18 = bitcast i32* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 14, i1 false) #9
  %19 = bitcast %"struct.jxl::ImageMetadata"** %17 to i64*
  store i64 %10, i64* %19, align 8
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %21 = bitcast %"class.jxl::Image3"* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 96, i1 false) #9
  %22 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %22) #9
  %23 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %24 = bitcast %"class.std::__1::vector.169"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 32, i1 false) #9
  %25 = bitcast %"class.jxl::Image3"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %25) #9
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 96, i1 false) #9, !alias.scope !6
  %27 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 0
  %28 = load i32, i32* %27, align 8, !noalias !6
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4, !noalias !6
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %33, i64 %29, i64 %32, i64 4) #9
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %34, i64 %29, i64 %32, i64 4) #9
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %35, i64 %29, i64 %32, i64 4) #9
  %36 = bitcast %"class.jxl::Rect"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #9, !noalias !9
  %37 = bitcast %"class.jxl::Image3"* %26 to <2 x i32>*
  %38 = load <2 x i32>, <2 x i32>* %37, align 8, !noalias !9
  %39 = zext <2 x i32> %38 to <2 x i64>
  %40 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 0, i64 16, i1 false) #9, !noalias !9
  %41 = bitcast i64* %40 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %41, align 8, !noalias !9
  %42 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %42) #9, !noalias !9
  %43 = bitcast %"class.jxl::Image3"* %5 to <2 x i32>*
  %44 = load <2 x i32>, <2 x i32>* %43, align 8, !alias.scope !9
  %45 = zext <2 x i32> %44 to <2 x i64>
  %46 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 0, i64 16, i1 false) #9, !noalias !9
  %47 = bitcast i64* %46 to <2 x i64>*
  store <2 x i64> %45, <2 x i64>* %47, align 8, !noalias !9
  call void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* nonnull dereferenceable(32) %3, %"class.jxl::Image3"* dereferenceable(96) %26, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"class.jxl::Image3"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %42) #9, !noalias !9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #9, !noalias !9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* nonnull align 8 %25, i64 24, i1 false) #9
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %49 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i8* null, i8** %50, align 8
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  store i64 %52, i64* %55, align 8
  %56 = icmp eq i8* %54, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %2
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %54) #9
  br label %58

58:                                               ; preds = %57, %2
  %59 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1
  %60 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1
  %61 = bitcast %"class.jxl::Plane.97"* %60 to i8*
  %62 = bitcast %"class.jxl::Plane.97"* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false) #9
  %63 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %64 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store i8* null, i8** %65, align 8
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  store i64 %67, i64* %70, align 8
  %71 = icmp eq i8* %69, null
  br i1 %71, label %73, label %72

72:                                               ; preds = %58
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %69) #9
  br label %73

73:                                               ; preds = %72, %58
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2
  %75 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2
  %76 = bitcast %"class.jxl::Plane.97"* %75 to i8*
  %77 = bitcast %"class.jxl::Plane.97"* %74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 24, i1 false) #9
  %78 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %79 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %79, i64 0, i32 0, i32 0, i32 0
  %81 = bitcast %"class.std::__1::unique_ptr"* %79 to i64*
  %82 = load i64, i64* %81, align 8
  store i8* null, i8** %80, align 8
  %83 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 0, i32 0, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = bitcast %"class.std::__1::unique_ptr"* %78 to i64*
  store i64 %82, i64* %85, align 8
  %86 = icmp eq i8* %84, null
  br i1 %86, label %87, label %89

87:                                               ; preds = %73
  %88 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %88, align 8
  br label %95

89:                                               ; preds = %73
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %84) #9
  %90 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %92, align 8
  %93 = icmp eq i8* %91, null
  br i1 %93, label %95, label %94

94:                                               ; preds = %89
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %91) #9
  br label %95

95:                                               ; preds = %87, %94, %89
  %96 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  store i8* null, i8** %96, align 8
  %98 = icmp eq i8* %97, null
  br i1 %98, label %100, label %99

99:                                               ; preds = %95
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %97) #9
  br label %100

100:                                              ; preds = %99, %95
  %101 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  store i8* null, i8** %101, align 8
  %103 = icmp eq i8* %102, null
  br i1 %103, label %105, label %104

104:                                              ; preds = %100
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %102) #9
  br label %105

105:                                              ; preds = %100, %104
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %25) #9
  %106 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %107 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 12, i1 false) #9
  %108 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 1
  %110 = bitcast i32* %108 to i8*
  %111 = bitcast i32* %109 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 16, i1 false) #9
  %112 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %113 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 5
  %114 = bitcast i32* %112 to i8*
  %115 = bitcast i32* %113 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 6, i1 false) #9
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8
  %117 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 0
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  %120 = load i64, i64* %119, align 8
  %121 = icmp ult i64 %120, %118
  br i1 %121, label %122, label %123

122:                                              ; preds = %105
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %116, i64 %118) #9
  br label %123

123:                                              ; preds = %122, %105
  %124 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %125 = load i8*, i8** %124, align 8
  %126 = icmp eq i8* %125, null
  %127 = select i1 %126, i64 0, i64 %118
  %128 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %116, i64 0, i32 0
  store i64 %127, i64* %128, align 8
  br i1 %126, label %132, label %129

129:                                              ; preds = %123
  %130 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %131 = load i8*, i8** %130, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %125, i8* align 1 %131, i64 %127, i1 false) #9
  br label %132

132:                                              ; preds = %123, %129
  %133 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %134 = load i32, i32* %133, align 8
  %135 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  store i32 %134, i32* %135, align 8
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %137 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 10, i32 1
  %138 = bitcast i32* %137 to i64*
  %139 = bitcast i32* %136 to i64*
  %140 = load i64, i64* %138, align 8
  store i64 %140, i64* %139, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %142 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 11, i32 1
  %143 = bitcast i32* %142 to i64*
  %144 = bitcast i32* %141 to i64*
  %145 = load i64, i64* %143, align 8
  store i64 %145, i64* %144, align 8
  %146 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %147 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 12, i32 1
  %148 = bitcast i32* %147 to i64*
  %149 = bitcast i32* %146 to i64*
  %150 = load i64, i64* %148, align 8
  store i64 %150, i64* %149, align 8
  %151 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %152 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 13, i32 1
  %153 = bitcast i32* %152 to i64*
  %154 = bitcast i32* %151 to i64*
  %155 = load i64, i64* %153, align 8
  store i64 %155, i64* %154, align 8
  %156 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12
  %157 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %158 = bitcast %"class.jxl::Plane.97"** %157 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = bitcast %"class.std::__1::vector.169"* %156 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = sub i64 %159, %161
  %163 = ashr exact i64 %162, 5
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm(%"class.std::__1::vector.169"* %23, i64 %163)
  %164 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %156, i64 0, i32 0, i32 0
  %165 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %164, align 8
  %166 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %157, align 8
  %167 = icmp eq %"class.jxl::Plane.97"* %165, %166
  br i1 %167, label %177, label %168

168:                                              ; preds = %132
  %169 = bitcast %"class.jxl::Plane.97"* %6 to i8*
  %170 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %171 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %172 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %6, i64 0, i32 0, i32 5
  %173 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %172, i64 0, i32 0, i32 0, i32 0
  %174 = bitcast %"class.std::__1::unique_ptr"* %172 to i64*
  %175 = bitcast %"class.jxl::Plane.97"** %170 to i64*
  %176 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %6, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %181

177:                                              ; preds = %198, %132
  %178 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %179 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %178, align 8
  %180 = icmp eq %"struct.jxl::jpeg::JPEGData"* %179, null
  br i1 %180, label %205, label %201

181:                                              ; preds = %168, %198
  %182 = phi %"class.jxl::Plane.97"* [ %165, %168 ], [ %199, %198 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %169) #9
  call void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane.97"* nonnull sret %6, %"class.jxl::Plane.97"* dereferenceable(32) %182)
  %183 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %170, align 8
  %184 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %171, align 8
  %185 = icmp ult %"class.jxl::Plane.97"* %183, %184
  br i1 %185, label %186, label %193

186:                                              ; preds = %181
  %187 = bitcast %"class.jxl::Plane.97"* %183 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %187, i8* nonnull align 8 %169, i64 24, i1 false) #9
  %188 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %183, i64 0, i32 0, i32 5
  %189 = load i64, i64* %174, align 8
  store i8* null, i8** %173, align 8
  %190 = bitcast %"class.std::__1::unique_ptr"* %188 to i64*
  store i64 %189, i64* %190, align 8
  %191 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %183, i64 1
  %192 = ptrtoint %"class.jxl::Plane.97"* %191 to i64
  store i64 %192, i64* %175, align 8
  br label %194

193:                                              ; preds = %181
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.169"* %23, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %6) #9
  br label %194

194:                                              ; preds = %186, %193
  %195 = load i8*, i8** %176, align 8
  store i8* null, i8** %176, align 8
  %196 = icmp eq i8* %195, null
  br i1 %196, label %198, label %197

197:                                              ; preds = %194
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %195) #9
  br label %198

198:                                              ; preds = %194, %197
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %169) #9
  %199 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %182, i64 1
  %200 = icmp eq %"class.jxl::Plane.97"* %199, %166
  br i1 %200, label %177, label %181

201:                                              ; preds = %177
  %202 = call i8* @_Znwm(i64 296) #11
  %203 = bitcast i8* %202 to %"struct.jxl::jpeg::JPEGData"*
  call void @_ZN3jxl4jpeg8JPEGDataC2ERKS1_(%"struct.jxl::jpeg::JPEGData"* nonnull %203, %"struct.jxl::jpeg::JPEGData"* nonnull dereferenceable(296) %179) #9
  %204 = ptrtoint i8* %202 to i64
  br label %205

205:                                              ; preds = %177, %201
  %206 = phi i64 [ %204, %201 ], [ 0, %177 ]
  %207 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %208 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %207, align 8
  store i64 %206, i64* %11, align 8
  %209 = icmp eq %"struct.jxl::jpeg::JPEGData"* %208, null
  br i1 %209, label %215, label %210

210:                                              ; preds = %205
  %211 = bitcast %"struct.jxl::jpeg::JPEGData"* %208 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %212 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %211, align 8
  %213 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %212, i64 1
  %214 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %213, align 8
  call void %214(%"struct.jxl::jpeg::JPEGData"* nonnull %208) #9
  br label %215

215:                                              ; preds = %210, %205
  %216 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 1
  %217 = load i32, i32* %216, align 8
  store i32 %217, i32* %12, align 8
  %218 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 1
  %219 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 3, i32 1
  %220 = bitcast [3 x i32]* %218 to i8*
  %221 = bitcast [3 x i32]* %219 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %220, i8* align 8 %221, i64 14, i1 false) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3jxl12ImageBlender11PrepareRectERKNS_4RectERKNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENS8_9allocatorISB_EEEES3_(%"class.jxl::ImageBlender::RectBlender"* noalias sret, %"class.jxl::ImageBlender"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.std::__1::vector.169"* nocapture readonly dereferenceable(24), %"class.jxl::Rect"* nocapture readonly dereferenceable(32)) local_unnamed_addr #2 align 2 {
  %7 = alloca %"class.jxl::Rect", align 8
  %8 = alloca %"class.jxl::Rect", align 8
  %9 = alloca %"class.jxl::Image3", align 8
  %10 = alloca %"class.jxl::ImageBundle", align 8
  %11 = alloca %"class.std::__1::vector.169", align 8
  %12 = alloca %"class.jxl::Plane.97", align 8
  %13 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 -86, i64 520, i1 false)
  store i8 0, i8* %13, align 8
  %14 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 1
  %15 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 3, i32 1
  %16 = bitcast %"class.jxl::Rect"* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 72, i1 false) #9
  store i32 1, i32* %15, align 8
  %17 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 3, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %17) #9
  %18 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 3, i32 4, i32 0
  %19 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 3, i32 8
  %20 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 3, i32 11
  %21 = bitcast i32* %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 14, i1 false) #9
  %22 = bitcast %"class.std::__1::basic_string"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 128, i1 false) #9
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %20) #9
  %23 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 3, i32 12
  %24 = bitcast %"class.std::__1::vector.169"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 32, i1 false) #9
  %25 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 5
  %26 = bitcast %"class.std::__1::vector.246"* %25 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 72, i1 false) #9
  %27 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %1, i64 0, i32 1
  %28 = bitcast %"class.jxl::ImageBundle"** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 4
  %31 = bitcast %"class.jxl::ImageBundle"** %30 to i64*
  store i64 %29, i64* %31, align 8
  %32 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %33 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %1, i64 0, i32 3, i32 0
  %34 = load i64, i64* %32, align 8, !noalias !12
  %35 = load i64, i64* %33, align 8, !noalias !12
  %36 = icmp ult i64 %34, %35
  %37 = select i1 %36, i64 %35, i64 %34
  %38 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %39 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %1, i64 0, i32 3, i32 1
  %40 = load i64, i64* %38, align 8, !noalias !12
  %41 = load i64, i64* %39, align 8, !noalias !12
  %42 = icmp ult i64 %40, %41
  %43 = select i1 %42, i64 %41, i64 %40
  %44 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %45 = load i64, i64* %44, align 8, !noalias !12
  %46 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %47 = load i64, i64* %46, align 8, !noalias !12
  %48 = add i64 %45, %34
  %49 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %1, i64 0, i32 3, i32 2
  %50 = load i64, i64* %49, align 8, !noalias !12
  %51 = add i64 %50, %35
  %52 = icmp ult i64 %51, %48
  %53 = select i1 %52, i64 %51, i64 %48
  %54 = add i64 %47, %40
  %55 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %1, i64 0, i32 3, i32 3
  %56 = load i64, i64* %55, align 8, !noalias !12
  %57 = add i64 %56, %41
  %58 = icmp ult i64 %57, %54
  %59 = select i1 %58, i64 %57, i64 %54
  %60 = add i64 %45, %37
  %61 = icmp ugt i64 %60, %53
  %62 = tail call i64 @llvm.usub.sat.i64(i64 %53, i64 %37) #9
  %63 = select i1 %61, i64 %62, i64 %45
  %64 = add i64 %47, %43
  %65 = icmp ugt i64 %64, %59
  %66 = tail call i64 @llvm.usub.sat.i64(i64 %59, i64 %43) #9
  %67 = select i1 %65, i64 %66, i64 %47
  %68 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 1, i32 0
  store i64 %37, i64* %68, align 8
  %69 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 1, i32 1
  store i64 %43, i64* %69, align 8
  %70 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 1, i32 2
  store i64 %63, i64* %70, align 8
  %71 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 1, i32 3
  store i64 %67, i64* %71, align 8
  %72 = icmp eq i64 %63, 0
  %73 = icmp eq i64 %67, 0
  %74 = or i1 %72, %73
  br i1 %74, label %75, label %76

75:                                               ; preds = %6
  store i8 1, i8* %13, align 8
  br label %369

76:                                               ; preds = %6
  %77 = bitcast %"class.jxl::Rect"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %77) #9
  %78 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %8, i64 0, i32 0
  %79 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %8, i64 0, i32 1
  %80 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %8, i64 0, i32 2
  %81 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %8, i64 0, i32 3
  %82 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %83, %34
  %85 = add i64 %84, %37
  %86 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %87, %40
  %89 = add i64 %88, %43
  store i64 %85, i64* %78, align 8
  store i64 %89, i64* %79, align 8
  store i64 %63, i64* %80, align 8
  store i64 %67, i64* %81, align 8
  %90 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %1, i64 0, i32 6, i32 0
  %91 = load i32, i32* %90, align 8
  %92 = sext i32 %91 to i64
  %93 = add i64 %37, %92
  %94 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %1, i64 0, i32 6, i32 1
  %95 = load i32, i32* %94, align 4
  %96 = sext i32 %95 to i64
  %97 = add i64 %43, %96
  %98 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 2, i32 0
  store i64 %93, i64* %98, align 8
  %99 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 2, i32 1
  store i64 %97, i64* %99, align 8
  %100 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 2, i32 2
  store i64 %63, i64* %100, align 8
  %101 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 2, i32 3
  store i64 %67, i64* %101, align 8
  %102 = bitcast %"class.jxl::Image3"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %102) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %102, i8 -86, i64 96, i1 false)
  %103 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %103, i64 %63, i64 %67, i64 4) #9
  %104 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %104, i64 %63, i64 %67, i64 4) #9
  %105 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %105, i64 %63, i64 %67, i64 4) #9
  %106 = bitcast %"class.jxl::Rect"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %106) #9, !noalias !15
  %107 = bitcast %"class.jxl::Image3"* %9 to <2 x i32>*
  %108 = load <2 x i32>, <2 x i32>* %107, align 8, !alias.scope !15
  %109 = zext <2 x i32> %108 to <2 x i64>
  %110 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %7, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %106, i8 0, i64 16, i1 false) #9, !noalias !15
  %111 = bitcast i64* %110 to <2 x i64>*
  store <2 x i64> %109, <2 x i64>* %111, align 8, !noalias !15
  call void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* nonnull dereferenceable(32) %8, %"class.jxl::Image3"* dereferenceable(96) %3, %"class.jxl::Rect"* nonnull dereferenceable(32) %7, %"class.jxl::Image3"* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %106) #9, !noalias !15
  %112 = bitcast %"class.jxl::ImageBundle"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %112) #9
  %113 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %27, align 8
  %114 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %113, i64 0, i32 9
  %115 = bitcast %"struct.jxl::ImageMetadata"** %114 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = bitcast %"class.jxl::ImageBundle"* %10 to i64*
  store i64 0, i64* %117, align 8
  %118 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 1
  store i32 1, i32* %118, align 8
  %119 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %119) #9
  %120 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 4, i32 0
  %121 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 8
  %122 = bitcast %"class.std::__1::basic_string"* %121 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %122, i8 0, i64 24, i1 false) #9
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 9
  %124 = bitcast i32* %120 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %124, i8 0, i64 14, i1 false) #9
  %125 = bitcast %"struct.jxl::ImageMetadata"** %123 to i64*
  store i64 %116, i64* %125, align 8
  %126 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 10
  %127 = bitcast %"class.jxl::Image3"* %126 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %127, i8 0, i64 96, i1 false) #9
  %128 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %128) #9
  %129 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 12
  %130 = bitcast %"class.std::__1::vector.169"* %129 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %130, i8 0, i64 32, i1 false) #9
  %131 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 3
  %132 = call dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"* %131, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %10) #9
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %10) #9
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %112) #9
  %133 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 3, i32 9
  %134 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %133, align 8
  %135 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %134, i64 0, i32 7, i32 9
  %136 = load i32, i32* %135, align 8
  %137 = icmp eq i32 %136, 1
  %138 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext %137) #9
  call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* %131, %"class.jxl::Image3"* nonnull dereferenceable(96) %9, %"struct.jxl::ColorEncoding"* dereferenceable(152) %138) #9
  %139 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %4, i64 0, i32 0, i32 0
  %140 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %139, align 8
  %141 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %4, i64 0, i32 0, i32 1
  %142 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %141, align 8
  %143 = icmp eq %"class.jxl::Plane.97"* %140, %142
  br i1 %143, label %144, label %149

144:                                              ; preds = %76
  %145 = ptrtoint %"class.jxl::Plane.97"* %140 to i64
  %146 = ptrtoint %"class.jxl::Plane.97"* %142 to i64
  %147 = bitcast %"class.jxl::Plane.97"** %141 to i64*
  %148 = bitcast %"class.std::__1::vector.169"* %4 to i64*
  br label %265

149:                                              ; preds = %76
  %150 = bitcast %"class.std::__1::vector.169"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %150) #9
  %151 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %11, i64 0, i32 0, i32 0
  %152 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %11, i64 0, i32 0, i32 1
  %153 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %11, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %150, i8 0, i64 24, i1 false) #9
  %154 = bitcast %"class.jxl::Plane.97"* %12 to i8*
  %155 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %12, i64 0, i32 0, i32 4
  %156 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %12, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %157 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %12, i64 0, i32 0
  %158 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %12, i64 0, i32 0, i32 5
  %159 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %158, i64 0, i32 0, i32 0, i32 0
  %160 = bitcast %"class.std::__1::unique_ptr"* %158 to i64*
  %161 = bitcast %"class.jxl::Plane.97"** %152 to i64*
  %162 = bitcast %"class.jxl::Plane.97"* %12 to i8*
  br label %189

163:                                              ; preds = %262
  call void @_ZN3jxl11ImageBundle16SetExtraChannelsEONSt3__16vectorINS_5PlaneIfEENS1_9allocatorIS4_EEEE(%"class.jxl::ImageBundle"* %131, %"class.std::__1::vector.169"* nonnull dereferenceable(24) %11) #9
  %164 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %151, align 8
  %165 = icmp eq %"class.jxl::Plane.97"* %164, null
  br i1 %165, label %184, label %166

166:                                              ; preds = %163
  %167 = bitcast %"class.jxl::Plane.97"* %164 to i8*
  %168 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %152, align 8
  %169 = icmp eq %"class.jxl::Plane.97"* %168, %164
  br i1 %169, label %182, label %170

170:                                              ; preds = %166, %177
  %171 = phi %"class.jxl::Plane.97"* [ %172, %177 ], [ %168, %166 ]
  %172 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %171, i64 -1
  %173 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %171, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %174 = load i8*, i8** %173, align 8
  store i8* null, i8** %173, align 8
  %175 = icmp eq i8* %174, null
  br i1 %175, label %177, label %176

176:                                              ; preds = %170
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %174) #9
  br label %177

177:                                              ; preds = %176, %170
  %178 = icmp eq %"class.jxl::Plane.97"* %172, %164
  br i1 %178, label %179, label %170

179:                                              ; preds = %177
  %180 = bitcast %"class.std::__1::vector.169"* %11 to i8**
  %181 = load i8*, i8** %180, align 8
  br label %182

182:                                              ; preds = %179, %166
  %183 = phi i8* [ %181, %179 ], [ %167, %166 ]
  store %"class.jxl::Plane.97"* %164, %"class.jxl::Plane.97"** %152, align 8
  call void @_ZdlPv(i8* %183) #11
  br label %184

184:                                              ; preds = %163, %182
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %150) #9
  %185 = bitcast %"class.jxl::Plane.97"** %141 to i64*
  %186 = load i64, i64* %185, align 8
  %187 = bitcast %"class.std::__1::vector.169"* %4 to i64*
  %188 = load i64, i64* %187, align 8
  br label %265

189:                                              ; preds = %149, %262
  %190 = phi %"class.jxl::Plane.97"* [ %140, %149 ], [ %263, %262 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %154) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %162, i8 -86, i64 32, i1 false)
  %191 = load i64, i64* %80, align 8
  %192 = load i64, i64* %81, align 8
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %157, i64 %191, i64 %192, i64 4) #9
  %193 = load i64, i64* %80, align 8, !noalias !18
  %194 = icmp eq i64 %193, 0
  %195 = load i64, i64* %81, align 8
  %196 = icmp eq i64 %195, 0
  %197 = or i1 %194, %196
  br i1 %197, label %246, label %198

198:                                              ; preds = %189
  %199 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %190, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %200 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %190, i64 0, i32 0, i32 4
  %201 = load i8*, i8** %156, align 8, !alias.scope !18
  %202 = load i64, i64* %155, align 8, !alias.scope !18
  %203 = load i64, i64* %79, align 8, !noalias !18
  %204 = load i8*, i8** %199, align 8, !noalias !18
  %205 = load i64, i64* %200, align 8, !noalias !18
  %206 = mul i64 %205, %203
  %207 = getelementptr inbounds i8, i8* %204, i64 %206
  %208 = ptrtoint i8* %207 to i64
  %209 = and i64 %208, 63
  %210 = icmp eq i64 %209, 0
  call void @llvm.assume(i1 %210) #9, !noalias !18
  %211 = bitcast i8* %207 to float*
  %212 = load i64, i64* %78, align 8, !noalias !18
  %213 = getelementptr inbounds float, float* %211, i64 %212
  %214 = ptrtoint i8* %201 to i64
  %215 = and i64 %214, 63
  %216 = icmp eq i64 %215, 0
  call void @llvm.assume(i1 %216) #9, !noalias !18
  %217 = bitcast float* %213 to i8*
  %218 = shl i64 %193, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %201, i8* align 4 %217, i64 %218, i1 false) #9, !noalias !18
  %219 = load i64, i64* %81, align 8, !noalias !18
  %220 = icmp ugt i64 %219, 1
  br i1 %220, label %221, label %246

221:                                              ; preds = %198, %221
  %222 = phi i64 [ %243, %221 ], [ 1, %198 ]
  %223 = load i64, i64* %80, align 8, !noalias !18
  %224 = load i64, i64* %79, align 8, !noalias !18
  %225 = add i64 %224, %222
  %226 = load i8*, i8** %199, align 8, !noalias !18
  %227 = load i64, i64* %200, align 8, !noalias !18
  %228 = mul i64 %227, %225
  %229 = getelementptr inbounds i8, i8* %226, i64 %228
  %230 = ptrtoint i8* %229 to i64
  %231 = and i64 %230, 63
  %232 = icmp eq i64 %231, 0
  call void @llvm.assume(i1 %232) #9, !noalias !18
  %233 = bitcast i8* %229 to float*
  %234 = load i64, i64* %78, align 8, !noalias !18
  %235 = getelementptr inbounds float, float* %233, i64 %234
  %236 = mul i64 %222, %202
  %237 = getelementptr inbounds i8, i8* %201, i64 %236
  %238 = ptrtoint i8* %237 to i64
  %239 = and i64 %238, 63
  %240 = icmp eq i64 %239, 0
  call void @llvm.assume(i1 %240) #9, !noalias !18
  %241 = bitcast float* %235 to i8*
  %242 = shl i64 %223, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %237, i8* align 4 %241, i64 %242, i1 false) #9, !noalias !18
  %243 = add nuw i64 %222, 1
  %244 = load i64, i64* %81, align 8, !noalias !18
  %245 = icmp ult i64 %243, %244
  br i1 %245, label %221, label %246

246:                                              ; preds = %221, %189, %198
  %247 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %152, align 8
  %248 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %153, align 8
  %249 = icmp ult %"class.jxl::Plane.97"* %247, %248
  br i1 %249, label %250, label %257

250:                                              ; preds = %246
  %251 = bitcast %"class.jxl::Plane.97"* %247 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %251, i8* nonnull align 8 %154, i64 24, i1 false) #9
  %252 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %247, i64 0, i32 0, i32 5
  %253 = load i64, i64* %160, align 8
  store i8* null, i8** %159, align 8
  %254 = bitcast %"class.std::__1::unique_ptr"* %252 to i64*
  store i64 %253, i64* %254, align 8
  %255 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %247, i64 1
  %256 = ptrtoint %"class.jxl::Plane.97"* %255 to i64
  store i64 %256, i64* %161, align 8
  br label %258

257:                                              ; preds = %246
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.169"* nonnull %11, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %12) #9
  br label %258

258:                                              ; preds = %250, %257
  %259 = load i8*, i8** %156, align 8
  store i8* null, i8** %156, align 8
  %260 = icmp eq i8* %259, null
  br i1 %260, label %262, label %261

261:                                              ; preds = %258
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %259) #9
  br label %262

262:                                              ; preds = %258, %261
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %154) #9
  %263 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %190, i64 1
  %264 = icmp eq %"class.jxl::Plane.97"* %263, %142
  br i1 %264, label %163, label %189

265:                                              ; preds = %144, %184
  %266 = phi i64* [ %148, %144 ], [ %187, %184 ]
  %267 = phi i64* [ %147, %144 ], [ %185, %184 ]
  %268 = phi i64 [ %145, %144 ], [ %188, %184 ]
  %269 = phi i64 [ %146, %144 ], [ %186, %184 ]
  %270 = bitcast %"class.jxl::Rect"* %14 to <2 x i64>*
  %271 = load <2 x i64>, <2 x i64>* %270, align 8
  %272 = bitcast %"class.jxl::Rect"* %2 to <2 x i64>*
  %273 = load <2 x i64>, <2 x i64>* %272, align 8
  %274 = sub <2 x i64> %271, %273
  %275 = bitcast i64* %68 to <2 x i64>*
  store <2 x i64> %274, <2 x i64>* %275, align 8
  %276 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 7
  %277 = sub i64 %269, %268
  %278 = ashr exact i64 %277, 5
  %279 = add nsw i64 %278, 1
  %280 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 7, i32 0, i32 1
  %281 = bitcast %"struct.jxl::PatchBlending"** %280 to i64*
  %282 = load i64, i64* %281, align 8
  %283 = bitcast %"class.std::__1::vector.57"* %276 to i64*
  %284 = load i64, i64* %283, align 8
  %285 = sub i64 %282, %284
  %286 = sdiv exact i64 %285, 12
  %287 = icmp ugt i64 %279, %286
  %288 = inttoptr i64 %284 to %"struct.jxl::PatchBlending"*
  br i1 %287, label %289, label %293

289:                                              ; preds = %265
  %290 = sub nsw i64 %279, %286
  call void @_ZNSt3__16vectorIN3jxl13PatchBlendingENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.57"* %276, i64 %290) #9
  %291 = getelementptr inbounds %"class.std::__1::vector.57", %"class.std::__1::vector.57"* %276, i64 0, i32 0, i32 0
  %292 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %291, align 8
  br label %297

293:                                              ; preds = %265
  %294 = icmp ult i64 %279, %286
  br i1 %294, label %295, label %297

295:                                              ; preds = %293
  %296 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %288, i64 %279
  store %"struct.jxl::PatchBlending"* %296, %"struct.jxl::PatchBlending"** %280, align 8
  br label %297

297:                                              ; preds = %289, %293, %295
  %298 = phi %"struct.jxl::PatchBlending"* [ %292, %289 ], [ %288, %293 ], [ %288, %295 ]
  %299 = getelementptr inbounds %"class.std::__1::vector.57", %"class.std::__1::vector.57"* %276, i64 0, i32 0, i32 0
  %300 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %1, i64 0, i32 0, i32 2
  %301 = load i32, i32* %300, align 4
  %302 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %298, i64 0, i32 1
  store i32 %301, i32* %302, align 4
  %303 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %1, i64 0, i32 0, i32 3
  %304 = load i8, i8* %303, align 8, !range !2
  %305 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %298, i64 0, i32 2
  store i8 %304, i8* %305, align 4
  %306 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %1, i64 0, i32 0, i32 1
  %307 = load i32, i32* %306, align 8
  %308 = icmp ult i32 %307, 5
  br i1 %308, label %312, label %309

309:                                              ; preds = %297
  %310 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i64 0, i64 0), i32 225) #9
  %311 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

312:                                              ; preds = %297
  %313 = zext i32 %307 to i40
  %314 = shl nuw nsw i40 %313, 3
  %315 = lshr i40 12985827841, %314
  %316 = trunc i40 %315 to i8
  %317 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %298, i64 0, i32 0
  store i8 %316, i8* %317, align 4
  %318 = load i64, i64* %267, align 8
  %319 = load i64, i64* %266, align 8
  %320 = icmp eq i64 %318, %319
  br i1 %320, label %323, label %321

321:                                              ; preds = %312
  %322 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %1, i64 0, i32 5
  br label %339

323:                                              ; preds = %358, %312
  %324 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %325 = load i8*, i8** %324, align 8
  store i8* null, i8** %324, align 8
  %326 = icmp eq i8* %325, null
  br i1 %326, label %328, label %327

327:                                              ; preds = %323
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %325) #9
  br label %328

328:                                              ; preds = %327, %323
  %329 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %330 = load i8*, i8** %329, align 8
  store i8* null, i8** %329, align 8
  %331 = icmp eq i8* %330, null
  br i1 %331, label %333, label %332

332:                                              ; preds = %328
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %330) #9
  br label %333

333:                                              ; preds = %332, %328
  %334 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %335 = load i8*, i8** %334, align 8
  store i8* null, i8** %334, align 8
  %336 = icmp eq i8* %335, null
  br i1 %336, label %338, label %337

337:                                              ; preds = %333
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %335) #9
  br label %338

338:                                              ; preds = %333, %337
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %102) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %77) #9
  br label %369

339:                                              ; preds = %321, %358
  %340 = phi i64 [ 0, %321 ], [ %344, %358 ]
  %341 = load %"class.std::__1::vector.16"*, %"class.std::__1::vector.16"** %322, align 8
  %342 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %341, i64 0, i32 0, i32 0
  %343 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %342, align 8
  %344 = add nuw i64 %340, 1
  %345 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %299, align 8
  %346 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %343, i64 %340, i32 2
  %347 = load i32, i32* %346, align 4
  %348 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %345, i64 %344, i32 1
  store i32 %347, i32* %348, align 4
  %349 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %343, i64 %340, i32 3
  %350 = load i8, i8* %349, align 8, !range !2
  %351 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %345, i64 %344, i32 2
  store i8 %350, i8* %351, align 4
  %352 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %343, i64 %340, i32 1
  %353 = load i32, i32* %352, align 8
  %354 = icmp ult i32 %353, 5
  br i1 %354, label %358, label %355

355:                                              ; preds = %339
  %356 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i64 0, i64 0), i32 225) #9
  %357 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

358:                                              ; preds = %339
  %359 = zext i32 %353 to i40
  %360 = shl nuw nsw i40 %359, 3
  %361 = lshr i40 12985827841, %360
  %362 = trunc i40 %361 to i8
  %363 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %345, i64 %344, i32 0
  store i8 %362, i8* %363, align 4
  %364 = load i64, i64* %267, align 8
  %365 = load i64, i64* %266, align 8
  %366 = sub i64 %364, %365
  %367 = ashr exact i64 %366, 5
  %368 = icmp ult i64 %344, %367
  br i1 %368, label %339, label %323

369:                                              ; preds = %75, %338
  ret void
}

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl15PerformBlendingEPKPKfS3_PKPfmRKNS_13PatchBlendingEPS8_RKNSt3__16vectorINS_16ExtraChannelInfoENSB_9allocatorISD_EEEE(float** readonly, float** readonly, float** nocapture readonly, i64, %"struct.jxl::PatchBlending"* nocapture readonly dereferenceable(12), %"struct.jxl::PatchBlending"* nocapture readonly, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 {
  %8 = alloca %"class.jxl::Plane.97", align 8
  %9 = alloca %"struct.jxl::AlphaBlendingInputLayer", align 16
  %10 = alloca %"struct.jxl::AlphaBlendingInputLayer", align 16
  %11 = alloca %"struct.jxl::AlphaBlendingOutput", align 8
  %12 = alloca %"struct.jxl::AlphaBlendingInputLayer", align 16
  %13 = alloca %"struct.jxl::AlphaBlendingInputLayer", align 16
  %14 = alloca %"struct.jxl::AlphaBlendingOutput", align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %16 = bitcast %"struct.jxl::ExtraChannelInfo"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::vector"* %6 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = sdiv exact i64 %20, 96
  %22 = icmp eq i64 %20, 0
  %23 = inttoptr i64 %19 to %"struct.jxl::ExtraChannelInfo"*
  br i1 %22, label %32, label %26

24:                                               ; preds = %26
  %25 = icmp ult i64 %31, %21
  br i1 %25, label %26, label %32

26:                                               ; preds = %7, %24
  %27 = phi i64 [ %31, %24 ], [ 0, %7 ]
  %28 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %23, i64 %27, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 0
  %31 = add nuw i64 %27, 1
  br i1 %30, label %32, label %24

32:                                               ; preds = %24, %26, %7
  %33 = phi i1 [ false, %7 ], [ true, %26 ], [ false, %24 ]
  %34 = bitcast %"class.jxl::Plane.97"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %34) #9
  %35 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %8, i64 0, i32 0, i32 4
  %36 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %8, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %37 = add nsw i64 %21, 3
  %38 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %8, i64 0, i32 0
  %39 = bitcast %"class.jxl::Plane.97"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %39, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %38, i64 %3, i64 %37, i64 4) #9
  br i1 %22, label %48, label %40

40:                                               ; preds = %32
  %41 = shl i64 %3, 2
  %42 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %43 = icmp eq i64 %3, 0
  %44 = and i64 %3, 1
  %45 = icmp eq i64 %3, 1
  %46 = sub i64 %3, %44
  %47 = icmp eq i64 %44, 0
  br label %54

48:                                               ; preds = %269, %32
  %49 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %4, i64 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %4, i64 0, i32 0
  %53 = load i8, i8* %52, align 4
  switch i8 %53, label %273 [
    i8 2, label %276
    i8 6, label %272
  ]

54:                                               ; preds = %40, %269
  %55 = phi i64 [ 0, %40 ], [ %270, %269 ]
  %56 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %5, i64 %55, i32 0
  %57 = load i8, i8* %56, align 4
  switch i8 %57, label %247 [
    i8 2, label %58
    i8 4, label %102
    i8 5, label %131
    i8 6, label %160
    i8 7, label %183
    i8 3, label %206
    i8 1, label %223
    i8 0, label %235
  ]

58:                                               ; preds = %54
  br i1 %43, label %269, label %59

59:                                               ; preds = %58
  %60 = add i64 %55, 3
  %61 = getelementptr inbounds float*, float** %0, i64 %60
  %62 = getelementptr inbounds float*, float** %1, i64 %60
  br i1 %45, label %250, label %63

63:                                               ; preds = %59, %63
  %64 = phi i64 [ %99, %63 ], [ 0, %59 ]
  %65 = phi i64 [ %100, %63 ], [ %46, %59 ]
  %66 = load float*, float** %61, align 8
  %67 = getelementptr inbounds float, float* %66, i64 %64
  %68 = load float, float* %67, align 4
  %69 = load float*, float** %62, align 8
  %70 = getelementptr inbounds float, float* %69, i64 %64
  %71 = load float, float* %70, align 4
  %72 = fadd float %68, %71
  %73 = load i8*, i8** %36, align 8
  %74 = load i64, i64* %35, align 8
  %75 = mul i64 %74, %60
  %76 = getelementptr inbounds i8, i8* %73, i64 %75
  %77 = ptrtoint i8* %76 to i64
  %78 = and i64 %77, 63
  %79 = icmp eq i64 %78, 0
  call void @llvm.assume(i1 %79) #9
  %80 = bitcast i8* %76 to float*
  %81 = getelementptr inbounds float, float* %80, i64 %64
  store float %72, float* %81, align 8
  %82 = or i64 %64, 1
  %83 = load float*, float** %61, align 8
  %84 = getelementptr inbounds float, float* %83, i64 %82
  %85 = load float, float* %84, align 4
  %86 = load float*, float** %62, align 8
  %87 = getelementptr inbounds float, float* %86, i64 %82
  %88 = load float, float* %87, align 4
  %89 = fadd float %85, %88
  %90 = load i8*, i8** %36, align 8
  %91 = load i64, i64* %35, align 8
  %92 = mul i64 %91, %60
  %93 = getelementptr inbounds i8, i8* %90, i64 %92
  %94 = ptrtoint i8* %93 to i64
  %95 = and i64 %94, 63
  %96 = icmp eq i64 %95, 0
  call void @llvm.assume(i1 %96) #9
  %97 = bitcast i8* %93 to float*
  %98 = getelementptr inbounds float, float* %97, i64 %82
  store float %89, float* %98, align 4
  %99 = add nuw i64 %64, 2
  %100 = add i64 %65, -2
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %250, label %63

102:                                              ; preds = %54
  %103 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %5, i64 %55, i32 1
  %104 = load i32, i32* %103, align 4
  %105 = zext i32 %104 to i64
  %106 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %42, align 8
  %107 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %106, i64 %105, i32 6
  %108 = load i8, i8* %107, align 8, !range !2
  %109 = icmp ne i8 %108, 0
  %110 = add i64 %55, 3
  %111 = getelementptr inbounds float*, float** %0, i64 %110
  %112 = load float*, float** %111, align 8
  %113 = add nuw nsw i64 %105, 3
  %114 = getelementptr inbounds float*, float** %0, i64 %113
  %115 = load float*, float** %114, align 8
  %116 = getelementptr inbounds float*, float** %1, i64 %110
  %117 = load float*, float** %116, align 8
  %118 = getelementptr inbounds float*, float** %1, i64 %113
  %119 = load float*, float** %118, align 8
  %120 = load i8*, i8** %36, align 8
  %121 = load i64, i64* %35, align 8
  %122 = mul i64 %121, %110
  %123 = getelementptr inbounds i8, i8* %120, i64 %122
  %124 = ptrtoint i8* %123 to i64
  %125 = and i64 %124, 63
  %126 = icmp eq i64 %125, 0
  call void @llvm.assume(i1 %126) #9
  %127 = bitcast i8* %123 to float*
  %128 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %5, i64 %55, i32 2
  %129 = load i8, i8* %128, align 4, !range !2
  %130 = icmp ne i8 %129, 0
  call void @_ZN3jxl20PerformAlphaBlendingEPKfS1_S1_S1_Pfmbb(float* %112, float* %115, float* %117, float* %119, float* %127, i64 %3, i1 zeroext %109, i1 zeroext %130) #9
  br label %269

131:                                              ; preds = %54
  %132 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %5, i64 %55, i32 1
  %133 = load i32, i32* %132, align 4
  %134 = zext i32 %133 to i64
  %135 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %42, align 8
  %136 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %135, i64 %134, i32 6
  %137 = load i8, i8* %136, align 8, !range !2
  %138 = icmp ne i8 %137, 0
  %139 = add i64 %55, 3
  %140 = getelementptr inbounds float*, float** %1, i64 %139
  %141 = load float*, float** %140, align 8
  %142 = add nuw nsw i64 %134, 3
  %143 = getelementptr inbounds float*, float** %1, i64 %142
  %144 = load float*, float** %143, align 8
  %145 = getelementptr inbounds float*, float** %0, i64 %139
  %146 = load float*, float** %145, align 8
  %147 = getelementptr inbounds float*, float** %0, i64 %142
  %148 = load float*, float** %147, align 8
  %149 = load i8*, i8** %36, align 8
  %150 = load i64, i64* %35, align 8
  %151 = mul i64 %150, %139
  %152 = getelementptr inbounds i8, i8* %149, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = and i64 %153, 63
  %155 = icmp eq i64 %154, 0
  call void @llvm.assume(i1 %155) #9
  %156 = bitcast i8* %152 to float*
  %157 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %5, i64 %55, i32 2
  %158 = load i8, i8* %157, align 4, !range !2
  %159 = icmp ne i8 %158, 0
  call void @_ZN3jxl20PerformAlphaBlendingEPKfS1_S1_S1_Pfmbb(float* %141, float* %144, float* %146, float* %148, float* %156, i64 %3, i1 zeroext %138, i1 zeroext %159) #9
  br label %269

160:                                              ; preds = %54
  %161 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %5, i64 %55, i32 1
  %162 = load i32, i32* %161, align 4
  %163 = zext i32 %162 to i64
  %164 = add i64 %55, 3
  %165 = getelementptr inbounds float*, float** %0, i64 %164
  %166 = load float*, float** %165, align 8
  %167 = getelementptr inbounds float*, float** %1, i64 %164
  %168 = load float*, float** %167, align 8
  %169 = add nuw nsw i64 %163, 3
  %170 = getelementptr inbounds float*, float** %1, i64 %169
  %171 = load float*, float** %170, align 8
  %172 = load i8*, i8** %36, align 8
  %173 = load i64, i64* %35, align 8
  %174 = mul i64 %173, %164
  %175 = getelementptr inbounds i8, i8* %172, i64 %174
  %176 = ptrtoint i8* %175 to i64
  %177 = and i64 %176, 63
  %178 = icmp eq i64 %177, 0
  call void @llvm.assume(i1 %178) #9
  %179 = bitcast i8* %175 to float*
  %180 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %5, i64 %55, i32 2
  %181 = load i8, i8* %180, align 4, !range !2
  %182 = icmp ne i8 %181, 0
  call void @_ZN3jxl23PerformAlphaWeightedAddEPKfS1_S1_Pfmb(float* %166, float* %168, float* %171, float* %179, i64 %3, i1 zeroext %182) #9
  br label %269

183:                                              ; preds = %54
  %184 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %5, i64 %55, i32 1
  %185 = load i32, i32* %184, align 4
  %186 = zext i32 %185 to i64
  %187 = add i64 %55, 3
  %188 = getelementptr inbounds float*, float** %1, i64 %187
  %189 = load float*, float** %188, align 8
  %190 = getelementptr inbounds float*, float** %0, i64 %187
  %191 = load float*, float** %190, align 8
  %192 = add nuw nsw i64 %186, 3
  %193 = getelementptr inbounds float*, float** %0, i64 %192
  %194 = load float*, float** %193, align 8
  %195 = load i8*, i8** %36, align 8
  %196 = load i64, i64* %35, align 8
  %197 = mul i64 %196, %187
  %198 = getelementptr inbounds i8, i8* %195, i64 %197
  %199 = ptrtoint i8* %198 to i64
  %200 = and i64 %199, 63
  %201 = icmp eq i64 %200, 0
  call void @llvm.assume(i1 %201) #9
  %202 = bitcast i8* %198 to float*
  %203 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %5, i64 %55, i32 2
  %204 = load i8, i8* %203, align 4, !range !2
  %205 = icmp ne i8 %204, 0
  call void @_ZN3jxl23PerformAlphaWeightedAddEPKfS1_S1_Pfmb(float* %189, float* %191, float* %194, float* %202, i64 %3, i1 zeroext %205) #9
  br label %269

206:                                              ; preds = %54
  %207 = add i64 %55, 3
  %208 = getelementptr inbounds float*, float** %0, i64 %207
  %209 = load float*, float** %208, align 8
  %210 = getelementptr inbounds float*, float** %1, i64 %207
  %211 = load float*, float** %210, align 8
  %212 = load i8*, i8** %36, align 8
  %213 = load i64, i64* %35, align 8
  %214 = mul i64 %213, %207
  %215 = getelementptr inbounds i8, i8* %212, i64 %214
  %216 = ptrtoint i8* %215 to i64
  %217 = and i64 %216, 63
  %218 = icmp eq i64 %217, 0
  call void @llvm.assume(i1 %218) #9
  %219 = bitcast i8* %215 to float*
  %220 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %5, i64 %55, i32 2
  %221 = load i8, i8* %220, align 4, !range !2
  %222 = icmp ne i8 %221, 0
  call void @_ZN3jxl18PerformMulBlendingEPKfS1_Pfmb(float* %209, float* %211, float* %219, i64 %3, i1 zeroext %222) #9
  br label %269

223:                                              ; preds = %54
  %224 = add i64 %55, 3
  %225 = load i8*, i8** %36, align 8
  %226 = load i64, i64* %35, align 8
  %227 = mul i64 %226, %224
  %228 = getelementptr inbounds i8, i8* %225, i64 %227
  %229 = ptrtoint i8* %228 to i64
  %230 = and i64 %229, 63
  %231 = icmp eq i64 %230, 0
  call void @llvm.assume(i1 %231) #9
  %232 = getelementptr inbounds float*, float** %1, i64 %224
  %233 = bitcast float** %232 to i8**
  %234 = load i8*, i8** %233, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %228, i8* align 4 %234, i64 %41, i1 false)
  br label %269

235:                                              ; preds = %54
  %236 = add i64 %55, 3
  %237 = load i8*, i8** %36, align 8
  %238 = load i64, i64* %35, align 8
  %239 = mul i64 %238, %236
  %240 = getelementptr inbounds i8, i8* %237, i64 %239
  %241 = ptrtoint i8* %240 to i64
  %242 = and i64 %241, 63
  %243 = icmp eq i64 %242, 0
  call void @llvm.assume(i1 %243) #9
  %244 = getelementptr inbounds float*, float** %0, i64 %236
  %245 = bitcast float** %244 to i8**
  %246 = load i8*, i8** %245, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %240, i8* align 4 %246, i64 %41, i1 false)
  br label %269

247:                                              ; preds = %54
  %248 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i64 0, i64 0), i32 285) #9
  %249 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

250:                                              ; preds = %63, %59
  %251 = phi i64 [ 0, %59 ], [ %99, %63 ]
  br i1 %47, label %269, label %252

252:                                              ; preds = %250
  %253 = load float*, float** %61, align 8
  %254 = getelementptr inbounds float, float* %253, i64 %251
  %255 = load float, float* %254, align 4
  %256 = load float*, float** %62, align 8
  %257 = getelementptr inbounds float, float* %256, i64 %251
  %258 = load float, float* %257, align 4
  %259 = fadd float %255, %258
  %260 = load i8*, i8** %36, align 8
  %261 = load i64, i64* %35, align 8
  %262 = mul i64 %261, %60
  %263 = getelementptr inbounds i8, i8* %260, i64 %262
  %264 = ptrtoint i8* %263 to i64
  %265 = and i64 %264, 63
  %266 = icmp eq i64 %265, 0
  call void @llvm.assume(i1 %266) #9
  %267 = bitcast i8* %263 to float*
  %268 = getelementptr inbounds float, float* %267, i64 %251
  store float %259, float* %268, align 4
  br label %269

269:                                              ; preds = %252, %250, %58, %131, %183, %223, %235, %206, %160, %102
  %270 = add nuw i64 %55, 1
  %271 = icmp ult i64 %270, %21
  br i1 %271, label %54, label %48

272:                                              ; preds = %48
  br i1 %33, label %579, label %276

273:                                              ; preds = %48
  %274 = icmp ne i8 %53, 7
  %275 = or i1 %33, %274
  br i1 %275, label %333, label %276

276:                                              ; preds = %273, %48, %272
  %277 = icmp eq i64 %3, 0
  %278 = load i8*, i8** %36, align 8
  %279 = ptrtoint i8* %278 to i64
  %280 = and i64 %279, 63
  %281 = icmp eq i64 %280, 0
  call void @llvm.assume(i1 %281) #9
  %282 = bitcast i8* %278 to float*
  br i1 %277, label %302, label %283

283:                                              ; preds = %276
  %284 = and i64 %3, 1
  %285 = icmp eq i64 %3, 1
  br i1 %285, label %288, label %286

286:                                              ; preds = %283
  %287 = sub i64 %3, %284
  br label %310

288:                                              ; preds = %310, %283
  %289 = phi i64 [ 0, %283 ], [ %330, %310 ]
  %290 = icmp eq i64 %284, 0
  br i1 %290, label %300, label %291

291:                                              ; preds = %288
  %292 = load float*, float** %0, align 8
  %293 = getelementptr inbounds float, float* %292, i64 %289
  %294 = load float, float* %293, align 4
  %295 = load float*, float** %1, align 8
  %296 = getelementptr inbounds float, float* %295, i64 %289
  %297 = load float, float* %296, align 4
  %298 = fadd float %294, %297
  %299 = getelementptr inbounds float, float* %282, i64 %289
  store float %298, float* %299, align 4
  br label %300

300:                                              ; preds = %288, %291
  %301 = load i8*, i8** %36, align 8
  br label %302

302:                                              ; preds = %300, %276
  %303 = phi i8* [ %301, %300 ], [ %278, %276 ]
  %304 = load i64, i64* %35, align 8
  %305 = getelementptr inbounds i8, i8* %303, i64 %304
  %306 = ptrtoint i8* %305 to i64
  %307 = and i64 %306, 63
  %308 = icmp eq i64 %307, 0
  call void @llvm.assume(i1 %308) #9
  %309 = bitcast i8* %305 to float*
  br i1 %277, label %763, label %718

310:                                              ; preds = %310, %286
  %311 = phi i64 [ 0, %286 ], [ %330, %310 ]
  %312 = phi i64 [ %287, %286 ], [ %331, %310 ]
  %313 = load float*, float** %0, align 8
  %314 = getelementptr inbounds float, float* %313, i64 %311
  %315 = load float, float* %314, align 4
  %316 = load float*, float** %1, align 8
  %317 = getelementptr inbounds float, float* %316, i64 %311
  %318 = load float, float* %317, align 4
  %319 = fadd float %315, %318
  %320 = getelementptr inbounds float, float* %282, i64 %311
  store float %319, float* %320, align 8
  %321 = or i64 %311, 1
  %322 = load float*, float** %0, align 8
  %323 = getelementptr inbounds float, float* %322, i64 %321
  %324 = load float, float* %323, align 4
  %325 = load float*, float** %1, align 8
  %326 = getelementptr inbounds float, float* %325, i64 %321
  %327 = load float, float* %326, align 4
  %328 = fadd float %324, %327
  %329 = getelementptr inbounds float, float* %282, i64 %321
  store float %328, float* %329, align 4
  %330 = add nuw i64 %311, 2
  %331 = add i64 %312, -2
  %332 = icmp eq i64 %331, 0
  br i1 %332, label %288, label %310

333:                                              ; preds = %273
  %334 = icmp ne i8 %53, 4
  %335 = xor i1 %33, true
  %336 = or i1 %334, %335
  br i1 %336, label %402, label %337

337:                                              ; preds = %333
  %338 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %339 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %338, align 8
  %340 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %339, i64 %51, i32 6
  %341 = load i8, i8* %340, align 8, !range !2
  %342 = icmp ne i8 %341, 0
  %343 = bitcast %"struct.jxl::AlphaBlendingInputLayer"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %343) #9
  %344 = bitcast float** %0 to <2 x i64>*
  %345 = load <2 x i64>, <2 x i64>* %344, align 8
  %346 = bitcast %"struct.jxl::AlphaBlendingInputLayer"* %9 to <2 x i64>*
  store <2 x i64> %345, <2 x i64>* %346, align 16
  %347 = getelementptr inbounds %"struct.jxl::AlphaBlendingInputLayer", %"struct.jxl::AlphaBlendingInputLayer"* %9, i64 0, i32 2
  %348 = getelementptr inbounds float*, float** %0, i64 2
  %349 = bitcast float** %348 to i64*
  %350 = load i64, i64* %349, align 8
  %351 = bitcast float** %347 to i64*
  store i64 %350, i64* %351, align 16
  %352 = getelementptr inbounds %"struct.jxl::AlphaBlendingInputLayer", %"struct.jxl::AlphaBlendingInputLayer"* %9, i64 0, i32 3
  %353 = add nuw nsw i64 %51, 3
  %354 = getelementptr inbounds float*, float** %0, i64 %353
  %355 = bitcast float** %354 to i64*
  %356 = load i64, i64* %355, align 8
  %357 = bitcast float** %352 to i64*
  store i64 %356, i64* %357, align 8
  %358 = bitcast %"struct.jxl::AlphaBlendingInputLayer"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %358) #9
  %359 = bitcast float** %1 to <2 x i64>*
  %360 = load <2 x i64>, <2 x i64>* %359, align 8
  %361 = bitcast %"struct.jxl::AlphaBlendingInputLayer"* %10 to <2 x i64>*
  store <2 x i64> %360, <2 x i64>* %361, align 16
  %362 = getelementptr inbounds %"struct.jxl::AlphaBlendingInputLayer", %"struct.jxl::AlphaBlendingInputLayer"* %10, i64 0, i32 2
  %363 = getelementptr inbounds float*, float** %1, i64 2
  %364 = bitcast float** %363 to i64*
  %365 = load i64, i64* %364, align 8
  %366 = bitcast float** %362 to i64*
  store i64 %365, i64* %366, align 16
  %367 = getelementptr inbounds %"struct.jxl::AlphaBlendingInputLayer", %"struct.jxl::AlphaBlendingInputLayer"* %10, i64 0, i32 3
  %368 = getelementptr inbounds float*, float** %1, i64 %353
  %369 = bitcast float** %368 to i64*
  %370 = load i64, i64* %369, align 8
  %371 = bitcast float** %367 to i64*
  store i64 %370, i64* %371, align 8
  %372 = bitcast %"struct.jxl::AlphaBlendingOutput"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %372) #9
  %373 = load i8*, i8** %36, align 8
  %374 = ptrtoint i8* %373 to i64
  %375 = and i64 %374, 63
  %376 = icmp eq i64 %375, 0
  call void @llvm.assume(i1 %376) #9
  %377 = bitcast %"struct.jxl::AlphaBlendingOutput"* %11 to i8**
  store i8* %373, i8** %377, align 8
  %378 = getelementptr inbounds %"struct.jxl::AlphaBlendingOutput", %"struct.jxl::AlphaBlendingOutput"* %11, i64 0, i32 1
  %379 = load i64, i64* %35, align 8
  %380 = getelementptr inbounds i8, i8* %373, i64 %379
  %381 = ptrtoint i8* %380 to i64
  %382 = and i64 %381, 63
  %383 = icmp eq i64 %382, 0
  call void @llvm.assume(i1 %383) #9
  %384 = bitcast float** %378 to i8**
  store i8* %380, i8** %384, align 8
  %385 = getelementptr inbounds %"struct.jxl::AlphaBlendingOutput", %"struct.jxl::AlphaBlendingOutput"* %11, i64 0, i32 2
  %386 = shl i64 %379, 1
  %387 = getelementptr inbounds i8, i8* %373, i64 %386
  %388 = ptrtoint i8* %387 to i64
  %389 = and i64 %388, 62
  %390 = icmp eq i64 %389, 0
  call void @llvm.assume(i1 %390) #9
  %391 = bitcast float** %385 to i8**
  store i8* %387, i8** %391, align 8
  %392 = getelementptr inbounds %"struct.jxl::AlphaBlendingOutput", %"struct.jxl::AlphaBlendingOutput"* %11, i64 0, i32 3
  %393 = mul i64 %379, %353
  %394 = getelementptr inbounds i8, i8* %373, i64 %393
  %395 = ptrtoint i8* %394 to i64
  %396 = and i64 %395, 63
  %397 = icmp eq i64 %396, 0
  call void @llvm.assume(i1 %397) #9
  %398 = bitcast float** %392 to i8**
  store i8* %394, i8** %398, align 8
  %399 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %4, i64 0, i32 2
  %400 = load i8, i8* %399, align 4, !range !2
  %401 = icmp ne i8 %400, 0
  call void @_ZN3jxl20PerformAlphaBlendingERKNS_23AlphaBlendingInputLayerES2_RKNS_19AlphaBlendingOutputEmbb(%"struct.jxl::AlphaBlendingInputLayer"* nonnull dereferenceable(32) %9, %"struct.jxl::AlphaBlendingInputLayer"* nonnull dereferenceable(32) %10, %"struct.jxl::AlphaBlendingOutput"* nonnull dereferenceable(32) %11, i64 %3, i1 zeroext %342, i1 zeroext %401) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %372) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %358) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %343) #9
  br label %664

402:                                              ; preds = %333
  %403 = icmp ne i8 %53, 5
  %404 = or i1 %403, %335
  br i1 %404, label %470, label %405

405:                                              ; preds = %402
  %406 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %407 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %406, align 8
  %408 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %407, i64 %51, i32 6
  %409 = load i8, i8* %408, align 8, !range !2
  %410 = icmp ne i8 %409, 0
  %411 = bitcast %"struct.jxl::AlphaBlendingInputLayer"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %411) #9
  %412 = bitcast float** %1 to <2 x i64>*
  %413 = load <2 x i64>, <2 x i64>* %412, align 8
  %414 = bitcast %"struct.jxl::AlphaBlendingInputLayer"* %12 to <2 x i64>*
  store <2 x i64> %413, <2 x i64>* %414, align 16
  %415 = getelementptr inbounds %"struct.jxl::AlphaBlendingInputLayer", %"struct.jxl::AlphaBlendingInputLayer"* %12, i64 0, i32 2
  %416 = getelementptr inbounds float*, float** %1, i64 2
  %417 = bitcast float** %416 to i64*
  %418 = load i64, i64* %417, align 8
  %419 = bitcast float** %415 to i64*
  store i64 %418, i64* %419, align 16
  %420 = getelementptr inbounds %"struct.jxl::AlphaBlendingInputLayer", %"struct.jxl::AlphaBlendingInputLayer"* %12, i64 0, i32 3
  %421 = add nuw nsw i64 %51, 3
  %422 = getelementptr inbounds float*, float** %1, i64 %421
  %423 = bitcast float** %422 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast float** %420 to i64*
  store i64 %424, i64* %425, align 8
  %426 = bitcast %"struct.jxl::AlphaBlendingInputLayer"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %426) #9
  %427 = bitcast float** %0 to <2 x i64>*
  %428 = load <2 x i64>, <2 x i64>* %427, align 8
  %429 = bitcast %"struct.jxl::AlphaBlendingInputLayer"* %13 to <2 x i64>*
  store <2 x i64> %428, <2 x i64>* %429, align 16
  %430 = getelementptr inbounds %"struct.jxl::AlphaBlendingInputLayer", %"struct.jxl::AlphaBlendingInputLayer"* %13, i64 0, i32 2
  %431 = getelementptr inbounds float*, float** %0, i64 2
  %432 = bitcast float** %431 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = bitcast float** %430 to i64*
  store i64 %433, i64* %434, align 16
  %435 = getelementptr inbounds %"struct.jxl::AlphaBlendingInputLayer", %"struct.jxl::AlphaBlendingInputLayer"* %13, i64 0, i32 3
  %436 = getelementptr inbounds float*, float** %0, i64 %421
  %437 = bitcast float** %436 to i64*
  %438 = load i64, i64* %437, align 8
  %439 = bitcast float** %435 to i64*
  store i64 %438, i64* %439, align 8
  %440 = bitcast %"struct.jxl::AlphaBlendingOutput"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %440) #9
  %441 = load i8*, i8** %36, align 8
  %442 = ptrtoint i8* %441 to i64
  %443 = and i64 %442, 63
  %444 = icmp eq i64 %443, 0
  call void @llvm.assume(i1 %444) #9
  %445 = bitcast %"struct.jxl::AlphaBlendingOutput"* %14 to i8**
  store i8* %441, i8** %445, align 8
  %446 = getelementptr inbounds %"struct.jxl::AlphaBlendingOutput", %"struct.jxl::AlphaBlendingOutput"* %14, i64 0, i32 1
  %447 = load i64, i64* %35, align 8
  %448 = getelementptr inbounds i8, i8* %441, i64 %447
  %449 = ptrtoint i8* %448 to i64
  %450 = and i64 %449, 63
  %451 = icmp eq i64 %450, 0
  call void @llvm.assume(i1 %451) #9
  %452 = bitcast float** %446 to i8**
  store i8* %448, i8** %452, align 8
  %453 = getelementptr inbounds %"struct.jxl::AlphaBlendingOutput", %"struct.jxl::AlphaBlendingOutput"* %14, i64 0, i32 2
  %454 = shl i64 %447, 1
  %455 = getelementptr inbounds i8, i8* %441, i64 %454
  %456 = ptrtoint i8* %455 to i64
  %457 = and i64 %456, 62
  %458 = icmp eq i64 %457, 0
  call void @llvm.assume(i1 %458) #9
  %459 = bitcast float** %453 to i8**
  store i8* %455, i8** %459, align 8
  %460 = getelementptr inbounds %"struct.jxl::AlphaBlendingOutput", %"struct.jxl::AlphaBlendingOutput"* %14, i64 0, i32 3
  %461 = mul i64 %447, %421
  %462 = getelementptr inbounds i8, i8* %441, i64 %461
  %463 = ptrtoint i8* %462 to i64
  %464 = and i64 %463, 63
  %465 = icmp eq i64 %464, 0
  call void @llvm.assume(i1 %465) #9
  %466 = bitcast float** %460 to i8**
  store i8* %462, i8** %466, align 8
  %467 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %4, i64 0, i32 2
  %468 = load i8, i8* %467, align 4, !range !2
  %469 = icmp ne i8 %468, 0
  call void @_ZN3jxl20PerformAlphaBlendingERKNS_23AlphaBlendingInputLayerES2_RKNS_19AlphaBlendingOutputEmbb(%"struct.jxl::AlphaBlendingInputLayer"* nonnull dereferenceable(32) %12, %"struct.jxl::AlphaBlendingInputLayer"* nonnull dereferenceable(32) %13, %"struct.jxl::AlphaBlendingOutput"* nonnull dereferenceable(32) %14, i64 %3, i1 zeroext %410, i1 zeroext %469) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %440) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %426) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %411) #9
  br label %664

470:                                              ; preds = %402
  switch i8 %53, label %649 [
    i8 0, label %471
    i8 7, label %536
    i8 3, label %498
    i8 1, label %622
    i8 4, label %622
    i8 5, label %622
  ]

471:                                              ; preds = %470
  %472 = shl i64 %3, 2
  %473 = load i8*, i8** %36, align 8
  %474 = ptrtoint i8* %473 to i64
  %475 = and i64 %474, 63
  %476 = icmp eq i64 %475, 0
  call void @llvm.assume(i1 %476) #9
  %477 = bitcast float** %0 to i8**
  %478 = load i8*, i8** %477, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %473, i8* align 4 %478, i64 %472, i1 false)
  %479 = load i8*, i8** %36, align 8
  %480 = load i64, i64* %35, align 8
  %481 = getelementptr inbounds i8, i8* %479, i64 %480
  %482 = ptrtoint i8* %481 to i64
  %483 = and i64 %482, 63
  %484 = icmp eq i64 %483, 0
  call void @llvm.assume(i1 %484) #9
  %485 = getelementptr inbounds float*, float** %0, i64 1
  %486 = bitcast float** %485 to i8**
  %487 = load i8*, i8** %486, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %481, i8* align 4 %487, i64 %472, i1 false)
  %488 = load i8*, i8** %36, align 8
  %489 = load i64, i64* %35, align 8
  %490 = shl i64 %489, 1
  %491 = getelementptr inbounds i8, i8* %488, i64 %490
  %492 = ptrtoint i8* %491 to i64
  %493 = and i64 %492, 63
  %494 = icmp eq i64 %493, 0
  call void @llvm.assume(i1 %494) #9
  %495 = getelementptr inbounds float*, float** %0, i64 2
  %496 = bitcast float** %495 to i8**
  %497 = load i8*, i8** %496, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %491, i8* align 4 %497, i64 %472, i1 false)
  br label %664

498:                                              ; preds = %470
  %499 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %4, i64 0, i32 2
  %500 = load float*, float** %0, align 8
  %501 = load float*, float** %1, align 8
  %502 = load i8*, i8** %36, align 8
  %503 = ptrtoint i8* %502 to i64
  %504 = and i64 %503, 63
  %505 = icmp eq i64 %504, 0
  call void @llvm.assume(i1 %505) #9
  %506 = bitcast i8* %502 to float*
  %507 = load i8, i8* %499, align 4, !range !2
  %508 = icmp ne i8 %507, 0
  call void @_ZN3jxl18PerformMulBlendingEPKfS1_Pfmb(float* %500, float* %501, float* %506, i64 %3, i1 zeroext %508) #9
  %509 = getelementptr inbounds float*, float** %0, i64 1
  %510 = load float*, float** %509, align 8
  %511 = getelementptr inbounds float*, float** %1, i64 1
  %512 = load float*, float** %511, align 8
  %513 = load i8*, i8** %36, align 8
  %514 = load i64, i64* %35, align 8
  %515 = getelementptr inbounds i8, i8* %513, i64 %514
  %516 = ptrtoint i8* %515 to i64
  %517 = and i64 %516, 63
  %518 = icmp eq i64 %517, 0
  call void @llvm.assume(i1 %518) #9
  %519 = bitcast i8* %515 to float*
  %520 = load i8, i8* %499, align 4, !range !2
  %521 = icmp ne i8 %520, 0
  call void @_ZN3jxl18PerformMulBlendingEPKfS1_Pfmb(float* %510, float* %512, float* %519, i64 %3, i1 zeroext %521) #9
  %522 = getelementptr inbounds float*, float** %0, i64 2
  %523 = load float*, float** %522, align 8
  %524 = getelementptr inbounds float*, float** %1, i64 2
  %525 = load float*, float** %524, align 8
  %526 = load i8*, i8** %36, align 8
  %527 = load i64, i64* %35, align 8
  %528 = shl i64 %527, 1
  %529 = getelementptr inbounds i8, i8* %526, i64 %528
  %530 = ptrtoint i8* %529 to i64
  %531 = and i64 %530, 63
  %532 = icmp eq i64 %531, 0
  call void @llvm.assume(i1 %532) #9
  %533 = bitcast i8* %529 to float*
  %534 = load i8, i8* %499, align 4, !range !2
  %535 = icmp ne i8 %534, 0
  call void @_ZN3jxl18PerformMulBlendingEPKfS1_Pfmb(float* %523, float* %525, float* %533, i64 %3, i1 zeroext %535) #9
  br label %664

536:                                              ; preds = %470
  %537 = add nuw nsw i64 %51, 3
  %538 = getelementptr inbounds float*, float** %0, i64 %537
  %539 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %4, i64 0, i32 2
  %540 = load float*, float** %1, align 8
  %541 = load float*, float** %0, align 8
  %542 = load float*, float** %538, align 8
  %543 = load i8*, i8** %36, align 8
  %544 = ptrtoint i8* %543 to i64
  %545 = and i64 %544, 63
  %546 = icmp eq i64 %545, 0
  call void @llvm.assume(i1 %546) #9
  %547 = bitcast i8* %543 to float*
  %548 = load i8, i8* %539, align 4, !range !2
  %549 = icmp ne i8 %548, 0
  call void @_ZN3jxl23PerformAlphaWeightedAddEPKfS1_S1_Pfmb(float* %540, float* %541, float* %542, float* %547, i64 %3, i1 zeroext %549) #9
  %550 = getelementptr inbounds float*, float** %1, i64 1
  %551 = load float*, float** %550, align 8
  %552 = getelementptr inbounds float*, float** %0, i64 1
  %553 = load float*, float** %552, align 8
  %554 = load float*, float** %538, align 8
  %555 = load i8*, i8** %36, align 8
  %556 = load i64, i64* %35, align 8
  %557 = getelementptr inbounds i8, i8* %555, i64 %556
  %558 = ptrtoint i8* %557 to i64
  %559 = and i64 %558, 63
  %560 = icmp eq i64 %559, 0
  call void @llvm.assume(i1 %560) #9
  %561 = bitcast i8* %557 to float*
  %562 = load i8, i8* %539, align 4, !range !2
  %563 = icmp ne i8 %562, 0
  call void @_ZN3jxl23PerformAlphaWeightedAddEPKfS1_S1_Pfmb(float* %551, float* %553, float* %554, float* %561, i64 %3, i1 zeroext %563) #9
  %564 = getelementptr inbounds float*, float** %1, i64 2
  %565 = load float*, float** %564, align 8
  %566 = getelementptr inbounds float*, float** %0, i64 2
  %567 = load float*, float** %566, align 8
  %568 = load float*, float** %538, align 8
  %569 = load i8*, i8** %36, align 8
  %570 = load i64, i64* %35, align 8
  %571 = shl i64 %570, 1
  %572 = getelementptr inbounds i8, i8* %569, i64 %571
  %573 = ptrtoint i8* %572 to i64
  %574 = and i64 %573, 63
  %575 = icmp eq i64 %574, 0
  call void @llvm.assume(i1 %575) #9
  %576 = bitcast i8* %572 to float*
  %577 = load i8, i8* %539, align 4, !range !2
  %578 = icmp ne i8 %577, 0
  call void @_ZN3jxl23PerformAlphaWeightedAddEPKfS1_S1_Pfmb(float* %565, float* %567, float* %568, float* %576, i64 %3, i1 zeroext %578) #9
  br label %664

579:                                              ; preds = %272
  %580 = add nuw nsw i64 %51, 3
  %581 = getelementptr inbounds float*, float** %1, i64 %580
  %582 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %4, i64 0, i32 2
  %583 = load float*, float** %0, align 8
  %584 = load float*, float** %1, align 8
  %585 = load float*, float** %581, align 8
  %586 = load i8*, i8** %36, align 8
  %587 = ptrtoint i8* %586 to i64
  %588 = and i64 %587, 63
  %589 = icmp eq i64 %588, 0
  call void @llvm.assume(i1 %589) #9
  %590 = bitcast i8* %586 to float*
  %591 = load i8, i8* %582, align 4, !range !2
  %592 = icmp ne i8 %591, 0
  call void @_ZN3jxl23PerformAlphaWeightedAddEPKfS1_S1_Pfmb(float* %583, float* %584, float* %585, float* %590, i64 %3, i1 zeroext %592) #9
  %593 = getelementptr inbounds float*, float** %0, i64 1
  %594 = load float*, float** %593, align 8
  %595 = getelementptr inbounds float*, float** %1, i64 1
  %596 = load float*, float** %595, align 8
  %597 = load float*, float** %581, align 8
  %598 = load i8*, i8** %36, align 8
  %599 = load i64, i64* %35, align 8
  %600 = getelementptr inbounds i8, i8* %598, i64 %599
  %601 = ptrtoint i8* %600 to i64
  %602 = and i64 %601, 63
  %603 = icmp eq i64 %602, 0
  call void @llvm.assume(i1 %603) #9
  %604 = bitcast i8* %600 to float*
  %605 = load i8, i8* %582, align 4, !range !2
  %606 = icmp ne i8 %605, 0
  call void @_ZN3jxl23PerformAlphaWeightedAddEPKfS1_S1_Pfmb(float* %594, float* %596, float* %597, float* %604, i64 %3, i1 zeroext %606) #9
  %607 = getelementptr inbounds float*, float** %0, i64 2
  %608 = load float*, float** %607, align 8
  %609 = getelementptr inbounds float*, float** %1, i64 2
  %610 = load float*, float** %609, align 8
  %611 = load float*, float** %581, align 8
  %612 = load i8*, i8** %36, align 8
  %613 = load i64, i64* %35, align 8
  %614 = shl i64 %613, 1
  %615 = getelementptr inbounds i8, i8* %612, i64 %614
  %616 = ptrtoint i8* %615 to i64
  %617 = and i64 %616, 63
  %618 = icmp eq i64 %617, 0
  call void @llvm.assume(i1 %618) #9
  %619 = bitcast i8* %615 to float*
  %620 = load i8, i8* %582, align 4, !range !2
  %621 = icmp ne i8 %620, 0
  call void @_ZN3jxl23PerformAlphaWeightedAddEPKfS1_S1_Pfmb(float* %608, float* %610, float* %611, float* %619, i64 %3, i1 zeroext %621) #9
  br label %664

622:                                              ; preds = %470, %470, %470
  %623 = shl i64 %3, 2
  %624 = load i8*, i8** %36, align 8
  %625 = ptrtoint i8* %624 to i64
  %626 = and i64 %625, 63
  %627 = icmp eq i64 %626, 0
  call void @llvm.assume(i1 %627) #9
  %628 = bitcast float** %1 to i8**
  %629 = load i8*, i8** %628, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %624, i8* align 4 %629, i64 %623, i1 false)
  %630 = load i8*, i8** %36, align 8
  %631 = load i64, i64* %35, align 8
  %632 = getelementptr inbounds i8, i8* %630, i64 %631
  %633 = ptrtoint i8* %632 to i64
  %634 = and i64 %633, 63
  %635 = icmp eq i64 %634, 0
  call void @llvm.assume(i1 %635) #9
  %636 = getelementptr inbounds float*, float** %1, i64 1
  %637 = bitcast float** %636 to i8**
  %638 = load i8*, i8** %637, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %632, i8* align 4 %638, i64 %623, i1 false)
  %639 = load i8*, i8** %36, align 8
  %640 = load i64, i64* %35, align 8
  %641 = shl i64 %640, 1
  %642 = getelementptr inbounds i8, i8* %639, i64 %641
  %643 = ptrtoint i8* %642 to i64
  %644 = and i64 %643, 63
  %645 = icmp eq i64 %644, 0
  call void @llvm.assume(i1 %645) #9
  %646 = getelementptr inbounds float*, float** %1, i64 2
  %647 = bitcast float** %646 to i8**
  %648 = load i8*, i8** %647, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %642, i8* align 4 %648, i64 %623, i1 false)
  br label %664

649:                                              ; preds = %470
  %650 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i64 0, i64 0), i32 346) #9
  %651 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

652:                                              ; preds = %779, %772
  %653 = phi i64 [ 0, %772 ], [ %799, %779 ]
  %654 = icmp eq i64 %775, 0
  br i1 %654, label %664, label %655

655:                                              ; preds = %652
  %656 = load float*, float** %773, align 8
  %657 = getelementptr inbounds float, float* %656, i64 %653
  %658 = load float, float* %657, align 4
  %659 = load float*, float** %774, align 8
  %660 = getelementptr inbounds float, float* %659, i64 %653
  %661 = load float, float* %660, align 4
  %662 = fadd float %658, %661
  %663 = getelementptr inbounds float, float* %771, i64 %653
  store float %662, float* %663, align 4
  br label %664

664:                                              ; preds = %655, %652, %763, %471, %622, %498, %536, %579, %337, %405
  %665 = icmp eq i64 %37, 0
  br i1 %665, label %686, label %666

666:                                              ; preds = %664
  %667 = shl i64 %3, 2
  %668 = and i64 %37, 1
  %669 = icmp eq i64 %20, -192
  br i1 %669, label %672, label %670

670:                                              ; preds = %666
  %671 = sub nsw i64 %37, %668
  br label %691

672:                                              ; preds = %691, %666
  %673 = phi i64 [ 0, %666 ], [ %715, %691 ]
  %674 = icmp eq i64 %668, 0
  br i1 %674, label %686, label %675

675:                                              ; preds = %672
  %676 = getelementptr inbounds float*, float** %2, i64 %673
  %677 = bitcast float** %676 to i8**
  %678 = load i8*, i8** %677, align 8
  %679 = load i8*, i8** %36, align 8
  %680 = load i64, i64* %35, align 8
  %681 = mul i64 %680, %673
  %682 = getelementptr inbounds i8, i8* %679, i64 %681
  %683 = ptrtoint i8* %682 to i64
  %684 = and i64 %683, 63
  %685 = icmp eq i64 %684, 0
  call void @llvm.assume(i1 %685) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %678, i8* align 64 %682, i64 %667, i1 false)
  br label %686

686:                                              ; preds = %675, %672, %664
  %687 = load i8*, i8** %36, align 8
  store i8* null, i8** %36, align 8
  %688 = icmp eq i8* %687, null
  br i1 %688, label %690, label %689

689:                                              ; preds = %686
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %687) #9
  br label %690

690:                                              ; preds = %686, %689
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %34) #9
  ret i32 0

691:                                              ; preds = %691, %670
  %692 = phi i64 [ 0, %670 ], [ %715, %691 ]
  %693 = phi i64 [ %671, %670 ], [ %716, %691 ]
  %694 = getelementptr inbounds float*, float** %2, i64 %692
  %695 = bitcast float** %694 to i8**
  %696 = load i8*, i8** %695, align 8
  %697 = load i8*, i8** %36, align 8
  %698 = load i64, i64* %35, align 8
  %699 = mul i64 %698, %692
  %700 = getelementptr inbounds i8, i8* %697, i64 %699
  %701 = ptrtoint i8* %700 to i64
  %702 = and i64 %701, 63
  %703 = icmp eq i64 %702, 0
  call void @llvm.assume(i1 %703) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %696, i8* align 64 %700, i64 %667, i1 false)
  %704 = or i64 %692, 1
  %705 = getelementptr inbounds float*, float** %2, i64 %704
  %706 = bitcast float** %705 to i8**
  %707 = load i8*, i8** %706, align 8
  %708 = load i8*, i8** %36, align 8
  %709 = load i64, i64* %35, align 8
  %710 = mul i64 %709, %704
  %711 = getelementptr inbounds i8, i8* %708, i64 %710
  %712 = ptrtoint i8* %711 to i64
  %713 = and i64 %712, 63
  %714 = icmp eq i64 %713, 0
  call void @llvm.assume(i1 %714) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %707, i8* align 64 %711, i64 %667, i1 false)
  %715 = add nuw i64 %692, 2
  %716 = add i64 %693, -2
  %717 = icmp eq i64 %716, 0
  br i1 %717, label %672, label %691

718:                                              ; preds = %302
  %719 = getelementptr inbounds float*, float** %0, i64 1
  %720 = getelementptr inbounds float*, float** %1, i64 1
  %721 = and i64 %3, 1
  %722 = icmp eq i64 %3, 1
  br i1 %722, label %748, label %723

723:                                              ; preds = %718
  %724 = sub i64 %3, %721
  br label %725

725:                                              ; preds = %725, %723
  %726 = phi i64 [ 0, %723 ], [ %745, %725 ]
  %727 = phi i64 [ %724, %723 ], [ %746, %725 ]
  %728 = load float*, float** %719, align 8
  %729 = getelementptr inbounds float, float* %728, i64 %726
  %730 = load float, float* %729, align 4
  %731 = load float*, float** %720, align 8
  %732 = getelementptr inbounds float, float* %731, i64 %726
  %733 = load float, float* %732, align 4
  %734 = fadd float %730, %733
  %735 = getelementptr inbounds float, float* %309, i64 %726
  store float %734, float* %735, align 8
  %736 = or i64 %726, 1
  %737 = load float*, float** %719, align 8
  %738 = getelementptr inbounds float, float* %737, i64 %736
  %739 = load float, float* %738, align 4
  %740 = load float*, float** %720, align 8
  %741 = getelementptr inbounds float, float* %740, i64 %736
  %742 = load float, float* %741, align 4
  %743 = fadd float %739, %742
  %744 = getelementptr inbounds float, float* %309, i64 %736
  store float %743, float* %744, align 4
  %745 = add nuw i64 %726, 2
  %746 = add i64 %727, -2
  %747 = icmp eq i64 %746, 0
  br i1 %747, label %748, label %725

748:                                              ; preds = %725, %718
  %749 = phi i64 [ 0, %718 ], [ %745, %725 ]
  %750 = icmp eq i64 %721, 0
  br i1 %750, label %760, label %751

751:                                              ; preds = %748
  %752 = load float*, float** %719, align 8
  %753 = getelementptr inbounds float, float* %752, i64 %749
  %754 = load float, float* %753, align 4
  %755 = load float*, float** %720, align 8
  %756 = getelementptr inbounds float, float* %755, i64 %749
  %757 = load float, float* %756, align 4
  %758 = fadd float %754, %757
  %759 = getelementptr inbounds float, float* %309, i64 %749
  store float %758, float* %759, align 4
  br label %760

760:                                              ; preds = %748, %751
  %761 = load i8*, i8** %36, align 8
  %762 = load i64, i64* %35, align 8
  br label %763

763:                                              ; preds = %760, %302
  %764 = phi i64 [ %762, %760 ], [ %304, %302 ]
  %765 = phi i8* [ %761, %760 ], [ %303, %302 ]
  %766 = shl i64 %764, 1
  %767 = getelementptr inbounds i8, i8* %765, i64 %766
  %768 = ptrtoint i8* %767 to i64
  %769 = and i64 %768, 63
  %770 = icmp eq i64 %769, 0
  call void @llvm.assume(i1 %770) #9
  %771 = bitcast i8* %767 to float*
  br i1 %277, label %664, label %772

772:                                              ; preds = %763
  %773 = getelementptr inbounds float*, float** %0, i64 2
  %774 = getelementptr inbounds float*, float** %1, i64 2
  %775 = and i64 %3, 1
  %776 = icmp eq i64 %3, 1
  br i1 %776, label %652, label %777

777:                                              ; preds = %772
  %778 = sub i64 %3, %775
  br label %779

779:                                              ; preds = %779, %777
  %780 = phi i64 [ 0, %777 ], [ %799, %779 ]
  %781 = phi i64 [ %778, %777 ], [ %800, %779 ]
  %782 = load float*, float** %773, align 8
  %783 = getelementptr inbounds float, float* %782, i64 %780
  %784 = load float, float* %783, align 4
  %785 = load float*, float** %774, align 8
  %786 = getelementptr inbounds float, float* %785, i64 %780
  %787 = load float, float* %786, align 4
  %788 = fadd float %784, %787
  %789 = getelementptr inbounds float, float* %771, i64 %780
  store float %788, float* %789, align 8
  %790 = or i64 %780, 1
  %791 = load float*, float** %773, align 8
  %792 = getelementptr inbounds float, float* %791, i64 %790
  %793 = load float, float* %792, align 4
  %794 = load float*, float** %774, align 8
  %795 = getelementptr inbounds float, float* %794, i64 %790
  %796 = load float, float* %795, align 4
  %797 = fadd float %793, %796
  %798 = getelementptr inbounds float, float* %771, i64 %790
  store float %797, float* %798, align 4
  %799 = add nuw i64 %780, 2
  %800 = add i64 %781, -2
  %801 = icmp eq i64 %800, 0
  br i1 %801, label %652, label %779
}

declare void @_ZN3jxl20PerformAlphaBlendingEPKfS1_S1_S1_Pfmbb(float*, float*, float*, float*, float*, i64, i1 zeroext, i1 zeroext) local_unnamed_addr #3

declare void @_ZN3jxl23PerformAlphaWeightedAddEPKfS1_S1_Pfmb(float*, float*, float*, float*, i64, i1 zeroext) local_unnamed_addr #3

declare void @_ZN3jxl18PerformMulBlendingEPKfS1_Pfmb(float*, float*, float*, i64, i1 zeroext) local_unnamed_addr #3

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #5

declare void @_ZN3jxl20PerformAlphaBlendingERKNS_23AlphaBlendingInputLayerES2_RKNS_19AlphaBlendingOutputEmbb(%"struct.jxl::AlphaBlendingInputLayer"* dereferenceable(32), %"struct.jxl::AlphaBlendingInputLayer"* dereferenceable(32), %"struct.jxl::AlphaBlendingOutput"* dereferenceable(32), i64, i1 zeroext, i1 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl12ImageBlender11RectBlender10DoBlendingEm(%"class.jxl::ImageBlender::RectBlender"*, i64) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %221

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 1, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ugt i64 %8, %1
  br i1 %9, label %221, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 1, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, %8
  %14 = icmp ugt i64 %13, %1
  br i1 %14, label %15, label %221

15:                                               ; preds = %10
  %16 = sub i64 %1, %8
  %17 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 2, i32 0
  %18 = load i64, i64* %17, align 8, !noalias !23
  %19 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 2, i32 1
  %20 = load i64, i64* %19, align 8, !noalias !23
  %21 = add i64 %20, %16
  %22 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 1, i32 2
  %23 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 5
  %24 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 3, i32 12
  %25 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 3, i32 12, i32 0, i32 1
  %26 = bitcast %"class.jxl::Plane.97"** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.std::__1::vector.169"* %24 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %27, %29
  %31 = ashr exact i64 %30, 5
  %32 = add nsw i64 %31, 3
  %33 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 5, i32 0, i32 1
  %34 = bitcast float*** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.std::__1::vector.246"* %23 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %35, %37
  %39 = ashr exact i64 %38, 3
  %40 = icmp ugt i64 %32, %39
  %41 = inttoptr i64 %37 to float**
  br i1 %40, label %42, label %49

42:                                               ; preds = %15
  %43 = sub nsw i64 %32, %39
  tail call void @_ZNSt3__16vectorIPKfNS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.246"* %23, i64 %43) #9
  %44 = load i64, i64* %26, align 8
  %45 = load i64, i64* %28, align 8
  %46 = sub i64 %44, %45
  %47 = ashr exact i64 %46, 5
  %48 = add nsw i64 %47, 3
  br label %53

49:                                               ; preds = %15
  %50 = icmp ult i64 %32, %39
  br i1 %50, label %51, label %53

51:                                               ; preds = %49
  %52 = getelementptr inbounds float*, float** %41, i64 %32
  store float** %52, float*** %33, align 8
  br label %53

53:                                               ; preds = %42, %49, %51
  %54 = phi i64 [ %48, %42 ], [ %32, %49 ], [ %32, %51 ]
  %55 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 6
  %56 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 6, i32 0, i32 1
  %57 = bitcast float*** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %"class.std::__1::vector.253"* %55 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = sub i64 %58, %60
  %62 = ashr exact i64 %61, 3
  %63 = icmp ugt i64 %54, %62
  %64 = inttoptr i64 %60 to float**
  br i1 %63, label %65, label %67

65:                                               ; preds = %53
  %66 = sub nsw i64 %54, %62
  tail call void @_ZNSt3__16vectorIPfNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector.253"* %55, i64 %66) #9
  br label %71

67:                                               ; preds = %53
  %68 = icmp ult i64 %54, %62
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = getelementptr inbounds float*, float** %64, i64 %54
  store float** %70, float*** %56, align 8
  br label %71

71:                                               ; preds = %65, %67, %69
  %72 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 3, i32 10, i32 0, i64 0, i32 0, i32 4
  %73 = getelementptr inbounds %"class.std::__1::vector.246", %"class.std::__1::vector.246"* %23, i64 0, i32 0, i32 0
  %74 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 4
  %75 = getelementptr inbounds %"class.std::__1::vector.253", %"class.std::__1::vector.253"* %55, i64 0, i32 0, i32 0
  %76 = load i64, i64* %72, align 8
  %77 = mul i64 %76, %16
  %78 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 3, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = ptrtoint i8* %79 to i64
  %81 = and i64 %80, 63
  %82 = icmp eq i64 %81, 0
  tail call void @llvm.assume(i1 %82) #9
  %83 = getelementptr inbounds i8, i8* %79, i64 %77
  %84 = ptrtoint i8* %83 to i64
  %85 = and i64 %84, 63
  %86 = icmp eq i64 %85, 0
  tail call void @llvm.assume(i1 %86) #9
  %87 = bitcast %"class.std::__1::vector.246"* %23 to i8***
  %88 = load i8**, i8*** %87, align 8
  store i8* %83, i8** %88, align 8
  %89 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %74, align 8
  %90 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %89, i64 0, i32 10, i32 0, i64 0, i32 0, i32 4
  %91 = load i64, i64* %90, align 8
  %92 = mul i64 %91, %21
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %89, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  %95 = ptrtoint i8* %94 to i64
  %96 = and i64 %95, 63
  %97 = icmp eq i64 %96, 0
  tail call void @llvm.assume(i1 %97) #9
  %98 = getelementptr inbounds i8, i8* %94, i64 %92
  %99 = ptrtoint i8* %98 to i64
  %100 = and i64 %99, 63
  %101 = icmp eq i64 %100, 0
  tail call void @llvm.assume(i1 %101) #9
  %102 = bitcast i8* %98 to float*
  %103 = getelementptr inbounds float, float* %102, i64 %18
  %104 = load float**, float*** %75, align 8
  store float* %103, float** %104, align 8
  %105 = load i64, i64* %72, align 8
  %106 = mul i64 %105, %16
  %107 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 3, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %108 = load i8*, i8** %107, align 8
  %109 = ptrtoint i8* %108 to i64
  %110 = and i64 %109, 63
  %111 = icmp eq i64 %110, 0
  tail call void @llvm.assume(i1 %111) #9
  %112 = getelementptr inbounds i8, i8* %108, i64 %106
  %113 = ptrtoint i8* %112 to i64
  %114 = and i64 %113, 63
  %115 = icmp eq i64 %114, 0
  tail call void @llvm.assume(i1 %115) #9
  %116 = load float**, float*** %73, align 8
  %117 = getelementptr inbounds float*, float** %116, i64 1
  %118 = bitcast float** %117 to i8**
  store i8* %112, i8** %118, align 8
  %119 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %74, align 8
  %120 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %119, i64 0, i32 10, i32 0, i64 0, i32 0, i32 4
  %121 = load i64, i64* %120, align 8
  %122 = mul i64 %121, %21
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %119, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %124 = load i8*, i8** %123, align 8
  %125 = ptrtoint i8* %124 to i64
  %126 = and i64 %125, 63
  %127 = icmp eq i64 %126, 0
  tail call void @llvm.assume(i1 %127) #9
  %128 = getelementptr inbounds i8, i8* %124, i64 %122
  %129 = ptrtoint i8* %128 to i64
  %130 = and i64 %129, 63
  %131 = icmp eq i64 %130, 0
  tail call void @llvm.assume(i1 %131) #9
  %132 = bitcast i8* %128 to float*
  %133 = getelementptr inbounds float, float* %132, i64 %18
  %134 = load float**, float*** %75, align 8
  %135 = getelementptr inbounds float*, float** %134, i64 1
  store float* %133, float** %135, align 8
  %136 = load i64, i64* %72, align 8
  %137 = mul i64 %136, %16
  %138 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 3, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %139 = load i8*, i8** %138, align 8
  %140 = ptrtoint i8* %139 to i64
  %141 = and i64 %140, 63
  %142 = icmp eq i64 %141, 0
  tail call void @llvm.assume(i1 %142) #9
  %143 = getelementptr inbounds i8, i8* %139, i64 %137
  %144 = ptrtoint i8* %143 to i64
  %145 = and i64 %144, 63
  %146 = icmp eq i64 %145, 0
  tail call void @llvm.assume(i1 %146) #9
  %147 = load float**, float*** %73, align 8
  %148 = getelementptr inbounds float*, float** %147, i64 2
  %149 = bitcast float** %148 to i8**
  store i8* %143, i8** %149, align 8
  %150 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %74, align 8
  %151 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %150, i64 0, i32 10, i32 0, i64 0, i32 0, i32 4
  %152 = load i64, i64* %151, align 8
  %153 = mul i64 %152, %21
  %154 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %150, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %155 = load i8*, i8** %154, align 8
  %156 = ptrtoint i8* %155 to i64
  %157 = and i64 %156, 63
  %158 = icmp eq i64 %157, 0
  tail call void @llvm.assume(i1 %158) #9
  %159 = getelementptr inbounds i8, i8* %155, i64 %153
  %160 = ptrtoint i8* %159 to i64
  %161 = and i64 %160, 63
  %162 = icmp eq i64 %161, 0
  tail call void @llvm.assume(i1 %162) #9
  %163 = bitcast i8* %159 to float*
  %164 = getelementptr inbounds float, float* %163, i64 %18
  %165 = load float**, float*** %75, align 8
  %166 = getelementptr inbounds float*, float** %165, i64 2
  store float* %164, float** %166, align 8
  %167 = load i64, i64* %26, align 8
  %168 = load i64, i64* %28, align 8
  %169 = icmp eq i64 %167, %168
  br i1 %169, label %170, label %182

170:                                              ; preds = %182, %71
  %171 = load float**, float*** %75, align 8
  %172 = load float**, float*** %73, align 8
  %173 = load i64, i64* %22, align 8
  %174 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %0, i64 0, i32 7, i32 0, i32 0
  %175 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %174, align 8
  %176 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %175, i64 1
  %177 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %74, align 8
  %178 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %177, i64 0, i32 9
  %179 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %178, align 8
  %180 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %179, i64 0, i32 17
  %181 = tail call i32 @_ZN3jxl15PerformBlendingEPKPKfS3_PKPfmRKNS_13PatchBlendingEPS8_RKNSt3__16vectorINS_16ExtraChannelInfoENSB_9allocatorISD_EEEE(float** %171, float** %172, float** %171, i64 %173, %"struct.jxl::PatchBlending"* dereferenceable(12) %175, %"struct.jxl::PatchBlending"* %176, %"class.std::__1::vector"* dereferenceable(24) %180)
  br label %221

182:                                              ; preds = %71, %182
  %183 = phi i64 [ %217, %182 ], [ %168, %71 ]
  %184 = phi i64 [ %215, %182 ], [ 0, %71 ]
  %185 = inttoptr i64 %183 to %"class.jxl::Plane.97"*
  %186 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %185, i64 %184, i32 0, i32 5, i32 0, i32 0, i32 0
  %187 = load i8*, i8** %186, align 8
  %188 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %185, i64 %184, i32 0, i32 4
  %189 = load i64, i64* %188, align 8
  %190 = mul i64 %189, %16
  %191 = getelementptr inbounds i8, i8* %187, i64 %190
  %192 = ptrtoint i8* %191 to i64
  %193 = and i64 %192, 63
  %194 = icmp eq i64 %193, 0
  tail call void @llvm.assume(i1 %194) #9
  %195 = add i64 %184, 3
  %196 = load float**, float*** %73, align 8
  %197 = getelementptr inbounds float*, float** %196, i64 %195
  %198 = bitcast float** %197 to i8**
  store i8* %191, i8** %198, align 8
  %199 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %74, align 8
  %200 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %199, i64 0, i32 12, i32 0, i32 0
  %201 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %200, align 8
  %202 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %201, i64 %184, i32 0, i32 5, i32 0, i32 0, i32 0
  %203 = load i8*, i8** %202, align 8
  %204 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %201, i64 %184, i32 0, i32 4
  %205 = load i64, i64* %204, align 8
  %206 = mul i64 %205, %21
  %207 = getelementptr inbounds i8, i8* %203, i64 %206
  %208 = ptrtoint i8* %207 to i64
  %209 = and i64 %208, 63
  %210 = icmp eq i64 %209, 0
  tail call void @llvm.assume(i1 %210) #9
  %211 = bitcast i8* %207 to float*
  %212 = getelementptr inbounds float, float* %211, i64 %18
  %213 = load float**, float*** %75, align 8
  %214 = getelementptr inbounds float*, float** %213, i64 %195
  store float* %212, float** %214, align 8
  %215 = add nuw i64 %184, 1
  %216 = load i64, i64* %26, align 8
  %217 = load i64, i64* %28, align 8
  %218 = sub i64 %216, %217
  %219 = ashr exact i64 %218, 5
  %220 = icmp ult i64 %215, %219
  br i1 %220, label %182, label %170

221:                                              ; preds = %6, %2, %10, %170
  %222 = phi i32 [ %181, %170 ], [ 0, %10 ], [ 0, %2 ], [ 0, %6 ]
  ret i32 %222
}

declare i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"*) local_unnamed_addr #3

declare void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #3

declare void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"*) unnamed_addr #3

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm(%"class.std::__1::vector.169"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::Plane.97"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.169"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.jxl::Plane.97"*
  br i1 %10, label %12, label %103

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.jxl::Plane.97"** %13 to i64*
  %15 = icmp ugt i64 %1, 576460752303423487
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #12
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = ashr exact i64 %19, 5
  %21 = shl i64 %1, 5
  %22 = tail call i8* @_Znwm(i64 %21) #11
  %23 = bitcast i8* %22 to %"class.jxl::Plane.97"*
  %24 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %23, i64 %20
  %25 = ptrtoint %"class.jxl::Plane.97"* %24 to i64
  %26 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %23, i64 %1
  %27 = ptrtoint %"class.jxl::Plane.97"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.jxl::Plane.97"*
  %29 = icmp eq %"class.jxl::Plane.97"* %28, %11
  br i1 %29, label %84, label %30

30:                                               ; preds = %17
  %31 = getelementptr %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %28, i64 -1, i32 0, i32 0
  %32 = bitcast i32* %31 to i8*
  %33 = sub i64 0, %7
  %34 = getelementptr i8, i8* %32, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 32
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %49

38:                                               ; preds = %30
  %39 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %24, i64 -1
  %40 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %28, i64 -1
  %41 = bitcast %"class.jxl::Plane.97"* %39 to i8*
  %42 = bitcast %"class.jxl::Plane.97"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 24, i1 false) #9
  %43 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %24, i64 -1, i32 0, i32 5
  %44 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %28, i64 -1, i32 0, i32 5
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %44, i64 0, i32 0, i32 0, i32 0
  %46 = bitcast %"class.std::__1::unique_ptr"* %44 to i64*
  %47 = load i64, i64* %46, align 8
  store i8* null, i8** %45, align 8
  %48 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  store i64 %47, i64* %48, align 8
  br label %49

49:                                               ; preds = %38, %30
  %50 = phi %"class.jxl::Plane.97"* [ undef, %30 ], [ %39, %38 ]
  %51 = phi %"class.jxl::Plane.97"* [ %24, %30 ], [ %39, %38 ]
  %52 = phi %"class.jxl::Plane.97"* [ %28, %30 ], [ %40, %38 ]
  %53 = icmp ult i8* %34, inttoptr (i64 32 to i8*)
  br i1 %53, label %78, label %54

54:                                               ; preds = %49, %54
  %55 = phi %"class.jxl::Plane.97"* [ %67, %54 ], [ %51, %49 ]
  %56 = phi %"class.jxl::Plane.97"* [ %68, %54 ], [ %52, %49 ]
  %57 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %55, i64 -1
  %58 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %56, i64 -1
  %59 = bitcast %"class.jxl::Plane.97"* %57 to i8*
  %60 = bitcast %"class.jxl::Plane.97"* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 24, i1 false) #9
  %61 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %55, i64 -1, i32 0, i32 5
  %62 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %56, i64 -1, i32 0, i32 5
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i8* null, i8** %63, align 8
  %66 = bitcast %"class.std::__1::unique_ptr"* %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %55, i64 -2
  %68 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %56, i64 -2
  %69 = bitcast %"class.jxl::Plane.97"* %67 to i8*
  %70 = bitcast %"class.jxl::Plane.97"* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 24, i1 false) #9
  %71 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %55, i64 -2, i32 0, i32 5
  %72 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %56, i64 -2, i32 0, i32 5
  %73 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %72, i64 0, i32 0, i32 0, i32 0
  %74 = bitcast %"class.std::__1::unique_ptr"* %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i8* null, i8** %73, align 8
  %76 = bitcast %"class.std::__1::unique_ptr"* %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = icmp eq %"class.jxl::Plane.97"* %68, %11
  br i1 %77, label %78, label %54

78:                                               ; preds = %54, %49
  %79 = phi %"class.jxl::Plane.97"* [ %50, %49 ], [ %67, %54 ]
  %80 = ptrtoint %"class.jxl::Plane.97"* %79 to i64
  %81 = load i64, i64* %6, align 8
  %82 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %13, align 8
  %83 = inttoptr i64 %81 to %"class.jxl::Plane.97"*
  br label %84

84:                                               ; preds = %17, %78
  %85 = phi %"class.jxl::Plane.97"* [ %83, %78 ], [ %28, %17 ]
  %86 = phi %"class.jxl::Plane.97"* [ %82, %78 ], [ %11, %17 ]
  %87 = phi i64 [ %80, %78 ], [ %25, %17 ]
  %88 = phi i64 [ %81, %78 ], [ %18, %17 ]
  store i64 %87, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %89 = icmp eq %"class.jxl::Plane.97"* %86, %85
  br i1 %89, label %99, label %90

90:                                               ; preds = %84, %97
  %91 = phi %"class.jxl::Plane.97"* [ %92, %97 ], [ %86, %84 ]
  %92 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %91, i64 -1
  %93 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %91, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  store i8* null, i8** %93, align 8
  %95 = icmp eq i8* %94, null
  br i1 %95, label %97, label %96

96:                                               ; preds = %90
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %94) #9
  br label %97

97:                                               ; preds = %96, %90
  %98 = icmp eq %"class.jxl::Plane.97"* %92, %85
  br i1 %98, label %99, label %90

99:                                               ; preds = %97, %84
  %100 = icmp eq i64 %88, 0
  br i1 %100, label %103, label %101

101:                                              ; preds = %99
  %102 = inttoptr i64 %88 to i8*
  tail call void @_ZdlPv(i8* %102) #11
  br label %103

103:                                              ; preds = %101, %99, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane.97"* noalias sret, %"class.jxl::Plane.97"* dereferenceable(32)) local_unnamed_addr #2 comdat {
  %3 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %0, i64 0, i32 0, i32 4
  %5 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1, i64 0, i32 0, i32 0
  %7 = bitcast %"class.jxl::Plane.97"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 32, i1 false)
  %8 = load i32, i32* %6, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %13, i64 %9, i64 %12, i64 4) #9
  %14 = load i32, i32* %6, align 8, !noalias !28
  %15 = load i32, i32* %3, align 8, !alias.scope !28
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %0, i64 0, i32 0, i32 1
  %19 = load i32, i32* %10, align 4, !noalias !28
  %20 = load i32, i32* %18, align 4, !alias.scope !28
  %21 = icmp eq i32 %19, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %17, %2
  %23 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.8, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)) #9, !noalias !28
  %24 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12, !noalias !28
  unreachable

25:                                               ; preds = %17
  %26 = icmp eq i32 %19, 0
  %27 = icmp eq i32 %14, 0
  %28 = or i1 %27, %26
  br i1 %28, label %66, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1, i64 0, i32 0, i32 4
  %32 = load i8*, i8** %5, align 8, !alias.scope !28
  %33 = load i64, i64* %4, align 8, !alias.scope !28
  %34 = load i8*, i8** %30, align 8, !noalias !28
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #9, !noalias !28
  %38 = ptrtoint i8* %32 to i64
  %39 = and i64 %38, 63
  %40 = icmp eq i64 %39, 0
  tail call void @llvm.assume(i1 %40) #9, !noalias !28
  %41 = zext i32 %14 to i64
  %42 = shl nuw nsw i64 %41, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %32, i8* align 64 %34, i64 %42, i1 false) #9, !noalias !28
  %43 = load i32, i32* %10, align 4, !noalias !28
  %44 = icmp ugt i32 %43, 1
  br i1 %44, label %45, label %66

45:                                               ; preds = %29, %45
  %46 = phi i64 [ %62, %45 ], [ 1, %29 ]
  %47 = load i32, i32* %6, align 8, !noalias !28
  %48 = load i8*, i8** %30, align 8, !noalias !28
  %49 = load i64, i64* %31, align 8, !noalias !28
  %50 = mul i64 %49, %46
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = ptrtoint i8* %51 to i64
  %53 = and i64 %52, 63
  %54 = icmp eq i64 %53, 0
  tail call void @llvm.assume(i1 %54) #9, !noalias !28
  %55 = mul i64 %46, %33
  %56 = getelementptr inbounds i8, i8* %32, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #9, !noalias !28
  %60 = zext i32 %47 to i64
  %61 = shl nuw nsw i64 %60, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %56, i8* align 64 %51, i64 %61, i1 false) #9, !noalias !28
  %62 = add nuw nsw i64 %46, 1
  %63 = load i32, i32* %10, align 4, !noalias !28
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %45, label %66

66:                                               ; preds = %45, %29, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* noalias) local_unnamed_addr #2 comdat {
  %5 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %10, label %24

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %16, label %24

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 1
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 0
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %20 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %21 = icmp eq i64 %6, 0
  %22 = icmp eq i64 %12, 0
  %23 = or i1 %21, %22
  br i1 %23, label %66, label %27

24:                                               ; preds = %4, %10
  %25 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.8, i64 0, i64 0), i32 80, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0)) #9
  %26 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

27:                                               ; preds = %16
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8, !alias.scope !31
  %32 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %33 = load i64, i64* %32, align 8, !alias.scope !31
  br label %34

34:                                               ; preds = %34, %27
  %35 = phi i64 [ %6, %27 ], [ %65, %34 ]
  %36 = phi i64 [ 0, %27 ], [ %62, %34 ]
  %37 = load i64, i64* %17, align 8, !noalias !31
  %38 = add i64 %37, %36
  %39 = load i8*, i8** %28, align 8, !noalias !31
  %40 = load i64, i64* %29, align 8, !noalias !31
  %41 = mul i64 %40, %38
  %42 = getelementptr inbounds i8, i8* %39, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = and i64 %43, 63
  %45 = icmp eq i64 %44, 0
  tail call void @llvm.assume(i1 %45) #9, !noalias !31
  %46 = bitcast i8* %42 to float*
  %47 = load i64, i64* %18, align 8, !noalias !31
  %48 = getelementptr inbounds float, float* %46, i64 %47
  %49 = load i64, i64* %19, align 8, !noalias !31
  %50 = add i64 %49, %36
  %51 = mul i64 %50, %33
  %52 = getelementptr inbounds i8, i8* %31, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #9, !noalias !31
  %56 = bitcast i8* %52 to float*
  %57 = load i64, i64* %20, align 8, !noalias !31
  %58 = getelementptr inbounds float, float* %56, i64 %57
  %59 = bitcast float* %58 to i8*
  %60 = bitcast float* %48 to i8*
  %61 = shl i64 %35, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %60, i64 %61, i1 false) #9, !noalias !31
  %62 = add nuw i64 %36, 1
  %63 = load i64, i64* %11, align 8, !noalias !31
  %64 = icmp ult i64 %62, %63
  %65 = load i64, i64* %5, align 8
  br i1 %64, label %34, label %66

66:                                               ; preds = %34, %16
  %67 = phi i64 [ %12, %16 ], [ %63, %34 ]
  %68 = phi i64 [ %6, %16 ], [ %65, %34 ]
  %69 = icmp eq i64 %68, 0
  %70 = icmp eq i64 %67, 0
  %71 = or i1 %69, %70
  br i1 %71, label %111, label %72

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 4
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8, !alias.scope !31
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 4
  %78 = load i64, i64* %77, align 8, !alias.scope !31
  br label %79

79:                                               ; preds = %79, %72
  %80 = phi i64 [ %68, %72 ], [ %110, %79 ]
  %81 = phi i64 [ 0, %72 ], [ %107, %79 ]
  %82 = load i64, i64* %17, align 8, !noalias !31
  %83 = add i64 %82, %81
  %84 = load i8*, i8** %73, align 8, !noalias !31
  %85 = load i64, i64* %74, align 8, !noalias !31
  %86 = mul i64 %85, %83
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  %88 = ptrtoint i8* %87 to i64
  %89 = and i64 %88, 63
  %90 = icmp eq i64 %89, 0
  tail call void @llvm.assume(i1 %90) #9, !noalias !31
  %91 = bitcast i8* %87 to float*
  %92 = load i64, i64* %18, align 8, !noalias !31
  %93 = getelementptr inbounds float, float* %91, i64 %92
  %94 = load i64, i64* %19, align 8, !noalias !31
  %95 = add i64 %94, %81
  %96 = mul i64 %95, %78
  %97 = getelementptr inbounds i8, i8* %76, i64 %96
  %98 = ptrtoint i8* %97 to i64
  %99 = and i64 %98, 63
  %100 = icmp eq i64 %99, 0
  tail call void @llvm.assume(i1 %100) #9, !noalias !31
  %101 = bitcast i8* %97 to float*
  %102 = load i64, i64* %20, align 8, !noalias !31
  %103 = getelementptr inbounds float, float* %101, i64 %102
  %104 = bitcast float* %103 to i8*
  %105 = bitcast float* %93 to i8*
  %106 = shl i64 %80, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %106, i1 false) #9, !noalias !31
  %107 = add nuw i64 %81, 1
  %108 = load i64, i64* %11, align 8, !noalias !31
  %109 = icmp ult i64 %107, %108
  %110 = load i64, i64* %5, align 8
  br i1 %109, label %79, label %111

111:                                              ; preds = %79, %66
  %112 = phi i64 [ %67, %66 ], [ %108, %79 ]
  %113 = phi i64 [ %68, %66 ], [ %110, %79 ]
  %114 = icmp eq i64 %113, 0
  %115 = icmp eq i64 %112, 0
  %116 = or i1 %114, %115
  br i1 %116, label %157, label %117

117:                                              ; preds = %111
  %118 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %119 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 4
  %120 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8, !alias.scope !31
  %122 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 4
  %123 = load i64, i64* %122, align 8, !alias.scope !31
  br label %124

124:                                              ; preds = %155, %117
  %125 = phi i64 [ %113, %117 ], [ %156, %155 ]
  %126 = phi i64 [ 0, %117 ], [ %152, %155 ]
  %127 = load i64, i64* %17, align 8, !noalias !31
  %128 = add i64 %127, %126
  %129 = load i8*, i8** %118, align 8, !noalias !31
  %130 = load i64, i64* %119, align 8, !noalias !31
  %131 = mul i64 %130, %128
  %132 = getelementptr inbounds i8, i8* %129, i64 %131
  %133 = ptrtoint i8* %132 to i64
  %134 = and i64 %133, 63
  %135 = icmp eq i64 %134, 0
  tail call void @llvm.assume(i1 %135) #9, !noalias !31
  %136 = bitcast i8* %132 to float*
  %137 = load i64, i64* %18, align 8, !noalias !31
  %138 = getelementptr inbounds float, float* %136, i64 %137
  %139 = load i64, i64* %19, align 8, !noalias !31
  %140 = add i64 %139, %126
  %141 = mul i64 %140, %123
  %142 = getelementptr inbounds i8, i8* %121, i64 %141
  %143 = ptrtoint i8* %142 to i64
  %144 = and i64 %143, 63
  %145 = icmp eq i64 %144, 0
  tail call void @llvm.assume(i1 %145) #9, !noalias !31
  %146 = bitcast i8* %142 to float*
  %147 = load i64, i64* %20, align 8, !noalias !31
  %148 = getelementptr inbounds float, float* %146, i64 %147
  %149 = bitcast float* %148 to i8*
  %150 = bitcast float* %138 to i8*
  %151 = shl i64 %125, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %149, i8* align 4 %150, i64 %151, i1 false) #9, !noalias !31
  %152 = add nuw i64 %126, 1
  %153 = load i64, i64* %11, align 8, !noalias !31
  %154 = icmp ult i64 %152, %153
  br i1 %154, label %155, label %157

155:                                              ; preds = %124
  %156 = load i64, i64* %5, align 8, !noalias !31
  br label %124

157:                                              ; preds = %124, %111
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.169"*, %"class.jxl::Plane.97"* dereferenceable(32)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::Plane.97"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.169"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.169"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #12
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::Plane.97"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #12
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #11
  %33 = bitcast i8* %32 to %"class.jxl::Plane.97"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.jxl::Plane.97"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 %9
  %38 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 %35
  %39 = ptrtoint %"class.jxl::Plane.97"* %38 to i64
  %40 = bitcast %"class.jxl::Plane.97"* %37 to i8*
  %41 = bitcast %"class.jxl::Plane.97"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #9
  %42 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 %9, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1, i64 0, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %37, i64 1
  %49 = ptrtoint %"class.jxl::Plane.97"* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 0
  %51 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %50, align 8
  %52 = ptrtoint %"class.jxl::Plane.97"* %51 to i64
  %53 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %3, align 8
  %54 = icmp eq %"class.jxl::Plane.97"* %53, %51
  br i1 %54, label %105, label %55

55:                                               ; preds = %34
  %56 = getelementptr %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %53, i64 -1, i32 0, i32 0
  %57 = ptrtoint i32* %56 to i64
  %58 = sub i64 %57, %52
  %59 = and i64 %58, 32
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %72

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %37, i64 -1
  %63 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %53, i64 -1
  %64 = bitcast %"class.jxl::Plane.97"* %62 to i8*
  %65 = bitcast %"class.jxl::Plane.97"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 24, i1 false) #9
  %66 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %37, i64 -1, i32 0, i32 5
  %67 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %53, i64 -1, i32 0, i32 5
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = bitcast %"class.std::__1::unique_ptr"* %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i8* null, i8** %68, align 8
  %71 = bitcast %"class.std::__1::unique_ptr"* %66 to i64*
  store i64 %70, i64* %71, align 8
  br label %72

72:                                               ; preds = %61, %55
  %73 = phi %"class.jxl::Plane.97"* [ undef, %55 ], [ %62, %61 ]
  %74 = phi %"class.jxl::Plane.97"* [ %37, %55 ], [ %62, %61 ]
  %75 = phi %"class.jxl::Plane.97"* [ %53, %55 ], [ %63, %61 ]
  %76 = icmp ult i64 %58, 32
  br i1 %76, label %101, label %77

77:                                               ; preds = %72, %77
  %78 = phi %"class.jxl::Plane.97"* [ %90, %77 ], [ %74, %72 ]
  %79 = phi %"class.jxl::Plane.97"* [ %91, %77 ], [ %75, %72 ]
  %80 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -1
  %81 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -1
  %82 = bitcast %"class.jxl::Plane.97"* %80 to i8*
  %83 = bitcast %"class.jxl::Plane.97"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 24, i1 false) #9
  %84 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -1, i32 0, i32 5
  %85 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -1, i32 0, i32 5
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %85, i64 0, i32 0, i32 0, i32 0
  %87 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i8* null, i8** %86, align 8
  %89 = bitcast %"class.std::__1::unique_ptr"* %84 to i64*
  store i64 %88, i64* %89, align 8
  %90 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -2
  %91 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -2
  %92 = bitcast %"class.jxl::Plane.97"* %90 to i8*
  %93 = bitcast %"class.jxl::Plane.97"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 24, i1 false) #9
  %94 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -2, i32 0, i32 5
  %95 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -2, i32 0, i32 5
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %95, i64 0, i32 0, i32 0, i32 0
  %97 = bitcast %"class.std::__1::unique_ptr"* %95 to i64*
  %98 = load i64, i64* %97, align 8
  store i8* null, i8** %96, align 8
  %99 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  store i64 %98, i64* %99, align 8
  %100 = icmp eq %"class.jxl::Plane.97"* %91, %51
  br i1 %100, label %101, label %77

101:                                              ; preds = %77, %72
  %102 = phi %"class.jxl::Plane.97"* [ %73, %72 ], [ %90, %77 ]
  %103 = load i64, i64* %6, align 8
  %104 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %3, align 8
  br label %105

105:                                              ; preds = %34, %101
  %106 = phi %"class.jxl::Plane.97"* [ %104, %101 ], [ %51, %34 ]
  %107 = phi %"class.jxl::Plane.97"* [ %102, %101 ], [ %37, %34 ]
  %108 = phi i64 [ %103, %101 ], [ %52, %34 ]
  %109 = ptrtoint %"class.jxl::Plane.97"* %107 to i64
  store i64 %109, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %110 = inttoptr i64 %108 to %"class.jxl::Plane.97"*
  %111 = icmp eq %"class.jxl::Plane.97"* %106, %110
  br i1 %111, label %121, label %112

112:                                              ; preds = %105, %119
  %113 = phi %"class.jxl::Plane.97"* [ %114, %119 ], [ %106, %105 ]
  %114 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %113, i64 -1
  %115 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %113, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  store i8* null, i8** %115, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %119, label %118

118:                                              ; preds = %112
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %116) #9
  br label %119

119:                                              ; preds = %118, %112
  %120 = icmp eq %"class.jxl::Plane.97"* %114, %110
  br i1 %120, label %121, label %112

121:                                              ; preds = %119, %105
  %122 = icmp eq i64 %108, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %121
  %124 = inttoptr i64 %108 to i8*
  tail call void @_ZdlPv(i8* %124) #11
  br label %125

125:                                              ; preds = %121, %123
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl4jpeg8JPEGDataC2ERKS1_(%"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"* dereferenceable(296)) unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl4jpeg8JPEGDataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 1
  %6 = bitcast i32* %4 to i8*
  %7 = bitcast i32* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 12, i1 false)
  %8 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 4
  %9 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 4
  tail call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector.108"* %8, %"class.std::__1::vector.108"* dereferenceable(24) %9)
  %10 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5
  %11 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 5
  %12 = bitcast %"class.std::__1::vector.115"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #9
  %13 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 5, i32 0, i32 1
  %14 = bitcast i32** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.std::__1::vector.115"* %11 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = ashr exact i64 %18, 2
  %20 = icmp eq i64 %18, 0
  br i1 %20, label %48, label %21

21:                                               ; preds = %2
  %22 = icmp ugt i64 %19, 4611686018427387903
  br i1 %22, label %23, label %25

23:                                               ; preds = %21
  %24 = bitcast %"class.std::__1::vector.115"* %10 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %24) #12
  unreachable

25:                                               ; preds = %21
  %26 = tail call i8* @_Znwm(i64 %18) #11
  %27 = bitcast i8* %26 to i32*
  %28 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5, i32 0, i32 1
  %29 = bitcast i32** %28 to i8**
  store i8* %26, i8** %29, align 8
  %30 = bitcast %"class.std::__1::vector.115"* %10 to i8**
  store i8* %26, i8** %30, align 8
  %31 = getelementptr inbounds i32, i32* %27, i64 %19
  %32 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  store i32* %31, i32** %32, align 8
  %33 = getelementptr inbounds %"class.std::__1::vector.115", %"class.std::__1::vector.115"* %11, i64 0, i32 0, i32 0
  %34 = load i32*, i32** %33, align 8
  %35 = load i64, i64* %14, align 8
  %36 = bitcast i32** %28 to i64*
  %37 = ptrtoint i8* %26 to i64
  %38 = ptrtoint i32* %34 to i64
  %39 = sub i64 %35, %38
  %40 = icmp sgt i64 %39, 0
  br i1 %40, label %41, label %46

41:                                               ; preds = %25
  %42 = lshr exact i64 %39, 2
  %43 = bitcast i32* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %26, i8* align 4 %43, i64 %39, i1 false) #9
  %44 = getelementptr inbounds i32, i32* %27, i64 %42
  %45 = ptrtoint i32* %44 to i64
  br label %46

46:                                               ; preds = %41, %25
  %47 = phi i64 [ %45, %41 ], [ %37, %25 ]
  store i64 %47, i64* %36, align 8
  br label %48

48:                                               ; preds = %2, %46
  %49 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 6
  %50 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 6
  tail call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector.108"* %49, %"class.std::__1::vector.108"* dereferenceable(24) %50)
  %51 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7
  %52 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 7
  %53 = bitcast %"class.std::__1::vector.122"* %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #9
  %54 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 7, i32 0, i32 1
  %55 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast %"class.std::__1::vector.122"* %52 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %56, %58
  %60 = sdiv exact i64 %59, 268
  %61 = icmp eq i64 %59, 0
  br i1 %61, label %89, label %62

62:                                               ; preds = %48
  %63 = icmp ugt i64 %60, 68831134603393849
  br i1 %63, label %64, label %66

64:                                               ; preds = %62
  %65 = bitcast %"class.std::__1::vector.122"* %51 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %65) #12
  unreachable

66:                                               ; preds = %62
  %67 = tail call i8* @_Znwm(i64 %59) #11
  %68 = bitcast i8* %67 to %"struct.jxl::jpeg::JPEGQuantTable"*
  %69 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7, i32 0, i32 1
  %70 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %69 to i8**
  store i8* %67, i8** %70, align 8
  %71 = bitcast %"class.std::__1::vector.122"* %51 to i8**
  store i8* %67, i8** %71, align 8
  %72 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %68, i64 %60
  %73 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGQuantTable"* %72, %"struct.jxl::jpeg::JPEGQuantTable"** %73, align 8
  %74 = getelementptr inbounds %"class.std::__1::vector.122", %"class.std::__1::vector.122"* %52, i64 0, i32 0, i32 0
  %75 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %74, align 8
  %76 = load i64, i64* %55, align 8
  %77 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %69 to i64*
  %78 = ptrtoint i8* %67 to i64
  %79 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %75 to i64
  %80 = sub i64 %76, %79
  %81 = icmp sgt i64 %80, 0
  br i1 %81, label %82, label %87

82:                                               ; preds = %66
  %83 = udiv exact i64 %80, 268
  %84 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"* %75 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %67, i8* align 4 %84, i64 %80, i1 false) #9
  %85 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %68, i64 %83
  %86 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %85 to i64
  br label %87

87:                                               ; preds = %82, %66
  %88 = phi i64 [ %86, %82 ], [ %78, %66 ]
  store i64 %88, i64* %77, align 8
  br label %89

89:                                               ; preds = %48, %87
  %90 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8
  %91 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 8
  %92 = bitcast %"class.std::__1::vector.130"* %90 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 24, i1 false) #9
  %93 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 8, i32 0, i32 1
  %94 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %"class.std::__1::vector.130"* %91 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = sub i64 %95, %97
  %99 = sdiv exact i64 %98, 1104
  %100 = icmp eq i64 %98, 0
  br i1 %100, label %128, label %101

101:                                              ; preds = %89
  %102 = icmp ugt i64 %99, 16709007313142709
  br i1 %102, label %103, label %105

103:                                              ; preds = %101
  %104 = bitcast %"class.std::__1::vector.130"* %90 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %104) #12
  unreachable

105:                                              ; preds = %101
  %106 = tail call i8* @_Znwm(i64 %98) #11
  %107 = bitcast i8* %106 to %"struct.jxl::jpeg::JPEGHuffmanCode"*
  %108 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8, i32 0, i32 1
  %109 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %108 to i8**
  store i8* %106, i8** %109, align 8
  %110 = bitcast %"class.std::__1::vector.130"* %90 to i8**
  store i8* %106, i8** %110, align 8
  %111 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %107, i64 %99
  %112 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGHuffmanCode"* %111, %"struct.jxl::jpeg::JPEGHuffmanCode"** %112, align 8
  %113 = getelementptr inbounds %"class.std::__1::vector.130", %"class.std::__1::vector.130"* %91, i64 0, i32 0, i32 0
  %114 = load %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"** %113, align 8
  %115 = load i64, i64* %94, align 8
  %116 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %108 to i64*
  %117 = ptrtoint i8* %106 to i64
  %118 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %114 to i64
  %119 = sub i64 %115, %118
  %120 = icmp sgt i64 %119, 0
  br i1 %120, label %121, label %126

121:                                              ; preds = %105
  %122 = udiv exact i64 %119, 1104
  %123 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %106, i8* align 4 %123, i64 %119, i1 false) #9
  %124 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %107, i64 %122
  %125 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %124 to i64
  br label %126

126:                                              ; preds = %121, %105
  %127 = phi i64 [ %125, %121 ], [ %117, %105 ]
  store i64 %127, i64* %116, align 8
  br label %128

128:                                              ; preds = %89, %126
  %129 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9
  %130 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 9
  tail call void @_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEEC2ERKS6_(%"class.std::__1::vector.139"* %129, %"class.std::__1::vector.139"* dereferenceable(24) %130)
  %131 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10
  %132 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 10
  %133 = bitcast %"class.std::__1::vector.153"* %131 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %133, i8 0, i64 24, i1 false) #9
  %134 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 10, i32 0, i32 1
  %135 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = bitcast %"class.std::__1::vector.153"* %132 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = sub i64 %136, %138
  %140 = sdiv exact i64 %139, 120
  %141 = icmp eq i64 %139, 0
  br i1 %141, label %172, label %142

142:                                              ; preds = %128
  %143 = icmp ugt i64 %140, 153722867280912930
  br i1 %143, label %144, label %146

144:                                              ; preds = %142
  %145 = bitcast %"class.std::__1::vector.153"* %131 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %145) #12
  unreachable

146:                                              ; preds = %142
  %147 = tail call i8* @_Znwm(i64 %139) #11
  %148 = bitcast i8* %147 to %"struct.jxl::jpeg::JPEGScanInfo"*
  %149 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 1
  %150 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %149 to i8**
  store i8* %147, i8** %150, align 8
  %151 = bitcast %"class.std::__1::vector.153"* %131 to i8**
  store i8* %147, i8** %151, align 8
  %152 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %148, i64 %140
  %153 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGScanInfo"* %152, %"struct.jxl::jpeg::JPEGScanInfo"** %153, align 8
  %154 = getelementptr inbounds %"class.std::__1::vector.153", %"class.std::__1::vector.153"* %132, i64 0, i32 0, i32 0
  %155 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %154, align 8
  %156 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %134, align 8
  %157 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %149 to i64*
  %158 = ptrtoint i8* %147 to i64
  %159 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 2
  %160 = bitcast %"class.std::__1::__compressed_pair.163"* %159 to %"class.std::__1::allocator.166"*
  %161 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %155, %156
  br i1 %161, label %170, label %162

162:                                              ; preds = %146, %162
  %163 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %166, %162 ], [ %148, %146 ]
  %164 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %165, %162 ], [ %155, %146 ]
  tail call void @_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRS3_EEEvPT_DpOT0_(%"class.std::__1::allocator.166"* %160, %"struct.jxl::jpeg::JPEGScanInfo"* %163, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120) %164) #9
  %165 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %164, i64 1
  %166 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %163, i64 1
  %167 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %165, %156
  br i1 %167, label %168, label %162

168:                                              ; preds = %162
  %169 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %166 to i64
  br label %170

170:                                              ; preds = %168, %146
  %171 = phi i64 [ %158, %146 ], [ %169, %168 ]
  store i64 %171, i64* %157, align 8
  br label %172

172:                                              ; preds = %128, %170
  %173 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11
  %174 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 11
  %175 = bitcast %"class.std::__1::vector.98"* %173 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %175, i8 0, i64 24, i1 false) #9
  %176 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 11, i32 0, i32 1
  %177 = bitcast i8** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.std::__1::vector.98"* %174 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = sub i64 %178, %180
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %205, label %183

183:                                              ; preds = %172
  %184 = icmp slt i64 %181, 0
  br i1 %184, label %185, label %187

185:                                              ; preds = %183
  %186 = bitcast %"class.std::__1::vector.98"* %173 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %186) #12
  unreachable

187:                                              ; preds = %183
  %188 = tail call i8* @_Znwm(i64 %181) #11
  %189 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11, i32 0, i32 1
  store i8* %188, i8** %189, align 8
  %190 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %173, i64 0, i32 0, i32 0
  store i8* %188, i8** %190, align 8
  %191 = getelementptr inbounds i8, i8* %188, i64 %181
  %192 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11, i32 0, i32 2, i32 0, i32 0
  store i8* %191, i8** %192, align 8
  %193 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %174, i64 0, i32 0, i32 0
  %194 = load i8*, i8** %193, align 8
  %195 = load i64, i64* %177, align 8
  %196 = bitcast i8** %189 to i64*
  %197 = ptrtoint i8* %194 to i64
  %198 = sub i64 %195, %197
  %199 = icmp sgt i64 %198, 0
  br i1 %199, label %200, label %202

200:                                              ; preds = %187
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %188, i8* align 1 %194, i64 %198, i1 false) #9
  %201 = getelementptr inbounds i8, i8* %188, i64 %198
  br label %202

202:                                              ; preds = %200, %187
  %203 = phi i8* [ %201, %200 ], [ %188, %187 ]
  %204 = ptrtoint i8* %203 to i64
  store i64 %204, i64* %196, align 8
  br label %205

205:                                              ; preds = %172, %202
  %206 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 12
  %207 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 12
  tail call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector.108"* %206, %"class.std::__1::vector.108"* dereferenceable(24) %207)
  %208 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13
  %209 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 13
  %210 = bitcast %"class.std::__1::vector.98"* %208 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %210, i8 0, i64 24, i1 false) #9
  %211 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 13, i32 0, i32 1
  %212 = bitcast i8** %211 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = bitcast %"class.std::__1::vector.98"* %209 to i64*
  %215 = load i64, i64* %214, align 8
  %216 = sub i64 %213, %215
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %240, label %218

218:                                              ; preds = %205
  %219 = icmp slt i64 %216, 0
  br i1 %219, label %220, label %222

220:                                              ; preds = %218
  %221 = bitcast %"class.std::__1::vector.98"* %208 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %221) #12
  unreachable

222:                                              ; preds = %218
  %223 = tail call i8* @_Znwm(i64 %216) #11
  %224 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13, i32 0, i32 1
  store i8* %223, i8** %224, align 8
  %225 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %208, i64 0, i32 0, i32 0
  store i8* %223, i8** %225, align 8
  %226 = getelementptr inbounds i8, i8* %223, i64 %216
  %227 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13, i32 0, i32 2, i32 0, i32 0
  store i8* %226, i8** %227, align 8
  %228 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %209, i64 0, i32 0, i32 0
  %229 = load i8*, i8** %228, align 8
  %230 = load i64, i64* %212, align 8
  %231 = bitcast i8** %224 to i64*
  %232 = ptrtoint i8* %229 to i64
  %233 = sub i64 %230, %232
  %234 = icmp sgt i64 %233, 0
  br i1 %234, label %235, label %237

235:                                              ; preds = %222
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %223, i8* align 1 %229, i64 %233, i1 false) #9
  %236 = getelementptr inbounds i8, i8* %223, i64 %233
  br label %237

237:                                              ; preds = %235, %222
  %238 = phi i8* [ %236, %235 ], [ %223, %222 ]
  %239 = ptrtoint i8* %238 to i64
  store i64 %239, i64* %231, align 8
  br label %240

240:                                              ; preds = %205, %237
  %241 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 14
  %242 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 14
  %243 = bitcast i32* %241 to i8*
  %244 = bitcast i32* %242 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %243, i8* align 8 %244, i64 5, i1 false)
  %245 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16
  %246 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 16
  %247 = bitcast %"class.std::__1::vector.98"* %245 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %247, i8 0, i64 24, i1 false) #9
  %248 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 16, i32 0, i32 1
  %249 = bitcast i8** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = bitcast %"class.std::__1::vector.98"* %246 to i64*
  %252 = load i64, i64* %251, align 8
  %253 = sub i64 %250, %252
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %277, label %255

255:                                              ; preds = %240
  %256 = icmp slt i64 %253, 0
  br i1 %256, label %257, label %259

257:                                              ; preds = %255
  %258 = bitcast %"class.std::__1::vector.98"* %245 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %258) #12
  unreachable

259:                                              ; preds = %255
  %260 = tail call i8* @_Znwm(i64 %253) #11
  %261 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16, i32 0, i32 1
  store i8* %260, i8** %261, align 8
  %262 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %245, i64 0, i32 0, i32 0
  store i8* %260, i8** %262, align 8
  %263 = getelementptr inbounds i8, i8* %260, i64 %253
  %264 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16, i32 0, i32 2, i32 0, i32 0
  store i8* %263, i8** %264, align 8
  %265 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %246, i64 0, i32 0, i32 0
  %266 = load i8*, i8** %265, align 8
  %267 = load i64, i64* %249, align 8
  %268 = bitcast i8** %261 to i64*
  %269 = ptrtoint i8* %266 to i64
  %270 = sub i64 %267, %269
  %271 = icmp sgt i64 %270, 0
  br i1 %271, label %272, label %274

272:                                              ; preds = %259
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %260, i8* align 1 %266, i64 %270, i1 false) #9
  %273 = getelementptr inbounds i8, i8* %260, i64 %270
  br label %274

274:                                              ; preds = %272, %259
  %275 = phi i8* [ %273, %272 ], [ %260, %259 ]
  %276 = ptrtoint i8* %275 to i64
  store i64 %276, i64* %268, align 8
  br label %277

277:                                              ; preds = %240, %274
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector.108"*, %"class.std::__1::vector.108"* dereferenceable(24)) unnamed_addr #2 comdat align 2 {
  %3 = bitcast %"class.std::__1::vector.108"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #9
  %4 = getelementptr inbounds %"class.std::__1::vector.108", %"class.std::__1::vector.108"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"class.std::__1::vector.98"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.108"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %73, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 768614336404564650
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector.108"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #12
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #11
  %18 = bitcast i8* %17 to %"class.std::__1::vector.98"*
  %19 = getelementptr inbounds %"class.std::__1::vector.108", %"class.std::__1::vector.108"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"class.std::__1::vector.98"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector.108"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %18, i64 %10
  %23 = getelementptr inbounds %"class.std::__1::vector.108", %"class.std::__1::vector.108"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::vector.98"* %22, %"class.std::__1::vector.98"** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.108", %"class.std::__1::vector.108"* %1, i64 0, i32 0, i32 0
  %25 = load %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"** %24, align 8
  %26 = load %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"** %4, align 8
  %27 = bitcast %"class.std::__1::vector.98"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %"class.std::__1::vector.98"* %25, %26
  br i1 %29, label %71, label %30

30:                                               ; preds = %16
  %31 = bitcast i8* %17 to %"class.std::__1::vector.98"*
  br label %32

32:                                               ; preds = %65, %30
  %33 = phi %"class.std::__1::vector.98"* [ %67, %65 ], [ %31, %30 ]
  %34 = phi %"class.std::__1::vector.98"* [ %66, %65 ], [ %25, %30 ]
  %35 = bitcast %"class.std::__1::vector.98"* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #9
  %36 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %34, i64 0, i32 0, i32 1
  %37 = bitcast i8** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.std::__1::vector.98"* %34 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %65, label %43

43:                                               ; preds = %32
  %44 = icmp slt i64 %41, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = bitcast %"class.std::__1::vector.98"* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %46) #12
  unreachable

47:                                               ; preds = %43
  %48 = tail call i8* @_Znwm(i64 %41) #11
  %49 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %33, i64 0, i32 0, i32 1
  store i8* %48, i8** %49, align 8
  %50 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %33, i64 0, i32 0, i32 0
  store i8* %48, i8** %50, align 8
  %51 = getelementptr inbounds i8, i8* %48, i64 %41
  %52 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %33, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8* %51, i8** %52, align 8
  %53 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %34, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %37, align 8
  %56 = bitcast i8** %49 to i64*
  %57 = ptrtoint i8* %54 to i64
  %58 = sub i64 %55, %57
  %59 = icmp sgt i64 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %47
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %48, i8* align 1 %54, i64 %58, i1 false) #9
  %61 = getelementptr inbounds i8, i8* %48, i64 %58
  br label %62

62:                                               ; preds = %60, %47
  %63 = phi i8* [ %61, %60 ], [ %48, %47 ]
  %64 = ptrtoint i8* %63 to i64
  store i64 %64, i64* %56, align 8
  br label %65

65:                                               ; preds = %62, %32
  %66 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %34, i64 1
  %67 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %33, i64 1
  %68 = icmp eq %"class.std::__1::vector.98"* %66, %26
  br i1 %68, label %69, label %32

69:                                               ; preds = %65
  %70 = ptrtoint %"class.std::__1::vector.98"* %67 to i64
  br label %71

71:                                               ; preds = %16, %69
  %72 = phi i64 [ %28, %16 ], [ %70, %69 ]
  store i64 %72, i64* %27, align 8
  br label %73

73:                                               ; preds = %2, %71
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEEC2ERKS6_(%"class.std::__1::vector.139"*, %"class.std::__1::vector.139"* dereferenceable(24)) unnamed_addr #2 comdat align 2 {
  %3 = bitcast %"class.std::__1::vector.139"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #9
  %4 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.139"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 48
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %83, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 384307168202282325
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector.139"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #12
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #11
  %18 = bitcast i8* %17 to %"struct.jxl::jpeg::JPEGComponent"*
  %19 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector.139"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %18, i64 %10
  %23 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGComponent"* %22, %"struct.jxl::jpeg::JPEGComponent"** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %1, i64 0, i32 0, i32 0
  %25 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %24, align 8
  %26 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %4, align 8
  %27 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %25, %26
  br i1 %29, label %81, label %30

30:                                               ; preds = %16
  %31 = bitcast i8* %17 to %"struct.jxl::jpeg::JPEGComponent"*
  br label %32

32:                                               ; preds = %75, %30
  %33 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %77, %75 ], [ %31, %30 ]
  %34 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %76, %75 ], [ %25, %30 ]
  %35 = bitcast %"struct.jxl::jpeg::JPEGComponent"* %33 to i8*
  %36 = bitcast %"struct.jxl::jpeg::JPEGComponent"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false) #9
  %37 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 0, i32 6
  %38 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %34, i64 0, i32 6
  %39 = bitcast %"class.std::__1::vector.141"* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 24, i1 false) #9
  %40 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %34, i64 0, i32 6, i32 0, i32 1
  %41 = bitcast i16** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.std::__1::vector.141"* %38 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %42, %44
  %46 = ashr exact i64 %45, 1
  %47 = icmp eq i64 %45, 0
  br i1 %47, label %75, label %48

48:                                               ; preds = %32
  %49 = icmp slt i64 %45, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = bitcast %"class.std::__1::vector.141"* %37 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %51) #12
  unreachable

52:                                               ; preds = %48
  %53 = tail call i8* @_Znwm(i64 %45) #11
  %54 = bitcast i8* %53 to i16*
  %55 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 0, i32 6, i32 0, i32 1
  %56 = bitcast i16** %55 to i8**
  store i8* %53, i8** %56, align 8
  %57 = bitcast %"class.std::__1::vector.141"* %37 to i8**
  store i8* %53, i8** %57, align 8
  %58 = getelementptr inbounds i16, i16* %54, i64 %46
  %59 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  store i16* %58, i16** %59, align 8
  %60 = getelementptr inbounds %"class.std::__1::vector.141", %"class.std::__1::vector.141"* %38, i64 0, i32 0, i32 0
  %61 = load i16*, i16** %60, align 8
  %62 = load i64, i64* %41, align 8
  %63 = bitcast i16** %55 to i64*
  %64 = ptrtoint i8* %53 to i64
  %65 = ptrtoint i16* %61 to i64
  %66 = sub i64 %62, %65
  %67 = icmp sgt i64 %66, 0
  br i1 %67, label %68, label %73

68:                                               ; preds = %52
  %69 = lshr exact i64 %66, 1
  %70 = bitcast i16* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %53, i8* align 2 %70, i64 %66, i1 false) #9
  %71 = getelementptr inbounds i16, i16* %54, i64 %69
  %72 = ptrtoint i16* %71 to i64
  br label %73

73:                                               ; preds = %68, %52
  %74 = phi i64 [ %72, %68 ], [ %64, %52 ]
  store i64 %74, i64* %63, align 8
  br label %75

75:                                               ; preds = %73, %32
  %76 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %34, i64 1
  %77 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 1
  %78 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %76, %26
  br i1 %78, label %79, label %32

79:                                               ; preds = %75
  %80 = ptrtoint %"struct.jxl::jpeg::JPEGComponent"* %77 to i64
  br label %81

81:                                               ; preds = %16, %79
  %82 = phi i64 [ %28, %16 ], [ %80, %79 ]
  store i64 %82, i64* %27, align 8
  br label %83

83:                                               ; preds = %2, %81
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRS3_EEEvPT_DpOT0_(%"class.std::__1::allocator.166"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120)) local_unnamed_addr #2 comdat align 2 {
  %4 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %1 to i8*
  %5 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 72, i1 false) #9
  %6 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 7
  %7 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 7
  %8 = bitcast %"class.std::__1::vector.9"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #9
  %9 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 7, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector.9"* %7 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 2
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %44, label %17

17:                                               ; preds = %3
  %18 = icmp ugt i64 %15, 4611686018427387903
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = bitcast %"class.std::__1::vector.9"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %20) #12
  unreachable

21:                                               ; preds = %17
  %22 = tail call i8* @_Znwm(i64 %14) #11
  %23 = bitcast i8* %22 to i32*
  %24 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 7, i32 0, i32 1
  %25 = bitcast i32** %24 to i8**
  store i8* %22, i8** %25, align 8
  %26 = bitcast %"class.std::__1::vector.9"* %6 to i8**
  store i8* %22, i8** %26, align 8
  %27 = getelementptr inbounds i32, i32* %23, i64 %15
  %28 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  store i32* %27, i32** %28, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %7, i64 0, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = load i64, i64* %10, align 8
  %32 = bitcast i32** %24 to i64*
  %33 = ptrtoint i8* %22 to i64
  %34 = ptrtoint i32* %30 to i64
  %35 = sub i64 %31, %34
  %36 = icmp sgt i64 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %21
  %38 = lshr exact i64 %35, 2
  %39 = bitcast i32* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %22, i8* align 4 %39, i64 %35, i1 false) #9
  %40 = getelementptr inbounds i32, i32* %23, i64 %38
  %41 = ptrtoint i32* %40 to i64
  br label %42

42:                                               ; preds = %37, %21
  %43 = phi i64 [ %41, %37 ], [ %33, %21 ]
  store i64 %43, i64* %32, align 8
  br label %44

44:                                               ; preds = %42, %3
  %45 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 8
  %46 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 8
  %47 = bitcast %"class.std::__1::vector.156"* %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 24, i1 false) #9
  %48 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 8, i32 0, i32 1
  %49 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %"class.std::__1::vector.156"* %46 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %50, %52
  %54 = ashr exact i64 %53, 3
  %55 = icmp eq i64 %53, 0
  br i1 %55, label %83, label %56

56:                                               ; preds = %44
  %57 = icmp ugt i64 %54, 2305843009213693951
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = bitcast %"class.std::__1::vector.156"* %45 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %59) #12
  unreachable

60:                                               ; preds = %56
  %61 = tail call i8* @_Znwm(i64 %53) #11
  %62 = bitcast i8* %61 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  %63 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 8, i32 0, i32 1
  %64 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %63 to i8**
  store i8* %61, i8** %64, align 8
  %65 = bitcast %"class.std::__1::vector.156"* %45 to i8**
  store i8* %61, i8** %65, align 8
  %66 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %62, i64 %54
  %67 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %66, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %67, align 8
  %68 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %46, i64 0, i32 0, i32 0
  %69 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %68, align 8
  %70 = load i64, i64* %49, align 8
  %71 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %63 to i64*
  %72 = ptrtoint i8* %61 to i64
  %73 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %69 to i64
  %74 = sub i64 %70, %73
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %81

76:                                               ; preds = %60
  %77 = lshr exact i64 %74, 3
  %78 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %69 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %61, i8* align 4 %78, i64 %74, i1 false) #9
  %79 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %62, i64 %77
  %80 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %79 to i64
  br label %81

81:                                               ; preds = %76, %60
  %82 = phi i64 [ %80, %76 ], [ %72, %60 ]
  store i64 %82, i64* %71, align 8
  br label %83

83:                                               ; preds = %44, %81
  ret void
}

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #3

; Function Attrs: nounwind
declare void @llvm.assume(i1) #9

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.169"*, %"class.jxl::Plane.97"* dereferenceable(32)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::Plane.97"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.169"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.169"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #12
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::Plane.97"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #12
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #11
  %33 = bitcast i8* %32 to %"class.jxl::Plane.97"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.jxl::Plane.97"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 %9
  %38 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 %35
  %39 = ptrtoint %"class.jxl::Plane.97"* %38 to i64
  %40 = bitcast %"class.jxl::Plane.97"* %37 to i8*
  %41 = bitcast %"class.jxl::Plane.97"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #9
  %42 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 %9, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1, i64 0, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %37, i64 1
  %49 = ptrtoint %"class.jxl::Plane.97"* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 0
  %51 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %50, align 8
  %52 = ptrtoint %"class.jxl::Plane.97"* %51 to i64
  %53 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %3, align 8
  %54 = icmp eq %"class.jxl::Plane.97"* %53, %51
  br i1 %54, label %105, label %55

55:                                               ; preds = %34
  %56 = getelementptr %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %53, i64 -1, i32 0, i32 0
  %57 = ptrtoint i32* %56 to i64
  %58 = sub i64 %57, %52
  %59 = and i64 %58, 32
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %72

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %37, i64 -1
  %63 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %53, i64 -1
  %64 = bitcast %"class.jxl::Plane.97"* %62 to i8*
  %65 = bitcast %"class.jxl::Plane.97"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 24, i1 false) #9
  %66 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %37, i64 -1, i32 0, i32 5
  %67 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %53, i64 -1, i32 0, i32 5
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = bitcast %"class.std::__1::unique_ptr"* %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i8* null, i8** %68, align 8
  %71 = bitcast %"class.std::__1::unique_ptr"* %66 to i64*
  store i64 %70, i64* %71, align 8
  br label %72

72:                                               ; preds = %61, %55
  %73 = phi %"class.jxl::Plane.97"* [ undef, %55 ], [ %62, %61 ]
  %74 = phi %"class.jxl::Plane.97"* [ %37, %55 ], [ %62, %61 ]
  %75 = phi %"class.jxl::Plane.97"* [ %53, %55 ], [ %63, %61 ]
  %76 = icmp ult i64 %58, 32
  br i1 %76, label %101, label %77

77:                                               ; preds = %72, %77
  %78 = phi %"class.jxl::Plane.97"* [ %90, %77 ], [ %74, %72 ]
  %79 = phi %"class.jxl::Plane.97"* [ %91, %77 ], [ %75, %72 ]
  %80 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -1
  %81 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -1
  %82 = bitcast %"class.jxl::Plane.97"* %80 to i8*
  %83 = bitcast %"class.jxl::Plane.97"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 24, i1 false) #9
  %84 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -1, i32 0, i32 5
  %85 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -1, i32 0, i32 5
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %85, i64 0, i32 0, i32 0, i32 0
  %87 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i8* null, i8** %86, align 8
  %89 = bitcast %"class.std::__1::unique_ptr"* %84 to i64*
  store i64 %88, i64* %89, align 8
  %90 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -2
  %91 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -2
  %92 = bitcast %"class.jxl::Plane.97"* %90 to i8*
  %93 = bitcast %"class.jxl::Plane.97"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 24, i1 false) #9
  %94 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -2, i32 0, i32 5
  %95 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -2, i32 0, i32 5
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %95, i64 0, i32 0, i32 0, i32 0
  %97 = bitcast %"class.std::__1::unique_ptr"* %95 to i64*
  %98 = load i64, i64* %97, align 8
  store i8* null, i8** %96, align 8
  %99 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  store i64 %98, i64* %99, align 8
  %100 = icmp eq %"class.jxl::Plane.97"* %91, %51
  br i1 %100, label %101, label %77

101:                                              ; preds = %77, %72
  %102 = phi %"class.jxl::Plane.97"* [ %73, %72 ], [ %90, %77 ]
  %103 = load i64, i64* %6, align 8
  %104 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %3, align 8
  br label %105

105:                                              ; preds = %34, %101
  %106 = phi %"class.jxl::Plane.97"* [ %104, %101 ], [ %51, %34 ]
  %107 = phi %"class.jxl::Plane.97"* [ %102, %101 ], [ %37, %34 ]
  %108 = phi i64 [ %103, %101 ], [ %52, %34 ]
  %109 = ptrtoint %"class.jxl::Plane.97"* %107 to i64
  store i64 %109, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %110 = inttoptr i64 %108 to %"class.jxl::Plane.97"*
  %111 = icmp eq %"class.jxl::Plane.97"* %106, %110
  br i1 %111, label %121, label %112

112:                                              ; preds = %105, %119
  %113 = phi %"class.jxl::Plane.97"* [ %114, %119 ], [ %106, %105 ]
  %114 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %113, i64 -1
  %115 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %113, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  store i8* null, i8** %115, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %119, label %118

118:                                              ; preds = %112
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %116) #9
  br label %119

119:                                              ; preds = %118, %112
  %120 = icmp eq %"class.jxl::Plane.97"* %114, %110
  br i1 %120, label %121, label %112

121:                                              ; preds = %119, %105
  %122 = icmp eq i64 %108, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %121
  %124 = inttoptr i64 %108 to i8*
  tail call void @_ZdlPv(i8* %124) #11
  br label %125

125:                                              ; preds = %121, %123
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13PatchBlendingENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.57"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.57", %"class.std::__1::vector.57"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::PatchBlending"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.57", %"class.std::__1::vector.57"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::PatchBlending"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 12
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::PatchBlending"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %13, i64 %1
  %17 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %13, i64 0, i32 0
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %13, i64 %18, i32 0
  %20 = sub i64 0, %8
  %21 = getelementptr i8, i8* %19, i64 %20
  %22 = ptrtoint i8* %21 to i64
  %23 = urem i64 %22, 12
  %24 = add i64 %22, 12
  %25 = sub i64 %24, %23
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint %"struct.jxl::PatchBlending"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %88

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.57"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = sdiv exact i64 %32, 12
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 1537228672809129301
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.57"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #12
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = sdiv exact i64 %39, 12
  %41 = icmp ult i64 %40, 768614336404564650
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = shl nsw i64 %40, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %52, label %47

47:                                               ; preds = %38, %42
  %48 = phi i64 [ %45, %42 ], [ 1537228672809129301, %38 ]
  %49 = mul i64 %48, 12
  %50 = tail call i8* @_Znwm(i64 %49) #11
  %51 = bitcast i8* %50 to %"struct.jxl::PatchBlending"*
  br label %52

52:                                               ; preds = %47, %42
  %53 = phi i64 [ %48, %47 ], [ 0, %42 ]
  %54 = phi %"struct.jxl::PatchBlending"* [ %51, %47 ], [ null, %42 ]
  %55 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %54, i64 %33
  %56 = ptrtoint %"struct.jxl::PatchBlending"* %55 to i64
  %57 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %54, i64 %53
  %58 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %55, i64 %1
  %59 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %55, i64 0, i32 0
  %60 = add i64 %1, -1
  %61 = getelementptr %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %55, i64 %60, i32 0
  %62 = sub i64 0, %56
  %63 = getelementptr i8, i8* %61, i64 %62
  %64 = ptrtoint i8* %63 to i64
  %65 = urem i64 %64, 12
  %66 = add i64 %64, 12
  %67 = sub i64 %66, %65
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 %67, i1 false) #9
  %68 = ptrtoint %"struct.jxl::PatchBlending"* %57 to i64
  %69 = ptrtoint %"struct.jxl::PatchBlending"* %58 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.57", %"class.std::__1::vector.57"* %0, i64 0, i32 0, i32 0
  %71 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %70, align 8
  %72 = load i64, i64* %7, align 8
  %73 = ptrtoint %"struct.jxl::PatchBlending"* %71 to i64
  %74 = sub i64 %72, %73
  %75 = sdiv exact i64 %74, -12
  %76 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %55, i64 %75
  %77 = ptrtoint %"struct.jxl::PatchBlending"* %76 to i64
  %78 = icmp sgt i64 %74, 0
  br i1 %78, label %79, label %83

79:                                               ; preds = %52
  %80 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %76, i64 0, i32 0
  %81 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %71, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %80, i8* align 4 %81, i64 %74, i1 false) #9
  %82 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %70, align 8
  br label %83

83:                                               ; preds = %52, %79
  %84 = phi %"struct.jxl::PatchBlending"* [ %71, %52 ], [ %82, %79 ]
  store i64 %77, i64* %30, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %85 = icmp eq %"struct.jxl::PatchBlending"* %84, null
  br i1 %85, label %88, label %86

86:                                               ; preds = %83
  %87 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %84, i64 0, i32 0
  tail call void @_ZdlPv(i8* %87) #11
  br label %88

88:                                               ; preds = %86, %83, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIPKfNS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.246"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.246", %"class.std::__1::vector.246"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast float*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.246", %"class.std::__1::vector.246"* %0, i64 0, i32 0, i32 1
  %7 = bitcast float*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to float**
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds float*, float** %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr float*, float** %13, i64 %18
  %20 = bitcast float** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint float** %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.246"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.246"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #12
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #11
  %54 = bitcast i8* %53 to float**
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi float** [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds float*, float** %57, i64 %33
  %59 = getelementptr inbounds float*, float** %57, i64 %56
  %60 = getelementptr inbounds float*, float** %58, i64 %1
  %61 = bitcast float** %58 to i8*
  %62 = shl i64 %1, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 %62, i1 false) #9
  %63 = ptrtoint float** %59 to i64
  %64 = ptrtoint float** %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.246", %"class.std::__1::vector.246"* %0, i64 0, i32 0, i32 0
  %66 = load float**, float*** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint float** %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds float*, float** %58, i64 %71
  %73 = ptrtoint float** %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast float** %72 to i8*
  %77 = bitcast float** %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #9
  %78 = load float**, float*** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi float** [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq float** %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast float** %80 to i8*
  tail call void @_ZdlPv(i8* %83) #11
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIPfNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector.253"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.253", %"class.std::__1::vector.253"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast float*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.253", %"class.std::__1::vector.253"* %0, i64 0, i32 0, i32 1
  %7 = bitcast float*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to float**
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds float*, float** %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr float*, float** %13, i64 %18
  %20 = bitcast float** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint float** %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.253"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.253"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #12
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #11
  %54 = bitcast i8* %53 to float**
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi float** [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds float*, float** %57, i64 %33
  %59 = getelementptr inbounds float*, float** %57, i64 %56
  %60 = getelementptr inbounds float*, float** %58, i64 %1
  %61 = bitcast float** %58 to i8*
  %62 = shl i64 %1, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 %62, i1 false) #9
  %63 = ptrtoint float** %59 to i64
  %64 = ptrtoint float** %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.253", %"class.std::__1::vector.253"* %0, i64 0, i32 0, i32 0
  %66 = load float**, float*** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint float** %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds float*, float** %58, i64 %71
  %73 = ptrtoint float** %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast float** %72 to i8*
  %77 = bitcast float** %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #9
  %78 = load float**, float*** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi float** [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq float** %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast float** %80 to i8*
  tail call void @_ZdlPv(i8* %83) #11
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #10

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_: argument 0"}
!5 = distinct !{!5, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN3jxl9CopyImageIfEENS_6Image3IT_EERKS3_: argument 0"}
!8 = distinct !{!8, !"_ZN3jxl9CopyImageIfEENS_6Image3IT_EERKS3_"}
!9 = !{!10, !7}
!10 = distinct !{!10, !11, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_: argument 0"}
!11 = distinct !{!11, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZNK3jxl4Rect12IntersectionERKS0_: argument 0"}
!14 = distinct !{!14, !"_ZNK3jxl4Rect12IntersectionERKS0_"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKNS_4RectERKT_PS6_: argument 0"}
!17 = distinct !{!17, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKNS_4RectERKT_PS6_"}
!18 = !{!19, !21}
!19 = distinct !{!19, !20, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_: argument 0"}
!20 = distinct !{!20, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_"}
!21 = distinct !{!21, !22, !"_ZN3jxl11CopyImageToINS_5PlaneIfEEEEvRKNS_4RectERKT_PS6_: argument 0"}
!22 = distinct !{!22, !"_ZN3jxl11CopyImageToINS_5PlaneIfEEEEvRKNS_4RectERKT_PS6_"}
!23 = !{!24, !26}
!24 = distinct !{!24, !25, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!25 = distinct !{!25, !"_ZNK3jxl4Rect5LinesEmm"}
!26 = distinct !{!26, !27, !"_ZNK3jxl4Rect4LineEm: argument 0"}
!27 = distinct !{!27, !"_ZNK3jxl4Rect4LineEm"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_: argument 0"}
!30 = distinct !{!30, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_: argument 0"}
!33 = distinct !{!33, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_"}
