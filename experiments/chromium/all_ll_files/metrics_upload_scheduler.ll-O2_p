; ModuleID = '../../components/metrics/metrics_upload_scheduler.cc'
source_filename = "../../components/metrics/metrics_upload_scheduler.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.metrics::MetricsUploadScheduler" = type { %"class.metrics::MetricsScheduler.base", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta" }
%"class.metrics::MetricsScheduler.base" = type <{ i32 (...)**, %"class.base::RepeatingCallback", %"class.base::OneShotTimer", %"class.base::TimeDelta", i8, i8 }>
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::OneShotTimer" = type { %"class.base::internal::TimerBase", %"class.base::OnceCallback" }
%"class.base::internal::TimerBase" = type { i32 (...)**, %class.scoped_refptr.1, %"class.base::SequenceCheckerDoNothing", %"class.base::internal::TaskDestructionDetector"*, %"class.base::Location", %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TickClock"*, i8, %"class.base::WeakPtrFactory" }
%class.scoped_refptr.1 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2" }>
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::TaskDestructionDetector" = type opaque
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.3 }
%class.scoped_refptr.3 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.4", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.4" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.5" }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i8 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::TimeDelta" = type { i64 }
%"class.metrics::MetricsScheduler" = type <{ i32 (...)**, %"class.base::RepeatingCallback", %"class.base::OneShotTimer", %"class.base::TimeDelta", i8, i8, [6 x i8] }>

@_ZTVN7metrics22MetricsUploadSchedulerE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.metrics::MetricsUploadScheduler"*)* @_ZN7metrics22MetricsUploadSchedulerD2Ev to i8*), i8* bitcast (void (%"class.metrics::MetricsUploadScheduler"*)* @_ZN7metrics22MetricsUploadSchedulerD0Ev to i8*), i8* bitcast (void (%"class.metrics::MetricsScheduler"*)* @_ZN7metrics16MetricsScheduler11TriggerTaskEv to i8*)] }, align 8

@_ZN7metrics22MetricsUploadSchedulerC1ERKN4base17RepeatingCallbackIFvvEEEb = hidden unnamed_addr alias void (%"class.metrics::MetricsUploadScheduler"*, %"class.base::RepeatingCallback"*, i1), void (%"class.metrics::MetricsUploadScheduler"*, %"class.base::RepeatingCallback"*, i1)* @_ZN7metrics22MetricsUploadSchedulerC2ERKN4base17RepeatingCallbackIFvvEEEb
@_ZN7metrics22MetricsUploadSchedulerD1Ev = hidden unnamed_addr alias void (%"class.metrics::MetricsUploadScheduler"*), void (%"class.metrics::MetricsUploadScheduler"*)* @_ZN7metrics22MetricsUploadSchedulerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7metrics22MetricsUploadSchedulerC2ERKN4base17RepeatingCallbackIFvvEEEb(%"class.metrics::MetricsUploadScheduler"*, %"class.base::RepeatingCallback"* dereferenceable(8), i1 zeroext) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.metrics::MetricsUploadScheduler"* %0 to %"class.metrics::MetricsScheduler"*
  tail call void @_ZN7metrics16MetricsSchedulerC2ERKN4base17RepeatingCallbackIFvvEEEb(%"class.metrics::MetricsScheduler"* %4, %"class.base::RepeatingCallback"* dereferenceable(8) %1, i1 zeroext %2) #4
  %5 = getelementptr inbounds %"class.metrics::MetricsUploadScheduler", %"class.metrics::MetricsUploadScheduler"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN7metrics22MetricsUploadSchedulerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.metrics::MetricsUploadScheduler", %"class.metrics::MetricsUploadScheduler"* %0, i64 0, i32 1, i32 0
  %7 = bitcast i64* %6 to <2 x i64>*
  store <2 x i64> <i64 3000000, i64 300000000>, <2 x i64>* %7, align 8
  %8 = getelementptr inbounds %"class.metrics::MetricsUploadScheduler", %"class.metrics::MetricsUploadScheduler"* %0, i64 0, i32 3, i32 0
  store i64 300000000, i64* %8, align 8
  ret void
}

declare void @_ZN7metrics16MetricsSchedulerC2ERKN4base17RepeatingCallbackIFvvEEEb(%"class.metrics::MetricsScheduler"*, %"class.base::RepeatingCallback"* dereferenceable(8), i1 zeroext) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7metrics16MetricsSchedulerD2Ev(%"class.metrics::MetricsScheduler"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7metrics22MetricsUploadSchedulerD2Ev(%"class.metrics::MetricsUploadScheduler"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.metrics::MetricsUploadScheduler"* %0 to %"class.metrics::MetricsScheduler"*
  tail call void @_ZN7metrics16MetricsSchedulerD2Ev(%"class.metrics::MetricsScheduler"* %2) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7metrics22MetricsUploadSchedulerD0Ev(%"class.metrics::MetricsUploadScheduler"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.metrics::MetricsUploadScheduler"* %0 to %"class.metrics::MetricsScheduler"*
  tail call void @_ZN7metrics16MetricsSchedulerD2Ev(%"class.metrics::MetricsScheduler"* %2) #4
  %3 = bitcast %"class.metrics::MetricsUploadScheduler"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7metrics22MetricsUploadScheduler14UploadFinishedEb(%"class.metrics::MetricsUploadScheduler"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  br i1 %1, label %21, label %3

3:                                                ; preds = %2
  %4 = bitcast %"class.metrics::MetricsUploadScheduler"* %0 to %"class.metrics::MetricsScheduler"*
  %5 = getelementptr inbounds %"class.metrics::MetricsUploadScheduler", %"class.metrics::MetricsUploadScheduler"* %0, i64 0, i32 3, i32 0
  %6 = load i64, i64* %5, align 8
  tail call void @_ZN7metrics16MetricsScheduler8TaskDoneEN4base9TimeDeltaE(%"class.metrics::MetricsScheduler"* %4, i64 %6) #4
  %7 = load i64, i64* %5, align 8
  %8 = sitofp i64 %7 to double
  %9 = fmul double %8, 2.000000e+00
  %10 = fptosi double %9 to i64
  %11 = icmp sgt i64 %10, 86400000000
  br i1 %11, label %18, label %12

12:                                               ; preds = %3
  %13 = add i64 %10, -9223372036854775807
  %14 = icmp ult i64 %13, 2
  %15 = sdiv i64 %10, 1000000
  %16 = select i1 %14, i64 %10, i64 %15
  %17 = icmp slt i64 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %12, %3
  br label %19

19:                                               ; preds = %12, %18
  %20 = phi i64 [ 86400000000, %18 ], [ %10, %12 ]
  store i64 %20, i64* %5, align 8
  br label %28

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"class.metrics::MetricsUploadScheduler", %"class.metrics::MetricsUploadScheduler"* %0, i64 0, i32 2, i32 0
  %23 = getelementptr inbounds %"class.metrics::MetricsUploadScheduler", %"class.metrics::MetricsUploadScheduler"* %0, i64 0, i32 3, i32 0
  %24 = load i64, i64* %22, align 8
  store i64 %24, i64* %23, align 8
  %25 = bitcast %"class.metrics::MetricsUploadScheduler"* %0 to %"class.metrics::MetricsScheduler"*
  %26 = getelementptr inbounds %"class.metrics::MetricsUploadScheduler", %"class.metrics::MetricsUploadScheduler"* %0, i64 0, i32 1, i32 0
  %27 = load i64, i64* %26, align 8
  tail call void @_ZN7metrics16MetricsScheduler8TaskDoneEN4base9TimeDeltaE(%"class.metrics::MetricsScheduler"* %25, i64 %27) #4
  br label %28

28:                                               ; preds = %21, %19
  ret void
}

declare void @_ZN7metrics16MetricsScheduler8TaskDoneEN4base9TimeDeltaE(%"class.metrics::MetricsScheduler"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7metrics22MetricsUploadScheduler22StopAndUploadCancelledEv(%"class.metrics::MetricsUploadScheduler"*) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.metrics::MetricsUploadScheduler"* %0 to %"class.metrics::MetricsScheduler"*
  tail call void @_ZN7metrics16MetricsScheduler4StopEv(%"class.metrics::MetricsScheduler"* %2) #4
  %3 = getelementptr inbounds %"class.metrics::MetricsUploadScheduler", %"class.metrics::MetricsUploadScheduler"* %0, i64 0, i32 1, i32 0
  %4 = load i64, i64* %3, align 8
  tail call void @_ZN7metrics16MetricsScheduler8TaskDoneEN4base9TimeDeltaE(%"class.metrics::MetricsScheduler"* %2, i64 %4) #4
  ret void
}

declare void @_ZN7metrics16MetricsScheduler4StopEv(%"class.metrics::MetricsScheduler"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7metrics22MetricsUploadScheduler22UploadOverDataUsageCapEv(%"class.metrics::MetricsUploadScheduler"*) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.metrics::MetricsUploadScheduler"* %0 to %"class.metrics::MetricsScheduler"*
  tail call void @_ZN7metrics16MetricsScheduler8TaskDoneEN4base9TimeDeltaE(%"class.metrics::MetricsScheduler"* %2, i64 300000000) #4
  ret void
}

declare void @_ZN7metrics16MetricsScheduler11TriggerTaskEv(%"class.metrics::MetricsScheduler"*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
