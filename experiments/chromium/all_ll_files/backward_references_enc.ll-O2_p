; ModuleID = '../../third_party/libwebp/src/enc/backward_references_enc.c'
source_filename = "../../third_party/libwebp/src/enc/backward_references_enc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VP8LPrefixCode = type { i8, i8 }
%struct.VP8LBackwardRefs = type { i32, i32, %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock* }
%struct.PixOrCopyBlock = type { %struct.PixOrCopyBlock*, %struct.PixOrCopy*, i32 }
%struct.PixOrCopy = type { i8, i16, i32 }
%struct.VP8LRefsCursor = type { %struct.PixOrCopy*, %struct.PixOrCopyBlock*, %struct.PixOrCopy* }
%struct.VP8LHashChain = type { i32*, i32 }
%struct.VP8LColorCache = type { i32*, i32, i32 }
%struct.VP8LHistogram = type { i32*, [256 x i32], [256 x i32], [256 x i32], [40 x i32], i32, i32, double, double, double, double, [5 x i8] }

@plane_to_code_lut = internal unnamed_addr constant [128 x i8] c"`I7'\17\0D\05\01\FF\FF\FF\FF\FF\FF\FF\FFeN:*\1A\10\08\02\00\03\09\11\1B+;OfV>. \14\0A\06\04\07\0B\15!/?WiZF4%\1C\12\0E\0C\0F\13\1D&5G[ncRB0#\1E\18\16\19\1F$1CSdsl^L@2,(\22)-3AM_mvqg\5CPD<869=EQ]hrwtojaXTJHKUYbkpu", align 16
@VP8LVectorMismatch = external local_unnamed_addr global i32 (i32*, i32*, i32)*, align 8
@__const.GetBackwardReferences.bit_costs_best = private unnamed_addr constant [2 x double] [double 0x7FEFFFFFFFFFFFFF, double 0x7FEFFFFFFFFFFFFF], align 16
@kPrefixEncodeCode = external local_unnamed_addr constant [512 x %struct.VP8LPrefixCode], align 16

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @VP8LDistanceToPlaneCode(i32, i32) local_unnamed_addr #0 {
  %3 = sdiv i32 %1, %0
  %4 = mul nsw i32 %3, %0
  %5 = sub nsw i32 %1, %4
  %6 = icmp slt i32 %5, 9
  %7 = icmp slt i32 %3, 8
  %8 = and i1 %7, %6
  br i1 %8, label %9, label %18

9:                                                ; preds = %2
  %10 = shl nsw i32 %3, 4
  %11 = or i32 %10, 8
  %12 = sub nsw i32 %11, %5
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [128 x i8], [128 x i8]* @plane_to_code_lut, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = add nuw nsw i32 %16, 1
  br label %35

18:                                               ; preds = %2
  %19 = add nsw i32 %0, -8
  %20 = icmp sgt i32 %5, %19
  %21 = icmp slt i32 %3, 7
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %33

23:                                               ; preds = %18
  %24 = shl i32 %3, 4
  %25 = add i32 %0, 24
  %26 = add i32 %25, %24
  %27 = sub i32 %26, %5
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [128 x i8], [128 x i8]* @plane_to_code_lut, i64 0, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = add nuw nsw i32 %31, 1
  br label %35

33:                                               ; preds = %18
  %34 = add nsw i32 %1, 120
  br label %35

35:                                               ; preds = %33, %23, %9
  %36 = phi i32 [ %17, %9 ], [ %32, %23 ], [ %34, %33 ]
  ret i32 %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8LClearBackwardRefs(%struct.VP8LBackwardRefs*) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 3
  %3 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %2, align 8
  %4 = icmp eq %struct.PixOrCopyBlock** %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 4
  %7 = bitcast %struct.PixOrCopyBlock** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %struct.PixOrCopyBlock** %3 to i64*
  store i64 %8, i64* %9, align 8
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 2
  %12 = bitcast %struct.PixOrCopyBlock** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 4
  %15 = bitcast %struct.PixOrCopyBlock** %14 to i64*
  store i64 %13, i64* %15, align 8
  store %struct.PixOrCopyBlock** %11, %struct.PixOrCopyBlock*** %2, align 8
  %16 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 5
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %16, align 8
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %11, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LBackwardRefsClear(%struct.VP8LBackwardRefs*) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 3
  %3 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %2, align 8
  %4 = icmp eq %struct.PixOrCopyBlock** %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 4
  %7 = bitcast %struct.PixOrCopyBlock** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %struct.PixOrCopyBlock** %3 to i64*
  store i64 %8, i64* %9, align 8
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 2
  %12 = bitcast %struct.PixOrCopyBlock** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 4
  %15 = bitcast %struct.PixOrCopyBlock** %14 to i64*
  store i64 %13, i64* %15, align 8
  store %struct.PixOrCopyBlock** %11, %struct.PixOrCopyBlock*** %2, align 8
  %16 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 5
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %16, align 8
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %11, align 8
  %17 = icmp eq i64 %13, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %10, %18
  %19 = phi i64 [ %21, %18 ], [ %13, %10 ]
  %20 = inttoptr i64 %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = inttoptr i64 %19 to i8*
  tail call void @WebPSafeFree(i8* nonnull %22) #6
  store i64 %21, i64* %15, align 8
  %23 = icmp eq i64 %21, 0
  br i1 %23, label %24, label %18

24:                                               ; preds = %18, %10
  ret void
}

declare void @WebPSafeFree(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LBackwardRefsInit(%struct.VP8LBackwardRefs*, i32) local_unnamed_addr #3 {
  %3 = bitcast %struct.VP8LBackwardRefs* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 40, i1 false)
  %4 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 2
  %5 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 3
  store %struct.PixOrCopyBlock** %4, %struct.PixOrCopyBlock*** %5, align 8
  %6 = icmp sgt i32 %1, 256
  %7 = select i1 %6, i32 %1, i32 256
  %8 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 0
  store i32 %7, i32* %8, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8LRefsCursorInit(%struct.VP8LRefsCursor* noalias nocapture sret, %struct.VP8LBackwardRefs* nocapture readonly) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.VP8LRefsCursor, %struct.VP8LRefsCursor* %0, i64 0, i32 0
  %4 = getelementptr inbounds %struct.VP8LRefsCursor, %struct.VP8LRefsCursor* %0, i64 0, i32 1
  %5 = getelementptr inbounds %struct.VP8LRefsCursor, %struct.VP8LRefsCursor* %0, i64 0, i32 2
  %6 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %1, i64 0, i32 2
  %7 = bitcast %struct.VP8LRefsCursor* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 24, i1 false)
  %8 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %6, align 8
  store %struct.PixOrCopyBlock* %8, %struct.PixOrCopyBlock** %4, align 8
  %9 = icmp eq %struct.PixOrCopyBlock* %8, null
  br i1 %9, label %17, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %8, i64 0, i32 1
  %12 = load %struct.PixOrCopy*, %struct.PixOrCopy** %11, align 8
  store %struct.PixOrCopy* %12, %struct.PixOrCopy** %3, align 8
  %13 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %8, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %12, i64 %15
  br label %18

17:                                               ; preds = %2
  store %struct.PixOrCopy* null, %struct.PixOrCopy** %3, align 8
  br label %18

18:                                               ; preds = %17, %10
  %19 = phi %struct.PixOrCopy* [ null, %17 ], [ %16, %10 ]
  store %struct.PixOrCopy* %19, %struct.PixOrCopy** %5, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8LRefsCursorNextBlock(%struct.VP8LRefsCursor* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.VP8LRefsCursor, %struct.VP8LRefsCursor* %0, i64 0, i32 1
  %3 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %2, align 8
  %4 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %3, i64 0, i32 0
  %5 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %4, align 8
  %6 = icmp eq %struct.PixOrCopyBlock* %5, null
  br i1 %6, label %17, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %5, i64 0, i32 1
  %9 = bitcast %struct.PixOrCopy** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %struct.VP8LRefsCursor* %0 to i64*
  store i64 %10, i64* %11, align 8
  %12 = load %struct.PixOrCopy*, %struct.PixOrCopy** %8, align 8
  %13 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %5, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %12, i64 %15
  br label %19

17:                                               ; preds = %1
  %18 = getelementptr inbounds %struct.VP8LRefsCursor, %struct.VP8LRefsCursor* %0, i64 0, i32 0
  store %struct.PixOrCopy* null, %struct.PixOrCopy** %18, align 8
  br label %19

19:                                               ; preds = %17, %7
  %20 = phi %struct.PixOrCopy* [ %16, %7 ], [ null, %17 ]
  %21 = getelementptr inbounds %struct.VP8LRefsCursor, %struct.VP8LRefsCursor* %0, i64 0, i32 2
  store %struct.PixOrCopy* %20, %struct.PixOrCopy** %21, align 8
  store %struct.PixOrCopyBlock* %5, %struct.PixOrCopyBlock** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LBackwardRefsCursorAdd(%struct.VP8LBackwardRefs* nocapture, i64) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 5
  %4 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %3, align 8
  %5 = icmp eq %struct.PixOrCopyBlock* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %4, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %8, %10
  br i1 %11, label %12, label %44

12:                                               ; preds = %6, %2
  %13 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 4
  %14 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %13, align 8
  %15 = icmp eq %struct.PixOrCopyBlock* %14, null
  br i1 %15, label %16, label %33

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = sext i32 %18 to i64
  %20 = shl nsw i64 %19, 3
  %21 = add nsw i64 %20, 24
  %22 = tail call i8* @WebPSafeMalloc(i64 1, i64 %21) #6
  %23 = icmp eq i8* %22, null
  br i1 %23, label %24, label %28

24:                                               ; preds = %16
  %25 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = or i32 %26, 1
  store i32 %27, i32* %25, align 4
  br label %54

28:                                               ; preds = %16
  %29 = bitcast i8* %22 to %struct.PixOrCopyBlock*
  %30 = getelementptr inbounds i8, i8* %22, i64 24
  %31 = getelementptr inbounds i8, i8* %22, i64 8
  %32 = bitcast i8* %31 to i8**
  store i8* %30, i8** %32, align 8
  br label %37

33:                                               ; preds = %12
  %34 = bitcast %struct.PixOrCopyBlock* %14 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %struct.PixOrCopyBlock** %13 to i64*
  store i64 %35, i64* %36, align 8
  br label %37

37:                                               ; preds = %28, %33
  %38 = phi %struct.PixOrCopyBlock* [ %29, %28 ], [ %14, %33 ]
  %39 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 3
  %40 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %39, align 8
  store %struct.PixOrCopyBlock* %38, %struct.PixOrCopyBlock** %40, align 8
  %41 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %38, i64 0, i32 0
  store %struct.PixOrCopyBlock** %41, %struct.PixOrCopyBlock*** %39, align 8
  store %struct.PixOrCopyBlock* %38, %struct.PixOrCopyBlock** %3, align 8
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %41, align 8
  %42 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %38, i64 0, i32 2
  store i32 0, i32* %42, align 8
  %43 = icmp eq %struct.PixOrCopyBlock* %38, null
  br i1 %43, label %54, label %44

44:                                               ; preds = %37, %6
  %45 = phi i32 [ 0, %37 ], [ %8, %6 ]
  %46 = phi %struct.PixOrCopyBlock* [ %38, %37 ], [ %4, %6 ]
  %47 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %46, i64 0, i32 1
  %48 = load %struct.PixOrCopy*, %struct.PixOrCopy** %47, align 8
  %49 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %46, i64 0, i32 2
  %50 = add nsw i32 %45, 1
  store i32 %50, i32* %49, align 8
  %51 = sext i32 %45 to i64
  %52 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %48, i64 %51
  %53 = bitcast %struct.PixOrCopy* %52 to i64*
  store i64 %1, i64* %53, align 4
  br label %54

54:                                               ; preds = %24, %37, %44
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8LHashChainInit(%struct.VP8LHashChain* nocapture, i32) local_unnamed_addr #3 {
  %3 = sext i32 %1 to i64
  %4 = tail call i8* @WebPSafeMalloc(i64 %3, i64 4) #6
  %5 = bitcast %struct.VP8LHashChain* %0 to i8**
  store i8* %4, i8** %5, align 8
  %6 = icmp eq i8* %4, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.VP8LHashChain, %struct.VP8LHashChain* %0, i64 0, i32 1
  store i32 %1, i32* %8, align 8
  br label %9

9:                                                ; preds = %2, %7
  %10 = phi i32 [ 1, %7 ], [ 0, %2 ]
  ret i32 %10
}

declare i8* @WebPSafeMalloc(i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LHashChainClear(%struct.VP8LHashChain* nocapture) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.VP8LHashChain, %struct.VP8LHashChain* %0, i64 0, i32 0
  %3 = bitcast %struct.VP8LHashChain* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  tail call void @WebPSafeFree(i8* %4) #6
  %5 = getelementptr inbounds %struct.VP8LHashChain, %struct.VP8LHashChain* %0, i64 0, i32 1
  store i32 0, i32* %5, align 8
  store i32* null, i32** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8LHashChainFill(%struct.VP8LHashChain* nocapture readonly, i32, i32*, i32, i32, i32) local_unnamed_addr #3 {
  %7 = mul i32 %4, %3
  %8 = mul nsw i32 %1, %1
  %9 = lshr i32 %8, 7
  %10 = add nuw nsw i32 %9, 8
  %11 = icmp sgt i32 %1, 75
  br i1 %11, label %20, label %12

12:                                               ; preds = %6
  %13 = icmp sgt i32 %1, 50
  %14 = icmp sgt i32 %1, 25
  %15 = select i1 %14, i32 6, i32 4
  %16 = select i1 %13, i32 8, i32 %15
  %17 = shl i32 %3, %16
  %18 = icmp slt i32 %17, 1048456
  %19 = select i1 %18, i32 %17, i32 1048456
  br label %20

20:                                               ; preds = %6, %12
  %21 = phi i32 [ %19, %12 ], [ 1048456, %6 ]
  %22 = getelementptr inbounds %struct.VP8LHashChain, %struct.VP8LHashChain* %0, i64 0, i32 0
  %23 = load i32*, i32** %22, align 8
  %24 = icmp slt i32 %7, 3
  br i1 %24, label %25, label %30

25:                                               ; preds = %20
  %26 = add nsw i32 %7, -1
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i32, i32* %23, i64 %27
  store i32 0, i32* %28, align 4
  %29 = load i32*, i32** %22, align 8
  store i32 0, i32* %29, align 4
  br label %318

30:                                               ; preds = %20
  %31 = tail call i8* @WebPSafeMalloc(i64 262144, i64 4) #6
  %32 = bitcast i8* %31 to i32*
  %33 = icmp eq i8* %31, null
  br i1 %33, label %318, label %34

34:                                               ; preds = %30
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %31, i8 -1, i64 1048576, i1 false)
  %35 = load i32, i32* %2, align 4
  %36 = getelementptr inbounds i32, i32* %2, i64 1
  %37 = load i32, i32* %36, align 4
  %38 = add nsw i32 %7, -2
  %39 = icmp eq i32 %35, %37
  %40 = zext i1 %39 to i32
  br label %41

41:                                               ; preds = %148, %34
  %42 = phi i32 [ %40, %34 ], [ %150, %148 ]
  %43 = phi i32 [ 0, %34 ], [ %149, %148 ]
  %44 = add nsw i32 %43, 1
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, i32* %2, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = add i32 %43, 2
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i32, i32* %2, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %47, %51
  %53 = icmp ne i32 %42, 0
  %54 = and i1 %53, %52
  br i1 %54, label %55, label %132

55:                                               ; preds = %41
  %56 = sext i32 %43 to i64
  %57 = getelementptr inbounds i32, i32* %2, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = add i32 %43, 3
  %60 = icmp slt i32 %59, %7
  br i1 %60, label %61, label %86

61:                                               ; preds = %55
  %62 = sub i32 %38, %43
  br label %63

63:                                               ; preds = %70, %61
  %64 = phi i32 [ %72, %70 ], [ %59, %61 ]
  %65 = phi i32 [ %71, %70 ], [ 1, %61 ]
  %66 = zext i32 %64 to i64
  %67 = getelementptr inbounds i32, i32* %2, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, %58
  br i1 %69, label %70, label %74

70:                                               ; preds = %63
  %71 = add i32 %65, 1
  %72 = add i32 %48, %71
  %73 = icmp eq i32 %71, %62
  br i1 %73, label %74, label %63

74:                                               ; preds = %63, %70
  %75 = phi i32 [ %65, %63 ], [ %62, %70 ]
  %76 = icmp ugt i32 %75, 4095
  br i1 %76, label %77, label %84

77:                                               ; preds = %74
  %78 = getelementptr inbounds i32, i32* %23, i64 %56
  %79 = bitcast i32* %78 to i8*
  %80 = add i32 %75, -4095
  %81 = zext i32 %80 to i64
  %82 = shl nuw nsw i64 %81, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %79, i8 -1, i64 %82, i1 false)
  %83 = add i32 %80, %43
  br label %86

84:                                               ; preds = %74
  %85 = icmp eq i32 %75, 0
  br i1 %85, label %148, label %86

86:                                               ; preds = %55, %77, %84
  %87 = phi i32 [ %75, %84 ], [ 4095, %77 ], [ 1, %55 ]
  %88 = phi i32 [ %43, %84 ], [ %83, %77 ], [ %43, %55 ]
  %89 = mul i32 %58, 1540483478
  %90 = sext i32 %88 to i64
  %91 = and i32 %87, 1
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %103, label %93

93:                                               ; preds = %86
  %94 = add i32 %87, -1
  %95 = mul i32 %87, -962287725
  %96 = add i32 %95, %89
  %97 = lshr i32 %96, 14
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds i32, i32* %32, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds i32, i32* %23, i64 %90
  store i32 %100, i32* %101, align 4
  %102 = add nsw i64 %90, 1
  store i32 %88, i32* %99, align 4
  br label %103

103:                                              ; preds = %93, %86
  %104 = phi i64 [ %102, %93 ], [ undef, %86 ]
  %105 = phi i64 [ %102, %93 ], [ %90, %86 ]
  %106 = phi i32 [ %94, %93 ], [ %87, %86 ]
  %107 = icmp eq i32 %87, 1
  br i1 %107, label %145, label %108

108:                                              ; preds = %103, %108
  %109 = phi i64 [ %129, %108 ], [ %105, %103 ]
  %110 = phi i32 [ %120, %108 ], [ %106, %103 ]
  %111 = mul i32 %110, -962287725
  %112 = add i32 %111, %89
  %113 = lshr i32 %112, 14
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds i32, i32* %32, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds i32, i32* %23, i64 %109
  store i32 %116, i32* %117, align 4
  %118 = add nsw i64 %109, 1
  %119 = trunc i64 %109 to i32
  store i32 %119, i32* %115, align 4
  %120 = add i32 %110, -2
  %121 = mul i32 %110, -962287725
  %122 = add i32 %121, 962287725
  %123 = add i32 %122, %89
  %124 = lshr i32 %123, 14
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i32, i32* %32, i64 %125
  %127 = load i32, i32* %126, align 4
  %128 = getelementptr inbounds i32, i32* %23, i64 %118
  store i32 %127, i32* %128, align 4
  %129 = add nsw i64 %109, 2
  %130 = trunc i64 %118 to i32
  store i32 %130, i32* %126, align 4
  %131 = icmp eq i32 %120, 0
  br i1 %131, label %145, label %108

132:                                              ; preds = %41
  %133 = zext i1 %52 to i32
  %134 = sext i32 %43 to i64
  %135 = getelementptr inbounds i32, i32* %2, i64 %134
  %136 = mul i32 %47, -962287725
  %137 = load i32, i32* %135, align 4
  %138 = mul i32 %137, 1540483478
  %139 = add i32 %138, %136
  %140 = lshr i32 %139, 14
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds i32, i32* %32, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = getelementptr inbounds i32, i32* %23, i64 %134
  store i32 %143, i32* %144, align 4
  store i32 %43, i32* %142, align 4
  br label %148

145:                                              ; preds = %108, %103
  %146 = phi i64 [ %104, %103 ], [ %129, %108 ]
  %147 = trunc i64 %146 to i32
  br label %148

148:                                              ; preds = %145, %84, %132
  %149 = phi i32 [ %44, %132 ], [ %43, %84 ], [ %147, %145 ]
  %150 = phi i32 [ %133, %132 ], [ 0, %84 ], [ 0, %145 ]
  %151 = icmp slt i32 %149, %38
  br i1 %151, label %41, label %152

152:                                              ; preds = %148
  %153 = sext i32 %149 to i64
  %154 = getelementptr inbounds i32, i32* %2, i64 %153
  %155 = getelementptr inbounds i32, i32* %154, i64 1
  %156 = load i32, i32* %155, align 4
  %157 = load i32, i32* %154, align 4
  %158 = sext i32 %149 to i64
  %159 = mul i32 %156, -962287725
  %160 = mul i32 %157, 1540483478
  %161 = add i32 %160, %159
  %162 = lshr i32 %161, 14
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds i32, i32* %32, i64 %163
  %165 = load i32, i32* %164, align 4
  %166 = getelementptr inbounds i32, i32* %23, i64 %158
  store i32 %165, i32* %166, align 4
  tail call void @WebPSafeFree(i8* nonnull %31) #6
  %167 = load i32*, i32** %22, align 8
  %168 = add nsw i32 %7, -1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i32, i32* %167, i64 %169
  store i32 0, i32* %170, align 4
  %171 = load i32*, i32** %22, align 8
  store i32 0, i32* %171, align 4
  %172 = icmp eq i32 %38, 0
  br i1 %172, label %318, label %173

173:                                              ; preds = %152
  %174 = icmp eq i32 %5, 0
  %175 = sext i32 %3 to i64
  %176 = sub nsw i64 0, %175
  %177 = add nuw nsw i32 %9, 7
  br label %178

178:                                              ; preds = %173, %315
  %179 = phi i32 [ %38, %173 ], [ %316, %315 ]
  %180 = sub i32 %168, %179
  %181 = icmp slt i32 %180, 4095
  %182 = select i1 %181, i32 %180, i32 4095
  %183 = zext i32 %179 to i64
  %184 = getelementptr inbounds i32, i32* %2, i64 %183
  %185 = tail call i32 @llvm.usub.sat.i32(i32 %179, i32 %21)
  %186 = icmp slt i32 %182, 256
  %187 = select i1 %186, i32 %180, i32 256
  %188 = getelementptr inbounds i32, i32* %23, i64 %183
  %189 = load i32, i32* %188, align 4
  br i1 %174, label %190, label %228

190:                                              ; preds = %178
  %191 = icmp ult i32 %179, %3
  br i1 %191, label %205, label %192

192:                                              ; preds = %190
  %193 = getelementptr inbounds i32, i32* %184, i64 %176
  %194 = load i32, i32* %193, align 4
  %195 = load i32, i32* %184, align 4
  %196 = icmp eq i32 %194, %195
  br i1 %196, label %197, label %200

197:                                              ; preds = %192
  %198 = load i32 (i32*, i32*, i32)*, i32 (i32*, i32*, i32)** @VP8LVectorMismatch, align 8
  %199 = tail call i32 %198(i32* %193, i32* %184, i32 %182) #6
  br label %200

200:                                              ; preds = %192, %197
  %201 = phi i32 [ %199, %197 ], [ 0, %192 ]
  %202 = icmp sgt i32 %201, 0
  %203 = select i1 %202, i32 %201, i32 0
  %204 = select i1 %202, i32 %3, i32 0
  br label %205

205:                                              ; preds = %190, %200
  %206 = phi i32 [ %177, %200 ], [ %10, %190 ]
  %207 = phi i32 [ %203, %200 ], [ 0, %190 ]
  %208 = phi i32 [ %204, %200 ], [ 0, %190 ]
  %209 = getelementptr inbounds i32, i32* %184, i64 -1
  %210 = zext i32 %207 to i64
  %211 = getelementptr inbounds i32, i32* %209, i64 %210
  %212 = load i32, i32* %211, align 4
  %213 = getelementptr inbounds i32, i32* %184, i64 %210
  %214 = load i32, i32* %213, align 4
  %215 = icmp eq i32 %212, %214
  br i1 %215, label %216, label %219

216:                                              ; preds = %205
  %217 = load i32 (i32*, i32*, i32)*, i32 (i32*, i32*, i32)** @VP8LVectorMismatch, align 8
  %218 = tail call i32 %217(i32* %209, i32* %184, i32 %182) #6
  br label %219

219:                                              ; preds = %205, %216
  %220 = phi i32 [ %218, %216 ], [ 0, %205 ]
  %221 = icmp sgt i32 %220, %207
  %222 = select i1 %221, i32 %220, i32 %207
  %223 = select i1 %221, i32 1, i32 %208
  %224 = add nsw i32 %206, -1
  %225 = icmp eq i32 %222, 4095
  %226 = add nsw i32 %185, -1
  %227 = select i1 %225, i32 %226, i32 %189
  br label %228

228:                                              ; preds = %219, %178
  %229 = phi i32 [ %189, %178 ], [ %227, %219 ]
  %230 = phi i32 [ %10, %178 ], [ %224, %219 ]
  %231 = phi i32 [ 0, %178 ], [ %222, %219 ]
  %232 = phi i32 [ 0, %178 ], [ %223, %219 ]
  %233 = icmp slt i32 %229, %185
  br i1 %233, label %274, label %234

234:                                              ; preds = %228
  %235 = sext i32 %231 to i64
  %236 = getelementptr inbounds i32, i32* %184, i64 %235
  %237 = load i32, i32* %236, align 4
  br label %238

238:                                              ; preds = %234, %266
  %239 = phi i32 [ %270, %266 ], [ %237, %234 ]
  %240 = phi i32 [ %269, %266 ], [ %232, %234 ]
  %241 = phi i32 [ %268, %266 ], [ %231, %234 ]
  %242 = phi i32 [ %244, %266 ], [ %230, %234 ]
  %243 = phi i32 [ %272, %266 ], [ %229, %234 ]
  %244 = add nsw i32 %242, -1
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %274, label %246

246:                                              ; preds = %238
  %247 = add nsw i32 %241, %243
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds i32, i32* %2, i64 %248
  %250 = load i32, i32* %249, align 4
  %251 = icmp eq i32 %250, %239
  br i1 %251, label %254, label %252

252:                                              ; preds = %246
  %253 = sext i32 %243 to i64
  br label %266

254:                                              ; preds = %246
  %255 = load i32 (i32*, i32*, i32)*, i32 (i32*, i32*, i32)** @VP8LVectorMismatch, align 8
  %256 = sext i32 %243 to i64
  %257 = getelementptr inbounds i32, i32* %2, i64 %256
  %258 = tail call i32 %255(i32* %257, i32* %184, i32 %182) #6
  %259 = icmp slt i32 %241, %258
  br i1 %259, label %260, label %266

260:                                              ; preds = %254
  %261 = sub i32 %179, %243
  %262 = sext i32 %258 to i64
  %263 = getelementptr inbounds i32, i32* %184, i64 %262
  %264 = load i32, i32* %263, align 4
  %265 = icmp slt i32 %258, %187
  br i1 %265, label %266, label %274

266:                                              ; preds = %252, %254, %260
  %267 = phi i64 [ %253, %252 ], [ %256, %254 ], [ %256, %260 ]
  %268 = phi i32 [ %241, %252 ], [ %241, %254 ], [ %258, %260 ]
  %269 = phi i32 [ %240, %252 ], [ %240, %254 ], [ %261, %260 ]
  %270 = phi i32 [ %239, %252 ], [ %239, %254 ], [ %264, %260 ]
  %271 = getelementptr inbounds i32, i32* %23, i64 %267
  %272 = load i32, i32* %271, align 4
  %273 = icmp slt i32 %272, %185
  br i1 %273, label %274, label %238

274:                                              ; preds = %266, %238, %260, %228
  %275 = phi i32 [ %231, %228 ], [ %258, %260 ], [ %241, %238 ], [ %268, %266 ]
  %276 = phi i32 [ %232, %228 ], [ %261, %260 ], [ %240, %238 ], [ %269, %266 ]
  %277 = shl i32 %276, 12
  %278 = or i32 %275, %277
  %279 = load i32*, i32** %22, align 8
  %280 = getelementptr inbounds i32, i32* %279, i64 %183
  store i32 %278, i32* %280, align 4
  %281 = add i32 %179, -1
  %282 = add i32 %276, -1
  %283 = icmp ult i32 %282, %281
  br i1 %283, label %284, label %315

284:                                              ; preds = %274
  %285 = icmp ne i32 %276, 1
  br label %286

286:                                              ; preds = %284, %305
  %287 = phi i32 [ %281, %284 ], [ %313, %305 ]
  %288 = phi i32 [ %179, %284 ], [ %309, %305 ]
  %289 = phi i32 [ %275, %284 ], [ %308, %305 ]
  %290 = phi i32 [ %179, %284 ], [ %287, %305 ]
  %291 = sub i32 %287, %276
  %292 = zext i32 %291 to i64
  %293 = getelementptr inbounds i32, i32* %2, i64 %292
  %294 = load i32, i32* %293, align 4
  %295 = zext i32 %287 to i64
  %296 = getelementptr inbounds i32, i32* %2, i64 %295
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %294, %297
  br i1 %298, label %299, label %315

299:                                              ; preds = %286
  %300 = icmp eq i32 %289, 4095
  %301 = and i1 %285, %300
  %302 = add i32 %290, 4094
  %303 = icmp ult i32 %302, %288
  %304 = and i1 %301, %303
  br i1 %304, label %315, label %305

305:                                              ; preds = %299
  %306 = icmp slt i32 %289, 4095
  %307 = zext i1 %306 to i32
  %308 = add nsw i32 %289, %307
  %309 = select i1 %306, i32 %287, i32 %288
  %310 = or i32 %308, %277
  %311 = load i32*, i32** %22, align 8
  %312 = getelementptr inbounds i32, i32* %311, i64 %295
  store i32 %310, i32* %312, align 4
  %313 = add i32 %287, -1
  %314 = icmp ult i32 %282, %313
  br i1 %314, label %286, label %315

315:                                              ; preds = %286, %299, %305, %274
  %316 = phi i32 [ %281, %274 ], [ %313, %305 ], [ %287, %299 ], [ %287, %286 ]
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %318, label %178

318:                                              ; preds = %315, %152, %30, %25
  %319 = phi i32 [ 1, %25 ], [ 0, %30 ], [ 1, %152 ], [ 1, %315 ]
  ret i32 %319
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8LGetBackwardReferences(i32, i32, i32*, i32, i32, i32, i32, i32, %struct.VP8LHashChain*, %struct.VP8LBackwardRefs*, i32* nocapture) local_unnamed_addr #3 {
  %12 = alloca %struct.VP8LColorCache, align 8
  %13 = alloca [11 x i32], align 16
  %14 = alloca [11 x %struct.VP8LColorCache], align 16
  %15 = alloca [11 x %struct.VP8LHistogram*], align 16
  %16 = alloca [32 x i32], align 16
  %17 = alloca [32 x i32], align 16
  %18 = alloca i64, align 8
  %19 = alloca [2 x double], align 16
  %20 = alloca %struct.VP8LHashChain, align 8
  %21 = icmp eq i32 %4, 0
  br i1 %21, label %117, label %22

22:                                               ; preds = %11
  store i32 0, i32* %10, align 4
  %23 = tail call fastcc i32 @BackwardReferencesLz77(i32 %0, i32 %1, i32* %2, %struct.VP8LHashChain* %8, %struct.VP8LBackwardRefs* %9) #6
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %1263, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 0, i32 2
  %27 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %26, align 8, !noalias !2
  %28 = icmp eq %struct.PixOrCopyBlock* %27, null
  br i1 %28, label %106, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %27, i64 0, i32 1
  %31 = load %struct.PixOrCopy*, %struct.PixOrCopy** %30, align 8, !noalias !2
  %32 = icmp eq %struct.PixOrCopy* %31, null
  br i1 %32, label %106, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %27, i64 0, i32 2
  %35 = load i32, i32* %34, align 8, !noalias !2
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %31, i64 %36
  %38 = add nsw i32 %0, -8
  %39 = add i32 %0, 24
  br label %40

40:                                               ; preds = %100, %33
  %41 = phi %struct.PixOrCopy* [ %31, %33 ], [ %101, %100 ]
  %42 = phi %struct.PixOrCopy* [ %37, %33 ], [ %104, %100 ]
  %43 = phi %struct.PixOrCopyBlock* [ %27, %33 ], [ %103, %100 ]
  %44 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %41, i64 0, i32 0
  %45 = load i8, i8* %44, align 4
  %46 = icmp eq i8 %45, 2
  br i1 %46, label %47, label %82

47:                                               ; preds = %40
  %48 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %41, i64 0, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = sdiv i32 %49, %0
  %51 = mul nsw i32 %50, %0
  %52 = sub nsw i32 %49, %51
  %53 = icmp slt i32 %52, 9
  %54 = icmp slt i32 %50, 8
  %55 = and i1 %54, %53
  br i1 %55, label %56, label %65

56:                                               ; preds = %47
  %57 = shl nsw i32 %50, 4
  %58 = or i32 %57, 8
  %59 = sub nsw i32 %58, %52
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [128 x i8], [128 x i8]* @plane_to_code_lut, i64 0, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = add nuw nsw i32 %63, 1
  br label %80

65:                                               ; preds = %47
  %66 = icmp sgt i32 %52, %38
  %67 = icmp slt i32 %50, 7
  %68 = and i1 %67, %66
  br i1 %68, label %69, label %78

69:                                               ; preds = %65
  %70 = shl i32 %50, 4
  %71 = add i32 %39, %70
  %72 = sub i32 %71, %52
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [128 x i8], [128 x i8]* @plane_to_code_lut, i64 0, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = add nuw nsw i32 %76, 1
  br label %80

78:                                               ; preds = %65
  %79 = add nsw i32 %49, 120
  br label %80

80:                                               ; preds = %78, %69, %56
  %81 = phi i32 [ %64, %56 ], [ %77, %69 ], [ %79, %78 ]
  store i32 %81, i32* %48, align 4
  br label %82

82:                                               ; preds = %80, %40
  %83 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %41, i64 1
  %84 = icmp eq %struct.PixOrCopy* %83, %42
  br i1 %84, label %87, label %85

85:                                               ; preds = %82
  %86 = ptrtoint %struct.PixOrCopy* %83 to i64
  br label %100

87:                                               ; preds = %82
  %88 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %43, i64 0, i32 0
  %89 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %88, align 8
  %90 = icmp eq %struct.PixOrCopyBlock* %89, null
  br i1 %90, label %106, label %91

91:                                               ; preds = %87
  %92 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %89, i64 0, i32 1
  %93 = bitcast %struct.PixOrCopy** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %94 to %struct.PixOrCopy*
  %96 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %89, i64 0, i32 2
  %97 = load i32, i32* %96, align 8
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %95, i64 %98
  br label %100

100:                                              ; preds = %91, %85
  %101 = phi %struct.PixOrCopy* [ %83, %85 ], [ %95, %91 ]
  %102 = phi i64 [ %86, %85 ], [ %94, %91 ]
  %103 = phi %struct.PixOrCopyBlock* [ %43, %85 ], [ %89, %91 ]
  %104 = phi %struct.PixOrCopy* [ %42, %85 ], [ %99, %91 ]
  %105 = icmp eq i64 %102, 0
  br i1 %105, label %106, label %40

106:                                              ; preds = %87, %100, %25, %29
  %107 = icmp eq %struct.VP8LBackwardRefs* %9, null
  br i1 %107, label %1263, label %108

108:                                              ; preds = %106
  %109 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 0, i32 3
  %110 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %109, align 8
  %111 = icmp ne %struct.PixOrCopyBlock** %110, null
  %112 = icmp eq %struct.PixOrCopyBlock** %110, %26
  %113 = and i1 %112, %111
  %114 = ptrtoint %struct.PixOrCopyBlock** %110 to i64
  %115 = bitcast %struct.PixOrCopyBlock*** %109 to i64*
  store i64 %114, i64* %115, align 8
  br i1 %113, label %116, label %1262

116:                                              ; preds = %108
  store %struct.PixOrCopyBlock** %26, %struct.PixOrCopyBlock*** %109, align 8
  br label %1262

117:                                              ; preds = %11
  %118 = bitcast i64* %18 to [2 x i32]*
  %119 = bitcast i64* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %119) #6
  store i64 0, i64* %18, align 8
  %120 = bitcast [2 x double]* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %120) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %120, i8* align 16 bitcast ([2 x double]* @__const.GetBackwardReferences.bit_costs_best to i8*), i64 16, i1 false) #6
  %121 = bitcast %struct.VP8LHashChain* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %121) #6
  %122 = icmp ne i32 %7, 0
  %123 = select i1 %122, i64 2, i64 1
  %124 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %123
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %121, i8 0, i64 16, i1 false) #6
  %125 = tail call %struct.VP8LHistogram* @VP8LAllocateHistogram(i32 10) #6
  %126 = icmp eq %struct.VP8LHistogram* %125, null
  br i1 %126, label %1256, label %127

127:                                              ; preds = %117
  %128 = icmp eq i32 %5, 0
  br i1 %128, label %129, label %133

129:                                              ; preds = %127
  %130 = bitcast %struct.VP8LBackwardRefs* %124 to i8*
  %131 = add nsw i32 %0, -8
  %132 = add i32 %0, 24
  br label %181

133:                                              ; preds = %127
  %134 = mul i32 %1, %0
  %135 = sext i32 %134 to i64
  %136 = bitcast %struct.VP8LHashChain* %20 to i8**
  %137 = getelementptr inbounds %struct.VP8LHashChain, %struct.VP8LHashChain* %20, i64 0, i32 1
  %138 = bitcast [32 x i32]* %16 to i8*
  %139 = bitcast [32 x i32]* %17 to i8*
  %140 = add nsw i32 %134, -2
  %141 = sext i32 %140 to i64
  %142 = icmp sgt i32 %140, -1
  %143 = add nsw i32 %0, -8
  %144 = add i32 %0, 24
  %145 = getelementptr inbounds %struct.VP8LHashChain, %struct.VP8LHashChain* %20, i64 0, i32 0
  %146 = icmp sgt i32 %134, 1
  %147 = getelementptr inbounds %struct.VP8LHashChain, %struct.VP8LHashChain* %8, i64 0, i32 0
  %148 = zext i32 %134 to i64
  %149 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %123, i32 3
  %150 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %123, i32 4
  %151 = bitcast %struct.PixOrCopyBlock** %150 to i64*
  %152 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %123, i32 2
  %153 = bitcast %struct.PixOrCopyBlock** %152 to i64*
  %154 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %123, i32 5
  %155 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %124, i64 0, i32 0
  %156 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %123, i32 1
  %157 = sext i32 %0 to i64
  %158 = sub nsw i64 0, %157
  %159 = zext i32 %0 to i64
  %160 = shl nuw i64 %159, 32
  %161 = icmp slt i32 %3, 26
  %162 = bitcast [11 x i32]* %13 to i8*
  %163 = bitcast [11 x %struct.VP8LColorCache]* %14 to i8*
  %164 = bitcast [11 x %struct.VP8LHistogram*]* %15 to i8*
  %165 = getelementptr inbounds [11 x %struct.VP8LHistogram*], [11 x %struct.VP8LHistogram*]* %15, i64 0, i64 0
  %166 = bitcast %struct.VP8LColorCache* %12 to i8*
  %167 = getelementptr inbounds %struct.VP8LColorCache, %struct.VP8LColorCache* %12, i64 0, i32 0
  %168 = getelementptr inbounds %struct.VP8LColorCache, %struct.VP8LColorCache* %12, i64 0, i32 1
  %169 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 0, i32 3
  %170 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 0, i32 2
  %171 = bitcast %struct.VP8LBackwardRefs* %124 to i8*
  %172 = bitcast %struct.VP8LBackwardRefs* %9 to i8*
  %173 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 0, i32 0
  %174 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 0, i32 1
  %175 = bitcast %struct.PixOrCopyBlock** %170 to i64*
  %176 = bitcast %struct.PixOrCopyBlock*** %169 to i64*
  %177 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 0, i32 4
  %178 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 1
  %179 = bitcast %struct.PixOrCopyBlock** %150 to <2 x i64>*
  %180 = bitcast %struct.PixOrCopyBlock** %177 to <2 x i64>*
  br label %195

181:                                              ; preds = %1105, %129
  %182 = phi i32 [ %132, %129 ], [ %144, %1105 ]
  %183 = phi i32 [ %131, %129 ], [ %143, %1105 ]
  %184 = phi i8* [ %130, %129 ], [ %171, %1105 ]
  %185 = icmp sgt i32 %3, 24
  %186 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %123, i32 3
  %187 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %123, i32 2
  %188 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %124, i64 0, i32 0
  %189 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %123, i32 1
  %190 = bitcast %struct.PixOrCopyBlock** %187 to i64*
  %191 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %123, i32 4
  %192 = bitcast i64* %18 to i32*
  %193 = getelementptr inbounds [2 x i32], [2 x i32]* %118, i64 0, i64 1
  %194 = bitcast %struct.PixOrCopyBlock** %191 to <2 x i64>*
  br label %1110

195:                                              ; preds = %1105, %133
  %196 = phi i32 [ 1, %133 ], [ %1108, %1105 ]
  %197 = phi i32 [ %5, %133 ], [ %1107, %1105 ]
  %198 = and i32 %197, %196
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %1105, label %200

200:                                              ; preds = %195
  switch i32 %196, label %1256 [
    i32 2, label %201
    i32 1, label %431
    i32 4, label %433
  ]

201:                                              ; preds = %200
  %202 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %149, align 8
  %203 = icmp eq %struct.PixOrCopyBlock** %202, null
  br i1 %203, label %207, label %204

204:                                              ; preds = %201
  %205 = load i64, i64* %151, align 8
  %206 = bitcast %struct.PixOrCopyBlock** %202 to i64*
  store i64 %205, i64* %206, align 8
  br label %207

207:                                              ; preds = %204, %201
  %208 = load i64, i64* %153, align 8
  store i64 %208, i64* %151, align 8
  store %struct.PixOrCopyBlock** %152, %struct.PixOrCopyBlock*** %149, align 8
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %154, align 8
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %152, align 8
  %209 = load i32, i32* %2, align 4
  %210 = zext i32 %209 to i64
  %211 = shl nuw i64 %210, 32
  %212 = or i64 %211, 109056
  %213 = icmp eq i64 %208, 0
  br i1 %213, label %214, label %230

214:                                              ; preds = %207
  %215 = load i32, i32* %155, align 8
  %216 = sext i32 %215 to i64
  %217 = shl nsw i64 %216, 3
  %218 = add nsw i64 %217, 24
  %219 = call i8* @WebPSafeMalloc(i64 1, i64 %218) #6
  %220 = icmp eq i8* %219, null
  br i1 %220, label %221, label %224

221:                                              ; preds = %214
  %222 = load i32, i32* %156, align 4
  %223 = or i32 %222, 1
  store i32 %223, i32* %156, align 4
  br label %244

224:                                              ; preds = %214
  %225 = bitcast i8* %219 to %struct.PixOrCopyBlock*
  %226 = getelementptr inbounds i8, i8* %219, i64 24
  %227 = getelementptr inbounds i8, i8* %219, i64 8
  %228 = bitcast i8* %227 to i8**
  store i8* %226, i8** %228, align 8
  %229 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %149, align 8
  br label %234

230:                                              ; preds = %207
  %231 = inttoptr i64 %208 to %struct.PixOrCopyBlock*
  %232 = inttoptr i64 %208 to i64*
  %233 = load i64, i64* %232, align 8
  store i64 %233, i64* %151, align 8
  br label %234

234:                                              ; preds = %230, %224
  %235 = phi %struct.PixOrCopyBlock** [ %229, %224 ], [ %152, %230 ]
  %236 = phi %struct.PixOrCopyBlock* [ %225, %224 ], [ %231, %230 ]
  store %struct.PixOrCopyBlock* %236, %struct.PixOrCopyBlock** %235, align 8
  %237 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %236, i64 0, i32 0
  store %struct.PixOrCopyBlock** %237, %struct.PixOrCopyBlock*** %149, align 8
  store %struct.PixOrCopyBlock* %236, %struct.PixOrCopyBlock** %154, align 8
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %237, align 8
  %238 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %236, i64 0, i32 2
  store i32 0, i32* %238, align 8
  %239 = icmp eq %struct.PixOrCopyBlock* %236, null
  br i1 %239, label %244, label %240

240:                                              ; preds = %234
  %241 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %236, i64 0, i32 1
  %242 = bitcast %struct.PixOrCopy** %241 to i64**
  %243 = load i64*, i64** %242, align 8
  store i32 1, i32* %238, align 8
  store i64 %212, i64* %243, align 4
  br label %244

244:                                              ; preds = %240, %234, %221
  br i1 %146, label %245, label %427

245:                                              ; preds = %244, %423
  %246 = phi i32 [ %425, %423 ], [ 1, %244 ]
  %247 = sub nsw i32 %134, %246
  %248 = icmp slt i32 %247, 4095
  %249 = select i1 %248, i32 %247, i32 4095
  %250 = sext i32 %246 to i64
  %251 = getelementptr inbounds i32, i32* %2, i64 %250
  %252 = getelementptr inbounds i32, i32* %251, i64 -1
  %253 = load i32, i32* %251, align 4
  %254 = load i32, i32* %252, align 4
  %255 = icmp eq i32 %253, %254
  br i1 %255, label %256, label %259

256:                                              ; preds = %245
  %257 = load i32 (i32*, i32*, i32)*, i32 (i32*, i32*, i32)** @VP8LVectorMismatch, align 8
  %258 = call i32 %257(i32* %251, i32* %252, i32 %249) #6
  br label %259

259:                                              ; preds = %256, %245
  %260 = phi i32 [ %258, %256 ], [ 0, %245 ]
  %261 = icmp slt i32 %246, %0
  br i1 %261, label %270, label %262

262:                                              ; preds = %259
  %263 = getelementptr inbounds i32, i32* %251, i64 %158
  %264 = load i32, i32* %251, align 4
  %265 = load i32, i32* %263, align 4
  %266 = icmp eq i32 %264, %265
  br i1 %266, label %267, label %270

267:                                              ; preds = %262
  %268 = load i32 (i32*, i32*, i32)*, i32 (i32*, i32*, i32)** @VP8LVectorMismatch, align 8
  %269 = call i32 %268(i32* %251, i32* %263, i32 %249) #6
  br label %270

270:                                              ; preds = %267, %262, %259
  %271 = phi i32 [ 0, %259 ], [ %269, %267 ], [ 0, %262 ]
  %272 = icmp sge i32 %260, %271
  %273 = icmp sgt i32 %260, 3
  %274 = and i1 %273, %272
  br i1 %274, label %275, label %323

275:                                              ; preds = %270
  %276 = shl i32 %260, 16
  %277 = zext i32 %276 to i64
  %278 = or i64 %277, 4295010818
  %279 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %154, align 8
  %280 = icmp eq %struct.PixOrCopyBlock* %279, null
  br i1 %280, label %286, label %281

281:                                              ; preds = %275
  %282 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %279, i64 0, i32 2
  %283 = load i32, i32* %282, align 8
  %284 = load i32, i32* %155, align 8
  %285 = icmp eq i32 %283, %284
  br i1 %285, label %286, label %313

286:                                              ; preds = %281, %275
  %287 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %150, align 8
  %288 = icmp eq %struct.PixOrCopyBlock* %287, null
  br i1 %288, label %289, label %304

289:                                              ; preds = %286
  %290 = load i32, i32* %155, align 8
  %291 = sext i32 %290 to i64
  %292 = shl nsw i64 %291, 3
  %293 = add nsw i64 %292, 24
  %294 = call i8* @WebPSafeMalloc(i64 1, i64 %293) #6
  %295 = icmp eq i8* %294, null
  br i1 %295, label %296, label %299

296:                                              ; preds = %289
  %297 = load i32, i32* %156, align 4
  %298 = or i32 %297, 1
  store i32 %298, i32* %156, align 4
  br label %423

299:                                              ; preds = %289
  %300 = bitcast i8* %294 to %struct.PixOrCopyBlock*
  %301 = getelementptr inbounds i8, i8* %294, i64 24
  %302 = getelementptr inbounds i8, i8* %294, i64 8
  %303 = bitcast i8* %302 to i8**
  store i8* %301, i8** %303, align 8
  br label %307

304:                                              ; preds = %286
  %305 = bitcast %struct.PixOrCopyBlock* %287 to i64*
  %306 = load i64, i64* %305, align 8
  store i64 %306, i64* %151, align 8
  br label %307

307:                                              ; preds = %304, %299
  %308 = phi %struct.PixOrCopyBlock* [ %300, %299 ], [ %287, %304 ]
  %309 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %149, align 8
  store %struct.PixOrCopyBlock* %308, %struct.PixOrCopyBlock** %309, align 8
  %310 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %308, i64 0, i32 0
  store %struct.PixOrCopyBlock** %310, %struct.PixOrCopyBlock*** %149, align 8
  store %struct.PixOrCopyBlock* %308, %struct.PixOrCopyBlock** %154, align 8
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %310, align 8
  %311 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %308, i64 0, i32 2
  store i32 0, i32* %311, align 8
  %312 = icmp eq %struct.PixOrCopyBlock* %308, null
  br i1 %312, label %423, label %313

313:                                              ; preds = %307, %281
  %314 = phi i32 [ 0, %307 ], [ %283, %281 ]
  %315 = phi %struct.PixOrCopyBlock* [ %308, %307 ], [ %279, %281 ]
  %316 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %315, i64 0, i32 1
  %317 = load %struct.PixOrCopy*, %struct.PixOrCopy** %316, align 8
  %318 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %315, i64 0, i32 2
  %319 = add nsw i32 %314, 1
  store i32 %319, i32* %318, align 8
  %320 = sext i32 %314 to i64
  %321 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %317, i64 %320
  %322 = bitcast %struct.PixOrCopy* %321 to i64*
  store i64 %278, i64* %322, align 4
  br label %423

323:                                              ; preds = %270
  %324 = icmp sgt i32 %271, 3
  br i1 %324, label %325, label %374

325:                                              ; preds = %323
  %326 = shl i32 %271, 16
  %327 = zext i32 %326 to i64
  %328 = or i64 %160, %327
  %329 = or i64 %328, 43522
  %330 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %154, align 8
  %331 = icmp eq %struct.PixOrCopyBlock* %330, null
  br i1 %331, label %337, label %332

332:                                              ; preds = %325
  %333 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %330, i64 0, i32 2
  %334 = load i32, i32* %333, align 8
  %335 = load i32, i32* %155, align 8
  %336 = icmp eq i32 %334, %335
  br i1 %336, label %337, label %364

337:                                              ; preds = %332, %325
  %338 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %150, align 8
  %339 = icmp eq %struct.PixOrCopyBlock* %338, null
  br i1 %339, label %340, label %355

340:                                              ; preds = %337
  %341 = load i32, i32* %155, align 8
  %342 = sext i32 %341 to i64
  %343 = shl nsw i64 %342, 3
  %344 = add nsw i64 %343, 24
  %345 = call i8* @WebPSafeMalloc(i64 1, i64 %344) #6
  %346 = icmp eq i8* %345, null
  br i1 %346, label %347, label %350

347:                                              ; preds = %340
  %348 = load i32, i32* %156, align 4
  %349 = or i32 %348, 1
  store i32 %349, i32* %156, align 4
  br label %423

350:                                              ; preds = %340
  %351 = bitcast i8* %345 to %struct.PixOrCopyBlock*
  %352 = getelementptr inbounds i8, i8* %345, i64 24
  %353 = getelementptr inbounds i8, i8* %345, i64 8
  %354 = bitcast i8* %353 to i8**
  store i8* %352, i8** %354, align 8
  br label %358

355:                                              ; preds = %337
  %356 = bitcast %struct.PixOrCopyBlock* %338 to i64*
  %357 = load i64, i64* %356, align 8
  store i64 %357, i64* %151, align 8
  br label %358

358:                                              ; preds = %355, %350
  %359 = phi %struct.PixOrCopyBlock* [ %351, %350 ], [ %338, %355 ]
  %360 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %149, align 8
  store %struct.PixOrCopyBlock* %359, %struct.PixOrCopyBlock** %360, align 8
  %361 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %359, i64 0, i32 0
  store %struct.PixOrCopyBlock** %361, %struct.PixOrCopyBlock*** %149, align 8
  store %struct.PixOrCopyBlock* %359, %struct.PixOrCopyBlock** %154, align 8
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %361, align 8
  %362 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %359, i64 0, i32 2
  store i32 0, i32* %362, align 8
  %363 = icmp eq %struct.PixOrCopyBlock* %359, null
  br i1 %363, label %423, label %364

364:                                              ; preds = %358, %332
  %365 = phi i32 [ 0, %358 ], [ %334, %332 ]
  %366 = phi %struct.PixOrCopyBlock* [ %359, %358 ], [ %330, %332 ]
  %367 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %366, i64 0, i32 1
  %368 = load %struct.PixOrCopy*, %struct.PixOrCopy** %367, align 8
  %369 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %366, i64 0, i32 2
  %370 = add nsw i32 %365, 1
  store i32 %370, i32* %369, align 8
  %371 = sext i32 %365 to i64
  %372 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %368, i64 %371
  %373 = bitcast %struct.PixOrCopy* %372 to i64*
  store i64 %329, i64* %373, align 4
  br label %423

374:                                              ; preds = %323
  %375 = load i32, i32* %251, align 4
  %376 = zext i32 %375 to i64
  %377 = shl nuw i64 %376, 32
  %378 = or i64 %377, 109056
  %379 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %154, align 8
  %380 = icmp eq %struct.PixOrCopyBlock* %379, null
  br i1 %380, label %386, label %381

381:                                              ; preds = %374
  %382 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %379, i64 0, i32 2
  %383 = load i32, i32* %382, align 8
  %384 = load i32, i32* %155, align 8
  %385 = icmp eq i32 %383, %384
  br i1 %385, label %386, label %413

386:                                              ; preds = %381, %374
  %387 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %150, align 8
  %388 = icmp eq %struct.PixOrCopyBlock* %387, null
  br i1 %388, label %389, label %404

389:                                              ; preds = %386
  %390 = load i32, i32* %155, align 8
  %391 = sext i32 %390 to i64
  %392 = shl nsw i64 %391, 3
  %393 = add nsw i64 %392, 24
  %394 = call i8* @WebPSafeMalloc(i64 1, i64 %393) #6
  %395 = icmp eq i8* %394, null
  br i1 %395, label %396, label %399

396:                                              ; preds = %389
  %397 = load i32, i32* %156, align 4
  %398 = or i32 %397, 1
  store i32 %398, i32* %156, align 4
  br label %423

399:                                              ; preds = %389
  %400 = bitcast i8* %394 to %struct.PixOrCopyBlock*
  %401 = getelementptr inbounds i8, i8* %394, i64 24
  %402 = getelementptr inbounds i8, i8* %394, i64 8
  %403 = bitcast i8* %402 to i8**
  store i8* %401, i8** %403, align 8
  br label %407

404:                                              ; preds = %386
  %405 = bitcast %struct.PixOrCopyBlock* %387 to i64*
  %406 = load i64, i64* %405, align 8
  store i64 %406, i64* %151, align 8
  br label %407

407:                                              ; preds = %404, %399
  %408 = phi %struct.PixOrCopyBlock* [ %400, %399 ], [ %387, %404 ]
  %409 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %149, align 8
  store %struct.PixOrCopyBlock* %408, %struct.PixOrCopyBlock** %409, align 8
  %410 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %408, i64 0, i32 0
  store %struct.PixOrCopyBlock** %410, %struct.PixOrCopyBlock*** %149, align 8
  store %struct.PixOrCopyBlock* %408, %struct.PixOrCopyBlock** %154, align 8
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %410, align 8
  %411 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %408, i64 0, i32 2
  store i32 0, i32* %411, align 8
  %412 = icmp eq %struct.PixOrCopyBlock* %408, null
  br i1 %412, label %423, label %413

413:                                              ; preds = %407, %381
  %414 = phi i32 [ 0, %407 ], [ %383, %381 ]
  %415 = phi %struct.PixOrCopyBlock* [ %408, %407 ], [ %379, %381 ]
  %416 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %415, i64 0, i32 1
  %417 = load %struct.PixOrCopy*, %struct.PixOrCopy** %416, align 8
  %418 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %415, i64 0, i32 2
  %419 = add nsw i32 %414, 1
  store i32 %419, i32* %418, align 8
  %420 = sext i32 %414 to i64
  %421 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %417, i64 %420
  %422 = bitcast %struct.PixOrCopy* %421 to i64*
  store i64 %378, i64* %422, align 4
  br label %423

423:                                              ; preds = %413, %407, %396, %364, %358, %347, %313, %307, %296
  %424 = phi i32 [ %260, %296 ], [ %260, %307 ], [ %260, %313 ], [ %271, %347 ], [ %271, %358 ], [ %271, %364 ], [ 1, %396 ], [ 1, %407 ], [ 1, %413 ]
  %425 = add nsw i32 %424, %246
  %426 = icmp sgt i32 %134, %425
  br i1 %426, label %245, label %427

427:                                              ; preds = %423, %244
  %428 = load i32, i32* %156, align 4
  %429 = icmp eq i32 %428, 0
  %430 = zext i1 %429 to i32
  br label %675

431:                                              ; preds = %200
  %432 = call fastcc i32 @BackwardReferencesLz77(i32 %0, i32 %1, i32* %2, %struct.VP8LHashChain* %8, %struct.VP8LBackwardRefs* %124) #6
  br label %675

433:                                              ; preds = %200
  %434 = call i8* @WebPSafeMalloc(i64 %135, i64 4) #6
  store i8* %434, i8** %136, align 8
  %435 = icmp eq i8* %434, null
  br i1 %435, label %1256, label %436

436:                                              ; preds = %433
  store i32 %134, i32* %137, align 8
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %138) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %138, i8 0, i64 128, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %139) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %139, i8 0, i64 128, i1 false) #6
  %437 = call i8* @WebPSafeMalloc(i64 %135, i64 2) #6
  %438 = bitcast i8* %437 to i16*
  %439 = icmp eq i8* %437, null
  br i1 %439, label %673, label %440

440:                                              ; preds = %436
  %441 = getelementptr inbounds i16, i16* %438, i64 %141
  %442 = getelementptr inbounds i16, i16* %441, i64 1
  store i16 1, i16* %442, align 2
  br i1 %142, label %443, label %463

443:                                              ; preds = %440, %458
  %444 = phi i64 [ %460, %458 ], [ %141, %440 ]
  %445 = phi i16* [ %461, %458 ], [ %441, %440 ]
  %446 = getelementptr inbounds i32, i32* %2, i64 %444
  %447 = load i32, i32* %446, align 4
  %448 = add nuw nsw i64 %444, 1
  %449 = getelementptr inbounds i32, i32* %2, i64 %448
  %450 = load i32, i32* %449, align 4
  %451 = icmp eq i32 %447, %450
  br i1 %451, label %452, label %458

452:                                              ; preds = %443
  %453 = getelementptr inbounds i16, i16* %445, i64 1
  %454 = load i16, i16* %453, align 2
  %455 = icmp ne i16 %454, 4095
  %456 = zext i1 %455 to i16
  %457 = add i16 %454, %456
  br label %458

458:                                              ; preds = %452, %443
  %459 = phi i16 [ %457, %452 ], [ 1, %443 ]
  store i16 %459, i16* %445, align 2
  %460 = add nsw i64 %444, -1
  %461 = getelementptr inbounds i16, i16* %445, i64 -1
  %462 = icmp sgt i64 %444, 0
  br i1 %462, label %443, label %463

463:                                              ; preds = %458, %440
  br label %464

464:                                              ; preds = %463, %512
  %465 = phi i32 [ %513, %512 ], [ 0, %463 ]
  %466 = mul nsw i32 %465, %0
  br label %467

467:                                              ; preds = %509, %464
  %468 = phi i32 [ -6, %464 ], [ %510, %509 ]
  %469 = add nsw i32 %468, %466
  %470 = icmp slt i32 %469, 1
  br i1 %470, label %509, label %471

471:                                              ; preds = %467
  %472 = sdiv i32 %469, %0
  %473 = mul nsw i32 %472, %0
  %474 = sub nsw i32 %469, %473
  %475 = icmp slt i32 %474, 9
  %476 = icmp slt i32 %472, 8
  %477 = and i1 %476, %475
  br i1 %477, label %478, label %487

478:                                              ; preds = %471
  %479 = shl nsw i32 %472, 4
  %480 = or i32 %479, 8
  %481 = sub nsw i32 %480, %474
  %482 = sext i32 %481 to i64
  %483 = getelementptr inbounds [128 x i8], [128 x i8]* @plane_to_code_lut, i64 0, i64 %482
  %484 = load i8, i8* %483, align 1
  %485 = zext i8 %484 to i32
  %486 = add nuw nsw i32 %485, 1
  br label %502

487:                                              ; preds = %471
  %488 = icmp sgt i32 %474, %143
  %489 = icmp slt i32 %472, 7
  %490 = and i1 %489, %488
  br i1 %490, label %491, label %500

491:                                              ; preds = %487
  %492 = shl i32 %472, 4
  %493 = add i32 %492, %144
  %494 = sub i32 %493, %474
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds [128 x i8], [128 x i8]* @plane_to_code_lut, i64 0, i64 %495
  %497 = load i8, i8* %496, align 1
  %498 = zext i8 %497 to i32
  %499 = add nuw nsw i32 %498, 1
  br label %502

500:                                              ; preds = %487
  %501 = add nuw nsw i32 %469, 120
  br label %502

502:                                              ; preds = %500, %491, %478
  %503 = phi i32 [ %486, %478 ], [ %499, %491 ], [ %501, %500 ]
  %504 = add nsw i32 %503, -1
  %505 = icmp sgt i32 %504, 31
  br i1 %505, label %509, label %506

506:                                              ; preds = %502
  %507 = sext i32 %504 to i64
  %508 = getelementptr inbounds [32 x i32], [32 x i32]* %16, i64 0, i64 %507
  store i32 %469, i32* %508, align 4
  br label %509

509:                                              ; preds = %506, %502, %467
  %510 = add nsw i32 %468, 1
  %511 = icmp eq i32 %510, 7
  br i1 %511, label %512, label %467

512:                                              ; preds = %509
  %513 = add nuw nsw i32 %465, 1
  %514 = icmp eq i32 %513, 7
  br i1 %514, label %520, label %464

515:                                              ; preds = %1269
  %516 = icmp sgt i32 %1270, 0
  br i1 %516, label %517, label %559

517:                                              ; preds = %515
  %518 = sext i32 %1270 to i64
  %519 = zext i32 %1270 to i64
  br label %536

520:                                              ; preds = %512, %1269
  %521 = phi i64 [ %1271, %1269 ], [ 0, %512 ]
  %522 = phi i32 [ %1270, %1269 ], [ 0, %512 ]
  %523 = getelementptr inbounds [32 x i32], [32 x i32]* %16, i64 0, i64 %521
  %524 = load i32, i32* %523, align 8
  %525 = icmp eq i32 %524, 0
  br i1 %525, label %530, label %526

526:                                              ; preds = %520
  %527 = add nsw i32 %522, 1
  %528 = sext i32 %522 to i64
  %529 = getelementptr inbounds [32 x i32], [32 x i32]* %16, i64 0, i64 %528
  store i32 %524, i32* %529, align 4
  br label %530

530:                                              ; preds = %526, %520
  %531 = phi i32 [ %522, %520 ], [ %527, %526 ]
  %532 = or i64 %521, 1
  %533 = getelementptr inbounds [32 x i32], [32 x i32]* %16, i64 0, i64 %532
  %534 = load i32, i32* %533, align 4
  %535 = icmp eq i32 %534, 0
  br i1 %535, label %1269, label %1265

536:                                              ; preds = %555, %517
  %537 = phi i64 [ 0, %517 ], [ %557, %555 ]
  %538 = phi i32 [ 0, %517 ], [ %556, %555 ]
  %539 = getelementptr inbounds [32 x i32], [32 x i32]* %16, i64 0, i64 %537
  %540 = load i32, i32* %539, align 4
  br label %541

541:                                              ; preds = %541, %536
  %542 = phi i64 [ 0, %536 ], [ %547, %541 ]
  %543 = getelementptr inbounds [32 x i32], [32 x i32]* %16, i64 0, i64 %542
  %544 = load i32, i32* %543, align 4
  %545 = add nsw i32 %544, 1
  %546 = icmp ne i32 %540, %545
  %547 = add nuw nsw i64 %542, 1
  %548 = icmp slt i64 %547, %518
  %549 = and i1 %548, %546
  br i1 %549, label %541, label %550

550:                                              ; preds = %541
  br i1 %546, label %551, label %555

551:                                              ; preds = %550
  %552 = sext i32 %538 to i64
  %553 = getelementptr inbounds [32 x i32], [32 x i32]* %17, i64 0, i64 %552
  store i32 %540, i32* %553, align 4
  %554 = add nsw i32 %538, 1
  br label %555

555:                                              ; preds = %551, %550
  %556 = phi i32 [ %538, %550 ], [ %554, %551 ]
  %557 = add nuw nsw i64 %537, 1
  %558 = icmp eq i64 %557, %519
  br i1 %558, label %559, label %536

559:                                              ; preds = %555, %515
  %560 = phi i32 [ 0, %515 ], [ %556, %555 ]
  %561 = load i32*, i32** %145, align 8
  store i32 0, i32* %561, align 4
  br i1 %146, label %562, label %670

562:                                              ; preds = %559
  %563 = zext i32 %1270 to i64
  br label %564

564:                                              ; preds = %662, %562
  %565 = phi i64 [ 1, %562 ], [ %668, %662 ]
  %566 = phi i32 [ -1, %562 ], [ %665, %662 ]
  %567 = phi i32 [ -1, %562 ], [ %664, %662 ]
  %568 = load i32*, i32** %147, align 8
  %569 = getelementptr inbounds i32, i32* %568, i64 %565
  %570 = load i32, i32* %569, align 4
  %571 = and i32 %570, 4095
  %572 = icmp eq i32 %571, 4095
  br i1 %572, label %573, label %583

573:                                              ; preds = %564
  %574 = lshr i32 %570, 12
  br i1 %516, label %577, label %583

575:                                              ; preds = %577
  %576 = icmp eq i64 %582, %563
  br i1 %576, label %583, label %577

577:                                              ; preds = %573, %575
  %578 = phi i64 [ %582, %575 ], [ 0, %573 ]
  %579 = getelementptr inbounds [32 x i32], [32 x i32]* %16, i64 0, i64 %578
  %580 = load i32, i32* %579, align 4
  %581 = icmp eq i32 %574, %580
  %582 = add nuw nsw i64 %578, 1
  br i1 %581, label %657, label %575

583:                                              ; preds = %575, %573, %564
  %584 = add i32 %566, -2
  %585 = icmp ult i32 %584, 4093
  %586 = select i1 %585, i32 %560, i32 %1270
  %587 = add nsw i32 %566, -1
  %588 = select i1 %585, i32 %587, i32 0
  %589 = select i1 %585, i32 %567, i32 0
  %590 = icmp sgt i32 %586, 0
  br i1 %590, label %591, label %653

591:                                              ; preds = %583
  %592 = select i1 %585, [32 x i32]* %17, [32 x i32]* %16
  %593 = getelementptr inbounds i32, i32* %2, i64 %565
  %594 = zext i32 %586 to i64
  %595 = trunc i64 %565 to i32
  br label %596

596:                                              ; preds = %648, %591
  %597 = phi i64 [ 0, %591 ], [ %651, %648 ]
  %598 = phi i32 [ %589, %591 ], [ %650, %648 ]
  %599 = phi i32 [ %588, %591 ], [ %649, %648 ]
  %600 = getelementptr inbounds [32 x i32], [32 x i32]* %592, i64 0, i64 %597
  %601 = load i32, i32* %600, align 4
  %602 = sub nsw i32 %595, %601
  %603 = icmp slt i32 %602, 0
  br i1 %603, label %648, label %604

604:                                              ; preds = %596
  %605 = sext i32 %602 to i64
  %606 = getelementptr inbounds i32, i32* %2, i64 %605
  %607 = load i32, i32* %606, align 4
  %608 = load i32, i32* %593, align 4
  %609 = icmp eq i32 %607, %608
  br i1 %609, label %610, label %648

610:                                              ; preds = %604, %635
  %611 = phi i32 [ %631, %635 ], [ 0, %604 ]
  %612 = phi i32 [ %630, %635 ], [ %595, %604 ]
  %613 = phi i32 [ %629, %635 ], [ %602, %604 ]
  %614 = sext i32 %613 to i64
  %615 = getelementptr inbounds i16, i16* %438, i64 %614
  %616 = load i16, i16* %615, align 2
  %617 = zext i16 %616 to i32
  %618 = zext i32 %612 to i64
  %619 = getelementptr inbounds i16, i16* %438, i64 %618
  %620 = load i16, i16* %619, align 2
  %621 = icmp eq i16 %616, %620
  br i1 %621, label %628, label %622

622:                                              ; preds = %610
  %623 = zext i16 %616 to i32
  %624 = zext i16 %620 to i32
  %625 = icmp ult i32 %623, %624
  %626 = select i1 %625, i32 %623, i32 %624
  %627 = add nuw nsw i32 %626, %611
  br label %643

628:                                              ; preds = %610
  %629 = add nsw i32 %613, %617
  %630 = add nuw nsw i32 %612, %617
  %631 = add nuw nsw i32 %611, %617
  %632 = icmp ult i32 %631, 4096
  %633 = icmp slt i32 %630, %134
  %634 = and i1 %632, %633
  br i1 %634, label %635, label %643

635:                                              ; preds = %628
  %636 = sext i32 %629 to i64
  %637 = getelementptr inbounds i32, i32* %2, i64 %636
  %638 = load i32, i32* %637, align 4
  %639 = zext i32 %630 to i64
  %640 = getelementptr inbounds i32, i32* %2, i64 %639
  %641 = load i32, i32* %640, align 4
  %642 = icmp eq i32 %638, %641
  br i1 %642, label %610, label %643

643:                                              ; preds = %635, %628, %622
  %644 = phi i32 [ %627, %622 ], [ %631, %628 ], [ %631, %635 ]
  %645 = icmp slt i32 %599, %644
  br i1 %645, label %646, label %648

646:                                              ; preds = %643
  %647 = icmp sgt i32 %644, 4094
  br i1 %647, label %657, label %648

648:                                              ; preds = %646, %643, %604, %596
  %649 = phi i32 [ %599, %596 ], [ %599, %604 ], [ %599, %643 ], [ %644, %646 ]
  %650 = phi i32 [ %598, %596 ], [ %598, %604 ], [ %598, %643 ], [ %601, %646 ]
  %651 = add nuw nsw i64 %597, 1
  %652 = icmp eq i64 %651, %594
  br i1 %652, label %653, label %596

653:                                              ; preds = %648, %583
  %654 = phi i32 [ %588, %583 ], [ %649, %648 ]
  %655 = phi i32 [ %589, %583 ], [ %650, %648 ]
  %656 = icmp slt i32 %654, 5
  br i1 %656, label %662, label %657

657:                                              ; preds = %577, %646, %653
  %658 = phi i32 [ %655, %653 ], [ %601, %646 ], [ %574, %577 ]
  %659 = phi i32 [ %654, %653 ], [ 4095, %646 ], [ 4095, %577 ]
  %660 = shl i32 %658, 12
  %661 = or i32 %660, %659
  br label %662

662:                                              ; preds = %653, %657
  %663 = phi i32 [ %661, %657 ], [ 0, %653 ]
  %664 = phi i32 [ %658, %657 ], [ 0, %653 ]
  %665 = phi i32 [ %659, %657 ], [ 0, %653 ]
  %666 = load i32*, i32** %145, align 8
  %667 = getelementptr inbounds i32, i32* %666, i64 %565
  store i32 %663, i32* %667, align 4
  %668 = add nuw nsw i64 %565, 1
  %669 = icmp eq i64 %668, %148
  br i1 %669, label %670, label %564

670:                                              ; preds = %662, %559
  %671 = load i32*, i32** %145, align 8
  store i32 0, i32* %671, align 4
  call void @WebPSafeFree(i8* nonnull %437) #6
  %672 = call fastcc i32 @BackwardReferencesLz77(i32 %0, i32 %1, i32* %2, %struct.VP8LHashChain* nonnull %20, %struct.VP8LBackwardRefs* %124) #6
  br label %673

673:                                              ; preds = %670, %436
  %674 = phi i32 [ %672, %670 ], [ 0, %436 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %139) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %138) #6
  br label %675

675:                                              ; preds = %673, %431, %427
  %676 = phi i32 [ %674, %673 ], [ %432, %431 ], [ %430, %427 ]
  %677 = icmp eq i32 %676, 0
  br i1 %677, label %1256, label %678

678:                                              ; preds = %675, %1101
  %679 = phi i64 [ %1103, %1101 ], [ 1, %675 ]
  %680 = phi double [ %1102, %1101 ], [ 0.000000e+00, %675 ]
  %681 = icmp eq i64 %679, 1
  %682 = select i1 %681, i32 0, i32 %6
  %683 = icmp ne i64 %679, 1
  %684 = or i1 %122, %683
  br i1 %684, label %685, label %1101

685:                                              ; preds = %678
  %686 = icmp eq i64 %679, 0
  br i1 %686, label %687, label %1064

687:                                              ; preds = %685
  %688 = select i1 %161, i32 0, i32 %682
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %162) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %162, i8 0, i64 44, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 176, i8* nonnull %163) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %163, i8 -86, i64 176, i1 false) #6
  %689 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %152, align 8, !noalias !5
  %690 = icmp eq %struct.PixOrCopyBlock* %689, null
  br i1 %690, label %699, label %691

691:                                              ; preds = %687
  %692 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %689, i64 0, i32 1
  %693 = load %struct.PixOrCopy*, %struct.PixOrCopy** %692, align 8, !noalias !5
  %694 = ptrtoint %struct.PixOrCopy* %693 to i64
  %695 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %689, i64 0, i32 2
  %696 = load i32, i32* %695, align 8, !noalias !5
  %697 = sext i32 %696 to i64
  %698 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %693, i64 %697
  br label %699

699:                                              ; preds = %691, %687
  %700 = phi i64 [ %694, %691 ], [ 0, %687 ]
  %701 = phi %struct.PixOrCopy* [ %698, %691 ], [ null, %687 ]
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %164) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %164, i8 0, i64 88, i1 false) #6
  %702 = icmp eq i32 %688, 0
  br i1 %702, label %961, label %703

703:                                              ; preds = %699
  %704 = icmp slt i32 %688, 0
  br i1 %704, label %708, label %705

705:                                              ; preds = %703
  %706 = add nuw i32 %688, 1
  %707 = zext i32 %706 to i64
  br label %721

708:                                              ; preds = %734, %703
  %709 = icmp eq i64 %700, 0
  br i1 %709, label %737, label %710

710:                                              ; preds = %708
  %711 = sub nsw i32 32, %688
  %712 = icmp sgt i32 %688, 0
  %713 = add i32 %688, 1
  %714 = sext i32 %688 to i64
  %715 = zext i32 %713 to i64
  %716 = xor i1 %712, true
  %717 = and i64 %715, 1
  %718 = icmp eq i32 %688, 0
  %719 = sub nsw i64 %715, %717
  %720 = icmp eq i64 %717, 0
  br label %741

721:                                              ; preds = %734, %705
  %722 = phi i64 [ 0, %705 ], [ %735, %734 ]
  %723 = trunc i64 %722 to i32
  %724 = call %struct.VP8LHistogram* @VP8LAllocateHistogram(i32 %723) #6
  %725 = getelementptr inbounds [11 x %struct.VP8LHistogram*], [11 x %struct.VP8LHistogram*]* %15, i64 0, i64 %722
  store %struct.VP8LHistogram* %724, %struct.VP8LHistogram** %725, align 8
  %726 = icmp eq %struct.VP8LHistogram* %724, null
  br i1 %726, label %943, label %727

727:                                              ; preds = %721
  call void @VP8LHistogramInit(%struct.VP8LHistogram* nonnull %724, i32 %723, i32 1) #6
  %728 = icmp eq i64 %722, 0
  br i1 %728, label %734, label %729

729:                                              ; preds = %727
  %730 = getelementptr inbounds [11 x %struct.VP8LColorCache], [11 x %struct.VP8LColorCache]* %14, i64 0, i64 %722
  %731 = call i32 @VP8LColorCacheInit(%struct.VP8LColorCache* %730, i32 %723) #6
  %732 = getelementptr inbounds [11 x i32], [11 x i32]* %13, i64 0, i64 %722
  store i32 %731, i32* %732, align 4
  %733 = icmp eq i32 %731, 0
  br i1 %733, label %943, label %734

734:                                              ; preds = %729, %727
  %735 = add nuw nsw i64 %722, 1
  %736 = icmp eq i64 %735, %707
  br i1 %736, label %708, label %721

737:                                              ; preds = %923, %910, %708
  br i1 %704, label %961, label %738

738:                                              ; preds = %737
  %739 = add nuw i32 %688, 1
  %740 = zext i32 %739 to i64
  br label %928

741:                                              ; preds = %923, %710
  %742 = phi i64 [ %700, %710 ], [ %924, %923 ]
  %743 = phi i32* [ %2, %710 ], [ %906, %923 ]
  %744 = phi %struct.PixOrCopy* [ %701, %710 ], [ %926, %923 ]
  %745 = phi %struct.PixOrCopyBlock* [ %689, %710 ], [ %925, %923 ]
  %746 = inttoptr i64 %742 to %struct.PixOrCopy*
  %747 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %746, i64 0, i32 0
  %748 = load i8, i8* %747, align 4
  %749 = icmp eq i8 %748, 0
  br i1 %749, label %750, label %820

750:                                              ; preds = %741
  %751 = getelementptr inbounds i32, i32* %743, i64 1
  %752 = load i32, i32* %743, align 4
  %753 = lshr i32 %752, 24
  %754 = lshr i32 %752, 16
  %755 = and i32 %754, 255
  %756 = lshr i32 %752, 8
  %757 = and i32 %756, 255
  %758 = and i32 %752, 255
  %759 = load %struct.VP8LHistogram*, %struct.VP8LHistogram** %165, align 16
  %760 = zext i32 %758 to i64
  %761 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %759, i64 0, i32 2, i64 %760
  %762 = load i32, i32* %761, align 4
  %763 = add i32 %762, 1
  store i32 %763, i32* %761, align 4
  %764 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %759, i64 0, i32 0
  %765 = load i32*, i32** %764, align 8
  %766 = zext i32 %757 to i64
  %767 = getelementptr inbounds i32, i32* %765, i64 %766
  %768 = load i32, i32* %767, align 4
  %769 = add i32 %768, 1
  store i32 %769, i32* %767, align 4
  %770 = zext i32 %755 to i64
  %771 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %759, i64 0, i32 1, i64 %770
  %772 = load i32, i32* %771, align 4
  %773 = add i32 %772, 1
  store i32 %773, i32* %771, align 4
  %774 = zext i32 %753 to i64
  %775 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %759, i64 0, i32 3, i64 %774
  %776 = load i32, i32* %775, align 4
  %777 = add i32 %776, 1
  store i32 %777, i32* %775, align 4
  br i1 %712, label %778, label %905

778:                                              ; preds = %750
  %779 = mul i32 %752, 506832829
  %780 = lshr i32 %779, %711
  br label %781

781:                                              ; preds = %813, %778
  %782 = phi i64 [ %714, %778 ], [ %817, %813 ]
  %783 = phi i32 [ %780, %778 ], [ %818, %813 ]
  %784 = getelementptr inbounds [11 x %struct.VP8LColorCache], [11 x %struct.VP8LColorCache]* %14, i64 0, i64 %782, i32 0
  %785 = load i32*, i32** %784, align 16
  %786 = zext i32 %783 to i64
  %787 = getelementptr inbounds i32, i32* %785, i64 %786
  %788 = load i32, i32* %787, align 4
  %789 = icmp eq i32 %788, %752
  br i1 %789, label %790, label %798

790:                                              ; preds = %781
  %791 = getelementptr inbounds [11 x %struct.VP8LHistogram*], [11 x %struct.VP8LHistogram*]* %15, i64 0, i64 %782
  %792 = load %struct.VP8LHistogram*, %struct.VP8LHistogram** %791, align 8
  %793 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %792, i64 0, i32 0
  %794 = load i32*, i32** %793, align 8
  %795 = add nsw i32 %783, 280
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds i32, i32* %794, i64 %796
  br label %813

798:                                              ; preds = %781
  store i32 %752, i32* %787, align 4
  %799 = getelementptr inbounds [11 x %struct.VP8LHistogram*], [11 x %struct.VP8LHistogram*]* %15, i64 0, i64 %782
  %800 = load %struct.VP8LHistogram*, %struct.VP8LHistogram** %799, align 8
  %801 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %800, i64 0, i32 2, i64 %760
  %802 = load i32, i32* %801, align 4
  %803 = add i32 %802, 1
  store i32 %803, i32* %801, align 4
  %804 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %800, i64 0, i32 0
  %805 = load i32*, i32** %804, align 8
  %806 = getelementptr inbounds i32, i32* %805, i64 %766
  %807 = load i32, i32* %806, align 4
  %808 = add i32 %807, 1
  store i32 %808, i32* %806, align 4
  %809 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %800, i64 0, i32 1, i64 %770
  %810 = load i32, i32* %809, align 4
  %811 = add i32 %810, 1
  store i32 %811, i32* %809, align 4
  %812 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %800, i64 0, i32 3, i64 %774
  br label %813

813:                                              ; preds = %798, %790
  %814 = phi i32* [ %812, %798 ], [ %797, %790 ]
  %815 = load i32, i32* %814, align 4
  %816 = add i32 %815, 1
  store i32 %816, i32* %814, align 4
  %817 = add nsw i64 %782, -1
  %818 = ashr i32 %783, 1
  %819 = icmp sgt i64 %817, 0
  br i1 %819, label %781, label %905

820:                                              ; preds = %741
  %821 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %746, i64 0, i32 1
  %822 = load i16, i16* %821, align 2
  %823 = zext i16 %822 to i32
  %824 = load i32, i32* %743, align 4
  %825 = xor i32 %824, -1
  %826 = icmp ult i16 %822, 512
  br i1 %826, label %827, label %832

827:                                              ; preds = %820
  %828 = zext i16 %822 to i64
  %829 = getelementptr inbounds [512 x %struct.VP8LPrefixCode], [512 x %struct.VP8LPrefixCode]* @kPrefixEncodeCode, i64 0, i64 %828, i32 0
  %830 = load i8, i8* %829, align 2
  %831 = sext i8 %830 to i32
  br label %841

832:                                              ; preds = %820
  %833 = add nsw i32 %823, -1
  %834 = call i32 @llvm.ctlz.i32(i32 %833, i1 true) #6, !range !8
  %835 = xor i32 %834, 31
  %836 = add nsw i32 %835, -1
  %837 = lshr i32 %833, %836
  %838 = and i32 %837, 1
  %839 = shl nuw nsw i32 %835, 1
  %840 = or i32 %838, %839
  br label %841

841:                                              ; preds = %832, %827
  %842 = phi i32 [ %831, %827 ], [ %840, %832 ]
  br i1 %704, label %877, label %843

843:                                              ; preds = %841
  %844 = add nsw i32 %842, 256
  %845 = sext i32 %844 to i64
  br i1 %718, label %867, label %846

846:                                              ; preds = %843, %846
  %847 = phi i64 [ %864, %846 ], [ 0, %843 ]
  %848 = phi i64 [ %865, %846 ], [ %719, %843 ]
  %849 = getelementptr inbounds [11 x %struct.VP8LHistogram*], [11 x %struct.VP8LHistogram*]* %15, i64 0, i64 %847
  %850 = load %struct.VP8LHistogram*, %struct.VP8LHistogram** %849, align 16
  %851 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %850, i64 0, i32 0
  %852 = load i32*, i32** %851, align 8
  %853 = getelementptr inbounds i32, i32* %852, i64 %845
  %854 = load i32, i32* %853, align 4
  %855 = add i32 %854, 1
  store i32 %855, i32* %853, align 4
  %856 = or i64 %847, 1
  %857 = getelementptr inbounds [11 x %struct.VP8LHistogram*], [11 x %struct.VP8LHistogram*]* %15, i64 0, i64 %856
  %858 = load %struct.VP8LHistogram*, %struct.VP8LHistogram** %857, align 8
  %859 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %858, i64 0, i32 0
  %860 = load i32*, i32** %859, align 8
  %861 = getelementptr inbounds i32, i32* %860, i64 %845
  %862 = load i32, i32* %861, align 4
  %863 = add i32 %862, 1
  store i32 %863, i32* %861, align 4
  %864 = add nuw nsw i64 %847, 2
  %865 = add i64 %848, -2
  %866 = icmp eq i64 %865, 0
  br i1 %866, label %867, label %846

867:                                              ; preds = %846, %843
  %868 = phi i64 [ 0, %843 ], [ %864, %846 ]
  br i1 %720, label %877, label %869

869:                                              ; preds = %867
  %870 = getelementptr inbounds [11 x %struct.VP8LHistogram*], [11 x %struct.VP8LHistogram*]* %15, i64 0, i64 %868
  %871 = load %struct.VP8LHistogram*, %struct.VP8LHistogram** %870, align 8
  %872 = getelementptr inbounds %struct.VP8LHistogram, %struct.VP8LHistogram* %871, i64 0, i32 0
  %873 = load i32*, i32** %872, align 8
  %874 = getelementptr inbounds i32, i32* %873, i64 %845
  %875 = load i32, i32* %874, align 4
  %876 = add i32 %875, 1
  store i32 %876, i32* %874, align 4
  br label %877

877:                                              ; preds = %869, %867, %841
  br label %878

878:                                              ; preds = %877, %900
  %879 = phi i32* [ %902, %900 ], [ %743, %877 ]
  %880 = phi i32 [ %903, %900 ], [ %823, %877 ]
  %881 = phi i32 [ %901, %900 ], [ %825, %877 ]
  %882 = load i32, i32* %879, align 4
  %883 = icmp eq i32 %882, %881
  %884 = or i1 %883, %716
  br i1 %884, label %900, label %885

885:                                              ; preds = %878
  %886 = mul i32 %882, 506832829
  %887 = lshr i32 %886, %711
  br label %888

888:                                              ; preds = %888, %885
  %889 = phi i64 [ %714, %885 ], [ %896, %888 ]
  %890 = phi i32 [ %882, %885 ], [ %899, %888 ]
  %891 = phi i32 [ %887, %885 ], [ %897, %888 ]
  %892 = getelementptr inbounds [11 x %struct.VP8LColorCache], [11 x %struct.VP8LColorCache]* %14, i64 0, i64 %889, i32 0
  %893 = load i32*, i32** %892, align 16
  %894 = sext i32 %891 to i64
  %895 = getelementptr inbounds i32, i32* %893, i64 %894
  store i32 %890, i32* %895, align 4
  %896 = add nsw i64 %889, -1
  %897 = ashr i32 %891, 1
  %898 = icmp sgt i64 %896, 0
  %899 = load i32, i32* %879, align 4
  br i1 %898, label %888, label %900

900:                                              ; preds = %888, %878
  %901 = phi i32 [ %882, %878 ], [ %899, %888 ]
  %902 = getelementptr inbounds i32, i32* %879, i64 1
  %903 = add nsw i32 %880, -1
  %904 = icmp eq i32 %903, 0
  br i1 %904, label %905, label %878

905:                                              ; preds = %900, %813, %750
  %906 = phi i32* [ %751, %750 ], [ %751, %813 ], [ %902, %900 ]
  %907 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %746, i64 1
  %908 = ptrtoint %struct.PixOrCopy* %907 to i64
  %909 = icmp eq %struct.PixOrCopy* %907, %744
  br i1 %909, label %910, label %923

910:                                              ; preds = %905
  %911 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %745, i64 0, i32 0
  %912 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %911, align 8
  %913 = icmp eq %struct.PixOrCopyBlock* %912, null
  br i1 %913, label %737, label %914

914:                                              ; preds = %910
  %915 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %912, i64 0, i32 1
  %916 = bitcast %struct.PixOrCopy** %915 to i64*
  %917 = load i64, i64* %916, align 8
  %918 = inttoptr i64 %917 to %struct.PixOrCopy*
  %919 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %912, i64 0, i32 2
  %920 = load i32, i32* %919, align 8
  %921 = sext i32 %920 to i64
  %922 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %918, i64 %921
  br label %923

923:                                              ; preds = %914, %905
  %924 = phi i64 [ %908, %905 ], [ %917, %914 ]
  %925 = phi %struct.PixOrCopyBlock* [ %745, %905 ], [ %912, %914 ]
  %926 = phi %struct.PixOrCopy* [ %744, %905 ], [ %922, %914 ]
  %927 = icmp eq i64 %924, 0
  br i1 %927, label %737, label %741

928:                                              ; preds = %928, %738
  %929 = phi i32 [ %682, %738 ], [ %939, %928 ]
  %930 = phi i64 [ 0, %738 ], [ %941, %928 ]
  %931 = phi double [ 0x46293E5940000000, %738 ], [ %940, %928 ]
  %932 = getelementptr inbounds [11 x %struct.VP8LHistogram*], [11 x %struct.VP8LHistogram*]* %15, i64 0, i64 %930
  %933 = load %struct.VP8LHistogram*, %struct.VP8LHistogram** %932, align 8
  %934 = call double @VP8LHistogramEstimateBits(%struct.VP8LHistogram* %933) #6
  %935 = icmp eq i64 %930, 0
  %936 = fcmp olt double %934, %931
  %937 = or i1 %935, %936
  %938 = trunc i64 %930 to i32
  %939 = select i1 %937, i32 %938, i32 %929
  %940 = select i1 %937, double %934, double %931
  %941 = add nuw nsw i64 %930, 1
  %942 = icmp eq i64 %941, %740
  br i1 %942, label %943, label %928

943:                                              ; preds = %729, %721, %928
  %944 = phi i32 [ %939, %928 ], [ %682, %721 ], [ %682, %729 ]
  %945 = phi i32 [ 1, %928 ], [ 0, %721 ], [ 0, %729 ]
  br i1 %704, label %961, label %946

946:                                              ; preds = %943
  %947 = add nuw i32 %688, 1
  %948 = zext i32 %947 to i64
  br label %949

949:                                              ; preds = %956, %946
  %950 = phi i64 [ 0, %946 ], [ %959, %956 ]
  %951 = getelementptr inbounds [11 x i32], [11 x i32]* %13, i64 0, i64 %950
  %952 = load i32, i32* %951, align 4
  %953 = icmp eq i32 %952, 0
  br i1 %953, label %956, label %954

954:                                              ; preds = %949
  %955 = getelementptr inbounds [11 x %struct.VP8LColorCache], [11 x %struct.VP8LColorCache]* %14, i64 0, i64 %950
  call void @VP8LColorCacheClear(%struct.VP8LColorCache* %955) #6
  br label %956

956:                                              ; preds = %954, %949
  %957 = getelementptr inbounds [11 x %struct.VP8LHistogram*], [11 x %struct.VP8LHistogram*]* %15, i64 0, i64 %950
  %958 = load %struct.VP8LHistogram*, %struct.VP8LHistogram** %957, align 8
  call void @VP8LFreeHistogram(%struct.VP8LHistogram* %958) #6
  %959 = add nuw nsw i64 %950, 1
  %960 = icmp eq i64 %959, %948
  br i1 %960, label %961, label %949

961:                                              ; preds = %956, %943, %737, %699
  %962 = phi i32 [ %682, %737 ], [ %944, %943 ], [ 0, %699 ], [ %944, %956 ]
  %963 = phi i32 [ 1, %737 ], [ %945, %943 ], [ 1, %699 ], [ %945, %956 ]
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %164) #6
  call void @llvm.lifetime.end.p0i8(i64 176, i8* nonnull %163) #6
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %162) #6
  %964 = icmp eq i32 %963, 0
  br i1 %964, label %1256, label %965

965:                                              ; preds = %961
  %966 = icmp sgt i32 %962, 0
  br i1 %966, label %967, label %1064

967:                                              ; preds = %965
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %166) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %166, i8 -86, i64 16, i1 false) #6
  %968 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %152, align 8, !noalias !9
  %969 = icmp eq %struct.PixOrCopyBlock* %968, null
  br i1 %969, label %978, label %970

970:                                              ; preds = %967
  %971 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %968, i64 0, i32 1
  %972 = load %struct.PixOrCopy*, %struct.PixOrCopy** %971, align 8, !noalias !9
  %973 = ptrtoint %struct.PixOrCopy* %972 to i64
  %974 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %968, i64 0, i32 2
  %975 = load i32, i32* %974, align 8, !noalias !9
  %976 = sext i32 %975 to i64
  %977 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %972, i64 %976
  br label %978

978:                                              ; preds = %970, %967
  %979 = phi i64 [ %973, %970 ], [ 0, %967 ]
  %980 = phi %struct.PixOrCopy* [ %977, %970 ], [ null, %967 ]
  %981 = call i32 @VP8LColorCacheInit(%struct.VP8LColorCache* nonnull %12, i32 %962) #6
  %982 = icmp eq i32 %981, 0
  br i1 %982, label %983, label %984

983:                                              ; preds = %978
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %166) #6
  br label %1256

984:                                              ; preds = %978
  %985 = icmp eq i64 %979, 0
  br i1 %985, label %1063, label %986

986:                                              ; preds = %984, %1058
  %987 = phi i64 [ %1059, %1058 ], [ %979, %984 ]
  %988 = phi i32 [ %1041, %1058 ], [ 0, %984 ]
  %989 = phi %struct.PixOrCopy* [ %1061, %1058 ], [ %980, %984 ]
  %990 = phi %struct.PixOrCopyBlock* [ %1060, %1058 ], [ %968, %984 ]
  %991 = inttoptr i64 %987 to %struct.PixOrCopy*
  %992 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %991, i64 0, i32 0
  %993 = load i8, i8* %992, align 4
  %994 = icmp eq i8 %993, 0
  br i1 %994, label %1001, label %995

995:                                              ; preds = %986
  %996 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %991, i64 0, i32 1
  %997 = load i16, i16* %996, align 2
  %998 = icmp eq i16 %997, 0
  br i1 %998, label %1040, label %999

999:                                              ; preds = %995
  %1000 = sext i32 %988 to i64
  br label %1022

1001:                                             ; preds = %986
  %1002 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %991, i64 0, i32 2
  %1003 = load i32, i32* %1002, align 4
  %1004 = load i32, i32* %168, align 8
  %1005 = mul i32 %1003, 506832829
  %1006 = lshr i32 %1005, %1004
  %1007 = load i32*, i32** %167, align 8
  %1008 = sext i32 %1006 to i64
  %1009 = getelementptr inbounds i32, i32* %1007, i64 %1008
  %1010 = load i32, i32* %1009, align 4
  %1011 = icmp eq i32 %1010, %1003
  %1012 = select i1 %1011, i32 %1006, i32 -1
  %1013 = icmp sgt i32 %1012, -1
  br i1 %1013, label %1014, label %1019

1014:                                             ; preds = %1001
  %1015 = zext i32 %1012 to i64
  %1016 = shl nuw i64 %1015, 32
  %1017 = or i64 %1016, 109057
  %1018 = inttoptr i64 %987 to i64*
  store i64 %1017, i64* %1018, align 4
  br label %1020

1019:                                             ; preds = %1001
  store i32 %1003, i32* %1009, align 4
  br label %1020

1020:                                             ; preds = %1019, %1014
  %1021 = add nsw i32 %988, 1
  br label %1040

1022:                                             ; preds = %1022, %999
  %1023 = phi i64 [ %1000, %999 ], [ %1025, %1022 ]
  %1024 = phi i32 [ 0, %999 ], [ %1034, %1022 ]
  %1025 = add nsw i64 %1023, 1
  %1026 = getelementptr inbounds i32, i32* %2, i64 %1023
  %1027 = load i32, i32* %1026, align 4
  %1028 = load i32, i32* %168, align 8
  %1029 = mul i32 %1027, 506832829
  %1030 = lshr i32 %1029, %1028
  %1031 = load i32*, i32** %167, align 8
  %1032 = sext i32 %1030 to i64
  %1033 = getelementptr inbounds i32, i32* %1031, i64 %1032
  store i32 %1027, i32* %1033, align 4
  %1034 = add nuw nsw i32 %1024, 1
  %1035 = load i16, i16* %996, align 2
  %1036 = zext i16 %1035 to i32
  %1037 = icmp ult i32 %1034, %1036
  br i1 %1037, label %1022, label %1038

1038:                                             ; preds = %1022
  %1039 = trunc i64 %1025 to i32
  br label %1040

1040:                                             ; preds = %1038, %1020, %995
  %1041 = phi i32 [ %1021, %1020 ], [ %988, %995 ], [ %1039, %1038 ]
  %1042 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %991, i64 1
  %1043 = ptrtoint %struct.PixOrCopy* %1042 to i64
  %1044 = icmp eq %struct.PixOrCopy* %1042, %989
  br i1 %1044, label %1045, label %1058

1045:                                             ; preds = %1040
  %1046 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %990, i64 0, i32 0
  %1047 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %1046, align 8
  %1048 = icmp eq %struct.PixOrCopyBlock* %1047, null
  br i1 %1048, label %1063, label %1049

1049:                                             ; preds = %1045
  %1050 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %1047, i64 0, i32 1
  %1051 = bitcast %struct.PixOrCopy** %1050 to i64*
  %1052 = load i64, i64* %1051, align 8
  %1053 = inttoptr i64 %1052 to %struct.PixOrCopy*
  %1054 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %1047, i64 0, i32 2
  %1055 = load i32, i32* %1054, align 8
  %1056 = sext i32 %1055 to i64
  %1057 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %1053, i64 %1056
  br label %1058

1058:                                             ; preds = %1049, %1040
  %1059 = phi i64 [ %1043, %1040 ], [ %1052, %1049 ]
  %1060 = phi %struct.PixOrCopyBlock* [ %990, %1040 ], [ %1047, %1049 ]
  %1061 = phi %struct.PixOrCopy* [ %989, %1040 ], [ %1057, %1049 ]
  %1062 = icmp eq i64 %1059, 0
  br i1 %1062, label %1063, label %986

1063:                                             ; preds = %1058, %1045, %984
  call void @VP8LColorCacheClear(%struct.VP8LColorCache* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %166) #6
  br label %1064

1064:                                             ; preds = %1063, %965, %685
  %1065 = phi i32 [ %962, %1063 ], [ %962, %965 ], [ %682, %685 ]
  %1066 = trunc i64 %679 to i32
  %1067 = or i32 %1065, %1066
  %1068 = icmp eq i32 %1067, 0
  %1069 = and i1 %122, %1068
  br i1 %1069, label %1072, label %1070

1070:                                             ; preds = %1064
  call void @VP8LHistogramCreate(%struct.VP8LHistogram* nonnull %125, %struct.VP8LBackwardRefs* %124, i32 %1065) #6
  %1071 = call double @VP8LHistogramEstimateBits(%struct.VP8LHistogram* nonnull %125) #6
  br label %1072

1072:                                             ; preds = %1070, %1064
  %1073 = phi double [ %680, %1064 ], [ %1071, %1070 ]
  %1074 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 %679
  %1075 = load double, double* %1074, align 8
  %1076 = fcmp olt double %1073, %1075
  br i1 %1076, label %1077, label %1101

1077:                                             ; preds = %1072
  br i1 %681, label %1078, label %1081

1078:                                             ; preds = %1077
  %1079 = call fastcc i32 @BackwardRefsClone(%struct.VP8LBackwardRefs* %124, %struct.VP8LBackwardRefs* %178) #6
  %1080 = icmp eq i32 %1079, 0
  br i1 %1080, label %1256, label %1098

1081:                                             ; preds = %1077
  %1082 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %149, align 8
  %1083 = icmp ne %struct.PixOrCopyBlock** %1082, null
  %1084 = icmp eq %struct.PixOrCopyBlock** %1082, %152
  %1085 = and i1 %1084, %1083
  %1086 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %169, align 8
  %1087 = icmp ne %struct.PixOrCopyBlock** %1086, null
  %1088 = icmp eq %struct.PixOrCopyBlock** %1086, %170
  %1089 = and i1 %1088, %1087
  %1090 = load i32, i32* %155, align 8
  %1091 = load i32, i32* %156, align 4
  %1092 = load i64, i64* %153, align 8
  %1093 = ptrtoint %struct.PixOrCopyBlock** %1082 to i64
  %1094 = load <2 x i64>, <2 x i64>* %179, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %171, i8* align 8 %172, i64 40, i1 false) #6
  store i32 %1090, i32* %173, align 8
  store i32 %1091, i32* %174, align 4
  store i64 %1092, i64* %175, align 8
  store i64 %1093, i64* %176, align 8
  store <2 x i64> %1094, <2 x i64>* %180, align 8
  br i1 %1089, label %1095, label %1096

1095:                                             ; preds = %1081
  store %struct.PixOrCopyBlock** %152, %struct.PixOrCopyBlock*** %149, align 8
  br label %1096

1096:                                             ; preds = %1095, %1081
  br i1 %1085, label %1097, label %1098

1097:                                             ; preds = %1096
  store %struct.PixOrCopyBlock** %170, %struct.PixOrCopyBlock*** %169, align 8
  br label %1098

1098:                                             ; preds = %1097, %1096, %1078
  store double %1073, double* %1074, align 8
  %1099 = getelementptr inbounds [2 x i32], [2 x i32]* %118, i64 0, i64 %679
  store i32 %196, i32* %1099, align 4
  br i1 %686, label %1100, label %1101

1100:                                             ; preds = %1098
  store i32 %1065, i32* %10, align 4
  br label %1105

1101:                                             ; preds = %1098, %1072, %678
  %1102 = phi double [ %1073, %1072 ], [ %1073, %1098 ], [ %680, %678 ]
  %1103 = add nsw i64 %679, -1
  %1104 = icmp eq i64 %679, 0
  br i1 %1104, label %1105, label %678

1105:                                             ; preds = %1101, %1100, %195
  %1106 = xor i32 %196, -1
  %1107 = and i32 %197, %1106
  %1108 = shl i32 %196, 1
  %1109 = icmp eq i32 %1107, 0
  br i1 %1109, label %181, label %195

1110:                                             ; preds = %1252, %181
  %1111 = phi i64 [ 1, %181 ], [ %1253, %1252 ]
  %1112 = icmp ne i64 %1111, 1
  %1113 = or i1 %122, %1112
  br i1 %1113, label %1114, label %1252

1114:                                             ; preds = %1110
  %1115 = getelementptr inbounds [2 x i32], [2 x i32]* %118, i64 0, i64 %1111
  %1116 = load i32, i32* %1115, align 4
  switch i32 %1116, label %1160 [
    i32 1, label %1117
    i32 4, label %1117
  ]

1117:                                             ; preds = %1114, %1114
  br i1 %185, label %1118, label %1160

1118:                                             ; preds = %1117
  %1119 = icmp eq i32 %1116, 1
  %1120 = select i1 %1119, %struct.VP8LHashChain* %8, %struct.VP8LHashChain* %20
  %1121 = icmp eq i64 %1111, 1
  br i1 %1121, label %1124, label %1122

1122:                                             ; preds = %1118
  %1123 = load i32, i32* %10, align 4
  br label %1124

1124:                                             ; preds = %1122, %1118
  %1125 = phi i32 [ %1123, %1122 ], [ 0, %1118 ]
  %1126 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %1111
  %1127 = call i32 @VP8LBackwardReferencesTraceBackwards(i32 %0, i32 %1, i32* %2, i32 %1125, %struct.VP8LHashChain* %1120, %struct.VP8LBackwardRefs* %1126, %struct.VP8LBackwardRefs* %124) #6
  %1128 = icmp eq i32 %1127, 0
  br i1 %1128, label %1160, label %1129

1129:                                             ; preds = %1124
  call void @VP8LHistogramCreate(%struct.VP8LHistogram* nonnull %125, %struct.VP8LBackwardRefs* %124, i32 %1125) #6
  %1130 = call double @VP8LHistogramEstimateBits(%struct.VP8LHistogram* nonnull %125) #6
  %1131 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 %1111
  %1132 = load double, double* %1131, align 8
  %1133 = fcmp olt double %1130, %1132
  br i1 %1133, label %1134, label %1160

1134:                                             ; preds = %1129
  %1135 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %186, align 8
  %1136 = icmp ne %struct.PixOrCopyBlock** %1135, null
  %1137 = icmp eq %struct.PixOrCopyBlock** %1135, %187
  %1138 = and i1 %1137, %1136
  %1139 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %1111, i32 3
  %1140 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %1139, align 8
  %1141 = icmp ne %struct.PixOrCopyBlock** %1140, null
  %1142 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %1111, i32 2
  %1143 = icmp eq %struct.PixOrCopyBlock** %1140, %1142
  %1144 = and i1 %1143, %1141
  %1145 = load i32, i32* %188, align 8
  %1146 = load i32, i32* %189, align 4
  %1147 = load i64, i64* %190, align 8
  %1148 = ptrtoint %struct.PixOrCopyBlock** %1135 to i64
  %1149 = load <2 x i64>, <2 x i64>* %194, align 8
  %1150 = bitcast %struct.VP8LBackwardRefs* %1126 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %184, i8* align 8 %1150, i64 40, i1 false) #6
  %1151 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %1126, i64 0, i32 0
  store i32 %1145, i32* %1151, align 8
  %1152 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %1111, i32 1
  store i32 %1146, i32* %1152, align 4
  %1153 = bitcast %struct.PixOrCopyBlock** %1142 to i64*
  store i64 %1147, i64* %1153, align 8
  %1154 = bitcast %struct.PixOrCopyBlock*** %1139 to i64*
  store i64 %1148, i64* %1154, align 8
  %1155 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %1111, i32 4
  %1156 = bitcast %struct.PixOrCopyBlock** %1155 to <2 x i64>*
  store <2 x i64> %1149, <2 x i64>* %1156, align 8
  br i1 %1144, label %1157, label %1158

1157:                                             ; preds = %1134
  store %struct.PixOrCopyBlock** %187, %struct.PixOrCopyBlock*** %186, align 8
  br label %1158

1158:                                             ; preds = %1157, %1134
  br i1 %1138, label %1159, label %1160

1159:                                             ; preds = %1158
  store %struct.PixOrCopyBlock** %1142, %struct.PixOrCopyBlock*** %1139, align 8
  br label %1160

1160:                                             ; preds = %1159, %1158, %1129, %1124, %1117, %1114
  %1161 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 %1111, i32 2
  %1162 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %1161, align 8, !noalias !12
  %1163 = icmp eq %struct.PixOrCopyBlock* %1162, null
  br i1 %1163, label %1239, label %1164

1164:                                             ; preds = %1160
  %1165 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %1162, i64 0, i32 1
  %1166 = load %struct.PixOrCopy*, %struct.PixOrCopy** %1165, align 8, !noalias !12
  %1167 = icmp eq %struct.PixOrCopy* %1166, null
  br i1 %1167, label %1239, label %1168

1168:                                             ; preds = %1164
  %1169 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %1162, i64 0, i32 2
  %1170 = load i32, i32* %1169, align 8, !noalias !12
  %1171 = sext i32 %1170 to i64
  %1172 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %1166, i64 %1171
  br label %1173

1173:                                             ; preds = %1233, %1168
  %1174 = phi %struct.PixOrCopy* [ %1166, %1168 ], [ %1234, %1233 ]
  %1175 = phi %struct.PixOrCopy* [ %1172, %1168 ], [ %1237, %1233 ]
  %1176 = phi %struct.PixOrCopyBlock* [ %1162, %1168 ], [ %1236, %1233 ]
  %1177 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %1174, i64 0, i32 0
  %1178 = load i8, i8* %1177, align 4
  %1179 = icmp eq i8 %1178, 2
  br i1 %1179, label %1180, label %1215

1180:                                             ; preds = %1173
  %1181 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %1174, i64 0, i32 2
  %1182 = load i32, i32* %1181, align 4
  %1183 = sdiv i32 %1182, %0
  %1184 = mul nsw i32 %1183, %0
  %1185 = sub nsw i32 %1182, %1184
  %1186 = icmp slt i32 %1185, 9
  %1187 = icmp slt i32 %1183, 8
  %1188 = and i1 %1187, %1186
  br i1 %1188, label %1189, label %1198

1189:                                             ; preds = %1180
  %1190 = shl nsw i32 %1183, 4
  %1191 = or i32 %1190, 8
  %1192 = sub nsw i32 %1191, %1185
  %1193 = sext i32 %1192 to i64
  %1194 = getelementptr inbounds [128 x i8], [128 x i8]* @plane_to_code_lut, i64 0, i64 %1193
  %1195 = load i8, i8* %1194, align 1
  %1196 = zext i8 %1195 to i32
  %1197 = add nuw nsw i32 %1196, 1
  br label %1213

1198:                                             ; preds = %1180
  %1199 = icmp sgt i32 %1185, %183
  %1200 = icmp slt i32 %1183, 7
  %1201 = and i1 %1200, %1199
  br i1 %1201, label %1202, label %1211

1202:                                             ; preds = %1198
  %1203 = shl i32 %1183, 4
  %1204 = add i32 %1203, %182
  %1205 = sub i32 %1204, %1185
  %1206 = sext i32 %1205 to i64
  %1207 = getelementptr inbounds [128 x i8], [128 x i8]* @plane_to_code_lut, i64 0, i64 %1206
  %1208 = load i8, i8* %1207, align 1
  %1209 = zext i8 %1208 to i32
  %1210 = add nuw nsw i32 %1209, 1
  br label %1213

1211:                                             ; preds = %1198
  %1212 = add nsw i32 %1182, 120
  br label %1213

1213:                                             ; preds = %1211, %1202, %1189
  %1214 = phi i32 [ %1197, %1189 ], [ %1210, %1202 ], [ %1212, %1211 ]
  store i32 %1214, i32* %1181, align 4
  br label %1215

1215:                                             ; preds = %1213, %1173
  %1216 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %1174, i64 1
  %1217 = icmp eq %struct.PixOrCopy* %1216, %1175
  br i1 %1217, label %1220, label %1218

1218:                                             ; preds = %1215
  %1219 = ptrtoint %struct.PixOrCopy* %1216 to i64
  br label %1233

1220:                                             ; preds = %1215
  %1221 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %1176, i64 0, i32 0
  %1222 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %1221, align 8
  %1223 = icmp eq %struct.PixOrCopyBlock* %1222, null
  br i1 %1223, label %1239, label %1224

1224:                                             ; preds = %1220
  %1225 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %1222, i64 0, i32 1
  %1226 = bitcast %struct.PixOrCopy** %1225 to i64*
  %1227 = load i64, i64* %1226, align 8
  %1228 = inttoptr i64 %1227 to %struct.PixOrCopy*
  %1229 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %1222, i64 0, i32 2
  %1230 = load i32, i32* %1229, align 8
  %1231 = sext i32 %1230 to i64
  %1232 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %1228, i64 %1231
  br label %1233

1233:                                             ; preds = %1224, %1218
  %1234 = phi %struct.PixOrCopy* [ %1216, %1218 ], [ %1228, %1224 ]
  %1235 = phi i64 [ %1219, %1218 ], [ %1227, %1224 ]
  %1236 = phi %struct.PixOrCopyBlock* [ %1176, %1218 ], [ %1222, %1224 ]
  %1237 = phi %struct.PixOrCopy* [ %1175, %1218 ], [ %1232, %1224 ]
  %1238 = icmp eq i64 %1235, 0
  br i1 %1238, label %1239, label %1173

1239:                                             ; preds = %1233, %1220, %1164, %1160
  %1240 = icmp eq i64 %1111, 1
  br i1 %1240, label %1241, label %1252

1241:                                             ; preds = %1239
  %1242 = load i32, i32* %192, align 8
  %1243 = load i32, i32* %193, align 4
  %1244 = icmp eq i32 %1242, %1243
  br i1 %1244, label %1245, label %1252

1245:                                             ; preds = %1241
  %1246 = load i32, i32* %10, align 4
  %1247 = icmp eq i32 %1246, 0
  br i1 %1247, label %1248, label %1252

1248:                                             ; preds = %1245
  %1249 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %9, i64 1
  %1250 = call fastcc i32 @BackwardRefsClone(%struct.VP8LBackwardRefs* %1249, %struct.VP8LBackwardRefs* %9) #6
  %1251 = icmp eq i32 %1250, 0
  br i1 %1251, label %1256, label %1255

1252:                                             ; preds = %1245, %1241, %1239, %1110
  %1253 = add nsw i64 %1111, -1
  %1254 = icmp eq i64 %1111, 0
  br i1 %1254, label %1255, label %1110

1255:                                             ; preds = %1252, %1248
  br label %1256

1256:                                             ; preds = %200, %433, %675, %961, %1078, %117, %983, %1248, %1255
  %1257 = phi i1 [ true, %117 ], [ false, %1255 ], [ true, %1248 ], [ true, %983 ], [ true, %1078 ], [ true, %961 ], [ true, %675 ], [ true, %433 ], [ true, %200 ]
  %1258 = getelementptr inbounds %struct.VP8LHashChain, %struct.VP8LHashChain* %20, i64 0, i32 0
  %1259 = bitcast %struct.VP8LHashChain* %20 to i8**
  %1260 = load i8*, i8** %1259, align 8
  call void @WebPSafeFree(i8* %1260) #6
  %1261 = getelementptr inbounds %struct.VP8LHashChain, %struct.VP8LHashChain* %20, i64 0, i32 1
  store i32 0, i32* %1261, align 8
  store i32* null, i32** %1258, align 8
  call void @VP8LFreeHistogram(%struct.VP8LHistogram* %125) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %121) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %120) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %119) #6
  br i1 %1257, label %1263, label %1262

1262:                                             ; preds = %108, %116, %1256
  br label %1263

1263:                                             ; preds = %22, %1256, %106, %1262
  %1264 = phi i32 [ 0, %1262 ], [ 1, %106 ], [ 1, %1256 ], [ 1, %22 ]
  ret i32 %1264

1265:                                             ; preds = %530
  %1266 = add nsw i32 %531, 1
  %1267 = sext i32 %531 to i64
  %1268 = getelementptr inbounds [32 x i32], [32 x i32]* %16, i64 0, i64 %1267
  store i32 %534, i32* %1268, align 4
  br label %1269

1269:                                             ; preds = %1265, %530
  %1270 = phi i32 [ %531, %530 ], [ %1266, %1265 ]
  %1271 = add nuw nsw i64 %521, 2
  %1272 = icmp eq i64 %1271, 32
  br i1 %1272, label %515, label %520
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @BackwardReferencesLz77(i32, i32, i32* nocapture readonly, %struct.VP8LHashChain* nocapture readonly, %struct.VP8LBackwardRefs*) unnamed_addr #3 {
  %6 = mul nsw i32 %1, %0
  %7 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %4, i64 0, i32 3
  %8 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %7, align 8
  %9 = icmp eq %struct.PixOrCopyBlock** %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %4, i64 0, i32 4
  %12 = bitcast %struct.PixOrCopyBlock** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %struct.PixOrCopyBlock** %8 to i64*
  store i64 %13, i64* %14, align 8
  br label %15

15:                                               ; preds = %5, %10
  %16 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %4, i64 0, i32 2
  %17 = bitcast %struct.PixOrCopyBlock** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %4, i64 0, i32 4
  %20 = bitcast %struct.PixOrCopyBlock** %19 to i64*
  store i64 %18, i64* %20, align 8
  store %struct.PixOrCopyBlock** %16, %struct.PixOrCopyBlock*** %7, align 8
  %21 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %4, i64 0, i32 5
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %21, align 8
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %16, align 8
  %22 = icmp sgt i32 %6, 0
  br i1 %22, label %23, label %180

23:                                               ; preds = %15
  %24 = getelementptr inbounds %struct.VP8LHashChain, %struct.VP8LHashChain* %3, i64 0, i32 0
  %25 = add nsw i32 %6, -1
  %26 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %4, i64 0, i32 0
  %27 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %4, i64 0, i32 1
  br label %28

28:                                               ; preds = %23, %175
  %29 = phi i32 [ 0, %23 ], [ %178, %175 ]
  %30 = phi i32 [ -1, %23 ], [ %176, %175 ]
  %31 = load i32*, i32** %24, align 8
  %32 = sext i32 %29 to i64
  %33 = getelementptr inbounds i32, i32* %31, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = lshr i32 %34, 12
  %36 = and i32 %34, 4095
  %37 = icmp ugt i32 %36, 3
  br i1 %37, label %38, label %72

38:                                               ; preds = %28
  %39 = add nsw i32 %36, %29
  %40 = icmp slt i32 %39, %6
  %41 = select i1 %40, i32 %39, i32 %25
  %42 = icmp sgt i32 %29, %30
  %43 = select i1 %42, i32 %29, i32 %30
  %44 = icmp slt i32 %43, %41
  br i1 %44, label %45, label %123

45:                                               ; preds = %38
  %46 = sext i32 %43 to i64
  %47 = sext i32 %41 to i64
  br label %48

48:                                               ; preds = %45, %65
  %49 = phi i64 [ %46, %45 ], [ %52, %65 ]
  %50 = phi i32 [ 0, %45 ], [ %67, %65 ]
  %51 = phi i32 [ %36, %45 ], [ %66, %65 ]
  %52 = add nsw i64 %49, 1
  %53 = getelementptr inbounds i32, i32* %31, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = and i32 %54, 4095
  %56 = icmp ugt i32 %55, 3
  %57 = select i1 %56, i32 %55, i32 1
  %58 = trunc i64 %52 to i32
  %59 = add nsw i32 %57, %58
  %60 = icmp sgt i32 %59, %50
  br i1 %60, label %61, label %65

61:                                               ; preds = %48
  %62 = icmp slt i32 %59, %6
  %63 = trunc i64 %52 to i32
  %64 = sub i32 %63, %29
  br i1 %62, label %65, label %69

65:                                               ; preds = %48, %61
  %66 = phi i32 [ %64, %61 ], [ %51, %48 ]
  %67 = phi i32 [ %59, %61 ], [ %50, %48 ]
  %68 = icmp slt i64 %52, %47
  br i1 %68, label %48, label %69

69:                                               ; preds = %65, %61
  %70 = phi i32 [ %66, %65 ], [ %64, %61 ]
  %71 = icmp eq i32 %70, 1
  br i1 %71, label %72, label %123

72:                                               ; preds = %28, %69
  %73 = phi i32 [ %43, %69 ], [ %30, %28 ]
  %74 = getelementptr inbounds i32, i32* %2, i64 %32
  %75 = load i32, i32* %74, align 4
  %76 = zext i32 %75 to i64
  %77 = shl nuw i64 %76, 32
  %78 = or i64 %77, 109056
  %79 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %21, align 8
  %80 = icmp eq %struct.PixOrCopyBlock* %79, null
  br i1 %80, label %86, label %81

81:                                               ; preds = %72
  %82 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %79, i64 0, i32 2
  %83 = load i32, i32* %82, align 8
  %84 = load i32, i32* %26, align 8
  %85 = icmp eq i32 %83, %84
  br i1 %85, label %86, label %113

86:                                               ; preds = %81, %72
  %87 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %19, align 8
  %88 = icmp eq %struct.PixOrCopyBlock* %87, null
  br i1 %88, label %89, label %104

89:                                               ; preds = %86
  %90 = load i32, i32* %26, align 8
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 3
  %93 = add nsw i64 %92, 24
  %94 = tail call i8* @WebPSafeMalloc(i64 1, i64 %93) #6
  %95 = icmp eq i8* %94, null
  br i1 %95, label %96, label %99

96:                                               ; preds = %89
  %97 = load i32, i32* %27, align 4
  %98 = or i32 %97, 1
  store i32 %98, i32* %27, align 4
  br label %175

99:                                               ; preds = %89
  %100 = bitcast i8* %94 to %struct.PixOrCopyBlock*
  %101 = getelementptr inbounds i8, i8* %94, i64 24
  %102 = getelementptr inbounds i8, i8* %94, i64 8
  %103 = bitcast i8* %102 to i8**
  store i8* %101, i8** %103, align 8
  br label %107

104:                                              ; preds = %86
  %105 = bitcast %struct.PixOrCopyBlock* %87 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %20, align 8
  br label %107

107:                                              ; preds = %104, %99
  %108 = phi %struct.PixOrCopyBlock* [ %100, %99 ], [ %87, %104 ]
  %109 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %7, align 8
  store %struct.PixOrCopyBlock* %108, %struct.PixOrCopyBlock** %109, align 8
  %110 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %108, i64 0, i32 0
  store %struct.PixOrCopyBlock** %110, %struct.PixOrCopyBlock*** %7, align 8
  store %struct.PixOrCopyBlock* %108, %struct.PixOrCopyBlock** %21, align 8
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %110, align 8
  %111 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %108, i64 0, i32 2
  store i32 0, i32* %111, align 8
  %112 = icmp eq %struct.PixOrCopyBlock* %108, null
  br i1 %112, label %175, label %113

113:                                              ; preds = %107, %81
  %114 = phi i32 [ 0, %107 ], [ %83, %81 ]
  %115 = phi %struct.PixOrCopyBlock* [ %108, %107 ], [ %79, %81 ]
  %116 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %115, i64 0, i32 1
  %117 = load %struct.PixOrCopy*, %struct.PixOrCopy** %116, align 8
  %118 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %115, i64 0, i32 2
  %119 = add nsw i32 %114, 1
  store i32 %119, i32* %118, align 8
  %120 = sext i32 %114 to i64
  %121 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %117, i64 %120
  %122 = bitcast %struct.PixOrCopy* %121 to i64*
  store i64 %78, i64* %122, align 4
  br label %175

123:                                              ; preds = %38, %69
  %124 = phi i32 [ %70, %69 ], [ %36, %38 ]
  %125 = zext i32 %35 to i64
  %126 = shl nuw nsw i64 %125, 32
  %127 = shl i32 %124, 16
  %128 = zext i32 %127 to i64
  %129 = or i64 %126, %128
  %130 = or i64 %129, 43522
  %131 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %21, align 8
  %132 = icmp eq %struct.PixOrCopyBlock* %131, null
  br i1 %132, label %138, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %131, i64 0, i32 2
  %135 = load i32, i32* %134, align 8
  %136 = load i32, i32* %26, align 8
  %137 = icmp eq i32 %135, %136
  br i1 %137, label %138, label %165

138:                                              ; preds = %133, %123
  %139 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %19, align 8
  %140 = icmp eq %struct.PixOrCopyBlock* %139, null
  br i1 %140, label %141, label %156

141:                                              ; preds = %138
  %142 = load i32, i32* %26, align 8
  %143 = sext i32 %142 to i64
  %144 = shl nsw i64 %143, 3
  %145 = add nsw i64 %144, 24
  %146 = tail call i8* @WebPSafeMalloc(i64 1, i64 %145) #6
  %147 = icmp eq i8* %146, null
  br i1 %147, label %148, label %151

148:                                              ; preds = %141
  %149 = load i32, i32* %27, align 4
  %150 = or i32 %149, 1
  store i32 %150, i32* %27, align 4
  br label %175

151:                                              ; preds = %141
  %152 = bitcast i8* %146 to %struct.PixOrCopyBlock*
  %153 = getelementptr inbounds i8, i8* %146, i64 24
  %154 = getelementptr inbounds i8, i8* %146, i64 8
  %155 = bitcast i8* %154 to i8**
  store i8* %153, i8** %155, align 8
  br label %159

156:                                              ; preds = %138
  %157 = bitcast %struct.PixOrCopyBlock* %139 to i64*
  %158 = load i64, i64* %157, align 8
  store i64 %158, i64* %20, align 8
  br label %159

159:                                              ; preds = %156, %151
  %160 = phi %struct.PixOrCopyBlock* [ %152, %151 ], [ %139, %156 ]
  %161 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %7, align 8
  store %struct.PixOrCopyBlock* %160, %struct.PixOrCopyBlock** %161, align 8
  %162 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %160, i64 0, i32 0
  store %struct.PixOrCopyBlock** %162, %struct.PixOrCopyBlock*** %7, align 8
  store %struct.PixOrCopyBlock* %160, %struct.PixOrCopyBlock** %21, align 8
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %162, align 8
  %163 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %160, i64 0, i32 2
  store i32 0, i32* %163, align 8
  %164 = icmp eq %struct.PixOrCopyBlock* %160, null
  br i1 %164, label %175, label %165

165:                                              ; preds = %159, %133
  %166 = phi i32 [ 0, %159 ], [ %135, %133 ]
  %167 = phi %struct.PixOrCopyBlock* [ %160, %159 ], [ %131, %133 ]
  %168 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %167, i64 0, i32 1
  %169 = load %struct.PixOrCopy*, %struct.PixOrCopy** %168, align 8
  %170 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %167, i64 0, i32 2
  %171 = add nsw i32 %166, 1
  store i32 %171, i32* %170, align 8
  %172 = sext i32 %166 to i64
  %173 = getelementptr inbounds %struct.PixOrCopy, %struct.PixOrCopy* %169, i64 %172
  %174 = bitcast %struct.PixOrCopy* %173 to i64*
  store i64 %130, i64* %174, align 4
  br label %175

175:                                              ; preds = %165, %159, %148, %113, %107, %96
  %176 = phi i32 [ %73, %96 ], [ %73, %107 ], [ %73, %113 ], [ %43, %148 ], [ %43, %159 ], [ %43, %165 ]
  %177 = phi i32 [ 1, %96 ], [ 1, %107 ], [ 1, %113 ], [ %124, %148 ], [ %124, %159 ], [ %124, %165 ]
  %178 = add nsw i32 %177, %29
  %179 = icmp slt i32 %178, %6
  br i1 %179, label %28, label %180

180:                                              ; preds = %175, %15
  %181 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %4, i64 0, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = icmp eq i32 %182, 0
  %184 = zext i1 %183 to i32
  ret i32 %184
}

declare i32 @VP8LColorCacheInit(%struct.VP8LColorCache*, i32) local_unnamed_addr #4

declare void @VP8LColorCacheClear(%struct.VP8LColorCache*) local_unnamed_addr #4

declare %struct.VP8LHistogram* @VP8LAllocateHistogram(i32) local_unnamed_addr #4

declare void @VP8LHistogramCreate(%struct.VP8LHistogram*, %struct.VP8LBackwardRefs*, i32) local_unnamed_addr #4

declare double @VP8LHistogramEstimateBits(%struct.VP8LHistogram*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @BackwardRefsClone(%struct.VP8LBackwardRefs* nocapture readonly, %struct.VP8LBackwardRefs*) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %0, i64 0, i32 2
  %4 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %3, align 8
  %5 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %1, i64 0, i32 3
  %6 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %5, align 8
  %7 = icmp eq %struct.PixOrCopyBlock** %6, null
  br i1 %7, label %13, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %1, i64 0, i32 4
  %10 = bitcast %struct.PixOrCopyBlock** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %struct.PixOrCopyBlock** %6 to i64*
  store i64 %11, i64* %12, align 8
  br label %13

13:                                               ; preds = %2, %8
  %14 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %1, i64 0, i32 2
  %15 = bitcast %struct.PixOrCopyBlock** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %1, i64 0, i32 4
  %18 = bitcast %struct.PixOrCopyBlock** %17 to i64*
  store i64 %16, i64* %18, align 8
  store %struct.PixOrCopyBlock** %14, %struct.PixOrCopyBlock*** %5, align 8
  %19 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %1, i64 0, i32 5
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %19, align 8
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %14, align 8
  %20 = icmp eq %struct.PixOrCopyBlock* %4, null
  br i1 %20, label %70, label %21

21:                                               ; preds = %13
  %22 = inttoptr i64 %16 to %struct.PixOrCopyBlock*
  %23 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %1, i64 0, i32 0
  br label %24

24:                                               ; preds = %68, %21
  %25 = phi %struct.PixOrCopyBlock* [ %22, %21 ], [ %69, %68 ]
  %26 = phi %struct.PixOrCopyBlock* [ %4, %21 ], [ %66, %68 ]
  %27 = icmp eq %struct.PixOrCopyBlock* %25, null
  br i1 %27, label %28, label %44

28:                                               ; preds = %24
  %29 = load i32, i32* %23, align 8
  %30 = sext i32 %29 to i64
  %31 = shl nsw i64 %30, 3
  %32 = add nsw i64 %31, 24
  %33 = tail call i8* @WebPSafeMalloc(i64 1, i64 %32) #6
  %34 = icmp eq i8* %33, null
  br i1 %34, label %35, label %39

35:                                               ; preds = %28
  %36 = getelementptr inbounds %struct.VP8LBackwardRefs, %struct.VP8LBackwardRefs* %1, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = or i32 %37, 1
  store i32 %38, i32* %36, align 4
  br label %70

39:                                               ; preds = %28
  %40 = bitcast i8* %33 to %struct.PixOrCopyBlock*
  %41 = getelementptr inbounds i8, i8* %33, i64 24
  %42 = getelementptr inbounds i8, i8* %33, i64 8
  %43 = bitcast i8* %42 to i8**
  store i8* %41, i8** %43, align 8
  br label %47

44:                                               ; preds = %24
  %45 = bitcast %struct.PixOrCopyBlock* %25 to i64*
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %18, align 8
  br label %47

47:                                               ; preds = %39, %44
  %48 = phi %struct.PixOrCopyBlock* [ %40, %39 ], [ %25, %44 ]
  %49 = load %struct.PixOrCopyBlock**, %struct.PixOrCopyBlock*** %5, align 8
  store %struct.PixOrCopyBlock* %48, %struct.PixOrCopyBlock** %49, align 8
  %50 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %48, i64 0, i32 0
  store %struct.PixOrCopyBlock** %50, %struct.PixOrCopyBlock*** %5, align 8
  store %struct.PixOrCopyBlock* %48, %struct.PixOrCopyBlock** %19, align 8
  store %struct.PixOrCopyBlock* null, %struct.PixOrCopyBlock** %50, align 8
  %51 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %48, i64 0, i32 2
  store i32 0, i32* %51, align 8
  %52 = icmp eq %struct.PixOrCopyBlock* %48, null
  br i1 %52, label %70, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %48, i64 0, i32 1
  %55 = bitcast %struct.PixOrCopy** %54 to i8**
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %26, i64 0, i32 1
  %58 = bitcast %struct.PixOrCopy** %57 to i8**
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %26, i64 0, i32 2
  %61 = load i32, i32* %60, align 8
  %62 = sext i32 %61 to i64
  %63 = shl nsw i64 %62, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %56, i8* align 4 %59, i64 %63, i1 false)
  %64 = load i32, i32* %60, align 8
  store i32 %64, i32* %51, align 8
  %65 = getelementptr inbounds %struct.PixOrCopyBlock, %struct.PixOrCopyBlock* %26, i64 0, i32 0
  %66 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %65, align 8
  %67 = icmp eq %struct.PixOrCopyBlock* %66, null
  br i1 %67, label %70, label %68

68:                                               ; preds = %53
  %69 = load %struct.PixOrCopyBlock*, %struct.PixOrCopyBlock** %17, align 8
  br label %24

70:                                               ; preds = %53, %47, %13, %35
  %71 = phi i32 [ 0, %35 ], [ 1, %13 ], [ 1, %53 ], [ 0, %47 ]
  ret i32 %71
}

declare i32 @VP8LBackwardReferencesTraceBackwards(i32, i32, i32*, i32, %struct.VP8LHashChain*, %struct.VP8LBackwardRefs*, %struct.VP8LBackwardRefs*) local_unnamed_addr #4

declare void @VP8LFreeHistogram(%struct.VP8LHistogram*) local_unnamed_addr #4

declare void @VP8LHistogramInit(%struct.VP8LHistogram*, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.usub.sat.i32(i32, i32) #5

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"VP8LRefsCursorInit: argument 0"}
!4 = distinct !{!4, !"VP8LRefsCursorInit"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"VP8LRefsCursorInit: argument 0"}
!7 = distinct !{!7, !"VP8LRefsCursorInit"}
!8 = !{i32 0, i32 33}
!9 = !{!10}
!10 = distinct !{!10, !11, !"VP8LRefsCursorInit: argument 0"}
!11 = distinct !{!11, !"VP8LRefsCursorInit"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"VP8LRefsCursorInit: argument 0"}
!14 = distinct !{!14, !"VP8LRefsCursorInit"}
