; ModuleID = '../../ui/gfx/transform_util.cc'
source_filename = "../../ui/gfx/transform_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Quaternion" = type { double, double, double, double }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%"struct.gfx::DecomposedTransform" = type { [3 x float], [3 x float], [3 x float], [4 x float], %"class.gfx::Quaternion" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Point3F" = type { float, float, float }
%"class.gfx::Vector3dF" = type { float, float, float }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.gfx::Vector2dF" = type { float, float }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }

@__const._ZN3gfx13SnapTransformEPNS_9TransformERKS0_RKNS_4RectE.decomp = private unnamed_addr constant { [3 x float], [3 x float], [3 x float], [4 x float], [4 x i8], %"class.gfx::Quaternion" } { [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA", %"class.gfx::Quaternion" { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF } }, align 8
@.str = private unnamed_addr constant [169 x i8] c"translate: %+0.4f %+0.4f %+0.4f\0Ascale: %+0.4f %+0.4f %+0.4f\0Askew: %+0.4f %+0.4f %+0.4f\0Aperspective: %+0.4f %+0.4f %+0.4f %+0.4f\0Aquaternion: %+0.4f %+0.4f %+0.4f %+0.4f\0A\00", align 1
@__const._ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE.rotation_matrix = private unnamed_addr constant %class.SkMatrix44 <{ [4 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], i8 -86, [3 x i8] c"\AA\AA\AA" }>, align 4
@constinit = private unnamed_addr constant [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]], align 4
@__const._ZN3gfx12_GLOBAL__N_144CheckTransformsMapsIntViewportWithinOnePixelERKNS_4RectERKNS_9TransformES6_.combined = private unnamed_addr constant %"class.gfx::Transform" { %class.SkMatrix44 <{ [4 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], i8 -86, [3 x i8] c"\AA\AA\AA" }> }, align 4

@_ZN3gfx19DecomposedTransformC1Ev = hidden unnamed_addr alias void (%"struct.gfx::DecomposedTransform"*), void (%"struct.gfx::DecomposedTransform"*)* @_ZN3gfx19DecomposedTransformC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx17GetScaleTransformERKNS_5PointEf(%"class.gfx::Transform"* noalias sret, %"class.gfx::Point"* nocapture readonly dereferenceable(8), float) local_unnamed_addr #0 {
  %4 = bitcast %"class.gfx::Transform"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN3gfx12_GLOBAL__N_144CheckTransformsMapsIntViewportWithinOnePixelERKNS_4RectERKNS_9TransformES6_.combined to i8*), i64 68, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #7
  %5 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %5, align 4
  %6 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = sitofp i32 %7 to float
  %9 = fsub float 1.000000e+00, %2
  %10 = fmul float %9, %8
  %11 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = sitofp i32 %12 to float
  %14 = fmul float %9, %13
  tail call void @_ZN3gfx9Transform9TranslateEff(%"class.gfx::Transform"* %0, float %10, float %14) #7
  tail call void @_ZN3gfx9Transform5ScaleEff(%"class.gfx::Transform"* %0, float %2, float %2) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3gfx9Transform9TranslateEff(%"class.gfx::Transform"*, float, float) local_unnamed_addr #2

declare void @_ZN3gfx9Transform5ScaleEff(%"class.gfx::Transform"*, float, float) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx19DecomposedTransformC2Ev(%"struct.gfx::DecomposedTransform"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 4
  %3 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 4, i32 3
  %4 = bitcast %"class.gfx::Quaternion"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #7
  store double 1.000000e+00, double* %3, align 8
  %5 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 1, i64 2
  store float 1.000000e+00, float* %5, align 4
  %6 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 1, i64 1
  store float 1.000000e+00, float* %6, align 4
  %7 = bitcast %"struct.gfx::DecomposedTransform"* %0 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %7, align 8
  %8 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 2, i64 0
  %9 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 3, i64 3
  %10 = bitcast float* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false)
  store float 1.000000e+00, float* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx25BlendDecomposedTransformsERKNS_19DecomposedTransformES2_d(%"struct.gfx::DecomposedTransform"* noalias nocapture sret, %"struct.gfx::DecomposedTransform"* dereferenceable(88), %"struct.gfx::DecomposedTransform"* dereferenceable(88), double) local_unnamed_addr #0 {
  %5 = alloca %"class.gfx::Quaternion", align 8
  %6 = bitcast %"struct.gfx::DecomposedTransform"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 bitcast ({ [3 x float], [3 x float], [3 x float], [4 x float], [4 x i8], %"class.gfx::Quaternion" }* @__const._ZN3gfx13SnapTransformEPNS_9TransformERKS0_RKNS_4RectE.decomp to i8*), i64 56, i1 false)
  %7 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 4
  %8 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 4, i32 3
  %9 = bitcast %"class.gfx::Quaternion"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #7
  store double 1.000000e+00, double* %8, align 8
  %10 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 1, i64 1
  %11 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 3, i64 3
  %12 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 2, i64 2
  %13 = bitcast float* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false) #7
  store float 1.000000e+00, float* %11, align 4
  %14 = fsub double 1.000000e+00, %3
  %15 = bitcast %"struct.gfx::DecomposedTransform"* %1 to <4 x float>*
  %16 = load <4 x float>, <4 x float>* %15, align 4
  %17 = fpext <4 x float> %16 to <4 x double>
  %18 = insertelement <4 x double> undef, double %3, i32 0
  %19 = shufflevector <4 x double> %18, <4 x double> undef, <4 x i32> zeroinitializer
  %20 = fmul <4 x double> %19, %17
  %21 = bitcast %"struct.gfx::DecomposedTransform"* %2 to <4 x float>*
  %22 = load <4 x float>, <4 x float>* %21, align 4
  %23 = fpext <4 x float> %22 to <4 x double>
  %24 = insertelement <4 x double> undef, double %14, i32 0
  %25 = shufflevector <4 x double> %24, <4 x double> undef, <4 x i32> zeroinitializer
  %26 = fmul <4 x double> %25, %23
  %27 = fadd <4 x double> %20, %26
  %28 = fptrunc <4 x double> %27 to <4 x float>
  %29 = bitcast %"struct.gfx::DecomposedTransform"* %0 to <4 x float>*
  store <4 x float> %28, <4 x float>* %29, align 8
  %30 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 1, i64 1
  %31 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %2, i64 0, i32 1, i64 1
  %32 = bitcast float* %30 to <4 x float>*
  %33 = load <4 x float>, <4 x float>* %32, align 4
  %34 = fpext <4 x float> %33 to <4 x double>
  %35 = fmul <4 x double> %19, %34
  %36 = bitcast float* %31 to <4 x float>*
  %37 = load <4 x float>, <4 x float>* %36, align 4
  %38 = fpext <4 x float> %37 to <4 x double>
  %39 = fmul <4 x double> %25, %38
  %40 = fadd <4 x double> %35, %39
  %41 = fptrunc <4 x double> %40 to <4 x float>
  %42 = bitcast float* %10 to <4 x float>*
  store <4 x float> %41, <4 x float>* %42, align 4
  %43 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 2, i64 2
  %44 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %2, i64 0, i32 2, i64 2
  %45 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 2, i64 2
  %46 = bitcast float* %43 to <4 x float>*
  %47 = load <4 x float>, <4 x float>* %46, align 4
  %48 = fpext <4 x float> %47 to <4 x double>
  %49 = fmul <4 x double> %19, %48
  %50 = bitcast float* %44 to <4 x float>*
  %51 = load <4 x float>, <4 x float>* %50, align 4
  %52 = fpext <4 x float> %51 to <4 x double>
  %53 = fmul <4 x double> %25, %52
  %54 = fadd <4 x double> %49, %53
  %55 = fptrunc <4 x double> %54 to <4 x float>
  %56 = bitcast float* %45 to <4 x float>*
  store <4 x float> %55, <4 x float>* %56, align 8
  %57 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 3, i64 3
  %58 = load float, float* %57, align 4
  %59 = fpext float %58 to double
  %60 = fmul double %59, %3
  %61 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %2, i64 0, i32 3, i64 3
  %62 = load float, float* %61, align 4
  %63 = fpext float %62 to double
  %64 = fmul double %14, %63
  %65 = fadd double %60, %64
  %66 = fptrunc double %65 to float
  store float %66, float* %11, align 4
  %67 = bitcast %"class.gfx::Quaternion"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %67) #7
  %68 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %2, i64 0, i32 4
  %69 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 4
  call void @_ZNK3gfx10Quaternion5SlerpERKS0_d(%"class.gfx::Quaternion"* nonnull sret %5, %"class.gfx::Quaternion"* %68, %"class.gfx::Quaternion"* dereferenceable(32) %69, double %3) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* nonnull align 8 %67, i64 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %67) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK3gfx10Quaternion5SlerpERKS0_d(%"class.gfx::Quaternion"* sret, %"class.gfx::Quaternion"*, %"class.gfx::Quaternion"* dereferenceable(32), double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3gfx18DecomposeTransformEPNS_19DecomposedTransformERKNS_9TransformE(%"struct.gfx::DecomposedTransform"*, %"class.gfx::Transform"* nocapture readonly dereferenceable(68)) local_unnamed_addr #0 {
  %3 = bitcast %"struct.gfx::DecomposedTransform"* %0 to i8*
  %4 = alloca %class.SkMatrix44, align 4
  %5 = alloca %class.SkMatrix44, align 4
  %6 = alloca [4 x float], align 16
  %7 = bitcast [4 x float]* %6 to i8*
  %8 = alloca %class.SkMatrix44, align 4
  %9 = alloca %class.SkMatrix44, align 4
  %10 = alloca [3 x [3 x float]], align 16
  %11 = icmp eq %"struct.gfx::DecomposedTransform"* %0, null
  br i1 %11, label %566, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 0, i64 2
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 1, i64 2
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 2, i64 0
  %18 = bitcast float* %17 to <4 x float>*
  %19 = load <4 x float>, <4 x float>* %18, align 4
  %20 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 1
  %21 = load i8, i8* %20, align 4
  %22 = and i8 %21, 8
  %23 = icmp eq i8 %22, 0
  %24 = fcmp oeq float %14, 0.000000e+00
  %25 = fcmp oeq float %16, 0.000000e+00
  %26 = fcmp oeq <4 x float> %19, <float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00>
  %27 = shufflevector <4 x i1> %26, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %28 = and <4 x i1> %26, %27
  %29 = shufflevector <4 x i1> %28, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %30 = and <4 x i1> %28, %29
  %31 = extractelement <4 x i1> %30, i32 0
  %32 = and i1 %31, %25
  %33 = and i1 %32, %24
  %34 = and i1 %33, %23
  br i1 %34, label %35, label %118

35:                                               ; preds = %12
  %36 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 3, i64 2
  %37 = load float, float* %36, align 4
  %38 = fcmp oeq float %37, 0.000000e+00
  br i1 %38, label %39, label %118

39:                                               ; preds = %35
  %40 = bitcast %"class.gfx::Transform"* %1 to <2 x float>*
  %41 = load <2 x float>, <2 x float>* %40, align 4
  %42 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 1, i64 0
  %43 = bitcast float* %42 to <2 x float>*
  %44 = load <2 x float>, <2 x float>* %43, align 4
  %45 = shufflevector <2 x float> %44, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %46 = fpext <2 x float> %41 to <2 x double>
  %47 = fpext <2 x float> %45 to <2 x double>
  %48 = fmul <2 x double> %46, %47
  %49 = extractelement <2 x double> %48, i32 0
  %50 = extractelement <2 x double> %48, i32 1
  %51 = fsub double %49, %50
  %52 = fcmp oeq double %51, 0.000000e+00
  br i1 %52, label %118, label %53

53:                                               ; preds = %39
  %54 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 3, i64 1
  %55 = bitcast float* %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 3, i64 0
  %58 = bitcast float* %57 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = bitcast %"struct.gfx::DecomposedTransform"* %0 to i32*
  store i32 %59, i32* %60, align 8
  %61 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 0, i64 1
  %62 = bitcast float* %61 to i32*
  store i32 %56, i32* %62, align 4
  %63 = fcmp olt double %51, 0.000000e+00
  br i1 %63, label %64, label %73

64:                                               ; preds = %53
  %65 = extractelement <2 x float> %41, i32 0
  %66 = extractelement <2 x float> %44, i32 1
  %67 = fcmp olt float %65, %66
  %68 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 1, i64 0
  %69 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 1, i64 1
  %70 = select i1 %67, float* %68, float* %69
  %71 = load float, float* %70, align 4
  %72 = fsub float -0.000000e+00, %71
  store float %72, float* %70, align 4
  br label %73

73:                                               ; preds = %64, %53
  %74 = extractelement <2 x double> %46, i32 0
  %75 = fmul double %74, %74
  %76 = extractelement <2 x double> %46, i32 1
  %77 = fmul double %76, %76
  %78 = fadd double %75, %77
  %79 = tail call double @sqrt(double %78) #7
  %80 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 1, i64 0
  %81 = load float, float* %80, align 4
  %82 = fpext float %81 to double
  %83 = fmul double %79, %82
  %84 = fptrunc double %83 to float
  store float %84, float* %80, align 4
  %85 = fpext float %84 to double
  %86 = fdiv double %74, %85
  %87 = fdiv double %76, %85
  %88 = extractelement <2 x double> %47, i32 1
  %89 = fmul double %86, %88
  %90 = extractelement <2 x double> %47, i32 0
  %91 = fmul double %87, %90
  %92 = fadd double %89, %91
  %93 = fmul double %86, %92
  %94 = fsub double %88, %93
  %95 = fmul double %87, %92
  %96 = fsub double %90, %95
  %97 = fmul double %94, %94
  %98 = fmul double %96, %96
  %99 = fadd double %97, %98
  %100 = tail call double @sqrt(double %99) #7
  %101 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 1, i64 1
  %102 = load float, float* %101, align 4
  %103 = fpext float %102 to double
  %104 = fmul double %100, %103
  %105 = fptrunc double %104 to float
  store float %105, float* %101, align 4
  %106 = fpext float %105 to double
  %107 = fdiv double %92, %106
  %108 = fptrunc double %107 to float
  %109 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 2, i64 0
  store float %108, float* %109, align 8
  %110 = tail call double @atan2(double %87, double %86) #7
  %111 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 4, i32 0
  %112 = fmul double %110, 5.000000e-01
  %113 = bitcast double* %111 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 0, i64 16, i1 false) #7
  %114 = tail call double @sin(double %112) #7
  %115 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 4, i32 2
  store double %114, double* %115, align 8
  %116 = tail call double @cos(double %112) #7
  %117 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 4, i32 3
  store double %116, double* %117, align 8
  br label %566

118:                                              ; preds = %35, %12, %39
  %119 = bitcast %class.SkMatrix44* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %119) #7
  %120 = bitcast %"class.gfx::Transform"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %119, i8* align 4 %120, i64 68, i1 false)
  %121 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 3, i64 3
  %122 = load float, float* %121, align 4
  %123 = fcmp oeq float %122, 0.000000e+00
  br i1 %123, label %564, label %124

124:                                              ; preds = %118
  %125 = fdiv float 1.000000e+00, %122
  %126 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 0, i64 0
  %127 = load float, float* %126, align 4
  %128 = fmul float %125, %127
  store float %128, float* %126, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %129 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 1, i64 0
  %130 = load float, float* %129, align 4
  %131 = fmul float %125, %130
  store float %131, float* %129, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %132 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 2, i64 0
  %133 = load float, float* %132, align 4
  %134 = fmul float %125, %133
  store float %134, float* %132, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %135 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 3, i64 0
  %136 = load float, float* %135, align 4
  %137 = fmul float %125, %136
  store float %137, float* %135, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %138 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 0, i64 1
  %139 = load float, float* %138, align 4
  %140 = fmul float %125, %139
  store float %140, float* %138, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %141 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 1, i64 1
  %142 = load float, float* %141, align 4
  %143 = fmul float %125, %142
  store float %143, float* %141, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %144 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 2, i64 1
  %145 = load float, float* %144, align 4
  %146 = fmul float %125, %145
  store float %146, float* %144, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %147 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 3, i64 1
  %148 = load float, float* %147, align 4
  %149 = fmul float %125, %148
  store float %149, float* %147, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %150 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 0, i64 2
  %151 = load float, float* %150, align 4
  %152 = fmul float %125, %151
  store float %152, float* %150, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %153 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 1, i64 2
  %154 = load float, float* %153, align 4
  %155 = fmul float %125, %154
  store float %155, float* %153, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %156 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 2, i64 2
  %157 = load float, float* %156, align 4
  %158 = fmul float %125, %157
  store float %158, float* %156, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %159 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 3, i64 2
  %160 = load float, float* %159, align 4
  %161 = fmul float %125, %160
  store float %161, float* %159, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %162 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 0, i64 3
  %163 = load float, float* %162, align 4
  %164 = fmul float %125, %163
  store float %164, float* %162, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %165 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 1, i64 3
  %166 = load float, float* %165, align 4
  %167 = fmul float %125, %166
  store float %167, float* %165, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %168 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 2, i64 3
  %169 = load float, float* %168, align 4
  %170 = fmul float %125, %169
  store float %170, float* %168, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %171 = load float, float* %121, align 4
  %172 = fmul float %125, %171
  store float %172, float* %121, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %173 = bitcast %class.SkMatrix44* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %173) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %173, i8* nonnull align 4 %119, i64 68, i1 false)
  %174 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %5, i64 0, i32 0, i64 0, i64 3
  store float 0.000000e+00, float* %174, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %5) #7
  %175 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %5, i64 0, i32 0, i64 1, i64 3
  store float 0.000000e+00, float* %175, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %5) #7
  %176 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %5, i64 0, i32 0, i64 2, i64 3
  store float 0.000000e+00, float* %176, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %5) #7
  %177 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %5, i64 0, i32 0, i64 3, i64 3
  store float 1.000000e+00, float* %177, align 4
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %5) #7
  %178 = call double @_ZNK10SkMatrix4411determinantEv(%class.SkMatrix44* nonnull %5) #7
  %179 = call double @llvm.fabs.f64(double %178) #7
  %180 = fcmp olt double %179, 1.000000e-08
  br i1 %180, label %562, label %181

181:                                              ; preds = %124
  %182 = load float, float* %162, align 4
  %183 = fcmp une float %182, 0.000000e+00
  br i1 %183, label %184, label %187

184:                                              ; preds = %181
  %185 = bitcast float* %165 to i32*
  %186 = load i32, i32* %185, align 4
  br label %198

187:                                              ; preds = %181
  %188 = load float, float* %165, align 4
  %189 = fcmp une float %188, 0.000000e+00
  %190 = bitcast float %188 to i32
  %191 = load float, float* %168, align 4
  %192 = fcmp une float %191, 0.000000e+00
  %193 = or i1 %189, %192
  br i1 %193, label %198, label %194

194:                                              ; preds = %187
  %195 = getelementptr %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 3, i64 0
  %196 = bitcast float* %195 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %196, i8 0, i64 12, i1 false)
  %197 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 3, i64 3
  store float 1.000000e+00, float* %197, align 4
  br label %218

198:                                              ; preds = %184, %187
  %199 = phi i32 [ %186, %184 ], [ %190, %187 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #7
  %200 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  %201 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  %202 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  %203 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  store float %182, float* %200, align 16
  %204 = bitcast float* %201 to i32*
  store i32 %199, i32* %204, align 4
  %205 = bitcast float* %168 to i32*
  %206 = load i32, i32* %205, align 4
  %207 = bitcast float* %202 to i32*
  store i32 %206, i32* %207, align 8
  %208 = bitcast float* %121 to i32*
  %209 = load i32, i32* %208, align 4
  %210 = bitcast float* %203 to i32*
  store i32 %209, i32* %210, align 4
  %211 = bitcast %class.SkMatrix44* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %211) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %211, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE.rotation_matrix to i8*), i64 68, i1 false)
  %212 = call zeroext i1 @_ZNK10SkMatrix446invertEPS_(%class.SkMatrix44* nonnull %5, %class.SkMatrix44* nonnull %8) #7
  br i1 %212, label %213, label %217

213:                                              ; preds = %198
  %214 = bitcast %class.SkMatrix44* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %214) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %214, i8* nonnull align 4 %211, i64 68, i1 false)
  call void @_ZN10SkMatrix449transposeEv(%class.SkMatrix44* nonnull %9) #7
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* nonnull %9, float* nonnull %200, float* nonnull %200) #7
  %215 = getelementptr %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 3, i64 0
  %216 = bitcast float* %215 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %216, i8* nonnull align 16 %7, i64 16, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %214) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %211) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #7
  br label %218

217:                                              ; preds = %198
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %211) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #7
  br label %562

218:                                              ; preds = %213, %194
  %219 = bitcast float* %135 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %219, i64 12, i1 false)
  %220 = bitcast [3 x [3 x float]]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %220) #7
  %221 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %10, i64 0, i64 0, i64 0
  %222 = bitcast [3 x [3 x float]]* %10 to i8*
  %223 = bitcast %class.SkMatrix44* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %222, i8* nonnull align 4 %223, i64 12, i1 false)
  %224 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %10, i64 0, i64 1, i64 0
  %225 = bitcast float* %224 to i8*
  %226 = bitcast float* %129 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %225, i8* align 4 %226, i64 12, i1 false)
  %227 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %10, i64 0, i64 2, i64 0
  %228 = bitcast float* %227 to i8*
  %229 = bitcast float* %132 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %228, i8* align 4 %229, i64 12, i1 false)
  %230 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %10, i64 0, i64 0, i64 1
  %231 = bitcast [3 x [3 x float]]* %10 to <2 x float>*
  %232 = load <2 x float>, <2 x float>* %231, align 16
  %233 = fpext <2 x float> %232 to <2 x double>
  %234 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %10, i64 0, i64 0, i64 2
  %235 = load float, float* %234, align 8
  %236 = fpext float %235 to double
  %237 = fmul <2 x double> %233, %233
  %238 = extractelement <2 x double> %237, i32 0
  %239 = extractelement <2 x double> %237, i32 1
  %240 = fadd double %238, %239
  %241 = fmul double %236, %236
  %242 = fadd double %240, %241
  %243 = call double @sqrt(double %242) #7
  %244 = fptrunc double %243 to float
  %245 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 1, i64 0
  store float %244, float* %245, align 4
  %246 = fcmp une float %244, 0.000000e+00
  %247 = extractelement <2 x float> %232, i32 0
  %248 = extractelement <2 x float> %232, i32 1
  br i1 %246, label %249, label %258

249:                                              ; preds = %218
  %250 = insertelement <2 x float> undef, float %244, i32 0
  %251 = shufflevector <2 x float> %250, <2 x float> undef, <2 x i32> zeroinitializer
  %252 = fdiv <2 x float> %232, %251
  %253 = extractelement <2 x float> %252, i32 0
  store float %253, float* %221, align 16
  %254 = extractelement <2 x float> %252, i32 1
  store float %254, float* %230, align 4
  %255 = fdiv float %235, %244
  store float %255, float* %234, align 8
  %256 = fpext <2 x float> %252 to <2 x double>
  %257 = fpext float %255 to double
  br label %258

258:                                              ; preds = %218, %249
  %259 = phi double [ %257, %249 ], [ %236, %218 ]
  %260 = phi float [ %255, %249 ], [ %235, %218 ]
  %261 = phi float [ %254, %249 ], [ %248, %218 ]
  %262 = phi float [ %253, %249 ], [ %247, %218 ]
  %263 = phi <2 x double> [ %256, %249 ], [ %233, %218 ]
  %264 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %10, i64 0, i64 1, i64 1
  %265 = bitcast float* %224 to <2 x float>*
  %266 = load <2 x float>, <2 x float>* %265, align 4
  %267 = extractelement <2 x float> %266, i32 0
  %268 = fmul float %262, %267
  %269 = fpext float %268 to double
  %270 = fadd double %269, 0.000000e+00
  %271 = extractelement <2 x float> %266, i32 1
  %272 = fmul float %261, %271
  %273 = fpext float %272 to double
  %274 = fadd double %270, %273
  %275 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %10, i64 0, i64 1, i64 2
  %276 = load float, float* %275, align 4
  %277 = fmul float %260, %276
  %278 = fpext float %277 to double
  %279 = fadd double %274, %278
  %280 = fptrunc double %279 to float
  %281 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 2, i64 0
  store float %280, float* %281, align 8
  %282 = fsub float -0.000000e+00, %280
  %283 = fpext float %282 to double
  %284 = fpext <2 x float> %266 to <2 x double>
  %285 = insertelement <2 x double> undef, double %283, i32 0
  %286 = shufflevector <2 x double> %285, <2 x double> undef, <2 x i32> zeroinitializer
  %287 = fmul <2 x double> %263, %286
  %288 = fadd <2 x double> %287, %284
  %289 = fptrunc <2 x double> %288 to <2 x float>
  %290 = extractelement <2 x float> %289, i32 0
  store float %290, float* %224, align 4
  %291 = extractelement <2 x float> %289, i32 1
  store float %291, float* %264, align 4
  %292 = fpext float %276 to double
  %293 = fmul double %259, %283
  %294 = fadd double %293, %292
  %295 = fptrunc double %294 to float
  store float %295, float* %275, align 4
  %296 = fpext <2 x float> %289 to <2 x double>
  %297 = fpext float %295 to double
  %298 = fmul <2 x double> %296, %296
  %299 = extractelement <2 x double> %298, i32 0
  %300 = extractelement <2 x double> %298, i32 1
  %301 = fadd double %299, %300
  %302 = fmul double %297, %297
  %303 = fadd double %302, %301
  %304 = call double @sqrt(double %303) #7
  %305 = fptrunc double %304 to float
  %306 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 1, i64 1
  store float %305, float* %306, align 4
  %307 = fcmp une float %305, 0.000000e+00
  br i1 %307, label %308, label %317

308:                                              ; preds = %258
  %309 = insertelement <2 x float> undef, float %305, i32 0
  %310 = shufflevector <2 x float> %309, <2 x float> undef, <2 x i32> zeroinitializer
  %311 = fdiv <2 x float> %289, %310
  %312 = extractelement <2 x float> %311, i32 0
  store float %312, float* %224, align 4
  %313 = extractelement <2 x float> %311, i32 1
  store float %313, float* %264, align 4
  %314 = fdiv float %295, %305
  store float %314, float* %275, align 4
  %315 = fpext <2 x float> %311 to <2 x double>
  %316 = fpext float %314 to double
  br label %317

317:                                              ; preds = %258, %308
  %318 = phi double [ %316, %308 ], [ %297, %258 ]
  %319 = phi float [ %314, %308 ], [ %295, %258 ]
  %320 = phi <2 x float> [ %311, %308 ], [ %289, %258 ]
  %321 = phi <2 x double> [ %315, %308 ], [ %296, %258 ]
  %322 = load float, float* %281, align 8
  %323 = fdiv float %322, %305
  store float %323, float* %281, align 8
  %324 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %10, i64 0, i64 2, i64 1
  %325 = bitcast float* %227 to <2 x float>*
  %326 = load <2 x float>, <2 x float>* %325, align 8
  %327 = extractelement <2 x float> %326, i32 0
  %328 = fmul float %262, %327
  %329 = fpext float %328 to double
  %330 = fadd double %329, 0.000000e+00
  %331 = extractelement <2 x float> %326, i32 1
  %332 = fmul float %261, %331
  %333 = fpext float %332 to double
  %334 = fadd double %330, %333
  %335 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %10, i64 0, i64 2, i64 2
  %336 = load float, float* %335, align 8
  %337 = fmul float %260, %336
  %338 = fpext float %337 to double
  %339 = fadd double %334, %338
  %340 = fptrunc double %339 to float
  %341 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 2, i64 1
  store float %340, float* %341, align 4
  %342 = fsub float -0.000000e+00, %340
  %343 = fpext float %342 to double
  %344 = fpext <2 x float> %326 to <2 x double>
  %345 = insertelement <2 x double> undef, double %343, i32 0
  %346 = shufflevector <2 x double> %345, <2 x double> undef, <2 x i32> zeroinitializer
  %347 = fmul <2 x double> %263, %346
  %348 = fadd <2 x double> %347, %344
  %349 = fptrunc <2 x double> %348 to <2 x float>
  %350 = fpext float %336 to double
  %351 = fmul double %259, %343
  %352 = fadd double %351, %350
  %353 = fptrunc double %352 to float
  %354 = extractelement <2 x float> %320, i32 0
  %355 = extractelement <2 x float> %349, i32 0
  %356 = fmul float %354, %355
  %357 = fpext float %356 to double
  %358 = fadd double %357, 0.000000e+00
  %359 = extractelement <2 x float> %320, i32 1
  %360 = extractelement <2 x float> %349, i32 1
  %361 = fmul float %359, %360
  %362 = fpext float %361 to double
  %363 = fadd double %358, %362
  %364 = fmul float %319, %353
  %365 = fpext float %364 to double
  %366 = fadd double %363, %365
  %367 = fptrunc double %366 to float
  %368 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 2, i64 2
  store float %367, float* %368, align 8
  %369 = fsub float -0.000000e+00, %367
  %370 = fpext float %369 to double
  %371 = fpext <2 x float> %349 to <2 x double>
  %372 = insertelement <2 x double> undef, double %370, i32 0
  %373 = shufflevector <2 x double> %372, <2 x double> undef, <2 x i32> zeroinitializer
  %374 = fmul <2 x double> %321, %373
  %375 = fadd <2 x double> %374, %371
  %376 = fptrunc <2 x double> %375 to <2 x float>
  %377 = extractelement <2 x float> %376, i32 0
  store float %377, float* %227, align 8
  %378 = extractelement <2 x float> %376, i32 1
  store float %378, float* %324, align 4
  %379 = fpext float %353 to double
  %380 = fmul double %318, %370
  %381 = fadd double %380, %379
  %382 = fptrunc double %381 to float
  store float %382, float* %335, align 8
  %383 = fpext float %378 to double
  %384 = insertelement <2 x float> undef, float %382, i32 0
  %385 = shufflevector <2 x float> %384, <2 x float> %376, <2 x i32> <i32 0, i32 2>
  %386 = fpext <2 x float> %385 to <2 x double>
  %387 = fmul double %383, %383
  %388 = fmul <2 x double> %386, %386
  %389 = extractelement <2 x double> %388, i32 1
  %390 = fadd double %389, %387
  %391 = extractelement <2 x double> %388, i32 0
  %392 = fadd double %391, %390
  %393 = call double @sqrt(double %392) #7
  %394 = fptrunc double %393 to float
  %395 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 1, i64 2
  store float %394, float* %395, align 4
  %396 = fcmp une float %394, 0.000000e+00
  br i1 %396, label %397, label %404

397:                                              ; preds = %317
  %398 = insertelement <2 x float> undef, float %394, i32 0
  %399 = shufflevector <2 x float> %398, <2 x float> undef, <2 x i32> zeroinitializer
  %400 = fdiv <2 x float> %376, %399
  %401 = extractelement <2 x float> %400, i32 0
  store float %401, float* %227, align 8
  %402 = extractelement <2 x float> %400, i32 1
  store float %402, float* %324, align 4
  %403 = fdiv float %382, %394
  store float %403, float* %335, align 8
  br label %404

404:                                              ; preds = %317, %397
  %405 = phi float [ %403, %397 ], [ %382, %317 ]
  %406 = phi <2 x float> [ %400, %397 ], [ %376, %317 ]
  %407 = load float, float* %341, align 4
  %408 = fdiv float %407, %394
  store float %408, float* %341, align 4
  %409 = load float, float* %368, align 8
  %410 = fdiv float %409, %394
  store float %410, float* %368, align 8
  %411 = fmul float %359, %405
  %412 = extractelement <2 x float> %406, i32 1
  %413 = fmul float %319, %412
  %414 = fsub float %411, %413
  %415 = extractelement <2 x float> %406, i32 0
  %416 = fmul float %319, %415
  %417 = fmul float %405, %354
  %418 = fsub float %416, %417
  %419 = shufflevector <2 x float> %406, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %420 = fmul <2 x float> %419, %320
  %421 = extractelement <2 x float> %420, i32 0
  %422 = extractelement <2 x float> %420, i32 1
  %423 = fsub float %421, %422
  %424 = fmul float %414, %262
  %425 = fpext float %424 to double
  %426 = fadd double %425, 0.000000e+00
  %427 = fmul float %261, %418
  %428 = fpext float %427 to double
  %429 = fadd double %426, %428
  %430 = fmul float %423, %260
  %431 = fpext float %430 to double
  %432 = fadd double %429, %431
  %433 = fptrunc double %432 to float
  %434 = fcmp olt float %433, 0.000000e+00
  %435 = insertelement <2 x double> undef, double %259, i32 0
  %436 = insertelement <2 x double> %435, double %318, i32 1
  %437 = extractelement <2 x double> %263, i32 0
  %438 = extractelement <2 x double> %263, i32 1
  %439 = extractelement <2 x double> %321, i32 0
  %440 = extractelement <2 x double> %321, i32 1
  br i1 %434, label %441, label %465

441:                                              ; preds = %404
  %442 = load float, float* %245, align 4
  %443 = fsub float -0.000000e+00, %442
  store float %443, float* %245, align 4
  %444 = fsub float -0.000000e+00, %262
  store float %444, float* %221, align 16
  %445 = fsub float -0.000000e+00, %261
  store float %445, float* %230, align 4
  %446 = insertelement <2 x float> undef, float %260, i32 0
  %447 = insertelement <2 x float> %446, float %319, i32 1
  %448 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %447
  %449 = extractelement <2 x float> %448, i32 0
  store float %449, float* %234, align 8
  %450 = load float, float* %306, align 4
  %451 = fsub float -0.000000e+00, %450
  store float %451, float* %306, align 4
  %452 = fsub float -0.000000e+00, %354
  store float %452, float* %224, align 4
  %453 = fsub float -0.000000e+00, %359
  store float %453, float* %264, align 4
  %454 = extractelement <2 x float> %448, i32 1
  store float %454, float* %275, align 4
  %455 = fsub float -0.000000e+00, %394
  store float %455, float* %395, align 4
  %456 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %406
  %457 = extractelement <2 x float> %456, i32 0
  store float %457, float* %227, align 8
  %458 = extractelement <2 x float> %456, i32 1
  store float %458, float* %324, align 4
  %459 = fsub float -0.000000e+00, %405
  store float %459, float* %335, align 8
  %460 = fpext float %444 to double
  %461 = fpext float %452 to double
  %462 = fpext float %445 to double
  %463 = fpext float %453 to double
  %464 = fpext <2 x float> %448 to <2 x double>
  br label %465

465:                                              ; preds = %441, %404
  %466 = phi double [ %463, %441 ], [ %440, %404 ]
  %467 = phi double [ %462, %441 ], [ %438, %404 ]
  %468 = phi double [ %461, %441 ], [ %439, %404 ]
  %469 = phi double [ %460, %441 ], [ %437, %404 ]
  %470 = phi float [ %459, %441 ], [ %405, %404 ]
  %471 = phi float [ %453, %441 ], [ %359, %404 ]
  %472 = phi float [ %444, %441 ], [ %262, %404 ]
  %473 = phi <2 x double> [ %464, %441 ], [ %436, %404 ]
  %474 = phi <2 x float> [ %456, %441 ], [ %406, %404 ]
  %475 = fpext <2 x float> %474 to <2 x double>
  %476 = fpext float %470 to double
  %477 = fadd double %469, %466
  %478 = fadd double %477, %476
  %479 = fcmp ogt double %478, 0.000000e+00
  br i1 %479, label %480, label %495

480:                                              ; preds = %465
  %481 = fadd double %478, 1.000000e+00
  %482 = call double @sqrt(double %481) #7
  %483 = fdiv double 5.000000e-01, %482
  %484 = shufflevector <2 x double> %473, <2 x double> %475, <2 x i32> <i32 1, i32 2>
  %485 = shufflevector <2 x double> %475, <2 x double> %473, <2 x i32> <i32 1, i32 2>
  %486 = fsub <2 x double> %484, %485
  %487 = insertelement <2 x double> undef, double %483, i32 0
  %488 = shufflevector <2 x double> %487, <2 x double> undef, <2 x i32> zeroinitializer
  %489 = fmul <2 x double> %486, %488
  %490 = fsub double %467, %468
  %491 = insertelement <2 x double> undef, double %490, i32 0
  %492 = insertelement <2 x double> %491, double %482, i32 1
  %493 = insertelement <2 x double> %487, double 5.000000e-01, i32 1
  %494 = fmul <2 x double> %492, %493
  br label %551

495:                                              ; preds = %465
  %496 = fcmp ogt float %472, %471
  %497 = fcmp ogt float %472, %470
  %498 = and i1 %496, %497
  br i1 %498, label %499, label %516

499:                                              ; preds = %495
  %500 = fadd double %469, 1.000000e+00
  %501 = fsub double %500, %466
  %502 = fsub double %501, %476
  %503 = call double @sqrt(double %502) #7
  %504 = fdiv double 5.000000e-01, %503
  %505 = fadd double %468, %467
  %506 = insertelement <2 x double> undef, double %503, i32 0
  %507 = insertelement <2 x double> %506, double %505, i32 1
  %508 = insertelement <2 x double> <double 5.000000e-01, double undef>, double %504, i32 1
  %509 = fmul <2 x double> %507, %508
  %510 = fadd <2 x double> %473, %475
  %511 = fsub <2 x double> %473, %475
  %512 = shufflevector <2 x double> %510, <2 x double> %511, <2 x i32> <i32 0, i32 3>
  %513 = insertelement <2 x double> undef, double %504, i32 0
  %514 = shufflevector <2 x double> %513, <2 x double> undef, <2 x i32> zeroinitializer
  %515 = fmul <2 x double> %512, %514
  br label %551

516:                                              ; preds = %495
  %517 = fcmp ogt float %471, %470
  %518 = fsub double 1.000000e+00, %469
  br i1 %517, label %519, label %537

519:                                              ; preds = %516
  %520 = fadd double %518, %466
  %521 = fsub double %520, %476
  %522 = call double @sqrt(double %521) #7
  %523 = fdiv double 5.000000e-01, %522
  %524 = fadd double %468, %467
  %525 = insertelement <2 x double> undef, double %524, i32 0
  %526 = insertelement <2 x double> %525, double %522, i32 1
  %527 = insertelement <2 x double> undef, double %523, i32 0
  %528 = insertelement <2 x double> %527, double 5.000000e-01, i32 1
  %529 = fmul <2 x double> %526, %528
  %530 = shufflevector <2 x double> %475, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %531 = shufflevector <2 x double> %473, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %532 = fadd <2 x double> %530, %531
  %533 = fsub <2 x double> %530, %531
  %534 = shufflevector <2 x double> %532, <2 x double> %533, <2 x i32> <i32 0, i32 3>
  %535 = shufflevector <2 x double> %527, <2 x double> undef, <2 x i32> zeroinitializer
  %536 = fmul <2 x double> %534, %535
  br label %551

537:                                              ; preds = %516
  %538 = fsub double %518, %466
  %539 = fadd double %538, %476
  %540 = call double @sqrt(double %539) #7
  %541 = fdiv double 5.000000e-01, %540
  %542 = fadd <2 x double> %473, %475
  %543 = insertelement <2 x double> undef, double %541, i32 0
  %544 = shufflevector <2 x double> %543, <2 x double> undef, <2 x i32> zeroinitializer
  %545 = fmul <2 x double> %542, %544
  %546 = fsub double %467, %468
  %547 = insertelement <2 x double> undef, double %540, i32 0
  %548 = insertelement <2 x double> %547, double %546, i32 1
  %549 = insertelement <2 x double> <double 5.000000e-01, double undef>, double %541, i32 1
  %550 = fmul <2 x double> %548, %549
  br label %551

551:                                              ; preds = %499, %537, %519, %480
  %552 = phi <2 x double> [ %489, %480 ], [ %509, %499 ], [ %529, %519 ], [ %545, %537 ]
  %553 = phi <2 x double> [ %494, %480 ], [ %515, %499 ], [ %536, %519 ], [ %550, %537 ]
  %554 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 4, i32 0
  %555 = fptrunc <2 x double> %552 to <2 x float>
  %556 = fpext <2 x float> %555 to <2 x double>
  %557 = bitcast double* %554 to <2 x double>*
  store <2 x double> %556, <2 x double>* %557, align 8
  %558 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %0, i64 0, i32 4, i32 2
  %559 = fptrunc <2 x double> %553 to <2 x float>
  %560 = fpext <2 x float> %559 to <2 x double>
  %561 = bitcast double* %558 to <2 x double>*
  store <2 x double> %560, <2 x double>* %561, align 8
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %220) #7
  br label %562

562:                                              ; preds = %217, %124, %551
  %563 = phi i1 [ true, %551 ], [ false, %217 ], [ false, %124 ]
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %173) #7
  br label %564

564:                                              ; preds = %118, %562
  %565 = phi i1 [ %563, %562 ], [ false, %118 ]
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %119) #7
  br label %566

566:                                              ; preds = %73, %2, %564
  %567 = phi i1 [ %565, %564 ], [ false, %2 ], [ true, %73 ]
  ret i1 %567
}

declare double @_ZNK10SkMatrix4411determinantEv(%class.SkMatrix44*) local_unnamed_addr #2

declare zeroext i1 @_ZNK10SkMatrix446invertEPS_(%class.SkMatrix44*, %class.SkMatrix44*) local_unnamed_addr #2

declare void @_ZN10SkMatrix449transposeEv(%class.SkMatrix44*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx16ComposeTransformERKNS_19DecomposedTransformE(%"class.gfx::Transform"* noalias nocapture sret, %"struct.gfx::DecomposedTransform"* dereferenceable(88)) local_unnamed_addr #0 {
  %3 = alloca %class.SkMatrix44, align 4
  %4 = alloca %class.SkMatrix44, align 4
  %5 = alloca %"class.gfx::Transform", align 4
  %6 = alloca %class.SkMatrix44, align 4
  %7 = alloca %class.SkMatrix44, align 4
  %8 = alloca %class.SkMatrix44, align 4
  %9 = alloca %class.SkMatrix44, align 4
  %10 = alloca %class.SkMatrix44, align 4
  %11 = bitcast %class.SkMatrix44* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %11) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %11, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE.rotation_matrix to i8*), i64 68, i1 false) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %11, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #7
  %12 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %6, i64 0, i32 1
  store i8 0, i8* %12, align 4, !alias.scope !2
  %13 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 3, i64 0
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4, !noalias !2
  %16 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %6, i64 0, i32 0, i64 0, i64 3
  %17 = bitcast float* %16 to i32*
  store i32 %15, i32* %17, align 4, !alias.scope !2
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %6) #7
  %18 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 3, i64 1
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4, !noalias !2
  %21 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %6, i64 0, i32 0, i64 1, i64 3
  %22 = bitcast float* %21 to i32*
  store i32 %20, i32* %22, align 4, !alias.scope !2
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %6) #7
  %23 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 3, i64 2
  %24 = bitcast float* %23 to i32*
  %25 = load i32, i32* %24, align 4, !noalias !2
  %26 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %6, i64 0, i32 0, i64 2, i64 3
  %27 = bitcast float* %26 to i32*
  store i32 %25, i32* %27, align 4, !alias.scope !2
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %6) #7
  %28 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 3, i64 3
  %29 = bitcast float* %28 to i32*
  %30 = load i32, i32* %29, align 4, !noalias !2
  %31 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %6, i64 0, i32 0, i64 3, i64 3
  %32 = bitcast float* %31 to i32*
  store i32 %30, i32* %32, align 4, !alias.scope !2
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %6) #7
  %33 = bitcast %class.SkMatrix44* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %33) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %33, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE.rotation_matrix to i8*), i64 68, i1 false) #7
  %34 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 0, i64 0
  %35 = load float, float* %34, align 8, !noalias !5
  %36 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 0, i64 1
  %37 = load float, float* %36, align 4, !noalias !5
  %38 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 0, i64 2
  %39 = load float, float* %38, align 8, !noalias !5
  %40 = call dereferenceable(68) %class.SkMatrix44* @_ZN10SkMatrix4412setTranslateEfff(%class.SkMatrix44* nonnull %7, float %35, float %37, float %39) #7
  %41 = bitcast %class.SkMatrix44* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %41) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %41, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE.rotation_matrix to i8*), i64 68, i1 false)
  %42 = bitcast %"class.gfx::Transform"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %42) #7, !noalias !8
  %43 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 4
  call void @_ZN3gfx9TransformC1ERKNS_10QuaternionE(%"class.gfx::Transform"* nonnull %5, %"class.gfx::Quaternion"* dereferenceable(32) %43) #7, !noalias !8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %41, i8* nonnull align 4 %42, i64 68, i1 false) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %42) #7, !noalias !8
  %44 = bitcast %class.SkMatrix44* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %44) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %44, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE.rotation_matrix to i8*), i64 68, i1 false) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %44, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #7
  %45 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %9, i64 0, i32 1
  store i8 0, i8* %45, align 4, !alias.scope !11
  %46 = bitcast %class.SkMatrix44* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %46) #7, !noalias !11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %46, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE.rotation_matrix to i8*), i64 68, i1 false) #7, !noalias !11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %46, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #7, !noalias !11
  %47 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 1
  store i8 0, i8* %47, align 4, !noalias !11
  %48 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 2, i64 2
  %49 = load float, float* %48, align 8, !noalias !11
  %50 = fcmp une float %49, 0.000000e+00
  br i1 %50, label %51, label %53

51:                                               ; preds = %2
  %52 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 2, i64 1
  store float %49, float* %52, align 4, !noalias !11
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %9, %class.SkMatrix44* nonnull dereferenceable(68) %9, %class.SkMatrix44* nonnull dereferenceable(68) %4) #7
  br label %53

53:                                               ; preds = %51, %2
  %54 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 2, i64 1
  %55 = load float, float* %54, align 4, !noalias !11
  %56 = fcmp une float %55, 0.000000e+00
  br i1 %56, label %57, label %63

57:                                               ; preds = %53
  %58 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 2, i64 1
  store float 0.000000e+00, float* %58, align 4, !noalias !11
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %59 = bitcast float* %54 to i32*
  %60 = load i32, i32* %59, align 4, !noalias !11
  %61 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 2, i64 0
  %62 = bitcast float* %61 to i32*
  store i32 %60, i32* %62, align 4, !noalias !11
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %9, %class.SkMatrix44* nonnull dereferenceable(68) %9, %class.SkMatrix44* nonnull dereferenceable(68) %4) #7
  br label %63

63:                                               ; preds = %57, %53
  %64 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 2, i64 0
  %65 = load float, float* %64, align 8, !noalias !11
  %66 = fcmp une float %65, 0.000000e+00
  br i1 %66, label %67, label %73

67:                                               ; preds = %63
  %68 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 2, i64 0
  store float 0.000000e+00, float* %68, align 4, !noalias !11
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  %69 = bitcast float* %64 to i32*
  %70 = load i32, i32* %69, align 8, !noalias !11
  %71 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 0, i64 1, i64 0
  %72 = bitcast float* %71 to i32*
  store i32 %70, i32* %72, align 4, !noalias !11
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %4) #7
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %9, %class.SkMatrix44* nonnull dereferenceable(68) %9, %class.SkMatrix44* nonnull dereferenceable(68) %4) #7
  br label %73

73:                                               ; preds = %63, %67
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %46) #7, !noalias !11
  %74 = bitcast %class.SkMatrix44* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %74) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE.rotation_matrix to i8*), i64 68, i1 false) #7
  %75 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 1, i64 0
  %76 = load float, float* %75, align 4, !noalias !14
  %77 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 1, i64 1
  %78 = load float, float* %77, align 4, !noalias !14
  %79 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 1, i64 2
  %80 = load float, float* %79, align 4, !noalias !14
  %81 = call dereferenceable(68) %class.SkMatrix44* @_ZN10SkMatrix448setScaleEfff(%class.SkMatrix44* nonnull %10, float %76, float %78, float %80) #7
  %82 = bitcast %class.SkMatrix44* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %82) #7, !noalias !17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %82, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE.rotation_matrix to i8*), i64 68, i1 false) #7, !noalias !17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %82, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #7, !noalias !17
  %83 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %3, i64 0, i32 1
  store i8 0, i8* %83, align 4, !noalias !17
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %3, %class.SkMatrix44* nonnull dereferenceable(68) %3, %class.SkMatrix44* nonnull dereferenceable(68) %6) #7, !noalias !17
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %3, %class.SkMatrix44* nonnull dereferenceable(68) %3, %class.SkMatrix44* nonnull dereferenceable(68) %7) #7, !noalias !17
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %3, %class.SkMatrix44* nonnull dereferenceable(68) %3, %class.SkMatrix44* nonnull dereferenceable(68) %8) #7, !noalias !17
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %3, %class.SkMatrix44* nonnull dereferenceable(68) %3, %class.SkMatrix44* nonnull dereferenceable(68) %9) #7, !noalias !17
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %3, %class.SkMatrix44* nonnull dereferenceable(68) %3, %class.SkMatrix44* nonnull dereferenceable(68) %10) #7, !noalias !17
  %84 = bitcast %"class.gfx::Transform"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %84, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN3gfx12_GLOBAL__N_144CheckTransformsMapsIntViewportWithinOnePixelERKNS_4RectERKNS_9TransformES6_.combined to i8*), i64 68, i1 false) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %84, i8* nonnull align 4 %82, i64 65, i1 false) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %82) #7, !noalias !17
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %74) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %44) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %41) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %33) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %11) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3gfx13SnapTransformEPNS_9TransformERKS0_RKNS_4RectE(%"class.gfx::Transform"* nocapture, %"class.gfx::Transform"* dereferenceable(68), %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %4 = alloca %class.SkMatrix44, align 4
  %5 = alloca %"class.gfx::Transform", align 4
  %6 = alloca %"class.gfx::Point3F", align 4
  %7 = alloca %"class.gfx::Point3F", align 4
  %8 = alloca %"class.gfx::Vector3dF", align 8
  %9 = alloca %"class.gfx::Point3F", align 4
  %10 = alloca %"class.gfx::Point3F", align 4
  %11 = alloca %"class.gfx::Vector3dF", align 8
  %12 = alloca %"class.gfx::Point3F", align 4
  %13 = alloca %"class.gfx::Point3F", align 4
  %14 = alloca %"class.gfx::Vector3dF", align 8
  %15 = alloca %"class.gfx::Point3F", align 4
  %16 = alloca %"class.gfx::Point3F", align 4
  %17 = alloca %"class.gfx::Vector3dF", align 8
  %18 = alloca %"class.gfx::Transform", align 4
  %19 = alloca %"class.gfx::Transform", align 4
  %20 = alloca %"struct.gfx::DecomposedTransform", align 16
  %21 = alloca %class.SkMatrix44, align 4
  %22 = alloca %class.SkMatrix44, align 4
  %23 = alloca %class.SkMatrix44, align 4
  %24 = alloca %class.SkMatrix44, align 4
  %25 = alloca %class.SkMatrix44, align 4
  %26 = alloca %"class.gfx::Transform", align 4
  %27 = bitcast %"struct.gfx::DecomposedTransform"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %27) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %27, i8* align 8 bitcast ({ [3 x float], [3 x float], [3 x float], [4 x float], [4 x i8], %"class.gfx::Quaternion" }* @__const._ZN3gfx13SnapTransformEPNS_9TransformERKS0_RKNS_4RectE.decomp to i8*), i64 56, i1 false)
  %28 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %20, i64 0, i32 4
  %29 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %20, i64 0, i32 4, i32 3
  %30 = bitcast %"class.gfx::Quaternion"* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 24, i1 false) #7
  store double 1.000000e+00, double* %29, align 8
  %31 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %20, i64 0, i32 0, i64 2
  %32 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %20, i64 0, i32 0, i64 1
  %33 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %20, i64 0, i32 0, i64 0
  %34 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %20, i64 0, i32 1, i64 2
  store float 1.000000e+00, float* %34, align 4
  %35 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %20, i64 0, i32 1, i64 1
  store float 1.000000e+00, float* %35, align 4
  %36 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %20, i64 0, i32 1, i64 0
  %37 = bitcast %"struct.gfx::DecomposedTransform"* %20 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %37, align 16
  %38 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %20, i64 0, i32 2, i64 0
  %39 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %20, i64 0, i32 3, i64 3
  %40 = bitcast float* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 24, i1 false) #7
  store float 1.000000e+00, float* %39, align 4
  %41 = call zeroext i1 @_ZN3gfx18DecomposeTransformEPNS_19DecomposedTransformERKNS_9TransformE(%"struct.gfx::DecomposedTransform"* nonnull %20, %"class.gfx::Transform"* dereferenceable(68) %1)
  %42 = bitcast %class.SkMatrix44* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %42) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %42, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE.rotation_matrix to i8*), i64 68, i1 false) #7
  %43 = bitcast %"class.gfx::Transform"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %43) #7, !noalias !20
  call void @_ZN3gfx9TransformC1ERKNS_10QuaternionE(%"class.gfx::Transform"* nonnull %5, %"class.gfx::Quaternion"* dereferenceable(32) %28) #7, !noalias !20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %42, i8* nonnull align 4 %43, i64 68, i1 false) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %43) #7, !noalias !20
  %44 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %21, i64 0, i32 0, i64 0, i64 0
  %45 = load float, float* %44, align 4, !alias.scope !25
  %46 = fcmp olt float %45, -5.000000e-01
  %47 = fcmp ogt float %45, 5.000000e-01
  %48 = select i1 %47, float 1.000000e+00, float 0.000000e+00
  %49 = select i1 %46, float -1.000000e+00, float %48
  store float %49, float* %44, align 4, !alias.scope !25
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %21) #7
  %50 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %21, i64 0, i32 0, i64 1, i64 0
  %51 = load float, float* %50, align 4, !alias.scope !25
  %52 = fcmp olt float %51, -5.000000e-01
  %53 = fcmp ogt float %51, 5.000000e-01
  %54 = select i1 %53, float 1.000000e+00, float 0.000000e+00
  %55 = select i1 %52, float -1.000000e+00, float %54
  store float %55, float* %50, align 4, !alias.scope !25
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %21) #7
  %56 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %21, i64 0, i32 0, i64 2, i64 0
  %57 = load float, float* %56, align 4, !alias.scope !25
  %58 = fcmp olt float %57, -5.000000e-01
  %59 = fcmp ogt float %57, 5.000000e-01
  %60 = select i1 %59, float 1.000000e+00, float 0.000000e+00
  %61 = select i1 %58, float -1.000000e+00, float %60
  store float %61, float* %56, align 4, !alias.scope !25
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %21) #7
  %62 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %21, i64 0, i32 0, i64 0, i64 1
  %63 = load float, float* %62, align 4, !alias.scope !25
  %64 = fcmp olt float %63, -5.000000e-01
  %65 = fcmp ogt float %63, 5.000000e-01
  %66 = select i1 %65, float 1.000000e+00, float 0.000000e+00
  %67 = select i1 %64, float -1.000000e+00, float %66
  store float %67, float* %62, align 4, !alias.scope !25
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %21) #7
  %68 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %21, i64 0, i32 0, i64 1, i64 1
  %69 = load float, float* %68, align 4, !alias.scope !25
  %70 = fcmp olt float %69, -5.000000e-01
  %71 = fcmp ogt float %69, 5.000000e-01
  %72 = select i1 %71, float 1.000000e+00, float 0.000000e+00
  %73 = select i1 %70, float -1.000000e+00, float %72
  store float %73, float* %68, align 4, !alias.scope !25
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %21) #7
  %74 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %21, i64 0, i32 0, i64 2, i64 1
  %75 = load float, float* %74, align 4, !alias.scope !25
  %76 = fcmp olt float %75, -5.000000e-01
  %77 = fcmp ogt float %75, 5.000000e-01
  %78 = select i1 %77, float 1.000000e+00, float 0.000000e+00
  %79 = select i1 %76, float -1.000000e+00, float %78
  store float %79, float* %74, align 4, !alias.scope !25
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %21) #7
  %80 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %21, i64 0, i32 0, i64 0, i64 2
  %81 = load float, float* %80, align 4, !alias.scope !25
  %82 = fcmp olt float %81, -5.000000e-01
  %83 = fcmp ogt float %81, 5.000000e-01
  %84 = select i1 %83, float 1.000000e+00, float 0.000000e+00
  %85 = select i1 %82, float -1.000000e+00, float %84
  store float %85, float* %80, align 4, !alias.scope !25
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %21) #7
  %86 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %21, i64 0, i32 0, i64 1, i64 2
  %87 = load float, float* %86, align 4, !alias.scope !25
  %88 = fcmp olt float %87, -5.000000e-01
  %89 = fcmp ogt float %87, 5.000000e-01
  %90 = select i1 %89, float 1.000000e+00, float 0.000000e+00
  %91 = select i1 %88, float -1.000000e+00, float %90
  store float %91, float* %86, align 4, !alias.scope !25
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %21) #7
  %92 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %21, i64 0, i32 0, i64 2, i64 2
  %93 = load float, float* %92, align 4, !alias.scope !25
  %94 = fcmp olt float %93, -5.000000e-01
  %95 = fcmp ogt float %93, 5.000000e-01
  %96 = select i1 %95, float 1.000000e+00, float 0.000000e+00
  %97 = select i1 %94, float -1.000000e+00, float %96
  store float %97, float* %92, align 4, !alias.scope !25
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %21) #7
  %98 = bitcast %class.SkMatrix44* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %98) #7
  %99 = load float, float* %33, align 16
  %100 = load float, float* %32, align 4
  %101 = load float, float* %31, align 8
  %102 = fpext float %99 to double
  %103 = fadd double %102, 5.000000e-01
  %104 = call double @llvm.floor.f64(double %103) #7
  %105 = fptrunc double %104 to float
  %106 = fpext float %100 to double
  %107 = fadd double %106, 5.000000e-01
  %108 = call double @llvm.floor.f64(double %107) #7
  %109 = fptrunc double %108 to float
  %110 = fpext float %101 to double
  %111 = fadd double %110, 5.000000e-01
  %112 = call double @llvm.floor.f64(double %111) #7
  %113 = fptrunc double %112 to float
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %98, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE.rotation_matrix to i8*), i64 68, i1 false) #7
  %114 = call dereferenceable(68) %class.SkMatrix44* @_ZN10SkMatrix4412setTranslateEfff(%class.SkMatrix44* nonnull %22, float %105, float %109, float %113) #7
  %115 = bitcast %class.SkMatrix44* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %115) #7
  %116 = load float, float* %36, align 4
  %117 = load float, float* %35, align 8
  %118 = load float, float* %34, align 4
  %119 = fpext float %116 to double
  %120 = fadd double %119, 5.000000e-01
  %121 = call double @llvm.floor.f64(double %120) #7
  %122 = fptrunc double %121 to float
  %123 = fpext float %117 to double
  %124 = fadd double %123, 5.000000e-01
  %125 = call double @llvm.floor.f64(double %124) #7
  %126 = fptrunc double %125 to float
  %127 = fpext float %118 to double
  %128 = fadd double %127, 5.000000e-01
  %129 = call double @llvm.floor.f64(double %128) #7
  %130 = fptrunc double %129 to float
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %115, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE.rotation_matrix to i8*), i64 68, i1 false) #7
  %131 = call dereferenceable(68) %class.SkMatrix44* @_ZN10SkMatrix448setScaleEfff(%class.SkMatrix44* nonnull %23, float %122, float %126, float %130) #7
  %132 = bitcast %class.SkMatrix44* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %132) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %132, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE.rotation_matrix to i8*), i64 68, i1 false) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %132, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #7
  %133 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %24, i64 0, i32 1
  store i8 0, i8* %133, align 4, !alias.scope !26
  %134 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %20, i64 0, i32 3, i64 0
  %135 = bitcast float* %134 to i32*
  %136 = load i32, i32* %135, align 4, !noalias !26
  %137 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %24, i64 0, i32 0, i64 0, i64 3
  %138 = bitcast float* %137 to i32*
  store i32 %136, i32* %138, align 4, !alias.scope !26
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %24) #7
  %139 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %20, i64 0, i32 3, i64 1
  %140 = bitcast float* %139 to i32*
  %141 = load i32, i32* %140, align 4, !noalias !26
  %142 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %24, i64 0, i32 0, i64 1, i64 3
  %143 = bitcast float* %142 to i32*
  store i32 %141, i32* %143, align 4, !alias.scope !26
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %24) #7
  %144 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %20, i64 0, i32 3, i64 2
  %145 = bitcast float* %144 to i32*
  %146 = load i32, i32* %145, align 4, !noalias !26
  %147 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %24, i64 0, i32 0, i64 2, i64 3
  %148 = bitcast float* %147 to i32*
  store i32 %146, i32* %148, align 4, !alias.scope !26
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %24) #7
  %149 = bitcast float* %39 to i32*
  %150 = load i32, i32* %149, align 4, !noalias !26
  %151 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %24, i64 0, i32 0, i64 3, i64 3
  %152 = bitcast float* %151 to i32*
  store i32 %150, i32* %152, align 4, !alias.scope !26
  call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* nonnull %24) #7
  %153 = bitcast %class.SkMatrix44* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %153) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %153, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE.rotation_matrix to i8*), i64 68, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %153, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #7
  %154 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %25, i64 0, i32 1
  store i8 0, i8* %154, align 4
  %155 = bitcast %"class.gfx::Transform"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %155) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %155, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN3gfx12_GLOBAL__N_144CheckTransformsMapsIntViewportWithinOnePixelERKNS_4RectERKNS_9TransformES6_.combined to i8*), i64 68, i1 false)
  %156 = bitcast %class.SkMatrix44* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %156) #7, !noalias !29
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %156, i8* align 4 bitcast (%class.SkMatrix44* @__const._ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE.rotation_matrix to i8*), i64 68, i1 false) #7, !noalias !29
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %156, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #7, !noalias !29
  %157 = getelementptr inbounds %class.SkMatrix44, %class.SkMatrix44* %4, i64 0, i32 1
  store i8 0, i8* %157, align 4, !noalias !29
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %4, %class.SkMatrix44* nonnull dereferenceable(68) %4, %class.SkMatrix44* nonnull dereferenceable(68) %24) #7, !noalias !29
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %4, %class.SkMatrix44* nonnull dereferenceable(68) %4, %class.SkMatrix44* nonnull dereferenceable(68) %22) #7, !noalias !29
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %4, %class.SkMatrix44* nonnull dereferenceable(68) %4, %class.SkMatrix44* nonnull dereferenceable(68) %21) #7, !noalias !29
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %4, %class.SkMatrix44* nonnull dereferenceable(68) %4, %class.SkMatrix44* nonnull dereferenceable(68) %25) #7, !noalias !29
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %4, %class.SkMatrix44* nonnull dereferenceable(68) %4, %class.SkMatrix44* nonnull dereferenceable(68) %23) #7, !noalias !29
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %155, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN3gfx12_GLOBAL__N_144CheckTransformsMapsIntViewportWithinOnePixelERKNS_4RectERKNS_9TransformES6_.combined to i8*), i64 68, i1 false) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %155, i8* nonnull align 4 %156, i64 65, i1 false) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %156) #7, !noalias !29
  %158 = bitcast %"class.gfx::Transform"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %158) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %158, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN3gfx12_GLOBAL__N_144CheckTransformsMapsIntViewportWithinOnePixelERKNS_4RectERKNS_9TransformES6_.combined to i8*), i64 68, i1 false) #7
  %159 = call zeroext i1 @_ZNK3gfx9Transform10GetInverseEPS0_(%"class.gfx::Transform"* %1, %"class.gfx::Transform"* nonnull %18) #7
  %160 = bitcast %"class.gfx::Transform"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %160) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %160, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN3gfx12_GLOBAL__N_144CheckTransformsMapsIntViewportWithinOnePixelERKNS_4RectERKNS_9TransformES6_.combined to i8*), i64 68, i1 false) #7
  %161 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %19, i64 0, i32 0
  %162 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %26, i64 0, i32 0
  %163 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %18, i64 0, i32 0
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %161, %class.SkMatrix44* nonnull dereferenceable(68) %162, %class.SkMatrix44* nonnull dereferenceable(68) %163) #7
  %164 = bitcast %"class.gfx::Point3F"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %164) #7
  %165 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %12, i64 0, i32 0
  %166 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %12, i64 0, i32 1
  %167 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %12, i64 0, i32 2
  %168 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 0
  %169 = load i32, i32* %168, align 4
  %170 = sitofp i32 %169 to float
  %171 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 1
  %172 = load i32, i32* %171, align 4
  %173 = sitofp i32 %172 to float
  store float %170, float* %165, align 4
  store float %173, float* %166, align 4
  store float 0.000000e+00, float* %167, align 4
  %174 = bitcast %"class.gfx::Point3F"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %174) #7
  %175 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %13, i64 0, i32 0
  %176 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %13, i64 0, i32 1
  %177 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %13, i64 0, i32 2
  store float %170, float* %175, align 4
  store float %173, float* %176, align 4
  store float 0.000000e+00, float* %177, align 4
  call void @_ZNK3gfx9Transform14TransformPointEPNS_7Point3FE(%"class.gfx::Transform"* nonnull %19, %"class.gfx::Point3F"* nonnull %13) #7
  %178 = bitcast %"class.gfx::Vector3dF"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %178) #7
  %179 = call { <2 x float>, float } @_ZN3gfxmiERKNS_7Point3FES2_(%"class.gfx::Point3F"* nonnull dereferenceable(12) %13, %"class.gfx::Point3F"* nonnull dereferenceable(12) %12) #7
  %180 = extractvalue { <2 x float>, float } %179, 0
  %181 = extractvalue { <2 x float>, float } %179, 1
  %182 = bitcast %"class.gfx::Vector3dF"* %14 to <2 x float>*
  store <2 x float> %180, <2 x float>* %182, align 8
  %183 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %14, i64 0, i32 2
  store float %181, float* %183, align 8
  %184 = call float @_ZNK3gfx9Vector3dF6LengthEv(%"class.gfx::Vector3dF"* nonnull %14) #7
  %185 = fcmp ule float %184, 1.000000e+00
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %178) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %174) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %164) #7
  br i1 %185, label %186, label %234

186:                                              ; preds = %3
  %187 = load i32, i32* %168, align 4
  %188 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 0
  %189 = load i32, i32* %188, align 4
  %190 = add nsw i32 %189, %187
  %191 = load i32, i32* %171, align 4
  %192 = bitcast %"class.gfx::Point3F"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %192) #7
  %193 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %9, i64 0, i32 0
  %194 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %9, i64 0, i32 1
  %195 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %9, i64 0, i32 2
  %196 = sitofp i32 %190 to float
  %197 = sitofp i32 %191 to float
  store float %196, float* %193, align 4
  store float %197, float* %194, align 4
  store float 0.000000e+00, float* %195, align 4
  %198 = bitcast %"class.gfx::Point3F"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %198) #7
  %199 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %10, i64 0, i32 0
  %200 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %10, i64 0, i32 1
  %201 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %10, i64 0, i32 2
  store float %196, float* %199, align 4
  store float %197, float* %200, align 4
  store float 0.000000e+00, float* %201, align 4
  call void @_ZNK3gfx9Transform14TransformPointEPNS_7Point3FE(%"class.gfx::Transform"* nonnull %19, %"class.gfx::Point3F"* nonnull %10) #7
  %202 = bitcast %"class.gfx::Vector3dF"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %202) #7
  %203 = call { <2 x float>, float } @_ZN3gfxmiERKNS_7Point3FES2_(%"class.gfx::Point3F"* nonnull dereferenceable(12) %10, %"class.gfx::Point3F"* nonnull dereferenceable(12) %9) #7
  %204 = extractvalue { <2 x float>, float } %203, 0
  %205 = extractvalue { <2 x float>, float } %203, 1
  %206 = bitcast %"class.gfx::Vector3dF"* %11 to <2 x float>*
  store <2 x float> %204, <2 x float>* %206, align 8
  %207 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %11, i64 0, i32 2
  store float %205, float* %207, align 8
  %208 = call float @_ZNK3gfx9Vector3dF6LengthEv(%"class.gfx::Vector3dF"* nonnull %11) #7
  %209 = fcmp ule float %208, 1.000000e+00
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %202) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %198) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %192) #7
  br i1 %209, label %210, label %234

210:                                              ; preds = %186
  %211 = load i32, i32* %168, align 4
  %212 = load i32, i32* %171, align 4
  %213 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 1
  %214 = load i32, i32* %213, align 4
  %215 = add nsw i32 %214, %212
  %216 = bitcast %"class.gfx::Point3F"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %216) #7
  %217 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %6, i64 0, i32 0
  %218 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %6, i64 0, i32 1
  %219 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %6, i64 0, i32 2
  %220 = sitofp i32 %211 to float
  %221 = sitofp i32 %215 to float
  store float %220, float* %217, align 4
  store float %221, float* %218, align 4
  store float 0.000000e+00, float* %219, align 4
  %222 = bitcast %"class.gfx::Point3F"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %222) #7
  %223 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %7, i64 0, i32 0
  %224 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %7, i64 0, i32 1
  %225 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %7, i64 0, i32 2
  store float %220, float* %223, align 4
  store float %221, float* %224, align 4
  store float 0.000000e+00, float* %225, align 4
  call void @_ZNK3gfx9Transform14TransformPointEPNS_7Point3FE(%"class.gfx::Transform"* nonnull %19, %"class.gfx::Point3F"* nonnull %7) #7
  %226 = bitcast %"class.gfx::Vector3dF"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %226) #7
  %227 = call { <2 x float>, float } @_ZN3gfxmiERKNS_7Point3FES2_(%"class.gfx::Point3F"* nonnull dereferenceable(12) %7, %"class.gfx::Point3F"* nonnull dereferenceable(12) %6) #7
  %228 = extractvalue { <2 x float>, float } %227, 0
  %229 = extractvalue { <2 x float>, float } %227, 1
  %230 = bitcast %"class.gfx::Vector3dF"* %8 to <2 x float>*
  store <2 x float> %228, <2 x float>* %230, align 8
  %231 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %8, i64 0, i32 2
  store float %229, float* %231, align 8
  %232 = call float @_ZNK3gfx9Vector3dF6LengthEv(%"class.gfx::Vector3dF"* nonnull %8) #7
  %233 = fcmp ule float %232, 1.000000e+00
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %226) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %222) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %216) #7
  br i1 %233, label %235, label %234

234:                                              ; preds = %210, %186, %3
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %160) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %158) #7
  br label %262

235:                                              ; preds = %210
  %236 = load i32, i32* %168, align 4
  %237 = load i32, i32* %188, align 4
  %238 = add nsw i32 %237, %236
  %239 = load i32, i32* %171, align 4
  %240 = load i32, i32* %213, align 4
  %241 = add nsw i32 %240, %239
  %242 = bitcast %"class.gfx::Point3F"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %242) #7
  %243 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %15, i64 0, i32 0
  %244 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %15, i64 0, i32 1
  %245 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %15, i64 0, i32 2
  %246 = sitofp i32 %238 to float
  %247 = sitofp i32 %241 to float
  store float %246, float* %243, align 4
  store float %247, float* %244, align 4
  store float 0.000000e+00, float* %245, align 4
  %248 = bitcast %"class.gfx::Point3F"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %248) #7
  %249 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %16, i64 0, i32 0
  %250 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %16, i64 0, i32 1
  %251 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %16, i64 0, i32 2
  store float %246, float* %249, align 4
  store float %247, float* %250, align 4
  store float 0.000000e+00, float* %251, align 4
  call void @_ZNK3gfx9Transform14TransformPointEPNS_7Point3FE(%"class.gfx::Transform"* nonnull %19, %"class.gfx::Point3F"* nonnull %16) #7
  %252 = bitcast %"class.gfx::Vector3dF"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %252) #7
  %253 = call { <2 x float>, float } @_ZN3gfxmiERKNS_7Point3FES2_(%"class.gfx::Point3F"* nonnull dereferenceable(12) %16, %"class.gfx::Point3F"* nonnull dereferenceable(12) %15) #7
  %254 = extractvalue { <2 x float>, float } %253, 0
  %255 = extractvalue { <2 x float>, float } %253, 1
  %256 = bitcast %"class.gfx::Vector3dF"* %17 to <2 x float>*
  store <2 x float> %254, <2 x float>* %256, align 8
  %257 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %17, i64 0, i32 2
  store float %255, float* %257, align 8
  %258 = call float @_ZNK3gfx9Vector3dF6LengthEv(%"class.gfx::Vector3dF"* nonnull %17) #7
  %259 = fcmp ule float %258, 1.000000e+00
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %252) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %248) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %242) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %160) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %158) #7
  br i1 %259, label %260, label %262

260:                                              ; preds = %235
  %261 = bitcast %"class.gfx::Transform"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %261, i8* nonnull align 4 %155, i64 68, i1 false)
  br label %262

262:                                              ; preds = %234, %260, %235
  %263 = phi i1 [ false, %234 ], [ true, %260 ], [ false, %235 ]
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %155) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %153) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %132) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %115) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %98) #7
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %42) #7
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %27) #7
  ret i1 %263
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx19TransformAboutPivotERKNS_5PointERKNS_9TransformE(%"class.gfx::Transform"* noalias sret, %"class.gfx::Point"* nocapture readonly dereferenceable(8), %"class.gfx::Transform"* dereferenceable(68)) local_unnamed_addr #0 {
  %4 = bitcast %"class.gfx::Transform"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN3gfx12_GLOBAL__N_144CheckTransformsMapsIntViewportWithinOnePixelERKNS_4RectERKNS_9TransformES6_.combined to i8*), i64 68, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #7
  %5 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %5, align 4
  %6 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = sitofp i32 %7 to float
  %9 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = sitofp i32 %10 to float
  tail call void @_ZN3gfx9Transform9TranslateEff(%"class.gfx::Transform"* %0, float %8, float %11) #7
  tail call void @_ZN3gfx9Transform18PreconcatTransformERKS0_(%"class.gfx::Transform"* %0, %"class.gfx::Transform"* dereferenceable(68) %2) #7
  %12 = load i32, i32* %6, align 4
  %13 = sub nsw i32 0, %12
  %14 = sitofp i32 %13 to float
  %15 = load i32, i32* %9, align 4
  %16 = sub nsw i32 0, %15
  %17 = sitofp i32 %16 to float
  tail call void @_ZN3gfx9Transform9TranslateEff(%"class.gfx::Transform"* %0, float %14, float %17) #7
  ret void
}

declare void @_ZN3gfx9Transform18PreconcatTransformERKS0_(%"class.gfx::Transform"*, %"class.gfx::Transform"* dereferenceable(68)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx21TransformBetweenRectsERKNS_5RectFES2_(%"class.gfx::Transform"* noalias sret, %"class.gfx::RectF"* nocapture readonly dereferenceable(16), %"class.gfx::RectF"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 {
  %4 = alloca <2 x float>, align 8
  %5 = bitcast <2 x float>* %4 to %"class.gfx::Vector2dF"*
  %6 = bitcast %"class.gfx::Transform"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN3gfx12_GLOBAL__N_144CheckTransformsMapsIntViewportWithinOnePixelERKNS_4RectERKNS_9TransformES6_.combined to i8*), i64 68, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #7
  %7 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %7, align 4
  %8 = bitcast <2 x float>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #7
  %9 = bitcast %"class.gfx::RectF"* %2 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %11 = bitcast %"class.gfx::RectF"* %1 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = fsub <2 x float> %10, %12
  store <2 x float> %13, <2 x float>* %4, align 8
  call void @_ZN3gfx9Transform9TranslateERKNS_9Vector2dFE(%"class.gfx::Transform"* %0, %"class.gfx::Vector2dF"* nonnull dereferenceable(8) %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #7
  %14 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %2, i64 0, i32 1, i32 0
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 0
  %17 = load float, float* %16, align 4
  %18 = fdiv float %15, %17
  %19 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %2, i64 0, i32 1, i32 1
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 1
  %22 = load float, float* %21, align 4
  %23 = fdiv float %20, %22
  call void @_ZN3gfx9Transform5ScaleEff(%"class.gfx::Transform"* %0, float %18, float %23) #7
  ret void
}

declare void @_ZN3gfx9Transform9TranslateERKNS_9Vector2dFE(%"class.gfx::Transform"*, %"class.gfx::Vector2dF"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3gfx19DecomposedTransform8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"struct.gfx::DecomposedTransform"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 0, i64 0
  %4 = load float, float* %3, align 8
  %5 = fpext float %4 to double
  %6 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 0, i64 1
  %7 = load float, float* %6, align 4
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 0, i64 2
  %10 = load float, float* %9, align 8
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 1, i64 0
  %13 = load float, float* %12, align 4
  %14 = fpext float %13 to double
  %15 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 1, i64 1
  %16 = load float, float* %15, align 4
  %17 = fpext float %16 to double
  %18 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 1, i64 2
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  %21 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 2, i64 0
  %22 = load float, float* %21, align 8
  %23 = fpext float %22 to double
  %24 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 2, i64 1
  %25 = load float, float* %24, align 4
  %26 = fpext float %25 to double
  %27 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 2, i64 2
  %28 = load float, float* %27, align 8
  %29 = fpext float %28 to double
  %30 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 3, i64 0
  %31 = load float, float* %30, align 4
  %32 = fpext float %31 to double
  %33 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 3, i64 1
  %34 = load float, float* %33, align 4
  %35 = fpext float %34 to double
  %36 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 3, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 3, i64 3
  %40 = load float, float* %39, align 4
  %41 = fpext float %40 to double
  %42 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 4, i32 0
  %43 = load double, double* %42, align 8
  %44 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 4, i32 1
  %45 = load double, double* %44, align 8
  %46 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 4, i32 2
  %47 = load double, double* %46, align 8
  %48 = getelementptr inbounds %"struct.gfx::DecomposedTransform", %"struct.gfx::DecomposedTransform"* %1, i64 0, i32 4, i32 3
  %49 = load double, double* %48, align 8
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([169 x i8], [169 x i8]* @.str, i64 0, i64 0), double %5, double %8, double %11, double %14, double %17, double %20, double %23, double %26, double %29, double %32, double %35, double %38, double %41, double %43, double %45, double %47, double %49) #7
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx21OrthoProjectionMatrixEffff(%"class.gfx::Transform"* noalias sret, float, float, float, float) local_unnamed_addr #0 {
  %6 = fsub float %2, %1
  %7 = fsub float %4, %3
  %8 = bitcast %"class.gfx::Transform"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN3gfx12_GLOBAL__N_144CheckTransformsMapsIntViewportWithinOnePixelERKNS_4RectERKNS_9TransformES6_.combined to i8*), i64 68, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #7
  %9 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %9, align 4
  %10 = fcmp une float %6, 0.000000e+00
  %11 = fcmp une float %7, 0.000000e+00
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %28

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0
  %15 = fdiv float 2.000000e+00, %6
  %16 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  store float %15, float* %16, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %14) #7
  %17 = fadd float %1, %2
  %18 = fsub float -0.000000e+00, %17
  %19 = fdiv float %18, %6
  %20 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  store float %19, float* %20, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %14) #7
  %21 = fdiv float 2.000000e+00, %7
  %22 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  store float %21, float* %22, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %14) #7
  %23 = fadd float %3, %4
  %24 = fsub float -0.000000e+00, %23
  %25 = fdiv float %24, %7
  %26 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  store float %25, float* %26, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %14) #7
  %27 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  store float 0.000000e+00, float* %27, align 4
  tail call void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44* %14) #7
  br label %28

28:                                               ; preds = %5, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx12WindowMatrixEiiii(%"class.gfx::Transform"* noalias sret, i32, i32, i32, i32) local_unnamed_addr #0 {
  %6 = bitcast %"class.gfx::Transform"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN3gfx12_GLOBAL__N_144CheckTransformsMapsIntViewportWithinOnePixelERKNS_4RectERKNS_9TransformES6_.combined to i8*), i64 68, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #7
  %7 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %7, align 4
  %8 = sitofp i32 %1 to float
  %9 = sitofp i32 %2 to float
  tail call void @_ZN3gfx9Transform11Translate3dEfff(%"class.gfx::Transform"* %0, float %8, float %9, float 0.000000e+00) #7
  %10 = sitofp i32 %3 to float
  %11 = sitofp i32 %4 to float
  tail call void @_ZN3gfx9Transform7Scale3dEfff(%"class.gfx::Transform"* %0, float %10, float %11, float 0.000000e+00) #7
  tail call void @_ZN3gfx9Transform11Translate3dEfff(%"class.gfx::Transform"* %0, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01) #7
  tail call void @_ZN3gfx9Transform7Scale3dEfff(%"class.gfx::Transform"* %0, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01) #7
  ret void
}

declare void @_ZN3gfx9Transform11Translate3dEfff(%"class.gfx::Transform"*, float, float, float) local_unnamed_addr #2

declare void @_ZN3gfx9Transform7Scale3dEfff(%"class.gfx::Transform"*, float, float, float) local_unnamed_addr #2

; Function Attrs: nofree nounwind ssp uwtable
define hidden <2 x float> @_ZN3gfx33ComputeTransform2dScaleComponentsERKNS_9TransformEf(%"class.gfx::Transform"* nocapture readonly dereferenceable(68), float) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 1
  %4 = load i8, i8* %3, align 4
  %5 = and i8 %4, 8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = insertelement <2 x float> undef, float %1, i32 0
  %9 = shufflevector <2 x float> %8, <2 x float> undef, <2 x i32> zeroinitializer
  br label %73

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 0, i64 0
  %12 = load float, float* %11, align 4
  %13 = fpext float %12 to double
  %14 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 0, i64 1
  %15 = load float, float* %14, align 4
  %16 = fpext float %15 to double
  %17 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = tail call double @llvm.fabs.f64(double %16) #7
  %21 = fcmp olt double %20, 0x3CB0000000000000
  %22 = tail call double @llvm.fabs.f64(double %19) #7
  %23 = fcmp olt double %22, 0x3CB0000000000000
  %24 = and i1 %21, %23
  %25 = tail call double @llvm.fabs.f64(double %13) #7
  br i1 %24, label %38, label %26

26:                                               ; preds = %10
  %27 = fcmp olt double %25, 0x3CB0000000000000
  br i1 %27, label %28, label %31

28:                                               ; preds = %26
  %29 = or i1 %21, %23
  %30 = select i1 %23, double %20, double %22
  br i1 %29, label %38, label %31

31:                                               ; preds = %28, %26
  %32 = fmul double %13, %13
  %33 = fmul double %16, %16
  %34 = fadd double %32, %33
  %35 = fmul double %19, %19
  %36 = fadd double %34, %35
  %37 = tail call double @sqrt(double %36) #7
  br label %38

38:                                               ; preds = %10, %28, %31
  %39 = phi double [ %37, %31 ], [ %30, %28 ], [ %25, %10 ]
  %40 = fptrunc double %39 to float
  %41 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %42 = load float, float* %41, align 4
  %43 = fpext float %42 to double
  %44 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 1, i64 1
  %45 = load float, float* %44, align 4
  %46 = fpext float %45 to double
  %47 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %48 = load float, float* %47, align 4
  %49 = fpext float %48 to double
  %50 = tail call double @llvm.fabs.f64(double %46) #7
  %51 = fcmp olt double %50, 0x3CB0000000000000
  %52 = tail call double @llvm.fabs.f64(double %49) #7
  %53 = fcmp olt double %52, 0x3CB0000000000000
  %54 = and i1 %51, %53
  %55 = tail call double @llvm.fabs.f64(double %43) #7
  br i1 %54, label %68, label %56

56:                                               ; preds = %38
  %57 = fcmp olt double %55, 0x3CB0000000000000
  br i1 %57, label %58, label %61

58:                                               ; preds = %56
  %59 = or i1 %51, %53
  %60 = select i1 %53, double %50, double %52
  br i1 %59, label %68, label %61

61:                                               ; preds = %58, %56
  %62 = fmul double %43, %43
  %63 = fmul double %46, %46
  %64 = fadd double %62, %63
  %65 = fmul double %49, %49
  %66 = fadd double %64, %65
  %67 = tail call double @sqrt(double %66) #7
  br label %68

68:                                               ; preds = %38, %58, %61
  %69 = phi double [ %67, %61 ], [ %60, %58 ], [ %55, %38 ]
  %70 = fptrunc double %69 to float
  %71 = insertelement <2 x float> undef, float %40, i32 0
  %72 = insertelement <2 x float> %71, float %70, i32 1
  br label %73

73:                                               ; preds = %68, %7
  %74 = phi <2 x float> [ %9, %7 ], [ %72, %68 ]
  ret <2 x float> %74
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3gfx26ComputeApproximateMaxScaleERKNS_9TransformE(%"class.gfx::Transform"* dereferenceable(68)) local_unnamed_addr #0 {
  %2 = alloca <4 x float>, align 16
  %3 = bitcast <4 x float>* %2 to %"class.gfx::RectF"*
  %4 = bitcast <4 x float>* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #7
  %5 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %3, i64 0, i32 1, i32 0
  %6 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %3, i64 0, i32 1, i32 1
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %2, align 16
  call void @_ZNK3gfx9Transform13TransformRectEPNS_5RectFE(%"class.gfx::Transform"* %0, %"class.gfx::RectF"* nonnull %3) #7
  %7 = load float, float* %5, align 8
  %8 = load float, float* %6, align 4
  %9 = fcmp olt float %7, %8
  %10 = select i1 %9, float %8, float %7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #7
  ret float %10
}

declare void @_ZNK3gfx9Transform13TransformRectEPNS_5RectFE(%"class.gfx::Transform"*, %"class.gfx::RectF"*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @atan2(double, double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #3

declare void @_ZN10SkMatrix4417recomputeTypeMaskEv(%class.SkMatrix44*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #6

declare void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44*, float*, float*) local_unnamed_addr #2

declare dereferenceable(68) %class.SkMatrix44* @_ZN10SkMatrix4412setTranslateEfff(%class.SkMatrix44*, float, float, float) local_unnamed_addr #2

declare void @_ZN3gfx9TransformC1ERKNS_10QuaternionE(%"class.gfx::Transform"*, %"class.gfx::Quaternion"* dereferenceable(32)) unnamed_addr #2

declare void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44*, %class.SkMatrix44* dereferenceable(68), %class.SkMatrix44* dereferenceable(68)) local_unnamed_addr #2

declare dereferenceable(68) %class.SkMatrix44* @_ZN10SkMatrix448setScaleEfff(%class.SkMatrix44*, float, float, float) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #6

declare zeroext i1 @_ZNK3gfx9Transform10GetInverseEPS0_(%"class.gfx::Transform"*, %"class.gfx::Transform"*) local_unnamed_addr #2

declare void @_ZNK3gfx9Transform14TransformPointEPNS_7Point3FE(%"class.gfx::Transform"*, %"class.gfx::Point3F"*) local_unnamed_addr #2

declare { <2 x float>, float } @_ZN3gfxmiERKNS_7Point3FES2_(%"class.gfx::Point3F"* dereferenceable(12), %"class.gfx::Point3F"* dereferenceable(12)) local_unnamed_addr #2

declare float @_ZNK3gfx9Vector3dF6LengthEv(%"class.gfx::Vector3dF"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3gfx12_GLOBAL__N_122BuildPerspectiveMatrixERKNS_19DecomposedTransformE: argument 0"}
!4 = distinct !{!4, !"_ZN3gfx12_GLOBAL__N_122BuildPerspectiveMatrixERKNS_19DecomposedTransformE"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3gfx12_GLOBAL__N_122BuildTranslationMatrixERKNS_19DecomposedTransformE: argument 0"}
!7 = distinct !{!7, !"_ZN3gfx12_GLOBAL__N_122BuildTranslationMatrixERKNS_19DecomposedTransformE"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN3gfx12_GLOBAL__N_119BuildRotationMatrixERKNS_19DecomposedTransformE: argument 0"}
!10 = distinct !{!10, !"_ZN3gfx12_GLOBAL__N_119BuildRotationMatrixERKNS_19DecomposedTransformE"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN3gfx12_GLOBAL__N_115BuildSkewMatrixERKNS_19DecomposedTransformE: argument 0"}
!13 = distinct !{!13, !"_ZN3gfx12_GLOBAL__N_115BuildSkewMatrixERKNS_19DecomposedTransformE"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN3gfx12_GLOBAL__N_116BuildScaleMatrixERKNS_19DecomposedTransformE: argument 0"}
!16 = distinct !{!16, !"_ZN3gfx12_GLOBAL__N_116BuildScaleMatrixERKNS_19DecomposedTransformE"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN3gfx12_GLOBAL__N_116ComposeTransformERK10SkMatrix44S3_S3_S3_S3_: argument 0"}
!19 = distinct !{!19, !"_ZN3gfx12_GLOBAL__N_116ComposeTransformERK10SkMatrix44S3_S3_S3_S3_"}
!20 = !{!21, !23}
!21 = distinct !{!21, !22, !"_ZN3gfx12_GLOBAL__N_119BuildRotationMatrixERKNS_19DecomposedTransformE: argument 0"}
!22 = distinct !{!22, !"_ZN3gfx12_GLOBAL__N_119BuildRotationMatrixERKNS_19DecomposedTransformE"}
!23 = distinct !{!23, !24, !"_ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE: argument 0"}
!24 = distinct !{!24, !"_ZN3gfx12_GLOBAL__N_126BuildSnappedRotationMatrixERKNS_19DecomposedTransformE"}
!25 = !{!23}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZN3gfx12_GLOBAL__N_122BuildPerspectiveMatrixERKNS_19DecomposedTransformE: argument 0"}
!28 = distinct !{!28, !"_ZN3gfx12_GLOBAL__N_122BuildPerspectiveMatrixERKNS_19DecomposedTransformE"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZN3gfx12_GLOBAL__N_116ComposeTransformERK10SkMatrix44S3_S3_S3_S3_: argument 0"}
!31 = distinct !{!31, !"_ZN3gfx12_GLOBAL__N_116ComposeTransformERK10SkMatrix44S3_S3_S3_S3_"}
