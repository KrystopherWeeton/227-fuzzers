; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/av1_k_means_sse2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/av1_k_means_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_calc_indices_dim1_sse2(i32* nocapture readonly, i32* nocapture readonly, i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %6 = alloca [8 x <2 x i64>], align 16
  %7 = alloca [2 x <2 x i64>], align 16
  %8 = bitcast [8 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 128, i1 false)
  %9 = bitcast [2 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #3
  %10 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %7, i64 0, i64 0
  %11 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %7, i64 0, i64 1
  %12 = icmp sgt i32 %3, 0
  %13 = bitcast [2 x <2 x i64>]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 32, i1 false)
  br i1 %12, label %14, label %24

14:                                               ; preds = %5
  %15 = icmp sgt i32 %4, 0
  %16 = icmp sgt i32 %4, 1
  %17 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 0
  %18 = zext i32 %4 to i64
  %19 = zext i32 %4 to i64
  %20 = and i64 %18, 1
  %21 = icmp eq i32 %4, 1
  %22 = sub nsw i64 %18, %20
  %23 = icmp eq i64 %20, 0
  br label %25

24:                                               ; preds = %124, %5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #3
  ret void

25:                                               ; preds = %14, %124
  %26 = phi i32* [ %0, %14 ], [ %126, %124 ]
  %27 = phi i8* [ %2, %14 ], [ %125, %124 ]
  %28 = phi i32 [ 1, %14 ], [ %31, %124 ]
  %29 = phi i32 [ 0, %14 ], [ %127, %124 ]
  %30 = icmp eq i32 %28, 0
  %31 = xor i32 %28, 1
  %32 = bitcast i32* %26 to <2 x i64>*
  %33 = load <2 x i64>, <2 x i64>* %32, align 1
  %34 = sext i32 %31 to i64
  %35 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %7, i64 0, i64 %34
  store <2 x i64> %33, <2 x i64>* %35, align 16
  br i1 %15, label %36, label %52

36:                                               ; preds = %25
  %37 = bitcast <2 x i64> %33 to <4 x i32>
  br i1 %21, label %38, label %55

38:                                               ; preds = %55, %36
  %39 = phi i64 [ 0, %36 ], [ %81, %55 ]
  br i1 %23, label %52, label %40

40:                                               ; preds = %38
  %41 = getelementptr inbounds i32, i32* %1, i64 %39
  %42 = load i32, i32* %41, align 4
  %43 = insertelement <4 x i32> undef, i32 %42, i32 0
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <4 x i32> zeroinitializer
  %45 = sub <4 x i32> %37, %44
  %46 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %45, <4 x i32> %45) #3
  %47 = mul <8 x i16> %46, %46
  %48 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %46, <8 x i16> %46) #3
  %49 = shufflevector <8 x i16> %47, <8 x i16> %48, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %50 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 %39
  %51 = bitcast <2 x i64>* %50 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %51, align 16
  br label %52

52:                                               ; preds = %40, %38, %25
  store <2 x i64> zeroinitializer, <2 x i64>* %35, align 16
  br i1 %16, label %53, label %86

53:                                               ; preds = %52
  %54 = load <2 x i64>, <2 x i64>* %17, align 16
  br label %90

55:                                               ; preds = %36, %55
  %56 = phi i64 [ %81, %55 ], [ 0, %36 ]
  %57 = phi i64 [ %82, %55 ], [ %22, %36 ]
  %58 = getelementptr inbounds i32, i32* %1, i64 %56
  %59 = load i32, i32* %58, align 4
  %60 = insertelement <4 x i32> undef, i32 %59, i32 0
  %61 = shufflevector <4 x i32> %60, <4 x i32> undef, <4 x i32> zeroinitializer
  %62 = sub <4 x i32> %37, %61
  %63 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %62, <4 x i32> %62) #3
  %64 = mul <8 x i16> %63, %63
  %65 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %63, <8 x i16> %63) #3
  %66 = shufflevector <8 x i16> %64, <8 x i16> %65, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %67 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 %56
  %68 = bitcast <2 x i64>* %67 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %68, align 16
  %69 = or i64 %56, 1
  %70 = getelementptr inbounds i32, i32* %1, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = insertelement <4 x i32> undef, i32 %71, i32 0
  %73 = shufflevector <4 x i32> %72, <4 x i32> undef, <4 x i32> zeroinitializer
  %74 = sub <4 x i32> %37, %73
  %75 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %74, <4 x i32> %74) #3
  %76 = mul <8 x i16> %75, %75
  %77 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %75, <8 x i16> %75) #3
  %78 = shufflevector <8 x i16> %76, <8 x i16> %77, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %79 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 %69
  %80 = bitcast <2 x i64>* %79 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %80, align 16
  %81 = add nuw nsw i64 %56, 2
  %82 = add i64 %57, -2
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %38, label %55

84:                                               ; preds = %90
  store <2 x i64> %111, <2 x i64>* %35, align 16
  %85 = bitcast <2 x i64> %111 to <8 x i16>
  br label %86

86:                                               ; preds = %84, %52
  %87 = phi <8 x i16> [ %85, %84 ], [ zeroinitializer, %52 ]
  %88 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %87, <8 x i16> zeroinitializer) #3
  %89 = bitcast <2 x i64>* %35 to <16 x i8>*
  store <16 x i8> %88, <16 x i8>* %89, align 16
  br i1 %30, label %114, label %124

90:                                               ; preds = %90, %53
  %91 = phi <2 x i64> [ %54, %53 ], [ %104, %90 ]
  %92 = phi i64 [ 1, %53 ], [ %112, %90 ]
  %93 = phi <2 x i64> [ zeroinitializer, %53 ], [ %111, %90 ]
  %94 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 %92
  %95 = load <2 x i64>, <2 x i64>* %94, align 16
  %96 = bitcast <2 x i64> %91 to <4 x i32>
  %97 = bitcast <2 x i64> %95 to <4 x i32>
  %98 = icmp sgt <4 x i32> %96, %97
  %99 = sext <4 x i1> %98 to <4 x i32>
  %100 = bitcast <4 x i32> %99 to <2 x i64>
  %101 = xor <2 x i64> %100, <i64 -1, i64 -1>
  %102 = and <2 x i64> %91, %101
  %103 = and <2 x i64> %95, %100
  %104 = or <2 x i64> %103, %102
  store <2 x i64> %104, <2 x i64>* %17, align 16
  %105 = trunc i64 %92 to i32
  %106 = insertelement <4 x i32> undef, i32 %105, i32 0
  %107 = shufflevector <4 x i32> %106, <4 x i32> undef, <4 x i32> zeroinitializer
  %108 = and <2 x i64> %93, %101
  %109 = and <4 x i32> %107, %99
  %110 = bitcast <4 x i32> %109 to <2 x i64>
  %111 = or <2 x i64> %108, %110
  %112 = add nuw nsw i64 %92, 1
  %113 = icmp eq i64 %112, %19
  br i1 %113, label %84, label %90

114:                                              ; preds = %86
  %115 = load <2 x i64>, <2 x i64>* %10, align 16
  %116 = load <2 x i64>, <2 x i64>* %11, align 16
  %117 = shufflevector <2 x i64> %115, <2 x i64> %116, <2 x i32> <i32 0, i32 2>
  %118 = bitcast <2 x i64> %117 to <8 x i16>
  %119 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %118, <8 x i16> undef) #3
  %120 = bitcast <16 x i8> %119 to <2 x i64>
  %121 = extractelement <2 x i64> %120, i32 0
  %122 = bitcast i8* %27 to i64*
  store i64 %121, i64* %122, align 1
  %123 = getelementptr inbounds i8, i8* %27, i64 8
  br label %124

124:                                              ; preds = %114, %86
  %125 = phi i8* [ %123, %114 ], [ %27, %86 ]
  %126 = getelementptr inbounds i32, i32* %26, i64 4
  %127 = add nuw nsw i32 %29, 4
  %128 = icmp slt i32 %127, %3
  br i1 %128, label %25, label %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_calc_indices_dim2_sse2(i32* nocapture readonly, i32* nocapture readonly, i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %6 = alloca [8 x <2 x i64>], align 16
  %7 = alloca [2 x <2 x i64>], align 16
  %8 = bitcast [8 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 128, i1 false)
  %9 = bitcast [2 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #3
  %10 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %7, i64 0, i64 0
  %11 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %7, i64 0, i64 1
  %12 = icmp sgt i32 %3, 0
  %13 = bitcast [2 x <2 x i64>]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 32, i1 false)
  br i1 %12, label %14, label %20

14:                                               ; preds = %5
  %15 = icmp sgt i32 %4, 0
  %16 = icmp sgt i32 %4, 1
  %17 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 0
  %18 = zext i32 %4 to i64
  %19 = zext i32 %4 to i64
  br label %21

20:                                               ; preds = %105, %5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #3
  ret void

21:                                               ; preds = %14, %105
  %22 = phi i32* [ %0, %14 ], [ %107, %105 ]
  %23 = phi i8* [ %2, %14 ], [ %106, %105 ]
  %24 = phi i32 [ 1, %14 ], [ %27, %105 ]
  %25 = phi i32 [ 0, %14 ], [ %108, %105 ]
  %26 = icmp eq i32 %24, 0
  %27 = xor i32 %24, 1
  %28 = bitcast i32* %22 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 1
  %30 = getelementptr inbounds i32, i32* %22, i64 4
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 1
  %33 = shufflevector <4 x i32> %29, <4 x i32> %32, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %34 = shufflevector <4 x i32> %29, <4 x i32> %32, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %35 = shufflevector <4 x i32> %33, <4 x i32> %34, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %36 = shufflevector <4 x i32> %33, <4 x i32> %34, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  br i1 %15, label %42, label %37

37:                                               ; preds = %42, %21
  %38 = sext i32 %27 to i64
  %39 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %7, i64 0, i64 %38
  store <2 x i64> zeroinitializer, <2 x i64>* %39, align 16
  br i1 %16, label %40, label %67

40:                                               ; preds = %37
  %41 = load <2 x i64>, <2 x i64>* %17, align 16
  br label %71

42:                                               ; preds = %21, %42
  %43 = phi i64 [ %63, %42 ], [ 0, %21 ]
  %44 = shl nuw nsw i64 %43, 1
  %45 = getelementptr inbounds i32, i32* %1, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = insertelement <4 x i32> undef, i32 %46, i32 0
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> zeroinitializer
  %49 = or i64 %44, 1
  %50 = getelementptr inbounds i32, i32* %1, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = insertelement <4 x i32> undef, i32 %51, i32 0
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> zeroinitializer
  %54 = sub <4 x i32> %35, %48
  %55 = sub <4 x i32> %36, %53
  %56 = bitcast <4 x i32> %54 to <8 x i16>
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %56, <8 x i16> %56) #3
  %58 = bitcast <4 x i32> %55 to <8 x i16>
  %59 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %58) #3
  %60 = add <4 x i32> %59, %57
  %61 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 %43
  %62 = bitcast <2 x i64>* %61 to <4 x i32>*
  store <4 x i32> %60, <4 x i32>* %62, align 16
  %63 = add nuw nsw i64 %43, 1
  %64 = icmp eq i64 %63, %18
  br i1 %64, label %37, label %42

65:                                               ; preds = %71
  store <2 x i64> %92, <2 x i64>* %39, align 16
  %66 = bitcast <2 x i64> %92 to <8 x i16>
  br label %67

67:                                               ; preds = %65, %37
  %68 = phi <8 x i16> [ %66, %65 ], [ zeroinitializer, %37 ]
  %69 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %68, <8 x i16> zeroinitializer) #3
  %70 = bitcast <2 x i64>* %39 to <16 x i8>*
  store <16 x i8> %69, <16 x i8>* %70, align 16
  br i1 %26, label %95, label %105

71:                                               ; preds = %71, %40
  %72 = phi <2 x i64> [ %41, %40 ], [ %85, %71 ]
  %73 = phi i64 [ 1, %40 ], [ %93, %71 ]
  %74 = phi <2 x i64> [ zeroinitializer, %40 ], [ %92, %71 ]
  %75 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 %73
  %76 = load <2 x i64>, <2 x i64>* %75, align 16
  %77 = bitcast <2 x i64> %72 to <4 x i32>
  %78 = bitcast <2 x i64> %76 to <4 x i32>
  %79 = icmp sgt <4 x i32> %77, %78
  %80 = sext <4 x i1> %79 to <4 x i32>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = xor <2 x i64> %81, <i64 -1, i64 -1>
  %83 = and <2 x i64> %72, %82
  %84 = and <2 x i64> %76, %81
  %85 = or <2 x i64> %84, %83
  store <2 x i64> %85, <2 x i64>* %17, align 16
  %86 = trunc i64 %73 to i32
  %87 = insertelement <4 x i32> undef, i32 %86, i32 0
  %88 = shufflevector <4 x i32> %87, <4 x i32> undef, <4 x i32> zeroinitializer
  %89 = and <2 x i64> %74, %82
  %90 = and <4 x i32> %88, %80
  %91 = bitcast <4 x i32> %90 to <2 x i64>
  %92 = or <2 x i64> %89, %91
  %93 = add nuw nsw i64 %73, 1
  %94 = icmp eq i64 %93, %19
  br i1 %94, label %65, label %71

95:                                               ; preds = %67
  %96 = load <2 x i64>, <2 x i64>* %10, align 16
  %97 = load <2 x i64>, <2 x i64>* %11, align 16
  %98 = shufflevector <2 x i64> %96, <2 x i64> %97, <2 x i32> <i32 0, i32 2>
  %99 = bitcast <2 x i64> %98 to <8 x i16>
  %100 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %99, <8 x i16> undef) #3
  %101 = bitcast <16 x i8> %100 to <2 x i64>
  %102 = extractelement <2 x i64> %101, i32 0
  %103 = bitcast i8* %23 to i64*
  store i64 %102, i64* %103, align 1
  %104 = getelementptr inbounds i8, i8* %23, i64 8
  br label %105

105:                                              ; preds = %95, %67
  %106 = phi i8* [ %104, %95 ], [ %23, %67 ]
  %107 = getelementptr inbounds i32, i32* %22, i64 8
  %108 = add nuw nsw i32 %25, 4
  %109 = icmp slt i32 %108, %3
  br i1 %109, label %21, label %20
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
