; ModuleID = '../../third_party/boringssl/src/crypto/cipher_extra/e_tls.c'
source_filename = "../../third_party/boringssl/src/crypto/cipher_extra/e_tls.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.evp_aead_st = type { i8, i8, i8, i8, i32, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64)*, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64, i32)*, void (%struct.evp_aead_ctx_st*)*, i32 (%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64)*, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64)*, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64)*, i32 (%struct.evp_aead_ctx_st*, i8**, i64*)*, i64 (%struct.evp_aead_ctx_st*, i64, i64)* }
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.env_md_st = type opaque
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%struct.engine_st = type opaque

@aead_aes_128_cbc_sha1_tls = internal constant %struct.evp_aead_st { i8 36, i8 16, i8 36, i8 20, i32 0, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64, i32)* @aead_aes_128_cbc_sha1_tls_init, void (%struct.evp_aead_ctx_st*)* @aead_tls_cleanup, i32 (%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_tls_open, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_tls_seal_scatter, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8**, i64*)* null, i64 (%struct.evp_aead_ctx_st*, i64, i64)* @aead_tls_tag_len }, align 8
@aead_aes_128_cbc_sha1_tls_implicit_iv = internal constant %struct.evp_aead_st { i8 52, i8 0, i8 36, i8 20, i32 0, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64, i32)* @aead_aes_128_cbc_sha1_tls_implicit_iv_init, void (%struct.evp_aead_ctx_st*)* @aead_tls_cleanup, i32 (%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_tls_open, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_tls_seal_scatter, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8**, i64*)* @aead_tls_get_iv, i64 (%struct.evp_aead_ctx_st*, i64, i64)* @aead_tls_tag_len }, align 8
@aead_aes_256_cbc_sha1_tls = internal constant %struct.evp_aead_st { i8 52, i8 16, i8 36, i8 20, i32 0, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64, i32)* @aead_aes_256_cbc_sha1_tls_init, void (%struct.evp_aead_ctx_st*)* @aead_tls_cleanup, i32 (%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_tls_open, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_tls_seal_scatter, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8**, i64*)* null, i64 (%struct.evp_aead_ctx_st*, i64, i64)* @aead_tls_tag_len }, align 8
@aead_aes_256_cbc_sha1_tls_implicit_iv = internal constant %struct.evp_aead_st { i8 68, i8 0, i8 36, i8 20, i32 0, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64, i32)* @aead_aes_256_cbc_sha1_tls_implicit_iv_init, void (%struct.evp_aead_ctx_st*)* @aead_tls_cleanup, i32 (%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_tls_open, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_tls_seal_scatter, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8**, i64*)* @aead_tls_get_iv, i64 (%struct.evp_aead_ctx_st*, i64, i64)* @aead_tls_tag_len }, align 8
@aead_des_ede3_cbc_sha1_tls = internal constant %struct.evp_aead_st { i8 44, i8 8, i8 28, i8 20, i32 0, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64, i32)* @aead_des_ede3_cbc_sha1_tls_init, void (%struct.evp_aead_ctx_st*)* @aead_tls_cleanup, i32 (%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_tls_open, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_tls_seal_scatter, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8**, i64*)* null, i64 (%struct.evp_aead_ctx_st*, i64, i64)* @aead_tls_tag_len }, align 8
@aead_des_ede3_cbc_sha1_tls_implicit_iv = internal constant %struct.evp_aead_st { i8 52, i8 0, i8 28, i8 20, i32 0, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64, i32)* @aead_des_ede3_cbc_sha1_tls_implicit_iv_init, void (%struct.evp_aead_ctx_st*)* @aead_tls_cleanup, i32 (%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_tls_open, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_tls_seal_scatter, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8**, i64*)* @aead_tls_get_iv, i64 (%struct.evp_aead_ctx_st*, i64, i64)* @aead_tls_tag_len }, align 8
@aead_null_sha1_tls = internal constant %struct.evp_aead_st { i8 20, i8 0, i8 20, i8 20, i32 0, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64, i32)* @aead_null_sha1_tls_init, void (%struct.evp_aead_ctx_st*)* @aead_tls_cleanup, i32 (%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_tls_open, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_tls_seal_scatter, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8**, i64*)* null, i64 (%struct.evp_aead_ctx_st*, i64, i64)* @aead_tls_tag_len }, align 8
@.str = private unnamed_addr constant [60 x i8] c"../../third_party/boringssl/src/crypto/cipher_extra/e_tls.c\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.evp_aead_st* @EVP_aead_aes_128_cbc_sha1_tls() local_unnamed_addr #0 {
  ret %struct.evp_aead_st* @aead_aes_128_cbc_sha1_tls
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.evp_aead_st* @EVP_aead_aes_128_cbc_sha1_tls_implicit_iv() local_unnamed_addr #0 {
  ret %struct.evp_aead_st* @aead_aes_128_cbc_sha1_tls_implicit_iv
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.evp_aead_st* @EVP_aead_aes_256_cbc_sha1_tls() local_unnamed_addr #0 {
  ret %struct.evp_aead_st* @aead_aes_256_cbc_sha1_tls
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.evp_aead_st* @EVP_aead_aes_256_cbc_sha1_tls_implicit_iv() local_unnamed_addr #0 {
  ret %struct.evp_aead_st* @aead_aes_256_cbc_sha1_tls_implicit_iv
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.evp_aead_st* @EVP_aead_des_ede3_cbc_sha1_tls() local_unnamed_addr #0 {
  ret %struct.evp_aead_st* @aead_des_ede3_cbc_sha1_tls
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.evp_aead_st* @EVP_aead_des_ede3_cbc_sha1_tls_implicit_iv() local_unnamed_addr #0 {
  ret %struct.evp_aead_st* @aead_des_ede3_cbc_sha1_tls_implicit_iv
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.evp_aead_st* @EVP_aead_null_sha1_tls() local_unnamed_addr #0 {
  ret %struct.evp_aead_st* @aead_null_sha1_tls
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_aes_128_cbc_sha1_tls_init(%struct.evp_aead_ctx_st*, i8*, i64, i64, i32) #1 {
  %6 = tail call %struct.evp_cipher_st* @EVP_aes_128_cbc() #4
  %7 = tail call %struct.env_md_st* @EVP_sha1() #4
  %8 = tail call fastcc i32 @aead_tls_init(%struct.evp_aead_ctx_st* %0, i8* %1, i64 %2, i64 %3, i32 %4, %struct.evp_cipher_st* %6, %struct.env_md_st* %7, i8 signext 0)
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define internal void @aead_tls_cleanup(%struct.evp_aead_ctx_st*) #1 {
  %2 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1
  %3 = bitcast %union.evp_aead_ctx_st_state* %2 to %struct.evp_cipher_ctx_st*
  %4 = tail call i32 @EVP_CIPHER_CTX_cleanup(%struct.evp_cipher_ctx_st* %3) #4
  %5 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 136
  %6 = bitcast i8* %5 to %struct.hmac_ctx_st*
  tail call void @HMAC_CTX_cleanup(%struct.hmac_ctx_st* %6) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_tls_open(%struct.evp_aead_ctx_st*, i8*, i64* nocapture, i64, i8*, i64, i8*, i64, i8* nocapture readonly, i64) #1 {
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca [13 x i8], align 1
  %15 = alloca [64 x i8], align 16
  %16 = alloca i64, align 8
  %17 = alloca [64 x i8], align 16
  %18 = alloca i32, align 4
  %19 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1
  %20 = bitcast %union.evp_aead_ctx_st_state* %19 to %struct.evp_cipher_ctx_st*
  %21 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 20
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %10
  tail call void @ERR_put_error(i32 30, i32 0, i32 112, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 250) #4
  br label %157

26:                                               ; preds = %10
  %27 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 136
  %28 = bitcast i8* %27 to %struct.hmac_ctx_st*
  %29 = tail call i64 @HMAC_size(%struct.hmac_ctx_st* %28) #4
  %30 = icmp ugt i64 %29, %7
  br i1 %30, label %31, label %32

31:                                               ; preds = %26
  tail call void @ERR_put_error(i32 30, i32 0, i32 101, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 255) #4
  br label %157

32:                                               ; preds = %26
  %33 = icmp ult i64 %3, %7
  br i1 %33, label %34, label %35

34:                                               ; preds = %32
  tail call void @ERR_put_error(i32 30, i32 0, i32 103, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 262) #4
  br label %157

35:                                               ; preds = %32
  %36 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 0
  %37 = load %struct.evp_aead_st*, %struct.evp_aead_st** %36, align 8
  %38 = tail call i64 @EVP_AEAD_nonce_length(%struct.evp_aead_st* %37) #4
  %39 = icmp eq i64 %38, %5
  br i1 %39, label %41, label %40

40:                                               ; preds = %35
  tail call void @ERR_put_error(i32 30, i32 0, i32 111, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 267) #4
  br label %157

41:                                               ; preds = %35
  %42 = icmp eq i64 %9, 11
  br i1 %42, label %44, label %43

43:                                               ; preds = %41
  tail call void @ERR_put_error(i32 30, i32 0, i32 109, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 272) #4
  br label %157

44:                                               ; preds = %41
  %45 = icmp ugt i64 %7, 2147483647
  br i1 %45, label %46, label %47

46:                                               ; preds = %44
  tail call void @ERR_put_error(i32 30, i32 0, i32 117, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 278) #4
  br label %157

47:                                               ; preds = %44
  %48 = tail call i32 @EVP_CIPHER_CTX_mode(%struct.evp_cipher_ctx_st* %20) #4
  %49 = icmp eq i32 %48, 2
  br i1 %49, label %50, label %57

50:                                               ; preds = %47
  %51 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 305
  %52 = load i8, i8* %51, align 1
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %50
  %55 = tail call i32 @EVP_DecryptInit_ex(%struct.evp_cipher_ctx_st* %20, %struct.evp_cipher_st* null, %struct.engine_st* null, i8* null, i8* %4) #4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %157, label %57

57:                                               ; preds = %54, %50, %47
  %58 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %58) #4
  store i32 -1431655766, i32* %11, align 4
  %59 = trunc i64 %7 to i32
  %60 = call i32 @EVP_DecryptUpdate(%struct.evp_cipher_ctx_st* %20, i8* %1, i32* nonnull %11, i8* %6, i32 %59) #4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %155, label %62

62:                                               ; preds = %57
  %63 = load i32, i32* %11, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %1, i64 %64
  %66 = call i32 @EVP_DecryptFinal_ex(%struct.evp_cipher_ctx_st* %20, i8* %65, i32* nonnull %11) #4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %155, label %68

68:                                               ; preds = %62
  %69 = load i32, i32* %11, align 4
  %70 = sext i32 %69 to i64
  %71 = add nsw i64 %70, %64
  %72 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #4
  store i64 -6148914691236517206, i64* %12, align 8
  %73 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73) #4
  store i64 -6148914691236517206, i64* %13, align 8
  %74 = call i32 @EVP_CIPHER_CTX_mode(%struct.evp_cipher_ctx_st* %20) #4
  %75 = icmp eq i32 %74, 2
  br i1 %75, label %76, label %85

76:                                               ; preds = %68
  %77 = call i32 @EVP_CIPHER_CTX_block_size(%struct.evp_cipher_ctx_st* %20) #4
  %78 = zext i32 %77 to i64
  %79 = call i64 @HMAC_size(%struct.hmac_ctx_st* %28) #4
  %80 = call i32 @EVP_tls_cbc_remove_padding(i64* nonnull %13, i64* nonnull %12, i8* %1, i64 %71, i64 %78, i64 %79) #4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %84, label %82

82:                                               ; preds = %76
  %83 = load i64, i64* %12, align 8
  br label %86

84:                                               ; preds = %76
  call void @ERR_put_error(i32 30, i32 0, i32 101, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 314) #4
  br label %153

85:                                               ; preds = %68
  store i64 -1, i64* %13, align 8
  store i64 %71, i64* %12, align 8
  br label %86

86:                                               ; preds = %82, %85
  %87 = phi i64 [ %83, %82 ], [ %71, %85 ]
  %88 = call i64 @HMAC_size(%struct.hmac_ctx_st* %28) #4
  %89 = sub i64 %87, %88
  %90 = getelementptr inbounds [13 x i8], [13 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 13, i8* nonnull %90) #4
  %91 = getelementptr inbounds [13 x i8], [13 x i8]* %14, i64 0, i64 11
  %92 = getelementptr inbounds [13 x i8], [13 x i8]* %14, i64 0, i64 12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %90, i8* align 1 %8, i64 11, i1 false) #4
  %93 = lshr i64 %89, 8
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %91, align 1
  %95 = trunc i64 %89 to i8
  store i8 %95, i8* %92, align 1
  %96 = getelementptr inbounds [64 x i8], [64 x i8]* %15, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %96) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %96, i8 -86, i64 64, i1 false)
  %97 = bitcast i64* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %97) #4
  store i64 -6148914691236517206, i64* %16, align 8
  %98 = getelementptr inbounds [64 x i8], [64 x i8]* %17, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %98) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %98, i8 -86, i64 64, i1 false)
  %99 = call i32 @EVP_CIPHER_CTX_mode(%struct.evp_cipher_ctx_st* %20) #4
  %100 = icmp eq i32 %99, 2
  br i1 %100, label %101, label %119

101:                                              ; preds = %86
  %102 = bitcast i8* %27 to %struct.env_md_st**
  %103 = load %struct.env_md_st*, %struct.env_md_st** %102, align 8
  %104 = call i32 @EVP_tls_cbc_record_digest_supported(%struct.env_md_st* %103) #4
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %119, label %106

106:                                              ; preds = %101
  %107 = load %struct.env_md_st*, %struct.env_md_st** %102, align 8
  %108 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 240
  %109 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 304
  %110 = load i8, i8* %109, align 8
  %111 = zext i8 %110 to i32
  %112 = call i32 @EVP_tls_cbc_digest_record(%struct.env_md_st* %107, i8* nonnull %96, i64* nonnull %16, i8* nonnull %90, i8* %1, i64 %89, i64 %71, i8* %108, i32 %111) #4
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %106
  call void @ERR_put_error(i32 30, i32 0, i32 101, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 348) #4
  br label %151

115:                                              ; preds = %106
  %116 = load i64, i64* %16, align 8
  %117 = load i64, i64* %12, align 8
  call void @EVP_tls_cbc_copy_mac(i8* nonnull %98, i64 %116, i8* %1, i64 %117, i64 %71) #4
  %118 = load i64, i64* %16, align 8
  br label %137

119:                                              ; preds = %101, %86
  %120 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %120) #4
  store i32 -1431655766, i32* %18, align 4
  %121 = call i32 @HMAC_Init_ex(%struct.hmac_ctx_st* %28, i8* null, i64 0, %struct.env_md_st* null, %struct.engine_st* null) #4
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %132, label %123

123:                                              ; preds = %119
  %124 = call i32 @HMAC_Update(%struct.hmac_ctx_st* %28, i8* nonnull %90, i64 13) #4
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %132, label %126

126:                                              ; preds = %123
  %127 = call i32 @HMAC_Update(%struct.hmac_ctx_st* %28, i8* %1, i64 %89) #4
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %132, label %129

129:                                              ; preds = %126
  %130 = call i32 @HMAC_Final(%struct.hmac_ctx_st* %28, i8* nonnull %96, i32* nonnull %18) #4
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %133

132:                                              ; preds = %129, %126, %123, %119
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %120) #4
  br label %151

133:                                              ; preds = %129
  %134 = load i32, i32* %18, align 4
  %135 = zext i32 %134 to i64
  store i64 %135, i64* %16, align 8
  %136 = getelementptr inbounds i8, i8* %1, i64 %89
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %120) #4
  br label %137

137:                                              ; preds = %133, %115
  %138 = phi i64 [ %118, %115 ], [ %135, %133 ]
  %139 = phi i8* [ %98, %115 ], [ %136, %133 ]
  %140 = call i32 @CRYPTO_memcmp(i8* %139, i8* nonnull %96, i64 %138) #4
  %141 = sext i32 %140 to i64
  %142 = xor i64 %141, -9223372036854775808
  %143 = add nsw i64 %141, -1
  %144 = and i64 %143, %142
  %145 = ashr i64 %144, 63
  %146 = load i64, i64* %13, align 8
  %147 = and i64 %145, %146
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %150

149:                                              ; preds = %137
  call void @ERR_put_error(i32 30, i32 0, i32 101, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 382) #4
  br label %151

150:                                              ; preds = %137
  store i64 %89, i64* %2, align 8
  br label %151

151:                                              ; preds = %132, %149, %150, %114
  %152 = phi i32 [ 0, %114 ], [ 1, %150 ], [ 0, %149 ], [ 0, %132 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %98) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %97) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %96) #4
  call void @llvm.lifetime.end.p0i8(i64 13, i8* nonnull %90) #4
  br label %153

153:                                              ; preds = %151, %84
  %154 = phi i32 [ %152, %151 ], [ 0, %84 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #4
  br label %155

155:                                              ; preds = %62, %57, %153
  %156 = phi i32 [ %154, %153 ], [ 0, %57 ], [ 0, %62 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %58) #4
  br label %157

157:                                              ; preds = %54, %155, %46, %43, %40, %34, %31, %25
  %158 = phi i32 [ 0, %25 ], [ 0, %31 ], [ 0, %34 ], [ 0, %40 ], [ 0, %43 ], [ 0, %46 ], [ %156, %155 ], [ 0, %54 ]
  ret i32 %158
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_tls_seal_scatter(%struct.evp_aead_ctx_st*, i8*, i8*, i64* nocapture, i64, i8*, i64, i8*, i64, i8* nocapture readnone, i64, i8*, i64) #1 {
  %14 = alloca [2 x i8], align 1
  %15 = alloca [64 x i8], align 16
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca [32 x i8], align 16
  %19 = alloca i32, align 4
  %20 = alloca [256 x i8], align 16
  %21 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1
  %22 = bitcast %union.evp_aead_ctx_st_state* %21 to %struct.evp_cipher_ctx_st*
  %23 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 20
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %13
  tail call void @ERR_put_error(i32 30, i32 0, i32 112, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 134) #4
  br label %164

28:                                               ; preds = %13
  %29 = icmp ugt i64 %8, 2147483647
  br i1 %29, label %30, label %31

30:                                               ; preds = %28
  tail call void @ERR_put_error(i32 30, i32 0, i32 117, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 140) #4
  br label %164

31:                                               ; preds = %28
  %32 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 136
  %33 = bitcast i8* %32 to %struct.hmac_ctx_st*
  %34 = tail call i64 @HMAC_size(%struct.hmac_ctx_st* %33) #4
  %35 = tail call i32 @EVP_CIPHER_CTX_mode(%struct.evp_cipher_ctx_st* %22) #4
  %36 = icmp eq i32 %35, 2
  br i1 %36, label %37, label %44

37:                                               ; preds = %31
  %38 = tail call i32 @EVP_CIPHER_CTX_block_size(%struct.evp_cipher_ctx_st* %22) #4
  %39 = zext i32 %38 to i64
  %40 = add i64 %34, %8
  %41 = urem i64 %40, %39
  %42 = sub i64 %34, %41
  %43 = add i64 %42, %39
  br label %44

44:                                               ; preds = %31, %37
  %45 = phi i64 [ %43, %37 ], [ %34, %31 ]
  %46 = icmp ugt i64 %45, %4
  br i1 %46, label %47, label %48

47:                                               ; preds = %44
  tail call void @ERR_put_error(i32 30, i32 0, i32 103, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 145) #4
  br label %164

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 0
  %50 = load %struct.evp_aead_st*, %struct.evp_aead_st** %49, align 8
  %51 = tail call i64 @EVP_AEAD_nonce_length(%struct.evp_aead_st* %50) #4
  %52 = icmp eq i64 %51, %6
  br i1 %52, label %54, label %53

53:                                               ; preds = %48
  tail call void @ERR_put_error(i32 30, i32 0, i32 111, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 150) #4
  br label %164

54:                                               ; preds = %48
  %55 = icmp eq i64 %12, 11
  br i1 %55, label %57, label %56

56:                                               ; preds = %54
  tail call void @ERR_put_error(i32 30, i32 0, i32 109, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 155) #4
  br label %164

57:                                               ; preds = %54
  %58 = getelementptr inbounds [2 x i8], [2 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %58) #4
  %59 = getelementptr inbounds [2 x i8], [2 x i8]* %14, i64 0, i64 1
  %60 = lshr i64 %8, 8
  %61 = trunc i64 %60 to i8
  store i8 %61, i8* %58, align 1
  %62 = trunc i64 %8 to i8
  store i8 %62, i8* %59, align 1
  %63 = getelementptr inbounds [64 x i8], [64 x i8]* %15, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %63) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %63, i8 -86, i64 64, i1 false)
  %64 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %64) #4
  store i32 -1431655766, i32* %16, align 4
  %65 = tail call i32 @HMAC_Init_ex(%struct.hmac_ctx_st* %33, i8* null, i64 0, %struct.env_md_st* null, %struct.engine_st* null) #4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %162, label %67

67:                                               ; preds = %57
  %68 = tail call i32 @HMAC_Update(%struct.hmac_ctx_st* %33, i8* %11, i64 11) #4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %162, label %70

70:                                               ; preds = %67
  %71 = call i32 @HMAC_Update(%struct.hmac_ctx_st* %33, i8* nonnull %58, i64 2) #4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %162, label %73

73:                                               ; preds = %70
  %74 = call i32 @HMAC_Update(%struct.hmac_ctx_st* %33, i8* %7, i64 %8) #4
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %162, label %76

76:                                               ; preds = %73
  %77 = call i32 @HMAC_Final(%struct.hmac_ctx_st* %33, i8* nonnull %63, i32* nonnull %16) #4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %162, label %79

79:                                               ; preds = %76
  %80 = call i32 @EVP_CIPHER_CTX_mode(%struct.evp_cipher_ctx_st* %22) #4
  %81 = icmp eq i32 %80, 2
  br i1 %81, label %82, label %89

82:                                               ; preds = %79
  %83 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 305
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %86, label %89

86:                                               ; preds = %82
  %87 = call i32 @EVP_EncryptInit_ex(%struct.evp_cipher_ctx_st* %22, %struct.evp_cipher_st* null, %struct.engine_st* null, i8* null, i8* %5) #4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %162, label %89

89:                                               ; preds = %86, %82, %79
  %90 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %90) #4
  store i32 -1431655766, i32* %17, align 4
  %91 = trunc i64 %8 to i32
  %92 = call i32 @EVP_EncryptUpdate(%struct.evp_cipher_ctx_st* %22, i8* %1, i32* nonnull %17, i8* %7, i32 %91) #4
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %160, label %94

94:                                               ; preds = %89
  %95 = call i32 @EVP_CIPHER_CTX_block_size(%struct.evp_cipher_ctx_st* %22) #4
  %96 = zext i32 %95 to i64
  %97 = urem i32 %91, %95
  %98 = zext i32 %97 to i64
  %99 = sub nsw i64 %96, %98
  %100 = urem i64 %99, %96
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %120, label %102

102:                                              ; preds = %94
  %103 = getelementptr inbounds [32 x i8], [32 x i8]* %18, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %103) #4
  %104 = bitcast i32* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %103, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %104) #4
  store i32 -1431655766, i32* %19, align 4
  %105 = trunc i64 %100 to i32
  %106 = call i32 @EVP_EncryptUpdate(%struct.evp_cipher_ctx_st* %22, i8* nonnull %103, i32* nonnull %19, i8* nonnull %63, i32 %105) #4
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %119, label %108

108:                                              ; preds = %102
  %109 = sub nsw i64 %96, %100
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %115, label %111

111:                                              ; preds = %108
  %112 = load i32, i32* %17, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8, i8* %1, i64 %113
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* nonnull align 16 %103, i64 %109, i1 false) #4
  br label %115

115:                                              ; preds = %108, %111
  %116 = getelementptr inbounds [32 x i8], [32 x i8]* %18, i64 0, i64 %96
  %117 = sub nsw i64 0, %100
  %118 = getelementptr inbounds i8, i8* %116, i64 %117
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %118, i64 %100, i1 false) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %104) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %103) #4
  br label %120

119:                                              ; preds = %102
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %104) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %103) #4
  br label %160

120:                                              ; preds = %94, %115
  %121 = phi i32 [ %105, %115 ], [ 0, %94 ]
  %122 = getelementptr inbounds i8, i8* %2, i64 %100
  %123 = getelementptr inbounds [64 x i8], [64 x i8]* %15, i64 0, i64 %100
  %124 = load i32, i32* %16, align 4
  %125 = sub i32 %124, %121
  %126 = call i32 @EVP_EncryptUpdate(%struct.evp_cipher_ctx_st* %22, i8* %122, i32* nonnull %17, i8* %123, i32 %125) #4
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %160, label %128

128:                                              ; preds = %120
  %129 = load i32, i32* %17, align 4
  %130 = sext i32 %129 to i64
  %131 = add nsw i64 %100, %130
  %132 = icmp ugt i32 %95, 1
  br i1 %132, label %133, label %154

133:                                              ; preds = %128
  %134 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %134) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %134, i8 -86, i64 256, i1 false)
  %135 = load i32, i32* %16, align 4
  %136 = zext i32 %135 to i64
  %137 = add nuw nsw i64 %136, %8
  %138 = urem i64 %137, %96
  %139 = trunc i64 %138 to i32
  %140 = sub i32 %95, %139
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %146, label %142

142:                                              ; preds = %133
  %143 = zext i32 %140 to i64
  %144 = trunc i32 %140 to i8
  %145 = add i8 %144, -1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %134, i8 %145, i64 %143, i1 false) #4
  br label %146

146:                                              ; preds = %133, %142
  %147 = getelementptr inbounds i8, i8* %2, i64 %131
  %148 = call i32 @EVP_EncryptUpdate(%struct.evp_cipher_ctx_st* %22, i8* %147, i32* nonnull %17, i8* nonnull %134, i32 %140) #4
  %149 = icmp eq i32 %148, 0
  %150 = load i32, i32* %17, align 4
  %151 = select i1 %149, i32 0, i32 %150
  %152 = sext i32 %151 to i64
  %153 = add nsw i64 %131, %152
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %134) #4
  br i1 %149, label %160, label %154

154:                                              ; preds = %146, %128
  %155 = phi i64 [ %153, %146 ], [ %131, %128 ]
  %156 = getelementptr inbounds i8, i8* %2, i64 %155
  %157 = call i32 @EVP_EncryptFinal_ex(%struct.evp_cipher_ctx_st* %22, i8* %156, i32* nonnull %17) #4
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %160, label %159

159:                                              ; preds = %154
  store i64 %155, i64* %3, align 8
  br label %160

160:                                              ; preds = %146, %119, %154, %120, %159, %89
  %161 = phi i32 [ 0, %89 ], [ 0, %119 ], [ 1, %159 ], [ 0, %146 ], [ 0, %120 ], [ 0, %154 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %90) #4
  br label %162

162:                                              ; preds = %86, %57, %67, %70, %73, %76, %160
  %163 = phi i32 [ %161, %160 ], [ 0, %76 ], [ 0, %73 ], [ 0, %70 ], [ 0, %67 ], [ 0, %57 ], [ 0, %86 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %64) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %63) #4
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %58) #4
  br label %164

164:                                              ; preds = %162, %56, %53, %47, %30, %27
  %165 = phi i32 [ 0, %30 ], [ 0, %47 ], [ 0, %53 ], [ 0, %56 ], [ %163, %162 ], [ 0, %27 ]
  ret i32 %165
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @aead_tls_tag_len(%struct.evp_aead_ctx_st*, i64, i64) #1 {
  %4 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1
  %5 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 136
  %6 = bitcast i8* %5 to %struct.hmac_ctx_st*
  %7 = tail call i64 @HMAC_size(%struct.hmac_ctx_st* %6) #4
  %8 = bitcast %union.evp_aead_ctx_st_state* %4 to %struct.evp_cipher_ctx_st*
  %9 = tail call i32 @EVP_CIPHER_CTX_mode(%struct.evp_cipher_ctx_st* %8) #4
  %10 = icmp eq i32 %9, 2
  br i1 %10, label %11, label %18

11:                                               ; preds = %3
  %12 = tail call i32 @EVP_CIPHER_CTX_block_size(%struct.evp_cipher_ctx_st* %8) #4
  %13 = zext i32 %12 to i64
  %14 = add i64 %7, %1
  %15 = urem i64 %14, %13
  %16 = sub i64 %7, %15
  %17 = add i64 %16, %13
  br label %18

18:                                               ; preds = %3, %11
  %19 = phi i64 [ %17, %11 ], [ %7, %3 ]
  ret i64 %19
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @aead_tls_init(%struct.evp_aead_ctx_st*, i8*, i64, i64, i32, %struct.evp_cipher_st*, %struct.env_md_st*, i8 signext) unnamed_addr #1 {
  %9 = icmp eq i64 %3, 0
  br i1 %9, label %14, label %10

10:                                               ; preds = %8
  %11 = tail call i64 @EVP_MD_size(%struct.env_md_st* %6) #4
  %12 = icmp eq i64 %11, %3
  br i1 %12, label %14, label %13

13:                                               ; preds = %10
  tail call void @ERR_put_error(i32 30, i32 0, i32 122, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 69) #4
  br label %51

14:                                               ; preds = %10, %8
  %15 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 0
  %16 = load %struct.evp_aead_st*, %struct.evp_aead_st** %15, align 8
  %17 = tail call i64 @EVP_AEAD_key_length(%struct.evp_aead_st* %16) #4
  %18 = icmp eq i64 %17, %2
  br i1 %18, label %20, label %19

19:                                               ; preds = %14
  tail call void @ERR_put_error(i32 30, i32 0, i32 102, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 74) #4
  br label %51

20:                                               ; preds = %14
  %21 = tail call i64 @EVP_MD_size(%struct.env_md_st* %6) #4
  %22 = tail call i32 @EVP_CIPHER_key_length(%struct.evp_cipher_st* %5) #4
  %23 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1
  %24 = bitcast %union.evp_aead_ctx_st_state* %23 to %struct.evp_cipher_ctx_st*
  tail call void @EVP_CIPHER_CTX_init(%struct.evp_cipher_ctx_st* %24) #4
  %25 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 136
  %26 = bitcast i8* %25 to %struct.hmac_ctx_st*
  tail call void @HMAC_CTX_init(%struct.hmac_ctx_st* %26) #4
  %27 = icmp eq i64 %21, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %20
  %29 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 240
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %29, i8* align 1 %1, i64 %21, i1 false) #4
  br label %30

30:                                               ; preds = %20, %28
  %31 = trunc i64 %21 to i8
  %32 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 304
  store i8 %31, i8* %32, align 8
  %33 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 305
  store i8 %7, i8* %33, align 1
  %34 = getelementptr inbounds i8, i8* %1, i64 %21
  %35 = icmp eq i8 %7, 0
  %36 = zext i32 %22 to i64
  %37 = add i64 %21, %36
  %38 = getelementptr inbounds i8, i8* %1, i64 %37
  %39 = select i1 %35, i8* null, i8* %38
  %40 = icmp eq i32 %4, 1
  %41 = zext i1 %40 to i32
  %42 = tail call i32 @EVP_CipherInit_ex(%struct.evp_cipher_ctx_st* %24, %struct.evp_cipher_st* %5, %struct.engine_st* null, i8* %34, i8* %39, i32 %41) #4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %30
  %45 = tail call i32 @HMAC_Init_ex(%struct.hmac_ctx_st* %26, i8* %1, i64 %21, %struct.env_md_st* %6, %struct.engine_st* null) #4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %44, %30
  %48 = tail call i32 @EVP_CIPHER_CTX_cleanup(%struct.evp_cipher_ctx_st* %24) #4
  tail call void @HMAC_CTX_cleanup(%struct.hmac_ctx_st* %26) #4
  br label %51

49:                                               ; preds = %44
  %50 = tail call i32 @EVP_CIPHER_CTX_set_padding(%struct.evp_cipher_ctx_st* %24, i32 0) #4
  br label %51

51:                                               ; preds = %47, %49, %19, %13
  %52 = phi i32 [ 0, %13 ], [ 0, %19 ], [ 1, %49 ], [ 0, %47 ]
  ret i32 %52
}

declare %struct.evp_cipher_st* @EVP_aes_128_cbc() local_unnamed_addr #2

declare %struct.env_md_st* @EVP_sha1() local_unnamed_addr #2

declare i64 @EVP_MD_size(%struct.env_md_st*) local_unnamed_addr #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

declare i64 @EVP_AEAD_key_length(%struct.evp_aead_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare i32 @EVP_CIPHER_key_length(%struct.evp_cipher_st*) local_unnamed_addr #2

declare void @EVP_CIPHER_CTX_init(%struct.evp_cipher_ctx_st*) local_unnamed_addr #2

declare void @HMAC_CTX_init(%struct.hmac_ctx_st*) local_unnamed_addr #2

declare i32 @EVP_CipherInit_ex(%struct.evp_cipher_ctx_st*, %struct.evp_cipher_st*, %struct.engine_st*, i8*, i8*, i32) local_unnamed_addr #2

declare i32 @HMAC_Init_ex(%struct.hmac_ctx_st*, i8*, i64, %struct.env_md_st*, %struct.engine_st*) local_unnamed_addr #2

declare i32 @EVP_CIPHER_CTX_set_padding(%struct.evp_cipher_ctx_st*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare i32 @EVP_CIPHER_CTX_cleanup(%struct.evp_cipher_ctx_st*) local_unnamed_addr #2

declare void @HMAC_CTX_cleanup(%struct.hmac_ctx_st*) local_unnamed_addr #2

declare i64 @HMAC_size(%struct.hmac_ctx_st*) local_unnamed_addr #2

declare i64 @EVP_AEAD_nonce_length(%struct.evp_aead_st*) local_unnamed_addr #2

declare i32 @EVP_CIPHER_CTX_mode(%struct.evp_cipher_ctx_st*) local_unnamed_addr #2

declare i32 @EVP_DecryptInit_ex(%struct.evp_cipher_ctx_st*, %struct.evp_cipher_st*, %struct.engine_st*, i8*, i8*) local_unnamed_addr #2

declare i32 @EVP_DecryptUpdate(%struct.evp_cipher_ctx_st*, i8*, i32*, i8*, i32) local_unnamed_addr #2

declare i32 @EVP_DecryptFinal_ex(%struct.evp_cipher_ctx_st*, i8*, i32*) local_unnamed_addr #2

declare i32 @EVP_tls_cbc_remove_padding(i64*, i64*, i8*, i64, i64, i64) local_unnamed_addr #2

declare i32 @EVP_CIPHER_CTX_block_size(%struct.evp_cipher_ctx_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare i32 @EVP_tls_cbc_record_digest_supported(%struct.env_md_st*) local_unnamed_addr #2

declare i32 @EVP_tls_cbc_digest_record(%struct.env_md_st*, i8*, i64*, i8*, i8*, i64, i64, i8*, i32) local_unnamed_addr #2

declare void @EVP_tls_cbc_copy_mac(i8*, i64, i8*, i64, i64) local_unnamed_addr #2

declare i32 @HMAC_Update(%struct.hmac_ctx_st*, i8*, i64) local_unnamed_addr #2

declare i32 @HMAC_Final(%struct.hmac_ctx_st*, i8*, i32*) local_unnamed_addr #2

declare i32 @CRYPTO_memcmp(i8*, i8*, i64) local_unnamed_addr #2

declare i32 @EVP_EncryptInit_ex(%struct.evp_cipher_ctx_st*, %struct.evp_cipher_st*, %struct.engine_st*, i8*, i8*) local_unnamed_addr #2

declare i32 @EVP_EncryptUpdate(%struct.evp_cipher_ctx_st*, i8*, i32*, i8*, i32) local_unnamed_addr #2

declare i32 @EVP_EncryptFinal_ex(%struct.evp_cipher_ctx_st*, i8*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_aes_128_cbc_sha1_tls_implicit_iv_init(%struct.evp_aead_ctx_st*, i8*, i64, i64, i32) #1 {
  %6 = tail call %struct.evp_cipher_st* @EVP_aes_128_cbc() #4
  %7 = tail call %struct.env_md_st* @EVP_sha1() #4
  %8 = tail call fastcc i32 @aead_tls_init(%struct.evp_aead_ctx_st* %0, i8* %1, i64 %2, i64 %3, i32 %4, %struct.evp_cipher_st* %6, %struct.env_md_st* %7, i8 signext 1)
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_tls_get_iv(%struct.evp_aead_ctx_st*, i8** nocapture, i64* nocapture) #1 {
  %4 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1
  %5 = bitcast %union.evp_aead_ctx_st_state* %4 to %struct.evp_cipher_ctx_st*
  %6 = tail call i32 @EVP_CIPHER_CTX_iv_length(%struct.evp_cipher_ctx_st* %5) #4
  %7 = icmp ult i32 %6, 2
  br i1 %7, label %11, label %8

8:                                                ; preds = %3
  %9 = zext i32 %6 to i64
  %10 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 44
  store i8* %10, i8** %1, align 8
  store i64 %9, i64* %2, align 8
  br label %11

11:                                               ; preds = %3, %8
  %12 = phi i32 [ 1, %8 ], [ 0, %3 ]
  ret i32 %12
}

declare i32 @EVP_CIPHER_CTX_iv_length(%struct.evp_cipher_ctx_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_aes_256_cbc_sha1_tls_init(%struct.evp_aead_ctx_st*, i8*, i64, i64, i32) #1 {
  %6 = tail call %struct.evp_cipher_st* @EVP_aes_256_cbc() #4
  %7 = tail call %struct.env_md_st* @EVP_sha1() #4
  %8 = tail call fastcc i32 @aead_tls_init(%struct.evp_aead_ctx_st* %0, i8* %1, i64 %2, i64 %3, i32 %4, %struct.evp_cipher_st* %6, %struct.env_md_st* %7, i8 signext 0)
  ret i32 %8
}

declare %struct.evp_cipher_st* @EVP_aes_256_cbc() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_aes_256_cbc_sha1_tls_implicit_iv_init(%struct.evp_aead_ctx_st*, i8*, i64, i64, i32) #1 {
  %6 = tail call %struct.evp_cipher_st* @EVP_aes_256_cbc() #4
  %7 = tail call %struct.env_md_st* @EVP_sha1() #4
  %8 = tail call fastcc i32 @aead_tls_init(%struct.evp_aead_ctx_st* %0, i8* %1, i64 %2, i64 %3, i32 %4, %struct.evp_cipher_st* %6, %struct.env_md_st* %7, i8 signext 1)
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_des_ede3_cbc_sha1_tls_init(%struct.evp_aead_ctx_st*, i8*, i64, i64, i32) #1 {
  %6 = tail call %struct.evp_cipher_st* @EVP_des_ede3_cbc() #4
  %7 = tail call %struct.env_md_st* @EVP_sha1() #4
  %8 = tail call fastcc i32 @aead_tls_init(%struct.evp_aead_ctx_st* %0, i8* %1, i64 %2, i64 %3, i32 %4, %struct.evp_cipher_st* %6, %struct.env_md_st* %7, i8 signext 0)
  ret i32 %8
}

declare %struct.evp_cipher_st* @EVP_des_ede3_cbc() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_des_ede3_cbc_sha1_tls_implicit_iv_init(%struct.evp_aead_ctx_st*, i8*, i64, i64, i32) #1 {
  %6 = tail call %struct.evp_cipher_st* @EVP_des_ede3_cbc() #4
  %7 = tail call %struct.env_md_st* @EVP_sha1() #4
  %8 = tail call fastcc i32 @aead_tls_init(%struct.evp_aead_ctx_st* %0, i8* %1, i64 %2, i64 %3, i32 %4, %struct.evp_cipher_st* %6, %struct.env_md_st* %7, i8 signext 1)
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_null_sha1_tls_init(%struct.evp_aead_ctx_st*, i8*, i64, i64, i32) #1 {
  %6 = tail call %struct.evp_cipher_st* @EVP_enc_null() #4
  %7 = tail call %struct.env_md_st* @EVP_sha1() #4
  %8 = tail call fastcc i32 @aead_tls_init(%struct.evp_aead_ctx_st* %0, i8* %1, i64 %2, i64 %3, i32 %4, %struct.evp_cipher_st* %6, %struct.env_md_st* %7, i8 signext 1)
  ret i32 %8
}

declare %struct.evp_cipher_st* @EVP_enc_null() local_unnamed_addr #2

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
