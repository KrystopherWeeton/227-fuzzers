; ModuleID = '../../third_party/libaom/source/libaom/av1/decoder/decodetxb.c'
source_filename = "../../third_party/libaom/source/libaom/av1/decoder/decodetxb.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SCAN_ORDER = type { i16*, i16* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%union.int_mv = type { i32 }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.DecoderCodingBlock = type { %struct.macroblockd, i32, [2 x i8*], [3 x i32*], [3 x i16], [3 x %struct.eob_info*], [3 x i16], [29 x i8], [13 x i8] }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.eob_info = type { i16, i16 }
%struct.aom_reader = type { i8*, i8*, %struct.od_ec_dec, i8 }
%struct.od_ec_dec = type { i8*, i32, i8*, i8*, i32, i16, i16 }
%struct.txb_ctx = type { i32, i32 }

@tx_type_to_class = internal unnamed_addr constant [16 x i8] c"\00\00\00\00\00\00\00\00\00\00\02\01\02\01\02\01", align 16
@txsize_log2_minus4 = internal unnamed_addr constant [19 x i8] c"\00\02\04\06\06\01\01\03\03\05\05\06\06\02\02\04\04\05\05", align 16
@av1_eob_offset_bits = external local_unnamed_addr constant [12 x i16], align 16
@tx_size_wide_unit = internal unnamed_addr constant [19 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 1, i32 2, i32 2, i32 4, i32 4, i32 8, i32 8, i32 16, i32 1, i32 4, i32 2, i32 8, i32 4, i32 16], align 16
@tx_size_high_unit = internal unnamed_addr constant [19 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 2, i32 1, i32 4, i32 2, i32 8, i32 4, i32 16, i32 8, i32 4, i32 1, i32 8, i32 2, i32 16, i32 4], align 16
@txsize_sqr_map = internal unnamed_addr constant [19 x i8] c"\00\01\02\03\04\00\00\01\01\02\02\03\03\00\00\01\01\02\02", align 16
@txsize_sqr_up_map = internal unnamed_addr constant [19 x i8] c"\00\01\02\03\04\01\01\02\02\03\03\04\04\02\02\03\03\04\04", align 16
@tx_size_wide_log2 = internal unnamed_addr constant [19 x i32] [i32 2, i32 3, i32 4, i32 5, i32 6, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 2, i32 4, i32 3, i32 5, i32 4, i32 6], align 16
@tx_size_wide = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 4, i32 8, i32 8, i32 16, i32 16, i32 32, i32 32, i32 64, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64], align 16
@tx_size_high = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 8, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64, i32 32, i32 16, i32 4, i32 32, i32 8, i32 64, i32 16], align 16
@intra_mode_to_tx_type._intra_mode_to_tx_type = internal unnamed_addr constant [13 x i8] c"\00\01\02\00\03\01\02\02\01\03\01\02\03", align 1
@get_uv_mode.uv2y = internal unnamed_addr constant [16 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\00\19\19", align 16
@av1_ext_tx_set_lookup = internal unnamed_addr constant [2 x [2 x i8]] [[2 x i8] c"\03\02", [2 x i8] c"\05\04"], align 1
@av1_ext_tx_used = internal unnamed_addr constant <{ <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32] }> <{ <{ i32, [15 x i32] }> <{ i32 1, [15 x i32] zeroinitializer }>, [16 x i32] [i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1] }>, align 16
@av1_scan_orders = external local_unnamed_addr constant [19 x [16 x %struct.SCAN_ORDER]], align 16
@av1_eob_group_start = external local_unnamed_addr constant [12 x i16], align 16
@av1_nz_map_ctx_offset = external local_unnamed_addr global [19 x i8*], align 16
@clip_max3 = internal unnamed_addr constant [256 x i8] calign 16
@nz_map_ctx_offset_1d = internal unnamed_addr constant [32 x i32] [i32 26, i32 31, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36], align 16
@.str = private unnamed_addr constant [30 x i8] c"Invalid length in read_golomb\00", align 1
@ss_size_lookup = internal unnamed_addr constant [22 x [2 x [2 x i8]]] [[2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] [[2 x i8] c"\01\00", [2 x i8] c"\FF\00"], [2 x [2 x i8]] [[2 x i8] c"\02\FF", [2 x i8] zeroinitializer], [2 x [2 x i8]] [[2 x i8] c"\03\02", [2 x i8] c"\01\00"], [2 x [2 x i8]] [[2 x i8] c"\04\03", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\05\FF", [2 x i8] c"\03\02"], [2 x [2 x i8]] [[2 x i8] c"\06\05", [2 x i8] c"\04\03"], [2 x [2 x i8]] [[2 x i8] c"\07\06", [2 x i8] c"\FF\04"], [2 x [2 x i8]] [[2 x i8] c"\08\FF", [2 x i8] c"\06\05"], [2 x [2 x i8]] [[2 x i8] c"\09\08", [2 x i8] c"\07\06"], [2 x [2 x i8]] [[2 x i8] c"\0A\09", [2 x i8] c"\FF\07"], [2 x [2 x i8]] [[2 x i8] c"\0B\FF", [2 x i8] c"\09\08"], [2 x [2 x i8]] [[2 x i8] c"\0C\0B", [2 x i8] c"\0A\09"], [2 x [2 x i8]] [[2 x i8] c"\0D\0C", [2 x i8] c"\FF\0A"], [2 x [2 x i8]] [[2 x i8] c"\0E\FF", [2 x i8] c"\0C\0B"], [2 x [2 x i8]] [[2 x i8] c"\0F\0E", [2 x i8] c"\0D\0C"], [2 x [2 x i8]] [[2 x i8] c"\10\01", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\11\FF", [2 x i8] c"\02\02"], [2 x [2 x i8]] [[2 x i8] c"\12\04", [2 x i8] c"\FF\10"], [2 x [2 x i8]] [[2 x i8] c"\13\FF", [2 x i8] c"\05\11"], [2 x [2 x i8]] [[2 x i8] c"\14\07", [2 x i8] c"\FF\12"], [2 x [2 x i8]] [[2 x i8] c"\15\FF", [2 x i8] c"\08\13"]], align 16
@get_txb_ctx.signs = internal unnamed_addr constant [3 x i8] c"\00\FF\01", align 1
@get_txb_ctx.dc_sign_contexts = internal unnamed_addr constant [65 x i8] c"\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\00\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02", align 16
@txsize_to_bsize = internal unnamed_addr constant [19 x i8] c"\00\03\06\09\0C\01\02\04\05\07\08\0A\0B\10\11\12\13\14\15", align 16
@get_txb_ctx.skip_contexts = internal unnamed_addr constant [5 x [5 x i8]] [[5 x i8] c"\01\02\02\02\03", [5 x i8] c"\02\04\04\04\05", [5 x i8] c"\02\04\04\04\05", [5 x i8] c"\02\04\04\04\05", [5 x i8] c"\03\05\05\05\06"], align 16
@num_pels_log2_lookup = internal unnamed_addr constant [22 x i8] c"\04\05\05\06\07\07\08\09\09\0A\0B\0B\0C\0D\0D\0E\06\06\08\08\0A\0A", align 16

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @av1_read_coeffs_txb(%struct.AV1Common*, %struct.DecoderCodingBlock*, %struct.aom_reader*, i32, i32, i32, %struct.txb_ctx* nocapture readonly, i8 zeroext) local_unnamed_addr #0 {
  %9 = alloca [1312 x i8], align 16
  %10 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0
  %11 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 39
  %12 = load %struct.frame_contexts*, %struct.frame_contexts** %11, align 8
  %13 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 40
  %14 = load i32, i32* %13, align 16
  %15 = add nsw i32 %14, 7
  %16 = shl i32 1, %15
  %17 = add nsw i32 %16, -1
  %18 = sub nsw i32 0, %16
  %19 = zext i8 %7 to i64
  %20 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_map, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %19
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = add nuw nsw i32 %22, 1
  %27 = add nuw nsw i32 %26, %25
  %28 = lshr i32 %27, 1
  %29 = icmp ne i32 %5, 0
  %30 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 6
  %31 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %30, align 8
  %32 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %31, align 8
  %33 = sext i32 %5 to i64
  %34 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %32, i64 0, i32 28
  %35 = load i16, i16* %34, align 1
  %36 = and i16 %35, 7
  %37 = zext i16 %36 to i64
  %38 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 3, i64 %33
  %39 = load i32*, i32** %38, align 8
  %40 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 4, i64 %33
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i64
  %43 = getelementptr inbounds i32, i32* %39, i64 %42
  %44 = tail call i32 @av1_get_tx_scale(i8 zeroext %7) #4
  switch i8 %7, label %45 [
    i8 4, label %46
    i8 12, label %46
    i8 11, label %46
    i8 18, label %55
    i8 17, label %58
  ]

45:                                               ; preds = %8
  br label %46

46:                                               ; preds = %8, %8, %8, %45
  %47 = phi i64 [ %19, %45 ], [ 3, %8 ], [ 3, %8 ], [ 3, %8 ]
  %48 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_log2, i64 0, i64 %47
  %49 = load i32, i32* %48, align 4
  switch i8 %7, label %50 [
    i8 4, label %51
    i8 12, label %51
    i8 11, label %51
    i8 18, label %55
    i8 17, label %58
  ]

50:                                               ; preds = %46
  br label %51

51:                                               ; preds = %46, %46, %46, %50
  %52 = phi i64 [ %19, %50 ], [ 3, %46 ], [ 3, %46 ], [ 3, %46 ]
  %53 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4
  switch i8 %7, label %61 [
    i8 4, label %62
    i8 12, label %62
    i8 11, label %62
    i8 18, label %55
    i8 17, label %58
  ]

55:                                               ; preds = %8, %46, %51
  %56 = phi i32 [ %54, %51 ], [ 32, %46 ], [ 32, %8 ]
  %57 = phi i32 [ %49, %51 ], [ %49, %46 ], [ 5, %8 ]
  br label %62

58:                                               ; preds = %8, %46, %51
  %59 = phi i32 [ %54, %51 ], [ 16, %46 ], [ 16, %8 ]
  %60 = phi i32 [ %49, %51 ], [ %49, %46 ], [ 4, %8 ]
  br label %62

61:                                               ; preds = %51
  br label %62

62:                                               ; preds = %51, %51, %51, %55, %58, %61
  %63 = phi i32 [ %54, %61 ], [ %59, %58 ], [ %56, %55 ], [ %54, %51 ], [ %54, %51 ], [ %54, %51 ]
  %64 = phi i32 [ %49, %61 ], [ %60, %58 ], [ %57, %55 ], [ %49, %51 ], [ %49, %51 ], [ %49, %51 ]
  %65 = phi i64 [ %19, %61 ], [ 9, %58 ], [ 10, %55 ], [ 3, %51 ], [ 3, %51 ], [ 3, %51 ]
  %66 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1312, i8* nonnull %68) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %68, i8 -86, i64 1312, i1 false)
  %69 = and i32 %28, 255
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %6, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 0, i64 %70, i64 %73, i64 0
  %75 = getelementptr inbounds %struct.aom_reader, %struct.aom_reader* %2, i64 0, i32 2
  %76 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %75, i16* %74, i32 2) #4
  %77 = getelementptr inbounds %struct.aom_reader, %struct.aom_reader* %2, i64 0, i32 3
  %78 = load i8, i8* %77, align 8
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %112, label %80

80:                                               ; preds = %62
  %81 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 0, i64 %70, i64 %73, i64 2
  %82 = load i16, i16* %81, align 2
  %83 = icmp ugt i16 %82, 15
  %84 = select i1 %83, i32 4, i32 3
  %85 = icmp ugt i16 %82, 31
  %86 = select i1 %85, i32 2, i32 1
  %87 = add nuw nsw i32 %86, %84
  %88 = zext i32 %76 to i64
  %89 = shl i64 %88, 56
  %90 = ashr exact i64 %89, 56
  %91 = and i64 %90, 4294967295
  %92 = icmp eq i64 %91, 0
  %93 = select i1 %92, i32 0, i32 32768
  %94 = load i16, i16* %74, align 2
  %95 = zext i16 %94 to i32
  %96 = icmp ult i32 %93, %95
  br i1 %96, label %97, label %102

97:                                               ; preds = %80
  %98 = sub nsw i32 %95, %93
  %99 = ashr i32 %98, %87
  %100 = trunc i32 %99 to i16
  %101 = sub i16 %94, %100
  br label %107

102:                                              ; preds = %80
  %103 = sub nsw i32 %93, %95
  %104 = ashr i32 %103, %87
  %105 = trunc i32 %104 to i16
  %106 = add i16 %94, %105
  br label %107

107:                                              ; preds = %102, %97
  %108 = phi i16 [ %106, %102 ], [ %101, %97 ]
  store i16 %108, i16* %74, align 2
  %109 = icmp ult i16 %82, 32
  %110 = zext i1 %109 to i16
  %111 = add i16 %82, %110
  store i16 %111, i16* %81, align 2
  br label %112

112:                                              ; preds = %62, %107
  %113 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 5, i64 %33
  %114 = load %struct.eob_info*, %struct.eob_info** %113, align 8
  %115 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 6, i64 %33
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i64
  %118 = getelementptr inbounds %struct.eob_info, %struct.eob_info* %114, i64 %117, i32 0
  %119 = getelementptr inbounds %struct.eob_info, %struct.eob_info* %114, i64 %117, i32 1
  store i16 0, i16* %119, align 2
  store i16 0, i16* %118, align 2
  %120 = icmp eq i32 %76, 0
  br i1 %120, label %132, label %121

121:                                              ; preds = %112
  store i16 0, i16* %119, align 2
  %122 = icmp eq i32 %5, 0
  br i1 %122, label %123, label %1249

123:                                              ; preds = %121
  %124 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 15
  %125 = load i8*, i8** %124, align 8
  %126 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 16
  %127 = load i32, i32* %126, align 16
  %128 = mul nsw i32 %127, %3
  %129 = add nsw i32 %128, %4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i8, i8* %125, i64 %130
  store i8 0, i8* %131, align 1
  br label %1249

132:                                              ; preds = %112
  %133 = icmp eq i32 %5, 0
  br i1 %133, label %134, label %135

134:                                              ; preds = %132
  tail call void @av1_read_tx_type(%struct.AV1Common* %0, %struct.macroblockd* %10, i32 %3, i32 %4, i8 zeroext %7, %struct.aom_reader* %2) #4
  br label %135

135:                                              ; preds = %134, %132
  %136 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 20, i32 9
  %137 = load i8, i8* %136, align 1, !range !2
  %138 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %30, align 8
  %139 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %138, align 8
  %140 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %139, i64 0, i32 28
  %141 = load i16, i16* %140, align 1
  %142 = and i16 %141, 7
  %143 = zext i16 %142 to i64
  %144 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 42, i64 %143
  %145 = load i32, i32* %144, align 4
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %229

147:                                              ; preds = %135
  %148 = lshr i64 399376, %19
  %149 = and i64 %148, 1
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %229

151:                                              ; preds = %147
  br i1 %29, label %162, label %152

152:                                              ; preds = %151
  %153 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 15
  %154 = load i8*, i8** %153, align 8
  %155 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 16
  %156 = load i32, i32* %155, align 16
  %157 = mul nsw i32 %156, %3
  %158 = add nsw i32 %157, %4
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i8, i8* %154, i64 %159
  %161 = load i8, i8* %160, align 1
  br label %229

162:                                              ; preds = %151
  %163 = trunc i16 %141 to i8
  %164 = icmp sgt i8 %163, -1
  br i1 %164, label %165, label %178

165:                                              ; preds = %162
  %166 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %139, i64 0, i32 6, i64 0
  %167 = load i8, i8* %166, align 8
  %168 = icmp slt i8 %167, 1
  br i1 %168, label %169, label %178

169:                                              ; preds = %165
  %170 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %139, i64 0, i32 3
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i64
  %173 = getelementptr inbounds [16 x i8], [16 x i8]* @get_uv_mode.uv2y, i64 0, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i64
  %176 = getelementptr inbounds [13 x i8], [13 x i8]* @intra_mode_to_tx_type._intra_mode_to_tx_type, i64 0, i64 %175
  %177 = load i8, i8* %176, align 1
  br label %197

178:                                              ; preds = %165, %162
  %179 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 4, i64 1, i32 2
  %180 = load i32, i32* %179, align 8
  %181 = shl i32 %3, %180
  %182 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 4, i64 1, i32 1
  %183 = load i32, i32* %182, align 4
  %184 = shl i32 %4, %183
  %185 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 15
  %186 = load i8*, i8** %185, align 8
  %187 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 16
  %188 = load i32, i32* %187, align 16
  %189 = mul nsw i32 %188, %181
  %190 = add nsw i32 %189, %184
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds i8, i8* %186, i64 %191
  %193 = load i8, i8* %192, align 1
  br i1 %164, label %194, label %202

194:                                              ; preds = %178
  %195 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %139, i64 0, i32 6, i64 0
  %196 = load i8, i8* %195, align 8
  br label %197

197:                                              ; preds = %194, %169
  %198 = phi i8 [ %167, %169 ], [ %196, %194 ]
  %199 = phi i8 [ %177, %169 ], [ %193, %194 ]
  %200 = icmp sgt i8 %198, 0
  %201 = zext i1 %200 to i32
  br label %202

202:                                              ; preds = %197, %178
  %203 = phi i8 [ %193, %178 ], [ %199, %197 ]
  %204 = phi i32 [ 1, %178 ], [ %201, %197 ]
  %205 = lshr i64 99848, %19
  %206 = and i64 %205, 1
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %210, label %208

208:                                              ; preds = %202
  %209 = trunc i32 %204 to i8
  br label %221

210:                                              ; preds = %202
  %211 = icmp eq i8 %137, 0
  br i1 %211, label %215, label %212

212:                                              ; preds = %210
  %213 = icmp eq i32 %204, 0
  %214 = select i1 %213, i8 2, i8 1
  br label %221

215:                                              ; preds = %210
  %216 = zext i32 %204 to i64
  %217 = lshr i64 394756, %19
  %218 = and i64 %217, 1
  %219 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @av1_ext_tx_set_lookup, i64 0, i64 %216, i64 %218
  %220 = load i8, i8* %219, align 1
  br label %221

221:                                              ; preds = %215, %212, %208
  %222 = phi i8 [ %209, %208 ], [ %214, %212 ], [ %220, %215 ]
  %223 = zext i8 %222 to i64
  %224 = zext i8 %203 to i64
  %225 = getelementptr inbounds [6 x [16 x i32]], [6 x [16 x i32]]* bitcast (<{ <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32] }>* @av1_ext_tx_used to [6 x [16 x i32]]*), i64 0, i64 %223, i64 %224
  %226 = load i32, i32* %225, align 4
  %227 = icmp eq i32 %226, 0
  %228 = select i1 %227, i8 0, i8 %203
  br label %229

229:                                              ; preds = %135, %147, %152, %221
  %230 = phi i8 [ 0, %147 ], [ 0, %135 ], [ %161, %152 ], [ %228, %221 ]
  %231 = zext i8 %230 to i64
  %232 = getelementptr inbounds [16 x i8], [16 x i8]* @tx_type_to_class, i64 0, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 22
  %235 = tail call i8* @av1_get_iqmatrix(%struct.CommonQuantParams* %234, %struct.macroblockd* %10, i32 %5, i8 zeroext %7, i8 zeroext %230) #4
  %236 = getelementptr inbounds [19 x [16 x %struct.SCAN_ORDER]], [19 x [16 x %struct.SCAN_ORDER]]* @av1_scan_orders, i64 0, i64 %19, i64 %231, i32 0
  %237 = load i16*, i16** %236, align 16
  %238 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_log2_minus4, i64 0, i64 %19
  %239 = load i8, i8* %238, align 1
  %240 = sext i8 %239 to i32
  %241 = icmp ult i8 %230, 10
  %242 = xor i1 %241, true
  switch i32 %240, label %495 [
    i32 0, label %243
    i32 1, label %285
    i32 2, label %327
    i32 3, label %369
    i32 4, label %411
    i32 5, label %453
  ]

243:                                              ; preds = %229
  %244 = zext i1 %29 to i64
  %245 = zext i1 %242 to i64
  %246 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 3, i64 %244, i64 %245, i64 0
  %247 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %75, i16* %246, i32 5) #4
  %248 = load i8, i8* %77, align 8
  %249 = icmp eq i8 %248, 0
  br i1 %249, label %537, label %250

250:                                              ; preds = %243
  %251 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 3, i64 %244, i64 %245, i64 5
  %252 = load i16, i16* %251, align 2
  %253 = icmp ugt i16 %252, 15
  %254 = select i1 %253, i32 4, i32 3
  %255 = icmp ugt i16 %252, 31
  %256 = select i1 %255, i32 3, i32 2
  %257 = add nuw nsw i32 %256, %254
  %258 = zext i32 %247 to i64
  %259 = shl i64 %258, 56
  %260 = ashr exact i64 %259, 56
  %261 = and i64 %260, 4294967295
  %262 = icmp eq i64 %261, 0
  %263 = select i1 %262, i32 0, i32 32768
  %264 = load i16, i16* %246, align 2
  %265 = zext i16 %264 to i32
  %266 = icmp ult i32 %263, %265
  br i1 %266, label %267, label %272

267:                                              ; preds = %250
  %268 = sub nsw i32 %265, %263
  %269 = ashr i32 %268, %257
  %270 = trunc i32 %269 to i16
  %271 = sub i16 %264, %270
  br label %277

272:                                              ; preds = %250
  %273 = sub nsw i32 %263, %265
  %274 = ashr i32 %273, %257
  %275 = trunc i32 %274 to i16
  %276 = add i16 %264, %275
  br label %277

277:                                              ; preds = %272, %267
  %278 = phi i16 [ %276, %272 ], [ %271, %267 ]
  store i16 %278, i16* %246, align 2
  %279 = icmp eq i64 %261, 1
  %280 = select i1 %279, i32 0, i32 %263
  %281 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 3, i64 %244, i64 %245, i64 1
  %282 = load i16, i16* %281, align 2
  %283 = zext i16 %282 to i32
  %284 = icmp ult i32 %280, %283
  br i1 %284, label %1462, label %1457

285:                                              ; preds = %229
  %286 = zext i1 %29 to i64
  %287 = zext i1 %242 to i64
  %288 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 4, i64 %286, i64 %287, i64 0
  %289 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %75, i16* %288, i32 6) #4
  %290 = load i8, i8* %77, align 8
  %291 = icmp eq i8 %290, 0
  br i1 %291, label %537, label %292

292:                                              ; preds = %285
  %293 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 4, i64 %286, i64 %287, i64 6
  %294 = load i16, i16* %293, align 2
  %295 = icmp ugt i16 %294, 15
  %296 = select i1 %295, i32 4, i32 3
  %297 = icmp ugt i16 %294, 31
  %298 = select i1 %297, i32 3, i32 2
  %299 = add nuw nsw i32 %298, %296
  %300 = zext i32 %289 to i64
  %301 = shl i64 %300, 56
  %302 = ashr exact i64 %301, 56
  %303 = and i64 %302, 4294967295
  %304 = icmp eq i64 %303, 0
  %305 = select i1 %304, i32 0, i32 32768
  %306 = load i16, i16* %288, align 2
  %307 = zext i16 %306 to i32
  %308 = icmp ult i32 %305, %307
  br i1 %308, label %309, label %314

309:                                              ; preds = %292
  %310 = sub nsw i32 %307, %305
  %311 = ashr i32 %310, %299
  %312 = trunc i32 %311 to i16
  %313 = sub i16 %306, %312
  br label %319

314:                                              ; preds = %292
  %315 = sub nsw i32 %305, %307
  %316 = ashr i32 %315, %299
  %317 = trunc i32 %316 to i16
  %318 = add i16 %306, %317
  br label %319

319:                                              ; preds = %314, %309
  %320 = phi i16 [ %318, %314 ], [ %313, %309 ]
  store i16 %320, i16* %288, align 2
  %321 = icmp eq i64 %303, 1
  %322 = select i1 %321, i32 0, i32 %305
  %323 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 4, i64 %286, i64 %287, i64 1
  %324 = load i16, i16* %323, align 2
  %325 = zext i16 %324 to i32
  %326 = icmp ult i32 %322, %325
  br i1 %326, label %1513, label %1508

327:                                              ; preds = %229
  %328 = zext i1 %29 to i64
  %329 = zext i1 %242 to i64
  %330 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 5, i64 %328, i64 %329, i64 0
  %331 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %75, i16* %330, i32 7) #4
  %332 = load i8, i8* %77, align 8
  %333 = icmp eq i8 %332, 0
  br i1 %333, label %537, label %334

334:                                              ; preds = %327
  %335 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 5, i64 %328, i64 %329, i64 7
  %336 = load i16, i16* %335, align 2
  %337 = icmp ugt i16 %336, 15
  %338 = select i1 %337, i32 4, i32 3
  %339 = icmp ugt i16 %336, 31
  %340 = select i1 %339, i32 3, i32 2
  %341 = add nuw nsw i32 %340, %338
  %342 = zext i32 %331 to i64
  %343 = shl i64 %342, 56
  %344 = ashr exact i64 %343, 56
  %345 = and i64 %344, 4294967295
  %346 = icmp eq i64 %345, 0
  %347 = select i1 %346, i32 0, i32 32768
  %348 = load i16, i16* %330, align 2
  %349 = zext i16 %348 to i32
  %350 = icmp ult i32 %347, %349
  br i1 %350, label %351, label %356

351:                                              ; preds = %334
  %352 = sub nsw i32 %349, %347
  %353 = ashr i32 %352, %341
  %354 = trunc i32 %353 to i16
  %355 = sub i16 %348, %354
  br label %361

356:                                              ; preds = %334
  %357 = sub nsw i32 %347, %349
  %358 = ashr i32 %357, %341
  %359 = trunc i32 %358 to i16
  %360 = add i16 %348, %359
  br label %361

361:                                              ; preds = %356, %351
  %362 = phi i16 [ %360, %356 ], [ %355, %351 ]
  store i16 %362, i16* %330, align 2
  %363 = icmp eq i64 %345, 1
  %364 = select i1 %363, i32 0, i32 %347
  %365 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 5, i64 %328, i64 %329, i64 1
  %366 = load i16, i16* %365, align 2
  %367 = zext i16 %366 to i32
  %368 = icmp ult i32 %364, %367
  br i1 %368, label %1582, label %1577

369:                                              ; preds = %229
  %370 = zext i1 %29 to i64
  %371 = zext i1 %242 to i64
  %372 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 6, i64 %370, i64 %371, i64 0
  %373 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %75, i16* %372, i32 8) #4
  %374 = load i8, i8* %77, align 8
  %375 = icmp eq i8 %374, 0
  br i1 %375, label %537, label %376

376:                                              ; preds = %369
  %377 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 6, i64 %370, i64 %371, i64 8
  %378 = load i16, i16* %377, align 2
  %379 = icmp ugt i16 %378, 15
  %380 = select i1 %379, i32 4, i32 3
  %381 = icmp ugt i16 %378, 31
  %382 = select i1 %381, i32 3, i32 2
  %383 = add nuw nsw i32 %382, %380
  %384 = zext i32 %373 to i64
  %385 = shl i64 %384, 56
  %386 = ashr exact i64 %385, 56
  %387 = and i64 %386, 4294967295
  %388 = icmp eq i64 %387, 0
  %389 = select i1 %388, i32 0, i32 32768
  %390 = load i16, i16* %372, align 2
  %391 = zext i16 %390 to i32
  %392 = icmp ult i32 %389, %391
  br i1 %392, label %393, label %398

393:                                              ; preds = %376
  %394 = sub nsw i32 %391, %389
  %395 = ashr i32 %394, %383
  %396 = trunc i32 %395 to i16
  %397 = sub i16 %390, %396
  br label %403

398:                                              ; preds = %376
  %399 = sub nsw i32 %389, %391
  %400 = ashr i32 %399, %383
  %401 = trunc i32 %400 to i16
  %402 = add i16 %390, %401
  br label %403

403:                                              ; preds = %398, %393
  %404 = phi i16 [ %402, %398 ], [ %397, %393 ]
  store i16 %404, i16* %372, align 2
  %405 = icmp eq i64 %387, 1
  %406 = select i1 %405, i32 0, i32 %389
  %407 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 6, i64 %370, i64 %371, i64 1
  %408 = load i16, i16* %407, align 2
  %409 = zext i16 %408 to i32
  %410 = icmp ult i32 %406, %409
  br i1 %410, label %1669, label %1664

411:                                              ; preds = %229
  %412 = zext i1 %29 to i64
  %413 = zext i1 %242 to i64
  %414 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 7, i64 %412, i64 %413, i64 0
  %415 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %75, i16* %414, i32 9) #4
  %416 = load i8, i8* %77, align 8
  %417 = icmp eq i8 %416, 0
  br i1 %417, label %537, label %418

418:                                              ; preds = %411
  %419 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 7, i64 %412, i64 %413, i64 9
  %420 = load i16, i16* %419, align 2
  %421 = icmp ugt i16 %420, 15
  %422 = select i1 %421, i32 4, i32 3
  %423 = icmp ugt i16 %420, 31
  %424 = select i1 %423, i32 3, i32 2
  %425 = add nuw nsw i32 %424, %422
  %426 = zext i32 %415 to i64
  %427 = shl i64 %426, 56
  %428 = ashr exact i64 %427, 56
  %429 = and i64 %428, 4294967295
  %430 = icmp eq i64 %429, 0
  %431 = select i1 %430, i32 0, i32 32768
  %432 = load i16, i16* %414, align 2
  %433 = zext i16 %432 to i32
  %434 = icmp ult i32 %431, %433
  br i1 %434, label %435, label %440

435:                                              ; preds = %418
  %436 = sub nsw i32 %433, %431
  %437 = ashr i32 %436, %425
  %438 = trunc i32 %437 to i16
  %439 = sub i16 %432, %438
  br label %445

440:                                              ; preds = %418
  %441 = sub nsw i32 %431, %433
  %442 = ashr i32 %441, %425
  %443 = trunc i32 %442 to i16
  %444 = add i16 %432, %443
  br label %445

445:                                              ; preds = %440, %435
  %446 = phi i16 [ %444, %440 ], [ %439, %435 ]
  store i16 %446, i16* %414, align 2
  %447 = icmp eq i64 %429, 1
  %448 = select i1 %447, i32 0, i32 %431
  %449 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 7, i64 %412, i64 %413, i64 1
  %450 = load i16, i16* %449, align 2
  %451 = zext i16 %450 to i32
  %452 = icmp ult i32 %448, %451
  br i1 %452, label %1774, label %1769

453:                                              ; preds = %229
  %454 = zext i1 %29 to i64
  %455 = zext i1 %242 to i64
  %456 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 8, i64 %454, i64 %455, i64 0
  %457 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %75, i16* %456, i32 10) #4
  %458 = load i8, i8* %77, align 8
  %459 = icmp eq i8 %458, 0
  br i1 %459, label %537, label %460

460:                                              ; preds = %453
  %461 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 8, i64 %454, i64 %455, i64 10
  %462 = load i16, i16* %461, align 2
  %463 = icmp ugt i16 %462, 15
  %464 = select i1 %463, i32 4, i32 3
  %465 = icmp ugt i16 %462, 31
  %466 = select i1 %465, i32 3, i32 2
  %467 = add nuw nsw i32 %466, %464
  %468 = zext i32 %457 to i64
  %469 = shl i64 %468, 56
  %470 = ashr exact i64 %469, 56
  %471 = and i64 %470, 4294967295
  %472 = icmp eq i64 %471, 0
  %473 = select i1 %472, i32 0, i32 32768
  %474 = load i16, i16* %456, align 2
  %475 = zext i16 %474 to i32
  %476 = icmp ult i32 %473, %475
  br i1 %476, label %477, label %482

477:                                              ; preds = %460
  %478 = sub nsw i32 %475, %473
  %479 = ashr i32 %478, %467
  %480 = trunc i32 %479 to i16
  %481 = sub i16 %474, %480
  br label %487

482:                                              ; preds = %460
  %483 = sub nsw i32 %473, %475
  %484 = ashr i32 %483, %467
  %485 = trunc i32 %484 to i16
  %486 = add i16 %474, %485
  br label %487

487:                                              ; preds = %482, %477
  %488 = phi i16 [ %486, %482 ], [ %481, %477 ]
  store i16 %488, i16* %456, align 2
  %489 = icmp eq i64 %471, 1
  %490 = select i1 %489, i32 0, i32 %473
  %491 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 8, i64 %454, i64 %455, i64 1
  %492 = load i16, i16* %491, align 2
  %493 = zext i16 %492 to i32
  %494 = icmp ult i32 %490, %493
  br i1 %494, label %1897, label %1892

495:                                              ; preds = %229
  %496 = zext i1 %29 to i64
  %497 = zext i1 %242 to i64
  %498 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 9, i64 %496, i64 %497, i64 0
  %499 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %75, i16* %498, i32 11) #4
  %500 = load i8, i8* %77, align 8
  %501 = icmp eq i8 %500, 0
  br i1 %501, label %537, label %502

502:                                              ; preds = %495
  %503 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 9, i64 %496, i64 %497, i64 11
  %504 = load i16, i16* %503, align 2
  %505 = icmp ugt i16 %504, 15
  %506 = select i1 %505, i32 4, i32 3
  %507 = icmp ugt i16 %504, 31
  %508 = select i1 %507, i32 3, i32 2
  %509 = add nuw nsw i32 %508, %506
  %510 = zext i32 %499 to i64
  %511 = shl i64 %510, 56
  %512 = ashr exact i64 %511, 56
  %513 = and i64 %512, 4294967295
  %514 = icmp eq i64 %513, 0
  %515 = select i1 %514, i32 0, i32 32768
  %516 = load i16, i16* %498, align 2
  %517 = zext i16 %516 to i32
  %518 = icmp ult i32 %515, %517
  br i1 %518, label %519, label %524

519:                                              ; preds = %502
  %520 = sub nsw i32 %517, %515
  %521 = ashr i32 %520, %509
  %522 = trunc i32 %521 to i16
  %523 = sub i16 %516, %522
  br label %529

524:                                              ; preds = %502
  %525 = sub nsw i32 %515, %517
  %526 = ashr i32 %525, %509
  %527 = trunc i32 %526 to i16
  %528 = add i16 %516, %527
  br label %529

529:                                              ; preds = %524, %519
  %530 = phi i16 [ %528, %524 ], [ %523, %519 ]
  store i16 %530, i16* %498, align 2
  %531 = icmp eq i64 %513, 1
  %532 = select i1 %531, i32 0, i32 %515
  %533 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 9, i64 %496, i64 %497, i64 1
  %534 = load i16, i16* %533, align 2
  %535 = zext i16 %534 to i32
  %536 = icmp ult i32 %532, %535
  br i1 %536, label %1303, label %1298

537:                                              ; preds = %1452, %495, %2028, %453, %1887, %411, %1764, %369, %1659, %327, %1572, %285, %1503, %243
  %538 = phi i32 [ %247, %243 ], [ %247, %1503 ], [ %289, %285 ], [ %289, %1572 ], [ %331, %327 ], [ %331, %1659 ], [ %373, %369 ], [ %373, %1764 ], [ %415, %411 ], [ %415, %1887 ], [ %457, %453 ], [ %457, %2028 ], [ %499, %495 ], [ %499, %1452 ]
  %539 = add nsw i32 %538, 1
  %540 = sext i32 %539 to i64
  %541 = getelementptr inbounds [12 x i16], [12 x i16]* @av1_eob_offset_bits, i64 0, i64 %540
  %542 = load i16, i16* %541, align 2
  %543 = sext i16 %542 to i32
  %544 = icmp sgt i16 %542, 0
  br i1 %544, label %545, label %605

545:                                              ; preds = %537
  %546 = add nsw i32 %538, -2
  %547 = zext i1 %29 to i64
  %548 = sext i32 %546 to i64
  %549 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 1, i64 %70, i64 %547, i64 %548, i64 0
  %550 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %75, i16* %549, i32 2) #4
  %551 = load i8, i8* %77, align 8
  %552 = icmp eq i8 %551, 0
  br i1 %552, label %585, label %553

553:                                              ; preds = %545
  %554 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 1, i64 %70, i64 %547, i64 %548, i64 2
  %555 = load i16, i16* %554, align 2
  %556 = icmp ugt i16 %555, 15
  %557 = select i1 %556, i32 4, i32 3
  %558 = icmp ugt i16 %555, 31
  %559 = select i1 %558, i32 2, i32 1
  %560 = add nuw nsw i32 %559, %557
  %561 = zext i32 %550 to i64
  %562 = shl i64 %561, 56
  %563 = ashr exact i64 %562, 56
  %564 = and i64 %563, 4294967295
  %565 = icmp eq i64 %564, 0
  %566 = select i1 %565, i32 0, i32 32768
  %567 = load i16, i16* %549, align 2
  %568 = zext i16 %567 to i32
  %569 = icmp ult i32 %566, %568
  br i1 %569, label %570, label %575

570:                                              ; preds = %553
  %571 = sub nsw i32 %568, %566
  %572 = ashr i32 %571, %560
  %573 = trunc i32 %572 to i16
  %574 = sub i16 %567, %573
  br label %580

575:                                              ; preds = %553
  %576 = sub nsw i32 %566, %568
  %577 = ashr i32 %576, %560
  %578 = trunc i32 %577 to i16
  %579 = add i16 %567, %578
  br label %580

580:                                              ; preds = %575, %570
  %581 = phi i16 [ %579, %575 ], [ %574, %570 ]
  store i16 %581, i16* %549, align 2
  %582 = icmp ult i16 %555, 32
  %583 = zext i1 %582 to i16
  %584 = add i16 %555, %583
  store i16 %584, i16* %554, align 2
  br label %585

585:                                              ; preds = %545, %580
  %586 = icmp eq i32 %550, 0
  %587 = add nsw i32 %543, -1
  %588 = shl i32 1, %587
  %589 = select i1 %586, i32 0, i32 %588
  %590 = icmp sgt i16 %542, 1
  br i1 %590, label %591, label %605

591:                                              ; preds = %585, %601
  %592 = phi i32 [ %603, %601 ], [ 1, %585 ]
  %593 = phi i32 [ %602, %601 ], [ %589, %585 ]
  %594 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %595 = icmp eq i32 %594, 0
  br i1 %595, label %601, label %596

596:                                              ; preds = %591
  %597 = xor i32 %592, -1
  %598 = add nsw i32 %597, %543
  %599 = shl i32 1, %598
  %600 = add nsw i32 %599, %593
  br label %601

601:                                              ; preds = %591, %596
  %602 = phi i32 [ %600, %596 ], [ %593, %591 ]
  %603 = add nuw nsw i32 %592, 1
  %604 = icmp eq i32 %603, %543
  br i1 %604, label %605, label %591

605:                                              ; preds = %601, %585, %537
  %606 = phi i32 [ 0, %537 ], [ %589, %585 ], [ %602, %601 ]
  %607 = getelementptr inbounds [12 x i16], [12 x i16]* @av1_eob_group_start, i64 0, i64 %540
  %608 = load i16, i16* %607, align 2
  %609 = sext i16 %608 to i32
  %610 = icmp sgt i16 %608, 2
  %611 = select i1 %610, i32 %606, i32 0
  %612 = add nsw i32 %611, %609
  %613 = trunc i32 %612 to i16
  store i16 %613, i16* %118, align 2
  %614 = and i32 %612, 65534
  %615 = icmp eq i32 %614, 0
  br i1 %615, label %622, label %616

616:                                              ; preds = %605
  %617 = add nsw i32 %63, 4
  %618 = add nsw i32 %67, 4
  %619 = mul nsw i32 %618, %617
  %620 = add nsw i32 %619, 16
  %621 = sext i32 %620 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %68, i8 0, i64 %621, i1 false)
  br label %622

622:                                              ; preds = %605, %616
  %623 = and i32 %612, 65535
  %624 = add nsw i32 %623, -1
  %625 = sext i32 %624 to i64
  %626 = getelementptr inbounds i16, i16* %237, i64 %625
  %627 = load i16, i16* %626, align 2
  %628 = sext i16 %627 to i32
  %629 = icmp eq i32 %624, 0
  br i1 %629, label %638, label %630

630:                                              ; preds = %622
  %631 = shl i32 %67, %64
  %632 = sdiv i32 %631, 8
  %633 = icmp slt i32 %632, %624
  br i1 %633, label %634, label %638

634:                                              ; preds = %630
  %635 = sdiv i32 %631, 4
  %636 = icmp slt i32 %635, %624
  %637 = select i1 %636, i64 3, i64 2
  br label %638

638:                                              ; preds = %622, %630, %634
  %639 = phi i64 [ 0, %622 ], [ 1, %630 ], [ %637, %634 ]
  %640 = zext i1 %29 to i64
  %641 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 10, i64 %70, i64 %640, i64 %639, i64 0
  %642 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %75, i16* %641, i32 3) #4
  %643 = load i8, i8* %77, align 8
  %644 = icmp eq i8 %643, 0
  br i1 %644, label %680, label %645

645:                                              ; preds = %638
  %646 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 10, i64 %70, i64 %640, i64 %639, i64 3
  %647 = load i16, i16* %646, align 2
  %648 = icmp ugt i16 %647, 15
  %649 = select i1 %648, i32 4, i32 3
  %650 = icmp ugt i16 %647, 31
  %651 = select i1 %650, i32 2, i32 1
  %652 = add nuw nsw i32 %651, %649
  %653 = zext i32 %642 to i64
  %654 = shl i64 %653, 56
  %655 = ashr exact i64 %654, 56
  %656 = and i64 %655, 4294967295
  %657 = icmp eq i64 %656, 0
  %658 = select i1 %657, i32 0, i32 32768
  %659 = load i16, i16* %641, align 2
  %660 = zext i16 %659 to i32
  %661 = icmp ult i32 %658, %660
  br i1 %661, label %662, label %667

662:                                              ; preds = %645
  %663 = sub nsw i32 %660, %658
  %664 = ashr i32 %663, %652
  %665 = trunc i32 %664 to i16
  %666 = sub i16 %659, %665
  br label %672

667:                                              ; preds = %645
  %668 = sub nsw i32 %658, %660
  %669 = ashr i32 %668, %652
  %670 = trunc i32 %669 to i16
  %671 = add i16 %659, %670
  br label %672

672:                                              ; preds = %667, %662
  %673 = phi i16 [ %671, %667 ], [ %666, %662 ]
  store i16 %673, i16* %641, align 2
  %674 = icmp eq i64 %656, 1
  %675 = select i1 %674, i32 0, i32 %658
  %676 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 10, i64 %70, i64 %640, i64 %639, i64 1
  %677 = load i16, i16* %676, align 2
  %678 = zext i16 %677 to i32
  %679 = icmp ult i32 %675, %678
  br i1 %679, label %1288, label %1283

680:                                              ; preds = %638, %1293
  %681 = add nsw i32 %642, 1
  %682 = icmp sgt i32 %642, 1
  %683 = ashr i32 %628, %64
  br i1 %682, label %684, label %760

684:                                              ; preds = %680
  %685 = shl i32 %683, %64
  %686 = sub nsw i32 %628, %685
  %687 = icmp eq i16 %627, 0
  br i1 %687, label %706, label %688

688:                                              ; preds = %684
  %689 = icmp slt i32 %683, 2
  %690 = and i1 %241, %689
  %691 = icmp slt i32 %686, 2
  %692 = and i1 %690, %691
  br i1 %692, label %706, label %693

693:                                              ; preds = %688
  %694 = lshr i64 43008, %231
  %695 = and i64 %694, 1
  %696 = icmp ne i64 %695, 0
  %697 = icmp eq i32 %686, 0
  %698 = and i1 %696, %697
  br i1 %698, label %706, label %699

699:                                              ; preds = %693
  %700 = lshr i64 21504, %231
  %701 = and i64 %700, 1
  %702 = icmp ne i64 %701, 0
  %703 = icmp eq i32 %683, 0
  %704 = and i1 %702, %703
  %705 = select i1 %704, i64 7, i64 14
  br label %706

706:                                              ; preds = %684, %688, %693, %699
  %707 = phi i64 [ %705, %699 ], [ 0, %684 ], [ 7, %693 ], [ 7, %688 ]
  %708 = icmp ult i32 %69, 3
  %709 = select i1 %708, i32 %69, i32 3
  %710 = zext i32 %709 to i64
  %711 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 12, i64 %710, i64 %640, i64 %707, i64 0
  %712 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 12, i64 %710, i64 %640, i64 %707, i64 4
  %713 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 12, i64 %710, i64 %640, i64 %707, i64 1
  %714 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 12, i64 %710, i64 %640, i64 %707, i64 2
  br label %715

715:                                              ; preds = %754, %706
  %716 = phi i32 [ 0, %706 ], [ %757, %754 ]
  %717 = phi i32 [ %681, %706 ], [ %755, %754 ]
  %718 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %75, i16* %711, i32 4) #4
  %719 = load i8, i8* %77, align 8
  %720 = icmp eq i8 %719, 0
  br i1 %720, label %754, label %721

721:                                              ; preds = %715
  %722 = load i16, i16* %712, align 2
  %723 = icmp ugt i16 %722, 15
  %724 = select i1 %723, i32 4, i32 3
  %725 = icmp ugt i16 %722, 31
  %726 = select i1 %725, i32 3, i32 2
  %727 = add nuw nsw i32 %726, %724
  %728 = zext i32 %718 to i64
  %729 = shl i64 %728, 56
  %730 = ashr exact i64 %729, 56
  %731 = and i64 %730, 4294967295
  %732 = icmp eq i64 %731, 0
  %733 = select i1 %732, i32 0, i32 32768
  %734 = load i16, i16* %711, align 2
  %735 = zext i16 %734 to i32
  %736 = icmp ult i32 %733, %735
  br i1 %736, label %737, label %742

737:                                              ; preds = %721
  %738 = sub nsw i32 %735, %733
  %739 = ashr i32 %738, %727
  %740 = trunc i32 %739 to i16
  %741 = sub i16 %734, %740
  br label %747

742:                                              ; preds = %721
  %743 = sub nsw i32 %733, %735
  %744 = ashr i32 %743, %727
  %745 = trunc i32 %744 to i16
  %746 = add i16 %734, %745
  br label %747

747:                                              ; preds = %742, %737
  %748 = phi i16 [ %746, %742 ], [ %741, %737 ]
  store i16 %748, i16* %711, align 2
  %749 = icmp eq i64 %731, 1
  %750 = select i1 %749, i32 0, i32 %733
  %751 = load i16, i16* %713, align 2
  %752 = zext i16 %751 to i32
  %753 = icmp ult i32 %750, %752
  br i1 %753, label %1256, label %1251

754:                                              ; preds = %715, %1278
  %755 = add nsw i32 %718, %717
  %756 = icmp sgt i32 %718, 2
  %757 = add nuw nsw i32 %716, 3
  %758 = icmp ult i32 %757, 12
  %759 = and i1 %756, %758
  br i1 %759, label %715, label %760

760:                                              ; preds = %754, %680
  %761 = phi i32 [ %681, %680 ], [ %755, %754 ]
  %762 = trunc i32 %761 to i8
  %763 = shl nsw i32 %683, 2
  %764 = add nsw i32 %763, %628
  %765 = sext i32 %764 to i64
  %766 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %765
  store i8 %762, i8* %766, align 1
  %767 = load i16, i16* %118, align 2
  %768 = icmp ugt i16 %767, 1
  br i1 %768, label %769, label %1032

769:                                              ; preds = %760
  %770 = zext i16 %767 to i32
  %771 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 11, i64 %70, i64 %640, i64 0
  %772 = icmp ult i32 %69, 3
  %773 = select i1 %772, i32 %69, i32 3
  %774 = zext i32 %773 to i64
  %775 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 12, i64 %774, i64 %640, i64 0
  %776 = add nsw i32 %770, -2
  br i1 %241, label %777, label %1029

777:                                              ; preds = %769
  %778 = icmp sgt i32 %776, 0
  br i1 %778, label %779, label %1029

779:                                              ; preds = %777
  %780 = shl i32 1, %64
  %781 = add nsw i32 %780, 4
  %782 = sext i32 %781 to i64
  %783 = add nsw i32 %780, 5
  %784 = sext i32 %783 to i64
  %785 = shl i32 2, %64
  %786 = add nsw i32 %785, 8
  %787 = sext i32 %786 to i64
  %788 = getelementptr inbounds [19 x i8*], [19 x i8*]* @av1_nz_map_ctx_offset, i64 0, i64 %19
  %789 = sext i32 %776 to i64
  br label %790

790:                                              ; preds = %959, %779
  %791 = phi i64 [ %789, %779 ], [ %962, %959 ]
  %792 = getelementptr inbounds i16, i16* %237, i64 %791
  %793 = load i16, i16* %792, align 2
  %794 = sext i16 %793 to i32
  %795 = ashr i32 %794, %64
  %796 = shl nsw i32 %795, 2
  %797 = add nsw i32 %796, %794
  %798 = sext i32 %797 to i64
  %799 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %798
  %800 = getelementptr inbounds i8, i8* %799, i64 1
  %801 = load i8, i8* %800, align 1
  %802 = icmp ult i8 %801, 3
  %803 = select i1 %802, i8 %801, i8 3
  %804 = getelementptr inbounds i8, i8* %799, i64 %782
  %805 = load i8, i8* %804, align 1
  %806 = icmp ult i8 %805, 3
  %807 = select i1 %806, i8 %805, i8 3
  %808 = getelementptr inbounds i8, i8* %799, i64 %784
  %809 = load i8, i8* %808, align 1
  %810 = icmp ult i8 %809, 3
  %811 = select i1 %810, i8 %809, i8 3
  %812 = getelementptr inbounds i8, i8* %799, i64 2
  %813 = load i8, i8* %812, align 1
  %814 = icmp ult i8 %813, 3
  %815 = select i1 %814, i8 %813, i8 3
  %816 = getelementptr inbounds i8, i8* %799, i64 %787
  %817 = load i8, i8* %816, align 1
  %818 = icmp ult i8 %817, 3
  %819 = select i1 %818, i8 %817, i8 3
  %820 = add nuw nsw i8 %803, 1
  %821 = add nuw nsw i8 %820, %807
  %822 = add nuw nsw i8 %821, %811
  %823 = add nuw nsw i8 %822, %815
  %824 = add nuw nsw i8 %823, %819
  %825 = icmp ult i8 %824, 8
  %826 = lshr i8 %824, 1
  %827 = select i1 %825, i8 %826, i8 4
  %828 = zext i8 %827 to i64
  %829 = load i8*, i8** %788, align 8
  %830 = sext i16 %793 to i64
  %831 = getelementptr inbounds i8, i8* %829, i64 %830
  %832 = load i8, i8* %831, align 1
  %833 = sext i8 %832 to i64
  %834 = add nsw i64 %828, %833
  %835 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 11, i64 %70, i64 %640, i64 %834, i64 0
  %836 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %75, i16* %835, i32 4) #4
  %837 = load i8, i8* %77, align 8
  %838 = icmp eq i8 %837, 0
  br i1 %838, label %874, label %839

839:                                              ; preds = %790
  %840 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 11, i64 %70, i64 %640, i64 %834, i64 4
  %841 = load i16, i16* %840, align 2
  %842 = icmp ugt i16 %841, 15
  %843 = select i1 %842, i32 4, i32 3
  %844 = icmp ugt i16 %841, 31
  %845 = select i1 %844, i32 3, i32 2
  %846 = add nuw nsw i32 %845, %843
  %847 = zext i32 %836 to i64
  %848 = shl i64 %847, 56
  %849 = ashr exact i64 %848, 56
  %850 = and i64 %849, 4294967295
  %851 = icmp eq i64 %850, 0
  %852 = select i1 %851, i32 0, i32 32768
  %853 = load i16, i16* %835, align 2
  %854 = zext i16 %853 to i32
  %855 = icmp ult i32 %852, %854
  br i1 %855, label %856, label %861

856:                                              ; preds = %839
  %857 = sub nsw i32 %854, %852
  %858 = ashr i32 %857, %846
  %859 = trunc i32 %858 to i16
  %860 = sub i16 %853, %859
  br label %866

861:                                              ; preds = %839
  %862 = sub nsw i32 %852, %854
  %863 = ashr i32 %862, %846
  %864 = trunc i32 %863 to i16
  %865 = add i16 %853, %864
  br label %866

866:                                              ; preds = %861, %856
  %867 = phi i16 [ %865, %861 ], [ %860, %856 ]
  store i16 %867, i16* %835, align 2
  %868 = icmp eq i64 %850, 1
  %869 = select i1 %868, i32 0, i32 %852
  %870 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 11, i64 %70, i64 %640, i64 %834, i64 1
  %871 = load i16, i16* %870, align 2
  %872 = zext i16 %871 to i32
  %873 = icmp ult i32 %869, %872
  br i1 %873, label %969, label %964

874:                                              ; preds = %992, %790
  %875 = icmp sgt i32 %836, 2
  br i1 %875, label %876, label %959

876:                                              ; preds = %874
  %877 = shl i32 %795, %64
  %878 = sub nsw i32 %794, %877
  %879 = mul nsw i32 %795, %781
  %880 = add nsw i32 %878, %879
  %881 = add nsw i32 %880, 1
  %882 = sext i32 %881 to i64
  %883 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %882
  %884 = load i8, i8* %883, align 1
  %885 = icmp ult i8 %884, 15
  %886 = select i1 %885, i8 %884, i8 15
  %887 = add nsw i32 %880, %781
  %888 = sext i32 %887 to i64
  %889 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %888
  %890 = load i8, i8* %889, align 1
  %891 = icmp ult i8 %890, 15
  %892 = select i1 %891, i8 %890, i8 15
  %893 = add nsw i32 %881, %781
  %894 = sext i32 %893 to i64
  %895 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %894
  %896 = load i8, i8* %895, align 1
  %897 = icmp ult i8 %896, 15
  %898 = select i1 %897, i8 %896, i8 15
  %899 = add nuw nsw i8 %886, 1
  %900 = add nuw nsw i8 %899, %892
  %901 = add nuw nsw i8 %900, %898
  %902 = icmp ult i8 %901, 12
  %903 = lshr i8 %901, 1
  %904 = select i1 %902, i8 %903, i8 6
  %905 = zext i8 %904 to i64
  %906 = or i32 %878, %795
  %907 = icmp slt i32 %906, 2
  %908 = select i1 %907, i64 7, i64 14
  %909 = add nuw nsw i64 %908, %905
  %910 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 12, i64 %774, i64 %640, i64 %909, i64 0
  %911 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 12, i64 %774, i64 %640, i64 %909, i64 4
  %912 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 12, i64 %774, i64 %640, i64 %909, i64 1
  %913 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 12, i64 %774, i64 %640, i64 %909, i64 2
  br label %914

914:                                              ; preds = %953, %876
  %915 = phi i32 [ 0, %876 ], [ %956, %953 ]
  %916 = phi i32 [ %836, %876 ], [ %954, %953 ]
  %917 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %75, i16* %910, i32 4) #4
  %918 = load i8, i8* %77, align 8
  %919 = icmp eq i8 %918, 0
  br i1 %919, label %953, label %920

920:                                              ; preds = %914
  %921 = load i16, i16* %911, align 2
  %922 = icmp ugt i16 %921, 15
  %923 = select i1 %922, i32 4, i32 3
  %924 = icmp ugt i16 %921, 31
  %925 = select i1 %924, i32 3, i32 2
  %926 = add nuw nsw i32 %925, %923
  %927 = zext i32 %917 to i64
  %928 = shl i64 %927, 56
  %929 = ashr exact i64 %928, 56
  %930 = and i64 %929, 4294967295
  %931 = icmp eq i64 %930, 0
  %932 = select i1 %931, i32 0, i32 32768
  %933 = load i16, i16* %910, align 2
  %934 = zext i16 %933 to i32
  %935 = icmp ult i32 %932, %934
  br i1 %935, label %936, label %941

936:                                              ; preds = %920
  %937 = sub nsw i32 %934, %932
  %938 = ashr i32 %937, %926
  %939 = trunc i32 %938 to i16
  %940 = sub i16 %933, %939
  br label %946

941:                                              ; preds = %920
  %942 = sub nsw i32 %932, %934
  %943 = ashr i32 %942, %926
  %944 = trunc i32 %943 to i16
  %945 = add i16 %933, %944
  br label %946

946:                                              ; preds = %941, %936
  %947 = phi i16 [ %945, %941 ], [ %940, %936 ]
  store i16 %947, i16* %910, align 2
  %948 = icmp eq i64 %930, 1
  %949 = select i1 %948, i32 0, i32 %932
  %950 = load i16, i16* %912, align 2
  %951 = zext i16 %950 to i32
  %952 = icmp ult i32 %949, %951
  br i1 %952, label %1002, label %997

953:                                              ; preds = %1024, %914
  %954 = add nsw i32 %917, %916
  %955 = icmp sgt i32 %917, 2
  %956 = add nuw nsw i32 %915, 3
  %957 = icmp ult i32 %956, 12
  %958 = and i1 %957, %955
  br i1 %958, label %914, label %959

959:                                              ; preds = %953, %874
  %960 = phi i32 [ %836, %874 ], [ %954, %953 ]
  %961 = trunc i32 %960 to i8
  store i8 %961, i8* %799, align 1
  %962 = add nsw i64 %791, -1
  %963 = icmp sgt i64 %962, 0
  br i1 %963, label %790, label %1029

964:                                              ; preds = %866
  %965 = sub nsw i32 %869, %872
  %966 = ashr i32 %965, %846
  %967 = trunc i32 %966 to i16
  %968 = add i16 %871, %967
  br label %974

969:                                              ; preds = %866
  %970 = sub nsw i32 %872, %869
  %971 = ashr i32 %970, %846
  %972 = trunc i32 %971 to i16
  %973 = sub i16 %871, %972
  br label %974

974:                                              ; preds = %969, %964
  %975 = phi i16 [ %968, %964 ], [ %973, %969 ]
  store i16 %975, i16* %870, align 2
  %976 = icmp eq i64 %850, 2
  %977 = select i1 %976, i32 0, i32 %869
  %978 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 11, i64 %70, i64 %640, i64 %834, i64 2
  %979 = load i16, i16* %978, align 2
  %980 = zext i16 %979 to i32
  %981 = icmp ult i32 %977, %980
  br i1 %981, label %987, label %982

982:                                              ; preds = %974
  %983 = sub nsw i32 %977, %980
  %984 = ashr i32 %983, %846
  %985 = trunc i32 %984 to i16
  %986 = add i16 %979, %985
  br label %992

987:                                              ; preds = %974
  %988 = sub nsw i32 %980, %977
  %989 = ashr i32 %988, %846
  %990 = trunc i32 %989 to i16
  %991 = sub i16 %979, %990
  br label %992

992:                                              ; preds = %987, %982
  %993 = phi i16 [ %986, %982 ], [ %991, %987 ]
  store i16 %993, i16* %978, align 2
  %994 = icmp ult i16 %841, 32
  %995 = zext i1 %994 to i16
  %996 = add i16 %841, %995
  store i16 %996, i16* %840, align 2
  br label %874

997:                                              ; preds = %946
  %998 = sub nsw i32 %949, %951
  %999 = ashr i32 %998, %926
  %1000 = trunc i32 %999 to i16
  %1001 = add i16 %950, %1000
  br label %1007

1002:                                             ; preds = %946
  %1003 = sub nsw i32 %951, %949
  %1004 = ashr i32 %1003, %926
  %1005 = trunc i32 %1004 to i16
  %1006 = sub i16 %950, %1005
  br label %1007

1007:                                             ; preds = %1002, %997
  %1008 = phi i16 [ %1001, %997 ], [ %1006, %1002 ]
  store i16 %1008, i16* %912, align 2
  %1009 = icmp eq i64 %930, 2
  %1010 = select i1 %1009, i32 0, i32 %949
  %1011 = load i16, i16* %913, align 2
  %1012 = zext i16 %1011 to i32
  %1013 = icmp ult i32 %1010, %1012
  br i1 %1013, label %1019, label %1014

1014:                                             ; preds = %1007
  %1015 = sub nsw i32 %1010, %1012
  %1016 = ashr i32 %1015, %926
  %1017 = trunc i32 %1016 to i16
  %1018 = add i16 %1011, %1017
  br label %1024

1019:                                             ; preds = %1007
  %1020 = sub nsw i32 %1012, %1010
  %1021 = ashr i32 %1020, %926
  %1022 = trunc i32 %1021 to i16
  %1023 = sub i16 %1011, %1022
  br label %1024

1024:                                             ; preds = %1019, %1014
  %1025 = phi i16 [ %1018, %1014 ], [ %1023, %1019 ]
  store i16 %1025, i16* %913, align 2
  %1026 = icmp ult i16 %921, 32
  %1027 = zext i1 %1026 to i16
  %1028 = add i16 %921, %1027
  store i16 %1028, i16* %911, align 2
  br label %953

1029:                                             ; preds = %959, %769, %777
  %1030 = phi i32 [ 0, %777 ], [ %776, %769 ], [ 0, %959 ]
  call fastcc void @read_coeffs_reverse(%struct.aom_reader* %2, i8 zeroext %7, i8 zeroext %233, i32 %1030, i16* %237, i32 %64, i8* nonnull %68, [5 x i16]* %771, [5 x i16]* %775)
  %1031 = load i16, i16* %118, align 2
  br label %1032

1032:                                             ; preds = %1029, %760
  %1033 = phi i16 [ %1031, %1029 ], [ %767, %760 ]
  %1034 = icmp eq i16 %1033, 0
  br i1 %1034, label %1041, label %1035

1035:                                             ; preds = %1032
  %1036 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %6, i64 0, i32 1
  %1037 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 45
  %1038 = icmp eq i8* %235, null
  br label %1057

1039:                                             ; preds = %1242
  %1040 = icmp slt i32 %1244, 7
  br i1 %1040, label %1041, label %1044

1041:                                             ; preds = %1032, %1039
  %1042 = phi i32 [ %1245, %1039 ], [ 0, %1032 ]
  %1043 = phi i32 [ %1244, %1039 ], [ 0, %1032 ]
  br label %1044

1044:                                             ; preds = %1039, %1041
  %1045 = phi i32 [ %1042, %1041 ], [ %1245, %1039 ]
  %1046 = phi i32 [ %1043, %1041 ], [ 7, %1039 ]
  %1047 = icmp slt i32 %1045, 0
  br i1 %1047, label %1048, label %1050

1048:                                             ; preds = %1044
  %1049 = or i32 %1046, 8
  br label %1054

1050:                                             ; preds = %1044
  %1051 = icmp eq i32 %1045, 0
  %1052 = add nsw i32 %1046, 16
  %1053 = select i1 %1051, i32 %1046, i32 %1052
  br label %1054

1054:                                             ; preds = %1050, %1048
  %1055 = phi i32 [ %1049, %1048 ], [ %1053, %1050 ]
  %1056 = trunc i32 %1055 to i8
  br label %1249

1057:                                             ; preds = %1035, %1242
  %1058 = phi i16 [ %1033, %1035 ], [ %1243, %1242 ]
  %1059 = phi i64 [ 0, %1035 ], [ %1246, %1242 ]
  %1060 = phi i32 [ 0, %1035 ], [ %1245, %1242 ]
  %1061 = phi i32 [ 0, %1035 ], [ %1244, %1242 ]
  %1062 = getelementptr inbounds i16, i16* %237, i64 %1059
  %1063 = load i16, i16* %1062, align 2
  %1064 = sext i16 %1063 to i32
  %1065 = ashr i32 %1064, %64
  %1066 = shl nsw i32 %1065, 2
  %1067 = add nsw i32 %1066, %1064
  %1068 = sext i32 %1067 to i64
  %1069 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %1068
  %1070 = load i8, i8* %1069, align 1
  %1071 = zext i8 %1070 to i32
  %1072 = icmp eq i8 %1070, 0
  br i1 %1072, label %1242, label %1073

1073:                                             ; preds = %1057
  %1074 = load i16, i16* %119, align 2
  %1075 = zext i16 %1074 to i32
  %1076 = icmp sgt i32 %1075, %1064
  %1077 = select i1 %1076, i16 %1074, i16 %1063
  store i16 %1077, i16* %119, align 2
  %1078 = icmp eq i64 %1059, 0
  br i1 %1078, label %1079, label %1118

1079:                                             ; preds = %1073
  %1080 = load i32, i32* %1036, align 4
  %1081 = sext i32 %1080 to i64
  %1082 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 2, i64 %640, i64 %1081, i64 0
  %1083 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %75, i16* %1082, i32 2) #4
  %1084 = load i8, i8* %77, align 8
  %1085 = icmp eq i8 %1084, 0
  br i1 %1085, label %1120, label %1086

1086:                                             ; preds = %1079
  %1087 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 2, i64 %640, i64 %1081, i64 2
  %1088 = load i16, i16* %1087, align 2
  %1089 = icmp ugt i16 %1088, 15
  %1090 = select i1 %1089, i32 4, i32 3
  %1091 = icmp ugt i16 %1088, 31
  %1092 = select i1 %1091, i32 2, i32 1
  %1093 = add nuw nsw i32 %1092, %1090
  %1094 = zext i32 %1083 to i64
  %1095 = shl i64 %1094, 56
  %1096 = ashr exact i64 %1095, 56
  %1097 = and i64 %1096, 4294967295
  %1098 = icmp eq i64 %1097, 0
  %1099 = select i1 %1098, i32 0, i32 32768
  %1100 = load i16, i16* %1082, align 2
  %1101 = zext i16 %1100 to i32
  %1102 = icmp ult i32 %1099, %1101
  br i1 %1102, label %1103, label %1108

1103:                                             ; preds = %1086
  %1104 = sub nsw i32 %1101, %1099
  %1105 = ashr i32 %1104, %1093
  %1106 = trunc i32 %1105 to i16
  %1107 = sub i16 %1100, %1106
  br label %1113

1108:                                             ; preds = %1086
  %1109 = sub nsw i32 %1099, %1101
  %1110 = ashr i32 %1109, %1093
  %1111 = trunc i32 %1110 to i16
  %1112 = add i16 %1100, %1111
  br label %1113

1113:                                             ; preds = %1108, %1103
  %1114 = phi i16 [ %1112, %1108 ], [ %1107, %1103 ]
  store i16 %1114, i16* %1082, align 2
  %1115 = icmp ult i16 %1088, 32
  %1116 = zext i1 %1115 to i16
  %1117 = add i16 %1088, %1116
  store i16 %1117, i16* %1087, align 2
  br label %1120

1118:                                             ; preds = %1073
  %1119 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  br label %1120

1120:                                             ; preds = %1113, %1079, %1118
  %1121 = phi i32 [ %1119, %1118 ], [ %1083, %1079 ], [ %1083, %1113 ]
  %1122 = trunc i32 %1121 to i8
  %1123 = icmp ugt i8 %1070, 14
  br i1 %1123, label %1124, label %1202

1124:                                             ; preds = %1120
  %1125 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1126 = icmp eq i32 %1125, 0
  br i1 %1126, label %1139, label %1199

1127:                                             ; preds = %1196, %1193, %1190, %1187, %1184, %1181, %1178, %1175, %1172, %1169, %1166, %1163, %1160, %1157, %1154, %1151, %1148, %1145, %1142, %1139
  %1128 = phi i32 [ 19, %1193 ], [ 18, %1190 ], [ 17, %1187 ], [ 16, %1184 ], [ 15, %1181 ], [ 14, %1178 ], [ 13, %1175 ], [ 12, %1172 ], [ 11, %1169 ], [ 10, %1166 ], [ 9, %1163 ], [ 8, %1160 ], [ 7, %1157 ], [ 6, %1154 ], [ 5, %1151 ], [ 4, %1148 ], [ 3, %1145 ], [ 2, %1142 ], [ 1, %1139 ], [ 20, %1196 ]
  br label %1129

1129:                                             ; preds = %1129, %1127
  %1130 = phi i32 [ 0, %1127 ], [ %1135, %1129 ]
  %1131 = phi i32 [ 1, %1127 ], [ %1134, %1129 ]
  %1132 = shl i32 %1131, 1
  %1133 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1134 = add nsw i32 %1133, %1132
  %1135 = add nuw nsw i32 %1130, 1
  %1136 = icmp eq i32 %1135, %1128
  br i1 %1136, label %1137, label %1129

1137:                                             ; preds = %1129
  %1138 = add i32 %1134, -1
  br label %1199

1139:                                             ; preds = %1124
  %1140 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1141 = icmp eq i32 %1140, 0
  br i1 %1141, label %1142, label %1127

1142:                                             ; preds = %1139
  %1143 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1144 = icmp eq i32 %1143, 0
  br i1 %1144, label %1145, label %1127

1145:                                             ; preds = %1142
  %1146 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1147 = icmp eq i32 %1146, 0
  br i1 %1147, label %1148, label %1127

1148:                                             ; preds = %1145
  %1149 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1150 = icmp eq i32 %1149, 0
  br i1 %1150, label %1151, label %1127

1151:                                             ; preds = %1148
  %1152 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1153 = icmp eq i32 %1152, 0
  br i1 %1153, label %1154, label %1127

1154:                                             ; preds = %1151
  %1155 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1156 = icmp eq i32 %1155, 0
  br i1 %1156, label %1157, label %1127

1157:                                             ; preds = %1154
  %1158 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1159 = icmp eq i32 %1158, 0
  br i1 %1159, label %1160, label %1127

1160:                                             ; preds = %1157
  %1161 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1162 = icmp eq i32 %1161, 0
  br i1 %1162, label %1163, label %1127

1163:                                             ; preds = %1160
  %1164 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1165 = icmp eq i32 %1164, 0
  br i1 %1165, label %1166, label %1127

1166:                                             ; preds = %1163
  %1167 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1168 = icmp eq i32 %1167, 0
  br i1 %1168, label %1169, label %1127

1169:                                             ; preds = %1166
  %1170 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1171 = icmp eq i32 %1170, 0
  br i1 %1171, label %1172, label %1127

1172:                                             ; preds = %1169
  %1173 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1174 = icmp eq i32 %1173, 0
  br i1 %1174, label %1175, label %1127

1175:                                             ; preds = %1172
  %1176 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1177 = icmp eq i32 %1176, 0
  br i1 %1177, label %1178, label %1127

1178:                                             ; preds = %1175
  %1179 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1180 = icmp eq i32 %1179, 0
  br i1 %1180, label %1181, label %1127

1181:                                             ; preds = %1178
  %1182 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1183 = icmp eq i32 %1182, 0
  br i1 %1183, label %1184, label %1127

1184:                                             ; preds = %1181
  %1185 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1186 = icmp eq i32 %1185, 0
  br i1 %1186, label %1187, label %1127

1187:                                             ; preds = %1184
  %1188 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1189 = icmp eq i32 %1188, 0
  br i1 %1189, label %1190, label %1127

1190:                                             ; preds = %1187
  %1191 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1192 = icmp eq i32 %1191, 0
  br i1 %1192, label %1193, label %1127

1193:                                             ; preds = %1190
  %1194 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1195 = icmp eq i32 %1194, 0
  br i1 %1195, label %1196, label %1127

1196:                                             ; preds = %1193
  %1197 = tail call i32 @od_ec_decode_bool_q15(%struct.od_ec_dec* %75, i32 16384) #4
  %1198 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %1037, align 16
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %1198, i32 7, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)) #4
  br label %1127

1199:                                             ; preds = %1124, %1137
  %1200 = phi i32 [ %1138, %1137 ], [ 0, %1124 ]
  %1201 = add nsw i32 %1200, %1071
  br label %1202

1202:                                             ; preds = %1199, %1120
  %1203 = phi i32 [ %1201, %1199 ], [ %1071, %1120 ]
  br i1 %1078, label %1204, label %1209

1204:                                             ; preds = %1202
  %1205 = and i32 %1121, 255
  %1206 = icmp eq i32 %1205, 0
  %1207 = sub nsw i32 0, %1203
  %1208 = select i1 %1206, i32 %1203, i32 %1207
  br label %1209

1209:                                             ; preds = %1204, %1202
  %1210 = phi i32 [ %1208, %1204 ], [ %1060, %1202 ]
  %1211 = and i32 %1203, 1048575
  %1212 = add nsw i32 %1211, %1061
  %1213 = load i16, i16* %1062, align 2
  %1214 = icmp ne i16 %1213, 0
  %1215 = zext i1 %1214 to i64
  %1216 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 4, i64 %33, i32 7, i64 %37, i64 %1215
  %1217 = load i16, i16* %1216, align 2
  %1218 = sext i16 %1217 to i32
  br i1 %1038, label %1227, label %1219

1219:                                             ; preds = %1209
  %1220 = sext i16 %1213 to i64
  %1221 = getelementptr inbounds i8, i8* %235, i64 %1220
  %1222 = load i8, i8* %1221, align 1
  %1223 = zext i8 %1222 to i32
  %1224 = mul nsw i32 %1223, %1218
  %1225 = add nsw i32 %1224, 16
  %1226 = ashr i32 %1225, 5
  br label %1227

1227:                                             ; preds = %1209, %1219
  %1228 = phi i32 [ %1226, %1219 ], [ %1218, %1209 ]
  %1229 = mul i32 %1228, %1211
  %1230 = and i32 %1229, 16777215
  %1231 = lshr i32 %1230, %44
  %1232 = icmp eq i8 %1122, 0
  %1233 = sub nsw i32 0, %1231
  %1234 = select i1 %1232, i32 %1231, i32 %1233
  %1235 = icmp slt i32 %1234, %18
  %1236 = icmp sgt i32 %1234, %17
  %1237 = select i1 %1236, i32 %17, i32 %1234
  %1238 = select i1 %1235, i32 %18, i32 %1237
  %1239 = sext i16 %1063 to i64
  %1240 = getelementptr inbounds i32, i32* %43, i64 %1239
  store i32 %1238, i32* %1240, align 4
  %1241 = load i16, i16* %118, align 2
  br label %1242

1242:                                             ; preds = %1057, %1227
  %1243 = phi i16 [ %1058, %1057 ], [ %1241, %1227 ]
  %1244 = phi i32 [ %1061, %1057 ], [ %1212, %1227 ]
  %1245 = phi i32 [ %1060, %1057 ], [ %1210, %1227 ]
  %1246 = add nuw nsw i64 %1059, 1
  %1247 = zext i16 %1243 to i64
  %1248 = icmp ult i64 %1246, %1247
  br i1 %1248, label %1057, label %1039

1249:                                             ; preds = %121, %123, %1054
  %1250 = phi i8 [ %1056, %1054 ], [ 0, %123 ], [ 0, %121 ]
  call void @llvm.lifetime.end.p0i8(i64 1312, i8* nonnull %68) #4
  ret i8 %1250

1251:                                             ; preds = %747
  %1252 = sub nsw i32 %750, %752
  %1253 = ashr i32 %1252, %727
  %1254 = trunc i32 %1253 to i16
  %1255 = add i16 %751, %1254
  br label %1261

1256:                                             ; preds = %747
  %1257 = sub nsw i32 %752, %750
  %1258 = ashr i32 %1257, %727
  %1259 = trunc i32 %1258 to i16
  %1260 = sub i16 %751, %1259
  br label %1261

1261:                                             ; preds = %1256, %1251
  %1262 = phi i16 [ %1255, %1251 ], [ %1260, %1256 ]
  store i16 %1262, i16* %713, align 2
  %1263 = icmp eq i64 %731, 2
  %1264 = select i1 %1263, i32 0, i32 %750
  %1265 = load i16, i16* %714, align 2
  %1266 = zext i16 %1265 to i32
  %1267 = icmp ult i32 %1264, %1266
  br i1 %1267, label %1273, label %1268

1268:                                             ; preds = %1261
  %1269 = sub nsw i32 %1264, %1266
  %1270 = ashr i32 %1269, %727
  %1271 = trunc i32 %1270 to i16
  %1272 = add i16 %1265, %1271
  br label %1278

1273:                                             ; preds = %1261
  %1274 = sub nsw i32 %1266, %1264
  %1275 = ashr i32 %1274, %727
  %1276 = trunc i32 %1275 to i16
  %1277 = sub i16 %1265, %1276
  br label %1278

1278:                                             ; preds = %1273, %1268
  %1279 = phi i16 [ %1272, %1268 ], [ %1277, %1273 ]
  store i16 %1279, i16* %714, align 2
  %1280 = icmp ult i16 %722, 32
  %1281 = zext i1 %1280 to i16
  %1282 = add i16 %722, %1281
  store i16 %1282, i16* %712, align 2
  br label %754

1283:                                             ; preds = %672
  %1284 = sub nsw i32 %675, %678
  %1285 = ashr i32 %1284, %652
  %1286 = trunc i32 %1285 to i16
  %1287 = add i16 %677, %1286
  br label %1293

1288:                                             ; preds = %672
  %1289 = sub nsw i32 %678, %675
  %1290 = ashr i32 %1289, %652
  %1291 = trunc i32 %1290 to i16
  %1292 = sub i16 %677, %1291
  br label %1293

1293:                                             ; preds = %1288, %1283
  %1294 = phi i16 [ %1287, %1283 ], [ %1292, %1288 ]
  store i16 %1294, i16* %676, align 2
  %1295 = icmp ult i16 %647, 32
  %1296 = zext i1 %1295 to i16
  %1297 = add i16 %647, %1296
  store i16 %1297, i16* %646, align 2
  br label %680

1298:                                             ; preds = %529
  %1299 = sub nsw i32 %532, %535
  %1300 = ashr i32 %1299, %509
  %1301 = trunc i32 %1300 to i16
  %1302 = add i16 %534, %1301
  br label %1308

1303:                                             ; preds = %529
  %1304 = sub nsw i32 %535, %532
  %1305 = ashr i32 %1304, %509
  %1306 = trunc i32 %1305 to i16
  %1307 = sub i16 %534, %1306
  br label %1308

1308:                                             ; preds = %1303, %1298
  %1309 = phi i16 [ %1302, %1298 ], [ %1307, %1303 ]
  store i16 %1309, i16* %533, align 2
  %1310 = icmp eq i64 %513, 2
  %1311 = select i1 %1310, i32 0, i32 %532
  %1312 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 9, i64 %496, i64 %497, i64 2
  %1313 = load i16, i16* %1312, align 2
  %1314 = zext i16 %1313 to i32
  %1315 = icmp ult i32 %1311, %1314
  br i1 %1315, label %1321, label %1316

1316:                                             ; preds = %1308
  %1317 = sub nsw i32 %1311, %1314
  %1318 = ashr i32 %1317, %509
  %1319 = trunc i32 %1318 to i16
  %1320 = add i16 %1313, %1319
  br label %1326

1321:                                             ; preds = %1308
  %1322 = sub nsw i32 %1314, %1311
  %1323 = ashr i32 %1322, %509
  %1324 = trunc i32 %1323 to i16
  %1325 = sub i16 %1313, %1324
  br label %1326

1326:                                             ; preds = %1321, %1316
  %1327 = phi i16 [ %1320, %1316 ], [ %1325, %1321 ]
  store i16 %1327, i16* %1312, align 2
  %1328 = icmp eq i64 %513, 3
  %1329 = select i1 %1328, i32 0, i32 %1311
  %1330 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 9, i64 %496, i64 %497, i64 3
  %1331 = load i16, i16* %1330, align 2
  %1332 = zext i16 %1331 to i32
  %1333 = icmp ult i32 %1329, %1332
  br i1 %1333, label %1339, label %1334

1334:                                             ; preds = %1326
  %1335 = sub nsw i32 %1329, %1332
  %1336 = ashr i32 %1335, %509
  %1337 = trunc i32 %1336 to i16
  %1338 = add i16 %1331, %1337
  br label %1344

1339:                                             ; preds = %1326
  %1340 = sub nsw i32 %1332, %1329
  %1341 = ashr i32 %1340, %509
  %1342 = trunc i32 %1341 to i16
  %1343 = sub i16 %1331, %1342
  br label %1344

1344:                                             ; preds = %1339, %1334
  %1345 = phi i16 [ %1338, %1334 ], [ %1343, %1339 ]
  store i16 %1345, i16* %1330, align 2
  %1346 = icmp eq i64 %513, 4
  %1347 = select i1 %1346, i32 0, i32 %1329
  %1348 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 9, i64 %496, i64 %497, i64 4
  %1349 = load i16, i16* %1348, align 2
  %1350 = zext i16 %1349 to i32
  %1351 = icmp ult i32 %1347, %1350
  br i1 %1351, label %1357, label %1352

1352:                                             ; preds = %1344
  %1353 = sub nsw i32 %1347, %1350
  %1354 = ashr i32 %1353, %509
  %1355 = trunc i32 %1354 to i16
  %1356 = add i16 %1349, %1355
  br label %1362

1357:                                             ; preds = %1344
  %1358 = sub nsw i32 %1350, %1347
  %1359 = ashr i32 %1358, %509
  %1360 = trunc i32 %1359 to i16
  %1361 = sub i16 %1349, %1360
  br label %1362

1362:                                             ; preds = %1357, %1352
  %1363 = phi i16 [ %1356, %1352 ], [ %1361, %1357 ]
  store i16 %1363, i16* %1348, align 2
  %1364 = icmp eq i64 %513, 5
  %1365 = select i1 %1364, i32 0, i32 %1347
  %1366 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 9, i64 %496, i64 %497, i64 5
  %1367 = load i16, i16* %1366, align 2
  %1368 = zext i16 %1367 to i32
  %1369 = icmp ult i32 %1365, %1368
  br i1 %1369, label %1375, label %1370

1370:                                             ; preds = %1362
  %1371 = sub nsw i32 %1365, %1368
  %1372 = ashr i32 %1371, %509
  %1373 = trunc i32 %1372 to i16
  %1374 = add i16 %1367, %1373
  br label %1380

1375:                                             ; preds = %1362
  %1376 = sub nsw i32 %1368, %1365
  %1377 = ashr i32 %1376, %509
  %1378 = trunc i32 %1377 to i16
  %1379 = sub i16 %1367, %1378
  br label %1380

1380:                                             ; preds = %1375, %1370
  %1381 = phi i16 [ %1374, %1370 ], [ %1379, %1375 ]
  store i16 %1381, i16* %1366, align 2
  %1382 = icmp eq i64 %513, 6
  %1383 = select i1 %1382, i32 0, i32 %1365
  %1384 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 9, i64 %496, i64 %497, i64 6
  %1385 = load i16, i16* %1384, align 2
  %1386 = zext i16 %1385 to i32
  %1387 = icmp slt i32 %1383, %1386
  br i1 %1387, label %1393, label %1388

1388:                                             ; preds = %1380
  %1389 = sub nsw i32 %1383, %1386
  %1390 = ashr i32 %1389, %509
  %1391 = trunc i32 %1390 to i16
  %1392 = add i16 %1385, %1391
  br label %1398

1393:                                             ; preds = %1380
  %1394 = sub nsw i32 %1386, %1383
  %1395 = ashr i32 %1394, %509
  %1396 = trunc i32 %1395 to i16
  %1397 = sub i16 %1385, %1396
  br label %1398

1398:                                             ; preds = %1393, %1388
  %1399 = phi i16 [ %1392, %1388 ], [ %1397, %1393 ]
  store i16 %1399, i16* %1384, align 2
  %1400 = icmp eq i64 %513, 7
  %1401 = select i1 %1400, i32 0, i32 %1383
  %1402 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 9, i64 %496, i64 %497, i64 7
  %1403 = load i16, i16* %1402, align 2
  %1404 = zext i16 %1403 to i32
  %1405 = icmp slt i32 %1401, %1404
  br i1 %1405, label %1411, label %1406

1406:                                             ; preds = %1398
  %1407 = sub nsw i32 %1401, %1404
  %1408 = ashr i32 %1407, %509
  %1409 = trunc i32 %1408 to i16
  %1410 = add i16 %1403, %1409
  br label %1416

1411:                                             ; preds = %1398
  %1412 = sub nsw i32 %1404, %1401
  %1413 = ashr i32 %1412, %509
  %1414 = trunc i32 %1413 to i16
  %1415 = sub i16 %1403, %1414
  br label %1416

1416:                                             ; preds = %1411, %1406
  %1417 = phi i16 [ %1410, %1406 ], [ %1415, %1411 ]
  store i16 %1417, i16* %1402, align 2
  %1418 = icmp eq i64 %513, 8
  %1419 = select i1 %1418, i32 0, i32 %1401
  %1420 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 9, i64 %496, i64 %497, i64 8
  %1421 = load i16, i16* %1420, align 2
  %1422 = zext i16 %1421 to i32
  %1423 = icmp slt i32 %1419, %1422
  br i1 %1423, label %1429, label %1424

1424:                                             ; preds = %1416
  %1425 = sub nsw i32 %1419, %1422
  %1426 = ashr i32 %1425, %509
  %1427 = trunc i32 %1426 to i16
  %1428 = add i16 %1421, %1427
  br label %1434

1429:                                             ; preds = %1416
  %1430 = sub nsw i32 %1422, %1419
  %1431 = ashr i32 %1430, %509
  %1432 = trunc i32 %1431 to i16
  %1433 = sub i16 %1421, %1432
  br label %1434

1434:                                             ; preds = %1429, %1424
  %1435 = phi i16 [ %1428, %1424 ], [ %1433, %1429 ]
  store i16 %1435, i16* %1420, align 2
  %1436 = icmp eq i64 %513, 9
  %1437 = select i1 %1436, i32 0, i32 %1419
  %1438 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 9, i64 %496, i64 %497, i64 9
  %1439 = load i16, i16* %1438, align 2
  %1440 = zext i16 %1439 to i32
  %1441 = icmp slt i32 %1437, %1440
  br i1 %1441, label %1447, label %1442

1442:                                             ; preds = %1434
  %1443 = sub nsw i32 %1437, %1440
  %1444 = ashr i32 %1443, %509
  %1445 = trunc i32 %1444 to i16
  %1446 = add i16 %1439, %1445
  br label %1452

1447:                                             ; preds = %1434
  %1448 = sub nsw i32 %1440, %1437
  %1449 = ashr i32 %1448, %509
  %1450 = trunc i32 %1449 to i16
  %1451 = sub i16 %1439, %1450
  br label %1452

1452:                                             ; preds = %1447, %1442
  %1453 = phi i16 [ %1446, %1442 ], [ %1451, %1447 ]
  store i16 %1453, i16* %1438, align 2
  %1454 = icmp ult i16 %504, 32
  %1455 = zext i1 %1454 to i16
  %1456 = add i16 %504, %1455
  store i16 %1456, i16* %503, align 2
  br label %537

1457:                                             ; preds = %277
  %1458 = sub nsw i32 %280, %283
  %1459 = ashr i32 %1458, %257
  %1460 = trunc i32 %1459 to i16
  %1461 = add i16 %282, %1460
  br label %1467

1462:                                             ; preds = %277
  %1463 = sub nsw i32 %283, %280
  %1464 = ashr i32 %1463, %257
  %1465 = trunc i32 %1464 to i16
  %1466 = sub i16 %282, %1465
  br label %1467

1467:                                             ; preds = %1462, %1457
  %1468 = phi i16 [ %1461, %1457 ], [ %1466, %1462 ]
  store i16 %1468, i16* %281, align 2
  %1469 = icmp eq i64 %261, 2
  %1470 = select i1 %1469, i32 0, i32 %280
  %1471 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 3, i64 %244, i64 %245, i64 2
  %1472 = load i16, i16* %1471, align 2
  %1473 = zext i16 %1472 to i32
  %1474 = icmp ult i32 %1470, %1473
  br i1 %1474, label %1480, label %1475

1475:                                             ; preds = %1467
  %1476 = sub nsw i32 %1470, %1473
  %1477 = ashr i32 %1476, %257
  %1478 = trunc i32 %1477 to i16
  %1479 = add i16 %1472, %1478
  br label %1485

1480:                                             ; preds = %1467
  %1481 = sub nsw i32 %1473, %1470
  %1482 = ashr i32 %1481, %257
  %1483 = trunc i32 %1482 to i16
  %1484 = sub i16 %1472, %1483
  br label %1485

1485:                                             ; preds = %1480, %1475
  %1486 = phi i16 [ %1479, %1475 ], [ %1484, %1480 ]
  store i16 %1486, i16* %1471, align 2
  %1487 = icmp eq i64 %261, 3
  %1488 = select i1 %1487, i32 0, i32 %1470
  %1489 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 3, i64 %244, i64 %245, i64 3
  %1490 = load i16, i16* %1489, align 2
  %1491 = zext i16 %1490 to i32
  %1492 = icmp ult i32 %1488, %1491
  br i1 %1492, label %1498, label %1493

1493:                                             ; preds = %1485
  %1494 = sub nsw i32 %1488, %1491
  %1495 = ashr i32 %1494, %257
  %1496 = trunc i32 %1495 to i16
  %1497 = add i16 %1490, %1496
  br label %1503

1498:                                             ; preds = %1485
  %1499 = sub nsw i32 %1491, %1488
  %1500 = ashr i32 %1499, %257
  %1501 = trunc i32 %1500 to i16
  %1502 = sub i16 %1490, %1501
  br label %1503

1503:                                             ; preds = %1498, %1493
  %1504 = phi i16 [ %1497, %1493 ], [ %1502, %1498 ]
  store i16 %1504, i16* %1489, align 2
  %1505 = icmp ult i16 %252, 32
  %1506 = zext i1 %1505 to i16
  %1507 = add i16 %252, %1506
  store i16 %1507, i16* %251, align 2
  br label %537

1508:                                             ; preds = %319
  %1509 = sub nsw i32 %322, %325
  %1510 = ashr i32 %1509, %299
  %1511 = trunc i32 %1510 to i16
  %1512 = add i16 %324, %1511
  br label %1518

1513:                                             ; preds = %319
  %1514 = sub nsw i32 %325, %322
  %1515 = ashr i32 %1514, %299
  %1516 = trunc i32 %1515 to i16
  %1517 = sub i16 %324, %1516
  br label %1518

1518:                                             ; preds = %1513, %1508
  %1519 = phi i16 [ %1512, %1508 ], [ %1517, %1513 ]
  store i16 %1519, i16* %323, align 2
  %1520 = icmp eq i64 %303, 2
  %1521 = select i1 %1520, i32 0, i32 %322
  %1522 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 4, i64 %286, i64 %287, i64 2
  %1523 = load i16, i16* %1522, align 2
  %1524 = zext i16 %1523 to i32
  %1525 = icmp ult i32 %1521, %1524
  br i1 %1525, label %1531, label %1526

1526:                                             ; preds = %1518
  %1527 = sub nsw i32 %1521, %1524
  %1528 = ashr i32 %1527, %299
  %1529 = trunc i32 %1528 to i16
  %1530 = add i16 %1523, %1529
  br label %1536

1531:                                             ; preds = %1518
  %1532 = sub nsw i32 %1524, %1521
  %1533 = ashr i32 %1532, %299
  %1534 = trunc i32 %1533 to i16
  %1535 = sub i16 %1523, %1534
  br label %1536

1536:                                             ; preds = %1531, %1526
  %1537 = phi i16 [ %1530, %1526 ], [ %1535, %1531 ]
  store i16 %1537, i16* %1522, align 2
  %1538 = icmp eq i64 %303, 3
  %1539 = select i1 %1538, i32 0, i32 %1521
  %1540 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 4, i64 %286, i64 %287, i64 3
  %1541 = load i16, i16* %1540, align 2
  %1542 = zext i16 %1541 to i32
  %1543 = icmp ult i32 %1539, %1542
  br i1 %1543, label %1549, label %1544

1544:                                             ; preds = %1536
  %1545 = sub nsw i32 %1539, %1542
  %1546 = ashr i32 %1545, %299
  %1547 = trunc i32 %1546 to i16
  %1548 = add i16 %1541, %1547
  br label %1554

1549:                                             ; preds = %1536
  %1550 = sub nsw i32 %1542, %1539
  %1551 = ashr i32 %1550, %299
  %1552 = trunc i32 %1551 to i16
  %1553 = sub i16 %1541, %1552
  br label %1554

1554:                                             ; preds = %1549, %1544
  %1555 = phi i16 [ %1548, %1544 ], [ %1553, %1549 ]
  store i16 %1555, i16* %1540, align 2
  %1556 = icmp eq i64 %303, 4
  %1557 = select i1 %1556, i32 0, i32 %1539
  %1558 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 4, i64 %286, i64 %287, i64 4
  %1559 = load i16, i16* %1558, align 2
  %1560 = zext i16 %1559 to i32
  %1561 = icmp ult i32 %1557, %1560
  br i1 %1561, label %1567, label %1562

1562:                                             ; preds = %1554
  %1563 = sub nsw i32 %1557, %1560
  %1564 = ashr i32 %1563, %299
  %1565 = trunc i32 %1564 to i16
  %1566 = add i16 %1559, %1565
  br label %1572

1567:                                             ; preds = %1554
  %1568 = sub nsw i32 %1560, %1557
  %1569 = ashr i32 %1568, %299
  %1570 = trunc i32 %1569 to i16
  %1571 = sub i16 %1559, %1570
  br label %1572

1572:                                             ; preds = %1567, %1562
  %1573 = phi i16 [ %1566, %1562 ], [ %1571, %1567 ]
  store i16 %1573, i16* %1558, align 2
  %1574 = icmp ult i16 %294, 32
  %1575 = zext i1 %1574 to i16
  %1576 = add i16 %294, %1575
  store i16 %1576, i16* %293, align 2
  br label %537

1577:                                             ; preds = %361
  %1578 = sub nsw i32 %364, %367
  %1579 = ashr i32 %1578, %341
  %1580 = trunc i32 %1579 to i16
  %1581 = add i16 %366, %1580
  br label %1587

1582:                                             ; preds = %361
  %1583 = sub nsw i32 %367, %364
  %1584 = ashr i32 %1583, %341
  %1585 = trunc i32 %1584 to i16
  %1586 = sub i16 %366, %1585
  br label %1587

1587:                                             ; preds = %1582, %1577
  %1588 = phi i16 [ %1581, %1577 ], [ %1586, %1582 ]
  store i16 %1588, i16* %365, align 2
  %1589 = icmp eq i64 %345, 2
  %1590 = select i1 %1589, i32 0, i32 %364
  %1591 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 5, i64 %328, i64 %329, i64 2
  %1592 = load i16, i16* %1591, align 2
  %1593 = zext i16 %1592 to i32
  %1594 = icmp ult i32 %1590, %1593
  br i1 %1594, label %1600, label %1595

1595:                                             ; preds = %1587
  %1596 = sub nsw i32 %1590, %1593
  %1597 = ashr i32 %1596, %341
  %1598 = trunc i32 %1597 to i16
  %1599 = add i16 %1592, %1598
  br label %1605

1600:                                             ; preds = %1587
  %1601 = sub nsw i32 %1593, %1590
  %1602 = ashr i32 %1601, %341
  %1603 = trunc i32 %1602 to i16
  %1604 = sub i16 %1592, %1603
  br label %1605

1605:                                             ; preds = %1600, %1595
  %1606 = phi i16 [ %1599, %1595 ], [ %1604, %1600 ]
  store i16 %1606, i16* %1591, align 2
  %1607 = icmp eq i64 %345, 3
  %1608 = select i1 %1607, i32 0, i32 %1590
  %1609 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 5, i64 %328, i64 %329, i64 3
  %1610 = load i16, i16* %1609, align 2
  %1611 = zext i16 %1610 to i32
  %1612 = icmp ult i32 %1608, %1611
  br i1 %1612, label %1618, label %1613

1613:                                             ; preds = %1605
  %1614 = sub nsw i32 %1608, %1611
  %1615 = ashr i32 %1614, %341
  %1616 = trunc i32 %1615 to i16
  %1617 = add i16 %1610, %1616
  br label %1623

1618:                                             ; preds = %1605
  %1619 = sub nsw i32 %1611, %1608
  %1620 = ashr i32 %1619, %341
  %1621 = trunc i32 %1620 to i16
  %1622 = sub i16 %1610, %1621
  br label %1623

1623:                                             ; preds = %1618, %1613
  %1624 = phi i16 [ %1617, %1613 ], [ %1622, %1618 ]
  store i16 %1624, i16* %1609, align 2
  %1625 = icmp eq i64 %345, 4
  %1626 = select i1 %1625, i32 0, i32 %1608
  %1627 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 5, i64 %328, i64 %329, i64 4
  %1628 = load i16, i16* %1627, align 2
  %1629 = zext i16 %1628 to i32
  %1630 = icmp ult i32 %1626, %1629
  br i1 %1630, label %1636, label %1631

1631:                                             ; preds = %1623
  %1632 = sub nsw i32 %1626, %1629
  %1633 = ashr i32 %1632, %341
  %1634 = trunc i32 %1633 to i16
  %1635 = add i16 %1628, %1634
  br label %1641

1636:                                             ; preds = %1623
  %1637 = sub nsw i32 %1629, %1626
  %1638 = ashr i32 %1637, %341
  %1639 = trunc i32 %1638 to i16
  %1640 = sub i16 %1628, %1639
  br label %1641

1641:                                             ; preds = %1636, %1631
  %1642 = phi i16 [ %1635, %1631 ], [ %1640, %1636 ]
  store i16 %1642, i16* %1627, align 2
  %1643 = icmp eq i64 %345, 5
  %1644 = select i1 %1643, i32 0, i32 %1626
  %1645 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 5, i64 %328, i64 %329, i64 5
  %1646 = load i16, i16* %1645, align 2
  %1647 = zext i16 %1646 to i32
  %1648 = icmp ult i32 %1644, %1647
  br i1 %1648, label %1654, label %1649

1649:                                             ; preds = %1641
  %1650 = sub nsw i32 %1644, %1647
  %1651 = ashr i32 %1650, %341
  %1652 = trunc i32 %1651 to i16
  %1653 = add i16 %1646, %1652
  br label %1659

1654:                                             ; preds = %1641
  %1655 = sub nsw i32 %1647, %1644
  %1656 = ashr i32 %1655, %341
  %1657 = trunc i32 %1656 to i16
  %1658 = sub i16 %1646, %1657
  br label %1659

1659:                                             ; preds = %1654, %1649
  %1660 = phi i16 [ %1653, %1649 ], [ %1658, %1654 ]
  store i16 %1660, i16* %1645, align 2
  %1661 = icmp ult i16 %336, 32
  %1662 = zext i1 %1661 to i16
  %1663 = add i16 %336, %1662
  store i16 %1663, i16* %335, align 2
  br label %537

1664:                                             ; preds = %403
  %1665 = sub nsw i32 %406, %409
  %1666 = ashr i32 %1665, %383
  %1667 = trunc i32 %1666 to i16
  %1668 = add i16 %408, %1667
  br label %1674

1669:                                             ; preds = %403
  %1670 = sub nsw i32 %409, %406
  %1671 = ashr i32 %1670, %383
  %1672 = trunc i32 %1671 to i16
  %1673 = sub i16 %408, %1672
  br label %1674

1674:                                             ; preds = %1669, %1664
  %1675 = phi i16 [ %1668, %1664 ], [ %1673, %1669 ]
  store i16 %1675, i16* %407, align 2
  %1676 = icmp eq i64 %387, 2
  %1677 = select i1 %1676, i32 0, i32 %406
  %1678 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 6, i64 %370, i64 %371, i64 2
  %1679 = load i16, i16* %1678, align 2
  %1680 = zext i16 %1679 to i32
  %1681 = icmp ult i32 %1677, %1680
  br i1 %1681, label %1687, label %1682

1682:                                             ; preds = %1674
  %1683 = sub nsw i32 %1677, %1680
  %1684 = ashr i32 %1683, %383
  %1685 = trunc i32 %1684 to i16
  %1686 = add i16 %1679, %1685
  br label %1692

1687:                                             ; preds = %1674
  %1688 = sub nsw i32 %1680, %1677
  %1689 = ashr i32 %1688, %383
  %1690 = trunc i32 %1689 to i16
  %1691 = sub i16 %1679, %1690
  br label %1692

1692:                                             ; preds = %1687, %1682
  %1693 = phi i16 [ %1686, %1682 ], [ %1691, %1687 ]
  store i16 %1693, i16* %1678, align 2
  %1694 = icmp eq i64 %387, 3
  %1695 = select i1 %1694, i32 0, i32 %1677
  %1696 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 6, i64 %370, i64 %371, i64 3
  %1697 = load i16, i16* %1696, align 2
  %1698 = zext i16 %1697 to i32
  %1699 = icmp ult i32 %1695, %1698
  br i1 %1699, label %1705, label %1700

1700:                                             ; preds = %1692
  %1701 = sub nsw i32 %1695, %1698
  %1702 = ashr i32 %1701, %383
  %1703 = trunc i32 %1702 to i16
  %1704 = add i16 %1697, %1703
  br label %1710

1705:                                             ; preds = %1692
  %1706 = sub nsw i32 %1698, %1695
  %1707 = ashr i32 %1706, %383
  %1708 = trunc i32 %1707 to i16
  %1709 = sub i16 %1697, %1708
  br label %1710

1710:                                             ; preds = %1705, %1700
  %1711 = phi i16 [ %1704, %1700 ], [ %1709, %1705 ]
  store i16 %1711, i16* %1696, align 2
  %1712 = icmp eq i64 %387, 4
  %1713 = select i1 %1712, i32 0, i32 %1695
  %1714 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 6, i64 %370, i64 %371, i64 4
  %1715 = load i16, i16* %1714, align 2
  %1716 = zext i16 %1715 to i32
  %1717 = icmp ult i32 %1713, %1716
  br i1 %1717, label %1723, label %1718

1718:                                             ; preds = %1710
  %1719 = sub nsw i32 %1713, %1716
  %1720 = ashr i32 %1719, %383
  %1721 = trunc i32 %1720 to i16
  %1722 = add i16 %1715, %1721
  br label %1728

1723:                                             ; preds = %1710
  %1724 = sub nsw i32 %1716, %1713
  %1725 = ashr i32 %1724, %383
  %1726 = trunc i32 %1725 to i16
  %1727 = sub i16 %1715, %1726
  br label %1728

1728:                                             ; preds = %1723, %1718
  %1729 = phi i16 [ %1722, %1718 ], [ %1727, %1723 ]
  store i16 %1729, i16* %1714, align 2
  %1730 = icmp eq i64 %387, 5
  %1731 = select i1 %1730, i32 0, i32 %1713
  %1732 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 6, i64 %370, i64 %371, i64 5
  %1733 = load i16, i16* %1732, align 2
  %1734 = zext i16 %1733 to i32
  %1735 = icmp ult i32 %1731, %1734
  br i1 %1735, label %1741, label %1736

1736:                                             ; preds = %1728
  %1737 = sub nsw i32 %1731, %1734
  %1738 = ashr i32 %1737, %383
  %1739 = trunc i32 %1738 to i16
  %1740 = add i16 %1733, %1739
  br label %1746

1741:                                             ; preds = %1728
  %1742 = sub nsw i32 %1734, %1731
  %1743 = ashr i32 %1742, %383
  %1744 = trunc i32 %1743 to i16
  %1745 = sub i16 %1733, %1744
  br label %1746

1746:                                             ; preds = %1741, %1736
  %1747 = phi i16 [ %1740, %1736 ], [ %1745, %1741 ]
  store i16 %1747, i16* %1732, align 2
  %1748 = icmp eq i64 %387, 6
  %1749 = select i1 %1748, i32 0, i32 %1731
  %1750 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 6, i64 %370, i64 %371, i64 6
  %1751 = load i16, i16* %1750, align 2
  %1752 = zext i16 %1751 to i32
  %1753 = icmp slt i32 %1749, %1752
  br i1 %1753, label %1759, label %1754

1754:                                             ; preds = %1746
  %1755 = sub nsw i32 %1749, %1752
  %1756 = ashr i32 %1755, %383
  %1757 = trunc i32 %1756 to i16
  %1758 = add i16 %1751, %1757
  br label %1764

1759:                                             ; preds = %1746
  %1760 = sub nsw i32 %1752, %1749
  %1761 = ashr i32 %1760, %383
  %1762 = trunc i32 %1761 to i16
  %1763 = sub i16 %1751, %1762
  br label %1764

1764:                                             ; preds = %1759, %1754
  %1765 = phi i16 [ %1758, %1754 ], [ %1763, %1759 ]
  store i16 %1765, i16* %1750, align 2
  %1766 = icmp ult i16 %378, 32
  %1767 = zext i1 %1766 to i16
  %1768 = add i16 %378, %1767
  store i16 %1768, i16* %377, align 2
  br label %537

1769:                                             ; preds = %445
  %1770 = sub nsw i32 %448, %451
  %1771 = ashr i32 %1770, %425
  %1772 = trunc i32 %1771 to i16
  %1773 = add i16 %450, %1772
  br label %1779

1774:                                             ; preds = %445
  %1775 = sub nsw i32 %451, %448
  %1776 = ashr i32 %1775, %425
  %1777 = trunc i32 %1776 to i16
  %1778 = sub i16 %450, %1777
  br label %1779

1779:                                             ; preds = %1774, %1769
  %1780 = phi i16 [ %1773, %1769 ], [ %1778, %1774 ]
  store i16 %1780, i16* %449, align 2
  %1781 = icmp eq i64 %429, 2
  %1782 = select i1 %1781, i32 0, i32 %448
  %1783 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 7, i64 %412, i64 %413, i64 2
  %1784 = load i16, i16* %1783, align 2
  %1785 = zext i16 %1784 to i32
  %1786 = icmp ult i32 %1782, %1785
  br i1 %1786, label %1792, label %1787

1787:                                             ; preds = %1779
  %1788 = sub nsw i32 %1782, %1785
  %1789 = ashr i32 %1788, %425
  %1790 = trunc i32 %1789 to i16
  %1791 = add i16 %1784, %1790
  br label %1797

1792:                                             ; preds = %1779
  %1793 = sub nsw i32 %1785, %1782
  %1794 = ashr i32 %1793, %425
  %1795 = trunc i32 %1794 to i16
  %1796 = sub i16 %1784, %1795
  br label %1797

1797:                                             ; preds = %1792, %1787
  %1798 = phi i16 [ %1791, %1787 ], [ %1796, %1792 ]
  store i16 %1798, i16* %1783, align 2
  %1799 = icmp eq i64 %429, 3
  %1800 = select i1 %1799, i32 0, i32 %1782
  %1801 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 7, i64 %412, i64 %413, i64 3
  %1802 = load i16, i16* %1801, align 2
  %1803 = zext i16 %1802 to i32
  %1804 = icmp ult i32 %1800, %1803
  br i1 %1804, label %1810, label %1805

1805:                                             ; preds = %1797
  %1806 = sub nsw i32 %1800, %1803
  %1807 = ashr i32 %1806, %425
  %1808 = trunc i32 %1807 to i16
  %1809 = add i16 %1802, %1808
  br label %1815

1810:                                             ; preds = %1797
  %1811 = sub nsw i32 %1803, %1800
  %1812 = ashr i32 %1811, %425
  %1813 = trunc i32 %1812 to i16
  %1814 = sub i16 %1802, %1813
  br label %1815

1815:                                             ; preds = %1810, %1805
  %1816 = phi i16 [ %1809, %1805 ], [ %1814, %1810 ]
  store i16 %1816, i16* %1801, align 2
  %1817 = icmp eq i64 %429, 4
  %1818 = select i1 %1817, i32 0, i32 %1800
  %1819 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 7, i64 %412, i64 %413, i64 4
  %1820 = load i16, i16* %1819, align 2
  %1821 = zext i16 %1820 to i32
  %1822 = icmp ult i32 %1818, %1821
  br i1 %1822, label %1828, label %1823

1823:                                             ; preds = %1815
  %1824 = sub nsw i32 %1818, %1821
  %1825 = ashr i32 %1824, %425
  %1826 = trunc i32 %1825 to i16
  %1827 = add i16 %1820, %1826
  br label %1833

1828:                                             ; preds = %1815
  %1829 = sub nsw i32 %1821, %1818
  %1830 = ashr i32 %1829, %425
  %1831 = trunc i32 %1830 to i16
  %1832 = sub i16 %1820, %1831
  br label %1833

1833:                                             ; preds = %1828, %1823
  %1834 = phi i16 [ %1827, %1823 ], [ %1832, %1828 ]
  store i16 %1834, i16* %1819, align 2
  %1835 = icmp eq i64 %429, 5
  %1836 = select i1 %1835, i32 0, i32 %1818
  %1837 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 7, i64 %412, i64 %413, i64 5
  %1838 = load i16, i16* %1837, align 2
  %1839 = zext i16 %1838 to i32
  %1840 = icmp ult i32 %1836, %1839
  br i1 %1840, label %1846, label %1841

1841:                                             ; preds = %1833
  %1842 = sub nsw i32 %1836, %1839
  %1843 = ashr i32 %1842, %425
  %1844 = trunc i32 %1843 to i16
  %1845 = add i16 %1838, %1844
  br label %1851

1846:                                             ; preds = %1833
  %1847 = sub nsw i32 %1839, %1836
  %1848 = ashr i32 %1847, %425
  %1849 = trunc i32 %1848 to i16
  %1850 = sub i16 %1838, %1849
  br label %1851

1851:                                             ; preds = %1846, %1841
  %1852 = phi i16 [ %1845, %1841 ], [ %1850, %1846 ]
  store i16 %1852, i16* %1837, align 2
  %1853 = icmp eq i64 %429, 6
  %1854 = select i1 %1853, i32 0, i32 %1836
  %1855 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 7, i64 %412, i64 %413, i64 6
  %1856 = load i16, i16* %1855, align 2
  %1857 = zext i16 %1856 to i32
  %1858 = icmp slt i32 %1854, %1857
  br i1 %1858, label %1864, label %1859

1859:                                             ; preds = %1851
  %1860 = sub nsw i32 %1854, %1857
  %1861 = ashr i32 %1860, %425
  %1862 = trunc i32 %1861 to i16
  %1863 = add i16 %1856, %1862
  br label %1869

1864:                                             ; preds = %1851
  %1865 = sub nsw i32 %1857, %1854
  %1866 = ashr i32 %1865, %425
  %1867 = trunc i32 %1866 to i16
  %1868 = sub i16 %1856, %1867
  br label %1869

1869:                                             ; preds = %1864, %1859
  %1870 = phi i16 [ %1863, %1859 ], [ %1868, %1864 ]
  store i16 %1870, i16* %1855, align 2
  %1871 = icmp eq i64 %429, 7
  %1872 = select i1 %1871, i32 0, i32 %1854
  %1873 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 7, i64 %412, i64 %413, i64 7
  %1874 = load i16, i16* %1873, align 2
  %1875 = zext i16 %1874 to i32
  %1876 = icmp slt i32 %1872, %1875
  br i1 %1876, label %1882, label %1877

1877:                                             ; preds = %1869
  %1878 = sub nsw i32 %1872, %1875
  %1879 = ashr i32 %1878, %425
  %1880 = trunc i32 %1879 to i16
  %1881 = add i16 %1874, %1880
  br label %1887

1882:                                             ; preds = %1869
  %1883 = sub nsw i32 %1875, %1872
  %1884 = ashr i32 %1883, %425
  %1885 = trunc i32 %1884 to i16
  %1886 = sub i16 %1874, %1885
  br label %1887

1887:                                             ; preds = %1882, %1877
  %1888 = phi i16 [ %1881, %1877 ], [ %1886, %1882 ]
  store i16 %1888, i16* %1873, align 2
  %1889 = icmp ult i16 %420, 32
  %1890 = zext i1 %1889 to i16
  %1891 = add i16 %420, %1890
  store i16 %1891, i16* %419, align 2
  br label %537

1892:                                             ; preds = %487
  %1893 = sub nsw i32 %490, %493
  %1894 = ashr i32 %1893, %467
  %1895 = trunc i32 %1894 to i16
  %1896 = add i16 %492, %1895
  br label %1902

1897:                                             ; preds = %487
  %1898 = sub nsw i32 %493, %490
  %1899 = ashr i32 %1898, %467
  %1900 = trunc i32 %1899 to i16
  %1901 = sub i16 %492, %1900
  br label %1902

1902:                                             ; preds = %1897, %1892
  %1903 = phi i16 [ %1896, %1892 ], [ %1901, %1897 ]
  store i16 %1903, i16* %491, align 2
  %1904 = icmp eq i64 %471, 2
  %1905 = select i1 %1904, i32 0, i32 %490
  %1906 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 8, i64 %454, i64 %455, i64 2
  %1907 = load i16, i16* %1906, align 2
  %1908 = zext i16 %1907 to i32
  %1909 = icmp ult i32 %1905, %1908
  br i1 %1909, label %1915, label %1910

1910:                                             ; preds = %1902
  %1911 = sub nsw i32 %1905, %1908
  %1912 = ashr i32 %1911, %467
  %1913 = trunc i32 %1912 to i16
  %1914 = add i16 %1907, %1913
  br label %1920

1915:                                             ; preds = %1902
  %1916 = sub nsw i32 %1908, %1905
  %1917 = ashr i32 %1916, %467
  %1918 = trunc i32 %1917 to i16
  %1919 = sub i16 %1907, %1918
  br label %1920

1920:                                             ; preds = %1915, %1910
  %1921 = phi i16 [ %1914, %1910 ], [ %1919, %1915 ]
  store i16 %1921, i16* %1906, align 2
  %1922 = icmp eq i64 %471, 3
  %1923 = select i1 %1922, i32 0, i32 %1905
  %1924 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 8, i64 %454, i64 %455, i64 3
  %1925 = load i16, i16* %1924, align 2
  %1926 = zext i16 %1925 to i32
  %1927 = icmp ult i32 %1923, %1926
  br i1 %1927, label %1933, label %1928

1928:                                             ; preds = %1920
  %1929 = sub nsw i32 %1923, %1926
  %1930 = ashr i32 %1929, %467
  %1931 = trunc i32 %1930 to i16
  %1932 = add i16 %1925, %1931
  br label %1938

1933:                                             ; preds = %1920
  %1934 = sub nsw i32 %1926, %1923
  %1935 = ashr i32 %1934, %467
  %1936 = trunc i32 %1935 to i16
  %1937 = sub i16 %1925, %1936
  br label %1938

1938:                                             ; preds = %1933, %1928
  %1939 = phi i16 [ %1932, %1928 ], [ %1937, %1933 ]
  store i16 %1939, i16* %1924, align 2
  %1940 = icmp eq i64 %471, 4
  %1941 = select i1 %1940, i32 0, i32 %1923
  %1942 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 8, i64 %454, i64 %455, i64 4
  %1943 = load i16, i16* %1942, align 2
  %1944 = zext i16 %1943 to i32
  %1945 = icmp ult i32 %1941, %1944
  br i1 %1945, label %1951, label %1946

1946:                                             ; preds = %1938
  %1947 = sub nsw i32 %1941, %1944
  %1948 = ashr i32 %1947, %467
  %1949 = trunc i32 %1948 to i16
  %1950 = add i16 %1943, %1949
  br label %1956

1951:                                             ; preds = %1938
  %1952 = sub nsw i32 %1944, %1941
  %1953 = ashr i32 %1952, %467
  %1954 = trunc i32 %1953 to i16
  %1955 = sub i16 %1943, %1954
  br label %1956

1956:                                             ; preds = %1951, %1946
  %1957 = phi i16 [ %1950, %1946 ], [ %1955, %1951 ]
  store i16 %1957, i16* %1942, align 2
  %1958 = icmp eq i64 %471, 5
  %1959 = select i1 %1958, i32 0, i32 %1941
  %1960 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 8, i64 %454, i64 %455, i64 5
  %1961 = load i16, i16* %1960, align 2
  %1962 = zext i16 %1961 to i32
  %1963 = icmp ult i32 %1959, %1962
  br i1 %1963, label %1969, label %1964

1964:                                             ; preds = %1956
  %1965 = sub nsw i32 %1959, %1962
  %1966 = ashr i32 %1965, %467
  %1967 = trunc i32 %1966 to i16
  %1968 = add i16 %1961, %1967
  br label %1974

1969:                                             ; preds = %1956
  %1970 = sub nsw i32 %1962, %1959
  %1971 = ashr i32 %1970, %467
  %1972 = trunc i32 %1971 to i16
  %1973 = sub i16 %1961, %1972
  br label %1974

1974:                                             ; preds = %1969, %1964
  %1975 = phi i16 [ %1968, %1964 ], [ %1973, %1969 ]
  store i16 %1975, i16* %1960, align 2
  %1976 = icmp eq i64 %471, 6
  %1977 = select i1 %1976, i32 0, i32 %1959
  %1978 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 8, i64 %454, i64 %455, i64 6
  %1979 = load i16, i16* %1978, align 2
  %1980 = zext i16 %1979 to i32
  %1981 = icmp slt i32 %1977, %1980
  br i1 %1981, label %1987, label %1982

1982:                                             ; preds = %1974
  %1983 = sub nsw i32 %1977, %1980
  %1984 = ashr i32 %1983, %467
  %1985 = trunc i32 %1984 to i16
  %1986 = add i16 %1979, %1985
  br label %1992

1987:                                             ; preds = %1974
  %1988 = sub nsw i32 %1980, %1977
  %1989 = ashr i32 %1988, %467
  %1990 = trunc i32 %1989 to i16
  %1991 = sub i16 %1979, %1990
  br label %1992

1992:                                             ; preds = %1987, %1982
  %1993 = phi i16 [ %1986, %1982 ], [ %1991, %1987 ]
  store i16 %1993, i16* %1978, align 2
  %1994 = icmp eq i64 %471, 7
  %1995 = select i1 %1994, i32 0, i32 %1977
  %1996 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 8, i64 %454, i64 %455, i64 7
  %1997 = load i16, i16* %1996, align 2
  %1998 = zext i16 %1997 to i32
  %1999 = icmp slt i32 %1995, %1998
  br i1 %1999, label %2005, label %2000

2000:                                             ; preds = %1992
  %2001 = sub nsw i32 %1995, %1998
  %2002 = ashr i32 %2001, %467
  %2003 = trunc i32 %2002 to i16
  %2004 = add i16 %1997, %2003
  br label %2010

2005:                                             ; preds = %1992
  %2006 = sub nsw i32 %1998, %1995
  %2007 = ashr i32 %2006, %467
  %2008 = trunc i32 %2007 to i16
  %2009 = sub i16 %1997, %2008
  br label %2010

2010:                                             ; preds = %2005, %2000
  %2011 = phi i16 [ %2004, %2000 ], [ %2009, %2005 ]
  store i16 %2011, i16* %1996, align 2
  %2012 = icmp eq i64 %471, 8
  %2013 = select i1 %2012, i32 0, i32 %1995
  %2014 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %12, i64 0, i32 8, i64 %454, i64 %455, i64 8
  %2015 = load i16, i16* %2014, align 2
  %2016 = zext i16 %2015 to i32
  %2017 = icmp slt i32 %2013, %2016
  br i1 %2017, label %2023, label %2018

2018:                                             ; preds = %2010
  %2019 = sub nsw i32 %2013, %2016
  %2020 = ashr i32 %2019, %467
  %2021 = trunc i32 %2020 to i16
  %2022 = add i16 %2015, %2021
  br label %2028

2023:                                             ; preds = %2010
  %2024 = sub nsw i32 %2016, %2013
  %2025 = ashr i32 %2024, %467
  %2026 = trunc i32 %2025 to i16
  %2027 = sub i16 %2015, %2026
  br label %2028

2028:                                             ; preds = %2023, %2018
  %2029 = phi i16 [ %2022, %2018 ], [ %2027, %2023 ]
  store i16 %2029, i16* %2014, align 2
  %2030 = icmp ult i16 %462, 32
  %2031 = zext i1 %2030 to i16
  %2032 = add i16 %462, %2031
  store i16 %2032, i16* %461, align 2
  br label %537
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @av1_get_tx_scale(i8 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @av1_read_tx_type(%struct.AV1Common*, %struct.macroblockd*, i32, i32, i8 zeroext, %struct.aom_reader*) local_unnamed_addr #2

declare i8* @av1_get_iqmatrix(%struct.CommonQuantParams*, %struct.macroblockd*, i32, i8 zeroext, i8 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @read_coeffs_reverse(%struct.aom_reader*, i8 zeroext, i8 zeroext, i32, i16* nocapture readonly, i32, i8* nocapture, [5 x i16]*, [5 x i16]*) unnamed_addr #3 {
  %10 = icmp sgt i32 %3, -1
  br i1 %10, label %11, label %35

11:                                               ; preds = %9
  %12 = shl i32 1, %5
  %13 = add nsw i32 %12, 4
  %14 = sext i32 %13 to i64
  %15 = shl i32 2, %5
  %16 = add nsw i32 %15, 8
  %17 = sext i32 %16 to i64
  %18 = shl i32 3, %5
  %19 = add nsw i32 %18, 12
  %20 = sext i32 %19 to i64
  %21 = shl i32 4, %5
  %22 = add nsw i32 %21, 16
  %23 = sext i32 %22 to i64
  %24 = add nsw i32 %12, 5
  %25 = sext i32 %24 to i64
  %26 = zext i8 %2 to i32
  %27 = shl i32 -1, %5
  %28 = xor i32 %27, -1
  %29 = zext i8 %1 to i64
  %30 = getelementptr inbounds [19 x i8*], [19 x i8*]* @av1_nz_map_ctx_offset, i64 0, i64 %29
  %31 = getelementptr inbounds %struct.aom_reader, %struct.aom_reader* %0, i64 0, i32 2
  %32 = getelementptr inbounds %struct.aom_reader, %struct.aom_reader* %0, i64 0, i32 3
  %33 = shl i32 %13, 1
  %34 = sext i32 %3 to i64
  br label %36

35:                                               ; preds = %276, %9
  ret void

36:                                               ; preds = %11, %276
  %37 = phi i64 [ %34, %11 ], [ %279, %276 ]
  %38 = getelementptr inbounds i16, i16* %4, i64 %37
  %39 = load i16, i16* %38, align 2
  %40 = sext i16 %39 to i32
  %41 = ashr i32 %40, %5
  %42 = shl nsw i32 %41, 2
  %43 = add nsw i32 %42, %40
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %6, i64 %44
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i64
  %49 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = getelementptr inbounds i8, i8* %45, i64 %14
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = add nuw nsw i32 %57, %51
  switch i8 %2, label %60 [
    i8 0, label %61
    i8 2, label %59
  ]

59:                                               ; preds = %36
  br label %61

60:                                               ; preds = %36
  br label %61

61:                                               ; preds = %36, %60, %59
  %62 = phi i64 [ 2, %60 ], [ %17, %59 ], [ %25, %36 ]
  %63 = phi i64 [ 3, %60 ], [ %20, %59 ], [ 2, %36 ]
  %64 = phi i64 [ 4, %60 ], [ %23, %59 ], [ %17, %36 ]
  %65 = or i32 %40, %26
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %111, label %67

67:                                               ; preds = %61
  %68 = getelementptr inbounds i8, i8* %45, i64 %62
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = add nuw nsw i32 %58, %73
  %75 = getelementptr inbounds i8, i8* %45, i64 %63
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i64
  %78 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = add nuw nsw i32 %74, %80
  %82 = getelementptr inbounds i8, i8* %45, i64 %64
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i64
  %85 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = add nuw nsw i32 %81, %87
  %89 = add nuw nsw i32 %88, 1
  %90 = lshr i32 %89, 1
  %91 = icmp ult i32 %90, 4
  %92 = select i1 %91, i32 %90, i32 4
  switch i8 %2, label %111 [
    i8 0, label %93
    i8 1, label %100
    i8 2, label %106
  ]

93:                                               ; preds = %67
  %94 = load i8*, i8** %30, align 8
  %95 = sext i16 %39 to i64
  %96 = getelementptr inbounds i8, i8* %94, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = sext i8 %97 to i32
  %99 = add nsw i32 %92, %98
  br label %111

100:                                              ; preds = %67
  %101 = and i32 %40, %28
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [32 x i32], [32 x i32]* @nz_map_ctx_offset_1d, i64 0, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = add nsw i32 %104, %92
  br label %111

106:                                              ; preds = %67
  %107 = sext i32 %41 to i64
  %108 = getelementptr inbounds [32 x i32], [32 x i32]* @nz_map_ctx_offset_1d, i64 0, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = add nsw i32 %109, %92
  br label %111

111:                                              ; preds = %61, %67, %93, %100, %106
  %112 = phi i32 [ 0, %61 ], [ %110, %106 ], [ %105, %100 ], [ %99, %93 ], [ 0, %67 ]
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds [5 x i16], [5 x i16]* %7, i64 %113, i64 0
  %115 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %31, i16* %114, i32 4) #4
  %116 = load i8, i8* %32, align 8
  %117 = icmp eq i8 %116, 0
  br i1 %117, label %153, label %118

118:                                              ; preds = %111
  %119 = getelementptr inbounds [5 x i16], [5 x i16]* %7, i64 %113, i64 4
  %120 = load i16, i16* %119, align 2
  %121 = icmp ugt i16 %120, 15
  %122 = select i1 %121, i32 4, i32 3
  %123 = icmp ugt i16 %120, 31
  %124 = select i1 %123, i32 3, i32 2
  %125 = add nuw nsw i32 %124, %122
  %126 = zext i32 %115 to i64
  %127 = shl i64 %126, 56
  %128 = ashr exact i64 %127, 56
  %129 = and i64 %128, 4294967295
  %130 = icmp eq i64 %129, 0
  %131 = select i1 %130, i32 0, i32 32768
  %132 = load i16, i16* %114, align 2
  %133 = zext i16 %132 to i32
  %134 = icmp ult i32 %131, %133
  br i1 %134, label %135, label %140

135:                                              ; preds = %118
  %136 = sub nsw i32 %133, %131
  %137 = ashr i32 %136, %125
  %138 = trunc i32 %137 to i16
  %139 = sub i16 %132, %138
  br label %145

140:                                              ; preds = %118
  %141 = sub nsw i32 %131, %133
  %142 = ashr i32 %141, %125
  %143 = trunc i32 %142 to i16
  %144 = add i16 %132, %143
  br label %145

145:                                              ; preds = %140, %135
  %146 = phi i16 [ %144, %140 ], [ %139, %135 ]
  store i16 %146, i16* %114, align 2
  %147 = icmp eq i64 %129, 1
  %148 = select i1 %147, i32 0, i32 %131
  %149 = getelementptr inbounds [5 x i16], [5 x i16]* %7, i64 %113, i64 1
  %150 = load i16, i16* %149, align 2
  %151 = zext i16 %150 to i32
  %152 = icmp ult i32 %148, %151
  br i1 %152, label %286, label %281

153:                                              ; preds = %111, %309
  %154 = icmp sgt i32 %115, 2
  br i1 %154, label %155, label %276

155:                                              ; preds = %153
  %156 = shl i32 %41, %5
  %157 = sub nsw i32 %40, %156
  %158 = mul nsw i32 %41, %13
  %159 = add nsw i32 %157, %158
  %160 = add nsw i32 %159, 1
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i8, i8* %6, i64 %161
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = add nsw i32 %159, %13
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i8, i8* %6, i64 %166
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i32
  %170 = add nuw nsw i32 %169, %164
  switch i8 %2, label %221 [
    i8 0, label %171
    i8 1, label %189
    i8 2, label %205
  ]

171:                                              ; preds = %155
  %172 = add nsw i32 %165, 1
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i8, i8* %6, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = add nuw nsw i32 %170, 1
  %178 = add nuw nsw i32 %177, %176
  %179 = icmp ult i32 %178, 12
  %180 = lshr i32 %178, 1
  %181 = select i1 %179, i32 %180, i32 6
  %182 = icmp eq i16 %39, 0
  br i1 %182, label %224, label %183

183:                                              ; preds = %171
  %184 = icmp slt i32 %41, 2
  %185 = icmp slt i32 %157, 2
  %186 = and i1 %184, %185
  br i1 %186, label %187, label %221

187:                                              ; preds = %183
  %188 = add nuw nsw i32 %181, 7
  br label %224

189:                                              ; preds = %155
  %190 = add nsw i32 %159, 2
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds i8, i8* %6, i64 %191
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i32
  %195 = add nuw nsw i32 %170, 1
  %196 = add nuw nsw i32 %195, %194
  %197 = icmp ult i32 %196, 12
  %198 = lshr i32 %196, 1
  %199 = select i1 %197, i32 %198, i32 6
  %200 = icmp eq i16 %39, 0
  br i1 %200, label %224, label %201

201:                                              ; preds = %189
  %202 = icmp eq i32 %157, 0
  br i1 %202, label %203, label %221

203:                                              ; preds = %201
  %204 = add nuw nsw i32 %199, 7
  br label %224

205:                                              ; preds = %155
  %206 = add nsw i32 %159, %33
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds i8, i8* %6, i64 %207
  %209 = load i8, i8* %208, align 1
  %210 = zext i8 %209 to i32
  %211 = add nuw nsw i32 %170, 1
  %212 = add nuw nsw i32 %211, %210
  %213 = icmp ult i32 %212, 12
  %214 = lshr i32 %212, 1
  %215 = select i1 %213, i32 %214, i32 6
  %216 = icmp eq i16 %39, 0
  br i1 %216, label %224, label %217

217:                                              ; preds = %205
  %218 = icmp eq i32 %41, 0
  br i1 %218, label %219, label %221

219:                                              ; preds = %217
  %220 = add nuw nsw i32 %215, 7
  br label %224

221:                                              ; preds = %217, %201, %183, %155
  %222 = phi i32 [ %170, %155 ], [ %215, %217 ], [ %199, %201 ], [ %181, %183 ]
  %223 = add nuw nsw i32 %222, 14
  br label %224

224:                                              ; preds = %171, %187, %189, %203, %205, %219, %221
  %225 = phi i32 [ %223, %221 ], [ %220, %219 ], [ %204, %203 ], [ %188, %187 ], [ %181, %171 ], [ %199, %189 ], [ %215, %205 ]
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds [5 x i16], [5 x i16]* %8, i64 %226, i64 0
  %228 = getelementptr inbounds [5 x i16], [5 x i16]* %8, i64 %226, i64 4
  %229 = getelementptr inbounds [5 x i16], [5 x i16]* %8, i64 %226, i64 1
  %230 = getelementptr inbounds [5 x i16], [5 x i16]* %8, i64 %226, i64 2
  br label %231

231:                                              ; preds = %270, %224
  %232 = phi i32 [ 0, %224 ], [ %273, %270 ]
  %233 = phi i32 [ %115, %224 ], [ %271, %270 ]
  %234 = tail call i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec* %31, i16* %227, i32 4) #4
  %235 = load i8, i8* %32, align 8
  %236 = icmp eq i8 %235, 0
  br i1 %236, label %270, label %237

237:                                              ; preds = %231
  %238 = load i16, i16* %228, align 2
  %239 = icmp ugt i16 %238, 15
  %240 = select i1 %239, i32 4, i32 3
  %241 = icmp ugt i16 %238, 31
  %242 = select i1 %241, i32 3, i32 2
  %243 = add nuw nsw i32 %242, %240
  %244 = zext i32 %234 to i64
  %245 = shl i64 %244, 56
  %246 = ashr exact i64 %245, 56
  %247 = and i64 %246, 4294967295
  %248 = icmp eq i64 %247, 0
  %249 = select i1 %248, i32 0, i32 32768
  %250 = load i16, i16* %227, align 2
  %251 = zext i16 %250 to i32
  %252 = icmp ult i32 %249, %251
  br i1 %252, label %253, label %258

253:                                              ; preds = %237
  %254 = sub nsw i32 %251, %249
  %255 = ashr i32 %254, %243
  %256 = trunc i32 %255 to i16
  %257 = sub i16 %250, %256
  br label %263

258:                                              ; preds = %237
  %259 = sub nsw i32 %249, %251
  %260 = ashr i32 %259, %243
  %261 = trunc i32 %260 to i16
  %262 = add i16 %250, %261
  br label %263

263:                                              ; preds = %258, %253
  %264 = phi i16 [ %262, %258 ], [ %257, %253 ]
  store i16 %264, i16* %227, align 2
  %265 = icmp eq i64 %247, 1
  %266 = select i1 %265, i32 0, i32 %249
  %267 = load i16, i16* %229, align 2
  %268 = zext i16 %267 to i32
  %269 = icmp ult i32 %266, %268
  br i1 %269, label %319, label %314

270:                                              ; preds = %231, %341
  %271 = add nsw i32 %234, %233
  %272 = icmp sgt i32 %234, 2
  %273 = add nuw nsw i32 %232, 3
  %274 = icmp ult i32 %273, 12
  %275 = and i1 %272, %274
  br i1 %275, label %231, label %276

276:                                              ; preds = %270, %153
  %277 = phi i32 [ %115, %153 ], [ %271, %270 ]
  %278 = trunc i32 %277 to i8
  store i8 %278, i8* %45, align 1
  %279 = add nsw i64 %37, -1
  %280 = icmp sgt i64 %37, 0
  br i1 %280, label %36, label %35

281:                                              ; preds = %145
  %282 = sub nsw i32 %148, %151
  %283 = ashr i32 %282, %125
  %284 = trunc i32 %283 to i16
  %285 = add i16 %150, %284
  br label %291

286:                                              ; preds = %145
  %287 = sub nsw i32 %151, %148
  %288 = ashr i32 %287, %125
  %289 = trunc i32 %288 to i16
  %290 = sub i16 %150, %289
  br label %291

291:                                              ; preds = %286, %281
  %292 = phi i16 [ %285, %281 ], [ %290, %286 ]
  store i16 %292, i16* %149, align 2
  %293 = icmp eq i64 %129, 2
  %294 = select i1 %293, i32 0, i32 %148
  %295 = getelementptr inbounds [5 x i16], [5 x i16]* %7, i64 %113, i64 2
  %296 = load i16, i16* %295, align 2
  %297 = zext i16 %296 to i32
  %298 = icmp ult i32 %294, %297
  br i1 %298, label %304, label %299

299:                                              ; preds = %291
  %300 = sub nsw i32 %294, %297
  %301 = ashr i32 %300, %125
  %302 = trunc i32 %301 to i16
  %303 = add i16 %296, %302
  br label %309

304:                                              ; preds = %291
  %305 = sub nsw i32 %297, %294
  %306 = ashr i32 %305, %125
  %307 = trunc i32 %306 to i16
  %308 = sub i16 %296, %307
  br label %309

309:                                              ; preds = %304, %299
  %310 = phi i16 [ %303, %299 ], [ %308, %304 ]
  store i16 %310, i16* %295, align 2
  %311 = icmp ult i16 %120, 32
  %312 = zext i1 %311 to i16
  %313 = add i16 %120, %312
  store i16 %313, i16* %119, align 2
  br label %153

314:                                              ; preds = %263
  %315 = sub nsw i32 %266, %268
  %316 = ashr i32 %315, %243
  %317 = trunc i32 %316 to i16
  %318 = add i16 %267, %317
  br label %324

319:                                              ; preds = %263
  %320 = sub nsw i32 %268, %266
  %321 = ashr i32 %320, %243
  %322 = trunc i32 %321 to i16
  %323 = sub i16 %267, %322
  br label %324

324:                                              ; preds = %319, %314
  %325 = phi i16 [ %318, %314 ], [ %323, %319 ]
  store i16 %325, i16* %229, align 2
  %326 = icmp eq i64 %247, 2
  %327 = select i1 %326, i32 0, i32 %266
  %328 = load i16, i16* %230, align 2
  %329 = zext i16 %328 to i32
  %330 = icmp ult i32 %327, %329
  br i1 %330, label %336, label %331

331:                                              ; preds = %324
  %332 = sub nsw i32 %327, %329
  %333 = ashr i32 %332, %243
  %334 = trunc i32 %333 to i16
  %335 = add i16 %328, %334
  br label %341

336:                                              ; preds = %324
  %337 = sub nsw i32 %329, %327
  %338 = ashr i32 %337, %243
  %339 = trunc i32 %338 to i16
  %340 = sub i16 %328, %339
  br label %341

341:                                              ; preds = %336, %331
  %342 = phi i16 [ %335, %331 ], [ %340, %336 ]
  store i16 %342, i16* %230, align 2
  %343 = icmp ult i16 %238, 32
  %344 = zext i1 %343 to i16
  %345 = add i16 %238, %344
  store i16 %345, i16* %228, align 2
  br label %270
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_read_coeffs_txb_facade(%struct.AV1Common*, %struct.DecoderCodingBlock*, %struct.aom_reader*, i32, i32, i32, i8 zeroext) local_unnamed_addr #0 {
  %8 = alloca %struct.txb_ctx, align 4
  %9 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 6
  %10 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %9, align 8
  %11 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %10, align 8
  %12 = sext i32 %3 to i64
  %13 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 0
  %14 = load i8, i8* %13, align 8
  %15 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 4, i64 %12, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 4, i64 %12, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = zext i8 %14 to i64
  %20 = sext i32 %16 to i64
  %21 = sext i32 %18 to i64
  %22 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %19, i64 %20, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = bitcast %struct.txb_ctx* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #4
  %25 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %8, i64 0, i32 0
  store i32 -1431655766, i32* %25, align 4
  %26 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %8, i64 0, i32 1
  store i32 -1431655766, i32* %26, align 4
  %27 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 4, i64 %12, i32 5
  %28 = load i8*, i8** %27, align 8
  %29 = sext i32 %5 to i64
  %30 = getelementptr inbounds i8, i8* %28, i64 %29
  %31 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 4, i64 %12, i32 6
  %32 = load i8*, i8** %31, align 8
  %33 = sext i32 %4 to i64
  %34 = zext i8 %6 to i64
  %35 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %34
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %34
  %38 = load i32, i32* %37, align 4
  %39 = sext i32 %36 to i64
  br label %40

40:                                               ; preds = %40, %7
  %41 = phi i64 [ %51, %40 ], [ 0, %7 ]
  %42 = phi i32 [ %50, %40 ], [ 0, %7 ]
  %43 = getelementptr inbounds i8, i8* %30, i64 %41
  %44 = load i8, i8* %43, align 1
  %45 = lshr i8 %44, 3
  %46 = zext i8 %45 to i64
  %47 = getelementptr inbounds [3 x i8], [3 x i8]* @get_txb_ctx.signs, i64 0, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = add nsw i32 %42, %49
  %51 = add nuw nsw i64 %41, 1
  %52 = icmp slt i64 %51, %39
  br i1 %52, label %40, label %53

53:                                               ; preds = %40
  %54 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0
  %55 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 4, i64 %12
  %56 = getelementptr inbounds i8, i8* %32, i64 %33
  %57 = sext i32 %38 to i64
  br label %58

58:                                               ; preds = %58, %53
  %59 = phi i64 [ 0, %53 ], [ %69, %58 ]
  %60 = phi i32 [ %50, %53 ], [ %68, %58 ]
  %61 = getelementptr inbounds i8, i8* %56, i64 %59
  %62 = load i8, i8* %61, align 1
  %63 = lshr i8 %62, 3
  %64 = zext i8 %63 to i64
  %65 = getelementptr inbounds [3 x i8], [3 x i8]* @get_txb_ctx.signs, i64 0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = sext i8 %66 to i32
  %68 = add nsw i32 %60, %67
  %69 = add nuw nsw i64 %59, 1
  %70 = icmp slt i64 %69, %57
  br i1 %70, label %58, label %71

71:                                               ; preds = %58
  %72 = add nsw i32 %68, 32
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [65 x i8], [65 x i8]* @get_txb_ctx.dc_sign_contexts, i64 0, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = sext i8 %75 to i32
  store i32 %76, i32* %26, align 4
  %77 = icmp eq i32 %3, 0
  br i1 %77, label %78, label %260

78:                                               ; preds = %71
  %79 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_to_bsize, i64 0, i64 %34
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %80, %23
  br i1 %81, label %429, label %82

82:                                               ; preds = %78
  %83 = icmp sgt i64 %39, 1
  %84 = select i1 %83, i64 %39, i64 1
  %85 = icmp ult i64 %84, 8
  br i1 %85, label %152, label %86

86:                                               ; preds = %82
  %87 = and i64 %84, 9223372036854775800
  %88 = add nsw i64 %87, -8
  %89 = lshr exact i64 %88, 3
  %90 = add nuw nsw i64 %89, 1
  %91 = and i64 %90, 1
  %92 = icmp eq i64 %88, 0
  br i1 %92, label %124, label %93

93:                                               ; preds = %86
  %94 = sub nuw nsw i64 %90, %91
  br label %95

95:                                               ; preds = %95, %93
  %96 = phi i64 [ 0, %93 ], [ %121, %95 ]
  %97 = phi <4 x i32> [ zeroinitializer, %93 ], [ %119, %95 ]
  %98 = phi <4 x i32> [ zeroinitializer, %93 ], [ %120, %95 ]
  %99 = phi i64 [ %94, %93 ], [ %122, %95 ]
  %100 = getelementptr inbounds i8, i8* %30, i64 %96
  %101 = bitcast i8* %100 to <4 x i8>*
  %102 = load <4 x i8>, <4 x i8>* %101, align 1
  %103 = getelementptr inbounds i8, i8* %100, i64 4
  %104 = bitcast i8* %103 to <4 x i8>*
  %105 = load <4 x i8>, <4 x i8>* %104, align 1
  %106 = sext <4 x i8> %102 to <4 x i32>
  %107 = sext <4 x i8> %105 to <4 x i32>
  %108 = or <4 x i32> %97, %106
  %109 = or <4 x i32> %98, %107
  %110 = or i64 %96, 8
  %111 = getelementptr inbounds i8, i8* %30, i64 %110
  %112 = bitcast i8* %111 to <4 x i8>*
  %113 = load <4 x i8>, <4 x i8>* %112, align 1
  %114 = getelementptr inbounds i8, i8* %111, i64 4
  %115 = bitcast i8* %114 to <4 x i8>*
  %116 = load <4 x i8>, <4 x i8>* %115, align 1
  %117 = sext <4 x i8> %113 to <4 x i32>
  %118 = sext <4 x i8> %116 to <4 x i32>
  %119 = or <4 x i32> %108, %117
  %120 = or <4 x i32> %109, %118
  %121 = add i64 %96, 16
  %122 = add i64 %99, -2
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %95, !llvm.loop !3

124:                                              ; preds = %95, %86
  %125 = phi <4 x i32> [ undef, %86 ], [ %119, %95 ]
  %126 = phi <4 x i32> [ undef, %86 ], [ %120, %95 ]
  %127 = phi i64 [ 0, %86 ], [ %121, %95 ]
  %128 = phi <4 x i32> [ zeroinitializer, %86 ], [ %119, %95 ]
  %129 = phi <4 x i32> [ zeroinitializer, %86 ], [ %120, %95 ]
  %130 = icmp eq i64 %91, 0
  br i1 %130, label %142, label %131

131:                                              ; preds = %124
  %132 = getelementptr inbounds i8, i8* %30, i64 %127
  %133 = getelementptr inbounds i8, i8* %132, i64 4
  %134 = bitcast i8* %133 to <4 x i8>*
  %135 = load <4 x i8>, <4 x i8>* %134, align 1
  %136 = sext <4 x i8> %135 to <4 x i32>
  %137 = or <4 x i32> %129, %136
  %138 = bitcast i8* %132 to <4 x i8>*
  %139 = load <4 x i8>, <4 x i8>* %138, align 1
  %140 = sext <4 x i8> %139 to <4 x i32>
  %141 = or <4 x i32> %128, %140
  br label %142

142:                                              ; preds = %124, %131
  %143 = phi <4 x i32> [ %125, %124 ], [ %141, %131 ]
  %144 = phi <4 x i32> [ %126, %124 ], [ %137, %131 ]
  %145 = or <4 x i32> %144, %143
  %146 = shufflevector <4 x i32> %145, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %147 = or <4 x i32> %145, %146
  %148 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %149 = or <4 x i32> %147, %148
  %150 = extractelement <4 x i32> %149, i32 0
  %151 = icmp eq i64 %84, %87
  br i1 %151, label %164, label %152

152:                                              ; preds = %142, %82
  %153 = phi i64 [ 0, %82 ], [ %87, %142 ]
  %154 = phi i32 [ 0, %82 ], [ %150, %142 ]
  br label %155

155:                                              ; preds = %152, %155
  %156 = phi i64 [ %162, %155 ], [ %153, %152 ]
  %157 = phi i32 [ %161, %155 ], [ %154, %152 ]
  %158 = getelementptr inbounds i8, i8* %30, i64 %156
  %159 = load i8, i8* %158, align 1
  %160 = sext i8 %159 to i32
  %161 = or i32 %157, %160
  %162 = add nuw nsw i64 %156, 1
  %163 = icmp slt i64 %162, %39
  br i1 %163, label %155, label %164, !llvm.loop !5

164:                                              ; preds = %155, %142
  %165 = phi i32 [ %150, %142 ], [ %161, %155 ]
  %166 = and i32 %165, 7
  %167 = icmp sgt i64 %57, 1
  %168 = select i1 %167, i64 %57, i64 1
  %169 = icmp ult i64 %168, 8
  br i1 %169, label %236, label %170

170:                                              ; preds = %164
  %171 = and i64 %168, 9223372036854775800
  %172 = add nsw i64 %171, -8
  %173 = lshr exact i64 %172, 3
  %174 = add nuw nsw i64 %173, 1
  %175 = and i64 %174, 1
  %176 = icmp eq i64 %172, 0
  br i1 %176, label %208, label %177

177:                                              ; preds = %170
  %178 = sub nuw nsw i64 %174, %175
  br label %179

179:                                              ; preds = %179, %177
  %180 = phi i64 [ 0, %177 ], [ %205, %179 ]
  %181 = phi <4 x i32> [ zeroinitializer, %177 ], [ %203, %179 ]
  %182 = phi <4 x i32> [ zeroinitializer, %177 ], [ %204, %179 ]
  %183 = phi i64 [ %178, %177 ], [ %206, %179 ]
  %184 = getelementptr inbounds i8, i8* %56, i64 %180
  %185 = bitcast i8* %184 to <4 x i8>*
  %186 = load <4 x i8>, <4 x i8>* %185, align 1
  %187 = getelementptr inbounds i8, i8* %184, i64 4
  %188 = bitcast i8* %187 to <4 x i8>*
  %189 = load <4 x i8>, <4 x i8>* %188, align 1
  %190 = sext <4 x i8> %186 to <4 x i32>
  %191 = sext <4 x i8> %189 to <4 x i32>
  %192 = or <4 x i32> %181, %190
  %193 = or <4 x i32> %182, %191
  %194 = or i64 %180, 8
  %195 = getelementptr inbounds i8, i8* %56, i64 %194
  %196 = bitcast i8* %195 to <4 x i8>*
  %197 = load <4 x i8>, <4 x i8>* %196, align 1
  %198 = getelementptr inbounds i8, i8* %195, i64 4
  %199 = bitcast i8* %198 to <4 x i8>*
  %200 = load <4 x i8>, <4 x i8>* %199, align 1
  %201 = sext <4 x i8> %197 to <4 x i32>
  %202 = sext <4 x i8> %200 to <4 x i32>
  %203 = or <4 x i32> %192, %201
  %204 = or <4 x i32> %193, %202
  %205 = add i64 %180, 16
  %206 = add i64 %183, -2
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %208, label %179, !llvm.loop !7

208:                                              ; preds = %179, %170
  %209 = phi <4 x i32> [ undef, %170 ], [ %203, %179 ]
  %210 = phi <4 x i32> [ undef, %170 ], [ %204, %179 ]
  %211 = phi i64 [ 0, %170 ], [ %205, %179 ]
  %212 = phi <4 x i32> [ zeroinitializer, %170 ], [ %203, %179 ]
  %213 = phi <4 x i32> [ zeroinitializer, %170 ], [ %204, %179 ]
  %214 = icmp eq i64 %175, 0
  br i1 %214, label %226, label %215

215:                                              ; preds = %208
  %216 = getelementptr inbounds i8, i8* %56, i64 %211
  %217 = getelementptr inbounds i8, i8* %216, i64 4
  %218 = bitcast i8* %217 to <4 x i8>*
  %219 = load <4 x i8>, <4 x i8>* %218, align 1
  %220 = sext <4 x i8> %219 to <4 x i32>
  %221 = or <4 x i32> %213, %220
  %222 = bitcast i8* %216 to <4 x i8>*
  %223 = load <4 x i8>, <4 x i8>* %222, align 1
  %224 = sext <4 x i8> %223 to <4 x i32>
  %225 = or <4 x i32> %212, %224
  br label %226

226:                                              ; preds = %208, %215
  %227 = phi <4 x i32> [ %209, %208 ], [ %225, %215 ]
  %228 = phi <4 x i32> [ %210, %208 ], [ %221, %215 ]
  %229 = or <4 x i32> %228, %227
  %230 = shufflevector <4 x i32> %229, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %231 = or <4 x i32> %229, %230
  %232 = shufflevector <4 x i32> %231, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %233 = or <4 x i32> %231, %232
  %234 = extractelement <4 x i32> %233, i32 0
  %235 = icmp eq i64 %168, %171
  br i1 %235, label %248, label %236

236:                                              ; preds = %226, %164
  %237 = phi i64 [ 0, %164 ], [ %171, %226 ]
  %238 = phi i32 [ 0, %164 ], [ %234, %226 ]
  br label %239

239:                                              ; preds = %236, %239
  %240 = phi i64 [ %246, %239 ], [ %237, %236 ]
  %241 = phi i32 [ %245, %239 ], [ %238, %236 ]
  %242 = getelementptr inbounds i8, i8* %56, i64 %240
  %243 = load i8, i8* %242, align 1
  %244 = sext i8 %243 to i32
  %245 = or i32 %241, %244
  %246 = add nuw nsw i64 %240, 1
  %247 = icmp slt i64 %246, %57
  br i1 %247, label %239, label %248, !llvm.loop !8

248:                                              ; preds = %239, %226
  %249 = phi i32 [ %234, %226 ], [ %245, %239 ]
  %250 = icmp ult i32 %166, 4
  %251 = select i1 %250, i32 %166, i32 4
  %252 = and i32 %249, 7
  %253 = icmp ult i32 %252, 4
  %254 = select i1 %253, i32 %252, i32 4
  %255 = zext i32 %251 to i64
  %256 = zext i32 %254 to i64
  %257 = getelementptr inbounds [5 x [5 x i8]], [5 x [5 x i8]]* @get_txb_ctx.skip_contexts, i64 0, i64 %255, i64 %256
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i32
  br label %429

260:                                              ; preds = %71
  switch i8 %6, label %412 [
    i8 0, label %261
    i8 5, label %266
    i8 6, label %272
    i8 7, label %278
    i8 8, label %285
    i8 9, label %292
    i8 10, label %299
    i8 1, label %306
    i8 2, label %313
    i8 3, label %320
    i8 4, label %327
    i8 11, label %342
    i8 12, label %353
    i8 13, label %364
    i8 14, label %370
    i8 15, label %376
    i8 16, label %383
    i8 17, label %390
    i8 18, label %401
  ]

261:                                              ; preds = %260
  %262 = load i8, i8* %30, align 1
  %263 = icmp ne i8 %262, 0
  %264 = load i8, i8* %56, align 1
  %265 = icmp ne i8 %264, 0
  br label %412

266:                                              ; preds = %260
  %267 = load i8, i8* %30, align 1
  %268 = icmp ne i8 %267, 0
  %269 = bitcast i8* %56 to i16*
  %270 = load i16, i16* %269, align 2
  %271 = icmp ne i16 %270, 0
  br label %412

272:                                              ; preds = %260
  %273 = bitcast i8* %30 to i16*
  %274 = load i16, i16* %273, align 2
  %275 = icmp ne i16 %274, 0
  %276 = load i8, i8* %56, align 1
  %277 = icmp ne i8 %276, 0
  br label %412

278:                                              ; preds = %260
  %279 = bitcast i8* %30 to i16*
  %280 = load i16, i16* %279, align 2
  %281 = icmp ne i16 %280, 0
  %282 = bitcast i8* %56 to i32*
  %283 = load i32, i32* %282, align 4
  %284 = icmp ne i32 %283, 0
  br label %412

285:                                              ; preds = %260
  %286 = bitcast i8* %30 to i32*
  %287 = load i32, i32* %286, align 4
  %288 = icmp ne i32 %287, 0
  %289 = bitcast i8* %56 to i16*
  %290 = load i16, i16* %289, align 2
  %291 = icmp ne i16 %290, 0
  br label %412

292:                                              ; preds = %260
  %293 = bitcast i8* %30 to i32*
  %294 = load i32, i32* %293, align 4
  %295 = icmp ne i32 %294, 0
  %296 = bitcast i8* %56 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = icmp ne i64 %297, 0
  br label %412

299:                                              ; preds = %260
  %300 = bitcast i8* %30 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = icmp ne i64 %301, 0
  %303 = bitcast i8* %56 to i32*
  %304 = load i32, i32* %303, align 4
  %305 = icmp ne i32 %304, 0
  br label %412

306:                                              ; preds = %260
  %307 = bitcast i8* %30 to i16*
  %308 = load i16, i16* %307, align 2
  %309 = icmp ne i16 %308, 0
  %310 = bitcast i8* %56 to i16*
  %311 = load i16, i16* %310, align 2
  %312 = icmp ne i16 %311, 0
  br label %412

313:                                              ; preds = %260
  %314 = bitcast i8* %30 to i32*
  %315 = load i32, i32* %314, align 4
  %316 = icmp ne i32 %315, 0
  %317 = bitcast i8* %56 to i32*
  %318 = load i32, i32* %317, align 4
  %319 = icmp ne i32 %318, 0
  br label %412

320:                                              ; preds = %260
  %321 = bitcast i8* %30 to i64*
  %322 = load i64, i64* %321, align 8
  %323 = icmp ne i64 %322, 0
  %324 = bitcast i8* %56 to i64*
  %325 = load i64, i64* %324, align 8
  %326 = icmp ne i64 %325, 0
  br label %412

327:                                              ; preds = %260
  %328 = bitcast i8* %30 to i64*
  %329 = load i64, i64* %328, align 8
  %330 = getelementptr inbounds i8, i8* %30, i64 8
  %331 = bitcast i8* %330 to i64*
  %332 = load i64, i64* %331, align 8
  %333 = or i64 %332, %329
  %334 = icmp ne i64 %333, 0
  %335 = bitcast i8* %56 to i64*
  %336 = load i64, i64* %335, align 8
  %337 = getelementptr inbounds i8, i8* %56, i64 8
  %338 = bitcast i8* %337 to i64*
  %339 = load i64, i64* %338, align 8
  %340 = or i64 %339, %336
  %341 = icmp ne i64 %340, 0
  br label %412

342:                                              ; preds = %260
  %343 = bitcast i8* %30 to i64*
  %344 = load i64, i64* %343, align 8
  %345 = icmp ne i64 %344, 0
  %346 = bitcast i8* %56 to i64*
  %347 = load i64, i64* %346, align 8
  %348 = getelementptr inbounds i8, i8* %56, i64 8
  %349 = bitcast i8* %348 to i64*
  %350 = load i64, i64* %349, align 8
  %351 = or i64 %350, %347
  %352 = icmp ne i64 %351, 0
  br label %412

353:                                              ; preds = %260
  %354 = bitcast i8* %30 to i64*
  %355 = load i64, i64* %354, align 8
  %356 = getelementptr inbounds i8, i8* %30, i64 8
  %357 = bitcast i8* %356 to i64*
  %358 = load i64, i64* %357, align 8
  %359 = or i64 %358, %355
  %360 = icmp ne i64 %359, 0
  %361 = bitcast i8* %56 to i64*
  %362 = load i64, i64* %361, align 8
  %363 = icmp ne i64 %362, 0
  br label %412

364:                                              ; preds = %260
  %365 = load i8, i8* %30, align 1
  %366 = icmp ne i8 %365, 0
  %367 = bitcast i8* %56 to i32*
  %368 = load i32, i32* %367, align 4
  %369 = icmp ne i32 %368, 0
  br label %412

370:                                              ; preds = %260
  %371 = bitcast i8* %30 to i32*
  %372 = load i32, i32* %371, align 4
  %373 = icmp ne i32 %372, 0
  %374 = load i8, i8* %56, align 1
  %375 = icmp ne i8 %374, 0
  br label %412

376:                                              ; preds = %260
  %377 = bitcast i8* %30 to i16*
  %378 = load i16, i16* %377, align 2
  %379 = icmp ne i16 %378, 0
  %380 = bitcast i8* %56 to i64*
  %381 = load i64, i64* %380, align 8
  %382 = icmp ne i64 %381, 0
  br label %412

383:                                              ; preds = %260
  %384 = bitcast i8* %30 to i64*
  %385 = load i64, i64* %384, align 8
  %386 = icmp ne i64 %385, 0
  %387 = bitcast i8* %56 to i16*
  %388 = load i16, i16* %387, align 2
  %389 = icmp ne i16 %388, 0
  br label %412

390:                                              ; preds = %260
  %391 = bitcast i8* %30 to i32*
  %392 = load i32, i32* %391, align 4
  %393 = icmp ne i32 %392, 0
  %394 = bitcast i8* %56 to i64*
  %395 = load i64, i64* %394, align 8
  %396 = getelementptr inbounds i8, i8* %56, i64 8
  %397 = bitcast i8* %396 to i64*
  %398 = load i64, i64* %397, align 8
  %399 = or i64 %398, %395
  %400 = icmp ne i64 %399, 0
  br label %412

401:                                              ; preds = %260
  %402 = bitcast i8* %30 to i64*
  %403 = load i64, i64* %402, align 8
  %404 = getelementptr inbounds i8, i8* %30, i64 8
  %405 = bitcast i8* %404 to i64*
  %406 = load i64, i64* %405, align 8
  %407 = or i64 %406, %403
  %408 = icmp ne i64 %407, 0
  %409 = bitcast i8* %56 to i32*
  %410 = load i32, i32* %409, align 4
  %411 = icmp ne i32 %410, 0
  br label %412

412:                                              ; preds = %401, %390, %383, %376, %370, %364, %353, %342, %327, %320, %313, %306, %299, %292, %285, %278, %272, %266, %261, %260
  %413 = phi i1 [ false, %260 ], [ %408, %401 ], [ %393, %390 ], [ %386, %383 ], [ %379, %376 ], [ %373, %370 ], [ %366, %364 ], [ %360, %353 ], [ %345, %342 ], [ %334, %327 ], [ %323, %320 ], [ %316, %313 ], [ %309, %306 ], [ %302, %299 ], [ %295, %292 ], [ %288, %285 ], [ %281, %278 ], [ %275, %272 ], [ %268, %266 ], [ %263, %261 ]
  %414 = phi i1 [ false, %260 ], [ %411, %401 ], [ %400, %390 ], [ %389, %383 ], [ %382, %376 ], [ %375, %370 ], [ %369, %364 ], [ %363, %353 ], [ %352, %342 ], [ %341, %327 ], [ %326, %320 ], [ %319, %313 ], [ %312, %306 ], [ %305, %299 ], [ %298, %292 ], [ %291, %285 ], [ %284, %278 ], [ %277, %272 ], [ %271, %266 ], [ %265, %261 ]
  %415 = zext i1 %413 to i32
  %416 = zext i1 %414 to i32
  %417 = add nuw nsw i32 %416, %415
  %418 = zext i8 %23 to i64
  %419 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %418
  %420 = load i8, i8* %419, align 1
  %421 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_to_bsize, i64 0, i64 %34
  %422 = load i8, i8* %421, align 1
  %423 = zext i8 %422 to i64
  %424 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %423
  %425 = load i8, i8* %424, align 1
  %426 = icmp ugt i8 %420, %425
  %427 = select i1 %426, i32 10, i32 7
  %428 = add nuw nsw i32 %417, %427
  br label %429

429:                                              ; preds = %78, %248, %412
  %430 = phi i32 [ %259, %248 ], [ %428, %412 ], [ 0, %78 ]
  store i32 %430, i32* %25, align 4
  %431 = call zeroext i8 @av1_read_coeffs_txb(%struct.AV1Common* %0, %struct.DecoderCodingBlock* %1, %struct.aom_reader* %2, i32 %4, i32 %5, i32 %3, %struct.txb_ctx* nonnull %8, i8 zeroext %6)
  %432 = zext i8 %431 to i32
  tail call void @av1_set_entropy_contexts(%struct.macroblockd* %54, %struct.macroblockd_plane* %55, i32 %3, i8 zeroext %23, i8 zeroext %6, i32 %432, i32 %5, i32 %4) #4
  %433 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 28
  %434 = load i16, i16* %433, align 1
  %435 = trunc i16 %434 to i8
  %436 = icmp sgt i8 %435, -1
  br i1 %436, label %437, label %441

437:                                              ; preds = %429
  %438 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 6, i64 0
  %439 = load i8, i8* %438, align 8
  %440 = icmp slt i8 %439, 1
  br i1 %440, label %566, label %441

441:                                              ; preds = %429, %437
  %442 = icmp eq i32 %3, 0
  %443 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 20, i32 9
  %444 = load i8, i8* %443, align 1, !range !2
  %445 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %9, align 8
  %446 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %445, align 8
  %447 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %446, i64 0, i32 28
  %448 = load i16, i16* %447, align 1
  %449 = and i16 %448, 7
  %450 = zext i16 %449 to i64
  %451 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 42, i64 %450
  %452 = load i32, i32* %451, align 4
  %453 = icmp eq i32 %452, 0
  br i1 %453, label %454, label %536

454:                                              ; preds = %441
  %455 = lshr i64 399376, %34
  %456 = and i64 %455, 1
  %457 = icmp eq i64 %456, 0
  br i1 %457, label %458, label %536

458:                                              ; preds = %454
  br i1 %442, label %459, label %469

459:                                              ; preds = %458
  %460 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 15
  %461 = load i8*, i8** %460, align 8
  %462 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 16
  %463 = load i32, i32* %462, align 16
  %464 = mul nsw i32 %463, %4
  %465 = add nsw i32 %464, %5
  %466 = sext i32 %465 to i64
  %467 = getelementptr inbounds i8, i8* %461, i64 %466
  %468 = load i8, i8* %467, align 1
  br label %536

469:                                              ; preds = %458
  %470 = trunc i16 %448 to i8
  %471 = icmp sgt i8 %470, -1
  br i1 %471, label %472, label %485

472:                                              ; preds = %469
  %473 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %446, i64 0, i32 6, i64 0
  %474 = load i8, i8* %473, align 8
  %475 = icmp slt i8 %474, 1
  br i1 %475, label %476, label %485

476:                                              ; preds = %472
  %477 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %446, i64 0, i32 3
  %478 = load i8, i8* %477, align 1
  %479 = zext i8 %478 to i64
  %480 = getelementptr inbounds [16 x i8], [16 x i8]* @get_uv_mode.uv2y, i64 0, i64 %479
  %481 = load i8, i8* %480, align 1
  %482 = zext i8 %481 to i64
  %483 = getelementptr inbounds [13 x i8], [13 x i8]* @intra_mode_to_tx_type._intra_mode_to_tx_type, i64 0, i64 %482
  %484 = load i8, i8* %483, align 1
  br label %504

485:                                              ; preds = %472, %469
  %486 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 4, i64 1, i32 2
  %487 = load i32, i32* %486, align 8
  %488 = shl i32 %4, %487
  %489 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 4, i64 1, i32 1
  %490 = load i32, i32* %489, align 4
  %491 = shl i32 %5, %490
  %492 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 15
  %493 = load i8*, i8** %492, align 8
  %494 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 16
  %495 = load i32, i32* %494, align 16
  %496 = mul nsw i32 %495, %488
  %497 = add nsw i32 %496, %491
  %498 = sext i32 %497 to i64
  %499 = getelementptr inbounds i8, i8* %493, i64 %498
  %500 = load i8, i8* %499, align 1
  br i1 %471, label %501, label %509

501:                                              ; preds = %485
  %502 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %446, i64 0, i32 6, i64 0
  %503 = load i8, i8* %502, align 8
  br label %504

504:                                              ; preds = %501, %476
  %505 = phi i8 [ %474, %476 ], [ %503, %501 ]
  %506 = phi i8 [ %484, %476 ], [ %500, %501 ]
  %507 = icmp sgt i8 %505, 0
  %508 = zext i1 %507 to i32
  br label %509

509:                                              ; preds = %504, %485
  %510 = phi i8 [ %500, %485 ], [ %506, %504 ]
  %511 = phi i32 [ 1, %485 ], [ %508, %504 ]
  %512 = lshr i64 99848, %34
  %513 = and i64 %512, 1
  %514 = icmp eq i64 %513, 0
  br i1 %514, label %517, label %515

515:                                              ; preds = %509
  %516 = trunc i32 %511 to i8
  br label %528

517:                                              ; preds = %509
  %518 = icmp eq i8 %444, 0
  br i1 %518, label %522, label %519

519:                                              ; preds = %517
  %520 = icmp eq i32 %511, 0
  %521 = select i1 %520, i8 2, i8 1
  br label %528

522:                                              ; preds = %517
  %523 = zext i32 %511 to i64
  %524 = lshr i64 394756, %34
  %525 = and i64 %524, 1
  %526 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @av1_ext_tx_set_lookup, i64 0, i64 %523, i64 %525
  %527 = load i8, i8* %526, align 1
  br label %528

528:                                              ; preds = %522, %519, %515
  %529 = phi i8 [ %516, %515 ], [ %521, %519 ], [ %527, %522 ]
  %530 = zext i8 %529 to i64
  %531 = zext i8 %510 to i64
  %532 = getelementptr inbounds [6 x [16 x i32]], [6 x [16 x i32]]* bitcast (<{ <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32] }>* @av1_ext_tx_used to [6 x [16 x i32]]*), i64 0, i64 %530, i64 %531
  %533 = load i32, i32* %532, align 4
  %534 = icmp eq i32 %533, 0
  %535 = select i1 %534, i8 0, i8 %510
  br label %536

536:                                              ; preds = %441, %454, %459, %528
  %537 = phi i8 [ 0, %454 ], [ 0, %441 ], [ %468, %459 ], [ %535, %528 ]
  br i1 %77, label %538, label %566

538:                                              ; preds = %536
  %539 = lshr i64 266256, %34
  %540 = and i64 %539, 1
  %541 = icmp eq i64 %540, 0
  br i1 %541, label %542, label %546

542:                                              ; preds = %538
  %543 = lshr i64 133136, %34
  %544 = and i64 %543, 1
  %545 = icmp eq i64 %544, 0
  br i1 %545, label %566, label %546

546:                                              ; preds = %538, %542
  %547 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 16
  %548 = load i32, i32* %547, align 16
  %549 = getelementptr inbounds %struct.DecoderCodingBlock, %struct.DecoderCodingBlock* %1, i64 0, i32 0, i32 15
  %550 = sext i32 %548 to i64
  br label %551

551:                                              ; preds = %556, %546
  %552 = phi i64 [ 0, %546 ], [ %557, %556 ]
  %553 = add nsw i64 %552, %33
  %554 = mul nsw i64 %553, %550
  %555 = add nsw i64 %554, %29
  br label %559

556:                                              ; preds = %559
  %557 = add nuw nsw i64 %552, 4
  %558 = icmp slt i64 %557, %57
  br i1 %558, label %551, label %566

559:                                              ; preds = %551, %559
  %560 = phi i64 [ 0, %551 ], [ %564, %559 ]
  %561 = load i8*, i8** %549, align 8
  %562 = add nsw i64 %555, %560
  %563 = getelementptr inbounds i8, i8* %561, i64 %562
  store i8 %537, i8* %563, align 1
  %564 = add nuw nsw i64 %560, 4
  %565 = icmp slt i64 %564, %39
  br i1 %565, label %559, label %556

566:                                              ; preds = %556, %536, %542, %437
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #4
  ret void
}

declare void @av1_set_entropy_contexts(%struct.macroblockd*, %struct.macroblockd_plane*, i32, i8 zeroext, i8 zeroext, i32, i32, i32) local_unnamed_addr #2

declare i32 @od_ec_decode_cdf_q15(%struct.od_ec_dec*, i16*, i32) local_unnamed_addr #2

declare i32 @od_ec_decode_bool_q15(%struct.od_ec_dec*, i32) local_unnamed_addr #2

declare void @aom_internal_error(%struct.aom_internal_error_info*, i32, i8*, ...) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6, !4}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !6, !4}
