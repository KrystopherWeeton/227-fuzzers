; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/inv_txfm.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/inv_txfm.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_iwht4x4_16_add_c(i32* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = alloca [16 x i32], align 16
  %5 = bitcast [16 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #3
  %6 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %7 = bitcast i32* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 16, i1 false)
  %8 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %9 = load i32, i32* %0, align 4
  %10 = ashr i32 %9, 2
  %11 = getelementptr inbounds i32, i32* %0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = ashr i32 %12, 2
  %14 = getelementptr inbounds i32, i32* %0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = ashr i32 %15, 2
  %17 = getelementptr inbounds i32, i32* %0, i64 3
  %18 = load i32, i32* %17, align 4
  %19 = ashr i32 %18, 2
  %20 = add nsw i32 %13, %10
  %21 = sub nsw i32 %16, %19
  %22 = sub nsw i32 %20, %21
  %23 = ashr i32 %22, 1
  %24 = sub nsw i32 %23, %19
  %25 = sub nsw i32 %23, %13
  %26 = sub i32 %20, %24
  store i32 %26, i32* %8, align 16
  %27 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  store i32 %24, i32* %27, align 4
  %28 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  store i32 %25, i32* %28, align 8
  %29 = add i32 %25, %21
  %30 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds i32, i32* %0, i64 4
  %32 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %33 = load i32, i32* %31, align 4
  %34 = ashr i32 %33, 2
  %35 = getelementptr inbounds i32, i32* %0, i64 5
  %36 = load i32, i32* %35, align 4
  %37 = ashr i32 %36, 2
  %38 = getelementptr inbounds i32, i32* %0, i64 6
  %39 = load i32, i32* %38, align 4
  %40 = ashr i32 %39, 2
  %41 = getelementptr inbounds i32, i32* %0, i64 7
  %42 = load i32, i32* %41, align 4
  %43 = ashr i32 %42, 2
  %44 = add nsw i32 %37, %34
  %45 = sub nsw i32 %40, %43
  %46 = sub nsw i32 %44, %45
  %47 = ashr i32 %46, 1
  %48 = sub nsw i32 %47, %43
  %49 = sub nsw i32 %47, %37
  %50 = sub i32 %44, %48
  store i32 %50, i32* %32, align 16
  %51 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  store i32 %48, i32* %51, align 4
  %52 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  store i32 %49, i32* %52, align 8
  %53 = add i32 %49, %45
  %54 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds i32, i32* %0, i64 8
  %56 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %57 = load i32, i32* %55, align 4
  %58 = ashr i32 %57, 2
  %59 = getelementptr inbounds i32, i32* %0, i64 9
  %60 = load i32, i32* %59, align 4
  %61 = ashr i32 %60, 2
  %62 = getelementptr inbounds i32, i32* %0, i64 10
  %63 = load i32, i32* %62, align 4
  %64 = ashr i32 %63, 2
  %65 = getelementptr inbounds i32, i32* %0, i64 11
  %66 = load i32, i32* %65, align 4
  %67 = ashr i32 %66, 2
  %68 = add nsw i32 %61, %58
  %69 = sub nsw i32 %64, %67
  %70 = sub nsw i32 %68, %69
  %71 = ashr i32 %70, 1
  %72 = sub nsw i32 %71, %67
  %73 = sub nsw i32 %71, %61
  %74 = sub i32 %68, %72
  store i32 %74, i32* %56, align 16
  %75 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  store i32 %72, i32* %75, align 4
  %76 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  store i32 %73, i32* %76, align 8
  %77 = add i32 %73, %69
  %78 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  store i32 %77, i32* %78, align 4
  %79 = getelementptr inbounds i32, i32* %0, i64 12
  %80 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %81 = load i32, i32* %79, align 4
  %82 = ashr i32 %81, 2
  %83 = getelementptr inbounds i32, i32* %0, i64 13
  %84 = load i32, i32* %83, align 4
  %85 = ashr i32 %84, 2
  %86 = getelementptr inbounds i32, i32* %0, i64 14
  %87 = load i32, i32* %86, align 4
  %88 = ashr i32 %87, 2
  %89 = getelementptr inbounds i32, i32* %0, i64 15
  %90 = load i32, i32* %89, align 4
  %91 = ashr i32 %90, 2
  %92 = add nsw i32 %85, %82
  %93 = sub nsw i32 %88, %91
  %94 = sub nsw i32 %92, %93
  %95 = ashr i32 %94, 1
  %96 = sub nsw i32 %95, %91
  %97 = sub nsw i32 %95, %85
  %98 = sub i32 %92, %96
  store i32 %98, i32* %80, align 16
  %99 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  store i32 %96, i32* %99, align 4
  %100 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  store i32 %97, i32* %100, align 8
  %101 = add i32 %97, %93
  %102 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  store i32 %101, i32* %102, align 4
  %103 = sext i32 %2 to i64
  %104 = shl nsw i32 %2, 1
  %105 = sext i32 %104 to i64
  %106 = mul nsw i32 %2, 3
  %107 = sext i32 %106 to i64
  br label %108

108:                                              ; preds = %172, %3
  %109 = phi i32 [ %50, %3 ], [ %176, %172 ]
  %110 = phi i32 [ %26, %3 ], [ %174, %172 ]
  %111 = phi i32* [ %8, %3 ], [ %169, %172 ]
  %112 = phi i32 [ 0, %3 ], [ %170, %172 ]
  %113 = phi i8* [ %1, %3 ], [ %173, %172 ]
  %114 = sext i32 %110 to i64
  %115 = sext i32 %109 to i64
  %116 = getelementptr inbounds i32, i32* %111, i64 8
  %117 = load i32, i32* %116, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i32, i32* %111, i64 12
  %120 = load i32, i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = add nsw i64 %115, %114
  %123 = sub nsw i64 %118, %121
  %124 = sub nsw i64 %122, %123
  %125 = ashr i64 %124, 1
  %126 = sub nsw i64 %125, %121
  %127 = sub nsw i64 %125, %115
  %128 = sub nsw i64 %122, %126
  %129 = add nsw i64 %127, %123
  %130 = load i8, i8* %113, align 1
  %131 = trunc i64 %128 to i32
  %132 = zext i8 %130 to i32
  %133 = add nsw i32 %131, %132
  %134 = icmp sgt i32 %133, 0
  %135 = select i1 %134, i32 %133, i32 0
  %136 = icmp slt i32 %135, 255
  %137 = select i1 %136, i32 %135, i32 255
  %138 = trunc i32 %137 to i8
  store i8 %138, i8* %113, align 1
  %139 = getelementptr inbounds i8, i8* %113, i64 %103
  %140 = load i8, i8* %139, align 1
  %141 = trunc i64 %126 to i32
  %142 = zext i8 %140 to i32
  %143 = add nsw i32 %141, %142
  %144 = icmp sgt i32 %143, 0
  %145 = select i1 %144, i32 %143, i32 0
  %146 = icmp slt i32 %145, 255
  %147 = select i1 %146, i32 %145, i32 255
  %148 = trunc i32 %147 to i8
  store i8 %148, i8* %139, align 1
  %149 = getelementptr inbounds i8, i8* %113, i64 %105
  %150 = load i8, i8* %149, align 1
  %151 = trunc i64 %127 to i32
  %152 = zext i8 %150 to i32
  %153 = add nsw i32 %151, %152
  %154 = icmp sgt i32 %153, 0
  %155 = select i1 %154, i32 %153, i32 0
  %156 = icmp slt i32 %155, 255
  %157 = select i1 %156, i32 %155, i32 255
  %158 = trunc i32 %157 to i8
  store i8 %158, i8* %149, align 1
  %159 = getelementptr inbounds i8, i8* %113, i64 %107
  %160 = load i8, i8* %159, align 1
  %161 = trunc i64 %129 to i32
  %162 = zext i8 %160 to i32
  %163 = add nsw i32 %162, %161
  %164 = icmp sgt i32 %163, 0
  %165 = select i1 %164, i32 %163, i32 0
  %166 = icmp slt i32 %165, 255
  %167 = select i1 %166, i32 %165, i32 255
  %168 = trunc i32 %167 to i8
  store i8 %168, i8* %159, align 1
  %169 = getelementptr inbounds i32, i32* %111, i64 1
  %170 = add nuw nsw i32 %112, 1
  %171 = icmp eq i32 %170, 4
  br i1 %171, label %177, label %172

172:                                              ; preds = %108
  %173 = getelementptr inbounds i8, i8* %113, i64 1
  %174 = load i32, i32* %169, align 4
  %175 = getelementptr inbounds i32, i32* %111, i64 5
  %176 = load i32, i32* %175, align 4
  br label %108

177:                                              ; preds = %108
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_iwht4x4_1_add_c(i32* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = alloca [4 x i32], align 16
  %5 = bitcast [4 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #3
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 0
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 1
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 2
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 3
  %10 = load i32, i32* %0, align 4
  %11 = ashr i32 %10, 2
  %12 = ashr i32 %10, 3
  %13 = sub nsw i32 %11, %12
  store i32 %13, i32* %6, align 16
  store i32 %12, i32* %9, align 4
  store i32 %12, i32* %8, align 8
  store i32 %12, i32* %7, align 4
  %14 = sext i32 %2 to i64
  %15 = shl nsw i32 %2, 1
  %16 = sext i32 %15 to i64
  %17 = mul nsw i32 %2, 3
  %18 = sext i32 %17 to i64
  %19 = ashr i32 %13, 1
  %20 = sub nsw i32 %13, %19
  %21 = load i8, i8* %1, align 1
  %22 = zext i8 %21 to i32
  %23 = add nsw i32 %20, %22
  %24 = icmp sgt i32 %23, 0
  %25 = select i1 %24, i32 %23, i32 0
  %26 = icmp slt i32 %25, 255
  %27 = select i1 %26, i32 %25, i32 255
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %1, align 1
  %29 = getelementptr inbounds i8, i8* %1, i64 %14
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = add nsw i32 %19, %31
  %33 = icmp sgt i32 %32, 0
  %34 = select i1 %33, i32 %32, i32 0
  %35 = icmp slt i32 %34, 255
  %36 = select i1 %35, i32 %34, i32 255
  %37 = trunc i32 %36 to i8
  store i8 %37, i8* %29, align 1
  %38 = getelementptr inbounds i8, i8* %1, i64 %16
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add nsw i32 %19, %40
  %42 = icmp sgt i32 %41, 0
  %43 = select i1 %42, i32 %41, i32 0
  %44 = icmp slt i32 %43, 255
  %45 = select i1 %44, i32 %43, i32 255
  %46 = trunc i32 %45 to i8
  store i8 %46, i8* %38, align 1
  %47 = getelementptr inbounds i8, i8* %1, i64 %18
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = add nsw i32 %19, %49
  %51 = icmp sgt i32 %50, 0
  %52 = select i1 %51, i32 %50, i32 0
  %53 = icmp slt i32 %52, 255
  %54 = select i1 %53, i32 %52, i32 255
  %55 = trunc i32 %54 to i8
  store i8 %55, i8* %47, align 1
  %56 = getelementptr inbounds i8, i8* %1, i64 1
  %57 = ashr i32 %10, 4
  %58 = sub nsw i32 %12, %57
  %59 = load i8, i8* %56, align 1
  %60 = zext i8 %59 to i32
  %61 = add nsw i32 %58, %60
  %62 = icmp sgt i32 %61, 0
  %63 = select i1 %62, i32 %61, i32 0
  %64 = icmp slt i32 %63, 255
  %65 = select i1 %64, i32 %63, i32 255
  %66 = trunc i32 %65 to i8
  store i8 %66, i8* %56, align 1
  %67 = getelementptr inbounds i8, i8* %56, i64 %14
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = add nsw i32 %57, %69
  %71 = icmp sgt i32 %70, 0
  %72 = select i1 %71, i32 %70, i32 0
  %73 = icmp slt i32 %72, 255
  %74 = select i1 %73, i32 %72, i32 255
  %75 = trunc i32 %74 to i8
  store i8 %75, i8* %67, align 1
  %76 = getelementptr inbounds i8, i8* %56, i64 %16
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = add nsw i32 %57, %78
  %80 = icmp sgt i32 %79, 0
  %81 = select i1 %80, i32 %79, i32 0
  %82 = icmp slt i32 %81, 255
  %83 = select i1 %82, i32 %81, i32 255
  %84 = trunc i32 %83 to i8
  store i8 %84, i8* %76, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 %18
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = add nsw i32 %57, %87
  %89 = icmp sgt i32 %88, 0
  %90 = select i1 %89, i32 %88, i32 0
  %91 = icmp slt i32 %90, 255
  %92 = select i1 %91, i32 %90, i32 255
  %93 = trunc i32 %92 to i8
  store i8 %93, i8* %85, align 1
  %94 = getelementptr inbounds i8, i8* %1, i64 2
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = add nsw i32 %58, %96
  %98 = icmp sgt i32 %97, 0
  %99 = select i1 %98, i32 %97, i32 0
  %100 = icmp slt i32 %99, 255
  %101 = select i1 %100, i32 %99, i32 255
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %94, align 1
  %103 = getelementptr inbounds i8, i8* %94, i64 %14
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = add nsw i32 %57, %105
  %107 = icmp sgt i32 %106, 0
  %108 = select i1 %107, i32 %106, i32 0
  %109 = icmp slt i32 %108, 255
  %110 = select i1 %109, i32 %108, i32 255
  %111 = trunc i32 %110 to i8
  store i8 %111, i8* %103, align 1
  %112 = getelementptr inbounds i8, i8* %94, i64 %16
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = add nsw i32 %57, %114
  %116 = icmp sgt i32 %115, 0
  %117 = select i1 %116, i32 %115, i32 0
  %118 = icmp slt i32 %117, 255
  %119 = select i1 %118, i32 %117, i32 255
  %120 = trunc i32 %119 to i8
  store i8 %120, i8* %112, align 1
  %121 = getelementptr inbounds i8, i8* %94, i64 %18
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = add nsw i32 %57, %123
  %125 = icmp sgt i32 %124, 0
  %126 = select i1 %125, i32 %124, i32 0
  %127 = icmp slt i32 %126, 255
  %128 = select i1 %127, i32 %126, i32 255
  %129 = trunc i32 %128 to i8
  store i8 %129, i8* %121, align 1
  %130 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 3
  %131 = getelementptr inbounds i8, i8* %1, i64 3
  %132 = load i32, i32* %130, align 4
  %133 = ashr i32 %132, 1
  %134 = sub i32 %132, %133
  %135 = load i8, i8* %131, align 1
  %136 = zext i8 %135 to i32
  %137 = add nsw i32 %134, %136
  %138 = icmp sgt i32 %137, 0
  %139 = select i1 %138, i32 %137, i32 0
  %140 = icmp slt i32 %139, 255
  %141 = select i1 %140, i32 %139, i32 255
  %142 = trunc i32 %141 to i8
  store i8 %142, i8* %131, align 1
  %143 = getelementptr inbounds i8, i8* %131, i64 %14
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = add nsw i32 %133, %145
  %147 = icmp sgt i32 %146, 0
  %148 = select i1 %147, i32 %146, i32 0
  %149 = icmp slt i32 %148, 255
  %150 = select i1 %149, i32 %148, i32 255
  %151 = trunc i32 %150 to i8
  store i8 %151, i8* %143, align 1
  %152 = getelementptr inbounds i8, i8* %131, i64 %16
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = add nsw i32 %133, %154
  %156 = icmp sgt i32 %155, 0
  %157 = select i1 %156, i32 %155, i32 0
  %158 = icmp slt i32 %157, 255
  %159 = select i1 %158, i32 %157, i32 255
  %160 = trunc i32 %159 to i8
  store i8 %160, i8* %152, align 1
  %161 = getelementptr inbounds i8, i8* %131, i64 %18
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = add nsw i32 %133, %163
  %165 = icmp sgt i32 %164, 0
  %166 = select i1 %165, i32 %164, i32 0
  %167 = icmp slt i32 %166, 255
  %168 = select i1 %167, i32 %166, i32 255
  %169 = trunc i32 %168 to i8
  store i8 %169, i8* %161, align 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @iadst4_c(i32* nocapture readonly, i32* nocapture) local_unnamed_addr #0 {
  %3 = load i32, i32* %0, align 4
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 2
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 3
  %9 = load i32, i32* %8, align 4
  %10 = or i32 %5, %3
  %11 = or i32 %10, %7
  %12 = or i32 %11, %9
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 16, i1 false)
  br label %57

16:                                               ; preds = %2
  %17 = mul nsw i32 %3, 5283
  %18 = sext i32 %17 to i64
  %19 = mul nsw i32 %3, 9929
  %20 = sext i32 %19 to i64
  %21 = mul nsw i32 %5, 13377
  %22 = sext i32 %21 to i64
  %23 = mul nsw i32 %7, 15212
  %24 = sext i32 %23 to i64
  %25 = mul nsw i32 %7, 5283
  %26 = sext i32 %25 to i64
  %27 = mul nsw i32 %9, 9929
  %28 = sext i32 %27 to i64
  %29 = mul nsw i32 %9, 15212
  %30 = sext i32 %29 to i64
  %31 = sub i32 %3, %7
  %32 = add nsw i32 %31, %9
  %33 = sext i32 %32 to i64
  %34 = add nsw i64 %24, %18
  %35 = add nsw i64 %34, %28
  %36 = sub nsw i64 %20, %26
  %37 = sub nsw i64 %36, %30
  %38 = mul nsw i64 %33, 13377
  %39 = add nsw i64 %22, 8192
  %40 = add nsw i64 %39, %35
  %41 = lshr i64 %40, 14
  %42 = trunc i64 %41 to i32
  store i32 %42, i32* %1, align 4
  %43 = add nsw i64 %39, %37
  %44 = lshr i64 %43, 14
  %45 = trunc i64 %44 to i32
  %46 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %45, i32* %46, align 4
  %47 = add nsw i64 %38, 8192
  %48 = lshr i64 %47, 14
  %49 = trunc i64 %48 to i32
  %50 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %49, i32* %50, align 4
  %51 = sub nsw i64 8192, %22
  %52 = add nsw i64 %51, %37
  %53 = add nsw i64 %52, %35
  %54 = lshr i64 %53, 14
  %55 = trunc i64 %54 to i32
  %56 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %55, i32* %56, align 4
  br label %57

57:                                               ; preds = %16, %14
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @idct4_c(i32* nocapture readonly, i32* nocapture) local_unnamed_addr #2 {
  %3 = load i32, i32* %0, align 4
  %4 = shl i32 %3, 16
  %5 = ashr exact i32 %4, 16
  %6 = getelementptr inbounds i32, i32* %0, i64 2
  %7 = load i32, i32* %6, align 4
  %8 = shl i32 %7, 16
  %9 = ashr exact i32 %8, 16
  %10 = add nsw i32 %9, %5
  %11 = sub nsw i32 %5, %9
  %12 = getelementptr inbounds i32, i32* %0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = shl i32 %13, 16
  %15 = ashr exact i32 %14, 16
  %16 = mul nsw i32 %15, 6270
  %17 = getelementptr inbounds i32, i32* %0, i64 3
  %18 = load i32, i32* %17, align 4
  %19 = shl i32 %18, 16
  %20 = ashr exact i32 %19, 16
  %21 = mul nsw i32 %20, -15137
  %22 = add nsw i32 %21, %16
  %23 = mul nsw i32 %15, 15137
  %24 = mul nsw i32 %20, 6270
  %25 = add nsw i32 %24, %23
  %26 = mul i32 %10, 46340
  %27 = add i32 %26, 32768
  %28 = ashr i32 %27, 16
  %29 = shl i32 %25, 2
  %30 = add i32 %29, 32768
  %31 = ashr i32 %30, 16
  %32 = add nsw i32 %31, %28
  store i32 %32, i32* %1, align 4
  %33 = mul i32 %11, 46340
  %34 = add i32 %33, 32768
  %35 = ashr i32 %34, 16
  %36 = shl i32 %22, 2
  %37 = add i32 %36, 32768
  %38 = ashr i32 %37, 16
  %39 = add nsw i32 %38, %35
  %40 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %39, i32* %40, align 4
  %41 = sub nsw i32 %35, %38
  %42 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %41, i32* %42, align 4
  %43 = sub nsw i32 %28, %31
  %44 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %43, i32* %44, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_idct4x4_16_add_c(i32* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = alloca [16 x i32], align 16
  %5 = bitcast [16 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 64, i1 false)
  %6 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  br label %11

7:                                                ; preds = %11
  %8 = sext i32 %2 to i64
  %9 = shl nsw i64 %8, 1
  %10 = mul nsw i64 %8, 3
  br label %61

11:                                               ; preds = %11, %3
  %12 = phi i32* [ %6, %3 ], [ %58, %11 ]
  %13 = phi i32 [ 0, %3 ], [ %59, %11 ]
  %14 = phi i32* [ %0, %3 ], [ %57, %11 ]
  %15 = load i32, i32* %14, align 4
  %16 = shl i32 %15, 16
  %17 = ashr exact i32 %16, 16
  %18 = getelementptr inbounds i32, i32* %14, i64 2
  %19 = load i32, i32* %18, align 4
  %20 = shl i32 %19, 16
  %21 = ashr exact i32 %20, 16
  %22 = add nsw i32 %21, %17
  %23 = sub nsw i32 %17, %21
  %24 = getelementptr inbounds i32, i32* %14, i64 1
  %25 = load i32, i32* %24, align 4
  %26 = shl i32 %25, 16
  %27 = ashr exact i32 %26, 16
  %28 = mul nsw i32 %27, 6270
  %29 = getelementptr inbounds i32, i32* %14, i64 3
  %30 = load i32, i32* %29, align 4
  %31 = shl i32 %30, 16
  %32 = ashr exact i32 %31, 16
  %33 = mul nsw i32 %32, -15137
  %34 = add nsw i32 %33, %28
  %35 = mul nsw i32 %27, 15137
  %36 = mul nsw i32 %32, 6270
  %37 = add nsw i32 %36, %35
  %38 = mul i32 %22, 46340
  %39 = add i32 %38, 32768
  %40 = ashr i32 %39, 16
  %41 = shl i32 %37, 2
  %42 = add i32 %41, 32768
  %43 = ashr i32 %42, 16
  %44 = add nsw i32 %43, %40
  store i32 %44, i32* %12, align 4
  %45 = mul i32 %23, 46340
  %46 = add i32 %45, 32768
  %47 = ashr i32 %46, 16
  %48 = shl i32 %34, 2
  %49 = add i32 %48, 32768
  %50 = ashr i32 %49, 16
  %51 = add nsw i32 %50, %47
  %52 = getelementptr inbounds i32, i32* %12, i64 1
  store i32 %51, i32* %52, align 4
  %53 = sub nsw i32 %47, %50
  %54 = getelementptr inbounds i32, i32* %12, i64 2
  store i32 %53, i32* %54, align 4
  %55 = sub nsw i32 %40, %43
  %56 = getelementptr inbounds i32, i32* %12, i64 3
  store i32 %55, i32* %56, align 4
  %57 = getelementptr inbounds i32, i32* %14, i64 4
  %58 = getelementptr inbounds i32, i32* %12, i64 4
  %59 = add nuw nsw i32 %13, 1
  %60 = icmp eq i32 %59, 4
  br i1 %60, label %7, label %11

61:                                               ; preds = %61, %7
  %62 = phi i64 [ 0, %7 ], [ %153, %61 ]
  %63 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = add nuw nsw i64 %62, 4
  %66 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = add nuw nsw i64 %62, 8
  %69 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = add nuw nsw i64 %62, 12
  %72 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = shl i32 %64, 16
  %75 = ashr exact i32 %74, 16
  %76 = shl i32 %70, 16
  %77 = ashr exact i32 %76, 16
  %78 = add nsw i32 %77, %75
  %79 = sub nsw i32 %75, %77
  %80 = shl i32 %67, 16
  %81 = ashr exact i32 %80, 16
  %82 = mul nsw i32 %81, 6270
  %83 = shl i32 %73, 16
  %84 = ashr exact i32 %83, 16
  %85 = mul nsw i32 %84, -15137
  %86 = add nsw i32 %85, %82
  %87 = mul nsw i32 %81, 15137
  %88 = mul nsw i32 %84, 6270
  %89 = add nsw i32 %88, %87
  %90 = mul i32 %78, 46340
  %91 = add i32 %90, 32768
  %92 = ashr i32 %91, 16
  %93 = shl i32 %89, 2
  %94 = add i32 %93, 32768
  %95 = ashr i32 %94, 16
  %96 = add nsw i32 %95, %92
  %97 = mul i32 %79, 46340
  %98 = add i32 %97, 32768
  %99 = ashr i32 %98, 16
  %100 = shl i32 %86, 2
  %101 = add i32 %100, 32768
  %102 = ashr i32 %101, 16
  %103 = add nsw i32 %102, %99
  %104 = sub nsw i32 %99, %102
  %105 = sub nsw i32 %92, %95
  %106 = getelementptr inbounds i8, i8* %1, i64 %62
  %107 = load i8, i8* %106, align 1
  %108 = add nsw i32 %96, 8
  %109 = ashr i32 %108, 4
  %110 = zext i8 %107 to i32
  %111 = add nsw i32 %109, %110
  %112 = icmp sgt i32 %111, 0
  %113 = select i1 %112, i32 %111, i32 0
  %114 = icmp slt i32 %113, 255
  %115 = select i1 %114, i32 %113, i32 255
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %106, align 1
  %117 = add nsw i64 %62, %8
  %118 = getelementptr inbounds i8, i8* %1, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = add nsw i32 %103, 8
  %121 = ashr i32 %120, 4
  %122 = zext i8 %119 to i32
  %123 = add nsw i32 %121, %122
  %124 = icmp sgt i32 %123, 0
  %125 = select i1 %124, i32 %123, i32 0
  %126 = icmp slt i32 %125, 255
  %127 = select i1 %126, i32 %125, i32 255
  %128 = trunc i32 %127 to i8
  store i8 %128, i8* %118, align 1
  %129 = add nsw i64 %9, %62
  %130 = getelementptr inbounds i8, i8* %1, i64 %129
  %131 = load i8, i8* %130, align 1
  %132 = add nsw i32 %104, 8
  %133 = ashr i32 %132, 4
  %134 = zext i8 %131 to i32
  %135 = add nsw i32 %133, %134
  %136 = icmp sgt i32 %135, 0
  %137 = select i1 %136, i32 %135, i32 0
  %138 = icmp slt i32 %137, 255
  %139 = select i1 %138, i32 %137, i32 255
  %140 = trunc i32 %139 to i8
  store i8 %140, i8* %130, align 1
  %141 = add nsw i64 %10, %62
  %142 = getelementptr inbounds i8, i8* %1, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = add nsw i32 %105, 8
  %145 = ashr i32 %144, 4
  %146 = zext i8 %143 to i32
  %147 = add nsw i32 %145, %146
  %148 = icmp sgt i32 %147, 0
  %149 = select i1 %148, i32 %147, i32 0
  %150 = icmp slt i32 %149, 255
  %151 = select i1 %150, i32 %149, i32 255
  %152 = trunc i32 %151 to i8
  store i8 %152, i8* %142, align 1
  %153 = add nuw nsw i64 %62, 1
  %154 = icmp eq i64 %153, 4
  br i1 %154, label %155, label %61

155:                                              ; preds = %61
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_idct4x4_1_add_c(i32* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #2 {
  %4 = load i32, i32* %0, align 4
  %5 = shl i32 %4, 16
  %6 = ashr exact i32 %5, 16
  %7 = mul nsw i32 %6, 11585
  %8 = add nsw i32 %7, 8192
  %9 = ashr i32 %8, 14
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %10, 49757196124160
  %12 = ashr exact i64 %11, 32
  %13 = add nsw i64 %12, 8192
  %14 = ashr i64 %13, 14
  %15 = trunc i64 %14 to i32
  %16 = add nsw i32 %15, 8
  %17 = ashr i32 %16, 4
  %18 = sext i32 %2 to i64
  %19 = load i8, i8* %1, align 1
  %20 = zext i8 %19 to i32
  %21 = add nsw i32 %17, %20
  %22 = icmp sgt i32 %21, 0
  %23 = select i1 %22, i32 %21, i32 0
  %24 = icmp slt i32 %23, 255
  %25 = select i1 %24, i32 %23, i32 255
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %1, align 1
  %27 = getelementptr inbounds i8, i8* %1, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = add nsw i32 %17, %29
  %31 = icmp sgt i32 %30, 0
  %32 = select i1 %31, i32 %30, i32 0
  %33 = icmp slt i32 %32, 255
  %34 = select i1 %33, i32 %32, i32 255
  %35 = trunc i32 %34 to i8
  store i8 %35, i8* %27, align 1
  %36 = getelementptr inbounds i8, i8* %1, i64 2
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = add nsw i32 %17, %38
  %40 = icmp sgt i32 %39, 0
  %41 = select i1 %40, i32 %39, i32 0
  %42 = icmp slt i32 %41, 255
  %43 = select i1 %42, i32 %41, i32 255
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %36, align 1
  %45 = getelementptr inbounds i8, i8* %1, i64 3
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = add nsw i32 %17, %47
  %49 = icmp sgt i32 %48, 0
  %50 = select i1 %49, i32 %48, i32 0
  %51 = icmp slt i32 %50, 255
  %52 = select i1 %51, i32 %50, i32 255
  %53 = trunc i32 %52 to i8
  store i8 %53, i8* %45, align 1
  %54 = getelementptr inbounds i8, i8* %1, i64 %18
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = add nsw i32 %17, %56
  %58 = icmp sgt i32 %57, 0
  %59 = select i1 %58, i32 %57, i32 0
  %60 = icmp slt i32 %59, 255
  %61 = select i1 %60, i32 %59, i32 255
  %62 = trunc i32 %61 to i8
  store i8 %62, i8* %54, align 1
  %63 = getelementptr inbounds i8, i8* %54, i64 1
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = add nsw i32 %17, %65
  %67 = icmp sgt i32 %66, 0
  %68 = select i1 %67, i32 %66, i32 0
  %69 = icmp slt i32 %68, 255
  %70 = select i1 %69, i32 %68, i32 255
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %63, align 1
  %72 = getelementptr inbounds i8, i8* %54, i64 2
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = add nsw i32 %17, %74
  %76 = icmp sgt i32 %75, 0
  %77 = select i1 %76, i32 %75, i32 0
  %78 = icmp slt i32 %77, 255
  %79 = select i1 %78, i32 %77, i32 255
  %80 = trunc i32 %79 to i8
  store i8 %80, i8* %72, align 1
  %81 = getelementptr inbounds i8, i8* %54, i64 3
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = add nsw i32 %17, %83
  %85 = icmp sgt i32 %84, 0
  %86 = select i1 %85, i32 %84, i32 0
  %87 = icmp slt i32 %86, 255
  %88 = select i1 %87, i32 %86, i32 255
  %89 = trunc i32 %88 to i8
  store i8 %89, i8* %81, align 1
  %90 = getelementptr inbounds i8, i8* %54, i64 %18
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = add nsw i32 %17, %92
  %94 = icmp sgt i32 %93, 0
  %95 = select i1 %94, i32 %93, i32 0
  %96 = icmp slt i32 %95, 255
  %97 = select i1 %96, i32 %95, i32 255
  %98 = trunc i32 %97 to i8
  store i8 %98, i8* %90, align 1
  %99 = getelementptr inbounds i8, i8* %90, i64 1
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = add nsw i32 %17, %101
  %103 = icmp sgt i32 %102, 0
  %104 = select i1 %103, i32 %102, i32 0
  %105 = icmp slt i32 %104, 255
  %106 = select i1 %105, i32 %104, i32 255
  %107 = trunc i32 %106 to i8
  store i8 %107, i8* %99, align 1
  %108 = getelementptr inbounds i8, i8* %90, i64 2
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = add nsw i32 %17, %110
  %112 = icmp sgt i32 %111, 0
  %113 = select i1 %112, i32 %111, i32 0
  %114 = icmp slt i32 %113, 255
  %115 = select i1 %114, i32 %113, i32 255
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %108, align 1
  %117 = getelementptr inbounds i8, i8* %90, i64 3
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = add nsw i32 %17, %119
  %121 = icmp sgt i32 %120, 0
  %122 = select i1 %121, i32 %120, i32 0
  %123 = icmp slt i32 %122, 255
  %124 = select i1 %123, i32 %122, i32 255
  %125 = trunc i32 %124 to i8
  store i8 %125, i8* %117, align 1
  %126 = getelementptr inbounds i8, i8* %90, i64 %18
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = add nsw i32 %17, %128
  %130 = icmp sgt i32 %129, 0
  %131 = select i1 %130, i32 %129, i32 0
  %132 = icmp slt i32 %131, 255
  %133 = select i1 %132, i32 %131, i32 255
  %134 = trunc i32 %133 to i8
  store i8 %134, i8* %126, align 1
  %135 = getelementptr inbounds i8, i8* %126, i64 1
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = add nsw i32 %17, %137
  %139 = icmp sgt i32 %138, 0
  %140 = select i1 %139, i32 %138, i32 0
  %141 = icmp slt i32 %140, 255
  %142 = select i1 %141, i32 %140, i32 255
  %143 = trunc i32 %142 to i8
  store i8 %143, i8* %135, align 1
  %144 = getelementptr inbounds i8, i8* %126, i64 2
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = add nsw i32 %17, %146
  %148 = icmp sgt i32 %147, 0
  %149 = select i1 %148, i32 %147, i32 0
  %150 = icmp slt i32 %149, 255
  %151 = select i1 %150, i32 %149, i32 255
  %152 = trunc i32 %151 to i8
  store i8 %152, i8* %144, align 1
  %153 = getelementptr inbounds i8, i8* %126, i64 3
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = add nsw i32 %17, %155
  %157 = icmp sgt i32 %156, 0
  %158 = select i1 %157, i32 %156, i32 0
  %159 = icmp slt i32 %158, 255
  %160 = select i1 %159, i32 %158, i32 255
  %161 = trunc i32 %160 to i8
  store i8 %161, i8* %153, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @iadst8_c(i32* nocapture readonly, i32* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds i32, i32* %0, i64 7
  %4 = load i32, i32* %3, align 4
  %5 = load i32, i32* %0, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 5
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 3
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 4
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 6
  %17 = load i32, i32* %16, align 4
  %18 = or i32 %5, %4
  %19 = or i32 %18, %7
  %20 = or i32 %19, %9
  %21 = or i32 %20, %11
  %22 = or i32 %21, %13
  %23 = or i32 %22, %15
  %24 = or i32 %23, %17
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %2
  %27 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %27, i8 0, i64 32, i1 false)
  br label %160

28:                                               ; preds = %2
  %29 = mul i32 %4, 16305
  %30 = mul i32 %5, 1606
  %31 = add i32 %30, %29
  %32 = mul i32 %4, 1606
  %33 = mul i32 %5, -16305
  %34 = add i32 %33, %32
  %35 = mul i32 %7, 14449
  %36 = mul i32 %9, 7723
  %37 = add i32 %36, %35
  %38 = mul i32 %7, 7723
  %39 = mul i32 %9, -14449
  %40 = add i32 %39, %38
  %41 = mul i32 %11, 10394
  %42 = mul i32 %13, 12665
  %43 = add i32 %42, %41
  %44 = mul i32 %11, 12665
  %45 = mul i32 %13, -10394
  %46 = add i32 %45, %44
  %47 = mul i32 %15, 4756
  %48 = mul i32 %17, 15679
  %49 = add i32 %48, %47
  %50 = mul i32 %15, 15679
  %51 = mul i32 %17, -4756
  %52 = add i32 %51, %50
  %53 = add nsw i32 %43, %31
  %54 = sext i32 %53 to i64
  %55 = add nsw i64 %54, 8192
  %56 = ashr i64 %55, 14
  %57 = add nsw i32 %46, %34
  %58 = sext i32 %57 to i64
  %59 = add nsw i64 %58, 8192
  %60 = ashr i64 %59, 14
  %61 = add nsw i32 %49, %37
  %62 = sext i32 %61 to i64
  %63 = add nsw i64 %62, 8192
  %64 = ashr i64 %63, 14
  %65 = add nsw i32 %52, %40
  %66 = sext i32 %65 to i64
  %67 = add nsw i64 %66, 8192
  %68 = ashr i64 %67, 14
  %69 = sub nsw i32 %31, %43
  %70 = sext i32 %69 to i64
  %71 = add nsw i64 %70, 8192
  %72 = ashr i64 %71, 14
  %73 = sub nsw i32 %34, %46
  %74 = sext i32 %73 to i64
  %75 = add nsw i64 %74, 8192
  %76 = ashr i64 %75, 14
  %77 = sub nsw i32 %37, %49
  %78 = sext i32 %77 to i64
  %79 = add nsw i64 %78, 8192
  %80 = ashr i64 %79, 14
  %81 = sub nsw i32 %40, %52
  %82 = sext i32 %81 to i64
  %83 = add nsw i64 %82, 8192
  %84 = ashr i64 %83, 14
  %85 = mul nsw i64 %72, 15137
  %86 = mul nsw i64 %76, 6270
  %87 = add nsw i64 %85, %86
  %88 = mul nsw i64 %72, 6270
  %89 = mul nsw i64 %76, -15137
  %90 = add nsw i64 %88, %89
  %91 = mul nsw i64 %80, -6270
  %92 = mul nsw i64 %84, 15137
  %93 = add nsw i64 %91, %92
  %94 = mul nsw i64 %80, 15137
  %95 = mul nsw i64 %84, 6270
  %96 = add nsw i64 %94, %95
  %97 = add nsw i64 %64, %56
  %98 = add nsw i64 %68, %60
  %99 = sub nsw i64 %56, %64
  %100 = sub nsw i64 %60, %68
  %101 = add nsw i64 %93, %87
  %102 = shl i64 %101, 32
  %103 = ashr exact i64 %102, 32
  %104 = add nsw i64 %103, 8192
  %105 = ashr i64 %104, 14
  %106 = add nsw i64 %96, %90
  %107 = shl i64 %106, 32
  %108 = ashr exact i64 %107, 32
  %109 = add nsw i64 %108, 8192
  %110 = ashr i64 %109, 14
  %111 = sub nsw i64 %87, %93
  %112 = shl i64 %111, 32
  %113 = ashr exact i64 %112, 32
  %114 = add nsw i64 %113, 8192
  %115 = ashr i64 %114, 14
  %116 = sub nsw i64 %90, %96
  %117 = shl i64 %116, 32
  %118 = ashr exact i64 %117, 32
  %119 = add nsw i64 %118, 8192
  %120 = ashr i64 %119, 14
  %121 = add nsw i64 %99, %100
  %122 = sub nsw i64 %99, %100
  %123 = add nsw i64 %115, %120
  %124 = sub nsw i64 %115, %120
  %125 = mul i64 %121, 49757196124160
  %126 = ashr exact i64 %125, 32
  %127 = add nsw i64 %126, 8192
  %128 = ashr i64 %127, 14
  %129 = mul i64 %122, 49757196124160
  %130 = ashr exact i64 %129, 32
  %131 = add nsw i64 %130, 8192
  %132 = ashr i64 %131, 14
  %133 = mul i64 %123, 49757196124160
  %134 = ashr exact i64 %133, 32
  %135 = add nsw i64 %134, 8192
  %136 = ashr i64 %135, 14
  %137 = mul i64 %124, 49757196124160
  %138 = ashr exact i64 %137, 32
  %139 = add nsw i64 %138, 8192
  %140 = ashr i64 %139, 14
  %141 = trunc i64 %97 to i32
  store i32 %141, i32* %1, align 4
  %142 = trunc i64 %105 to i32
  %143 = sub nsw i32 0, %142
  %144 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %143, i32* %144, align 4
  %145 = trunc i64 %136 to i32
  %146 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %145, i32* %146, align 4
  %147 = trunc i64 %128 to i32
  %148 = sub nsw i32 0, %147
  %149 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %148, i32* %149, align 4
  %150 = trunc i64 %132 to i32
  %151 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %150, i32* %151, align 4
  %152 = trunc i64 %140 to i32
  %153 = sub nsw i32 0, %152
  %154 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %153, i32* %154, align 4
  %155 = trunc i64 %110 to i32
  %156 = getelementptr inbounds i32, i32* %1, i64 6
  store i32 %155, i32* %156, align 4
  %157 = trunc i64 %98 to i32
  %158 = sub nsw i32 0, %157
  %159 = getelementptr inbounds i32, i32* %1, i64 7
  store i32 %158, i32* %159, align 4
  br label %160

160:                                              ; preds = %28, %26
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @idct8_c(i32* nocapture readonly, i32* nocapture) local_unnamed_addr #2 {
  %3 = load i32, i32* %0, align 4
  %4 = getelementptr inbounds i32, i32* %0, i64 4
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 2
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 6
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = shl i32 %11, 16
  %13 = ashr exact i32 %12, 16
  %14 = mul nsw i32 %13, 3196
  %15 = getelementptr inbounds i32, i32* %0, i64 7
  %16 = load i32, i32* %15, align 4
  %17 = shl i32 %16, 16
  %18 = ashr exact i32 %17, 16
  %19 = mul nsw i32 %18, -16069
  %20 = add nsw i32 %19, %14
  %21 = mul nsw i32 %13, 16069
  %22 = mul nsw i32 %18, 3196
  %23 = add nsw i32 %22, %21
  %24 = getelementptr inbounds i32, i32* %0, i64 5
  %25 = load i32, i32* %24, align 4
  %26 = shl i32 %25, 16
  %27 = ashr exact i32 %26, 16
  %28 = mul nsw i32 %27, 13623
  %29 = getelementptr inbounds i32, i32* %0, i64 3
  %30 = load i32, i32* %29, align 4
  %31 = shl i32 %30, 16
  %32 = ashr exact i32 %31, 16
  %33 = mul nsw i32 %32, -9102
  %34 = add nsw i32 %33, %28
  %35 = mul nsw i32 %27, 9102
  %36 = mul nsw i32 %32, 13623
  %37 = add nsw i32 %36, %35
  %38 = shl i32 %3, 16
  %39 = ashr exact i32 %38, 16
  %40 = shl i32 %5, 16
  %41 = ashr exact i32 %40, 16
  %42 = add nsw i32 %41, %39
  %43 = sub nsw i32 %39, %41
  %44 = shl i32 %7, 16
  %45 = ashr exact i32 %44, 16
  %46 = mul nsw i32 %45, 6270
  %47 = shl i32 %9, 16
  %48 = ashr exact i32 %47, 16
  %49 = mul nsw i32 %48, -15137
  %50 = add nsw i32 %49, %46
  %51 = mul nsw i32 %45, 15137
  %52 = mul nsw i32 %48, 6270
  %53 = add nsw i32 %52, %51
  %54 = shl i32 %20, 2
  %55 = add i32 %54, 32768
  %56 = ashr i32 %55, 16
  %57 = shl i32 %34, 2
  %58 = add i32 %57, 32768
  %59 = ashr i32 %58, 16
  %60 = add nsw i32 %59, %56
  %61 = sub nsw i32 %56, %59
  %62 = shl i32 %37, 2
  %63 = add i32 %62, 32768
  %64 = ashr i32 %63, 16
  %65 = shl i32 %23, 2
  %66 = add i32 %65, 32768
  %67 = ashr i32 %66, 16
  %68 = sub nsw i32 %67, %64
  %69 = add nsw i32 %64, %67
  %70 = mul i32 %42, 46340
  %71 = add i32 %70, 32768
  %72 = ashr i32 %71, 16
  %73 = shl i32 %53, 2
  %74 = add i32 %73, 32768
  %75 = ashr i32 %74, 16
  %76 = add nsw i32 %75, %72
  %77 = mul i32 %43, 46340
  %78 = add i32 %77, 32768
  %79 = ashr i32 %78, 16
  %80 = shl i32 %50, 2
  %81 = add i32 %80, 32768
  %82 = ashr i32 %81, 16
  %83 = add nsw i32 %82, %79
  %84 = sub nsw i32 %79, %82
  %85 = sub nsw i32 %72, %75
  %86 = shl i32 %68, 16
  %87 = ashr exact i32 %86, 16
  %88 = shl i32 %61, 16
  %89 = ashr exact i32 %88, 16
  %90 = sub nsw i32 %87, %89
  %91 = add nsw i32 %89, %87
  %92 = shl i32 %76, 16
  %93 = ashr exact i32 %92, 16
  %94 = shl i32 %69, 16
  %95 = ashr exact i32 %94, 16
  %96 = add nsw i32 %95, %93
  store i32 %96, i32* %1, align 4
  %97 = shl i32 %83, 16
  %98 = ashr exact i32 %97, 16
  %99 = mul i32 %91, 46340
  %100 = add i32 %99, 32768
  %101 = ashr i32 %100, 16
  %102 = add nsw i32 %101, %98
  %103 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %102, i32* %103, align 4
  %104 = shl i32 %84, 16
  %105 = ashr exact i32 %104, 16
  %106 = mul i32 %90, 46340
  %107 = add i32 %106, 32768
  %108 = ashr i32 %107, 16
  %109 = add nsw i32 %108, %105
  %110 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %109, i32* %110, align 4
  %111 = shl i32 %85, 16
  %112 = ashr exact i32 %111, 16
  %113 = shl i32 %60, 16
  %114 = ashr exact i32 %113, 16
  %115 = add nsw i32 %114, %112
  %116 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %115, i32* %116, align 4
  %117 = sub nsw i32 %112, %114
  %118 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %117, i32* %118, align 4
  %119 = sub nsw i32 %105, %108
  %120 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %119, i32* %120, align 4
  %121 = sub nsw i32 %98, %101
  %122 = getelementptr inbounds i32, i32* %1, i64 6
  store i32 %121, i32* %122, align 4
  %123 = sub nsw i32 %93, %95
  %124 = getelementptr inbounds i32, i32* %1, i64 7
  store i32 %123, i32* %124, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_idct8x8_64_add_c(i32* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = alloca [64 x i32], align 16
  %5 = alloca [8 x i32], align 16
  %6 = alloca [8 x i32], align 16
  %7 = bitcast [64 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 256, i1 false)
  %8 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 0
  %9 = bitcast [8 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #3
  %10 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 0
  %11 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 1
  %12 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 2
  %13 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 3
  %14 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 4
  %15 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 5
  %16 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 6
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 7
  %18 = bitcast [8 x i32]* %6 to i8*
  %19 = bitcast [8 x i32]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #3
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 0
  %21 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 1
  %22 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 2
  %23 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 3
  %24 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 4
  %25 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 5
  %26 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 6
  %27 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 7
  %28 = bitcast [8 x i32]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -86, i64 32, i1 false)
  call void @idct8_c(i32* %0, i32* nonnull %8)
  %29 = getelementptr inbounds i32, i32* %0, i64 8
  %30 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 8
  call void @idct8_c(i32* %29, i32* %30)
  %31 = getelementptr inbounds i32, i32* %0, i64 16
  %32 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 16
  call void @idct8_c(i32* %31, i32* %32)
  %33 = getelementptr inbounds i32, i32* %0, i64 24
  %34 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 24
  call void @idct8_c(i32* %33, i32* %34)
  %35 = getelementptr inbounds i32, i32* %0, i64 32
  %36 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 32
  call void @idct8_c(i32* %35, i32* %36)
  %37 = getelementptr inbounds i32, i32* %0, i64 40
  %38 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 40
  call void @idct8_c(i32* %37, i32* %38)
  %39 = getelementptr inbounds i32, i32* %0, i64 48
  %40 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 48
  call void @idct8_c(i32* %39, i32* %40)
  %41 = getelementptr inbounds i32, i32* %0, i64 56
  %42 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 56
  call void @idct8_c(i32* %41, i32* %42)
  %43 = sext i32 %2 to i64
  %44 = shl nsw i64 %43, 1
  %45 = mul nsw i64 %43, 3
  %46 = shl nsw i64 %43, 2
  %47 = mul nsw i64 %43, 5
  %48 = mul nsw i64 %43, 6
  %49 = mul nsw i64 %43, 7
  br label %50

50:                                               ; preds = %50, %3
  %51 = phi i64 [ 0, %3 ], [ %178, %50 ]
  %52 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %51
  %53 = load i32, i32* %52, align 4
  store i32 %53, i32* %10, align 16
  %54 = add nuw nsw i64 %51, 8
  %55 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %54
  %56 = load i32, i32* %55, align 4
  store i32 %56, i32* %11, align 4
  %57 = add nuw nsw i64 %51, 16
  %58 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %57
  %59 = load i32, i32* %58, align 4
  store i32 %59, i32* %12, align 8
  %60 = add nuw nsw i64 %51, 24
  %61 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %60
  %62 = load i32, i32* %61, align 4
  store i32 %62, i32* %13, align 4
  %63 = add nuw nsw i64 %51, 32
  %64 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %63
  %65 = load i32, i32* %64, align 4
  store i32 %65, i32* %14, align 16
  %66 = add nuw nsw i64 %51, 40
  %67 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %66
  %68 = load i32, i32* %67, align 4
  store i32 %68, i32* %15, align 4
  %69 = add nuw nsw i64 %51, 48
  %70 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %69
  %71 = load i32, i32* %70, align 4
  store i32 %71, i32* %16, align 8
  %72 = add nuw nsw i64 %51, 56
  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %72
  %74 = load i32, i32* %73, align 4
  store i32 %74, i32* %17, align 4
  call void @idct8_c(i32* nonnull %10, i32* nonnull %20)
  %75 = getelementptr inbounds i8, i8* %1, i64 %51
  %76 = load i8, i8* %75, align 1
  %77 = load i32, i32* %20, align 16
  %78 = add nsw i32 %77, 16
  %79 = ashr i32 %78, 5
  %80 = zext i8 %76 to i32
  %81 = add nsw i32 %79, %80
  %82 = icmp sgt i32 %81, 0
  %83 = select i1 %82, i32 %81, i32 0
  %84 = icmp slt i32 %83, 255
  %85 = select i1 %84, i32 %83, i32 255
  %86 = trunc i32 %85 to i8
  store i8 %86, i8* %75, align 1
  %87 = add nsw i64 %51, %43
  %88 = getelementptr inbounds i8, i8* %1, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = load i32, i32* %21, align 4
  %91 = add nsw i32 %90, 16
  %92 = ashr i32 %91, 5
  %93 = zext i8 %89 to i32
  %94 = add nsw i32 %92, %93
  %95 = icmp sgt i32 %94, 0
  %96 = select i1 %95, i32 %94, i32 0
  %97 = icmp slt i32 %96, 255
  %98 = select i1 %97, i32 %96, i32 255
  %99 = trunc i32 %98 to i8
  store i8 %99, i8* %88, align 1
  %100 = add nsw i64 %44, %51
  %101 = getelementptr inbounds i8, i8* %1, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = load i32, i32* %22, align 8
  %104 = add nsw i32 %103, 16
  %105 = ashr i32 %104, 5
  %106 = zext i8 %102 to i32
  %107 = add nsw i32 %105, %106
  %108 = icmp sgt i32 %107, 0
  %109 = select i1 %108, i32 %107, i32 0
  %110 = icmp slt i32 %109, 255
  %111 = select i1 %110, i32 %109, i32 255
  %112 = trunc i32 %111 to i8
  store i8 %112, i8* %101, align 1
  %113 = add nsw i64 %45, %51
  %114 = getelementptr inbounds i8, i8* %1, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = load i32, i32* %23, align 4
  %117 = add nsw i32 %116, 16
  %118 = ashr i32 %117, 5
  %119 = zext i8 %115 to i32
  %120 = add nsw i32 %118, %119
  %121 = icmp sgt i32 %120, 0
  %122 = select i1 %121, i32 %120, i32 0
  %123 = icmp slt i32 %122, 255
  %124 = select i1 %123, i32 %122, i32 255
  %125 = trunc i32 %124 to i8
  store i8 %125, i8* %114, align 1
  %126 = add nsw i64 %46, %51
  %127 = getelementptr inbounds i8, i8* %1, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = load i32, i32* %24, align 16
  %130 = add nsw i32 %129, 16
  %131 = ashr i32 %130, 5
  %132 = zext i8 %128 to i32
  %133 = add nsw i32 %131, %132
  %134 = icmp sgt i32 %133, 0
  %135 = select i1 %134, i32 %133, i32 0
  %136 = icmp slt i32 %135, 255
  %137 = select i1 %136, i32 %135, i32 255
  %138 = trunc i32 %137 to i8
  store i8 %138, i8* %127, align 1
  %139 = add nsw i64 %47, %51
  %140 = getelementptr inbounds i8, i8* %1, i64 %139
  %141 = load i8, i8* %140, align 1
  %142 = load i32, i32* %25, align 4
  %143 = add nsw i32 %142, 16
  %144 = ashr i32 %143, 5
  %145 = zext i8 %141 to i32
  %146 = add nsw i32 %144, %145
  %147 = icmp sgt i32 %146, 0
  %148 = select i1 %147, i32 %146, i32 0
  %149 = icmp slt i32 %148, 255
  %150 = select i1 %149, i32 %148, i32 255
  %151 = trunc i32 %150 to i8
  store i8 %151, i8* %140, align 1
  %152 = add nsw i64 %48, %51
  %153 = getelementptr inbounds i8, i8* %1, i64 %152
  %154 = load i8, i8* %153, align 1
  %155 = load i32, i32* %26, align 8
  %156 = add nsw i32 %155, 16
  %157 = ashr i32 %156, 5
  %158 = zext i8 %154 to i32
  %159 = add nsw i32 %157, %158
  %160 = icmp sgt i32 %159, 0
  %161 = select i1 %160, i32 %159, i32 0
  %162 = icmp slt i32 %161, 255
  %163 = select i1 %162, i32 %161, i32 255
  %164 = trunc i32 %163 to i8
  store i8 %164, i8* %153, align 1
  %165 = add nsw i64 %49, %51
  %166 = getelementptr inbounds i8, i8* %1, i64 %165
  %167 = load i8, i8* %166, align 1
  %168 = load i32, i32* %27, align 4
  %169 = add nsw i32 %168, 16
  %170 = ashr i32 %169, 5
  %171 = zext i8 %167 to i32
  %172 = add nsw i32 %170, %171
  %173 = icmp sgt i32 %172, 0
  %174 = select i1 %173, i32 %172, i32 0
  %175 = icmp slt i32 %174, 255
  %176 = select i1 %175, i32 %174, i32 255
  %177 = trunc i32 %176 to i8
  store i8 %177, i8* %166, align 1
  %178 = add nuw nsw i64 %51, 1
  %179 = icmp eq i64 %178, 8
  br i1 %179, label %180, label %50

180:                                              ; preds = %50
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_idct8x8_12_add_c(i32* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = alloca [64 x i32], align 16
  %5 = alloca [8 x i32], align 16
  %6 = alloca [8 x i32], align 16
  %7 = bitcast [64 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 256, i1 false)
  %8 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 0
  %9 = bitcast [8 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #3
  %10 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 0
  %11 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 1
  %12 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 2
  %13 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 3
  %14 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 4
  %15 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 5
  %16 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 6
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 7
  %18 = bitcast [8 x i32]* %6 to i8*
  %19 = bitcast [8 x i32]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #3
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 0
  %21 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 1
  %22 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 2
  %23 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 3
  %24 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 4
  %25 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 5
  %26 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 6
  %27 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 7
  %28 = bitcast [8 x i32]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -86, i64 32, i1 false)
  call void @idct8_c(i32* %0, i32* nonnull %8)
  %29 = getelementptr inbounds i32, i32* %0, i64 8
  %30 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 8
  call void @idct8_c(i32* %29, i32* %30)
  %31 = getelementptr inbounds i32, i32* %0, i64 16
  %32 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 16
  call void @idct8_c(i32* %31, i32* %32)
  %33 = getelementptr inbounds i32, i32* %0, i64 24
  %34 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 24
  call void @idct8_c(i32* %33, i32* %34)
  %35 = sext i32 %2 to i64
  %36 = shl nsw i64 %35, 1
  %37 = mul nsw i64 %35, 3
  %38 = shl nsw i64 %35, 2
  %39 = mul nsw i64 %35, 5
  %40 = mul nsw i64 %35, 6
  %41 = mul nsw i64 %35, 7
  br label %42

42:                                               ; preds = %42, %3
  %43 = phi i64 [ 0, %3 ], [ %170, %42 ]
  %44 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %43
  %45 = load i32, i32* %44, align 4
  store i32 %45, i32* %10, align 16
  %46 = add nuw nsw i64 %43, 8
  %47 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %46
  %48 = load i32, i32* %47, align 4
  store i32 %48, i32* %11, align 4
  %49 = add nuw nsw i64 %43, 16
  %50 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %49
  %51 = load i32, i32* %50, align 4
  store i32 %51, i32* %12, align 8
  %52 = add nuw nsw i64 %43, 24
  %53 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4
  store i32 %54, i32* %13, align 4
  %55 = add nuw nsw i64 %43, 32
  %56 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %55
  %57 = load i32, i32* %56, align 4
  store i32 %57, i32* %14, align 16
  %58 = add nuw nsw i64 %43, 40
  %59 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %58
  %60 = load i32, i32* %59, align 4
  store i32 %60, i32* %15, align 4
  %61 = add nuw nsw i64 %43, 48
  %62 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %61
  %63 = load i32, i32* %62, align 4
  store i32 %63, i32* %16, align 8
  %64 = add nuw nsw i64 %43, 56
  %65 = getelementptr inbounds [64 x i32], [64 x i32]* %4, i64 0, i64 %64
  %66 = load i32, i32* %65, align 4
  store i32 %66, i32* %17, align 4
  call void @idct8_c(i32* nonnull %10, i32* nonnull %20)
  %67 = getelementptr inbounds i8, i8* %1, i64 %43
  %68 = load i8, i8* %67, align 1
  %69 = load i32, i32* %20, align 16
  %70 = add nsw i32 %69, 16
  %71 = ashr i32 %70, 5
  %72 = zext i8 %68 to i32
  %73 = add nsw i32 %71, %72
  %74 = icmp sgt i32 %73, 0
  %75 = select i1 %74, i32 %73, i32 0
  %76 = icmp slt i32 %75, 255
  %77 = select i1 %76, i32 %75, i32 255
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %67, align 1
  %79 = add nsw i64 %43, %35
  %80 = getelementptr inbounds i8, i8* %1, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = load i32, i32* %21, align 4
  %83 = add nsw i32 %82, 16
  %84 = ashr i32 %83, 5
  %85 = zext i8 %81 to i32
  %86 = add nsw i32 %84, %85
  %87 = icmp sgt i32 %86, 0
  %88 = select i1 %87, i32 %86, i32 0
  %89 = icmp slt i32 %88, 255
  %90 = select i1 %89, i32 %88, i32 255
  %91 = trunc i32 %90 to i8
  store i8 %91, i8* %80, align 1
  %92 = add nsw i64 %36, %43
  %93 = getelementptr inbounds i8, i8* %1, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = load i32, i32* %22, align 8
  %96 = add nsw i32 %95, 16
  %97 = ashr i32 %96, 5
  %98 = zext i8 %94 to i32
  %99 = add nsw i32 %97, %98
  %100 = icmp sgt i32 %99, 0
  %101 = select i1 %100, i32 %99, i32 0
  %102 = icmp slt i32 %101, 255
  %103 = select i1 %102, i32 %101, i32 255
  %104 = trunc i32 %103 to i8
  store i8 %104, i8* %93, align 1
  %105 = add nsw i64 %37, %43
  %106 = getelementptr inbounds i8, i8* %1, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = load i32, i32* %23, align 4
  %109 = add nsw i32 %108, 16
  %110 = ashr i32 %109, 5
  %111 = zext i8 %107 to i32
  %112 = add nsw i32 %110, %111
  %113 = icmp sgt i32 %112, 0
  %114 = select i1 %113, i32 %112, i32 0
  %115 = icmp slt i32 %114, 255
  %116 = select i1 %115, i32 %114, i32 255
  %117 = trunc i32 %116 to i8
  store i8 %117, i8* %106, align 1
  %118 = add nsw i64 %38, %43
  %119 = getelementptr inbounds i8, i8* %1, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = load i32, i32* %24, align 16
  %122 = add nsw i32 %121, 16
  %123 = ashr i32 %122, 5
  %124 = zext i8 %120 to i32
  %125 = add nsw i32 %123, %124
  %126 = icmp sgt i32 %125, 0
  %127 = select i1 %126, i32 %125, i32 0
  %128 = icmp slt i32 %127, 255
  %129 = select i1 %128, i32 %127, i32 255
  %130 = trunc i32 %129 to i8
  store i8 %130, i8* %119, align 1
  %131 = add nsw i64 %39, %43
  %132 = getelementptr inbounds i8, i8* %1, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = load i32, i32* %25, align 4
  %135 = add nsw i32 %134, 16
  %136 = ashr i32 %135, 5
  %137 = zext i8 %133 to i32
  %138 = add nsw i32 %136, %137
  %139 = icmp sgt i32 %138, 0
  %140 = select i1 %139, i32 %138, i32 0
  %141 = icmp slt i32 %140, 255
  %142 = select i1 %141, i32 %140, i32 255
  %143 = trunc i32 %142 to i8
  store i8 %143, i8* %132, align 1
  %144 = add nsw i64 %40, %43
  %145 = getelementptr inbounds i8, i8* %1, i64 %144
  %146 = load i8, i8* %145, align 1
  %147 = load i32, i32* %26, align 8
  %148 = add nsw i32 %147, 16
  %149 = ashr i32 %148, 5
  %150 = zext i8 %146 to i32
  %151 = add nsw i32 %149, %150
  %152 = icmp sgt i32 %151, 0
  %153 = select i1 %152, i32 %151, i32 0
  %154 = icmp slt i32 %153, 255
  %155 = select i1 %154, i32 %153, i32 255
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %145, align 1
  %157 = add nsw i64 %41, %43
  %158 = getelementptr inbounds i8, i8* %1, i64 %157
  %159 = load i8, i8* %158, align 1
  %160 = load i32, i32* %27, align 4
  %161 = add nsw i32 %160, 16
  %162 = ashr i32 %161, 5
  %163 = zext i8 %159 to i32
  %164 = add nsw i32 %162, %163
  %165 = icmp sgt i32 %164, 0
  %166 = select i1 %165, i32 %164, i32 0
  %167 = icmp slt i32 %166, 255
  %168 = select i1 %167, i32 %166, i32 255
  %169 = trunc i32 %168 to i8
  store i8 %169, i8* %158, align 1
  %170 = add nuw nsw i64 %43, 1
  %171 = icmp eq i64 %170, 8
  br i1 %171, label %172, label %42

172:                                              ; preds = %42
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_idct8x8_1_add_c(i32* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #2 {
  %4 = load i32, i32* %0, align 4
  %5 = shl i32 %4, 16
  %6 = ashr exact i32 %5, 16
  %7 = mul nsw i32 %6, 11585
  %8 = add nsw i32 %7, 8192
  %9 = ashr i32 %8, 14
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %10, 49757196124160
  %12 = ashr exact i64 %11, 32
  %13 = add nsw i64 %12, 8192
  %14 = lshr i64 %13, 14
  %15 = trunc i64 %14 to i32
  %16 = add nsw i32 %15, 16
  %17 = ashr i32 %16, 5
  %18 = sext i32 %2 to i64
  %19 = icmp eq i32 %2, 1
  br i1 %19, label %97, label %20

20:                                               ; preds = %3, %20
  %21 = phi i8* [ %94, %20 ], [ %1, %3 ]
  %22 = phi i32 [ %95, %20 ], [ 0, %3 ]
  %23 = load i8, i8* %21, align 1
  %24 = zext i8 %23 to i32
  %25 = add nsw i32 %17, %24
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = icmp slt i32 %27, 255
  %29 = select i1 %28, i32 %27, i32 255
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %21, align 1
  %31 = getelementptr inbounds i8, i8* %21, i64 1
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = add nsw i32 %17, %33
  %35 = icmp sgt i32 %34, 0
  %36 = select i1 %35, i32 %34, i32 0
  %37 = icmp slt i32 %36, 255
  %38 = select i1 %37, i32 %36, i32 255
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %31, align 1
  %40 = getelementptr inbounds i8, i8* %21, i64 2
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = add nsw i32 %17, %42
  %44 = icmp sgt i32 %43, 0
  %45 = select i1 %44, i32 %43, i32 0
  %46 = icmp slt i32 %45, 255
  %47 = select i1 %46, i32 %45, i32 255
  %48 = trunc i32 %47 to i8
  store i8 %48, i8* %40, align 1
  %49 = getelementptr inbounds i8, i8* %21, i64 3
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = add nsw i32 %17, %51
  %53 = icmp sgt i32 %52, 0
  %54 = select i1 %53, i32 %52, i32 0
  %55 = icmp slt i32 %54, 255
  %56 = select i1 %55, i32 %54, i32 255
  %57 = trunc i32 %56 to i8
  store i8 %57, i8* %49, align 1
  %58 = getelementptr inbounds i8, i8* %21, i64 4
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = add nsw i32 %17, %60
  %62 = icmp sgt i32 %61, 0
  %63 = select i1 %62, i32 %61, i32 0
  %64 = icmp slt i32 %63, 255
  %65 = select i1 %64, i32 %63, i32 255
  %66 = trunc i32 %65 to i8
  store i8 %66, i8* %58, align 1
  %67 = getelementptr inbounds i8, i8* %21, i64 5
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = add nsw i32 %17, %69
  %71 = icmp sgt i32 %70, 0
  %72 = select i1 %71, i32 %70, i32 0
  %73 = icmp slt i32 %72, 255
  %74 = select i1 %73, i32 %72, i32 255
  %75 = trunc i32 %74 to i8
  store i8 %75, i8* %67, align 1
  %76 = getelementptr inbounds i8, i8* %21, i64 6
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = add nsw i32 %17, %78
  %80 = icmp sgt i32 %79, 0
  %81 = select i1 %80, i32 %79, i32 0
  %82 = icmp slt i32 %81, 255
  %83 = select i1 %82, i32 %81, i32 255
  %84 = trunc i32 %83 to i8
  store i8 %84, i8* %76, align 1
  %85 = getelementptr inbounds i8, i8* %21, i64 7
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = add nsw i32 %17, %87
  %89 = icmp sgt i32 %88, 0
  %90 = select i1 %89, i32 %88, i32 0
  %91 = icmp slt i32 %90, 255
  %92 = select i1 %91, i32 %90, i32 255
  %93 = trunc i32 %92 to i8
  store i8 %93, i8* %85, align 1
  %94 = getelementptr inbounds i8, i8* %21, i64 %18
  %95 = add nuw nsw i32 %22, 1
  %96 = icmp eq i32 %95, 8
  br i1 %96, label %177, label %20

97:                                               ; preds = %3
  %98 = getelementptr i8, i8* %1, i64 6
  %99 = load i8, i8* %98, align 1
  br label %100

100:                                              ; preds = %100, %97
  %101 = phi i8 [ %99, %97 ], [ %173, %100 ]
  %102 = phi i8* [ %1, %97 ], [ %174, %100 ]
  %103 = phi i32 [ 0, %97 ], [ %175, %100 ]
  %104 = load i8, i8* %102, align 1
  %105 = zext i8 %104 to i32
  %106 = add nsw i32 %17, %105
  %107 = icmp sgt i32 %106, 0
  %108 = select i1 %107, i32 %106, i32 0
  %109 = icmp slt i32 %108, 255
  %110 = select i1 %109, i32 %108, i32 255
  %111 = trunc i32 %110 to i8
  store i8 %111, i8* %102, align 1
  %112 = getelementptr inbounds i8, i8* %102, i64 1
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = add nsw i32 %17, %114
  %116 = icmp sgt i32 %115, 0
  %117 = select i1 %116, i32 %115, i32 0
  %118 = icmp slt i32 %117, 255
  %119 = select i1 %118, i32 %117, i32 255
  %120 = trunc i32 %119 to i8
  store i8 %120, i8* %112, align 1
  %121 = getelementptr inbounds i8, i8* %102, i64 2
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = add nsw i32 %17, %123
  %125 = icmp sgt i32 %124, 0
  %126 = select i1 %125, i32 %124, i32 0
  %127 = icmp slt i32 %126, 255
  %128 = select i1 %127, i32 %126, i32 255
  %129 = trunc i32 %128 to i8
  store i8 %129, i8* %121, align 1
  %130 = getelementptr inbounds i8, i8* %102, i64 3
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = add nsw i32 %17, %132
  %134 = icmp sgt i32 %133, 0
  %135 = select i1 %134, i32 %133, i32 0
  %136 = icmp slt i32 %135, 255
  %137 = select i1 %136, i32 %135, i32 255
  %138 = trunc i32 %137 to i8
  store i8 %138, i8* %130, align 1
  %139 = getelementptr inbounds i8, i8* %102, i64 4
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = add nsw i32 %17, %141
  %143 = icmp sgt i32 %142, 0
  %144 = select i1 %143, i32 %142, i32 0
  %145 = icmp slt i32 %144, 255
  %146 = select i1 %145, i32 %144, i32 255
  %147 = trunc i32 %146 to i8
  store i8 %147, i8* %139, align 1
  %148 = getelementptr inbounds i8, i8* %102, i64 5
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = add nsw i32 %17, %150
  %152 = icmp sgt i32 %151, 0
  %153 = select i1 %152, i32 %151, i32 0
  %154 = icmp slt i32 %153, 255
  %155 = select i1 %154, i32 %153, i32 255
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %148, align 1
  %157 = getelementptr inbounds i8, i8* %102, i64 6
  %158 = zext i8 %101 to i32
  %159 = add nsw i32 %17, %158
  %160 = icmp sgt i32 %159, 0
  %161 = select i1 %160, i32 %159, i32 0
  %162 = icmp slt i32 %161, 255
  %163 = select i1 %162, i32 %161, i32 255
  %164 = trunc i32 %163 to i8
  store i8 %164, i8* %157, align 1
  %165 = getelementptr inbounds i8, i8* %102, i64 7
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = add nsw i32 %17, %167
  %169 = icmp sgt i32 %168, 0
  %170 = select i1 %169, i32 %168, i32 0
  %171 = icmp slt i32 %170, 255
  %172 = select i1 %171, i32 %170, i32 255
  %173 = trunc i32 %172 to i8
  store i8 %173, i8* %165, align 1
  %174 = getelementptr inbounds i8, i8* %102, i64 %18
  %175 = add nuw nsw i32 %103, 1
  %176 = icmp eq i32 %175, 8
  br i1 %176, label %177, label %100

177:                                              ; preds = %20, %100
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @iadst16_c(i32* nocapture readonly, i32* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds i32, i32* %0, i64 15
  %4 = load i32, i32* %3, align 4
  %5 = sext i32 %4 to i64
  %6 = load i32, i32* %0, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds i32, i32* %0, i64 13
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i32, i32* %0, i64 11
  %15 = load i32, i32* %14, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i32, i32* %0, i64 4
  %18 = load i32, i32* %17, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i32, i32* %0, i64 9
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, i32* %0, i64 6
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i32, i32* %0, i64 7
  %27 = load i32, i32* %26, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i32, i32* %0, i64 8
  %30 = load i32, i32* %29, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i32, i32* %0, i64 5
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i32, i32* %0, i64 10
  %36 = load i32, i32* %35, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i32, i32* %0, i64 3
  %39 = load i32, i32* %38, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i32, i32* %0, i64 12
  %42 = load i32, i32* %41, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i32, i32* %0, i64 1
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i32, i32* %0, i64 14
  %48 = load i32, i32* %47, align 4
  %49 = sext i32 %48 to i64
  %50 = or i32 %6, %4
  %51 = or i32 %50, %9
  %52 = or i32 %51, %12
  %53 = or i32 %52, %15
  %54 = or i32 %53, %18
  %55 = or i32 %54, %21
  %56 = or i32 %55, %24
  %57 = or i32 %56, %27
  %58 = or i32 %57, %30
  %59 = or i32 %58, %33
  %60 = or i32 %59, %36
  %61 = or i32 %60, %39
  %62 = or i32 %61, %42
  %63 = or i32 %62, %45
  %64 = or i32 %63, %48
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %68

66:                                               ; preds = %2
  %67 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %67, i8 0, i64 64, i1 false)
  br label %408

68:                                               ; preds = %2
  %69 = mul nsw i64 %5, 16364
  %70 = mul nsw i64 %7, 804
  %71 = add nsw i64 %70, %69
  %72 = mul nsw i64 %5, 804
  %73 = mul nsw i64 %7, -16364
  %74 = add nsw i64 %73, %72
  %75 = mul nsw i64 %10, 15893
  %76 = mul nsw i64 %13, 3981
  %77 = add nsw i64 %76, %75
  %78 = mul nsw i64 %10, 3981
  %79 = mul nsw i64 %13, -15893
  %80 = add nsw i64 %79, %78
  %81 = mul nsw i64 %16, 14811
  %82 = mul nsw i64 %19, 7005
  %83 = add nsw i64 %82, %81
  %84 = mul nsw i64 %16, 7005
  %85 = mul nsw i64 %19, -14811
  %86 = add nsw i64 %85, %84
  %87 = mul nsw i64 %22, 13160
  %88 = mul nsw i64 %25, 9760
  %89 = add nsw i64 %88, %87
  %90 = mul nsw i64 %22, 9760
  %91 = mul nsw i64 %25, -13160
  %92 = add nsw i64 %91, %90
  %93 = mul nsw i64 %28, 11003
  %94 = mul nsw i64 %31, 12140
  %95 = add nsw i64 %94, %93
  %96 = mul nsw i64 %28, 12140
  %97 = mul nsw i64 %31, -11003
  %98 = add nsw i64 %97, %96
  %99 = mul nsw i64 %34, 8423
  %100 = mul nsw i64 %37, 14053
  %101 = add nsw i64 %100, %99
  %102 = mul nsw i64 %34, 14053
  %103 = mul nsw i64 %37, -8423
  %104 = add nsw i64 %103, %102
  %105 = mul nsw i64 %40, 5520
  %106 = mul nsw i64 %43, 15426
  %107 = add nsw i64 %106, %105
  %108 = mul nsw i64 %40, 15426
  %109 = mul nsw i64 %43, -5520
  %110 = add nsw i64 %109, %108
  %111 = mul nsw i64 %46, 2404
  %112 = mul nsw i64 %49, 16207
  %113 = add nsw i64 %112, %111
  %114 = mul nsw i64 %46, 16207
  %115 = mul nsw i64 %49, -2404
  %116 = add nsw i64 %115, %114
  %117 = add nsw i64 %71, 8192
  %118 = add nsw i64 %117, %95
  %119 = lshr i64 %118, 14
  %120 = shl i64 %119, 32
  %121 = ashr exact i64 %120, 32
  %122 = add nsw i64 %74, 8192
  %123 = add nsw i64 %122, %98
  %124 = lshr i64 %123, 14
  %125 = shl i64 %124, 32
  %126 = ashr exact i64 %125, 32
  %127 = add nsw i64 %77, 8192
  %128 = add nsw i64 %127, %101
  %129 = lshr i64 %128, 14
  %130 = shl i64 %129, 32
  %131 = ashr exact i64 %130, 32
  %132 = add nsw i64 %80, 8192
  %133 = add nsw i64 %132, %104
  %134 = lshr i64 %133, 14
  %135 = shl i64 %134, 32
  %136 = ashr exact i64 %135, 32
  %137 = add nsw i64 %83, 8192
  %138 = add nsw i64 %137, %107
  %139 = lshr i64 %138, 14
  %140 = shl i64 %139, 32
  %141 = ashr exact i64 %140, 32
  %142 = add nsw i64 %86, 8192
  %143 = add nsw i64 %142, %110
  %144 = lshr i64 %143, 14
  %145 = shl i64 %144, 32
  %146 = ashr exact i64 %145, 32
  %147 = add nsw i64 %89, 8192
  %148 = add nsw i64 %147, %113
  %149 = lshr i64 %148, 14
  %150 = shl i64 %149, 32
  %151 = ashr exact i64 %150, 32
  %152 = add nsw i64 %92, 8192
  %153 = add nsw i64 %152, %116
  %154 = lshr i64 %153, 14
  %155 = shl i64 %154, 32
  %156 = ashr exact i64 %155, 32
  %157 = sub nsw i64 %117, %95
  %158 = lshr i64 %157, 14
  %159 = shl i64 %158, 32
  %160 = ashr exact i64 %159, 32
  %161 = sub nsw i64 %122, %98
  %162 = lshr i64 %161, 14
  %163 = shl i64 %162, 32
  %164 = ashr exact i64 %163, 32
  %165 = sub nsw i64 %127, %101
  %166 = lshr i64 %165, 14
  %167 = shl i64 %166, 32
  %168 = ashr exact i64 %167, 32
  %169 = sub nsw i64 %132, %104
  %170 = lshr i64 %169, 14
  %171 = shl i64 %170, 32
  %172 = ashr exact i64 %171, 32
  %173 = sub nsw i64 %137, %107
  %174 = lshr i64 %173, 14
  %175 = shl i64 %174, 32
  %176 = ashr exact i64 %175, 32
  %177 = sub nsw i64 %142, %110
  %178 = lshr i64 %177, 14
  %179 = shl i64 %178, 32
  %180 = ashr exact i64 %179, 32
  %181 = sub nsw i64 %147, %113
  %182 = lshr i64 %181, 14
  %183 = shl i64 %182, 32
  %184 = ashr exact i64 %183, 32
  %185 = sub nsw i64 %152, %116
  %186 = lshr i64 %185, 14
  %187 = shl i64 %186, 32
  %188 = ashr exact i64 %187, 32
  %189 = mul nsw i64 %160, 16069
  %190 = mul nsw i64 %164, 3196
  %191 = add nsw i64 %189, %190
  %192 = mul nsw i64 %160, 3196
  %193 = mul nsw i64 %164, -16069
  %194 = add nsw i64 %192, %193
  %195 = mul nsw i64 %168, 9102
  %196 = mul nsw i64 %172, 13623
  %197 = add nsw i64 %195, %196
  %198 = mul nsw i64 %168, 13623
  %199 = mul nsw i64 %172, -9102
  %200 = add nsw i64 %198, %199
  %201 = mul nsw i64 %176, -3196
  %202 = mul nsw i64 %180, 16069
  %203 = add nsw i64 %201, %202
  %204 = mul nsw i64 %176, 16069
  %205 = mul nsw i64 %180, 3196
  %206 = add nsw i64 %204, %205
  %207 = mul nsw i64 %184, -13623
  %208 = mul nsw i64 %188, 9102
  %209 = add nsw i64 %207, %208
  %210 = mul nsw i64 %184, 9102
  %211 = mul nsw i64 %188, 13623
  %212 = add nsw i64 %210, %211
  %213 = add nsw i64 %141, %121
  %214 = shl i64 %213, 32
  %215 = ashr exact i64 %214, 32
  %216 = add nsw i64 %146, %126
  %217 = shl i64 %216, 32
  %218 = ashr exact i64 %217, 32
  %219 = add nsw i64 %151, %131
  %220 = shl i64 %219, 32
  %221 = ashr exact i64 %220, 32
  %222 = add nsw i64 %156, %136
  %223 = shl i64 %222, 32
  %224 = ashr exact i64 %223, 32
  %225 = sub nsw i64 %121, %141
  %226 = shl i64 %225, 32
  %227 = ashr exact i64 %226, 32
  %228 = sub nsw i64 %126, %146
  %229 = shl i64 %228, 32
  %230 = ashr exact i64 %229, 32
  %231 = sub nsw i64 %131, %151
  %232 = shl i64 %231, 32
  %233 = ashr exact i64 %232, 32
  %234 = sub nsw i64 %136, %156
  %235 = shl i64 %234, 32
  %236 = ashr exact i64 %235, 32
  %237 = add nsw i64 %191, 8192
  %238 = add nsw i64 %237, %203
  %239 = lshr i64 %238, 14
  %240 = shl i64 %239, 32
  %241 = ashr exact i64 %240, 32
  %242 = add nsw i64 %194, 8192
  %243 = add nsw i64 %242, %206
  %244 = lshr i64 %243, 14
  %245 = shl i64 %244, 32
  %246 = ashr exact i64 %245, 32
  %247 = add nsw i64 %197, 8192
  %248 = add nsw i64 %247, %209
  %249 = lshr i64 %248, 14
  %250 = shl i64 %249, 32
  %251 = ashr exact i64 %250, 32
  %252 = add nsw i64 %200, 8192
  %253 = add nsw i64 %252, %212
  %254 = lshr i64 %253, 14
  %255 = shl i64 %254, 32
  %256 = ashr exact i64 %255, 32
  %257 = sub nsw i64 %237, %203
  %258 = lshr i64 %257, 14
  %259 = shl i64 %258, 32
  %260 = ashr exact i64 %259, 32
  %261 = sub nsw i64 %242, %206
  %262 = lshr i64 %261, 14
  %263 = shl i64 %262, 32
  %264 = ashr exact i64 %263, 32
  %265 = sub nsw i64 %247, %209
  %266 = lshr i64 %265, 14
  %267 = shl i64 %266, 32
  %268 = ashr exact i64 %267, 32
  %269 = sub nsw i64 %252, %212
  %270 = lshr i64 %269, 14
  %271 = shl i64 %270, 32
  %272 = ashr exact i64 %271, 32
  %273 = mul nsw i64 %227, 15137
  %274 = mul nsw i64 %230, 6270
  %275 = add nsw i64 %273, %274
  %276 = mul nsw i64 %227, 6270
  %277 = mul nsw i64 %230, -15137
  %278 = add nsw i64 %276, %277
  %279 = mul nsw i64 %233, -6270
  %280 = mul nsw i64 %236, 15137
  %281 = add nsw i64 %279, %280
  %282 = mul nsw i64 %233, 15137
  %283 = mul nsw i64 %236, 6270
  %284 = add nsw i64 %282, %283
  %285 = mul nsw i64 %260, 15137
  %286 = mul nsw i64 %264, 6270
  %287 = add nsw i64 %285, %286
  %288 = mul nsw i64 %260, 6270
  %289 = mul nsw i64 %264, -15137
  %290 = add nsw i64 %288, %289
  %291 = mul nsw i64 %268, -6270
  %292 = mul nsw i64 %272, 15137
  %293 = add nsw i64 %291, %292
  %294 = mul nsw i64 %268, 15137
  %295 = mul nsw i64 %272, 6270
  %296 = add nsw i64 %294, %295
  %297 = add nsw i64 %221, %215
  %298 = add nsw i64 %224, %218
  %299 = sub nsw i64 %215, %221
  %300 = shl i64 %299, 32
  %301 = ashr exact i64 %300, 32
  %302 = sub nsw i64 %218, %224
  %303 = shl i64 %302, 32
  %304 = ashr exact i64 %303, 32
  %305 = add nsw i64 %275, 8192
  %306 = add nsw i64 %305, %281
  %307 = lshr i64 %306, 14
  %308 = add nsw i64 %278, 8192
  %309 = add nsw i64 %308, %284
  %310 = lshr i64 %309, 14
  %311 = sub nsw i64 %305, %281
  %312 = lshr i64 %311, 14
  %313 = shl i64 %312, 32
  %314 = ashr exact i64 %313, 32
  %315 = sub nsw i64 %308, %284
  %316 = lshr i64 %315, 14
  %317 = shl i64 %316, 32
  %318 = ashr exact i64 %317, 32
  %319 = add nsw i64 %251, %241
  %320 = add nsw i64 %256, %246
  %321 = sub nsw i64 %241, %251
  %322 = shl i64 %321, 32
  %323 = ashr exact i64 %322, 32
  %324 = sub nsw i64 %246, %256
  %325 = shl i64 %324, 32
  %326 = ashr exact i64 %325, 32
  %327 = add nsw i64 %287, 8192
  %328 = add nsw i64 %327, %293
  %329 = lshr i64 %328, 14
  %330 = add nsw i64 %290, 8192
  %331 = add nsw i64 %330, %296
  %332 = lshr i64 %331, 14
  %333 = sub nsw i64 %327, %293
  %334 = lshr i64 %333, 14
  %335 = shl i64 %334, 32
  %336 = ashr exact i64 %335, 32
  %337 = sub nsw i64 %330, %296
  %338 = lshr i64 %337, 14
  %339 = shl i64 %338, 32
  %340 = ashr exact i64 %339, 32
  %341 = add nsw i64 %301, %304
  %342 = mul nsw i64 %341, -11585
  %343 = sub nsw i64 %301, %304
  %344 = mul nsw i64 %343, 11585
  %345 = add nsw i64 %314, %318
  %346 = mul nsw i64 %345, 11585
  %347 = sub nsw i64 %318, %314
  %348 = mul nsw i64 %347, 11585
  %349 = add nsw i64 %323, %326
  %350 = mul nsw i64 %349, 11585
  %351 = sub nsw i64 %326, %323
  %352 = mul nsw i64 %351, 11585
  %353 = add nsw i64 %336, %340
  %354 = mul nsw i64 %353, -11585
  %355 = sub nsw i64 %336, %340
  %356 = mul nsw i64 %355, 11585
  %357 = add nsw i64 %342, 8192
  %358 = lshr i64 %357, 14
  %359 = add nsw i64 %344, 8192
  %360 = lshr i64 %359, 14
  %361 = add nsw i64 %346, 8192
  %362 = lshr i64 %361, 14
  %363 = add nsw i64 %348, 8192
  %364 = lshr i64 %363, 14
  %365 = add nsw i64 %350, 8192
  %366 = lshr i64 %365, 14
  %367 = add nsw i64 %352, 8192
  %368 = lshr i64 %367, 14
  %369 = add nsw i64 %354, 8192
  %370 = lshr i64 %369, 14
  %371 = add nsw i64 %356, 8192
  %372 = lshr i64 %371, 14
  %373 = trunc i64 %297 to i32
  store i32 %373, i32* %1, align 4
  %374 = trunc i64 %319 to i32
  %375 = sub i32 0, %374
  %376 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %375, i32* %376, align 4
  %377 = trunc i64 %329 to i32
  %378 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %377, i32* %378, align 4
  %379 = trunc i64 %307 to i32
  %380 = sub i32 0, %379
  %381 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %380, i32* %381, align 4
  %382 = trunc i64 %362 to i32
  %383 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %382, i32* %383, align 4
  %384 = trunc i64 %370 to i32
  %385 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %384, i32* %385, align 4
  %386 = trunc i64 %366 to i32
  %387 = getelementptr inbounds i32, i32* %1, i64 6
  store i32 %386, i32* %387, align 4
  %388 = trunc i64 %358 to i32
  %389 = getelementptr inbounds i32, i32* %1, i64 7
  store i32 %388, i32* %389, align 4
  %390 = trunc i64 %360 to i32
  %391 = getelementptr inbounds i32, i32* %1, i64 8
  store i32 %390, i32* %391, align 4
  %392 = trunc i64 %368 to i32
  %393 = getelementptr inbounds i32, i32* %1, i64 9
  store i32 %392, i32* %393, align 4
  %394 = trunc i64 %372 to i32
  %395 = getelementptr inbounds i32, i32* %1, i64 10
  store i32 %394, i32* %395, align 4
  %396 = trunc i64 %364 to i32
  %397 = getelementptr inbounds i32, i32* %1, i64 11
  store i32 %396, i32* %397, align 4
  %398 = trunc i64 %310 to i32
  %399 = getelementptr inbounds i32, i32* %1, i64 12
  store i32 %398, i32* %399, align 4
  %400 = trunc i64 %332 to i32
  %401 = sub i32 0, %400
  %402 = getelementptr inbounds i32, i32* %1, i64 13
  store i32 %401, i32* %402, align 4
  %403 = trunc i64 %320 to i32
  %404 = getelementptr inbounds i32, i32* %1, i64 14
  store i32 %403, i32* %404, align 4
  %405 = trunc i64 %298 to i32
  %406 = sub i32 0, %405
  %407 = getelementptr inbounds i32, i32* %1, i64 15
  store i32 %406, i32* %407, align 4
  br label %408

408:                                              ; preds = %68, %66
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @idct16_c(i32* nocapture readonly, i32* nocapture) local_unnamed_addr #2 {
  %3 = load i32, i32* %0, align 4
  %4 = getelementptr inbounds i32, i32* %0, i64 8
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 4
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 12
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 10
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 6
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 14
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 9
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds i32, i32* %0, i64 5
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds i32, i32* %0, i64 13
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds i32, i32* %0, i64 3
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds i32, i32* %0, i64 11
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds i32, i32* %0, i64 7
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds i32, i32* %0, i64 15
  %33 = load i32, i32* %32, align 4
  %34 = shl i32 %19, 16
  %35 = ashr exact i32 %34, 16
  %36 = mul nsw i32 %35, 1606
  %37 = shl i32 %33, 16
  %38 = ashr exact i32 %37, 16
  %39 = mul nsw i32 %38, -16305
  %40 = add nsw i32 %39, %36
  %41 = mul nsw i32 %35, 16305
  %42 = mul nsw i32 %38, 1606
  %43 = add nsw i32 %42, %41
  %44 = shl i32 %21, 16
  %45 = ashr exact i32 %44, 16
  %46 = mul nsw i32 %45, 12665
  %47 = shl i32 %31, 16
  %48 = ashr exact i32 %47, 16
  %49 = mul nsw i32 %48, -10394
  %50 = add nsw i32 %49, %46
  %51 = mul nsw i32 %45, 10394
  %52 = mul nsw i32 %48, 12665
  %53 = add nsw i32 %52, %51
  %54 = shl i32 %23, 16
  %55 = ashr exact i32 %54, 16
  %56 = mul nsw i32 %55, 7723
  %57 = shl i32 %29, 16
  %58 = ashr exact i32 %57, 16
  %59 = mul nsw i32 %58, -14449
  %60 = add nsw i32 %59, %56
  %61 = mul nsw i32 %55, 14449
  %62 = mul nsw i32 %58, 7723
  %63 = add nsw i32 %62, %61
  %64 = shl i32 %25, 16
  %65 = ashr exact i32 %64, 16
  %66 = mul nsw i32 %65, 15679
  %67 = shl i32 %27, 16
  %68 = ashr exact i32 %67, 16
  %69 = mul nsw i32 %68, -4756
  %70 = add nsw i32 %69, %66
  %71 = mul nsw i32 %65, 4756
  %72 = mul nsw i32 %68, 15679
  %73 = add nsw i32 %72, %71
  %74 = shl i32 %11, 16
  %75 = ashr exact i32 %74, 16
  %76 = mul nsw i32 %75, 3196
  %77 = shl i32 %17, 16
  %78 = ashr exact i32 %77, 16
  %79 = mul nsw i32 %78, -16069
  %80 = add nsw i32 %79, %76
  %81 = mul nsw i32 %75, 16069
  %82 = mul nsw i32 %78, 3196
  %83 = add nsw i32 %82, %81
  %84 = shl i32 %13, 16
  %85 = ashr exact i32 %84, 16
  %86 = mul nsw i32 %85, 13623
  %87 = shl i32 %15, 16
  %88 = ashr exact i32 %87, 16
  %89 = mul nsw i32 %88, -9102
  %90 = add nsw i32 %89, %86
  %91 = mul nsw i32 %85, 9102
  %92 = mul nsw i32 %88, 13623
  %93 = add nsw i32 %92, %91
  %94 = shl i32 %40, 2
  %95 = add i32 %94, 32768
  %96 = ashr i32 %95, 16
  %97 = shl i32 %50, 2
  %98 = add i32 %97, 32768
  %99 = ashr i32 %98, 16
  %100 = add nsw i32 %96, %99
  %101 = sub nsw i32 %96, %99
  %102 = shl i32 %60, 2
  %103 = add i32 %102, 32768
  %104 = ashr i32 %103, 16
  %105 = shl i32 %70, 2
  %106 = add i32 %105, 32768
  %107 = ashr i32 %106, 16
  %108 = sub nsw i32 %107, %104
  %109 = add nsw i32 %104, %107
  %110 = shl i32 %73, 2
  %111 = add i32 %110, 32768
  %112 = ashr i32 %111, 16
  %113 = shl i32 %63, 2
  %114 = add i32 %113, 32768
  %115 = ashr i32 %114, 16
  %116 = add nsw i32 %115, %112
  %117 = sub nsw i32 %112, %115
  %118 = shl i32 %53, 2
  %119 = add i32 %118, 32768
  %120 = ashr i32 %119, 16
  %121 = shl i32 %43, 2
  %122 = add i32 %121, 32768
  %123 = ashr i32 %122, 16
  %124 = sub nsw i32 %123, %120
  %125 = add nsw i32 %123, %120
  %126 = shl i32 %3, 16
  %127 = ashr exact i32 %126, 16
  %128 = shl i32 %5, 16
  %129 = ashr exact i32 %128, 16
  %130 = add nsw i32 %129, %127
  %131 = sub nsw i32 %127, %129
  %132 = shl i32 %7, 16
  %133 = ashr exact i32 %132, 16
  %134 = mul nsw i32 %133, 6270
  %135 = shl i32 %9, 16
  %136 = ashr exact i32 %135, 16
  %137 = mul nsw i32 %136, -15137
  %138 = add nsw i32 %137, %134
  %139 = mul nsw i32 %133, 15137
  %140 = mul nsw i32 %136, 6270
  %141 = add nsw i32 %140, %139
  %142 = shl i32 %80, 2
  %143 = add i32 %142, 32768
  %144 = ashr i32 %143, 16
  %145 = shl i32 %90, 2
  %146 = add i32 %145, 32768
  %147 = ashr i32 %146, 16
  %148 = add nsw i32 %144, %147
  %149 = sub nsw i32 %144, %147
  %150 = shl i32 %93, 2
  %151 = add i32 %150, 32768
  %152 = ashr i32 %151, 16
  %153 = shl i32 %83, 2
  %154 = add i32 %153, 32768
  %155 = ashr i32 %154, 16
  %156 = sub nsw i32 %155, %152
  %157 = add nsw i32 %155, %152
  %158 = shl i32 %101, 16
  %159 = ashr exact i32 %158, 16
  %160 = mul nsw i32 %159, -15137
  %161 = shl i32 %124, 16
  %162 = ashr exact i32 %161, 16
  %163 = mul nsw i32 %162, 6270
  %164 = add nsw i32 %160, %163
  %165 = mul nsw i32 %159, 6270
  %166 = mul nsw i32 %162, 15137
  %167 = add nsw i32 %165, %166
  %168 = shl i32 %108, 16
  %169 = ashr exact i32 %168, 16
  %170 = mul nsw i32 %169, -6270
  %171 = shl i32 %117, 16
  %172 = ashr exact i32 %171, 16
  %173 = mul nsw i32 %172, -15137
  %174 = add nsw i32 %170, %173
  %175 = mul nsw i32 %169, -15137
  %176 = mul nsw i32 %172, 6270
  %177 = add nsw i32 %175, %176
  %178 = mul i32 %130, 46340
  %179 = add i32 %178, 32768
  %180 = ashr i32 %179, 16
  %181 = shl i32 %141, 2
  %182 = add i32 %181, 32768
  %183 = ashr i32 %182, 16
  %184 = add nsw i32 %183, %180
  %185 = mul i32 %131, 46340
  %186 = add i32 %185, 32768
  %187 = ashr i32 %186, 16
  %188 = shl i32 %138, 2
  %189 = add i32 %188, 32768
  %190 = ashr i32 %189, 16
  %191 = add nsw i32 %190, %187
  %192 = sub nsw i32 %187, %190
  %193 = sub nsw i32 %180, %183
  %194 = shl i32 %156, 16
  %195 = ashr exact i32 %194, 16
  %196 = shl i32 %149, 16
  %197 = ashr exact i32 %196, 16
  %198 = sub nsw i32 %195, %197
  %199 = add nsw i32 %197, %195
  %200 = shl i32 %100, 16
  %201 = ashr exact i32 %200, 16
  %202 = shl i32 %109, 16
  %203 = ashr exact i32 %202, 16
  %204 = add nsw i32 %201, %203
  %205 = shl i32 %164, 2
  %206 = add i32 %205, 32768
  %207 = ashr i32 %206, 16
  %208 = shl i32 %174, 2
  %209 = add i32 %208, 32768
  %210 = ashr i32 %209, 16
  %211 = add nsw i32 %207, %210
  %212 = sub nsw i32 %207, %210
  %213 = sub nsw i32 %201, %203
  %214 = shl i32 %116, 16
  %215 = ashr exact i32 %214, 16
  %216 = shl i32 %125, 16
  %217 = ashr exact i32 %216, 16
  %218 = sub nsw i32 %217, %215
  %219 = shl i32 %177, 2
  %220 = add i32 %219, 32768
  %221 = ashr i32 %220, 16
  %222 = shl i32 %167, 2
  %223 = add i32 %222, 32768
  %224 = ashr i32 %223, 16
  %225 = sub nsw i32 %224, %221
  %226 = add nsw i32 %224, %221
  %227 = add nsw i32 %217, %215
  %228 = shl i32 %184, 16
  %229 = ashr exact i32 %228, 16
  %230 = shl i32 %157, 16
  %231 = ashr exact i32 %230, 16
  %232 = add nsw i32 %231, %229
  %233 = shl i32 %191, 16
  %234 = ashr exact i32 %233, 16
  %235 = mul i32 %199, 46340
  %236 = add i32 %235, 32768
  %237 = ashr i32 %236, 16
  %238 = add nsw i32 %237, %234
  %239 = shl i32 %192, 16
  %240 = ashr exact i32 %239, 16
  %241 = mul i32 %198, 46340
  %242 = add i32 %241, 32768
  %243 = ashr i32 %242, 16
  %244 = add nsw i32 %243, %240
  %245 = shl i32 %193, 16
  %246 = ashr exact i32 %245, 16
  %247 = shl i32 %148, 16
  %248 = ashr exact i32 %247, 16
  %249 = add nsw i32 %248, %246
  %250 = sub nsw i32 %246, %248
  %251 = sub nsw i32 %240, %243
  %252 = sub nsw i32 %234, %237
  %253 = sub nsw i32 %229, %231
  %254 = shl i32 %212, 16
  %255 = ashr exact i32 %254, 16
  %256 = shl i32 %225, 16
  %257 = ashr exact i32 %256, 16
  %258 = sub nsw i32 %257, %255
  %259 = add nsw i32 %255, %257
  %260 = shl i32 %213, 16
  %261 = ashr exact i32 %260, 16
  %262 = shl i32 %218, 16
  %263 = ashr exact i32 %262, 16
  %264 = sub nsw i32 %263, %261
  %265 = add nsw i32 %261, %263
  %266 = shl i32 %232, 16
  %267 = ashr exact i32 %266, 16
  %268 = shl i32 %227, 16
  %269 = ashr exact i32 %268, 16
  %270 = add nsw i32 %269, %267
  store i32 %270, i32* %1, align 4
  %271 = shl i32 %238, 16
  %272 = ashr exact i32 %271, 16
  %273 = shl i32 %226, 16
  %274 = ashr exact i32 %273, 16
  %275 = add nsw i32 %274, %272
  %276 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %275, i32* %276, align 4
  %277 = shl i32 %244, 16
  %278 = ashr exact i32 %277, 16
  %279 = mul i32 %259, 46340
  %280 = add i32 %279, 32768
  %281 = ashr i32 %280, 16
  %282 = add nsw i32 %281, %278
  %283 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %282, i32* %283, align 4
  %284 = shl i32 %249, 16
  %285 = ashr exact i32 %284, 16
  %286 = mul i32 %265, 46340
  %287 = add i32 %286, 32768
  %288 = ashr i32 %287, 16
  %289 = add nsw i32 %288, %285
  %290 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %289, i32* %290, align 4
  %291 = shl i32 %250, 16
  %292 = ashr exact i32 %291, 16
  %293 = mul i32 %264, 46340
  %294 = add i32 %293, 32768
  %295 = ashr i32 %294, 16
  %296 = add nsw i32 %295, %292
  %297 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %296, i32* %297, align 4
  %298 = shl i32 %251, 16
  %299 = ashr exact i32 %298, 16
  %300 = mul i32 %258, 46340
  %301 = add i32 %300, 32768
  %302 = ashr i32 %301, 16
  %303 = add nsw i32 %302, %299
  %304 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %303, i32* %304, align 4
  %305 = shl i32 %252, 16
  %306 = ashr exact i32 %305, 16
  %307 = shl i32 %211, 16
  %308 = ashr exact i32 %307, 16
  %309 = add nsw i32 %308, %306
  %310 = getelementptr inbounds i32, i32* %1, i64 6
  store i32 %309, i32* %310, align 4
  %311 = shl i32 %253, 16
  %312 = ashr exact i32 %311, 16
  %313 = shl i32 %204, 16
  %314 = ashr exact i32 %313, 16
  %315 = add nsw i32 %314, %312
  %316 = getelementptr inbounds i32, i32* %1, i64 7
  store i32 %315, i32* %316, align 4
  %317 = sub nsw i32 %312, %314
  %318 = getelementptr inbounds i32, i32* %1, i64 8
  store i32 %317, i32* %318, align 4
  %319 = sub nsw i32 %306, %308
  %320 = getelementptr inbounds i32, i32* %1, i64 9
  store i32 %319, i32* %320, align 4
  %321 = sub nsw i32 %299, %302
  %322 = getelementptr inbounds i32, i32* %1, i64 10
  store i32 %321, i32* %322, align 4
  %323 = sub nsw i32 %292, %295
  %324 = getelementptr inbounds i32, i32* %1, i64 11
  store i32 %323, i32* %324, align 4
  %325 = sub nsw i32 %285, %288
  %326 = getelementptr inbounds i32, i32* %1, i64 12
  store i32 %325, i32* %326, align 4
  %327 = sub nsw i32 %278, %281
  %328 = getelementptr inbounds i32, i32* %1, i64 13
  store i32 %327, i32* %328, align 4
  %329 = sub nsw i32 %272, %274
  %330 = getelementptr inbounds i32, i32* %1, i64 14
  store i32 %329, i32* %330, align 4
  %331 = sub nsw i32 %267, %269
  %332 = getelementptr inbounds i32, i32* %1, i64 15
  store i32 %331, i32* %332, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_idct16x16_256_add_c(i32* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = alloca [256 x i32], align 16
  %5 = alloca [16 x i32], align 16
  %6 = alloca [16 x i32], align 16
  %7 = bitcast [256 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 1024, i1 false)
  %8 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 0
  %9 = bitcast [16 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 64, i1 false)
  %10 = bitcast [16 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 64, i1 false)
  call void @idct16_c(i32* %0, i32* nonnull %8)
  %11 = getelementptr inbounds i32, i32* %0, i64 16
  %12 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 16
  call void @idct16_c(i32* %11, i32* %12)
  %13 = getelementptr inbounds i32, i32* %0, i64 32
  %14 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 32
  call void @idct16_c(i32* %13, i32* %14)
  %15 = getelementptr inbounds i32, i32* %0, i64 48
  %16 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 48
  call void @idct16_c(i32* %15, i32* %16)
  %17 = getelementptr inbounds i32, i32* %0, i64 64
  %18 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 64
  call void @idct16_c(i32* %17, i32* %18)
  %19 = getelementptr inbounds i32, i32* %0, i64 80
  %20 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 80
  call void @idct16_c(i32* %19, i32* %20)
  %21 = getelementptr inbounds i32, i32* %0, i64 96
  %22 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 96
  call void @idct16_c(i32* %21, i32* %22)
  %23 = getelementptr inbounds i32, i32* %0, i64 112
  %24 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 112
  call void @idct16_c(i32* %23, i32* %24)
  %25 = getelementptr inbounds i32, i32* %0, i64 128
  %26 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 128
  call void @idct16_c(i32* %25, i32* %26)
  %27 = getelementptr inbounds i32, i32* %0, i64 144
  %28 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 144
  call void @idct16_c(i32* %27, i32* %28)
  %29 = getelementptr inbounds i32, i32* %0, i64 160
  %30 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 160
  call void @idct16_c(i32* %29, i32* %30)
  %31 = getelementptr inbounds i32, i32* %0, i64 176
  %32 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 176
  call void @idct16_c(i32* %31, i32* %32)
  %33 = getelementptr inbounds i32, i32* %0, i64 192
  %34 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 192
  call void @idct16_c(i32* %33, i32* %34)
  %35 = getelementptr inbounds i32, i32* %0, i64 208
  %36 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 208
  call void @idct16_c(i32* %35, i32* %36)
  %37 = getelementptr inbounds i32, i32* %0, i64 224
  %38 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 224
  call void @idct16_c(i32* %37, i32* %38)
  %39 = getelementptr inbounds i32, i32* %0, i64 240
  %40 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 240
  call void @idct16_c(i32* %39, i32* %40)
  %41 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 0
  %42 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 0
  %43 = sext i32 %2 to i64
  %44 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 1
  %45 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 2
  %46 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 3
  %47 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 4
  %48 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 5
  %49 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 6
  %50 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 7
  %51 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 8
  %52 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 9
  %53 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 10
  %54 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 11
  %55 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 12
  %56 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 13
  %57 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 14
  %58 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 15
  %59 = icmp eq i32 %2, 1
  %60 = bitcast [16 x i32]* %6 to <4 x i32>*
  %61 = shl nsw i64 %43, 2
  %62 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 4
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = shl nsw i64 %43, 3
  %65 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 8
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = mul nsw i64 %43, 12
  %68 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 12
  %69 = bitcast i32* %68 to <4 x i32>*
  br label %70

70:                                               ; preds = %198, %3
  %71 = phi i64 [ 0, %3 ], [ %199, %198 ]
  %72 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %71
  %73 = load i32, i32* %72, align 4
  store i32 %73, i32* %41, align 16
  %74 = add nuw nsw i64 %71, 16
  %75 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %74
  %76 = load i32, i32* %75, align 4
  store i32 %76, i32* %44, align 4
  %77 = add nuw nsw i64 %71, 32
  %78 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %77
  %79 = load i32, i32* %78, align 4
  store i32 %79, i32* %45, align 8
  %80 = add nuw nsw i64 %71, 48
  %81 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %80
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %46, align 4
  %83 = add nuw nsw i64 %71, 64
  %84 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %83
  %85 = load i32, i32* %84, align 4
  store i32 %85, i32* %47, align 16
  %86 = add nuw nsw i64 %71, 80
  %87 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %86
  %88 = load i32, i32* %87, align 4
  store i32 %88, i32* %48, align 4
  %89 = add nuw nsw i64 %71, 96
  %90 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %89
  %91 = load i32, i32* %90, align 4
  store i32 %91, i32* %49, align 8
  %92 = add nuw nsw i64 %71, 112
  %93 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %92
  %94 = load i32, i32* %93, align 4
  store i32 %94, i32* %50, align 4
  %95 = add nuw nsw i64 %71, 128
  %96 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %95
  %97 = load i32, i32* %96, align 4
  store i32 %97, i32* %51, align 16
  %98 = add nuw nsw i64 %71, 144
  %99 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %98
  %100 = load i32, i32* %99, align 4
  store i32 %100, i32* %52, align 4
  %101 = add nuw nsw i64 %71, 160
  %102 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %101
  %103 = load i32, i32* %102, align 4
  store i32 %103, i32* %53, align 8
  %104 = add nuw nsw i64 %71, 176
  %105 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %104
  %106 = load i32, i32* %105, align 4
  store i32 %106, i32* %54, align 4
  %107 = add nuw nsw i64 %71, 192
  %108 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %107
  %109 = load i32, i32* %108, align 4
  store i32 %109, i32* %55, align 16
  %110 = add nuw nsw i64 %71, 208
  %111 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %110
  %112 = load i32, i32* %111, align 4
  store i32 %112, i32* %56, align 4
  %113 = add nuw nsw i64 %71, 224
  %114 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %113
  %115 = load i32, i32* %114, align 4
  store i32 %115, i32* %57, align 8
  %116 = add nuw nsw i64 %71, 240
  %117 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %116
  %118 = load i32, i32* %117, align 4
  store i32 %118, i32* %58, align 4
  call void @idct16_c(i32* nonnull %41, i32* nonnull %42)
  br i1 %59, label %119, label %179

119:                                              ; preds = %70
  %120 = getelementptr inbounds i8, i8* %1, i64 %71
  %121 = bitcast i8* %120 to <4 x i8>*
  %122 = load <4 x i8>, <4 x i8>* %121, align 1
  %123 = load <4 x i32>, <4 x i32>* %60, align 16
  %124 = add nsw <4 x i32> %123, <i32 32, i32 32, i32 32, i32 32>
  %125 = ashr <4 x i32> %124, <i32 6, i32 6, i32 6, i32 6>
  %126 = zext <4 x i8> %122 to <4 x i32>
  %127 = add nsw <4 x i32> %125, %126
  %128 = icmp sgt <4 x i32> %127, zeroinitializer
  %129 = select <4 x i1> %128, <4 x i32> %127, <4 x i32> zeroinitializer
  %130 = icmp slt <4 x i32> %129, <i32 255, i32 255, i32 255, i32 255>
  %131 = select <4 x i1> %130, <4 x i32> %129, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %132 = trunc <4 x i32> %131 to <4 x i8>
  %133 = bitcast i8* %120 to <4 x i8>*
  store <4 x i8> %132, <4 x i8>* %133, align 1
  %134 = add nsw i64 %61, %71
  %135 = getelementptr inbounds i8, i8* %1, i64 %134
  %136 = bitcast i8* %135 to <4 x i8>*
  %137 = load <4 x i8>, <4 x i8>* %136, align 1
  %138 = load <4 x i32>, <4 x i32>* %63, align 16
  %139 = add nsw <4 x i32> %138, <i32 32, i32 32, i32 32, i32 32>
  %140 = ashr <4 x i32> %139, <i32 6, i32 6, i32 6, i32 6>
  %141 = zext <4 x i8> %137 to <4 x i32>
  %142 = add nsw <4 x i32> %140, %141
  %143 = icmp sgt <4 x i32> %142, zeroinitializer
  %144 = select <4 x i1> %143, <4 x i32> %142, <4 x i32> zeroinitializer
  %145 = icmp slt <4 x i32> %144, <i32 255, i32 255, i32 255, i32 255>
  %146 = select <4 x i1> %145, <4 x i32> %144, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %147 = trunc <4 x i32> %146 to <4 x i8>
  %148 = bitcast i8* %135 to <4 x i8>*
  store <4 x i8> %147, <4 x i8>* %148, align 1
  %149 = add nsw i64 %64, %71
  %150 = getelementptr inbounds i8, i8* %1, i64 %149
  %151 = bitcast i8* %150 to <4 x i8>*
  %152 = load <4 x i8>, <4 x i8>* %151, align 1
  %153 = load <4 x i32>, <4 x i32>* %66, align 16
  %154 = add nsw <4 x i32> %153, <i32 32, i32 32, i32 32, i32 32>
  %155 = ashr <4 x i32> %154, <i32 6, i32 6, i32 6, i32 6>
  %156 = zext <4 x i8> %152 to <4 x i32>
  %157 = add nsw <4 x i32> %155, %156
  %158 = icmp sgt <4 x i32> %157, zeroinitializer
  %159 = select <4 x i1> %158, <4 x i32> %157, <4 x i32> zeroinitializer
  %160 = icmp slt <4 x i32> %159, <i32 255, i32 255, i32 255, i32 255>
  %161 = select <4 x i1> %160, <4 x i32> %159, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %162 = trunc <4 x i32> %161 to <4 x i8>
  %163 = bitcast i8* %150 to <4 x i8>*
  store <4 x i8> %162, <4 x i8>* %163, align 1
  %164 = add nsw i64 %67, %71
  %165 = getelementptr inbounds i8, i8* %1, i64 %164
  %166 = bitcast i8* %165 to <4 x i8>*
  %167 = load <4 x i8>, <4 x i8>* %166, align 1
  %168 = load <4 x i32>, <4 x i32>* %69, align 16
  %169 = add nsw <4 x i32> %168, <i32 32, i32 32, i32 32, i32 32>
  %170 = ashr <4 x i32> %169, <i32 6, i32 6, i32 6, i32 6>
  %171 = zext <4 x i8> %167 to <4 x i32>
  %172 = add nsw <4 x i32> %170, %171
  %173 = icmp sgt <4 x i32> %172, zeroinitializer
  %174 = select <4 x i1> %173, <4 x i32> %172, <4 x i32> zeroinitializer
  %175 = icmp slt <4 x i32> %174, <i32 255, i32 255, i32 255, i32 255>
  %176 = select <4 x i1> %175, <4 x i32> %174, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %177 = trunc <4 x i32> %176 to <4 x i8>
  %178 = bitcast i8* %165 to <4 x i8>*
  store <4 x i8> %177, <4 x i8>* %178, align 1
  br label %198

179:                                              ; preds = %70, %179
  %180 = phi i64 [ %196, %179 ], [ 0, %70 ]
  %181 = mul nsw i64 %180, %43
  %182 = add nsw i64 %181, %71
  %183 = getelementptr inbounds i8, i8* %1, i64 %182
  %184 = load i8, i8* %183, align 1
  %185 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 %180
  %186 = load i32, i32* %185, align 4
  %187 = add nsw i32 %186, 32
  %188 = ashr i32 %187, 6
  %189 = zext i8 %184 to i32
  %190 = add nsw i32 %188, %189
  %191 = icmp sgt i32 %190, 0
  %192 = select i1 %191, i32 %190, i32 0
  %193 = icmp slt i32 %192, 255
  %194 = select i1 %193, i32 %192, i32 255
  %195 = trunc i32 %194 to i8
  store i8 %195, i8* %183, align 1
  %196 = add nuw nsw i64 %180, 1
  %197 = icmp eq i64 %196, 16
  br i1 %197, label %198, label %179, !llvm.loop !2

198:                                              ; preds = %179, %119
  %199 = add nuw nsw i64 %71, 1
  %200 = icmp eq i64 %199, 16
  br i1 %200, label %201, label %70

201:                                              ; preds = %198
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %7) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_idct16x16_38_add_c(i32* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = alloca [256 x i32], align 16
  %5 = alloca [16 x i32], align 16
  %6 = alloca [16 x i32], align 16
  %7 = bitcast [256 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 1024, i1 false)
  %8 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 0
  %9 = bitcast [16 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 64, i1 false)
  %10 = bitcast [16 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 64, i1 false)
  call void @idct16_c(i32* %0, i32* nonnull %8)
  %11 = getelementptr inbounds i32, i32* %0, i64 16
  %12 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 16
  call void @idct16_c(i32* %11, i32* %12)
  %13 = getelementptr inbounds i32, i32* %0, i64 32
  %14 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 32
  call void @idct16_c(i32* %13, i32* %14)
  %15 = getelementptr inbounds i32, i32* %0, i64 48
  %16 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 48
  call void @idct16_c(i32* %15, i32* %16)
  %17 = getelementptr inbounds i32, i32* %0, i64 64
  %18 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 64
  call void @idct16_c(i32* %17, i32* %18)
  %19 = getelementptr inbounds i32, i32* %0, i64 80
  %20 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 80
  call void @idct16_c(i32* %19, i32* %20)
  %21 = getelementptr inbounds i32, i32* %0, i64 96
  %22 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 96
  call void @idct16_c(i32* %21, i32* %22)
  %23 = getelementptr inbounds i32, i32* %0, i64 112
  %24 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 112
  call void @idct16_c(i32* %23, i32* %24)
  %25 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 0
  %26 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 0
  %27 = sext i32 %2 to i64
  %28 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 1
  %29 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 2
  %30 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 3
  %31 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 4
  %32 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 5
  %33 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 6
  %34 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 7
  %35 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 8
  %36 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 9
  %37 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 10
  %38 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 11
  %39 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 12
  %40 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 13
  %41 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 14
  %42 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 15
  %43 = icmp eq i32 %2, 1
  %44 = bitcast [16 x i32]* %6 to <4 x i32>*
  %45 = shl nsw i64 %27, 2
  %46 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 4
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = shl nsw i64 %27, 3
  %49 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 8
  %50 = bitcast i32* %49 to <4 x i32>*
  %51 = mul nsw i64 %27, 12
  %52 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 12
  %53 = bitcast i32* %52 to <4 x i32>*
  br label %54

54:                                               ; preds = %182, %3
  %55 = phi i64 [ 0, %3 ], [ %183, %182 ]
  %56 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %55
  %57 = load i32, i32* %56, align 4
  store i32 %57, i32* %25, align 16
  %58 = add nuw nsw i64 %55, 16
  %59 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %58
  %60 = load i32, i32* %59, align 4
  store i32 %60, i32* %28, align 4
  %61 = add nuw nsw i64 %55, 32
  %62 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %61
  %63 = load i32, i32* %62, align 4
  store i32 %63, i32* %29, align 8
  %64 = add nuw nsw i64 %55, 48
  %65 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %64
  %66 = load i32, i32* %65, align 4
  store i32 %66, i32* %30, align 4
  %67 = add nuw nsw i64 %55, 64
  %68 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %67
  %69 = load i32, i32* %68, align 4
  store i32 %69, i32* %31, align 16
  %70 = add nuw nsw i64 %55, 80
  %71 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %70
  %72 = load i32, i32* %71, align 4
  store i32 %72, i32* %32, align 4
  %73 = add nuw nsw i64 %55, 96
  %74 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %73
  %75 = load i32, i32* %74, align 4
  store i32 %75, i32* %33, align 8
  %76 = add nuw nsw i64 %55, 112
  %77 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %76
  %78 = load i32, i32* %77, align 4
  store i32 %78, i32* %34, align 4
  %79 = add nuw nsw i64 %55, 128
  %80 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %79
  %81 = load i32, i32* %80, align 4
  store i32 %81, i32* %35, align 16
  %82 = add nuw nsw i64 %55, 144
  %83 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %82
  %84 = load i32, i32* %83, align 4
  store i32 %84, i32* %36, align 4
  %85 = add nuw nsw i64 %55, 160
  %86 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %85
  %87 = load i32, i32* %86, align 4
  store i32 %87, i32* %37, align 8
  %88 = add nuw nsw i64 %55, 176
  %89 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %88
  %90 = load i32, i32* %89, align 4
  store i32 %90, i32* %38, align 4
  %91 = add nuw nsw i64 %55, 192
  %92 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %91
  %93 = load i32, i32* %92, align 4
  store i32 %93, i32* %39, align 16
  %94 = add nuw nsw i64 %55, 208
  %95 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %94
  %96 = load i32, i32* %95, align 4
  store i32 %96, i32* %40, align 4
  %97 = add nuw nsw i64 %55, 224
  %98 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %97
  %99 = load i32, i32* %98, align 4
  store i32 %99, i32* %41, align 8
  %100 = add nuw nsw i64 %55, 240
  %101 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %100
  %102 = load i32, i32* %101, align 4
  store i32 %102, i32* %42, align 4
  call void @idct16_c(i32* nonnull %25, i32* nonnull %26)
  br i1 %43, label %103, label %163

103:                                              ; preds = %54
  %104 = getelementptr inbounds i8, i8* %1, i64 %55
  %105 = bitcast i8* %104 to <4 x i8>*
  %106 = load <4 x i8>, <4 x i8>* %105, align 1
  %107 = load <4 x i32>, <4 x i32>* %44, align 16
  %108 = add nsw <4 x i32> %107, <i32 32, i32 32, i32 32, i32 32>
  %109 = ashr <4 x i32> %108, <i32 6, i32 6, i32 6, i32 6>
  %110 = zext <4 x i8> %106 to <4 x i32>
  %111 = add nsw <4 x i32> %109, %110
  %112 = icmp sgt <4 x i32> %111, zeroinitializer
  %113 = select <4 x i1> %112, <4 x i32> %111, <4 x i32> zeroinitializer
  %114 = icmp slt <4 x i32> %113, <i32 255, i32 255, i32 255, i32 255>
  %115 = select <4 x i1> %114, <4 x i32> %113, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %116 = trunc <4 x i32> %115 to <4 x i8>
  %117 = bitcast i8* %104 to <4 x i8>*
  store <4 x i8> %116, <4 x i8>* %117, align 1
  %118 = add nsw i64 %45, %55
  %119 = getelementptr inbounds i8, i8* %1, i64 %118
  %120 = bitcast i8* %119 to <4 x i8>*
  %121 = load <4 x i8>, <4 x i8>* %120, align 1
  %122 = load <4 x i32>, <4 x i32>* %47, align 16
  %123 = add nsw <4 x i32> %122, <i32 32, i32 32, i32 32, i32 32>
  %124 = ashr <4 x i32> %123, <i32 6, i32 6, i32 6, i32 6>
  %125 = zext <4 x i8> %121 to <4 x i32>
  %126 = add nsw <4 x i32> %124, %125
  %127 = icmp sgt <4 x i32> %126, zeroinitializer
  %128 = select <4 x i1> %127, <4 x i32> %126, <4 x i32> zeroinitializer
  %129 = icmp slt <4 x i32> %128, <i32 255, i32 255, i32 255, i32 255>
  %130 = select <4 x i1> %129, <4 x i32> %128, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %131 = trunc <4 x i32> %130 to <4 x i8>
  %132 = bitcast i8* %119 to <4 x i8>*
  store <4 x i8> %131, <4 x i8>* %132, align 1
  %133 = add nsw i64 %48, %55
  %134 = getelementptr inbounds i8, i8* %1, i64 %133
  %135 = bitcast i8* %134 to <4 x i8>*
  %136 = load <4 x i8>, <4 x i8>* %135, align 1
  %137 = load <4 x i32>, <4 x i32>* %50, align 16
  %138 = add nsw <4 x i32> %137, <i32 32, i32 32, i32 32, i32 32>
  %139 = ashr <4 x i32> %138, <i32 6, i32 6, i32 6, i32 6>
  %140 = zext <4 x i8> %136 to <4 x i32>
  %141 = add nsw <4 x i32> %139, %140
  %142 = icmp sgt <4 x i32> %141, zeroinitializer
  %143 = select <4 x i1> %142, <4 x i32> %141, <4 x i32> zeroinitializer
  %144 = icmp slt <4 x i32> %143, <i32 255, i32 255, i32 255, i32 255>
  %145 = select <4 x i1> %144, <4 x i32> %143, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %146 = trunc <4 x i32> %145 to <4 x i8>
  %147 = bitcast i8* %134 to <4 x i8>*
  store <4 x i8> %146, <4 x i8>* %147, align 1
  %148 = add nsw i64 %51, %55
  %149 = getelementptr inbounds i8, i8* %1, i64 %148
  %150 = bitcast i8* %149 to <4 x i8>*
  %151 = load <4 x i8>, <4 x i8>* %150, align 1
  %152 = load <4 x i32>, <4 x i32>* %53, align 16
  %153 = add nsw <4 x i32> %152, <i32 32, i32 32, i32 32, i32 32>
  %154 = ashr <4 x i32> %153, <i32 6, i32 6, i32 6, i32 6>
  %155 = zext <4 x i8> %151 to <4 x i32>
  %156 = add nsw <4 x i32> %154, %155
  %157 = icmp sgt <4 x i32> %156, zeroinitializer
  %158 = select <4 x i1> %157, <4 x i32> %156, <4 x i32> zeroinitializer
  %159 = icmp slt <4 x i32> %158, <i32 255, i32 255, i32 255, i32 255>
  %160 = select <4 x i1> %159, <4 x i32> %158, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %161 = trunc <4 x i32> %160 to <4 x i8>
  %162 = bitcast i8* %149 to <4 x i8>*
  store <4 x i8> %161, <4 x i8>* %162, align 1
  br label %182

163:                                              ; preds = %54, %163
  %164 = phi i64 [ %180, %163 ], [ 0, %54 ]
  %165 = mul nsw i64 %164, %27
  %166 = add nsw i64 %165, %55
  %167 = getelementptr inbounds i8, i8* %1, i64 %166
  %168 = load i8, i8* %167, align 1
  %169 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 %164
  %170 = load i32, i32* %169, align 4
  %171 = add nsw i32 %170, 32
  %172 = ashr i32 %171, 6
  %173 = zext i8 %168 to i32
  %174 = add nsw i32 %172, %173
  %175 = icmp sgt i32 %174, 0
  %176 = select i1 %175, i32 %174, i32 0
  %177 = icmp slt i32 %176, 255
  %178 = select i1 %177, i32 %176, i32 255
  %179 = trunc i32 %178 to i8
  store i8 %179, i8* %167, align 1
  %180 = add nuw nsw i64 %164, 1
  %181 = icmp eq i64 %180, 16
  br i1 %181, label %182, label %163, !llvm.loop !4

182:                                              ; preds = %163, %103
  %183 = add nuw nsw i64 %55, 1
  %184 = icmp eq i64 %183, 16
  br i1 %184, label %185, label %54

185:                                              ; preds = %182
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %7) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_idct16x16_10_add_c(i32* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = alloca [256 x i32], align 16
  %5 = alloca [16 x i32], align 16
  %6 = alloca [16 x i32], align 16
  %7 = bitcast [256 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 1024, i1 false)
  %8 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 0
  %9 = bitcast [16 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 64, i1 false)
  %10 = bitcast [16 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 64, i1 false)
  call void @idct16_c(i32* %0, i32* nonnull %8)
  %11 = getelementptr inbounds i32, i32* %0, i64 16
  %12 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 16
  call void @idct16_c(i32* %11, i32* %12)
  %13 = getelementptr inbounds i32, i32* %0, i64 32
  %14 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 32
  call void @idct16_c(i32* %13, i32* %14)
  %15 = getelementptr inbounds i32, i32* %0, i64 48
  %16 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 48
  call void @idct16_c(i32* %15, i32* %16)
  %17 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 0
  %18 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 0
  %19 = sext i32 %2 to i64
  %20 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 1
  %21 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 2
  %22 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 3
  %23 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 4
  %24 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 5
  %25 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 6
  %26 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 7
  %27 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 8
  %28 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 9
  %29 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 10
  %30 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 11
  %31 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 12
  %32 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 13
  %33 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 14
  %34 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 15
  %35 = icmp eq i32 %2, 1
  %36 = bitcast [16 x i32]* %6 to <4 x i32>*
  %37 = shl nsw i64 %19, 2
  %38 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 4
  %39 = bitcast i32* %38 to <4 x i32>*
  %40 = shl nsw i64 %19, 3
  %41 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 8
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = mul nsw i64 %19, 12
  %44 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 12
  %45 = bitcast i32* %44 to <4 x i32>*
  br label %46

46:                                               ; preds = %174, %3
  %47 = phi i64 [ 0, %3 ], [ %175, %174 ]
  %48 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %47
  %49 = load i32, i32* %48, align 4
  store i32 %49, i32* %17, align 16
  %50 = add nuw nsw i64 %47, 16
  %51 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %50
  %52 = load i32, i32* %51, align 4
  store i32 %52, i32* %20, align 4
  %53 = add nuw nsw i64 %47, 32
  %54 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %53
  %55 = load i32, i32* %54, align 4
  store i32 %55, i32* %21, align 8
  %56 = add nuw nsw i64 %47, 48
  %57 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %56
  %58 = load i32, i32* %57, align 4
  store i32 %58, i32* %22, align 4
  %59 = add nuw nsw i64 %47, 64
  %60 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %59
  %61 = load i32, i32* %60, align 4
  store i32 %61, i32* %23, align 16
  %62 = add nuw nsw i64 %47, 80
  %63 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %62
  %64 = load i32, i32* %63, align 4
  store i32 %64, i32* %24, align 4
  %65 = add nuw nsw i64 %47, 96
  %66 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %65
  %67 = load i32, i32* %66, align 4
  store i32 %67, i32* %25, align 8
  %68 = add nuw nsw i64 %47, 112
  %69 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4
  store i32 %70, i32* %26, align 4
  %71 = add nuw nsw i64 %47, 128
  %72 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %71
  %73 = load i32, i32* %72, align 4
  store i32 %73, i32* %27, align 16
  %74 = add nuw nsw i64 %47, 144
  %75 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %74
  %76 = load i32, i32* %75, align 4
  store i32 %76, i32* %28, align 4
  %77 = add nuw nsw i64 %47, 160
  %78 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %77
  %79 = load i32, i32* %78, align 4
  store i32 %79, i32* %29, align 8
  %80 = add nuw nsw i64 %47, 176
  %81 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %80
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %30, align 4
  %83 = add nuw nsw i64 %47, 192
  %84 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %83
  %85 = load i32, i32* %84, align 4
  store i32 %85, i32* %31, align 16
  %86 = add nuw nsw i64 %47, 208
  %87 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %86
  %88 = load i32, i32* %87, align 4
  store i32 %88, i32* %32, align 4
  %89 = add nuw nsw i64 %47, 224
  %90 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %89
  %91 = load i32, i32* %90, align 4
  store i32 %91, i32* %33, align 8
  %92 = add nuw nsw i64 %47, 240
  %93 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %92
  %94 = load i32, i32* %93, align 4
  store i32 %94, i32* %34, align 4
  call void @idct16_c(i32* nonnull %17, i32* nonnull %18)
  br i1 %35, label %95, label %155

95:                                               ; preds = %46
  %96 = getelementptr inbounds i8, i8* %1, i64 %47
  %97 = bitcast i8* %96 to <4 x i8>*
  %98 = load <4 x i8>, <4 x i8>* %97, align 1
  %99 = load <4 x i32>, <4 x i32>* %36, align 16
  %100 = add nsw <4 x i32> %99, <i32 32, i32 32, i32 32, i32 32>
  %101 = ashr <4 x i32> %100, <i32 6, i32 6, i32 6, i32 6>
  %102 = zext <4 x i8> %98 to <4 x i32>
  %103 = add nsw <4 x i32> %101, %102
  %104 = icmp sgt <4 x i32> %103, zeroinitializer
  %105 = select <4 x i1> %104, <4 x i32> %103, <4 x i32> zeroinitializer
  %106 = icmp slt <4 x i32> %105, <i32 255, i32 255, i32 255, i32 255>
  %107 = select <4 x i1> %106, <4 x i32> %105, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %108 = trunc <4 x i32> %107 to <4 x i8>
  %109 = bitcast i8* %96 to <4 x i8>*
  store <4 x i8> %108, <4 x i8>* %109, align 1
  %110 = add nsw i64 %37, %47
  %111 = getelementptr inbounds i8, i8* %1, i64 %110
  %112 = bitcast i8* %111 to <4 x i8>*
  %113 = load <4 x i8>, <4 x i8>* %112, align 1
  %114 = load <4 x i32>, <4 x i32>* %39, align 16
  %115 = add nsw <4 x i32> %114, <i32 32, i32 32, i32 32, i32 32>
  %116 = ashr <4 x i32> %115, <i32 6, i32 6, i32 6, i32 6>
  %117 = zext <4 x i8> %113 to <4 x i32>
  %118 = add nsw <4 x i32> %116, %117
  %119 = icmp sgt <4 x i32> %118, zeroinitializer
  %120 = select <4 x i1> %119, <4 x i32> %118, <4 x i32> zeroinitializer
  %121 = icmp slt <4 x i32> %120, <i32 255, i32 255, i32 255, i32 255>
  %122 = select <4 x i1> %121, <4 x i32> %120, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %123 = trunc <4 x i32> %122 to <4 x i8>
  %124 = bitcast i8* %111 to <4 x i8>*
  store <4 x i8> %123, <4 x i8>* %124, align 1
  %125 = add nsw i64 %40, %47
  %126 = getelementptr inbounds i8, i8* %1, i64 %125
  %127 = bitcast i8* %126 to <4 x i8>*
  %128 = load <4 x i8>, <4 x i8>* %127, align 1
  %129 = load <4 x i32>, <4 x i32>* %42, align 16
  %130 = add nsw <4 x i32> %129, <i32 32, i32 32, i32 32, i32 32>
  %131 = ashr <4 x i32> %130, <i32 6, i32 6, i32 6, i32 6>
  %132 = zext <4 x i8> %128 to <4 x i32>
  %133 = add nsw <4 x i32> %131, %132
  %134 = icmp sgt <4 x i32> %133, zeroinitializer
  %135 = select <4 x i1> %134, <4 x i32> %133, <4 x i32> zeroinitializer
  %136 = icmp slt <4 x i32> %135, <i32 255, i32 255, i32 255, i32 255>
  %137 = select <4 x i1> %136, <4 x i32> %135, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %138 = trunc <4 x i32> %137 to <4 x i8>
  %139 = bitcast i8* %126 to <4 x i8>*
  store <4 x i8> %138, <4 x i8>* %139, align 1
  %140 = add nsw i64 %43, %47
  %141 = getelementptr inbounds i8, i8* %1, i64 %140
  %142 = bitcast i8* %141 to <4 x i8>*
  %143 = load <4 x i8>, <4 x i8>* %142, align 1
  %144 = load <4 x i32>, <4 x i32>* %45, align 16
  %145 = add nsw <4 x i32> %144, <i32 32, i32 32, i32 32, i32 32>
  %146 = ashr <4 x i32> %145, <i32 6, i32 6, i32 6, i32 6>
  %147 = zext <4 x i8> %143 to <4 x i32>
  %148 = add nsw <4 x i32> %146, %147
  %149 = icmp sgt <4 x i32> %148, zeroinitializer
  %150 = select <4 x i1> %149, <4 x i32> %148, <4 x i32> zeroinitializer
  %151 = icmp slt <4 x i32> %150, <i32 255, i32 255, i32 255, i32 255>
  %152 = select <4 x i1> %151, <4 x i32> %150, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %153 = trunc <4 x i32> %152 to <4 x i8>
  %154 = bitcast i8* %141 to <4 x i8>*
  store <4 x i8> %153, <4 x i8>* %154, align 1
  br label %174

155:                                              ; preds = %46, %155
  %156 = phi i64 [ %172, %155 ], [ 0, %46 ]
  %157 = mul nsw i64 %156, %19
  %158 = add nsw i64 %157, %47
  %159 = getelementptr inbounds i8, i8* %1, i64 %158
  %160 = load i8, i8* %159, align 1
  %161 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 %156
  %162 = load i32, i32* %161, align 4
  %163 = add nsw i32 %162, 32
  %164 = ashr i32 %163, 6
  %165 = zext i8 %160 to i32
  %166 = add nsw i32 %164, %165
  %167 = icmp sgt i32 %166, 0
  %168 = select i1 %167, i32 %166, i32 0
  %169 = icmp slt i32 %168, 255
  %170 = select i1 %169, i32 %168, i32 255
  %171 = trunc i32 %170 to i8
  store i8 %171, i8* %159, align 1
  %172 = add nuw nsw i64 %156, 1
  %173 = icmp eq i64 %172, 16
  br i1 %173, label %174, label %155, !llvm.loop !5

174:                                              ; preds = %155, %95
  %175 = add nuw nsw i64 %47, 1
  %176 = icmp eq i64 %175, 16
  br i1 %176, label %177, label %46

177:                                              ; preds = %174
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %7) #3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_idct16x16_1_add_c(i32* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #2 {
  %4 = load i32, i32* %0, align 4
  %5 = shl i32 %4, 16
  %6 = ashr exact i32 %5, 16
  %7 = mul nsw i32 %6, 11585
  %8 = add nsw i32 %7, 8192
  %9 = ashr i32 %8, 14
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %10, 49757196124160
  %12 = ashr exact i64 %11, 32
  %13 = add nsw i64 %12, 8192
  %14 = lshr i64 %13, 14
  %15 = trunc i64 %14 to i32
  %16 = add nsw i32 %15, 32
  %17 = ashr i32 %16, 6
  %18 = sext i32 %2 to i64
  %19 = insertelement <16 x i32> undef, i32 %17, i32 0
  %20 = shufflevector <16 x i32> %19, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %21

21:                                               ; preds = %21, %3
  %22 = phi i8* [ %1, %3 ], [ %45, %21 ]
  %23 = phi i32 [ 0, %3 ], [ %46, %21 ]
  %24 = bitcast i8* %22 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = zext <16 x i8> %25 to <16 x i32>
  %27 = add nsw <16 x i32> %20, %26
  %28 = icmp sgt <16 x i32> %27, zeroinitializer
  %29 = select <16 x i1> %28, <16 x i32> %27, <16 x i32> zeroinitializer
  %30 = icmp slt <16 x i32> %29, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %31 = select <16 x i1> %30, <16 x i32> %29, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %32 = trunc <16 x i32> %31 to <16 x i8>
  %33 = bitcast i8* %22 to <16 x i8>*
  store <16 x i8> %32, <16 x i8>* %33, align 1
  %34 = getelementptr inbounds i8, i8* %22, i64 %18
  %35 = bitcast i8* %34 to <16 x i8>*
  %36 = load <16 x i8>, <16 x i8>* %35, align 1
  %37 = zext <16 x i8> %36 to <16 x i32>
  %38 = add nsw <16 x i32> %20, %37
  %39 = icmp sgt <16 x i32> %38, zeroinitializer
  %40 = select <16 x i1> %39, <16 x i32> %38, <16 x i32> zeroinitializer
  %41 = icmp slt <16 x i32> %40, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %42 = select <16 x i1> %41, <16 x i32> %40, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %43 = trunc <16 x i32> %42 to <16 x i8>
  %44 = bitcast i8* %34 to <16 x i8>*
  store <16 x i8> %43, <16 x i8>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %34, i64 %18
  %46 = add nuw nsw i32 %23, 2
  %47 = icmp eq i32 %46, 16
  br i1 %47, label %48, label %21

48:                                               ; preds = %21
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @idct32_c(i32* readonly, i32*) local_unnamed_addr #2 {
  %3 = load i32, i32* %0, align 4
  %4 = getelementptr inbounds i32, i32* %0, i64 16
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds i32, i32* %0, i64 8
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 24
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds i32, i32* %0, i64 4
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds i32, i32* %0, i64 20
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 12
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds i32, i32* %0, i64 28
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 2
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds i32, i32* %0, i64 18
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds i32, i32* %0, i64 10
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds i32, i32* %0, i64 26
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds i32, i32* %0, i64 6
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds i32, i32* %0, i64 22
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds i32, i32* %0, i64 14
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds i32, i32* %0, i64 30
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %0, i64 1
  %35 = load i32, i32* %34, align 4
  %36 = shl i32 %35, 16
  %37 = ashr exact i32 %36, 16
  %38 = mul nsw i32 %37, 804
  %39 = getelementptr inbounds i32, i32* %0, i64 31
  %40 = load i32, i32* %39, align 4
  %41 = shl i32 %40, 16
  %42 = ashr exact i32 %41, 16
  %43 = mul nsw i32 %42, -16364
  %44 = add nsw i32 %43, %38
  %45 = mul nsw i32 %37, 16364
  %46 = mul nsw i32 %42, 804
  %47 = add nsw i32 %46, %45
  %48 = getelementptr inbounds i32, i32* %0, i64 17
  %49 = load i32, i32* %48, align 4
  %50 = shl i32 %49, 16
  %51 = ashr exact i32 %50, 16
  %52 = mul nsw i32 %51, 12140
  %53 = getelementptr inbounds i32, i32* %0, i64 15
  %54 = load i32, i32* %53, align 4
  %55 = shl i32 %54, 16
  %56 = ashr exact i32 %55, 16
  %57 = mul nsw i32 %56, -11003
  %58 = add nsw i32 %57, %52
  %59 = mul nsw i32 %51, 11003
  %60 = mul nsw i32 %56, 12140
  %61 = add nsw i32 %60, %59
  %62 = getelementptr inbounds i32, i32* %0, i64 9
  %63 = load i32, i32* %62, align 4
  %64 = shl i32 %63, 16
  %65 = ashr exact i32 %64, 16
  %66 = mul nsw i32 %65, 7005
  %67 = getelementptr inbounds i32, i32* %0, i64 23
  %68 = load i32, i32* %67, align 4
  %69 = shl i32 %68, 16
  %70 = ashr exact i32 %69, 16
  %71 = mul nsw i32 %70, -14811
  %72 = add nsw i32 %71, %66
  %73 = mul nsw i32 %65, 14811
  %74 = mul nsw i32 %70, 7005
  %75 = add nsw i32 %74, %73
  %76 = getelementptr inbounds i32, i32* %0, i64 25
  %77 = load i32, i32* %76, align 4
  %78 = shl i32 %77, 16
  %79 = ashr exact i32 %78, 16
  %80 = mul nsw i32 %79, 15426
  %81 = getelementptr inbounds i32, i32* %0, i64 7
  %82 = load i32, i32* %81, align 4
  %83 = shl i32 %82, 16
  %84 = ashr exact i32 %83, 16
  %85 = mul nsw i32 %84, -5520
  %86 = add nsw i32 %85, %80
  %87 = mul nsw i32 %79, 5520
  %88 = mul nsw i32 %84, 15426
  %89 = add nsw i32 %88, %87
  %90 = getelementptr inbounds i32, i32* %0, i64 5
  %91 = load i32, i32* %90, align 4
  %92 = shl i32 %91, 16
  %93 = ashr exact i32 %92, 16
  %94 = mul nsw i32 %93, 3981
  %95 = getelementptr inbounds i32, i32* %0, i64 27
  %96 = load i32, i32* %95, align 4
  %97 = shl i32 %96, 16
  %98 = ashr exact i32 %97, 16
  %99 = mul nsw i32 %98, -15893
  %100 = add nsw i32 %99, %94
  %101 = mul nsw i32 %93, 15893
  %102 = mul nsw i32 %98, 3981
  %103 = add nsw i32 %102, %101
  %104 = getelementptr inbounds i32, i32* %0, i64 21
  %105 = load i32, i32* %104, align 4
  %106 = shl i32 %105, 16
  %107 = ashr exact i32 %106, 16
  %108 = mul nsw i32 %107, 14053
  %109 = getelementptr inbounds i32, i32* %0, i64 11
  %110 = load i32, i32* %109, align 4
  %111 = shl i32 %110, 16
  %112 = ashr exact i32 %111, 16
  %113 = mul nsw i32 %112, -8423
  %114 = add nsw i32 %113, %108
  %115 = mul nsw i32 %107, 8423
  %116 = mul nsw i32 %112, 14053
  %117 = add nsw i32 %116, %115
  %118 = getelementptr inbounds i32, i32* %0, i64 13
  %119 = load i32, i32* %118, align 4
  %120 = shl i32 %119, 16
  %121 = ashr exact i32 %120, 16
  %122 = mul nsw i32 %121, 9760
  %123 = getelementptr inbounds i32, i32* %0, i64 19
  %124 = load i32, i32* %123, align 4
  %125 = shl i32 %124, 16
  %126 = ashr exact i32 %125, 16
  %127 = mul nsw i32 %126, -13160
  %128 = add nsw i32 %127, %122
  %129 = mul nsw i32 %121, 13160
  %130 = mul nsw i32 %126, 9760
  %131 = add nsw i32 %130, %129
  %132 = getelementptr inbounds i32, i32* %0, i64 29
  %133 = load i32, i32* %132, align 4
  %134 = shl i32 %133, 16
  %135 = ashr exact i32 %134, 16
  %136 = mul nsw i32 %135, 16207
  %137 = getelementptr inbounds i32, i32* %0, i64 3
  %138 = load i32, i32* %137, align 4
  %139 = shl i32 %138, 16
  %140 = ashr exact i32 %139, 16
  %141 = mul nsw i32 %140, -2404
  %142 = add nsw i32 %141, %136
  %143 = mul nsw i32 %135, 2404
  %144 = mul nsw i32 %140, 16207
  %145 = add nsw i32 %144, %143
  %146 = shl i32 %19, 16
  %147 = ashr exact i32 %146, 16
  %148 = mul nsw i32 %147, 1606
  %149 = shl i32 %33, 16
  %150 = ashr exact i32 %149, 16
  %151 = mul nsw i32 %150, -16305
  %152 = add nsw i32 %151, %148
  %153 = mul nsw i32 %147, 16305
  %154 = mul nsw i32 %150, 1606
  %155 = add nsw i32 %154, %153
  %156 = shl i32 %21, 16
  %157 = ashr exact i32 %156, 16
  %158 = mul nsw i32 %157, 12665
  %159 = shl i32 %31, 16
  %160 = ashr exact i32 %159, 16
  %161 = mul nsw i32 %160, -10394
  %162 = add nsw i32 %161, %158
  %163 = mul nsw i32 %157, 10394
  %164 = mul nsw i32 %160, 12665
  %165 = add nsw i32 %164, %163
  %166 = shl i32 %23, 16
  %167 = ashr exact i32 %166, 16
  %168 = mul nsw i32 %167, 7723
  %169 = shl i32 %29, 16
  %170 = ashr exact i32 %169, 16
  %171 = mul nsw i32 %170, -14449
  %172 = add nsw i32 %171, %168
  %173 = mul nsw i32 %167, 14449
  %174 = mul nsw i32 %170, 7723
  %175 = add nsw i32 %174, %173
  %176 = shl i32 %25, 16
  %177 = ashr exact i32 %176, 16
  %178 = mul nsw i32 %177, 15679
  %179 = shl i32 %27, 16
  %180 = ashr exact i32 %179, 16
  %181 = mul nsw i32 %180, -4756
  %182 = add nsw i32 %181, %178
  %183 = mul nsw i32 %177, 4756
  %184 = mul nsw i32 %180, 15679
  %185 = add nsw i32 %184, %183
  %186 = shl i32 %44, 2
  %187 = add i32 %186, 32768
  %188 = ashr i32 %187, 16
  %189 = shl i32 %58, 2
  %190 = add i32 %189, 32768
  %191 = ashr i32 %190, 16
  %192 = add nsw i32 %191, %188
  %193 = sub nsw i32 %188, %191
  %194 = shl i32 %72, 2
  %195 = add i32 %194, 32768
  %196 = ashr i32 %195, 16
  %197 = shl i32 %86, 2
  %198 = add i32 %197, 32768
  %199 = ashr i32 %198, 16
  %200 = sub nsw i32 %199, %196
  %201 = add nsw i32 %199, %196
  %202 = shl i32 %100, 2
  %203 = add i32 %202, 32768
  %204 = ashr i32 %203, 16
  %205 = shl i32 %114, 2
  %206 = add i32 %205, 32768
  %207 = ashr i32 %206, 16
  %208 = add nsw i32 %207, %204
  %209 = sub nsw i32 %204, %207
  %210 = shl i32 %128, 2
  %211 = add i32 %210, 32768
  %212 = ashr i32 %211, 16
  %213 = shl i32 %142, 2
  %214 = add i32 %213, 32768
  %215 = ashr i32 %214, 16
  %216 = sub nsw i32 %215, %212
  %217 = add nsw i32 %215, %212
  %218 = shl i32 %145, 2
  %219 = add i32 %218, 32768
  %220 = ashr i32 %219, 16
  %221 = shl i32 %131, 2
  %222 = add i32 %221, 32768
  %223 = ashr i32 %222, 16
  %224 = add nsw i32 %220, %223
  %225 = sub nsw i32 %220, %223
  %226 = shl i32 %117, 2
  %227 = add i32 %226, 32768
  %228 = ashr i32 %227, 16
  %229 = shl i32 %103, 2
  %230 = add i32 %229, 32768
  %231 = ashr i32 %230, 16
  %232 = sub nsw i32 %231, %228
  %233 = add nsw i32 %228, %231
  %234 = shl i32 %89, 2
  %235 = add i32 %234, 32768
  %236 = ashr i32 %235, 16
  %237 = shl i32 %75, 2
  %238 = add i32 %237, 32768
  %239 = ashr i32 %238, 16
  %240 = add nsw i32 %236, %239
  %241 = sub nsw i32 %236, %239
  %242 = shl i32 %61, 2
  %243 = add i32 %242, 32768
  %244 = ashr i32 %243, 16
  %245 = shl i32 %47, 2
  %246 = add i32 %245, 32768
  %247 = ashr i32 %246, 16
  %248 = sub nsw i32 %247, %244
  %249 = add nsw i32 %244, %247
  %250 = shl i32 %11, 16
  %251 = ashr exact i32 %250, 16
  %252 = mul nsw i32 %251, 3196
  %253 = shl i32 %17, 16
  %254 = ashr exact i32 %253, 16
  %255 = mul nsw i32 %254, -16069
  %256 = add nsw i32 %255, %252
  %257 = mul nsw i32 %251, 16069
  %258 = mul nsw i32 %254, 3196
  %259 = add nsw i32 %258, %257
  %260 = shl i32 %13, 16
  %261 = ashr exact i32 %260, 16
  %262 = mul nsw i32 %261, 13623
  %263 = shl i32 %15, 16
  %264 = ashr exact i32 %263, 16
  %265 = mul nsw i32 %264, -9102
  %266 = add nsw i32 %265, %262
  %267 = mul nsw i32 %261, 9102
  %268 = mul nsw i32 %264, 13623
  %269 = add nsw i32 %268, %267
  %270 = shl i32 %152, 2
  %271 = add i32 %270, 32768
  %272 = ashr i32 %271, 16
  %273 = shl i32 %162, 2
  %274 = add i32 %273, 32768
  %275 = ashr i32 %274, 16
  %276 = add nsw i32 %272, %275
  %277 = sub nsw i32 %272, %275
  %278 = shl i32 %172, 2
  %279 = add i32 %278, 32768
  %280 = ashr i32 %279, 16
  %281 = shl i32 %182, 2
  %282 = add i32 %281, 32768
  %283 = ashr i32 %282, 16
  %284 = sub nsw i32 %283, %280
  %285 = add nsw i32 %280, %283
  %286 = shl i32 %185, 2
  %287 = add i32 %286, 32768
  %288 = ashr i32 %287, 16
  %289 = shl i32 %175, 2
  %290 = add i32 %289, 32768
  %291 = ashr i32 %290, 16
  %292 = add nsw i32 %291, %288
  %293 = sub nsw i32 %288, %291
  %294 = shl i32 %165, 2
  %295 = add i32 %294, 32768
  %296 = ashr i32 %295, 16
  %297 = shl i32 %155, 2
  %298 = add i32 %297, 32768
  %299 = ashr i32 %298, 16
  %300 = sub nsw i32 %299, %296
  %301 = add nsw i32 %299, %296
  %302 = shl i32 %193, 16
  %303 = ashr exact i32 %302, 16
  %304 = mul nsw i32 %303, -16069
  %305 = shl i32 %248, 16
  %306 = ashr exact i32 %305, 16
  %307 = mul nsw i32 %306, 3196
  %308 = add nsw i32 %304, %307
  %309 = mul nsw i32 %303, 3196
  %310 = mul nsw i32 %306, 16069
  %311 = add nsw i32 %309, %310
  %312 = shl i32 %200, 16
  %313 = ashr exact i32 %312, 16
  %314 = mul nsw i32 %313, -3196
  %315 = shl i32 %241, 16
  %316 = ashr exact i32 %315, 16
  %317 = mul nsw i32 %316, -16069
  %318 = add nsw i32 %314, %317
  %319 = mul nsw i32 %313, -16069
  %320 = mul nsw i32 %316, 3196
  %321 = add nsw i32 %319, %320
  %322 = shl i32 %209, 16
  %323 = ashr exact i32 %322, 16
  %324 = mul nsw i32 %323, -9102
  %325 = shl i32 %232, 16
  %326 = ashr exact i32 %325, 16
  %327 = mul nsw i32 %326, 13623
  %328 = add nsw i32 %324, %327
  %329 = mul nsw i32 %323, 13623
  %330 = mul nsw i32 %326, 9102
  %331 = add nsw i32 %329, %330
  %332 = shl i32 %216, 16
  %333 = ashr exact i32 %332, 16
  %334 = mul nsw i32 %333, -13623
  %335 = shl i32 %225, 16
  %336 = ashr exact i32 %335, 16
  %337 = mul nsw i32 %336, -9102
  %338 = add nsw i32 %334, %337
  %339 = mul nsw i32 %333, -9102
  %340 = mul nsw i32 %336, 13623
  %341 = add nsw i32 %339, %340
  %342 = shl i32 %3, 16
  %343 = ashr exact i32 %342, 16
  %344 = shl i32 %5, 16
  %345 = ashr exact i32 %344, 16
  %346 = add nsw i32 %345, %343
  %347 = sub nsw i32 %343, %345
  %348 = shl i32 %7, 16
  %349 = ashr exact i32 %348, 16
  %350 = mul nsw i32 %349, 6270
  %351 = shl i32 %9, 16
  %352 = ashr exact i32 %351, 16
  %353 = mul nsw i32 %352, -15137
  %354 = add nsw i32 %353, %350
  %355 = mul nsw i32 %349, 15137
  %356 = mul nsw i32 %352, 6270
  %357 = add nsw i32 %356, %355
  %358 = shl i32 %256, 2
  %359 = add i32 %358, 32768
  %360 = ashr i32 %359, 16
  %361 = shl i32 %266, 2
  %362 = add i32 %361, 32768
  %363 = ashr i32 %362, 16
  %364 = add nsw i32 %360, %363
  %365 = sub nsw i32 %360, %363
  %366 = shl i32 %269, 2
  %367 = add i32 %366, 32768
  %368 = ashr i32 %367, 16
  %369 = shl i32 %259, 2
  %370 = add i32 %369, 32768
  %371 = ashr i32 %370, 16
  %372 = sub nsw i32 %371, %368
  %373 = add nsw i32 %371, %368
  %374 = shl i32 %277, 16
  %375 = ashr exact i32 %374, 16
  %376 = mul nsw i32 %375, -15137
  %377 = shl i32 %300, 16
  %378 = ashr exact i32 %377, 16
  %379 = mul nsw i32 %378, 6270
  %380 = add nsw i32 %376, %379
  %381 = mul nsw i32 %375, 6270
  %382 = mul nsw i32 %378, 15137
  %383 = add nsw i32 %381, %382
  %384 = shl i32 %284, 16
  %385 = ashr exact i32 %384, 16
  %386 = mul nsw i32 %385, -6270
  %387 = shl i32 %293, 16
  %388 = ashr exact i32 %387, 16
  %389 = mul nsw i32 %388, -15137
  %390 = add nsw i32 %386, %389
  %391 = mul nsw i32 %385, -15137
  %392 = mul nsw i32 %388, 6270
  %393 = add nsw i32 %391, %392
  %394 = shl i32 %192, 16
  %395 = ashr exact i32 %394, 16
  %396 = shl i32 %201, 16
  %397 = ashr exact i32 %396, 16
  %398 = add nsw i32 %397, %395
  %399 = shl i32 %308, 2
  %400 = add i32 %399, 32768
  %401 = ashr i32 %400, 16
  %402 = shl i32 %318, 2
  %403 = add i32 %402, 32768
  %404 = ashr i32 %403, 16
  %405 = add nsw i32 %404, %401
  %406 = sub nsw i32 %401, %404
  %407 = sub nsw i32 %395, %397
  %408 = shl i32 %208, 16
  %409 = ashr exact i32 %408, 16
  %410 = shl i32 %217, 16
  %411 = ashr exact i32 %410, 16
  %412 = sub nsw i32 %411, %409
  %413 = shl i32 %328, 2
  %414 = add i32 %413, 32768
  %415 = ashr i32 %414, 16
  %416 = shl i32 %338, 2
  %417 = add i32 %416, 32768
  %418 = ashr i32 %417, 16
  %419 = sub nsw i32 %418, %415
  %420 = add nsw i32 %418, %415
  %421 = add nsw i32 %411, %409
  %422 = shl i32 %224, 16
  %423 = ashr exact i32 %422, 16
  %424 = shl i32 %233, 16
  %425 = ashr exact i32 %424, 16
  %426 = add nsw i32 %423, %425
  %427 = shl i32 %341, 2
  %428 = add i32 %427, 32768
  %429 = ashr i32 %428, 16
  %430 = shl i32 %331, 2
  %431 = add i32 %430, 32768
  %432 = ashr i32 %431, 16
  %433 = add nsw i32 %429, %432
  %434 = sub nsw i32 %429, %432
  %435 = sub nsw i32 %423, %425
  %436 = shl i32 %240, 16
  %437 = ashr exact i32 %436, 16
  %438 = shl i32 %249, 16
  %439 = ashr exact i32 %438, 16
  %440 = sub nsw i32 %439, %437
  %441 = shl i32 %321, 2
  %442 = add i32 %441, 32768
  %443 = ashr i32 %442, 16
  %444 = shl i32 %311, 2
  %445 = add i32 %444, 32768
  %446 = ashr i32 %445, 16
  %447 = sub nsw i32 %446, %443
  %448 = add nsw i32 %443, %446
  %449 = add nsw i32 %437, %439
  %450 = mul i32 %346, 46340
  %451 = add i32 %450, 32768
  %452 = ashr i32 %451, 16
  %453 = shl i32 %357, 2
  %454 = add i32 %453, 32768
  %455 = ashr i32 %454, 16
  %456 = add nsw i32 %455, %452
  %457 = mul i32 %347, 46340
  %458 = add i32 %457, 32768
  %459 = ashr i32 %458, 16
  %460 = shl i32 %354, 2
  %461 = add i32 %460, 32768
  %462 = ashr i32 %461, 16
  %463 = add nsw i32 %462, %459
  %464 = sub nsw i32 %459, %462
  %465 = sub nsw i32 %452, %455
  %466 = shl i32 %372, 16
  %467 = ashr exact i32 %466, 16
  %468 = shl i32 %365, 16
  %469 = ashr exact i32 %468, 16
  %470 = sub nsw i32 %467, %469
  %471 = add nsw i32 %469, %467
  %472 = shl i32 %276, 16
  %473 = ashr exact i32 %472, 16
  %474 = shl i32 %285, 16
  %475 = ashr exact i32 %474, 16
  %476 = add nsw i32 %473, %475
  %477 = shl i32 %380, 2
  %478 = add i32 %477, 32768
  %479 = ashr i32 %478, 16
  %480 = shl i32 %390, 2
  %481 = add i32 %480, 32768
  %482 = ashr i32 %481, 16
  %483 = add nsw i32 %479, %482
  %484 = sub nsw i32 %479, %482
  %485 = sub nsw i32 %473, %475
  %486 = shl i32 %292, 16
  %487 = ashr exact i32 %486, 16
  %488 = shl i32 %301, 16
  %489 = ashr exact i32 %488, 16
  %490 = sub nsw i32 %489, %487
  %491 = shl i32 %393, 2
  %492 = add i32 %491, 32768
  %493 = ashr i32 %492, 16
  %494 = shl i32 %383, 2
  %495 = add i32 %494, 32768
  %496 = ashr i32 %495, 16
  %497 = sub nsw i32 %496, %493
  %498 = add nsw i32 %496, %493
  %499 = add nsw i32 %489, %487
  %500 = shl i32 %406, 16
  %501 = ashr exact i32 %500, 16
  %502 = mul nsw i32 %501, -15137
  %503 = shl i32 %447, 16
  %504 = ashr exact i32 %503, 16
  %505 = mul nsw i32 %504, 6270
  %506 = add nsw i32 %502, %505
  %507 = mul nsw i32 %501, 6270
  %508 = mul nsw i32 %504, 15137
  %509 = add nsw i32 %507, %508
  %510 = shl i32 %407, 16
  %511 = ashr exact i32 %510, 16
  %512 = mul nsw i32 %511, -15137
  %513 = shl i32 %440, 16
  %514 = ashr exact i32 %513, 16
  %515 = mul nsw i32 %514, 6270
  %516 = add nsw i32 %512, %515
  %517 = mul nsw i32 %511, 6270
  %518 = mul nsw i32 %514, 15137
  %519 = add nsw i32 %517, %518
  %520 = shl i32 %412, 16
  %521 = ashr exact i32 %520, 16
  %522 = mul nsw i32 %521, -6270
  %523 = shl i32 %435, 16
  %524 = ashr exact i32 %523, 16
  %525 = mul nsw i32 %524, -15137
  %526 = add nsw i32 %522, %525
  %527 = mul nsw i32 %521, -15137
  %528 = mul nsw i32 %524, 6270
  %529 = add nsw i32 %527, %528
  %530 = shl i32 %419, 16
  %531 = ashr exact i32 %530, 16
  %532 = mul nsw i32 %531, -6270
  %533 = shl i32 %434, 16
  %534 = ashr exact i32 %533, 16
  %535 = mul nsw i32 %534, -15137
  %536 = add nsw i32 %532, %535
  %537 = mul nsw i32 %531, -15137
  %538 = mul nsw i32 %534, 6270
  %539 = add nsw i32 %537, %538
  %540 = shl i32 %456, 16
  %541 = ashr exact i32 %540, 16
  %542 = shl i32 %373, 16
  %543 = ashr exact i32 %542, 16
  %544 = add nsw i32 %543, %541
  %545 = shl i32 %463, 16
  %546 = ashr exact i32 %545, 16
  %547 = mul i32 %471, 46340
  %548 = add i32 %547, 32768
  %549 = ashr i32 %548, 16
  %550 = add nsw i32 %549, %546
  %551 = shl i32 %464, 16
  %552 = ashr exact i32 %551, 16
  %553 = mul i32 %470, 46340
  %554 = add i32 %553, 32768
  %555 = ashr i32 %554, 16
  %556 = add nsw i32 %555, %552
  %557 = shl i32 %465, 16
  %558 = ashr exact i32 %557, 16
  %559 = shl i32 %364, 16
  %560 = ashr exact i32 %559, 16
  %561 = add nsw i32 %560, %558
  %562 = sub nsw i32 %558, %560
  %563 = sub nsw i32 %552, %555
  %564 = sub nsw i32 %546, %549
  %565 = sub nsw i32 %541, %543
  %566 = shl i32 %484, 16
  %567 = ashr exact i32 %566, 16
  %568 = shl i32 %497, 16
  %569 = ashr exact i32 %568, 16
  %570 = sub nsw i32 %569, %567
  %571 = add nsw i32 %567, %569
  %572 = shl i32 %485, 16
  %573 = ashr exact i32 %572, 16
  %574 = shl i32 %490, 16
  %575 = ashr exact i32 %574, 16
  %576 = sub nsw i32 %575, %573
  %577 = add nsw i32 %573, %575
  %578 = shl i32 %398, 16
  %579 = ashr exact i32 %578, 16
  %580 = shl i32 %421, 16
  %581 = ashr exact i32 %580, 16
  %582 = add nsw i32 %581, %579
  %583 = shl i32 %405, 16
  %584 = ashr exact i32 %583, 16
  %585 = shl i32 %420, 16
  %586 = ashr exact i32 %585, 16
  %587 = add nsw i32 %586, %584
  %588 = shl i32 %506, 2
  %589 = add i32 %588, 32768
  %590 = ashr i32 %589, 16
  %591 = shl i32 %536, 2
  %592 = add i32 %591, 32768
  %593 = ashr i32 %592, 16
  %594 = add nsw i32 %593, %590
  %595 = shl i32 %516, 2
  %596 = add i32 %595, 32768
  %597 = ashr i32 %596, 16
  %598 = shl i32 %526, 2
  %599 = add i32 %598, 32768
  %600 = ashr i32 %599, 16
  %601 = add nsw i32 %600, %597
  %602 = sub nsw i32 %597, %600
  %603 = sub nsw i32 %590, %593
  %604 = sub nsw i32 %584, %586
  %605 = sub nsw i32 %579, %581
  %606 = shl i32 %426, 16
  %607 = ashr exact i32 %606, 16
  %608 = shl i32 %449, 16
  %609 = ashr exact i32 %608, 16
  %610 = sub nsw i32 %609, %607
  %611 = shl i32 %433, 16
  %612 = ashr exact i32 %611, 16
  %613 = shl i32 %448, 16
  %614 = ashr exact i32 %613, 16
  %615 = sub nsw i32 %614, %612
  %616 = shl i32 %539, 2
  %617 = add i32 %616, 32768
  %618 = ashr i32 %617, 16
  %619 = shl i32 %509, 2
  %620 = add i32 %619, 32768
  %621 = ashr i32 %620, 16
  %622 = sub nsw i32 %621, %618
  %623 = shl i32 %529, 2
  %624 = add i32 %623, 32768
  %625 = ashr i32 %624, 16
  %626 = shl i32 %519, 2
  %627 = add i32 %626, 32768
  %628 = ashr i32 %627, 16
  %629 = sub nsw i32 %628, %625
  %630 = add nsw i32 %625, %628
  %631 = add nsw i32 %618, %621
  %632 = add nsw i32 %612, %614
  %633 = add nsw i32 %607, %609
  %634 = shl i32 %544, 16
  %635 = ashr exact i32 %634, 16
  %636 = shl i32 %499, 16
  %637 = ashr exact i32 %636, 16
  %638 = add nsw i32 %637, %635
  %639 = shl i32 %550, 16
  %640 = ashr exact i32 %639, 16
  %641 = shl i32 %498, 16
  %642 = ashr exact i32 %641, 16
  %643 = add nsw i32 %642, %640
  %644 = shl i32 %556, 16
  %645 = ashr exact i32 %644, 16
  %646 = mul i32 %571, 46340
  %647 = add i32 %646, 32768
  %648 = ashr i32 %647, 16
  %649 = add nsw i32 %648, %645
  %650 = shl i32 %561, 16
  %651 = ashr exact i32 %650, 16
  %652 = mul i32 %577, 46340
  %653 = add i32 %652, 32768
  %654 = ashr i32 %653, 16
  %655 = add nsw i32 %654, %651
  %656 = shl i32 %562, 16
  %657 = ashr exact i32 %656, 16
  %658 = mul i32 %576, 46340
  %659 = add i32 %658, 32768
  %660 = ashr i32 %659, 16
  %661 = add nsw i32 %660, %657
  %662 = shl i32 %563, 16
  %663 = ashr exact i32 %662, 16
  %664 = mul i32 %570, 46340
  %665 = add i32 %664, 32768
  %666 = ashr i32 %665, 16
  %667 = add nsw i32 %666, %663
  %668 = shl i32 %564, 16
  %669 = ashr exact i32 %668, 16
  %670 = shl i32 %483, 16
  %671 = ashr exact i32 %670, 16
  %672 = add nsw i32 %671, %669
  %673 = shl i32 %565, 16
  %674 = ashr exact i32 %673, 16
  %675 = shl i32 %476, 16
  %676 = ashr exact i32 %675, 16
  %677 = add nsw i32 %676, %674
  %678 = sub nsw i32 %674, %676
  %679 = sub nsw i32 %669, %671
  %680 = sub nsw i32 %663, %666
  %681 = sub nsw i32 %657, %660
  %682 = sub nsw i32 %651, %654
  %683 = sub nsw i32 %645, %648
  %684 = sub nsw i32 %640, %642
  %685 = sub nsw i32 %635, %637
  %686 = shl i32 %602, 16
  %687 = ashr exact i32 %686, 16
  %688 = shl i32 %629, 16
  %689 = ashr exact i32 %688, 16
  %690 = sub nsw i32 %689, %687
  %691 = add nsw i32 %687, %689
  %692 = shl i32 %603, 16
  %693 = ashr exact i32 %692, 16
  %694 = shl i32 %622, 16
  %695 = ashr exact i32 %694, 16
  %696 = sub nsw i32 %695, %693
  %697 = add nsw i32 %693, %695
  %698 = shl i32 %604, 16
  %699 = ashr exact i32 %698, 16
  %700 = shl i32 %615, 16
  %701 = ashr exact i32 %700, 16
  %702 = sub nsw i32 %701, %699
  %703 = add nsw i32 %699, %701
  %704 = shl i32 %605, 16
  %705 = ashr exact i32 %704, 16
  %706 = shl i32 %610, 16
  %707 = ashr exact i32 %706, 16
  %708 = sub nsw i32 %707, %705
  %709 = add nsw i32 %705, %707
  %710 = shl i32 %638, 16
  %711 = ashr exact i32 %710, 16
  %712 = shl i32 %633, 16
  %713 = ashr exact i32 %712, 16
  %714 = add nsw i32 %713, %711
  store i32 %714, i32* %1, align 4
  %715 = shl i32 %643, 16
  %716 = ashr exact i32 %715, 16
  %717 = shl i32 %632, 16
  %718 = ashr exact i32 %717, 16
  %719 = add nsw i32 %718, %716
  %720 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %719, i32* %720, align 4
  %721 = shl i32 %649, 16
  %722 = ashr exact i32 %721, 16
  %723 = shl i32 %631, 16
  %724 = ashr exact i32 %723, 16
  %725 = add nsw i32 %724, %722
  %726 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %725, i32* %726, align 4
  %727 = shl i32 %655, 16
  %728 = ashr exact i32 %727, 16
  %729 = shl i32 %630, 16
  %730 = ashr exact i32 %729, 16
  %731 = add nsw i32 %730, %728
  %732 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %731, i32* %732, align 4
  %733 = shl i32 %661, 16
  %734 = ashr exact i32 %733, 16
  %735 = mul i32 %691, 46340
  %736 = add i32 %735, 32768
  %737 = ashr i32 %736, 16
  %738 = add nsw i32 %737, %734
  %739 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %738, i32* %739, align 4
  %740 = shl i32 %667, 16
  %741 = ashr exact i32 %740, 16
  %742 = mul i32 %697, 46340
  %743 = add i32 %742, 32768
  %744 = ashr i32 %743, 16
  %745 = add nsw i32 %744, %741
  %746 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %745, i32* %746, align 4
  %747 = shl i32 %672, 16
  %748 = ashr exact i32 %747, 16
  %749 = mul i32 %703, 46340
  %750 = add i32 %749, 32768
  %751 = ashr i32 %750, 16
  %752 = add nsw i32 %751, %748
  %753 = getelementptr inbounds i32, i32* %1, i64 6
  store i32 %752, i32* %753, align 4
  %754 = shl i32 %677, 16
  %755 = ashr exact i32 %754, 16
  %756 = mul i32 %709, 46340
  %757 = add i32 %756, 32768
  %758 = ashr i32 %757, 16
  %759 = add nsw i32 %758, %755
  %760 = getelementptr inbounds i32, i32* %1, i64 7
  store i32 %759, i32* %760, align 4
  %761 = shl i32 %678, 16
  %762 = ashr exact i32 %761, 16
  %763 = mul i32 %708, 46340
  %764 = add i32 %763, 32768
  %765 = ashr i32 %764, 16
  %766 = add nsw i32 %765, %762
  %767 = getelementptr inbounds i32, i32* %1, i64 8
  store i32 %766, i32* %767, align 4
  %768 = shl i32 %679, 16
  %769 = ashr exact i32 %768, 16
  %770 = mul i32 %702, 46340
  %771 = add i32 %770, 32768
  %772 = ashr i32 %771, 16
  %773 = add nsw i32 %772, %769
  %774 = getelementptr inbounds i32, i32* %1, i64 9
  store i32 %773, i32* %774, align 4
  %775 = shl i32 %680, 16
  %776 = ashr exact i32 %775, 16
  %777 = mul i32 %696, 46340
  %778 = add i32 %777, 32768
  %779 = ashr i32 %778, 16
  %780 = add nsw i32 %779, %776
  %781 = getelementptr inbounds i32, i32* %1, i64 10
  store i32 %780, i32* %781, align 4
  %782 = shl i32 %681, 16
  %783 = ashr exact i32 %782, 16
  %784 = mul i32 %690, 46340
  %785 = add i32 %784, 32768
  %786 = ashr i32 %785, 16
  %787 = add nsw i32 %786, %783
  %788 = getelementptr inbounds i32, i32* %1, i64 11
  store i32 %787, i32* %788, align 4
  %789 = shl i32 %682, 16
  %790 = ashr exact i32 %789, 16
  %791 = shl i32 %601, 16
  %792 = ashr exact i32 %791, 16
  %793 = add nsw i32 %792, %790
  %794 = getelementptr inbounds i32, i32* %1, i64 12
  store i32 %793, i32* %794, align 4
  %795 = shl i32 %683, 16
  %796 = ashr exact i32 %795, 16
  %797 = shl i32 %594, 16
  %798 = ashr exact i32 %797, 16
  %799 = add nsw i32 %798, %796
  %800 = getelementptr inbounds i32, i32* %1, i64 13
  store i32 %799, i32* %800, align 4
  %801 = shl i32 %684, 16
  %802 = ashr exact i32 %801, 16
  %803 = shl i32 %587, 16
  %804 = ashr exact i32 %803, 16
  %805 = add nsw i32 %804, %802
  %806 = getelementptr inbounds i32, i32* %1, i64 14
  store i32 %805, i32* %806, align 4
  %807 = shl i32 %685, 16
  %808 = ashr exact i32 %807, 16
  %809 = shl i32 %582, 16
  %810 = ashr exact i32 %809, 16
  %811 = add nsw i32 %810, %808
  %812 = getelementptr inbounds i32, i32* %1, i64 15
  store i32 %811, i32* %812, align 4
  %813 = sub nsw i32 %808, %810
  %814 = getelementptr inbounds i32, i32* %1, i64 16
  store i32 %813, i32* %814, align 4
  %815 = sub nsw i32 %802, %804
  %816 = getelementptr inbounds i32, i32* %1, i64 17
  store i32 %815, i32* %816, align 4
  %817 = sub nsw i32 %796, %798
  %818 = getelementptr inbounds i32, i32* %1, i64 18
  store i32 %817, i32* %818, align 4
  %819 = sub nsw i32 %790, %792
  %820 = getelementptr inbounds i32, i32* %1, i64 19
  store i32 %819, i32* %820, align 4
  %821 = sub nsw i32 %783, %786
  %822 = getelementptr inbounds i32, i32* %1, i64 20
  store i32 %821, i32* %822, align 4
  %823 = sub nsw i32 %776, %779
  %824 = getelementptr inbounds i32, i32* %1, i64 21
  store i32 %823, i32* %824, align 4
  %825 = sub nsw i32 %769, %772
  %826 = getelementptr inbounds i32, i32* %1, i64 22
  store i32 %825, i32* %826, align 4
  %827 = sub nsw i32 %762, %765
  %828 = getelementptr inbounds i32, i32* %1, i64 23
  store i32 %827, i32* %828, align 4
  %829 = sub nsw i32 %755, %758
  %830 = getelementptr inbounds i32, i32* %1, i64 24
  store i32 %829, i32* %830, align 4
  %831 = sub nsw i32 %748, %751
  %832 = getelementptr inbounds i32, i32* %1, i64 25
  store i32 %831, i32* %832, align 4
  %833 = sub nsw i32 %741, %744
  %834 = getelementptr inbounds i32, i32* %1, i64 26
  store i32 %833, i32* %834, align 4
  %835 = sub nsw i32 %734, %737
  %836 = getelementptr inbounds i32, i32* %1, i64 27
  store i32 %835, i32* %836, align 4
  %837 = sub nsw i32 %728, %730
  %838 = getelementptr inbounds i32, i32* %1, i64 28
  store i32 %837, i32* %838, align 4
  %839 = sub nsw i32 %722, %724
  %840 = getelementptr inbounds i32, i32* %1, i64 29
  store i32 %839, i32* %840, align 4
  %841 = sub nsw i32 %716, %718
  %842 = getelementptr inbounds i32, i32* %1, i64 30
  store i32 %841, i32* %842, align 4
  %843 = sub nsw i32 %711, %713
  %844 = getelementptr inbounds i32, i32* %1, i64 31
  store i32 %843, i32* %844, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_idct32x32_1024_add_c(i32* readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = alloca [1024 x i32], align 16
  %5 = alloca [32 x i32], align 16
  %6 = alloca [32 x i32], align 16
  %7 = bitcast [1024 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 4096, i1 false)
  %8 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 0
  %9 = bitcast [32 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 128, i1 false)
  %10 = bitcast [32 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 128, i1 false)
  br label %11

11:                                               ; preds = %60, %3
  %12 = phi i32* [ %8, %3 ], [ %62, %60 ]
  %13 = phi i32 [ 0, %3 ], [ %63, %60 ]
  %14 = phi i32* [ %0, %3 ], [ %61, %60 ]
  %15 = bitcast i32* %14 to <32 x i32>*
  %16 = load <32 x i32>, <32 x i32>* %15, align 4
  %17 = shufflevector <32 x i32> %16, <32 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %18 = or <32 x i32> %16, %17
  %19 = shufflevector <32 x i32> %18, <32 x i32> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = or <32 x i32> %18, %19
  %21 = shufflevector <32 x i32> %20, <32 x i32> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = or <32 x i32> %20, %21
  %23 = shufflevector <32 x i32> %22, <32 x i32> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %24 = or <32 x i32> %22, %23
  %25 = shufflevector <32 x i32> %24, <32 x i32> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %26 = or <32 x i32> %24, %25
  %27 = extractelement <32 x i32> %26, i32 0
  %28 = trunc i32 %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %58, label %57

30:                                               ; preds = %60
  %31 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 0
  %32 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 0
  %33 = sext i32 %2 to i64
  %34 = icmp eq i32 %2, 1
  %35 = bitcast [32 x i32]* %6 to <4 x i32>*
  %36 = shl nsw i64 %33, 2
  %37 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = shl nsw i64 %33, 3
  %40 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 8
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = mul nsw i64 %33, 12
  %43 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 12
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = shl nsw i64 %33, 4
  %46 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 16
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = mul nsw i64 %33, 20
  %49 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 20
  %50 = bitcast i32* %49 to <4 x i32>*
  %51 = mul nsw i64 %33, 24
  %52 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 24
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = mul nsw i64 %33, 28
  %55 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 28
  %56 = bitcast i32* %55 to <4 x i32>*
  br label %65

57:                                               ; preds = %11
  call void @idct32_c(i32* %14, i32* %12)
  br label %60

58:                                               ; preds = %11
  %59 = bitcast i32* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 128, i1 false)
  br label %60

60:                                               ; preds = %58, %57
  %61 = getelementptr inbounds i32, i32* %14, i64 32
  %62 = getelementptr inbounds i32, i32* %12, i64 32
  %63 = add nuw nsw i32 %13, 1
  %64 = icmp eq i32 %63, 32
  br i1 %64, label %30, label %11

65:                                               ; preds = %234, %30
  %66 = phi i64 [ 0, %30 ], [ %235, %234 ]
  br label %67

67:                                               ; preds = %67, %65
  %68 = phi i64 [ 0, %65 ], [ %92, %67 ]
  %69 = shl i64 %68, 5
  %70 = add nuw nsw i64 %69, %66
  %71 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %68
  store i32 %72, i32* %73, align 16
  %74 = or i64 %68, 1
  %75 = shl i64 %74, 5
  %76 = add nuw nsw i64 %75, %66
  %77 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %74
  store i32 %78, i32* %79, align 4
  %80 = or i64 %68, 2
  %81 = shl i64 %80, 5
  %82 = add nuw nsw i64 %81, %66
  %83 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %80
  store i32 %84, i32* %85, align 8
  %86 = or i64 %68, 3
  %87 = shl i64 %86, 5
  %88 = add nuw nsw i64 %87, %66
  %89 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %86
  store i32 %90, i32* %91, align 4
  %92 = add nuw nsw i64 %68, 4
  %93 = icmp eq i64 %92, 32
  br i1 %93, label %94, label %67

94:                                               ; preds = %67
  call void @idct32_c(i32* nonnull %31, i32* nonnull %32)
  br i1 %34, label %95, label %215

95:                                               ; preds = %94
  %96 = getelementptr inbounds i8, i8* %1, i64 %66
  %97 = bitcast i8* %96 to <4 x i8>*
  %98 = load <4 x i8>, <4 x i8>* %97, align 1
  %99 = load <4 x i32>, <4 x i32>* %35, align 16
  %100 = add nsw <4 x i32> %99, <i32 32, i32 32, i32 32, i32 32>
  %101 = ashr <4 x i32> %100, <i32 6, i32 6, i32 6, i32 6>
  %102 = zext <4 x i8> %98 to <4 x i32>
  %103 = add nsw <4 x i32> %101, %102
  %104 = icmp sgt <4 x i32> %103, zeroinitializer
  %105 = select <4 x i1> %104, <4 x i32> %103, <4 x i32> zeroinitializer
  %106 = icmp slt <4 x i32> %105, <i32 255, i32 255, i32 255, i32 255>
  %107 = select <4 x i1> %106, <4 x i32> %105, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %108 = trunc <4 x i32> %107 to <4 x i8>
  %109 = bitcast i8* %96 to <4 x i8>*
  store <4 x i8> %108, <4 x i8>* %109, align 1
  %110 = add nsw i64 %36, %66
  %111 = getelementptr inbounds i8, i8* %1, i64 %110
  %112 = bitcast i8* %111 to <4 x i8>*
  %113 = load <4 x i8>, <4 x i8>* %112, align 1
  %114 = load <4 x i32>, <4 x i32>* %38, align 16
  %115 = add nsw <4 x i32> %114, <i32 32, i32 32, i32 32, i32 32>
  %116 = ashr <4 x i32> %115, <i32 6, i32 6, i32 6, i32 6>
  %117 = zext <4 x i8> %113 to <4 x i32>
  %118 = add nsw <4 x i32> %116, %117
  %119 = icmp sgt <4 x i32> %118, zeroinitializer
  %120 = select <4 x i1> %119, <4 x i32> %118, <4 x i32> zeroinitializer
  %121 = icmp slt <4 x i32> %120, <i32 255, i32 255, i32 255, i32 255>
  %122 = select <4 x i1> %121, <4 x i32> %120, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %123 = trunc <4 x i32> %122 to <4 x i8>
  %124 = bitcast i8* %111 to <4 x i8>*
  store <4 x i8> %123, <4 x i8>* %124, align 1
  %125 = add nsw i64 %39, %66
  %126 = getelementptr inbounds i8, i8* %1, i64 %125
  %127 = bitcast i8* %126 to <4 x i8>*
  %128 = load <4 x i8>, <4 x i8>* %127, align 1
  %129 = load <4 x i32>, <4 x i32>* %41, align 16
  %130 = add nsw <4 x i32> %129, <i32 32, i32 32, i32 32, i32 32>
  %131 = ashr <4 x i32> %130, <i32 6, i32 6, i32 6, i32 6>
  %132 = zext <4 x i8> %128 to <4 x i32>
  %133 = add nsw <4 x i32> %131, %132
  %134 = icmp sgt <4 x i32> %133, zeroinitializer
  %135 = select <4 x i1> %134, <4 x i32> %133, <4 x i32> zeroinitializer
  %136 = icmp slt <4 x i32> %135, <i32 255, i32 255, i32 255, i32 255>
  %137 = select <4 x i1> %136, <4 x i32> %135, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %138 = trunc <4 x i32> %137 to <4 x i8>
  %139 = bitcast i8* %126 to <4 x i8>*
  store <4 x i8> %138, <4 x i8>* %139, align 1
  %140 = add nsw i64 %42, %66
  %141 = getelementptr inbounds i8, i8* %1, i64 %140
  %142 = bitcast i8* %141 to <4 x i8>*
  %143 = load <4 x i8>, <4 x i8>* %142, align 1
  %144 = load <4 x i32>, <4 x i32>* %44, align 16
  %145 = add nsw <4 x i32> %144, <i32 32, i32 32, i32 32, i32 32>
  %146 = ashr <4 x i32> %145, <i32 6, i32 6, i32 6, i32 6>
  %147 = zext <4 x i8> %143 to <4 x i32>
  %148 = add nsw <4 x i32> %146, %147
  %149 = icmp sgt <4 x i32> %148, zeroinitializer
  %150 = select <4 x i1> %149, <4 x i32> %148, <4 x i32> zeroinitializer
  %151 = icmp slt <4 x i32> %150, <i32 255, i32 255, i32 255, i32 255>
  %152 = select <4 x i1> %151, <4 x i32> %150, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %153 = trunc <4 x i32> %152 to <4 x i8>
  %154 = bitcast i8* %141 to <4 x i8>*
  store <4 x i8> %153, <4 x i8>* %154, align 1
  %155 = add nsw i64 %45, %66
  %156 = getelementptr inbounds i8, i8* %1, i64 %155
  %157 = bitcast i8* %156 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1
  %159 = load <4 x i32>, <4 x i32>* %47, align 16
  %160 = add nsw <4 x i32> %159, <i32 32, i32 32, i32 32, i32 32>
  %161 = ashr <4 x i32> %160, <i32 6, i32 6, i32 6, i32 6>
  %162 = zext <4 x i8> %158 to <4 x i32>
  %163 = add nsw <4 x i32> %161, %162
  %164 = icmp sgt <4 x i32> %163, zeroinitializer
  %165 = select <4 x i1> %164, <4 x i32> %163, <4 x i32> zeroinitializer
  %166 = icmp slt <4 x i32> %165, <i32 255, i32 255, i32 255, i32 255>
  %167 = select <4 x i1> %166, <4 x i32> %165, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %168 = trunc <4 x i32> %167 to <4 x i8>
  %169 = bitcast i8* %156 to <4 x i8>*
  store <4 x i8> %168, <4 x i8>* %169, align 1
  %170 = add nsw i64 %48, %66
  %171 = getelementptr inbounds i8, i8* %1, i64 %170
  %172 = bitcast i8* %171 to <4 x i8>*
  %173 = load <4 x i8>, <4 x i8>* %172, align 1
  %174 = load <4 x i32>, <4 x i32>* %50, align 16
  %175 = add nsw <4 x i32> %174, <i32 32, i32 32, i32 32, i32 32>
  %176 = ashr <4 x i32> %175, <i32 6, i32 6, i32 6, i32 6>
  %177 = zext <4 x i8> %173 to <4 x i32>
  %178 = add nsw <4 x i32> %176, %177
  %179 = icmp sgt <4 x i32> %178, zeroinitializer
  %180 = select <4 x i1> %179, <4 x i32> %178, <4 x i32> zeroinitializer
  %181 = icmp slt <4 x i32> %180, <i32 255, i32 255, i32 255, i32 255>
  %182 = select <4 x i1> %181, <4 x i32> %180, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %183 = trunc <4 x i32> %182 to <4 x i8>
  %184 = bitcast i8* %171 to <4 x i8>*
  store <4 x i8> %183, <4 x i8>* %184, align 1
  %185 = add nsw i64 %51, %66
  %186 = getelementptr inbounds i8, i8* %1, i64 %185
  %187 = bitcast i8* %186 to <4 x i8>*
  %188 = load <4 x i8>, <4 x i8>* %187, align 1
  %189 = load <4 x i32>, <4 x i32>* %53, align 16
  %190 = add nsw <4 x i32> %189, <i32 32, i32 32, i32 32, i32 32>
  %191 = ashr <4 x i32> %190, <i32 6, i32 6, i32 6, i32 6>
  %192 = zext <4 x i8> %188 to <4 x i32>
  %193 = add nsw <4 x i32> %191, %192
  %194 = icmp sgt <4 x i32> %193, zeroinitializer
  %195 = select <4 x i1> %194, <4 x i32> %193, <4 x i32> zeroinitializer
  %196 = icmp slt <4 x i32> %195, <i32 255, i32 255, i32 255, i32 255>
  %197 = select <4 x i1> %196, <4 x i32> %195, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %198 = trunc <4 x i32> %197 to <4 x i8>
  %199 = bitcast i8* %186 to <4 x i8>*
  store <4 x i8> %198, <4 x i8>* %199, align 1
  %200 = add nsw i64 %54, %66
  %201 = getelementptr inbounds i8, i8* %1, i64 %200
  %202 = bitcast i8* %201 to <4 x i8>*
  %203 = load <4 x i8>, <4 x i8>* %202, align 1
  %204 = load <4 x i32>, <4 x i32>* %56, align 16
  %205 = add nsw <4 x i32> %204, <i32 32, i32 32, i32 32, i32 32>
  %206 = ashr <4 x i32> %205, <i32 6, i32 6, i32 6, i32 6>
  %207 = zext <4 x i8> %203 to <4 x i32>
  %208 = add nsw <4 x i32> %206, %207
  %209 = icmp sgt <4 x i32> %208, zeroinitializer
  %210 = select <4 x i1> %209, <4 x i32> %208, <4 x i32> zeroinitializer
  %211 = icmp slt <4 x i32> %210, <i32 255, i32 255, i32 255, i32 255>
  %212 = select <4 x i1> %211, <4 x i32> %210, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %213 = trunc <4 x i32> %212 to <4 x i8>
  %214 = bitcast i8* %201 to <4 x i8>*
  store <4 x i8> %213, <4 x i8>* %214, align 1
  br label %234

215:                                              ; preds = %94, %215
  %216 = phi i64 [ %232, %215 ], [ 0, %94 ]
  %217 = mul nsw i64 %216, %33
  %218 = add nsw i64 %217, %66
  %219 = getelementptr inbounds i8, i8* %1, i64 %218
  %220 = load i8, i8* %219, align 1
  %221 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %216
  %222 = load i32, i32* %221, align 4
  %223 = add nsw i32 %222, 32
  %224 = ashr i32 %223, 6
  %225 = zext i8 %220 to i32
  %226 = add nsw i32 %224, %225
  %227 = icmp sgt i32 %226, 0
  %228 = select i1 %227, i32 %226, i32 0
  %229 = icmp slt i32 %228, 255
  %230 = select i1 %229, i32 %228, i32 255
  %231 = trunc i32 %230 to i8
  store i8 %231, i8* %219, align 1
  %232 = add nuw nsw i64 %216, 1
  %233 = icmp eq i64 %232, 32
  br i1 %233, label %234, label %215, !llvm.loop !6

234:                                              ; preds = %215, %95
  %235 = add nuw nsw i64 %66, 1
  %236 = icmp eq i64 %235, 32
  br i1 %236, label %237, label %65

237:                                              ; preds = %234
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %7) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_idct32x32_135_add_c(i32* readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = alloca [1024 x i32], align 16
  %5 = alloca [32 x i32], align 16
  %6 = alloca [32 x i32], align 16
  %7 = bitcast [1024 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 4096, i1 false)
  %8 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 0
  %9 = bitcast [32 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 128, i1 false)
  %10 = bitcast [32 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 128, i1 false)
  call void @idct32_c(i32* %0, i32* nonnull %8)
  %11 = getelementptr inbounds i32, i32* %0, i64 32
  %12 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 32
  call void @idct32_c(i32* %11, i32* %12)
  %13 = getelementptr inbounds i32, i32* %0, i64 64
  %14 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 64
  call void @idct32_c(i32* %13, i32* %14)
  %15 = getelementptr inbounds i32, i32* %0, i64 96
  %16 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 96
  call void @idct32_c(i32* %15, i32* %16)
  %17 = getelementptr inbounds i32, i32* %0, i64 128
  %18 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 128
  call void @idct32_c(i32* %17, i32* %18)
  %19 = getelementptr inbounds i32, i32* %0, i64 160
  %20 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 160
  call void @idct32_c(i32* %19, i32* %20)
  %21 = getelementptr inbounds i32, i32* %0, i64 192
  %22 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 192
  call void @idct32_c(i32* %21, i32* %22)
  %23 = getelementptr inbounds i32, i32* %0, i64 224
  %24 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 224
  call void @idct32_c(i32* %23, i32* %24)
  %25 = getelementptr inbounds i32, i32* %0, i64 256
  %26 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 256
  call void @idct32_c(i32* %25, i32* %26)
  %27 = getelementptr inbounds i32, i32* %0, i64 288
  %28 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 288
  call void @idct32_c(i32* %27, i32* %28)
  %29 = getelementptr inbounds i32, i32* %0, i64 320
  %30 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 320
  call void @idct32_c(i32* %29, i32* %30)
  %31 = getelementptr inbounds i32, i32* %0, i64 352
  %32 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 352
  call void @idct32_c(i32* %31, i32* %32)
  %33 = getelementptr inbounds i32, i32* %0, i64 384
  %34 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 384
  call void @idct32_c(i32* %33, i32* %34)
  %35 = getelementptr inbounds i32, i32* %0, i64 416
  %36 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 416
  call void @idct32_c(i32* %35, i32* %36)
  %37 = getelementptr inbounds i32, i32* %0, i64 448
  %38 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 448
  call void @idct32_c(i32* %37, i32* %38)
  %39 = getelementptr inbounds i32, i32* %0, i64 480
  %40 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 480
  call void @idct32_c(i32* %39, i32* %40)
  %41 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 0
  %42 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 0
  %43 = sext i32 %2 to i64
  %44 = icmp eq i32 %2, 1
  %45 = bitcast [32 x i32]* %6 to <4 x i32>*
  %46 = shl nsw i64 %43, 2
  %47 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 4
  %48 = bitcast i32* %47 to <4 x i32>*
  %49 = shl nsw i64 %43, 3
  %50 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 8
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = mul nsw i64 %43, 12
  %53 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 12
  %54 = bitcast i32* %53 to <4 x i32>*
  %55 = shl nsw i64 %43, 4
  %56 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 16
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = mul nsw i64 %43, 20
  %59 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 20
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = mul nsw i64 %43, 24
  %62 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 24
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = mul nsw i64 %43, 28
  %65 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 28
  %66 = bitcast i32* %65 to <4 x i32>*
  br label %67

67:                                               ; preds = %236, %3
  %68 = phi i64 [ 0, %3 ], [ %237, %236 ]
  br label %69

69:                                               ; preds = %69, %67
  %70 = phi i64 [ 0, %67 ], [ %94, %69 ]
  %71 = shl i64 %70, 5
  %72 = add nuw nsw i64 %71, %68
  %73 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %70
  store i32 %74, i32* %75, align 16
  %76 = or i64 %70, 1
  %77 = shl i64 %76, 5
  %78 = add nuw nsw i64 %77, %68
  %79 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %76
  store i32 %80, i32* %81, align 4
  %82 = or i64 %70, 2
  %83 = shl i64 %82, 5
  %84 = add nuw nsw i64 %83, %68
  %85 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %82
  store i32 %86, i32* %87, align 8
  %88 = or i64 %70, 3
  %89 = shl i64 %88, 5
  %90 = add nuw nsw i64 %89, %68
  %91 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %88
  store i32 %92, i32* %93, align 4
  %94 = add nuw nsw i64 %70, 4
  %95 = icmp eq i64 %94, 32
  br i1 %95, label %96, label %69

96:                                               ; preds = %69
  call void @idct32_c(i32* nonnull %41, i32* nonnull %42)
  br i1 %44, label %97, label %217

97:                                               ; preds = %96
  %98 = getelementptr inbounds i8, i8* %1, i64 %68
  %99 = bitcast i8* %98 to <4 x i8>*
  %100 = load <4 x i8>, <4 x i8>* %99, align 1
  %101 = load <4 x i32>, <4 x i32>* %45, align 16
  %102 = add nsw <4 x i32> %101, <i32 32, i32 32, i32 32, i32 32>
  %103 = ashr <4 x i32> %102, <i32 6, i32 6, i32 6, i32 6>
  %104 = zext <4 x i8> %100 to <4 x i32>
  %105 = add nsw <4 x i32> %103, %104
  %106 = icmp sgt <4 x i32> %105, zeroinitializer
  %107 = select <4 x i1> %106, <4 x i32> %105, <4 x i32> zeroinitializer
  %108 = icmp slt <4 x i32> %107, <i32 255, i32 255, i32 255, i32 255>
  %109 = select <4 x i1> %108, <4 x i32> %107, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %110 = trunc <4 x i32> %109 to <4 x i8>
  %111 = bitcast i8* %98 to <4 x i8>*
  store <4 x i8> %110, <4 x i8>* %111, align 1
  %112 = add nsw i64 %46, %68
  %113 = getelementptr inbounds i8, i8* %1, i64 %112
  %114 = bitcast i8* %113 to <4 x i8>*
  %115 = load <4 x i8>, <4 x i8>* %114, align 1
  %116 = load <4 x i32>, <4 x i32>* %48, align 16
  %117 = add nsw <4 x i32> %116, <i32 32, i32 32, i32 32, i32 32>
  %118 = ashr <4 x i32> %117, <i32 6, i32 6, i32 6, i32 6>
  %119 = zext <4 x i8> %115 to <4 x i32>
  %120 = add nsw <4 x i32> %118, %119
  %121 = icmp sgt <4 x i32> %120, zeroinitializer
  %122 = select <4 x i1> %121, <4 x i32> %120, <4 x i32> zeroinitializer
  %123 = icmp slt <4 x i32> %122, <i32 255, i32 255, i32 255, i32 255>
  %124 = select <4 x i1> %123, <4 x i32> %122, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %125 = trunc <4 x i32> %124 to <4 x i8>
  %126 = bitcast i8* %113 to <4 x i8>*
  store <4 x i8> %125, <4 x i8>* %126, align 1
  %127 = add nsw i64 %49, %68
  %128 = getelementptr inbounds i8, i8* %1, i64 %127
  %129 = bitcast i8* %128 to <4 x i8>*
  %130 = load <4 x i8>, <4 x i8>* %129, align 1
  %131 = load <4 x i32>, <4 x i32>* %51, align 16
  %132 = add nsw <4 x i32> %131, <i32 32, i32 32, i32 32, i32 32>
  %133 = ashr <4 x i32> %132, <i32 6, i32 6, i32 6, i32 6>
  %134 = zext <4 x i8> %130 to <4 x i32>
  %135 = add nsw <4 x i32> %133, %134
  %136 = icmp sgt <4 x i32> %135, zeroinitializer
  %137 = select <4 x i1> %136, <4 x i32> %135, <4 x i32> zeroinitializer
  %138 = icmp slt <4 x i32> %137, <i32 255, i32 255, i32 255, i32 255>
  %139 = select <4 x i1> %138, <4 x i32> %137, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %140 = trunc <4 x i32> %139 to <4 x i8>
  %141 = bitcast i8* %128 to <4 x i8>*
  store <4 x i8> %140, <4 x i8>* %141, align 1
  %142 = add nsw i64 %52, %68
  %143 = getelementptr inbounds i8, i8* %1, i64 %142
  %144 = bitcast i8* %143 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = load <4 x i32>, <4 x i32>* %54, align 16
  %147 = add nsw <4 x i32> %146, <i32 32, i32 32, i32 32, i32 32>
  %148 = ashr <4 x i32> %147, <i32 6, i32 6, i32 6, i32 6>
  %149 = zext <4 x i8> %145 to <4 x i32>
  %150 = add nsw <4 x i32> %148, %149
  %151 = icmp sgt <4 x i32> %150, zeroinitializer
  %152 = select <4 x i1> %151, <4 x i32> %150, <4 x i32> zeroinitializer
  %153 = icmp slt <4 x i32> %152, <i32 255, i32 255, i32 255, i32 255>
  %154 = select <4 x i1> %153, <4 x i32> %152, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %155 = trunc <4 x i32> %154 to <4 x i8>
  %156 = bitcast i8* %143 to <4 x i8>*
  store <4 x i8> %155, <4 x i8>* %156, align 1
  %157 = add nsw i64 %55, %68
  %158 = getelementptr inbounds i8, i8* %1, i64 %157
  %159 = bitcast i8* %158 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = load <4 x i32>, <4 x i32>* %57, align 16
  %162 = add nsw <4 x i32> %161, <i32 32, i32 32, i32 32, i32 32>
  %163 = ashr <4 x i32> %162, <i32 6, i32 6, i32 6, i32 6>
  %164 = zext <4 x i8> %160 to <4 x i32>
  %165 = add nsw <4 x i32> %163, %164
  %166 = icmp sgt <4 x i32> %165, zeroinitializer
  %167 = select <4 x i1> %166, <4 x i32> %165, <4 x i32> zeroinitializer
  %168 = icmp slt <4 x i32> %167, <i32 255, i32 255, i32 255, i32 255>
  %169 = select <4 x i1> %168, <4 x i32> %167, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %170 = trunc <4 x i32> %169 to <4 x i8>
  %171 = bitcast i8* %158 to <4 x i8>*
  store <4 x i8> %170, <4 x i8>* %171, align 1
  %172 = add nsw i64 %58, %68
  %173 = getelementptr inbounds i8, i8* %1, i64 %172
  %174 = bitcast i8* %173 to <4 x i8>*
  %175 = load <4 x i8>, <4 x i8>* %174, align 1
  %176 = load <4 x i32>, <4 x i32>* %60, align 16
  %177 = add nsw <4 x i32> %176, <i32 32, i32 32, i32 32, i32 32>
  %178 = ashr <4 x i32> %177, <i32 6, i32 6, i32 6, i32 6>
  %179 = zext <4 x i8> %175 to <4 x i32>
  %180 = add nsw <4 x i32> %178, %179
  %181 = icmp sgt <4 x i32> %180, zeroinitializer
  %182 = select <4 x i1> %181, <4 x i32> %180, <4 x i32> zeroinitializer
  %183 = icmp slt <4 x i32> %182, <i32 255, i32 255, i32 255, i32 255>
  %184 = select <4 x i1> %183, <4 x i32> %182, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %185 = trunc <4 x i32> %184 to <4 x i8>
  %186 = bitcast i8* %173 to <4 x i8>*
  store <4 x i8> %185, <4 x i8>* %186, align 1
  %187 = add nsw i64 %61, %68
  %188 = getelementptr inbounds i8, i8* %1, i64 %187
  %189 = bitcast i8* %188 to <4 x i8>*
  %190 = load <4 x i8>, <4 x i8>* %189, align 1
  %191 = load <4 x i32>, <4 x i32>* %63, align 16
  %192 = add nsw <4 x i32> %191, <i32 32, i32 32, i32 32, i32 32>
  %193 = ashr <4 x i32> %192, <i32 6, i32 6, i32 6, i32 6>
  %194 = zext <4 x i8> %190 to <4 x i32>
  %195 = add nsw <4 x i32> %193, %194
  %196 = icmp sgt <4 x i32> %195, zeroinitializer
  %197 = select <4 x i1> %196, <4 x i32> %195, <4 x i32> zeroinitializer
  %198 = icmp slt <4 x i32> %197, <i32 255, i32 255, i32 255, i32 255>
  %199 = select <4 x i1> %198, <4 x i32> %197, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %200 = trunc <4 x i32> %199 to <4 x i8>
  %201 = bitcast i8* %188 to <4 x i8>*
  store <4 x i8> %200, <4 x i8>* %201, align 1
  %202 = add nsw i64 %64, %68
  %203 = getelementptr inbounds i8, i8* %1, i64 %202
  %204 = bitcast i8* %203 to <4 x i8>*
  %205 = load <4 x i8>, <4 x i8>* %204, align 1
  %206 = load <4 x i32>, <4 x i32>* %66, align 16
  %207 = add nsw <4 x i32> %206, <i32 32, i32 32, i32 32, i32 32>
  %208 = ashr <4 x i32> %207, <i32 6, i32 6, i32 6, i32 6>
  %209 = zext <4 x i8> %205 to <4 x i32>
  %210 = add nsw <4 x i32> %208, %209
  %211 = icmp sgt <4 x i32> %210, zeroinitializer
  %212 = select <4 x i1> %211, <4 x i32> %210, <4 x i32> zeroinitializer
  %213 = icmp slt <4 x i32> %212, <i32 255, i32 255, i32 255, i32 255>
  %214 = select <4 x i1> %213, <4 x i32> %212, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %215 = trunc <4 x i32> %214 to <4 x i8>
  %216 = bitcast i8* %203 to <4 x i8>*
  store <4 x i8> %215, <4 x i8>* %216, align 1
  br label %236

217:                                              ; preds = %96, %217
  %218 = phi i64 [ %234, %217 ], [ 0, %96 ]
  %219 = mul nsw i64 %218, %43
  %220 = add nsw i64 %219, %68
  %221 = getelementptr inbounds i8, i8* %1, i64 %220
  %222 = load i8, i8* %221, align 1
  %223 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %218
  %224 = load i32, i32* %223, align 4
  %225 = add nsw i32 %224, 32
  %226 = ashr i32 %225, 6
  %227 = zext i8 %222 to i32
  %228 = add nsw i32 %226, %227
  %229 = icmp sgt i32 %228, 0
  %230 = select i1 %229, i32 %228, i32 0
  %231 = icmp slt i32 %230, 255
  %232 = select i1 %231, i32 %230, i32 255
  %233 = trunc i32 %232 to i8
  store i8 %233, i8* %221, align 1
  %234 = add nuw nsw i64 %218, 1
  %235 = icmp eq i64 %234, 32
  br i1 %235, label %236, label %217, !llvm.loop !7

236:                                              ; preds = %217, %97
  %237 = add nuw nsw i64 %68, 1
  %238 = icmp eq i64 %237, 32
  br i1 %238, label %239, label %67

239:                                              ; preds = %236
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %7) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_idct32x32_34_add_c(i32* readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = alloca [1024 x i32], align 16
  %5 = alloca [32 x i32], align 16
  %6 = alloca [32 x i32], align 16
  %7 = bitcast [1024 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 4096, i1 false)
  %8 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 0
  %9 = bitcast [32 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 128, i1 false)
  %10 = bitcast [32 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 128, i1 false)
  call void @idct32_c(i32* %0, i32* nonnull %8)
  %11 = getelementptr inbounds i32, i32* %0, i64 32
  %12 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 32
  call void @idct32_c(i32* %11, i32* %12)
  %13 = getelementptr inbounds i32, i32* %0, i64 64
  %14 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 64
  call void @idct32_c(i32* %13, i32* %14)
  %15 = getelementptr inbounds i32, i32* %0, i64 96
  %16 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 96
  call void @idct32_c(i32* %15, i32* %16)
  %17 = getelementptr inbounds i32, i32* %0, i64 128
  %18 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 128
  call void @idct32_c(i32* %17, i32* %18)
  %19 = getelementptr inbounds i32, i32* %0, i64 160
  %20 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 160
  call void @idct32_c(i32* %19, i32* %20)
  %21 = getelementptr inbounds i32, i32* %0, i64 192
  %22 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 192
  call void @idct32_c(i32* %21, i32* %22)
  %23 = getelementptr inbounds i32, i32* %0, i64 224
  %24 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 224
  call void @idct32_c(i32* %23, i32* %24)
  %25 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 0
  %26 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 0
  %27 = sext i32 %2 to i64
  %28 = icmp eq i32 %2, 1
  %29 = bitcast [32 x i32]* %6 to <4 x i32>*
  %30 = shl nsw i64 %27, 2
  %31 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 4
  %32 = bitcast i32* %31 to <4 x i32>*
  %33 = shl nsw i64 %27, 3
  %34 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 8
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = mul nsw i64 %27, 12
  %37 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 12
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = shl nsw i64 %27, 4
  %40 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 16
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = mul nsw i64 %27, 20
  %43 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 20
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = mul nsw i64 %27, 24
  %46 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 24
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = mul nsw i64 %27, 28
  %49 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 28
  %50 = bitcast i32* %49 to <4 x i32>*
  br label %51

51:                                               ; preds = %220, %3
  %52 = phi i64 [ 0, %3 ], [ %221, %220 ]
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %78, %53 ]
  %55 = shl i64 %54, 5
  %56 = add nuw nsw i64 %55, %52
  %57 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %54
  store i32 %58, i32* %59, align 16
  %60 = or i64 %54, 1
  %61 = shl i64 %60, 5
  %62 = add nuw nsw i64 %61, %52
  %63 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %60
  store i32 %64, i32* %65, align 4
  %66 = or i64 %54, 2
  %67 = shl i64 %66, 5
  %68 = add nuw nsw i64 %67, %52
  %69 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %66
  store i32 %70, i32* %71, align 8
  %72 = or i64 %54, 3
  %73 = shl i64 %72, 5
  %74 = add nuw nsw i64 %73, %52
  %75 = getelementptr inbounds [1024 x i32], [1024 x i32]* %4, i64 0, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %72
  store i32 %76, i32* %77, align 4
  %78 = add nuw nsw i64 %54, 4
  %79 = icmp eq i64 %78, 32
  br i1 %79, label %80, label %53

80:                                               ; preds = %53
  call void @idct32_c(i32* nonnull %25, i32* nonnull %26)
  br i1 %28, label %81, label %201

81:                                               ; preds = %80
  %82 = getelementptr inbounds i8, i8* %1, i64 %52
  %83 = bitcast i8* %82 to <4 x i8>*
  %84 = load <4 x i8>, <4 x i8>* %83, align 1
  %85 = load <4 x i32>, <4 x i32>* %29, align 16
  %86 = add nsw <4 x i32> %85, <i32 32, i32 32, i32 32, i32 32>
  %87 = ashr <4 x i32> %86, <i32 6, i32 6, i32 6, i32 6>
  %88 = zext <4 x i8> %84 to <4 x i32>
  %89 = add nsw <4 x i32> %87, %88
  %90 = icmp sgt <4 x i32> %89, zeroinitializer
  %91 = select <4 x i1> %90, <4 x i32> %89, <4 x i32> zeroinitializer
  %92 = icmp slt <4 x i32> %91, <i32 255, i32 255, i32 255, i32 255>
  %93 = select <4 x i1> %92, <4 x i32> %91, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %94 = trunc <4 x i32> %93 to <4 x i8>
  %95 = bitcast i8* %82 to <4 x i8>*
  store <4 x i8> %94, <4 x i8>* %95, align 1
  %96 = add nsw i64 %30, %52
  %97 = getelementptr inbounds i8, i8* %1, i64 %96
  %98 = bitcast i8* %97 to <4 x i8>*
  %99 = load <4 x i8>, <4 x i8>* %98, align 1
  %100 = load <4 x i32>, <4 x i32>* %32, align 16
  %101 = add nsw <4 x i32> %100, <i32 32, i32 32, i32 32, i32 32>
  %102 = ashr <4 x i32> %101, <i32 6, i32 6, i32 6, i32 6>
  %103 = zext <4 x i8> %99 to <4 x i32>
  %104 = add nsw <4 x i32> %102, %103
  %105 = icmp sgt <4 x i32> %104, zeroinitializer
  %106 = select <4 x i1> %105, <4 x i32> %104, <4 x i32> zeroinitializer
  %107 = icmp slt <4 x i32> %106, <i32 255, i32 255, i32 255, i32 255>
  %108 = select <4 x i1> %107, <4 x i32> %106, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %109 = trunc <4 x i32> %108 to <4 x i8>
  %110 = bitcast i8* %97 to <4 x i8>*
  store <4 x i8> %109, <4 x i8>* %110, align 1
  %111 = add nsw i64 %33, %52
  %112 = getelementptr inbounds i8, i8* %1, i64 %111
  %113 = bitcast i8* %112 to <4 x i8>*
  %114 = load <4 x i8>, <4 x i8>* %113, align 1
  %115 = load <4 x i32>, <4 x i32>* %35, align 16
  %116 = add nsw <4 x i32> %115, <i32 32, i32 32, i32 32, i32 32>
  %117 = ashr <4 x i32> %116, <i32 6, i32 6, i32 6, i32 6>
  %118 = zext <4 x i8> %114 to <4 x i32>
  %119 = add nsw <4 x i32> %117, %118
  %120 = icmp sgt <4 x i32> %119, zeroinitializer
  %121 = select <4 x i1> %120, <4 x i32> %119, <4 x i32> zeroinitializer
  %122 = icmp slt <4 x i32> %121, <i32 255, i32 255, i32 255, i32 255>
  %123 = select <4 x i1> %122, <4 x i32> %121, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %124 = trunc <4 x i32> %123 to <4 x i8>
  %125 = bitcast i8* %112 to <4 x i8>*
  store <4 x i8> %124, <4 x i8>* %125, align 1
  %126 = add nsw i64 %36, %52
  %127 = getelementptr inbounds i8, i8* %1, i64 %126
  %128 = bitcast i8* %127 to <4 x i8>*
  %129 = load <4 x i8>, <4 x i8>* %128, align 1
  %130 = load <4 x i32>, <4 x i32>* %38, align 16
  %131 = add nsw <4 x i32> %130, <i32 32, i32 32, i32 32, i32 32>
  %132 = ashr <4 x i32> %131, <i32 6, i32 6, i32 6, i32 6>
  %133 = zext <4 x i8> %129 to <4 x i32>
  %134 = add nsw <4 x i32> %132, %133
  %135 = icmp sgt <4 x i32> %134, zeroinitializer
  %136 = select <4 x i1> %135, <4 x i32> %134, <4 x i32> zeroinitializer
  %137 = icmp slt <4 x i32> %136, <i32 255, i32 255, i32 255, i32 255>
  %138 = select <4 x i1> %137, <4 x i32> %136, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %139 = trunc <4 x i32> %138 to <4 x i8>
  %140 = bitcast i8* %127 to <4 x i8>*
  store <4 x i8> %139, <4 x i8>* %140, align 1
  %141 = add nsw i64 %39, %52
  %142 = getelementptr inbounds i8, i8* %1, i64 %141
  %143 = bitcast i8* %142 to <4 x i8>*
  %144 = load <4 x i8>, <4 x i8>* %143, align 1
  %145 = load <4 x i32>, <4 x i32>* %41, align 16
  %146 = add nsw <4 x i32> %145, <i32 32, i32 32, i32 32, i32 32>
  %147 = ashr <4 x i32> %146, <i32 6, i32 6, i32 6, i32 6>
  %148 = zext <4 x i8> %144 to <4 x i32>
  %149 = add nsw <4 x i32> %147, %148
  %150 = icmp sgt <4 x i32> %149, zeroinitializer
  %151 = select <4 x i1> %150, <4 x i32> %149, <4 x i32> zeroinitializer
  %152 = icmp slt <4 x i32> %151, <i32 255, i32 255, i32 255, i32 255>
  %153 = select <4 x i1> %152, <4 x i32> %151, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %154 = trunc <4 x i32> %153 to <4 x i8>
  %155 = bitcast i8* %142 to <4 x i8>*
  store <4 x i8> %154, <4 x i8>* %155, align 1
  %156 = add nsw i64 %42, %52
  %157 = getelementptr inbounds i8, i8* %1, i64 %156
  %158 = bitcast i8* %157 to <4 x i8>*
  %159 = load <4 x i8>, <4 x i8>* %158, align 1
  %160 = load <4 x i32>, <4 x i32>* %44, align 16
  %161 = add nsw <4 x i32> %160, <i32 32, i32 32, i32 32, i32 32>
  %162 = ashr <4 x i32> %161, <i32 6, i32 6, i32 6, i32 6>
  %163 = zext <4 x i8> %159 to <4 x i32>
  %164 = add nsw <4 x i32> %162, %163
  %165 = icmp sgt <4 x i32> %164, zeroinitializer
  %166 = select <4 x i1> %165, <4 x i32> %164, <4 x i32> zeroinitializer
  %167 = icmp slt <4 x i32> %166, <i32 255, i32 255, i32 255, i32 255>
  %168 = select <4 x i1> %167, <4 x i32> %166, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %169 = trunc <4 x i32> %168 to <4 x i8>
  %170 = bitcast i8* %157 to <4 x i8>*
  store <4 x i8> %169, <4 x i8>* %170, align 1
  %171 = add nsw i64 %45, %52
  %172 = getelementptr inbounds i8, i8* %1, i64 %171
  %173 = bitcast i8* %172 to <4 x i8>*
  %174 = load <4 x i8>, <4 x i8>* %173, align 1
  %175 = load <4 x i32>, <4 x i32>* %47, align 16
  %176 = add nsw <4 x i32> %175, <i32 32, i32 32, i32 32, i32 32>
  %177 = ashr <4 x i32> %176, <i32 6, i32 6, i32 6, i32 6>
  %178 = zext <4 x i8> %174 to <4 x i32>
  %179 = add nsw <4 x i32> %177, %178
  %180 = icmp sgt <4 x i32> %179, zeroinitializer
  %181 = select <4 x i1> %180, <4 x i32> %179, <4 x i32> zeroinitializer
  %182 = icmp slt <4 x i32> %181, <i32 255, i32 255, i32 255, i32 255>
  %183 = select <4 x i1> %182, <4 x i32> %181, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %184 = trunc <4 x i32> %183 to <4 x i8>
  %185 = bitcast i8* %172 to <4 x i8>*
  store <4 x i8> %184, <4 x i8>* %185, align 1
  %186 = add nsw i64 %48, %52
  %187 = getelementptr inbounds i8, i8* %1, i64 %186
  %188 = bitcast i8* %187 to <4 x i8>*
  %189 = load <4 x i8>, <4 x i8>* %188, align 1
  %190 = load <4 x i32>, <4 x i32>* %50, align 16
  %191 = add nsw <4 x i32> %190, <i32 32, i32 32, i32 32, i32 32>
  %192 = ashr <4 x i32> %191, <i32 6, i32 6, i32 6, i32 6>
  %193 = zext <4 x i8> %189 to <4 x i32>
  %194 = add nsw <4 x i32> %192, %193
  %195 = icmp sgt <4 x i32> %194, zeroinitializer
  %196 = select <4 x i1> %195, <4 x i32> %194, <4 x i32> zeroinitializer
  %197 = icmp slt <4 x i32> %196, <i32 255, i32 255, i32 255, i32 255>
  %198 = select <4 x i1> %197, <4 x i32> %196, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %199 = trunc <4 x i32> %198 to <4 x i8>
  %200 = bitcast i8* %187 to <4 x i8>*
  store <4 x i8> %199, <4 x i8>* %200, align 1
  br label %220

201:                                              ; preds = %80, %201
  %202 = phi i64 [ %218, %201 ], [ 0, %80 ]
  %203 = mul nsw i64 %202, %27
  %204 = add nsw i64 %203, %52
  %205 = getelementptr inbounds i8, i8* %1, i64 %204
  %206 = load i8, i8* %205, align 1
  %207 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %202
  %208 = load i32, i32* %207, align 4
  %209 = add nsw i32 %208, 32
  %210 = ashr i32 %209, 6
  %211 = zext i8 %206 to i32
  %212 = add nsw i32 %210, %211
  %213 = icmp sgt i32 %212, 0
  %214 = select i1 %213, i32 %212, i32 0
  %215 = icmp slt i32 %214, 255
  %216 = select i1 %215, i32 %214, i32 255
  %217 = trunc i32 %216 to i8
  store i8 %217, i8* %205, align 1
  %218 = add nuw nsw i64 %202, 1
  %219 = icmp eq i64 %218, 32
  br i1 %219, label %220, label %201, !llvm.loop !8

220:                                              ; preds = %201, %81
  %221 = add nuw nsw i64 %52, 1
  %222 = icmp eq i64 %221, 32
  br i1 %222, label %223, label %51

223:                                              ; preds = %220
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %7) #3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_idct32x32_1_add_c(i32* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #2 {
  %4 = load i32, i32* %0, align 4
  %5 = shl i32 %4, 16
  %6 = ashr exact i32 %5, 16
  %7 = mul nsw i32 %6, 11585
  %8 = add nsw i32 %7, 8192
  %9 = ashr i32 %8, 14
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %10, 49757196124160
  %12 = ashr exact i64 %11, 32
  %13 = add nsw i64 %12, 8192
  %14 = lshr i64 %13, 14
  %15 = trunc i64 %14 to i32
  %16 = add nsw i32 %15, 32
  %17 = ashr i32 %16, 6
  %18 = sext i32 %2 to i64
  %19 = insertelement <16 x i32> undef, i32 %17, i32 0
  %20 = shufflevector <16 x i32> %19, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %21

21:                                               ; preds = %3, %21
  %22 = phi i8* [ %1, %3 ], [ %45, %21 ]
  %23 = phi i32 [ 0, %3 ], [ %46, %21 ]
  %24 = bitcast i8* %22 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = zext <16 x i8> %25 to <16 x i32>
  %27 = add nsw <16 x i32> %20, %26
  %28 = icmp sgt <16 x i32> %27, zeroinitializer
  %29 = select <16 x i1> %28, <16 x i32> %27, <16 x i32> zeroinitializer
  %30 = icmp slt <16 x i32> %29, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %31 = select <16 x i1> %30, <16 x i32> %29, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %32 = trunc <16 x i32> %31 to <16 x i8>
  %33 = bitcast i8* %22 to <16 x i8>*
  store <16 x i8> %32, <16 x i8>* %33, align 1
  %34 = getelementptr inbounds i8, i8* %22, i64 16
  %35 = bitcast i8* %34 to <16 x i8>*
  %36 = load <16 x i8>, <16 x i8>* %35, align 1
  %37 = zext <16 x i8> %36 to <16 x i32>
  %38 = add nsw <16 x i32> %20, %37
  %39 = icmp sgt <16 x i32> %38, zeroinitializer
  %40 = select <16 x i1> %39, <16 x i32> %38, <16 x i32> zeroinitializer
  %41 = icmp slt <16 x i32> %40, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %42 = select <16 x i1> %41, <16 x i32> %40, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %43 = trunc <16 x i32> %42 to <16 x i8>
  %44 = bitcast i8* %34 to <16 x i8>*
  store <16 x i8> %43, <16 x i8>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %22, i64 %18
  %46 = add nuw nsw i32 %23, 1
  %47 = icmp eq i32 %46, 32
  br i1 %47, label %48, label %21

48:                                               ; preds = %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_iwht4x4_16_add_c(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [16 x i32], align 16
  %6 = bitcast [16 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #3
  %7 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 12
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 16, i1 false)
  %9 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 0
  %10 = load i32, i32* %0, align 4
  %11 = ashr i32 %10, 2
  %12 = getelementptr inbounds i32, i32* %0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = ashr i32 %13, 2
  %15 = getelementptr inbounds i32, i32* %0, i64 2
  %16 = load i32, i32* %15, align 4
  %17 = ashr i32 %16, 2
  %18 = getelementptr inbounds i32, i32* %0, i64 3
  %19 = load i32, i32* %18, align 4
  %20 = ashr i32 %19, 2
  %21 = add nsw i32 %14, %11
  %22 = sub nsw i32 %17, %20
  %23 = sub nsw i32 %21, %22
  %24 = ashr i32 %23, 1
  %25 = sub nsw i32 %24, %20
  %26 = sub nsw i32 %24, %14
  %27 = sub i32 %21, %25
  store i32 %27, i32* %9, align 16
  %28 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 1
  store i32 %25, i32* %28, align 4
  %29 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 2
  store i32 %26, i32* %29, align 8
  %30 = add i32 %26, %22
  %31 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 3
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds i32, i32* %0, i64 4
  %33 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 4
  %34 = load i32, i32* %32, align 4
  %35 = ashr i32 %34, 2
  %36 = getelementptr inbounds i32, i32* %0, i64 5
  %37 = load i32, i32* %36, align 4
  %38 = ashr i32 %37, 2
  %39 = getelementptr inbounds i32, i32* %0, i64 6
  %40 = load i32, i32* %39, align 4
  %41 = ashr i32 %40, 2
  %42 = getelementptr inbounds i32, i32* %0, i64 7
  %43 = load i32, i32* %42, align 4
  %44 = ashr i32 %43, 2
  %45 = add nsw i32 %38, %35
  %46 = sub nsw i32 %41, %44
  %47 = sub nsw i32 %45, %46
  %48 = ashr i32 %47, 1
  %49 = sub nsw i32 %48, %44
  %50 = sub nsw i32 %48, %38
  %51 = sub i32 %45, %49
  store i32 %51, i32* %33, align 16
  %52 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 5
  store i32 %49, i32* %52, align 4
  %53 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 6
  store i32 %50, i32* %53, align 8
  %54 = add i32 %50, %46
  %55 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 7
  store i32 %54, i32* %55, align 4
  %56 = getelementptr inbounds i32, i32* %0, i64 8
  %57 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 8
  %58 = load i32, i32* %56, align 4
  %59 = ashr i32 %58, 2
  %60 = getelementptr inbounds i32, i32* %0, i64 9
  %61 = load i32, i32* %60, align 4
  %62 = ashr i32 %61, 2
  %63 = getelementptr inbounds i32, i32* %0, i64 10
  %64 = load i32, i32* %63, align 4
  %65 = ashr i32 %64, 2
  %66 = getelementptr inbounds i32, i32* %0, i64 11
  %67 = load i32, i32* %66, align 4
  %68 = ashr i32 %67, 2
  %69 = add nsw i32 %62, %59
  %70 = sub nsw i32 %65, %68
  %71 = sub nsw i32 %69, %70
  %72 = ashr i32 %71, 1
  %73 = sub nsw i32 %72, %68
  %74 = sub nsw i32 %72, %62
  %75 = sub i32 %69, %73
  store i32 %75, i32* %57, align 16
  %76 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 9
  store i32 %73, i32* %76, align 4
  %77 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 10
  store i32 %74, i32* %77, align 8
  %78 = add i32 %74, %70
  %79 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 11
  store i32 %78, i32* %79, align 4
  %80 = getelementptr inbounds i32, i32* %0, i64 12
  %81 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 12
  %82 = load i32, i32* %80, align 4
  %83 = ashr i32 %82, 2
  %84 = getelementptr inbounds i32, i32* %0, i64 13
  %85 = load i32, i32* %84, align 4
  %86 = ashr i32 %85, 2
  %87 = getelementptr inbounds i32, i32* %0, i64 14
  %88 = load i32, i32* %87, align 4
  %89 = ashr i32 %88, 2
  %90 = getelementptr inbounds i32, i32* %0, i64 15
  %91 = load i32, i32* %90, align 4
  %92 = ashr i32 %91, 2
  %93 = add nsw i32 %86, %83
  %94 = sub nsw i32 %89, %92
  %95 = sub nsw i32 %93, %94
  %96 = ashr i32 %95, 1
  %97 = sub nsw i32 %96, %92
  %98 = sub nsw i32 %96, %86
  %99 = sub i32 %93, %97
  store i32 %99, i32* %81, align 16
  %100 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 13
  store i32 %97, i32* %100, align 4
  %101 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 14
  store i32 %98, i32* %101, align 8
  %102 = add i32 %98, %94
  %103 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 15
  store i32 %102, i32* %103, align 4
  %104 = sext i32 %2 to i64
  %105 = shl nsw i32 %2, 1
  %106 = sext i32 %105 to i64
  %107 = mul nsw i32 %2, 3
  %108 = sext i32 %107 to i64
  br label %109

109:                                              ; preds = %243, %4
  %110 = phi i32 [ %51, %4 ], [ %247, %243 ]
  %111 = phi i32 [ %27, %4 ], [ %245, %243 ]
  %112 = phi i32* [ %9, %4 ], [ %240, %243 ]
  %113 = phi i32 [ 0, %4 ], [ %241, %243 ]
  %114 = phi i16* [ %1, %4 ], [ %244, %243 ]
  %115 = sext i32 %111 to i64
  %116 = sext i32 %110 to i64
  %117 = getelementptr inbounds i32, i32* %112, i64 8
  %118 = load i32, i32* %117, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i32, i32* %112, i64 12
  %121 = load i32, i32* %120, align 4
  %122 = sext i32 %121 to i64
  %123 = add nsw i64 %116, %115
  %124 = sub nsw i64 %119, %122
  %125 = sub nsw i64 %123, %124
  %126 = ashr i64 %125, 1
  %127 = sub nsw i64 %126, %122
  %128 = sub nsw i64 %126, %116
  %129 = sub nsw i64 %123, %127
  %130 = add nsw i64 %128, %124
  %131 = load i16, i16* %114, align 2
  %132 = trunc i64 %129 to i32
  %133 = zext i16 %131 to i32
  %134 = add nsw i32 %132, %133
  switch i32 %3, label %201 [
    i32 12, label %168
    i32 10, label %135
  ]

135:                                              ; preds = %109
  %136 = icmp slt i32 %134, 1023
  %137 = select i1 %136, i32 %134, i32 1023
  %138 = icmp sgt i32 %137, 0
  %139 = select i1 %138, i32 %137, i32 0
  %140 = trunc i32 %139 to i16
  store i16 %140, i16* %114, align 2
  %141 = getelementptr inbounds i16, i16* %114, i64 %104
  %142 = load i16, i16* %141, align 2
  %143 = trunc i64 %127 to i32
  %144 = zext i16 %142 to i32
  %145 = add nsw i32 %144, %143
  %146 = icmp slt i32 %145, 1023
  %147 = select i1 %146, i32 %145, i32 1023
  %148 = icmp sgt i32 %147, 0
  %149 = select i1 %148, i32 %147, i32 0
  %150 = trunc i32 %149 to i16
  store i16 %150, i16* %141, align 2
  %151 = getelementptr inbounds i16, i16* %114, i64 %106
  %152 = load i16, i16* %151, align 2
  %153 = trunc i64 %128 to i32
  %154 = zext i16 %152 to i32
  %155 = add nsw i32 %154, %153
  %156 = icmp slt i32 %155, 1023
  %157 = select i1 %156, i32 %155, i32 1023
  %158 = icmp sgt i32 %157, 0
  %159 = select i1 %158, i32 %157, i32 0
  %160 = trunc i32 %159 to i16
  store i16 %160, i16* %151, align 2
  %161 = getelementptr inbounds i16, i16* %114, i64 %108
  %162 = load i16, i16* %161, align 2
  %163 = trunc i64 %130 to i32
  %164 = zext i16 %162 to i32
  %165 = add nsw i32 %164, %163
  %166 = icmp slt i32 %165, 1023
  %167 = select i1 %166, i32 %165, i32 1023
  br label %234

168:                                              ; preds = %109
  %169 = icmp slt i32 %134, 4095
  %170 = select i1 %169, i32 %134, i32 4095
  %171 = icmp sgt i32 %170, 0
  %172 = select i1 %171, i32 %170, i32 0
  %173 = trunc i32 %172 to i16
  store i16 %173, i16* %114, align 2
  %174 = getelementptr inbounds i16, i16* %114, i64 %104
  %175 = load i16, i16* %174, align 2
  %176 = trunc i64 %127 to i32
  %177 = zext i16 %175 to i32
  %178 = add nsw i32 %177, %176
  %179 = icmp slt i32 %178, 4095
  %180 = select i1 %179, i32 %178, i32 4095
  %181 = icmp sgt i32 %180, 0
  %182 = select i1 %181, i32 %180, i32 0
  %183 = trunc i32 %182 to i16
  store i16 %183, i16* %174, align 2
  %184 = getelementptr inbounds i16, i16* %114, i64 %106
  %185 = load i16, i16* %184, align 2
  %186 = trunc i64 %128 to i32
  %187 = zext i16 %185 to i32
  %188 = add nsw i32 %187, %186
  %189 = icmp slt i32 %188, 4095
  %190 = select i1 %189, i32 %188, i32 4095
  %191 = icmp sgt i32 %190, 0
  %192 = select i1 %191, i32 %190, i32 0
  %193 = trunc i32 %192 to i16
  store i16 %193, i16* %184, align 2
  %194 = getelementptr inbounds i16, i16* %114, i64 %108
  %195 = load i16, i16* %194, align 2
  %196 = trunc i64 %130 to i32
  %197 = zext i16 %195 to i32
  %198 = add nsw i32 %197, %196
  %199 = icmp slt i32 %198, 4095
  %200 = select i1 %199, i32 %198, i32 4095
  br label %234

201:                                              ; preds = %109
  %202 = icmp slt i32 %134, 255
  %203 = select i1 %202, i32 %134, i32 255
  %204 = icmp sgt i32 %203, 0
  %205 = select i1 %204, i32 %203, i32 0
  %206 = trunc i32 %205 to i16
  store i16 %206, i16* %114, align 2
  %207 = getelementptr inbounds i16, i16* %114, i64 %104
  %208 = load i16, i16* %207, align 2
  %209 = trunc i64 %127 to i32
  %210 = zext i16 %208 to i32
  %211 = add nsw i32 %210, %209
  %212 = icmp slt i32 %211, 255
  %213 = select i1 %212, i32 %211, i32 255
  %214 = icmp sgt i32 %213, 0
  %215 = select i1 %214, i32 %213, i32 0
  %216 = trunc i32 %215 to i16
  store i16 %216, i16* %207, align 2
  %217 = getelementptr inbounds i16, i16* %114, i64 %106
  %218 = load i16, i16* %217, align 2
  %219 = trunc i64 %128 to i32
  %220 = zext i16 %218 to i32
  %221 = add nsw i32 %220, %219
  %222 = icmp slt i32 %221, 255
  %223 = select i1 %222, i32 %221, i32 255
  %224 = icmp sgt i32 %223, 0
  %225 = select i1 %224, i32 %223, i32 0
  %226 = trunc i32 %225 to i16
  store i16 %226, i16* %217, align 2
  %227 = getelementptr inbounds i16, i16* %114, i64 %108
  %228 = load i16, i16* %227, align 2
  %229 = trunc i64 %130 to i32
  %230 = zext i16 %228 to i32
  %231 = add nsw i32 %230, %229
  %232 = icmp slt i32 %231, 255
  %233 = select i1 %232, i32 %231, i32 255
  br label %234

234:                                              ; preds = %201, %135, %168
  %235 = phi i32 [ %233, %201 ], [ %167, %135 ], [ %200, %168 ]
  %236 = phi i16* [ %227, %201 ], [ %161, %135 ], [ %194, %168 ]
  %237 = icmp sgt i32 %235, 0
  %238 = select i1 %237, i32 %235, i32 0
  %239 = trunc i32 %238 to i16
  store i16 %239, i16* %236, align 2
  %240 = getelementptr inbounds i32, i32* %112, i64 1
  %241 = add nuw nsw i32 %113, 1
  %242 = icmp eq i32 %241, 4
  br i1 %242, label %248, label %243

243:                                              ; preds = %234
  %244 = getelementptr inbounds i16, i16* %114, i64 1
  %245 = load i32, i32* %240, align 4
  %246 = getelementptr inbounds i32, i32* %112, i64 5
  %247 = load i32, i32* %246, align 4
  br label %109

248:                                              ; preds = %234
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_iwht4x4_1_add_c(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [4 x i32], align 16
  %6 = bitcast [4 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #3
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 0
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 1
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 2
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 3
  %11 = load i32, i32* %0, align 4
  %12 = ashr i32 %11, 2
  %13 = ashr i32 %11, 3
  %14 = sub nsw i32 %12, %13
  store i32 %14, i32* %7, align 16
  store i32 %13, i32* %10, align 4
  store i32 %13, i32* %9, align 8
  store i32 %13, i32* %8, align 4
  %15 = sext i32 %2 to i64
  %16 = shl nsw i32 %2, 1
  %17 = sext i32 %16 to i64
  %18 = mul nsw i32 %2, 3
  %19 = sext i32 %18 to i64
  br label %20

20:                                               ; preds = %129, %4
  %21 = phi i32 [ %14, %4 ], [ %131, %129 ]
  %22 = phi i16* [ %1, %4 ], [ %130, %129 ]
  %23 = phi i32* [ %7, %4 ], [ %126, %129 ]
  %24 = phi i32 [ 0, %4 ], [ %127, %129 ]
  %25 = ashr i32 %21, 1
  %26 = sub i32 %21, %25
  %27 = load i16, i16* %22, align 2
  %28 = zext i16 %27 to i32
  %29 = add nsw i32 %26, %28
  switch i32 %3, label %90 [
    i32 12, label %60
    i32 10, label %30
  ]

30:                                               ; preds = %20
  %31 = icmp slt i32 %29, 1023
  %32 = select i1 %31, i32 %29, i32 1023
  %33 = icmp sgt i32 %32, 0
  %34 = select i1 %33, i32 %32, i32 0
  %35 = trunc i32 %34 to i16
  store i16 %35, i16* %22, align 2
  %36 = getelementptr inbounds i16, i16* %22, i64 %15
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = add nsw i32 %25, %38
  %40 = icmp slt i32 %39, 1023
  %41 = select i1 %40, i32 %39, i32 1023
  %42 = icmp sgt i32 %41, 0
  %43 = select i1 %42, i32 %41, i32 0
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %36, align 2
  %45 = getelementptr inbounds i16, i16* %22, i64 %17
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nsw i32 %25, %47
  %49 = icmp slt i32 %48, 1023
  %50 = select i1 %49, i32 %48, i32 1023
  %51 = icmp sgt i32 %50, 0
  %52 = select i1 %51, i32 %50, i32 0
  %53 = trunc i32 %52 to i16
  store i16 %53, i16* %45, align 2
  %54 = getelementptr inbounds i16, i16* %22, i64 %19
  %55 = load i16, i16* %54, align 2
  %56 = zext i16 %55 to i32
  %57 = add nsw i32 %25, %56
  %58 = icmp slt i32 %57, 1023
  %59 = select i1 %58, i32 %57, i32 1023
  br label %120

60:                                               ; preds = %20
  %61 = icmp slt i32 %29, 4095
  %62 = select i1 %61, i32 %29, i32 4095
  %63 = icmp sgt i32 %62, 0
  %64 = select i1 %63, i32 %62, i32 0
  %65 = trunc i32 %64 to i16
  store i16 %65, i16* %22, align 2
  %66 = getelementptr inbounds i16, i16* %22, i64 %15
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = add nsw i32 %25, %68
  %70 = icmp slt i32 %69, 4095
  %71 = select i1 %70, i32 %69, i32 4095
  %72 = icmp sgt i32 %71, 0
  %73 = select i1 %72, i32 %71, i32 0
  %74 = trunc i32 %73 to i16
  store i16 %74, i16* %66, align 2
  %75 = getelementptr inbounds i16, i16* %22, i64 %17
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nsw i32 %25, %77
  %79 = icmp slt i32 %78, 4095
  %80 = select i1 %79, i32 %78, i32 4095
  %81 = icmp sgt i32 %80, 0
  %82 = select i1 %81, i32 %80, i32 0
  %83 = trunc i32 %82 to i16
  store i16 %83, i16* %75, align 2
  %84 = getelementptr inbounds i16, i16* %22, i64 %19
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = add nsw i32 %25, %86
  %88 = icmp slt i32 %87, 4095
  %89 = select i1 %88, i32 %87, i32 4095
  br label %120

90:                                               ; preds = %20
  %91 = icmp slt i32 %29, 255
  %92 = select i1 %91, i32 %29, i32 255
  %93 = icmp sgt i32 %92, 0
  %94 = select i1 %93, i32 %92, i32 0
  %95 = trunc i32 %94 to i16
  store i16 %95, i16* %22, align 2
  %96 = getelementptr inbounds i16, i16* %22, i64 %15
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i32
  %99 = add nsw i32 %25, %98
  %100 = icmp slt i32 %99, 255
  %101 = select i1 %100, i32 %99, i32 255
  %102 = icmp sgt i32 %101, 0
  %103 = select i1 %102, i32 %101, i32 0
  %104 = trunc i32 %103 to i16
  store i16 %104, i16* %96, align 2
  %105 = getelementptr inbounds i16, i16* %22, i64 %17
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = add nsw i32 %25, %107
  %109 = icmp slt i32 %108, 255
  %110 = select i1 %109, i32 %108, i32 255
  %111 = icmp sgt i32 %110, 0
  %112 = select i1 %111, i32 %110, i32 0
  %113 = trunc i32 %112 to i16
  store i16 %113, i16* %105, align 2
  %114 = getelementptr inbounds i16, i16* %22, i64 %19
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = add nsw i32 %25, %116
  %118 = icmp slt i32 %117, 255
  %119 = select i1 %118, i32 %117, i32 255
  br label %120

120:                                              ; preds = %90, %30, %60
  %121 = phi i32 [ %119, %90 ], [ %59, %30 ], [ %89, %60 ]
  %122 = phi i16* [ %114, %90 ], [ %54, %30 ], [ %84, %60 ]
  %123 = icmp sgt i32 %121, 0
  %124 = select i1 %123, i32 %121, i32 0
  %125 = trunc i32 %124 to i16
  store i16 %125, i16* %122, align 2
  %126 = getelementptr inbounds i32, i32* %23, i64 1
  %127 = add nuw nsw i32 %24, 1
  %128 = icmp eq i32 %127, 4
  br i1 %128, label %132, label %129

129:                                              ; preds = %120
  %130 = getelementptr inbounds i16, i16* %22, i64 1
  %131 = load i32, i32* %126, align 4
  br label %20

132:                                              ; preds = %120
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_iadst4_c(i32* nocapture readonly, i32* nocapture, i32) local_unnamed_addr #0 {
  %4 = load i32, i32* %0, align 4
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 3
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %4, 0
  %12 = sub nsw i32 0, %4
  %13 = select i1 %11, i32 %12, i32 %4
  %14 = icmp sgt i32 %13, 33554431
  br i1 %14, label %20, label %15

15:                                               ; preds = %3
  %16 = icmp slt i32 %6, 0
  %17 = sub nsw i32 0, %6
  %18 = select i1 %16, i32 %17, i32 %6
  %19 = icmp sgt i32 %18, 33554431
  br i1 %19, label %20, label %63

20:                                               ; preds = %68, %63, %15, %3
  %21 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 16, i1 false)
  br label %62

22:                                               ; preds = %73
  %23 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %23, i8 0, i64 16, i1 false)
  br label %62

24:                                               ; preds = %73
  %25 = sext i32 %4 to i64
  %26 = mul nsw i64 %25, 5283
  %27 = mul nsw i64 %25, 9929
  %28 = sext i32 %6 to i64
  %29 = mul nsw i64 %28, 13377
  %30 = sext i32 %8 to i64
  %31 = mul nsw i64 %30, 15212
  %32 = sext i32 %10 to i64
  %33 = mul nsw i64 %32, 9929
  %34 = sub i32 %4, %8
  %35 = add nsw i32 %34, %10
  %36 = sext i32 %35 to i64
  %37 = add nsw i64 %31, %26
  %38 = add nsw i64 %37, %33
  %39 = mul nsw i64 %30, -5283
  %40 = add nsw i64 %39, %27
  %41 = mul nsw i64 %32, -15212
  %42 = add nsw i64 %40, %41
  %43 = mul nsw i64 %36, 13377
  %44 = add nsw i64 %29, 8192
  %45 = add nsw i64 %44, %38
  %46 = lshr i64 %45, 14
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %1, align 4
  %48 = add nsw i64 %44, %42
  %49 = lshr i64 %48, 14
  %50 = trunc i64 %49 to i32
  %51 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %50, i32* %51, align 4
  %52 = add nsw i64 %43, 8192
  %53 = lshr i64 %52, 14
  %54 = trunc i64 %53 to i32
  %55 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %54, i32* %55, align 4
  %56 = sub nsw i64 8192, %29
  %57 = add nsw i64 %56, %42
  %58 = add nsw i64 %57, %38
  %59 = lshr i64 %58, 14
  %60 = trunc i64 %59 to i32
  %61 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %60, i32* %61, align 4
  br label %62

62:                                               ; preds = %24, %22, %20
  ret void

63:                                               ; preds = %15
  %64 = icmp slt i32 %8, 0
  %65 = sub nsw i32 0, %8
  %66 = select i1 %64, i32 %65, i32 %8
  %67 = icmp sgt i32 %66, 33554431
  br i1 %67, label %20, label %68

68:                                               ; preds = %63
  %69 = icmp slt i32 %10, 0
  %70 = sub nsw i32 0, %10
  %71 = select i1 %69, i32 %70, i32 %10
  %72 = icmp sgt i32 %71, 33554431
  br i1 %72, label %20, label %73

73:                                               ; preds = %68
  %74 = or i32 %6, %4
  %75 = or i32 %74, %8
  %76 = or i32 %75, %10
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %22, label %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct4_c(i32* nocapture readonly, i32* nocapture, i32) local_unnamed_addr #0 {
  %4 = load i32, i32* %0, align 4
  %5 = icmp slt i32 %4, 0
  %6 = sub nsw i32 0, %4
  %7 = select i1 %5, i32 %6, i32 %4
  %8 = icmp sgt i32 %7, 33554431
  br i1 %8, label %16, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, 0
  %13 = sub nsw i32 0, %11
  %14 = select i1 %12, i32 %13, i32 %11
  %15 = icmp sgt i32 %14, 33554431
  br i1 %15, label %16, label %19

16:                                               ; preds = %26, %19, %9, %3
  %17 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 16, i1 false)
  br label %18

18:                                               ; preds = %33, %16
  ret void

19:                                               ; preds = %9
  %20 = getelementptr inbounds i32, i32* %0, i64 2
  %21 = load i32, i32* %20, align 4
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = icmp sgt i32 %24, 33554431
  br i1 %25, label %16, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds i32, i32* %0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %28, 0
  %30 = sub nsw i32 0, %28
  %31 = select i1 %29, i32 %30, i32 %28
  %32 = icmp sgt i32 %31, 33554431
  br i1 %32, label %16, label %33

33:                                               ; preds = %26
  %34 = add nsw i32 %21, %4
  %35 = sext i32 %34 to i64
  %36 = mul nsw i64 %35, 11585
  %37 = sub nsw i32 %4, %21
  %38 = sext i32 %37 to i64
  %39 = mul nsw i64 %38, 11585
  %40 = add nsw i64 %36, 8192
  %41 = ashr i64 %40, 14
  %42 = add nsw i64 %39, 8192
  %43 = ashr i64 %42, 14
  %44 = sext i32 %11 to i64
  %45 = mul nsw i64 %44, 6270
  %46 = sext i32 %28 to i64
  %47 = mul nsw i64 %46, -15137
  %48 = mul nsw i64 %44, 15137
  %49 = mul nsw i64 %46, 6270
  %50 = add nsw i64 %45, 8192
  %51 = add nsw i64 %50, %47
  %52 = ashr i64 %51, 14
  %53 = add nsw i64 %48, 8192
  %54 = add nsw i64 %53, %49
  %55 = ashr i64 %54, 14
  %56 = add nsw i64 %55, %41
  %57 = trunc i64 %56 to i32
  store i32 %57, i32* %1, align 4
  %58 = add nsw i64 %52, %43
  %59 = trunc i64 %58 to i32
  %60 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %59, i32* %60, align 4
  %61 = sub nsw i64 %43, %52
  %62 = trunc i64 %61 to i32
  %63 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %62, i32* %63, align 4
  %64 = sub nsw i64 %41, %55
  %65 = trunc i64 %64 to i32
  %66 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %65, i32* %66, align 4
  br label %18
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct4x4_16_add_c(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [16 x i32], align 16
  %6 = bitcast [16 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 64, i1 false)
  %7 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 0
  br label %16

8:                                                ; preds = %82
  %9 = sext i32 %2 to i64
  %10 = shl nsw i64 %9, 1
  %11 = mul nsw i64 %9, 3
  %12 = shl nsw i64 %9, 1
  %13 = mul nsw i64 %9, 3
  %14 = shl nsw i64 %9, 1
  %15 = mul nsw i64 %9, 3
  br label %87

16:                                               ; preds = %82, %4
  %17 = phi i32* [ %7, %4 ], [ %84, %82 ]
  %18 = phi i32 [ 0, %4 ], [ %85, %82 ]
  %19 = phi i32* [ %0, %4 ], [ %83, %82 ]
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 0
  %22 = sub nsw i32 0, %20
  %23 = select i1 %21, i32 %22, i32 %20
  %24 = icmp sgt i32 %23, 33554431
  br i1 %24, label %32, label %25

25:                                               ; preds = %16
  %26 = getelementptr inbounds i32, i32* %19, i64 1
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %27, 0
  %29 = sub nsw i32 0, %27
  %30 = select i1 %28, i32 %29, i32 %27
  %31 = icmp sgt i32 %30, 33554431
  br i1 %31, label %32, label %34

32:                                               ; preds = %41, %34, %25, %16
  %33 = bitcast i32* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %33, i8 0, i64 16, i1 false) #3
  br label %82

34:                                               ; preds = %25
  %35 = getelementptr inbounds i32, i32* %19, i64 2
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %36, 0
  %38 = sub nsw i32 0, %36
  %39 = select i1 %37, i32 %38, i32 %36
  %40 = icmp sgt i32 %39, 33554431
  br i1 %40, label %32, label %41

41:                                               ; preds = %34
  %42 = getelementptr inbounds i32, i32* %19, i64 3
  %43 = load i32, i32* %42, align 4
  %44 = icmp slt i32 %43, 0
  %45 = sub nsw i32 0, %43
  %46 = select i1 %44, i32 %45, i32 %43
  %47 = icmp sgt i32 %46, 33554431
  br i1 %47, label %32, label %48

48:                                               ; preds = %41
  %49 = add nsw i32 %36, %20
  %50 = sext i32 %49 to i64
  %51 = mul nsw i64 %50, 11585
  %52 = sub nsw i32 %20, %36
  %53 = sext i32 %52 to i64
  %54 = mul nsw i64 %53, 11585
  %55 = add nsw i64 %51, 8192
  %56 = ashr i64 %55, 14
  %57 = add nsw i64 %54, 8192
  %58 = ashr i64 %57, 14
  %59 = sext i32 %27 to i64
  %60 = mul nsw i64 %59, 6270
  %61 = sext i32 %43 to i64
  %62 = mul nsw i64 %61, -15137
  %63 = mul nsw i64 %59, 15137
  %64 = mul nsw i64 %61, 6270
  %65 = add nsw i64 %60, 8192
  %66 = add nsw i64 %65, %62
  %67 = ashr i64 %66, 14
  %68 = add nsw i64 %63, 8192
  %69 = add nsw i64 %68, %64
  %70 = ashr i64 %69, 14
  %71 = add nsw i64 %70, %56
  %72 = trunc i64 %71 to i32
  store i32 %72, i32* %17, align 4
  %73 = add nsw i64 %67, %58
  %74 = trunc i64 %73 to i32
  %75 = getelementptr inbounds i32, i32* %17, i64 1
  store i32 %74, i32* %75, align 4
  %76 = sub nsw i64 %58, %67
  %77 = trunc i64 %76 to i32
  %78 = getelementptr inbounds i32, i32* %17, i64 2
  store i32 %77, i32* %78, align 4
  %79 = sub nsw i64 %56, %70
  %80 = trunc i64 %79 to i32
  %81 = getelementptr inbounds i32, i32* %17, i64 3
  store i32 %80, i32* %81, align 4
  br label %82

82:                                               ; preds = %32, %48
  %83 = getelementptr inbounds i32, i32* %19, i64 4
  %84 = getelementptr inbounds i32, i32* %17, i64 4
  %85 = add nuw nsw i32 %18, 1
  %86 = icmp eq i32 %85, 4
  br i1 %86, label %8, label %16

87:                                               ; preds = %279, %8
  %88 = phi i64 [ 0, %8 ], [ %285, %279 ]
  %89 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = add nuw nsw i64 %88, 4
  %92 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %91
  %93 = load i32, i32* %92, align 4
  %94 = add nuw nsw i64 %88, 8
  %95 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = add nuw nsw i64 %88, 12
  %98 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %97
  %99 = load i32, i32* %98, align 4
  %100 = icmp slt i32 %90, 0
  %101 = sub nsw i32 0, %90
  %102 = select i1 %100, i32 %101, i32 %90
  %103 = icmp sgt i32 %102, 33554431
  br i1 %103, label %150, label %104

104:                                              ; preds = %87
  %105 = icmp slt i32 %93, 0
  %106 = sub nsw i32 0, %93
  %107 = select i1 %105, i32 %106, i32 %93
  %108 = icmp sgt i32 %107, 33554431
  br i1 %108, label %150, label %109

109:                                              ; preds = %104
  %110 = icmp slt i32 %96, 0
  %111 = sub nsw i32 0, %96
  %112 = select i1 %110, i32 %111, i32 %96
  %113 = icmp sgt i32 %112, 33554431
  br i1 %113, label %150, label %114

114:                                              ; preds = %109
  %115 = icmp slt i32 %99, 0
  %116 = sub nsw i32 0, %99
  %117 = select i1 %115, i32 %116, i32 %99
  %118 = icmp sgt i32 %117, 33554431
  br i1 %118, label %150, label %119

119:                                              ; preds = %114
  %120 = add nsw i32 %96, %90
  %121 = sext i32 %120 to i64
  %122 = mul nsw i64 %121, 11585
  %123 = sub nsw i32 %90, %96
  %124 = sext i32 %123 to i64
  %125 = mul nsw i64 %124, 11585
  %126 = add nsw i64 %122, 8192
  %127 = ashr i64 %126, 14
  %128 = add nsw i64 %125, 8192
  %129 = ashr i64 %128, 14
  %130 = sext i32 %93 to i64
  %131 = mul nsw i64 %130, 6270
  %132 = sext i32 %99 to i64
  %133 = mul nsw i64 %132, -15137
  %134 = mul nsw i64 %130, 15137
  %135 = mul nsw i64 %132, 6270
  %136 = add nsw i64 %131, 8192
  %137 = add nsw i64 %136, %133
  %138 = ashr i64 %137, 14
  %139 = add nsw i64 %134, 8192
  %140 = add nsw i64 %139, %135
  %141 = ashr i64 %140, 14
  %142 = add nsw i64 %141, %127
  %143 = trunc i64 %142 to i32
  %144 = add nsw i64 %138, %129
  %145 = trunc i64 %144 to i32
  %146 = sub nsw i64 %129, %138
  %147 = trunc i64 %146 to i32
  %148 = sub nsw i64 %127, %141
  %149 = trunc i64 %148 to i32
  br label %150

150:                                              ; preds = %87, %104, %109, %114, %119
  %151 = phi i32 [ %149, %119 ], [ 0, %114 ], [ 0, %109 ], [ 0, %104 ], [ 0, %87 ]
  %152 = phi i32 [ %147, %119 ], [ 0, %114 ], [ 0, %109 ], [ 0, %104 ], [ 0, %87 ]
  %153 = phi i32 [ %145, %119 ], [ 0, %114 ], [ 0, %109 ], [ 0, %104 ], [ 0, %87 ]
  %154 = phi i32 [ %143, %119 ], [ 0, %114 ], [ 0, %109 ], [ 0, %104 ], [ 0, %87 ]
  %155 = getelementptr inbounds i16, i16* %1, i64 %88
  %156 = load i16, i16* %155, align 2
  %157 = add nsw i32 %154, 8
  %158 = ashr i32 %157, 4
  %159 = zext i16 %156 to i32
  %160 = add nsw i32 %158, %159
  switch i32 %3, label %239 [
    i32 12, label %200
    i32 10, label %161
  ]

161:                                              ; preds = %150
  %162 = icmp slt i32 %160, 1023
  %163 = select i1 %162, i32 %160, i32 1023
  %164 = icmp sgt i32 %163, 0
  %165 = select i1 %164, i32 %163, i32 0
  %166 = trunc i32 %165 to i16
  store i16 %166, i16* %155, align 2
  %167 = add nsw i64 %88, %9
  %168 = getelementptr inbounds i16, i16* %1, i64 %167
  %169 = load i16, i16* %168, align 2
  %170 = add nsw i32 %153, 8
  %171 = ashr i32 %170, 4
  %172 = zext i16 %169 to i32
  %173 = add nsw i32 %171, %172
  %174 = icmp slt i32 %173, 1023
  %175 = select i1 %174, i32 %173, i32 1023
  %176 = icmp sgt i32 %175, 0
  %177 = select i1 %176, i32 %175, i32 0
  %178 = trunc i32 %177 to i16
  store i16 %178, i16* %168, align 2
  %179 = add nsw i64 %10, %88
  %180 = getelementptr inbounds i16, i16* %1, i64 %179
  %181 = load i16, i16* %180, align 2
  %182 = add nsw i32 %152, 8
  %183 = ashr i32 %182, 4
  %184 = zext i16 %181 to i32
  %185 = add nsw i32 %183, %184
  %186 = icmp slt i32 %185, 1023
  %187 = select i1 %186, i32 %185, i32 1023
  %188 = icmp sgt i32 %187, 0
  %189 = select i1 %188, i32 %187, i32 0
  %190 = trunc i32 %189 to i16
  store i16 %190, i16* %180, align 2
  %191 = add nsw i64 %11, %88
  %192 = getelementptr inbounds i16, i16* %1, i64 %191
  %193 = load i16, i16* %192, align 2
  %194 = add nsw i32 %151, 8
  %195 = ashr i32 %194, 4
  %196 = zext i16 %193 to i32
  %197 = add nsw i32 %195, %196
  %198 = icmp slt i32 %197, 1023
  %199 = select i1 %198, i32 %197, i32 1023
  br label %279

200:                                              ; preds = %150
  %201 = icmp slt i32 %160, 4095
  %202 = select i1 %201, i32 %160, i32 4095
  %203 = icmp sgt i32 %202, 0
  %204 = select i1 %203, i32 %202, i32 0
  %205 = trunc i32 %204 to i16
  store i16 %205, i16* %155, align 2
  %206 = add nsw i64 %88, %9
  %207 = getelementptr inbounds i16, i16* %1, i64 %206
  %208 = load i16, i16* %207, align 2
  %209 = add nsw i32 %153, 8
  %210 = ashr i32 %209, 4
  %211 = zext i16 %208 to i32
  %212 = add nsw i32 %210, %211
  %213 = icmp slt i32 %212, 4095
  %214 = select i1 %213, i32 %212, i32 4095
  %215 = icmp sgt i32 %214, 0
  %216 = select i1 %215, i32 %214, i32 0
  %217 = trunc i32 %216 to i16
  store i16 %217, i16* %207, align 2
  %218 = add nsw i64 %14, %88
  %219 = getelementptr inbounds i16, i16* %1, i64 %218
  %220 = load i16, i16* %219, align 2
  %221 = add nsw i32 %152, 8
  %222 = ashr i32 %221, 4
  %223 = zext i16 %220 to i32
  %224 = add nsw i32 %222, %223
  %225 = icmp slt i32 %224, 4095
  %226 = select i1 %225, i32 %224, i32 4095
  %227 = icmp sgt i32 %226, 0
  %228 = select i1 %227, i32 %226, i32 0
  %229 = trunc i32 %228 to i16
  store i16 %229, i16* %219, align 2
  %230 = add nsw i64 %15, %88
  %231 = getelementptr inbounds i16, i16* %1, i64 %230
  %232 = load i16, i16* %231, align 2
  %233 = add nsw i32 %151, 8
  %234 = ashr i32 %233, 4
  %235 = zext i16 %232 to i32
  %236 = add nsw i32 %234, %235
  %237 = icmp slt i32 %236, 4095
  %238 = select i1 %237, i32 %236, i32 4095
  br label %279

239:                                              ; preds = %150
  %240 = icmp slt i32 %160, 255
  %241 = select i1 %240, i32 %160, i32 255
  %242 = icmp sgt i32 %241, 0
  %243 = select i1 %242, i32 %241, i32 0
  %244 = trunc i32 %243 to i16
  store i16 %244, i16* %155, align 2
  %245 = add nsw i64 %88, %9
  %246 = getelementptr inbounds i16, i16* %1, i64 %245
  %247 = load i16, i16* %246, align 2
  %248 = add nsw i32 %153, 8
  %249 = ashr i32 %248, 4
  %250 = zext i16 %247 to i32
  %251 = add nsw i32 %249, %250
  %252 = icmp slt i32 %251, 255
  %253 = select i1 %252, i32 %251, i32 255
  %254 = icmp sgt i32 %253, 0
  %255 = select i1 %254, i32 %253, i32 0
  %256 = trunc i32 %255 to i16
  store i16 %256, i16* %246, align 2
  %257 = add nsw i64 %12, %88
  %258 = getelementptr inbounds i16, i16* %1, i64 %257
  %259 = load i16, i16* %258, align 2
  %260 = add nsw i32 %152, 8
  %261 = ashr i32 %260, 4
  %262 = zext i16 %259 to i32
  %263 = add nsw i32 %261, %262
  %264 = icmp slt i32 %263, 255
  %265 = select i1 %264, i32 %263, i32 255
  %266 = icmp sgt i32 %265, 0
  %267 = select i1 %266, i32 %265, i32 0
  %268 = trunc i32 %267 to i16
  store i16 %268, i16* %258, align 2
  %269 = add nsw i64 %13, %88
  %270 = getelementptr inbounds i16, i16* %1, i64 %269
  %271 = load i16, i16* %270, align 2
  %272 = add nsw i32 %151, 8
  %273 = ashr i32 %272, 4
  %274 = zext i16 %271 to i32
  %275 = add nsw i32 %273, %274
  %276 = icmp slt i32 %275, 255
  %277 = select i1 %276, i32 %275, i32 255
  br label %279

278:                                              ; preds = %279
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #3
  ret void

279:                                              ; preds = %239, %200, %161
  %280 = phi i32 [ %277, %239 ], [ %238, %200 ], [ %199, %161 ]
  %281 = phi i16* [ %270, %239 ], [ %231, %200 ], [ %192, %161 ]
  %282 = icmp sgt i32 %280, 0
  %283 = select i1 %282, i32 %280, i32 0
  %284 = trunc i32 %283 to i16
  store i16 %284, i16* %281, align 2
  %285 = add nuw nsw i64 %88, 1
  %286 = icmp eq i64 %285, 4
  br i1 %286, label %278, label %87
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_idct4x4_1_add_c(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #2 {
  %5 = load i32, i32* %0, align 4
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %6, 11585
  %8 = add nsw i64 %7, 8192
  %9 = lshr i64 %8, 14
  %10 = shl i64 %9, 32
  %11 = ashr exact i64 %10, 32
  %12 = mul nsw i64 %11, 11585
  %13 = add nsw i64 %12, 8192
  %14 = lshr i64 %13, 14
  %15 = trunc i64 %14 to i32
  %16 = add nsw i32 %15, 8
  %17 = ashr i32 %16, 4
  %18 = sext i32 %2 to i64
  br label %19

19:                                               ; preds = %115, %4
  %20 = phi i16* [ %1, %4 ], [ %121, %115 ]
  %21 = phi i32 [ 0, %4 ], [ %122, %115 ]
  %22 = load i16, i16* %20, align 2
  %23 = zext i16 %22 to i32
  %24 = add nsw i32 %17, %23
  switch i32 %3, label %85 [
    i32 12, label %55
    i32 10, label %25
  ]

25:                                               ; preds = %19
  %26 = icmp slt i32 %24, 1023
  %27 = select i1 %26, i32 %24, i32 1023
  %28 = icmp sgt i32 %27, 0
  %29 = select i1 %28, i32 %27, i32 0
  %30 = trunc i32 %29 to i16
  store i16 %30, i16* %20, align 2
  %31 = getelementptr inbounds i16, i16* %20, i64 1
  %32 = load i16, i16* %31, align 2
  %33 = zext i16 %32 to i32
  %34 = add nsw i32 %17, %33
  %35 = icmp slt i32 %34, 1023
  %36 = select i1 %35, i32 %34, i32 1023
  %37 = icmp sgt i32 %36, 0
  %38 = select i1 %37, i32 %36, i32 0
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %31, align 2
  %40 = getelementptr inbounds i16, i16* %20, i64 2
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nsw i32 %17, %42
  %44 = icmp slt i32 %43, 1023
  %45 = select i1 %44, i32 %43, i32 1023
  %46 = icmp sgt i32 %45, 0
  %47 = select i1 %46, i32 %45, i32 0
  %48 = trunc i32 %47 to i16
  store i16 %48, i16* %40, align 2
  %49 = getelementptr inbounds i16, i16* %20, i64 3
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = add nsw i32 %17, %51
  %53 = icmp slt i32 %52, 1023
  %54 = select i1 %53, i32 %52, i32 1023
  br label %115

55:                                               ; preds = %19
  %56 = icmp slt i32 %24, 4095
  %57 = select i1 %56, i32 %24, i32 4095
  %58 = icmp sgt i32 %57, 0
  %59 = select i1 %58, i32 %57, i32 0
  %60 = trunc i32 %59 to i16
  store i16 %60, i16* %20, align 2
  %61 = getelementptr inbounds i16, i16* %20, i64 1
  %62 = load i16, i16* %61, align 2
  %63 = zext i16 %62 to i32
  %64 = add nsw i32 %17, %63
  %65 = icmp slt i32 %64, 4095
  %66 = select i1 %65, i32 %64, i32 4095
  %67 = icmp sgt i32 %66, 0
  %68 = select i1 %67, i32 %66, i32 0
  %69 = trunc i32 %68 to i16
  store i16 %69, i16* %61, align 2
  %70 = getelementptr inbounds i16, i16* %20, i64 2
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nsw i32 %17, %72
  %74 = icmp slt i32 %73, 4095
  %75 = select i1 %74, i32 %73, i32 4095
  %76 = icmp sgt i32 %75, 0
  %77 = select i1 %76, i32 %75, i32 0
  %78 = trunc i32 %77 to i16
  store i16 %78, i16* %70, align 2
  %79 = getelementptr inbounds i16, i16* %20, i64 3
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = add nsw i32 %17, %81
  %83 = icmp slt i32 %82, 4095
  %84 = select i1 %83, i32 %82, i32 4095
  br label %115

85:                                               ; preds = %19
  %86 = icmp slt i32 %24, 255
  %87 = select i1 %86, i32 %24, i32 255
  %88 = icmp sgt i32 %87, 0
  %89 = select i1 %88, i32 %87, i32 0
  %90 = trunc i32 %89 to i16
  store i16 %90, i16* %20, align 2
  %91 = getelementptr inbounds i16, i16* %20, i64 1
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = add nsw i32 %17, %93
  %95 = icmp slt i32 %94, 255
  %96 = select i1 %95, i32 %94, i32 255
  %97 = icmp sgt i32 %96, 0
  %98 = select i1 %97, i32 %96, i32 0
  %99 = trunc i32 %98 to i16
  store i16 %99, i16* %91, align 2
  %100 = getelementptr inbounds i16, i16* %20, i64 2
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = add nsw i32 %17, %102
  %104 = icmp slt i32 %103, 255
  %105 = select i1 %104, i32 %103, i32 255
  %106 = icmp sgt i32 %105, 0
  %107 = select i1 %106, i32 %105, i32 0
  %108 = trunc i32 %107 to i16
  store i16 %108, i16* %100, align 2
  %109 = getelementptr inbounds i16, i16* %20, i64 3
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = add nsw i32 %17, %111
  %113 = icmp slt i32 %112, 255
  %114 = select i1 %113, i32 %112, i32 255
  br label %115

115:                                              ; preds = %85, %25, %55
  %116 = phi i32 [ %114, %85 ], [ %54, %25 ], [ %84, %55 ]
  %117 = phi i16* [ %109, %85 ], [ %49, %25 ], [ %79, %55 ]
  %118 = icmp sgt i32 %116, 0
  %119 = select i1 %118, i32 %116, i32 0
  %120 = trunc i32 %119 to i16
  store i16 %120, i16* %117, align 2
  %121 = getelementptr inbounds i16, i16* %20, i64 %18
  %122 = add nuw nsw i32 %21, 1
  %123 = icmp eq i32 %122, 4
  br i1 %123, label %124, label %19

124:                                              ; preds = %115
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_iadst8_c(i32* nocapture readonly, i32* nocapture, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds i32, i32* %0, i64 7
  %5 = load i32, i32* %4, align 4
  %6 = load i32, i32* %0, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 5
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 4
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 6
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %6, 0
  %20 = sub nsw i32 0, %6
  %21 = select i1 %19, i32 %20, i32 %6
  %22 = icmp sgt i32 %21, 33554431
  br i1 %22, label %28, label %23

23:                                               ; preds = %3
  %24 = icmp slt i32 %16, 0
  %25 = sub nsw i32 0, %16
  %26 = select i1 %24, i32 %25, i32 %16
  %27 = icmp sgt i32 %26, 33554431
  br i1 %27, label %28, label %179

28:                                               ; preds = %204, %199, %194, %189, %184, %179, %23, %3
  %29 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 32, i1 false)
  br label %178

30:                                               ; preds = %209
  %31 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %31, i8 0, i64 32, i1 false)
  br label %178

32:                                               ; preds = %209
  %33 = sext i32 %5 to i64
  %34 = mul nsw i64 %33, 16305
  %35 = sext i32 %6 to i64
  %36 = mul nsw i64 %35, 1606
  %37 = add nsw i64 %36, %34
  %38 = mul nsw i64 %33, 1606
  %39 = mul nsw i64 %35, -16305
  %40 = add nsw i64 %39, %38
  %41 = sext i32 %8 to i64
  %42 = mul nsw i64 %41, 14449
  %43 = sext i32 %10 to i64
  %44 = mul nsw i64 %43, 7723
  %45 = add nsw i64 %44, %42
  %46 = mul nsw i64 %41, 7723
  %47 = mul nsw i64 %43, -14449
  %48 = add nsw i64 %47, %46
  %49 = sext i32 %12 to i64
  %50 = mul nsw i64 %49, 10394
  %51 = sext i32 %14 to i64
  %52 = mul nsw i64 %51, 12665
  %53 = add nsw i64 %52, %50
  %54 = mul nsw i64 %49, 12665
  %55 = mul nsw i64 %51, -10394
  %56 = add nsw i64 %55, %54
  %57 = sext i32 %16 to i64
  %58 = mul nsw i64 %57, 4756
  %59 = sext i32 %18 to i64
  %60 = mul nsw i64 %59, 15679
  %61 = add nsw i64 %60, %58
  %62 = mul nsw i64 %57, 15679
  %63 = mul nsw i64 %59, -4756
  %64 = add nsw i64 %63, %62
  %65 = add nsw i64 %37, 8192
  %66 = add nsw i64 %65, %53
  %67 = lshr i64 %66, 14
  %68 = add nsw i64 %40, 8192
  %69 = add nsw i64 %68, %56
  %70 = lshr i64 %69, 14
  %71 = add nsw i64 %45, 8192
  %72 = add nsw i64 %71, %61
  %73 = lshr i64 %72, 14
  %74 = add nsw i64 %48, 8192
  %75 = add nsw i64 %74, %64
  %76 = lshr i64 %75, 14
  %77 = sub nsw i64 %65, %53
  %78 = lshr i64 %77, 14
  %79 = sub nsw i64 %68, %56
  %80 = lshr i64 %79, 14
  %81 = sub nsw i64 %71, %61
  %82 = lshr i64 %81, 14
  %83 = sub nsw i64 %74, %64
  %84 = lshr i64 %83, 14
  %85 = shl i64 %67, 32
  %86 = ashr exact i64 %85, 32
  %87 = shl i64 %70, 32
  %88 = ashr exact i64 %87, 32
  %89 = shl i64 %73, 32
  %90 = ashr exact i64 %89, 32
  %91 = shl i64 %76, 32
  %92 = ashr exact i64 %91, 32
  %93 = shl i64 %78, 32
  %94 = ashr exact i64 %93, 32
  %95 = mul nsw i64 %94, 15137
  %96 = shl i64 %80, 32
  %97 = ashr exact i64 %96, 32
  %98 = mul nsw i64 %97, 6270
  %99 = add nsw i64 %95, %98
  %100 = mul nsw i64 %94, 6270
  %101 = mul nsw i64 %97, -15137
  %102 = add nsw i64 %100, %101
  %103 = shl i64 %82, 32
  %104 = ashr exact i64 %103, 32
  %105 = mul nsw i64 %104, -6270
  %106 = shl i64 %84, 32
  %107 = ashr exact i64 %106, 32
  %108 = mul nsw i64 %107, 15137
  %109 = add nsw i64 %105, %108
  %110 = mul nsw i64 %104, 15137
  %111 = mul nsw i64 %107, 6270
  %112 = add nsw i64 %110, %111
  %113 = add nsw i64 %90, %86
  %114 = add nsw i64 %92, %88
  %115 = sub nsw i64 %86, %90
  %116 = sub nsw i64 %88, %92
  %117 = add nsw i64 %99, 8192
  %118 = add nsw i64 %117, %109
  %119 = lshr i64 %118, 14
  %120 = add nsw i64 %102, 8192
  %121 = add nsw i64 %120, %112
  %122 = lshr i64 %121, 14
  %123 = sub nsw i64 %117, %109
  %124 = ashr i64 %123, 14
  %125 = sub nsw i64 %120, %112
  %126 = ashr i64 %125, 14
  %127 = add nsw i64 %115, %116
  %128 = shl i64 %127, 32
  %129 = ashr exact i64 %128, 32
  %130 = mul nsw i64 %129, 11585
  %131 = sub nsw i64 %115, %116
  %132 = shl i64 %131, 32
  %133 = ashr exact i64 %132, 32
  %134 = mul nsw i64 %133, 11585
  %135 = add nsw i64 %124, %126
  %136 = shl i64 %135, 32
  %137 = ashr exact i64 %136, 32
  %138 = mul nsw i64 %137, 11585
  %139 = sub nsw i64 %124, %126
  %140 = shl i64 %139, 32
  %141 = ashr exact i64 %140, 32
  %142 = mul nsw i64 %141, 11585
  %143 = add nsw i64 %130, 8192
  %144 = lshr i64 %143, 14
  %145 = add nsw i64 %134, 8192
  %146 = lshr i64 %145, 14
  %147 = add nsw i64 %138, 8192
  %148 = lshr i64 %147, 14
  %149 = add nsw i64 %142, 8192
  %150 = lshr i64 %149, 14
  %151 = trunc i64 %113 to i32
  store i32 %151, i32* %1, align 4
  %152 = shl i64 %119, 32
  %153 = sub i64 0, %152
  %154 = lshr exact i64 %153, 32
  %155 = trunc i64 %154 to i32
  %156 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %155, i32* %156, align 4
  %157 = trunc i64 %148 to i32
  %158 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %157, i32* %158, align 4
  %159 = shl i64 %144, 32
  %160 = sub i64 0, %159
  %161 = lshr exact i64 %160, 32
  %162 = trunc i64 %161 to i32
  %163 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %162, i32* %163, align 4
  %164 = trunc i64 %146 to i32
  %165 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %164, i32* %165, align 4
  %166 = shl i64 %150, 32
  %167 = sub i64 0, %166
  %168 = lshr exact i64 %167, 32
  %169 = trunc i64 %168 to i32
  %170 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %169, i32* %170, align 4
  %171 = trunc i64 %122 to i32
  %172 = getelementptr inbounds i32, i32* %1, i64 6
  store i32 %171, i32* %172, align 4
  %173 = shl i64 %114, 32
  %174 = sub i64 0, %173
  %175 = lshr exact i64 %174, 32
  %176 = trunc i64 %175 to i32
  %177 = getelementptr inbounds i32, i32* %1, i64 7
  store i32 %176, i32* %177, align 4
  br label %178

178:                                              ; preds = %32, %30, %28
  ret void

179:                                              ; preds = %23
  %180 = icmp slt i32 %10, 0
  %181 = sub nsw i32 0, %10
  %182 = select i1 %180, i32 %181, i32 %10
  %183 = icmp sgt i32 %182, 33554431
  br i1 %183, label %28, label %184

184:                                              ; preds = %179
  %185 = icmp slt i32 %12, 0
  %186 = sub nsw i32 0, %12
  %187 = select i1 %185, i32 %186, i32 %12
  %188 = icmp sgt i32 %187, 33554431
  br i1 %188, label %28, label %189

189:                                              ; preds = %184
  %190 = icmp slt i32 %14, 0
  %191 = sub nsw i32 0, %14
  %192 = select i1 %190, i32 %191, i32 %14
  %193 = icmp sgt i32 %192, 33554431
  br i1 %193, label %28, label %194

194:                                              ; preds = %189
  %195 = icmp slt i32 %8, 0
  %196 = sub nsw i32 0, %8
  %197 = select i1 %195, i32 %196, i32 %8
  %198 = icmp sgt i32 %197, 33554431
  br i1 %198, label %28, label %199

199:                                              ; preds = %194
  %200 = icmp slt i32 %18, 0
  %201 = sub nsw i32 0, %18
  %202 = select i1 %200, i32 %201, i32 %18
  %203 = icmp sgt i32 %202, 33554431
  br i1 %203, label %28, label %204

204:                                              ; preds = %199
  %205 = icmp slt i32 %5, 0
  %206 = sub nsw i32 0, %5
  %207 = select i1 %205, i32 %206, i32 %5
  %208 = icmp sgt i32 %207, 33554431
  br i1 %208, label %28, label %209

209:                                              ; preds = %204
  %210 = or i32 %6, %5
  %211 = or i32 %210, %8
  %212 = or i32 %211, %10
  %213 = or i32 %212, %12
  %214 = or i32 %213, %14
  %215 = or i32 %214, %16
  %216 = or i32 %215, %18
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %30, label %32
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct8_c(i32* nocapture readonly, i32* nocapture, i32) local_unnamed_addr #0 {
  %4 = load i32, i32* %0, align 4
  %5 = icmp slt i32 %4, 0
  %6 = sub nsw i32 0, %4
  %7 = select i1 %5, i32 %6, i32 %4
  %8 = icmp sgt i32 %7, 33554431
  br i1 %8, label %16, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, 0
  %13 = sub nsw i32 0, %11
  %14 = select i1 %12, i32 %13, i32 %11
  %15 = icmp sgt i32 %14, 33554431
  br i1 %15, label %16, label %115

16:                                               ; preds = %150, %143, %136, %129, %122, %115, %9, %3
  %17 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 32, i1 false)
  br label %114

18:                                               ; preds = %150
  %19 = sext i32 %11 to i64
  %20 = mul nsw i64 %19, 3196
  %21 = sext i32 %152 to i64
  %22 = mul nsw i64 %21, -16069
  %23 = mul nsw i64 %19, 16069
  %24 = mul nsw i64 %21, 3196
  %25 = add nsw i64 %20, 8192
  %26 = add nsw i64 %25, %22
  %27 = lshr i64 %26, 14
  %28 = trunc i64 %27 to i32
  %29 = add nsw i64 %23, 8192
  %30 = add nsw i64 %29, %24
  %31 = lshr i64 %30, 14
  %32 = trunc i64 %31 to i32
  %33 = sext i32 %138 to i64
  %34 = mul nsw i64 %33, 13623
  %35 = sext i32 %124 to i64
  %36 = mul nsw i64 %35, -9102
  %37 = mul nsw i64 %33, 9102
  %38 = mul nsw i64 %35, 13623
  %39 = add nsw i64 %34, 8192
  %40 = add nsw i64 %39, %36
  %41 = lshr i64 %40, 14
  %42 = trunc i64 %41 to i32
  %43 = add nsw i64 %37, 8192
  %44 = add nsw i64 %43, %38
  %45 = lshr i64 %44, 14
  %46 = trunc i64 %45 to i32
  %47 = add nsw i32 %131, %4
  %48 = sext i32 %47 to i64
  %49 = mul nsw i64 %48, 11585
  %50 = sub nsw i32 %4, %131
  %51 = sext i32 %50 to i64
  %52 = mul nsw i64 %51, 11585
  %53 = add nsw i64 %49, 8192
  %54 = ashr i64 %53, 14
  %55 = add nsw i64 %52, 8192
  %56 = ashr i64 %55, 14
  %57 = sext i32 %117 to i64
  %58 = mul nsw i64 %57, 6270
  %59 = sext i32 %145 to i64
  %60 = mul nsw i64 %59, -15137
  %61 = mul nsw i64 %57, 15137
  %62 = mul nsw i64 %59, 6270
  %63 = add nsw i64 %58, 8192
  %64 = add nsw i64 %63, %60
  %65 = ashr i64 %64, 14
  %66 = add nsw i64 %61, 8192
  %67 = add nsw i64 %66, %62
  %68 = ashr i64 %67, 14
  %69 = add nsw i64 %68, %54
  %70 = trunc i64 %69 to i32
  %71 = add nsw i64 %65, %56
  %72 = trunc i64 %71 to i32
  %73 = sub nsw i64 %56, %65
  %74 = trunc i64 %73 to i32
  %75 = sub nsw i64 %54, %68
  %76 = trunc i64 %75 to i32
  %77 = add nsw i32 %42, %28
  %78 = sub nsw i64 %27, %41
  %79 = shl i64 %78, 32
  %80 = ashr exact i64 %79, 32
  %81 = sub nsw i64 %31, %45
  %82 = shl i64 %81, 32
  %83 = ashr exact i64 %82, 32
  %84 = add nsw i32 %46, %32
  %85 = sub nsw i64 %83, %80
  %86 = shl i64 %85, 32
  %87 = ashr exact i64 %86, 32
  %88 = mul nsw i64 %87, 11585
  %89 = add nsw i64 %80, %83
  %90 = shl i64 %89, 32
  %91 = ashr exact i64 %90, 32
  %92 = mul nsw i64 %91, 11585
  %93 = add nsw i64 %88, 8192
  %94 = lshr i64 %93, 14
  %95 = trunc i64 %94 to i32
  %96 = add nsw i64 %92, 8192
  %97 = lshr i64 %96, 14
  %98 = trunc i64 %97 to i32
  %99 = add nsw i32 %84, %70
  store i32 %99, i32* %1, align 4
  %100 = add nsw i32 %72, %98
  %101 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %100, i32* %101, align 4
  %102 = add nsw i32 %74, %95
  %103 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %102, i32* %103, align 4
  %104 = add nsw i32 %77, %76
  %105 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %104, i32* %105, align 4
  %106 = sub nsw i32 %76, %77
  %107 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %106, i32* %107, align 4
  %108 = sub nsw i32 %74, %95
  %109 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %108, i32* %109, align 4
  %110 = sub nsw i32 %72, %98
  %111 = getelementptr inbounds i32, i32* %1, i64 6
  store i32 %110, i32* %111, align 4
  %112 = sub nsw i32 %70, %84
  %113 = getelementptr inbounds i32, i32* %1, i64 7
  store i32 %112, i32* %113, align 4
  br label %114

114:                                              ; preds = %18, %16
  ret void

115:                                              ; preds = %9
  %116 = getelementptr inbounds i32, i32* %0, i64 2
  %117 = load i32, i32* %116, align 4
  %118 = icmp slt i32 %117, 0
  %119 = sub nsw i32 0, %117
  %120 = select i1 %118, i32 %119, i32 %117
  %121 = icmp sgt i32 %120, 33554431
  br i1 %121, label %16, label %122

122:                                              ; preds = %115
  %123 = getelementptr inbounds i32, i32* %0, i64 3
  %124 = load i32, i32* %123, align 4
  %125 = icmp slt i32 %124, 0
  %126 = sub nsw i32 0, %124
  %127 = select i1 %125, i32 %126, i32 %124
  %128 = icmp sgt i32 %127, 33554431
  br i1 %128, label %16, label %129

129:                                              ; preds = %122
  %130 = getelementptr inbounds i32, i32* %0, i64 4
  %131 = load i32, i32* %130, align 4
  %132 = icmp slt i32 %131, 0
  %133 = sub nsw i32 0, %131
  %134 = select i1 %132, i32 %133, i32 %131
  %135 = icmp sgt i32 %134, 33554431
  br i1 %135, label %16, label %136

136:                                              ; preds = %129
  %137 = getelementptr inbounds i32, i32* %0, i64 5
  %138 = load i32, i32* %137, align 4
  %139 = icmp slt i32 %138, 0
  %140 = sub nsw i32 0, %138
  %141 = select i1 %139, i32 %140, i32 %138
  %142 = icmp sgt i32 %141, 33554431
  br i1 %142, label %16, label %143

143:                                              ; preds = %136
  %144 = getelementptr inbounds i32, i32* %0, i64 6
  %145 = load i32, i32* %144, align 4
  %146 = icmp slt i32 %145, 0
  %147 = sub nsw i32 0, %145
  %148 = select i1 %146, i32 %147, i32 %145
  %149 = icmp sgt i32 %148, 33554431
  br i1 %149, label %16, label %150

150:                                              ; preds = %143
  %151 = getelementptr inbounds i32, i32* %0, i64 7
  %152 = load i32, i32* %151, align 4
  %153 = icmp slt i32 %152, 0
  %154 = sub nsw i32 0, %152
  %155 = select i1 %153, i32 %154, i32 %152
  %156 = icmp sgt i32 %155, 33554431
  br i1 %156, label %16, label %18
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct8x8_64_add_c(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [64 x i32], align 16
  %6 = alloca [8 x i32], align 16
  %7 = alloca [8 x i32], align 16
  %8 = bitcast [64 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 256, i1 false)
  %9 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 0
  %10 = bitcast [8 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #3
  %11 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 0
  %12 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 1
  %13 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 2
  %14 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 3
  %15 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 4
  %16 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 5
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 6
  %18 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 7
  %19 = bitcast [8 x i32]* %7 to i8*
  %20 = bitcast [8 x i32]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #3
  %21 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 0
  %22 = bitcast [8 x i32]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 32, i1 false)
  call void @vpx_highbd_idct8_c(i32* %0, i32* nonnull %9, i32 undef)
  %23 = getelementptr inbounds i32, i32* %0, i64 8
  %24 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 8
  call void @vpx_highbd_idct8_c(i32* %23, i32* %24, i32 undef)
  %25 = getelementptr inbounds i32, i32* %0, i64 16
  %26 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 16
  call void @vpx_highbd_idct8_c(i32* %25, i32* %26, i32 undef)
  %27 = getelementptr inbounds i32, i32* %0, i64 24
  %28 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 24
  call void @vpx_highbd_idct8_c(i32* %27, i32* %28, i32 undef)
  %29 = getelementptr inbounds i32, i32* %0, i64 32
  %30 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 32
  call void @vpx_highbd_idct8_c(i32* %29, i32* %30, i32 undef)
  %31 = getelementptr inbounds i32, i32* %0, i64 40
  %32 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 40
  call void @vpx_highbd_idct8_c(i32* %31, i32* %32, i32 undef)
  %33 = getelementptr inbounds i32, i32* %0, i64 48
  %34 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 48
  call void @vpx_highbd_idct8_c(i32* %33, i32* %34, i32 undef)
  %35 = getelementptr inbounds i32, i32* %0, i64 56
  %36 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 56
  call void @vpx_highbd_idct8_c(i32* %35, i32* %36, i32 undef)
  %37 = sext i32 %2 to i64
  %38 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 0
  %39 = icmp eq i32 %3, 10
  %40 = select i1 %39, i32 1023, i32 255
  %41 = icmp eq i32 %3, 12
  %42 = select i1 %41, i32 4095, i32 %40
  %43 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 1
  %44 = icmp eq i32 %3, 10
  %45 = select i1 %44, i32 1023, i32 255
  %46 = icmp eq i32 %3, 12
  %47 = select i1 %46, i32 4095, i32 %45
  %48 = shl nsw i64 %37, 1
  %49 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 2
  %50 = icmp eq i32 %3, 10
  %51 = select i1 %50, i32 1023, i32 255
  %52 = icmp eq i32 %3, 12
  %53 = select i1 %52, i32 4095, i32 %51
  %54 = mul nsw i64 %37, 3
  %55 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 3
  %56 = icmp eq i32 %3, 10
  %57 = select i1 %56, i32 1023, i32 255
  %58 = icmp eq i32 %3, 12
  %59 = select i1 %58, i32 4095, i32 %57
  %60 = shl nsw i64 %37, 2
  %61 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 4
  %62 = icmp eq i32 %3, 10
  %63 = select i1 %62, i32 1023, i32 255
  %64 = icmp eq i32 %3, 12
  %65 = select i1 %64, i32 4095, i32 %63
  %66 = mul nsw i64 %37, 5
  %67 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 5
  %68 = icmp eq i32 %3, 10
  %69 = select i1 %68, i32 1023, i32 255
  %70 = icmp eq i32 %3, 12
  %71 = select i1 %70, i32 4095, i32 %69
  %72 = mul nsw i64 %37, 6
  %73 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 6
  %74 = icmp eq i32 %3, 10
  %75 = select i1 %74, i32 1023, i32 255
  %76 = icmp eq i32 %3, 12
  %77 = select i1 %76, i32 4095, i32 %75
  %78 = mul nsw i64 %37, 7
  %79 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 7
  %80 = icmp eq i32 %3, 10
  %81 = select i1 %80, i32 1023, i32 255
  %82 = icmp eq i32 %3, 12
  %83 = select i1 %82, i32 4095, i32 %81
  br label %84

84:                                               ; preds = %84, %4
  %85 = phi i64 [ 0, %4 ], [ %212, %84 ]
  %86 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %85
  %87 = load i32, i32* %86, align 4
  store i32 %87, i32* %11, align 16
  %88 = add nuw nsw i64 %85, 8
  %89 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %88
  %90 = load i32, i32* %89, align 4
  store i32 %90, i32* %12, align 4
  %91 = add nuw nsw i64 %85, 16
  %92 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %91
  %93 = load i32, i32* %92, align 4
  store i32 %93, i32* %13, align 8
  %94 = add nuw nsw i64 %85, 24
  %95 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %94
  %96 = load i32, i32* %95, align 4
  store i32 %96, i32* %14, align 4
  %97 = add nuw nsw i64 %85, 32
  %98 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %97
  %99 = load i32, i32* %98, align 4
  store i32 %99, i32* %15, align 16
  %100 = add nuw nsw i64 %85, 40
  %101 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %100
  %102 = load i32, i32* %101, align 4
  store i32 %102, i32* %16, align 4
  %103 = add nuw nsw i64 %85, 48
  %104 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %103
  %105 = load i32, i32* %104, align 4
  store i32 %105, i32* %17, align 8
  %106 = add nuw nsw i64 %85, 56
  %107 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %106
  %108 = load i32, i32* %107, align 4
  store i32 %108, i32* %18, align 4
  call void @vpx_highbd_idct8_c(i32* nonnull %11, i32* nonnull %21, i32 undef)
  %109 = getelementptr inbounds i16, i16* %1, i64 %85
  %110 = load i16, i16* %109, align 2
  %111 = load i32, i32* %38, align 16
  %112 = add nsw i32 %111, 16
  %113 = ashr i32 %112, 5
  %114 = zext i16 %110 to i32
  %115 = add nsw i32 %113, %114
  %116 = icmp slt i32 %115, %42
  %117 = select i1 %116, i32 %115, i32 %42
  %118 = icmp sgt i32 %117, 0
  %119 = select i1 %118, i32 %117, i32 0
  %120 = trunc i32 %119 to i16
  store i16 %120, i16* %109, align 2
  %121 = add nsw i64 %85, %37
  %122 = getelementptr inbounds i16, i16* %1, i64 %121
  %123 = load i16, i16* %122, align 2
  %124 = load i32, i32* %43, align 4
  %125 = add nsw i32 %124, 16
  %126 = ashr i32 %125, 5
  %127 = zext i16 %123 to i32
  %128 = add nsw i32 %126, %127
  %129 = icmp slt i32 %128, %47
  %130 = select i1 %129, i32 %128, i32 %47
  %131 = icmp sgt i32 %130, 0
  %132 = select i1 %131, i32 %130, i32 0
  %133 = trunc i32 %132 to i16
  store i16 %133, i16* %122, align 2
  %134 = add nsw i64 %48, %85
  %135 = getelementptr inbounds i16, i16* %1, i64 %134
  %136 = load i16, i16* %135, align 2
  %137 = load i32, i32* %49, align 8
  %138 = add nsw i32 %137, 16
  %139 = ashr i32 %138, 5
  %140 = zext i16 %136 to i32
  %141 = add nsw i32 %139, %140
  %142 = icmp slt i32 %141, %53
  %143 = select i1 %142, i32 %141, i32 %53
  %144 = icmp sgt i32 %143, 0
  %145 = select i1 %144, i32 %143, i32 0
  %146 = trunc i32 %145 to i16
  store i16 %146, i16* %135, align 2
  %147 = add nsw i64 %54, %85
  %148 = getelementptr inbounds i16, i16* %1, i64 %147
  %149 = load i16, i16* %148, align 2
  %150 = load i32, i32* %55, align 4
  %151 = add nsw i32 %150, 16
  %152 = ashr i32 %151, 5
  %153 = zext i16 %149 to i32
  %154 = add nsw i32 %152, %153
  %155 = icmp slt i32 %154, %59
  %156 = select i1 %155, i32 %154, i32 %59
  %157 = icmp sgt i32 %156, 0
  %158 = select i1 %157, i32 %156, i32 0
  %159 = trunc i32 %158 to i16
  store i16 %159, i16* %148, align 2
  %160 = add nsw i64 %60, %85
  %161 = getelementptr inbounds i16, i16* %1, i64 %160
  %162 = load i16, i16* %161, align 2
  %163 = load i32, i32* %61, align 16
  %164 = add nsw i32 %163, 16
  %165 = ashr i32 %164, 5
  %166 = zext i16 %162 to i32
  %167 = add nsw i32 %165, %166
  %168 = icmp slt i32 %167, %65
  %169 = select i1 %168, i32 %167, i32 %65
  %170 = icmp sgt i32 %169, 0
  %171 = select i1 %170, i32 %169, i32 0
  %172 = trunc i32 %171 to i16
  store i16 %172, i16* %161, align 2
  %173 = add nsw i64 %66, %85
  %174 = getelementptr inbounds i16, i16* %1, i64 %173
  %175 = load i16, i16* %174, align 2
  %176 = load i32, i32* %67, align 4
  %177 = add nsw i32 %176, 16
  %178 = ashr i32 %177, 5
  %179 = zext i16 %175 to i32
  %180 = add nsw i32 %178, %179
  %181 = icmp slt i32 %180, %71
  %182 = select i1 %181, i32 %180, i32 %71
  %183 = icmp sgt i32 %182, 0
  %184 = select i1 %183, i32 %182, i32 0
  %185 = trunc i32 %184 to i16
  store i16 %185, i16* %174, align 2
  %186 = add nsw i64 %72, %85
  %187 = getelementptr inbounds i16, i16* %1, i64 %186
  %188 = load i16, i16* %187, align 2
  %189 = load i32, i32* %73, align 8
  %190 = add nsw i32 %189, 16
  %191 = ashr i32 %190, 5
  %192 = zext i16 %188 to i32
  %193 = add nsw i32 %191, %192
  %194 = icmp slt i32 %193, %77
  %195 = select i1 %194, i32 %193, i32 %77
  %196 = icmp sgt i32 %195, 0
  %197 = select i1 %196, i32 %195, i32 0
  %198 = trunc i32 %197 to i16
  store i16 %198, i16* %187, align 2
  %199 = add nsw i64 %78, %85
  %200 = getelementptr inbounds i16, i16* %1, i64 %199
  %201 = load i16, i16* %200, align 2
  %202 = load i32, i32* %79, align 4
  %203 = add nsw i32 %202, 16
  %204 = ashr i32 %203, 5
  %205 = zext i16 %201 to i32
  %206 = add nsw i32 %204, %205
  %207 = icmp slt i32 %206, %83
  %208 = select i1 %207, i32 %206, i32 %83
  %209 = icmp sgt i32 %208, 0
  %210 = select i1 %209, i32 %208, i32 0
  %211 = trunc i32 %210 to i16
  store i16 %211, i16* %200, align 2
  %212 = add nuw nsw i64 %85, 1
  %213 = icmp eq i64 %212, 8
  br i1 %213, label %214, label %84

214:                                              ; preds = %84
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %8) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct8x8_12_add_c(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [64 x i32], align 16
  %6 = alloca [8 x i32], align 16
  %7 = alloca [8 x i32], align 16
  %8 = bitcast [64 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 256, i1 false)
  %9 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 0
  %10 = bitcast [8 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #3
  %11 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 0
  %12 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 1
  %13 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 2
  %14 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 3
  %15 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 4
  %16 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 5
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 6
  %18 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 7
  %19 = bitcast [8 x i32]* %7 to i8*
  %20 = bitcast [8 x i32]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #3
  %21 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 0
  %22 = bitcast [8 x i32]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 32, i1 false)
  call void @vpx_highbd_idct8_c(i32* %0, i32* nonnull %9, i32 undef)
  %23 = getelementptr inbounds i32, i32* %0, i64 8
  %24 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 8
  call void @vpx_highbd_idct8_c(i32* %23, i32* %24, i32 undef)
  %25 = getelementptr inbounds i32, i32* %0, i64 16
  %26 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 16
  call void @vpx_highbd_idct8_c(i32* %25, i32* %26, i32 undef)
  %27 = getelementptr inbounds i32, i32* %0, i64 24
  %28 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 24
  call void @vpx_highbd_idct8_c(i32* %27, i32* %28, i32 undef)
  %29 = sext i32 %2 to i64
  %30 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 0
  %31 = icmp eq i32 %3, 10
  %32 = select i1 %31, i32 1023, i32 255
  %33 = icmp eq i32 %3, 12
  %34 = select i1 %33, i32 4095, i32 %32
  %35 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 1
  %36 = icmp eq i32 %3, 10
  %37 = select i1 %36, i32 1023, i32 255
  %38 = icmp eq i32 %3, 12
  %39 = select i1 %38, i32 4095, i32 %37
  %40 = shl nsw i64 %29, 1
  %41 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 2
  %42 = icmp eq i32 %3, 10
  %43 = select i1 %42, i32 1023, i32 255
  %44 = icmp eq i32 %3, 12
  %45 = select i1 %44, i32 4095, i32 %43
  %46 = mul nsw i64 %29, 3
  %47 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 3
  %48 = icmp eq i32 %3, 10
  %49 = select i1 %48, i32 1023, i32 255
  %50 = icmp eq i32 %3, 12
  %51 = select i1 %50, i32 4095, i32 %49
  %52 = shl nsw i64 %29, 2
  %53 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 4
  %54 = icmp eq i32 %3, 10
  %55 = select i1 %54, i32 1023, i32 255
  %56 = icmp eq i32 %3, 12
  %57 = select i1 %56, i32 4095, i32 %55
  %58 = mul nsw i64 %29, 5
  %59 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 5
  %60 = icmp eq i32 %3, 10
  %61 = select i1 %60, i32 1023, i32 255
  %62 = icmp eq i32 %3, 12
  %63 = select i1 %62, i32 4095, i32 %61
  %64 = mul nsw i64 %29, 6
  %65 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 6
  %66 = icmp eq i32 %3, 10
  %67 = select i1 %66, i32 1023, i32 255
  %68 = icmp eq i32 %3, 12
  %69 = select i1 %68, i32 4095, i32 %67
  %70 = mul nsw i64 %29, 7
  %71 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 7
  %72 = icmp eq i32 %3, 10
  %73 = select i1 %72, i32 1023, i32 255
  %74 = icmp eq i32 %3, 12
  %75 = select i1 %74, i32 4095, i32 %73
  br label %76

76:                                               ; preds = %76, %4
  %77 = phi i64 [ 0, %4 ], [ %204, %76 ]
  %78 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %77
  %79 = load i32, i32* %78, align 4
  store i32 %79, i32* %11, align 16
  %80 = add nuw nsw i64 %77, 8
  %81 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %80
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %12, align 4
  %83 = add nuw nsw i64 %77, 16
  %84 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %83
  %85 = load i32, i32* %84, align 4
  store i32 %85, i32* %13, align 8
  %86 = add nuw nsw i64 %77, 24
  %87 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %86
  %88 = load i32, i32* %87, align 4
  store i32 %88, i32* %14, align 4
  %89 = add nuw nsw i64 %77, 32
  %90 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %89
  %91 = load i32, i32* %90, align 4
  store i32 %91, i32* %15, align 16
  %92 = add nuw nsw i64 %77, 40
  %93 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %92
  %94 = load i32, i32* %93, align 4
  store i32 %94, i32* %16, align 4
  %95 = add nuw nsw i64 %77, 48
  %96 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %95
  %97 = load i32, i32* %96, align 4
  store i32 %97, i32* %17, align 8
  %98 = add nuw nsw i64 %77, 56
  %99 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %98
  %100 = load i32, i32* %99, align 4
  store i32 %100, i32* %18, align 4
  call void @vpx_highbd_idct8_c(i32* nonnull %11, i32* nonnull %21, i32 undef)
  %101 = getelementptr inbounds i16, i16* %1, i64 %77
  %102 = load i16, i16* %101, align 2
  %103 = load i32, i32* %30, align 16
  %104 = add nsw i32 %103, 16
  %105 = ashr i32 %104, 5
  %106 = zext i16 %102 to i32
  %107 = add nsw i32 %105, %106
  %108 = icmp slt i32 %107, %34
  %109 = select i1 %108, i32 %107, i32 %34
  %110 = icmp sgt i32 %109, 0
  %111 = select i1 %110, i32 %109, i32 0
  %112 = trunc i32 %111 to i16
  store i16 %112, i16* %101, align 2
  %113 = add nsw i64 %77, %29
  %114 = getelementptr inbounds i16, i16* %1, i64 %113
  %115 = load i16, i16* %114, align 2
  %116 = load i32, i32* %35, align 4
  %117 = add nsw i32 %116, 16
  %118 = ashr i32 %117, 5
  %119 = zext i16 %115 to i32
  %120 = add nsw i32 %118, %119
  %121 = icmp slt i32 %120, %39
  %122 = select i1 %121, i32 %120, i32 %39
  %123 = icmp sgt i32 %122, 0
  %124 = select i1 %123, i32 %122, i32 0
  %125 = trunc i32 %124 to i16
  store i16 %125, i16* %114, align 2
  %126 = add nsw i64 %40, %77
  %127 = getelementptr inbounds i16, i16* %1, i64 %126
  %128 = load i16, i16* %127, align 2
  %129 = load i32, i32* %41, align 8
  %130 = add nsw i32 %129, 16
  %131 = ashr i32 %130, 5
  %132 = zext i16 %128 to i32
  %133 = add nsw i32 %131, %132
  %134 = icmp slt i32 %133, %45
  %135 = select i1 %134, i32 %133, i32 %45
  %136 = icmp sgt i32 %135, 0
  %137 = select i1 %136, i32 %135, i32 0
  %138 = trunc i32 %137 to i16
  store i16 %138, i16* %127, align 2
  %139 = add nsw i64 %46, %77
  %140 = getelementptr inbounds i16, i16* %1, i64 %139
  %141 = load i16, i16* %140, align 2
  %142 = load i32, i32* %47, align 4
  %143 = add nsw i32 %142, 16
  %144 = ashr i32 %143, 5
  %145 = zext i16 %141 to i32
  %146 = add nsw i32 %144, %145
  %147 = icmp slt i32 %146, %51
  %148 = select i1 %147, i32 %146, i32 %51
  %149 = icmp sgt i32 %148, 0
  %150 = select i1 %149, i32 %148, i32 0
  %151 = trunc i32 %150 to i16
  store i16 %151, i16* %140, align 2
  %152 = add nsw i64 %52, %77
  %153 = getelementptr inbounds i16, i16* %1, i64 %152
  %154 = load i16, i16* %153, align 2
  %155 = load i32, i32* %53, align 16
  %156 = add nsw i32 %155, 16
  %157 = ashr i32 %156, 5
  %158 = zext i16 %154 to i32
  %159 = add nsw i32 %157, %158
  %160 = icmp slt i32 %159, %57
  %161 = select i1 %160, i32 %159, i32 %57
  %162 = icmp sgt i32 %161, 0
  %163 = select i1 %162, i32 %161, i32 0
  %164 = trunc i32 %163 to i16
  store i16 %164, i16* %153, align 2
  %165 = add nsw i64 %58, %77
  %166 = getelementptr inbounds i16, i16* %1, i64 %165
  %167 = load i16, i16* %166, align 2
  %168 = load i32, i32* %59, align 4
  %169 = add nsw i32 %168, 16
  %170 = ashr i32 %169, 5
  %171 = zext i16 %167 to i32
  %172 = add nsw i32 %170, %171
  %173 = icmp slt i32 %172, %63
  %174 = select i1 %173, i32 %172, i32 %63
  %175 = icmp sgt i32 %174, 0
  %176 = select i1 %175, i32 %174, i32 0
  %177 = trunc i32 %176 to i16
  store i16 %177, i16* %166, align 2
  %178 = add nsw i64 %64, %77
  %179 = getelementptr inbounds i16, i16* %1, i64 %178
  %180 = load i16, i16* %179, align 2
  %181 = load i32, i32* %65, align 8
  %182 = add nsw i32 %181, 16
  %183 = ashr i32 %182, 5
  %184 = zext i16 %180 to i32
  %185 = add nsw i32 %183, %184
  %186 = icmp slt i32 %185, %69
  %187 = select i1 %186, i32 %185, i32 %69
  %188 = icmp sgt i32 %187, 0
  %189 = select i1 %188, i32 %187, i32 0
  %190 = trunc i32 %189 to i16
  store i16 %190, i16* %179, align 2
  %191 = add nsw i64 %70, %77
  %192 = getelementptr inbounds i16, i16* %1, i64 %191
  %193 = load i16, i16* %192, align 2
  %194 = load i32, i32* %71, align 4
  %195 = add nsw i32 %194, 16
  %196 = ashr i32 %195, 5
  %197 = zext i16 %193 to i32
  %198 = add nsw i32 %196, %197
  %199 = icmp slt i32 %198, %75
  %200 = select i1 %199, i32 %198, i32 %75
  %201 = icmp sgt i32 %200, 0
  %202 = select i1 %201, i32 %200, i32 0
  %203 = trunc i32 %202 to i16
  store i16 %203, i16* %192, align 2
  %204 = add nuw nsw i64 %77, 1
  %205 = icmp eq i64 %204, 8
  br i1 %205, label %206, label %76

206:                                              ; preds = %76
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %8) #3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_idct8x8_1_add_c(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #2 {
  %5 = load i32, i32* %0, align 4
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %6, 11585
  %8 = add nsw i64 %7, 8192
  %9 = lshr i64 %8, 14
  %10 = shl i64 %9, 32
  %11 = ashr exact i64 %10, 32
  %12 = mul nsw i64 %11, 11585
  %13 = add nsw i64 %12, 8192
  %14 = lshr i64 %13, 14
  %15 = trunc i64 %14 to i32
  %16 = add nsw i32 %15, 16
  %17 = ashr i32 %16, 5
  %18 = sext i32 %2 to i64
  br label %19

19:                                               ; preds = %224, %4
  %20 = phi i16* [ %1, %4 ], [ %230, %224 ]
  %21 = phi i32 [ 0, %4 ], [ %231, %224 ]
  %22 = load i16, i16* %20, align 2
  %23 = zext i16 %22 to i32
  %24 = add nsw i32 %17, %23
  switch i32 %3, label %157 [
    i32 12, label %91
    i32 10, label %25
  ]

25:                                               ; preds = %19
  %26 = icmp slt i32 %24, 1023
  %27 = select i1 %26, i32 %24, i32 1023
  %28 = icmp sgt i32 %27, 0
  %29 = select i1 %28, i32 %27, i32 0
  %30 = trunc i32 %29 to i16
  store i16 %30, i16* %20, align 2
  %31 = getelementptr inbounds i16, i16* %20, i64 1
  %32 = load i16, i16* %31, align 2
  %33 = zext i16 %32 to i32
  %34 = add nsw i32 %17, %33
  %35 = icmp slt i32 %34, 1023
  %36 = select i1 %35, i32 %34, i32 1023
  %37 = icmp sgt i32 %36, 0
  %38 = select i1 %37, i32 %36, i32 0
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %31, align 2
  %40 = getelementptr inbounds i16, i16* %20, i64 2
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nsw i32 %17, %42
  %44 = icmp slt i32 %43, 1023
  %45 = select i1 %44, i32 %43, i32 1023
  %46 = icmp sgt i32 %45, 0
  %47 = select i1 %46, i32 %45, i32 0
  %48 = trunc i32 %47 to i16
  store i16 %48, i16* %40, align 2
  %49 = getelementptr inbounds i16, i16* %20, i64 3
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = add nsw i32 %17, %51
  %53 = icmp slt i32 %52, 1023
  %54 = select i1 %53, i32 %52, i32 1023
  %55 = icmp sgt i32 %54, 0
  %56 = select i1 %55, i32 %54, i32 0
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %49, align 2
  %58 = getelementptr inbounds i16, i16* %20, i64 4
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = add nsw i32 %17, %60
  %62 = icmp slt i32 %61, 1023
  %63 = select i1 %62, i32 %61, i32 1023
  %64 = icmp sgt i32 %63, 0
  %65 = select i1 %64, i32 %63, i32 0
  %66 = trunc i32 %65 to i16
  store i16 %66, i16* %58, align 2
  %67 = getelementptr inbounds i16, i16* %20, i64 5
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = add nsw i32 %17, %69
  %71 = icmp slt i32 %70, 1023
  %72 = select i1 %71, i32 %70, i32 1023
  %73 = icmp sgt i32 %72, 0
  %74 = select i1 %73, i32 %72, i32 0
  %75 = trunc i32 %74 to i16
  store i16 %75, i16* %67, align 2
  %76 = getelementptr inbounds i16, i16* %20, i64 6
  %77 = load i16, i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = add nsw i32 %17, %78
  %80 = icmp slt i32 %79, 1023
  %81 = select i1 %80, i32 %79, i32 1023
  %82 = icmp sgt i32 %81, 0
  %83 = select i1 %82, i32 %81, i32 0
  %84 = trunc i32 %83 to i16
  store i16 %84, i16* %76, align 2
  %85 = getelementptr inbounds i16, i16* %20, i64 7
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = add nsw i32 %17, %87
  %89 = icmp slt i32 %88, 1023
  %90 = select i1 %89, i32 %88, i32 1023
  br label %224

91:                                               ; preds = %19
  %92 = icmp slt i32 %24, 4095
  %93 = select i1 %92, i32 %24, i32 4095
  %94 = icmp sgt i32 %93, 0
  %95 = select i1 %94, i32 %93, i32 0
  %96 = trunc i32 %95 to i16
  store i16 %96, i16* %20, align 2
  %97 = getelementptr inbounds i16, i16* %20, i64 1
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = add nsw i32 %17, %99
  %101 = icmp slt i32 %100, 4095
  %102 = select i1 %101, i32 %100, i32 4095
  %103 = icmp sgt i32 %102, 0
  %104 = select i1 %103, i32 %102, i32 0
  %105 = trunc i32 %104 to i16
  store i16 %105, i16* %97, align 2
  %106 = getelementptr inbounds i16, i16* %20, i64 2
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = add nsw i32 %17, %108
  %110 = icmp slt i32 %109, 4095
  %111 = select i1 %110, i32 %109, i32 4095
  %112 = icmp sgt i32 %111, 0
  %113 = select i1 %112, i32 %111, i32 0
  %114 = trunc i32 %113 to i16
  store i16 %114, i16* %106, align 2
  %115 = getelementptr inbounds i16, i16* %20, i64 3
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = add nsw i32 %17, %117
  %119 = icmp slt i32 %118, 4095
  %120 = select i1 %119, i32 %118, i32 4095
  %121 = icmp sgt i32 %120, 0
  %122 = select i1 %121, i32 %120, i32 0
  %123 = trunc i32 %122 to i16
  store i16 %123, i16* %115, align 2
  %124 = getelementptr inbounds i16, i16* %20, i64 4
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = add nsw i32 %17, %126
  %128 = icmp slt i32 %127, 4095
  %129 = select i1 %128, i32 %127, i32 4095
  %130 = icmp sgt i32 %129, 0
  %131 = select i1 %130, i32 %129, i32 0
  %132 = trunc i32 %131 to i16
  store i16 %132, i16* %124, align 2
  %133 = getelementptr inbounds i16, i16* %20, i64 5
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  %136 = add nsw i32 %17, %135
  %137 = icmp slt i32 %136, 4095
  %138 = select i1 %137, i32 %136, i32 4095
  %139 = icmp sgt i32 %138, 0
  %140 = select i1 %139, i32 %138, i32 0
  %141 = trunc i32 %140 to i16
  store i16 %141, i16* %133, align 2
  %142 = getelementptr inbounds i16, i16* %20, i64 6
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = add nsw i32 %17, %144
  %146 = icmp slt i32 %145, 4095
  %147 = select i1 %146, i32 %145, i32 4095
  %148 = icmp sgt i32 %147, 0
  %149 = select i1 %148, i32 %147, i32 0
  %150 = trunc i32 %149 to i16
  store i16 %150, i16* %142, align 2
  %151 = getelementptr inbounds i16, i16* %20, i64 7
  %152 = load i16, i16* %151, align 2
  %153 = zext i16 %152 to i32
  %154 = add nsw i32 %17, %153
  %155 = icmp slt i32 %154, 4095
  %156 = select i1 %155, i32 %154, i32 4095
  br label %224

157:                                              ; preds = %19
  %158 = icmp slt i32 %24, 255
  %159 = select i1 %158, i32 %24, i32 255
  %160 = icmp sgt i32 %159, 0
  %161 = select i1 %160, i32 %159, i32 0
  %162 = trunc i32 %161 to i16
  store i16 %162, i16* %20, align 2
  %163 = getelementptr inbounds i16, i16* %20, i64 1
  %164 = load i16, i16* %163, align 2
  %165 = zext i16 %164 to i32
  %166 = add nsw i32 %17, %165
  %167 = icmp slt i32 %166, 255
  %168 = select i1 %167, i32 %166, i32 255
  %169 = icmp sgt i32 %168, 0
  %170 = select i1 %169, i32 %168, i32 0
  %171 = trunc i32 %170 to i16
  store i16 %171, i16* %163, align 2
  %172 = getelementptr inbounds i16, i16* %20, i64 2
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = add nsw i32 %17, %174
  %176 = icmp slt i32 %175, 255
  %177 = select i1 %176, i32 %175, i32 255
  %178 = icmp sgt i32 %177, 0
  %179 = select i1 %178, i32 %177, i32 0
  %180 = trunc i32 %179 to i16
  store i16 %180, i16* %172, align 2
  %181 = getelementptr inbounds i16, i16* %20, i64 3
  %182 = load i16, i16* %181, align 2
  %183 = zext i16 %182 to i32
  %184 = add nsw i32 %17, %183
  %185 = icmp slt i32 %184, 255
  %186 = select i1 %185, i32 %184, i32 255
  %187 = icmp sgt i32 %186, 0
  %188 = select i1 %187, i32 %186, i32 0
  %189 = trunc i32 %188 to i16
  store i16 %189, i16* %181, align 2
  %190 = getelementptr inbounds i16, i16* %20, i64 4
  %191 = load i16, i16* %190, align 2
  %192 = zext i16 %191 to i32
  %193 = add nsw i32 %17, %192
  %194 = icmp slt i32 %193, 255
  %195 = select i1 %194, i32 %193, i32 255
  %196 = icmp sgt i32 %195, 0
  %197 = select i1 %196, i32 %195, i32 0
  %198 = trunc i32 %197 to i16
  store i16 %198, i16* %190, align 2
  %199 = getelementptr inbounds i16, i16* %20, i64 5
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = add nsw i32 %17, %201
  %203 = icmp slt i32 %202, 255
  %204 = select i1 %203, i32 %202, i32 255
  %205 = icmp sgt i32 %204, 0
  %206 = select i1 %205, i32 %204, i32 0
  %207 = trunc i32 %206 to i16
  store i16 %207, i16* %199, align 2
  %208 = getelementptr inbounds i16, i16* %20, i64 6
  %209 = load i16, i16* %208, align 2
  %210 = zext i16 %209 to i32
  %211 = add nsw i32 %17, %210
  %212 = icmp slt i32 %211, 255
  %213 = select i1 %212, i32 %211, i32 255
  %214 = icmp sgt i32 %213, 0
  %215 = select i1 %214, i32 %213, i32 0
  %216 = trunc i32 %215 to i16
  store i16 %216, i16* %208, align 2
  %217 = getelementptr inbounds i16, i16* %20, i64 7
  %218 = load i16, i16* %217, align 2
  %219 = zext i16 %218 to i32
  %220 = add nsw i32 %17, %219
  %221 = icmp slt i32 %220, 255
  %222 = select i1 %221, i32 %220, i32 255
  br label %224

223:                                              ; preds = %224
  ret void

224:                                              ; preds = %157, %91, %25
  %225 = phi i32 [ %222, %157 ], [ %156, %91 ], [ %90, %25 ]
  %226 = phi i16* [ %217, %157 ], [ %151, %91 ], [ %85, %25 ]
  %227 = icmp sgt i32 %225, 0
  %228 = select i1 %227, i32 %225, i32 0
  %229 = trunc i32 %228 to i16
  store i16 %229, i16* %226, align 2
  %230 = getelementptr inbounds i16, i16* %20, i64 %18
  %231 = add nuw nsw i32 %21, 1
  %232 = icmp eq i32 %231, 8
  br i1 %232, label %223, label %19
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_iadst16_c(i32* nocapture readonly, i32* nocapture, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds i32, i32* %0, i64 15
  %5 = load i32, i32* %4, align 4
  %6 = load i32, i32* %0, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 13
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 11
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 4
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds i32, i32* %0, i64 9
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds i32, i32* %0, i64 6
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 7
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds i32, i32* %0, i64 8
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds i32, i32* %0, i64 5
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds i32, i32* %0, i64 10
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds i32, i32* %0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds i32, i32* %0, i64 12
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds i32, i32* %0, i64 1
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds i32, i32* %0, i64 14
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %6, 0
  %36 = sub nsw i32 0, %6
  %37 = select i1 %35, i32 %36, i32 %6
  %38 = icmp sgt i32 %37, 33554431
  br i1 %38, label %44, label %39

39:                                               ; preds = %3
  %40 = icmp slt i32 %32, 0
  %41 = sub nsw i32 0, %32
  %42 = select i1 %40, i32 %41, i32 %32
  %43 = icmp sgt i32 %42, 33554431
  br i1 %43, label %44, label %421

44:                                               ; preds = %486, %481, %476, %471, %466, %461, %456, %451, %446, %441, %436, %431, %426, %421, %39, %3
  %45 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %45, i8 0, i64 64, i1 false)
  br label %420

46:                                               ; preds = %491
  %47 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %47, i8 0, i64 64, i1 false)
  br label %420

48:                                               ; preds = %491
  %49 = sext i32 %5 to i64
  %50 = mul nsw i64 %49, 16364
  %51 = sext i32 %6 to i64
  %52 = mul nsw i64 %51, 804
  %53 = add nsw i64 %52, %50
  %54 = mul nsw i64 %49, 804
  %55 = mul nsw i64 %51, -16364
  %56 = add nsw i64 %55, %54
  %57 = sext i32 %8 to i64
  %58 = mul nsw i64 %57, 15893
  %59 = sext i32 %10 to i64
  %60 = mul nsw i64 %59, 3981
  %61 = add nsw i64 %60, %58
  %62 = mul nsw i64 %57, 3981
  %63 = mul nsw i64 %59, -15893
  %64 = add nsw i64 %63, %62
  %65 = sext i32 %12 to i64
  %66 = mul nsw i64 %65, 14811
  %67 = sext i32 %14 to i64
  %68 = mul nsw i64 %67, 7005
  %69 = add nsw i64 %68, %66
  %70 = mul nsw i64 %65, 7005
  %71 = mul nsw i64 %67, -14811
  %72 = add nsw i64 %71, %70
  %73 = sext i32 %16 to i64
  %74 = mul nsw i64 %73, 13160
  %75 = sext i32 %18 to i64
  %76 = mul nsw i64 %75, 9760
  %77 = add nsw i64 %76, %74
  %78 = mul nsw i64 %73, 9760
  %79 = mul nsw i64 %75, -13160
  %80 = add nsw i64 %79, %78
  %81 = sext i32 %20 to i64
  %82 = mul nsw i64 %81, 11003
  %83 = sext i32 %22 to i64
  %84 = mul nsw i64 %83, 12140
  %85 = add nsw i64 %84, %82
  %86 = mul nsw i64 %81, 12140
  %87 = mul nsw i64 %83, -11003
  %88 = add nsw i64 %87, %86
  %89 = sext i32 %24 to i64
  %90 = mul nsw i64 %89, 8423
  %91 = sext i32 %26 to i64
  %92 = mul nsw i64 %91, 14053
  %93 = add nsw i64 %92, %90
  %94 = mul nsw i64 %89, 14053
  %95 = mul nsw i64 %91, -8423
  %96 = add nsw i64 %95, %94
  %97 = sext i32 %28 to i64
  %98 = mul nsw i64 %97, 5520
  %99 = sext i32 %30 to i64
  %100 = mul nsw i64 %99, 15426
  %101 = add nsw i64 %100, %98
  %102 = mul nsw i64 %97, 15426
  %103 = mul nsw i64 %99, -5520
  %104 = add nsw i64 %103, %102
  %105 = sext i32 %32 to i64
  %106 = mul nsw i64 %105, 2404
  %107 = sext i32 %34 to i64
  %108 = mul nsw i64 %107, 16207
  %109 = add nsw i64 %108, %106
  %110 = mul nsw i64 %105, 16207
  %111 = mul nsw i64 %107, -2404
  %112 = add nsw i64 %111, %110
  %113 = add nsw i64 %53, 8192
  %114 = add nsw i64 %113, %85
  %115 = lshr i64 %114, 14
  %116 = add nsw i64 %56, 8192
  %117 = add nsw i64 %116, %88
  %118 = lshr i64 %117, 14
  %119 = add nsw i64 %61, 8192
  %120 = add nsw i64 %119, %93
  %121 = lshr i64 %120, 14
  %122 = add nsw i64 %64, 8192
  %123 = add nsw i64 %122, %96
  %124 = lshr i64 %123, 14
  %125 = add nsw i64 %69, 8192
  %126 = add nsw i64 %125, %101
  %127 = lshr i64 %126, 14
  %128 = add nsw i64 %72, 8192
  %129 = add nsw i64 %128, %104
  %130 = lshr i64 %129, 14
  %131 = add nsw i64 %77, 8192
  %132 = add nsw i64 %131, %109
  %133 = lshr i64 %132, 14
  %134 = add nsw i64 %80, 8192
  %135 = add nsw i64 %134, %112
  %136 = lshr i64 %135, 14
  %137 = sub nsw i64 %113, %85
  %138 = lshr i64 %137, 14
  %139 = sub nsw i64 %116, %88
  %140 = lshr i64 %139, 14
  %141 = sub nsw i64 %119, %93
  %142 = lshr i64 %141, 14
  %143 = sub nsw i64 %122, %96
  %144 = lshr i64 %143, 14
  %145 = sub nsw i64 %125, %101
  %146 = lshr i64 %145, 14
  %147 = sub nsw i64 %128, %104
  %148 = lshr i64 %147, 14
  %149 = sub nsw i64 %131, %109
  %150 = lshr i64 %149, 14
  %151 = sub nsw i64 %134, %112
  %152 = lshr i64 %151, 14
  %153 = shl i64 %115, 32
  %154 = ashr exact i64 %153, 32
  %155 = shl i64 %118, 32
  %156 = ashr exact i64 %155, 32
  %157 = shl i64 %121, 32
  %158 = ashr exact i64 %157, 32
  %159 = shl i64 %124, 32
  %160 = ashr exact i64 %159, 32
  %161 = shl i64 %127, 32
  %162 = ashr exact i64 %161, 32
  %163 = shl i64 %130, 32
  %164 = ashr exact i64 %163, 32
  %165 = shl i64 %133, 32
  %166 = ashr exact i64 %165, 32
  %167 = shl i64 %136, 32
  %168 = ashr exact i64 %167, 32
  %169 = shl i64 %138, 32
  %170 = ashr exact i64 %169, 32
  %171 = mul nsw i64 %170, 16069
  %172 = shl i64 %140, 32
  %173 = ashr exact i64 %172, 32
  %174 = mul nsw i64 %173, 3196
  %175 = add nsw i64 %171, %174
  %176 = mul nsw i64 %170, 3196
  %177 = mul nsw i64 %173, -16069
  %178 = add nsw i64 %176, %177
  %179 = shl i64 %142, 32
  %180 = ashr exact i64 %179, 32
  %181 = mul nsw i64 %180, 9102
  %182 = shl i64 %144, 32
  %183 = ashr exact i64 %182, 32
  %184 = mul nsw i64 %183, 13623
  %185 = add nsw i64 %181, %184
  %186 = mul nsw i64 %180, 13623
  %187 = mul nsw i64 %183, -9102
  %188 = add nsw i64 %186, %187
  %189 = shl i64 %146, 32
  %190 = sub i64 0, %189
  %191 = ashr exact i64 %190, 32
  %192 = mul nsw i64 %191, 3196
  %193 = shl i64 %148, 32
  %194 = ashr exact i64 %193, 32
  %195 = mul nsw i64 %194, 16069
  %196 = add nsw i64 %192, %195
  %197 = ashr exact i64 %189, 32
  %198 = mul nsw i64 %197, 16069
  %199 = mul nsw i64 %194, 3196
  %200 = add nsw i64 %198, %199
  %201 = shl i64 %150, 32
  %202 = sub i64 0, %201
  %203 = ashr exact i64 %202, 32
  %204 = mul nsw i64 %203, 13623
  %205 = shl i64 %152, 32
  %206 = ashr exact i64 %205, 32
  %207 = mul nsw i64 %206, 9102
  %208 = add nsw i64 %204, %207
  %209 = ashr exact i64 %201, 32
  %210 = mul nsw i64 %209, 9102
  %211 = mul nsw i64 %206, 13623
  %212 = add nsw i64 %210, %211
  %213 = add nsw i64 %162, %154
  %214 = add nsw i64 %164, %156
  %215 = add nsw i64 %166, %158
  %216 = add nsw i64 %168, %160
  %217 = sub nsw i64 %154, %162
  %218 = sub nsw i64 %156, %164
  %219 = sub nsw i64 %158, %166
  %220 = sub nsw i64 %160, %168
  %221 = add nsw i64 %175, 8192
  %222 = add nsw i64 %221, %196
  %223 = lshr i64 %222, 14
  %224 = add nsw i64 %178, 8192
  %225 = add nsw i64 %224, %200
  %226 = lshr i64 %225, 14
  %227 = add nsw i64 %185, 8192
  %228 = add nsw i64 %227, %208
  %229 = lshr i64 %228, 14
  %230 = add nsw i64 %188, 8192
  %231 = add nsw i64 %230, %212
  %232 = lshr i64 %231, 14
  %233 = sub nsw i64 %221, %196
  %234 = lshr i64 %233, 14
  %235 = sub nsw i64 %224, %200
  %236 = lshr i64 %235, 14
  %237 = sub nsw i64 %227, %208
  %238 = lshr i64 %237, 14
  %239 = sub nsw i64 %230, %212
  %240 = lshr i64 %239, 14
  %241 = shl i64 %213, 32
  %242 = ashr exact i64 %241, 32
  %243 = shl i64 %214, 32
  %244 = ashr exact i64 %243, 32
  %245 = shl i64 %215, 32
  %246 = ashr exact i64 %245, 32
  %247 = shl i64 %216, 32
  %248 = ashr exact i64 %247, 32
  %249 = shl i64 %217, 32
  %250 = ashr exact i64 %249, 32
  %251 = mul nsw i64 %250, 15137
  %252 = shl i64 %218, 32
  %253 = ashr exact i64 %252, 32
  %254 = mul nsw i64 %253, 6270
  %255 = add nsw i64 %251, %254
  %256 = mul nsw i64 %250, 6270
  %257 = mul nsw i64 %253, -15137
  %258 = add nsw i64 %256, %257
  %259 = shl i64 %219, 32
  %260 = sub i64 0, %259
  %261 = ashr exact i64 %260, 32
  %262 = mul nsw i64 %261, 6270
  %263 = shl i64 %220, 32
  %264 = ashr exact i64 %263, 32
  %265 = mul nsw i64 %264, 15137
  %266 = add nsw i64 %262, %265
  %267 = ashr exact i64 %259, 32
  %268 = mul nsw i64 %267, 15137
  %269 = mul nsw i64 %264, 6270
  %270 = add nsw i64 %268, %269
  %271 = shl i64 %223, 32
  %272 = ashr exact i64 %271, 32
  %273 = shl i64 %226, 32
  %274 = ashr exact i64 %273, 32
  %275 = shl i64 %229, 32
  %276 = ashr exact i64 %275, 32
  %277 = shl i64 %232, 32
  %278 = ashr exact i64 %277, 32
  %279 = shl i64 %234, 32
  %280 = ashr exact i64 %279, 32
  %281 = mul nsw i64 %280, 15137
  %282 = shl i64 %236, 32
  %283 = ashr exact i64 %282, 32
  %284 = mul nsw i64 %283, 6270
  %285 = add nsw i64 %281, %284
  %286 = mul nsw i64 %280, 6270
  %287 = mul nsw i64 %283, -15137
  %288 = add nsw i64 %286, %287
  %289 = shl i64 %238, 32
  %290 = sub i64 0, %289
  %291 = ashr exact i64 %290, 32
  %292 = mul nsw i64 %291, 6270
  %293 = shl i64 %240, 32
  %294 = ashr exact i64 %293, 32
  %295 = mul nsw i64 %294, 15137
  %296 = add nsw i64 %292, %295
  %297 = ashr exact i64 %289, 32
  %298 = mul nsw i64 %297, 15137
  %299 = mul nsw i64 %294, 6270
  %300 = add nsw i64 %298, %299
  %301 = add nsw i64 %246, %242
  %302 = add nsw i64 %248, %244
  %303 = sub nsw i64 %242, %246
  %304 = sub nsw i64 %244, %248
  %305 = add nsw i64 %255, 8192
  %306 = add nsw i64 %305, %266
  %307 = lshr i64 %306, 14
  %308 = add nsw i64 %258, 8192
  %309 = add nsw i64 %308, %270
  %310 = lshr i64 %309, 14
  %311 = sub nsw i64 %305, %266
  %312 = ashr i64 %311, 14
  %313 = sub nsw i64 %308, %270
  %314 = ashr i64 %313, 14
  %315 = add nsw i64 %276, %272
  %316 = add nsw i64 %278, %274
  %317 = sub nsw i64 %272, %276
  %318 = sub nsw i64 %274, %278
  %319 = add nsw i64 %285, 8192
  %320 = add nsw i64 %319, %296
  %321 = lshr i64 %320, 14
  %322 = add nsw i64 %288, 8192
  %323 = add nsw i64 %322, %300
  %324 = lshr i64 %323, 14
  %325 = sub nsw i64 %319, %296
  %326 = ashr i64 %325, 14
  %327 = sub nsw i64 %322, %300
  %328 = ashr i64 %327, 14
  %329 = add nsw i64 %303, %304
  %330 = shl i64 %329, 32
  %331 = ashr exact i64 %330, 32
  %332 = mul nsw i64 %331, -11585
  %333 = sub nsw i64 %303, %304
  %334 = shl i64 %333, 32
  %335 = ashr exact i64 %334, 32
  %336 = mul nsw i64 %335, 11585
  %337 = add nsw i64 %312, %314
  %338 = shl i64 %337, 32
  %339 = ashr exact i64 %338, 32
  %340 = mul nsw i64 %339, 11585
  %341 = sub nsw i64 %314, %312
  %342 = shl i64 %341, 32
  %343 = ashr exact i64 %342, 32
  %344 = mul nsw i64 %343, 11585
  %345 = add nsw i64 %317, %318
  %346 = shl i64 %345, 32
  %347 = ashr exact i64 %346, 32
  %348 = mul nsw i64 %347, 11585
  %349 = sub nsw i64 %318, %317
  %350 = shl i64 %349, 32
  %351 = ashr exact i64 %350, 32
  %352 = mul nsw i64 %351, 11585
  %353 = add nsw i64 %326, %328
  %354 = shl i64 %353, 32
  %355 = ashr exact i64 %354, 32
  %356 = mul nsw i64 %355, -11585
  %357 = sub nsw i64 %326, %328
  %358 = shl i64 %357, 32
  %359 = ashr exact i64 %358, 32
  %360 = mul nsw i64 %359, 11585
  %361 = add nsw i64 %332, 8192
  %362 = lshr i64 %361, 14
  %363 = add nsw i64 %336, 8192
  %364 = lshr i64 %363, 14
  %365 = add nsw i64 %340, 8192
  %366 = lshr i64 %365, 14
  %367 = add nsw i64 %344, 8192
  %368 = lshr i64 %367, 14
  %369 = add nsw i64 %348, 8192
  %370 = lshr i64 %369, 14
  %371 = add nsw i64 %352, 8192
  %372 = lshr i64 %371, 14
  %373 = add nsw i64 %356, 8192
  %374 = lshr i64 %373, 14
  %375 = add nsw i64 %360, 8192
  %376 = lshr i64 %375, 14
  %377 = trunc i64 %301 to i32
  store i32 %377, i32* %1, align 4
  %378 = shl i64 %315, 32
  %379 = sub i64 0, %378
  %380 = lshr exact i64 %379, 32
  %381 = trunc i64 %380 to i32
  %382 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %381, i32* %382, align 4
  %383 = trunc i64 %321 to i32
  %384 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %383, i32* %384, align 4
  %385 = shl i64 %307, 32
  %386 = sub i64 0, %385
  %387 = lshr exact i64 %386, 32
  %388 = trunc i64 %387 to i32
  %389 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %388, i32* %389, align 4
  %390 = trunc i64 %366 to i32
  %391 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %390, i32* %391, align 4
  %392 = trunc i64 %374 to i32
  %393 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %392, i32* %393, align 4
  %394 = trunc i64 %370 to i32
  %395 = getelementptr inbounds i32, i32* %1, i64 6
  store i32 %394, i32* %395, align 4
  %396 = trunc i64 %362 to i32
  %397 = getelementptr inbounds i32, i32* %1, i64 7
  store i32 %396, i32* %397, align 4
  %398 = trunc i64 %364 to i32
  %399 = getelementptr inbounds i32, i32* %1, i64 8
  store i32 %398, i32* %399, align 4
  %400 = trunc i64 %372 to i32
  %401 = getelementptr inbounds i32, i32* %1, i64 9
  store i32 %400, i32* %401, align 4
  %402 = trunc i64 %376 to i32
  %403 = getelementptr inbounds i32, i32* %1, i64 10
  store i32 %402, i32* %403, align 4
  %404 = trunc i64 %368 to i32
  %405 = getelementptr inbounds i32, i32* %1, i64 11
  store i32 %404, i32* %405, align 4
  %406 = trunc i64 %310 to i32
  %407 = getelementptr inbounds i32, i32* %1, i64 12
  store i32 %406, i32* %407, align 4
  %408 = shl i64 %324, 32
  %409 = sub i64 0, %408
  %410 = lshr exact i64 %409, 32
  %411 = trunc i64 %410 to i32
  %412 = getelementptr inbounds i32, i32* %1, i64 13
  store i32 %411, i32* %412, align 4
  %413 = trunc i64 %316 to i32
  %414 = getelementptr inbounds i32, i32* %1, i64 14
  store i32 %413, i32* %414, align 4
  %415 = shl i64 %302, 32
  %416 = sub i64 0, %415
  %417 = lshr exact i64 %416, 32
  %418 = trunc i64 %417 to i32
  %419 = getelementptr inbounds i32, i32* %1, i64 15
  store i32 %418, i32* %419, align 4
  br label %420

420:                                              ; preds = %48, %46, %44
  ret void

421:                                              ; preds = %39
  %422 = icmp slt i32 %10, 0
  %423 = sub nsw i32 0, %10
  %424 = select i1 %422, i32 %423, i32 %10
  %425 = icmp sgt i32 %424, 33554431
  br i1 %425, label %44, label %426

426:                                              ; preds = %421
  %427 = icmp slt i32 %28, 0
  %428 = sub nsw i32 0, %28
  %429 = select i1 %427, i32 %428, i32 %28
  %430 = icmp sgt i32 %429, 33554431
  br i1 %430, label %44, label %431

431:                                              ; preds = %426
  %432 = icmp slt i32 %14, 0
  %433 = sub nsw i32 0, %14
  %434 = select i1 %432, i32 %433, i32 %14
  %435 = icmp sgt i32 %434, 33554431
  br i1 %435, label %44, label %436

436:                                              ; preds = %431
  %437 = icmp slt i32 %24, 0
  %438 = sub nsw i32 0, %24
  %439 = select i1 %437, i32 %438, i32 %24
  %440 = icmp sgt i32 %439, 33554431
  br i1 %440, label %44, label %441

441:                                              ; preds = %436
  %442 = icmp slt i32 %18, 0
  %443 = sub nsw i32 0, %18
  %444 = select i1 %442, i32 %443, i32 %18
  %445 = icmp sgt i32 %444, 33554431
  br i1 %445, label %44, label %446

446:                                              ; preds = %441
  %447 = icmp slt i32 %20, 0
  %448 = sub nsw i32 0, %20
  %449 = select i1 %447, i32 %448, i32 %20
  %450 = icmp sgt i32 %449, 33554431
  br i1 %450, label %44, label %451

451:                                              ; preds = %446
  %452 = icmp slt i32 %22, 0
  %453 = sub nsw i32 0, %22
  %454 = select i1 %452, i32 %453, i32 %22
  %455 = icmp sgt i32 %454, 33554431
  br i1 %455, label %44, label %456

456:                                              ; preds = %451
  %457 = icmp slt i32 %16, 0
  %458 = sub nsw i32 0, %16
  %459 = select i1 %457, i32 %458, i32 %16
  %460 = icmp sgt i32 %459, 33554431
  br i1 %460, label %44, label %461

461:                                              ; preds = %456
  %462 = icmp slt i32 %26, 0
  %463 = sub nsw i32 0, %26
  %464 = select i1 %462, i32 %463, i32 %26
  %465 = icmp sgt i32 %464, 33554431
  br i1 %465, label %44, label %466

466:                                              ; preds = %461
  %467 = icmp slt i32 %12, 0
  %468 = sub nsw i32 0, %12
  %469 = select i1 %467, i32 %468, i32 %12
  %470 = icmp sgt i32 %469, 33554431
  br i1 %470, label %44, label %471

471:                                              ; preds = %466
  %472 = icmp slt i32 %30, 0
  %473 = sub nsw i32 0, %30
  %474 = select i1 %472, i32 %473, i32 %30
  %475 = icmp sgt i32 %474, 33554431
  br i1 %475, label %44, label %476

476:                                              ; preds = %471
  %477 = icmp slt i32 %8, 0
  %478 = sub nsw i32 0, %8
  %479 = select i1 %477, i32 %478, i32 %8
  %480 = icmp sgt i32 %479, 33554431
  br i1 %480, label %44, label %481

481:                                              ; preds = %476
  %482 = icmp slt i32 %34, 0
  %483 = sub nsw i32 0, %34
  %484 = select i1 %482, i32 %483, i32 %34
  %485 = icmp sgt i32 %484, 33554431
  br i1 %485, label %44, label %486

486:                                              ; preds = %481
  %487 = icmp slt i32 %5, 0
  %488 = sub nsw i32 0, %5
  %489 = select i1 %487, i32 %488, i32 %5
  %490 = icmp sgt i32 %489, 33554431
  br i1 %490, label %44, label %491

491:                                              ; preds = %486
  %492 = or i32 %6, %5
  %493 = or i32 %492, %8
  %494 = or i32 %493, %10
  %495 = or i32 %494, %12
  %496 = or i32 %495, %14
  %497 = or i32 %496, %16
  %498 = or i32 %497, %18
  %499 = or i32 %498, %20
  %500 = or i32 %499, %22
  %501 = or i32 %500, %24
  %502 = or i32 %501, %26
  %503 = or i32 %502, %28
  %504 = or i32 %503, %30
  %505 = or i32 %504, %32
  %506 = or i32 %505, %34
  %507 = icmp eq i32 %506, 0
  br i1 %507, label %46, label %48
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct16_c(i32* nocapture readonly, i32* nocapture, i32) local_unnamed_addr #0 {
  %4 = load i32, i32* %0, align 4
  %5 = icmp slt i32 %4, 0
  %6 = sub nsw i32 0, %4
  %7 = select i1 %5, i32 %6, i32 %4
  %8 = icmp sgt i32 %7, 33554431
  br i1 %8, label %16, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds i32, i32* %0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, 0
  %13 = sub nsw i32 0, %11
  %14 = select i1 %12, i32 %13, i32 %11
  %15 = icmp sgt i32 %14, 33554431
  br i1 %15, label %16, label %19

16:                                               ; preds = %110, %103, %96, %89, %82, %75, %68, %61, %54, %47, %40, %33, %26, %19, %9, %3
  %17 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 64, i1 false)
  br label %18

18:                                               ; preds = %117, %16
  ret void

19:                                               ; preds = %9
  %20 = getelementptr inbounds i32, i32* %0, i64 2
  %21 = load i32, i32* %20, align 4
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = icmp sgt i32 %24, 33554431
  br i1 %25, label %16, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds i32, i32* %0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %28, 0
  %30 = sub nsw i32 0, %28
  %31 = select i1 %29, i32 %30, i32 %28
  %32 = icmp sgt i32 %31, 33554431
  br i1 %32, label %16, label %33

33:                                               ; preds = %26
  %34 = getelementptr inbounds i32, i32* %0, i64 4
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = icmp sgt i32 %38, 33554431
  br i1 %39, label %16, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds i32, i32* %0, i64 5
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  %44 = sub nsw i32 0, %42
  %45 = select i1 %43, i32 %44, i32 %42
  %46 = icmp sgt i32 %45, 33554431
  br i1 %46, label %16, label %47

47:                                               ; preds = %40
  %48 = getelementptr inbounds i32, i32* %0, i64 6
  %49 = load i32, i32* %48, align 4
  %50 = icmp slt i32 %49, 0
  %51 = sub nsw i32 0, %49
  %52 = select i1 %50, i32 %51, i32 %49
  %53 = icmp sgt i32 %52, 33554431
  br i1 %53, label %16, label %54

54:                                               ; preds = %47
  %55 = getelementptr inbounds i32, i32* %0, i64 7
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  %58 = sub nsw i32 0, %56
  %59 = select i1 %57, i32 %58, i32 %56
  %60 = icmp sgt i32 %59, 33554431
  br i1 %60, label %16, label %61

61:                                               ; preds = %54
  %62 = getelementptr inbounds i32, i32* %0, i64 8
  %63 = load i32, i32* %62, align 4
  %64 = icmp slt i32 %63, 0
  %65 = sub nsw i32 0, %63
  %66 = select i1 %64, i32 %65, i32 %63
  %67 = icmp sgt i32 %66, 33554431
  br i1 %67, label %16, label %68

68:                                               ; preds = %61
  %69 = getelementptr inbounds i32, i32* %0, i64 9
  %70 = load i32, i32* %69, align 4
  %71 = icmp slt i32 %70, 0
  %72 = sub nsw i32 0, %70
  %73 = select i1 %71, i32 %72, i32 %70
  %74 = icmp sgt i32 %73, 33554431
  br i1 %74, label %16, label %75

75:                                               ; preds = %68
  %76 = getelementptr inbounds i32, i32* %0, i64 10
  %77 = load i32, i32* %76, align 4
  %78 = icmp slt i32 %77, 0
  %79 = sub nsw i32 0, %77
  %80 = select i1 %78, i32 %79, i32 %77
  %81 = icmp sgt i32 %80, 33554431
  br i1 %81, label %16, label %82

82:                                               ; preds = %75
  %83 = getelementptr inbounds i32, i32* %0, i64 11
  %84 = load i32, i32* %83, align 4
  %85 = icmp slt i32 %84, 0
  %86 = sub nsw i32 0, %84
  %87 = select i1 %85, i32 %86, i32 %84
  %88 = icmp sgt i32 %87, 33554431
  br i1 %88, label %16, label %89

89:                                               ; preds = %82
  %90 = getelementptr inbounds i32, i32* %0, i64 12
  %91 = load i32, i32* %90, align 4
  %92 = icmp slt i32 %91, 0
  %93 = sub nsw i32 0, %91
  %94 = select i1 %92, i32 %93, i32 %91
  %95 = icmp sgt i32 %94, 33554431
  br i1 %95, label %16, label %96

96:                                               ; preds = %89
  %97 = getelementptr inbounds i32, i32* %0, i64 13
  %98 = load i32, i32* %97, align 4
  %99 = icmp slt i32 %98, 0
  %100 = sub nsw i32 0, %98
  %101 = select i1 %99, i32 %100, i32 %98
  %102 = icmp sgt i32 %101, 33554431
  br i1 %102, label %16, label %103

103:                                              ; preds = %96
  %104 = getelementptr inbounds i32, i32* %0, i64 14
  %105 = load i32, i32* %104, align 4
  %106 = icmp slt i32 %105, 0
  %107 = sub nsw i32 0, %105
  %108 = select i1 %106, i32 %107, i32 %105
  %109 = icmp sgt i32 %108, 33554431
  br i1 %109, label %16, label %110

110:                                              ; preds = %103
  %111 = getelementptr inbounds i32, i32* %0, i64 15
  %112 = load i32, i32* %111, align 4
  %113 = icmp slt i32 %112, 0
  %114 = sub nsw i32 0, %112
  %115 = select i1 %113, i32 %114, i32 %112
  %116 = icmp sgt i32 %115, 33554431
  br i1 %116, label %16, label %117

117:                                              ; preds = %110
  %118 = sext i32 %11 to i64
  %119 = mul nsw i64 %118, 1606
  %120 = sext i32 %112 to i64
  %121 = mul nsw i64 %120, -16305
  %122 = mul nsw i64 %118, 16305
  %123 = mul nsw i64 %120, 1606
  %124 = add nsw i64 %119, 8192
  %125 = add nsw i64 %124, %121
  %126 = ashr i64 %125, 14
  %127 = add nsw i64 %122, 8192
  %128 = add nsw i64 %127, %123
  %129 = ashr i64 %128, 14
  %130 = sext i32 %70 to i64
  %131 = mul nsw i64 %130, 12665
  %132 = sext i32 %56 to i64
  %133 = mul nsw i64 %132, -10394
  %134 = mul nsw i64 %130, 10394
  %135 = mul nsw i64 %132, 12665
  %136 = add nsw i64 %131, 8192
  %137 = add nsw i64 %136, %133
  %138 = ashr i64 %137, 14
  %139 = add nsw i64 %134, 8192
  %140 = add nsw i64 %139, %135
  %141 = ashr i64 %140, 14
  %142 = sext i32 %42 to i64
  %143 = mul nsw i64 %142, 7723
  %144 = sext i32 %84 to i64
  %145 = mul nsw i64 %144, -14449
  %146 = mul nsw i64 %142, 14449
  %147 = mul nsw i64 %144, 7723
  %148 = add nsw i64 %143, 8192
  %149 = add nsw i64 %148, %145
  %150 = ashr i64 %149, 14
  %151 = add nsw i64 %146, 8192
  %152 = add nsw i64 %151, %147
  %153 = ashr i64 %152, 14
  %154 = sext i32 %98 to i64
  %155 = mul nsw i64 %154, 15679
  %156 = sext i32 %28 to i64
  %157 = mul nsw i64 %156, -4756
  %158 = mul nsw i64 %154, 4756
  %159 = mul nsw i64 %156, 15679
  %160 = add nsw i64 %155, 8192
  %161 = add nsw i64 %160, %157
  %162 = ashr i64 %161, 14
  %163 = add nsw i64 %158, 8192
  %164 = add nsw i64 %163, %159
  %165 = ashr i64 %164, 14
  %166 = sext i32 %21 to i64
  %167 = mul nsw i64 %166, 3196
  %168 = sext i32 %105 to i64
  %169 = mul nsw i64 %168, -16069
  %170 = mul nsw i64 %166, 16069
  %171 = mul nsw i64 %168, 3196
  %172 = add nsw i64 %167, 8192
  %173 = add nsw i64 %172, %169
  %174 = ashr i64 %173, 14
  %175 = add nsw i64 %170, 8192
  %176 = add nsw i64 %175, %171
  %177 = ashr i64 %176, 14
  %178 = sext i32 %77 to i64
  %179 = mul nsw i64 %178, 13623
  %180 = sext i32 %49 to i64
  %181 = mul nsw i64 %180, -9102
  %182 = mul nsw i64 %178, 9102
  %183 = mul nsw i64 %180, 13623
  %184 = add nsw i64 %179, 8192
  %185 = add nsw i64 %184, %181
  %186 = ashr i64 %185, 14
  %187 = add nsw i64 %182, 8192
  %188 = add nsw i64 %187, %183
  %189 = ashr i64 %188, 14
  %190 = add nsw i64 %126, %138
  %191 = shl i64 %190, 32
  %192 = ashr exact i64 %191, 32
  %193 = sub nsw i64 %126, %138
  %194 = shl i64 %193, 32
  %195 = ashr exact i64 %194, 32
  %196 = sub nsw i64 %162, %150
  %197 = shl i64 %196, 32
  %198 = add nsw i64 %150, %162
  %199 = shl i64 %198, 32
  %200 = ashr exact i64 %199, 32
  %201 = add nsw i64 %153, %165
  %202 = shl i64 %201, 32
  %203 = ashr exact i64 %202, 32
  %204 = sub nsw i64 %165, %153
  %205 = shl i64 %204, 32
  %206 = ashr exact i64 %205, 32
  %207 = sub nsw i64 %129, %141
  %208 = shl i64 %207, 32
  %209 = ashr exact i64 %208, 32
  %210 = add nsw i64 %129, %141
  %211 = shl i64 %210, 32
  %212 = ashr exact i64 %211, 32
  %213 = add nsw i32 %63, %4
  %214 = sext i32 %213 to i64
  %215 = mul nsw i64 %214, 11585
  %216 = sub nsw i32 %4, %63
  %217 = sext i32 %216 to i64
  %218 = mul nsw i64 %217, 11585
  %219 = add nsw i64 %215, 8192
  %220 = ashr i64 %219, 14
  %221 = add nsw i64 %218, 8192
  %222 = ashr i64 %221, 14
  %223 = sext i32 %35 to i64
  %224 = mul nsw i64 %223, 6270
  %225 = sext i32 %91 to i64
  %226 = mul nsw i64 %225, -15137
  %227 = mul nsw i64 %223, 15137
  %228 = mul nsw i64 %225, 6270
  %229 = add nsw i64 %224, 8192
  %230 = add nsw i64 %229, %226
  %231 = ashr i64 %230, 14
  %232 = add nsw i64 %227, 8192
  %233 = add nsw i64 %232, %228
  %234 = ashr i64 %233, 14
  %235 = add nsw i64 %174, %186
  %236 = shl i64 %235, 32
  %237 = ashr exact i64 %236, 32
  %238 = sub nsw i64 %174, %186
  %239 = shl i64 %238, 32
  %240 = ashr exact i64 %239, 32
  %241 = sub nsw i64 %177, %189
  %242 = shl i64 %241, 32
  %243 = ashr exact i64 %242, 32
  %244 = add nsw i64 %177, %189
  %245 = shl i64 %244, 32
  %246 = ashr exact i64 %245, 32
  %247 = sub i64 0, %194
  %248 = ashr exact i64 %247, 32
  %249 = mul nsw i64 %248, 15137
  %250 = mul nsw i64 %209, 6270
  %251 = mul nsw i64 %195, 6270
  %252 = mul nsw i64 %209, 15137
  %253 = add nsw i64 %250, 8192
  %254 = add nsw i64 %253, %249
  %255 = ashr i64 %254, 14
  %256 = add nsw i64 %252, 8192
  %257 = add nsw i64 %256, %251
  %258 = ashr i64 %257, 14
  %259 = sub i64 0, %197
  %260 = ashr exact i64 %259, 32
  %261 = mul nsw i64 %260, 6270
  %262 = mul nsw i64 %206, -15137
  %263 = mul nsw i64 %260, 15137
  %264 = mul nsw i64 %206, 6270
  %265 = add nsw i64 %262, 8192
  %266 = add nsw i64 %265, %261
  %267 = ashr i64 %266, 14
  %268 = add nsw i64 %264, 8192
  %269 = add nsw i64 %268, %263
  %270 = ashr i64 %269, 14
  %271 = add nsw i64 %234, %220
  %272 = shl i64 %271, 32
  %273 = ashr exact i64 %272, 32
  %274 = add nsw i64 %231, %222
  %275 = shl i64 %274, 32
  %276 = ashr exact i64 %275, 32
  %277 = sub nsw i64 %222, %231
  %278 = shl i64 %277, 32
  %279 = ashr exact i64 %278, 32
  %280 = sub nsw i64 %220, %234
  %281 = shl i64 %280, 32
  %282 = ashr exact i64 %281, 32
  %283 = sub nsw i64 %243, %240
  %284 = shl i64 %283, 32
  %285 = ashr exact i64 %284, 32
  %286 = mul nsw i64 %285, 11585
  %287 = add nsw i64 %240, %243
  %288 = shl i64 %287, 32
  %289 = ashr exact i64 %288, 32
  %290 = mul nsw i64 %289, 11585
  %291 = add nsw i64 %286, 8192
  %292 = ashr i64 %291, 14
  %293 = add nsw i64 %290, 8192
  %294 = ashr i64 %293, 14
  %295 = add nsw i64 %192, %200
  %296 = shl i64 %295, 32
  %297 = ashr exact i64 %296, 32
  %298 = add nsw i64 %255, %267
  %299 = shl i64 %298, 32
  %300 = ashr exact i64 %299, 32
  %301 = sub nsw i64 %255, %267
  %302 = shl i64 %301, 32
  %303 = ashr exact i64 %302, 32
  %304 = sub nsw i64 %192, %200
  %305 = shl i64 %304, 32
  %306 = ashr exact i64 %305, 32
  %307 = sub nsw i64 %212, %203
  %308 = shl i64 %307, 32
  %309 = ashr exact i64 %308, 32
  %310 = sub nsw i64 %258, %270
  %311 = shl i64 %310, 32
  %312 = ashr exact i64 %311, 32
  %313 = add nsw i64 %258, %270
  %314 = shl i64 %313, 32
  %315 = ashr exact i64 %314, 32
  %316 = add nsw i64 %212, %203
  %317 = shl i64 %316, 32
  %318 = ashr exact i64 %317, 32
  %319 = add nsw i64 %246, %273
  %320 = shl i64 %319, 32
  %321 = ashr exact i64 %320, 32
  %322 = add nsw i64 %294, %276
  %323 = shl i64 %322, 32
  %324 = ashr exact i64 %323, 32
  %325 = add nsw i64 %292, %279
  %326 = shl i64 %325, 32
  %327 = ashr exact i64 %326, 32
  %328 = add nsw i64 %237, %282
  %329 = shl i64 %328, 32
  %330 = ashr exact i64 %329, 32
  %331 = sub nsw i64 %282, %237
  %332 = shl i64 %331, 32
  %333 = ashr exact i64 %332, 32
  %334 = sub nsw i64 %279, %292
  %335 = shl i64 %334, 32
  %336 = ashr exact i64 %335, 32
  %337 = sub nsw i64 %276, %294
  %338 = shl i64 %337, 32
  %339 = ashr exact i64 %338, 32
  %340 = sub nsw i64 %273, %246
  %341 = shl i64 %340, 32
  %342 = ashr exact i64 %341, 32
  %343 = sub nsw i64 %312, %303
  %344 = shl i64 %343, 32
  %345 = ashr exact i64 %344, 32
  %346 = mul nsw i64 %345, 11585
  %347 = add nsw i64 %303, %312
  %348 = shl i64 %347, 32
  %349 = ashr exact i64 %348, 32
  %350 = mul nsw i64 %349, 11585
  %351 = add nsw i64 %346, 8192
  %352 = ashr i64 %351, 14
  %353 = add nsw i64 %350, 8192
  %354 = ashr i64 %353, 14
  %355 = sub nsw i64 %309, %306
  %356 = shl i64 %355, 32
  %357 = ashr exact i64 %356, 32
  %358 = mul nsw i64 %357, 11585
  %359 = add nsw i64 %306, %309
  %360 = shl i64 %359, 32
  %361 = ashr exact i64 %360, 32
  %362 = mul nsw i64 %361, 11585
  %363 = add nsw i64 %358, 8192
  %364 = ashr i64 %363, 14
  %365 = add nsw i64 %362, 8192
  %366 = ashr i64 %365, 14
  %367 = add nsw i64 %318, %321
  %368 = trunc i64 %367 to i32
  store i32 %368, i32* %1, align 4
  %369 = add nsw i64 %315, %324
  %370 = trunc i64 %369 to i32
  %371 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %370, i32* %371, align 4
  %372 = add nsw i64 %354, %327
  %373 = trunc i64 %372 to i32
  %374 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %373, i32* %374, align 4
  %375 = add nsw i64 %366, %330
  %376 = trunc i64 %375 to i32
  %377 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %376, i32* %377, align 4
  %378 = add nsw i64 %364, %333
  %379 = trunc i64 %378 to i32
  %380 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %379, i32* %380, align 4
  %381 = add nsw i64 %352, %336
  %382 = trunc i64 %381 to i32
  %383 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %382, i32* %383, align 4
  %384 = add nsw i64 %300, %339
  %385 = trunc i64 %384 to i32
  %386 = getelementptr inbounds i32, i32* %1, i64 6
  store i32 %385, i32* %386, align 4
  %387 = add nsw i64 %297, %342
  %388 = trunc i64 %387 to i32
  %389 = getelementptr inbounds i32, i32* %1, i64 7
  store i32 %388, i32* %389, align 4
  %390 = sub nsw i64 %342, %297
  %391 = trunc i64 %390 to i32
  %392 = getelementptr inbounds i32, i32* %1, i64 8
  store i32 %391, i32* %392, align 4
  %393 = sub nsw i64 %339, %300
  %394 = trunc i64 %393 to i32
  %395 = getelementptr inbounds i32, i32* %1, i64 9
  store i32 %394, i32* %395, align 4
  %396 = sub nsw i64 %336, %352
  %397 = trunc i64 %396 to i32
  %398 = getelementptr inbounds i32, i32* %1, i64 10
  store i32 %397, i32* %398, align 4
  %399 = sub nsw i64 %333, %364
  %400 = trunc i64 %399 to i32
  %401 = getelementptr inbounds i32, i32* %1, i64 11
  store i32 %400, i32* %401, align 4
  %402 = sub nsw i64 %330, %366
  %403 = trunc i64 %402 to i32
  %404 = getelementptr inbounds i32, i32* %1, i64 12
  store i32 %403, i32* %404, align 4
  %405 = sub nsw i64 %327, %354
  %406 = trunc i64 %405 to i32
  %407 = getelementptr inbounds i32, i32* %1, i64 13
  store i32 %406, i32* %407, align 4
  %408 = sub nsw i64 %324, %315
  %409 = trunc i64 %408 to i32
  %410 = getelementptr inbounds i32, i32* %1, i64 14
  store i32 %409, i32* %410, align 4
  %411 = sub nsw i64 %321, %318
  %412 = trunc i64 %411 to i32
  %413 = getelementptr inbounds i32, i32* %1, i64 15
  store i32 %412, i32* %413, align 4
  br label %18
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct16x16_256_add_c(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [256 x i32], align 16
  %6 = alloca [16 x i32], align 16
  %7 = alloca [16 x i32], align 16
  %8 = bitcast [256 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 1024, i1 false)
  %9 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 0
  %10 = bitcast [16 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 64, i1 false)
  %11 = bitcast [16 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 64, i1 false)
  call void @vpx_highbd_idct16_c(i32* %0, i32* nonnull %9, i32 undef)
  %12 = getelementptr inbounds i32, i32* %0, i64 16
  %13 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 16
  call void @vpx_highbd_idct16_c(i32* %12, i32* %13, i32 undef)
  %14 = getelementptr inbounds i32, i32* %0, i64 32
  %15 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 32
  call void @vpx_highbd_idct16_c(i32* %14, i32* %15, i32 undef)
  %16 = getelementptr inbounds i32, i32* %0, i64 48
  %17 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 48
  call void @vpx_highbd_idct16_c(i32* %16, i32* %17, i32 undef)
  %18 = getelementptr inbounds i32, i32* %0, i64 64
  %19 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 64
  call void @vpx_highbd_idct16_c(i32* %18, i32* %19, i32 undef)
  %20 = getelementptr inbounds i32, i32* %0, i64 80
  %21 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 80
  call void @vpx_highbd_idct16_c(i32* %20, i32* %21, i32 undef)
  %22 = getelementptr inbounds i32, i32* %0, i64 96
  %23 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 96
  call void @vpx_highbd_idct16_c(i32* %22, i32* %23, i32 undef)
  %24 = getelementptr inbounds i32, i32* %0, i64 112
  %25 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 112
  call void @vpx_highbd_idct16_c(i32* %24, i32* %25, i32 undef)
  %26 = getelementptr inbounds i32, i32* %0, i64 128
  %27 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 128
  call void @vpx_highbd_idct16_c(i32* %26, i32* %27, i32 undef)
  %28 = getelementptr inbounds i32, i32* %0, i64 144
  %29 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 144
  call void @vpx_highbd_idct16_c(i32* %28, i32* %29, i32 undef)
  %30 = getelementptr inbounds i32, i32* %0, i64 160
  %31 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 160
  call void @vpx_highbd_idct16_c(i32* %30, i32* %31, i32 undef)
  %32 = getelementptr inbounds i32, i32* %0, i64 176
  %33 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 176
  call void @vpx_highbd_idct16_c(i32* %32, i32* %33, i32 undef)
  %34 = getelementptr inbounds i32, i32* %0, i64 192
  %35 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 192
  call void @vpx_highbd_idct16_c(i32* %34, i32* %35, i32 undef)
  %36 = getelementptr inbounds i32, i32* %0, i64 208
  %37 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 208
  call void @vpx_highbd_idct16_c(i32* %36, i32* %37, i32 undef)
  %38 = getelementptr inbounds i32, i32* %0, i64 224
  %39 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 224
  call void @vpx_highbd_idct16_c(i32* %38, i32* %39, i32 undef)
  %40 = getelementptr inbounds i32, i32* %0, i64 240
  %41 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 240
  call void @vpx_highbd_idct16_c(i32* %40, i32* %41, i32 undef)
  %42 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 0
  %43 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 0
  %44 = sext i32 %2 to i64
  %45 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 1
  %46 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 2
  %47 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 3
  %48 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 4
  %49 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 5
  %50 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 6
  %51 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 7
  %52 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 8
  %53 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 9
  %54 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 10
  %55 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 11
  %56 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 12
  %57 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 13
  %58 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 14
  %59 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 15
  %60 = icmp eq i32 %3, 10
  %61 = select i1 %60, i32 1023, i32 255
  %62 = icmp eq i32 %3, 12
  %63 = select i1 %62, i32 4095, i32 %61
  br label %64

64:                                               ; preds = %132, %4
  %65 = phi i64 [ 0, %4 ], [ %133, %132 ]
  %66 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %65
  %67 = load i32, i32* %66, align 4
  store i32 %67, i32* %42, align 16
  %68 = add nuw nsw i64 %65, 16
  %69 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4
  store i32 %70, i32* %45, align 4
  %71 = add nuw nsw i64 %65, 32
  %72 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %71
  %73 = load i32, i32* %72, align 4
  store i32 %73, i32* %46, align 8
  %74 = add nuw nsw i64 %65, 48
  %75 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %74
  %76 = load i32, i32* %75, align 4
  store i32 %76, i32* %47, align 4
  %77 = add nuw nsw i64 %65, 64
  %78 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %77
  %79 = load i32, i32* %78, align 4
  store i32 %79, i32* %48, align 16
  %80 = add nuw nsw i64 %65, 80
  %81 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %80
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %49, align 4
  %83 = add nuw nsw i64 %65, 96
  %84 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %83
  %85 = load i32, i32* %84, align 4
  store i32 %85, i32* %50, align 8
  %86 = add nuw nsw i64 %65, 112
  %87 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %86
  %88 = load i32, i32* %87, align 4
  store i32 %88, i32* %51, align 4
  %89 = add nuw nsw i64 %65, 128
  %90 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %89
  %91 = load i32, i32* %90, align 4
  store i32 %91, i32* %52, align 16
  %92 = add nuw nsw i64 %65, 144
  %93 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %92
  %94 = load i32, i32* %93, align 4
  store i32 %94, i32* %53, align 4
  %95 = add nuw nsw i64 %65, 160
  %96 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %95
  %97 = load i32, i32* %96, align 4
  store i32 %97, i32* %54, align 8
  %98 = add nuw nsw i64 %65, 176
  %99 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %98
  %100 = load i32, i32* %99, align 4
  store i32 %100, i32* %55, align 4
  %101 = add nuw nsw i64 %65, 192
  %102 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %101
  %103 = load i32, i32* %102, align 4
  store i32 %103, i32* %56, align 16
  %104 = add nuw nsw i64 %65, 208
  %105 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %104
  %106 = load i32, i32* %105, align 4
  store i32 %106, i32* %57, align 4
  %107 = add nuw nsw i64 %65, 224
  %108 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %107
  %109 = load i32, i32* %108, align 4
  store i32 %109, i32* %58, align 8
  %110 = add nuw nsw i64 %65, 240
  %111 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %110
  %112 = load i32, i32* %111, align 4
  store i32 %112, i32* %59, align 4
  call void @vpx_highbd_idct16_c(i32* nonnull %42, i32* nonnull %43, i32 undef)
  br label %113

113:                                              ; preds = %113, %64
  %114 = phi i64 [ 0, %64 ], [ %130, %113 ]
  %115 = mul nsw i64 %114, %44
  %116 = add nsw i64 %115, %65
  %117 = getelementptr inbounds i16, i16* %1, i64 %116
  %118 = load i16, i16* %117, align 2
  %119 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 %114
  %120 = load i32, i32* %119, align 4
  %121 = add nsw i32 %120, 32
  %122 = ashr i32 %121, 6
  %123 = zext i16 %118 to i32
  %124 = add nsw i32 %122, %123
  %125 = icmp slt i32 %124, %63
  %126 = select i1 %125, i32 %124, i32 %63
  %127 = icmp sgt i32 %126, 0
  %128 = select i1 %127, i32 %126, i32 0
  %129 = trunc i32 %128 to i16
  store i16 %129, i16* %117, align 2
  %130 = add nuw nsw i64 %114, 1
  %131 = icmp eq i64 %130, 16
  br i1 %131, label %132, label %113

132:                                              ; preds = %113
  %133 = add nuw nsw i64 %65, 1
  %134 = icmp eq i64 %133, 16
  br i1 %134, label %135, label %64

135:                                              ; preds = %132
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %8) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct16x16_38_add_c(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [256 x i32], align 16
  %6 = alloca [16 x i32], align 16
  %7 = alloca [16 x i32], align 16
  %8 = bitcast [256 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 1024, i1 false)
  %9 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 0
  %10 = bitcast [16 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 64, i1 false)
  %11 = bitcast [16 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 64, i1 false)
  call void @vpx_highbd_idct16_c(i32* %0, i32* nonnull %9, i32 undef)
  %12 = getelementptr inbounds i32, i32* %0, i64 16
  %13 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 16
  call void @vpx_highbd_idct16_c(i32* %12, i32* %13, i32 undef)
  %14 = getelementptr inbounds i32, i32* %0, i64 32
  %15 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 32
  call void @vpx_highbd_idct16_c(i32* %14, i32* %15, i32 undef)
  %16 = getelementptr inbounds i32, i32* %0, i64 48
  %17 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 48
  call void @vpx_highbd_idct16_c(i32* %16, i32* %17, i32 undef)
  %18 = getelementptr inbounds i32, i32* %0, i64 64
  %19 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 64
  call void @vpx_highbd_idct16_c(i32* %18, i32* %19, i32 undef)
  %20 = getelementptr inbounds i32, i32* %0, i64 80
  %21 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 80
  call void @vpx_highbd_idct16_c(i32* %20, i32* %21, i32 undef)
  %22 = getelementptr inbounds i32, i32* %0, i64 96
  %23 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 96
  call void @vpx_highbd_idct16_c(i32* %22, i32* %23, i32 undef)
  %24 = getelementptr inbounds i32, i32* %0, i64 112
  %25 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 112
  call void @vpx_highbd_idct16_c(i32* %24, i32* %25, i32 undef)
  %26 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 0
  %27 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 0
  %28 = sext i32 %2 to i64
  %29 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 1
  %30 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 2
  %31 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 3
  %32 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 4
  %33 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 5
  %34 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 6
  %35 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 7
  %36 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 8
  %37 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 9
  %38 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 10
  %39 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 11
  %40 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 12
  %41 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 13
  %42 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 14
  %43 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 15
  %44 = icmp eq i32 %3, 10
  %45 = select i1 %44, i32 1023, i32 255
  %46 = icmp eq i32 %3, 12
  %47 = select i1 %46, i32 4095, i32 %45
  br label %48

48:                                               ; preds = %116, %4
  %49 = phi i64 [ 0, %4 ], [ %117, %116 ]
  %50 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %49
  %51 = load i32, i32* %50, align 4
  store i32 %51, i32* %26, align 16
  %52 = add nuw nsw i64 %49, 16
  %53 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4
  store i32 %54, i32* %29, align 4
  %55 = add nuw nsw i64 %49, 32
  %56 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %55
  %57 = load i32, i32* %56, align 4
  store i32 %57, i32* %30, align 8
  %58 = add nuw nsw i64 %49, 48
  %59 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %58
  %60 = load i32, i32* %59, align 4
  store i32 %60, i32* %31, align 4
  %61 = add nuw nsw i64 %49, 64
  %62 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %61
  %63 = load i32, i32* %62, align 4
  store i32 %63, i32* %32, align 16
  %64 = add nuw nsw i64 %49, 80
  %65 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %64
  %66 = load i32, i32* %65, align 4
  store i32 %66, i32* %33, align 4
  %67 = add nuw nsw i64 %49, 96
  %68 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %67
  %69 = load i32, i32* %68, align 4
  store i32 %69, i32* %34, align 8
  %70 = add nuw nsw i64 %49, 112
  %71 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %70
  %72 = load i32, i32* %71, align 4
  store i32 %72, i32* %35, align 4
  %73 = add nuw nsw i64 %49, 128
  %74 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %73
  %75 = load i32, i32* %74, align 4
  store i32 %75, i32* %36, align 16
  %76 = add nuw nsw i64 %49, 144
  %77 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %76
  %78 = load i32, i32* %77, align 4
  store i32 %78, i32* %37, align 4
  %79 = add nuw nsw i64 %49, 160
  %80 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %79
  %81 = load i32, i32* %80, align 4
  store i32 %81, i32* %38, align 8
  %82 = add nuw nsw i64 %49, 176
  %83 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %82
  %84 = load i32, i32* %83, align 4
  store i32 %84, i32* %39, align 4
  %85 = add nuw nsw i64 %49, 192
  %86 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %85
  %87 = load i32, i32* %86, align 4
  store i32 %87, i32* %40, align 16
  %88 = add nuw nsw i64 %49, 208
  %89 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %88
  %90 = load i32, i32* %89, align 4
  store i32 %90, i32* %41, align 4
  %91 = add nuw nsw i64 %49, 224
  %92 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %91
  %93 = load i32, i32* %92, align 4
  store i32 %93, i32* %42, align 8
  %94 = add nuw nsw i64 %49, 240
  %95 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %94
  %96 = load i32, i32* %95, align 4
  store i32 %96, i32* %43, align 4
  call void @vpx_highbd_idct16_c(i32* nonnull %26, i32* nonnull %27, i32 undef)
  br label %97

97:                                               ; preds = %97, %48
  %98 = phi i64 [ 0, %48 ], [ %114, %97 ]
  %99 = phi i16* [ %1, %48 ], [ %113, %97 ]
  %100 = getelementptr inbounds i16, i16* %99, i64 %49
  %101 = load i16, i16* %100, align 2
  %102 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 %98
  %103 = load i32, i32* %102, align 4
  %104 = add nsw i32 %103, 32
  %105 = ashr i32 %104, 6
  %106 = zext i16 %101 to i32
  %107 = add nsw i32 %105, %106
  %108 = icmp slt i32 %107, %47
  %109 = select i1 %108, i32 %107, i32 %47
  %110 = icmp sgt i32 %109, 0
  %111 = select i1 %110, i32 %109, i32 0
  %112 = trunc i32 %111 to i16
  store i16 %112, i16* %100, align 2
  %113 = getelementptr inbounds i16, i16* %99, i64 %28
  %114 = add nuw nsw i64 %98, 1
  %115 = icmp eq i64 %114, 16
  br i1 %115, label %116, label %97

116:                                              ; preds = %97
  %117 = add nuw nsw i64 %49, 1
  %118 = icmp eq i64 %117, 16
  br i1 %118, label %119, label %48

119:                                              ; preds = %116
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %8) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct16x16_10_add_c(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [256 x i32], align 16
  %6 = alloca [16 x i32], align 16
  %7 = alloca [16 x i32], align 16
  %8 = bitcast [256 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 1024, i1 false)
  %9 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 0
  %10 = bitcast [16 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 64, i1 false)
  %11 = bitcast [16 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 64, i1 false)
  call void @vpx_highbd_idct16_c(i32* %0, i32* nonnull %9, i32 undef)
  %12 = getelementptr inbounds i32, i32* %0, i64 16
  %13 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 16
  call void @vpx_highbd_idct16_c(i32* %12, i32* %13, i32 undef)
  %14 = getelementptr inbounds i32, i32* %0, i64 32
  %15 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 32
  call void @vpx_highbd_idct16_c(i32* %14, i32* %15, i32 undef)
  %16 = getelementptr inbounds i32, i32* %0, i64 48
  %17 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 48
  call void @vpx_highbd_idct16_c(i32* %16, i32* %17, i32 undef)
  %18 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 0
  %19 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 0
  %20 = sext i32 %2 to i64
  %21 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 1
  %22 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 2
  %23 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 3
  %24 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 4
  %25 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 5
  %26 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 6
  %27 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 7
  %28 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 8
  %29 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 9
  %30 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 10
  %31 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 11
  %32 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 12
  %33 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 13
  %34 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 14
  %35 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 15
  %36 = icmp eq i32 %3, 10
  %37 = select i1 %36, i32 1023, i32 255
  %38 = icmp eq i32 %3, 12
  %39 = select i1 %38, i32 4095, i32 %37
  br label %40

40:                                               ; preds = %108, %4
  %41 = phi i64 [ 0, %4 ], [ %109, %108 ]
  %42 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %41
  %43 = load i32, i32* %42, align 4
  store i32 %43, i32* %18, align 16
  %44 = add nuw nsw i64 %41, 16
  %45 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %44
  %46 = load i32, i32* %45, align 4
  store i32 %46, i32* %21, align 4
  %47 = add nuw nsw i64 %41, 32
  %48 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %47
  %49 = load i32, i32* %48, align 4
  store i32 %49, i32* %22, align 8
  %50 = add nuw nsw i64 %41, 48
  %51 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %50
  %52 = load i32, i32* %51, align 4
  store i32 %52, i32* %23, align 4
  %53 = add nuw nsw i64 %41, 64
  %54 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %53
  %55 = load i32, i32* %54, align 4
  store i32 %55, i32* %24, align 16
  %56 = add nuw nsw i64 %41, 80
  %57 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %56
  %58 = load i32, i32* %57, align 4
  store i32 %58, i32* %25, align 4
  %59 = add nuw nsw i64 %41, 96
  %60 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %59
  %61 = load i32, i32* %60, align 4
  store i32 %61, i32* %26, align 8
  %62 = add nuw nsw i64 %41, 112
  %63 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %62
  %64 = load i32, i32* %63, align 4
  store i32 %64, i32* %27, align 4
  %65 = add nuw nsw i64 %41, 128
  %66 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %65
  %67 = load i32, i32* %66, align 4
  store i32 %67, i32* %28, align 16
  %68 = add nuw nsw i64 %41, 144
  %69 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4
  store i32 %70, i32* %29, align 4
  %71 = add nuw nsw i64 %41, 160
  %72 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %71
  %73 = load i32, i32* %72, align 4
  store i32 %73, i32* %30, align 8
  %74 = add nuw nsw i64 %41, 176
  %75 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %74
  %76 = load i32, i32* %75, align 4
  store i32 %76, i32* %31, align 4
  %77 = add nuw nsw i64 %41, 192
  %78 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %77
  %79 = load i32, i32* %78, align 4
  store i32 %79, i32* %32, align 16
  %80 = add nuw nsw i64 %41, 208
  %81 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %80
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %33, align 4
  %83 = add nuw nsw i64 %41, 224
  %84 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %83
  %85 = load i32, i32* %84, align 4
  store i32 %85, i32* %34, align 8
  %86 = add nuw nsw i64 %41, 240
  %87 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %86
  %88 = load i32, i32* %87, align 4
  store i32 %88, i32* %35, align 4
  call void @vpx_highbd_idct16_c(i32* nonnull %18, i32* nonnull %19, i32 undef)
  br label %89

89:                                               ; preds = %89, %40
  %90 = phi i64 [ 0, %40 ], [ %106, %89 ]
  %91 = mul nsw i64 %90, %20
  %92 = add nsw i64 %91, %41
  %93 = getelementptr inbounds i16, i16* %1, i64 %92
  %94 = load i16, i16* %93, align 2
  %95 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 %90
  %96 = load i32, i32* %95, align 4
  %97 = add nsw i32 %96, 32
  %98 = ashr i32 %97, 6
  %99 = zext i16 %94 to i32
  %100 = add nsw i32 %98, %99
  %101 = icmp slt i32 %100, %39
  %102 = select i1 %101, i32 %100, i32 %39
  %103 = icmp sgt i32 %102, 0
  %104 = select i1 %103, i32 %102, i32 0
  %105 = trunc i32 %104 to i16
  store i16 %105, i16* %93, align 2
  %106 = add nuw nsw i64 %90, 1
  %107 = icmp eq i64 %106, 16
  br i1 %107, label %108, label %89

108:                                              ; preds = %89
  %109 = add nuw nsw i64 %41, 1
  %110 = icmp eq i64 %109, 16
  br i1 %110, label %111, label %40

111:                                              ; preds = %108
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %8) #3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_idct16x16_1_add_c(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #2 {
  %5 = load i32, i32* %0, align 4
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %6, 11585
  %8 = add nsw i64 %7, 8192
  %9 = lshr i64 %8, 14
  %10 = shl i64 %9, 32
  %11 = ashr exact i64 %10, 32
  %12 = mul nsw i64 %11, 11585
  %13 = add nsw i64 %12, 8192
  %14 = lshr i64 %13, 14
  %15 = trunc i64 %14 to i32
  %16 = add nsw i32 %15, 32
  %17 = ashr i32 %16, 6
  %18 = sext i32 %2 to i64
  %19 = icmp eq i32 %3, 10
  %20 = select i1 %19, i32 1023, i32 255
  %21 = icmp eq i32 %3, 12
  %22 = select i1 %21, i32 4095, i32 %20
  %23 = icmp eq i32 %3, 10
  %24 = select i1 %23, i32 1023, i32 255
  %25 = icmp eq i32 %3, 12
  %26 = select i1 %25, i32 4095, i32 %24
  br label %27

27:                                               ; preds = %53, %4
  %28 = phi i16* [ %1, %4 ], [ %54, %53 ]
  %29 = phi i32 [ 0, %4 ], [ %55, %53 ]
  br label %30

30:                                               ; preds = %30, %27
  %31 = phi i64 [ 0, %27 ], [ %51, %30 ]
  %32 = getelementptr inbounds i16, i16* %28, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = add nsw i32 %17, %34
  %36 = icmp slt i32 %35, %22
  %37 = select i1 %36, i32 %35, i32 %22
  %38 = icmp sgt i32 %37, 0
  %39 = select i1 %38, i32 %37, i32 0
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %32, align 2
  %41 = or i64 %31, 1
  %42 = getelementptr inbounds i16, i16* %28, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = add nsw i32 %17, %44
  %46 = icmp slt i32 %45, %26
  %47 = select i1 %46, i32 %45, i32 %26
  %48 = icmp sgt i32 %47, 0
  %49 = select i1 %48, i32 %47, i32 0
  %50 = trunc i32 %49 to i16
  store i16 %50, i16* %42, align 2
  %51 = add nuw nsw i64 %31, 2
  %52 = icmp eq i64 %51, 16
  br i1 %52, label %53, label %30

53:                                               ; preds = %30
  %54 = getelementptr inbounds i16, i16* %28, i64 %18
  %55 = add nuw nsw i32 %29, 1
  %56 = icmp eq i32 %55, 16
  br i1 %56, label %57, label %27

57:                                               ; preds = %53
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct32x32_1024_add_c(i32* readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [1024 x i32], align 16
  %6 = alloca [32 x i32], align 16
  %7 = alloca [32 x i32], align 16
  %8 = bitcast [1024 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 4096, i1 false)
  %9 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 0
  %10 = bitcast [32 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 128, i1 false)
  %11 = bitcast [32 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %11) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 128, i1 false)
  br label %12

12:                                               ; preds = %41, %4
  %13 = phi i32* [ %9, %4 ], [ %43, %41 ]
  %14 = phi i32 [ 0, %4 ], [ %44, %41 ]
  %15 = phi i32* [ %0, %4 ], [ %42, %41 ]
  %16 = bitcast i32* %15 to <32 x i32>*
  %17 = load <32 x i32>, <32 x i32>* %16, align 4
  %18 = shufflevector <32 x i32> %17, <32 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = or <32 x i32> %17, %18
  %20 = shufflevector <32 x i32> %19, <32 x i32> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %21 = or <32 x i32> %19, %20
  %22 = shufflevector <32 x i32> %21, <32 x i32> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %23 = or <32 x i32> %21, %22
  %24 = shufflevector <32 x i32> %23, <32 x i32> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %25 = or <32 x i32> %23, %24
  %26 = shufflevector <32 x i32> %25, <32 x i32> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %27 = or <32 x i32> %25, %26
  %28 = extractelement <32 x i32> %27, i32 0
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %39, label %38

30:                                               ; preds = %41
  %31 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 0
  %32 = getelementptr inbounds [32 x i32], [32 x i32]* %7, i64 0, i64 0
  %33 = sext i32 %2 to i64
  %34 = icmp eq i32 %3, 10
  %35 = select i1 %34, i32 1023, i32 255
  %36 = icmp eq i32 %3, 12
  %37 = select i1 %36, i32 4095, i32 %35
  br label %46

38:                                               ; preds = %12
  call fastcc void @highbd_idct32_c(i32* %15, i32* %13)
  br label %41

39:                                               ; preds = %12
  %40 = bitcast i32* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %40, i8 0, i64 128, i1 false)
  br label %41

41:                                               ; preds = %39, %38
  %42 = getelementptr inbounds i32, i32* %15, i64 32
  %43 = getelementptr inbounds i32, i32* %13, i64 32
  %44 = add nuw nsw i32 %14, 1
  %45 = icmp eq i32 %44, 32
  br i1 %45, label %30, label %12

46:                                               ; preds = %95, %30
  %47 = phi i64 [ 0, %30 ], [ %96, %95 ]
  br label %48

48:                                               ; preds = %48, %46
  %49 = phi i64 [ 0, %46 ], [ %73, %48 ]
  %50 = shl i64 %49, 5
  %51 = add nuw nsw i64 %50, %47
  %52 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %49
  store i32 %53, i32* %54, align 16
  %55 = or i64 %49, 1
  %56 = shl i64 %55, 5
  %57 = add nuw nsw i64 %56, %47
  %58 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %55
  store i32 %59, i32* %60, align 4
  %61 = or i64 %49, 2
  %62 = shl i64 %61, 5
  %63 = add nuw nsw i64 %62, %47
  %64 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %61
  store i32 %65, i32* %66, align 8
  %67 = or i64 %49, 3
  %68 = shl i64 %67, 5
  %69 = add nuw nsw i64 %68, %47
  %70 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %67
  store i32 %71, i32* %72, align 4
  %73 = add nuw nsw i64 %49, 4
  %74 = icmp eq i64 %73, 32
  br i1 %74, label %75, label %48

75:                                               ; preds = %48
  call fastcc void @highbd_idct32_c(i32* nonnull %31, i32* nonnull %32)
  br label %76

76:                                               ; preds = %76, %75
  %77 = phi i64 [ 0, %75 ], [ %93, %76 ]
  %78 = mul nsw i64 %77, %33
  %79 = add nsw i64 %78, %47
  %80 = getelementptr inbounds i16, i16* %1, i64 %79
  %81 = load i16, i16* %80, align 2
  %82 = getelementptr inbounds [32 x i32], [32 x i32]* %7, i64 0, i64 %77
  %83 = load i32, i32* %82, align 4
  %84 = add nsw i32 %83, 32
  %85 = ashr i32 %84, 6
  %86 = zext i16 %81 to i32
  %87 = add nsw i32 %85, %86
  %88 = icmp slt i32 %87, %37
  %89 = select i1 %88, i32 %87, i32 %37
  %90 = icmp sgt i32 %89, 0
  %91 = select i1 %90, i32 %89, i32 0
  %92 = trunc i32 %91 to i16
  store i16 %92, i16* %80, align 2
  %93 = add nuw nsw i64 %77, 1
  %94 = icmp eq i64 %93, 32
  br i1 %94, label %95, label %76

95:                                               ; preds = %76
  %96 = add nuw nsw i64 %47, 1
  %97 = icmp eq i64 %96, 32
  br i1 %97, label %98, label %46

98:                                               ; preds = %95
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %11) #3
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %8) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @highbd_idct32_c(i32* readonly, i32*) unnamed_addr #0 {
  br label %12

3:                                                ; preds = %12
  %4 = or i64 %13, 1
  %5 = getelementptr inbounds i32, i32* %0, i64 %4
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 0
  %8 = sub nsw i32 0, %6
  %9 = select i1 %7, i32 %8, i32 %6
  %10 = icmp sgt i32 %9, 33554431
  %11 = add nuw nsw i64 %13, 2
  br i1 %10, label %20, label %859

12:                                               ; preds = %859, %2
  %13 = phi i64 [ 0, %2 ], [ %11, %859 ]
  %14 = getelementptr inbounds i32, i32* %0, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, 0
  %17 = sub nsw i32 0, %15
  %18 = select i1 %16, i32 %17, i32 %15
  %19 = icmp sgt i32 %18, 33554431
  br i1 %19, label %20, label %3

20:                                               ; preds = %3, %12
  %21 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 128, i1 false)
  br label %858

22:                                               ; preds = %859
  %23 = load i32, i32* %0, align 4
  %24 = getelementptr inbounds i32, i32* %0, i64 16
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds i32, i32* %0, i64 8
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds i32, i32* %0, i64 24
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds i32, i32* %0, i64 4
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds i32, i32* %0, i64 20
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %0, i64 12
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds i32, i32* %0, i64 28
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds i32, i32* %0, i64 2
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds i32, i32* %0, i64 18
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds i32, i32* %0, i64 10
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds i32, i32* %0, i64 26
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds i32, i32* %0, i64 6
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds i32, i32* %0, i64 22
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds i32, i32* %0, i64 14
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds i32, i32* %0, i64 30
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds i32, i32* %0, i64 1
  %55 = load i32, i32* %54, align 4
  %56 = sext i32 %55 to i64
  %57 = mul nsw i64 %56, 804
  %58 = getelementptr inbounds i32, i32* %0, i64 31
  %59 = load i32, i32* %58, align 4
  %60 = sext i32 %59 to i64
  %61 = mul nsw i64 %60, -16364
  %62 = mul nsw i64 %56, 16364
  %63 = mul nsw i64 %60, 804
  %64 = add nsw i64 %57, 8192
  %65 = add nsw i64 %64, %61
  %66 = ashr i64 %65, 14
  %67 = add nsw i64 %62, 8192
  %68 = add nsw i64 %67, %63
  %69 = ashr i64 %68, 14
  %70 = getelementptr inbounds i32, i32* %0, i64 17
  %71 = load i32, i32* %70, align 4
  %72 = sext i32 %71 to i64
  %73 = mul nsw i64 %72, 12140
  %74 = getelementptr inbounds i32, i32* %0, i64 15
  %75 = load i32, i32* %74, align 4
  %76 = sext i32 %75 to i64
  %77 = mul nsw i64 %76, -11003
  %78 = mul nsw i64 %72, 11003
  %79 = mul nsw i64 %76, 12140
  %80 = add nsw i64 %73, 8192
  %81 = add nsw i64 %80, %77
  %82 = ashr i64 %81, 14
  %83 = add nsw i64 %78, 8192
  %84 = add nsw i64 %83, %79
  %85 = ashr i64 %84, 14
  %86 = getelementptr inbounds i32, i32* %0, i64 9
  %87 = load i32, i32* %86, align 4
  %88 = sext i32 %87 to i64
  %89 = mul nsw i64 %88, 7005
  %90 = getelementptr inbounds i32, i32* %0, i64 23
  %91 = load i32, i32* %90, align 4
  %92 = sext i32 %91 to i64
  %93 = mul nsw i64 %92, -14811
  %94 = mul nsw i64 %88, 14811
  %95 = mul nsw i64 %92, 7005
  %96 = add nsw i64 %89, 8192
  %97 = add nsw i64 %96, %93
  %98 = ashr i64 %97, 14
  %99 = add nsw i64 %94, 8192
  %100 = add nsw i64 %99, %95
  %101 = ashr i64 %100, 14
  %102 = getelementptr inbounds i32, i32* %0, i64 25
  %103 = load i32, i32* %102, align 4
  %104 = sext i32 %103 to i64
  %105 = mul nsw i64 %104, 15426
  %106 = getelementptr inbounds i32, i32* %0, i64 7
  %107 = load i32, i32* %106, align 4
  %108 = sext i32 %107 to i64
  %109 = mul nsw i64 %108, -5520
  %110 = mul nsw i64 %104, 5520
  %111 = mul nsw i64 %108, 15426
  %112 = add nsw i64 %105, 8192
  %113 = add nsw i64 %112, %109
  %114 = ashr i64 %113, 14
  %115 = add nsw i64 %110, 8192
  %116 = add nsw i64 %115, %111
  %117 = ashr i64 %116, 14
  %118 = getelementptr inbounds i32, i32* %0, i64 5
  %119 = load i32, i32* %118, align 4
  %120 = sext i32 %119 to i64
  %121 = mul nsw i64 %120, 3981
  %122 = getelementptr inbounds i32, i32* %0, i64 27
  %123 = load i32, i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = mul nsw i64 %124, -15893
  %126 = mul nsw i64 %120, 15893
  %127 = mul nsw i64 %124, 3981
  %128 = add nsw i64 %121, 8192
  %129 = add nsw i64 %128, %125
  %130 = ashr i64 %129, 14
  %131 = add nsw i64 %126, 8192
  %132 = add nsw i64 %131, %127
  %133 = ashr i64 %132, 14
  %134 = getelementptr inbounds i32, i32* %0, i64 21
  %135 = load i32, i32* %134, align 4
  %136 = sext i32 %135 to i64
  %137 = mul nsw i64 %136, 14053
  %138 = getelementptr inbounds i32, i32* %0, i64 11
  %139 = load i32, i32* %138, align 4
  %140 = sext i32 %139 to i64
  %141 = mul nsw i64 %140, -8423
  %142 = mul nsw i64 %136, 8423
  %143 = mul nsw i64 %140, 14053
  %144 = add nsw i64 %137, 8192
  %145 = add nsw i64 %144, %141
  %146 = ashr i64 %145, 14
  %147 = add nsw i64 %142, 8192
  %148 = add nsw i64 %147, %143
  %149 = ashr i64 %148, 14
  %150 = getelementptr inbounds i32, i32* %0, i64 13
  %151 = load i32, i32* %150, align 4
  %152 = sext i32 %151 to i64
  %153 = mul nsw i64 %152, 9760
  %154 = getelementptr inbounds i32, i32* %0, i64 19
  %155 = load i32, i32* %154, align 4
  %156 = sext i32 %155 to i64
  %157 = mul nsw i64 %156, -13160
  %158 = mul nsw i64 %152, 13160
  %159 = mul nsw i64 %156, 9760
  %160 = add nsw i64 %153, 8192
  %161 = add nsw i64 %160, %157
  %162 = ashr i64 %161, 14
  %163 = add nsw i64 %158, 8192
  %164 = add nsw i64 %163, %159
  %165 = ashr i64 %164, 14
  %166 = getelementptr inbounds i32, i32* %0, i64 29
  %167 = load i32, i32* %166, align 4
  %168 = sext i32 %167 to i64
  %169 = mul nsw i64 %168, 16207
  %170 = getelementptr inbounds i32, i32* %0, i64 3
  %171 = load i32, i32* %170, align 4
  %172 = sext i32 %171 to i64
  %173 = mul nsw i64 %172, -2404
  %174 = mul nsw i64 %168, 2404
  %175 = mul nsw i64 %172, 16207
  %176 = add nsw i64 %169, 8192
  %177 = add nsw i64 %176, %173
  %178 = ashr i64 %177, 14
  %179 = add nsw i64 %174, 8192
  %180 = add nsw i64 %179, %175
  %181 = ashr i64 %180, 14
  %182 = sext i32 %39 to i64
  %183 = mul nsw i64 %182, 1606
  %184 = sext i32 %53 to i64
  %185 = mul nsw i64 %184, -16305
  %186 = mul nsw i64 %182, 16305
  %187 = mul nsw i64 %184, 1606
  %188 = add nsw i64 %183, 8192
  %189 = add nsw i64 %188, %185
  %190 = ashr i64 %189, 14
  %191 = add nsw i64 %186, 8192
  %192 = add nsw i64 %191, %187
  %193 = ashr i64 %192, 14
  %194 = sext i32 %41 to i64
  %195 = mul nsw i64 %194, 12665
  %196 = sext i32 %51 to i64
  %197 = mul nsw i64 %196, -10394
  %198 = mul nsw i64 %194, 10394
  %199 = mul nsw i64 %196, 12665
  %200 = add nsw i64 %195, 8192
  %201 = add nsw i64 %200, %197
  %202 = ashr i64 %201, 14
  %203 = add nsw i64 %198, 8192
  %204 = add nsw i64 %203, %199
  %205 = ashr i64 %204, 14
  %206 = sext i32 %43 to i64
  %207 = mul nsw i64 %206, 7723
  %208 = sext i32 %49 to i64
  %209 = mul nsw i64 %208, -14449
  %210 = mul nsw i64 %206, 14449
  %211 = mul nsw i64 %208, 7723
  %212 = add nsw i64 %207, 8192
  %213 = add nsw i64 %212, %209
  %214 = ashr i64 %213, 14
  %215 = add nsw i64 %210, 8192
  %216 = add nsw i64 %215, %211
  %217 = ashr i64 %216, 14
  %218 = sext i32 %45 to i64
  %219 = mul nsw i64 %218, 15679
  %220 = sext i32 %47 to i64
  %221 = mul nsw i64 %220, -4756
  %222 = mul nsw i64 %218, 4756
  %223 = mul nsw i64 %220, 15679
  %224 = add nsw i64 %219, 8192
  %225 = add nsw i64 %224, %221
  %226 = ashr i64 %225, 14
  %227 = add nsw i64 %222, 8192
  %228 = add nsw i64 %227, %223
  %229 = ashr i64 %228, 14
  %230 = add nsw i64 %82, %66
  %231 = shl i64 %230, 32
  %232 = ashr exact i64 %231, 32
  %233 = sub nsw i64 %66, %82
  %234 = shl i64 %233, 32
  %235 = ashr exact i64 %234, 32
  %236 = sub nsw i64 %114, %98
  %237 = shl i64 %236, 32
  %238 = add nsw i64 %114, %98
  %239 = shl i64 %238, 32
  %240 = ashr exact i64 %239, 32
  %241 = add nsw i64 %146, %130
  %242 = shl i64 %241, 32
  %243 = ashr exact i64 %242, 32
  %244 = sub nsw i64 %130, %146
  %245 = shl i64 %244, 32
  %246 = ashr exact i64 %245, 32
  %247 = sub nsw i64 %178, %162
  %248 = shl i64 %247, 32
  %249 = add nsw i64 %178, %162
  %250 = shl i64 %249, 32
  %251 = ashr exact i64 %250, 32
  %252 = add nsw i64 %181, %165
  %253 = shl i64 %252, 32
  %254 = ashr exact i64 %253, 32
  %255 = sub nsw i64 %181, %165
  %256 = shl i64 %255, 32
  %257 = ashr exact i64 %256, 32
  %258 = sub nsw i64 %133, %149
  %259 = shl i64 %258, 32
  %260 = ashr exact i64 %259, 32
  %261 = add nsw i64 %149, %133
  %262 = shl i64 %261, 32
  %263 = ashr exact i64 %262, 32
  %264 = add nsw i64 %117, %101
  %265 = shl i64 %264, 32
  %266 = ashr exact i64 %265, 32
  %267 = sub nsw i64 %117, %101
  %268 = shl i64 %267, 32
  %269 = ashr exact i64 %268, 32
  %270 = sub nsw i64 %69, %85
  %271 = shl i64 %270, 32
  %272 = ashr exact i64 %271, 32
  %273 = add nsw i64 %85, %69
  %274 = shl i64 %273, 32
  %275 = ashr exact i64 %274, 32
  %276 = sext i32 %31 to i64
  %277 = mul nsw i64 %276, 3196
  %278 = sext i32 %37 to i64
  %279 = mul nsw i64 %278, -16069
  %280 = mul nsw i64 %276, 16069
  %281 = mul nsw i64 %278, 3196
  %282 = add nsw i64 %277, 8192
  %283 = add nsw i64 %282, %279
  %284 = ashr i64 %283, 14
  %285 = add nsw i64 %280, 8192
  %286 = add nsw i64 %285, %281
  %287 = ashr i64 %286, 14
  %288 = sext i32 %33 to i64
  %289 = mul nsw i64 %288, 13623
  %290 = sext i32 %35 to i64
  %291 = mul nsw i64 %290, -9102
  %292 = mul nsw i64 %288, 9102
  %293 = mul nsw i64 %290, 13623
  %294 = add nsw i64 %289, 8192
  %295 = add nsw i64 %294, %291
  %296 = ashr i64 %295, 14
  %297 = add nsw i64 %292, 8192
  %298 = add nsw i64 %297, %293
  %299 = ashr i64 %298, 14
  %300 = add nsw i64 %190, %202
  %301 = shl i64 %300, 32
  %302 = ashr exact i64 %301, 32
  %303 = sub nsw i64 %190, %202
  %304 = shl i64 %303, 32
  %305 = ashr exact i64 %304, 32
  %306 = sub nsw i64 %226, %214
  %307 = shl i64 %306, 32
  %308 = add nsw i64 %214, %226
  %309 = shl i64 %308, 32
  %310 = ashr exact i64 %309, 32
  %311 = add nsw i64 %217, %229
  %312 = shl i64 %311, 32
  %313 = ashr exact i64 %312, 32
  %314 = sub nsw i64 %229, %217
  %315 = shl i64 %314, 32
  %316 = ashr exact i64 %315, 32
  %317 = sub nsw i64 %193, %205
  %318 = shl i64 %317, 32
  %319 = ashr exact i64 %318, 32
  %320 = add nsw i64 %193, %205
  %321 = shl i64 %320, 32
  %322 = ashr exact i64 %321, 32
  %323 = sub i64 0, %234
  %324 = ashr exact i64 %323, 32
  %325 = mul nsw i64 %324, 16069
  %326 = mul nsw i64 %272, 3196
  %327 = mul nsw i64 %235, 3196
  %328 = mul nsw i64 %272, 16069
  %329 = add nsw i64 %326, 8192
  %330 = add nsw i64 %329, %325
  %331 = ashr i64 %330, 14
  %332 = add nsw i64 %328, 8192
  %333 = add nsw i64 %332, %327
  %334 = ashr i64 %333, 14
  %335 = sub i64 0, %237
  %336 = ashr exact i64 %335, 32
  %337 = mul nsw i64 %336, 3196
  %338 = mul nsw i64 %269, -16069
  %339 = mul nsw i64 %336, 16069
  %340 = mul nsw i64 %269, 3196
  %341 = add nsw i64 %338, 8192
  %342 = add nsw i64 %341, %337
  %343 = ashr i64 %342, 14
  %344 = add nsw i64 %340, 8192
  %345 = add nsw i64 %344, %339
  %346 = ashr i64 %345, 14
  %347 = sub i64 0, %245
  %348 = ashr exact i64 %347, 32
  %349 = mul nsw i64 %348, 9102
  %350 = mul nsw i64 %260, 13623
  %351 = mul nsw i64 %246, 13623
  %352 = mul nsw i64 %260, 9102
  %353 = add nsw i64 %350, 8192
  %354 = add nsw i64 %353, %349
  %355 = ashr i64 %354, 14
  %356 = add nsw i64 %352, 8192
  %357 = add nsw i64 %356, %351
  %358 = ashr i64 %357, 14
  %359 = sub i64 0, %248
  %360 = ashr exact i64 %359, 32
  %361 = mul nsw i64 %360, 13623
  %362 = mul nsw i64 %257, -9102
  %363 = mul nsw i64 %360, 9102
  %364 = mul nsw i64 %257, 13623
  %365 = add nsw i64 %362, 8192
  %366 = add nsw i64 %365, %361
  %367 = ashr i64 %366, 14
  %368 = add nsw i64 %364, 8192
  %369 = add nsw i64 %368, %363
  %370 = ashr i64 %369, 14
  %371 = add nsw i32 %25, %23
  %372 = sext i32 %371 to i64
  %373 = mul nsw i64 %372, 11585
  %374 = sub nsw i32 %23, %25
  %375 = sext i32 %374 to i64
  %376 = mul nsw i64 %375, 11585
  %377 = add nsw i64 %373, 8192
  %378 = ashr i64 %377, 14
  %379 = add nsw i64 %376, 8192
  %380 = ashr i64 %379, 14
  %381 = sext i32 %27 to i64
  %382 = mul nsw i64 %381, 6270
  %383 = sext i32 %29 to i64
  %384 = mul nsw i64 %383, -15137
  %385 = mul nsw i64 %381, 15137
  %386 = mul nsw i64 %383, 6270
  %387 = add nsw i64 %382, 8192
  %388 = add nsw i64 %387, %384
  %389 = ashr i64 %388, 14
  %390 = add nsw i64 %385, 8192
  %391 = add nsw i64 %390, %386
  %392 = ashr i64 %391, 14
  %393 = add nsw i64 %284, %296
  %394 = shl i64 %393, 32
  %395 = ashr exact i64 %394, 32
  %396 = sub nsw i64 %284, %296
  %397 = shl i64 %396, 32
  %398 = ashr exact i64 %397, 32
  %399 = sub nsw i64 %287, %299
  %400 = shl i64 %399, 32
  %401 = ashr exact i64 %400, 32
  %402 = add nsw i64 %287, %299
  %403 = shl i64 %402, 32
  %404 = ashr exact i64 %403, 32
  %405 = sub i64 0, %304
  %406 = ashr exact i64 %405, 32
  %407 = mul nsw i64 %406, 15137
  %408 = mul nsw i64 %319, 6270
  %409 = mul nsw i64 %305, 6270
  %410 = mul nsw i64 %319, 15137
  %411 = add nsw i64 %408, 8192
  %412 = add nsw i64 %411, %407
  %413 = ashr i64 %412, 14
  %414 = add nsw i64 %410, 8192
  %415 = add nsw i64 %414, %409
  %416 = ashr i64 %415, 14
  %417 = sub i64 0, %307
  %418 = ashr exact i64 %417, 32
  %419 = mul nsw i64 %418, 6270
  %420 = mul nsw i64 %316, -15137
  %421 = mul nsw i64 %418, 15137
  %422 = mul nsw i64 %316, 6270
  %423 = add nsw i64 %420, 8192
  %424 = add nsw i64 %423, %419
  %425 = ashr i64 %424, 14
  %426 = add nsw i64 %422, 8192
  %427 = add nsw i64 %426, %421
  %428 = ashr i64 %427, 14
  %429 = add nsw i64 %240, %232
  %430 = shl i64 %429, 32
  %431 = ashr exact i64 %430, 32
  %432 = add nsw i64 %343, %331
  %433 = shl i64 %432, 32
  %434 = ashr exact i64 %433, 32
  %435 = sub nsw i64 %331, %343
  %436 = shl i64 %435, 32
  %437 = ashr exact i64 %436, 32
  %438 = sub nsw i64 %232, %240
  %439 = shl i64 %438, 32
  %440 = ashr exact i64 %439, 32
  %441 = sub nsw i64 %251, %243
  %442 = shl i64 %441, 32
  %443 = sub nsw i64 %367, %355
  %444 = shl i64 %443, 32
  %445 = add nsw i64 %367, %355
  %446 = shl i64 %445, 32
  %447 = ashr exact i64 %446, 32
  %448 = add nsw i64 %251, %243
  %449 = shl i64 %448, 32
  %450 = ashr exact i64 %449, 32
  %451 = add nsw i64 %254, %263
  %452 = shl i64 %451, 32
  %453 = ashr exact i64 %452, 32
  %454 = add nsw i64 %370, %358
  %455 = shl i64 %454, 32
  %456 = ashr exact i64 %455, 32
  %457 = sub nsw i64 %370, %358
  %458 = shl i64 %457, 32
  %459 = ashr exact i64 %458, 32
  %460 = sub nsw i64 %254, %263
  %461 = shl i64 %460, 32
  %462 = ashr exact i64 %461, 32
  %463 = sub nsw i64 %275, %266
  %464 = shl i64 %463, 32
  %465 = ashr exact i64 %464, 32
  %466 = sub nsw i64 %334, %346
  %467 = shl i64 %466, 32
  %468 = ashr exact i64 %467, 32
  %469 = add nsw i64 %346, %334
  %470 = shl i64 %469, 32
  %471 = ashr exact i64 %470, 32
  %472 = add nsw i64 %266, %275
  %473 = shl i64 %472, 32
  %474 = ashr exact i64 %473, 32
  %475 = add nsw i64 %392, %378
  %476 = shl i64 %475, 32
  %477 = ashr exact i64 %476, 32
  %478 = add nsw i64 %389, %380
  %479 = shl i64 %478, 32
  %480 = ashr exact i64 %479, 32
  %481 = sub nsw i64 %380, %389
  %482 = shl i64 %481, 32
  %483 = ashr exact i64 %482, 32
  %484 = sub nsw i64 %378, %392
  %485 = shl i64 %484, 32
  %486 = ashr exact i64 %485, 32
  %487 = sub nsw i64 %401, %398
  %488 = shl i64 %487, 32
  %489 = ashr exact i64 %488, 32
  %490 = mul nsw i64 %489, 11585
  %491 = add nsw i64 %398, %401
  %492 = shl i64 %491, 32
  %493 = ashr exact i64 %492, 32
  %494 = mul nsw i64 %493, 11585
  %495 = add nsw i64 %490, 8192
  %496 = ashr i64 %495, 14
  %497 = add nsw i64 %494, 8192
  %498 = ashr i64 %497, 14
  %499 = add nsw i64 %302, %310
  %500 = shl i64 %499, 32
  %501 = ashr exact i64 %500, 32
  %502 = add nsw i64 %413, %425
  %503 = shl i64 %502, 32
  %504 = ashr exact i64 %503, 32
  %505 = sub nsw i64 %413, %425
  %506 = shl i64 %505, 32
  %507 = ashr exact i64 %506, 32
  %508 = sub nsw i64 %302, %310
  %509 = shl i64 %508, 32
  %510 = ashr exact i64 %509, 32
  %511 = sub nsw i64 %322, %313
  %512 = shl i64 %511, 32
  %513 = ashr exact i64 %512, 32
  %514 = sub nsw i64 %416, %428
  %515 = shl i64 %514, 32
  %516 = ashr exact i64 %515, 32
  %517 = add nsw i64 %416, %428
  %518 = shl i64 %517, 32
  %519 = ashr exact i64 %518, 32
  %520 = add nsw i64 %322, %313
  %521 = shl i64 %520, 32
  %522 = ashr exact i64 %521, 32
  %523 = sub i64 0, %436
  %524 = ashr exact i64 %523, 32
  %525 = mul nsw i64 %524, 15137
  %526 = mul nsw i64 %468, 6270
  %527 = mul nsw i64 %437, 6270
  %528 = mul nsw i64 %468, 15137
  %529 = add nsw i64 %526, 8192
  %530 = add nsw i64 %529, %525
  %531 = ashr i64 %530, 14
  %532 = add nsw i64 %528, 8192
  %533 = add nsw i64 %532, %527
  %534 = ashr i64 %533, 14
  %535 = sub i64 0, %439
  %536 = ashr exact i64 %535, 32
  %537 = mul nsw i64 %536, 15137
  %538 = mul nsw i64 %465, 6270
  %539 = mul nsw i64 %440, 6270
  %540 = mul nsw i64 %465, 15137
  %541 = add nsw i64 %538, 8192
  %542 = add nsw i64 %541, %537
  %543 = ashr i64 %542, 14
  %544 = add nsw i64 %540, 8192
  %545 = add nsw i64 %544, %539
  %546 = ashr i64 %545, 14
  %547 = sub i64 0, %442
  %548 = ashr exact i64 %547, 32
  %549 = mul nsw i64 %548, 6270
  %550 = mul nsw i64 %462, -15137
  %551 = mul nsw i64 %548, 15137
  %552 = mul nsw i64 %462, 6270
  %553 = add nsw i64 %550, 8192
  %554 = add nsw i64 %553, %549
  %555 = ashr i64 %554, 14
  %556 = add nsw i64 %552, 8192
  %557 = add nsw i64 %556, %551
  %558 = ashr i64 %557, 14
  %559 = sub i64 0, %444
  %560 = ashr exact i64 %559, 32
  %561 = mul nsw i64 %560, 6270
  %562 = mul nsw i64 %459, -15137
  %563 = mul nsw i64 %560, 15137
  %564 = mul nsw i64 %459, 6270
  %565 = add nsw i64 %562, 8192
  %566 = add nsw i64 %565, %561
  %567 = ashr i64 %566, 14
  %568 = add nsw i64 %564, 8192
  %569 = add nsw i64 %568, %563
  %570 = ashr i64 %569, 14
  %571 = add nsw i64 %404, %477
  %572 = shl i64 %571, 32
  %573 = ashr exact i64 %572, 32
  %574 = add nsw i64 %498, %480
  %575 = shl i64 %574, 32
  %576 = ashr exact i64 %575, 32
  %577 = add nsw i64 %496, %483
  %578 = shl i64 %577, 32
  %579 = ashr exact i64 %578, 32
  %580 = add nsw i64 %395, %486
  %581 = shl i64 %580, 32
  %582 = ashr exact i64 %581, 32
  %583 = sub nsw i64 %486, %395
  %584 = shl i64 %583, 32
  %585 = ashr exact i64 %584, 32
  %586 = sub nsw i64 %483, %496
  %587 = shl i64 %586, 32
  %588 = ashr exact i64 %587, 32
  %589 = sub nsw i64 %480, %498
  %590 = shl i64 %589, 32
  %591 = ashr exact i64 %590, 32
  %592 = sub nsw i64 %477, %404
  %593 = shl i64 %592, 32
  %594 = ashr exact i64 %593, 32
  %595 = sub nsw i64 %516, %507
  %596 = shl i64 %595, 32
  %597 = ashr exact i64 %596, 32
  %598 = mul nsw i64 %597, 11585
  %599 = add nsw i64 %507, %516
  %600 = shl i64 %599, 32
  %601 = ashr exact i64 %600, 32
  %602 = mul nsw i64 %601, 11585
  %603 = add nsw i64 %598, 8192
  %604 = ashr i64 %603, 14
  %605 = add nsw i64 %602, 8192
  %606 = ashr i64 %605, 14
  %607 = sub nsw i64 %513, %510
  %608 = shl i64 %607, 32
  %609 = ashr exact i64 %608, 32
  %610 = mul nsw i64 %609, 11585
  %611 = add nsw i64 %510, %513
  %612 = shl i64 %611, 32
  %613 = ashr exact i64 %612, 32
  %614 = mul nsw i64 %613, 11585
  %615 = add nsw i64 %610, 8192
  %616 = ashr i64 %615, 14
  %617 = add nsw i64 %614, 8192
  %618 = ashr i64 %617, 14
  %619 = add nsw i64 %450, %431
  %620 = shl i64 %619, 32
  %621 = ashr exact i64 %620, 32
  %622 = add nsw i64 %447, %434
  %623 = shl i64 %622, 32
  %624 = ashr exact i64 %623, 32
  %625 = add nsw i64 %567, %531
  %626 = shl i64 %625, 32
  %627 = ashr exact i64 %626, 32
  %628 = add nsw i64 %555, %543
  %629 = shl i64 %628, 32
  %630 = ashr exact i64 %629, 32
  %631 = sub nsw i64 %543, %555
  %632 = shl i64 %631, 32
  %633 = ashr exact i64 %632, 32
  %634 = sub nsw i64 %531, %567
  %635 = shl i64 %634, 32
  %636 = ashr exact i64 %635, 32
  %637 = sub nsw i64 %434, %447
  %638 = shl i64 %637, 32
  %639 = ashr exact i64 %638, 32
  %640 = sub nsw i64 %431, %450
  %641 = shl i64 %640, 32
  %642 = ashr exact i64 %641, 32
  %643 = sub nsw i64 %474, %453
  %644 = shl i64 %643, 32
  %645 = ashr exact i64 %644, 32
  %646 = sub nsw i64 %471, %456
  %647 = shl i64 %646, 32
  %648 = ashr exact i64 %647, 32
  %649 = sub nsw i64 %534, %570
  %650 = shl i64 %649, 32
  %651 = ashr exact i64 %650, 32
  %652 = sub nsw i64 %546, %558
  %653 = shl i64 %652, 32
  %654 = ashr exact i64 %653, 32
  %655 = add nsw i64 %558, %546
  %656 = shl i64 %655, 32
  %657 = ashr exact i64 %656, 32
  %658 = add nsw i64 %570, %534
  %659 = shl i64 %658, 32
  %660 = ashr exact i64 %659, 32
  %661 = add nsw i64 %456, %471
  %662 = shl i64 %661, 32
  %663 = ashr exact i64 %662, 32
  %664 = add nsw i64 %453, %474
  %665 = shl i64 %664, 32
  %666 = ashr exact i64 %665, 32
  %667 = add nsw i64 %522, %573
  %668 = shl i64 %667, 32
  %669 = ashr exact i64 %668, 32
  %670 = add nsw i64 %519, %576
  %671 = shl i64 %670, 32
  %672 = ashr exact i64 %671, 32
  %673 = add nsw i64 %606, %579
  %674 = shl i64 %673, 32
  %675 = ashr exact i64 %674, 32
  %676 = add nsw i64 %618, %582
  %677 = shl i64 %676, 32
  %678 = ashr exact i64 %677, 32
  %679 = add nsw i64 %616, %585
  %680 = shl i64 %679, 32
  %681 = ashr exact i64 %680, 32
  %682 = add nsw i64 %604, %588
  %683 = shl i64 %682, 32
  %684 = ashr exact i64 %683, 32
  %685 = add nsw i64 %504, %591
  %686 = shl i64 %685, 32
  %687 = ashr exact i64 %686, 32
  %688 = add nsw i64 %501, %594
  %689 = shl i64 %688, 32
  %690 = ashr exact i64 %689, 32
  %691 = sub nsw i64 %594, %501
  %692 = shl i64 %691, 32
  %693 = ashr exact i64 %692, 32
  %694 = sub nsw i64 %591, %504
  %695 = shl i64 %694, 32
  %696 = ashr exact i64 %695, 32
  %697 = sub nsw i64 %588, %604
  %698 = shl i64 %697, 32
  %699 = ashr exact i64 %698, 32
  %700 = sub nsw i64 %585, %616
  %701 = shl i64 %700, 32
  %702 = ashr exact i64 %701, 32
  %703 = sub nsw i64 %582, %618
  %704 = shl i64 %703, 32
  %705 = ashr exact i64 %704, 32
  %706 = sub nsw i64 %579, %606
  %707 = shl i64 %706, 32
  %708 = ashr exact i64 %707, 32
  %709 = sub nsw i64 %576, %519
  %710 = shl i64 %709, 32
  %711 = ashr exact i64 %710, 32
  %712 = sub nsw i64 %573, %522
  %713 = shl i64 %712, 32
  %714 = ashr exact i64 %713, 32
  %715 = sub nsw i64 %654, %633
  %716 = shl i64 %715, 32
  %717 = ashr exact i64 %716, 32
  %718 = mul nsw i64 %717, 11585
  %719 = add nsw i64 %633, %654
  %720 = shl i64 %719, 32
  %721 = ashr exact i64 %720, 32
  %722 = mul nsw i64 %721, 11585
  %723 = add nsw i64 %718, 8192
  %724 = ashr i64 %723, 14
  %725 = add nsw i64 %722, 8192
  %726 = ashr i64 %725, 14
  %727 = sub nsw i64 %651, %636
  %728 = shl i64 %727, 32
  %729 = ashr exact i64 %728, 32
  %730 = mul nsw i64 %729, 11585
  %731 = add nsw i64 %636, %651
  %732 = shl i64 %731, 32
  %733 = ashr exact i64 %732, 32
  %734 = mul nsw i64 %733, 11585
  %735 = add nsw i64 %730, 8192
  %736 = ashr i64 %735, 14
  %737 = add nsw i64 %734, 8192
  %738 = ashr i64 %737, 14
  %739 = sub nsw i64 %648, %639
  %740 = shl i64 %739, 32
  %741 = ashr exact i64 %740, 32
  %742 = mul nsw i64 %741, 11585
  %743 = add nsw i64 %639, %648
  %744 = shl i64 %743, 32
  %745 = ashr exact i64 %744, 32
  %746 = mul nsw i64 %745, 11585
  %747 = add nsw i64 %742, 8192
  %748 = ashr i64 %747, 14
  %749 = add nsw i64 %746, 8192
  %750 = ashr i64 %749, 14
  %751 = sub nsw i64 %645, %642
  %752 = shl i64 %751, 32
  %753 = ashr exact i64 %752, 32
  %754 = mul nsw i64 %753, 11585
  %755 = add nsw i64 %642, %645
  %756 = shl i64 %755, 32
  %757 = ashr exact i64 %756, 32
  %758 = mul nsw i64 %757, 11585
  %759 = add nsw i64 %754, 8192
  %760 = ashr i64 %759, 14
  %761 = add nsw i64 %758, 8192
  %762 = ashr i64 %761, 14
  %763 = add nsw i64 %666, %669
  %764 = trunc i64 %763 to i32
  store i32 %764, i32* %1, align 4
  %765 = add nsw i64 %663, %672
  %766 = trunc i64 %765 to i32
  %767 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %766, i32* %767, align 4
  %768 = add nsw i64 %660, %675
  %769 = trunc i64 %768 to i32
  %770 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %769, i32* %770, align 4
  %771 = add nsw i64 %657, %678
  %772 = trunc i64 %771 to i32
  %773 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %772, i32* %773, align 4
  %774 = add nsw i64 %726, %681
  %775 = trunc i64 %774 to i32
  %776 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %775, i32* %776, align 4
  %777 = add nsw i64 %738, %684
  %778 = trunc i64 %777 to i32
  %779 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %778, i32* %779, align 4
  %780 = add nsw i64 %750, %687
  %781 = trunc i64 %780 to i32
  %782 = getelementptr inbounds i32, i32* %1, i64 6
  store i32 %781, i32* %782, align 4
  %783 = add nsw i64 %762, %690
  %784 = trunc i64 %783 to i32
  %785 = getelementptr inbounds i32, i32* %1, i64 7
  store i32 %784, i32* %785, align 4
  %786 = add nsw i64 %760, %693
  %787 = trunc i64 %786 to i32
  %788 = getelementptr inbounds i32, i32* %1, i64 8
  store i32 %787, i32* %788, align 4
  %789 = add nsw i64 %748, %696
  %790 = trunc i64 %789 to i32
  %791 = getelementptr inbounds i32, i32* %1, i64 9
  store i32 %790, i32* %791, align 4
  %792 = add nsw i64 %736, %699
  %793 = trunc i64 %792 to i32
  %794 = getelementptr inbounds i32, i32* %1, i64 10
  store i32 %793, i32* %794, align 4
  %795 = add nsw i64 %724, %702
  %796 = trunc i64 %795 to i32
  %797 = getelementptr inbounds i32, i32* %1, i64 11
  store i32 %796, i32* %797, align 4
  %798 = add nsw i64 %630, %705
  %799 = trunc i64 %798 to i32
  %800 = getelementptr inbounds i32, i32* %1, i64 12
  store i32 %799, i32* %800, align 4
  %801 = add nsw i64 %627, %708
  %802 = trunc i64 %801 to i32
  %803 = getelementptr inbounds i32, i32* %1, i64 13
  store i32 %802, i32* %803, align 4
  %804 = add nsw i64 %624, %711
  %805 = trunc i64 %804 to i32
  %806 = getelementptr inbounds i32, i32* %1, i64 14
  store i32 %805, i32* %806, align 4
  %807 = add nsw i64 %621, %714
  %808 = trunc i64 %807 to i32
  %809 = getelementptr inbounds i32, i32* %1, i64 15
  store i32 %808, i32* %809, align 4
  %810 = sub nsw i64 %714, %621
  %811 = trunc i64 %810 to i32
  %812 = getelementptr inbounds i32, i32* %1, i64 16
  store i32 %811, i32* %812, align 4
  %813 = sub nsw i64 %711, %624
  %814 = trunc i64 %813 to i32
  %815 = getelementptr inbounds i32, i32* %1, i64 17
  store i32 %814, i32* %815, align 4
  %816 = sub nsw i64 %708, %627
  %817 = trunc i64 %816 to i32
  %818 = getelementptr inbounds i32, i32* %1, i64 18
  store i32 %817, i32* %818, align 4
  %819 = sub nsw i64 %705, %630
  %820 = trunc i64 %819 to i32
  %821 = getelementptr inbounds i32, i32* %1, i64 19
  store i32 %820, i32* %821, align 4
  %822 = sub nsw i64 %702, %724
  %823 = trunc i64 %822 to i32
  %824 = getelementptr inbounds i32, i32* %1, i64 20
  store i32 %823, i32* %824, align 4
  %825 = sub nsw i64 %699, %736
  %826 = trunc i64 %825 to i32
  %827 = getelementptr inbounds i32, i32* %1, i64 21
  store i32 %826, i32* %827, align 4
  %828 = sub nsw i64 %696, %748
  %829 = trunc i64 %828 to i32
  %830 = getelementptr inbounds i32, i32* %1, i64 22
  store i32 %829, i32* %830, align 4
  %831 = sub nsw i64 %693, %760
  %832 = trunc i64 %831 to i32
  %833 = getelementptr inbounds i32, i32* %1, i64 23
  store i32 %832, i32* %833, align 4
  %834 = sub nsw i64 %690, %762
  %835 = trunc i64 %834 to i32
  %836 = getelementptr inbounds i32, i32* %1, i64 24
  store i32 %835, i32* %836, align 4
  %837 = sub nsw i64 %687, %750
  %838 = trunc i64 %837 to i32
  %839 = getelementptr inbounds i32, i32* %1, i64 25
  store i32 %838, i32* %839, align 4
  %840 = sub nsw i64 %684, %738
  %841 = trunc i64 %840 to i32
  %842 = getelementptr inbounds i32, i32* %1, i64 26
  store i32 %841, i32* %842, align 4
  %843 = sub nsw i64 %681, %726
  %844 = trunc i64 %843 to i32
  %845 = getelementptr inbounds i32, i32* %1, i64 27
  store i32 %844, i32* %845, align 4
  %846 = sub nsw i64 %678, %657
  %847 = trunc i64 %846 to i32
  %848 = getelementptr inbounds i32, i32* %1, i64 28
  store i32 %847, i32* %848, align 4
  %849 = sub nsw i64 %675, %660
  %850 = trunc i64 %849 to i32
  %851 = getelementptr inbounds i32, i32* %1, i64 29
  store i32 %850, i32* %851, align 4
  %852 = sub nsw i64 %672, %663
  %853 = trunc i64 %852 to i32
  %854 = getelementptr inbounds i32, i32* %1, i64 30
  store i32 %853, i32* %854, align 4
  %855 = sub nsw i64 %669, %666
  %856 = trunc i64 %855 to i32
  %857 = getelementptr inbounds i32, i32* %1, i64 31
  store i32 %856, i32* %857, align 4
  br label %858

858:                                              ; preds = %22, %20
  ret void

859:                                              ; preds = %3
  %860 = icmp eq i64 %11, 32
  br i1 %860, label %22, label %12
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct32x32_135_add_c(i32* readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [1024 x i32], align 16
  %6 = alloca [32 x i32], align 16
  %7 = alloca [32 x i32], align 16
  %8 = bitcast [1024 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 4096, i1 false)
  %9 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 0
  %10 = bitcast [32 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 128, i1 false)
  %11 = bitcast [32 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %11) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 128, i1 false)
  call fastcc void @highbd_idct32_c(i32* %0, i32* nonnull %9)
  %12 = getelementptr inbounds i32, i32* %0, i64 32
  %13 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 32
  call fastcc void @highbd_idct32_c(i32* %12, i32* %13)
  %14 = getelementptr inbounds i32, i32* %0, i64 64
  %15 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 64
  call fastcc void @highbd_idct32_c(i32* %14, i32* %15)
  %16 = getelementptr inbounds i32, i32* %0, i64 96
  %17 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 96
  call fastcc void @highbd_idct32_c(i32* %16, i32* %17)
  %18 = getelementptr inbounds i32, i32* %0, i64 128
  %19 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 128
  call fastcc void @highbd_idct32_c(i32* %18, i32* %19)
  %20 = getelementptr inbounds i32, i32* %0, i64 160
  %21 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 160
  call fastcc void @highbd_idct32_c(i32* %20, i32* %21)
  %22 = getelementptr inbounds i32, i32* %0, i64 192
  %23 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 192
  call fastcc void @highbd_idct32_c(i32* %22, i32* %23)
  %24 = getelementptr inbounds i32, i32* %0, i64 224
  %25 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 224
  call fastcc void @highbd_idct32_c(i32* %24, i32* %25)
  %26 = getelementptr inbounds i32, i32* %0, i64 256
  %27 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 256
  call fastcc void @highbd_idct32_c(i32* %26, i32* %27)
  %28 = getelementptr inbounds i32, i32* %0, i64 288
  %29 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 288
  call fastcc void @highbd_idct32_c(i32* %28, i32* %29)
  %30 = getelementptr inbounds i32, i32* %0, i64 320
  %31 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 320
  call fastcc void @highbd_idct32_c(i32* %30, i32* %31)
  %32 = getelementptr inbounds i32, i32* %0, i64 352
  %33 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 352
  call fastcc void @highbd_idct32_c(i32* %32, i32* %33)
  %34 = getelementptr inbounds i32, i32* %0, i64 384
  %35 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 384
  call fastcc void @highbd_idct32_c(i32* %34, i32* %35)
  %36 = getelementptr inbounds i32, i32* %0, i64 416
  %37 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 416
  call fastcc void @highbd_idct32_c(i32* %36, i32* %37)
  %38 = getelementptr inbounds i32, i32* %0, i64 448
  %39 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 448
  call fastcc void @highbd_idct32_c(i32* %38, i32* %39)
  %40 = getelementptr inbounds i32, i32* %0, i64 480
  %41 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 480
  call fastcc void @highbd_idct32_c(i32* %40, i32* %41)
  %42 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 0
  %43 = getelementptr inbounds [32 x i32], [32 x i32]* %7, i64 0, i64 0
  %44 = sext i32 %2 to i64
  %45 = icmp eq i32 %3, 10
  %46 = select i1 %45, i32 1023, i32 255
  %47 = icmp eq i32 %3, 12
  %48 = select i1 %47, i32 4095, i32 %46
  br label %49

49:                                               ; preds = %98, %4
  %50 = phi i64 [ 0, %4 ], [ %99, %98 ]
  br label %51

51:                                               ; preds = %51, %49
  %52 = phi i64 [ 0, %49 ], [ %76, %51 ]
  %53 = shl i64 %52, 5
  %54 = add nuw nsw i64 %53, %50
  %55 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %52
  store i32 %56, i32* %57, align 16
  %58 = or i64 %52, 1
  %59 = shl i64 %58, 5
  %60 = add nuw nsw i64 %59, %50
  %61 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %58
  store i32 %62, i32* %63, align 4
  %64 = or i64 %52, 2
  %65 = shl i64 %64, 5
  %66 = add nuw nsw i64 %65, %50
  %67 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %64
  store i32 %68, i32* %69, align 8
  %70 = or i64 %52, 3
  %71 = shl i64 %70, 5
  %72 = add nuw nsw i64 %71, %50
  %73 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %70
  store i32 %74, i32* %75, align 4
  %76 = add nuw nsw i64 %52, 4
  %77 = icmp eq i64 %76, 32
  br i1 %77, label %78, label %51

78:                                               ; preds = %51
  call fastcc void @highbd_idct32_c(i32* nonnull %42, i32* nonnull %43)
  br label %79

79:                                               ; preds = %79, %78
  %80 = phi i64 [ 0, %78 ], [ %96, %79 ]
  %81 = phi i16* [ %1, %78 ], [ %95, %79 ]
  %82 = getelementptr inbounds i16, i16* %81, i64 %50
  %83 = load i16, i16* %82, align 2
  %84 = getelementptr inbounds [32 x i32], [32 x i32]* %7, i64 0, i64 %80
  %85 = load i32, i32* %84, align 4
  %86 = add nsw i32 %85, 32
  %87 = ashr i32 %86, 6
  %88 = zext i16 %83 to i32
  %89 = add nsw i32 %87, %88
  %90 = icmp slt i32 %89, %48
  %91 = select i1 %90, i32 %89, i32 %48
  %92 = icmp sgt i32 %91, 0
  %93 = select i1 %92, i32 %91, i32 0
  %94 = trunc i32 %93 to i16
  store i16 %94, i16* %82, align 2
  %95 = getelementptr inbounds i16, i16* %81, i64 %44
  %96 = add nuw nsw i64 %80, 1
  %97 = icmp eq i64 %96, 32
  br i1 %97, label %98, label %79

98:                                               ; preds = %79
  %99 = add nuw nsw i64 %50, 1
  %100 = icmp eq i64 %99, 32
  br i1 %100, label %101, label %49

101:                                              ; preds = %98
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %11) #3
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %8) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct32x32_34_add_c(i32* readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [1024 x i32], align 16
  %6 = alloca [32 x i32], align 16
  %7 = alloca [32 x i32], align 16
  %8 = bitcast [1024 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 4096, i1 false)
  %9 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 0
  %10 = bitcast [32 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 128, i1 false)
  %11 = bitcast [32 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %11) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 128, i1 false)
  call fastcc void @highbd_idct32_c(i32* %0, i32* nonnull %9)
  %12 = getelementptr inbounds i32, i32* %0, i64 32
  %13 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 32
  call fastcc void @highbd_idct32_c(i32* %12, i32* %13)
  %14 = getelementptr inbounds i32, i32* %0, i64 64
  %15 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 64
  call fastcc void @highbd_idct32_c(i32* %14, i32* %15)
  %16 = getelementptr inbounds i32, i32* %0, i64 96
  %17 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 96
  call fastcc void @highbd_idct32_c(i32* %16, i32* %17)
  %18 = getelementptr inbounds i32, i32* %0, i64 128
  %19 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 128
  call fastcc void @highbd_idct32_c(i32* %18, i32* %19)
  %20 = getelementptr inbounds i32, i32* %0, i64 160
  %21 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 160
  call fastcc void @highbd_idct32_c(i32* %20, i32* %21)
  %22 = getelementptr inbounds i32, i32* %0, i64 192
  %23 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 192
  call fastcc void @highbd_idct32_c(i32* %22, i32* %23)
  %24 = getelementptr inbounds i32, i32* %0, i64 224
  %25 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 224
  call fastcc void @highbd_idct32_c(i32* %24, i32* %25)
  %26 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 0
  %27 = getelementptr inbounds [32 x i32], [32 x i32]* %7, i64 0, i64 0
  %28 = sext i32 %2 to i64
  %29 = icmp eq i32 %3, 10
  %30 = select i1 %29, i32 1023, i32 255
  %31 = icmp eq i32 %3, 12
  %32 = select i1 %31, i32 4095, i32 %30
  br label %33

33:                                               ; preds = %82, %4
  %34 = phi i64 [ 0, %4 ], [ %83, %82 ]
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %60, %35 ]
  %37 = shl i64 %36, 5
  %38 = add nuw nsw i64 %37, %34
  %39 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %36
  store i32 %40, i32* %41, align 16
  %42 = or i64 %36, 1
  %43 = shl i64 %42, 5
  %44 = add nuw nsw i64 %43, %34
  %45 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %42
  store i32 %46, i32* %47, align 4
  %48 = or i64 %36, 2
  %49 = shl i64 %48, 5
  %50 = add nuw nsw i64 %49, %34
  %51 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 %50
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %48
  store i32 %52, i32* %53, align 8
  %54 = or i64 %36, 3
  %55 = shl i64 %54, 5
  %56 = add nuw nsw i64 %55, %34
  %57 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %54
  store i32 %58, i32* %59, align 4
  %60 = add nuw nsw i64 %36, 4
  %61 = icmp eq i64 %60, 32
  br i1 %61, label %62, label %35

62:                                               ; preds = %35
  call fastcc void @highbd_idct32_c(i32* nonnull %26, i32* nonnull %27)
  br label %63

63:                                               ; preds = %63, %62
  %64 = phi i64 [ 0, %62 ], [ %80, %63 ]
  %65 = mul nsw i64 %64, %28
  %66 = add nsw i64 %65, %34
  %67 = getelementptr inbounds i16, i16* %1, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = getelementptr inbounds [32 x i32], [32 x i32]* %7, i64 0, i64 %64
  %70 = load i32, i32* %69, align 4
  %71 = add nsw i32 %70, 32
  %72 = ashr i32 %71, 6
  %73 = zext i16 %68 to i32
  %74 = add nsw i32 %72, %73
  %75 = icmp slt i32 %74, %32
  %76 = select i1 %75, i32 %74, i32 %32
  %77 = icmp sgt i32 %76, 0
  %78 = select i1 %77, i32 %76, i32 0
  %79 = trunc i32 %78 to i16
  store i16 %79, i16* %67, align 2
  %80 = add nuw nsw i64 %64, 1
  %81 = icmp eq i64 %80, 32
  br i1 %81, label %82, label %63

82:                                               ; preds = %63
  %83 = add nuw nsw i64 %34, 1
  %84 = icmp eq i64 %83, 32
  br i1 %84, label %85, label %33

85:                                               ; preds = %82
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %11) #3
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %8) #3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_idct32x32_1_add_c(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #2 {
  %5 = load i32, i32* %0, align 4
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %6, 11585
  %8 = add nsw i64 %7, 8192
  %9 = lshr i64 %8, 14
  %10 = shl i64 %9, 32
  %11 = ashr exact i64 %10, 32
  %12 = mul nsw i64 %11, 11585
  %13 = add nsw i64 %12, 8192
  %14 = lshr i64 %13, 14
  %15 = trunc i64 %14 to i32
  %16 = add nsw i32 %15, 32
  %17 = ashr i32 %16, 6
  %18 = sext i32 %2 to i64
  %19 = icmp eq i32 %3, 10
  %20 = select i1 %19, i32 1023, i32 255
  %21 = icmp eq i32 %3, 12
  %22 = select i1 %21, i32 4095, i32 %20
  %23 = icmp eq i32 %3, 10
  %24 = select i1 %23, i32 1023, i32 255
  %25 = icmp eq i32 %3, 12
  %26 = select i1 %25, i32 4095, i32 %24
  br label %27

27:                                               ; preds = %53, %4
  %28 = phi i16* [ %1, %4 ], [ %54, %53 ]
  %29 = phi i32 [ 0, %4 ], [ %55, %53 ]
  br label %30

30:                                               ; preds = %30, %27
  %31 = phi i64 [ 0, %27 ], [ %51, %30 ]
  %32 = getelementptr inbounds i16, i16* %28, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = add nsw i32 %17, %34
  %36 = icmp slt i32 %35, %22
  %37 = select i1 %36, i32 %35, i32 %22
  %38 = icmp sgt i32 %37, 0
  %39 = select i1 %38, i32 %37, i32 0
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %32, align 2
  %41 = or i64 %31, 1
  %42 = getelementptr inbounds i16, i16* %28, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = add nsw i32 %17, %44
  %46 = icmp slt i32 %45, %26
  %47 = select i1 %46, i32 %45, i32 %26
  %48 = icmp sgt i32 %47, 0
  %49 = select i1 %48, i32 %47, i32 0
  %50 = trunc i32 %49 to i16
  store i16 %50, i16* %42, align 2
  %51 = add nuw nsw i64 %31, 2
  %52 = icmp eq i64 %51, 32
  br i1 %52, label %53, label %30

53:                                               ; preds = %30
  %54 = getelementptr inbounds i16, i16* %28, i64 %18
  %55 = add nuw nsw i32 %29, 1
  %56 = icmp eq i32 %55, 32
  br i1 %56, label %57, label %27

57:                                               ; preds = %53
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
