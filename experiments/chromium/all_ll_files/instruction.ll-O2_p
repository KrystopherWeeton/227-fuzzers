; ModuleID = '../../third_party/vulkan-deps/spirv-tools/src/source/val/instruction.cpp'
source_filename = "../../third_party/vulkan-deps/spirv-tools/src/source/val/instruction.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.spvtools::val::Instruction" = type { %"class.std::__1::vector", %"class.std::__1::vector.1", %struct.spv_parsed_instruction_t, i64, %"class.spvtools::val::Function"*, %"class.spvtools::val::BasicBlock"*, %"class.std::__1::vector.8" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %struct.spv_parsed_operand_t*, %struct.spv_parsed_operand_t*, %"class.std::__1::__compressed_pair.3" }
%struct.spv_parsed_operand_t = type { i16, i16, i32, i32, i32 }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %struct.spv_parsed_operand_t* }
%struct.spv_parsed_instruction_t = type { i32*, i16, i16, i32, i32, i32, %struct.spv_parsed_operand_t*, i16 }
%"class.spvtools::val::Function" = type opaque
%"class.spvtools::val::BasicBlock" = type opaque
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.10" }
%"struct.std::__1::pair" = type <{ %"class.spvtools::val::Instruction"*, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN8spvtools3val11InstructionC1EPK24spv_parsed_instruction_t = hidden unnamed_addr alias void (%"class.spvtools::val::Instruction"*, %struct.spv_parsed_instruction_t*), void (%"class.spvtools::val::Instruction"*, %struct.spv_parsed_instruction_t*)* @_ZN8spvtools3val11InstructionC2EPK24spv_parsed_instruction_t

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8spvtools3val11InstructionC2EPK24spv_parsed_instruction_t(%"class.spvtools::val::Instruction"*, %struct.spv_parsed_instruction_t* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = bitcast %struct.spv_parsed_instruction_t* %1 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.spv_parsed_instruction_t, %struct.spv_parsed_instruction_t* %1, i64 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i64
  %8 = bitcast %"class.spvtools::val::Instruction"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #7
  %9 = shl nuw nsw i64 %7, 2
  %10 = icmp eq i16 %6, 0
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = tail call i8* @_Znwm(i64 %9) #8
  %13 = bitcast i8* %12 to i32*
  %14 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = bitcast i32** %14 to i8**
  store i8* %12, i8** %15, align 8
  %16 = bitcast %"class.spvtools::val::Instruction"* %0 to i8**
  store i8* %12, i8** %16, align 8
  %17 = getelementptr inbounds i32, i32* %13, i64 %7
  %18 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store i32* %17, i32** %18, align 8
  %19 = bitcast i32** %14 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %12, i8* align 4 %4, i64 %9, i1 false) #7
  %20 = ptrtoint i32* %17 to i64
  store i64 %20, i64* %19, align 8
  %21 = ptrtoint i8* %12 to i64
  br label %22

22:                                               ; preds = %2, %11
  %23 = phi i64 [ 0, %2 ], [ %21, %11 ]
  %24 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 1
  %25 = getelementptr inbounds %struct.spv_parsed_instruction_t, %struct.spv_parsed_instruction_t* %1, i64 0, i32 6
  %26 = bitcast %struct.spv_parsed_operand_t** %25 to i8**
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %struct.spv_parsed_instruction_t, %struct.spv_parsed_instruction_t* %1, i64 0, i32 7
  %29 = load i16, i16* %28, align 8
  %30 = zext i16 %29 to i64
  %31 = bitcast %"class.std::__1::vector.1"* %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 24, i1 false) #7
  %32 = shl nuw nsw i64 %30, 4
  %33 = icmp eq i16 %29, 0
  br i1 %33, label %45, label %34

34:                                               ; preds = %22
  %35 = tail call i8* @_Znwm(i64 %32) #8
  %36 = bitcast i8* %35 to %struct.spv_parsed_operand_t*
  %37 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 1, i32 0, i32 1
  %38 = bitcast %struct.spv_parsed_operand_t** %37 to i8**
  store i8* %35, i8** %38, align 8
  %39 = bitcast %"class.std::__1::vector.1"* %24 to i8**
  store i8* %35, i8** %39, align 8
  %40 = getelementptr inbounds %struct.spv_parsed_operand_t, %struct.spv_parsed_operand_t* %36, i64 %30
  %41 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  store %struct.spv_parsed_operand_t* %40, %struct.spv_parsed_operand_t** %41, align 8
  %42 = bitcast %struct.spv_parsed_operand_t** %37 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %35, i8* align 4 %27, i64 %32, i1 false) #7
  %43 = ptrtoint %struct.spv_parsed_operand_t* %40 to i64
  store i64 %43, i64* %42, align 8
  %44 = ptrtoint i8* %35 to i64
  br label %45

45:                                               ; preds = %22, %34
  %46 = phi i64 [ 0, %22 ], [ %44, %34 ]
  %47 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 2, i32 0
  %48 = bitcast i32** %47 to i64*
  store i64 %23, i64* %48, align 8
  %49 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 2, i32 1
  %50 = load i16, i16* %5, align 8
  store i16 %50, i16* %49, align 8
  %51 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 2, i32 2
  %52 = getelementptr inbounds %struct.spv_parsed_instruction_t, %struct.spv_parsed_instruction_t* %1, i64 0, i32 2
  %53 = load i16, i16* %52, align 2
  store i16 %53, i16* %51, align 2
  %54 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 2, i32 3
  %55 = getelementptr inbounds %struct.spv_parsed_instruction_t, %struct.spv_parsed_instruction_t* %1, i64 0, i32 3
  %56 = load i32, i32* %55, align 4
  store i32 %56, i32* %54, align 4
  %57 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 2, i32 4
  %58 = getelementptr inbounds %struct.spv_parsed_instruction_t, %struct.spv_parsed_instruction_t* %1, i64 0, i32 4
  %59 = load i32, i32* %58, align 8
  store i32 %59, i32* %57, align 8
  %60 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 2, i32 5
  %61 = getelementptr inbounds %struct.spv_parsed_instruction_t, %struct.spv_parsed_instruction_t* %1, i64 0, i32 5
  %62 = load i32, i32* %61, align 4
  store i32 %62, i32* %60, align 4
  %63 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 2, i32 6
  %64 = bitcast %struct.spv_parsed_operand_t** %63 to i64*
  store i64 %46, i64* %64, align 8
  %65 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 2, i32 7
  %66 = load i16, i16* %28, align 8
  store i16 %66, i16* %65, align 8
  %67 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 3
  %68 = bitcast i64* %67 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 48, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8spvtools3val11Instruction11RegisterUseEPKS1_j(%"class.spvtools::val::Instruction"*, %"class.spvtools::val::Instruction"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 6
  %5 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 6, i32 0, i32 1
  %6 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %5, align 8
  %7 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %8 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %7, align 8
  %9 = icmp ult %"struct.std::__1::pair"* %6, %8
  %10 = ptrtoint %"struct.std::__1::pair"* %8 to i64
  br i1 %9, label %11, label %17

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %6, i64 0, i32 0
  store %"class.spvtools::val::Instruction"* %1, %"class.spvtools::val::Instruction"** %12, align 8
  %13 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %6, i64 0, i32 1
  store i32 %2, i32* %13, align 8
  %14 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %6, i64 1
  %15 = ptrtoint %"struct.std::__1::pair"* %14 to i64
  %16 = bitcast %"struct.std::__1::pair"** %5 to i64*
  store i64 %15, i64* %16, align 8
  br label %75

17:                                               ; preds = %3
  %18 = ptrtoint %"struct.std::__1::pair"* %6 to i64
  %19 = bitcast %"struct.std::__1::pair"** %5 to i64*
  %20 = bitcast %"class.std::__1::vector.8"* %4 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %18, %21
  %23 = ashr exact i64 %22, 4
  %24 = add nsw i64 %23, 1
  %25 = icmp ugt i64 %24, 1152921504606846975
  br i1 %25, label %26, label %28

26:                                               ; preds = %17
  %27 = bitcast %"class.std::__1::vector.8"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %27) #9
  unreachable

28:                                               ; preds = %17
  %29 = bitcast %"struct.std::__1::pair"** %7 to i64*
  %30 = sub i64 %10, %21
  %31 = ashr exact i64 %30, 4
  %32 = icmp ult i64 %31, 576460752303423487
  br i1 %32, label %33, label %41

33:                                               ; preds = %28
  %34 = ashr exact i64 %30, 3
  %35 = icmp ult i64 %34, %24
  %36 = select i1 %35, i64 %24, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %33
  %39 = icmp ugt i64 %36, 1152921504606846975
  br i1 %39, label %40, label %41

40:                                               ; preds = %38
  tail call void @abort() #9
  unreachable

41:                                               ; preds = %38, %28
  %42 = phi i64 [ %36, %38 ], [ 1152921504606846975, %28 ]
  %43 = shl i64 %42, 4
  %44 = tail call i8* @_Znwm(i64 %43) #8
  %45 = bitcast i8* %44 to %"struct.std::__1::pair"*
  br label %46

46:                                               ; preds = %41, %33
  %47 = phi i64 [ %42, %41 ], [ 0, %33 ]
  %48 = phi %"struct.std::__1::pair"* [ %45, %41 ], [ null, %33 ]
  %49 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 %23
  %50 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 %47
  %51 = ptrtoint %"struct.std::__1::pair"* %50 to i64
  %52 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 0, i32 0
  store %"class.spvtools::val::Instruction"* %1, %"class.spvtools::val::Instruction"** %52, align 8
  %53 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 %23, i32 1
  store i32 %2, i32* %53, align 8
  %54 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 1
  %55 = ptrtoint %"struct.std::__1::pair"* %54 to i64
  %56 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %4, i64 0, i32 0, i32 0
  %57 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %56, align 8
  %58 = load i64, i64* %19, align 8
  %59 = ptrtoint %"struct.std::__1::pair"* %57 to i64
  %60 = sub i64 %58, %59
  %61 = ashr exact i64 %60, 4
  %62 = sub nsw i64 0, %61
  %63 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 %62
  %64 = ptrtoint %"struct.std::__1::pair"* %63 to i64
  %65 = icmp sgt i64 %60, 0
  br i1 %65, label %66, label %70

66:                                               ; preds = %46
  %67 = bitcast %"struct.std::__1::pair"* %63 to i8*
  %68 = bitcast %"struct.std::__1::pair"* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 %60, i1 false) #7
  %69 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %56, align 8
  br label %70

70:                                               ; preds = %66, %46
  %71 = phi %"struct.std::__1::pair"* [ %57, %46 ], [ %69, %66 ]
  store i64 %64, i64* %20, align 8
  store i64 %55, i64* %19, align 8
  store i64 %51, i64* %29, align 8
  %72 = icmp eq %"struct.std::__1::pair"* %71, null
  br i1 %72, label %75, label %73

73:                                               ; preds = %70
  %74 = bitcast %"struct.std::__1::pair"* %71 to i8*
  tail call void @_ZdlPv(i8* %74) #8
  br label %75

75:                                               ; preds = %11, %70, %73
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN8spvtools3valltERKNS0_11InstructionES3_(%"class.spvtools::val::Instruction"* nocapture readonly dereferenceable(136), %"class.spvtools::val::Instruction"* nocapture readonly dereferenceable(136)) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 2, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %1, i64 0, i32 2, i32 5
  %6 = load i32, i32* %5, align 4
  %7 = icmp ult i32 %4, %6
  ret i1 %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN8spvtools3valltERKNS0_11InstructionEj(%"class.spvtools::val::Instruction"* nocapture readonly dereferenceable(136), i32) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 2, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = icmp ult i32 %4, %1
  ret i1 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN8spvtools3valeqERKNS0_11InstructionES3_(%"class.spvtools::val::Instruction"* nocapture readonly dereferenceable(136), %"class.spvtools::val::Instruction"* nocapture readonly dereferenceable(136)) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 2, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %1, i64 0, i32 2, i32 5
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  ret i1 %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN8spvtools3valeqERKNS0_11InstructionEj(%"class.spvtools::val::Instruction"* nocapture readonly dereferenceable(136), i32) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %"class.spvtools::val::Instruction", %"class.spvtools::val::Instruction"* %0, i64 0, i32 2, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, %1
  ret i1 %5
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
