; ModuleID = '../../sandbox/policy/linux/bpf_speech_recognition_policy_linux.cc'
source_filename = "../../sandbox/policy/linux/bpf_speech_recognition_policy_linux.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%"class.sandbox::policy::SpeechRecognitionProcessPolicy" = type { %"class.sandbox::policy::BPFBasePolicy" }
%"class.sandbox::policy::BPFBasePolicy" = type { %"class.sandbox::bpf_dsl::Policy", %"class.std::__1::unique_ptr" }
%"class.sandbox::bpf_dsl::Policy" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sandbox::BaselinePolicy"* }
%"class.sandbox::BaselinePolicy" = type { %"class.sandbox::bpf_dsl::Policy", i32, i32 }
%"class.sandbox::bpf_dsl::internal::ResultExprImpl" = type opaque
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.sandbox::policy::SandboxLinux" = type { i32, i8, i32, i8, i8, i8, i8, i8, %"class.std::__1::unique_ptr.1", %"class.sandbox::syscall_broker::BrokerProcess"* }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.sandbox::SetuidSandboxClient"* }
%"class.sandbox::SetuidSandboxClient" = type opaque
%"class.sandbox::syscall_broker::BrokerProcess" = type { i8, i32, i32, i8, i8, %"class.std::__1::bitset", %"class.sandbox::syscall_broker::BrokerPermissionList", %"class.std::__1::unique_ptr.15" }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"class.sandbox::syscall_broker::BrokerPermissionList" = type { i32, %"class.std::__1::vector", %"class.sandbox::syscall_broker::BrokerFilePermission"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sandbox::syscall_broker::BrokerFilePermission"*, %"class.sandbox::syscall_broker::BrokerFilePermission"*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.sandbox::syscall_broker::BrokerFilePermission"* }
%"class.sandbox::syscall_broker::BrokerFilePermission" = type <{ %"class.std::__1::basic_string", i8, i8, i8, i8, i8, i8, [2 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.sandbox::syscall_broker::BrokerClient"* }
%"class.sandbox::syscall_broker::BrokerClient" = type opaque

@_ZTVN7sandbox6policy30SpeechRecognitionProcessPolicyE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sandbox::policy::SpeechRecognitionProcessPolicy"*)* @_ZN7sandbox6policy30SpeechRecognitionProcessPolicyD2Ev to i8*), i8* bitcast (void (%"class.sandbox::policy::SpeechRecognitionProcessPolicy"*)* @_ZN7sandbox6policy30SpeechRecognitionProcessPolicyD0Ev to i8*), i8* bitcast ({ %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::policy::SpeechRecognitionProcessPolicy"*, i32)* @_ZNK7sandbox6policy30SpeechRecognitionProcessPolicy15EvaluateSyscallEi to i8*), i8* bitcast ({ %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::policy::BPFBasePolicy"*)* @_ZNK7sandbox6policy13BPFBasePolicy14InvalidSyscallEv to i8*)] }, align 8

@_ZN7sandbox6policy30SpeechRecognitionProcessPolicyC1Ev = hidden unnamed_addr alias void (%"class.sandbox::policy::SpeechRecognitionProcessPolicy"*), void (%"class.sandbox::policy::SpeechRecognitionProcessPolicy"*)* @_ZN7sandbox6policy30SpeechRecognitionProcessPolicyC2Ev
@_ZN7sandbox6policy30SpeechRecognitionProcessPolicyD1Ev = hidden unnamed_addr alias void (%"class.sandbox::policy::SpeechRecognitionProcessPolicy"*), void (%"class.sandbox::policy::SpeechRecognitionProcessPolicy"*)* @_ZN7sandbox6policy30SpeechRecognitionProcessPolicyD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7sandbox6policy30SpeechRecognitionProcessPolicyC2Ev(%"class.sandbox::policy::SpeechRecognitionProcessPolicy"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sandbox::policy::SpeechRecognitionProcessPolicy", %"class.sandbox::policy::SpeechRecognitionProcessPolicy"* %0, i64 0, i32 0
  tail call void @_ZN7sandbox6policy13BPFBasePolicyC2Ev(%"class.sandbox::policy::BPFBasePolicy"* %2) #4
  %3 = getelementptr inbounds %"class.sandbox::policy::SpeechRecognitionProcessPolicy", %"class.sandbox::policy::SpeechRecognitionProcessPolicy"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN7sandbox6policy30SpeechRecognitionProcessPolicyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

declare void @_ZN7sandbox6policy13BPFBasePolicyC2Ev(%"class.sandbox::policy::BPFBasePolicy"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7sandbox6policy13BPFBasePolicyD2Ev(%"class.sandbox::policy::BPFBasePolicy"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7sandbox6policy30SpeechRecognitionProcessPolicyD2Ev(%"class.sandbox::policy::SpeechRecognitionProcessPolicy"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sandbox::policy::SpeechRecognitionProcessPolicy", %"class.sandbox::policy::SpeechRecognitionProcessPolicy"* %0, i64 0, i32 0
  tail call void @_ZN7sandbox6policy13BPFBasePolicyD2Ev(%"class.sandbox::policy::BPFBasePolicy"* %2) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7sandbox6policy30SpeechRecognitionProcessPolicyD0Ev(%"class.sandbox::policy::SpeechRecognitionProcessPolicy"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sandbox::policy::SpeechRecognitionProcessPolicy", %"class.sandbox::policy::SpeechRecognitionProcessPolicy"* %0, i64 0, i32 0
  tail call void @_ZN7sandbox6policy13BPFBasePolicyD2Ev(%"class.sandbox::policy::BPFBasePolicy"* %2) #4
  %3 = bitcast %"class.sandbox::policy::SpeechRecognitionProcessPolicy"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZNK7sandbox6policy30SpeechRecognitionProcessPolicy15EvaluateSyscallEi(%"class.sandbox::policy::SpeechRecognitionProcessPolicy"*, i32) unnamed_addr #0 align 2 {
  switch i32 %1, label %13 [
    i32 217, label %3
    i32 78, label %5
    i32 144, label %7
  ]

3:                                                ; preds = %2
  %4 = tail call { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZN7sandbox7bpf_dsl5AllowEv() #4
  br label %21

5:                                                ; preds = %2
  %6 = tail call { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZN7sandbox7bpf_dsl5AllowEv() #4
  br label %21

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.sandbox::policy::SpeechRecognitionProcessPolicy", %"class.sandbox::policy::SpeechRecognitionProcessPolicy"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %9 = load %"class.sandbox::BaselinePolicy"*, %"class.sandbox::BaselinePolicy"** %8, align 8
  %10 = getelementptr inbounds %"class.sandbox::BaselinePolicy", %"class.sandbox::BaselinePolicy"* %9, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = tail call { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZN7sandbox19RestrictSchedTargetEii(i32 %11, i32 144) #4
  br label %21

13:                                               ; preds = %2
  %14 = tail call %"class.sandbox::policy::SandboxLinux"* @_ZN7sandbox6policy12SandboxLinux11GetInstanceEv() #4
  %15 = tail call zeroext i1 @_ZNK7sandbox6policy12SandboxLinux25ShouldBrokerHandleSyscallEi(%"class.sandbox::policy::SandboxLinux"* %14, i32 %1) #4
  br i1 %15, label %16, label %18

16:                                               ; preds = %13
  %17 = tail call { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZNK7sandbox6policy12SandboxLinux15HandleViaBrokerEv(%"class.sandbox::policy::SandboxLinux"* %14) #4
  br label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.sandbox::policy::SpeechRecognitionProcessPolicy", %"class.sandbox::policy::SpeechRecognitionProcessPolicy"* %0, i64 0, i32 0
  %20 = tail call { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZNK7sandbox6policy13BPFBasePolicy15EvaluateSyscallEi(%"class.sandbox::policy::BPFBasePolicy"* %19, i32 %1) #4
  br label %21

21:                                               ; preds = %16, %18, %7, %5, %3
  %22 = phi { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } [ %17, %16 ], [ %20, %18 ], [ %12, %7 ], [ %6, %5 ], [ %4, %3 ]
  ret { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } %22
}

declare { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZN7sandbox7bpf_dsl5AllowEv() local_unnamed_addr #1

declare { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZN7sandbox19RestrictSchedTargetEii(i32, i32) local_unnamed_addr #1

declare %"class.sandbox::policy::SandboxLinux"* @_ZN7sandbox6policy12SandboxLinux11GetInstanceEv() local_unnamed_addr #1

declare zeroext i1 @_ZNK7sandbox6policy12SandboxLinux25ShouldBrokerHandleSyscallEi(%"class.sandbox::policy::SandboxLinux"*, i32) local_unnamed_addr #1

declare { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZNK7sandbox6policy12SandboxLinux15HandleViaBrokerEv(%"class.sandbox::policy::SandboxLinux"*) local_unnamed_addr #1

declare { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZNK7sandbox6policy13BPFBasePolicy15EvaluateSyscallEi(%"class.sandbox::policy::BPFBasePolicy"*, i32) unnamed_addr #1

declare { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZNK7sandbox6policy13BPFBasePolicy14InvalidSyscallEv(%"class.sandbox::policy::BPFBasePolicy"*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
