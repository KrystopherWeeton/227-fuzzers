; ModuleID = '../../third_party/libgav1/src/src/dsp/x86/intra_edge_sse4.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/x86/intra_edge_sse4.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }

@_ZN7libgav13dsp12_GLOBAL__N_18kKernelsE = internal unnamed_addr constant [3 x [5 x i32]] [[5 x i32] [i32 0, i32 4, i32 8, i32 4, i32 0], [5 x i32] [i32 0, i32 5, i32 6, i32 5, i32 0], [5 x i32] [i32 2, i32 4, i32 4, i32 4, i32 2]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp20IntraEdgeInit_SSE4_1Ev() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #5
  %2 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 14
  store void (i8*, i32, i32)* @_ZN7libgav13dsp12_GLOBAL__N_122IntraEdgeFilter_SSE4_1EPvii, void (i8*, i32, i32)** %2, align 8
  %3 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 15
  store void (i8*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_125IntraEdgeUpsampler_SSE4_1EPvi, void (i8*, i32)** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_122IntraEdgeFilter_SSE4_1EPvii(i8* nocapture, i32, i32) #3 {
  %4 = alloca [133 x i8], align 16
  %5 = getelementptr inbounds [133 x i8], [133 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 133, i8* nonnull %5) #5
  %6 = sext i32 %1 to i64
  %7 = icmp ugt i32 %1, 132
  %8 = sub nsw i64 133, %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = getelementptr [133 x i8], [133 x i8]* %4, i64 0, i64 %6
  call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 -86, i64 %9, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 1 %0, i64 %6, i1 false)
  %11 = icmp eq i32 %1, 1
  br i1 %11, label %278, label %12

12:                                               ; preds = %3
  switch i32 %2, label %107 [
    i32 1, label %19
    i32 2, label %13
  ]

13:                                               ; preds = %12
  %14 = add nsw i32 %1, -17
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %196

16:                                               ; preds = %13
  %17 = getelementptr inbounds i8, i8* %0, i64 1
  %18 = sext i32 %14 to i64
  br label %66

19:                                               ; preds = %12
  %20 = add nsw i32 %1, -17
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %196

22:                                               ; preds = %19
  %23 = getelementptr inbounds i8, i8* %0, i64 1
  %24 = sext i32 %20 to i64
  br label %25

25:                                               ; preds = %22, %25
  %26 = phi i64 [ 0, %22 ], [ %64, %25 ]
  %27 = getelementptr inbounds i8, i8* %23, i64 %26
  %28 = getelementptr inbounds [133 x i8], [133 x i8]* %4, i64 0, i64 %26
  %29 = bitcast i8* %28 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 4
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %32 = zext <8 x i8> %31 to <8 x i16>
  %33 = shufflevector <16 x i8> %30, <16 x i8> undef, <8 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13>
  %34 = zext <8 x i8> %33 to <8 x i16>
  %35 = bitcast <8 x i16> %32 to <16 x i8>
  %36 = shufflevector <16 x i8> %35, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %37 = bitcast <8 x i16> %34 to <16 x i8>
  %38 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %39 = shl nuw nsw <8 x i16> %32, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %40 = shl nuw nsw <8 x i16> %34, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %41 = bitcast <16 x i8> %36 to <8 x i16>
  %42 = shl <8 x i16> %41, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %43 = bitcast <16 x i8> %38 to <8 x i16>
  %44 = shl <8 x i16> %43, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %45 = bitcast <8 x i16> %39 to <16 x i8>
  %46 = shufflevector <16 x i8> %45, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %47 = bitcast <16 x i8> %46 to <8 x i16>
  %48 = add <8 x i16> %39, %47
  %49 = bitcast <8 x i16> %40 to <16 x i8>
  %50 = shufflevector <16 x i8> %49, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %51 = bitcast <16 x i8> %50 to <8 x i16>
  %52 = add <8 x i16> %40, %51
  %53 = add <8 x i16> %48, %42
  %54 = lshr <8 x i16> %53, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %55 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %54, <8 x i16> zeroinitializer) #5
  %56 = add <8 x i16> %52, %44
  %57 = lshr <8 x i16> %56, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %58 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %57, <8 x i16> zeroinitializer) #5
  %59 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %55, <8 x i16> undef) #5
  %60 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %58, <8 x i16> %58) #5
  %61 = shufflevector <16 x i8> %59, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %62 = shufflevector <16 x i8> %61, <16 x i8> %60, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %63 = bitcast i8* %27 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %63, align 1
  %64 = add nuw nsw i64 %26, 12
  %65 = icmp slt i64 %64, %24
  br i1 %65, label %25, label %189

66:                                               ; preds = %16, %66
  %67 = phi i64 [ 0, %16 ], [ %105, %66 ]
  %68 = getelementptr inbounds i8, i8* %17, i64 %67
  %69 = getelementptr inbounds [133 x i8], [133 x i8]* %4, i64 0, i64 %67
  %70 = bitcast i8* %69 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 4
  %72 = shufflevector <16 x i8> %71, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %73 = zext <8 x i8> %72 to <8 x i16>
  %74 = bitcast <8 x i16> %73 to <16 x i8>
  %75 = shufflevector <16 x i8> %74, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %76 = shufflevector <16 x i8> %71, <16 x i8> undef, <8 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13>
  %77 = zext <8 x i8> %76 to <8 x i16>
  %78 = bitcast <8 x i16> %77 to <16 x i8>
  %79 = shufflevector <16 x i8> %78, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %80 = mul nuw nsw <8 x i16> %73, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %81 = mul nuw nsw <8 x i16> %77, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %82 = bitcast <16 x i8> %75 to <8 x i16>
  %83 = mul <8 x i16> %82, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %84 = bitcast <16 x i8> %79 to <8 x i16>
  %85 = mul <8 x i16> %84, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %86 = bitcast <8 x i16> %80 to <16 x i8>
  %87 = shufflevector <16 x i8> %86, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %88 = bitcast <16 x i8> %87 to <8 x i16>
  %89 = add <8 x i16> %80, %88
  %90 = add <8 x i16> %89, %83
  %91 = lshr <8 x i16> %90, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %92 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %91, <8 x i16> zeroinitializer) #5
  %93 = bitcast <8 x i16> %81 to <16 x i8>
  %94 = shufflevector <16 x i8> %93, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %95 = bitcast <16 x i8> %94 to <8 x i16>
  %96 = add <8 x i16> %81, %95
  %97 = add <8 x i16> %96, %85
  %98 = lshr <8 x i16> %97, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %99 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %98, <8 x i16> zeroinitializer) #5
  %100 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %92, <8 x i16> undef) #5
  %101 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %99, <8 x i16> %99) #5
  %102 = shufflevector <16 x i8> %100, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>
  %103 = shufflevector <16 x i8> %102, <16 x i8> %101, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %104 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %104, align 1
  %105 = add nuw nsw i64 %67, 12
  %106 = icmp slt i64 %105, %18
  br i1 %106, label %66, label %189

107:                                              ; preds = %12
  %108 = load i8, i8* %5, align 16
  %109 = zext i8 %108 to i32
  %110 = mul nuw nsw i32 %109, 6
  %111 = getelementptr inbounds [133 x i8], [133 x i8]* %4, i64 0, i64 1
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = getelementptr inbounds [133 x i8], [133 x i8]* %4, i64 0, i64 2
  %115 = load i8, i8* %114, align 2
  %116 = zext i8 %115 to i32
  %117 = getelementptr inbounds [133 x i8], [133 x i8]* %4, i64 0, i64 3
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = shl nuw nsw i32 %119, 1
  %121 = add nuw nsw i32 %116, %113
  %122 = shl nuw nsw i32 %121, 2
  %123 = add nuw nsw i32 %110, 8
  %124 = add nuw nsw i32 %123, %120
  %125 = add nuw nsw i32 %124, %122
  %126 = lshr i32 %125, 4
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %127, i8* %128, align 1
  %129 = add nsw i32 %1, -10
  %130 = icmp sgt i32 %129, 0
  br i1 %130, label %131, label %196

131:                                              ; preds = %107
  %132 = getelementptr inbounds i8, i8* %0, i64 2
  %133 = sext i32 %129 to i64
  br label %134

134:                                              ; preds = %131, %134
  %135 = phi i64 [ 0, %131 ], [ %187, %134 ]
  %136 = getelementptr inbounds i8, i8* %132, i64 %135
  %137 = getelementptr inbounds [133 x i8], [133 x i8]* %4, i64 0, i64 %135
  %138 = bitcast i8* %137 to <16 x i8>*
  %139 = load <16 x i8>, <16 x i8>* %138, align 8
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %141 = zext <8 x i8> %140 to <8 x i16>
  %142 = shl nuw nsw <8 x i16> %141, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %143 = shl nuw nsw <8 x i16> %141, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %144 = bitcast <8 x i16> %143 to <16 x i8>
  %145 = shufflevector <16 x i8> %144, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %146 = bitcast <8 x i16> %142 to <16 x i8>
  %147 = shufflevector <16 x i8> %146, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %148 = bitcast <16 x i8> %147 to <8 x i16>
  %149 = add <8 x i16> %142, %148
  %150 = bitcast <16 x i8> %145 to <8 x i16>
  %151 = add <8 x i16> %149, %150
  %152 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %153 = bitcast <16 x i8> %152 to <8 x i16>
  %154 = add <8 x i16> %151, %153
  %155 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %156 = bitcast <16 x i8> %155 to <8 x i16>
  %157 = add <8 x i16> %154, %156
  %158 = shufflevector <16 x i8> %139, <16 x i8> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %159 = zext <8 x i8> %158 to <8 x i16>
  %160 = shl nuw nsw <8 x i16> %159, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %161 = shl nuw nsw <8 x i16> %159, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %162 = bitcast <8 x i16> %161 to <16 x i8>
  %163 = shufflevector <16 x i8> %162, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %164 = bitcast <8 x i16> %160 to <16 x i8>
  %165 = shufflevector <16 x i8> %164, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %166 = bitcast <16 x i8> %165 to <8 x i16>
  %167 = add <8 x i16> %160, %166
  %168 = bitcast <16 x i8> %163 to <8 x i16>
  %169 = add <8 x i16> %167, %168
  %170 = shufflevector <16 x i8> %163, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %171 = bitcast <16 x i8> %170 to <8 x i16>
  %172 = add <8 x i16> %169, %171
  %173 = shufflevector <16 x i8> %163, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %174 = bitcast <16 x i8> %173 to <8 x i16>
  %175 = add <8 x i16> %172, %174
  %176 = bitcast <8 x i16> %175 to <16 x i8>
  %177 = bitcast <8 x i16> %157 to <16 x i8>
  %178 = shufflevector <16 x i8> %177, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %179 = shufflevector <16 x i8> %178, <16 x i8> %176, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %180 = bitcast <16 x i8> %179 to <8 x i16>
  %181 = lshr <8 x i16> %180, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %182 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %181, <8 x i16> zeroinitializer) #5
  %183 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %182, <8 x i16> undef) #5
  %184 = bitcast <16 x i8> %183 to <2 x i64>
  %185 = extractelement <2 x i64> %184, i32 0
  %186 = bitcast i8* %136 to i64*
  store i64 %185, i64* %186, align 1
  %187 = add nuw nsw i64 %135, 8
  %188 = icmp slt i64 %187, %133
  br i1 %188, label %134, label %189

189:                                              ; preds = %66, %25, %134
  %190 = phi i64 [ %187, %134 ], [ %64, %25 ], [ %105, %66 ]
  %191 = trunc i64 %190 to i32
  %192 = add nsw i32 %1, -2
  %193 = icmp eq i32 %191, 0
  %194 = icmp slt i32 %192, %191
  %195 = select i1 %194, i32 %192, i32 %191
  br i1 %193, label %196, label %197

196:                                              ; preds = %13, %19, %107, %189
  br label %197

197:                                              ; preds = %189, %196
  %198 = phi i32 [ 1, %196 ], [ %195, %189 ]
  %199 = icmp slt i32 %198, %1
  br i1 %199, label %200, label %278

200:                                              ; preds = %197
  %201 = add nsw i32 %2, -1
  %202 = add nsw i32 %1, -1
  %203 = sext i32 %201 to i64
  %204 = sext i32 %198 to i64
  %205 = sext i32 %202 to i64
  %206 = getelementptr inbounds [3 x [5 x i32]], [3 x [5 x i32]]* @_ZN7libgav13dsp12_GLOBAL__N_18kKernelsE, i64 0, i64 %203, i64 0
  %207 = load i32, i32* %206, align 4
  %208 = getelementptr inbounds [3 x [5 x i32]], [3 x [5 x i32]]* @_ZN7libgav13dsp12_GLOBAL__N_18kKernelsE, i64 0, i64 %203, i64 1
  %209 = load i32, i32* %208, align 4
  %210 = getelementptr inbounds [3 x [5 x i32]], [3 x [5 x i32]]* @_ZN7libgav13dsp12_GLOBAL__N_18kKernelsE, i64 0, i64 %203, i64 2
  %211 = load i32, i32* %210, align 4
  %212 = getelementptr inbounds [3 x [5 x i32]], [3 x [5 x i32]]* @_ZN7libgav13dsp12_GLOBAL__N_18kKernelsE, i64 0, i64 %203, i64 3
  %213 = load i32, i32* %212, align 4
  %214 = getelementptr inbounds [3 x [5 x i32]], [3 x [5 x i32]]* @_ZN7libgav13dsp12_GLOBAL__N_18kKernelsE, i64 0, i64 %203, i64 4
  %215 = load i32, i32* %214, align 4
  br label %216

216:                                              ; preds = %216, %200
  %217 = phi i64 [ %204, %200 ], [ %276, %216 ]
  %218 = trunc i64 %217 to i32
  %219 = add i32 %218, -2
  %220 = icmp slt i32 %219, 0
  %221 = icmp sgt i32 %219, %202
  %222 = select i1 %221, i32 %202, i32 %219
  %223 = select i1 %220, i32 0, i32 %222
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds [133 x i8], [133 x i8]* %4, i64 0, i64 %224
  %226 = load i8, i8* %225, align 1
  %227 = zext i8 %226 to i32
  %228 = mul nsw i32 %207, %227
  %229 = add i32 %218, -1
  %230 = icmp slt i32 %229, 0
  %231 = icmp sgt i32 %229, %202
  %232 = select i1 %231, i32 %202, i32 %229
  %233 = select i1 %230, i32 0, i32 %232
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds [133 x i8], [133 x i8]* %4, i64 0, i64 %234
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i32
  %238 = mul nsw i32 %209, %237
  %239 = add nsw i32 %238, %228
  %240 = icmp slt i64 %217, 0
  %241 = icmp sgt i64 %217, %205
  %242 = select i1 %241, i32 %202, i32 %218
  %243 = sext i32 %242 to i64
  %244 = select i1 %240, i64 0, i64 %243
  %245 = getelementptr inbounds [133 x i8], [133 x i8]* %4, i64 0, i64 %244
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i32
  %248 = mul nsw i32 %211, %247
  %249 = add nsw i32 %248, %239
  %250 = add i32 %218, 1
  %251 = icmp slt i32 %250, 0
  %252 = icmp sgt i32 %250, %202
  %253 = select i1 %252, i32 %202, i32 %250
  %254 = select i1 %251, i32 0, i32 %253
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds [133 x i8], [133 x i8]* %4, i64 0, i64 %255
  %257 = load i8, i8* %256, align 1
  %258 = zext i8 %257 to i32
  %259 = mul nsw i32 %213, %258
  %260 = add nsw i32 %259, %249
  %261 = add i32 %218, 2
  %262 = icmp slt i32 %261, 0
  %263 = icmp sgt i32 %261, %202
  %264 = select i1 %263, i32 %202, i32 %261
  %265 = select i1 %262, i32 0, i32 %264
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds [133 x i8], [133 x i8]* %4, i64 0, i64 %266
  %268 = load i8, i8* %267, align 1
  %269 = zext i8 %268 to i32
  %270 = mul nsw i32 %215, %269
  %271 = add nsw i32 %270, %260
  %272 = add nsw i32 %271, 8
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = getelementptr inbounds i8, i8* %0, i64 %217
  store i8 %274, i8* %275, align 1
  %276 = add nsw i64 %217, 1
  %277 = icmp eq i64 %276, %6
  br i1 %277, label %278, label %216

278:                                              ; preds = %216, %197, %3
  call void @llvm.lifetime.end.p0i8(i64 133, i8* nonnull %5) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_125IntraEdgeUpsampler_SSE4_1EPvi(i8* nocapture, i32) #3 {
  %3 = alloca [24 x i8], align 16
  %4 = getelementptr inbounds [24 x i8], [24 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #5
  %5 = getelementptr inbounds [24 x i8], [24 x i8]* %3, i64 0, i64 1
  %6 = getelementptr inbounds [24 x i8], [24 x i8]* %3, i64 0, i64 2
  %7 = getelementptr inbounds i8, i8* %0, i64 -1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 24, i1 false)
  %8 = load i8, i8* %7, align 1
  store i8 %8, i8* %5, align 1
  store i8 %8, i8* %4, align 16
  %9 = sext i32 %1 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %6, i8* align 1 %0, i64 %9, i1 false)
  %10 = add nsw i32 %1, -1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = add nsw i32 %1, 2
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [24 x i8], [24 x i8]* %3, i64 0, i64 %15
  store i8 %13, i8* %16, align 1
  %17 = load i8, i8* %4, align 16
  %18 = getelementptr inbounds i8, i8* %0, i64 -2
  store i8 %17, i8* %18, align 1
  %19 = bitcast [24 x i8]* %3 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 16
  %21 = shufflevector <16 x i8> %20, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = zext <8 x i8> %21 to <8 x i16>
  %23 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %24 = bitcast <16 x i8> %23 to <8 x i16>
  %25 = mul <8 x i16> %24, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %26 = mul nuw nsw <8 x i16> %22, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %27 = bitcast <8 x i16> %25 to <16 x i8>
  %28 = bitcast <8 x i16> %26 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> %27, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %30 = bitcast <16 x i8> %29 to <8 x i16>
  %31 = shufflevector <16 x i8> %28, <16 x i8> %27, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %32 = bitcast <16 x i8> %31 to <8 x i16>
  %33 = bitcast <8 x i16> %22 to <16 x i8>
  %34 = shufflevector <16 x i8> %33, <16 x i8> %23, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %35 = bitcast <16 x i8> %34 to <8 x i16>
  %36 = sub nsw <8 x i16> <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>, %22
  %37 = sub <8 x i16> %36, %35
  %38 = add <8 x i16> %37, %30
  %39 = add <8 x i16> %38, %32
  %40 = ashr <8 x i16> %39, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %41 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %40, <8 x i16> undef) #5
  %42 = shufflevector <16 x i8> %20, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %43 = shufflevector <16 x i8> %41, <16 x i8> %42, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %44 = bitcast i8* %7 to <16 x i8>*
  store <16 x i8> %43, <16 x i8>* %44, align 1
  %45 = icmp sgt i32 %1, 8
  br i1 %45, label %46, label %77

46:                                               ; preds = %2
  %47 = getelementptr inbounds [24 x i8], [24 x i8]* %3, i64 0, i64 16
  %48 = getelementptr inbounds [24 x i8], [24 x i8]* %3, i64 0, i64 10
  %49 = bitcast i8* %47 to i64*
  %50 = load i64, i64* %49, align 16
  %51 = insertelement <2 x i64> undef, i64 %50, i32 0
  %52 = bitcast <2 x i64> %51 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %54 = zext <8 x i8> %53 to <8 x i16>
  %55 = mul nuw nsw <8 x i16> %54, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %56 = bitcast <8 x i16> %55 to <16 x i8>
  %57 = shufflevector <16 x i8> %27, <16 x i8> %56, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %58 = bitcast <16 x i8> %57 to <8 x i16>
  %59 = shufflevector <16 x i8> %27, <16 x i8> %56, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %60 = bitcast <16 x i8> %59 to <8 x i16>
  %61 = bitcast <8 x i16> %54 to <16 x i8>
  %62 = shufflevector <16 x i8> %23, <16 x i8> %61, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %63 = bitcast <16 x i8> %62 to <8 x i16>
  %64 = sub <8 x i16> <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>, %24
  %65 = sub <8 x i16> %64, %63
  %66 = add <8 x i16> %65, %58
  %67 = add <8 x i16> %66, %60
  %68 = ashr <8 x i16> %67, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %69 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %68, <8 x i16> undef) #5
  %70 = bitcast i8* %48 to i64*
  %71 = load i64, i64* %70, align 2
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %69, <16 x i8> %73, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = getelementptr inbounds i8, i8* %0, i64 15
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %74, <16 x i8>* %76, align 1
  br label %77

77:                                               ; preds = %46, %2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
