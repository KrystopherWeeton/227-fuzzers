; ModuleID = '../../third_party/blink/renderer/platform/graphics/paint_record_pattern.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/paint_record_pattern.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::PaintRecordPattern" = type { %"class.blink::Pattern", %class.sk_sp.8, %"class.blink::FloatRect" }
%"class.blink::Pattern" = type { i32 (...)**, %"class.WTF::RefCounted", i32, %class.sk_sp }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%class.sk_sp = type { %"class.cc::PaintShader"* }
%"class.cc::PaintShader" = type <{ %class.SkRefCnt.base, i8, [3 x i8], i32, float, float, i32, i32, i32, i8, [3 x i8], %"class.absl::optional", %struct.SkPoint, %struct.SkRect, %struct.SkPoint, %struct.SkPoint, float, float, %"class.cc::PaintImage", %class.sk_sp.8, i32, %"class.absl::optional.16", %"class.std::__1::vector.21", %"class.std::__1::vector.28", %class.sk_sp.35, %class.sk_sp.1, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.cc::PaintImage" = type { %class.sk_sp.1, %class.sk_sp.8, %"class.gfx::Rect", i32, %class.sk_sp.10, %class.sk_sp.14, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.1, %class.scoped_refptr.15 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%class.sk_sp.10 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type { %class.SkRefCnt.base, %struct.SkImageInfo, i32, %"class.std::__1::vector" }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.2, i32, i32 }
%class.sk_sp.2 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%struct.SkISize = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.cc::FrameMetadata"*, %"struct.cc::FrameMetadata"*, %"class.std::__1::__compressed_pair.11" }
%"struct.cc::FrameMetadata" = type { i8, %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.cc::FrameMetadata"* }
%class.sk_sp.14 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type { %class.SkRefCnt.base, [4 x i8] }
%class.scoped_refptr.15 = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.absl::optional.16" = type { %"class.absl::optional_internal::optional_data.17" }
%"class.absl::optional_internal::optional_data.17" = type { %"class.absl::optional_internal::optional_data_base.18" }
%"class.absl::optional_internal::optional_data_base.18" = type { %"class.absl::optional_internal::optional_data_dtor_base.19" }
%"class.absl::optional_internal::optional_data_dtor_base.19" = type { i8, %union.anon.20 }
%union.anon.20 = type { %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { i32*, i32*, %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i32* }
%"class.std::__1::vector.28" = type { %"class.std::__1::__vector_base.29" }
%"class.std::__1::__vector_base.29" = type { float*, float*, %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { float* }
%class.sk_sp.35 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.36", [7 x i8] }>
%"struct.std::__1::atomic.36" = type { %"struct.std::__1::__atomic_base.37" }
%"struct.std::__1::__atomic_base.37" = type { %"struct.std::__1::__cxx_atomic_impl.38" }
%"struct.std::__1::__cxx_atomic_impl.38" = type { %"struct.std::__1::__cxx_atomic_base_impl.39" }
%"struct.std::__1::__cxx_atomic_base_impl.39" = type { i8 }
%class.sk_sp.1 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.sk_sp.8 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

$_ZNK5blink7Pattern15IsTextureBackedEv = comdat any

@_ZTVN5blink18PaintRecordPatternE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::PaintRecordPattern"*)* @_ZN5blink18PaintRecordPatternD2Ev to i8*), i8* bitcast (void (%"class.blink::PaintRecordPattern"*)* @_ZN5blink18PaintRecordPatternD0Ev to i8*), i8* bitcast (i1 (%"class.blink::Pattern"*)* @_ZNK5blink7Pattern15IsTextureBackedEv to i8*), i8* bitcast (void (%class.sk_sp*, %"class.blink::PaintRecordPattern"*, %class.SkMatrix*)* @_ZNK5blink18PaintRecordPattern12CreateShaderERK8SkMatrix to i8*)] }, align 8

@_ZN5blink18PaintRecordPatternC1E5sk_spIN2cc13PaintOpBufferEERKNS_9FloatRectENS_7Pattern10RepeatModeE = hidden unnamed_addr alias void (%"class.blink::PaintRecordPattern"*, %class.sk_sp.8*, %"class.blink::FloatRect"*, i32), void (%"class.blink::PaintRecordPattern"*, %class.sk_sp.8*, %"class.blink::FloatRect"*, i32)* @_ZN5blink18PaintRecordPatternC2E5sk_spIN2cc13PaintOpBufferEERKNS_9FloatRectENS_7Pattern10RepeatModeE
@_ZN5blink18PaintRecordPatternD1Ev = hidden unnamed_addr alias void (%"class.blink::PaintRecordPattern"*), void (%"class.blink::PaintRecordPattern"*)* @_ZN5blink18PaintRecordPatternD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::PaintRecordPattern"* @_ZN5blink18PaintRecordPattern6CreateE5sk_spIN2cc13PaintOpBufferEERKNS_9FloatRectENS_7Pattern10RepeatModeE(%class.sk_sp.8* nocapture, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16), i32) local_unnamed_addr #0 align 2 {
  %4 = tail call noalias i8* @malloc(i64 48) #5
  %5 = bitcast i8* %4 to %"class.blink::PaintRecordPattern"*
  %6 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %0, i64 0, i32 0
  %7 = bitcast %class.sk_sp.8* %0 to i64*
  %8 = load i64, i64* %7, align 8
  store %"class.cc::PaintOpBuffer"* null, %"class.cc::PaintOpBuffer"** %6, align 8
  %9 = bitcast i8* %4 to %"class.blink::Pattern"*
  tail call void @_ZN5blink7PatternC2ENS0_10RepeatModeE(%"class.blink::Pattern"* %9, i32 %2) #5
  %10 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink18PaintRecordPatternE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds i8, i8* %4, i64 24
  %12 = bitcast i8* %11 to i64*
  store i64 %8, i64* %12, align 8
  %13 = getelementptr inbounds i8, i8* %4, i64 32
  %14 = bitcast %"class.blink::FloatRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 4 %14, i64 16, i1 false) #5
  ret %"class.blink::PaintRecordPattern"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18PaintRecordPatternC2E5sk_spIN2cc13PaintOpBufferEERKNS_9FloatRectENS_7Pattern10RepeatModeE(%"class.blink::PaintRecordPattern"*, %class.sk_sp.8* nocapture, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16), i32) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::PaintRecordPattern", %"class.blink::PaintRecordPattern"* %0, i64 0, i32 0
  tail call void @_ZN5blink7PatternC2ENS0_10RepeatModeE(%"class.blink::Pattern"* %5, i32 %3) #5
  %6 = getelementptr inbounds %"class.blink::PaintRecordPattern", %"class.blink::PaintRecordPattern"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink18PaintRecordPatternE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.blink::PaintRecordPattern", %"class.blink::PaintRecordPattern"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %1, i64 0, i32 0
  %9 = bitcast %class.sk_sp.8* %1 to i64*
  %10 = load i64, i64* %9, align 8
  store %"class.cc::PaintOpBuffer"* null, %"class.cc::PaintOpBuffer"** %8, align 8
  %11 = bitcast %class.sk_sp.8* %7 to i64*
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"class.blink::PaintRecordPattern", %"class.blink::PaintRecordPattern"* %0, i64 0, i32 2
  %13 = bitcast %"class.blink::FloatRect"* %12 to i8*
  %14 = bitcast %"class.blink::FloatRect"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 4 %14, i64 16, i1 false)
  ret void
}

declare void @_ZN5blink7PatternC2ENS0_10RepeatModeE(%"class.blink::Pattern"*, i32) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18PaintRecordPatternD2Ev(%"class.blink::PaintRecordPattern"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::PaintRecordPattern", %"class.blink::PaintRecordPattern"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink18PaintRecordPatternE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::PaintRecordPattern", %"class.blink::PaintRecordPattern"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.cc::PaintOpBuffer"*, %"class.cc::PaintOpBuffer"** %3, align 8
  %5 = icmp eq %"class.cc::PaintOpBuffer"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.cc::PaintOpBuffer", %"class.cc::PaintOpBuffer"* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %"class.cc::PaintOpBuffer"* %4 to %class.SkRefCntBase*
  %12 = bitcast %"class.cc::PaintOpBuffer"* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #5
  br label %16

16:                                               ; preds = %1, %6, %10
  %17 = getelementptr inbounds %"class.blink::PaintRecordPattern", %"class.blink::PaintRecordPattern"* %0, i64 0, i32 0
  tail call void @_ZN5blink7PatternD2Ev(%"class.blink::Pattern"* %17) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5blink7PatternD2Ev(%"class.blink::Pattern"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18PaintRecordPatternD0Ev(%"class.blink::PaintRecordPattern"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::PaintRecordPattern", %"class.blink::PaintRecordPattern"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink18PaintRecordPatternE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::PaintRecordPattern", %"class.blink::PaintRecordPattern"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.cc::PaintOpBuffer"*, %"class.cc::PaintOpBuffer"** %3, align 8
  %5 = icmp eq %"class.cc::PaintOpBuffer"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.cc::PaintOpBuffer", %"class.cc::PaintOpBuffer"* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %"class.cc::PaintOpBuffer"* %4 to %class.SkRefCntBase*
  %12 = bitcast %"class.cc::PaintOpBuffer"* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #5
  br label %16

16:                                               ; preds = %1, %6, %10
  %17 = getelementptr inbounds %"class.blink::PaintRecordPattern", %"class.blink::PaintRecordPattern"* %0, i64 0, i32 0
  tail call void @_ZN5blink7PatternD2Ev(%"class.blink::Pattern"* %17) #5
  %18 = bitcast %"class.blink::PaintRecordPattern"* %0 to i8*
  tail call void @free(i8* %18) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink18PaintRecordPattern12CreateShaderERK8SkMatrix(%class.sk_sp* noalias sret, %"class.blink::PaintRecordPattern"* nocapture readonly, %class.SkMatrix* dereferenceable(40)) unnamed_addr #0 align 2 {
  %4 = alloca %class.sk_sp.8, align 8
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = bitcast { <2 x float>, <2 x float> }* %5 to %struct.SkRect*
  %7 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %4, i64 0, i32 0
  %8 = getelementptr inbounds %"class.blink::PaintRecordPattern", %"class.blink::PaintRecordPattern"* %1, i64 0, i32 1, i32 0
  %9 = load %"class.cc::PaintOpBuffer"*, %"class.cc::PaintOpBuffer"** %8, align 8
  %10 = icmp eq %"class.cc::PaintOpBuffer"* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.cc::PaintOpBuffer", %"class.cc::PaintOpBuffer"* %9, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = atomicrmw add i32* %12, i32 1 monotonic
  br label %14

14:                                               ; preds = %3, %11
  store %"class.cc::PaintOpBuffer"* %9, %"class.cc::PaintOpBuffer"** %7, align 8
  %15 = bitcast { <2 x float>, <2 x float> }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #5
  %16 = getelementptr inbounds %"class.blink::PaintRecordPattern", %"class.blink::PaintRecordPattern"* %1, i64 0, i32 2, i32 0, i32 0
  %17 = bitcast float* %16 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 4
  %19 = getelementptr inbounds %"class.blink::PaintRecordPattern", %"class.blink::PaintRecordPattern"* %1, i64 0, i32 2, i32 1, i32 0
  %20 = bitcast float* %19 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 4
  %22 = fadd <2 x float> %18, %21
  %23 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0
  store <2 x float> %18, <2 x float>* %23, align 8
  %24 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1
  store <2 x float> %22, <2 x float>* %24, align 8
  call void @_ZN2cc11PaintShader15MakePaintRecordE5sk_spINS_13PaintOpBufferEERK6SkRect10SkTileModeS7_PK8SkMatrixNS0_15ScalingBehaviorE(%class.sk_sp* sret %0, %class.sk_sp.8* nonnull %4, %struct.SkRect* nonnull dereferenceable(16) %6, i32 1, i32 1, %class.SkMatrix* %2, i8 zeroext 0) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #5
  %25 = load %"class.cc::PaintOpBuffer"*, %"class.cc::PaintOpBuffer"** %7, align 8
  %26 = icmp eq %"class.cc::PaintOpBuffer"* %25, null
  br i1 %26, label %37, label %27

27:                                               ; preds = %14
  %28 = getelementptr inbounds %"class.cc::PaintOpBuffer", %"class.cc::PaintOpBuffer"* %25, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = atomicrmw add i32* %28, i32 -1 acq_rel
  %30 = icmp eq i32 %29, 1
  br i1 %30, label %31, label %37

31:                                               ; preds = %27
  %32 = bitcast %"class.cc::PaintOpBuffer"* %25 to %class.SkRefCntBase*
  %33 = bitcast %"class.cc::PaintOpBuffer"* %25 to void (%class.SkRefCntBase*)***
  %34 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %33, align 8
  %35 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %34, i64 2
  %36 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %35, align 8
  call void %36(%class.SkRefCntBase* nonnull %32) #5
  br label %37

37:                                               ; preds = %14, %27, %31
  ret void
}

declare void @_ZN2cc11PaintShader15MakePaintRecordE5sk_spINS_13PaintOpBufferEERK6SkRect10SkTileModeS7_PK8SkMatrixNS0_15ScalingBehaviorE(%class.sk_sp* sret, %class.sk_sp.8*, %struct.SkRect* dereferenceable(16), i32, i32, %class.SkMatrix*, i8 zeroext) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Pattern15IsTextureBackedEv(%"class.blink::Pattern"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
