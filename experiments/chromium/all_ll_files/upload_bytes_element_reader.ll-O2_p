; ModuleID = '../../net/base/upload_bytes_element_reader.cc'
source_filename = "../../net/base/upload_bytes_element_reader.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::UploadBytesElementReader" = type { %"class.net::UploadElementReader", i8*, i64, i64 }
%"class.net::UploadElementReader" = type { i32 (...)** }
%"class.net::UploadOwnedBytesElementReader" = type { %"class.net::UploadBytesElementReader", %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.net::IOBuffer" = type { i32 (...)**, %"class.base::RefCountedThreadSafe.1", i8* }
%"class.base::RefCountedThreadSafe.1" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.net::UploadFileElementReader" = type opaque

@_ZTVN3net24UploadBytesElementReaderE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::UploadBytesElementReader"*)* @_ZN3net24UploadBytesElementReaderD2Ev to i8*), i8* bitcast (void (%"class.net::UploadBytesElementReader"*)* @_ZN3net24UploadBytesElementReaderD0Ev to i8*), i8* bitcast (%"class.net::UploadBytesElementReader"* (%"class.net::UploadBytesElementReader"*)* @_ZNK3net24UploadBytesElementReader13AsBytesReaderEv to i8*), i8* bitcast (%"class.net::UploadFileElementReader"* (%"class.net::UploadElementReader"*)* @_ZNK3net19UploadElementReader12AsFileReaderEv to i8*), i8* bitcast (i32 (%"class.net::UploadBytesElementReader"*, %"class.base::OnceCallback"*)* @_ZN3net24UploadBytesElementReader4InitEN4base12OnceCallbackIFviEEE to i8*), i8* bitcast (i64 (%"class.net::UploadBytesElementReader"*)* @_ZNK3net24UploadBytesElementReader16GetContentLengthEv to i8*), i8* bitcast (i64 (%"class.net::UploadBytesElementReader"*)* @_ZNK3net24UploadBytesElementReader14BytesRemainingEv to i8*), i8* bitcast (i1 (%"class.net::UploadBytesElementReader"*)* @_ZNK3net24UploadBytesElementReader10IsInMemoryEv to i8*), i8* bitcast (i32 (%"class.net::UploadBytesElementReader"*, %"class.net::IOBuffer"*, i32, %"class.base::OnceCallback"*)* @_ZN3net24UploadBytesElementReader4ReadEPNS_8IOBufferEiN4base12OnceCallbackIFviEEE to i8*)] }, align 8
@_ZTVN3net29UploadOwnedBytesElementReaderE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::UploadOwnedBytesElementReader"*)* @_ZN3net29UploadOwnedBytesElementReaderD2Ev to i8*), i8* bitcast (void (%"class.net::UploadOwnedBytesElementReader"*)* @_ZN3net29UploadOwnedBytesElementReaderD0Ev to i8*), i8* bitcast (%"class.net::UploadBytesElementReader"* (%"class.net::UploadBytesElementReader"*)* @_ZNK3net24UploadBytesElementReader13AsBytesReaderEv to i8*), i8* bitcast (%"class.net::UploadFileElementReader"* (%"class.net::UploadElementReader"*)* @_ZNK3net19UploadElementReader12AsFileReaderEv to i8*), i8* bitcast (i32 (%"class.net::UploadBytesElementReader"*, %"class.base::OnceCallback"*)* @_ZN3net24UploadBytesElementReader4InitEN4base12OnceCallbackIFviEEE to i8*), i8* bitcast (i64 (%"class.net::UploadBytesElementReader"*)* @_ZNK3net24UploadBytesElementReader16GetContentLengthEv to i8*), i8* bitcast (i64 (%"class.net::UploadBytesElementReader"*)* @_ZNK3net24UploadBytesElementReader14BytesRemainingEv to i8*), i8* bitcast (i1 (%"class.net::UploadBytesElementReader"*)* @_ZNK3net24UploadBytesElementReader10IsInMemoryEv to i8*), i8* bitcast (i32 (%"class.net::UploadBytesElementReader"*, %"class.net::IOBuffer"*, i32, %"class.base::OnceCallback"*)* @_ZN3net24UploadBytesElementReader4ReadEPNS_8IOBufferEiN4base12OnceCallbackIFviEEE to i8*)] }, align 8

@_ZN3net24UploadBytesElementReaderC1EPKcm = hidden unnamed_addr alias void (%"class.net::UploadBytesElementReader"*, i8*, i64), void (%"class.net::UploadBytesElementReader"*, i8*, i64)* @_ZN3net24UploadBytesElementReaderC2EPKcm
@_ZN3net24UploadBytesElementReaderD1Ev = hidden unnamed_addr alias void (%"class.net::UploadBytesElementReader"*), void (%"class.net::UploadBytesElementReader"*)* @_ZN3net24UploadBytesElementReaderD2Ev
@_ZN3net29UploadOwnedBytesElementReaderC1EPNSt3__16vectorIcNS1_9allocatorIcEEEE = hidden unnamed_addr alias void (%"class.net::UploadOwnedBytesElementReader"*, %"class.std::__1::vector"*), void (%"class.net::UploadOwnedBytesElementReader"*, %"class.std::__1::vector"*)* @_ZN3net29UploadOwnedBytesElementReaderC2EPNSt3__16vectorIcNS1_9allocatorIcEEEE
@_ZN3net29UploadOwnedBytesElementReaderD1Ev = hidden unnamed_addr alias void (%"class.net::UploadOwnedBytesElementReader"*), void (%"class.net::UploadOwnedBytesElementReader"*)* @_ZN3net29UploadOwnedBytesElementReaderD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net24UploadBytesElementReaderC2EPKcm(%"class.net::UploadBytesElementReader"* nocapture, i8*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.net::UploadBytesElementReader", %"class.net::UploadBytesElementReader"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3net24UploadBytesElementReaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.net::UploadBytesElementReader", %"class.net::UploadBytesElementReader"* %0, i64 0, i32 1
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %"class.net::UploadBytesElementReader", %"class.net::UploadBytesElementReader"* %0, i64 0, i32 2
  store i64 %2, i64* %6, align 8
  %7 = getelementptr inbounds %"class.net::UploadBytesElementReader", %"class.net::UploadBytesElementReader"* %0, i64 0, i32 3
  store i64 0, i64* %7, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3net24UploadBytesElementReaderD2Ev(%"class.net::UploadBytesElementReader"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net24UploadBytesElementReaderD0Ev(%"class.net::UploadBytesElementReader"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.net::UploadBytesElementReader"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.net::UploadBytesElementReader"* @_ZNK3net24UploadBytesElementReader13AsBytesReaderEv(%"class.net::UploadBytesElementReader"* readnone returned) unnamed_addr #1 align 2 {
  ret %"class.net::UploadBytesElementReader"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @_ZN3net24UploadBytesElementReader4InitEN4base12OnceCallbackIFviEEE(%"class.net::UploadBytesElementReader"* nocapture, %"class.base::OnceCallback"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::UploadBytesElementReader", %"class.net::UploadBytesElementReader"* %0, i64 0, i32 3
  store i64 0, i64* %3, align 8
  ret i32 0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK3net24UploadBytesElementReader16GetContentLengthEv(%"class.net::UploadBytesElementReader"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.net::UploadBytesElementReader", %"class.net::UploadBytesElementReader"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK3net24UploadBytesElementReader14BytesRemainingEv(%"class.net::UploadBytesElementReader"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.net::UploadBytesElementReader", %"class.net::UploadBytesElementReader"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.net::UploadBytesElementReader", %"class.net::UploadBytesElementReader"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = sub i64 %3, %5
  ret i64 %6
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK3net24UploadBytesElementReader10IsInMemoryEv(%"class.net::UploadBytesElementReader"* nocapture readnone) unnamed_addr #1 align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3net24UploadBytesElementReader4ReadEPNS_8IOBufferEiN4base12OnceCallbackIFviEEE(%"class.net::UploadBytesElementReader"*, %"class.net::IOBuffer"* nocapture readonly, i32, %"class.base::OnceCallback"* nocapture readnone) unnamed_addr #2 align 2 {
  %5 = bitcast %"class.net::UploadBytesElementReader"* %0 to i64 (%"class.net::UploadBytesElementReader"*)***
  %6 = load i64 (%"class.net::UploadBytesElementReader"*)**, i64 (%"class.net::UploadBytesElementReader"*)*** %5, align 8
  %7 = getelementptr inbounds i64 (%"class.net::UploadBytesElementReader"*)*, i64 (%"class.net::UploadBytesElementReader"*)** %6, i64 6
  %8 = load i64 (%"class.net::UploadBytesElementReader"*)*, i64 (%"class.net::UploadBytesElementReader"*)** %7, align 8
  %9 = tail call i64 %8(%"class.net::UploadBytesElementReader"* %0) #10
  %10 = sext i32 %2 to i64
  %11 = icmp ugt i64 %9, %10
  %12 = select i1 %11, i64 %10, i64 %9
  %13 = trunc i64 %12 to i32
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %4
  %16 = shl i64 %12, 32
  %17 = ashr exact i64 %16, 32
  br label %28

18:                                               ; preds = %4
  %19 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %1, i64 0, i32 2
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %"class.net::UploadBytesElementReader", %"class.net::UploadBytesElementReader"* %0, i64 0, i32 1
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %"class.net::UploadBytesElementReader", %"class.net::UploadBytesElementReader"* %0, i64 0, i32 3
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %22, i64 %24
  %26 = shl i64 %12, 32
  %27 = ashr exact i64 %26, 32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %25, i64 %27, i1 false)
  br label %28

28:                                               ; preds = %15, %18
  %29 = phi i64 [ %17, %15 ], [ %27, %18 ]
  %30 = getelementptr inbounds %"class.net::UploadBytesElementReader", %"class.net::UploadBytesElementReader"* %0, i64 0, i32 3
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %31, %29
  store i64 %32, i64* %30, align 8
  ret i32 %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net29UploadOwnedBytesElementReaderC2EPNSt3__16vectorIcNS1_9allocatorIcEEEE(%"class.net::UploadOwnedBytesElementReader"* nocapture, %"class.std::__1::vector"* nocapture) unnamed_addr #2 align 2 {
  %3 = bitcast %"class.std::__1::vector"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %7, %4
  %9 = getelementptr inbounds %"class.net::UploadOwnedBytesElementReader", %"class.net::UploadOwnedBytesElementReader"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.net::UploadOwnedBytesElementReader", %"class.net::UploadOwnedBytesElementReader"* %0, i64 0, i32 0, i32 1
  %11 = bitcast i8** %10 to i64*
  store i64 %4, i64* %11, align 8
  %12 = getelementptr inbounds %"class.net::UploadOwnedBytesElementReader", %"class.net::UploadOwnedBytesElementReader"* %0, i64 0, i32 0, i32 2
  store i64 %8, i64* %12, align 8
  %13 = getelementptr inbounds %"class.net::UploadOwnedBytesElementReader", %"class.net::UploadOwnedBytesElementReader"* %0, i64 0, i32 0, i32 3
  store i64 0, i64* %13, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3net29UploadOwnedBytesElementReaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %14 = getelementptr inbounds %"class.net::UploadOwnedBytesElementReader", %"class.net::UploadOwnedBytesElementReader"* %0, i64 0, i32 1
  %15 = bitcast %"class.std::__1::vector"* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false) #10
  %16 = bitcast %"class.std::__1::vector"* %14 to i64*
  %17 = load i64, i64* %3, align 8
  store i64 %17, i64* %16, align 8
  store i64 0, i64* %3, align 8
  %18 = getelementptr inbounds %"class.net::UploadOwnedBytesElementReader", %"class.net::UploadOwnedBytesElementReader"* %0, i64 0, i32 1, i32 0, i32 1
  %19 = bitcast i8** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = load i64, i64* %6, align 8
  store i64 %21, i64* %19, align 8
  store i64 %20, i64* %6, align 8
  %22 = getelementptr inbounds %"class.net::UploadOwnedBytesElementReader", %"class.net::UploadOwnedBytesElementReader"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %24 = bitcast i8** %22 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast i8** %23 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %24, align 8
  store i64 %25, i64* %26, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net29UploadOwnedBytesElementReaderD2Ev(%"class.net::UploadOwnedBytesElementReader"* nocapture) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.net::UploadOwnedBytesElementReader", %"class.net::UploadOwnedBytesElementReader"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3net29UploadOwnedBytesElementReaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::UploadOwnedBytesElementReader", %"class.net::UploadOwnedBytesElementReader"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %"class.net::UploadOwnedBytesElementReader", %"class.net::UploadOwnedBytesElementReader"* %0, i64 0, i32 1, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  tail call void @_ZdlPv(i8* nonnull %4) #9
  br label %10

10:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net29UploadOwnedBytesElementReaderD0Ev(%"class.net::UploadOwnedBytesElementReader"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.net::UploadOwnedBytesElementReader", %"class.net::UploadOwnedBytesElementReader"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3net29UploadOwnedBytesElementReaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::UploadOwnedBytesElementReader", %"class.net::UploadOwnedBytesElementReader"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %"class.net::UploadOwnedBytesElementReader", %"class.net::UploadOwnedBytesElementReader"* %0, i64 0, i32 1, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  tail call void @_ZdlPv(i8* nonnull %4) #9
  br label %10

10:                                               ; preds = %1, %6
  %11 = bitcast %"class.net::UploadOwnedBytesElementReader"* %0 to i8*
  tail call void @_ZdlPv(i8* %11) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull %"class.net::UploadOwnedBytesElementReader"* @_ZN3net29UploadOwnedBytesElementReader16CreateWithStringERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %2 = alloca %"class.std::__1::vector", align 8
  %3 = bitcast %"class.std::__1::vector"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #10
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %16 = zext i8 %9 to i64
  %17 = select i1 %10, i8* %12, i8* %15
  %18 = select i1 %10, i64 %14, i64 %16
  %19 = getelementptr inbounds i8, i8* %17, i64 %18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 24, i1 false) #10
  %20 = icmp eq i64 %18, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %1
  %22 = bitcast i8** %5 to i64*
  %23 = bitcast i8** %6 to i64*
  br label %136

24:                                               ; preds = %1
  %25 = icmp slt i64 %18, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %24
  %27 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %27) #11
  unreachable

28:                                               ; preds = %24
  %29 = tail call i8* @_Znwm(i64 %18) #9
  store i8* %29, i8** %5, align 8
  store i8* %29, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 %18
  store i8* %30, i8** %6, align 8
  %31 = bitcast i8** %5 to i64*
  %32 = icmp ult i64 %18, 32
  br i1 %32, label %119, label %33

33:                                               ; preds = %28
  %34 = getelementptr i8, i8* %29, i64 %18
  %35 = icmp ult i8* %29, %19
  %36 = icmp ult i8* %17, %34
  %37 = and i1 %35, %36
  br i1 %37, label %119, label %38

38:                                               ; preds = %33
  %39 = and i64 %18, -32
  %40 = getelementptr i8, i8* %29, i64 %39
  %41 = getelementptr i8, i8* %17, i64 %39
  %42 = add i64 %39, -32
  %43 = lshr exact i64 %42, 5
  %44 = add nuw nsw i64 %43, 1
  %45 = and i64 %44, 3
  %46 = icmp ult i64 %42, 96
  br i1 %46, label %98, label %47

47:                                               ; preds = %38
  %48 = sub nsw i64 %44, %45
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ 0, %47 ], [ %95, %49 ]
  %51 = phi i64 [ %48, %47 ], [ %96, %49 ]
  %52 = getelementptr i8, i8* %29, i64 %50
  %53 = getelementptr i8, i8* %17, i64 %50
  %54 = bitcast i8* %53 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1, !alias.scope !2
  %56 = getelementptr i8, i8* %53, i64 16
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1, !alias.scope !2
  %59 = bitcast i8* %52 to <16 x i8>*
  store <16 x i8> %55, <16 x i8>* %59, align 1, !alias.scope !5, !noalias !2
  %60 = getelementptr i8, i8* %52, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %61, align 1, !alias.scope !5, !noalias !2
  %62 = or i64 %50, 32
  %63 = getelementptr i8, i8* %29, i64 %62
  %64 = getelementptr i8, i8* %17, i64 %62
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1, !alias.scope !2
  %67 = getelementptr i8, i8* %64, i64 16
  %68 = bitcast i8* %67 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1, !alias.scope !2
  %70 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %66, <16 x i8>* %70, align 1, !alias.scope !5, !noalias !2
  %71 = getelementptr i8, i8* %63, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %69, <16 x i8>* %72, align 1, !alias.scope !5, !noalias !2
  %73 = or i64 %50, 64
  %74 = getelementptr i8, i8* %29, i64 %73
  %75 = getelementptr i8, i8* %17, i64 %73
  %76 = bitcast i8* %75 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1, !alias.scope !2
  %78 = getelementptr i8, i8* %75, i64 16
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1, !alias.scope !2
  %81 = bitcast i8* %74 to <16 x i8>*
  store <16 x i8> %77, <16 x i8>* %81, align 1, !alias.scope !5, !noalias !2
  %82 = getelementptr i8, i8* %74, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  store <16 x i8> %80, <16 x i8>* %83, align 1, !alias.scope !5, !noalias !2
  %84 = or i64 %50, 96
  %85 = getelementptr i8, i8* %29, i64 %84
  %86 = getelementptr i8, i8* %17, i64 %84
  %87 = bitcast i8* %86 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1, !alias.scope !2
  %89 = getelementptr i8, i8* %86, i64 16
  %90 = bitcast i8* %89 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1, !alias.scope !2
  %92 = bitcast i8* %85 to <16 x i8>*
  store <16 x i8> %88, <16 x i8>* %92, align 1, !alias.scope !5, !noalias !2
  %93 = getelementptr i8, i8* %85, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  store <16 x i8> %91, <16 x i8>* %94, align 1, !alias.scope !5, !noalias !2
  %95 = add i64 %50, 128
  %96 = add i64 %51, -4
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %49, !llvm.loop !7

98:                                               ; preds = %49, %38
  %99 = phi i64 [ 0, %38 ], [ %95, %49 ]
  %100 = icmp eq i64 %45, 0
  br i1 %100, label %117, label %101

101:                                              ; preds = %98, %101
  %102 = phi i64 [ %114, %101 ], [ %99, %98 ]
  %103 = phi i64 [ %115, %101 ], [ %45, %98 ]
  %104 = getelementptr i8, i8* %29, i64 %102
  %105 = getelementptr i8, i8* %17, i64 %102
  %106 = bitcast i8* %105 to <16 x i8>*
  %107 = load <16 x i8>, <16 x i8>* %106, align 1, !alias.scope !2
  %108 = getelementptr i8, i8* %105, i64 16
  %109 = bitcast i8* %108 to <16 x i8>*
  %110 = load <16 x i8>, <16 x i8>* %109, align 1, !alias.scope !2
  %111 = bitcast i8* %104 to <16 x i8>*
  store <16 x i8> %107, <16 x i8>* %111, align 1, !alias.scope !5, !noalias !2
  %112 = getelementptr i8, i8* %104, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  store <16 x i8> %110, <16 x i8>* %113, align 1, !alias.scope !5, !noalias !2
  %114 = add i64 %102, 32
  %115 = add i64 %103, -1
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %101, !llvm.loop !9

117:                                              ; preds = %101, %98
  %118 = icmp eq i64 %18, %39
  br i1 %118, label %129, label %119

119:                                              ; preds = %117, %33, %28
  %120 = phi i8* [ %29, %33 ], [ %29, %28 ], [ %40, %117 ]
  %121 = phi i8* [ %17, %33 ], [ %17, %28 ], [ %41, %117 ]
  br label %122

122:                                              ; preds = %119, %122
  %123 = phi i8* [ %127, %122 ], [ %120, %119 ]
  %124 = phi i8* [ %126, %122 ], [ %121, %119 ]
  %125 = load i8, i8* %124, align 1
  store i8 %125, i8* %123, align 1
  %126 = getelementptr inbounds i8, i8* %124, i64 1
  %127 = getelementptr inbounds i8, i8* %123, i64 1
  %128 = icmp eq i8* %126, %19
  br i1 %128, label %129, label %122, !llvm.loop !11

129:                                              ; preds = %122, %117
  %130 = phi i8* [ %40, %117 ], [ %127, %122 ]
  %131 = bitcast %"class.std::__1::vector"* %2 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = bitcast i8** %6 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = ptrtoint i8* %130 to i64
  store i64 %135, i64* %31, align 8
  br label %136

136:                                              ; preds = %129, %21
  %137 = phi i64* [ %23, %21 ], [ %133, %129 ]
  %138 = phi i64* [ %22, %21 ], [ %31, %129 ]
  %139 = phi i64 [ 0, %21 ], [ %134, %129 ]
  %140 = phi i64 [ 0, %21 ], [ %135, %129 ]
  %141 = phi i64 [ 0, %21 ], [ %132, %129 ]
  %142 = tail call i8* @_Znwm(i64 56) #9
  %143 = bitcast i8* %142 to %"class.net::UploadOwnedBytesElementReader"*
  %144 = sub i64 %140, %141
  %145 = bitcast i8* %142 to i32 (...)***
  %146 = getelementptr inbounds i8, i8* %142, i64 8
  %147 = bitcast i8* %146 to i64*
  store i64 %141, i64* %147, align 8
  %148 = getelementptr inbounds i8, i8* %142, i64 16
  %149 = bitcast i8* %148 to i64*
  store i64 %144, i64* %149, align 8
  %150 = getelementptr inbounds i8, i8* %142, i64 24
  %151 = bitcast i8* %150 to i64*
  store i64 0, i64* %151, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3net29UploadOwnedBytesElementReaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %145, align 8
  %152 = getelementptr inbounds i8, i8* %142, i64 32
  %153 = bitcast i8* %152 to i64*
  store i64 %141, i64* %153, align 8
  %154 = getelementptr inbounds i8, i8* %142, i64 40
  %155 = bitcast i8* %154 to i64*
  store i64 %140, i64* %155, align 8
  store i64 0, i64* %138, align 8
  %156 = getelementptr inbounds i8, i8* %142, i64 48
  %157 = bitcast i8* %156 to i64*
  store i64 %139, i64* %157, align 8
  store i64 0, i64* %137, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #10
  ret %"class.net::UploadOwnedBytesElementReader"* %143
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare %"class.net::UploadFileElementReader"* @_ZNK3net19UploadElementReader12AsFileReaderEv(%"class.net::UploadElementReader"*) unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
