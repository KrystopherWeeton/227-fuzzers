; ModuleID = '../../third_party/blink/renderer/core/svg/svg_path_byte_stream_builder.cc'
source_filename = "../../third_party/blink/renderer/core/svg/svg_path_byte_stream_builder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::SVGPathByteStreamBuilder" = type { %"class.blink::SVGPathConsumer", %"class.blink::SVGPathByteStream"* }
%"class.blink::SVGPathConsumer" = type { i32 (...)** }
%"class.blink::SVGPathByteStream" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"struct.blink::PathSegmentData" = type <{ i32, %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint", i8, i8, [2 x i8] }>
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::CoalescingBuffer" = type { i32, [26 x i8], %"class.blink::SVGPathByteStream"* }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink24SVGPathByteStreamBuilderD0Ev = comdat any

$_ZN5blink15SVGPathConsumerD2Ev = comdat any

$_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

@_ZTVN5blink24SVGPathByteStreamBuilderE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::SVGPathConsumer"*)* @_ZN5blink15SVGPathConsumerD2Ev to i8*), i8* bitcast (void (%"class.blink::SVGPathByteStreamBuilder"*)* @_ZN5blink24SVGPathByteStreamBuilderD0Ev to i8*), i8* bitcast (void (%"class.blink::SVGPathByteStreamBuilder"*, %"struct.blink::PathSegmentData"*)* @_ZN5blink24SVGPathByteStreamBuilder11EmitSegmentERKNS_15PathSegmentDataE to i8*)] }, align 8
@.str = private unnamed_addr constant [18 x i8] c"new_size >= size_\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1

@_ZN5blink24SVGPathByteStreamBuilderC1ERNS_17SVGPathByteStreamE = hidden unnamed_addr alias void (%"class.blink::SVGPathByteStreamBuilder"*, %"class.blink::SVGPathByteStream"*), void (%"class.blink::SVGPathByteStreamBuilder"*, %"class.blink::SVGPathByteStream"*)* @_ZN5blink24SVGPathByteStreamBuilderC2ERNS_17SVGPathByteStreamE

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink24SVGPathByteStreamBuilderC2ERNS_17SVGPathByteStreamE(%"class.blink::SVGPathByteStreamBuilder"* nocapture, %"class.blink::SVGPathByteStream"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGPathByteStreamBuilder", %"class.blink::SVGPathByteStreamBuilder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink24SVGPathByteStreamBuilderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.blink::SVGPathByteStreamBuilder", %"class.blink::SVGPathByteStreamBuilder"* %0, i64 0, i32 1
  store %"class.blink::SVGPathByteStream"* %1, %"class.blink::SVGPathByteStream"** %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink24SVGPathByteStreamBuilder11EmitSegmentERKNS_15PathSegmentDataE(%"class.blink::SVGPathByteStreamBuilder"* nocapture readonly, %"struct.blink::PathSegmentData"* nocapture readonly dereferenceable(32)) unnamed_addr #1 align 2 {
  %3 = alloca %"class.blink::CoalescingBuffer", align 8
  %4 = bitcast %"class.blink::CoalescingBuffer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 32, i1 false)
  %5 = getelementptr inbounds %"class.blink::SVGPathByteStreamBuilder", %"class.blink::SVGPathByteStreamBuilder"* %0, i64 0, i32 1
  %6 = bitcast %"class.blink::SVGPathByteStream"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 0
  %9 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 2
  %10 = bitcast %"class.blink::SVGPathByteStream"** %9 to i64*
  store i64 %7, i64* %10, align 8
  %11 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = trunc i32 %12 to i16
  %14 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 0
  %15 = bitcast i8* %14 to i16*
  store i16 %13, i16* %15, align 4
  store i32 2, i32* %8, align 8
  %16 = inttoptr i64 %7 to %"class.blink::SVGPathByteStream"*
  switch i32 %12, label %118 [
    i32 3, label %17
    i32 2, label %17
    i32 5, label %17
    i32 4, label %17
    i32 19, label %17
    i32 18, label %17
    i32 13, label %28
    i32 12, label %28
    i32 15, label %34
    i32 14, label %34
    i32 10, label %84
    i32 7, label %40
    i32 6, label %40
    i32 17, label %56
    i32 16, label %56
    i32 9, label %77
    i32 8, label %77
    i32 11, label %84
  ]

17:                                               ; preds = %2, %2, %2, %2, %2, %2
  %18 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 1
  %19 = bitcast %"class.blink::FloatPoint"* %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 2
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 2
  %23 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 1, i32 1
  %24 = bitcast float* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 6
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 2
  br label %116

28:                                               ; preds = %2, %2
  %29 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 1, i32 0
  %30 = bitcast float* %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 2
  %33 = bitcast i8* %32 to i32*
  store i32 %31, i32* %33, align 2
  br label %116

34:                                               ; preds = %2, %2
  %35 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 1, i32 1
  %36 = bitcast float* %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 2
  %39 = bitcast i8* %38 to i32*
  store i32 %37, i32* %39, align 2
  br label %116

40:                                               ; preds = %2, %2
  %41 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 2
  %42 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 2
  %43 = bitcast %"class.blink::FloatPoint"* %41 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 4
  %45 = bitcast i8* %42 to <4 x i32>*
  store <4 x i32> %44, <4 x i32>* %45, align 2
  %46 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 1
  %47 = bitcast %"class.blink::FloatPoint"* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 18
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 2
  %51 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 1, i32 1
  %52 = bitcast float* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 22
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 2
  br label %116

56:                                               ; preds = %2, %2
  %57 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 3
  %58 = bitcast %"class.blink::FloatPoint"* %57 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 2
  %61 = bitcast i8* %60 to i32*
  store i32 %59, i32* %61, align 2
  %62 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 3, i32 1
  %63 = bitcast float* %62 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 6
  %66 = bitcast i8* %65 to i32*
  store i32 %64, i32* %66, align 2
  %67 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 1
  %68 = bitcast %"class.blink::FloatPoint"* %67 to i32*
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 10
  %71 = bitcast i8* %70 to i32*
  store i32 %69, i32* %71, align 2
  %72 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 1, i32 1
  %73 = bitcast float* %72 to i32*
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 14
  %76 = bitcast i8* %75 to i32*
  store i32 %74, i32* %76, align 2
  br label %116

77:                                               ; preds = %2, %2
  %78 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 2
  %79 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 1
  %80 = bitcast %"class.blink::FloatPoint"* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %83 = bitcast i8* %78 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %83, align 2
  br label %116

84:                                               ; preds = %2, %2
  %85 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 2
  %86 = bitcast %"class.blink::FloatPoint"* %85 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 2
  %89 = bitcast i8* %88 to i32*
  store i32 %87, i32* %89, align 2
  %90 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 2, i32 1
  %91 = bitcast float* %90 to i32*
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 6
  %94 = bitcast i8* %93 to i32*
  store i32 %92, i32* %94, align 2
  %95 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 3, i32 0
  %96 = bitcast float* %95 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 10
  %99 = bitcast i8* %98 to i32*
  store i32 %97, i32* %99, align 2
  %100 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 5
  %101 = load i8, i8* %100, align 1, !range !2
  %102 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 14
  store i8 %101, i8* %102, align 2
  %103 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 4
  %104 = load i8, i8* %103, align 4, !range !2
  %105 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 15
  store i8 %104, i8* %105, align 1
  %106 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 1
  %107 = bitcast %"class.blink::FloatPoint"* %106 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 16
  %110 = bitcast i8* %109 to i32*
  store i32 %108, i32* %110, align 4
  %111 = getelementptr inbounds %"struct.blink::PathSegmentData", %"struct.blink::PathSegmentData"* %1, i64 0, i32 1, i32 1
  %112 = bitcast float* %111 to i32*
  %113 = load i32, i32* %112, align 4
  %114 = getelementptr inbounds %"class.blink::CoalescingBuffer", %"class.blink::CoalescingBuffer"* %3, i64 0, i32 1, i64 20
  %115 = bitcast i8* %114 to i32*
  store i32 %113, i32* %115, align 4
  br label %116

116:                                              ; preds = %17, %28, %34, %40, %56, %77, %84
  %117 = phi i32 [ 24, %84 ], [ 18, %77 ], [ 18, %56 ], [ 26, %40 ], [ 6, %34 ], [ 6, %28 ], [ 10, %17 ]
  store i32 %117, i32* %8, align 8
  br label %118

118:                                              ; preds = %116, %2
  %119 = phi i32 [ 2, %2 ], [ %117, %116 ]
  %120 = getelementptr inbounds %"class.blink::SVGPathByteStream", %"class.blink::SVGPathByteStream"* %16, i64 0, i32 0
  call void @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j(%"class.WTF::Vector"* %120, i8* %14, i32 %119) #7
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink24SVGPathByteStreamBuilderD0Ev(%"class.blink::SVGPathByteStreamBuilder"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.blink::SVGPathByteStreamBuilder"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15SVGPathConsumerD2Ev(%"class.blink::SVGPathConsumer"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j(%"class.WTF::Vector"*, i8*, i32) local_unnamed_addr #1 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, %2
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %13, label %87

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ugt i8* %15, %1
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = zext i32 %8 to i64
  %19 = getelementptr inbounds i8, i8* %15, i64 %18
  %20 = icmp ugt i8* %19, %1
  br i1 %20, label %52, label %21

21:                                               ; preds = %17, %13
  %22 = lshr i32 %11, 2
  %23 = add nuw i32 %11, 1
  %24 = add i32 %23, %22
  %25 = icmp ugt i32 %24, 4
  %26 = select i1 %25, i32 %24, i32 4
  %27 = icmp ugt i32 %26, %9
  %28 = select i1 %27, i32 %26, i32 %9
  %29 = icmp ult i32 %11, %28
  br i1 %29, label %30, label %87, !prof !3

30:                                               ; preds = %21
  %31 = icmp eq i8* %15, null
  %32 = zext i32 %28 to i64
  %33 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %32) #7
  %34 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %33, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #7
  %35 = ptrtoint i8* %34 to i64
  br i1 %31, label %36, label %39

36:                                               ; preds = %30
  %37 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %35, i64* %37 monotonic, align 8
  %38 = trunc i64 %33 to i32
  store i32 %38, i32* %10, align 8
  br label %87

39:                                               ; preds = %30
  %40 = load i8*, i8** %14, align 8
  %41 = icmp ne i8* %34, null
  %42 = icmp ne i8* %40, null
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %48, !prof !3

44:                                               ; preds = %39
  %45 = load i32, i32* %7, align 4
  %46 = zext i32 %45 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %34, i8* nonnull align 1 %40, i64 %46, i1 false) #7
  %47 = load i8*, i8** %14, align 8
  br label %48

48:                                               ; preds = %44, %39
  %49 = phi i8* [ %40, %39 ], [ %47, %44 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %49) #7
  %50 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %35, i64* %50 monotonic, align 8
  %51 = trunc i64 %33 to i32
  store i32 %51, i32* %10, align 8
  br label %87

52:                                               ; preds = %17
  %53 = ptrtoint i8* %1 to i64
  %54 = ptrtoint i8* %15 to i64
  %55 = sub i64 %53, %54
  %56 = lshr i32 %11, 2
  %57 = add nuw i32 %11, 1
  %58 = add i32 %57, %56
  %59 = icmp ugt i32 %58, 4
  %60 = select i1 %59, i32 %58, i32 4
  %61 = icmp ugt i32 %60, %9
  %62 = select i1 %61, i32 %60, i32 %9
  %63 = icmp ult i32 %11, %62
  br i1 %63, label %64, label %84, !prof !3

64:                                               ; preds = %52
  %65 = icmp eq i8* %15, null
  %66 = zext i32 %62 to i64
  %67 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %66) #7
  %68 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %67, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #7
  %69 = ptrtoint i8* %68 to i64
  br i1 %65, label %81, label %70

70:                                               ; preds = %64
  %71 = load i8*, i8** %14, align 8
  %72 = icmp ne i8* %68, null
  %73 = icmp ne i8* %71, null
  %74 = and i1 %72, %73
  br i1 %74, label %75, label %79, !prof !3

75:                                               ; preds = %70
  %76 = load i32, i32* %7, align 4
  %77 = zext i32 %76 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %68, i8* nonnull align 1 %71, i64 %77, i1 false) #7
  %78 = load i8*, i8** %14, align 8
  br label %79

79:                                               ; preds = %75, %70
  %80 = phi i8* [ %71, %70 ], [ %78, %75 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %80) #7
  br label %81

81:                                               ; preds = %64, %79
  %82 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %69, i64* %82 monotonic, align 8
  %83 = trunc i64 %67 to i32
  store i32 %83, i32* %10, align 8
  br label %84

84:                                               ; preds = %81, %52
  %85 = phi i8* [ %15, %52 ], [ %68, %81 ]
  %86 = getelementptr inbounds i8, i8* %85, i64 %55
  br label %87

87:                                               ; preds = %84, %21, %36, %48, %3
  %88 = phi i8* [ %1, %3 ], [ %86, %84 ], [ %1, %21 ], [ %1, %36 ], [ %1, %48 ]
  %89 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #7
  %90 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %90, align 8
  %91 = load i32, i32* %7, align 4
  %92 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92)
  %93 = icmp ult i32 %9, %91
  br i1 %93, label %95, label %94

94:                                               ; preds = %87
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92)
  store i8* null, i8** %90, align 8
  br label %104

95:                                               ; preds = %87
  %96 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #7
  %97 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %91) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* %96, i8* %97) #7
  %98 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %99 = load i8*, i8** %98, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92)
  store i8* %99, i8** %90, align 8
  %100 = icmp eq i8* %99, null
  br i1 %100, label %104, label %101

101:                                              ; preds = %95
  %102 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1907, %"class.logging::CheckOpResult"* nonnull %5) #7
  %103 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %102) #7
  br label %104

104:                                              ; preds = %94, %95, %101
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #7
  %105 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  %107 = load i32, i32* %7, align 4
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %106, i64 %108
  %110 = icmp ne i8* %109, null
  %111 = icmp ne i8* %88, null
  %112 = and i1 %111, %110
  br i1 %112, label %113, label %115, !prof !3

113:                                              ; preds = %104
  %114 = zext i32 %2 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %109, i8* nonnull align 1 %88, i64 %114, i1 false) #7
  br label %115

115:                                              ; preds = %104, %113
  store i32 %9, i32* %7, align 4
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #7
  ret i64 %20
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #4

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
