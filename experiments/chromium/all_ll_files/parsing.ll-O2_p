; ModuleID = '../../sql/recover_module/parsing.cc'
source_filename = "../../sql/recover_module/parsing.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.sql::recover::RecoveredColumnSpec" = type <{ %"class.std::__1::basic_string", i32, i8, i8, [2 x i8] }>
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"struct.std::__1::pair" = type { %"class.base::BasicStringPiece", %"class.base::BasicStringPiece" }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.sql::recover::TargetTableSpec" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }

@.str = private unnamed_addr constant [10 x i8] c" NOT NULL\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.4 = private unnamed_addr constant [34 x i8] c"../../base/strings/string_piece.h\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"INTEGER\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"FLOAT\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"TEXT\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"BLOB\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"NUMERIC\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"ROWID\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"ANY\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"STRICT\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"NOT\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"NULL\00", align 1
@switch.table._ZNK3sql7recover19RecoveredColumnSpec16ToCreateTableSqlEv = private unnamed_addr constant [7 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i8* null], align 8
@switch.table._ZNK3sql7recover19RecoveredColumnSpec16ToCreateTableSqlEv.19 = private unnamed_addr constant [7 x i64] [i64 7, i64 5, i64 4, i64 4, i64 7, i64 7, i64 0], align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3sql7recover19RecoveredColumnSpec16ToCreateTableSqlEv(%"class.std::__1::basic_string"* noalias sret, %"struct.sql::recover::RecoveredColumnSpec"*) local_unnamed_addr #0 align 2 {
  %3 = alloca [4 x %"class.base::BasicStringPiece"], align 8
  %4 = getelementptr inbounds %"struct.sql::recover::RecoveredColumnSpec", %"struct.sql::recover::RecoveredColumnSpec"* %1, i64 0, i32 2
  %5 = load i8, i8* %4, align 4, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0)
  %8 = select i1 %6, i64 0, i64 9
  %9 = bitcast [4 x %"class.base::BasicStringPiece"]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #10
  %10 = getelementptr inbounds [4 x %"class.base::BasicStringPiece"], [4 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 0
  %11 = getelementptr inbounds [4 x %"class.base::BasicStringPiece"], [4 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 0, i32 0
  %12 = bitcast %"struct.sql::recover::RecoveredColumnSpec"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  %16 = getelementptr inbounds %"struct.sql::recover::RecoveredColumnSpec", %"struct.sql::recover::RecoveredColumnSpec"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast %"struct.sql::recover::RecoveredColumnSpec"* %1 to i8*
  %19 = select i1 %15, i8* %17, i8* %18
  store i8* %19, i8** %11, align 8
  %20 = getelementptr inbounds [4 x %"class.base::BasicStringPiece"], [4 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 0, i32 1
  %21 = getelementptr inbounds %"struct.sql::recover::RecoveredColumnSpec", %"struct.sql::recover::RecoveredColumnSpec"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = zext i8 %14 to i64
  %24 = select i1 %15, i64 %22, i64 %23
  store i64 %24, i64* %20, align 8
  %25 = getelementptr inbounds [4 x %"class.base::BasicStringPiece"], [4 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 1, i32 0
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i8** %25, align 8
  %26 = getelementptr inbounds [4 x %"class.base::BasicStringPiece"], [4 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 1, i32 1
  store i64 1, i64* %26, align 8
  %27 = getelementptr inbounds %"struct.sql::recover::RecoveredColumnSpec", %"struct.sql::recover::RecoveredColumnSpec"* %1, i64 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [7 x i8*], [7 x i8*]* @switch.table._ZNK3sql7recover19RecoveredColumnSpec16ToCreateTableSqlEv, i64 0, i64 %29
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds [7 x i64], [7 x i64]* @switch.table._ZNK3sql7recover19RecoveredColumnSpec16ToCreateTableSqlEv.19, i64 0, i64 %33
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds [4 x %"class.base::BasicStringPiece"], [4 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 2, i32 0
  %37 = bitcast i8** %36 to i64*
  store i64 %32, i64* %37, align 8
  %38 = getelementptr inbounds [4 x %"class.base::BasicStringPiece"], [4 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 2, i32 1
  store i64 %35, i64* %38, align 8
  %39 = getelementptr inbounds [4 x %"class.base::BasicStringPiece"], [4 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 3, i32 0
  store i8* %7, i8** %39, align 8
  %40 = getelementptr inbounds [4 x %"class.base::BasicStringPiece"], [4 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 3, i32 1
  store i64 %8, i64* %40, align 8
  call void @_ZN4base6StrCatENS_4spanIKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEELm18446744073709551615EEE(%"class.std::__1::basic_string"* sret %0, i64 4, %"class.base::BasicStringPiece"* nonnull %10) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3sql7recover19RecoveredColumnSpec17IsAcceptableValueENS0_9ValueTypeE(%"struct.sql::recover::RecoveredColumnSpec"* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %12

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"struct.sql::recover::RecoveredColumnSpec", %"struct.sql::recover::RecoveredColumnSpec"* %0, i64 0, i32 2
  %6 = load i8, i8* %5, align 4, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %37, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"struct.sql::recover::RecoveredColumnSpec", %"struct.sql::recover::RecoveredColumnSpec"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 5
  br label %37

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"struct.sql::recover::RecoveredColumnSpec", %"struct.sql::recover::RecoveredColumnSpec"* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 6
  br i1 %15, label %37, label %16

16:                                               ; preds = %12
  switch i32 %1, label %37 [
    i32 1, label %17
    i32 2, label %25
    i32 3, label %27
    i32 4, label %29
  ]

17:                                               ; preds = %16
  %18 = icmp eq i32 %14, 0
  br i1 %18, label %37, label %19

19:                                               ; preds = %17
  %20 = getelementptr inbounds %"struct.sql::recover::RecoveredColumnSpec", %"struct.sql::recover::RecoveredColumnSpec"* %0, i64 0, i32 3
  %21 = load i8, i8* %20, align 1, !range !2
  %22 = icmp eq i8 %21, 0
  %23 = icmp eq i32 %14, 1
  %24 = and i1 %23, %22
  ret i1 %24

25:                                               ; preds = %16
  %26 = icmp eq i32 %14, 1
  ret i1 %26

27:                                               ; preds = %16
  %28 = icmp eq i32 %14, 2
  br label %37

29:                                               ; preds = %16
  %30 = icmp eq i32 %14, 3
  br i1 %30, label %37, label %31

31:                                               ; preds = %29
  %32 = getelementptr inbounds %"struct.sql::recover::RecoveredColumnSpec", %"struct.sql::recover::RecoveredColumnSpec"* %0, i64 0, i32 3
  %33 = load i8, i8* %32, align 1, !range !2
  %34 = icmp eq i8 %33, 0
  %35 = icmp eq i32 %14, 2
  %36 = and i1 %35, %34
  br label %37

37:                                               ; preds = %31, %16, %29, %17, %12, %8, %4, %27
  %38 = phi i1 [ %28, %27 ], [ true, %4 ], [ %11, %8 ], [ true, %12 ], [ true, %17 ], [ true, %29 ], [ %36, %31 ], [ false, %16 ]
  ret i1 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3sql7recover15ParseColumnSpecEPKc(%"struct.sql::recover::RecoveredColumnSpec"* noalias nocapture sret, i8*) local_unnamed_addr #0 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.base::BasicStringPiece", align 8
  %5 = alloca %"class.base::BasicStringPiece", align 8
  %6 = alloca %"struct.std::__1::pair", align 8
  %7 = alloca %"class.base::BasicStringPiece", align 8
  %8 = alloca %"struct.std::__1::pair", align 8
  %9 = alloca %"class.base::BasicStringPiece", align 8
  %10 = alloca %"struct.std::__1::pair", align 8
  %11 = alloca %"struct.std::__1::pair", align 8
  %12 = alloca %"class.std::__1::basic_string", align 8
  %13 = getelementptr inbounds %"struct.sql::recover::RecoveredColumnSpec", %"struct.sql::recover::RecoveredColumnSpec"* %0, i64 0, i32 1
  %14 = getelementptr inbounds %"struct.sql::recover::RecoveredColumnSpec", %"struct.sql::recover::RecoveredColumnSpec"* %0, i64 0, i32 2
  %15 = getelementptr inbounds %"struct.sql::recover::RecoveredColumnSpec", %"struct.sql::recover::RecoveredColumnSpec"* %0, i64 0, i32 3
  %16 = bitcast %"struct.sql::recover::RecoveredColumnSpec"* %0 to i8*
  %17 = getelementptr inbounds %"struct.sql::recover::RecoveredColumnSpec", %"struct.sql::recover::RecoveredColumnSpec"* %0, i64 0, i32 1
  %18 = bitcast i32* %17 to i64*
  store i64 -6148914691236517206, i64* %18, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false) #10
  store i8 0, i8* %14, align 4
  store i8 0, i8* %15, align 1
  %19 = bitcast %"class.base::BasicStringPiece"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #10
  %20 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 0, i32 0
  %21 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 0, i32 1
  %22 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 0, i32 1
  store i64 -6148914691236517206, i64* %22, align 8
  store i8* %1, i8** %20, align 8
  %23 = icmp eq i8* %1, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %2
  %25 = tail call i64 @strlen(i8* nonnull %1) #10
  store i64 %25, i64* %21, align 8
  br label %29

26:                                               ; preds = %2
  store i64 0, i64* %21, align 8
  %27 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)) #10
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #10
  br label %29

29:                                               ; preds = %24, %26
  %30 = phi i64 [ %25, %24 ], [ 0, %26 ]
  %31 = bitcast %"class.base::BasicStringPiece"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #10
  %32 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 0
  %33 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 0, i64 16, i1 false) #10
  %34 = bitcast %"struct.std::__1::pair"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %34) #10
  call fastcc void @_ZN3sql7recover12_GLOBAL__N_110SplitTokenEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"struct.std::__1::pair"* nonnull sret %6, i8* %1, i64 %30)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %31, i8* nonnull align 8 %34, i64 16, i1 false) #10
  %35 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %6, i64 0, i32 1
  %36 = bitcast %"class.base::BasicStringPiece"* %35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 %36, i64 16, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %34) #10
  %37 = load i64, i64* %33, align 8
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %139, label %39

39:                                               ; preds = %29
  %40 = bitcast %"class.base::BasicStringPiece"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #10
  %41 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %7, i64 0, i32 0
  %42 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %7, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 16, i1 false) #10
  %43 = bitcast %"struct.std::__1::pair"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #10
  %44 = load i8*, i8** %20, align 8
  %45 = load i64, i64* %21, align 8
  call fastcc void @_ZN3sql7recover12_GLOBAL__N_110SplitTokenEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"struct.std::__1::pair"* nonnull sret %8, i8* %44, i64 %45)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %40, i8* nonnull align 8 %43, i64 16, i1 false) #10
  %46 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %8, i64 0, i32 1
  %47 = bitcast %"class.base::BasicStringPiece"* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 %47, i64 16, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #10
  %48 = load i8*, i8** %41, align 8
  %49 = load i64, i64* %42, align 8
  switch i64 %49, label %138 [
    i64 7, label %50
    i64 5, label %53
    i64 4, label %56
    i64 3, label %68
  ]

50:                                               ; preds = %39
  %51 = call i32 @bcmp(i8* %48, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i64 7) #10
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %71, label %62

53:                                               ; preds = %39
  %54 = call i32 @bcmp(i8* %48, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i64 5) #10
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %71, label %65

56:                                               ; preds = %39
  %57 = call i32 @bcmp(i8* %48, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i64 4) #10
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %56
  %60 = call i32 @bcmp(i8* %48, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), i64 4) #10
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %71, label %138

62:                                               ; preds = %50
  %63 = call i32 @bcmp(i8* %48, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0), i64 7) #10
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %71, label %138

65:                                               ; preds = %53
  %66 = call i32 @bcmp(i8* %48, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i64 5) #10
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %71, label %138

68:                                               ; preds = %39
  %69 = call i32 @bcmp(i8* %48, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i64 3) #10
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %138

71:                                               ; preds = %50, %53, %56, %59, %62, %65, %68
  %72 = phi i32 [ 6, %68 ], [ 5, %65 ], [ 4, %62 ], [ 3, %59 ], [ 2, %56 ], [ 1, %53 ], [ 0, %50 ]
  store i32 %72, i32* %13, align 8
  %73 = icmp eq i32 %72, 5
  %74 = zext i1 %73 to i8
  store i8 %74, i8* %14, align 4
  %75 = load i64, i64* %21, align 8
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %114, label %77

77:                                               ; preds = %71
  %78 = bitcast %"class.base::BasicStringPiece"* %9 to i8*
  %79 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %9, i64 0, i32 0
  %80 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %9, i64 0, i32 1
  %81 = bitcast %"struct.std::__1::pair"* %10 to i8*
  %82 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %10, i64 0, i32 1
  %83 = bitcast %"class.base::BasicStringPiece"* %82 to i8*
  %84 = bitcast %"struct.std::__1::pair"* %11 to i8*
  %85 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %11, i64 0, i32 1
  %86 = bitcast %"class.base::BasicStringPiece"* %85 to i8*
  %87 = icmp eq i32 %72, 6
  br label %88

88:                                               ; preds = %77, %111
  %89 = phi i64 [ %75, %77 ], [ %112, %111 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %78) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 0, i64 16, i1 false) #10
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %81) #10
  %90 = load i8*, i8** %20, align 8
  call fastcc void @_ZN3sql7recover12_GLOBAL__N_110SplitTokenEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"struct.std::__1::pair"* nonnull sret %10, i8* %90, i64 %89)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %78, i8* nonnull align 8 %81, i64 16, i1 false) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 %83, i64 16, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %81) #10
  %91 = load i8*, i8** %79, align 8
  %92 = load i64, i64* %80, align 8
  switch i64 %92, label %137 [
    i64 6, label %93
    i64 3, label %98
  ]

93:                                               ; preds = %88
  %94 = call i32 @bcmp(i8* %91, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i64 0, i64 0), i64 6) #10
  %95 = icmp ne i32 %94, 0
  %96 = or i1 %87, %95
  br i1 %96, label %137, label %97

97:                                               ; preds = %93
  store i8 1, i8* %15, align 1
  br label %111

98:                                               ; preds = %88
  %99 = call i32 @bcmp(i8* %91, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i64 0, i64 0), i64 3) #10
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %137

101:                                              ; preds = %98
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %84) #10
  %102 = load i8*, i8** %20, align 8
  %103 = load i64, i64* %21, align 8
  call fastcc void @_ZN3sql7recover12_GLOBAL__N_110SplitTokenEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"struct.std::__1::pair"* nonnull sret %11, i8* %102, i64 %103)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %78, i8* nonnull align 8 %84, i64 16, i1 false) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 %86, i64 16, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %84) #10
  %104 = load i64, i64* %80, align 8
  %105 = icmp eq i64 %104, 4
  br i1 %105, label %106, label %137

106:                                              ; preds = %101
  %107 = load i8*, i8** %79, align 8
  %108 = call i32 @bcmp(i8* %107, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i64 0, i64 0), i64 4) #10
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %137

110:                                              ; preds = %106
  store i8 1, i8* %14, align 4
  br label %111

111:                                              ; preds = %110, %97
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %78) #10
  %112 = load i64, i64* %21, align 8
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %88

114:                                              ; preds = %111, %71
  %115 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %115) #10
  %116 = load i8*, i8** %32, align 8, !noalias !3
  %117 = icmp ugt i64 %37, -17
  br i1 %117, label %118, label %120

118:                                              ; preds = %114
  %119 = bitcast %"class.std::__1::basic_string"* %12 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %119) #11
  unreachable

120:                                              ; preds = %114
  %121 = icmp ult i64 %37, 23
  br i1 %121, label %130, label %122

122:                                              ; preds = %120
  %123 = add nuw i64 %37, 16
  %124 = and i64 %123, -16
  %125 = call i8* @_Znwm(i64 %124) #12
  %126 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %125, i8** %126, align 8, !alias.scope !3
  %127 = or i64 %124, -9223372036854775808
  %128 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %127, i64* %128, align 8, !alias.scope !3
  %129 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %37, i64* %129, align 8, !alias.scope !3
  br label %134

130:                                              ; preds = %120
  %131 = trunc i64 %37 to i8
  %132 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %133 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %132, i64 0, i32 1, i32 0
  store i8 %131, i8* %133, align 1, !alias.scope !3
  br label %134

134:                                              ; preds = %130, %122
  %135 = phi i8* [ %125, %122 ], [ %115, %130 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %135, i8* align 1 %116, i64 %37, i1 false) #10
  %136 = getelementptr inbounds i8, i8* %135, i64 %37
  store i8 0, i8* %136, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* nonnull align 8 %115, i64 24, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %115) #10
  br label %138

137:                                              ; preds = %106, %98, %88, %93, %101
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %78) #10
  br label %138

138:                                              ; preds = %39, %59, %62, %65, %68, %134, %137
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #10
  br label %139

139:                                              ; preds = %138, %29
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3sql7recover12_GLOBAL__N_110SplitTokenEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"struct.std::__1::pair"* noalias nocapture sret, i8*, i64) unnamed_addr #0 {
  %4 = alloca %"class.base::BasicStringPiece", align 8
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 0, i32 0
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 0, i32 1
  store i64 %2, i64* %6, align 8
  %7 = icmp eq i64 %2, 0
  br i1 %7, label %32, label %8

8:                                                ; preds = %3, %15
  %9 = phi i64 [ %16, %15 ], [ 0, %3 ]
  %10 = call dereferenceable(1) i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE2atEm(%"class.base::BasicStringPiece"* nonnull %4, i64 %9) #10
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 32
  br i1 %12, label %13, label %15

13:                                               ; preds = %8
  %14 = load i64, i64* %6, align 8
  br label %19

15:                                               ; preds = %8
  %16 = add nuw i64 %9, 1
  %17 = load i64, i64* %6, align 8
  %18 = icmp ult i64 %16, %17
  br i1 %18, label %8, label %19

19:                                               ; preds = %15, %13
  %20 = phi i64 [ %14, %13 ], [ %17, %15 ]
  %21 = phi i64 [ %9, %13 ], [ %16, %15 ]
  %22 = icmp ult i64 %21, %20
  br i1 %22, label %23, label %32

23:                                               ; preds = %19, %28
  %24 = phi i64 [ %29, %28 ], [ %21, %19 ]
  %25 = call dereferenceable(1) i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE2atEm(%"class.base::BasicStringPiece"* nonnull %4, i64 %24) #10
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, 32
  br i1 %27, label %28, label %32

28:                                               ; preds = %23
  %29 = add nuw i64 %24, 1
  %30 = load i64, i64* %6, align 8
  %31 = icmp ult i64 %29, %30
  br i1 %31, label %23, label %32

32:                                               ; preds = %23, %28, %3, %19
  %33 = phi i64 [ %21, %19 ], [ 0, %3 ], [ %21, %28 ], [ %21, %23 ]
  %34 = phi i64 [ %21, %19 ], [ 0, %3 ], [ %24, %23 ], [ %29, %28 ]
  %35 = call { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"* nonnull %4, i64 0, i64 %33)
  %36 = extractvalue { i8*, i64 } %35, 0
  %37 = extractvalue { i8*, i64 } %35, 1
  %38 = call { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"* nonnull %4, i64 %34, i64 -1)
  %39 = extractvalue { i8*, i64 } %38, 0
  %40 = extractvalue { i8*, i64 } %38, 1
  %41 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 0
  store i8* %36, i8** %41, align 8
  %42 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 1
  store i64 %37, i64* %42, align 8
  %43 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1, i32 0
  store i8* %39, i8** %43, align 8
  %44 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1, i32 1
  store i64 %40, i64* %44, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3sql7recover14ParseTableSpecEPKc(%"struct.sql::recover::TargetTableSpec"* noalias sret, i8*) local_unnamed_addr #0 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.base::BasicStringPiece", align 8
  %5 = bitcast %"class.base::BasicStringPiece"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 0, i32 0
  %7 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 0, i32 1
  store i64 -6148914691236517206, i64* %8, align 8
  store i8* %1, i8** %6, align 8
  %9 = icmp eq i8* %1, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %2
  %11 = tail call i64 @strlen(i8* nonnull %1) #10
  store i64 %11, i64* %7, align 8
  br label %16

12:                                               ; preds = %2
  store i64 0, i64* %7, align 8
  %13 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)) #10
  %14 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #10
  %15 = load i64, i64* %7, align 8
  br label %16

16:                                               ; preds = %10, %12
  %17 = phi i64 [ %11, %10 ], [ %15, %12 ]
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %27, label %19

19:                                               ; preds = %16
  %20 = load i8*, i8** %6, align 8
  %21 = call i8* @memchr(i8* %20, i32 46, i64 %17) #10
  %22 = icmp eq i8* %21, null
  br i1 %22, label %27, label %23

23:                                               ; preds = %19
  %24 = ptrtoint i8* %21 to i64
  %25 = ptrtoint i8* %20 to i64
  %26 = sub i64 %24, %25
  switch i64 %26, label %61 [
    i64 -1, label %27
    i64 0, label %59
  ]

27:                                               ; preds = %16, %19, %23
  %28 = bitcast %"struct.sql::recover::TargetTableSpec"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %28, i64 0, i32 1, i32 0
  store i8 4, i8* %29, align 1
  %30 = bitcast %"struct.sql::recover::TargetTableSpec"* %0 to i8*
  %31 = bitcast %"struct.sql::recover::TargetTableSpec"* %0 to i32*
  store i32 1852399981, i32* %31, align 8
  %32 = getelementptr inbounds i8, i8* %30, i64 4
  store i8 0, i8* %32, align 4
  %33 = getelementptr inbounds %"struct.sql::recover::TargetTableSpec", %"struct.sql::recover::TargetTableSpec"* %0, i64 0, i32 1
  %34 = call i64 @strlen(i8* %1) #10
  %35 = icmp ugt i64 %34, -17
  br i1 %35, label %36, label %38

36:                                               ; preds = %27
  %37 = bitcast %"class.std::__1::basic_string"* %33 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %37) #11
  unreachable

38:                                               ; preds = %27
  %39 = icmp ult i64 %34, 23
  br i1 %39, label %48, label %40

40:                                               ; preds = %38
  %41 = add nuw i64 %34, 16
  %42 = and i64 %41, -16
  %43 = call i8* @_Znwm(i64 %42) #12
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %43, i8** %44, align 8
  %45 = or i64 %42, -9223372036854775808
  %46 = getelementptr inbounds %"struct.sql::recover::TargetTableSpec", %"struct.sql::recover::TargetTableSpec"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %45, i64* %46, align 8
  %47 = getelementptr inbounds %"struct.sql::recover::TargetTableSpec", %"struct.sql::recover::TargetTableSpec"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %34, i64* %47, align 8
  br label %54

48:                                               ; preds = %38
  %49 = trunc i64 %34 to i8
  %50 = bitcast %"class.std::__1::basic_string"* %33 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %50, i64 0, i32 1, i32 0
  store i8 %49, i8* %51, align 1
  %52 = bitcast %"class.std::__1::basic_string"* %33 to i8*
  %53 = icmp eq i64 %34, 0
  br i1 %53, label %56, label %54

54:                                               ; preds = %48, %40
  %55 = phi i8* [ %43, %40 ], [ %52, %48 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %55, i8* align 1 %1, i64 %34, i1 false) #10
  br label %56

56:                                               ; preds = %48, %54
  %57 = phi i8* [ %52, %48 ], [ %55, %54 ]
  %58 = getelementptr inbounds i8, i8* %57, i64 %34
  store i8 0, i8* %58, align 1
  br label %118

59:                                               ; preds = %23
  %60 = bitcast %"struct.sql::recover::TargetTableSpec"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 48, i1 false)
  br label %118

61:                                               ; preds = %23
  %62 = call { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"* nonnull %4, i64 0, i64 %26)
  %63 = extractvalue { i8*, i64 } %62, 0
  %64 = extractvalue { i8*, i64 } %62, 1
  %65 = add nuw i64 %26, 1
  %66 = call { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"* nonnull %4, i64 %65, i64 -1)
  %67 = extractvalue { i8*, i64 } %66, 0
  %68 = extractvalue { i8*, i64 } %66, 1
  %69 = icmp ugt i64 %64, -17
  br i1 %69, label %70, label %72

70:                                               ; preds = %61
  %71 = bitcast %"struct.sql::recover::TargetTableSpec"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %71) #11
  unreachable

72:                                               ; preds = %61
  %73 = icmp ult i64 %64, 23
  br i1 %73, label %82, label %74

74:                                               ; preds = %72
  %75 = add nuw i64 %64, 16
  %76 = and i64 %75, -16
  %77 = call i8* @_Znwm(i64 %76) #12
  %78 = getelementptr inbounds %"struct.sql::recover::TargetTableSpec", %"struct.sql::recover::TargetTableSpec"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %77, i8** %78, align 8, !alias.scope !6
  %79 = or i64 %76, -9223372036854775808
  %80 = getelementptr inbounds %"struct.sql::recover::TargetTableSpec", %"struct.sql::recover::TargetTableSpec"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %79, i64* %80, align 8, !alias.scope !6
  %81 = getelementptr inbounds %"struct.sql::recover::TargetTableSpec", %"struct.sql::recover::TargetTableSpec"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %64, i64* %81, align 8, !alias.scope !6
  br label %88

82:                                               ; preds = %72
  %83 = trunc i64 %64 to i8
  %84 = bitcast %"struct.sql::recover::TargetTableSpec"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %85 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %84, i64 0, i32 1, i32 0
  store i8 %83, i8* %85, align 1, !alias.scope !6
  %86 = bitcast %"struct.sql::recover::TargetTableSpec"* %0 to i8*
  %87 = icmp eq i64 %64, 0
  br i1 %87, label %90, label %88

88:                                               ; preds = %82, %74
  %89 = phi i8* [ %77, %74 ], [ %86, %82 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %63, i64 %64, i1 false) #10
  br label %90

90:                                               ; preds = %82, %88
  %91 = phi i8* [ %86, %82 ], [ %89, %88 ]
  %92 = getelementptr inbounds i8, i8* %91, i64 %64
  store i8 0, i8* %92, align 1
  %93 = getelementptr inbounds %"struct.sql::recover::TargetTableSpec", %"struct.sql::recover::TargetTableSpec"* %0, i64 0, i32 1
  %94 = icmp ugt i64 %68, -17
  br i1 %94, label %95, label %97

95:                                               ; preds = %90
  %96 = bitcast %"class.std::__1::basic_string"* %93 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %96) #11
  unreachable

97:                                               ; preds = %90
  %98 = icmp ult i64 %68, 23
  br i1 %98, label %107, label %99

99:                                               ; preds = %97
  %100 = add nuw i64 %68, 16
  %101 = and i64 %100, -16
  %102 = call i8* @_Znwm(i64 %101) #12
  %103 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %93, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %102, i8** %103, align 8, !alias.scope !9
  %104 = or i64 %101, -9223372036854775808
  %105 = getelementptr inbounds %"struct.sql::recover::TargetTableSpec", %"struct.sql::recover::TargetTableSpec"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %104, i64* %105, align 8, !alias.scope !9
  %106 = getelementptr inbounds %"struct.sql::recover::TargetTableSpec", %"struct.sql::recover::TargetTableSpec"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %68, i64* %106, align 8, !alias.scope !9
  br label %113

107:                                              ; preds = %97
  %108 = trunc i64 %68 to i8
  %109 = bitcast %"class.std::__1::basic_string"* %93 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %110 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %109, i64 0, i32 1, i32 0
  store i8 %108, i8* %110, align 1, !alias.scope !9
  %111 = bitcast %"class.std::__1::basic_string"* %93 to i8*
  %112 = icmp eq i64 %68, 0
  br i1 %112, label %115, label %113

113:                                              ; preds = %107, %99
  %114 = phi i8* [ %102, %99 ], [ %111, %107 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 %67, i64 %68, i1 false) #10
  br label %115

115:                                              ; preds = %107, %113
  %116 = phi i8* [ %111, %107 ], [ %114, %113 ]
  %117 = getelementptr inbounds i8, i8* %116, i64 %68
  store i8 0, i8* %117, align 1
  br label %118

118:                                              ; preds = %115, %59, %56
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
declare { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"*, i64, i64) local_unnamed_addr #0 align 2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

declare void @_ZN4base6StrCatENS_4spanIKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEELm18446744073709551615EEE(%"class.std::__1::basic_string"* sret, i64, %"class.base::BasicStringPiece"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
declare dereferenceable(1) i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE2atEm(%"class.base::BasicStringPiece"*, i64) local_unnamed_addr #0 align 2

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv: argument 0"}
!5 = distinct !{!5, !"_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv: argument 0"}
!8 = distinct !{!8, !"_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv: argument 0"}
!11 = distinct !{!11, !"_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv"}
