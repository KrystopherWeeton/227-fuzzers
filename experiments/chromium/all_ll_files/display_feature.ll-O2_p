; ModuleID = '../../content/browser/renderer_host/display_feature.cc'
source_filename = "../../content/browser/renderer_host/display_feature.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.content::DisplayFeature" = type { i32, i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.gfx::Rect"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJiiRKiiEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRiiiiEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJiiiRKiEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJiRiiiEEEvDpOT_ = comdat any

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7content14DisplayFeatureeqERKS0_(%"struct.content::DisplayFeature"* nocapture readonly, %"struct.content::DisplayFeature"* nocapture readonly dereferenceable(12)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.content::DisplayFeature", %"struct.content::DisplayFeature"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"struct.content::DisplayFeature", %"struct.content::DisplayFeature"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %20

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.content::DisplayFeature", %"struct.content::DisplayFeature"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"struct.content::DisplayFeature", %"struct.content::DisplayFeature"* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %14, label %20

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"struct.content::DisplayFeature", %"struct.content::DisplayFeature"* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"struct.content::DisplayFeature", %"struct.content::DisplayFeature"* %1, i64 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %16, %18
  br label %20

20:                                               ; preds = %14, %8, %2
  %21 = phi i1 [ false, %8 ], [ false, %2 ], [ %19, %14 ]
  ret i1 %21
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7content14DisplayFeatureneERKS0_(%"struct.content::DisplayFeature"* nocapture readonly, %"struct.content::DisplayFeature"* nocapture readonly dereferenceable(12)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.content::DisplayFeature", %"struct.content::DisplayFeature"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"struct.content::DisplayFeature", %"struct.content::DisplayFeature"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %20

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.content::DisplayFeature", %"struct.content::DisplayFeature"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"struct.content::DisplayFeature", %"struct.content::DisplayFeature"* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %14, label %20

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"struct.content::DisplayFeature", %"struct.content::DisplayFeature"* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"struct.content::DisplayFeature", %"struct.content::DisplayFeature"* %1, i64 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp ne i32 %16, %18
  br label %20

20:                                               ; preds = %2, %8, %14
  %21 = phi i1 [ true, %8 ], [ true, %2 ], [ %19, %14 ]
  ret i1 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7content14DisplayFeature21ComputeWindowSegmentsERKN3gfx4SizeE(%"class.std::__1::vector"* noalias sret, %"struct.content::DisplayFeature"*, %"class.gfx::Size"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %19 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 24, i1 false) #9
  %20 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #9
  %21 = getelementptr inbounds %"struct.content::DisplayFeature", %"struct.content::DisplayFeature"* %1, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"struct.content::DisplayFeature", %"struct.content::DisplayFeature"* %1, i64 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, %22
  store i32 %25, i32* %4, align 4
  %26 = getelementptr inbounds %"struct.content::DisplayFeature", %"struct.content::DisplayFeature"* %1, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %66

29:                                               ; preds = %3
  %30 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #9
  store i32 0, i32* %5, align 4
  %31 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #9
  store i32 0, i32* %6, align 4
  %32 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #9
  %33 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %2, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  store i32 %34, i32* %7, align 4
  call void @_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJiiRKiiEEEvDpOT_(%"class.std::__1::vector"* %0, i32* nonnull dereferenceable(4) %5, i32* nonnull dereferenceable(4) %6, i32* dereferenceable(4) %21, i32* nonnull dereferenceable(4) %7) #9
  %35 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %2, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = load i32, i32* %4, align 4
  %38 = load i32, i32* %33, align 4
  %39 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %17, align 8
  %40 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %18, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #9
  %41 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %41) #9
  store i32 0, i32* %8, align 4
  %42 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %42) #9
  %43 = sub nsw i32 %36, %37
  store i32 %43, i32* %9, align 4
  %44 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %44) #9
  store i32 %38, i32* %10, align 4
  %45 = icmp ult %"class.gfx::Rect"* %39, %40
  br i1 %45, label %46, label %65

46:                                               ; preds = %29
  %47 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 0, i32 0, i32 0
  store i32 %37, i32* %47, align 4
  %48 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 0, i32 0, i32 1
  store i32 0, i32* %48, align 4
  %49 = icmp sgt i32 %37, 0
  %50 = icmp sgt i32 %43, 0
  %51 = and i1 %49, %50
  %52 = sub nuw nsw i32 2147483647, %37
  %53 = icmp ult i32 %52, %43
  %54 = and i1 %53, %51
  %55 = select i1 %54, i32 %52, i32 %43
  %56 = icmp sgt i32 %38, 0
  %57 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 0, i32 1, i32 0
  %58 = icmp sgt i32 %55, 0
  %59 = select i1 %58, i32 %55, i32 0
  store i32 %59, i32* %57, align 4
  %60 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 0, i32 1, i32 1
  %61 = select i1 %56, i32 %38, i32 0
  store i32 %61, i32* %60, align 4
  %62 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 1
  %63 = ptrtoint %"class.gfx::Rect"* %62 to i64
  %64 = bitcast %"class.gfx::Rect"** %17 to i64*
  store i64 %63, i64* %64, align 8
  br label %103

65:                                               ; preds = %29
  call void @_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRiiiiEEEvDpOT_(%"class.std::__1::vector"* %0, i32* nonnull dereferenceable(4) %4, i32* nonnull dereferenceable(4) %8, i32* nonnull dereferenceable(4) %9, i32* nonnull dereferenceable(4) %10) #9
  br label %103

66:                                               ; preds = %3
  %67 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %67) #9
  store i32 0, i32* %11, align 4
  %68 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %68) #9
  store i32 0, i32* %12, align 4
  %69 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %69) #9
  %70 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %2, i64 0, i32 0
  %71 = load i32, i32* %70, align 4
  store i32 %71, i32* %13, align 4
  call void @_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJiiiRKiEEEvDpOT_(%"class.std::__1::vector"* %0, i32* nonnull dereferenceable(4) %11, i32* nonnull dereferenceable(4) %12, i32* nonnull dereferenceable(4) %13, i32* dereferenceable(4) %21) #9
  %72 = load i32, i32* %70, align 4
  %73 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %2, i64 0, i32 1
  %74 = load i32, i32* %73, align 4
  %75 = load i32, i32* %4, align 4
  %76 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %17, align 8
  %77 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %18, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %69) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %68) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %67) #9
  %78 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %78) #9
  store i32 0, i32* %14, align 4
  %79 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %79) #9
  store i32 %72, i32* %15, align 4
  %80 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %80) #9
  %81 = sub nsw i32 %74, %75
  store i32 %81, i32* %16, align 4
  %82 = icmp ult %"class.gfx::Rect"* %76, %77
  br i1 %82, label %83, label %102

83:                                               ; preds = %66
  %84 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %76, i64 0, i32 0, i32 0
  store i32 0, i32* %84, align 4
  %85 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %76, i64 0, i32 0, i32 1
  store i32 %75, i32* %85, align 4
  %86 = icmp sgt i32 %72, 0
  %87 = icmp sgt i32 %75, 0
  %88 = icmp sgt i32 %81, 0
  %89 = and i1 %87, %88
  %90 = sub nuw nsw i32 2147483647, %75
  %91 = icmp ult i32 %90, %81
  %92 = and i1 %91, %89
  %93 = select i1 %92, i32 %90, i32 %81
  %94 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %76, i64 0, i32 1, i32 0
  %95 = select i1 %86, i32 %72, i32 0
  store i32 %95, i32* %94, align 4
  %96 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %76, i64 0, i32 1, i32 1
  %97 = icmp sgt i32 %93, 0
  %98 = select i1 %97, i32 %93, i32 0
  store i32 %98, i32* %96, align 4
  %99 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %76, i64 1
  %100 = ptrtoint %"class.gfx::Rect"* %99 to i64
  %101 = bitcast %"class.gfx::Rect"** %17 to i64*
  store i64 %100, i64* %101, align 8
  br label %103

102:                                              ; preds = %66
  call void @_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJiRiiiEEEvDpOT_(%"class.std::__1::vector"* %0, i32* nonnull dereferenceable(4) %14, i32* nonnull dereferenceable(4) %4, i32* nonnull dereferenceable(4) %15, i32* nonnull dereferenceable(4) %16) #9
  br label %103

103:                                              ; preds = %102, %83, %65, %46
  %104 = phi i8* [ %44, %46 ], [ %44, %65 ], [ %80, %83 ], [ %80, %102 ]
  %105 = phi i8* [ %42, %46 ], [ %42, %65 ], [ %79, %83 ], [ %79, %102 ]
  %106 = phi i8* [ %41, %46 ], [ %41, %65 ], [ %78, %83 ], [ %78, %102 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %104) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %105) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %106) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable writeonly
define hidden { i64, i64 } @_ZN7content14DisplayFeature6CreateENS0_11OrientationEiiiiPNS0_14ParamErrorEnumE(i32, i32, i32, i32, i32, i32* nocapture) local_unnamed_addr #3 align 2 {
  %7 = or i32 %4, %3
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %21, label %9

9:                                                ; preds = %6
  %10 = or i32 %2, %1
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %21, label %12

12:                                               ; preds = %9
  %13 = icmp eq i32 %0, 0
  %14 = add nsw i32 %2, %1
  %15 = icmp sgt i32 %14, %3
  %16 = and i1 %13, %15
  br i1 %16, label %21, label %17

17:                                               ; preds = %12
  %18 = icmp eq i32 %0, 1
  %19 = icmp sgt i32 %14, %4
  %20 = and i1 %18, %19
  br i1 %20, label %21, label %23

21:                                               ; preds = %17, %12, %9, %6
  %22 = phi i32 [ 1, %6 ], [ 2, %9 ], [ 3, %12 ], [ 4, %17 ]
  store i32 %22, i32* %5, align 4
  br label %23

23:                                               ; preds = %21, %17
  %24 = phi i64 [ 1, %17 ], [ 0, %21 ]
  %25 = zext i32 %0 to i64
  %26 = shl nuw i64 %25, 32
  %27 = or i64 %24, %26
  %28 = insertvalue { i64, i64 } undef, i64 %27, 0
  %29 = zext i32 %2 to i64
  %30 = shl nuw i64 %29, 32
  %31 = zext i32 %1 to i64
  %32 = or i64 %30, %31
  %33 = insertvalue { i64, i64 } %28, i64 %32, 1
  ret { i64, i64 } %33
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJiiRKiiEEEvDpOT_(%"class.std::__1::vector"*, i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #5 comdat align 2 {
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.gfx::Rect"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector"* %0 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = ashr exact i64 %11, 4
  %13 = add nsw i64 %12, 1
  %14 = icmp ugt i64 %13, 1152921504606846975
  br i1 %14, label %15, label %17

15:                                               ; preds = %5
  %16 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %16) #10
  unreachable

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %19 = bitcast %"class.gfx::Rect"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %10
  %22 = ashr exact i64 %21, 4
  %23 = icmp ult i64 %22, 576460752303423487
  br i1 %23, label %24, label %32

24:                                               ; preds = %17
  %25 = ashr exact i64 %21, 3
  %26 = icmp ult i64 %25, %13
  %27 = select i1 %26, i64 %13, i64 %25
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %37, label %29

29:                                               ; preds = %24
  %30 = icmp ugt i64 %27, 1152921504606846975
  br i1 %30, label %31, label %32

31:                                               ; preds = %29
  tail call void @abort() #10
  unreachable

32:                                               ; preds = %17, %29
  %33 = phi i64 [ %27, %29 ], [ 1152921504606846975, %17 ]
  %34 = shl i64 %33, 4
  %35 = tail call i8* @_Znwm(i64 %34) #11
  %36 = bitcast i8* %35 to %"class.gfx::Rect"*
  br label %37

37:                                               ; preds = %24, %32
  %38 = phi i64 [ %33, %32 ], [ 0, %24 ]
  %39 = phi %"class.gfx::Rect"* [ %36, %32 ], [ null, %24 ]
  %40 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12
  %41 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %38
  %42 = ptrtoint %"class.gfx::Rect"* %41 to i64
  %43 = load i32, i32* %1, align 4
  %44 = load i32, i32* %2, align 4
  %45 = load i32, i32* %3, align 4
  %46 = load i32, i32* %4, align 4
  %47 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %40, i64 0, i32 0, i32 0
  store i32 %43, i32* %47, align 4
  %48 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12, i32 0, i32 1
  store i32 %44, i32* %48, align 4
  %49 = icmp sgt i32 %43, 0
  %50 = icmp sgt i32 %45, 0
  %51 = and i1 %49, %50
  %52 = sub nuw nsw i32 2147483647, %43
  %53 = icmp ult i32 %52, %45
  %54 = and i1 %53, %51
  %55 = select i1 %54, i32 %52, i32 %45
  %56 = icmp sgt i32 %44, 0
  %57 = icmp sgt i32 %46, 0
  %58 = and i1 %56, %57
  %59 = sub nuw nsw i32 2147483647, %44
  %60 = icmp ult i32 %59, %46
  %61 = and i1 %60, %58
  %62 = select i1 %61, i32 %59, i32 %46
  %63 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12, i32 1, i32 0
  %64 = icmp sgt i32 %55, 0
  %65 = select i1 %64, i32 %55, i32 0
  store i32 %65, i32* %63, align 4
  %66 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12, i32 1, i32 1
  %67 = icmp sgt i32 %62, 0
  %68 = select i1 %67, i32 %62, i32 0
  store i32 %68, i32* %66, align 4
  %69 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %40, i64 1
  %70 = ptrtoint %"class.gfx::Rect"* %69 to i64
  %71 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %72 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %71, align 8
  %73 = load i64, i64* %7, align 8
  %74 = ptrtoint %"class.gfx::Rect"* %72 to i64
  %75 = sub i64 %73, %74
  %76 = ashr exact i64 %75, 4
  %77 = sub nsw i64 0, %76
  %78 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %40, i64 %77
  %79 = ptrtoint %"class.gfx::Rect"* %78 to i64
  %80 = icmp sgt i64 %75, 0
  br i1 %80, label %81, label %85

81:                                               ; preds = %37
  %82 = bitcast %"class.gfx::Rect"* %78 to i8*
  %83 = bitcast %"class.gfx::Rect"* %72 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %82, i8* align 4 %83, i64 %75, i1 false) #9
  %84 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %71, align 8
  br label %85

85:                                               ; preds = %37, %81
  %86 = phi %"class.gfx::Rect"* [ %72, %37 ], [ %84, %81 ]
  store i64 %79, i64* %9, align 8
  store i64 %70, i64* %7, align 8
  store i64 %42, i64* %19, align 8
  %87 = icmp eq %"class.gfx::Rect"* %86, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %85
  %89 = bitcast %"class.gfx::Rect"* %86 to i8*
  tail call void @_ZdlPv(i8* %89) #11
  br label %90

90:                                               ; preds = %85, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRiiiiEEEvDpOT_(%"class.std::__1::vector"*, i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #5 comdat align 2 {
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.gfx::Rect"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector"* %0 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = ashr exact i64 %11, 4
  %13 = add nsw i64 %12, 1
  %14 = icmp ugt i64 %13, 1152921504606846975
  br i1 %14, label %15, label %17

15:                                               ; preds = %5
  %16 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %16) #10
  unreachable

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %19 = bitcast %"class.gfx::Rect"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %10
  %22 = ashr exact i64 %21, 4
  %23 = icmp ult i64 %22, 576460752303423487
  br i1 %23, label %24, label %32

24:                                               ; preds = %17
  %25 = ashr exact i64 %21, 3
  %26 = icmp ult i64 %25, %13
  %27 = select i1 %26, i64 %13, i64 %25
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %37, label %29

29:                                               ; preds = %24
  %30 = icmp ugt i64 %27, 1152921504606846975
  br i1 %30, label %31, label %32

31:                                               ; preds = %29
  tail call void @abort() #10
  unreachable

32:                                               ; preds = %17, %29
  %33 = phi i64 [ %27, %29 ], [ 1152921504606846975, %17 ]
  %34 = shl i64 %33, 4
  %35 = tail call i8* @_Znwm(i64 %34) #11
  %36 = bitcast i8* %35 to %"class.gfx::Rect"*
  br label %37

37:                                               ; preds = %24, %32
  %38 = phi i64 [ %33, %32 ], [ 0, %24 ]
  %39 = phi %"class.gfx::Rect"* [ %36, %32 ], [ null, %24 ]
  %40 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12
  %41 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %38
  %42 = ptrtoint %"class.gfx::Rect"* %41 to i64
  %43 = load i32, i32* %1, align 4
  %44 = load i32, i32* %2, align 4
  %45 = load i32, i32* %3, align 4
  %46 = load i32, i32* %4, align 4
  %47 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %40, i64 0, i32 0, i32 0
  store i32 %43, i32* %47, align 4
  %48 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12, i32 0, i32 1
  store i32 %44, i32* %48, align 4
  %49 = icmp sgt i32 %43, 0
  %50 = icmp sgt i32 %45, 0
  %51 = and i1 %49, %50
  %52 = sub nuw nsw i32 2147483647, %43
  %53 = icmp ult i32 %52, %45
  %54 = and i1 %53, %51
  %55 = select i1 %54, i32 %52, i32 %45
  %56 = icmp sgt i32 %44, 0
  %57 = icmp sgt i32 %46, 0
  %58 = and i1 %56, %57
  %59 = sub nuw nsw i32 2147483647, %44
  %60 = icmp ult i32 %59, %46
  %61 = and i1 %60, %58
  %62 = select i1 %61, i32 %59, i32 %46
  %63 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12, i32 1, i32 0
  %64 = icmp sgt i32 %55, 0
  %65 = select i1 %64, i32 %55, i32 0
  store i32 %65, i32* %63, align 4
  %66 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12, i32 1, i32 1
  %67 = icmp sgt i32 %62, 0
  %68 = select i1 %67, i32 %62, i32 0
  store i32 %68, i32* %66, align 4
  %69 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %40, i64 1
  %70 = ptrtoint %"class.gfx::Rect"* %69 to i64
  %71 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %72 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %71, align 8
  %73 = load i64, i64* %7, align 8
  %74 = ptrtoint %"class.gfx::Rect"* %72 to i64
  %75 = sub i64 %73, %74
  %76 = ashr exact i64 %75, 4
  %77 = sub nsw i64 0, %76
  %78 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %40, i64 %77
  %79 = ptrtoint %"class.gfx::Rect"* %78 to i64
  %80 = icmp sgt i64 %75, 0
  br i1 %80, label %81, label %85

81:                                               ; preds = %37
  %82 = bitcast %"class.gfx::Rect"* %78 to i8*
  %83 = bitcast %"class.gfx::Rect"* %72 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %82, i8* align 4 %83, i64 %75, i1 false) #9
  %84 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %71, align 8
  br label %85

85:                                               ; preds = %37, %81
  %86 = phi %"class.gfx::Rect"* [ %72, %37 ], [ %84, %81 ]
  store i64 %79, i64* %9, align 8
  store i64 %70, i64* %7, align 8
  store i64 %42, i64* %19, align 8
  %87 = icmp eq %"class.gfx::Rect"* %86, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %85
  %89 = bitcast %"class.gfx::Rect"* %86 to i8*
  tail call void @_ZdlPv(i8* %89) #11
  br label %90

90:                                               ; preds = %85, %88
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJiiiRKiEEEvDpOT_(%"class.std::__1::vector"*, i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #5 comdat align 2 {
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.gfx::Rect"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector"* %0 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = ashr exact i64 %11, 4
  %13 = add nsw i64 %12, 1
  %14 = icmp ugt i64 %13, 1152921504606846975
  br i1 %14, label %15, label %17

15:                                               ; preds = %5
  %16 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %16) #10
  unreachable

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %19 = bitcast %"class.gfx::Rect"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %10
  %22 = ashr exact i64 %21, 4
  %23 = icmp ult i64 %22, 576460752303423487
  br i1 %23, label %24, label %32

24:                                               ; preds = %17
  %25 = ashr exact i64 %21, 3
  %26 = icmp ult i64 %25, %13
  %27 = select i1 %26, i64 %13, i64 %25
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %37, label %29

29:                                               ; preds = %24
  %30 = icmp ugt i64 %27, 1152921504606846975
  br i1 %30, label %31, label %32

31:                                               ; preds = %29
  tail call void @abort() #10
  unreachable

32:                                               ; preds = %17, %29
  %33 = phi i64 [ %27, %29 ], [ 1152921504606846975, %17 ]
  %34 = shl i64 %33, 4
  %35 = tail call i8* @_Znwm(i64 %34) #11
  %36 = bitcast i8* %35 to %"class.gfx::Rect"*
  br label %37

37:                                               ; preds = %24, %32
  %38 = phi i64 [ %33, %32 ], [ 0, %24 ]
  %39 = phi %"class.gfx::Rect"* [ %36, %32 ], [ null, %24 ]
  %40 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12
  %41 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %38
  %42 = ptrtoint %"class.gfx::Rect"* %41 to i64
  %43 = load i32, i32* %1, align 4
  %44 = load i32, i32* %2, align 4
  %45 = load i32, i32* %3, align 4
  %46 = load i32, i32* %4, align 4
  %47 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %40, i64 0, i32 0, i32 0
  store i32 %43, i32* %47, align 4
  %48 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12, i32 0, i32 1
  store i32 %44, i32* %48, align 4
  %49 = icmp sgt i32 %43, 0
  %50 = icmp sgt i32 %45, 0
  %51 = and i1 %49, %50
  %52 = sub nuw nsw i32 2147483647, %43
  %53 = icmp ult i32 %52, %45
  %54 = and i1 %53, %51
  %55 = select i1 %54, i32 %52, i32 %45
  %56 = icmp sgt i32 %44, 0
  %57 = icmp sgt i32 %46, 0
  %58 = and i1 %56, %57
  %59 = sub nuw nsw i32 2147483647, %44
  %60 = icmp ult i32 %59, %46
  %61 = and i1 %60, %58
  %62 = select i1 %61, i32 %59, i32 %46
  %63 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12, i32 1, i32 0
  %64 = icmp sgt i32 %55, 0
  %65 = select i1 %64, i32 %55, i32 0
  store i32 %65, i32* %63, align 4
  %66 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12, i32 1, i32 1
  %67 = icmp sgt i32 %62, 0
  %68 = select i1 %67, i32 %62, i32 0
  store i32 %68, i32* %66, align 4
  %69 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %40, i64 1
  %70 = ptrtoint %"class.gfx::Rect"* %69 to i64
  %71 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %72 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %71, align 8
  %73 = load i64, i64* %7, align 8
  %74 = ptrtoint %"class.gfx::Rect"* %72 to i64
  %75 = sub i64 %73, %74
  %76 = ashr exact i64 %75, 4
  %77 = sub nsw i64 0, %76
  %78 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %40, i64 %77
  %79 = ptrtoint %"class.gfx::Rect"* %78 to i64
  %80 = icmp sgt i64 %75, 0
  br i1 %80, label %81, label %85

81:                                               ; preds = %37
  %82 = bitcast %"class.gfx::Rect"* %78 to i8*
  %83 = bitcast %"class.gfx::Rect"* %72 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %82, i8* align 4 %83, i64 %75, i1 false) #9
  %84 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %71, align 8
  br label %85

85:                                               ; preds = %37, %81
  %86 = phi %"class.gfx::Rect"* [ %72, %37 ], [ %84, %81 ]
  store i64 %79, i64* %9, align 8
  store i64 %70, i64* %7, align 8
  store i64 %42, i64* %19, align 8
  %87 = icmp eq %"class.gfx::Rect"* %86, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %85
  %89 = bitcast %"class.gfx::Rect"* %86 to i8*
  tail call void @_ZdlPv(i8* %89) #11
  br label %90

90:                                               ; preds = %85, %88
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJiRiiiEEEvDpOT_(%"class.std::__1::vector"*, i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #5 comdat align 2 {
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.gfx::Rect"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector"* %0 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = ashr exact i64 %11, 4
  %13 = add nsw i64 %12, 1
  %14 = icmp ugt i64 %13, 1152921504606846975
  br i1 %14, label %15, label %17

15:                                               ; preds = %5
  %16 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %16) #10
  unreachable

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %19 = bitcast %"class.gfx::Rect"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %10
  %22 = ashr exact i64 %21, 4
  %23 = icmp ult i64 %22, 576460752303423487
  br i1 %23, label %24, label %32

24:                                               ; preds = %17
  %25 = ashr exact i64 %21, 3
  %26 = icmp ult i64 %25, %13
  %27 = select i1 %26, i64 %13, i64 %25
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %37, label %29

29:                                               ; preds = %24
  %30 = icmp ugt i64 %27, 1152921504606846975
  br i1 %30, label %31, label %32

31:                                               ; preds = %29
  tail call void @abort() #10
  unreachable

32:                                               ; preds = %17, %29
  %33 = phi i64 [ %27, %29 ], [ 1152921504606846975, %17 ]
  %34 = shl i64 %33, 4
  %35 = tail call i8* @_Znwm(i64 %34) #11
  %36 = bitcast i8* %35 to %"class.gfx::Rect"*
  br label %37

37:                                               ; preds = %24, %32
  %38 = phi i64 [ %33, %32 ], [ 0, %24 ]
  %39 = phi %"class.gfx::Rect"* [ %36, %32 ], [ null, %24 ]
  %40 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12
  %41 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %38
  %42 = ptrtoint %"class.gfx::Rect"* %41 to i64
  %43 = load i32, i32* %1, align 4
  %44 = load i32, i32* %2, align 4
  %45 = load i32, i32* %3, align 4
  %46 = load i32, i32* %4, align 4
  %47 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %40, i64 0, i32 0, i32 0
  store i32 %43, i32* %47, align 4
  %48 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12, i32 0, i32 1
  store i32 %44, i32* %48, align 4
  %49 = icmp sgt i32 %43, 0
  %50 = icmp sgt i32 %45, 0
  %51 = and i1 %49, %50
  %52 = sub nuw nsw i32 2147483647, %43
  %53 = icmp ult i32 %52, %45
  %54 = and i1 %53, %51
  %55 = select i1 %54, i32 %52, i32 %45
  %56 = icmp sgt i32 %44, 0
  %57 = icmp sgt i32 %46, 0
  %58 = and i1 %56, %57
  %59 = sub nuw nsw i32 2147483647, %44
  %60 = icmp ult i32 %59, %46
  %61 = and i1 %60, %58
  %62 = select i1 %61, i32 %59, i32 %46
  %63 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12, i32 1, i32 0
  %64 = icmp sgt i32 %55, 0
  %65 = select i1 %64, i32 %55, i32 0
  store i32 %65, i32* %63, align 4
  %66 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %39, i64 %12, i32 1, i32 1
  %67 = icmp sgt i32 %62, 0
  %68 = select i1 %67, i32 %62, i32 0
  store i32 %68, i32* %66, align 4
  %69 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %40, i64 1
  %70 = ptrtoint %"class.gfx::Rect"* %69 to i64
  %71 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %72 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %71, align 8
  %73 = load i64, i64* %7, align 8
  %74 = ptrtoint %"class.gfx::Rect"* %72 to i64
  %75 = sub i64 %73, %74
  %76 = ashr exact i64 %75, 4
  %77 = sub nsw i64 0, %76
  %78 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %40, i64 %77
  %79 = ptrtoint %"class.gfx::Rect"* %78 to i64
  %80 = icmp sgt i64 %75, 0
  br i1 %80, label %81, label %85

81:                                               ; preds = %37
  %82 = bitcast %"class.gfx::Rect"* %78 to i8*
  %83 = bitcast %"class.gfx::Rect"* %72 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %82, i8* align 4 %83, i64 %75, i1 false) #9
  %84 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %71, align 8
  br label %85

85:                                               ; preds = %37, %81
  %86 = phi %"class.gfx::Rect"* [ %72, %37 ], [ %84, %81 ]
  store i64 %79, i64* %9, align 8
  store i64 %70, i64* %7, align 8
  store i64 %42, i64* %19, align 8
  %87 = icmp eq %"class.gfx::Rect"* %86, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %85
  %89 = bitcast %"class.gfx::Rect"* %86 to i8*
  tail call void @_ZdlPv(i8* %89) #11
  br label %90

90:                                               ; preds = %85, %88
  ret void
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
