; ModuleID = 'gen/content/common/media/media_log_records.mojom-test-utils.cc'
source_filename = "gen/content/common/media/media_log_records.mojom-test-utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.content::mojom::MediaInternalLogRecordsAsyncWaiter" = type { %"class.content::mojom::MediaInternalLogRecords"* }
%"class.content::mojom::MediaInternalLogRecords" = type { i32 (...)** }
%"class.content::mojom::MediaInternalLogRecordsInterceptorForTesting" = type { %"class.content::mojom::MediaInternalLogRecords" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.media::MediaLogRecord"*, %"struct.media::MediaLogRecord"*, %"class.std::__1::__compressed_pair.30" }
%"struct.media::MediaLogRecord" = type { i32, i32, %"class.base::DictionaryValue", %"class.base::TimeTicks" }
%"class.base::DictionaryValue" = type { %"class.base::Value" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.0" }
%"union.absl::variant_internal::DestructibleUnionImpl.0" = type { %"union.absl::variant_internal::DestructibleUnionImpl.1" }
%"union.absl::variant_internal::DestructibleUnionImpl.1" = type { %"union.absl::variant_internal::DestructibleUnionImpl.2" }
%"union.absl::variant_internal::DestructibleUnionImpl.2" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.media::MediaLogRecord"* }

$_ZN7content5mojom23MediaInternalLogRecordsD2Ev = comdat any

$_ZN7content5mojom44MediaInternalLogRecordsInterceptorForTestingD0Ev = comdat any

@_ZTVN7content5mojom44MediaInternalLogRecordsInterceptorForTestingE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.content::mojom::MediaInternalLogRecords"*)* @_ZN7content5mojom23MediaInternalLogRecordsD2Ev to i8*), i8* bitcast (void (%"class.content::mojom::MediaInternalLogRecordsInterceptorForTesting"*)* @_ZN7content5mojom44MediaInternalLogRecordsInterceptorForTestingD0Ev to i8*), i8* bitcast (void (%"class.content::mojom::MediaInternalLogRecordsInterceptorForTesting"*, %"class.std::__1::vector"*)* @_ZN7content5mojom44MediaInternalLogRecordsInterceptorForTesting3LogERKNSt3__16vectorIN5media14MediaLogRecordENS2_9allocatorIS5_EEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN7content5mojom34MediaInternalLogRecordsAsyncWaiterC1EPNS0_23MediaInternalLogRecordsE = hidden unnamed_addr alias void (%"class.content::mojom::MediaInternalLogRecordsAsyncWaiter"*, %"class.content::mojom::MediaInternalLogRecords"*), void (%"class.content::mojom::MediaInternalLogRecordsAsyncWaiter"*, %"class.content::mojom::MediaInternalLogRecords"*)* @_ZN7content5mojom34MediaInternalLogRecordsAsyncWaiterC2EPNS0_23MediaInternalLogRecordsE
@_ZN7content5mojom34MediaInternalLogRecordsAsyncWaiterD1Ev = hidden unnamed_addr alias void (%"class.content::mojom::MediaInternalLogRecordsAsyncWaiter"*), void (%"class.content::mojom::MediaInternalLogRecordsAsyncWaiter"*)* @_ZN7content5mojom34MediaInternalLogRecordsAsyncWaiterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content5mojom44MediaInternalLogRecordsInterceptorForTesting3LogERKNSt3__16vectorIN5media14MediaLogRecordENS2_9allocatorIS5_EEEE(%"class.content::mojom::MediaInternalLogRecordsInterceptorForTesting"*, %"class.std::__1::vector"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.content::mojom::MediaInternalLogRecordsInterceptorForTesting"* %0 to %"class.content::mojom::MediaInternalLogRecords"* (%"class.content::mojom::MediaInternalLogRecordsInterceptorForTesting"*)***
  %4 = load %"class.content::mojom::MediaInternalLogRecords"* (%"class.content::mojom::MediaInternalLogRecordsInterceptorForTesting"*)**, %"class.content::mojom::MediaInternalLogRecords"* (%"class.content::mojom::MediaInternalLogRecordsInterceptorForTesting"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.content::mojom::MediaInternalLogRecords"* (%"class.content::mojom::MediaInternalLogRecordsInterceptorForTesting"*)*, %"class.content::mojom::MediaInternalLogRecords"* (%"class.content::mojom::MediaInternalLogRecordsInterceptorForTesting"*)** %4, i64 3
  %6 = load %"class.content::mojom::MediaInternalLogRecords"* (%"class.content::mojom::MediaInternalLogRecordsInterceptorForTesting"*)*, %"class.content::mojom::MediaInternalLogRecords"* (%"class.content::mojom::MediaInternalLogRecordsInterceptorForTesting"*)** %5, align 8
  %7 = tail call %"class.content::mojom::MediaInternalLogRecords"* %6(%"class.content::mojom::MediaInternalLogRecordsInterceptorForTesting"* %0) #5
  %8 = bitcast %"class.content::mojom::MediaInternalLogRecords"* %7 to void (%"class.content::mojom::MediaInternalLogRecords"*, %"class.std::__1::vector"*)***
  %9 = load void (%"class.content::mojom::MediaInternalLogRecords"*, %"class.std::__1::vector"*)**, void (%"class.content::mojom::MediaInternalLogRecords"*, %"class.std::__1::vector"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.content::mojom::MediaInternalLogRecords"*, %"class.std::__1::vector"*)*, void (%"class.content::mojom::MediaInternalLogRecords"*, %"class.std::__1::vector"*)** %9, i64 2
  %11 = load void (%"class.content::mojom::MediaInternalLogRecords"*, %"class.std::__1::vector"*)*, void (%"class.content::mojom::MediaInternalLogRecords"*, %"class.std::__1::vector"*)** %10, align 8
  tail call void %11(%"class.content::mojom::MediaInternalLogRecords"* %7, %"class.std::__1::vector"* dereferenceable(24) %1) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN7content5mojom34MediaInternalLogRecordsAsyncWaiterC2EPNS0_23MediaInternalLogRecordsE(%"class.content::mojom::MediaInternalLogRecordsAsyncWaiter"* nocapture, %"class.content::mojom::MediaInternalLogRecords"*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.content::mojom::MediaInternalLogRecordsAsyncWaiter", %"class.content::mojom::MediaInternalLogRecordsAsyncWaiter"* %0, i64 0, i32 0
  store %"class.content::mojom::MediaInternalLogRecords"* %1, %"class.content::mojom::MediaInternalLogRecords"** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN7content5mojom34MediaInternalLogRecordsAsyncWaiterD2Ev(%"class.content::mojom::MediaInternalLogRecordsAsyncWaiter"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7content5mojom23MediaInternalLogRecordsD2Ev(%"class.content::mojom::MediaInternalLogRecords"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7content5mojom44MediaInternalLogRecordsInterceptorForTestingD0Ev(%"class.content::mojom::MediaInternalLogRecordsInterceptorForTesting"*) unnamed_addr #3 comdat align 2 {
  tail call void @llvm.trap() #6
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
