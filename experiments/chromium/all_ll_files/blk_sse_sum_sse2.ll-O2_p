; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/blk_sse_sum_sse2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/blk_sse_sum_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_get_blk_sse_sum_sse2(i16*, i32, i32, i32, i32*, i64*) local_unnamed_addr #0 {
  store i32 0, i32* %4, align 4
  store i64 0, i64* %5, align 8
  %7 = and i32 %3, 3
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %621

9:                                                ; preds = %6
  switch i32 %2, label %620 [
    i32 4, label %10
    i32 8, label %63
    i32 16, label %63
    i32 32, label %175
    i32 64, label %359
  ]

10:                                               ; preds = %9
  %11 = ashr i32 %3, 1
  %12 = icmp sgt i32 %3, 1
  br i1 %12, label %13, label %39

13:                                               ; preds = %10
  %14 = sext i32 %1 to i64
  %15 = shl nsw i32 %1, 1
  %16 = sext i32 %15 to i64
  br label %19

17:                                               ; preds = %19
  %18 = bitcast <4 x i32> %34 to <16 x i8>
  br label %39

19:                                               ; preds = %19, %13
  %20 = phi i32 [ 0, %13 ], [ %37, %19 ]
  %21 = phi <4 x i32> [ zeroinitializer, %13 ], [ %35, %19 ]
  %22 = phi <4 x i32> [ zeroinitializer, %13 ], [ %34, %19 ]
  %23 = phi i16* [ %0, %13 ], [ %36, %19 ]
  %24 = bitcast i16* %23 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = insertelement <2 x i64> undef, i64 %25, i32 0
  %27 = getelementptr inbounds i16, i16* %23, i64 %14
  %28 = bitcast i16* %27 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = insertelement <2 x i64> %26, i64 %29, i32 1
  %31 = bitcast <2 x i64> %30 to <8 x i16>
  %32 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %31, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %31, <8 x i16> %31) #3
  %34 = add <4 x i32> %32, %22
  %35 = add <4 x i32> %33, %21
  %36 = getelementptr inbounds i16, i16* %23, i64 %16
  %37 = add nuw nsw i32 %20, 1
  %38 = icmp slt i32 %37, %11
  br i1 %38, label %19, label %17

39:                                               ; preds = %10, %17
  %40 = phi <4 x i32> [ %34, %17 ], [ zeroinitializer, %10 ]
  %41 = phi <16 x i8> [ %18, %17 ], [ zeroinitializer, %10 ]
  %42 = phi <4 x i32> [ %35, %17 ], [ zeroinitializer, %10 ]
  %43 = shufflevector <16 x i8> %41, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %44 = bitcast <16 x i8> %43 to <4 x i32>
  %45 = add <4 x i32> %40, %44
  %46 = bitcast <4 x i32> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = bitcast <16 x i8> %47 to <4 x i32>
  %49 = add <4 x i32> %45, %48
  %50 = extractelement <4 x i32> %49, i32 0
  store i32 %50, i32* %4, align 4
  %51 = shufflevector <4 x i32> %42, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %52 = bitcast <4 x i32> %51 to <2 x i64>
  %53 = shufflevector <4 x i32> %42, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %54 = bitcast <4 x i32> %53 to <2 x i64>
  %55 = add <2 x i64> %54, %52
  %56 = bitcast <2 x i64> %55 to <16 x i8>
  %57 = shufflevector <16 x i8> %56, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = bitcast <16 x i8> %57 to <2 x i64>
  %59 = add <2 x i64> %55, %58
  %60 = extractelement <2 x i64> %59, i32 0
  %61 = load i64, i64* %5, align 8
  %62 = add nsw i64 %60, %61
  store i64 %62, i64* %5, align 8
  br label %622

63:                                               ; preds = %9, %9
  %64 = lshr i32 %2, 3
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %148, label %66

66:                                               ; preds = %63
  %67 = icmp sgt i32 %3, 0
  %68 = sext i32 %1 to i64
  %69 = zext i32 %64 to i64
  %70 = add i32 %3, -1
  %71 = and i32 %3, 3
  %72 = icmp ult i32 %70, 3
  %73 = sub i32 %3, %71
  %74 = icmp eq i32 %71, 0
  br label %75

75:                                               ; preds = %107, %66
  %76 = phi i64 [ 0, %66 ], [ %111, %107 ]
  %77 = phi <4 x i32> [ zeroinitializer, %66 ], [ %110, %107 ]
  %78 = phi <2 x i64> [ zeroinitializer, %66 ], [ %109, %107 ]
  %79 = phi <4 x i32> [ zeroinitializer, %66 ], [ %108, %107 ]
  br i1 %67, label %80, label %107

80:                                               ; preds = %75
  %81 = shl i64 %76, 3
  %82 = getelementptr inbounds i16, i16* %0, i64 %81
  br i1 %72, label %83, label %113

83:                                               ; preds = %113, %80
  %84 = phi <4 x i32> [ undef, %80 ], [ %143, %113 ]
  %85 = phi <4 x i32> [ undef, %80 ], [ %144, %113 ]
  %86 = phi <4 x i32> [ %77, %80 ], [ %144, %113 ]
  %87 = phi <4 x i32> [ %79, %80 ], [ %143, %113 ]
  %88 = phi i16* [ %82, %80 ], [ %145, %113 ]
  br i1 %74, label %103, label %89

89:                                               ; preds = %83, %89
  %90 = phi <4 x i32> [ %99, %89 ], [ %86, %83 ]
  %91 = phi <4 x i32> [ %98, %89 ], [ %87, %83 ]
  %92 = phi i16* [ %100, %89 ], [ %88, %83 ]
  %93 = phi i32 [ %101, %89 ], [ %71, %83 ]
  %94 = bitcast i16* %92 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 1
  %96 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %95, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %97 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %95, <8 x i16> %95) #3
  %98 = add <4 x i32> %96, %91
  %99 = add <4 x i32> %97, %90
  %100 = getelementptr inbounds i16, i16* %92, i64 %68
  %101 = add i32 %93, -1
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %89, !llvm.loop !2

103:                                              ; preds = %89, %83
  %104 = phi <4 x i32> [ %84, %83 ], [ %98, %89 ]
  %105 = phi <4 x i32> [ %85, %83 ], [ %99, %89 ]
  %106 = bitcast <4 x i32> %104 to <2 x i64>
  br label %107

107:                                              ; preds = %103, %75
  %108 = phi <4 x i32> [ %104, %103 ], [ %79, %75 ]
  %109 = phi <2 x i64> [ %106, %103 ], [ %78, %75 ]
  %110 = phi <4 x i32> [ %105, %103 ], [ %77, %75 ]
  %111 = add nuw nsw i64 %76, 1
  %112 = icmp eq i64 %111, %69
  br i1 %112, label %148, label %75

113:                                              ; preds = %80, %113
  %114 = phi <4 x i32> [ %144, %113 ], [ %77, %80 ]
  %115 = phi <4 x i32> [ %143, %113 ], [ %79, %80 ]
  %116 = phi i16* [ %145, %113 ], [ %82, %80 ]
  %117 = phi i32 [ %146, %113 ], [ %73, %80 ]
  %118 = bitcast i16* %116 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 1
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %121 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %119) #3
  %122 = add <4 x i32> %120, %115
  %123 = add <4 x i32> %121, %114
  %124 = getelementptr inbounds i16, i16* %116, i64 %68
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 1
  %127 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %126, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %126, <8 x i16> %126) #3
  %129 = add <4 x i32> %127, %122
  %130 = add <4 x i32> %128, %123
  %131 = getelementptr inbounds i16, i16* %124, i64 %68
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 1
  %134 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %133, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %135 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %133, <8 x i16> %133) #3
  %136 = add <4 x i32> %134, %129
  %137 = add <4 x i32> %135, %130
  %138 = getelementptr inbounds i16, i16* %131, i64 %68
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 1
  %141 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %140, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %142 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %140, <8 x i16> %140) #3
  %143 = add <4 x i32> %141, %136
  %144 = add <4 x i32> %142, %137
  %145 = getelementptr inbounds i16, i16* %138, i64 %68
  %146 = add i32 %117, -4
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %83, label %113

148:                                              ; preds = %107, %63
  %149 = phi <4 x i32> [ zeroinitializer, %63 ], [ %108, %107 ]
  %150 = phi <2 x i64> [ zeroinitializer, %63 ], [ %109, %107 ]
  %151 = phi <4 x i32> [ zeroinitializer, %63 ], [ %110, %107 ]
  %152 = bitcast <2 x i64> %150 to <16 x i8>
  %153 = shufflevector <16 x i8> %152, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %154 = bitcast <16 x i8> %153 to <4 x i32>
  %155 = add <4 x i32> %149, %154
  %156 = bitcast <4 x i32> %155 to <16 x i8>
  %157 = shufflevector <16 x i8> %156, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %158 = bitcast <16 x i8> %157 to <4 x i32>
  %159 = add <4 x i32> %155, %158
  %160 = extractelement <4 x i32> %159, i32 0
  %161 = load i32, i32* %4, align 4
  %162 = add nsw i32 %160, %161
  store i32 %162, i32* %4, align 4
  %163 = shufflevector <4 x i32> %151, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %164 = bitcast <4 x i32> %163 to <2 x i64>
  %165 = shufflevector <4 x i32> %151, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %166 = bitcast <4 x i32> %165 to <2 x i64>
  %167 = add <2 x i64> %166, %164
  %168 = bitcast <2 x i64> %167 to <16 x i8>
  %169 = shufflevector <16 x i8> %168, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %170 = bitcast <16 x i8> %169 to <2 x i64>
  %171 = add <2 x i64> %167, %170
  %172 = extractelement <2 x i64> %171, i32 0
  %173 = load i64, i64* %5, align 8
  %174 = add nsw i64 %172, %173
  store i64 %174, i64* %5, align 8
  br label %622

175:                                              ; preds = %9
  %176 = icmp slt i32 %3, 33
  br i1 %176, label %177, label %283

177:                                              ; preds = %175
  %178 = icmp sgt i32 %3, 0
  %179 = sext i32 %1 to i64
  %180 = add i32 %3, -1
  %181 = and i32 %3, 3
  %182 = icmp ult i32 %180, 3
  %183 = sub i32 %3, %181
  %184 = icmp eq i32 %181, 0
  br label %185

185:                                              ; preds = %218, %177
  %186 = phi i64 [ 0, %177 ], [ %222, %218 ]
  %187 = phi <4 x i32> [ zeroinitializer, %177 ], [ %221, %218 ]
  %188 = phi <2 x i64> [ zeroinitializer, %177 ], [ %220, %218 ]
  %189 = phi <4 x i32> [ zeroinitializer, %177 ], [ %219, %218 ]
  br i1 %178, label %190, label %218

190:                                              ; preds = %185
  %191 = shl i64 %186, 3
  %192 = and i64 %191, 4294967288
  %193 = getelementptr inbounds i16, i16* %0, i64 %192
  br i1 %182, label %194, label %224

194:                                              ; preds = %224, %190
  %195 = phi <4 x i32> [ undef, %190 ], [ %254, %224 ]
  %196 = phi <4 x i32> [ undef, %190 ], [ %255, %224 ]
  %197 = phi <4 x i32> [ %187, %190 ], [ %255, %224 ]
  %198 = phi <4 x i32> [ %189, %190 ], [ %254, %224 ]
  %199 = phi i16* [ %193, %190 ], [ %256, %224 ]
  br i1 %184, label %214, label %200

200:                                              ; preds = %194, %200
  %201 = phi <4 x i32> [ %210, %200 ], [ %197, %194 ]
  %202 = phi <4 x i32> [ %209, %200 ], [ %198, %194 ]
  %203 = phi i16* [ %211, %200 ], [ %199, %194 ]
  %204 = phi i32 [ %212, %200 ], [ %181, %194 ]
  %205 = bitcast i16* %203 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 1
  %207 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %206, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %208 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %206, <8 x i16> %206) #3
  %209 = add <4 x i32> %207, %202
  %210 = add <4 x i32> %208, %201
  %211 = getelementptr inbounds i16, i16* %203, i64 %179
  %212 = add i32 %204, -1
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %214, label %200, !llvm.loop !4

214:                                              ; preds = %200, %194
  %215 = phi <4 x i32> [ %195, %194 ], [ %209, %200 ]
  %216 = phi <4 x i32> [ %196, %194 ], [ %210, %200 ]
  %217 = bitcast <4 x i32> %215 to <2 x i64>
  br label %218

218:                                              ; preds = %214, %185
  %219 = phi <4 x i32> [ %215, %214 ], [ %189, %185 ]
  %220 = phi <2 x i64> [ %217, %214 ], [ %188, %185 ]
  %221 = phi <4 x i32> [ %216, %214 ], [ %187, %185 ]
  %222 = add nuw nsw i64 %186, 1
  %223 = icmp eq i64 %222, 4
  br i1 %223, label %259, label %185

224:                                              ; preds = %190, %224
  %225 = phi <4 x i32> [ %255, %224 ], [ %187, %190 ]
  %226 = phi <4 x i32> [ %254, %224 ], [ %189, %190 ]
  %227 = phi i16* [ %256, %224 ], [ %193, %190 ]
  %228 = phi i32 [ %257, %224 ], [ %183, %190 ]
  %229 = bitcast i16* %227 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 1
  %231 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %230, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %232 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %230, <8 x i16> %230) #3
  %233 = add <4 x i32> %231, %226
  %234 = add <4 x i32> %232, %225
  %235 = getelementptr inbounds i16, i16* %227, i64 %179
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 1
  %238 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %237, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %239 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %237, <8 x i16> %237) #3
  %240 = add <4 x i32> %238, %233
  %241 = add <4 x i32> %239, %234
  %242 = getelementptr inbounds i16, i16* %235, i64 %179
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 1
  %245 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %244, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %246 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %244, <8 x i16> %244) #3
  %247 = add <4 x i32> %245, %240
  %248 = add <4 x i32> %246, %241
  %249 = getelementptr inbounds i16, i16* %242, i64 %179
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 1
  %252 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %251, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %253 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %251, <8 x i16> %251) #3
  %254 = add <4 x i32> %252, %247
  %255 = add <4 x i32> %253, %248
  %256 = getelementptr inbounds i16, i16* %249, i64 %179
  %257 = add i32 %228, -4
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %194, label %224

259:                                              ; preds = %218
  %260 = bitcast <2 x i64> %220 to <16 x i8>
  %261 = shufflevector <16 x i8> %260, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %262 = bitcast <16 x i8> %261 to <4 x i32>
  %263 = add <4 x i32> %219, %262
  %264 = bitcast <4 x i32> %263 to <16 x i8>
  %265 = shufflevector <16 x i8> %264, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %266 = bitcast <16 x i8> %265 to <4 x i32>
  %267 = add <4 x i32> %263, %266
  %268 = extractelement <4 x i32> %267, i32 0
  %269 = load i32, i32* %4, align 4
  %270 = add nsw i32 %269, %268
  store i32 %270, i32* %4, align 4
  %271 = shufflevector <4 x i32> %221, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %272 = bitcast <4 x i32> %271 to <2 x i64>
  %273 = shufflevector <4 x i32> %221, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %274 = bitcast <4 x i32> %273 to <2 x i64>
  %275 = add <2 x i64> %274, %272
  %276 = bitcast <2 x i64> %275 to <16 x i8>
  %277 = shufflevector <16 x i8> %276, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %278 = bitcast <16 x i8> %277 to <2 x i64>
  %279 = add <2 x i64> %275, %278
  %280 = extractelement <2 x i64> %279, i32 0
  %281 = load i64, i64* %5, align 8
  %282 = add nsw i64 %281, %280
  store i64 %282, i64* %5, align 8
  br label %622

283:                                              ; preds = %175
  %284 = sext i32 %1 to i64
  br label %287

285:                                              ; preds = %287
  %286 = getelementptr inbounds i16, i16* %0, i64 8
  br label %756

287:                                              ; preds = %287, %283
  %288 = phi i32 [ 0, %283 ], [ %320, %287 ]
  %289 = phi <4 x i32> [ zeroinitializer, %283 ], [ %318, %287 ]
  %290 = phi <4 x i32> [ zeroinitializer, %283 ], [ %317, %287 ]
  %291 = phi i16* [ %0, %283 ], [ %319, %287 ]
  %292 = bitcast i16* %291 to <8 x i16>*
  %293 = load <8 x i16>, <8 x i16>* %292, align 1
  %294 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %293, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %295 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %293, <8 x i16> %293) #3
  %296 = add <4 x i32> %294, %290
  %297 = add <4 x i32> %295, %289
  %298 = getelementptr inbounds i16, i16* %291, i64 %284
  %299 = bitcast i16* %298 to <8 x i16>*
  %300 = load <8 x i16>, <8 x i16>* %299, align 1
  %301 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %300, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %302 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %300, <8 x i16> %300) #3
  %303 = add <4 x i32> %301, %296
  %304 = add <4 x i32> %302, %297
  %305 = getelementptr inbounds i16, i16* %298, i64 %284
  %306 = bitcast i16* %305 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 1
  %308 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %307, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %309 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %307, <8 x i16> %307) #3
  %310 = add <4 x i32> %308, %303
  %311 = add <4 x i32> %309, %304
  %312 = getelementptr inbounds i16, i16* %305, i64 %284
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 1
  %315 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %314, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %316 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %314, <8 x i16> %314) #3
  %317 = add <4 x i32> %315, %310
  %318 = add <4 x i32> %316, %311
  %319 = getelementptr inbounds i16, i16* %312, i64 %284
  %320 = add nuw nsw i32 %288, 4
  %321 = icmp eq i32 %320, 32
  br i1 %321, label %285, label %287

322:                                              ; preds = %324
  %323 = getelementptr inbounds i16, i16* %891, i64 8
  br label %623

324:                                              ; preds = %324, %865
  %325 = phi i32 [ 0, %865 ], [ %357, %324 ]
  %326 = phi <4 x i32> [ zeroinitializer, %865 ], [ %355, %324 ]
  %327 = phi <4 x i32> [ zeroinitializer, %865 ], [ %354, %324 ]
  %328 = phi i16* [ %891, %865 ], [ %356, %324 ]
  %329 = bitcast i16* %328 to <8 x i16>*
  %330 = load <8 x i16>, <8 x i16>* %329, align 1
  %331 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %330, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %332 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %330, <8 x i16> %330) #3
  %333 = add <4 x i32> %331, %327
  %334 = add <4 x i32> %332, %326
  %335 = getelementptr inbounds i16, i16* %328, i64 %284
  %336 = bitcast i16* %335 to <8 x i16>*
  %337 = load <8 x i16>, <8 x i16>* %336, align 1
  %338 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %337, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %339 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %337, <8 x i16> %337) #3
  %340 = add <4 x i32> %338, %333
  %341 = add <4 x i32> %339, %334
  %342 = getelementptr inbounds i16, i16* %335, i64 %284
  %343 = bitcast i16* %342 to <8 x i16>*
  %344 = load <8 x i16>, <8 x i16>* %343, align 1
  %345 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %344, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %346 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %344, <8 x i16> %344) #3
  %347 = add <4 x i32> %345, %340
  %348 = add <4 x i32> %346, %341
  %349 = getelementptr inbounds i16, i16* %342, i64 %284
  %350 = bitcast i16* %349 to <8 x i16>*
  %351 = load <8 x i16>, <8 x i16>* %350, align 1
  %352 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %351, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %353 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %351, <8 x i16> %351) #3
  %354 = add <4 x i32> %352, %347
  %355 = add <4 x i32> %353, %348
  %356 = getelementptr inbounds i16, i16* %349, i64 %284
  %357 = add nuw nsw i32 %325, 4
  %358 = icmp eq i32 %357, 32
  br i1 %358, label %322, label %324

359:                                              ; preds = %9
  %360 = icmp slt i32 %3, 17
  br i1 %360, label %364, label %361

361:                                              ; preds = %359
  %362 = sext i32 %1 to i64
  %363 = sext i32 %3 to i64
  br label %470

364:                                              ; preds = %359
  %365 = icmp sgt i32 %3, 0
  %366 = sext i32 %1 to i64
  %367 = add i32 %3, -1
  %368 = and i32 %3, 3
  %369 = icmp ult i32 %367, 3
  %370 = sub i32 %3, %368
  %371 = icmp eq i32 %368, 0
  br label %372

372:                                              ; preds = %405, %364
  %373 = phi i64 [ 0, %364 ], [ %409, %405 ]
  %374 = phi <4 x i32> [ zeroinitializer, %364 ], [ %408, %405 ]
  %375 = phi <2 x i64> [ zeroinitializer, %364 ], [ %407, %405 ]
  %376 = phi <4 x i32> [ zeroinitializer, %364 ], [ %406, %405 ]
  br i1 %365, label %377, label %405

377:                                              ; preds = %372
  %378 = shl i64 %373, 3
  %379 = and i64 %378, 4294967288
  %380 = getelementptr inbounds i16, i16* %0, i64 %379
  br i1 %369, label %381, label %411

381:                                              ; preds = %411, %377
  %382 = phi <4 x i32> [ undef, %377 ], [ %441, %411 ]
  %383 = phi <4 x i32> [ undef, %377 ], [ %442, %411 ]
  %384 = phi <4 x i32> [ %374, %377 ], [ %442, %411 ]
  %385 = phi <4 x i32> [ %376, %377 ], [ %441, %411 ]
  %386 = phi i16* [ %380, %377 ], [ %443, %411 ]
  br i1 %371, label %401, label %387

387:                                              ; preds = %381, %387
  %388 = phi <4 x i32> [ %397, %387 ], [ %384, %381 ]
  %389 = phi <4 x i32> [ %396, %387 ], [ %385, %381 ]
  %390 = phi i16* [ %398, %387 ], [ %386, %381 ]
  %391 = phi i32 [ %399, %387 ], [ %368, %381 ]
  %392 = bitcast i16* %390 to <8 x i16>*
  %393 = load <8 x i16>, <8 x i16>* %392, align 1
  %394 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %393, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %395 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %393, <8 x i16> %393) #3
  %396 = add <4 x i32> %394, %389
  %397 = add <4 x i32> %395, %388
  %398 = getelementptr inbounds i16, i16* %390, i64 %366
  %399 = add i32 %391, -1
  %400 = icmp eq i32 %399, 0
  br i1 %400, label %401, label %387, !llvm.loop !5

401:                                              ; preds = %387, %381
  %402 = phi <4 x i32> [ %382, %381 ], [ %396, %387 ]
  %403 = phi <4 x i32> [ %383, %381 ], [ %397, %387 ]
  %404 = bitcast <4 x i32> %402 to <2 x i64>
  br label %405

405:                                              ; preds = %401, %372
  %406 = phi <4 x i32> [ %402, %401 ], [ %376, %372 ]
  %407 = phi <2 x i64> [ %404, %401 ], [ %375, %372 ]
  %408 = phi <4 x i32> [ %403, %401 ], [ %374, %372 ]
  %409 = add nuw nsw i64 %373, 1
  %410 = icmp eq i64 %409, 8
  br i1 %410, label %446, label %372

411:                                              ; preds = %377, %411
  %412 = phi <4 x i32> [ %442, %411 ], [ %374, %377 ]
  %413 = phi <4 x i32> [ %441, %411 ], [ %376, %377 ]
  %414 = phi i16* [ %443, %411 ], [ %380, %377 ]
  %415 = phi i32 [ %444, %411 ], [ %370, %377 ]
  %416 = bitcast i16* %414 to <8 x i16>*
  %417 = load <8 x i16>, <8 x i16>* %416, align 1
  %418 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %417, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %419 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %417, <8 x i16> %417) #3
  %420 = add <4 x i32> %418, %413
  %421 = add <4 x i32> %419, %412
  %422 = getelementptr inbounds i16, i16* %414, i64 %366
  %423 = bitcast i16* %422 to <8 x i16>*
  %424 = load <8 x i16>, <8 x i16>* %423, align 1
  %425 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %424, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %426 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %424, <8 x i16> %424) #3
  %427 = add <4 x i32> %425, %420
  %428 = add <4 x i32> %426, %421
  %429 = getelementptr inbounds i16, i16* %422, i64 %366
  %430 = bitcast i16* %429 to <8 x i16>*
  %431 = load <8 x i16>, <8 x i16>* %430, align 1
  %432 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %431, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %433 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %431, <8 x i16> %431) #3
  %434 = add <4 x i32> %432, %427
  %435 = add <4 x i32> %433, %428
  %436 = getelementptr inbounds i16, i16* %429, i64 %366
  %437 = bitcast i16* %436 to <8 x i16>*
  %438 = load <8 x i16>, <8 x i16>* %437, align 1
  %439 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %438, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %440 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %438, <8 x i16> %438) #3
  %441 = add <4 x i32> %439, %434
  %442 = add <4 x i32> %440, %435
  %443 = getelementptr inbounds i16, i16* %436, i64 %366
  %444 = add i32 %415, -4
  %445 = icmp eq i32 %444, 0
  br i1 %445, label %381, label %411

446:                                              ; preds = %405
  %447 = bitcast <2 x i64> %407 to <16 x i8>
  %448 = shufflevector <16 x i8> %447, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %449 = bitcast <16 x i8> %448 to <4 x i32>
  %450 = add <4 x i32> %406, %449
  %451 = bitcast <4 x i32> %450 to <16 x i8>
  %452 = shufflevector <16 x i8> %451, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %453 = bitcast <16 x i8> %452 to <4 x i32>
  %454 = add <4 x i32> %450, %453
  %455 = extractelement <4 x i32> %454, i32 0
  %456 = load i32, i32* %4, align 4
  %457 = add nsw i32 %456, %455
  store i32 %457, i32* %4, align 4
  %458 = shufflevector <4 x i32> %408, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %459 = bitcast <4 x i32> %458 to <2 x i64>
  %460 = shufflevector <4 x i32> %408, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %461 = bitcast <4 x i32> %460 to <2 x i64>
  %462 = add <2 x i64> %461, %459
  %463 = bitcast <2 x i64> %462 to <16 x i8>
  %464 = shufflevector <16 x i8> %463, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %465 = bitcast <16 x i8> %464 to <2 x i64>
  %466 = add <2 x i64> %462, %465
  %467 = extractelement <2 x i64> %466, i32 0
  %468 = load i64, i64* %5, align 8
  %469 = add nsw i64 %468, %467
  store i64 %469, i64* %5, align 8
  br label %622

470:                                              ; preds = %594, %361
  %471 = phi i64 [ 0, %361 ], [ %618, %594 ]
  %472 = mul nsw i64 %471, %362
  %473 = getelementptr inbounds i16, i16* %0, i64 %472
  br label %474

474:                                              ; preds = %470, %474
  %475 = phi i64 [ %592, %474 ], [ 0, %470 ]
  %476 = phi <4 x i32> [ %591, %474 ], [ zeroinitializer, %470 ]
  %477 = phi <4 x i32> [ %590, %474 ], [ zeroinitializer, %470 ]
  %478 = shl i64 %475, 3
  %479 = and i64 %478, 4294967288
  %480 = getelementptr inbounds i16, i16* %473, i64 %479
  %481 = bitcast i16* %480 to <8 x i16>*
  %482 = load <8 x i16>, <8 x i16>* %481, align 1
  %483 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %482, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %484 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %482, <8 x i16> %482) #3
  %485 = add <4 x i32> %483, %477
  %486 = add <4 x i32> %484, %476
  %487 = getelementptr inbounds i16, i16* %480, i64 %362
  %488 = bitcast i16* %487 to <8 x i16>*
  %489 = load <8 x i16>, <8 x i16>* %488, align 1
  %490 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %489, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %491 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %489, <8 x i16> %489) #3
  %492 = add <4 x i32> %490, %485
  %493 = add <4 x i32> %491, %486
  %494 = getelementptr inbounds i16, i16* %487, i64 %362
  %495 = bitcast i16* %494 to <8 x i16>*
  %496 = load <8 x i16>, <8 x i16>* %495, align 1
  %497 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %496, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %498 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %496, <8 x i16> %496) #3
  %499 = add <4 x i32> %497, %492
  %500 = add <4 x i32> %498, %493
  %501 = getelementptr inbounds i16, i16* %494, i64 %362
  %502 = bitcast i16* %501 to <8 x i16>*
  %503 = load <8 x i16>, <8 x i16>* %502, align 1
  %504 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %503, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %505 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %503, <8 x i16> %503) #3
  %506 = add <4 x i32> %504, %499
  %507 = add <4 x i32> %505, %500
  %508 = getelementptr inbounds i16, i16* %501, i64 %362
  %509 = bitcast i16* %508 to <8 x i16>*
  %510 = load <8 x i16>, <8 x i16>* %509, align 1
  %511 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %510, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %512 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %510, <8 x i16> %510) #3
  %513 = add <4 x i32> %511, %506
  %514 = add <4 x i32> %512, %507
  %515 = getelementptr inbounds i16, i16* %508, i64 %362
  %516 = bitcast i16* %515 to <8 x i16>*
  %517 = load <8 x i16>, <8 x i16>* %516, align 1
  %518 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %517, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %519 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %517, <8 x i16> %517) #3
  %520 = add <4 x i32> %518, %513
  %521 = add <4 x i32> %519, %514
  %522 = getelementptr inbounds i16, i16* %515, i64 %362
  %523 = bitcast i16* %522 to <8 x i16>*
  %524 = load <8 x i16>, <8 x i16>* %523, align 1
  %525 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %524, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %526 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %524, <8 x i16> %524) #3
  %527 = add <4 x i32> %525, %520
  %528 = add <4 x i32> %526, %521
  %529 = getelementptr inbounds i16, i16* %522, i64 %362
  %530 = bitcast i16* %529 to <8 x i16>*
  %531 = load <8 x i16>, <8 x i16>* %530, align 1
  %532 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %531, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %533 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %531, <8 x i16> %531) #3
  %534 = add <4 x i32> %532, %527
  %535 = add <4 x i32> %533, %528
  %536 = getelementptr inbounds i16, i16* %529, i64 %362
  %537 = bitcast i16* %536 to <8 x i16>*
  %538 = load <8 x i16>, <8 x i16>* %537, align 1
  %539 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %538, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %540 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %538, <8 x i16> %538) #3
  %541 = add <4 x i32> %539, %534
  %542 = add <4 x i32> %540, %535
  %543 = getelementptr inbounds i16, i16* %536, i64 %362
  %544 = bitcast i16* %543 to <8 x i16>*
  %545 = load <8 x i16>, <8 x i16>* %544, align 1
  %546 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %545, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %547 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %545, <8 x i16> %545) #3
  %548 = add <4 x i32> %546, %541
  %549 = add <4 x i32> %547, %542
  %550 = getelementptr inbounds i16, i16* %543, i64 %362
  %551 = bitcast i16* %550 to <8 x i16>*
  %552 = load <8 x i16>, <8 x i16>* %551, align 1
  %553 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %552, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %554 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %552, <8 x i16> %552) #3
  %555 = add <4 x i32> %553, %548
  %556 = add <4 x i32> %554, %549
  %557 = getelementptr inbounds i16, i16* %550, i64 %362
  %558 = bitcast i16* %557 to <8 x i16>*
  %559 = load <8 x i16>, <8 x i16>* %558, align 1
  %560 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %559, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %561 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %559, <8 x i16> %559) #3
  %562 = add <4 x i32> %560, %555
  %563 = add <4 x i32> %561, %556
  %564 = getelementptr inbounds i16, i16* %557, i64 %362
  %565 = bitcast i16* %564 to <8 x i16>*
  %566 = load <8 x i16>, <8 x i16>* %565, align 1
  %567 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %566, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %568 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %566, <8 x i16> %566) #3
  %569 = add <4 x i32> %567, %562
  %570 = add <4 x i32> %568, %563
  %571 = getelementptr inbounds i16, i16* %564, i64 %362
  %572 = bitcast i16* %571 to <8 x i16>*
  %573 = load <8 x i16>, <8 x i16>* %572, align 1
  %574 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %573, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %575 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %573, <8 x i16> %573) #3
  %576 = add <4 x i32> %574, %569
  %577 = add <4 x i32> %575, %570
  %578 = getelementptr inbounds i16, i16* %571, i64 %362
  %579 = bitcast i16* %578 to <8 x i16>*
  %580 = load <8 x i16>, <8 x i16>* %579, align 1
  %581 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %580, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %582 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %580, <8 x i16> %580) #3
  %583 = add <4 x i32> %581, %576
  %584 = add <4 x i32> %582, %577
  %585 = getelementptr inbounds i16, i16* %578, i64 %362
  %586 = bitcast i16* %585 to <8 x i16>*
  %587 = load <8 x i16>, <8 x i16>* %586, align 1
  %588 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %587, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %589 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %587, <8 x i16> %587) #3
  %590 = add <4 x i32> %588, %583
  %591 = add <4 x i32> %589, %584
  %592 = add nuw nsw i64 %475, 1
  %593 = icmp eq i64 %592, 8
  br i1 %593, label %594, label %474

594:                                              ; preds = %474
  %595 = bitcast <4 x i32> %590 to <16 x i8>
  %596 = shufflevector <16 x i8> %595, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %597 = bitcast <16 x i8> %596 to <4 x i32>
  %598 = add <4 x i32> %590, %597
  %599 = bitcast <4 x i32> %598 to <16 x i8>
  %600 = shufflevector <16 x i8> %599, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %601 = bitcast <16 x i8> %600 to <4 x i32>
  %602 = add <4 x i32> %598, %601
  %603 = extractelement <4 x i32> %602, i32 0
  %604 = load i32, i32* %4, align 4
  %605 = add nsw i32 %603, %604
  store i32 %605, i32* %4, align 4
  %606 = shufflevector <4 x i32> %591, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %607 = bitcast <4 x i32> %606 to <2 x i64>
  %608 = shufflevector <4 x i32> %591, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %609 = bitcast <4 x i32> %608 to <2 x i64>
  %610 = add <2 x i64> %609, %607
  %611 = bitcast <2 x i64> %610 to <16 x i8>
  %612 = shufflevector <16 x i8> %611, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %613 = bitcast <16 x i8> %612 to <2 x i64>
  %614 = add <2 x i64> %610, %613
  %615 = extractelement <2 x i64> %614, i32 0
  %616 = load i64, i64* %5, align 8
  %617 = add nsw i64 %615, %616
  store i64 %617, i64* %5, align 8
  %618 = add nuw nsw i64 %471, 16
  %619 = icmp slt i64 %618, %363
  br i1 %619, label %470, label %622

620:                                              ; preds = %9
  tail call void @aom_get_blk_sse_sum_c(i16* %0, i32 %1, i32 %2, i32 %3, i32* %4, i64* %5) #3
  br label %622

621:                                              ; preds = %6
  tail call void @aom_get_blk_sse_sum_c(i16* %0, i32 %1, i32 %2, i32 %3, i32* %4, i64* %5) #3
  br label %622

622:                                              ; preds = %594, %39, %148, %259, %732, %446, %620, %621
  ret void

623:                                              ; preds = %623, %322
  %624 = phi i32 [ 0, %322 ], [ %656, %623 ]
  %625 = phi <4 x i32> [ %355, %322 ], [ %654, %623 ]
  %626 = phi <4 x i32> [ %354, %322 ], [ %653, %623 ]
  %627 = phi i16* [ %323, %322 ], [ %655, %623 ]
  %628 = bitcast i16* %627 to <8 x i16>*
  %629 = load <8 x i16>, <8 x i16>* %628, align 1
  %630 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %629, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %631 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %629, <8 x i16> %629) #3
  %632 = add <4 x i32> %630, %626
  %633 = add <4 x i32> %631, %625
  %634 = getelementptr inbounds i16, i16* %627, i64 %284
  %635 = bitcast i16* %634 to <8 x i16>*
  %636 = load <8 x i16>, <8 x i16>* %635, align 1
  %637 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %636, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %638 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %636, <8 x i16> %636) #3
  %639 = add <4 x i32> %637, %632
  %640 = add <4 x i32> %638, %633
  %641 = getelementptr inbounds i16, i16* %634, i64 %284
  %642 = bitcast i16* %641 to <8 x i16>*
  %643 = load <8 x i16>, <8 x i16>* %642, align 1
  %644 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %643, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %645 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %643, <8 x i16> %643) #3
  %646 = add <4 x i32> %644, %639
  %647 = add <4 x i32> %645, %640
  %648 = getelementptr inbounds i16, i16* %641, i64 %284
  %649 = bitcast i16* %648 to <8 x i16>*
  %650 = load <8 x i16>, <8 x i16>* %649, align 1
  %651 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %650, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %652 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %650, <8 x i16> %650) #3
  %653 = add <4 x i32> %651, %646
  %654 = add <4 x i32> %652, %647
  %655 = getelementptr inbounds i16, i16* %648, i64 %284
  %656 = add nuw nsw i32 %624, 4
  %657 = icmp eq i32 %656, 32
  br i1 %657, label %658, label %623

658:                                              ; preds = %623
  %659 = getelementptr inbounds i16, i16* %891, i64 16
  br label %660

660:                                              ; preds = %660, %658
  %661 = phi i32 [ 0, %658 ], [ %693, %660 ]
  %662 = phi <4 x i32> [ %654, %658 ], [ %691, %660 ]
  %663 = phi <4 x i32> [ %653, %658 ], [ %690, %660 ]
  %664 = phi i16* [ %659, %658 ], [ %692, %660 ]
  %665 = bitcast i16* %664 to <8 x i16>*
  %666 = load <8 x i16>, <8 x i16>* %665, align 1
  %667 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %666, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %668 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %666, <8 x i16> %666) #3
  %669 = add <4 x i32> %667, %663
  %670 = add <4 x i32> %668, %662
  %671 = getelementptr inbounds i16, i16* %664, i64 %284
  %672 = bitcast i16* %671 to <8 x i16>*
  %673 = load <8 x i16>, <8 x i16>* %672, align 1
  %674 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %673, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %675 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %673, <8 x i16> %673) #3
  %676 = add <4 x i32> %674, %669
  %677 = add <4 x i32> %675, %670
  %678 = getelementptr inbounds i16, i16* %671, i64 %284
  %679 = bitcast i16* %678 to <8 x i16>*
  %680 = load <8 x i16>, <8 x i16>* %679, align 1
  %681 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %680, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %682 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %680, <8 x i16> %680) #3
  %683 = add <4 x i32> %681, %676
  %684 = add <4 x i32> %682, %677
  %685 = getelementptr inbounds i16, i16* %678, i64 %284
  %686 = bitcast i16* %685 to <8 x i16>*
  %687 = load <8 x i16>, <8 x i16>* %686, align 1
  %688 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %687, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %689 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %687, <8 x i16> %687) #3
  %690 = add <4 x i32> %688, %683
  %691 = add <4 x i32> %689, %684
  %692 = getelementptr inbounds i16, i16* %685, i64 %284
  %693 = add nuw nsw i32 %661, 4
  %694 = icmp eq i32 %693, 32
  br i1 %694, label %695, label %660

695:                                              ; preds = %660
  %696 = getelementptr inbounds i16, i16* %891, i64 24
  br label %697

697:                                              ; preds = %697, %695
  %698 = phi i32 [ 0, %695 ], [ %730, %697 ]
  %699 = phi <4 x i32> [ %691, %695 ], [ %728, %697 ]
  %700 = phi <4 x i32> [ %690, %695 ], [ %727, %697 ]
  %701 = phi i16* [ %696, %695 ], [ %729, %697 ]
  %702 = bitcast i16* %701 to <8 x i16>*
  %703 = load <8 x i16>, <8 x i16>* %702, align 1
  %704 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %703, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %705 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %703, <8 x i16> %703) #3
  %706 = add <4 x i32> %704, %700
  %707 = add <4 x i32> %705, %699
  %708 = getelementptr inbounds i16, i16* %701, i64 %284
  %709 = bitcast i16* %708 to <8 x i16>*
  %710 = load <8 x i16>, <8 x i16>* %709, align 1
  %711 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %710, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %712 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %710, <8 x i16> %710) #3
  %713 = add <4 x i32> %711, %706
  %714 = add <4 x i32> %712, %707
  %715 = getelementptr inbounds i16, i16* %708, i64 %284
  %716 = bitcast i16* %715 to <8 x i16>*
  %717 = load <8 x i16>, <8 x i16>* %716, align 1
  %718 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %717, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %719 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %717, <8 x i16> %717) #3
  %720 = add <4 x i32> %718, %713
  %721 = add <4 x i32> %719, %714
  %722 = getelementptr inbounds i16, i16* %715, i64 %284
  %723 = bitcast i16* %722 to <8 x i16>*
  %724 = load <8 x i16>, <8 x i16>* %723, align 1
  %725 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %724, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %726 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %724, <8 x i16> %724) #3
  %727 = add <4 x i32> %725, %720
  %728 = add <4 x i32> %726, %721
  %729 = getelementptr inbounds i16, i16* %722, i64 %284
  %730 = add nuw nsw i32 %698, 4
  %731 = icmp eq i32 %730, 32
  br i1 %731, label %732, label %697

732:                                              ; preds = %697
  %733 = bitcast <4 x i32> %727 to <16 x i8>
  %734 = shufflevector <16 x i8> %733, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %735 = bitcast <16 x i8> %734 to <4 x i32>
  %736 = add <4 x i32> %727, %735
  %737 = bitcast <4 x i32> %736 to <16 x i8>
  %738 = shufflevector <16 x i8> %737, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %739 = bitcast <16 x i8> %738 to <4 x i32>
  %740 = add <4 x i32> %736, %739
  %741 = extractelement <4 x i32> %740, i32 0
  %742 = load i32, i32* %4, align 4
  %743 = add nsw i32 %742, %741
  store i32 %743, i32* %4, align 4
  %744 = shufflevector <4 x i32> %728, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %745 = bitcast <4 x i32> %744 to <2 x i64>
  %746 = shufflevector <4 x i32> %728, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %747 = bitcast <4 x i32> %746 to <2 x i64>
  %748 = add <2 x i64> %747, %745
  %749 = bitcast <2 x i64> %748 to <16 x i8>
  %750 = shufflevector <16 x i8> %749, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %751 = bitcast <16 x i8> %750 to <2 x i64>
  %752 = add <2 x i64> %748, %751
  %753 = extractelement <2 x i64> %752, i32 0
  %754 = load i64, i64* %5, align 8
  %755 = add nsw i64 %754, %753
  store i64 %755, i64* %5, align 8
  br label %622

756:                                              ; preds = %756, %285
  %757 = phi i32 [ 0, %285 ], [ %789, %756 ]
  %758 = phi <4 x i32> [ %318, %285 ], [ %787, %756 ]
  %759 = phi <4 x i32> [ %317, %285 ], [ %786, %756 ]
  %760 = phi i16* [ %286, %285 ], [ %788, %756 ]
  %761 = bitcast i16* %760 to <8 x i16>*
  %762 = load <8 x i16>, <8 x i16>* %761, align 1
  %763 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %762, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %764 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %762, <8 x i16> %762) #3
  %765 = add <4 x i32> %763, %759
  %766 = add <4 x i32> %764, %758
  %767 = getelementptr inbounds i16, i16* %760, i64 %284
  %768 = bitcast i16* %767 to <8 x i16>*
  %769 = load <8 x i16>, <8 x i16>* %768, align 1
  %770 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %769, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %771 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %769, <8 x i16> %769) #3
  %772 = add <4 x i32> %770, %765
  %773 = add <4 x i32> %771, %766
  %774 = getelementptr inbounds i16, i16* %767, i64 %284
  %775 = bitcast i16* %774 to <8 x i16>*
  %776 = load <8 x i16>, <8 x i16>* %775, align 1
  %777 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %776, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %778 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %776, <8 x i16> %776) #3
  %779 = add <4 x i32> %777, %772
  %780 = add <4 x i32> %778, %773
  %781 = getelementptr inbounds i16, i16* %774, i64 %284
  %782 = bitcast i16* %781 to <8 x i16>*
  %783 = load <8 x i16>, <8 x i16>* %782, align 1
  %784 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %783, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %785 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %783, <8 x i16> %783) #3
  %786 = add <4 x i32> %784, %779
  %787 = add <4 x i32> %785, %780
  %788 = getelementptr inbounds i16, i16* %781, i64 %284
  %789 = add nuw nsw i32 %757, 4
  %790 = icmp eq i32 %789, 32
  br i1 %790, label %791, label %756

791:                                              ; preds = %756
  %792 = getelementptr inbounds i16, i16* %0, i64 16
  br label %793

793:                                              ; preds = %793, %791
  %794 = phi i32 [ 0, %791 ], [ %826, %793 ]
  %795 = phi <4 x i32> [ %787, %791 ], [ %824, %793 ]
  %796 = phi <4 x i32> [ %786, %791 ], [ %823, %793 ]
  %797 = phi i16* [ %792, %791 ], [ %825, %793 ]
  %798 = bitcast i16* %797 to <8 x i16>*
  %799 = load <8 x i16>, <8 x i16>* %798, align 1
  %800 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %799, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %801 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %799, <8 x i16> %799) #3
  %802 = add <4 x i32> %800, %796
  %803 = add <4 x i32> %801, %795
  %804 = getelementptr inbounds i16, i16* %797, i64 %284
  %805 = bitcast i16* %804 to <8 x i16>*
  %806 = load <8 x i16>, <8 x i16>* %805, align 1
  %807 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %806, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %808 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %806, <8 x i16> %806) #3
  %809 = add <4 x i32> %807, %802
  %810 = add <4 x i32> %808, %803
  %811 = getelementptr inbounds i16, i16* %804, i64 %284
  %812 = bitcast i16* %811 to <8 x i16>*
  %813 = load <8 x i16>, <8 x i16>* %812, align 1
  %814 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %813, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %815 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %813, <8 x i16> %813) #3
  %816 = add <4 x i32> %814, %809
  %817 = add <4 x i32> %815, %810
  %818 = getelementptr inbounds i16, i16* %811, i64 %284
  %819 = bitcast i16* %818 to <8 x i16>*
  %820 = load <8 x i16>, <8 x i16>* %819, align 1
  %821 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %820, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %822 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %820, <8 x i16> %820) #3
  %823 = add <4 x i32> %821, %816
  %824 = add <4 x i32> %822, %817
  %825 = getelementptr inbounds i16, i16* %818, i64 %284
  %826 = add nuw nsw i32 %794, 4
  %827 = icmp eq i32 %826, 32
  br i1 %827, label %828, label %793

828:                                              ; preds = %793
  %829 = getelementptr inbounds i16, i16* %0, i64 24
  br label %830

830:                                              ; preds = %830, %828
  %831 = phi i32 [ 0, %828 ], [ %863, %830 ]
  %832 = phi <4 x i32> [ %824, %828 ], [ %861, %830 ]
  %833 = phi <4 x i32> [ %823, %828 ], [ %860, %830 ]
  %834 = phi i16* [ %829, %828 ], [ %862, %830 ]
  %835 = bitcast i16* %834 to <8 x i16>*
  %836 = load <8 x i16>, <8 x i16>* %835, align 1
  %837 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %836, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %838 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %836, <8 x i16> %836) #3
  %839 = add <4 x i32> %837, %833
  %840 = add <4 x i32> %838, %832
  %841 = getelementptr inbounds i16, i16* %834, i64 %284
  %842 = bitcast i16* %841 to <8 x i16>*
  %843 = load <8 x i16>, <8 x i16>* %842, align 1
  %844 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %843, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %845 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %843, <8 x i16> %843) #3
  %846 = add <4 x i32> %844, %839
  %847 = add <4 x i32> %845, %840
  %848 = getelementptr inbounds i16, i16* %841, i64 %284
  %849 = bitcast i16* %848 to <8 x i16>*
  %850 = load <8 x i16>, <8 x i16>* %849, align 1
  %851 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %850, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %852 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %850, <8 x i16> %850) #3
  %853 = add <4 x i32> %851, %846
  %854 = add <4 x i32> %852, %847
  %855 = getelementptr inbounds i16, i16* %848, i64 %284
  %856 = bitcast i16* %855 to <8 x i16>*
  %857 = load <8 x i16>, <8 x i16>* %856, align 1
  %858 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %857, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %859 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %857, <8 x i16> %857) #3
  %860 = add <4 x i32> %858, %853
  %861 = add <4 x i32> %859, %854
  %862 = getelementptr inbounds i16, i16* %855, i64 %284
  %863 = add nuw nsw i32 %831, 4
  %864 = icmp eq i32 %863, 32
  br i1 %864, label %865, label %830

865:                                              ; preds = %830
  %866 = bitcast <4 x i32> %860 to <16 x i8>
  %867 = shufflevector <16 x i8> %866, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %868 = bitcast <16 x i8> %867 to <4 x i32>
  %869 = add <4 x i32> %860, %868
  %870 = bitcast <4 x i32> %869 to <16 x i8>
  %871 = shufflevector <16 x i8> %870, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %872 = bitcast <16 x i8> %871 to <4 x i32>
  %873 = add <4 x i32> %869, %872
  %874 = extractelement <4 x i32> %873, i32 0
  %875 = load i32, i32* %4, align 4
  %876 = add nsw i32 %875, %874
  store i32 %876, i32* %4, align 4
  %877 = shufflevector <4 x i32> %861, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %878 = bitcast <4 x i32> %877 to <2 x i64>
  %879 = shufflevector <4 x i32> %861, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %880 = bitcast <4 x i32> %879 to <2 x i64>
  %881 = add <2 x i64> %880, %878
  %882 = bitcast <2 x i64> %881 to <16 x i8>
  %883 = shufflevector <16 x i8> %882, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %884 = bitcast <16 x i8> %883 to <2 x i64>
  %885 = add <2 x i64> %881, %884
  %886 = extractelement <2 x i64> %885, i32 0
  %887 = load i64, i64* %5, align 8
  %888 = add nsw i64 %887, %886
  store i64 %888, i64* %5, align 8
  %889 = shl nsw i32 %1, 5
  %890 = sext i32 %889 to i64
  %891 = getelementptr inbounds i16, i16* %0, i64 %890
  br label %324
}

declare void @aom_get_blk_sse_sum_c(i16*, i32, i32, i32, i32*, i64*) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
