; ModuleID = '../../third_party/blink/renderer/platform/text/mathml_operator_dictionary.cc'
source_filename = "../../third_party/blink/renderer/platform/text/mathml_operator_dictionary.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::(anonymous namespace)::EntryRange" = type { i16, i8 }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

@_ZN5blink12_GLOBAL__N_123operators_2_ascii_charsE = internal global [19 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0)], align 16
@_ZN5blink12_GLOBAL__N_118compact_dictionaryE = internal constant [224 x %"struct.blink::(anonymous namespace)::EntryRange"] [%"struct.blink::(anonymous namespace)::EntryRange" { i16 -32731, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -32726, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 16427, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 16429, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -32722, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 16431, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -32705, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -16292, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -32674, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -32644, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 16561, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -32585, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -32553, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 16631, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 17186, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31965, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31957, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31953, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31950, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31710, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31677, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 17476, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -15263, i8 3 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 1424, i8 9 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 1436, i8 15 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 1452, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 1455, i8 6 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 1465, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 1468, i8 15 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 1484, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 1488, i8 13 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 1504, i8 15 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 1520, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 1523, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 1525, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 1533, i8 2 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31226, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31218, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 17938, i8 4 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31209, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 17944, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 17956, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 17959, i8 3 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 17974, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 17976, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31169, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 18060, i8 3 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 18067, i8 3 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31081, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 18072, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31079, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 18077, i8 2 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31072, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 18107, i8 2 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 18116, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31035, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 18118, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31033, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -31031, i8 3 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 18126, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 18130, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -30971, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -30304, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -30294, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -30291, i8 4 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 19349, i8 2 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29749, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29747, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 3056, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 19444, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 3061, i8 10 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 3338, i8 6 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 3346, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 3361, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 3406, i8 15 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 3422, i8 3 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 3438, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29311, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29287, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29259, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 19900, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29246, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29239, i8 4 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29224, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29221, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29217, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29214, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29209, i8 6 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 19958, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29192, i8 3 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29155, i8 4 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 20002, i8 12 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29137, i8 8 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 20024, i8 2 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29125, i8 2 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29121, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 20032, i8 15 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -29104, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 20049, i8 15 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 20065, i8 2 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 20186, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -28964, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 20219, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 20221, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -28930, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 20274, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 3909, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 4129, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 20520, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 4139, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 4141, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 20571, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 20603, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 4268, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 4273, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 4914, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 21526, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 5144, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 5148, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 5632, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 5635, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 5639, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -10737, i8 2 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 5650, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 5663, i8 3 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -27093, i8 8 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 5692, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 5822, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -10560, i8 3 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 22280, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 22282, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 5904, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 5913, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 22313, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23410, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 7061, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 7104, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23526, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23528, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23530, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23532, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23534, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23936, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23939, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23941, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23943, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23945, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23947, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23949, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23951, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23953, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23955, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23957, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 23959, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 7579, i8 15 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 7595, i8 4 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 24060, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -8704, i8 10 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -25077, i8 15 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -25061, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 7916, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -8452, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -8449, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 8225, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 8230, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 24617, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 24669, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -24482, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 8288, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 24700, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -24450, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 8360, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -24401, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 8368, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 8370, i8 2 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 8376, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -23866, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -23863, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 8906, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -23859, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 8920, i8 2 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -23844, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 8925, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -23817, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -23806, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 8977, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 8992, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 8997, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 8999, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 9002, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 9010, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 25622, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 9241, i8 2 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 9245, i8 2 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 9266, i8 5 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -23490, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 9303, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 9435, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 26377, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 26379, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -22750, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 26410, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -22604, i8 1 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 10189, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 -22564, i8 5 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 27507, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 27623, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 27625, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 27627, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 27629, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 27631, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 28032, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 28036, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 28038, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 28040, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 28042, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 28044, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 28046, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 28048, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 28050, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 28052, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 28054, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 28056, i8 0 }, %"struct.blink::(anonymous namespace)::EntryRange" { i16 28157, i8 0 }], align 16
@.str = private unnamed_addr constant [3 x i8] c"!!\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"!=\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"&&\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"**\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"*=\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"++\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"+=\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"-=\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"//\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"/=\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c":=\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"<=\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"<>\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"==\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c">=\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"||\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@switch.table._ZN5blink12FindCategoryERKN3WTF6StringENS_28MathMLOperatorDictionaryFormE = private unnamed_addr constant [14 x i8] c"\01\04\04\00\02\05\05\00\03\06\07\00\04\08", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN5blink12FindCategoryERKN3WTF6StringENS_28MathMLOperatorDictionaryFormE(%"class.WTF::String"* dereferenceable(8), i32) local_unnamed_addr #0 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %258, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  switch i32 %10, label %258 [
    i32 1, label %11
    i32 2, label %28
  ]

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  br i1 %15, label %21, label %17

17:                                               ; preds = %11
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  br label %24

21:                                               ; preds = %11
  %22 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %23 = load i16, i16* %22, align 2
  br label %24

24:                                               ; preds = %17, %21
  %25 = phi i16 [ %20, %17 ], [ %23, %21 ]
  %26 = add i16 %25, -800
  %27 = icmp ugt i16 %26, 223
  br i1 %27, label %192, label %258

28:                                               ; preds = %8
  %29 = tail call i32 @_ZNK3WTF6String19CharacterStartingAtEj(%"class.WTF::String"* %0, i32 0) #5
  %30 = or i32 %29, 1
  %31 = icmp eq i32 %30, 126705
  br i1 %31, label %189, label %32

32:                                               ; preds = %28
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %34, label %74, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = icmp ugt i32 %37, 1
  br i1 %38, label %39, label %74

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 1
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %50

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 1
  %46 = bitcast %"class.WTF::StringImpl"* %45 to i16*
  %47 = getelementptr inbounds i16, i16* %46, i64 1
  %48 = load i16, i16* %47, align 2
  %49 = icmp eq i16 %48, 824
  br i1 %49, label %61, label %50

50:                                               ; preds = %39, %44
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load atomic i32, i32* %51 monotonic, align 4
  %53 = and i32 %52, 1
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %74

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 1
  %57 = bitcast %"class.WTF::StringImpl"* %56 to i16*
  %58 = getelementptr inbounds i16, i16* %57, i64 1
  %59 = load i16, i16* %58, align 2
  %60 = icmp eq i16 %59, 8402
  br i1 %60, label %61, label %74

61:                                               ; preds = %55, %44
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 1
  br i1 %65, label %71, label %67

67:                                               ; preds = %61
  %68 = bitcast %"class.WTF::StringImpl"* %66 to i8*
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i16
  br label %192

71:                                               ; preds = %61
  %72 = bitcast %"class.WTF::StringImpl"* %66 to i16*
  %73 = load i16, i16* %72, align 2
  br label %192

74:                                               ; preds = %35, %50, %32, %55
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 1
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 1
  %78 = bitcast %"class.WTF::StringImpl"* %77 to i8*
  %79 = bitcast %"class.WTF::StringImpl"* %77 to i16*
  %80 = getelementptr inbounds i8, i8* %78, i64 1
  %81 = getelementptr inbounds i16, i16* %79, i64 1
  br label %82

82:                                               ; preds = %147, %74
  %83 = phi i64 [ 19, %74 ], [ %149, %147 ]
  %84 = phi i8** [ getelementptr inbounds ([19 x i8*], [19 x i8*]* @_ZN5blink12_GLOBAL__N_123operators_2_ascii_charsE, i64 0, i64 0), %74 ], [ %148, %147 ]
  %85 = lshr i64 %83, 1
  %86 = getelementptr inbounds i8*, i8** %84, i64 %85
  %87 = load i8*, i8** %86, align 8
  %88 = load i8, i8* %87, align 1
  %89 = sext i8 %88 to i32
  br i1 %34, label %102, label %90

90:                                               ; preds = %82
  %91 = load i32, i32* %75, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %102, label %93

93:                                               ; preds = %90
  %94 = load atomic i32, i32* %76 monotonic, align 4
  %95 = and i32 %94, 1
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %100, label %97

97:                                               ; preds = %93
  %98 = load i8, i8* %78, align 1
  %99 = zext i8 %98 to i16
  br label %102

100:                                              ; preds = %93
  %101 = load i16, i16* %79, align 2
  br label %102

102:                                              ; preds = %100, %97, %90, %82
  %103 = phi i16 [ 0, %90 ], [ 0, %82 ], [ %99, %97 ], [ %101, %100 ]
  %104 = zext i16 %103 to i32
  %105 = icmp slt i32 %89, %104
  br i1 %105, label %143, label %106

106:                                              ; preds = %102
  br i1 %34, label %119, label %107

107:                                              ; preds = %106
  %108 = load i32, i32* %75, align 4
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %119, label %110

110:                                              ; preds = %107
  %111 = load atomic i32, i32* %76 monotonic, align 4
  %112 = and i32 %111, 1
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %117, label %114

114:                                              ; preds = %110
  %115 = load i8, i8* %78, align 1
  %116 = zext i8 %115 to i16
  br label %119

117:                                              ; preds = %110
  %118 = load i16, i16* %79, align 2
  br label %119

119:                                              ; preds = %117, %114, %107, %106
  %120 = phi i16 [ 0, %107 ], [ 0, %106 ], [ %116, %114 ], [ %118, %117 ]
  %121 = zext i16 %120 to i32
  %122 = icmp eq i32 %89, %121
  br i1 %122, label %123, label %147

123:                                              ; preds = %119
  %124 = getelementptr inbounds i8, i8* %87, i64 1
  %125 = load i8, i8* %124, align 1
  %126 = sext i8 %125 to i32
  br i1 %34, label %139, label %127

127:                                              ; preds = %123
  %128 = load i32, i32* %75, align 4
  %129 = icmp ugt i32 %128, 1
  br i1 %129, label %130, label %139

130:                                              ; preds = %127
  %131 = load atomic i32, i32* %76 monotonic, align 4
  %132 = and i32 %131, 1
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %137, label %134

134:                                              ; preds = %130
  %135 = load i8, i8* %80, align 1
  %136 = zext i8 %135 to i16
  br label %139

137:                                              ; preds = %130
  %138 = load i16, i16* %81, align 2
  br label %139

139:                                              ; preds = %137, %134, %127, %123
  %140 = phi i16 [ 0, %127 ], [ 0, %123 ], [ %136, %134 ], [ %138, %137 ]
  %141 = zext i16 %140 to i32
  %142 = icmp slt i32 %126, %141
  br i1 %142, label %143, label %147

143:                                              ; preds = %139, %102
  %144 = getelementptr inbounds i8*, i8** %86, i64 1
  %145 = xor i64 %85, -1
  %146 = add i64 %83, %145
  br label %147

147:                                              ; preds = %143, %139, %119
  %148 = phi i8** [ %144, %143 ], [ %84, %139 ], [ %84, %119 ]
  %149 = phi i64 [ %146, %143 ], [ %85, %139 ], [ %85, %119 ]
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %82

151:                                              ; preds = %147
  %152 = icmp eq i8** %148, getelementptr inbounds ([19 x i8*], [19 x i8*]* @_ZN5blink12_GLOBAL__N_123operators_2_ascii_charsE, i64 1, i64 0)
  br i1 %152, label %258, label %153

153:                                              ; preds = %151
  %154 = load i8*, i8** %148, align 8
  %155 = bitcast %"class.WTF::StringView"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %155) #5
  br i1 %34, label %156, label %160

156:                                              ; preds = %153
  %157 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  store i8* null, i8** %157, align 8
  %158 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %159 = bitcast %"class.WTF::StringView"* %3 to i64*
  store i64 %158, i64* %159, align 8
  br label %165

160:                                              ; preds = %153
  %161 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  store %"class.WTF::StringImpl"* %33, %"class.WTF::StringImpl"** %161, align 8
  %162 = load i32, i32* %75, align 4
  %163 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %164 = bitcast i8** %163 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %77, %"class.WTF::StringImpl"** %164, align 8
  br label %165

165:                                              ; preds = %160, %156
  %166 = phi i32 [ %162, %160 ], [ 0, %156 ]
  %167 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  store i32 %166, i32* %167, align 8
  %168 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %168) #5
  %169 = icmp eq i8* %154, null
  br i1 %169, label %176, label %170

170:                                              ; preds = %165
  %171 = tail call i64 @strlen(i8* nonnull %154) #6
  %172 = icmp ult i64 %171, 4294967296
  br i1 %172, label %174, label %173, !prof !2

173:                                              ; preds = %170
  tail call void @llvm.trap() #5
  unreachable

174:                                              ; preds = %170
  %175 = trunc i64 %171 to i32
  br label %176

176:                                              ; preds = %165, %174
  %177 = phi i32 [ %175, %174 ], [ 0, %165 ]
  %178 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %179 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %178, i64* %179, align 8
  %180 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  store i8* %154, i8** %180, align 8
  %181 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 %177, i32* %181, align 8
  %182 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %4) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %168) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %155) #5
  br i1 %182, label %183, label %258

183:                                              ; preds = %176
  %184 = ptrtoint i8** %148 to i64
  %185 = sub i64 %184, ptrtoint ([19 x i8*]* @_ZN5blink12_GLOBAL__N_123operators_2_ascii_charsE to i64)
  %186 = lshr exact i64 %185, 3
  %187 = trunc i64 %186 to i16
  %188 = add i16 %187, 800
  br label %192

189:                                              ; preds = %28
  %190 = icmp eq i32 %1, 2
  %191 = select i1 %190, i8 7, i8 0
  br label %258

192:                                              ; preds = %71, %67, %183, %24
  %193 = phi i16 [ %25, %24 ], [ %73, %71 ], [ %70, %67 ], [ %188, %183 ]
  %194 = icmp eq i16 %193, 0
  br i1 %194, label %258, label %195

195:                                              ; preds = %192
  %196 = icmp eq i32 %1, 1
  br i1 %196, label %197, label %201

197:                                              ; preds = %195
  switch i16 %193, label %198 [
    i16 8706, label %258
    i16 8518, label %258
    i16 8517, label %258
  ]

198:                                              ; preds = %197
  %199 = add i16 %193, -8730
  %200 = icmp ult i16 %199, 3
  br i1 %200, label %258, label %204

201:                                              ; preds = %195
  %202 = icmp eq i32 %1, 0
  br i1 %202, label %203, label %204

203:                                              ; preds = %201
  switch i16 %193, label %204 [
    i16 44, label %258
    i16 58, label %258
    i16 59, label %258
  ]

204:                                              ; preds = %198, %203, %201
  %205 = add i16 %193, -8192
  %206 = icmp ult i16 %205, 3072
  br i1 %206, label %207, label %209

207:                                              ; preds = %204
  %208 = add nsw i16 %193, -7168
  br label %211

209:                                              ; preds = %204
  %210 = icmp ugt i16 %193, 1023
  br i1 %210, label %258, label %211

211:                                              ; preds = %209, %207
  %212 = phi i16 [ %208, %207 ], [ %193, %209 ]
  br i1 %196, label %213, label %215

213:                                              ; preds = %211
  %214 = or i16 %212, 4096
  br label %219

215:                                              ; preds = %211
  %216 = icmp eq i32 %1, 2
  %217 = or i16 %212, 8192
  %218 = select i1 %216, i16 %217, i16 %212
  br label %219

219:                                              ; preds = %215, %213
  %220 = phi i16 [ %214, %213 ], [ %218, %215 ]
  br label %221

221:                                              ; preds = %221, %219
  %222 = phi %"struct.blink::(anonymous namespace)::EntryRange"* [ getelementptr inbounds ([224 x %"struct.blink::(anonymous namespace)::EntryRange"], [224 x %"struct.blink::(anonymous namespace)::EntryRange"]* @_ZN5blink12_GLOBAL__N_118compact_dictionaryE, i64 0, i64 0), %219 ], [ %235, %221 ]
  %223 = phi i64 [ 224, %219 ], [ %234, %221 ]
  %224 = lshr i64 %223, 1
  %225 = getelementptr inbounds %"struct.blink::(anonymous namespace)::EntryRange", %"struct.blink::(anonymous namespace)::EntryRange"* %222, i64 %224
  %226 = bitcast %"struct.blink::(anonymous namespace)::EntryRange"* %225 to i32*
  %227 = load i32, i32* %226, align 4
  %228 = trunc i32 %227 to i16
  %229 = and i16 %228, 16383
  %230 = icmp ugt i16 %229, %220
  %231 = getelementptr inbounds %"struct.blink::(anonymous namespace)::EntryRange", %"struct.blink::(anonymous namespace)::EntryRange"* %225, i64 1
  %232 = xor i64 %224, -1
  %233 = add i64 %223, %232
  %234 = select i1 %230, i64 %224, i64 %233
  %235 = select i1 %230, %"struct.blink::(anonymous namespace)::EntryRange"* %222, %"struct.blink::(anonymous namespace)::EntryRange"* %231
  %236 = icmp eq i64 %234, 0
  br i1 %236, label %237, label %221

237:                                              ; preds = %221
  %238 = icmp eq %"struct.blink::(anonymous namespace)::EntryRange"* %235, getelementptr inbounds ([224 x %"struct.blink::(anonymous namespace)::EntryRange"], [224 x %"struct.blink::(anonymous namespace)::EntryRange"]* @_ZN5blink12_GLOBAL__N_118compact_dictionaryE, i64 0, i64 0)
  br i1 %238, label %258, label %239

239:                                              ; preds = %237
  %240 = zext i16 %220 to i32
  %241 = getelementptr inbounds %"struct.blink::(anonymous namespace)::EntryRange", %"struct.blink::(anonymous namespace)::EntryRange"* %235, i64 -1, i32 0
  %242 = load i16, i16* %241, align 4
  %243 = and i16 %242, 16383
  %244 = zext i16 %243 to i32
  %245 = getelementptr inbounds %"struct.blink::(anonymous namespace)::EntryRange", %"struct.blink::(anonymous namespace)::EntryRange"* %235, i64 -1, i32 1
  %246 = load i8, i8* %245, align 2
  %247 = and i8 %246, 15
  %248 = zext i8 %247 to i32
  %249 = add nuw nsw i32 %248, %244
  %250 = icmp uge i32 %249, %240
  %251 = icmp ult i16 %242, -8192
  %252 = and i1 %250, %251
  br i1 %252, label %253, label %258

253:                                              ; preds = %239
  %254 = lshr i16 %242, 12
  %255 = zext i16 %254 to i64
  %256 = getelementptr inbounds [14 x i8], [14 x i8]* @switch.table._ZN5blink12FindCategoryERKN3WTF6StringENS_28MathMLOperatorDictionaryFormE, i64 0, i64 %255
  %257 = load i8, i8* %256, align 1
  ret i8 %257

258:                                              ; preds = %239, %197, %197, %197, %8, %151, %176, %2, %24, %189, %237, %209, %203, %203, %203, %198, %192
  %259 = phi i8 [ %191, %189 ], [ 0, %192 ], [ 9, %198 ], [ 9, %197 ], [ 10, %203 ], [ 10, %203 ], [ 10, %203 ], [ 0, %209 ], [ 0, %237 ], [ 0, %239 ], [ 0, %24 ], [ 0, %2 ], [ 0, %176 ], [ 0, %151 ], [ 0, %8 ], [ 9, %197 ], [ 9, %197 ]
  ret i8 %259
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZNK3WTF6String19CharacterStartingAtEj(%"class.WTF::String"*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
