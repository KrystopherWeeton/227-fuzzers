; ModuleID = '../../cc/trees/compositor_commit_data.cc'
source_filename = "../../cc/trees/compositor_commit_data.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.cc::CompositorCommitData" = type <{ %"struct.cc::CompositorCommitData::ScrollUpdateInfo", %"class.std::__1::vector", float, i8, i8, [2 x i8], %"class.gfx::Vector2dF", %"class.gfx::Vector2dF", %"struct.cc::ElementId", float, float, %"class.std::__1::vector.1", %"class.std::__1::vector.8", i32, i8, i8, i8, i8, i32, [4 x i8] }>
%"struct.cc::CompositorCommitData::ScrollUpdateInfo" = type { %"struct.cc::ElementId", %"class.gfx::ScrollOffset", %"class.absl::optional" }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.cc::TargetSnapAreaElementIds" }
%"struct.cc::TargetSnapAreaElementIds" = type { %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.cc::CompositorCommitData::ScrollUpdateInfo"*, %"struct.cc::CompositorCommitData::ScrollUpdateInfo"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* }
%"class.gfx::Vector2dF" = type { float, float }
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.cc::CompositorCommitData::ScrollbarsUpdateInfo"*, %"struct.cc::CompositorCommitData::ScrollbarsUpdateInfo"*, %"class.std::__1::__compressed_pair.3" }
%"struct.cc::CompositorCommitData::ScrollbarsUpdateInfo" = type <{ %"struct.cc::ElementId", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.cc::CompositorCommitData::ScrollbarsUpdateInfo"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.cc::SwapPromise"* }
%"class.cc::SwapPromise" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::unique_ptr"* }

@_ZN2cc9ElementId17kInvalidElementIdE = external local_unnamed_addr constant i64, align 8

@_ZN2cc20CompositorCommitDataC1Ev = hidden unnamed_addr alias void (%"struct.cc::CompositorCommitData"*), void (%"struct.cc::CompositorCommitData"*)* @_ZN2cc20CompositorCommitDataC2Ev
@_ZN2cc20CompositorCommitDataD1Ev = hidden unnamed_addr alias void (%"struct.cc::CompositorCommitData"*), void (%"struct.cc::CompositorCommitData"*)* @_ZN2cc20CompositorCommitDataD2Ev
@_ZN2cc20CompositorCommitData16ScrollUpdateInfoC1Ev = hidden unnamed_addr alias void (%"struct.cc::CompositorCommitData::ScrollUpdateInfo"*), void (%"struct.cc::CompositorCommitData::ScrollUpdateInfo"*)* @_ZN2cc20CompositorCommitData16ScrollUpdateInfoC2Ev
@_ZN2cc20CompositorCommitData16ScrollUpdateInfoC1ENS_9ElementIdEN3gfx12ScrollOffsetEN4absl8optionalINS_24TargetSnapAreaElementIdsEEE = hidden unnamed_addr alias void (%"struct.cc::CompositorCommitData::ScrollUpdateInfo"*, i64, <2 x float>, %"class.absl::optional"*), void (%"struct.cc::CompositorCommitData::ScrollUpdateInfo"*, i64, <2 x float>, %"class.absl::optional"*)* @_ZN2cc20CompositorCommitData16ScrollUpdateInfoC2ENS_9ElementIdEN3gfx12ScrollOffsetEN4absl8optionalINS_24TargetSnapAreaElementIdsEEE
@_ZN2cc20CompositorCommitData16ScrollUpdateInfoC1ERKS1_ = hidden unnamed_addr alias void (%"struct.cc::CompositorCommitData::ScrollUpdateInfo"*, %"struct.cc::CompositorCommitData::ScrollUpdateInfo"*), void (%"struct.cc::CompositorCommitData::ScrollUpdateInfo"*, %"struct.cc::CompositorCommitData::ScrollUpdateInfo"*)* @_ZN2cc20CompositorCommitData16ScrollUpdateInfoC2ERKS1_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc20CompositorCommitDataC2Ev(%"struct.cc::CompositorCommitData"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* @_ZN2cc9ElementId17kInvalidElementIdE, align 8
  store i64 %3, i64* %2, align 8
  %4 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 0, i32 1, i32 0
  %5 = bitcast float* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 9, i1 false) #5
  %6 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 1
  %7 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #5
  %8 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 2
  store float 1.000000e+00, float* %8, align 8
  %9 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 3
  store i8 0, i8* %9, align 4
  %10 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 4
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 6, i32 0
  %12 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 8, i32 0
  %13 = bitcast float* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 0, i64 16, i1 false)
  store i64 %3, i64* %12, align 8
  %14 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 9
  %15 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 13
  %16 = bitcast float* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 56, i1 false)
  store i32 3, i32* %15, align 8
  %17 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 14
  store i8 0, i8* %17, align 4
  %18 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 15
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 16
  store i8 0, i8* %19, align 2
  %20 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 18
  store i32 0, i32* %20, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc20CompositorCommitDataD2Ev(%"struct.cc::CompositorCommitData"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  %5 = icmp eq %"class.std::__1::unique_ptr"* %4, null
  br i1 %5, label %29, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.std::__1::unique_ptr"* %4 to i8*
  %8 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 12, i32 0, i32 1
  %9 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %8, align 8
  %10 = icmp eq %"class.std::__1::unique_ptr"* %9, %4
  br i1 %10, label %27, label %11

11:                                               ; preds = %6, %22
  %12 = phi %"class.std::__1::unique_ptr"* [ %13, %22 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 -1
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.cc::SwapPromise"*, %"class.cc::SwapPromise"** %14, align 8
  store %"class.cc::SwapPromise"* null, %"class.cc::SwapPromise"** %14, align 8
  %16 = icmp eq %"class.cc::SwapPromise"* %15, null
  br i1 %16, label %22, label %17

17:                                               ; preds = %11
  %18 = bitcast %"class.cc::SwapPromise"* %15 to void (%"class.cc::SwapPromise"*)***
  %19 = load void (%"class.cc::SwapPromise"*)**, void (%"class.cc::SwapPromise"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.cc::SwapPromise"*)*, void (%"class.cc::SwapPromise"*)** %19, i64 1
  %21 = load void (%"class.cc::SwapPromise"*)*, void (%"class.cc::SwapPromise"*)** %20, align 8
  tail call void %21(%"class.cc::SwapPromise"* nonnull %15) #5
  br label %22

22:                                               ; preds = %17, %11
  %23 = icmp eq %"class.std::__1::unique_ptr"* %13, %4
  br i1 %23, label %24, label %11

24:                                               ; preds = %22
  %25 = bitcast %"class.std::__1::vector.8"* %2 to i8**
  %26 = load i8*, i8** %25, align 8
  br label %27

27:                                               ; preds = %24, %6
  %28 = phi i8* [ %26, %24 ], [ %7, %6 ]
  store %"class.std::__1::unique_ptr"* %4, %"class.std::__1::unique_ptr"** %8, align 8
  tail call void @_ZdlPv(i8* %28) #6
  br label %29

29:                                               ; preds = %1, %27
  %30 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 11, i32 0, i32 0
  %31 = load %"struct.cc::CompositorCommitData::ScrollbarsUpdateInfo"*, %"struct.cc::CompositorCommitData::ScrollbarsUpdateInfo"** %30, align 8
  %32 = icmp eq %"struct.cc::CompositorCommitData::ScrollbarsUpdateInfo"* %31, null
  br i1 %32, label %38, label %33

33:                                               ; preds = %29
  %34 = ptrtoint %"struct.cc::CompositorCommitData::ScrollbarsUpdateInfo"* %31 to i64
  %35 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 11, i32 0, i32 1
  %36 = bitcast %"struct.cc::CompositorCommitData::ScrollbarsUpdateInfo"** %35 to i64*
  store i64 %34, i64* %36, align 8
  %37 = bitcast %"struct.cc::CompositorCommitData::ScrollbarsUpdateInfo"* %31 to i8*
  tail call void @_ZdlPv(i8* %37) #6
  br label %38

38:                                               ; preds = %29, %33
  %39 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 1, i32 0, i32 0
  %40 = load %"struct.cc::CompositorCommitData::ScrollUpdateInfo"*, %"struct.cc::CompositorCommitData::ScrollUpdateInfo"** %39, align 8
  %41 = icmp eq %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %38
  %43 = ptrtoint %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* %40 to i64
  %44 = getelementptr inbounds %"struct.cc::CompositorCommitData", %"struct.cc::CompositorCommitData"* %0, i64 0, i32 1, i32 0, i32 1
  %45 = bitcast %"struct.cc::CompositorCommitData::ScrollUpdateInfo"** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = bitcast %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* %40 to i8*
  tail call void @_ZdlPv(i8* %46) #6
  br label %47

47:                                               ; preds = %38, %42
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2cc20CompositorCommitData16ScrollUpdateInfoC2Ev(%"struct.cc::CompositorCommitData::ScrollUpdateInfo"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"struct.cc::CompositorCommitData::ScrollUpdateInfo", %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* %0, i64 0, i32 0, i32 0
  %3 = load i64, i64* @_ZN2cc9ElementId17kInvalidElementIdE, align 8
  store i64 %3, i64* %2, align 8
  %4 = getelementptr inbounds %"struct.cc::CompositorCommitData::ScrollUpdateInfo", %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* %0, i64 0, i32 1, i32 0
  %5 = bitcast float* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 9, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc20CompositorCommitData16ScrollUpdateInfoC2ENS_9ElementIdEN3gfx12ScrollOffsetEN4absl8optionalINS_24TargetSnapAreaElementIdsEEE(%"struct.cc::CompositorCommitData::ScrollUpdateInfo"* nocapture, i64, <2 x float>, %"class.absl::optional"* nocapture readonly byval(%"class.absl::optional") align 8) unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"struct.cc::CompositorCommitData::ScrollUpdateInfo", %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* %0, i64 0, i32 0, i32 0
  store i64 %1, i64* %5, align 8
  %6 = getelementptr inbounds %"struct.cc::CompositorCommitData::ScrollUpdateInfo", %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* %0, i64 0, i32 1
  %7 = bitcast %"class.gfx::ScrollOffset"* %6 to <2 x float>*
  store <2 x float> %2, <2 x float>* %7, align 8
  %8 = getelementptr inbounds %"struct.cc::CompositorCommitData::ScrollUpdateInfo", %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* nonnull align 8 %9, i64 24, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc20CompositorCommitData16ScrollUpdateInfoC2ERKS1_(%"struct.cc::CompositorCommitData::ScrollUpdateInfo"* nocapture, %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* nocapture readonly dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* %0 to i8*
  %4 = bitcast %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 40, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* @_ZN2cc20CompositorCommitData16ScrollUpdateInfoaSERKS1_(%"struct.cc::CompositorCommitData::ScrollUpdateInfo"* returned, %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* %0 to i8*
  %4 = bitcast %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 40, i1 false)
  ret %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* %0
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
