; ModuleID = '../../third_party/skia/src/ports/SkFontHost_FreeType_common.cpp'
source_filename = "../../third_party/skia/src/ports/SkFontHost_FreeType_common.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.21 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.22 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.std::nothrow_t" = type { i8 }
%class.SkPaint = type <{ %class.sk_sp.6, %class.sk_sp.30, %class.sk_sp.7, %class.sk_sp.31, %class.sk_sp.32, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.6 = type { %class.SkPathEffect* }
%class.SkPathEffect = type opaque
%class.sk_sp.30 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.7 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.31 = type { %class.SkColorFilter* }
%class.SkColorFilter = type opaque
%class.sk_sp.32 = type { %class.SkImageFilter* }
%class.SkImageFilter = type opaque
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%struct.FT_Outline_Funcs_ = type { i32 (%struct.FT_Vector_*, i8*)*, i32 (%struct.FT_Vector_*, i8*)*, i32 (%struct.FT_Vector_*, %struct.FT_Vector_*, i8*)*, i32 (%struct.FT_Vector_*, %struct.FT_Vector_*, %struct.FT_Vector_*, i8*)*, i32, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Opaque_Paint_ = type { i8*, i8 }
%class.SkScalerContext_FreeType_Base = type { %class.SkScalerContext }
%class.SkScalerContext = type { i32 (...)**, %struct.SkScalerContextRec, %class.sk_sp, %class.sk_sp.6, %class.sk_sp.7, i8, %class.SkTMaskPreBlend }
%struct.SkScalerContextRec = type { i32, float, float, float, [2 x [2 x float]], float, float, i32, i8, i8, i8, i8, i8, i8, i16 }
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%class.SkTMaskPreBlend = type { %class.sk_sp.8, i8*, i8*, i8* }
%class.sk_sp.8 = type { %class.SkTMaskGamma* }
%class.SkTMaskGamma = type { %class.SkRefCnt.base, [8 x [256 x i8]], i8, [3 x i8] }
%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_LibraryRec_ = type opaque
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type opaque
%struct.FT_Slot_InternalRec_ = type opaque
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type opaque
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type opaque
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Face_InternalRec_ = type opaque
%class.SkGlyph = type { i16, i16, i16, i16, i8*, %"struct.SkGlyph::PathData"*, float, float, i8, i8, %struct.SkPackedGlyphID }
%"struct.SkGlyph::PathData" = type <{ %"struct.SkGlyph::Intercept"*, %class.SkPath, i8, [7 x i8] }>
%"struct.SkGlyph::Intercept" = type { %"struct.SkGlyph::Intercept"*, [2 x float], [2 x float] }
%class.SkPath = type <{ %class.sk_sp.9, i32, %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", i8, i8 }>
%class.sk_sp.9 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.10, %class.SkTDArray.11, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.10 = type { i8*, i32, i32 }
%class.SkTDArray.11 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.12 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.12 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.13", [3 x i8] }
%"struct.std::__1::atomic.13" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__cxx_atomic_impl.15" }
%"struct.std::__1::__cxx_atomic_impl.15" = type { %"struct.std::__1::__cxx_atomic_base_impl.16" }
%"struct.std::__1::__cxx_atomic_base_impl.16" = type { i8 }
%struct.SkPackedGlyphID = type { i32 }
%class.SkMatrix = type { [9 x float], i32 }
%class.SkTHashSet = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.34" }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* }
%"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot" = type <{ %struct.FT_Opaque_Paint_, i32, [4 x i8] }>
%class.SkBitmap = type { %class.sk_sp.17, %class.SkPixmap, %class.sk_sp.20 }
%class.sk_sp.17 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.18, i32, i32 }
%class.sk_sp.18 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.19, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.19 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.20 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.21, [384 x i64], %class.sk_sp.22, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.24" }
%struct.FT_Color_ = type { i8, i8, i8, i8 }
%struct.FT_LayerIterator_ = type { i32, i32, i8* }
%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%struct.SkSamplingOptions = type { i8, %struct.SkCubicResampler, i32, i32 }
%struct.SkCubicResampler = type { float, float }
%class.sk_sp.33 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"class.(anonymous namespace)::SkFTGeometrySink" = type { %class.SkPath*, i8, %struct.FT_Vector_ }
%struct.FT_COLR_Paint_ = type { i32, %union.anon.40 }
%union.anon.40 = type { %struct.FT_PaintLinearGradient_ }
%struct.FT_PaintLinearGradient_ = type { %struct.FT_ColorLine_, %struct.FT_Vector_, %struct.FT_Vector_, %struct.FT_Vector_ }
%struct.FT_ColorLine_ = type { i32, %struct.FT_ColorStopIterator_ }
%struct.FT_ColorStopIterator_ = type { i32, i32, i8* }
%class.SkScopeExit = type { %"class.std::__1::function" }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*)* }
%class.anon.41 = type { %struct.FT_FaceRec_**, %struct.FT_Color_** }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { float* }
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { i32*, i32*, %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { i32* }
%struct.FT_PaintSolid_ = type { %struct.FT_ColorIndex_ }
%struct.FT_ColorIndex_ = type { i16, i16 }
%class.anon.61 = type { i8 }
%struct.FT_ColorStop_ = type { i16, %struct.FT_ColorIndex_ }
%struct.ColorStop = type { float, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

@__const._ZN29SkScalerContext_FreeType_Base18generateGlyphImageEP11FT_FaceRec_RK7SkGlyphRK8SkMatrix.canvas.1 = private unnamed_addr constant { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.21, [384 x i64], %class.sk_sp.22, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.24" } { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**), %class.SkDeque { i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), %"struct.SkDeque::Block"* inttoptr (i64 -6148914691236517206 to %"struct.SkDeque::Block"*), %"struct.SkDeque::Block"* inttoptr (i64 -6148914691236517206 to %"struct.SkDeque::Block"*), i64 -6148914691236517206, i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766 }, %"class.SkCanvas::MCRec"* inttoptr (i64 -6148914691236517206 to %"class.SkCanvas::MCRec"*), %class.sk_sp.21 { %class.SkMarkerStack* inttoptr (i64 -6148914691236517206 to %class.SkMarkerStack*) }, [384 x i64] [i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206], %class.sk_sp.22 { %class.SkBaseDevice* inttoptr (i64 -6148914691236517206 to %class.SkBaseDevice*) }, %class.SkSurfaceProps { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { %class.SkRasterHandleAllocator* inttoptr (i64 -6148914691236517206 to %class.SkRasterHandleAllocator*) } } }, %class.SkSurface_Base* inttoptr (i64 -6148914691236517206 to %class.SkSurface_Base*), %struct.SkIRect { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %"class.std::__1::unique_ptr.24" { %"class.std::__1::__compressed_pair.25" { %"struct.std::__1::__compressed_pair_elem.26" { %class.SkGlyphRunBuilder* inttoptr (i64 -6148914691236517206 to %class.SkGlyphRunBuilder*) } } } }, align 8
@_ZN6SkOpts7hash_fnE = external local_unnamed_addr global i32 (i8*, i64, i32)*, align 8
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetISC_NS4_17OpaquePaintHasherEEE3$_1FvvEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" zeroinitializer, align 8
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1
@__const._ZN12_GLOBAL__N_117colrv1_draw_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_14FT_COLR_Paint_.colrPaint = private unnamed_addr constant %class.SkPaint <{ %class.sk_sp.6 { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp.30 { %class.SkShader* inttoptr (i64 -6148914691236517206 to %class.SkShader*) }, %class.sk_sp.7 { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.31 { %class.SkColorFilter* inttoptr (i64 -6148914691236517206 to %class.SkColorFilter*) }, %class.sk_sp.32 { %class.SkImageFilter* inttoptr (i64 -6148914691236517206 to %class.SkImageFilter*) }, %struct.SkRGBA4f { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %union.anon { %struct.anon { i32 -1431655766 } }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8
@_ZN12_GLOBAL__N_116SkFTGeometrySink5FuncsE = internal constant %struct.FT_Outline_Funcs_ { i32 (%struct.FT_Vector_*, i8*)* @_ZN12_GLOBAL__N_116SkFTGeometrySink4MoveEPK10FT_Vector_Pv, i32 (%struct.FT_Vector_*, i8*)* @_ZN12_GLOBAL__N_116SkFTGeometrySink4LineEPK10FT_Vector_Pv, i32 (%struct.FT_Vector_*, %struct.FT_Vector_*, i8*)* @_ZN12_GLOBAL__N_116SkFTGeometrySink4QuadEPK10FT_Vector_S3_Pv, i32 (%struct.FT_Vector_*, %struct.FT_Vector_*, %struct.FT_Vector_*, i8*)* @_ZN12_GLOBAL__N_116SkFTGeometrySink5CubicEPK10FT_Vector_S3_S3_Pv, i32 0, i64 0 }, align 8
@switch.table._ZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetIS7_NS_17OpaquePaintHasherEE = private unnamed_addr constant [27 x i32] [i32 0, i32 1024, i32 2048, i32 3072, i32 4096, i32 5120, i32 6144, i32 7168, i32 8192, i32 9216, i32 10240, i32 11264, i32 14336, i32 15360, i32 16384, i32 17408, i32 18432, i32 19456, i32 20480, i32 21504, i32 22528, i32 23552, i32 24576, i32 25600, i32 26624, i32 27648, i32 28672], align 4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZeqRK16FT_Opaque_Paint_S1_(%struct.FT_Opaque_Paint_* nocapture readonly dereferenceable(16), %struct.FT_Opaque_Paint_* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %1, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %4, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %0, i64 0, i32 1
  %10 = load i8, i8* %9, align 8
  %11 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %1, i64 0, i32 1
  %12 = load i8, i8* %11, align 8
  %13 = icmp eq i8 %10, %12
  br label %14

14:                                               ; preds = %8, %2
  %15 = phi i1 [ false, %2 ], [ %13, %8 ]
  ret i1 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN29SkScalerContext_FreeType_Base18generateGlyphImageEP11FT_FaceRec_RK7SkGlyphRK8SkMatrix(%class.SkScalerContext_FreeType_Base* nocapture readonly, %struct.FT_FaceRec_*, %class.SkGlyph* dereferenceable(40), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #1 align 2 {
  %5 = alloca %struct.FT_Opaque_Paint_, align 8
  %6 = alloca %class.SkTHashSet, align 8
  %7 = alloca %struct.SkIRect, align 4
  %8 = alloca { <2 x float>, <2 x float> }, align 8
  %9 = alloca { <2 x float>, <2 x float> }, align 8
  %10 = alloca %class.SkBitmap, align 8
  %11 = alloca %struct.SkImageInfo, align 16
  %12 = alloca %class.SkCanvas, align 8
  %13 = alloca %class.SkPaint, align 8
  %14 = alloca %struct.FT_Color_*, align 8
  %15 = alloca %struct.FT_LayerIterator_, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca %class.SkPath, align 8
  %19 = alloca %struct.SkMask, align 8
  %20 = alloca { i64, i64 }, align 8
  %21 = bitcast { i64, i64 }* %20 to %struct.SkIRect*
  %22 = alloca %struct.FT_BBox_, align 8
  %23 = alloca %struct.FT_Bitmap_, align 8
  %24 = alloca %struct.SkMask, align 8
  %25 = alloca %class.SkBitmap, align 8
  %26 = alloca %struct.SkImageInfo, align 8
  %27 = alloca %struct.SkMask, align 8
  %28 = alloca %class.SkBitmap, align 8
  %29 = alloca %struct.SkImageInfo, align 8
  %30 = alloca %class.SkCanvas, align 8
  %31 = alloca %struct.SkSamplingOptions, align 4
  %32 = alloca %class.sk_sp.33, align 8
  %33 = alloca %struct.SkMask, align 8
  %34 = getelementptr inbounds %class.SkScalerContext_FreeType_Base, %class.SkScalerContext_FreeType_Base* %0, i64 0, i32 0, i32 1, i32 14
  %35 = load i16, i16* %34, align 2
  %36 = and i16 %35, 512
  %37 = icmp ne i16 %36, 0
  %38 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %1, i64 0, i32 21
  %39 = load %struct.FT_GlyphSlotRec_*, %struct.FT_GlyphSlotRec_** %38, align 8
  %40 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %39, i64 0, i32 9
  %41 = load i32, i32* %40, align 8
  switch i32 %41, label %1189 [
    i32 1869968492, label %42
    i32 1651078259, label %777
  ]

42:                                               ; preds = %4
  %43 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %39, i64 0, i32 13
  %44 = and i16 %35, 16
  %45 = icmp eq i16 %44, 0
  br i1 %45, label %56, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 10, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = shl i32 %48, 4
  %50 = and i32 %49, 48
  %51 = lshr i32 %48, 14
  %52 = and i32 %51, 48
  %53 = sub nsw i32 0, %52
  %54 = zext i32 %50 to i64
  %55 = sext i32 %53 to i64
  br label %56

56:                                               ; preds = %42, %46
  %57 = phi i64 [ %54, %46 ], [ 0, %42 ]
  %58 = phi i64 [ %55, %46 ], [ 0, %42 ]
  %59 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 4
  %60 = load i8*, i8** %59, align 8
  %61 = tail call i64 @_ZNK7SkGlyph8rowBytesEv(%class.SkGlyph* %2) #14
  %62 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 1
  %63 = load i16, i16* %62, align 2
  %64 = zext i16 %63 to i64
  %65 = mul i64 %61, %64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 0, i64 %65, i1 false)
  %66 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 8
  %67 = load i8, i8* %66, align 8
  switch i8 %67, label %740 [
    i8 3, label %68
    i8 4, label %212
  ]

68:                                               ; preds = %56
  %69 = bitcast %class.SkBitmap* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %69) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %69, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %10) #14
  %70 = bitcast %struct.SkImageInfo* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #14
  %71 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 0
  %72 = load i16, i16* %71, align 8
  %73 = load i16, i16* %62, align 2
  %74 = zext i16 %73 to i64
  %75 = shl nuw nsw i64 %74, 32
  %76 = zext i16 %72 to i64
  %77 = or i64 %75, %76
  %78 = bitcast %struct.SkImageInfo* %11 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8589934598>, <2 x i64>* %78, align 16, !alias.scope !2
  %79 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %11, i64 0, i32 1
  %80 = bitcast %struct.SkISize* %79 to i64*
  store i64 %77, i64* %80, align 16, !alias.scope !2
  %81 = call i64 @_ZNK7SkGlyph8rowBytesEv(%class.SkGlyph* %2) #14
  %82 = call zeroext i1 @_ZN8SkBitmap7setInfoERK11SkImageInfom(%class.SkBitmap* nonnull %10, %struct.SkImageInfo* nonnull dereferenceable(24) %11, i64 %81) #14
  %83 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %11, i64 0, i32 0, i32 0, i32 0
  %84 = load %class.SkColorSpace*, %class.SkColorSpace** %83, align 16
  %85 = icmp eq %class.SkColorSpace* %84, null
  br i1 %85, label %92, label %86

86:                                               ; preds = %68
  %87 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %84, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = atomicrmw add i32* %87, i32 -1 acq_rel
  %89 = icmp eq i32 %88, 1
  br i1 %89, label %90, label %92

90:                                               ; preds = %86
  %91 = bitcast %class.SkColorSpace* %84 to i8*
  call void @_ZdlPv(i8* %91) #15
  br label %92

92:                                               ; preds = %90, %86, %68
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #14
  %93 = load i8*, i8** %59, align 8
  call void @_ZN8SkBitmap9setPixelsEPv(%class.SkBitmap* nonnull %10, i8* %93) #14
  %94 = bitcast %class.SkCanvas* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3232, i8* nonnull %94) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %94, i8* align 8 bitcast ({ i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.21, [384 x i64], %class.sk_sp.22, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.24" }* @__const._ZN29SkScalerContext_FreeType_Base18generateGlyphImageEP11FT_FaceRec_RK7SkGlyphRK8SkMatrix.canvas.1 to i8*), i64 3232, i1 false)
  call void @_ZN8SkCanvasC1ERK8SkBitmap(%class.SkCanvas* nonnull %12, %class.SkBitmap* nonnull dereferenceable(56) %10) #14
  %95 = bitcast { <2 x float>, <2 x float> }* %8 to %struct.SkRGBA4f*
  %96 = bitcast { <2 x float>, <2 x float> }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %96) #14
  %97 = call { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType3EE9FromColorEj(i32 0) #14
  %98 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %8, i64 0, i32 0
  %99 = extractvalue { <2 x float>, <2 x float> } %97, 0
  store <2 x float> %99, <2 x float>* %98, align 8
  %100 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %8, i64 0, i32 1
  %101 = extractvalue { <2 x float>, <2 x float> } %97, 1
  store <2 x float> %101, <2 x float>* %100, align 8
  call void @_ZN8SkCanvas9drawColorERK8SkRGBA4fIL11SkAlphaType3EE11SkBlendMode(%class.SkCanvas* nonnull %12, %struct.SkRGBA4f* nonnull dereferenceable(16) %95, i32 1) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %96) #14
  %102 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 3
  %103 = load i16, i16* %102, align 2
  %104 = sext i16 %103 to i32
  %105 = sub nsw i32 0, %104
  %106 = sitofp i32 %105 to float
  %107 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 2
  %108 = load i16, i16* %107, align 4
  %109 = sext i16 %108 to i32
  %110 = sub nsw i32 0, %109
  %111 = sitofp i32 %110 to float
  call void @_ZN8SkCanvas9translateEff(%class.SkCanvas* nonnull %12, float %106, float %111) #14
  %112 = load i16, i16* %34, align 2
  %113 = and i16 %112, 16
  %114 = icmp eq i16 %113, 0
  br i1 %114, label %126, label %115

115:                                              ; preds = %92
  %116 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 10, i32 0
  %117 = load i32, i32* %116, align 4
  %118 = shl i32 %117, 14
  %119 = and i32 %118, 49152
  %120 = sitofp i32 %119 to float
  %121 = fmul float %120, 0x3EF0000000000000
  %122 = lshr i32 %117, 4
  %123 = and i32 %122, 49152
  %124 = sitofp i32 %123 to float
  %125 = fmul float %124, 0x3EF0000000000000
  call void @_ZN8SkCanvas9translateEff(%class.SkCanvas* nonnull %12, float %121, float %125) #14
  br label %126

126:                                              ; preds = %92, %115
  %127 = bitcast %class.SkPaint* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %127) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %127, i8* align 8 bitcast (%class.SkPaint* @__const._ZN12_GLOBAL__N_117colrv1_draw_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_14FT_COLR_Paint_.colrPaint to i8*), i64 72, i1 false)
  call void @_ZN7SkPaintC1Ev(%class.SkPaint* nonnull %13) #14
  %128 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %13, i64 0, i32 8, i32 0, i32 0
  %129 = load i32, i32* %128, align 8
  %130 = or i32 %129, 1
  store i32 %130, i32* %128, align 8
  %131 = bitcast %struct.FT_Color_** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %131) #14
  store %struct.FT_Color_* inttoptr (i64 -6148914691236517206 to %struct.FT_Color_*), %struct.FT_Color_** %14, align 8
  %132 = call i32 @FT_Palette_Select(%struct.FT_FaceRec_* %1, i16 zeroext 0, %struct.FT_Color_** nonnull %14) #14
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %211

134:                                              ; preds = %126
  %135 = load %struct.FT_Color_*, %struct.FT_Color_** %14, align 8
  %136 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 10, i32 0
  %137 = load i32, i32* %136, align 4
  %138 = lshr i32 %137, 2
  %139 = bitcast %struct.FT_Opaque_Paint_* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %139) #14
  %140 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %5, i64 0, i32 1
  %141 = bitcast i8* %140 to i64*
  store i64 -6148914691236517206, i64* %141, align 8
  %142 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %5, i64 0, i32 0
  store i8* null, i8** %142, align 8
  %143 = and i32 %138, 65535
  %144 = call zeroext i8 @FT_Get_Color_Glyph_Paint(%struct.FT_FaceRec_* %1, i32 %143, i32 0, %struct.FT_Opaque_Paint_* nonnull %5) #14
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %157, label %146

146:                                              ; preds = %134
  %147 = bitcast %class.SkTHashSet* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %147) #14
  %148 = getelementptr inbounds %class.SkTHashSet, %class.SkTHashSet* %6, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %147, i8 0, i64 16, i1 false) #14
  %149 = load i8*, i8** %142, align 8
  %150 = load i8, i8* %140, align 8
  %151 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetIS7_NS_17OpaquePaintHasherEE(%class.SkCanvas* nonnull %12, %struct.FT_Color_* %135, %struct.FT_FaceRec_* %1, i8* %149, i8 %150, %class.SkTHashSet* nonnull %6) #14
  %152 = load %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"*, %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"** %148, align 8
  store %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* null, %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"** %148, align 8
  %153 = icmp eq %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %152, null
  br i1 %153, label %156, label %154

154:                                              ; preds = %146
  %155 = bitcast %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %152 to i8*
  call void @_ZdaPv(i8* %155) #15
  br label %156

156:                                              ; preds = %154, %146
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %147) #14
  br label %209

157:                                              ; preds = %134
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %139) #14
  %158 = bitcast %struct.FT_LayerIterator_* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %158) #14
  %159 = getelementptr inbounds %struct.FT_LayerIterator_, %struct.FT_LayerIterator_* %15, i64 0, i32 0
  store i32 -1431655766, i32* %159, align 8
  %160 = getelementptr inbounds %struct.FT_LayerIterator_, %struct.FT_LayerIterator_* %15, i64 0, i32 1
  store i32 -1431655766, i32* %160, align 4
  %161 = getelementptr inbounds %struct.FT_LayerIterator_, %struct.FT_LayerIterator_* %15, i64 0, i32 2
  store i8* null, i8** %161, align 8
  %162 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %162) #14
  store i32 0, i32* %16, align 4
  %163 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %163) #14
  store i32 0, i32* %17, align 4
  %164 = load i32, i32* %136, align 4
  %165 = lshr i32 %164, 2
  %166 = and i32 %165, 65535
  %167 = call zeroext i8 @FT_Get_Color_Glyph_Layer(%struct.FT_FaceRec_* %1, i32 %166, i32* nonnull %16, i32* nonnull %17, %struct.FT_LayerIterator_* nonnull %15) #14
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %208, label %169

169:                                              ; preds = %157
  %170 = bitcast %class.SkPath* %18 to i8*
  %171 = bitcast %class.SkPath* %18 to i8*
  br label %172

172:                                              ; preds = %169, %202
  %173 = load i32, i32* %17, align 4
  %174 = icmp eq i32 %173, 65535
  br i1 %174, label %196, label %175

175:                                              ; preds = %172
  %176 = load %struct.FT_Color_*, %struct.FT_Color_** %14, align 8
  %177 = zext i32 %173 to i64
  %178 = getelementptr inbounds %struct.FT_Color_, %struct.FT_Color_* %176, i64 %177, i32 3
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = getelementptr inbounds %struct.FT_Color_, %struct.FT_Color_* %176, i64 %177, i32 2
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = getelementptr inbounds %struct.FT_Color_, %struct.FT_Color_* %176, i64 %177, i32 1
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = getelementptr inbounds %struct.FT_Color_, %struct.FT_Color_* %176, i64 %177, i32 0
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = shl nuw i32 %180, 24
  %191 = shl nuw nsw i32 %183, 16
  %192 = or i32 %191, %190
  %193 = shl nuw nsw i32 %186, 8
  %194 = or i32 %192, %193
  %195 = or i32 %194, %189
  br label %196

196:                                              ; preds = %172, %175
  %197 = phi i32 [ %195, %175 ], [ -16777216, %172 ]
  call void @_ZN7SkPaint8setColorEj(%class.SkPaint* nonnull %13, i32 %197) #14
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %170) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %171, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %18) #14
  %198 = load i32, i32* %16, align 4
  %199 = trunc i32 %198 to i16
  %200 = call zeroext i1 @_ZN29SkScalerContext_FreeType_Base16generateFacePathEP11FT_FaceRec_tP6SkPath(%class.SkScalerContext_FreeType_Base* undef, %struct.FT_FaceRec_* %1, i16 zeroext %199, %class.SkPath* nonnull %18)
  br i1 %200, label %201, label %202

201:                                              ; preds = %196
  call void @_ZN8SkCanvas8drawPathERK6SkPathRK7SkPaint(%class.SkCanvas* nonnull %12, %class.SkPath* nonnull dereferenceable(16) %18, %class.SkPaint* nonnull dereferenceable(72) %13) #14
  br label %202

202:                                              ; preds = %201, %196
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %18) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %170) #14
  %203 = load i32, i32* %136, align 4
  %204 = lshr i32 %203, 2
  %205 = and i32 %204, 65535
  %206 = call zeroext i8 @FT_Get_Color_Glyph_Layer(%struct.FT_FaceRec_* %1, i32 %205, i32* nonnull %16, i32* nonnull %17, %struct.FT_LayerIterator_* nonnull %15) #14
  %207 = icmp eq i8 %206, 0
  br i1 %207, label %208, label %172

208:                                              ; preds = %202, %157
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %163) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %162) #14
  br label %209

209:                                              ; preds = %156, %208
  %210 = phi i8* [ %158, %208 ], [ %139, %156 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %210) #14
  br label %211

211:                                              ; preds = %209, %126
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %131) #14
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %13) #14
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %127) #14
  call void @_ZN8SkCanvasD1Ev(%class.SkCanvas* nonnull %12) #14
  call void @llvm.lifetime.end.p0i8(i64 3232, i8* nonnull %94) #14
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %10) #14
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %69) #14
  br label %739

212:                                              ; preds = %56
  tail call void @FT_Outline_Translate(%struct.FT_Outline_* %43, i64 %57, i64 %58) #14
  %213 = load %struct.FT_GlyphSlotRec_*, %struct.FT_GlyphSlotRec_** %38, align 8
  %214 = select i1 %37, i32 4, i32 3
  %215 = tail call i32 @FT_Render_Glyph(%struct.FT_GlyphSlotRec_* %213, i32 %214) #14
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %739

217:                                              ; preds = %212
  %218 = bitcast %struct.SkMask* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %218) #14
  %219 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %19, i64 0, i32 0
  %220 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %19, i64 0, i32 1
  %221 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %220, i64 0, i32 0
  %222 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %19, i64 0, i32 1, i32 1
  %223 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %19, i64 0, i32 1, i32 2
  %224 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %19, i64 0, i32 1, i32 3
  %225 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %19, i64 0, i32 2
  %226 = bitcast %struct.SkMask* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %226, i8 -86, i64 32, i1 false)
  call void @_ZNK7SkGlyph4maskEv(%struct.SkMask* nonnull sret %19, %class.SkGlyph* %2) #14
  %227 = load %struct.FT_GlyphSlotRec_*, %struct.FT_GlyphSlotRec_** %38, align 8
  %228 = bitcast { i64, i64 }* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %228) #14
  %229 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %227, i64 0, i32 11
  %230 = load i32, i32* %229, align 8
  %231 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %227, i64 0, i32 12
  %232 = load i32, i32* %231, align 4
  %233 = sub nsw i32 0, %232
  %234 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %227, i64 0, i32 10
  %235 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %227, i64 0, i32 10, i32 1
  %236 = load i32, i32* %235, align 4
  %237 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %234, i64 0, i32 0
  %238 = load i32, i32* %237, align 8
  %239 = sext i32 %230 to i64
  %240 = sext i32 %236 to i64
  %241 = add nsw i64 %240, %239
  %242 = icmp slt i64 %241, 2147483647
  %243 = select i1 %242, i64 %241, i64 2147483647
  %244 = icmp sgt i64 %243, -2147483647
  %245 = select i1 %244, i64 %243, i64 -2147483647
  %246 = sext i32 %233 to i64
  %247 = sext i32 %238 to i64
  %248 = add nsw i64 %247, %246
  %249 = icmp slt i64 %248, 2147483647
  %250 = select i1 %249, i64 %248, i64 2147483647
  %251 = icmp sgt i64 %250, -2147483647
  %252 = select i1 %251, i64 %250, i64 -2147483647
  %253 = zext i32 %233 to i64
  %254 = shl nuw i64 %253, 32
  %255 = zext i32 %230 to i64
  %256 = or i64 %254, %255
  %257 = shl nsw i64 %252, 32
  %258 = and i64 %245, 4294967295
  %259 = or i64 %257, %258
  %260 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i64 0, i32 0
  store i64 %256, i64* %260, align 8
  %261 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i64 0, i32 1
  store i64 %259, i64* %261, align 8
  %262 = bitcast %struct.SkIRect* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %262) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %262, i8 -86, i64 16, i1 false) #14
  %263 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %7, %struct.SkIRect* dereferenceable(16) %220, %struct.SkIRect* nonnull dereferenceable(16) %21) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %262) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %228) #14
  br i1 %263, label %264, label %738

264:                                              ; preds = %217
  %265 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %227, i64 0, i32 10, i32 3
  %266 = load i8*, i8** %265, align 8
  %267 = load i32, i32* %231, align 4
  %268 = sub nsw i32 0, %267
  %269 = load i32, i32* %222, align 4
  %270 = icmp sgt i32 %269, %268
  br i1 %270, label %271, label %281

271:                                              ; preds = %264
  %272 = add nsw i32 %269, %267
  %273 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %227, i64 0, i32 10, i32 2
  %274 = load i32, i32* %273, align 8
  %275 = mul nsw i32 %274, %272
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i8, i8* %266, i64 %276
  store i8* %277, i8** %265, align 8
  %278 = load i32, i32* %237, align 8
  %279 = sub i32 %278, %272
  store i32 %279, i32* %237, align 8
  %280 = sub nsw i32 0, %269
  store i32 %280, i32* %231, align 4
  br label %281

281:                                              ; preds = %271, %264
  %282 = phi i32 [ %280, %271 ], [ %267, %264 ]
  %283 = phi i8* [ %277, %271 ], [ %266, %264 ]
  %284 = load i32, i32* %229, align 8
  %285 = load i32, i32* %221, align 8
  %286 = icmp sgt i32 %285, %284
  br i1 %286, label %287, label %293

287:                                              ; preds = %281
  %288 = sub nsw i32 %285, %284
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds i8, i8* %283, i64 %289
  store i8* %290, i8** %265, align 8
  %291 = load i32, i32* %235, align 4
  %292 = sub i32 %291, %288
  store i32 %292, i32* %235, align 4
  store i32 %285, i32* %229, align 8
  br label %293

293:                                              ; preds = %287, %281
  %294 = phi i8* [ %290, %287 ], [ %283, %281 ]
  %295 = phi i32 [ %285, %287 ], [ %284, %281 ]
  %296 = sub nsw i32 0, %282
  %297 = icmp slt i32 %269, %296
  br i1 %297, label %298, label %305

298:                                              ; preds = %293
  %299 = load i32, i32* %225, align 8
  %300 = sub nsw i32 %296, %269
  %301 = mul i32 %299, %300
  %302 = load i8*, i8** %219, align 8
  %303 = zext i32 %301 to i64
  %304 = getelementptr inbounds i8, i8* %302, i64 %303
  store i8* %304, i8** %219, align 8
  store i32 %296, i32* %222, align 4
  br label %305

305:                                              ; preds = %298, %293
  %306 = phi i32 [ %296, %298 ], [ %269, %293 ]
  %307 = icmp sgt i32 %295, %285
  br i1 %307, label %308, label %314

308:                                              ; preds = %305
  %309 = sub nsw i32 %295, %285
  %310 = sext i32 %309 to i64
  %311 = shl nsw i64 %310, 1
  %312 = load i8*, i8** %219, align 8
  %313 = getelementptr inbounds i8, i8* %312, i64 %311
  store i8* %313, i8** %219, align 8
  store i32 %295, i32* %221, align 8
  br label %314

314:                                              ; preds = %308, %305
  %315 = phi i32 [ %295, %308 ], [ %285, %305 ]
  %316 = select i1 %37, i32 3, i32 1
  %317 = select i1 %37, i32 1, i32 3
  %318 = load i32, i32* %224, align 4
  %319 = sub i32 %318, %306
  %320 = mul nsw i32 %319, %316
  %321 = load i32, i32* %237, align 8
  %322 = icmp slt i32 %320, %321
  br i1 %322, label %323, label %324

323:                                              ; preds = %314
  store i32 %320, i32* %237, align 8
  br label %324

324:                                              ; preds = %323, %314
  %325 = phi i32 [ %320, %323 ], [ %321, %314 ]
  %326 = load i32, i32* %223, align 8
  %327 = sub i32 %326, %315
  %328 = mul nsw i32 %327, %317
  %329 = load i32, i32* %235, align 4
  %330 = icmp slt i32 %328, %329
  br i1 %330, label %331, label %332

331:                                              ; preds = %324
  store i32 %328, i32* %235, align 4
  br label %332

332:                                              ; preds = %331, %324
  %333 = phi i32 [ %328, %331 ], [ %329, %324 ]
  %334 = icmp slt i32 %325, %320
  br i1 %334, label %335, label %338

335:                                              ; preds = %332
  %336 = udiv i32 %325, %316
  %337 = add i32 %336, %306
  store i32 %337, i32* %224, align 4
  br label %338

338:                                              ; preds = %335, %332
  %339 = phi i32 [ %337, %335 ], [ %318, %332 ]
  %340 = icmp slt i32 %333, %328
  br i1 %340, label %341, label %344

341:                                              ; preds = %338
  %342 = udiv i32 %333, %317
  %343 = add i32 %342, %315
  store i32 %343, i32* %223, align 8
  br label %344

344:                                              ; preds = %341, %338
  %345 = phi i32 [ %343, %341 ], [ %326, %338 ]
  %346 = getelementptr inbounds %class.SkScalerContext_FreeType_Base, %class.SkScalerContext_FreeType_Base* %0, i64 0, i32 0, i32 6, i32 2
  %347 = load i8*, i8** %346, align 8
  %348 = icmp eq i8* %347, null
  %349 = lshr i16 %35, 10
  %350 = and i16 %349, 1
  br i1 %348, label %735, label %351

351:                                              ; preds = %344
  %352 = getelementptr inbounds %class.SkScalerContext_FreeType_Base, %class.SkScalerContext_FreeType_Base* %0, i64 0, i32 0, i32 6, i32 3
  %353 = load i8*, i8** %352, align 8
  %354 = getelementptr inbounds %class.SkScalerContext_FreeType_Base, %class.SkScalerContext_FreeType_Base* %0, i64 0, i32 0, i32 6, i32 1
  %355 = load i8*, i8** %354, align 8
  %356 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %227, i64 0, i32 10, i32 5
  %357 = bitcast %struct.SkMask* %19 to i16**
  %358 = load i16*, i16** %357, align 8
  %359 = bitcast i16* %358 to i8*
  %360 = load i32, i32* %225, align 8
  %361 = zext i32 %360 to i64
  %362 = sub i32 %345, %315
  %363 = sub i32 %339, %306
  %364 = load i8, i8* %356, align 2
  switch i8 %364, label %737 [
    i8 1, label %402
    i8 2, label %380
    i8 5, label %373
    i8 6, label %365
  ]

365:                                              ; preds = %351
  %366 = icmp sgt i32 %363, 0
  br i1 %366, label %367, label %737

367:                                              ; preds = %365
  %368 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %227, i64 0, i32 10, i32 2
  %369 = icmp eq i16 %350, 0
  %370 = icmp sgt i32 %362, 0
  %371 = load i32, i32* %368, align 8
  %372 = zext i32 %362 to i64
  br label %673

373:                                              ; preds = %351
  %374 = icmp sgt i32 %363, 0
  br i1 %374, label %375, label %737

375:                                              ; preds = %373
  %376 = icmp eq i16 %350, 0
  %377 = icmp sgt i32 %362, 0
  %378 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %227, i64 0, i32 10, i32 2
  %379 = zext i32 %362 to i64
  br label %596

380:                                              ; preds = %351
  %381 = icmp sgt i32 %363, 0
  br i1 %381, label %382, label %737

382:                                              ; preds = %380
  %383 = icmp sgt i32 %362, 0
  %384 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %227, i64 0, i32 10, i32 2
  %385 = zext i32 %362 to i64
  %386 = getelementptr i16, i16* %358, i64 %385
  %387 = bitcast i16* %386 to i8*
  %388 = and i64 %385, 4294967288
  %389 = add nsw i64 %388, -8
  %390 = lshr exact i64 %389, 3
  %391 = add nuw nsw i64 %390, 1
  %392 = icmp ult i32 %362, 8
  %393 = and i64 %385, 4294967288
  %394 = and i64 %391, 1
  %395 = icmp eq i64 %389, 0
  %396 = sub nuw nsw i64 %391, %394
  %397 = icmp eq i64 %394, 0
  %398 = icmp eq i64 %393, %385
  %399 = and i64 %385, 1
  %400 = icmp eq i64 %399, 0
  %401 = sub nsw i64 0, %385
  br label %475

402:                                              ; preds = %351
  %403 = icmp sgt i32 %363, 0
  br i1 %403, label %404, label %737

404:                                              ; preds = %402
  %405 = icmp sgt i32 %362, 0
  %406 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %227, i64 0, i32 10, i32 2
  %407 = zext i32 %362 to i64
  %408 = and i64 %407, 1
  %409 = icmp eq i32 %362, 1
  %410 = sub nsw i64 %407, %408
  %411 = icmp eq i64 %408, 0
  br label %412

412:                                              ; preds = %434, %404
  %413 = phi i32 [ %363, %404 ], [ %416, %434 ]
  %414 = phi i16* [ %358, %404 ], [ %437, %434 ]
  %415 = phi i8* [ %294, %404 ], [ %440, %434 ]
  %416 = add nsw i32 %413, -1
  br i1 %405, label %417, label %434

417:                                              ; preds = %412
  br i1 %409, label %418, label %442

418:                                              ; preds = %442, %417
  %419 = phi i64 [ 0, %417 ], [ %472, %442 ]
  br i1 %411, label %434, label %420

420:                                              ; preds = %418
  %421 = trunc i64 %419 to i32
  %422 = lshr i64 %419, 3
  %423 = and i64 %422, 536870911
  %424 = getelementptr inbounds i8, i8* %415, i64 %423
  %425 = load i8, i8* %424, align 1
  %426 = zext i8 %425 to i32
  %427 = and i32 %421, 7
  %428 = xor i32 %427, 7
  %429 = lshr i32 %426, %428
  %430 = trunc i32 %429 to i16
  %431 = and i16 %430, 1
  %432 = sub nsw i16 0, %431
  %433 = getelementptr inbounds i16, i16* %414, i64 %419
  store i16 %432, i16* %433, align 2
  br label %434

434:                                              ; preds = %420, %418, %412
  %435 = bitcast i16* %414 to i8*
  %436 = getelementptr inbounds i8, i8* %435, i64 %361
  %437 = bitcast i8* %436 to i16*
  %438 = load i32, i32* %406, align 8
  %439 = sext i32 %438 to i64
  %440 = getelementptr inbounds i8, i8* %415, i64 %439
  %441 = icmp sgt i32 %416, 0
  br i1 %441, label %412, label %737

442:                                              ; preds = %417, %442
  %443 = phi i64 [ %472, %442 ], [ 0, %417 ]
  %444 = phi i64 [ %473, %442 ], [ %410, %417 ]
  %445 = trunc i64 %443 to i32
  %446 = lshr i64 %443, 3
  %447 = and i64 %446, 536870911
  %448 = getelementptr inbounds i8, i8* %415, i64 %447
  %449 = load i8, i8* %448, align 1
  %450 = zext i8 %449 to i32
  %451 = and i32 %445, 6
  %452 = xor i32 %451, 7
  %453 = lshr i32 %450, %452
  %454 = trunc i32 %453 to i16
  %455 = and i16 %454, 1
  %456 = sub nsw i16 0, %455
  %457 = getelementptr inbounds i16, i16* %414, i64 %443
  store i16 %456, i16* %457, align 2
  %458 = or i64 %443, 1
  %459 = trunc i64 %443 to i32
  %460 = lshr i64 %443, 3
  %461 = and i64 %460, 536870911
  %462 = getelementptr inbounds i8, i8* %415, i64 %461
  %463 = load i8, i8* %462, align 1
  %464 = zext i8 %463 to i32
  %465 = and i32 %459, 6
  %466 = xor i32 %465, 6
  %467 = lshr i32 %464, %466
  %468 = trunc i32 %467 to i16
  %469 = and i16 %468, 1
  %470 = sub nsw i16 0, %469
  %471 = getelementptr inbounds i16, i16* %414, i64 %458
  store i16 %470, i16* %471, align 2
  %472 = add nuw nsw i64 %443, 2
  %473 = add i64 %444, -2
  %474 = icmp eq i64 %473, 0
  br i1 %474, label %418, label %442

475:                                              ; preds = %560, %382
  %476 = phi i64 [ %568, %560 ], [ 0, %382 ]
  %477 = phi i32 [ %483, %560 ], [ %363, %382 ]
  %478 = phi i16* [ %563, %560 ], [ %358, %382 ]
  %479 = phi i8* [ %566, %560 ], [ %294, %382 ]
  %480 = mul i64 %476, %361
  %481 = getelementptr i8, i8* %359, i64 %480
  %482 = getelementptr i8, i8* %387, i64 %480
  %483 = add nsw i32 %477, -1
  br i1 %383, label %484, label %560

484:                                              ; preds = %475
  br i1 %392, label %485, label %504

485:                                              ; preds = %559, %504, %484
  %486 = phi i64 [ 0, %504 ], [ 0, %484 ], [ %393, %559 ]
  %487 = xor i64 %486, -1
  br i1 %400, label %501, label %488

488:                                              ; preds = %485
  %489 = getelementptr inbounds i8, i8* %479, i64 %486
  %490 = load i8, i8* %489, align 1
  %491 = zext i8 %490 to i32
  %492 = lshr i32 %491, 3
  %493 = shl nuw nsw i32 %492, 11
  %494 = lshr i32 %491, 2
  %495 = shl nuw nsw i32 %494, 5
  %496 = or i32 %493, %492
  %497 = or i32 %496, %495
  %498 = trunc i32 %497 to i16
  %499 = getelementptr inbounds i16, i16* %478, i64 %486
  store i16 %498, i16* %499, align 2
  %500 = or i64 %486, 1
  br label %501

501:                                              ; preds = %488, %485
  %502 = phi i64 [ %500, %488 ], [ %486, %485 ]
  %503 = icmp eq i64 %487, %401
  br i1 %503, label %560, label %569

504:                                              ; preds = %484
  %505 = getelementptr i8, i8* %479, i64 %385
  %506 = icmp ult i8* %481, %505
  %507 = icmp ult i8* %479, %482
  %508 = and i1 %506, %507
  br i1 %508, label %485, label %509

509:                                              ; preds = %504
  br i1 %395, label %543, label %510

510:                                              ; preds = %509, %510
  %511 = phi i64 [ %540, %510 ], [ 0, %509 ]
  %512 = phi i64 [ %541, %510 ], [ %396, %509 ]
  %513 = getelementptr inbounds i8, i8* %479, i64 %511
  %514 = bitcast i8* %513 to <8 x i8>*
  %515 = load <8 x i8>, <8 x i8>* %514, align 1, !alias.scope !5
  %516 = zext <8 x i8> %515 to <8 x i32>
  %517 = lshr <8 x i32> %516, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %518 = shl nuw nsw <8 x i32> %517, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %519 = lshr <8 x i32> %516, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %520 = shl nuw nsw <8 x i32> %519, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %521 = or <8 x i32> %518, %517
  %522 = or <8 x i32> %521, %520
  %523 = trunc <8 x i32> %522 to <8 x i16>
  %524 = getelementptr inbounds i16, i16* %478, i64 %511
  %525 = bitcast i16* %524 to <8 x i16>*
  store <8 x i16> %523, <8 x i16>* %525, align 2, !alias.scope !8, !noalias !5
  %526 = or i64 %511, 8
  %527 = getelementptr inbounds i8, i8* %479, i64 %526
  %528 = bitcast i8* %527 to <8 x i8>*
  %529 = load <8 x i8>, <8 x i8>* %528, align 1, !alias.scope !5
  %530 = zext <8 x i8> %529 to <8 x i32>
  %531 = lshr <8 x i32> %530, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %532 = shl nuw nsw <8 x i32> %531, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %533 = lshr <8 x i32> %530, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %534 = shl nuw nsw <8 x i32> %533, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %535 = or <8 x i32> %532, %531
  %536 = or <8 x i32> %535, %534
  %537 = trunc <8 x i32> %536 to <8 x i16>
  %538 = getelementptr inbounds i16, i16* %478, i64 %526
  %539 = bitcast i16* %538 to <8 x i16>*
  store <8 x i16> %537, <8 x i16>* %539, align 2, !alias.scope !8, !noalias !5
  %540 = add i64 %511, 16
  %541 = add i64 %512, -2
  %542 = icmp eq i64 %541, 0
  br i1 %542, label %543, label %510, !llvm.loop !10

543:                                              ; preds = %510, %509
  %544 = phi i64 [ 0, %509 ], [ %540, %510 ]
  br i1 %397, label %559, label %545

545:                                              ; preds = %543
  %546 = getelementptr inbounds i8, i8* %479, i64 %544
  %547 = bitcast i8* %546 to <8 x i8>*
  %548 = load <8 x i8>, <8 x i8>* %547, align 1, !alias.scope !5
  %549 = zext <8 x i8> %548 to <8 x i32>
  %550 = lshr <8 x i32> %549, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %551 = shl nuw nsw <8 x i32> %550, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %552 = lshr <8 x i32> %549, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %553 = shl nuw nsw <8 x i32> %552, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %554 = or <8 x i32> %551, %550
  %555 = or <8 x i32> %554, %553
  %556 = trunc <8 x i32> %555 to <8 x i16>
  %557 = getelementptr inbounds i16, i16* %478, i64 %544
  %558 = bitcast i16* %557 to <8 x i16>*
  store <8 x i16> %556, <8 x i16>* %558, align 2, !alias.scope !8, !noalias !5
  br label %559

559:                                              ; preds = %543, %545
  br i1 %398, label %560, label %485

560:                                              ; preds = %501, %569, %559, %475
  %561 = bitcast i16* %478 to i8*
  %562 = getelementptr inbounds i8, i8* %561, i64 %361
  %563 = bitcast i8* %562 to i16*
  %564 = load i32, i32* %384, align 8
  %565 = sext i32 %564 to i64
  %566 = getelementptr inbounds i8, i8* %479, i64 %565
  %567 = icmp sgt i32 %483, 0
  %568 = add i64 %476, 1
  br i1 %567, label %475, label %737

569:                                              ; preds = %501, %569
  %570 = phi i64 [ %594, %569 ], [ %502, %501 ]
  %571 = getelementptr inbounds i8, i8* %479, i64 %570
  %572 = load i8, i8* %571, align 1
  %573 = zext i8 %572 to i32
  %574 = lshr i32 %573, 3
  %575 = shl nuw nsw i32 %574, 11
  %576 = lshr i32 %573, 2
  %577 = shl nuw nsw i32 %576, 5
  %578 = or i32 %575, %574
  %579 = or i32 %578, %577
  %580 = trunc i32 %579 to i16
  %581 = getelementptr inbounds i16, i16* %478, i64 %570
  store i16 %580, i16* %581, align 2
  %582 = add nuw nsw i64 %570, 1
  %583 = getelementptr inbounds i8, i8* %479, i64 %582
  %584 = load i8, i8* %583, align 1
  %585 = zext i8 %584 to i32
  %586 = lshr i32 %585, 3
  %587 = shl nuw nsw i32 %586, 11
  %588 = lshr i32 %585, 2
  %589 = shl nuw nsw i32 %588, 5
  %590 = or i32 %587, %586
  %591 = or i32 %590, %589
  %592 = trunc i32 %591 to i16
  %593 = getelementptr inbounds i16, i16* %478, i64 %582
  store i16 %592, i16* %593, align 2
  %594 = add nuw nsw i64 %570, 2
  %595 = icmp eq i64 %594, %385
  br i1 %595, label %560, label %569, !llvm.loop !12

596:                                              ; preds = %665, %375
  %597 = phi i32 [ %363, %375 ], [ %600, %665 ]
  %598 = phi i16* [ %358, %375 ], [ %671, %665 ]
  %599 = phi i8* [ %294, %375 ], [ %668, %665 ]
  %600 = add nsw i32 %597, -1
  br i1 %376, label %602, label %601

601:                                              ; preds = %596
  br i1 %377, label %603, label %665

602:                                              ; preds = %596
  br i1 %377, label %634, label %665

603:                                              ; preds = %601, %603
  %604 = phi i64 [ %632, %603 ], [ 0, %601 ]
  %605 = phi i8* [ %631, %603 ], [ %599, %601 ]
  %606 = getelementptr inbounds i8, i8* %605, i64 2
  %607 = load i8, i8* %606, align 1
  %608 = zext i8 %607 to i64
  %609 = getelementptr inbounds i8, i8* %355, i64 %608
  %610 = load i8, i8* %609, align 1
  %611 = getelementptr inbounds i8, i8* %605, i64 1
  %612 = load i8, i8* %611, align 1
  %613 = zext i8 %612 to i64
  %614 = getelementptr inbounds i8, i8* %347, i64 %613
  %615 = load i8, i8* %614, align 1
  %616 = load i8, i8* %605, align 1
  %617 = zext i8 %616 to i64
  %618 = getelementptr inbounds i8, i8* %353, i64 %617
  %619 = load i8, i8* %618, align 1
  %620 = lshr i8 %610, 3
  %621 = zext i8 %620 to i16
  %622 = shl nuw i16 %621, 11
  %623 = lshr i8 %615, 2
  %624 = zext i8 %623 to i16
  %625 = shl nuw nsw i16 %624, 5
  %626 = or i16 %625, %622
  %627 = lshr i8 %619, 3
  %628 = zext i8 %627 to i16
  %629 = or i16 %626, %628
  %630 = getelementptr inbounds i16, i16* %598, i64 %604
  store i16 %629, i16* %630, align 2
  %631 = getelementptr inbounds i8, i8* %605, i64 3
  %632 = add nuw nsw i64 %604, 1
  %633 = icmp eq i64 %632, %379
  br i1 %633, label %665, label %603

634:                                              ; preds = %602, %634
  %635 = phi i64 [ %663, %634 ], [ 0, %602 ]
  %636 = phi i8* [ %662, %634 ], [ %599, %602 ]
  %637 = load i8, i8* %636, align 1
  %638 = zext i8 %637 to i64
  %639 = getelementptr inbounds i8, i8* %355, i64 %638
  %640 = load i8, i8* %639, align 1
  %641 = getelementptr inbounds i8, i8* %636, i64 1
  %642 = load i8, i8* %641, align 1
  %643 = zext i8 %642 to i64
  %644 = getelementptr inbounds i8, i8* %347, i64 %643
  %645 = load i8, i8* %644, align 1
  %646 = getelementptr inbounds i8, i8* %636, i64 2
  %647 = load i8, i8* %646, align 1
  %648 = zext i8 %647 to i64
  %649 = getelementptr inbounds i8, i8* %353, i64 %648
  %650 = load i8, i8* %649, align 1
  %651 = lshr i8 %640, 3
  %652 = zext i8 %651 to i16
  %653 = shl nuw i16 %652, 11
  %654 = lshr i8 %645, 2
  %655 = zext i8 %654 to i16
  %656 = shl nuw nsw i16 %655, 5
  %657 = or i16 %656, %653
  %658 = lshr i8 %650, 3
  %659 = zext i8 %658 to i16
  %660 = or i16 %657, %659
  %661 = getelementptr inbounds i16, i16* %598, i64 %635
  store i16 %660, i16* %661, align 2
  %662 = getelementptr inbounds i8, i8* %636, i64 3
  %663 = add nuw nsw i64 %635, 1
  %664 = icmp eq i64 %663, %379
  br i1 %664, label %665, label %634

665:                                              ; preds = %603, %634, %602, %601
  %666 = load i32, i32* %378, align 8
  %667 = sext i32 %666 to i64
  %668 = getelementptr inbounds i8, i8* %599, i64 %667
  %669 = bitcast i16* %598 to i8*
  %670 = getelementptr inbounds i8, i8* %669, i64 %361
  %671 = bitcast i8* %670 to i16*
  %672 = icmp sgt i32 %600, 0
  br i1 %672, label %596, label %737

673:                                              ; preds = %689, %367
  %674 = phi i32 [ %371, %367 ], [ %690, %689 ]
  %675 = phi i32 [ %363, %367 ], [ %678, %689 ]
  %676 = phi i16* [ %358, %367 ], [ %696, %689 ]
  %677 = phi i8* [ %294, %367 ], [ %693, %689 ]
  %678 = add nsw i32 %675, -1
  %679 = ptrtoint i8* %677 to i64
  %680 = sext i32 %674 to i64
  %681 = getelementptr inbounds i8, i8* %677, i64 %680
  %682 = getelementptr inbounds i8, i8* %681, i64 %680
  %683 = ptrtoint i8* %682 to i64
  br i1 %370, label %684, label %689

684:                                              ; preds = %673
  %685 = select i1 %369, i64 %683, i64 %679
  %686 = select i1 %369, i64 %679, i64 %683
  br label %698

687:                                              ; preds = %698
  %688 = load i32, i32* %368, align 8
  br label %689

689:                                              ; preds = %687, %673
  %690 = phi i32 [ %688, %687 ], [ %674, %673 ]
  %691 = mul nsw i32 %690, 3
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds i8, i8* %677, i64 %692
  %694 = bitcast i16* %676 to i8*
  %695 = getelementptr inbounds i8, i8* %694, i64 %361
  %696 = bitcast i8* %695 to i16*
  %697 = icmp sgt i32 %678, 0
  br i1 %697, label %673, label %737

698:                                              ; preds = %698, %684
  %699 = phi i64 [ 0, %684 ], [ %733, %698 ]
  %700 = phi i8* [ %681, %684 ], [ %710, %698 ]
  %701 = phi i64 [ %685, %684 ], [ %717, %698 ]
  %702 = phi i64 [ %686, %684 ], [ %705, %698 ]
  %703 = inttoptr i64 %702 to i8*
  %704 = getelementptr inbounds i8, i8* %703, i64 1
  %705 = ptrtoint i8* %704 to i64
  %706 = load i8, i8* %703, align 1
  %707 = zext i8 %706 to i64
  %708 = getelementptr inbounds i8, i8* %355, i64 %707
  %709 = load i8, i8* %708, align 1
  %710 = getelementptr inbounds i8, i8* %700, i64 1
  %711 = load i8, i8* %700, align 1
  %712 = zext i8 %711 to i64
  %713 = getelementptr inbounds i8, i8* %347, i64 %712
  %714 = load i8, i8* %713, align 1
  %715 = inttoptr i64 %701 to i8*
  %716 = getelementptr inbounds i8, i8* %715, i64 1
  %717 = ptrtoint i8* %716 to i64
  %718 = load i8, i8* %715, align 1
  %719 = zext i8 %718 to i64
  %720 = getelementptr inbounds i8, i8* %353, i64 %719
  %721 = load i8, i8* %720, align 1
  %722 = lshr i8 %709, 3
  %723 = zext i8 %722 to i16
  %724 = shl nuw i16 %723, 11
  %725 = lshr i8 %714, 2
  %726 = zext i8 %725 to i16
  %727 = shl nuw nsw i16 %726, 5
  %728 = or i16 %727, %724
  %729 = lshr i8 %721, 3
  %730 = zext i8 %729 to i16
  %731 = or i16 %728, %730
  %732 = getelementptr inbounds i16, i16* %676, i64 %699
  store i16 %731, i16* %732, align 2
  %733 = add nuw nsw i64 %699, 1
  %734 = icmp eq i64 %733, %372
  br i1 %734, label %687, label %698

735:                                              ; preds = %344
  %736 = zext i16 %350 to i32
  call fastcc void @_ZN12_GLOBAL__N_112copyFT2LCD16ILb0EEEvRK10FT_Bitmap_RK6SkMaskiPKhS8_S8_(%struct.FT_Bitmap_* dereferenceable(40) %234, %struct.SkMask* nonnull dereferenceable(32) %19, i32 %736)
  br label %737

737:                                              ; preds = %689, %665, %560, %434, %402, %380, %373, %365, %351, %735
  store i8* %266, i8** %265, align 8
  br label %738

738:                                              ; preds = %217, %737
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %218) #14
  br label %739

739:                                              ; preds = %1189, %793, %1188, %740, %211, %212, %738
  ret void

740:                                              ; preds = %56
  %741 = bitcast %struct.FT_BBox_* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %741) #14
  %742 = getelementptr inbounds %struct.FT_BBox_, %struct.FT_BBox_* %22, i64 0, i32 0
  %743 = getelementptr inbounds %struct.FT_BBox_, %struct.FT_BBox_* %22, i64 0, i32 1
  %744 = bitcast %struct.FT_Bitmap_* %23 to i8*
  %745 = bitcast %struct.FT_BBox_* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %745, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %744) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %744, i8 -86, i64 40, i1 false)
  call void @FT_Outline_Get_CBox(%struct.FT_Outline_* %43, %struct.FT_BBox_* nonnull %22) #14
  %746 = load i64, i64* %742, align 8
  %747 = add nsw i64 %746, %57
  %748 = and i64 %747, -64
  %749 = sub nsw i64 %57, %748
  %750 = load i64, i64* %743, align 8
  %751 = add nsw i64 %750, %58
  %752 = and i64 %751, -64
  %753 = sub nsw i64 %58, %752
  call void @FT_Outline_Translate(%struct.FT_Outline_* %43, i64 %749, i64 %753) #14
  %754 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 0
  %755 = load i16, i16* %754, align 8
  %756 = zext i16 %755 to i32
  %757 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %23, i64 0, i32 1
  store i32 %756, i32* %757, align 4
  %758 = load i16, i16* %62, align 2
  %759 = zext i16 %758 to i32
  %760 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %23, i64 0, i32 0
  store i32 %759, i32* %760, align 8
  %761 = call i64 @_ZNK7SkGlyph8rowBytesEv(%class.SkGlyph* %2) #14
  %762 = trunc i64 %761 to i32
  %763 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %23, i64 0, i32 2
  store i32 %762, i32* %763, align 8
  %764 = bitcast i8** %59 to i64*
  %765 = load i64, i64* %764, align 8
  %766 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %23, i64 0, i32 3
  %767 = bitcast i8** %766 to i64*
  store i64 %765, i64* %767, align 8
  %768 = load i8, i8* %66, align 8
  %769 = icmp eq i8 %768, 0
  %770 = select i1 %769, i8 1, i8 2
  %771 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %23, i64 0, i32 5
  store i8 %770, i8* %771, align 2
  %772 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %23, i64 0, i32 4
  store i16 256, i16* %772, align 8
  %773 = load %struct.FT_GlyphSlotRec_*, %struct.FT_GlyphSlotRec_** %38, align 8
  %774 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %773, i64 0, i32 0
  %775 = load %struct.FT_LibraryRec_*, %struct.FT_LibraryRec_** %774, align 8
  %776 = call i32 @FT_Outline_Get_Bitmap(%struct.FT_LibraryRec_* %775, %struct.FT_Outline_* %43, %struct.FT_Bitmap_* nonnull %23) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %744) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %741) #14
  br label %739

777:                                              ; preds = %4
  %778 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %39, i64 0, i32 10, i32 5
  %779 = load i8, i8* %778, align 2
  %780 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 8
  %781 = load i8, i8* %780, align 8
  %782 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 1
  %783 = load i32, i32* %782, align 4
  %784 = trunc i32 %783 to i8
  %785 = icmp slt i8 %784, 0
  br i1 %785, label %786, label %789

786:                                              ; preds = %777
  %787 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %3) #14
  %788 = zext i8 %787 to i32
  store i32 %788, i32* %782, align 4
  br label %789

789:                                              ; preds = %777, %786
  %790 = phi i32 [ %788, %786 ], [ %783, %777 ]
  %791 = and i32 %790, 15
  %792 = icmp eq i32 %791, 0
  br i1 %792, label %793, label %798

793:                                              ; preds = %789
  %794 = bitcast %struct.SkMask* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %794) #14
  %795 = bitcast %struct.SkMask* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %795, i8 -86, i64 32, i1 false)
  call void @_ZNK7SkGlyph4maskEv(%struct.SkMask* nonnull sret %24, %class.SkGlyph* %2) #14
  %796 = load %struct.FT_GlyphSlotRec_*, %struct.FT_GlyphSlotRec_** %38, align 8
  %797 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %796, i64 0, i32 10
  call fastcc void @_ZN12_GLOBAL__N_112copyFTBitmapERK10FT_Bitmap_R6SkMask(%struct.FT_Bitmap_* dereferenceable(40) %797, %struct.SkMask* nonnull dereferenceable(32) %24)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %794) #14
  br label %739

798:                                              ; preds = %789
  %799 = bitcast %class.SkBitmap* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %799) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %799, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %25) #14
  %800 = bitcast %struct.SkImageInfo* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %800) #14
  %801 = load %struct.FT_GlyphSlotRec_*, %struct.FT_GlyphSlotRec_** %38, align 8
  %802 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %801, i64 0, i32 10, i32 1
  %803 = load i32, i32* %802, align 4
  %804 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %801, i64 0, i32 10, i32 0
  %805 = load i32, i32* %804, align 8
  %806 = icmp eq i8 %779, 7
  %807 = select i1 %806, i64 8589934598, i64 8589934593
  %808 = zext i32 %805 to i64
  %809 = shl nuw i64 %808, 32
  %810 = zext i32 %803 to i64
  %811 = or i64 %809, %810
  %812 = bitcast %struct.SkImageInfo* %26 to i64*
  store i64 0, i64* %812, align 8, !alias.scope !13
  %813 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %26, i64 0, i32 0, i32 1
  %814 = bitcast i32* %813 to i64*
  store i64 %807, i64* %814, align 8, !alias.scope !13
  %815 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %26, i64 0, i32 1
  %816 = bitcast %struct.SkISize* %815 to i64*
  store i64 %811, i64* %816, align 8, !alias.scope !13
  call void @_ZN8SkBitmap11allocPixelsERK11SkImageInfo(%class.SkBitmap* nonnull %25, %struct.SkImageInfo* nonnull dereferenceable(24) %26) #14
  %817 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %26, i64 0, i32 0, i32 0, i32 0
  %818 = load %class.SkColorSpace*, %class.SkColorSpace** %817, align 8
  %819 = icmp eq %class.SkColorSpace* %818, null
  br i1 %819, label %826, label %820

820:                                              ; preds = %798
  %821 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %818, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %822 = atomicrmw add i32* %821, i32 -1 acq_rel
  %823 = icmp eq i32 %822, 1
  br i1 %823, label %824, label %826

824:                                              ; preds = %820
  %825 = bitcast %class.SkColorSpace* %818 to i8*
  call void @_ZdlPv(i8* %825) #15
  br label %826

826:                                              ; preds = %824, %820, %798
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %800) #14
  %827 = bitcast %struct.SkMask* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %827) #14
  %828 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %27, i64 0, i32 1, i32 0
  %829 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %27, i64 0, i32 1, i32 1
  %830 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %27, i64 0, i32 1, i32 2
  %831 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %27, i64 0, i32 1, i32 3
  %832 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %27, i64 0, i32 2
  %833 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %27, i64 0, i32 3
  %834 = bitcast %struct.SkMask* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %834, i8 -86, i64 32, i1 false)
  %835 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %25, i64 0, i32 1, i32 0
  %836 = bitcast i8** %835 to i64*
  %837 = load i64, i64* %836, align 8
  %838 = bitcast %struct.SkMask* %27 to i64*
  store i64 %837, i64* %838, align 8
  %839 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %25, i64 0, i32 1, i32 2, i32 1, i32 0
  %840 = load i32, i32* %839, align 8
  %841 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %25, i64 0, i32 1, i32 2, i32 1, i32 1
  %842 = load i32, i32* %841, align 4
  store i32 0, i32* %828, align 8
  store i32 0, i32* %829, align 4
  store i32 %840, i32* %830, align 8
  store i32 %842, i32* %831, align 4
  %843 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %25, i64 0, i32 1, i32 1
  %844 = load i64, i64* %843, align 8
  %845 = trunc i64 %844 to i32
  store i32 %845, i32* %832, align 8
  %846 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %25, i64 0, i32 1, i32 2, i32 0, i32 1
  %847 = load i32, i32* %846, align 8
  %848 = icmp eq i32 %847, 6
  %849 = select i1 %848, i8 3, i8 1
  %850 = icmp eq i32 %847, 1
  %851 = select i1 %850, i8 1, i8 %849
  store i8 %851, i8* %833, align 4
  %852 = load %struct.FT_GlyphSlotRec_*, %struct.FT_GlyphSlotRec_** %38, align 8
  %853 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %852, i64 0, i32 10
  call fastcc void @_ZN12_GLOBAL__N_112copyFTBitmapERK10FT_Bitmap_R6SkMask(%struct.FT_Bitmap_* dereferenceable(40) %853, %struct.SkMask* nonnull dereferenceable(32) %27)
  switch i8 %781, label %854 [
    i8 0, label %858
    i8 4, label %858
  ]

854:                                              ; preds = %826
  %855 = call i64 @_ZNK7SkGlyph8rowBytesEv(%class.SkGlyph* %2) #14
  %856 = shl i64 %855, 32
  %857 = ashr exact i64 %856, 32
  br label %858

858:                                              ; preds = %826, %826, %854
  %859 = phi i64 [ %857, %854 ], [ 0, %826 ], [ 0, %826 ]
  %860 = bitcast %class.SkBitmap* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %860) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %860, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %28) #14
  %861 = bitcast %struct.SkImageInfo* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %861) #14
  %862 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 0
  %863 = load i16, i16* %862, align 8
  %864 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 1
  %865 = load i16, i16* %864, align 2
  %866 = icmp eq i8 %781, 3
  %867 = select i1 %866, i64 8589934598, i64 8589934593
  %868 = zext i16 %865 to i64
  %869 = shl nuw nsw i64 %868, 32
  %870 = zext i16 %863 to i64
  %871 = or i64 %869, %870
  %872 = bitcast %struct.SkImageInfo* %29 to i64*
  store i64 0, i64* %872, align 8, !alias.scope !16
  %873 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %29, i64 0, i32 0, i32 1
  %874 = bitcast i32* %873 to i64*
  store i64 %867, i64* %874, align 8, !alias.scope !16
  %875 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %29, i64 0, i32 1
  %876 = bitcast %struct.SkISize* %875 to i64*
  store i64 %871, i64* %876, align 8, !alias.scope !16
  %877 = call zeroext i1 @_ZN8SkBitmap7setInfoERK11SkImageInfom(%class.SkBitmap* nonnull %28, %struct.SkImageInfo* nonnull dereferenceable(24) %29, i64 %859) #14
  %878 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %29, i64 0, i32 0, i32 0, i32 0
  %879 = load %class.SkColorSpace*, %class.SkColorSpace** %878, align 8
  %880 = icmp eq %class.SkColorSpace* %879, null
  br i1 %880, label %887, label %881

881:                                              ; preds = %858
  %882 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %879, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %883 = atomicrmw add i32* %882, i32 -1 acq_rel
  %884 = icmp eq i32 %883, 1
  br i1 %884, label %885, label %887

885:                                              ; preds = %881
  %886 = bitcast %class.SkColorSpace* %879 to i8*
  call void @_ZdlPv(i8* %886) #15
  br label %887

887:                                              ; preds = %885, %881, %858
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %861) #14
  switch i8 %781, label %889 [
    i8 4, label %888
    i8 0, label %888
  ]

888:                                              ; preds = %887, %887
  call void @_ZN8SkBitmap11allocPixelsEv(%class.SkBitmap* nonnull %28) #14
  br label %892

889:                                              ; preds = %887
  %890 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 4
  %891 = load i8*, i8** %890, align 8
  call void @_ZN8SkBitmap9setPixelsEPv(%class.SkBitmap* nonnull %28, i8* %891) #14
  br label %892

892:                                              ; preds = %889, %888
  %893 = bitcast %class.SkCanvas* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3232, i8* nonnull %893) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %893, i8* align 8 bitcast ({ i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.21, [384 x i64], %class.sk_sp.22, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.24" }* @__const._ZN29SkScalerContext_FreeType_Base18generateGlyphImageEP11FT_FaceRec_RK7SkGlyphRK8SkMatrix.canvas.1 to i8*), i64 3232, i1 false)
  call void @_ZN8SkCanvasC1ERK8SkBitmap(%class.SkCanvas* nonnull %30, %class.SkBitmap* nonnull dereferenceable(56) %28) #14
  %894 = bitcast { <2 x float>, <2 x float> }* %9 to %struct.SkRGBA4f*
  %895 = bitcast { <2 x float>, <2 x float> }* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %895) #14
  %896 = call { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType3EE9FromColorEj(i32 0) #14
  %897 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %9, i64 0, i32 0
  %898 = extractvalue { <2 x float>, <2 x float> } %896, 0
  store <2 x float> %898, <2 x float>* %897, align 8
  %899 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %9, i64 0, i32 1
  %900 = extractvalue { <2 x float>, <2 x float> } %896, 1
  store <2 x float> %900, <2 x float>* %899, align 8
  call void @_ZN8SkCanvas9drawColorERK8SkRGBA4fIL11SkAlphaType3EE11SkBlendMode(%class.SkCanvas* nonnull %30, %struct.SkRGBA4f* nonnull dereferenceable(16) %894, i32 1) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %895) #14
  %901 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 3
  %902 = load i16, i16* %901, align 2
  %903 = sext i16 %902 to i32
  %904 = sub nsw i32 0, %903
  %905 = sitofp i32 %904 to float
  %906 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 2
  %907 = load i16, i16* %906, align 4
  %908 = sext i16 %907 to i32
  %909 = sub nsw i32 0, %908
  %910 = sitofp i32 %909 to float
  call void @_ZN8SkCanvas9translateEff(%class.SkCanvas* nonnull %30, float %905, float %910) #14
  call void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas* nonnull %30, %class.SkMatrix* dereferenceable(40) %3) #14
  %911 = load %struct.FT_GlyphSlotRec_*, %struct.FT_GlyphSlotRec_** %38, align 8
  %912 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %911, i64 0, i32 11
  %913 = load i32, i32* %912, align 8
  %914 = sitofp i32 %913 to float
  %915 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %911, i64 0, i32 12
  %916 = load i32, i32* %915, align 4
  %917 = sub nsw i32 0, %916
  %918 = sitofp i32 %917 to float
  call void @_ZN8SkCanvas9translateEff(%class.SkCanvas* nonnull %30, float %914, float %918) #14
  %919 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %31, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %919) #14
  %920 = bitcast %struct.SkSamplingOptions* %31 to i32*
  store i32 -1431655766, i32* %920, align 4
  store i8 0, i8* %919, align 4
  %921 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %31, i64 0, i32 1, i32 0
  store float 0.000000e+00, float* %921, align 4
  %922 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %31, i64 0, i32 1, i32 1
  store float 0.000000e+00, float* %922, align 4
  %923 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %31, i64 0, i32 2
  store i32 1, i32* %923, align 4
  %924 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %31, i64 0, i32 3
  store i32 1, i32* %924, align 4
  %925 = bitcast %class.sk_sp.33* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %925) #14
  call void @_ZNK8SkBitmap7asImageEv(%class.sk_sp.33* nonnull sret %32, %class.SkBitmap* nonnull %25) #14
  %926 = getelementptr inbounds %class.sk_sp.33, %class.sk_sp.33* %32, i64 0, i32 0
  %927 = load %class.SkImage*, %class.SkImage** %926, align 8
  call void @_ZN8SkCanvas9drawImageEPK7SkImageffRK17SkSamplingOptionsPK7SkPaint(%class.SkCanvas* nonnull %30, %class.SkImage* %927, float 0.000000e+00, float 0.000000e+00, %struct.SkSamplingOptions* nonnull dereferenceable(20) %31, %class.SkPaint* null) #14
  %928 = load %class.SkImage*, %class.SkImage** %926, align 8
  %929 = icmp eq %class.SkImage* %928, null
  br i1 %929, label %940, label %930

930:                                              ; preds = %892
  %931 = getelementptr inbounds %class.SkImage, %class.SkImage* %928, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %932 = atomicrmw add i32* %931, i32 -1 acq_rel
  %933 = icmp eq i32 %932, 1
  br i1 %933, label %934, label %940

934:                                              ; preds = %930
  %935 = bitcast %class.SkImage* %928 to %class.SkRefCntBase*
  %936 = bitcast %class.SkImage* %928 to void (%class.SkRefCntBase*)***
  %937 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %936, align 8
  %938 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %937, i64 2
  %939 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %938, align 8
  call void %939(%class.SkRefCntBase* nonnull %935) #14
  br label %940

940:                                              ; preds = %892, %930, %934
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %925) #14
  switch i8 %781, label %1188 [
    i8 0, label %941
    i8 4, label %1143
  ]

941:                                              ; preds = %940
  %942 = bitcast %struct.SkMask* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %942) #14
  %943 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %33, i64 0, i32 1, i32 0
  %944 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %33, i64 0, i32 1, i32 1
  %945 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %33, i64 0, i32 1, i32 2
  %946 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %33, i64 0, i32 1, i32 3
  %947 = bitcast %struct.SkMask* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %947, i8 -86, i64 32, i1 false)
  call void @_ZNK7SkGlyph4maskEv(%struct.SkMask* nonnull sret %33, %class.SkGlyph* %2) #14
  %948 = load i32, i32* %946, align 4
  %949 = load i32, i32* %944, align 4
  %950 = sub i32 %948, %949
  %951 = load i32, i32* %945, align 8
  %952 = load i32, i32* %943, align 8
  %953 = sub i32 %951, %952
  %954 = ashr i32 %953, 3
  %955 = and i32 %953, 7
  %956 = icmp sgt i32 %950, 0
  br i1 %956, label %957, label %1142

957:                                              ; preds = %941
  %958 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %33, i64 0, i32 0
  %959 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %33, i64 0, i32 2
  %960 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %28, i64 0, i32 1, i32 1
  %961 = load i64, i64* %960, align 8
  %962 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %28, i64 0, i32 1, i32 0
  %963 = load i8*, i8** %962, align 8
  %964 = trunc i64 %961 to i32
  %965 = sub i32 %964, %953
  %966 = load i32, i32* %959, align 8
  %967 = add nsw i32 %953, 7
  %968 = and i32 %967, -8
  %969 = sdiv i32 %968, 8
  %970 = sub i32 %966, %969
  %971 = load i8*, i8** %958, align 8
  %972 = icmp sgt i32 %953, 7
  %973 = icmp eq i32 %955, 0
  %974 = sext i32 %965 to i64
  %975 = sext i32 %970 to i64
  %976 = add nsw i32 %955, -1
  %977 = zext i32 %976 to i64
  %978 = add nuw nsw i64 %977, 1
  %979 = icmp sgt i32 %954, 1
  %980 = select i1 %979, i32 %954, i32 1
  %981 = add nsw i32 %980, -1
  %982 = zext i32 %981 to i64
  %983 = add nuw nsw i64 %982, 1
  %984 = icmp sgt i32 %954, 1
  %985 = select i1 %984, i32 %954, i32 1
  %986 = add nsw i32 %985, -1
  %987 = zext i32 %986 to i64
  %988 = add nuw nsw i64 %987, 1
  %989 = shl nuw nsw i64 %987, 3
  %990 = add nuw nsw i64 %989, 8
  %991 = icmp ult i64 %983, 16
  %992 = and i64 %983, 8589934576
  %993 = trunc i64 %992 to i32
  %994 = shl nuw nsw i64 %992, 3
  %995 = icmp eq i64 %983, %992
  %996 = icmp eq i32 %955, 1
  %997 = icmp eq i32 %955, 2
  %998 = icmp eq i32 %955, 3
  %999 = icmp eq i32 %955, 4
  %1000 = icmp eq i32 %955, 5
  %1001 = icmp eq i32 %955, 6
  br label %1002

1002:                                             ; preds = %1135, %957
  %1003 = phi i32 [ 0, %957 ], [ %1140, %1135 ]
  %1004 = phi i8* [ %971, %957 ], [ %1139, %1135 ]
  %1005 = phi i8* [ %963, %957 ], [ %1138, %1135 ]
  br i1 %972, label %1006, label %1069

1006:                                             ; preds = %1002
  br i1 %991, label %1007, label %1011

1007:                                             ; preds = %1068, %1011, %1006
  %1008 = phi i32 [ 0, %1011 ], [ 0, %1006 ], [ %993, %1068 ]
  %1009 = phi i8* [ %1004, %1011 ], [ %1004, %1006 ], [ %1018, %1068 ]
  %1010 = phi i8* [ %1005, %1011 ], [ %1005, %1006 ], [ %1019, %1068 ]
  br label %1072

1011:                                             ; preds = %1006
  %1012 = getelementptr i8, i8* %1004, i64 %988
  %1013 = getelementptr i8, i8* %1005, i64 %990
  %1014 = icmp ult i8* %1004, %1013
  %1015 = icmp ult i8* %1005, %1012
  %1016 = and i1 %1014, %1015
  br i1 %1016, label %1007, label %1017

1017:                                             ; preds = %1011
  %1018 = getelementptr i8, i8* %1004, i64 %992
  %1019 = getelementptr i8, i8* %1005, i64 %994
  br label %1020

1020:                                             ; preds = %1020, %1017
  %1021 = phi i64 [ 0, %1017 ], [ %1066, %1020 ]
  %1022 = getelementptr i8, i8* %1004, i64 %1021
  %1023 = shl i64 %1021, 3
  %1024 = getelementptr i8, i8* %1005, i64 %1023
  %1025 = bitcast i8* %1024 to <128 x i8>*
  %1026 = load <128 x i8>, <128 x i8>* %1025, align 1
  %1027 = shufflevector <128 x i8> %1026, <128 x i8> undef, <16 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 72, i32 80, i32 88, i32 96, i32 104, i32 112, i32 120>
  %1028 = shufflevector <128 x i8> %1026, <128 x i8> undef, <16 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 65, i32 73, i32 81, i32 89, i32 97, i32 105, i32 113, i32 121>
  %1029 = shufflevector <128 x i8> %1026, <128 x i8> undef, <16 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 66, i32 74, i32 82, i32 90, i32 98, i32 106, i32 114, i32 122>
  %1030 = shufflevector <128 x i8> %1026, <128 x i8> undef, <16 x i32> <i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 51, i32 59, i32 67, i32 75, i32 83, i32 91, i32 99, i32 107, i32 115, i32 123>
  %1031 = shufflevector <128 x i8> %1026, <128 x i8> undef, <16 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 68, i32 76, i32 84, i32 92, i32 100, i32 108, i32 116, i32 124>
  %1032 = shufflevector <128 x i8> %1026, <128 x i8> undef, <16 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 69, i32 77, i32 85, i32 93, i32 101, i32 109, i32 117, i32 125>
  %1033 = shufflevector <128 x i8> %1026, <128 x i8> undef, <16 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 70, i32 78, i32 86, i32 94, i32 102, i32 110, i32 118, i32 126>
  %1034 = shufflevector <128 x i8> %1026, <128 x i8> undef, <16 x i32> <i32 7, i32 15, i32 23, i32 31, i32 39, i32 47, i32 55, i32 63, i32 71, i32 79, i32 87, i32 95, i32 103, i32 111, i32 119, i32 127>
  %1035 = icmp ugt <16 x i8> %1027, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %1036 = zext <16 x i1> %1035 to <16 x i8>
  %1037 = shl nuw nsw <16 x i8> %1036, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1038 = icmp ugt <16 x i8> %1028, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %1039 = zext <16 x i1> %1038 to <16 x i8>
  %1040 = or <16 x i8> %1037, %1039
  %1041 = shl nuw nsw <16 x i8> %1040, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1042 = icmp ugt <16 x i8> %1029, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %1043 = zext <16 x i1> %1042 to <16 x i8>
  %1044 = or <16 x i8> %1041, %1043
  %1045 = shl nuw nsw <16 x i8> %1044, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1046 = icmp ugt <16 x i8> %1030, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %1047 = zext <16 x i1> %1046 to <16 x i8>
  %1048 = or <16 x i8> %1045, %1047
  %1049 = shl <16 x i8> %1048, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1050 = icmp ugt <16 x i8> %1031, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %1051 = zext <16 x i1> %1050 to <16 x i8>
  %1052 = or <16 x i8> %1049, %1051
  %1053 = shl <16 x i8> %1052, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1054 = icmp ugt <16 x i8> %1032, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %1055 = zext <16 x i1> %1054 to <16 x i8>
  %1056 = or <16 x i8> %1053, %1055
  %1057 = shl <16 x i8> %1056, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1058 = icmp ugt <16 x i8> %1033, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %1059 = zext <16 x i1> %1058 to <16 x i8>
  %1060 = or <16 x i8> %1057, %1059
  %1061 = shl <16 x i8> %1060, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1062 = icmp ugt <16 x i8> %1034, <i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63, i8 63>
  %1063 = zext <16 x i1> %1062 to <16 x i8>
  %1064 = or <16 x i8> %1061, %1063
  %1065 = bitcast i8* %1022 to <16 x i8>*
  store <16 x i8> %1064, <16 x i8>* %1065, align 1, !alias.scope !19, !noalias !22
  %1066 = add i64 %1021, 16
  %1067 = icmp eq i64 %1066, %992
  br i1 %1067, label %1068, label %1020, !llvm.loop !24

1068:                                             ; preds = %1020
  br i1 %995, label %1069, label %1007

1069:                                             ; preds = %1072, %1068, %1002
  %1070 = phi i8* [ %1005, %1002 ], [ %1019, %1068 ], [ %1122, %1072 ]
  %1071 = phi i8* [ %1004, %1002 ], [ %1018, %1068 ], [ %1121, %1072 ]
  br i1 %973, label %1135, label %1130

1072:                                             ; preds = %1007, %1072
  %1073 = phi i32 [ %1123, %1072 ], [ %1008, %1007 ]
  %1074 = phi i8* [ %1121, %1072 ], [ %1009, %1007 ]
  %1075 = phi i8* [ %1122, %1072 ], [ %1010, %1007 ]
  %1076 = load i8, i8* %1075, align 1
  %1077 = icmp ugt i8 %1076, 63
  %1078 = zext i1 %1077 to i8
  %1079 = shl nuw nsw i8 %1078, 1
  %1080 = getelementptr inbounds i8, i8* %1075, i64 1
  %1081 = load i8, i8* %1080, align 1
  %1082 = icmp ugt i8 %1081, 63
  %1083 = zext i1 %1082 to i8
  %1084 = or i8 %1079, %1083
  %1085 = shl nuw nsw i8 %1084, 1
  %1086 = getelementptr inbounds i8, i8* %1075, i64 2
  %1087 = load i8, i8* %1086, align 1
  %1088 = icmp ugt i8 %1087, 63
  %1089 = zext i1 %1088 to i8
  %1090 = or i8 %1085, %1089
  %1091 = shl nuw nsw i8 %1090, 1
  %1092 = getelementptr inbounds i8, i8* %1075, i64 3
  %1093 = load i8, i8* %1092, align 1
  %1094 = icmp ugt i8 %1093, 63
  %1095 = zext i1 %1094 to i8
  %1096 = or i8 %1091, %1095
  %1097 = shl i8 %1096, 1
  %1098 = getelementptr inbounds i8, i8* %1075, i64 4
  %1099 = load i8, i8* %1098, align 1
  %1100 = icmp ugt i8 %1099, 63
  %1101 = zext i1 %1100 to i8
  %1102 = or i8 %1097, %1101
  %1103 = shl i8 %1102, 1
  %1104 = getelementptr inbounds i8, i8* %1075, i64 5
  %1105 = load i8, i8* %1104, align 1
  %1106 = icmp ugt i8 %1105, 63
  %1107 = zext i1 %1106 to i8
  %1108 = or i8 %1103, %1107
  %1109 = shl i8 %1108, 1
  %1110 = getelementptr inbounds i8, i8* %1075, i64 6
  %1111 = load i8, i8* %1110, align 1
  %1112 = icmp ugt i8 %1111, 63
  %1113 = zext i1 %1112 to i8
  %1114 = or i8 %1109, %1113
  %1115 = shl i8 %1114, 1
  %1116 = getelementptr inbounds i8, i8* %1075, i64 7
  %1117 = load i8, i8* %1116, align 1
  %1118 = icmp ugt i8 %1117, 63
  %1119 = zext i1 %1118 to i8
  %1120 = or i8 %1115, %1119
  %1121 = getelementptr inbounds i8, i8* %1074, i64 1
  store i8 %1120, i8* %1074, align 1
  %1122 = getelementptr inbounds i8, i8* %1075, i64 8
  %1123 = add nuw nsw i32 %1073, 1
  %1124 = icmp slt i32 %1123, %954
  br i1 %1124, label %1072, label %1069, !llvm.loop !25

1125:                                             ; preds = %1232, %1225, %1218, %1211, %1204, %1197, %1130
  %1126 = phi i32 [ %1134, %1130 ], [ %1203, %1197 ], [ %1210, %1204 ], [ %1217, %1211 ], [ %1224, %1218 ], [ %1231, %1225 ], [ %1238, %1232 ]
  %1127 = getelementptr i8, i8* %1070, i64 %978
  %1128 = trunc i32 %1126 to i8
  %1129 = getelementptr inbounds i8, i8* %1071, i64 1
  store i8 %1128, i8* %1071, align 1
  br label %1135

1130:                                             ; preds = %1069
  %1131 = load i8, i8* %1070, align 1
  %1132 = icmp ugt i8 %1131, 63
  %1133 = zext i1 %1132 to i32
  %1134 = shl nuw nsw i32 %1133, 7
  br i1 %996, label %1125, label %1197

1135:                                             ; preds = %1125, %1069
  %1136 = phi i8* [ %1127, %1125 ], [ %1070, %1069 ]
  %1137 = phi i8* [ %1129, %1125 ], [ %1071, %1069 ]
  %1138 = getelementptr inbounds i8, i8* %1136, i64 %974
  %1139 = getelementptr inbounds i8, i8* %1137, i64 %975
  %1140 = add nuw nsw i32 %1003, 1
  %1141 = icmp eq i32 %1140, %950
  br i1 %1141, label %1142, label %1002

1142:                                             ; preds = %1135, %941
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %942) #14
  br label %1188

1143:                                             ; preds = %940
  %1144 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %28, i64 0, i32 1, i32 1
  %1145 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 4
  %1146 = bitcast i8** %1145 to i16**
  %1147 = load i16*, i16** %1146, align 8
  %1148 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %28, i64 0, i32 1, i32 2, i32 1, i32 1
  %1149 = load i32, i32* %1148, align 4
  %1150 = icmp sgt i32 %1149, 0
  br i1 %1150, label %1151, label %1188

1151:                                             ; preds = %1143
  %1152 = bitcast i16* %1147 to i8*
  %1153 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %28, i64 0, i32 1, i32 0
  %1154 = load i8*, i8** %1153, align 8
  %1155 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %28, i64 0, i32 1, i32 2, i32 1, i32 0
  br label %1156

1156:                                             ; preds = %1151, %1164
  %1157 = phi i32 [ %1149, %1151 ], [ %1161, %1164 ]
  %1158 = phi i16* [ %1147, %1151 ], [ %1167, %1164 ]
  %1159 = phi i8* [ %1152, %1151 ], [ %1166, %1164 ]
  %1160 = phi i8* [ %1154, %1151 ], [ %1169, %1164 ]
  %1161 = add nsw i32 %1157, -1
  %1162 = load i32, i32* %1155, align 8
  %1163 = icmp sgt i32 %1162, 0
  br i1 %1163, label %1171, label %1164

1164:                                             ; preds = %1171, %1156
  %1165 = call i64 @_ZNK7SkGlyph8rowBytesEv(%class.SkGlyph* %2) #14
  %1166 = getelementptr inbounds i8, i8* %1159, i64 %1165
  %1167 = bitcast i8* %1166 to i16*
  %1168 = load i64, i64* %1144, align 8
  %1169 = getelementptr inbounds i8, i8* %1160, i64 %1168
  %1170 = icmp sgt i32 %1161, 0
  br i1 %1170, label %1156, label %1188

1171:                                             ; preds = %1156, %1171
  %1172 = phi i64 [ %1184, %1171 ], [ 0, %1156 ]
  %1173 = getelementptr inbounds i8, i8* %1160, i64 %1172
  %1174 = load i8, i8* %1173, align 1
  %1175 = zext i8 %1174 to i32
  %1176 = lshr i32 %1175, 3
  %1177 = shl nuw nsw i32 %1176, 11
  %1178 = lshr i32 %1175, 2
  %1179 = shl nuw nsw i32 %1178, 5
  %1180 = or i32 %1177, %1176
  %1181 = or i32 %1180, %1179
  %1182 = trunc i32 %1181 to i16
  %1183 = getelementptr inbounds i16, i16* %1158, i64 %1172
  store i16 %1182, i16* %1183, align 2
  %1184 = add nuw nsw i64 %1172, 1
  %1185 = load i32, i32* %1155, align 8
  %1186 = sext i32 %1185 to i64
  %1187 = icmp slt i64 %1184, %1186
  br i1 %1187, label %1171, label %1164

1188:                                             ; preds = %1164, %1143, %940, %1142
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %919) #14
  call void @_ZN8SkCanvasD1Ev(%class.SkCanvas* nonnull %30) #14
  call void @llvm.lifetime.end.p0i8(i64 3232, i8* nonnull %893) #14
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %28) #14
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %860) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %827) #14
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %25) #14
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %799) #14
  br label %739

1189:                                             ; preds = %4
  %1190 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 4
  %1191 = load i8*, i8** %1190, align 8
  %1192 = tail call i64 @_ZNK7SkGlyph8rowBytesEv(%class.SkGlyph* %2) #14
  %1193 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %2, i64 0, i32 1
  %1194 = load i16, i16* %1193, align 2
  %1195 = zext i16 %1194 to i64
  %1196 = mul i64 %1192, %1195
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1191, i8 0, i64 %1196, i1 false)
  br label %739

1197:                                             ; preds = %1130
  %1198 = getelementptr inbounds i8, i8* %1070, i64 1
  %1199 = load i8, i8* %1198, align 1
  %1200 = icmp ugt i8 %1199, 63
  %1201 = zext i1 %1200 to i32
  %1202 = shl nuw nsw i32 %1201, 6
  %1203 = or i32 %1202, %1134
  br i1 %997, label %1125, label %1204

1204:                                             ; preds = %1197
  %1205 = getelementptr inbounds i8, i8* %1070, i64 2
  %1206 = load i8, i8* %1205, align 1
  %1207 = icmp ugt i8 %1206, 63
  %1208 = zext i1 %1207 to i32
  %1209 = shl nuw nsw i32 %1208, 5
  %1210 = or i32 %1209, %1203
  br i1 %998, label %1125, label %1211

1211:                                             ; preds = %1204
  %1212 = getelementptr inbounds i8, i8* %1070, i64 3
  %1213 = load i8, i8* %1212, align 1
  %1214 = icmp ugt i8 %1213, 63
  %1215 = zext i1 %1214 to i32
  %1216 = shl nuw nsw i32 %1215, 4
  %1217 = or i32 %1216, %1210
  br i1 %999, label %1125, label %1218

1218:                                             ; preds = %1211
  %1219 = getelementptr inbounds i8, i8* %1070, i64 4
  %1220 = load i8, i8* %1219, align 1
  %1221 = icmp ugt i8 %1220, 63
  %1222 = zext i1 %1221 to i32
  %1223 = shl nuw nsw i32 %1222, 3
  %1224 = or i32 %1223, %1217
  br i1 %1000, label %1125, label %1225

1225:                                             ; preds = %1218
  %1226 = getelementptr inbounds i8, i8* %1070, i64 5
  %1227 = load i8, i8* %1226, align 1
  %1228 = icmp ugt i8 %1227, 63
  %1229 = zext i1 %1228 to i32
  %1230 = shl nuw nsw i32 %1229, 2
  %1231 = or i32 %1230, %1224
  br i1 %1001, label %1125, label %1232

1232:                                             ; preds = %1225
  %1233 = getelementptr inbounds i8, i8* %1070, i64 6
  %1234 = load i8, i8* %1233, align 1
  %1235 = icmp ugt i8 %1234, 63
  %1236 = zext i1 %1235 to i32
  %1237 = shl nuw nsw i32 %1236, 1
  %1238 = or i32 %1237, %1231
  br label %1125
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @_ZNK7SkGlyph8rowBytesEv(%class.SkGlyph*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #3

declare zeroext i1 @_ZN8SkBitmap7setInfoERK11SkImageInfom(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i64) local_unnamed_addr #3

declare void @_ZN8SkBitmap9setPixelsEPv(%class.SkBitmap*, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN8SkCanvasC1ERK8SkBitmap(%class.SkCanvas*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #3

declare void @_ZN8SkCanvas9translateEff(%class.SkCanvas*, float, float) local_unnamed_addr #3

declare void @_ZN7SkPaintC1Ev(%class.SkPaint*) unnamed_addr #3

declare i32 @FT_Palette_Select(%struct.FT_FaceRec_*, i16 zeroext, %struct.FT_Color_**) local_unnamed_addr #3

declare zeroext i8 @FT_Get_Color_Glyph_Layer(%struct.FT_FaceRec_*, i32, i32*, i32*, %struct.FT_LayerIterator_*) local_unnamed_addr #3

declare void @_ZN7SkPaint8setColorEj(%class.SkPaint*, i32) local_unnamed_addr #3

declare void @_ZN6SkPathC1Ev(%class.SkPath*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN29SkScalerContext_FreeType_Base16generateFacePathEP11FT_FaceRec_tP6SkPath(%class.SkScalerContext_FreeType_Base* nocapture readnone, %struct.FT_FaceRec_*, i16 zeroext, %class.SkPath*) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.(anonymous namespace)::SkFTGeometrySink", align 8
  %6 = zext i16 %2 to i32
  %7 = tail call i32 @FT_Load_Glyph(%struct.FT_FaceRec_* %1, i32 %6, i32 8) #14
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %3) #14
  br label %27

11:                                               ; preds = %4
  %12 = bitcast %"class.(anonymous namespace)::SkFTGeometrySink"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false) #14
  %13 = getelementptr inbounds %"class.(anonymous namespace)::SkFTGeometrySink", %"class.(anonymous namespace)::SkFTGeometrySink"* %5, i64 0, i32 0
  store %class.SkPath* %3, %class.SkPath** %13, align 8
  %14 = getelementptr inbounds %"class.(anonymous namespace)::SkFTGeometrySink", %"class.(anonymous namespace)::SkFTGeometrySink"* %5, i64 0, i32 1
  store i8 0, i8* %14, align 8
  %15 = getelementptr inbounds %"class.(anonymous namespace)::SkFTGeometrySink", %"class.(anonymous namespace)::SkFTGeometrySink"* %5, i64 0, i32 2, i32 0
  %16 = bitcast i64* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 16, i1 false) #14
  %17 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %1, i64 0, i32 21
  %18 = load %struct.FT_GlyphSlotRec_*, %struct.FT_GlyphSlotRec_** %17, align 8
  %19 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %18, i64 0, i32 13
  %20 = call i32 @FT_Outline_Decompose(%struct.FT_Outline_* %19, %struct.FT_Outline_Funcs_* nonnull @_ZN12_GLOBAL__N_116SkFTGeometrySink5FuncsE, i8* nonnull %12) #14
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %11
  %23 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath* %3) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #14
  br label %27

24:                                               ; preds = %11
  %25 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %3) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #14
  %26 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %3) #14
  br label %27

27:                                               ; preds = %9, %22, %24
  %28 = phi i1 [ false, %9 ], [ false, %24 ], [ true, %22 ]
  ret i1 %28
}

declare void @_ZN8SkCanvas8drawPathERK6SkPathRK7SkPaint(%class.SkCanvas*, %class.SkPath* dereferenceable(16), %class.SkPaint* dereferenceable(72)) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7SkPaintD1Ev(%class.SkPaint*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN8SkCanvasD1Ev(%class.SkCanvas*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #4

declare void @FT_Outline_Translate(%struct.FT_Outline_*, i64, i64) local_unnamed_addr #3

declare i32 @FT_Render_Glyph(%struct.FT_GlyphSlotRec_*, i32) local_unnamed_addr #3

declare void @_ZNK7SkGlyph4maskEv(%struct.SkMask* sret, %class.SkGlyph*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_112copyFT2LCD16ILb0EEEvRK10FT_Bitmap_RK6SkMaskiPKhS8_S8_(%struct.FT_Bitmap_* nocapture readonly dereferenceable(40), %struct.SkMask* nocapture readonly dereferenceable(32), i32) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %0, i64 0, i32 5
  %5 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %0, i64 0, i32 3
  %6 = load i8*, i8** %5, align 8
  %7 = bitcast %struct.SkMask* %1 to i16**
  %8 = load i16*, i16** %7, align 8
  %9 = bitcast i16* %8 to i8*
  %10 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = sub i32 %14, %16
  %18 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = sub i32 %19, %21
  %23 = load i8, i8* %4, align 2
  switch i8 %23, label %540 [
    i8 1, label %76
    i8 2, label %54
    i8 5, label %32
    i8 6, label %24
  ]

24:                                               ; preds = %3
  %25 = icmp sgt i32 %22, 0
  br i1 %25, label %26, label %540

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %0, i64 0, i32 2
  %28 = icmp eq i32 %2, 0
  %29 = icmp sgt i32 %17, 0
  %30 = load i32, i32* %27, align 8
  %31 = zext i32 %17 to i64
  br label %487

32:                                               ; preds = %3
  %33 = icmp sgt i32 %22, 0
  br i1 %33, label %34, label %540

34:                                               ; preds = %32
  %35 = icmp eq i32 %2, 0
  %36 = icmp sgt i32 %17, 0
  %37 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %0, i64 0, i32 2
  %38 = zext i32 %17 to i64
  %39 = zext i32 %17 to i64
  %40 = getelementptr i16, i16* %8, i64 %39
  %41 = bitcast i16* %40 to i8*
  %42 = mul nuw nsw i64 %39, 3
  %43 = getelementptr i16, i16* %8, i64 %39
  %44 = bitcast i16* %43 to i8*
  %45 = mul nuw nsw i64 %39, 3
  %46 = icmp ult i32 %17, 8
  %47 = and i64 %39, 4294967288
  %48 = mul nuw nsw i64 %47, 3
  %49 = icmp eq i64 %47, %39
  %50 = icmp ult i32 %17, 8
  %51 = and i64 %39, 4294967288
  %52 = mul nuw nsw i64 %51, 3
  %53 = icmp eq i64 %51, %39
  br label %270

54:                                               ; preds = %3
  %55 = icmp sgt i32 %22, 0
  br i1 %55, label %56, label %540

56:                                               ; preds = %54
  %57 = icmp sgt i32 %17, 0
  %58 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %0, i64 0, i32 2
  %59 = zext i32 %17 to i64
  %60 = getelementptr i16, i16* %8, i64 %59
  %61 = bitcast i16* %60 to i8*
  %62 = and i64 %59, 4294967288
  %63 = add nsw i64 %62, -8
  %64 = lshr exact i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = icmp ult i32 %17, 8
  %67 = and i64 %59, 4294967288
  %68 = and i64 %65, 1
  %69 = icmp eq i64 %63, 0
  %70 = sub nuw nsw i64 %65, %68
  %71 = icmp eq i64 %68, 0
  %72 = icmp eq i64 %67, %59
  %73 = and i64 %59, 1
  %74 = icmp eq i64 %73, 0
  %75 = sub nsw i64 0, %59
  br label %149

76:                                               ; preds = %3
  %77 = icmp sgt i32 %22, 0
  br i1 %77, label %78, label %540

78:                                               ; preds = %76
  %79 = icmp sgt i32 %17, 0
  %80 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %0, i64 0, i32 2
  %81 = zext i32 %17 to i64
  %82 = and i64 %81, 1
  %83 = icmp eq i32 %17, 1
  %84 = sub nsw i64 %81, %82
  %85 = icmp eq i64 %82, 0
  br label %86

86:                                               ; preds = %78, %108
  %87 = phi i32 [ %22, %78 ], [ %90, %108 ]
  %88 = phi i16* [ %8, %78 ], [ %111, %108 ]
  %89 = phi i8* [ %6, %78 ], [ %114, %108 ]
  %90 = add nsw i32 %87, -1
  br i1 %79, label %91, label %108

91:                                               ; preds = %86
  br i1 %83, label %92, label %116

92:                                               ; preds = %116, %91
  %93 = phi i64 [ 0, %91 ], [ %146, %116 ]
  br i1 %85, label %108, label %94

94:                                               ; preds = %92
  %95 = trunc i64 %93 to i32
  %96 = lshr i64 %93, 3
  %97 = and i64 %96, 536870911
  %98 = getelementptr inbounds i8, i8* %89, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = and i32 %95, 7
  %102 = xor i32 %101, 7
  %103 = lshr i32 %100, %102
  %104 = trunc i32 %103 to i16
  %105 = and i16 %104, 1
  %106 = sub nsw i16 0, %105
  %107 = getelementptr inbounds i16, i16* %88, i64 %93
  store i16 %106, i16* %107, align 2
  br label %108

108:                                              ; preds = %94, %92, %86
  %109 = bitcast i16* %88 to i8*
  %110 = getelementptr inbounds i8, i8* %109, i64 %12
  %111 = bitcast i8* %110 to i16*
  %112 = load i32, i32* %80, align 8
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8, i8* %89, i64 %113
  %115 = icmp sgt i32 %90, 0
  br i1 %115, label %86, label %540

116:                                              ; preds = %91, %116
  %117 = phi i64 [ %146, %116 ], [ 0, %91 ]
  %118 = phi i64 [ %147, %116 ], [ %84, %91 ]
  %119 = trunc i64 %117 to i32
  %120 = lshr i64 %117, 3
  %121 = and i64 %120, 536870911
  %122 = getelementptr inbounds i8, i8* %89, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = and i32 %119, 6
  %126 = xor i32 %125, 7
  %127 = lshr i32 %124, %126
  %128 = trunc i32 %127 to i16
  %129 = and i16 %128, 1
  %130 = sub nsw i16 0, %129
  %131 = getelementptr inbounds i16, i16* %88, i64 %117
  store i16 %130, i16* %131, align 2
  %132 = or i64 %117, 1
  %133 = trunc i64 %117 to i32
  %134 = lshr i64 %117, 3
  %135 = and i64 %134, 536870911
  %136 = getelementptr inbounds i8, i8* %89, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = and i32 %133, 6
  %140 = xor i32 %139, 6
  %141 = lshr i32 %138, %140
  %142 = trunc i32 %141 to i16
  %143 = and i16 %142, 1
  %144 = sub nsw i16 0, %143
  %145 = getelementptr inbounds i16, i16* %88, i64 %132
  store i16 %144, i16* %145, align 2
  %146 = add nuw nsw i64 %117, 2
  %147 = add i64 %118, -2
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %92, label %116

149:                                              ; preds = %56, %234
  %150 = phi i64 [ 0, %56 ], [ %242, %234 ]
  %151 = phi i32 [ %22, %56 ], [ %157, %234 ]
  %152 = phi i16* [ %8, %56 ], [ %237, %234 ]
  %153 = phi i8* [ %6, %56 ], [ %240, %234 ]
  %154 = mul i64 %150, %12
  %155 = getelementptr i8, i8* %9, i64 %154
  %156 = getelementptr i8, i8* %61, i64 %154
  %157 = add nsw i32 %151, -1
  br i1 %57, label %158, label %234

158:                                              ; preds = %149
  br i1 %66, label %159, label %178

159:                                              ; preds = %233, %178, %158
  %160 = phi i64 [ 0, %178 ], [ 0, %158 ], [ %67, %233 ]
  %161 = xor i64 %160, -1
  br i1 %74, label %175, label %162

162:                                              ; preds = %159
  %163 = getelementptr inbounds i8, i8* %153, i64 %160
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = lshr i32 %165, 3
  %167 = shl nuw nsw i32 %166, 11
  %168 = lshr i32 %165, 2
  %169 = shl nuw nsw i32 %168, 5
  %170 = or i32 %167, %166
  %171 = or i32 %170, %169
  %172 = trunc i32 %171 to i16
  %173 = getelementptr inbounds i16, i16* %152, i64 %160
  store i16 %172, i16* %173, align 2
  %174 = or i64 %160, 1
  br label %175

175:                                              ; preds = %162, %159
  %176 = phi i64 [ %174, %162 ], [ %160, %159 ]
  %177 = icmp eq i64 %161, %75
  br i1 %177, label %234, label %243

178:                                              ; preds = %158
  %179 = getelementptr i8, i8* %153, i64 %59
  %180 = icmp ult i8* %155, %179
  %181 = icmp ult i8* %153, %156
  %182 = and i1 %180, %181
  br i1 %182, label %159, label %183

183:                                              ; preds = %178
  br i1 %69, label %217, label %184

184:                                              ; preds = %183, %184
  %185 = phi i64 [ %214, %184 ], [ 0, %183 ]
  %186 = phi i64 [ %215, %184 ], [ %70, %183 ]
  %187 = getelementptr inbounds i8, i8* %153, i64 %185
  %188 = bitcast i8* %187 to <8 x i8>*
  %189 = load <8 x i8>, <8 x i8>* %188, align 1, !alias.scope !26
  %190 = zext <8 x i8> %189 to <8 x i32>
  %191 = lshr <8 x i32> %190, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %192 = shl nuw nsw <8 x i32> %191, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %193 = lshr <8 x i32> %190, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %194 = shl nuw nsw <8 x i32> %193, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %195 = or <8 x i32> %192, %191
  %196 = or <8 x i32> %195, %194
  %197 = trunc <8 x i32> %196 to <8 x i16>
  %198 = getelementptr inbounds i16, i16* %152, i64 %185
  %199 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> %197, <8 x i16>* %199, align 2, !alias.scope !29, !noalias !26
  %200 = or i64 %185, 8
  %201 = getelementptr inbounds i8, i8* %153, i64 %200
  %202 = bitcast i8* %201 to <8 x i8>*
  %203 = load <8 x i8>, <8 x i8>* %202, align 1, !alias.scope !26
  %204 = zext <8 x i8> %203 to <8 x i32>
  %205 = lshr <8 x i32> %204, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %206 = shl nuw nsw <8 x i32> %205, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %207 = lshr <8 x i32> %204, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %208 = shl nuw nsw <8 x i32> %207, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %209 = or <8 x i32> %206, %205
  %210 = or <8 x i32> %209, %208
  %211 = trunc <8 x i32> %210 to <8 x i16>
  %212 = getelementptr inbounds i16, i16* %152, i64 %200
  %213 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %213, align 2, !alias.scope !29, !noalias !26
  %214 = add i64 %185, 16
  %215 = add i64 %186, -2
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %184, !llvm.loop !31

217:                                              ; preds = %184, %183
  %218 = phi i64 [ 0, %183 ], [ %214, %184 ]
  br i1 %71, label %233, label %219

219:                                              ; preds = %217
  %220 = getelementptr inbounds i8, i8* %153, i64 %218
  %221 = bitcast i8* %220 to <8 x i8>*
  %222 = load <8 x i8>, <8 x i8>* %221, align 1, !alias.scope !26
  %223 = zext <8 x i8> %222 to <8 x i32>
  %224 = lshr <8 x i32> %223, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %225 = shl nuw nsw <8 x i32> %224, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %226 = lshr <8 x i32> %223, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %227 = shl nuw nsw <8 x i32> %226, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %228 = or <8 x i32> %225, %224
  %229 = or <8 x i32> %228, %227
  %230 = trunc <8 x i32> %229 to <8 x i16>
  %231 = getelementptr inbounds i16, i16* %152, i64 %218
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %232, align 2, !alias.scope !29, !noalias !26
  br label %233

233:                                              ; preds = %217, %219
  br i1 %72, label %234, label %159

234:                                              ; preds = %175, %243, %233, %149
  %235 = bitcast i16* %152 to i8*
  %236 = getelementptr inbounds i8, i8* %235, i64 %12
  %237 = bitcast i8* %236 to i16*
  %238 = load i32, i32* %58, align 8
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i8, i8* %153, i64 %239
  %241 = icmp sgt i32 %157, 0
  %242 = add i64 %150, 1
  br i1 %241, label %149, label %540

243:                                              ; preds = %175, %243
  %244 = phi i64 [ %268, %243 ], [ %176, %175 ]
  %245 = getelementptr inbounds i8, i8* %153, i64 %244
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i32
  %248 = lshr i32 %247, 3
  %249 = shl nuw nsw i32 %248, 11
  %250 = lshr i32 %247, 2
  %251 = shl nuw nsw i32 %250, 5
  %252 = or i32 %249, %248
  %253 = or i32 %252, %251
  %254 = trunc i32 %253 to i16
  %255 = getelementptr inbounds i16, i16* %152, i64 %244
  store i16 %254, i16* %255, align 2
  %256 = add nuw nsw i64 %244, 1
  %257 = getelementptr inbounds i8, i8* %153, i64 %256
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i32
  %260 = lshr i32 %259, 3
  %261 = shl nuw nsw i32 %260, 11
  %262 = lshr i32 %259, 2
  %263 = shl nuw nsw i32 %262, 5
  %264 = or i32 %261, %260
  %265 = or i32 %264, %263
  %266 = trunc i32 %265 to i16
  %267 = getelementptr inbounds i16, i16* %152, i64 %256
  store i16 %266, i16* %267, align 2
  %268 = add nuw nsw i64 %244, 2
  %269 = icmp eq i64 %268, %59
  br i1 %269, label %234, label %243, !llvm.loop !32

270:                                              ; preds = %34, %478
  %271 = phi i64 [ 0, %34 ], [ %486, %478 ]
  %272 = phi i32 [ %22, %34 ], [ %281, %478 ]
  %273 = phi i16* [ %8, %34 ], [ %484, %478 ]
  %274 = phi i8* [ %6, %34 ], [ %481, %478 ]
  %275 = mul i64 %271, %12
  %276 = getelementptr i8, i8* %9, i64 %275
  %277 = getelementptr i8, i8* %44, i64 %275
  %278 = mul i64 %271, %12
  %279 = getelementptr i8, i8* %9, i64 %278
  %280 = getelementptr i8, i8* %41, i64 %278
  %281 = add nsw i32 %272, -1
  br i1 %35, label %398, label %282

282:                                              ; preds = %270
  br i1 %36, label %283, label %478

283:                                              ; preds = %282
  br i1 %46, label %284, label %287

284:                                              ; preds = %397, %287, %283
  %285 = phi i64 [ 0, %287 ], [ 0, %283 ], [ %47, %397 ]
  %286 = phi i8* [ %274, %287 ], [ %274, %283 ], [ %293, %397 ]
  br label %434

287:                                              ; preds = %283
  %288 = getelementptr i8, i8* %274, i64 %45
  %289 = icmp ult i8* %276, %288
  %290 = icmp ult i8* %274, %277
  %291 = and i1 %289, %290
  br i1 %291, label %284, label %292

292:                                              ; preds = %287
  %293 = getelementptr i8, i8* %274, i64 %48
  br label %294

294:                                              ; preds = %294, %292
  %295 = phi i64 [ 0, %292 ], [ %395, %294 ]
  %296 = mul i64 %295, 3
  %297 = getelementptr i8, i8* %274, i64 %296
  %298 = or i64 %295, 1
  %299 = mul i64 %298, 3
  %300 = getelementptr i8, i8* %274, i64 %299
  %301 = or i64 %295, 2
  %302 = mul i64 %301, 3
  %303 = getelementptr i8, i8* %274, i64 %302
  %304 = or i64 %295, 3
  %305 = mul i64 %304, 3
  %306 = getelementptr i8, i8* %274, i64 %305
  %307 = or i64 %295, 4
  %308 = mul i64 %307, 3
  %309 = getelementptr i8, i8* %274, i64 %308
  %310 = or i64 %295, 5
  %311 = mul i64 %310, 3
  %312 = getelementptr i8, i8* %274, i64 %311
  %313 = or i64 %295, 6
  %314 = mul i64 %313, 3
  %315 = getelementptr i8, i8* %274, i64 %314
  %316 = or i64 %295, 7
  %317 = mul i64 %316, 3
  %318 = getelementptr i8, i8* %274, i64 %317
  %319 = getelementptr inbounds i8, i8* %297, i64 2
  %320 = getelementptr inbounds i8, i8* %300, i64 2
  %321 = getelementptr inbounds i8, i8* %303, i64 2
  %322 = getelementptr inbounds i8, i8* %306, i64 2
  %323 = getelementptr inbounds i8, i8* %309, i64 2
  %324 = getelementptr inbounds i8, i8* %312, i64 2
  %325 = getelementptr inbounds i8, i8* %315, i64 2
  %326 = getelementptr inbounds i8, i8* %318, i64 2
  %327 = load i8, i8* %319, align 1, !alias.scope !33
  %328 = load i8, i8* %320, align 1, !alias.scope !33
  %329 = load i8, i8* %321, align 1, !alias.scope !33
  %330 = load i8, i8* %322, align 1, !alias.scope !33
  %331 = load i8, i8* %323, align 1, !alias.scope !33
  %332 = load i8, i8* %324, align 1, !alias.scope !33
  %333 = load i8, i8* %325, align 1, !alias.scope !33
  %334 = load i8, i8* %326, align 1, !alias.scope !33
  %335 = insertelement <8 x i8> undef, i8 %327, i32 0
  %336 = insertelement <8 x i8> %335, i8 %328, i32 1
  %337 = insertelement <8 x i8> %336, i8 %329, i32 2
  %338 = insertelement <8 x i8> %337, i8 %330, i32 3
  %339 = insertelement <8 x i8> %338, i8 %331, i32 4
  %340 = insertelement <8 x i8> %339, i8 %332, i32 5
  %341 = insertelement <8 x i8> %340, i8 %333, i32 6
  %342 = insertelement <8 x i8> %341, i8 %334, i32 7
  %343 = getelementptr inbounds i8, i8* %297, i64 1
  %344 = getelementptr inbounds i8, i8* %300, i64 1
  %345 = getelementptr inbounds i8, i8* %303, i64 1
  %346 = getelementptr inbounds i8, i8* %306, i64 1
  %347 = getelementptr inbounds i8, i8* %309, i64 1
  %348 = getelementptr inbounds i8, i8* %312, i64 1
  %349 = getelementptr inbounds i8, i8* %315, i64 1
  %350 = getelementptr inbounds i8, i8* %318, i64 1
  %351 = load i8, i8* %343, align 1, !alias.scope !33
  %352 = load i8, i8* %344, align 1, !alias.scope !33
  %353 = load i8, i8* %345, align 1, !alias.scope !33
  %354 = load i8, i8* %346, align 1, !alias.scope !33
  %355 = load i8, i8* %347, align 1, !alias.scope !33
  %356 = load i8, i8* %348, align 1, !alias.scope !33
  %357 = load i8, i8* %349, align 1, !alias.scope !33
  %358 = load i8, i8* %350, align 1, !alias.scope !33
  %359 = insertelement <8 x i8> undef, i8 %351, i32 0
  %360 = insertelement <8 x i8> %359, i8 %352, i32 1
  %361 = insertelement <8 x i8> %360, i8 %353, i32 2
  %362 = insertelement <8 x i8> %361, i8 %354, i32 3
  %363 = insertelement <8 x i8> %362, i8 %355, i32 4
  %364 = insertelement <8 x i8> %363, i8 %356, i32 5
  %365 = insertelement <8 x i8> %364, i8 %357, i32 6
  %366 = insertelement <8 x i8> %365, i8 %358, i32 7
  %367 = load i8, i8* %297, align 1, !alias.scope !33
  %368 = load i8, i8* %300, align 1, !alias.scope !33
  %369 = load i8, i8* %303, align 1, !alias.scope !33
  %370 = load i8, i8* %306, align 1, !alias.scope !33
  %371 = load i8, i8* %309, align 1, !alias.scope !33
  %372 = load i8, i8* %312, align 1, !alias.scope !33
  %373 = load i8, i8* %315, align 1, !alias.scope !33
  %374 = load i8, i8* %318, align 1, !alias.scope !33
  %375 = insertelement <8 x i8> undef, i8 %367, i32 0
  %376 = insertelement <8 x i8> %375, i8 %368, i32 1
  %377 = insertelement <8 x i8> %376, i8 %369, i32 2
  %378 = insertelement <8 x i8> %377, i8 %370, i32 3
  %379 = insertelement <8 x i8> %378, i8 %371, i32 4
  %380 = insertelement <8 x i8> %379, i8 %372, i32 5
  %381 = insertelement <8 x i8> %380, i8 %373, i32 6
  %382 = insertelement <8 x i8> %381, i8 %374, i32 7
  %383 = lshr <8 x i8> %342, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %384 = zext <8 x i8> %383 to <8 x i16>
  %385 = shl nuw <8 x i16> %384, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %386 = lshr <8 x i8> %366, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %387 = zext <8 x i8> %386 to <8 x i16>
  %388 = shl nuw nsw <8 x i16> %387, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %389 = or <8 x i16> %388, %385
  %390 = lshr <8 x i8> %382, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %391 = zext <8 x i8> %390 to <8 x i16>
  %392 = or <8 x i16> %389, %391
  %393 = getelementptr inbounds i16, i16* %273, i64 %295
  %394 = bitcast i16* %393 to <8 x i16>*
  store <8 x i16> %392, <8 x i16>* %394, align 2, !alias.scope !36, !noalias !33
  %395 = add i64 %295, 8
  %396 = icmp eq i64 %395, %47
  br i1 %396, label %397, label %294, !llvm.loop !38

397:                                              ; preds = %294
  br i1 %49, label %478, label %284

398:                                              ; preds = %270
  br i1 %36, label %399, label %478

399:                                              ; preds = %398
  br i1 %50, label %400, label %403

400:                                              ; preds = %433, %403, %399
  %401 = phi i64 [ 0, %403 ], [ 0, %399 ], [ %51, %433 ]
  %402 = phi i8* [ %274, %403 ], [ %274, %399 ], [ %409, %433 ]
  br label %456

403:                                              ; preds = %399
  %404 = getelementptr i8, i8* %274, i64 %42
  %405 = icmp ult i8* %279, %404
  %406 = icmp ult i8* %274, %280
  %407 = and i1 %405, %406
  br i1 %407, label %400, label %408

408:                                              ; preds = %403
  %409 = getelementptr i8, i8* %274, i64 %52
  br label %410

410:                                              ; preds = %410, %408
  %411 = phi i64 [ 0, %408 ], [ %431, %410 ]
  %412 = mul i64 %411, 3
  %413 = getelementptr i8, i8* %274, i64 %412
  %414 = bitcast i8* %413 to <24 x i8>*
  %415 = load <24 x i8>, <24 x i8>* %414, align 1
  %416 = shufflevector <24 x i8> %415, <24 x i8> undef, <8 x i32> <i32 0, i32 3, i32 6, i32 9, i32 12, i32 15, i32 18, i32 21>
  %417 = shufflevector <24 x i8> %415, <24 x i8> undef, <8 x i32> <i32 1, i32 4, i32 7, i32 10, i32 13, i32 16, i32 19, i32 22>
  %418 = shufflevector <24 x i8> %415, <24 x i8> undef, <8 x i32> <i32 2, i32 5, i32 8, i32 11, i32 14, i32 17, i32 20, i32 23>
  %419 = lshr <8 x i8> %416, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %420 = zext <8 x i8> %419 to <8 x i16>
  %421 = shl nuw <8 x i16> %420, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %422 = lshr <8 x i8> %417, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %423 = zext <8 x i8> %422 to <8 x i16>
  %424 = shl nuw nsw <8 x i16> %423, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %425 = or <8 x i16> %424, %421
  %426 = lshr <8 x i8> %418, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %427 = zext <8 x i8> %426 to <8 x i16>
  %428 = or <8 x i16> %425, %427
  %429 = getelementptr inbounds i16, i16* %273, i64 %411
  %430 = bitcast i16* %429 to <8 x i16>*
  store <8 x i16> %428, <8 x i16>* %430, align 2, !alias.scope !39, !noalias !42
  %431 = add i64 %411, 8
  %432 = icmp eq i64 %431, %51
  br i1 %432, label %433, label %410, !llvm.loop !44

433:                                              ; preds = %410
  br i1 %53, label %478, label %400

434:                                              ; preds = %284, %434
  %435 = phi i64 [ %454, %434 ], [ %285, %284 ]
  %436 = phi i8* [ %453, %434 ], [ %286, %284 ]
  %437 = getelementptr inbounds i8, i8* %436, i64 2
  %438 = load i8, i8* %437, align 1
  %439 = getelementptr inbounds i8, i8* %436, i64 1
  %440 = load i8, i8* %439, align 1
  %441 = load i8, i8* %436, align 1
  %442 = lshr i8 %438, 3
  %443 = zext i8 %442 to i16
  %444 = shl nuw i16 %443, 11
  %445 = lshr i8 %440, 2
  %446 = zext i8 %445 to i16
  %447 = shl nuw nsw i16 %446, 5
  %448 = or i16 %447, %444
  %449 = lshr i8 %441, 3
  %450 = zext i8 %449 to i16
  %451 = or i16 %448, %450
  %452 = getelementptr inbounds i16, i16* %273, i64 %435
  store i16 %451, i16* %452, align 2
  %453 = getelementptr inbounds i8, i8* %436, i64 3
  %454 = add nuw nsw i64 %435, 1
  %455 = icmp eq i64 %454, %38
  br i1 %455, label %478, label %434, !llvm.loop !45

456:                                              ; preds = %400, %456
  %457 = phi i64 [ %476, %456 ], [ %401, %400 ]
  %458 = phi i8* [ %475, %456 ], [ %402, %400 ]
  %459 = load i8, i8* %458, align 1
  %460 = getelementptr inbounds i8, i8* %458, i64 1
  %461 = load i8, i8* %460, align 1
  %462 = getelementptr inbounds i8, i8* %458, i64 2
  %463 = load i8, i8* %462, align 1
  %464 = lshr i8 %459, 3
  %465 = zext i8 %464 to i16
  %466 = shl nuw i16 %465, 11
  %467 = lshr i8 %461, 2
  %468 = zext i8 %467 to i16
  %469 = shl nuw nsw i16 %468, 5
  %470 = or i16 %469, %466
  %471 = lshr i8 %463, 3
  %472 = zext i8 %471 to i16
  %473 = or i16 %470, %472
  %474 = getelementptr inbounds i16, i16* %273, i64 %457
  store i16 %473, i16* %474, align 2
  %475 = getelementptr inbounds i8, i8* %458, i64 3
  %476 = add nuw nsw i64 %457, 1
  %477 = icmp eq i64 %476, %39
  br i1 %477, label %478, label %456, !llvm.loop !46

478:                                              ; preds = %434, %456, %397, %433, %282, %398
  %479 = load i32, i32* %37, align 8
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds i8, i8* %274, i64 %480
  %482 = bitcast i16* %273 to i8*
  %483 = getelementptr inbounds i8, i8* %482, i64 %12
  %484 = bitcast i8* %483 to i16*
  %485 = icmp sgt i32 %281, 0
  %486 = add i64 %271, 1
  br i1 %485, label %270, label %540

487:                                              ; preds = %26, %503
  %488 = phi i32 [ %30, %26 ], [ %504, %503 ]
  %489 = phi i32 [ %22, %26 ], [ %492, %503 ]
  %490 = phi i16* [ %8, %26 ], [ %510, %503 ]
  %491 = phi i8* [ %6, %26 ], [ %507, %503 ]
  %492 = add nsw i32 %489, -1
  %493 = ptrtoint i8* %491 to i64
  %494 = sext i32 %488 to i64
  %495 = getelementptr inbounds i8, i8* %491, i64 %494
  %496 = getelementptr inbounds i8, i8* %495, i64 %494
  %497 = ptrtoint i8* %496 to i64
  br i1 %29, label %498, label %503

498:                                              ; preds = %487
  %499 = select i1 %28, i64 %497, i64 %493
  %500 = select i1 %28, i64 %493, i64 %497
  br label %512

501:                                              ; preds = %512
  %502 = load i32, i32* %27, align 8
  br label %503

503:                                              ; preds = %501, %487
  %504 = phi i32 [ %502, %501 ], [ %488, %487 ]
  %505 = mul nsw i32 %504, 3
  %506 = sext i32 %505 to i64
  %507 = getelementptr inbounds i8, i8* %491, i64 %506
  %508 = bitcast i16* %490 to i8*
  %509 = getelementptr inbounds i8, i8* %508, i64 %12
  %510 = bitcast i8* %509 to i16*
  %511 = icmp sgt i32 %492, 0
  br i1 %511, label %487, label %540

512:                                              ; preds = %512, %498
  %513 = phi i64 [ 0, %498 ], [ %538, %512 ]
  %514 = phi i8* [ %495, %498 ], [ %521, %512 ]
  %515 = phi i64 [ %499, %498 ], [ %525, %512 ]
  %516 = phi i64 [ %500, %498 ], [ %519, %512 ]
  %517 = inttoptr i64 %516 to i8*
  %518 = getelementptr inbounds i8, i8* %517, i64 1
  %519 = ptrtoint i8* %518 to i64
  %520 = load i8, i8* %517, align 1
  %521 = getelementptr inbounds i8, i8* %514, i64 1
  %522 = load i8, i8* %514, align 1
  %523 = inttoptr i64 %515 to i8*
  %524 = getelementptr inbounds i8, i8* %523, i64 1
  %525 = ptrtoint i8* %524 to i64
  %526 = load i8, i8* %523, align 1
  %527 = lshr i8 %520, 3
  %528 = zext i8 %527 to i16
  %529 = shl nuw i16 %528, 11
  %530 = lshr i8 %522, 2
  %531 = zext i8 %530 to i16
  %532 = shl nuw nsw i16 %531, 5
  %533 = or i16 %532, %529
  %534 = lshr i8 %526, 3
  %535 = zext i8 %534 to i16
  %536 = or i16 %533, %535
  %537 = getelementptr inbounds i16, i16* %490, i64 %513
  store i16 %536, i16* %537, align 2
  %538 = add nuw nsw i64 %513, 1
  %539 = icmp eq i64 %538, %31
  br i1 %539, label %501, label %512

540:                                              ; preds = %503, %478, %234, %108, %24, %32, %54, %76, %3
  ret void
}

declare void @FT_Outline_Get_CBox(%struct.FT_Outline_*, %struct.FT_BBox_*) local_unnamed_addr #3

declare i32 @FT_Outline_Get_Bitmap(%struct.FT_LibraryRec_*, %struct.FT_Outline_*, %struct.FT_Bitmap_*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_112copyFTBitmapERK10FT_Bitmap_R6SkMask(%struct.FT_Bitmap_* nocapture readonly dereferenceable(40), %struct.SkMask* nocapture readonly dereferenceable(32)) unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %0, i64 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %0, i64 0, i32 5
  %6 = load i8, i8* %5, align 2
  %7 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = icmp slt i32 %8, 0
  %10 = sub nsw i32 0, %8
  %11 = select i1 %9, i32 %10, i32 %8
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  %16 = load i8, i8* %15, align 4
  %17 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %0, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %0, i64 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = zext i32 %24 to i64
  %26 = icmp eq i8 %16, 4
  br i1 %26, label %27, label %28

27:                                               ; preds = %2
  tail call fastcc void @_ZN12_GLOBAL__N_112copyFT2LCD16ILb0EEEvRK10FT_Bitmap_RK6SkMaskiPKhS8_S8_(%struct.FT_Bitmap_* dereferenceable(40) %0, %struct.SkMask* dereferenceable(32) %1, i32 0)
  br label %269

28:                                               ; preds = %2
  %29 = icmp eq i8 %6, 1
  %30 = icmp eq i8 %16, 0
  %31 = and i1 %29, %30
  br i1 %31, label %36, label %32

32:                                               ; preds = %28
  %33 = icmp eq i8 %6, 2
  %34 = icmp eq i8 %16, 1
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %74

36:                                               ; preds = %32, %28
  %37 = icmp ult i64 %19, %12
  %38 = select i1 %37, i64 %19, i64 %12
  %39 = icmp eq i32 %24, 0
  br i1 %39, label %269, label %40

40:                                               ; preds = %36
  %41 = sext i32 %8 to i64
  %42 = add nsw i64 %25, -1
  %43 = and i64 %25, 3
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %55, label %45

45:                                               ; preds = %40, %45
  %46 = phi i8* [ %51, %45 ], [ %4, %40 ]
  %47 = phi i8* [ %52, %45 ], [ %14, %40 ]
  %48 = phi i64 [ %50, %45 ], [ %25, %40 ]
  %49 = phi i64 [ %53, %45 ], [ %43, %40 ]
  %50 = add nsw i64 %48, -1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 1 %46, i64 %38, i1 false)
  %51 = getelementptr inbounds i8, i8* %46, i64 %41
  %52 = getelementptr inbounds i8, i8* %47, i64 %19
  %53 = add i64 %49, -1
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %45, !llvm.loop !47

55:                                               ; preds = %45, %40
  %56 = phi i8* [ %4, %40 ], [ %51, %45 ]
  %57 = phi i8* [ %14, %40 ], [ %52, %45 ]
  %58 = phi i64 [ %25, %40 ], [ %50, %45 ]
  %59 = icmp ult i64 %42, 3
  br i1 %59, label %269, label %60

60:                                               ; preds = %55, %60
  %61 = phi i8* [ %71, %60 ], [ %56, %55 ]
  %62 = phi i8* [ %72, %60 ], [ %57, %55 ]
  %63 = phi i64 [ %70, %60 ], [ %58, %55 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 1 %61, i64 %38, i1 false)
  %64 = getelementptr inbounds i8, i8* %61, i64 %41
  %65 = getelementptr inbounds i8, i8* %62, i64 %19
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* align 1 %64, i64 %38, i1 false)
  %66 = getelementptr inbounds i8, i8* %64, i64 %41
  %67 = getelementptr inbounds i8, i8* %65, i64 %19
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %66, i64 %38, i1 false)
  %68 = getelementptr inbounds i8, i8* %66, i64 %41
  %69 = getelementptr inbounds i8, i8* %67, i64 %19
  %70 = add nsw i64 %63, -4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %69, i8* align 1 %68, i64 %38, i1 false)
  %71 = getelementptr inbounds i8, i8* %68, i64 %41
  %72 = getelementptr inbounds i8, i8* %69, i64 %19
  %73 = icmp eq i64 %70, 0
  br i1 %73, label %269, label %60

74:                                               ; preds = %32
  %75 = and i1 %29, %34
  br i1 %75, label %76, label %124

76:                                               ; preds = %74
  %77 = icmp eq i32 %24, 0
  br i1 %77, label %269, label %78

78:                                               ; preds = %76
  %79 = sext i32 %8 to i64
  %80 = and i64 %22, 1
  %81 = icmp eq i32 %21, 1
  %82 = sub nsw i64 %22, %80
  %83 = icmp eq i64 %80, 0
  br label %84

84:                                               ; preds = %78, %101
  %85 = phi i64 [ %25, %78 ], [ %88, %101 ]
  %86 = phi i8* [ %4, %78 ], [ %102, %101 ]
  %87 = phi i8* [ %14, %78 ], [ %103, %101 ]
  %88 = add nsw i64 %85, -1
  switch i32 %21, label %105 [
    i32 0, label %101
    i32 1, label %89
  ]

89:                                               ; preds = %273, %84
  %90 = phi i8* [ %87, %84 ], [ %278, %273 ]
  %91 = phi i8* [ %86, %84 ], [ %276, %273 ]
  %92 = phi i32 [ 0, %84 ], [ %279, %273 ]
  %93 = phi i8 [ 0, %84 ], [ %280, %273 ]
  br i1 %83, label %101, label %94

94:                                               ; preds = %89
  %95 = icmp eq i32 %92, 0
  br i1 %95, label %96, label %98

96:                                               ; preds = %94
  %97 = load i8, i8* %91, align 1
  br label %98

98:                                               ; preds = %96, %94
  %99 = phi i8 [ %97, %96 ], [ %93, %94 ]
  %100 = ashr i8 %99, 7
  store i8 %100, i8* %90, align 1
  br label %101

101:                                              ; preds = %98, %89, %84
  %102 = getelementptr inbounds i8, i8* %86, i64 %79
  %103 = getelementptr inbounds i8, i8* %87, i64 %19
  %104 = icmp eq i64 %88, 0
  br i1 %104, label %269, label %84

105:                                              ; preds = %84, %273
  %106 = phi i8* [ %278, %273 ], [ %87, %84 ]
  %107 = phi i8* [ %276, %273 ], [ %86, %84 ]
  %108 = phi i32 [ %279, %273 ], [ 0, %84 ]
  %109 = phi i8 [ %280, %273 ], [ 0, %84 ]
  %110 = phi i64 [ %281, %273 ], [ %82, %84 ]
  %111 = icmp eq i32 %108, 0
  br i1 %111, label %112, label %115

112:                                              ; preds = %105
  %113 = getelementptr inbounds i8, i8* %107, i64 1
  %114 = load i8, i8* %107, align 1
  br label %115

115:                                              ; preds = %112, %105
  %116 = phi i8 [ %114, %112 ], [ %109, %105 ]
  %117 = phi i32 [ 8, %112 ], [ %108, %105 ]
  %118 = phi i8* [ %113, %112 ], [ %107, %105 ]
  %119 = ashr i8 %116, 7
  %120 = getelementptr inbounds i8, i8* %106, i64 1
  store i8 %119, i8* %106, align 1
  %121 = add nsw i32 %117, -1
  %122 = shl i8 %116, 1
  %123 = icmp eq i32 %121, 0
  br i1 %123, label %270, label %273

124:                                              ; preds = %74
  %125 = icmp ne i8 %6, 7
  %126 = icmp ne i8 %16, 3
  %127 = or i1 %126, %125
  %128 = icmp eq i32 %24, 0
  %129 = or i1 %127, %128
  br i1 %129, label %269, label %130

130:                                              ; preds = %124
  %131 = icmp eq i32 %21, 0
  %132 = sext i32 %8 to i64
  %133 = shl nuw nsw i64 %22, 2
  %134 = icmp ult i32 %21, 4
  %135 = and i64 %22, 4294967292
  %136 = shl nuw nsw i64 %135, 2
  %137 = icmp eq i64 %135, %22
  %138 = and i64 %22, 1
  %139 = icmp eq i64 %138, 0
  %140 = sub nsw i64 0, %22
  br label %141

141:                                              ; preds = %130, %220
  %142 = phi i64 [ 0, %130 ], [ %224, %220 ]
  %143 = phi i64 [ %25, %130 ], [ %154, %220 ]
  %144 = phi i8* [ %4, %130 ], [ %221, %220 ]
  %145 = phi i8* [ %14, %130 ], [ %222, %220 ]
  %146 = mul i64 %142, %19
  %147 = getelementptr i8, i8* %14, i64 %146
  %148 = add i64 %133, %146
  %149 = getelementptr i8, i8* %14, i64 %148
  %150 = mul i64 %142, %132
  %151 = getelementptr i8, i8* %4, i64 %150
  %152 = add i64 %133, %150
  %153 = getelementptr i8, i8* %4, i64 %152
  %154 = add nsw i64 %143, -1
  br i1 %131, label %220, label %155

155:                                              ; preds = %141
  %156 = bitcast i8* %145 to i32*
  br i1 %134, label %157, label %188

157:                                              ; preds = %219, %188, %155
  %158 = phi i64 [ 0, %188 ], [ 0, %155 ], [ %135, %219 ]
  %159 = phi i32* [ %156, %188 ], [ %156, %155 ], [ %193, %219 ]
  %160 = phi i8* [ %144, %188 ], [ %144, %155 ], [ %194, %219 ]
  %161 = xor i64 %158, -1
  br i1 %139, label %183, label %162

162:                                              ; preds = %157
  %163 = getelementptr inbounds i8, i8* %160, i64 1
  %164 = load i8, i8* %160, align 1
  %165 = getelementptr inbounds i8, i8* %160, i64 2
  %166 = load i8, i8* %163, align 1
  %167 = getelementptr inbounds i8, i8* %160, i64 3
  %168 = load i8, i8* %165, align 1
  %169 = getelementptr inbounds i8, i8* %160, i64 4
  %170 = load i8, i8* %167, align 1
  %171 = zext i8 %170 to i32
  %172 = zext i8 %168 to i32
  %173 = zext i8 %166 to i32
  %174 = zext i8 %164 to i32
  %175 = shl nuw i32 %171, 24
  %176 = shl nuw nsw i32 %172, 16
  %177 = shl nuw nsw i32 %173, 8
  %178 = or i32 %177, %174
  %179 = or i32 %178, %176
  %180 = or i32 %179, %175
  %181 = getelementptr inbounds i32, i32* %159, i64 1
  store i32 %180, i32* %159, align 4
  %182 = or i64 %158, 1
  br label %183

183:                                              ; preds = %162, %157
  %184 = phi i64 [ %182, %162 ], [ %158, %157 ]
  %185 = phi i32* [ %181, %162 ], [ %159, %157 ]
  %186 = phi i8* [ %169, %162 ], [ %160, %157 ]
  %187 = icmp eq i64 %161, %140
  br i1 %187, label %220, label %225

188:                                              ; preds = %155
  %189 = icmp ult i8* %147, %153
  %190 = icmp ult i8* %151, %149
  %191 = and i1 %189, %190
  br i1 %191, label %157, label %192

192:                                              ; preds = %188
  %193 = getelementptr i32, i32* %156, i64 %135
  %194 = getelementptr i8, i8* %144, i64 %136
  br label %195

195:                                              ; preds = %195, %192
  %196 = phi i64 [ 0, %192 ], [ %217, %195 ]
  %197 = getelementptr i32, i32* %156, i64 %196
  %198 = shl i64 %196, 2
  %199 = getelementptr i8, i8* %144, i64 %198
  %200 = bitcast i8* %199 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1
  %202 = shufflevector <16 x i8> %201, <16 x i8> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %203 = shufflevector <16 x i8> %201, <16 x i8> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %204 = shufflevector <16 x i8> %201, <16 x i8> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %205 = shufflevector <16 x i8> %201, <16 x i8> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %206 = zext <4 x i8> %205 to <4 x i32>
  %207 = zext <4 x i8> %204 to <4 x i32>
  %208 = zext <4 x i8> %203 to <4 x i32>
  %209 = zext <4 x i8> %202 to <4 x i32>
  %210 = shl nuw <4 x i32> %206, <i32 24, i32 24, i32 24, i32 24>
  %211 = shl nuw nsw <4 x i32> %207, <i32 16, i32 16, i32 16, i32 16>
  %212 = shl nuw nsw <4 x i32> %208, <i32 8, i32 8, i32 8, i32 8>
  %213 = or <4 x i32> %212, %209
  %214 = or <4 x i32> %213, %211
  %215 = or <4 x i32> %214, %210
  %216 = bitcast i32* %197 to <4 x i32>*
  store <4 x i32> %215, <4 x i32>* %216, align 4, !alias.scope !49, !noalias !52
  %217 = add i64 %196, 4
  %218 = icmp eq i64 %217, %135
  br i1 %218, label %219, label %195, !llvm.loop !54

219:                                              ; preds = %195
  br i1 %137, label %220, label %157

220:                                              ; preds = %183, %225, %219, %141
  %221 = getelementptr inbounds i8, i8* %144, i64 %132
  %222 = getelementptr inbounds i8, i8* %145, i64 %19
  %223 = icmp eq i64 %154, 0
  %224 = add i64 %142, 1
  br i1 %223, label %269, label %141

225:                                              ; preds = %183, %225
  %226 = phi i64 [ %267, %225 ], [ %184, %183 ]
  %227 = phi i32* [ %266, %225 ], [ %185, %183 ]
  %228 = phi i8* [ %254, %225 ], [ %186, %183 ]
  %229 = getelementptr inbounds i8, i8* %228, i64 1
  %230 = load i8, i8* %228, align 1
  %231 = getelementptr inbounds i8, i8* %228, i64 2
  %232 = load i8, i8* %229, align 1
  %233 = getelementptr inbounds i8, i8* %228, i64 3
  %234 = load i8, i8* %231, align 1
  %235 = getelementptr inbounds i8, i8* %228, i64 4
  %236 = load i8, i8* %233, align 1
  %237 = zext i8 %236 to i32
  %238 = zext i8 %234 to i32
  %239 = zext i8 %232 to i32
  %240 = zext i8 %230 to i32
  %241 = shl nuw i32 %237, 24
  %242 = shl nuw nsw i32 %238, 16
  %243 = shl nuw nsw i32 %239, 8
  %244 = or i32 %243, %240
  %245 = or i32 %244, %242
  %246 = or i32 %245, %241
  %247 = getelementptr inbounds i32, i32* %227, i64 1
  store i32 %246, i32* %227, align 4
  %248 = getelementptr inbounds i8, i8* %228, i64 5
  %249 = load i8, i8* %235, align 1
  %250 = getelementptr inbounds i8, i8* %228, i64 6
  %251 = load i8, i8* %248, align 1
  %252 = getelementptr inbounds i8, i8* %228, i64 7
  %253 = load i8, i8* %250, align 1
  %254 = getelementptr inbounds i8, i8* %228, i64 8
  %255 = load i8, i8* %252, align 1
  %256 = zext i8 %255 to i32
  %257 = zext i8 %253 to i32
  %258 = zext i8 %251 to i32
  %259 = zext i8 %249 to i32
  %260 = shl nuw i32 %256, 24
  %261 = shl nuw nsw i32 %257, 16
  %262 = shl nuw nsw i32 %258, 8
  %263 = or i32 %262, %259
  %264 = or i32 %263, %261
  %265 = or i32 %264, %260
  %266 = getelementptr inbounds i32, i32* %227, i64 2
  store i32 %265, i32* %247, align 4
  %267 = add nuw nsw i64 %226, 2
  %268 = icmp eq i64 %267, %22
  br i1 %268, label %220, label %225, !llvm.loop !55

269:                                              ; preds = %220, %101, %55, %60, %124, %76, %36, %27
  ret void

270:                                              ; preds = %115
  %271 = getelementptr inbounds i8, i8* %118, i64 1
  %272 = load i8, i8* %118, align 1
  br label %273

273:                                              ; preds = %270, %115
  %274 = phi i8 [ %272, %270 ], [ %122, %115 ]
  %275 = phi i32 [ 8, %270 ], [ %121, %115 ]
  %276 = phi i8* [ %271, %270 ], [ %118, %115 ]
  %277 = ashr i8 %274, 7
  %278 = getelementptr inbounds i8, i8* %106, i64 2
  store i8 %277, i8* %120, align 1
  %279 = add nsw i32 %275, -1
  %280 = shl i8 %274, 1
  %281 = add i64 %110, -2
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %89, label %105
}

declare void @_ZN8SkBitmap11allocPixelsERK11SkImageInfo(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24)) local_unnamed_addr #3

declare void @_ZN8SkBitmap11allocPixelsEv(%class.SkBitmap*) local_unnamed_addr #3

declare void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #3

declare void @_ZN8SkCanvas9drawImageEPK7SkImageffRK17SkSamplingOptionsPK7SkPaint(%class.SkCanvas*, %class.SkImage*, float, float, %struct.SkSamplingOptions* dereferenceable(20), %class.SkPaint*) local_unnamed_addr #3

declare void @_ZNK8SkBitmap7asImageEv(%class.sk_sp.33* sret, %class.SkBitmap*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN29SkScalerContext_FreeType_Base17generateGlyphPathEP11FT_FaceRec_P6SkPath(%class.SkScalerContext_FreeType_Base* nocapture readnone, %struct.FT_FaceRec_* nocapture readonly, %class.SkPath*) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.(anonymous namespace)::SkFTGeometrySink", align 8
  %5 = bitcast %"class.(anonymous namespace)::SkFTGeometrySink"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 16, i1 false) #14
  %6 = getelementptr inbounds %"class.(anonymous namespace)::SkFTGeometrySink", %"class.(anonymous namespace)::SkFTGeometrySink"* %4, i64 0, i32 0
  store %class.SkPath* %2, %class.SkPath** %6, align 8
  %7 = getelementptr inbounds %"class.(anonymous namespace)::SkFTGeometrySink", %"class.(anonymous namespace)::SkFTGeometrySink"* %4, i64 0, i32 1
  store i8 0, i8* %7, align 8
  %8 = getelementptr inbounds %"class.(anonymous namespace)::SkFTGeometrySink", %"class.(anonymous namespace)::SkFTGeometrySink"* %4, i64 0, i32 2, i32 0
  %9 = bitcast i64* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false) #14
  %10 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %1, i64 0, i32 21
  %11 = load %struct.FT_GlyphSlotRec_*, %struct.FT_GlyphSlotRec_** %10, align 8
  %12 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %11, i64 0, i32 13
  %13 = call i32 @FT_Outline_Decompose(%struct.FT_Outline_* %12, %struct.FT_Outline_Funcs_* nonnull @_ZN12_GLOBAL__N_116SkFTGeometrySink5FuncsE, i8* nonnull %5) #14
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %3
  %16 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %2) #14
  br label %19

17:                                               ; preds = %3
  %18 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath* %2) #14
  br label %19

19:                                               ; preds = %15, %17
  %20 = phi i1 [ false, %15 ], [ true, %17 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #14
  ret i1 %20
}

declare { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType3EE9FromColorEj(i32) local_unnamed_addr #3

declare void @_ZN8SkCanvas9drawColorERK8SkRGBA4fIL11SkAlphaType3EE11SkBlendMode(%class.SkCanvas*, %struct.SkRGBA4f* dereferenceable(16), i32) local_unnamed_addr #3

declare zeroext i8 @FT_Get_Color_Glyph_Paint(%struct.FT_FaceRec_*, i32, i32, %struct.FT_Opaque_Paint_*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetIS7_NS_17OpaquePaintHasherEE(%class.SkCanvas*, %struct.FT_Color_*, %struct.FT_FaceRec_*, i8*, i8, %class.SkTHashSet*) unnamed_addr #1 {
  %7 = alloca %struct.FT_Opaque_Paint_, align 8
  %8 = alloca %class.SkTHashSet, align 8
  %9 = alloca %class.SkPaint, align 8
  %10 = alloca %class.SkPath, align 8
  %11 = alloca %struct.FT_COLR_Paint_, align 8
  %12 = alloca %struct.FT_Opaque_Paint_, align 8
  %13 = alloca %struct.FT_Opaque_Paint_, align 8
  %14 = alloca %class.SkTHashSet*, align 8
  %15 = alloca %class.SkScopeExit, align 8
  %16 = alloca %struct.FT_COLR_Paint_, align 8
  %17 = alloca %struct.FT_Opaque_Paint_, align 8
  %18 = alloca %struct.FT_COLR_Paint_, align 8
  %19 = alloca %class.SkPaint, align 8
  %20 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %13, i64 0, i32 0
  store i8* %3, i8** %20, align 8
  %21 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %13, i64 0, i32 1
  store i8 %4, i8* %21, align 8
  store %class.SkTHashSet* %5, %class.SkTHashSet** %14, align 8
  %22 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %23 = bitcast %struct.FT_Opaque_Paint_* %13 to i8*
  %24 = call i32 %22(i8* nonnull %23, i64 8, i32 0) #14
  %25 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %26 = call i32 %25(i8* %21, i64 1, i32 0) #14
  %27 = xor i32 %26, %24
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i32 1, i32 %27
  %30 = getelementptr inbounds %class.SkTHashSet, %class.SkTHashSet* %5, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %37, label %33

33:                                               ; preds = %6
  %34 = bitcast %struct.FT_Opaque_Paint_* %13 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = load i8, i8* %21, align 8
  br label %72

37:                                               ; preds = %6
  %38 = add nsw i32 %31, -1
  %39 = and i32 %29, %38
  %40 = getelementptr inbounds %class.SkTHashSet, %class.SkTHashSet* %5, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %41 = load %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"*, %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"** %40, align 8
  %42 = load i8*, i8** %20, align 8
  %43 = load i8, i8* %21, align 8
  %44 = ptrtoint i8* %42 to i64
  br label %45

45:                                               ; preds = %63, %37
  %46 = phi i32 [ 0, %37 ], [ %68, %63 ]
  %47 = phi i32 [ %39, %37 ], [ %67, %63 ]
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %41, i64 %48, i32 1
  %50 = load i32, i32* %49, align 8
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %72, label %52

52:                                               ; preds = %45
  %53 = icmp eq i32 %29, %50
  br i1 %53, label %54, label %63

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %41, i64 %48, i32 0
  %56 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %55, i64 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = icmp eq i8* %42, %57
  br i1 %58, label %59, label %63

59:                                               ; preds = %54
  %60 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %41, i64 %48, i32 0, i32 1
  %61 = load i8, i8* %60, align 8
  %62 = icmp eq i8 %43, %61
  br i1 %62, label %70, label %63

63:                                               ; preds = %59, %54, %52
  %64 = add nsw i32 %47, -1
  %65 = icmp slt i32 %47, 1
  %66 = select i1 %65, i32 %31, i32 0
  %67 = add nsw i32 %64, %66
  %68 = add nuw nsw i32 %46, 1
  %69 = icmp eq i32 %68, %31
  br i1 %69, label %72, label %45

70:                                               ; preds = %59
  %71 = icmp eq %struct.FT_Opaque_Paint_* %55, null
  br i1 %71, label %72, label %326

72:                                               ; preds = %63, %45, %33, %70
  %73 = phi i8 [ %36, %33 ], [ %43, %70 ], [ %43, %45 ], [ %43, %63 ]
  %74 = phi i64 [ %35, %33 ], [ %44, %70 ], [ %44, %45 ], [ %44, %63 ]
  %75 = bitcast %struct.FT_Opaque_Paint_* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %75) #14
  %76 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %12, i64 0, i32 0
  %77 = bitcast %struct.FT_Opaque_Paint_* %12 to i64*
  store i64 %74, i64* %77, align 8
  %78 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %12, i64 0, i32 1
  store i8 %73, i8* %78, align 8
  %79 = getelementptr inbounds %class.SkTHashSet, %class.SkTHashSet* %5, i64 0, i32 0, i32 0
  %80 = load i32, i32* %79, align 8
  %81 = shl nsw i32 %80, 2
  %82 = mul nsw i32 %31, 3
  %83 = icmp slt i32 %81, %82
  br i1 %83, label %88, label %84

84:                                               ; preds = %72
  %85 = getelementptr inbounds %class.SkTHashSet, %class.SkTHashSet* %5, i64 0, i32 0
  %86 = shl nsw i32 %31, 1
  %87 = select i1 %32, i32 %86, i32 4
  call fastcc void @_ZN12SkTHashTableI16FT_Opaque_Paint_S0_N10SkTHashSetIS0_N12_GLOBAL__N_117OpaquePaintHasherEE6TraitsEE6resizeEi(%class.SkTHashTable* %85, i32 %87) #14
  br label %88

88:                                               ; preds = %84, %72
  %89 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %90 = call i32 %89(i8* nonnull %75, i64 8, i32 0) #14
  %91 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %92 = call i32 %91(i8* %78, i64 1, i32 0) #14
  %93 = xor i32 %92, %90
  %94 = icmp eq i32 %93, 0
  %95 = select i1 %94, i32 1, i32 %93
  %96 = load i32, i32* %30, align 4
  %97 = icmp sgt i32 %96, 0
  br i1 %97, label %98, label %136

98:                                               ; preds = %88
  %99 = add nsw i32 %96, -1
  %100 = and i32 %95, %99
  %101 = getelementptr inbounds %class.SkTHashSet, %class.SkTHashSet* %5, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %102 = load %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"*, %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"** %101, align 8
  %103 = load i8*, i8** %76, align 8
  %104 = load i8, i8* %78, align 8
  br label %105

105:                                              ; preds = %129, %98
  %106 = phi i32 [ 0, %98 ], [ %134, %129 ]
  %107 = phi i32 [ %100, %98 ], [ %133, %129 ]
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %102, i64 %108
  %110 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %102, i64 %108, i32 1
  %111 = load i32, i32* %110, align 8
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %117

113:                                              ; preds = %105
  %114 = bitcast %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %109 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* nonnull align 8 %75, i64 16, i1 false) #14
  store i32 %95, i32* %110, align 8
  %115 = load i32, i32* %79, align 8
  %116 = add nsw i32 %115, 1
  store i32 %116, i32* %79, align 8
  br label %136

117:                                              ; preds = %105
  %118 = icmp eq i32 %95, %111
  br i1 %118, label %119, label %129

119:                                              ; preds = %117
  %120 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %109, i64 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8
  %122 = icmp eq i8* %103, %121
  br i1 %122, label %123, label %129

123:                                              ; preds = %119
  %124 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %102, i64 %108, i32 0, i32 1
  %125 = load i8, i8* %124, align 8
  %126 = icmp eq i8 %104, %125
  br i1 %126, label %127, label %129

127:                                              ; preds = %123
  %128 = bitcast %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %109 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %128, i8* nonnull align 8 %75, i64 16, i1 false) #14
  br label %136

129:                                              ; preds = %123, %119, %117
  %130 = add nsw i32 %107, -1
  %131 = icmp slt i32 %107, 1
  %132 = select i1 %131, i32 %96, i32 0
  %133 = add nsw i32 %130, %132
  %134 = add nuw nsw i32 %106, 1
  %135 = icmp eq i32 %134, %96
  br i1 %135, label %136, label %105

136:                                              ; preds = %129, %127, %113, %88
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %75) #14
  %137 = bitcast %class.SkScopeExit* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %137) #14
  %138 = getelementptr inbounds %class.SkScopeExit, %class.SkScopeExit* %15, i64 0, i32 0, i32 0, i32 0, i32 0
  %139 = getelementptr inbounds %class.SkScopeExit, %class.SkScopeExit* %15, i64 0, i32 0, i32 0, i32 1, i32 0
  %140 = getelementptr inbounds %class.SkScopeExit, %class.SkScopeExit* %15, i64 0, i32 0, i32 0, i32 2
  %141 = bitcast %class.SkScopeExit* %15 to %class.SkTHashSet***
  store %class.SkTHashSet** %14, %class.SkTHashSet*** %141, align 8
  %142 = getelementptr inbounds %class.SkScopeExit, %class.SkScopeExit* %15, i64 0, i32 0, i32 0, i32 0, i32 1
  %143 = bitcast [8 x i8]* %142 to %struct.FT_Opaque_Paint_**
  store %struct.FT_Opaque_Paint_* %13, %struct.FT_Opaque_Paint_** %143, align 8
  %144 = getelementptr inbounds %class.SkScopeExit, %class.SkScopeExit* %15, i64 0, i32 0, i32 0, i32 1
  %145 = bitcast %"struct.std::__1::__function::__policy_invoker"* %144 to i64*
  store i64 ptrtoint (void (%"union.std::__1::__function::__policy_storage"*)* @"_ZNSt3__110__function16__policy_invokerIFvvEE11__call_implINS0_20__default_alloc_funcIZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetISE_NS6_17OpaquePaintHasherEEE3$_1S2_EEEEvPKNS0_16__policy_storageE" to i64), i64* %145, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetISC_NS4_17OpaquePaintHasherEEE3$_1FvvEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %140, align 8
  %146 = bitcast %struct.FT_COLR_Paint_* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %146) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %146, i8 -86, i64 80, i1 false)
  %147 = load i8*, i8** %20, align 8
  %148 = load i8, i8* %21, align 8
  %149 = call zeroext i8 @FT_Get_Paint(%struct.FT_FaceRec_* %2, i8* %147, i8 %148, %struct.FT_COLR_Paint_* nonnull %16) #14
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %308, label %151

151:                                              ; preds = %136
  %152 = icmp eq %class.SkCanvas* %0, null
  br i1 %152, label %156, label %153

153:                                              ; preds = %151
  %154 = call i32 @_ZNK8SkCanvas12getSaveCountEv(%class.SkCanvas* nonnull %0) #14
  %155 = call i32 @_ZN8SkCanvas4saveEv(%class.SkCanvas* nonnull %0) #14
  br label %156

156:                                              ; preds = %151, %153
  %157 = phi i32 [ 0, %151 ], [ %154, %153 ]
  %158 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 0
  %159 = load i32, i32* %158, align 8
  switch i32 %159, label %305 [
    i32 1, label %160
    i32 10, label %177
    i32 11, label %209
    i32 12, label %232
    i32 14, label %241
    i32 16, label %250
    i32 18, label %259
    i32 20, label %268
    i32 2, label %304
    i32 4, label %304
    i32 6, label %304
    i32 8, label %304
  ]

160:                                              ; preds = %156
  %161 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1
  %162 = bitcast %union.anon.40* %161 to %struct.FT_LayerIterator_*
  %163 = bitcast %struct.FT_Opaque_Paint_* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %163) #14
  %164 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %17, i64 0, i32 1
  %165 = bitcast i8* %164 to i64*
  store i64 -6148914691236517206, i64* %165, align 8
  %166 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %17, i64 0, i32 0
  store i8* null, i8** %166, align 8
  %167 = call zeroext i8 @FT_Get_Paint_Layers(%struct.FT_FaceRec_* %2, %struct.FT_LayerIterator_* %162, %struct.FT_Opaque_Paint_* nonnull %17) #14
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %176, label %169

169:                                              ; preds = %160, %169
  %170 = load i8*, i8** %166, align 8
  %171 = load i8, i8* %164, align 8
  %172 = load %class.SkTHashSet*, %class.SkTHashSet** %14, align 8
  %173 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetIS7_NS_17OpaquePaintHasherEE(%class.SkCanvas* %0, %struct.FT_Color_* %1, %struct.FT_FaceRec_* %2, i8* %170, i8 %171, %class.SkTHashSet* %172)
  %174 = call zeroext i8 @FT_Get_Paint_Layers(%struct.FT_FaceRec_* %2, %struct.FT_LayerIterator_* %162, %struct.FT_Opaque_Paint_* nonnull %17) #14
  %175 = icmp eq i8 %174, 0
  br i1 %175, label %176, label %169

176:                                              ; preds = %169, %160
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %163) #14
  br label %305

177:                                              ; preds = %156
  %178 = bitcast %struct.FT_COLR_Paint_* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %178, i8 -86, i64 80, i1 false)
  %179 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1
  %180 = bitcast %union.anon.40* %179 to i8**
  %181 = load i8*, i8** %180, align 8
  %182 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1, i32 0, i32 0, i32 1
  %183 = bitcast %struct.FT_ColorStopIterator_* %182 to i8*
  %184 = load i8, i8* %183, align 8
  %185 = call zeroext i8 @FT_Get_Paint(%struct.FT_FaceRec_* %2, i8* %181, i8 %184, %struct.FT_COLR_Paint_* nonnull %18) #14
  %186 = icmp eq i8 %185, 0
  br i1 %186, label %305, label %187

187:                                              ; preds = %177
  %188 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %18, i64 0, i32 0
  %189 = load i32, i32* %188, align 8
  switch i32 %189, label %204 [
    i32 2, label %190
    i32 4, label %190
    i32 6, label %190
    i32 8, label %190
  ]

190:                                              ; preds = %187, %187, %187, %187
  %191 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1, i32 0, i32 0, i32 1, i32 2
  %192 = bitcast i8** %191 to i32*
  %193 = load i32, i32* %192, align 8
  %194 = bitcast %struct.FT_COLR_Paint_* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %194)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %194, i8* nonnull align 8 %178, i64 80, i1 false)
  %195 = bitcast %class.SkPaint* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %195) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %195, i8* align 8 bitcast (%class.SkPaint* @__const._ZN12_GLOBAL__N_117colrv1_draw_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_14FT_COLR_Paint_.colrPaint to i8*), i64 72, i1 false) #14
  call void @_ZN7SkPaintC1Ev(%class.SkPaint* nonnull %9) #14
  %196 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %9, i64 0, i32 8, i32 0, i32 0
  %197 = load i32, i32* %196, align 8
  %198 = or i32 %197, 1
  store i32 %198, i32* %196, align 8
  call fastcc void @_ZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaint(%struct.FT_FaceRec_* %2, %struct.FT_Color_* %1, %struct.FT_COLR_Paint_* nonnull byval(%struct.FT_COLR_Paint_) align 8 %11, %class.SkPaint* nonnull %9) #14
  %199 = bitcast %class.SkPath* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %199) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %199, i8 -86, i64 16, i1 false) #14
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %10) #14
  %200 = trunc i32 %193 to i16
  %201 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_122generateFacePathCOLRv1EP11FT_FaceRec_tP6SkPath(%struct.FT_FaceRec_* %2, i16 zeroext %200, %class.SkPath* nonnull %10) #14
  br i1 %201, label %202, label %203

202:                                              ; preds = %190
  call void @_ZN8SkCanvas8drawPathERK6SkPathRK7SkPaint(%class.SkCanvas* %0, %class.SkPath* nonnull dereferenceable(16) %10, %class.SkPaint* nonnull dereferenceable(72) %9) #14
  br label %203

203:                                              ; preds = %190, %202
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %10) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %199) #14
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %9) #14
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %195) #14
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %194)
  br label %305

204:                                              ; preds = %187
  call fastcc void @_ZN12_GLOBAL__N_117colrv1_draw_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_14FT_COLR_Paint_(%class.SkCanvas* %0, %struct.FT_Color_* %1, %struct.FT_FaceRec_* %2, %struct.FT_COLR_Paint_* nonnull byval(%struct.FT_COLR_Paint_) align 8 %16)
  %205 = load i8*, i8** %180, align 8
  %206 = load i8, i8* %183, align 8
  %207 = load %class.SkTHashSet*, %class.SkTHashSet** %14, align 8
  %208 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetIS7_NS_17OpaquePaintHasherEE(%class.SkCanvas* %0, %struct.FT_Color_* %1, %struct.FT_FaceRec_* %2, i8* %205, i8 %206, %class.SkTHashSet* %207)
  br label %305

209:                                              ; preds = %156
  %210 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1, i32 0, i32 0, i32 0
  %211 = load i32, i32* %210, align 8
  %212 = bitcast %struct.FT_Opaque_Paint_* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %212) #14
  %213 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %7, i64 0, i32 1
  %214 = bitcast i8* %213 to i64*
  store i64 -6148914691236517206, i64* %214, align 8
  %215 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %7, i64 0, i32 0
  store i8* null, i8** %215, align 8
  %216 = and i32 %211, 65535
  %217 = call zeroext i8 @FT_Get_Color_Glyph_Paint(%struct.FT_FaceRec_* %2, i32 %216, i32 1, %struct.FT_Opaque_Paint_* nonnull %7) #14
  %218 = icmp eq i8 %217, 0
  br i1 %218, label %230, label %219

219:                                              ; preds = %209
  %220 = bitcast %class.SkTHashSet* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %220) #14
  %221 = getelementptr inbounds %class.SkTHashSet, %class.SkTHashSet* %8, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %220, i8 0, i64 16, i1 false) #14
  %222 = load i8*, i8** %215, align 8
  %223 = load i8, i8* %213, align 8
  %224 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetIS7_NS_17OpaquePaintHasherEE(%class.SkCanvas* %0, %struct.FT_Color_* %1, %struct.FT_FaceRec_* %2, i8* %222, i8 %223, %class.SkTHashSet* nonnull %8) #14
  %225 = load %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"*, %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"** %221, align 8
  store %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* null, %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"** %221, align 8
  %226 = icmp eq %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %225, null
  br i1 %226, label %229, label %227

227:                                              ; preds = %219
  %228 = bitcast %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %225 to i8*
  call void @_ZdaPv(i8* %228) #15
  br label %229

229:                                              ; preds = %227, %219
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %220) #14
  br label %230

230:                                              ; preds = %209, %229
  %231 = phi i1 [ true, %229 ], [ false, %209 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %212) #14
  br label %305

232:                                              ; preds = %156
  call fastcc void @_ZN12_GLOBAL__N_116colrv1_transformEP8SkCanvasP11FT_FaceRec_14FT_COLR_Paint_(%class.SkCanvas* %0, %struct.FT_COLR_Paint_* nonnull byval(%struct.FT_COLR_Paint_) align 8 %16)
  %233 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1
  %234 = bitcast %union.anon.40* %233 to i8**
  %235 = load i8*, i8** %234, align 8
  %236 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1, i32 0, i32 0, i32 1
  %237 = bitcast %struct.FT_ColorStopIterator_* %236 to i8*
  %238 = load i8, i8* %237, align 8
  %239 = load %class.SkTHashSet*, %class.SkTHashSet** %14, align 8
  %240 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetIS7_NS_17OpaquePaintHasherEE(%class.SkCanvas* %0, %struct.FT_Color_* %1, %struct.FT_FaceRec_* %2, i8* %235, i8 %238, %class.SkTHashSet* %239)
  br label %305

241:                                              ; preds = %156
  call fastcc void @_ZN12_GLOBAL__N_116colrv1_transformEP8SkCanvasP11FT_FaceRec_14FT_COLR_Paint_(%class.SkCanvas* %0, %struct.FT_COLR_Paint_* nonnull byval(%struct.FT_COLR_Paint_) align 8 %16)
  %242 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1
  %243 = bitcast %union.anon.40* %242 to i8**
  %244 = load i8*, i8** %243, align 8
  %245 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1, i32 0, i32 0, i32 1
  %246 = bitcast %struct.FT_ColorStopIterator_* %245 to i8*
  %247 = load i8, i8* %246, align 8
  %248 = load %class.SkTHashSet*, %class.SkTHashSet** %14, align 8
  %249 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetIS7_NS_17OpaquePaintHasherEE(%class.SkCanvas* %0, %struct.FT_Color_* %1, %struct.FT_FaceRec_* %2, i8* %244, i8 %247, %class.SkTHashSet* %248)
  br label %305

250:                                              ; preds = %156
  call fastcc void @_ZN12_GLOBAL__N_116colrv1_transformEP8SkCanvasP11FT_FaceRec_14FT_COLR_Paint_(%class.SkCanvas* %0, %struct.FT_COLR_Paint_* nonnull byval(%struct.FT_COLR_Paint_) align 8 %16)
  %251 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1
  %252 = bitcast %union.anon.40* %251 to i8**
  %253 = load i8*, i8** %252, align 8
  %254 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1, i32 0, i32 0, i32 1
  %255 = bitcast %struct.FT_ColorStopIterator_* %254 to i8*
  %256 = load i8, i8* %255, align 8
  %257 = load %class.SkTHashSet*, %class.SkTHashSet** %14, align 8
  %258 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetIS7_NS_17OpaquePaintHasherEE(%class.SkCanvas* %0, %struct.FT_Color_* %1, %struct.FT_FaceRec_* %2, i8* %253, i8 %256, %class.SkTHashSet* %257)
  br label %305

259:                                              ; preds = %156
  call fastcc void @_ZN12_GLOBAL__N_116colrv1_transformEP8SkCanvasP11FT_FaceRec_14FT_COLR_Paint_(%class.SkCanvas* %0, %struct.FT_COLR_Paint_* nonnull byval(%struct.FT_COLR_Paint_) align 8 %16)
  %260 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1
  %261 = bitcast %union.anon.40* %260 to i8**
  %262 = load i8*, i8** %261, align 8
  %263 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1, i32 0, i32 0, i32 1
  %264 = bitcast %struct.FT_ColorStopIterator_* %263 to i8*
  %265 = load i8, i8* %264, align 8
  %266 = load %class.SkTHashSet*, %class.SkTHashSet** %14, align 8
  %267 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetIS7_NS_17OpaquePaintHasherEE(%class.SkCanvas* %0, %struct.FT_Color_* %1, %struct.FT_FaceRec_* %2, i8* %262, i8 %265, %class.SkTHashSet* %266)
  br label %305

268:                                              ; preds = %156
  %269 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1, i32 0, i32 1
  %270 = bitcast %struct.FT_Vector_* %269 to i8**
  %271 = load i8*, i8** %270, align 8
  %272 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1, i32 0, i32 1, i32 1
  %273 = bitcast i64* %272 to i8*
  %274 = load i8, i8* %273, align 8
  %275 = load %class.SkTHashSet*, %class.SkTHashSet** %14, align 8
  %276 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetIS7_NS_17OpaquePaintHasherEE(%class.SkCanvas* %0, %struct.FT_Color_* %1, %struct.FT_FaceRec_* %2, i8* %271, i8 %274, %class.SkTHashSet* %275)
  %277 = bitcast %class.SkPaint* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %277) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %277, i8* align 8 bitcast (%class.SkPaint* @__const._ZN12_GLOBAL__N_117colrv1_draw_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_14FT_COLR_Paint_.colrPaint to i8*), i64 72, i1 false)
  call void @_ZN7SkPaintC1Ev(%class.SkPaint* nonnull %19) #14
  %278 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1, i32 0, i32 0, i32 1, i32 2
  %279 = bitcast i8** %278 to i32*
  %280 = load i32, i32* %279, align 8
  %281 = icmp ult i32 %280, 27
  br i1 %281, label %282, label %286

282:                                              ; preds = %268
  %283 = sext i32 %280 to i64
  %284 = getelementptr inbounds [27 x i32], [27 x i32]* @switch.table._ZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetIS7_NS_17OpaquePaintHasherEE, i64 0, i64 %283
  %285 = load i32, i32* %284, align 4
  br label %286

286:                                              ; preds = %268, %282
  %287 = phi i32 [ %285, %282 ], [ 2048, %268 ]
  %288 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %19, i64 0, i32 8, i32 0, i32 0
  %289 = load i32, i32* %288, align 8
  %290 = and i32 %289, -261121
  %291 = or i32 %290, %287
  store i32 %291, i32* %288, align 8
  %292 = call i32 @_ZN8SkCanvas9saveLayerEPK6SkRectPK7SkPaint(%class.SkCanvas* %0, %struct.SkRect* null, %class.SkPaint* nonnull %19) #14
  br i1 %276, label %293, label %302

293:                                              ; preds = %286
  %294 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1
  %295 = bitcast %union.anon.40* %294 to i8**
  %296 = load i8*, i8** %295, align 8
  %297 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %16, i64 0, i32 1, i32 0, i32 0, i32 1
  %298 = bitcast %struct.FT_ColorStopIterator_* %297 to i8*
  %299 = load i8, i8* %298, align 8
  %300 = load %class.SkTHashSet*, %class.SkTHashSet** %14, align 8
  %301 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetIS7_NS_17OpaquePaintHasherEE(%class.SkCanvas* %0, %struct.FT_Color_* %1, %struct.FT_FaceRec_* %2, i8* %296, i8 %299, %class.SkTHashSet* %300)
  br label %302

302:                                              ; preds = %293, %286
  %303 = phi i1 [ false, %286 ], [ %301, %293 ]
  call void @_ZN8SkCanvas7restoreEv(%class.SkCanvas* %0) #14
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %19) #14
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %277) #14
  br label %305

304:                                              ; preds = %156, %156, %156, %156
  call fastcc void @_ZN12_GLOBAL__N_117colrv1_draw_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_14FT_COLR_Paint_(%class.SkCanvas* %0, %struct.FT_Color_* %1, %struct.FT_FaceRec_* %2, %struct.FT_COLR_Paint_* nonnull byval(%struct.FT_COLR_Paint_) align 8 %16)
  br label %305

305:                                              ; preds = %176, %230, %232, %241, %250, %259, %302, %304, %204, %203, %156, %177
  %306 = phi i1 [ false, %177 ], [ true, %156 ], [ true, %304 ], [ %303, %302 ], [ %267, %259 ], [ %258, %250 ], [ %249, %241 ], [ %240, %232 ], [ %231, %230 ], [ true, %203 ], [ %208, %204 ], [ true, %176 ]
  br i1 %152, label %308, label %307

307:                                              ; preds = %305
  call void @_ZN8SkCanvas14restoreToCountEi(%class.SkCanvas* nonnull %0, i32 %157) #14
  br label %308

308:                                              ; preds = %307, %305, %136
  %309 = phi i1 [ false, %136 ], [ %306, %305 ], [ %306, %307 ]
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %146) #14
  %310 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %140, align 8
  %311 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %310, i64 0, i32 2
  %312 = load i8, i8* %311, align 8, !range !56
  %313 = icmp eq i8 %312, 0
  br i1 %313, label %314, label %318

314:                                              ; preds = %308
  %315 = load void (%"union.std::__1::__function::__policy_storage"*)*, void (%"union.std::__1::__function::__policy_storage"*)** %139, align 8
  %316 = getelementptr inbounds %class.SkScopeExit, %class.SkScopeExit* %15, i64 0, i32 0, i32 0, i32 0
  call void %315(%"union.std::__1::__function::__policy_storage"* nonnull %316) #14
  %317 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %140, align 8
  br label %318

318:                                              ; preds = %314, %308
  %319 = phi %"struct.std::__1::__function::__policy"* [ %317, %314 ], [ %310, %308 ]
  %320 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %319, i64 0, i32 1
  %321 = load void (i8*)*, void (i8*)** %320, align 8
  %322 = icmp eq void (i8*)* %321, null
  br i1 %322, label %325, label %323

323:                                              ; preds = %318
  %324 = load i8*, i8** %138, align 8
  call void %321(i8* %324) #14
  br label %325

325:                                              ; preds = %318, %323
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %137) #14
  br label %326

326:                                              ; preds = %70, %325
  %327 = phi i1 [ %309, %325 ], [ false, %70 ]
  ret i1 %327
}

declare zeroext i8 @FT_Get_Paint(%struct.FT_FaceRec_*, i8*, i8, %struct.FT_COLR_Paint_*) local_unnamed_addr #3

declare zeroext i8 @FT_Get_Paint_Layers(%struct.FT_FaceRec_*, %struct.FT_LayerIterator_*, %struct.FT_Opaque_Paint_*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_117colrv1_draw_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_14FT_COLR_Paint_(%class.SkCanvas*, %struct.FT_Color_*, %struct.FT_FaceRec_*, %struct.FT_COLR_Paint_* nocapture readonly byval(%struct.FT_COLR_Paint_) align 8) unnamed_addr #1 {
  %5 = alloca %class.SkPaint, align 8
  %6 = alloca %class.SkPath, align 8
  %7 = alloca %class.SkPaint, align 8
  %8 = alloca %class.sk_sp.30, align 8
  %9 = bitcast %class.SkPaint* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %9) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* align 8 bitcast (%class.SkPaint* @__const._ZN12_GLOBAL__N_117colrv1_draw_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_14FT_COLR_Paint_.colrPaint to i8*), i64 72, i1 false)
  call void @_ZN7SkPaintC1Ev(%class.SkPaint* nonnull %5) #14
  %10 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %3, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  switch i32 %11, label %24 [
    i32 10, label %12
    i32 2, label %22
    i32 4, label %22
    i32 6, label %22
    i32 8, label %22
    i32 12, label %39
    i32 14, label %39
    i32 16, label %39
    i32 18, label %39
  ]

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %3, i64 0, i32 1, i32 0, i32 0, i32 1, i32 2
  %14 = bitcast i8** %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = bitcast %class.SkPath* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #14
  %17 = bitcast %class.SkPath* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %6) #14
  %18 = trunc i32 %15 to i16
  %19 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_122generateFacePathCOLRv1EP11FT_FaceRec_tP6SkPath(%struct.FT_FaceRec_* %2, i16 zeroext %18, %class.SkPath* nonnull %6)
  br i1 %19, label %20, label %21

20:                                               ; preds = %12
  call void @_ZN8SkCanvas8clipPathERK6SkPath8SkClipOpb(%class.SkCanvas* %0, %class.SkPath* nonnull dereferenceable(16) %6, i32 1, i1 zeroext true) #14
  br label %21

21:                                               ; preds = %20, %12
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #14
  br label %39

22:                                               ; preds = %4, %4, %4, %4
  %23 = bitcast %class.SkPaint* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %23) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %23, i8* align 8 bitcast (%class.SkPaint* @__const._ZN12_GLOBAL__N_117colrv1_draw_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_14FT_COLR_Paint_.colrPaint to i8*), i64 72, i1 false)
  call void @_ZN7SkPaintC1Ev(%class.SkPaint* nonnull %7) #14
  call fastcc void @_ZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaint(%struct.FT_FaceRec_* %2, %struct.FT_Color_* %1, %struct.FT_COLR_Paint_* nonnull byval(%struct.FT_COLR_Paint_) align 8 %3, %class.SkPaint* nonnull %7)
  call void @_ZN8SkCanvas9drawPaintERK7SkPaint(%class.SkCanvas* %0, %class.SkPaint* nonnull dereferenceable(72) %7) #14
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %7) #14
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %23) #14
  br label %39

24:                                               ; preds = %4
  %25 = getelementptr inbounds %class.sk_sp.30, %class.sk_sp.30* %8, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %25, align 8
  call void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint* nonnull %5, %class.sk_sp.30* nonnull %8) #14
  %26 = load %class.SkShader*, %class.SkShader** %25, align 8
  %27 = icmp eq %class.SkShader* %26, null
  br i1 %27, label %38, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %class.SkShader, %class.SkShader* %26, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = atomicrmw add i32* %29, i32 -1 acq_rel
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %32, label %38

32:                                               ; preds = %28
  %33 = bitcast %class.SkShader* %26 to %class.SkRefCntBase*
  %34 = bitcast %class.SkShader* %26 to void (%class.SkRefCntBase*)***
  %35 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %34, align 8
  %36 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %35, i64 2
  %37 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %36, align 8
  call void %37(%class.SkRefCntBase* nonnull %33) #14
  br label %38

38:                                               ; preds = %24, %28, %32
  call void @_ZN7SkPaint8setColorEj(%class.SkPaint* nonnull %5, i32 -16711681) #14
  br label %39

39:                                               ; preds = %4, %4, %4, %4, %38, %22, %21
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %9) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_116colrv1_transformEP8SkCanvasP11FT_FaceRec_14FT_COLR_Paint_(%class.SkCanvas*, %struct.FT_COLR_Paint_* nocapture readonly byval(%struct.FT_COLR_Paint_) align 8) unnamed_addr #5 {
  %3 = alloca %class.SkMatrix, align 16
  %4 = alloca %class.SkMatrix, align 16
  %5 = alloca %class.SkMatrix, align 16
  %6 = alloca %class.SkMatrix, align 16
  %7 = alloca %class.SkMatrix, align 16
  %8 = alloca %class.SkMatrix, align 4
  %9 = alloca %class.SkMatrix, align 4
  %10 = bitcast %class.SkMatrix* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #14
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 1
  %12 = bitcast %class.SkMatrix* %3 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %12, align 16
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 4
  %14 = bitcast float* %13 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %14, align 16
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %15, align 16
  store i32 16, i32* %11, align 4
  %16 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  switch i32 %17, label %154 [
    i32 12, label %18
    i32 14, label %51
    i32 16, label %68
    i32 18, label %89
  ]

18:                                               ; preds = %2
  %19 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 7
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 6
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 5
  %22 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 0
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 3
  %24 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 2
  %25 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 1
  %26 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 1, i32 0, i32 0, i32 1, i32 2
  %27 = bitcast i8** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 1, i32 0, i32 1, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 1, i32 0, i32 1, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 1, i32 0, i32 2, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 1, i32 0, i32 2, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 1, i32 0, i32 3, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = sitofp i64 %28 to float
  %40 = fmul float %39, 0x3EF0000000000000
  %41 = sitofp i64 %30 to float
  %42 = fmul float %41, 0xBEF0000000000000
  %43 = sitofp i64 %32 to float
  %44 = fmul float %43, 0x3EF0000000000000
  %45 = sitofp i64 %34 to float
  %46 = fmul float %45, 0xBEF0000000000000
  %47 = sitofp i64 %36 to float
  %48 = fmul float %47, 0x3EF0000000000000
  %49 = sitofp i64 %38 to float
  %50 = fmul float %49, 0xBEF0000000000000
  store float %40, float* %22, align 16
  store float %42, float* %25, align 4
  store float %44, float* %24, align 8
  store float %46, float* %23, align 4
  store float %48, float* %13, align 16
  store float %50, float* %21, align 4
  store float 0.000000e+00, float* %20, align 8
  store float 0.000000e+00, float* %19, align 4
  store float 1.000000e+00, float* %15, align 16
  store i32 128, i32* %11, align 4
  br label %154

51:                                               ; preds = %2
  %52 = bitcast %class.SkMatrix* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %52) #14
  %53 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 1, i32 0, i32 0, i32 1, i32 2
  %54 = bitcast i8** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = sitofp i64 %55 to float
  %57 = fmul float %56, 0x3EF0000000000000
  %58 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 1, i32 0, i32 1, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = sitofp i64 %59 to float
  %61 = fmul float %60, 0xBEF0000000000000
  %62 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 1
  %63 = bitcast %class.SkMatrix* %4 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %63, align 16, !alias.scope !57
  %64 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 4
  %65 = bitcast float* %64 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %65, align 16, !alias.scope !57
  %66 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %66, align 16, !alias.scope !57
  store i32 16, i32* %62, align 4, !alias.scope !57
  %67 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12setTranslateEff(%class.SkMatrix* nonnull %4, float %57, float %61) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %10, i8* nonnull align 16 %52, i64 40, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %52) #14
  br label %154

68:                                               ; preds = %2
  %69 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %69) #14
  %70 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 1, i32 0, i32 0, i32 1, i32 2
  %71 = bitcast i8** %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = sitofp i64 %72 to float
  %74 = fmul float %73, 0x3EF0000000000000
  %75 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 1, i32 0, i32 1, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = sitofp i64 %76 to float
  %78 = fmul float %77, 0x3EF0000000000000
  %79 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 1, i32 0, i32 1, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = sitofp i64 %80 to float
  %82 = fmul float %81, 0xBEF0000000000000
  %83 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 1
  %84 = bitcast %class.SkMatrix* %5 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %84, align 16, !alias.scope !60
  %85 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 4
  %86 = bitcast float* %85 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %86, align 16, !alias.scope !60
  %87 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %87, align 16, !alias.scope !60
  store i32 16, i32* %83, align 4, !alias.scope !60
  %88 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setRotateEfff(%class.SkMatrix* nonnull %5, float %74, float %78, float %82) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %10, i8* nonnull align 16 %69, i64 40, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %69) #14
  br label %154

89:                                               ; preds = %2
  %90 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 1, i32 0, i32 0, i32 1, i32 2
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sitofp i64 %92 to float
  %94 = fmul float %93, 0xBEF0000000000000
  %95 = fmul float %94, 0x3F91DF46A0000000
  %96 = tail call float @tanf(float %95) #14
  %97 = tail call float @llvm.fabs.f32(float %96) #14
  %98 = fcmp ole float %97, 0x3F30000000000000
  %99 = select i1 %98, float 0.000000e+00, float %96
  %100 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 1, i32 0, i32 1, i32 0
  %101 = load i64, i64* %100, align 8
  %102 = sitofp i64 %101 to float
  %103 = fmul float %102, 0xBEF0000000000000
  %104 = fmul float %103, 0x3F91DF46A0000000
  %105 = tail call float @tanf(float %104) #14
  %106 = tail call float @llvm.fabs.f32(float %105) #14
  %107 = fcmp ole float %106, 0x3F30000000000000
  %108 = select i1 %107, float 0.000000e+00, float %105
  %109 = bitcast %class.SkMatrix* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %109) #14
  %110 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 1
  %111 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 1, i32 0, i32 1, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = sitofp i64 %112 to float
  %114 = fmul float %113, 0x3EF0000000000000
  %115 = fmul float %114, 0x3EF0000000000000
  %116 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %1, i64 0, i32 1, i32 0, i32 2, i32 0
  %117 = load i64, i64* %116, align 8
  %118 = sitofp i64 %117 to float
  %119 = fmul float %118, 0xBEF0000000000000
  %120 = fmul float %119, 0x3EF0000000000000
  %121 = bitcast %class.SkMatrix* %6 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %121, align 16, !alias.scope !63
  %122 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  %123 = bitcast float* %122 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %123, align 16, !alias.scope !63
  %124 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %124, align 16, !alias.scope !63
  store i32 16, i32* %110, align 4, !alias.scope !63
  %125 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12setTranslateEff(%class.SkMatrix* nonnull %6, float %115, float %120) #14
  %126 = bitcast %class.SkMatrix* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %126) #14
  %127 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 1
  %128 = bitcast %class.SkMatrix* %7 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %128, align 16
  %129 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 4
  %130 = bitcast float* %129 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %130, align 16
  %131 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %131, align 16
  store i32 16, i32* %127, align 4
  %132 = bitcast %class.SkMatrix* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %132) #14
  %133 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 1
  %134 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 0
  %135 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 1
  %136 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 2
  %137 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 6
  %138 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 7
  %139 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %134, align 4, !alias.scope !66
  store float %99, float* %135, align 4, !alias.scope !66
  %140 = bitcast float* %136 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00>, <4 x float>* %140, align 4, !alias.scope !66
  store float 0.000000e+00, float* %137, align 4, !alias.scope !66
  store float 0.000000e+00, float* %138, align 4, !alias.scope !66
  store float 1.000000e+00, float* %139, align 4, !alias.scope !66
  store i32 128, i32* %133, align 4, !alias.scope !66
  %141 = bitcast %class.SkMatrix* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %141) #14
  %142 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 1
  %143 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 0
  %144 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 1
  %145 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 2
  %146 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 3
  %147 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 4
  %148 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %143, align 4, !alias.scope !69
  store float 0.000000e+00, float* %144, align 4, !alias.scope !69
  store float 0.000000e+00, float* %145, align 4, !alias.scope !69
  store float %108, float* %146, align 4, !alias.scope !69
  %149 = bitcast float* %147 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %149, align 4, !alias.scope !69
  store float 1.000000e+00, float* %148, align 4, !alias.scope !69
  store i32 128, i32* %142, align 4, !alias.scope !69
  %150 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix* nonnull %7, %class.SkMatrix* nonnull dereferenceable(40) %8) #14
  %151 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix* %150, %class.SkMatrix* nonnull dereferenceable(40) %9) #14
  %152 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix* %151, %class.SkMatrix* nonnull dereferenceable(40) %6) #14
  %153 = bitcast %class.SkMatrix* %152 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %10, i8* align 4 %153, i64 40, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %141) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %132) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %126) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %109) #14
  br label %154

154:                                              ; preds = %2, %89, %68, %51, %18
  call void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas* %0, %class.SkMatrix* nonnull dereferenceable(40) %3) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #14
  ret void
}

declare i32 @_ZN8SkCanvas9saveLayerEPK6SkRectPK7SkPaint(%class.SkCanvas*, %struct.SkRect*, %class.SkPaint*) local_unnamed_addr #3

declare void @_ZN8SkCanvas7restoreEv(%class.SkCanvas*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12SkTHashTableI16FT_Opaque_Paint_S0_N10SkTHashSetIS0_N12_GLOBAL__N_117OpaquePaintHasherEE6TraitsEE6resizeEi(%class.SkTHashTable*, i32) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.SkTHashTable, %class.SkTHashTable* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %class.SkTHashTable, %class.SkTHashTable* %0, i64 0, i32 0
  store i32 0, i32* %5, align 8
  store i32 %1, i32* %3, align 4
  %6 = getelementptr inbounds %class.SkTHashTable, %class.SkTHashTable* %0, i64 0, i32 2
  %7 = getelementptr inbounds %class.SkAutoTArray, %class.SkAutoTArray* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = bitcast %class.SkAutoTArray* %6 to i64*
  %9 = load i64, i64* %8, align 8
  store %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* null, %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"** %7, align 8
  %10 = icmp eq i32 %1, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %2
  store i64 0, i64* %8, align 8
  br label %34

12:                                               ; preds = %2
  %13 = sext i32 %1 to i64
  %14 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %13, i64 24) #14
  %15 = extractvalue { i64, i1 } %14, 1
  %16 = extractvalue { i64, i1 } %14, 0
  %17 = select i1 %15, i64 -1, i64 %16
  %18 = tail call i8* @_Znam(i64 %17) #15
  %19 = bitcast i8* %18 to %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"*
  %20 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %19, i64 %13
  br label %21

21:                                               ; preds = %21, %12
  %22 = phi %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* [ %19, %12 ], [ %26, %21 ]
  %23 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %22, i64 0, i32 0, i32 0
  store i8* null, i8** %23, align 8
  %24 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %22, i64 0, i32 0, i32 1
  store i8 0, i8* %24, align 8
  %25 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %22, i64 0, i32 1
  store i32 0, i32* %25, align 8
  %26 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %22, i64 1
  %27 = icmp eq %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %26, %20
  br i1 %27, label %28, label %21

28:                                               ; preds = %21
  %29 = ptrtoint i8* %18 to i64
  %30 = load %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"*, %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"** %7, align 8
  %31 = icmp eq %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %30, null
  store i64 %29, i64* %8, align 8
  br i1 %31, label %34, label %32

32:                                               ; preds = %28
  %33 = bitcast %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %30 to i8*
  tail call void @_ZdaPv(i8* %33) #15
  br label %34

34:                                               ; preds = %32, %28, %11
  %35 = icmp sgt i32 %4, 0
  br i1 %35, label %36, label %40

36:                                               ; preds = %34
  %37 = inttoptr i64 %9 to %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"*
  %38 = getelementptr inbounds %class.SkTHashTable, %class.SkTHashTable* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %39 = zext i32 %4 to i64
  br label %45

40:                                               ; preds = %101, %34
  %41 = icmp eq i64 %9, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %40
  %43 = inttoptr i64 %9 to i8*
  tail call void @_ZdaPv(i8* %43) #15
  br label %44

44:                                               ; preds = %40, %42
  ret void

45:                                               ; preds = %101, %36
  %46 = phi i64 [ 0, %36 ], [ %102, %101 ]
  %47 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %37, i64 %46, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %101, label %50

50:                                               ; preds = %45
  %51 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %37, i64 %46, i32 0
  %52 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %53 = bitcast %struct.FT_Opaque_Paint_* %51 to i8*
  %54 = tail call i32 %52(i8* %53, i64 8, i32 0) #14
  %55 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %37, i64 %46, i32 0, i32 1
  %56 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %57 = tail call i32 %56(i8* %55, i64 1, i32 0) #14
  %58 = xor i32 %57, %54
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, i32 1, i32 %58
  %61 = load i32, i32* %3, align 4
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %101

63:                                               ; preds = %50
  %64 = add nsw i32 %61, -1
  %65 = and i32 %60, %64
  %66 = load %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"*, %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"** %38, align 8
  %67 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %51, i64 0, i32 0
  %68 = load i8*, i8** %67, align 8
  %69 = load i8, i8* %55, align 8
  br label %70

70:                                               ; preds = %94, %63
  %71 = phi i32 [ 0, %63 ], [ %99, %94 ]
  %72 = phi i32 [ %65, %63 ], [ %98, %94 ]
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %66, i64 %73
  %75 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %66, i64 %73, i32 1
  %76 = load i32, i32* %75, align 8
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %82

78:                                               ; preds = %70
  %79 = bitcast %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %74 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %79, i8* align 8 %53, i64 16, i1 false) #14
  store i32 %60, i32* %75, align 8
  %80 = load i32, i32* %5, align 8
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %5, align 8
  br label %101

82:                                               ; preds = %70
  %83 = icmp eq i32 %60, %76
  br i1 %83, label %84, label %94

84:                                               ; preds = %82
  %85 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %74, i64 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  %87 = icmp eq i8* %68, %86
  br i1 %87, label %88, label %94

88:                                               ; preds = %84
  %89 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %66, i64 %73, i32 0, i32 1
  %90 = load i8, i8* %89, align 8
  %91 = icmp eq i8 %69, %90
  br i1 %91, label %92, label %94

92:                                               ; preds = %88
  %93 = bitcast %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %74 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* align 8 %53, i64 16, i1 false) #14
  br label %101

94:                                               ; preds = %88, %84, %82
  %95 = add nsw i32 %72, -1
  %96 = icmp slt i32 %72, 1
  %97 = select i1 %96, i32 %61, i32 0
  %98 = add nsw i32 %95, %97
  %99 = add nuw nsw i32 %71, 1
  %100 = icmp eq i32 %99, %61
  br i1 %100, label %101, label %70

101:                                              ; preds = %94, %92, %78, %50, %45
  %102 = add nuw nsw i64 %46, 1
  %103 = icmp eq i64 %102, %39
  br i1 %103, label %40, label %45
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZNSt3__110__function16__policy_invokerIFvvEE11__call_implINS0_20__default_alloc_funcIZN12_GLOBAL__N_121colrv1_traverse_paintEP8SkCanvasPK9FT_Color_P11FT_FaceRec_16FT_Opaque_Paint_P10SkTHashSetISE_NS6_17OpaquePaintHasherEEE3$_1S2_EEEEvPKNS0_16__policy_storageE"(%"union.std::__1::__function::__policy_storage"* nocapture readonly) #1 align 2 {
  %2 = bitcast %"union.std::__1::__function::__policy_storage"* %0 to %class.SkTHashSet***
  %3 = load %class.SkTHashSet**, %class.SkTHashSet*** %2, align 8
  %4 = load %class.SkTHashSet*, %class.SkTHashSet** %3, align 8
  %5 = getelementptr inbounds %"union.std::__1::__function::__policy_storage", %"union.std::__1::__function::__policy_storage"* %0, i64 0, i32 1
  %6 = bitcast [8 x i8]* %5 to %struct.FT_Opaque_Paint_**
  %7 = load %struct.FT_Opaque_Paint_*, %struct.FT_Opaque_Paint_** %6, align 8
  %8 = getelementptr inbounds %class.SkTHashSet, %class.SkTHashSet* %4, i64 0, i32 0
  %9 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %10 = bitcast %struct.FT_Opaque_Paint_* %7 to i8*
  %11 = tail call i32 %9(i8* %10, i64 8, i32 0) #14
  %12 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %7, i64 0, i32 1
  %13 = load i32 (i8*, i64, i32)*, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  %14 = tail call i32 %13(i8* %12, i64 1, i32 0) #14
  %15 = xor i32 %14, %11
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 1, i32 %15
  %18 = getelementptr inbounds %class.SkTHashSet, %class.SkTHashSet* %4, i64 0, i32 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %104

21:                                               ; preds = %1
  %22 = add nsw i32 %19, -1
  %23 = and i32 %17, %22
  %24 = getelementptr inbounds %class.SkTHashSet, %class.SkTHashSet* %4, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %25 = load %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"*, %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"** %24, align 8
  %26 = getelementptr inbounds %struct.FT_Opaque_Paint_, %struct.FT_Opaque_Paint_* %7, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = load i8, i8* %12, align 8
  br label %29

29:                                               ; preds = %97, %21
  %30 = phi i32 [ 0, %21 ], [ %102, %97 ]
  %31 = phi i32 [ %23, %21 ], [ %101, %97 ]
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %25, i64 %32, i32 1
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %17, %34
  br i1 %35, label %36, label %97

36:                                               ; preds = %29
  %37 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %25, i64 %32, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = icmp eq i8* %27, %38
  br i1 %39, label %40, label %97

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %25, i64 %32, i32 0, i32 1
  %42 = load i8, i8* %41, align 8
  %43 = icmp eq i8 %28, %42
  br i1 %43, label %44, label %97

44:                                               ; preds = %40
  %45 = getelementptr inbounds %class.SkTHashSet, %class.SkTHashSet* %4, i64 0, i32 0, i32 0
  %46 = load i32, i32* %45, align 8
  %47 = add nsw i32 %46, -1
  store i32 %47, i32* %45, align 8
  br label %48

48:                                               ; preds = %78, %44
  %49 = phi %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* [ %25, %44 ], [ %82, %78 ]
  %50 = phi i32 [ %31, %44 ], [ %61, %78 ]
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %49, i64 %51
  br label %53

53:                                               ; preds = %77, %48
  %54 = phi i32 [ %50, %48 ], [ %61, %77 ]
  %55 = add nsw i32 %54, -1
  %56 = icmp slt i32 %54, 1
  br i1 %56, label %57, label %60

57:                                               ; preds = %53
  %58 = load i32, i32* %18, align 4
  %59 = add nsw i32 %58, %55
  br label %60

60:                                               ; preds = %57, %53
  %61 = phi i32 [ %59, %57 ], [ %55, %53 ]
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %49, i64 %62, i32 1
  %64 = load i32, i32* %63, align 8
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %83, label %66

66:                                               ; preds = %60
  %67 = load i32, i32* %18, align 4
  %68 = add nsw i32 %67, -1
  %69 = and i32 %68, %64
  %70 = icmp sle i32 %61, %69
  %71 = icmp slt i32 %69, %50
  %72 = and i1 %70, %71
  br i1 %72, label %77, label %73

73:                                               ; preds = %66
  %74 = icmp slt i32 %50, %61
  %75 = or i1 %71, %70
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %78

77:                                               ; preds = %73, %66
  br label %53

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %49, i64 %62
  %80 = bitcast %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %52 to i8*
  %81 = bitcast %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %79 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 20, i1 false) #14
  %82 = load %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"*, %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"** %24, align 8
  br label %48

83:                                               ; preds = %60
  %84 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %52, i64 0, i32 0, i32 0
  store i8* null, i8** %84, align 8
  %85 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %49, i64 %51, i32 0, i32 1
  store i8 0, i8* %85, align 8
  %86 = bitcast %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %52 to i8*
  %87 = getelementptr inbounds i8, i8* %86, i64 9
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %87, i8 0, i64 7, i1 false) #14
  %88 = getelementptr inbounds %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot", %"struct.SkTHashTable<FT_Opaque_Paint_, FT_Opaque_Paint_, SkTHashSet<FT_Opaque_Paint_, (anonymous namespace)::OpaquePaintHasher>::Traits>::Slot"* %49, i64 %51, i32 1
  store i32 0, i32* %88, align 8
  %89 = load i32, i32* %45, align 8
  %90 = shl nsw i32 %89, 2
  %91 = load i32, i32* %18, align 4
  %92 = icmp sle i32 %90, %91
  %93 = icmp sgt i32 %91, 4
  %94 = and i1 %92, %93
  br i1 %94, label %95, label %104

95:                                               ; preds = %83
  %96 = lshr i32 %91, 1
  tail call fastcc void @_ZN12SkTHashTableI16FT_Opaque_Paint_S0_N10SkTHashSetIS0_N12_GLOBAL__N_117OpaquePaintHasherEE6TraitsEE6resizeEi(%class.SkTHashTable* %8, i32 %96) #14
  br label %104

97:                                               ; preds = %40, %36, %29
  %98 = add nsw i32 %31, -1
  %99 = icmp slt i32 %31, 1
  %100 = select i1 %99, i32 %19, i32 0
  %101 = add nsw i32 %98, %100
  %102 = add nuw nsw i32 %30, 1
  %103 = icmp eq i32 %102, %19
  br i1 %103, label %104, label %29

104:                                              ; preds = %97, %1, %83, %95
  ret void
}

declare i32 @_ZNK8SkCanvas12getSaveCountEv(%class.SkCanvas*) local_unnamed_addr #3

declare i32 @_ZN8SkCanvas4saveEv(%class.SkCanvas*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaint(%struct.FT_FaceRec_*, %struct.FT_Color_*, %struct.FT_COLR_Paint_* byval(%struct.FT_COLR_Paint_) align 8, %class.SkPaint*) unnamed_addr #5 {
  %5 = alloca i64, align 8
  %6 = alloca %struct.FT_FaceRec_*, align 8
  %7 = alloca %struct.FT_Color_*, align 8
  %8 = alloca %class.anon.41, align 8
  %9 = alloca %class.sk_sp.30, align 8
  %10 = alloca [2 x %struct.SkPoint], align 16
  %11 = alloca %"class.std::__1::vector", align 8
  %12 = alloca %"class.std::__1::vector.45", align 8
  %13 = alloca <2 x float>, align 8
  %14 = bitcast <2 x float>* %13 to %struct.SkPoint*
  %15 = alloca <2 x float>, align 8
  %16 = bitcast <2 x float>* %15 to %struct.SkPoint*
  %17 = alloca %class.sk_sp.30, align 8
  %18 = alloca %class.sk_sp.30, align 8
  %19 = alloca <2 x float>, align 8
  %20 = alloca <2 x float>, align 8
  %21 = alloca %"class.std::__1::vector", align 8
  %22 = alloca %"class.std::__1::vector.45", align 8
  %23 = alloca %class.sk_sp.30, align 8
  %24 = alloca %"class.std::__1::vector", align 8
  %25 = alloca %"class.std::__1::vector.45", align 8
  %26 = alloca %class.SkMatrix, align 16
  %27 = alloca %class.sk_sp.30, align 8
  store %struct.FT_FaceRec_* %0, %struct.FT_FaceRec_** %6, align 8
  store %struct.FT_Color_* %1, %struct.FT_Color_** %7, align 8
  %28 = bitcast %class.anon.41* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #14
  %29 = getelementptr inbounds %class.anon.41, %class.anon.41* %8, i64 0, i32 0
  %30 = getelementptr inbounds %class.anon.41, %class.anon.41* %8, i64 0, i32 1
  store %struct.FT_FaceRec_** %6, %struct.FT_FaceRec_*** %29, align 8
  store %struct.FT_Color_** %7, %struct.FT_Color_*** %30, align 8
  %31 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 0
  %32 = load i32, i32* %31, align 8
  switch i32 %32, label %514 [
    i32 2, label %33
    i32 4, label %77
    i32 6, label %358
    i32 8, label %437
  ]

33:                                               ; preds = %4
  %34 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1
  %35 = bitcast %union.anon.40* %34 to %struct.FT_PaintSolid_*
  %36 = bitcast %union.anon.40* %34 to i16*
  %37 = load i16, i16* %36, align 8
  %38 = getelementptr inbounds %struct.FT_PaintSolid_, %struct.FT_PaintSolid_* %35, i64 0, i32 0, i32 1
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %37 to i64
  %41 = getelementptr inbounds %struct.FT_Color_, %struct.FT_Color_* %1, i64 %40, i32 3
  %42 = load i8, i8* %41, align 1
  %43 = uitofp i8 %42 to float
  %44 = uitofp i16 %39 to float
  %45 = fmul float %44, 0x3F10000000000000
  %46 = fmul float %45, %43
  %47 = fptoui float %46 to i32
  %48 = getelementptr inbounds %struct.FT_Color_, %struct.FT_Color_* %1, i64 %40, i32 2
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = getelementptr inbounds %struct.FT_Color_, %struct.FT_Color_* %1, i64 %40, i32 1
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = getelementptr inbounds %struct.FT_Color_, %struct.FT_Color_* %1, i64 %40, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = shl i32 %47, 24
  %58 = shl nuw nsw i32 %50, 16
  %59 = or i32 %57, %58
  %60 = shl nuw nsw i32 %53, 8
  %61 = or i32 %59, %60
  %62 = or i32 %61, %56
  %63 = getelementptr inbounds %class.sk_sp.30, %class.sk_sp.30* %9, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %63, align 8
  call void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint* %3, %class.sk_sp.30* nonnull %9) #14
  %64 = load %class.SkShader*, %class.SkShader** %63, align 8
  %65 = icmp eq %class.SkShader* %64, null
  br i1 %65, label %76, label %66

66:                                               ; preds = %33
  %67 = getelementptr inbounds %class.SkShader, %class.SkShader* %64, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = atomicrmw add i32* %67, i32 -1 acq_rel
  %69 = icmp eq i32 %68, 1
  br i1 %69, label %70, label %76

70:                                               ; preds = %66
  %71 = bitcast %class.SkShader* %64 to %class.SkRefCntBase*
  %72 = bitcast %class.SkShader* %64 to void (%class.SkRefCntBase*)***
  %73 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %72, align 8
  %74 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %73, i64 2
  %75 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %74, align 8
  call void %75(%class.SkRefCntBase* nonnull %71) #14
  br label %76

76:                                               ; preds = %33, %66, %70
  call void @_ZN7SkPaint8setColorEj(%class.SkPaint* %3, i32 %62) #14
  br label %514

77:                                               ; preds = %4
  %78 = bitcast [2 x %struct.SkPoint]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %78) #14
  %79 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %10, i64 0, i64 0
  %80 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %10, i64 0, i64 1
  %81 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 1, i32 0
  %82 = load i64, i64* %81, align 8
  %83 = sitofp i64 %82 to float
  %84 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 1, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = sub nsw i64 0, %85
  %87 = sitofp i64 %86 to float
  %88 = insertelement <2 x float> undef, float %83, i32 0
  %89 = insertelement <2 x float> %88, float %87, i32 1
  %90 = bitcast [2 x %struct.SkPoint]* %10 to <2 x float>*
  store <2 x float> %89, <2 x float>* %90, align 16
  %91 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 2, i32 0
  %92 = load i64, i64* %91, align 8
  %93 = sitofp i64 %92 to float
  %94 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 2, i32 1
  %95 = load i64, i64* %94, align 8
  %96 = sub nsw i64 0, %95
  %97 = sitofp i64 %96 to float
  %98 = insertelement <2 x float> undef, float %93, i32 0
  %99 = insertelement <2 x float> %98, float %97, i32 1
  %100 = bitcast %struct.SkPoint* %80 to <2 x float>*
  store <2 x float> %99, <2 x float>* %100, align 8
  %101 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 3, i32 0
  %102 = load i64, i64* %101, align 8
  %103 = sitofp i64 %102 to float
  %104 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 3, i32 1
  %105 = load i64, i64* %104, align 8
  %106 = sub nsw i64 0, %105
  %107 = sitofp i64 %106 to float
  %108 = fcmp oeq float %93, %83
  %109 = fcmp oeq float %97, %87
  %110 = and i1 %108, %109
  br i1 %110, label %357, label %111

111:                                              ; preds = %77
  %112 = fcmp oeq float %83, %103
  %113 = fcmp oeq float %87, %107
  %114 = and i1 %112, %113
  br i1 %114, label %357, label %115

115:                                              ; preds = %111
  %116 = fsub float %93, %83
  %117 = insertelement <2 x float> undef, float %116, i32 0
  %118 = fsub float %97, %87
  %119 = insertelement <2 x float> %117, float %118, i32 1
  %120 = fsub float %103, %83
  %121 = fsub float %107, %87
  %122 = fmul float %116, %121
  %123 = fmul float %118, %120
  %124 = fsub float %122, %123
  %125 = fcmp oeq float %124, 0.000000e+00
  br i1 %125, label %357, label %126

126:                                              ; preds = %115
  %127 = fsub float -0.000000e+00, %120
  %128 = bitcast i64* %5 to %struct.SkPoint*
  %129 = call float @_ZN7SkPoint6LengthEff(float %121, float %127) #14
  %130 = fcmp une float %129, 0.000000e+00
  br i1 %130, label %131, label %141

131:                                              ; preds = %126
  %132 = insertelement <2 x float> undef, float %121, i32 0
  %133 = insertelement <2 x float> %132, float %127, i32 1
  %134 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %134) #14
  %135 = bitcast i64* %5 to <2 x float>*
  store <2 x float> %133, <2 x float>* %135, align 8
  %136 = call zeroext i1 @_ZN7SkPoint9normalizeEv(%struct.SkPoint* nonnull %128) #14
  %137 = fmul float %118, %127
  %138 = fadd float %137, %122
  %139 = fdiv float %138, %129
  call void @_ZNK7SkPoint5scaleEfPS_(%struct.SkPoint* nonnull %128, float %139, %struct.SkPoint* nonnull %128) #14
  %140 = load <2 x float>, <2 x float>* %135, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %134) #14
  br label %141

141:                                              ; preds = %126, %131
  %142 = phi <2 x float> [ %140, %131 ], [ zeroinitializer, %126 ]
  %143 = extractelement <2 x float> %142, i32 0
  %144 = fadd float %143, %83
  %145 = insertelement <2 x float> undef, float %144, i32 0
  %146 = extractelement <2 x float> %142, i32 1
  %147 = fadd float %146, %87
  %148 = insertelement <2 x float> %145, float %147, i32 1
  store <2 x float> %148, <2 x float>* %100, align 8
  %149 = bitcast %"class.std::__1::vector"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %149) #14
  %150 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %11, i64 0, i32 0, i32 0
  %151 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %11, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %149, i8 0, i64 24, i1 false) #14
  %152 = bitcast %"class.std::__1::vector.45"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %152) #14
  %153 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %12, i64 0, i32 0, i32 0
  %154 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %12, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %152, i8 0, i64 24, i1 false) #14
  %155 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 0, i32 1
  call fastcc void @"_ZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNSt3__16vectorIfNSB_9allocatorIfEEEERNSC_IjNSD_IjEEEE"(%class.anon.41* nonnull %8, %struct.FT_ColorStopIterator_* dereferenceable(16) %155, %"class.std::__1::vector"* nonnull dereferenceable(24) %11, %"class.std::__1::vector.45"* nonnull dereferenceable(24) %12)
  %156 = load float*, float** %150, align 8
  %157 = load float*, float** %151, align 8
  %158 = icmp eq float* %156, %157
  br i1 %158, label %342, label %159

159:                                              ; preds = %141
  %160 = ptrtoint float* %156 to i64
  %161 = ptrtoint float* %157 to i64
  %162 = bitcast float** %151 to i64*
  %163 = sub i64 %161, %160
  %164 = icmp eq i64 %163, 4
  br i1 %164, label %165, label %168

165:                                              ; preds = %159
  %166 = load i32*, i32** %153, align 8
  %167 = load i32, i32* %166, align 4
  call void @_ZN7SkPaint8setColorEj(%class.SkPaint* %3, i32 %167) #14
  br label %342

168:                                              ; preds = %159
  %169 = bitcast <2 x float>* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %169) #14
  %170 = getelementptr inbounds <2 x float>, <2 x float>* %13, i64 0, i64 0
  %171 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %14, i64 0, i32 1
  store <2 x float> %119, <2 x float>* %13, align 8
  %172 = load float, float* %156, align 4
  call void @_ZNK7SkPoint5scaleEfPS_(%struct.SkPoint* nonnull %14, float %172, %struct.SkPoint* nonnull %14) #14
  %173 = bitcast <2 x float>* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %173) #14
  %174 = getelementptr inbounds <2 x float>, <2 x float>* %15, i64 0, i64 0
  %175 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %16, i64 0, i32 1
  store <2 x float> %119, <2 x float>* %15, align 8
  %176 = load float*, float** %151, align 8
  %177 = getelementptr inbounds float, float* %176, i64 -1
  %178 = load float, float* %177, align 4
  call void @_ZNK7SkPoint5scaleEfPS_(%struct.SkPoint* nonnull %16, float %178, %struct.SkPoint* nonnull %16) #14
  %179 = load float, float* %170, align 8
  %180 = fadd float %179, %83
  %181 = insertelement <2 x float> undef, float %180, i32 0
  %182 = load float, float* %171, align 4
  %183 = fadd float %182, %87
  %184 = insertelement <2 x float> %181, float %183, i32 1
  store <2 x float> %184, <2 x float>* %90, align 16
  %185 = load float, float* %174, align 8
  %186 = fadd float %185, %83
  %187 = insertelement <2 x float> undef, float %186, i32 0
  %188 = load float, float* %175, align 4
  %189 = fadd float %188, %87
  %190 = insertelement <2 x float> %187, float %189, i32 1
  store <2 x float> %190, <2 x float>* %100, align 8
  %191 = load float*, float** %151, align 8
  %192 = getelementptr inbounds float, float* %191, i64 -1
  %193 = load float, float* %192, align 4
  %194 = load float*, float** %150, align 8
  %195 = ptrtoint float* %194 to i64
  %196 = load float, float* %194, align 4
  %197 = fsub float %193, %196
  %198 = fdiv float 1.000000e+00, %197
  %199 = icmp eq float* %194, %191
  %200 = ptrtoint float* %191 to i64
  br i1 %199, label %286, label %201

201:                                              ; preds = %168
  %202 = fsub float %196, %196
  %203 = fmul float %198, %202
  store float %203, float* %194, align 4
  %204 = getelementptr inbounds float, float* %194, i64 1
  %205 = icmp eq float* %204, %191
  br i1 %205, label %282, label %206

206:                                              ; preds = %201
  %207 = getelementptr float, float* %191, i64 -2
  %208 = ptrtoint float* %207 to i64
  %209 = sub i64 %208, %195
  %210 = lshr i64 %209, 2
  %211 = add nuw nsw i64 %210, 1
  %212 = icmp ult i64 %211, 8
  br i1 %212, label %213, label %215

213:                                              ; preds = %280, %206
  %214 = phi float* [ %204, %206 ], [ %217, %280 ]
  br label %335

215:                                              ; preds = %206
  %216 = and i64 %211, 9223372036854775800
  %217 = getelementptr float, float* %204, i64 %216
  %218 = insertelement <4 x float> undef, float %196, i32 0
  %219 = shufflevector <4 x float> %218, <4 x float> undef, <4 x i32> zeroinitializer
  %220 = insertelement <4 x float> undef, float %196, i32 0
  %221 = shufflevector <4 x float> %220, <4 x float> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x float> undef, float %198, i32 0
  %223 = shufflevector <4 x float> %222, <4 x float> undef, <4 x i32> zeroinitializer
  %224 = insertelement <4 x float> undef, float %198, i32 0
  %225 = shufflevector <4 x float> %224, <4 x float> undef, <4 x i32> zeroinitializer
  %226 = add nsw i64 %216, -8
  %227 = lshr exact i64 %226, 3
  %228 = add nuw nsw i64 %227, 1
  %229 = and i64 %228, 1
  %230 = icmp eq i64 %226, 0
  br i1 %230, label %264, label %231

231:                                              ; preds = %215
  %232 = sub nuw nsw i64 %228, %229
  br label %233

233:                                              ; preds = %233, %231
  %234 = phi i64 [ 0, %231 ], [ %261, %233 ]
  %235 = phi i64 [ %232, %231 ], [ %262, %233 ]
  %236 = getelementptr float, float* %204, i64 %234
  %237 = bitcast float* %236 to <4 x float>*
  %238 = load <4 x float>, <4 x float>* %237, align 4
  %239 = getelementptr float, float* %236, i64 4
  %240 = bitcast float* %239 to <4 x float>*
  %241 = load <4 x float>, <4 x float>* %240, align 4
  %242 = fsub <4 x float> %238, %219
  %243 = fsub <4 x float> %241, %221
  %244 = fmul <4 x float> %223, %242
  %245 = fmul <4 x float> %225, %243
  %246 = bitcast float* %236 to <4 x float>*
  store <4 x float> %244, <4 x float>* %246, align 4
  %247 = bitcast float* %239 to <4 x float>*
  store <4 x float> %245, <4 x float>* %247, align 4
  %248 = or i64 %234, 8
  %249 = getelementptr float, float* %204, i64 %248
  %250 = bitcast float* %249 to <4 x float>*
  %251 = load <4 x float>, <4 x float>* %250, align 4
  %252 = getelementptr float, float* %249, i64 4
  %253 = bitcast float* %252 to <4 x float>*
  %254 = load <4 x float>, <4 x float>* %253, align 4
  %255 = fsub <4 x float> %251, %219
  %256 = fsub <4 x float> %254, %221
  %257 = fmul <4 x float> %223, %255
  %258 = fmul <4 x float> %225, %256
  %259 = bitcast float* %249 to <4 x float>*
  store <4 x float> %257, <4 x float>* %259, align 4
  %260 = bitcast float* %252 to <4 x float>*
  store <4 x float> %258, <4 x float>* %260, align 4
  %261 = add i64 %234, 16
  %262 = add i64 %235, -2
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %233, !llvm.loop !72

264:                                              ; preds = %233, %215
  %265 = phi i64 [ 0, %215 ], [ %261, %233 ]
  %266 = icmp eq i64 %229, 0
  br i1 %266, label %280, label %267

267:                                              ; preds = %264
  %268 = getelementptr float, float* %204, i64 %265
  %269 = bitcast float* %268 to <4 x float>*
  %270 = load <4 x float>, <4 x float>* %269, align 4
  %271 = getelementptr float, float* %268, i64 4
  %272 = bitcast float* %271 to <4 x float>*
  %273 = load <4 x float>, <4 x float>* %272, align 4
  %274 = fsub <4 x float> %270, %219
  %275 = fsub <4 x float> %273, %221
  %276 = fmul <4 x float> %223, %274
  %277 = fmul <4 x float> %225, %275
  %278 = bitcast float* %268 to <4 x float>*
  store <4 x float> %276, <4 x float>* %278, align 4
  %279 = bitcast float* %271 to <4 x float>*
  store <4 x float> %277, <4 x float>* %279, align 4
  br label %280

280:                                              ; preds = %264, %267
  %281 = icmp eq i64 %211, %216
  br i1 %281, label %282, label %213

282:                                              ; preds = %335, %280, %201
  %283 = load float*, float** %150, align 8
  %284 = load i64, i64* %162, align 8
  %285 = ptrtoint float* %283 to i64
  br label %286

286:                                              ; preds = %282, %168
  %287 = phi i64 [ %285, %282 ], [ %200, %168 ]
  %288 = phi i64 [ %284, %282 ], [ %200, %168 ]
  %289 = phi float* [ %283, %282 ], [ %191, %168 ]
  %290 = bitcast %class.sk_sp.30* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %290) #14
  %291 = getelementptr inbounds %class.sk_sp.30, %class.sk_sp.30* %17, i64 0, i32 0
  store %class.SkShader* inttoptr (i64 -6148914691236517206 to %class.SkShader*), %class.SkShader** %291, align 8
  %292 = load i32*, i32** %153, align 8
  %293 = sub i64 %288, %287
  %294 = lshr exact i64 %293, 2
  %295 = trunc i64 %294 to i32
  %296 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 0, i32 0
  %297 = load i32, i32* %296, align 8
  %298 = icmp eq i32 %297, 2
  %299 = select i1 %298, i32 2, i32 0
  %300 = icmp eq i32 %297, 1
  %301 = select i1 %300, i32 1, i32 %299
  call void @_ZN16SkGradientShader10MakeLinearEPK7SkPointPKjPKfi10SkTileModejPK8SkMatrix(%class.sk_sp.30* nonnull sret %17, %struct.SkPoint* nonnull %79, i32* %292, float* %289, i32 %295, i32 %301, i32 0, %class.SkMatrix* null) #14
  call void @_ZN7SkPaint8setColorEj(%class.SkPaint* %3, i32 -16777216) #14
  %302 = getelementptr inbounds %class.sk_sp.30, %class.sk_sp.30* %18, i64 0, i32 0
  %303 = load %class.SkShader*, %class.SkShader** %291, align 8
  %304 = icmp eq %class.SkShader* %303, null
  br i1 %304, label %308, label %305

305:                                              ; preds = %286
  %306 = getelementptr inbounds %class.SkShader, %class.SkShader* %303, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %307 = atomicrmw add i32* %306, i32 1 monotonic
  br label %308

308:                                              ; preds = %286, %305
  store %class.SkShader* %303, %class.SkShader** %302, align 8
  call void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint* %3, %class.sk_sp.30* nonnull %18) #14
  %309 = load %class.SkShader*, %class.SkShader** %302, align 8
  %310 = icmp eq %class.SkShader* %309, null
  br i1 %310, label %321, label %311

311:                                              ; preds = %308
  %312 = getelementptr inbounds %class.SkShader, %class.SkShader* %309, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %313 = atomicrmw add i32* %312, i32 -1 acq_rel
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %315, label %321

315:                                              ; preds = %311
  %316 = bitcast %class.SkShader* %309 to %class.SkRefCntBase*
  %317 = bitcast %class.SkShader* %309 to void (%class.SkRefCntBase*)***
  %318 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %317, align 8
  %319 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %318, i64 2
  %320 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %319, align 8
  call void %320(%class.SkRefCntBase* nonnull %316) #14
  br label %321

321:                                              ; preds = %308, %311, %315
  %322 = load %class.SkShader*, %class.SkShader** %291, align 8
  %323 = icmp eq %class.SkShader* %322, null
  br i1 %323, label %334, label %324

324:                                              ; preds = %321
  %325 = getelementptr inbounds %class.SkShader, %class.SkShader* %322, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %326 = atomicrmw add i32* %325, i32 -1 acq_rel
  %327 = icmp eq i32 %326, 1
  br i1 %327, label %328, label %334

328:                                              ; preds = %324
  %329 = bitcast %class.SkShader* %322 to %class.SkRefCntBase*
  %330 = bitcast %class.SkShader* %322 to void (%class.SkRefCntBase*)***
  %331 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %330, align 8
  %332 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %331, i64 2
  %333 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %332, align 8
  call void %333(%class.SkRefCntBase* nonnull %329) #14
  br label %334

334:                                              ; preds = %321, %324, %328
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %290) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %173) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %169) #14
  br label %342

335:                                              ; preds = %213, %335
  %336 = phi float* [ %340, %335 ], [ %214, %213 ]
  %337 = load float, float* %336, align 4
  %338 = fsub float %337, %196
  %339 = fmul float %198, %338
  store float %339, float* %336, align 4
  %340 = getelementptr inbounds float, float* %336, i64 1
  %341 = icmp eq float* %340, %191
  br i1 %341, label %282, label %335, !llvm.loop !73

342:                                              ; preds = %141, %334, %165
  %343 = load i32*, i32** %153, align 8
  %344 = icmp eq i32* %343, null
  br i1 %344, label %349, label %345

345:                                              ; preds = %342
  %346 = ptrtoint i32* %343 to i64
  %347 = bitcast i32** %154 to i64*
  store i64 %346, i64* %347, align 8
  %348 = bitcast i32* %343 to i8*
  call void @_ZdlPv(i8* %348) #15
  br label %349

349:                                              ; preds = %342, %345
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %152) #14
  %350 = load float*, float** %150, align 8
  %351 = icmp eq float* %350, null
  br i1 %351, label %356, label %352

352:                                              ; preds = %349
  %353 = ptrtoint float* %350 to i64
  %354 = bitcast float** %151 to i64*
  store i64 %353, i64* %354, align 8
  %355 = bitcast float* %350 to i8*
  call void @_ZdlPv(i8* %355) #15
  br label %356

356:                                              ; preds = %349, %352
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %149) #14
  br label %357

357:                                              ; preds = %77, %111, %115, %356
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %78) #14
  br label %514

358:                                              ; preds = %4
  %359 = bitcast <2 x float>* %20 to %struct.SkPoint*
  %360 = bitcast <2 x float>* %19 to %struct.SkPoint*
  %361 = bitcast <2 x float>* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %361) #14
  %362 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 1, i32 0
  %363 = load i64, i64* %362, align 8
  %364 = sitofp i64 %363 to float
  %365 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 1, i32 1
  %366 = load i64, i64* %365, align 8
  %367 = sub nsw i64 0, %366
  %368 = sitofp i64 %367 to float
  %369 = insertelement <2 x float> undef, float %364, i32 0
  %370 = insertelement <2 x float> %369, float %368, i32 1
  store <2 x float> %370, <2 x float>* %19, align 8
  %371 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 2
  %372 = bitcast %struct.FT_Vector_* %371 to i16*
  %373 = load i16, i16* %372, align 8
  %374 = uitofp i16 %373 to float
  %375 = bitcast <2 x float>* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %375) #14
  %376 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 2, i32 1
  %377 = load i64, i64* %376, align 8
  %378 = sitofp i64 %377 to float
  %379 = getelementptr inbounds i64, i64* %376, i64 1
  %380 = load i64, i64* %379, align 8
  %381 = sub nsw i64 0, %380
  %382 = sitofp i64 %381 to float
  %383 = insertelement <2 x float> undef, float %378, i32 0
  %384 = insertelement <2 x float> %383, float %382, i32 1
  store <2 x float> %384, <2 x float>* %20, align 8
  %385 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 3, i32 1
  %386 = bitcast i64* %385 to i16*
  %387 = load i16, i16* %386, align 8
  %388 = uitofp i16 %387 to float
  %389 = bitcast %"class.std::__1::vector"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %389) #14
  %390 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %21, i64 0, i32 0, i32 0
  %391 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %21, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %389, i8 0, i64 24, i1 false) #14
  %392 = bitcast %"class.std::__1::vector.45"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %392) #14
  %393 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %22, i64 0, i32 0, i32 0
  %394 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %22, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %392, i8 0, i64 24, i1 false) #14
  %395 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 0, i32 1
  call fastcc void @"_ZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNSt3__16vectorIfNSB_9allocatorIfEEEERNSC_IjNSD_IjEEEE"(%class.anon.41* nonnull %8, %struct.FT_ColorStopIterator_* dereferenceable(16) %395, %"class.std::__1::vector"* nonnull dereferenceable(24) %21, %"class.std::__1::vector.45"* nonnull dereferenceable(24) %22)
  call void @_ZN7SkPaint8setColorEj(%class.SkPaint* %3, i32 -16777216) #14
  %396 = load i32*, i32** %393, align 8
  %397 = load float*, float** %390, align 8
  %398 = bitcast float** %391 to i64*
  %399 = load i64, i64* %398, align 8
  %400 = ptrtoint float* %397 to i64
  %401 = sub i64 %399, %400
  %402 = lshr exact i64 %401, 2
  %403 = trunc i64 %402 to i32
  %404 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 0, i32 0
  %405 = load i32, i32* %404, align 8
  %406 = icmp eq i32 %405, 2
  %407 = select i1 %406, i32 2, i32 0
  %408 = icmp eq i32 %405, 1
  %409 = select i1 %408, i32 1, i32 %407
  call void @_ZN16SkGradientShader19MakeTwoPointConicalERK7SkPointfS2_fPKjPKfi10SkTileModejPK8SkMatrix(%class.sk_sp.30* nonnull sret %23, %struct.SkPoint* nonnull dereferenceable(8) %360, float %374, %struct.SkPoint* nonnull dereferenceable(8) %359, float %388, i32* %396, float* %397, i32 %403, i32 %409, i32 0, %class.SkMatrix* null) #14
  call void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint* %3, %class.sk_sp.30* nonnull %23) #14
  %410 = getelementptr inbounds %class.sk_sp.30, %class.sk_sp.30* %23, i64 0, i32 0
  %411 = load %class.SkShader*, %class.SkShader** %410, align 8
  %412 = icmp eq %class.SkShader* %411, null
  br i1 %412, label %423, label %413

413:                                              ; preds = %358
  %414 = getelementptr inbounds %class.SkShader, %class.SkShader* %411, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %415 = atomicrmw add i32* %414, i32 -1 acq_rel
  %416 = icmp eq i32 %415, 1
  br i1 %416, label %417, label %423

417:                                              ; preds = %413
  %418 = bitcast %class.SkShader* %411 to %class.SkRefCntBase*
  %419 = bitcast %class.SkShader* %411 to void (%class.SkRefCntBase*)***
  %420 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %419, align 8
  %421 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %420, i64 2
  %422 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %421, align 8
  call void %422(%class.SkRefCntBase* nonnull %418) #14
  br label %423

423:                                              ; preds = %358, %413, %417
  %424 = load i32*, i32** %393, align 8
  %425 = icmp eq i32* %424, null
  br i1 %425, label %430, label %426

426:                                              ; preds = %423
  %427 = ptrtoint i32* %424 to i64
  %428 = bitcast i32** %394 to i64*
  store i64 %427, i64* %428, align 8
  %429 = bitcast i32* %424 to i8*
  call void @_ZdlPv(i8* %429) #15
  br label %430

430:                                              ; preds = %423, %426
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %392) #14
  %431 = load float*, float** %390, align 8
  %432 = icmp eq float* %431, null
  br i1 %432, label %436, label %433

433:                                              ; preds = %430
  %434 = ptrtoint float* %431 to i64
  store i64 %434, i64* %398, align 8
  %435 = bitcast float* %431 to i8*
  call void @_ZdlPv(i8* %435) #15
  br label %436

436:                                              ; preds = %430, %433
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %389) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %375) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %361) #14
  br label %514

437:                                              ; preds = %4
  %438 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 1, i32 0
  %439 = load i64, i64* %438, align 8
  %440 = sitofp i64 %439 to float
  %441 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 1, i32 1
  %442 = load i64, i64* %441, align 8
  %443 = sub nsw i64 0, %442
  %444 = sitofp i64 %443 to float
  %445 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 2, i32 0
  %446 = load i64, i64* %445, align 8
  %447 = sitofp i64 %446 to float
  %448 = fmul float %447, 0x3EF0000000000000
  %449 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 2, i32 1
  %450 = load i64, i64* %449, align 8
  %451 = sitofp i64 %450 to float
  %452 = fmul float %451, 0x3EF0000000000000
  %453 = bitcast %"class.std::__1::vector"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %453) #14
  %454 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %24, i64 0, i32 0, i32 0
  %455 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %24, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %453, i8 0, i64 24, i1 false) #14
  %456 = bitcast %"class.std::__1::vector.45"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %456) #14
  %457 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %25, i64 0, i32 0, i32 0
  %458 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %25, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %456, i8 0, i64 24, i1 false) #14
  %459 = getelementptr inbounds %struct.FT_COLR_Paint_, %struct.FT_COLR_Paint_* %2, i64 0, i32 1, i32 0, i32 0, i32 1
  call fastcc void @"_ZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNSt3__16vectorIfNSB_9allocatorIfEEEERNSC_IjNSD_IjEEEE"(%class.anon.41* nonnull %8, %struct.FT_ColorStopIterator_* dereferenceable(16) %459, %"class.std::__1::vector"* nonnull dereferenceable(24) %24, %"class.std::__1::vector.45"* nonnull dereferenceable(24) %25)
  call void @_ZN7SkPaint8setColorEj(%class.SkPaint* %3, i32 -16777216) #14
  %460 = call float @fmodf(float %448, float 3.600000e+02) #14
  %461 = fcmp olt float %460, 0.000000e+00
  %462 = fadd float %460, 3.600000e+02
  %463 = select i1 %461, float %462, float %460
  %464 = call float @fmodf(float %452, float 3.600000e+02) #14
  %465 = fcmp olt float %464, 0.000000e+00
  %466 = fadd float %464, 3.600000e+02
  %467 = select i1 %465, float %466, float %464
  %468 = fcmp ult float %463, %467
  %469 = fadd float %467, 3.600000e+02
  %470 = select i1 %468, float %467, float %469
  %471 = bitcast %class.SkMatrix* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %471) #14
  %472 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %26, i64 0, i32 1
  %473 = bitcast %class.SkMatrix* %26 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %473, align 16, !alias.scope !75
  %474 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %26, i64 0, i32 0, i64 4
  %475 = bitcast float* %474 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %475, align 16, !alias.scope !75
  %476 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %26, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %476, align 16, !alias.scope !75
  store i32 16, i32* %472, align 4, !alias.scope !75
  %477 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setRotateEfff(%class.SkMatrix* nonnull %26, float -9.000000e+01, float %440, float %444) #14
  %478 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9postScaleEffff(%class.SkMatrix* nonnull %26, float -1.000000e+00, float 1.000000e+00, float %440, float %444) #14
  %479 = load i32*, i32** %457, align 8
  %480 = load float*, float** %454, align 8
  %481 = bitcast float** %455 to i64*
  %482 = load i64, i64* %481, align 8
  %483 = ptrtoint float* %480 to i64
  %484 = sub i64 %482, %483
  %485 = lshr exact i64 %484, 2
  %486 = trunc i64 %485 to i32
  call void @_ZN16SkGradientShader9MakeSweepEffPKjPKfi10SkTileModeffjPK8SkMatrix(%class.sk_sp.30* nonnull sret %27, float %440, float %444, i32* %479, float* %480, i32 %486, i32 3, float %463, float %470, i32 0, %class.SkMatrix* nonnull %26) #14
  call void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint* %3, %class.sk_sp.30* nonnull %27) #14
  %487 = getelementptr inbounds %class.sk_sp.30, %class.sk_sp.30* %27, i64 0, i32 0
  %488 = load %class.SkShader*, %class.SkShader** %487, align 8
  %489 = icmp eq %class.SkShader* %488, null
  br i1 %489, label %500, label %490

490:                                              ; preds = %437
  %491 = getelementptr inbounds %class.SkShader, %class.SkShader* %488, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %492 = atomicrmw add i32* %491, i32 -1 acq_rel
  %493 = icmp eq i32 %492, 1
  br i1 %493, label %494, label %500

494:                                              ; preds = %490
  %495 = bitcast %class.SkShader* %488 to %class.SkRefCntBase*
  %496 = bitcast %class.SkShader* %488 to void (%class.SkRefCntBase*)***
  %497 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %496, align 8
  %498 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %497, i64 2
  %499 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %498, align 8
  call void %499(%class.SkRefCntBase* nonnull %495) #14
  br label %500

500:                                              ; preds = %437, %490, %494
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %471) #14
  %501 = load i32*, i32** %457, align 8
  %502 = icmp eq i32* %501, null
  br i1 %502, label %507, label %503

503:                                              ; preds = %500
  %504 = ptrtoint i32* %501 to i64
  %505 = bitcast i32** %458 to i64*
  store i64 %504, i64* %505, align 8
  %506 = bitcast i32* %501 to i8*
  call void @_ZdlPv(i8* %506) #15
  br label %507

507:                                              ; preds = %500, %503
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %456) #14
  %508 = load float*, float** %454, align 8
  %509 = icmp eq float* %508, null
  br i1 %509, label %513, label %510

510:                                              ; preds = %507
  %511 = ptrtoint float* %508 to i64
  store i64 %511, i64* %481, align 8
  %512 = bitcast float* %508 to i8*
  call void @_ZdlPv(i8* %512) #15
  br label %513

513:                                              ; preds = %507, %510
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %453) #14
  br label %514

514:                                              ; preds = %4, %513, %436, %357, %76
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN12_GLOBAL__N_122generateFacePathCOLRv1EP11FT_FaceRec_tP6SkPath(%struct.FT_FaceRec_*, i16 zeroext, %class.SkPath*) unnamed_addr #1 {
  %4 = alloca %"class.(anonymous namespace)::SkFTGeometrySink", align 8
  %5 = alloca %struct.FT_SizeRec_*, align 8
  %6 = bitcast %struct.FT_SizeRec_** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #14
  store %struct.FT_SizeRec_* inttoptr (i64 -6148914691236517206 to %struct.FT_SizeRec_*), %struct.FT_SizeRec_** %5, align 8
  %7 = call i32 @FT_New_Size(%struct.FT_FaceRec_* %0, %struct.FT_SizeRec_** nonnull %5) #14
  %8 = icmp ne i32 %7, 0
  %9 = load %struct.FT_SizeRec_*, %struct.FT_SizeRec_** %5, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #14
  %10 = icmp eq %struct.FT_SizeRec_* %9, null
  %11 = or i1 %8, %10
  br i1 %11, label %50, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 22
  %14 = load %struct.FT_SizeRec_*, %struct.FT_SizeRec_** %13, align 8
  %15 = call i32 @FT_Activate_Size(%struct.FT_SizeRec_* nonnull %9) #14
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %46

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 13
  %19 = load i16, i16* %18, align 8
  %20 = zext i16 %19 to i64
  %21 = shl nuw nsw i64 %20, 6
  %22 = call i32 @FT_Set_Char_Size(%struct.FT_FaceRec_* %0, i64 %21, i64 %21, i32 72, i32 72) #14
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %46

24:                                               ; preds = %17
  %25 = zext i16 %1 to i32
  %26 = call i32 @FT_Load_Glyph(%struct.FT_FaceRec_* %0, i32 %25, i32 2056) #14
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %24
  %29 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %2) #14
  br label %46

30:                                               ; preds = %24
  %31 = bitcast %"class.(anonymous namespace)::SkFTGeometrySink"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %31) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 16, i1 false) #14
  %32 = getelementptr inbounds %"class.(anonymous namespace)::SkFTGeometrySink", %"class.(anonymous namespace)::SkFTGeometrySink"* %4, i64 0, i32 0
  store %class.SkPath* %2, %class.SkPath** %32, align 8
  %33 = getelementptr inbounds %"class.(anonymous namespace)::SkFTGeometrySink", %"class.(anonymous namespace)::SkFTGeometrySink"* %4, i64 0, i32 1
  store i8 0, i8* %33, align 8
  %34 = getelementptr inbounds %"class.(anonymous namespace)::SkFTGeometrySink", %"class.(anonymous namespace)::SkFTGeometrySink"* %4, i64 0, i32 2, i32 0
  %35 = bitcast i64* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 16, i1 false) #14
  %36 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 21
  %37 = load %struct.FT_GlyphSlotRec_*, %struct.FT_GlyphSlotRec_** %36, align 8
  %38 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %37, i64 0, i32 13
  %39 = call i32 @FT_Outline_Decompose(%struct.FT_Outline_* %38, %struct.FT_Outline_Funcs_* nonnull @_ZN12_GLOBAL__N_116SkFTGeometrySink5FuncsE, i8* nonnull %31) #14
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %30
  %42 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath* %2) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #14
  br label %46

43:                                               ; preds = %30
  %44 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %2) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #14
  %45 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %2) #14
  br label %46

46:                                               ; preds = %12, %17, %28, %41, %43
  %47 = phi i1 [ false, %28 ], [ false, %43 ], [ false, %12 ], [ false, %17 ], [ true, %41 ]
  %48 = call i32 @FT_Activate_Size(%struct.FT_SizeRec_* %14) #14
  %49 = call i32 @FT_Done_Size(%struct.FT_SizeRec_* nonnull %9) #14
  br label %50

50:                                               ; preds = %3, %46
  %51 = phi i1 [ %47, %46 ], [ false, %3 ]
  ret i1 %51
}

declare void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint*, %class.sk_sp.30*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNSt3__16vectorIfNSB_9allocatorIfEEEERNSC_IjNSD_IjEEEE"(%class.anon.41* nocapture readonly, %struct.FT_ColorStopIterator_* dereferenceable(16), %"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::vector.45"* dereferenceable(24)) unnamed_addr #10 align 2 {
  %5 = alloca %class.anon.61, align 1
  %6 = alloca %struct.FT_ColorStop_, align 2
  %7 = getelementptr inbounds %struct.FT_ColorStopIterator_, %struct.FT_ColorStopIterator_* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = zext i32 %8 to i64
  %10 = icmp eq i32 %8, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %4
  %12 = shl nuw nsw i64 %9, 3
  %13 = tail call i8* @_Znwm(i64 %12) #15
  %14 = bitcast i8* %13 to %struct.ColorStop*
  %15 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %14, i64 %9
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 0, i64 %12, i1 false) #14
  %16 = ptrtoint %struct.ColorStop* %15 to i64
  %17 = ptrtoint i8* %13 to i64
  br label %18

18:                                               ; preds = %4, %11
  %19 = phi i64 [ %17, %11 ], [ 0, %4 ]
  %20 = phi i64 [ %16, %11 ], [ 0, %4 ]
  %21 = bitcast %struct.FT_ColorStop_* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %21) #14
  %22 = getelementptr inbounds %struct.FT_ColorStop_, %struct.FT_ColorStop_* %6, i64 0, i32 0
  store i16 -21846, i16* %22, align 2
  %23 = getelementptr inbounds %struct.FT_ColorStop_, %struct.FT_ColorStop_* %6, i64 0, i32 1, i32 0
  store i16 -21846, i16* %23, align 2
  %24 = getelementptr inbounds %struct.FT_ColorStop_, %struct.FT_ColorStop_* %6, i64 0, i32 1, i32 1
  store i16 -21846, i16* %24, align 2
  %25 = getelementptr inbounds %class.anon.41, %class.anon.41* %0, i64 0, i32 0
  %26 = load %struct.FT_FaceRec_**, %struct.FT_FaceRec_*** %25, align 8
  %27 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %26, align 8
  %28 = call zeroext i8 @FT_Get_Colorline_Stops(%struct.FT_FaceRec_* %27, %struct.FT_ColorStop_* nonnull %6, %struct.FT_ColorStopIterator_* %1) #14
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %18
  %31 = inttoptr i64 %19 to %struct.ColorStop*
  br label %76

32:                                               ; preds = %18
  %33 = getelementptr inbounds %struct.FT_ColorStopIterator_, %struct.FT_ColorStopIterator_* %1, i64 0, i32 1
  %34 = inttoptr i64 %19 to %struct.ColorStop*
  %35 = getelementptr inbounds %class.anon.41, %class.anon.41* %0, i64 0, i32 1
  br label %36

36:                                               ; preds = %32, %36
  %37 = load i32, i32* %33, align 4
  %38 = add i32 %37, -1
  %39 = load i16, i16* %22, align 2
  %40 = sitofp i16 %39 to float
  %41 = fmul float %40, 0x3F10000000000000
  %42 = zext i32 %38 to i64
  %43 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %34, i64 %42, i32 0
  store float %41, float* %43, align 4
  %44 = load %struct.FT_Color_**, %struct.FT_Color_*** %35, align 8
  %45 = load %struct.FT_Color_*, %struct.FT_Color_** %44, align 8
  %46 = load i16, i16* %23, align 2
  %47 = zext i16 %46 to i64
  %48 = getelementptr inbounds %struct.FT_Color_, %struct.FT_Color_* %45, i64 %47, i32 3
  %49 = load i8, i8* %48, align 1
  %50 = uitofp i8 %49 to float
  %51 = load i16, i16* %24, align 2
  %52 = uitofp i16 %51 to float
  %53 = fmul float %52, 0x3F10000000000000
  %54 = fmul float %53, %50
  %55 = fptoui float %54 to i32
  %56 = getelementptr inbounds %struct.FT_Color_, %struct.FT_Color_* %45, i64 %47, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = getelementptr inbounds %struct.FT_Color_, %struct.FT_Color_* %45, i64 %47, i32 1
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = getelementptr inbounds %struct.FT_Color_, %struct.FT_Color_* %45, i64 %47, i32 0
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = shl i32 %55, 24
  %66 = shl nuw nsw i32 %58, 16
  %67 = shl nuw nsw i32 %61, 8
  %68 = or i32 %67, %66
  %69 = or i32 %68, %64
  %70 = or i32 %69, %65
  %71 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %34, i64 %42, i32 1
  store i32 %70, i32* %71, align 4
  %72 = load %struct.FT_FaceRec_**, %struct.FT_FaceRec_*** %25, align 8
  %73 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %72, align 8
  %74 = call zeroext i8 @FT_Get_Colorline_Stops(%struct.FT_FaceRec_* %73, %struct.FT_ColorStop_* nonnull %6, %struct.FT_ColorStopIterator_* %1) #14
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %76, label %36

76:                                               ; preds = %36, %30
  %77 = phi %struct.ColorStop* [ %31, %30 ], [ %34, %36 ]
  %78 = inttoptr i64 %20 to %struct.ColorStop*
  %79 = getelementptr inbounds %class.anon.61, %class.anon.61* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %79)
  %80 = sub i64 %20, %19
  %81 = ashr exact i64 %80, 3
  %82 = icmp sgt i64 %80, 1024
  br i1 %82, label %83, label %94

83:                                               ; preds = %76
  %84 = icmp slt i64 %81, 1152921504606846975
  %85 = select i1 %84, i64 %81, i64 1152921504606846975
  br label %86

86:                                               ; preds = %91, %83
  %87 = phi i64 [ %92, %91 ], [ %85, %83 ]
  %88 = shl i64 %87, 3
  %89 = call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %88, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #14
  %90 = icmp eq i8* %89, null
  br i1 %90, label %91, label %95

91:                                               ; preds = %86
  %92 = lshr i64 %87, 1
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %86

94:                                               ; preds = %91, %76
  call fastcc void @"_ZNSt3__113__stable_sortIRZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNS_6vectorIfNS_9allocatorIfEEEERNSD_IjNSE_IjEEEEEUlRKZZNS1_24colrv1_configure_skpaintES3_S6_S7_S9_ENKSA_clESC_SH_SK_E9ColorStopSN_E_NS_11__wrap_iterIPSL_EEEEvT0_ST_T_NS_15iterator_traitsIST_E15difference_typeEPNSW_10value_typeEl"(%struct.ColorStop* %77, %struct.ColorStop* %78, %class.anon.61* nonnull dereferenceable(1) %5, i64 %81, %struct.ColorStop* null, i64 0) #14
  br label %97

95:                                               ; preds = %86
  %96 = bitcast i8* %89 to %struct.ColorStop*
  call fastcc void @"_ZNSt3__113__stable_sortIRZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNS_6vectorIfNS_9allocatorIfEEEERNSD_IjNSE_IjEEEEEUlRKZZNS1_24colrv1_configure_skpaintES3_S6_S7_S9_ENKSA_clESC_SH_SK_E9ColorStopSN_E_NS_11__wrap_iterIPSL_EEEEvT0_ST_T_NS_15iterator_traitsIST_E15difference_typeEPNSW_10value_typeEl"(%struct.ColorStop* %77, %struct.ColorStop* %78, %class.anon.61* nonnull dereferenceable(1) %5, i64 %81, %struct.ColorStop* nonnull %96, i64 %87) #14
  call void @_ZdlPv(i8* nonnull %89) #15
  br label %97

97:                                               ; preds = %94, %95
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %79)
  %98 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %99 = bitcast float** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.std::__1::vector"* %2 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = sub i64 %100, %102
  %104 = ashr exact i64 %103, 2
  %105 = icmp ult i64 %104, %9
  %106 = inttoptr i64 %102 to float*
  br i1 %105, label %107, label %109

107:                                              ; preds = %97
  %108 = sub nsw i64 %9, %104
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector"* %2, i64 %108) #14
  br label %113

109:                                              ; preds = %97
  %110 = icmp ugt i64 %104, %9
  br i1 %110, label %111, label %113

111:                                              ; preds = %109
  %112 = getelementptr inbounds float, float* %106, i64 %9
  store float* %112, float** %98, align 8
  br label %113

113:                                              ; preds = %107, %109, %111
  %114 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %3, i64 0, i32 0, i32 1
  %115 = bitcast i32** %114 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = bitcast %"class.std::__1::vector.45"* %3 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = sub i64 %116, %118
  %120 = ashr exact i64 %119, 2
  %121 = icmp ult i64 %120, %9
  %122 = inttoptr i64 %118 to i32*
  br i1 %121, label %123, label %125

123:                                              ; preds = %113
  %124 = sub nsw i64 %9, %120
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.45"* %3, i64 %124) #14
  br label %129

125:                                              ; preds = %113
  %126 = icmp ugt i64 %120, %9
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = getelementptr inbounds i32, i32* %122, i64 %9
  store i32* %128, i32** %114, align 8
  br label %129

129:                                              ; preds = %123, %125, %127
  br i1 %10, label %151, label %130

130:                                              ; preds = %129
  %131 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %132 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %3, i64 0, i32 0, i32 0
  %133 = and i64 %9, 1
  %134 = icmp eq i32 %8, 1
  br i1 %134, label %137, label %135

135:                                              ; preds = %130
  %136 = sub nsw i64 %9, %133
  br label %156

137:                                              ; preds = %156, %130
  %138 = phi i64 [ 0, %130 ], [ %180, %156 ]
  %139 = icmp eq i64 %133, 0
  br i1 %139, label %151, label %140

140:                                              ; preds = %137
  %141 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %77, i64 %138
  %142 = bitcast %struct.ColorStop* %141 to i32*
  %143 = load i32, i32* %142, align 4
  %144 = load float*, float** %131, align 8
  %145 = getelementptr inbounds float, float* %144, i64 %138
  %146 = bitcast float* %145 to i32*
  store i32 %143, i32* %146, align 4
  %147 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %77, i64 %138, i32 1
  %148 = load i32, i32* %147, align 4
  %149 = load i32*, i32** %132, align 8
  %150 = getelementptr inbounds i32, i32* %149, i64 %138
  store i32 %148, i32* %150, align 4
  br label %151

151:                                              ; preds = %140, %137, %129
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %21) #14
  %152 = icmp eq i64 %19, 0
  br i1 %152, label %155, label %153

153:                                              ; preds = %151
  %154 = inttoptr i64 %19 to i8*
  call void @_ZdlPv(i8* %154) #15
  br label %155

155:                                              ; preds = %151, %153
  ret void

156:                                              ; preds = %156, %135
  %157 = phi i64 [ 0, %135 ], [ %180, %156 ]
  %158 = phi i64 [ %136, %135 ], [ %181, %156 ]
  %159 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %77, i64 %157
  %160 = bitcast %struct.ColorStop* %159 to i32*
  %161 = load i32, i32* %160, align 4
  %162 = load float*, float** %131, align 8
  %163 = getelementptr inbounds float, float* %162, i64 %157
  %164 = bitcast float* %163 to i32*
  store i32 %161, i32* %164, align 4
  %165 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %77, i64 %157, i32 1
  %166 = load i32, i32* %165, align 4
  %167 = load i32*, i32** %132, align 8
  %168 = getelementptr inbounds i32, i32* %167, i64 %157
  store i32 %166, i32* %168, align 4
  %169 = or i64 %157, 1
  %170 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %77, i64 %169
  %171 = bitcast %struct.ColorStop* %170 to i32*
  %172 = load i32, i32* %171, align 4
  %173 = load float*, float** %131, align 8
  %174 = getelementptr inbounds float, float* %173, i64 %169
  %175 = bitcast float* %174 to i32*
  store i32 %172, i32* %175, align 4
  %176 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %77, i64 %169, i32 1
  %177 = load i32, i32* %176, align 4
  %178 = load i32*, i32** %132, align 8
  %179 = getelementptr inbounds i32, i32* %178, i64 %169
  store i32 %177, i32* %179, align 4
  %180 = add nuw nsw i64 %157, 2
  %181 = add i64 %158, -2
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %137, label %156
}

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9postScaleEffff(%class.SkMatrix*, float, float, float, float) local_unnamed_addr #3

declare void @_ZN16SkGradientShader9MakeSweepEffPKjPKfi10SkTileModeffjPK8SkMatrix(%class.sk_sp.30* sret, float, float, i32*, float*, i32, i32, float, float, i32, %class.SkMatrix*) local_unnamed_addr #3

declare zeroext i1 @_ZN7SkPoint9normalizeEv(%struct.SkPoint*) local_unnamed_addr #3

declare float @_ZN7SkPoint6LengthEff(float, float) local_unnamed_addr #3

declare zeroext i8 @FT_Get_Colorline_Stops(%struct.FT_FaceRec_*, %struct.FT_ColorStop_*, %struct.FT_ColorStopIterator_*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__113__stable_sortIRZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNS_6vectorIfNS_9allocatorIfEEEERNSD_IjNSE_IjEEEEEUlRKZZNS1_24colrv1_configure_skpaintES3_S6_S7_S9_ENKSA_clESC_SH_SK_E9ColorStopSN_E_NS_11__wrap_iterIPSL_EEEEvT0_ST_T_NS_15iterator_traitsIST_E15difference_typeEPNSW_10value_typeEl"(%struct.ColorStop*, %struct.ColorStop*, %class.anon.61* dereferenceable(1), i64, %struct.ColorStop*, i64) unnamed_addr #1 {
  switch i64 %3, label %22 [
    i64 0, label %442
    i64 1, label %442
    i64 2, label %7
  ]

7:                                                ; preds = %6
  %8 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %1, i64 -1
  %9 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %8, i64 0, i32 0
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %0, i64 0, i32 0
  %12 = load float, float* %11, align 4
  %13 = fcmp olt float %10, %12
  br i1 %13, label %14, label %442

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = bitcast %struct.ColorStop* %8 to i64*
  %18 = bitcast %struct.ColorStop* %0 to i64*
  %19 = load i64, i64* %17, align 4
  store i64 %19, i64* %18, align 4
  %20 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %8, i64 0, i32 0
  store float %12, float* %20, align 4
  %21 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %1, i64 -1, i32 1
  store i32 %16, i32* %21, align 4
  br label %442

22:                                               ; preds = %6
  %23 = icmp slt i64 %3, 129
  br i1 %23, label %24, label %56

24:                                               ; preds = %22
  %25 = icmp eq %struct.ColorStop* %0, %1
  br i1 %25, label %442, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %0, i64 1
  %28 = icmp eq %struct.ColorStop* %27, %1
  br i1 %28, label %442, label %29

29:                                               ; preds = %26, %45
  %30 = phi %struct.ColorStop* [ %49, %45 ], [ %27, %26 ]
  %31 = phi %struct.ColorStop* [ %30, %45 ], [ %0, %26 ]
  %32 = bitcast %struct.ColorStop* %30 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %31, i64 1, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq %struct.ColorStop* %30, %0
  br i1 %36, label %45, label %37

37:                                               ; preds = %29
  %38 = bitcast i32 %33 to float
  br label %39

39:                                               ; preds = %51, %37
  %40 = phi %struct.ColorStop* [ %30, %37 ], [ %41, %51 ]
  %41 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %40, i64 -1
  %42 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %41, i64 0, i32 0
  %43 = load float, float* %42, align 4
  %44 = fcmp ogt float %43, %38
  br i1 %44, label %51, label %45

45:                                               ; preds = %51, %39, %29
  %46 = phi %struct.ColorStop* [ %0, %29 ], [ %40, %39 ], [ %0, %51 ]
  %47 = bitcast %struct.ColorStop* %46 to i32*
  store i32 %33, i32* %47, align 4
  %48 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %46, i64 0, i32 1
  store i32 %35, i32* %48, align 4
  %49 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %30, i64 1
  %50 = icmp eq %struct.ColorStop* %49, %1
  br i1 %50, label %442, label %29

51:                                               ; preds = %39
  %52 = bitcast %struct.ColorStop* %41 to i64*
  %53 = bitcast %struct.ColorStop* %40 to i64*
  %54 = load i64, i64* %52, align 4
  store i64 %54, i64* %53, align 4
  %55 = icmp eq %struct.ColorStop* %41, %0
  br i1 %55, label %45, label %39

56:                                               ; preds = %22
  %57 = lshr i64 %3, 1
  %58 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %0, i64 %57
  %59 = icmp sgt i64 %3, %5
  br i1 %59, label %440, label %60

60:                                               ; preds = %56
  tail call fastcc void @"_ZNSt3__118__stable_sort_moveIRZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNS_6vectorIfNS_9allocatorIfEEEERNSD_IjNSE_IjEEEEEUlRKZZNS1_24colrv1_configure_skpaintES3_S6_S7_S9_ENKSA_clESC_SH_SK_E9ColorStopSN_E_NS_11__wrap_iterIPSL_EEEEvT0_ST_T_NS_15iterator_traitsIST_E15difference_typeEPNSW_10value_typeE"(%struct.ColorStop* %0, %struct.ColorStop* %58, %class.anon.61* dereferenceable(1) %2, i64 %57, %struct.ColorStop* %4)
  %61 = sub nsw i64 %3, %57
  %62 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %4, i64 %57
  tail call fastcc void @"_ZNSt3__118__stable_sort_moveIRZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNS_6vectorIfNS_9allocatorIfEEEERNSD_IjNSE_IjEEEEEUlRKZZNS1_24colrv1_configure_skpaintES3_S6_S7_S9_ENKSA_clESC_SH_SK_E9ColorStopSN_E_NS_11__wrap_iterIPSL_EEEEvT0_ST_T_NS_15iterator_traitsIST_E15difference_typeEPNSW_10value_typeE"(%struct.ColorStop* %58, %struct.ColorStop* %1, %class.anon.61* dereferenceable(1) %2, i64 %61, %struct.ColorStop* %62)
  %63 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %4, i64 %3
  br label %195

64:                                               ; preds = %391
  %65 = ptrtoint %struct.ColorStop* %392 to i64
  %66 = icmp eq %struct.ColorStop* %392, %63
  br i1 %66, label %442, label %67

67:                                               ; preds = %64
  %68 = add i64 %3, -1
  %69 = getelementptr %struct.ColorStop, %struct.ColorStop* %4, i64 %68, i32 0
  %70 = ptrtoint float* %69 to i64
  %71 = sub i64 %70, %65
  %72 = lshr i64 %71, 3
  %73 = add nuw nsw i64 %72, 1
  %74 = icmp ult i64 %73, 4
  br i1 %74, label %75, label %102

75:                                               ; preds = %193, %102, %67
  %76 = phi %struct.ColorStop* [ %392, %102 ], [ %392, %67 ], [ %116, %193 ]
  %77 = phi %struct.ColorStop* [ %394, %102 ], [ %394, %67 ], [ %117, %193 ]
  %78 = ptrtoint %struct.ColorStop* %76 to i64
  %79 = add i64 %3, -1
  %80 = getelementptr %struct.ColorStop, %struct.ColorStop* %4, i64 %79, i32 0
  %81 = ptrtoint float* %80 to i64
  %82 = sub i64 %81, %78
  %83 = lshr i64 %82, 3
  %84 = add nuw nsw i64 %83, 1
  %85 = and i64 %84, 7
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %98, label %87

87:                                               ; preds = %75, %87
  %88 = phi %struct.ColorStop* [ %94, %87 ], [ %76, %75 ]
  %89 = phi %struct.ColorStop* [ %95, %87 ], [ %77, %75 ]
  %90 = phi i64 [ %96, %87 ], [ %85, %75 ]
  %91 = bitcast %struct.ColorStop* %88 to i64*
  %92 = bitcast %struct.ColorStop* %89 to i64*
  %93 = load i64, i64* %91, align 4
  store i64 %93, i64* %92, align 4
  %94 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %88, i64 1
  %95 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %89, i64 1
  %96 = add i64 %90, -1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %87, !llvm.loop !78

98:                                               ; preds = %87, %75
  %99 = phi %struct.ColorStop* [ %76, %75 ], [ %94, %87 ]
  %100 = phi %struct.ColorStop* [ %77, %75 ], [ %95, %87 ]
  %101 = icmp ult i64 %82, 56
  br i1 %101, label %442, label %396

102:                                              ; preds = %67
  %103 = add i64 %3, -1
  %104 = getelementptr %struct.ColorStop, %struct.ColorStop* %4, i64 %103, i32 0
  %105 = ptrtoint float* %104 to i64
  %106 = sub i64 %105, %65
  %107 = lshr i64 %106, 3
  %108 = add nuw nsw i64 %107, 1
  %109 = getelementptr %struct.ColorStop, %struct.ColorStop* %394, i64 %108
  %110 = getelementptr %struct.ColorStop, %struct.ColorStop* %392, i64 %108
  %111 = icmp ult %struct.ColorStop* %394, %110
  %112 = icmp ult %struct.ColorStop* %392, %109
  %113 = and i1 %111, %112
  br i1 %113, label %75, label %114

114:                                              ; preds = %102
  %115 = and i64 %73, 4611686018427387900
  %116 = getelementptr %struct.ColorStop, %struct.ColorStop* %392, i64 %115
  %117 = getelementptr %struct.ColorStop, %struct.ColorStop* %394, i64 %115
  %118 = add nsw i64 %115, -4
  %119 = lshr exact i64 %118, 2
  %120 = add nuw nsw i64 %119, 1
  %121 = and i64 %120, 3
  %122 = icmp ult i64 %118, 12
  br i1 %122, label %174, label %123

123:                                              ; preds = %114
  %124 = sub nsw i64 %120, %121
  br label %125

125:                                              ; preds = %125, %123
  %126 = phi i64 [ 0, %123 ], [ %171, %125 ]
  %127 = phi i64 [ %124, %123 ], [ %172, %125 ]
  %128 = getelementptr %struct.ColorStop, %struct.ColorStop* %392, i64 %126
  %129 = getelementptr %struct.ColorStop, %struct.ColorStop* %394, i64 %126
  %130 = bitcast %struct.ColorStop* %128 to <2 x i64>*
  %131 = load <2 x i64>, <2 x i64>* %130, align 4, !alias.scope !79
  %132 = getelementptr %struct.ColorStop, %struct.ColorStop* %128, i64 2
  %133 = bitcast %struct.ColorStop* %132 to <2 x i64>*
  %134 = load <2 x i64>, <2 x i64>* %133, align 4, !alias.scope !79
  %135 = bitcast %struct.ColorStop* %129 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %135, align 4, !alias.scope !82, !noalias !79
  %136 = getelementptr %struct.ColorStop, %struct.ColorStop* %129, i64 2
  %137 = bitcast %struct.ColorStop* %136 to <2 x i64>*
  store <2 x i64> %134, <2 x i64>* %137, align 4, !alias.scope !82, !noalias !79
  %138 = or i64 %126, 4
  %139 = getelementptr %struct.ColorStop, %struct.ColorStop* %392, i64 %138
  %140 = getelementptr %struct.ColorStop, %struct.ColorStop* %394, i64 %138
  %141 = bitcast %struct.ColorStop* %139 to <2 x i64>*
  %142 = load <2 x i64>, <2 x i64>* %141, align 4, !alias.scope !79
  %143 = getelementptr %struct.ColorStop, %struct.ColorStop* %139, i64 2
  %144 = bitcast %struct.ColorStop* %143 to <2 x i64>*
  %145 = load <2 x i64>, <2 x i64>* %144, align 4, !alias.scope !79
  %146 = bitcast %struct.ColorStop* %140 to <2 x i64>*
  store <2 x i64> %142, <2 x i64>* %146, align 4, !alias.scope !82, !noalias !79
  %147 = getelementptr %struct.ColorStop, %struct.ColorStop* %140, i64 2
  %148 = bitcast %struct.ColorStop* %147 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %148, align 4, !alias.scope !82, !noalias !79
  %149 = or i64 %126, 8
  %150 = getelementptr %struct.ColorStop, %struct.ColorStop* %392, i64 %149
  %151 = getelementptr %struct.ColorStop, %struct.ColorStop* %394, i64 %149
  %152 = bitcast %struct.ColorStop* %150 to <2 x i64>*
  %153 = load <2 x i64>, <2 x i64>* %152, align 4, !alias.scope !79
  %154 = getelementptr %struct.ColorStop, %struct.ColorStop* %150, i64 2
  %155 = bitcast %struct.ColorStop* %154 to <2 x i64>*
  %156 = load <2 x i64>, <2 x i64>* %155, align 4, !alias.scope !79
  %157 = bitcast %struct.ColorStop* %151 to <2 x i64>*
  store <2 x i64> %153, <2 x i64>* %157, align 4, !alias.scope !82, !noalias !79
  %158 = getelementptr %struct.ColorStop, %struct.ColorStop* %151, i64 2
  %159 = bitcast %struct.ColorStop* %158 to <2 x i64>*
  store <2 x i64> %156, <2 x i64>* %159, align 4, !alias.scope !82, !noalias !79
  %160 = or i64 %126, 12
  %161 = getelementptr %struct.ColorStop, %struct.ColorStop* %392, i64 %160
  %162 = getelementptr %struct.ColorStop, %struct.ColorStop* %394, i64 %160
  %163 = bitcast %struct.ColorStop* %161 to <2 x i64>*
  %164 = load <2 x i64>, <2 x i64>* %163, align 4, !alias.scope !79
  %165 = getelementptr %struct.ColorStop, %struct.ColorStop* %161, i64 2
  %166 = bitcast %struct.ColorStop* %165 to <2 x i64>*
  %167 = load <2 x i64>, <2 x i64>* %166, align 4, !alias.scope !79
  %168 = bitcast %struct.ColorStop* %162 to <2 x i64>*
  store <2 x i64> %164, <2 x i64>* %168, align 4, !alias.scope !82, !noalias !79
  %169 = getelementptr %struct.ColorStop, %struct.ColorStop* %162, i64 2
  %170 = bitcast %struct.ColorStop* %169 to <2 x i64>*
  store <2 x i64> %167, <2 x i64>* %170, align 4, !alias.scope !82, !noalias !79
  %171 = add i64 %126, 16
  %172 = add i64 %127, -4
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %125, !llvm.loop !84

174:                                              ; preds = %125, %114
  %175 = phi i64 [ 0, %114 ], [ %171, %125 ]
  %176 = icmp eq i64 %121, 0
  br i1 %176, label %193, label %177

177:                                              ; preds = %174, %177
  %178 = phi i64 [ %190, %177 ], [ %175, %174 ]
  %179 = phi i64 [ %191, %177 ], [ %121, %174 ]
  %180 = getelementptr %struct.ColorStop, %struct.ColorStop* %392, i64 %178
  %181 = getelementptr %struct.ColorStop, %struct.ColorStop* %394, i64 %178
  %182 = bitcast %struct.ColorStop* %180 to <2 x i64>*
  %183 = load <2 x i64>, <2 x i64>* %182, align 4, !alias.scope !79
  %184 = getelementptr %struct.ColorStop, %struct.ColorStop* %180, i64 2
  %185 = bitcast %struct.ColorStop* %184 to <2 x i64>*
  %186 = load <2 x i64>, <2 x i64>* %185, align 4, !alias.scope !79
  %187 = bitcast %struct.ColorStop* %181 to <2 x i64>*
  store <2 x i64> %183, <2 x i64>* %187, align 4, !alias.scope !82, !noalias !79
  %188 = getelementptr %struct.ColorStop, %struct.ColorStop* %181, i64 2
  %189 = bitcast %struct.ColorStop* %188 to <2 x i64>*
  store <2 x i64> %186, <2 x i64>* %189, align 4, !alias.scope !82, !noalias !79
  %190 = add i64 %178, 4
  %191 = add i64 %179, -1
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %177, !llvm.loop !85

193:                                              ; preds = %177, %174
  %194 = icmp eq i64 %73, %115
  br i1 %194, label %442, label %75

195:                                              ; preds = %60, %391
  %196 = phi %struct.ColorStop* [ %393, %391 ], [ %4, %60 ]
  %197 = phi %struct.ColorStop* [ %392, %391 ], [ %62, %60 ]
  %198 = phi %struct.ColorStop* [ %394, %391 ], [ %0, %60 ]
  %199 = icmp eq %struct.ColorStop* %197, %63
  br i1 %199, label %200, label %375

200:                                              ; preds = %195
  %201 = ptrtoint %struct.ColorStop* %196 to i64
  %202 = icmp eq %struct.ColorStop* %196, %62
  br i1 %202, label %442, label %203

203:                                              ; preds = %200
  %204 = add nsw i64 %57, -1
  %205 = getelementptr %struct.ColorStop, %struct.ColorStop* %4, i64 %204, i32 0
  %206 = ptrtoint float* %205 to i64
  %207 = sub i64 %206, %201
  %208 = lshr i64 %207, 3
  %209 = add nuw nsw i64 %208, 1
  %210 = icmp ult i64 %209, 4
  br i1 %210, label %304, label %211

211:                                              ; preds = %203
  %212 = add nsw i64 %57, -1
  %213 = getelementptr %struct.ColorStop, %struct.ColorStop* %4, i64 %212, i32 0
  %214 = ptrtoint float* %213 to i64
  %215 = sub i64 %214, %201
  %216 = lshr i64 %215, 3
  %217 = add nuw nsw i64 %216, 1
  %218 = getelementptr %struct.ColorStop, %struct.ColorStop* %198, i64 %217
  %219 = getelementptr %struct.ColorStop, %struct.ColorStop* %196, i64 %217
  %220 = icmp ult %struct.ColorStop* %198, %219
  %221 = icmp ult %struct.ColorStop* %196, %218
  %222 = and i1 %220, %221
  br i1 %222, label %304, label %223

223:                                              ; preds = %211
  %224 = and i64 %209, 4611686018427387900
  %225 = getelementptr %struct.ColorStop, %struct.ColorStop* %196, i64 %224
  %226 = getelementptr %struct.ColorStop, %struct.ColorStop* %198, i64 %224
  %227 = add nsw i64 %224, -4
  %228 = lshr exact i64 %227, 2
  %229 = add nuw nsw i64 %228, 1
  %230 = and i64 %229, 3
  %231 = icmp ult i64 %227, 12
  br i1 %231, label %283, label %232

232:                                              ; preds = %223
  %233 = sub nsw i64 %229, %230
  br label %234

234:                                              ; preds = %234, %232
  %235 = phi i64 [ 0, %232 ], [ %280, %234 ]
  %236 = phi i64 [ %233, %232 ], [ %281, %234 ]
  %237 = getelementptr %struct.ColorStop, %struct.ColorStop* %196, i64 %235
  %238 = getelementptr %struct.ColorStop, %struct.ColorStop* %198, i64 %235
  %239 = bitcast %struct.ColorStop* %237 to <2 x i64>*
  %240 = load <2 x i64>, <2 x i64>* %239, align 4, !alias.scope !86
  %241 = getelementptr %struct.ColorStop, %struct.ColorStop* %237, i64 2
  %242 = bitcast %struct.ColorStop* %241 to <2 x i64>*
  %243 = load <2 x i64>, <2 x i64>* %242, align 4, !alias.scope !86
  %244 = bitcast %struct.ColorStop* %238 to <2 x i64>*
  store <2 x i64> %240, <2 x i64>* %244, align 4, !alias.scope !89, !noalias !86
  %245 = getelementptr %struct.ColorStop, %struct.ColorStop* %238, i64 2
  %246 = bitcast %struct.ColorStop* %245 to <2 x i64>*
  store <2 x i64> %243, <2 x i64>* %246, align 4, !alias.scope !89, !noalias !86
  %247 = or i64 %235, 4
  %248 = getelementptr %struct.ColorStop, %struct.ColorStop* %196, i64 %247
  %249 = getelementptr %struct.ColorStop, %struct.ColorStop* %198, i64 %247
  %250 = bitcast %struct.ColorStop* %248 to <2 x i64>*
  %251 = load <2 x i64>, <2 x i64>* %250, align 4, !alias.scope !86
  %252 = getelementptr %struct.ColorStop, %struct.ColorStop* %248, i64 2
  %253 = bitcast %struct.ColorStop* %252 to <2 x i64>*
  %254 = load <2 x i64>, <2 x i64>* %253, align 4, !alias.scope !86
  %255 = bitcast %struct.ColorStop* %249 to <2 x i64>*
  store <2 x i64> %251, <2 x i64>* %255, align 4, !alias.scope !89, !noalias !86
  %256 = getelementptr %struct.ColorStop, %struct.ColorStop* %249, i64 2
  %257 = bitcast %struct.ColorStop* %256 to <2 x i64>*
  store <2 x i64> %254, <2 x i64>* %257, align 4, !alias.scope !89, !noalias !86
  %258 = or i64 %235, 8
  %259 = getelementptr %struct.ColorStop, %struct.ColorStop* %196, i64 %258
  %260 = getelementptr %struct.ColorStop, %struct.ColorStop* %198, i64 %258
  %261 = bitcast %struct.ColorStop* %259 to <2 x i64>*
  %262 = load <2 x i64>, <2 x i64>* %261, align 4, !alias.scope !86
  %263 = getelementptr %struct.ColorStop, %struct.ColorStop* %259, i64 2
  %264 = bitcast %struct.ColorStop* %263 to <2 x i64>*
  %265 = load <2 x i64>, <2 x i64>* %264, align 4, !alias.scope !86
  %266 = bitcast %struct.ColorStop* %260 to <2 x i64>*
  store <2 x i64> %262, <2 x i64>* %266, align 4, !alias.scope !89, !noalias !86
  %267 = getelementptr %struct.ColorStop, %struct.ColorStop* %260, i64 2
  %268 = bitcast %struct.ColorStop* %267 to <2 x i64>*
  store <2 x i64> %265, <2 x i64>* %268, align 4, !alias.scope !89, !noalias !86
  %269 = or i64 %235, 12
  %270 = getelementptr %struct.ColorStop, %struct.ColorStop* %196, i64 %269
  %271 = getelementptr %struct.ColorStop, %struct.ColorStop* %198, i64 %269
  %272 = bitcast %struct.ColorStop* %270 to <2 x i64>*
  %273 = load <2 x i64>, <2 x i64>* %272, align 4, !alias.scope !86
  %274 = getelementptr %struct.ColorStop, %struct.ColorStop* %270, i64 2
  %275 = bitcast %struct.ColorStop* %274 to <2 x i64>*
  %276 = load <2 x i64>, <2 x i64>* %275, align 4, !alias.scope !86
  %277 = bitcast %struct.ColorStop* %271 to <2 x i64>*
  store <2 x i64> %273, <2 x i64>* %277, align 4, !alias.scope !89, !noalias !86
  %278 = getelementptr %struct.ColorStop, %struct.ColorStop* %271, i64 2
  %279 = bitcast %struct.ColorStop* %278 to <2 x i64>*
  store <2 x i64> %276, <2 x i64>* %279, align 4, !alias.scope !89, !noalias !86
  %280 = add i64 %235, 16
  %281 = add i64 %236, -4
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %283, label %234, !llvm.loop !91

283:                                              ; preds = %234, %223
  %284 = phi i64 [ 0, %223 ], [ %280, %234 ]
  %285 = icmp eq i64 %230, 0
  br i1 %285, label %302, label %286

286:                                              ; preds = %283, %286
  %287 = phi i64 [ %299, %286 ], [ %284, %283 ]
  %288 = phi i64 [ %300, %286 ], [ %230, %283 ]
  %289 = getelementptr %struct.ColorStop, %struct.ColorStop* %196, i64 %287
  %290 = getelementptr %struct.ColorStop, %struct.ColorStop* %198, i64 %287
  %291 = bitcast %struct.ColorStop* %289 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 4, !alias.scope !86
  %293 = getelementptr %struct.ColorStop, %struct.ColorStop* %289, i64 2
  %294 = bitcast %struct.ColorStop* %293 to <2 x i64>*
  %295 = load <2 x i64>, <2 x i64>* %294, align 4, !alias.scope !86
  %296 = bitcast %struct.ColorStop* %290 to <2 x i64>*
  store <2 x i64> %292, <2 x i64>* %296, align 4, !alias.scope !89, !noalias !86
  %297 = getelementptr %struct.ColorStop, %struct.ColorStop* %290, i64 2
  %298 = bitcast %struct.ColorStop* %297 to <2 x i64>*
  store <2 x i64> %295, <2 x i64>* %298, align 4, !alias.scope !89, !noalias !86
  %299 = add i64 %287, 4
  %300 = add i64 %288, -1
  %301 = icmp eq i64 %300, 0
  br i1 %301, label %302, label %286, !llvm.loop !92

302:                                              ; preds = %286, %283
  %303 = icmp eq i64 %209, %224
  br i1 %303, label %442, label %304

304:                                              ; preds = %302, %211, %203
  %305 = phi %struct.ColorStop* [ %196, %211 ], [ %196, %203 ], [ %225, %302 ]
  %306 = phi %struct.ColorStop* [ %198, %211 ], [ %198, %203 ], [ %226, %302 ]
  %307 = ptrtoint %struct.ColorStop* %305 to i64
  %308 = add nsw i64 %57, -1
  %309 = getelementptr %struct.ColorStop, %struct.ColorStop* %4, i64 %308, i32 0
  %310 = ptrtoint float* %309 to i64
  %311 = sub i64 %310, %307
  %312 = lshr i64 %311, 3
  %313 = add nuw nsw i64 %312, 1
  %314 = and i64 %313, 7
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %327, label %316

316:                                              ; preds = %304, %316
  %317 = phi %struct.ColorStop* [ %323, %316 ], [ %305, %304 ]
  %318 = phi %struct.ColorStop* [ %324, %316 ], [ %306, %304 ]
  %319 = phi i64 [ %325, %316 ], [ %314, %304 ]
  %320 = bitcast %struct.ColorStop* %317 to i64*
  %321 = bitcast %struct.ColorStop* %318 to i64*
  %322 = load i64, i64* %320, align 4
  store i64 %322, i64* %321, align 4
  %323 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %317, i64 1
  %324 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %318, i64 1
  %325 = add i64 %319, -1
  %326 = icmp eq i64 %325, 0
  br i1 %326, label %327, label %316, !llvm.loop !93

327:                                              ; preds = %316, %304
  %328 = phi %struct.ColorStop* [ %305, %304 ], [ %323, %316 ]
  %329 = phi %struct.ColorStop* [ %306, %304 ], [ %324, %316 ]
  %330 = icmp ult i64 %311, 56
  br i1 %330, label %442, label %331

331:                                              ; preds = %327, %331
  %332 = phi %struct.ColorStop* [ %372, %331 ], [ %328, %327 ]
  %333 = phi %struct.ColorStop* [ %373, %331 ], [ %329, %327 ]
  %334 = bitcast %struct.ColorStop* %332 to i64*
  %335 = bitcast %struct.ColorStop* %333 to i64*
  %336 = load i64, i64* %334, align 4
  store i64 %336, i64* %335, align 4
  %337 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %332, i64 1
  %338 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %333, i64 1
  %339 = bitcast %struct.ColorStop* %337 to i64*
  %340 = bitcast %struct.ColorStop* %338 to i64*
  %341 = load i64, i64* %339, align 4
  store i64 %341, i64* %340, align 4
  %342 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %332, i64 2
  %343 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %333, i64 2
  %344 = bitcast %struct.ColorStop* %342 to i64*
  %345 = bitcast %struct.ColorStop* %343 to i64*
  %346 = load i64, i64* %344, align 4
  store i64 %346, i64* %345, align 4
  %347 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %332, i64 3
  %348 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %333, i64 3
  %349 = bitcast %struct.ColorStop* %347 to i64*
  %350 = bitcast %struct.ColorStop* %348 to i64*
  %351 = load i64, i64* %349, align 4
  store i64 %351, i64* %350, align 4
  %352 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %332, i64 4
  %353 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %333, i64 4
  %354 = bitcast %struct.ColorStop* %352 to i64*
  %355 = bitcast %struct.ColorStop* %353 to i64*
  %356 = load i64, i64* %354, align 4
  store i64 %356, i64* %355, align 4
  %357 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %332, i64 5
  %358 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %333, i64 5
  %359 = bitcast %struct.ColorStop* %357 to i64*
  %360 = bitcast %struct.ColorStop* %358 to i64*
  %361 = load i64, i64* %359, align 4
  store i64 %361, i64* %360, align 4
  %362 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %332, i64 6
  %363 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %333, i64 6
  %364 = bitcast %struct.ColorStop* %362 to i64*
  %365 = bitcast %struct.ColorStop* %363 to i64*
  %366 = load i64, i64* %364, align 4
  store i64 %366, i64* %365, align 4
  %367 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %332, i64 7
  %368 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %333, i64 7
  %369 = bitcast %struct.ColorStop* %367 to i64*
  %370 = bitcast %struct.ColorStop* %368 to i64*
  %371 = load i64, i64* %369, align 4
  store i64 %371, i64* %370, align 4
  %372 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %332, i64 8
  %373 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %333, i64 8
  %374 = icmp eq %struct.ColorStop* %372, %62
  br i1 %374, label %442, label %331, !llvm.loop !94

375:                                              ; preds = %195
  %376 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %197, i64 0, i32 0
  %377 = load float, float* %376, align 4
  %378 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %196, i64 0, i32 0
  %379 = load float, float* %378, align 4
  %380 = fcmp olt float %377, %379
  br i1 %380, label %381, label %386

381:                                              ; preds = %375
  %382 = bitcast %struct.ColorStop* %197 to i64*
  %383 = bitcast %struct.ColorStop* %198 to i64*
  %384 = load i64, i64* %382, align 4
  store i64 %384, i64* %383, align 4
  %385 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %197, i64 1
  br label %391

386:                                              ; preds = %375
  %387 = bitcast %struct.ColorStop* %196 to i64*
  %388 = bitcast %struct.ColorStop* %198 to i64*
  %389 = load i64, i64* %387, align 4
  store i64 %389, i64* %388, align 4
  %390 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %196, i64 1
  br label %391

391:                                              ; preds = %386, %381
  %392 = phi %struct.ColorStop* [ %385, %381 ], [ %197, %386 ]
  %393 = phi %struct.ColorStop* [ %196, %381 ], [ %390, %386 ]
  %394 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %198, i64 1
  %395 = icmp eq %struct.ColorStop* %393, %62
  br i1 %395, label %64, label %195

396:                                              ; preds = %98, %396
  %397 = phi %struct.ColorStop* [ %437, %396 ], [ %99, %98 ]
  %398 = phi %struct.ColorStop* [ %438, %396 ], [ %100, %98 ]
  %399 = bitcast %struct.ColorStop* %397 to i64*
  %400 = bitcast %struct.ColorStop* %398 to i64*
  %401 = load i64, i64* %399, align 4
  store i64 %401, i64* %400, align 4
  %402 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 1
  %403 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %398, i64 1
  %404 = bitcast %struct.ColorStop* %402 to i64*
  %405 = bitcast %struct.ColorStop* %403 to i64*
  %406 = load i64, i64* %404, align 4
  store i64 %406, i64* %405, align 4
  %407 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 2
  %408 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %398, i64 2
  %409 = bitcast %struct.ColorStop* %407 to i64*
  %410 = bitcast %struct.ColorStop* %408 to i64*
  %411 = load i64, i64* %409, align 4
  store i64 %411, i64* %410, align 4
  %412 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 3
  %413 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %398, i64 3
  %414 = bitcast %struct.ColorStop* %412 to i64*
  %415 = bitcast %struct.ColorStop* %413 to i64*
  %416 = load i64, i64* %414, align 4
  store i64 %416, i64* %415, align 4
  %417 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 4
  %418 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %398, i64 4
  %419 = bitcast %struct.ColorStop* %417 to i64*
  %420 = bitcast %struct.ColorStop* %418 to i64*
  %421 = load i64, i64* %419, align 4
  store i64 %421, i64* %420, align 4
  %422 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 5
  %423 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %398, i64 5
  %424 = bitcast %struct.ColorStop* %422 to i64*
  %425 = bitcast %struct.ColorStop* %423 to i64*
  %426 = load i64, i64* %424, align 4
  store i64 %426, i64* %425, align 4
  %427 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 6
  %428 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %398, i64 6
  %429 = bitcast %struct.ColorStop* %427 to i64*
  %430 = bitcast %struct.ColorStop* %428 to i64*
  %431 = load i64, i64* %429, align 4
  store i64 %431, i64* %430, align 4
  %432 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 7
  %433 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %398, i64 7
  %434 = bitcast %struct.ColorStop* %432 to i64*
  %435 = bitcast %struct.ColorStop* %433 to i64*
  %436 = load i64, i64* %434, align 4
  store i64 %436, i64* %435, align 4
  %437 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 8
  %438 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %398, i64 8
  %439 = icmp eq %struct.ColorStop* %437, %63
  br i1 %439, label %442, label %396, !llvm.loop !95

440:                                              ; preds = %56
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNS_6vectorIfNS_9allocatorIfEEEERNSD_IjNSE_IjEEEEEUlRKZZNS1_24colrv1_configure_skpaintES3_S6_S7_S9_ENKSA_clESC_SH_SK_E9ColorStopSN_E_NS_11__wrap_iterIPSL_EEEEvT0_ST_T_NS_15iterator_traitsIST_E15difference_typeEPNSW_10value_typeEl"(%struct.ColorStop* %0, %struct.ColorStop* %58, %class.anon.61* dereferenceable(1) %2, i64 %57, %struct.ColorStop* %4, i64 %5)
  %441 = sub nsw i64 %3, %57
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNS_6vectorIfNS_9allocatorIfEEEERNSD_IjNSE_IjEEEEEUlRKZZNS1_24colrv1_configure_skpaintES3_S6_S7_S9_ENKSA_clESC_SH_SK_E9ColorStopSN_E_NS_11__wrap_iterIPSL_EEEEvT0_ST_T_NS_15iterator_traitsIST_E15difference_typeEPNSW_10value_typeEl"(%struct.ColorStop* %58, %struct.ColorStop* %1, %class.anon.61* dereferenceable(1) %2, i64 %441, %struct.ColorStop* %4, i64 %5)
  tail call fastcc void @"_ZNSt3__115__inplace_mergeIRZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNS_6vectorIfNS_9allocatorIfEEEERNSD_IjNSE_IjEEEEEUlRKZZNS1_24colrv1_configure_skpaintES3_S6_S7_S9_ENKSA_clESC_SH_SK_E9ColorStopSN_E_NS_11__wrap_iterIPSL_EEEEvT0_ST_ST_T_NS_15iterator_traitsIST_E15difference_typeESX_PNSW_10value_typeEl"(%struct.ColorStop* %0, %struct.ColorStop* %58, %struct.ColorStop* %1, %class.anon.61* dereferenceable(1) %2, i64 %57, i64 %441, %struct.ColorStop* %4, i64 %5)
  ret void

442:                                              ; preds = %98, %396, %327, %331, %45, %193, %302, %200, %64, %26, %24, %7, %14, %6, %6
  ret void
}

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__118__stable_sort_moveIRZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNS_6vectorIfNS_9allocatorIfEEEERNSD_IjNSE_IjEEEEEUlRKZZNS1_24colrv1_configure_skpaintES3_S6_S7_S9_ENKSA_clESC_SH_SK_E9ColorStopSN_E_NS_11__wrap_iterIPSL_EEEEvT0_ST_T_NS_15iterator_traitsIST_E15difference_typeEPNSW_10value_typeE"(%struct.ColorStop*, %struct.ColorStop*, %class.anon.61* dereferenceable(1), i64, %struct.ColorStop*) unnamed_addr #1 {
  switch i64 %3, label %33 [
    i64 0, label %460
    i64 1, label %6
    i64 2, label %10
  ]

6:                                                ; preds = %5
  %7 = bitcast %struct.ColorStop* %0 to i64*
  %8 = bitcast %struct.ColorStop* %4 to i64*
  %9 = load i64, i64* %7, align 4
  store i64 %9, i64* %8, align 4
  br label %460

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %1, i64 -1
  %12 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %11, i64 0, i32 0
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %0, i64 0, i32 0
  %15 = load float, float* %14, align 4
  %16 = fcmp olt float %13, %15
  br i1 %16, label %17, label %25

17:                                               ; preds = %10
  %18 = bitcast %struct.ColorStop* %11 to i64*
  %19 = bitcast %struct.ColorStop* %4 to i64*
  %20 = load i64, i64* %18, align 4
  store i64 %20, i64* %19, align 4
  %21 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %4, i64 1
  %22 = bitcast %struct.ColorStop* %0 to i64*
  %23 = bitcast %struct.ColorStop* %21 to i64*
  %24 = load i64, i64* %22, align 4
  store i64 %24, i64* %23, align 4
  br label %460

25:                                               ; preds = %10
  %26 = bitcast %struct.ColorStop* %0 to i64*
  %27 = bitcast %struct.ColorStop* %4 to i64*
  %28 = load i64, i64* %26, align 4
  store i64 %28, i64* %27, align 4
  %29 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %4, i64 1
  %30 = bitcast %struct.ColorStop* %11 to i64*
  %31 = bitcast %struct.ColorStop* %29 to i64*
  %32 = load i64, i64* %30, align 4
  store i64 %32, i64* %31, align 4
  br label %460

33:                                               ; preds = %5
  %34 = icmp slt i64 %3, 9
  br i1 %34, label %35, label %79

35:                                               ; preds = %33
  %36 = icmp eq %struct.ColorStop* %0, %1
  br i1 %36, label %460, label %37

37:                                               ; preds = %35
  %38 = bitcast %struct.ColorStop* %0 to i64*
  %39 = bitcast %struct.ColorStop* %4 to i64*
  %40 = load i64, i64* %38, align 4
  store i64 %40, i64* %39, align 4
  %41 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %0, i64 1
  %42 = icmp eq %struct.ColorStop* %41, %1
  br i1 %42, label %460, label %43

43:                                               ; preds = %37, %73
  %44 = phi %struct.ColorStop* [ %77, %73 ], [ %41, %37 ]
  %45 = phi %struct.ColorStop* [ %46, %73 ], [ %4, %37 ]
  %46 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %45, i64 1
  %47 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %44, i64 0, i32 0
  %48 = load float, float* %47, align 4
  %49 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %45, i64 0, i32 0
  %50 = load float, float* %49, align 4
  %51 = fcmp olt float %48, %50
  br i1 %51, label %52, label %71

52:                                               ; preds = %43
  %53 = bitcast %struct.ColorStop* %45 to i64*
  %54 = bitcast %struct.ColorStop* %46 to i64*
  %55 = load i64, i64* %53, align 4
  store i64 %55, i64* %54, align 4
  %56 = icmp eq %struct.ColorStop* %45, %4
  br i1 %56, label %73, label %57

57:                                               ; preds = %52, %66
  %58 = phi %struct.ColorStop* [ %59, %66 ], [ %45, %52 ]
  %59 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %58, i64 -1
  %60 = load float, float* %47, align 4
  %61 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %59, i64 0, i32 0
  %62 = load float, float* %61, align 4
  %63 = fcmp olt float %60, %62
  br i1 %63, label %66, label %64

64:                                               ; preds = %57
  %65 = bitcast %struct.ColorStop* %58 to i64*
  br label %73

66:                                               ; preds = %57
  %67 = bitcast %struct.ColorStop* %59 to i64*
  %68 = bitcast %struct.ColorStop* %58 to i64*
  %69 = load i64, i64* %67, align 4
  store i64 %69, i64* %68, align 4
  %70 = icmp eq %struct.ColorStop* %59, %4
  br i1 %70, label %73, label %57

71:                                               ; preds = %43
  %72 = bitcast %struct.ColorStop* %46 to i64*
  br label %73

73:                                               ; preds = %52, %64, %66, %71
  %74 = phi i64* [ %72, %71 ], [ %39, %52 ], [ %65, %64 ], [ %39, %66 ]
  %75 = bitcast %struct.ColorStop* %44 to i64*
  %76 = load i64, i64* %75, align 4
  store i64 %76, i64* %74, align 4
  %77 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %44, i64 1
  %78 = icmp eq %struct.ColorStop* %77, %1
  br i1 %78, label %460, label %43

79:                                               ; preds = %33
  %80 = lshr i64 %3, 1
  %81 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %0, i64 %80
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNS_6vectorIfNS_9allocatorIfEEEERNSD_IjNSE_IjEEEEEUlRKZZNS1_24colrv1_configure_skpaintES3_S6_S7_S9_ENKSA_clESC_SH_SK_E9ColorStopSN_E_NS_11__wrap_iterIPSL_EEEEvT0_ST_T_NS_15iterator_traitsIST_E15difference_typeEPNSW_10value_typeEl"(%struct.ColorStop* %0, %struct.ColorStop* %81, %class.anon.61* dereferenceable(1) %2, i64 %80, %struct.ColorStop* %4, i64 %80)
  %82 = sub nsw i64 %3, %80
  %83 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %4, i64 %80
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNS_6vectorIfNS_9allocatorIfEEEERNSD_IjNSE_IjEEEEEUlRKZZNS1_24colrv1_configure_skpaintES3_S6_S7_S9_ENKSA_clESC_SH_SK_E9ColorStopSN_E_NS_11__wrap_iterIPSL_EEEEvT0_ST_T_NS_15iterator_traitsIST_E15difference_typeEPNSW_10value_typeEl"(%struct.ColorStop* %81, %struct.ColorStop* %1, %class.anon.61* dereferenceable(1) %2, i64 %82, %struct.ColorStop* %83, i64 %82)
  %84 = icmp eq i64 %80, 0
  br i1 %84, label %85, label %259

85:                                               ; preds = %455, %79
  %86 = phi %struct.ColorStop* [ %81, %79 ], [ %456, %455 ]
  %87 = phi %struct.ColorStop* [ %4, %79 ], [ %458, %455 ]
  %88 = ptrtoint %struct.ColorStop* %86 to i64
  %89 = icmp eq %struct.ColorStop* %86, %1
  br i1 %89, label %460, label %90

90:                                               ; preds = %85
  %91 = getelementptr %struct.ColorStop, %struct.ColorStop* %1, i64 -1, i32 0
  %92 = ptrtoint float* %91 to i64
  %93 = sub i64 %92, %88
  %94 = lshr i64 %93, 3
  %95 = add nuw nsw i64 %94, 1
  %96 = icmp ult i64 %95, 4
  br i1 %96, label %189, label %97

97:                                               ; preds = %90
  %98 = getelementptr %struct.ColorStop, %struct.ColorStop* %1, i64 -1, i32 0
  %99 = ptrtoint float* %98 to i64
  %100 = sub i64 %99, %88
  %101 = lshr i64 %100, 3
  %102 = add nuw nsw i64 %101, 1
  %103 = getelementptr %struct.ColorStop, %struct.ColorStop* %87, i64 %102
  %104 = getelementptr %struct.ColorStop, %struct.ColorStop* %86, i64 %102
  %105 = icmp ult %struct.ColorStop* %87, %104
  %106 = icmp ult %struct.ColorStop* %86, %103
  %107 = and i1 %105, %106
  br i1 %107, label %189, label %108

108:                                              ; preds = %97
  %109 = and i64 %95, 4611686018427387900
  %110 = getelementptr %struct.ColorStop, %struct.ColorStop* %87, i64 %109
  %111 = getelementptr %struct.ColorStop, %struct.ColorStop* %86, i64 %109
  %112 = add nsw i64 %109, -4
  %113 = lshr exact i64 %112, 2
  %114 = add nuw nsw i64 %113, 1
  %115 = and i64 %114, 3
  %116 = icmp ult i64 %112, 12
  br i1 %116, label %168, label %117

117:                                              ; preds = %108
  %118 = sub nsw i64 %114, %115
  br label %119

119:                                              ; preds = %119, %117
  %120 = phi i64 [ 0, %117 ], [ %165, %119 ]
  %121 = phi i64 [ %118, %117 ], [ %166, %119 ]
  %122 = getelementptr %struct.ColorStop, %struct.ColorStop* %87, i64 %120
  %123 = getelementptr %struct.ColorStop, %struct.ColorStop* %86, i64 %120
  %124 = bitcast %struct.ColorStop* %123 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 4, !alias.scope !96
  %126 = getelementptr %struct.ColorStop, %struct.ColorStop* %123, i64 2
  %127 = bitcast %struct.ColorStop* %126 to <2 x i64>*
  %128 = load <2 x i64>, <2 x i64>* %127, align 4, !alias.scope !96
  %129 = bitcast %struct.ColorStop* %122 to <2 x i64>*
  store <2 x i64> %125, <2 x i64>* %129, align 4, !alias.scope !99, !noalias !96
  %130 = getelementptr %struct.ColorStop, %struct.ColorStop* %122, i64 2
  %131 = bitcast %struct.ColorStop* %130 to <2 x i64>*
  store <2 x i64> %128, <2 x i64>* %131, align 4, !alias.scope !99, !noalias !96
  %132 = or i64 %120, 4
  %133 = getelementptr %struct.ColorStop, %struct.ColorStop* %87, i64 %132
  %134 = getelementptr %struct.ColorStop, %struct.ColorStop* %86, i64 %132
  %135 = bitcast %struct.ColorStop* %134 to <2 x i64>*
  %136 = load <2 x i64>, <2 x i64>* %135, align 4, !alias.scope !96
  %137 = getelementptr %struct.ColorStop, %struct.ColorStop* %134, i64 2
  %138 = bitcast %struct.ColorStop* %137 to <2 x i64>*
  %139 = load <2 x i64>, <2 x i64>* %138, align 4, !alias.scope !96
  %140 = bitcast %struct.ColorStop* %133 to <2 x i64>*
  store <2 x i64> %136, <2 x i64>* %140, align 4, !alias.scope !99, !noalias !96
  %141 = getelementptr %struct.ColorStop, %struct.ColorStop* %133, i64 2
  %142 = bitcast %struct.ColorStop* %141 to <2 x i64>*
  store <2 x i64> %139, <2 x i64>* %142, align 4, !alias.scope !99, !noalias !96
  %143 = or i64 %120, 8
  %144 = getelementptr %struct.ColorStop, %struct.ColorStop* %87, i64 %143
  %145 = getelementptr %struct.ColorStop, %struct.ColorStop* %86, i64 %143
  %146 = bitcast %struct.ColorStop* %145 to <2 x i64>*
  %147 = load <2 x i64>, <2 x i64>* %146, align 4, !alias.scope !96
  %148 = getelementptr %struct.ColorStop, %struct.ColorStop* %145, i64 2
  %149 = bitcast %struct.ColorStop* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 4, !alias.scope !96
  %151 = bitcast %struct.ColorStop* %144 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %151, align 4, !alias.scope !99, !noalias !96
  %152 = getelementptr %struct.ColorStop, %struct.ColorStop* %144, i64 2
  %153 = bitcast %struct.ColorStop* %152 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %153, align 4, !alias.scope !99, !noalias !96
  %154 = or i64 %120, 12
  %155 = getelementptr %struct.ColorStop, %struct.ColorStop* %87, i64 %154
  %156 = getelementptr %struct.ColorStop, %struct.ColorStop* %86, i64 %154
  %157 = bitcast %struct.ColorStop* %156 to <2 x i64>*
  %158 = load <2 x i64>, <2 x i64>* %157, align 4, !alias.scope !96
  %159 = getelementptr %struct.ColorStop, %struct.ColorStop* %156, i64 2
  %160 = bitcast %struct.ColorStop* %159 to <2 x i64>*
  %161 = load <2 x i64>, <2 x i64>* %160, align 4, !alias.scope !96
  %162 = bitcast %struct.ColorStop* %155 to <2 x i64>*
  store <2 x i64> %158, <2 x i64>* %162, align 4, !alias.scope !99, !noalias !96
  %163 = getelementptr %struct.ColorStop, %struct.ColorStop* %155, i64 2
  %164 = bitcast %struct.ColorStop* %163 to <2 x i64>*
  store <2 x i64> %161, <2 x i64>* %164, align 4, !alias.scope !99, !noalias !96
  %165 = add i64 %120, 16
  %166 = add i64 %121, -4
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %119, !llvm.loop !101

168:                                              ; preds = %119, %108
  %169 = phi i64 [ 0, %108 ], [ %165, %119 ]
  %170 = icmp eq i64 %115, 0
  br i1 %170, label %187, label %171

171:                                              ; preds = %168, %171
  %172 = phi i64 [ %184, %171 ], [ %169, %168 ]
  %173 = phi i64 [ %185, %171 ], [ %115, %168 ]
  %174 = getelementptr %struct.ColorStop, %struct.ColorStop* %87, i64 %172
  %175 = getelementptr %struct.ColorStop, %struct.ColorStop* %86, i64 %172
  %176 = bitcast %struct.ColorStop* %175 to <2 x i64>*
  %177 = load <2 x i64>, <2 x i64>* %176, align 4, !alias.scope !96
  %178 = getelementptr %struct.ColorStop, %struct.ColorStop* %175, i64 2
  %179 = bitcast %struct.ColorStop* %178 to <2 x i64>*
  %180 = load <2 x i64>, <2 x i64>* %179, align 4, !alias.scope !96
  %181 = bitcast %struct.ColorStop* %174 to <2 x i64>*
  store <2 x i64> %177, <2 x i64>* %181, align 4, !alias.scope !99, !noalias !96
  %182 = getelementptr %struct.ColorStop, %struct.ColorStop* %174, i64 2
  %183 = bitcast %struct.ColorStop* %182 to <2 x i64>*
  store <2 x i64> %180, <2 x i64>* %183, align 4, !alias.scope !99, !noalias !96
  %184 = add i64 %172, 4
  %185 = add i64 %173, -1
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %171, !llvm.loop !102

187:                                              ; preds = %171, %168
  %188 = icmp eq i64 %95, %109
  br i1 %188, label %460, label %189

189:                                              ; preds = %187, %97, %90
  %190 = phi %struct.ColorStop* [ %87, %97 ], [ %87, %90 ], [ %110, %187 ]
  %191 = phi %struct.ColorStop* [ %86, %97 ], [ %86, %90 ], [ %111, %187 ]
  %192 = ptrtoint %struct.ColorStop* %191 to i64
  %193 = getelementptr %struct.ColorStop, %struct.ColorStop* %1, i64 -1, i32 0
  %194 = ptrtoint float* %193 to i64
  %195 = sub i64 %194, %192
  %196 = lshr i64 %195, 3
  %197 = add nuw nsw i64 %196, 1
  %198 = and i64 %197, 7
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %211, label %200

200:                                              ; preds = %189, %200
  %201 = phi %struct.ColorStop* [ %208, %200 ], [ %190, %189 ]
  %202 = phi %struct.ColorStop* [ %207, %200 ], [ %191, %189 ]
  %203 = phi i64 [ %209, %200 ], [ %198, %189 ]
  %204 = bitcast %struct.ColorStop* %202 to i64*
  %205 = bitcast %struct.ColorStop* %201 to i64*
  %206 = load i64, i64* %204, align 4
  store i64 %206, i64* %205, align 4
  %207 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %202, i64 1
  %208 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %201, i64 1
  %209 = add i64 %203, -1
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %211, label %200, !llvm.loop !103

211:                                              ; preds = %200, %189
  %212 = phi %struct.ColorStop* [ %190, %189 ], [ %208, %200 ]
  %213 = phi %struct.ColorStop* [ %191, %189 ], [ %207, %200 ]
  %214 = icmp ult i64 %195, 56
  br i1 %214, label %460, label %215

215:                                              ; preds = %211, %215
  %216 = phi %struct.ColorStop* [ %257, %215 ], [ %212, %211 ]
  %217 = phi %struct.ColorStop* [ %256, %215 ], [ %213, %211 ]
  %218 = bitcast %struct.ColorStop* %217 to i64*
  %219 = bitcast %struct.ColorStop* %216 to i64*
  %220 = load i64, i64* %218, align 4
  store i64 %220, i64* %219, align 4
  %221 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %217, i64 1
  %222 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %216, i64 1
  %223 = bitcast %struct.ColorStop* %221 to i64*
  %224 = bitcast %struct.ColorStop* %222 to i64*
  %225 = load i64, i64* %223, align 4
  store i64 %225, i64* %224, align 4
  %226 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %217, i64 2
  %227 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %216, i64 2
  %228 = bitcast %struct.ColorStop* %226 to i64*
  %229 = bitcast %struct.ColorStop* %227 to i64*
  %230 = load i64, i64* %228, align 4
  store i64 %230, i64* %229, align 4
  %231 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %217, i64 3
  %232 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %216, i64 3
  %233 = bitcast %struct.ColorStop* %231 to i64*
  %234 = bitcast %struct.ColorStop* %232 to i64*
  %235 = load i64, i64* %233, align 4
  store i64 %235, i64* %234, align 4
  %236 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %217, i64 4
  %237 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %216, i64 4
  %238 = bitcast %struct.ColorStop* %236 to i64*
  %239 = bitcast %struct.ColorStop* %237 to i64*
  %240 = load i64, i64* %238, align 4
  store i64 %240, i64* %239, align 4
  %241 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %217, i64 5
  %242 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %216, i64 5
  %243 = bitcast %struct.ColorStop* %241 to i64*
  %244 = bitcast %struct.ColorStop* %242 to i64*
  %245 = load i64, i64* %243, align 4
  store i64 %245, i64* %244, align 4
  %246 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %217, i64 6
  %247 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %216, i64 6
  %248 = bitcast %struct.ColorStop* %246 to i64*
  %249 = bitcast %struct.ColorStop* %247 to i64*
  %250 = load i64, i64* %248, align 4
  store i64 %250, i64* %249, align 4
  %251 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %217, i64 7
  %252 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %216, i64 7
  %253 = bitcast %struct.ColorStop* %251 to i64*
  %254 = bitcast %struct.ColorStop* %252 to i64*
  %255 = load i64, i64* %253, align 4
  store i64 %255, i64* %254, align 4
  %256 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %217, i64 8
  %257 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %216, i64 8
  %258 = icmp eq %struct.ColorStop* %256, %1
  br i1 %258, label %460, label %215, !llvm.loop !104

259:                                              ; preds = %79, %455
  %260 = phi %struct.ColorStop* [ %458, %455 ], [ %4, %79 ]
  %261 = phi %struct.ColorStop* [ %457, %455 ], [ %0, %79 ]
  %262 = phi %struct.ColorStop* [ %456, %455 ], [ %81, %79 ]
  %263 = icmp eq %struct.ColorStop* %262, %1
  br i1 %263, label %264, label %439

264:                                              ; preds = %259
  %265 = ptrtoint %struct.ColorStop* %261 to i64
  %266 = icmp eq %struct.ColorStop* %261, %81
  br i1 %266, label %460, label %267

267:                                              ; preds = %264
  %268 = add nsw i64 %80, -1
  %269 = getelementptr %struct.ColorStop, %struct.ColorStop* %0, i64 %268, i32 0
  %270 = ptrtoint float* %269 to i64
  %271 = sub i64 %270, %265
  %272 = lshr i64 %271, 3
  %273 = add nuw nsw i64 %272, 1
  %274 = icmp ult i64 %273, 4
  br i1 %274, label %368, label %275

275:                                              ; preds = %267
  %276 = add nsw i64 %80, -1
  %277 = getelementptr %struct.ColorStop, %struct.ColorStop* %0, i64 %276, i32 0
  %278 = ptrtoint float* %277 to i64
  %279 = sub i64 %278, %265
  %280 = lshr i64 %279, 3
  %281 = add nuw nsw i64 %280, 1
  %282 = getelementptr %struct.ColorStop, %struct.ColorStop* %260, i64 %281
  %283 = getelementptr %struct.ColorStop, %struct.ColorStop* %261, i64 %281
  %284 = icmp ult %struct.ColorStop* %260, %283
  %285 = icmp ult %struct.ColorStop* %261, %282
  %286 = and i1 %284, %285
  br i1 %286, label %368, label %287

287:                                              ; preds = %275
  %288 = and i64 %273, 4611686018427387900
  %289 = getelementptr %struct.ColorStop, %struct.ColorStop* %260, i64 %288
  %290 = getelementptr %struct.ColorStop, %struct.ColorStop* %261, i64 %288
  %291 = add nsw i64 %288, -4
  %292 = lshr exact i64 %291, 2
  %293 = add nuw nsw i64 %292, 1
  %294 = and i64 %293, 3
  %295 = icmp ult i64 %291, 12
  br i1 %295, label %347, label %296

296:                                              ; preds = %287
  %297 = sub nsw i64 %293, %294
  br label %298

298:                                              ; preds = %298, %296
  %299 = phi i64 [ 0, %296 ], [ %344, %298 ]
  %300 = phi i64 [ %297, %296 ], [ %345, %298 ]
  %301 = getelementptr %struct.ColorStop, %struct.ColorStop* %260, i64 %299
  %302 = getelementptr %struct.ColorStop, %struct.ColorStop* %261, i64 %299
  %303 = bitcast %struct.ColorStop* %302 to <2 x i64>*
  %304 = load <2 x i64>, <2 x i64>* %303, align 4, !alias.scope !105
  %305 = getelementptr %struct.ColorStop, %struct.ColorStop* %302, i64 2
  %306 = bitcast %struct.ColorStop* %305 to <2 x i64>*
  %307 = load <2 x i64>, <2 x i64>* %306, align 4, !alias.scope !105
  %308 = bitcast %struct.ColorStop* %301 to <2 x i64>*
  store <2 x i64> %304, <2 x i64>* %308, align 4, !alias.scope !108, !noalias !105
  %309 = getelementptr %struct.ColorStop, %struct.ColorStop* %301, i64 2
  %310 = bitcast %struct.ColorStop* %309 to <2 x i64>*
  store <2 x i64> %307, <2 x i64>* %310, align 4, !alias.scope !108, !noalias !105
  %311 = or i64 %299, 4
  %312 = getelementptr %struct.ColorStop, %struct.ColorStop* %260, i64 %311
  %313 = getelementptr %struct.ColorStop, %struct.ColorStop* %261, i64 %311
  %314 = bitcast %struct.ColorStop* %313 to <2 x i64>*
  %315 = load <2 x i64>, <2 x i64>* %314, align 4, !alias.scope !105
  %316 = getelementptr %struct.ColorStop, %struct.ColorStop* %313, i64 2
  %317 = bitcast %struct.ColorStop* %316 to <2 x i64>*
  %318 = load <2 x i64>, <2 x i64>* %317, align 4, !alias.scope !105
  %319 = bitcast %struct.ColorStop* %312 to <2 x i64>*
  store <2 x i64> %315, <2 x i64>* %319, align 4, !alias.scope !108, !noalias !105
  %320 = getelementptr %struct.ColorStop, %struct.ColorStop* %312, i64 2
  %321 = bitcast %struct.ColorStop* %320 to <2 x i64>*
  store <2 x i64> %318, <2 x i64>* %321, align 4, !alias.scope !108, !noalias !105
  %322 = or i64 %299, 8
  %323 = getelementptr %struct.ColorStop, %struct.ColorStop* %260, i64 %322
  %324 = getelementptr %struct.ColorStop, %struct.ColorStop* %261, i64 %322
  %325 = bitcast %struct.ColorStop* %324 to <2 x i64>*
  %326 = load <2 x i64>, <2 x i64>* %325, align 4, !alias.scope !105
  %327 = getelementptr %struct.ColorStop, %struct.ColorStop* %324, i64 2
  %328 = bitcast %struct.ColorStop* %327 to <2 x i64>*
  %329 = load <2 x i64>, <2 x i64>* %328, align 4, !alias.scope !105
  %330 = bitcast %struct.ColorStop* %323 to <2 x i64>*
  store <2 x i64> %326, <2 x i64>* %330, align 4, !alias.scope !108, !noalias !105
  %331 = getelementptr %struct.ColorStop, %struct.ColorStop* %323, i64 2
  %332 = bitcast %struct.ColorStop* %331 to <2 x i64>*
  store <2 x i64> %329, <2 x i64>* %332, align 4, !alias.scope !108, !noalias !105
  %333 = or i64 %299, 12
  %334 = getelementptr %struct.ColorStop, %struct.ColorStop* %260, i64 %333
  %335 = getelementptr %struct.ColorStop, %struct.ColorStop* %261, i64 %333
  %336 = bitcast %struct.ColorStop* %335 to <2 x i64>*
  %337 = load <2 x i64>, <2 x i64>* %336, align 4, !alias.scope !105
  %338 = getelementptr %struct.ColorStop, %struct.ColorStop* %335, i64 2
  %339 = bitcast %struct.ColorStop* %338 to <2 x i64>*
  %340 = load <2 x i64>, <2 x i64>* %339, align 4, !alias.scope !105
  %341 = bitcast %struct.ColorStop* %334 to <2 x i64>*
  store <2 x i64> %337, <2 x i64>* %341, align 4, !alias.scope !108, !noalias !105
  %342 = getelementptr %struct.ColorStop, %struct.ColorStop* %334, i64 2
  %343 = bitcast %struct.ColorStop* %342 to <2 x i64>*
  store <2 x i64> %340, <2 x i64>* %343, align 4, !alias.scope !108, !noalias !105
  %344 = add i64 %299, 16
  %345 = add i64 %300, -4
  %346 = icmp eq i64 %345, 0
  br i1 %346, label %347, label %298, !llvm.loop !110

347:                                              ; preds = %298, %287
  %348 = phi i64 [ 0, %287 ], [ %344, %298 ]
  %349 = icmp eq i64 %294, 0
  br i1 %349, label %366, label %350

350:                                              ; preds = %347, %350
  %351 = phi i64 [ %363, %350 ], [ %348, %347 ]
  %352 = phi i64 [ %364, %350 ], [ %294, %347 ]
  %353 = getelementptr %struct.ColorStop, %struct.ColorStop* %260, i64 %351
  %354 = getelementptr %struct.ColorStop, %struct.ColorStop* %261, i64 %351
  %355 = bitcast %struct.ColorStop* %354 to <2 x i64>*
  %356 = load <2 x i64>, <2 x i64>* %355, align 4, !alias.scope !105
  %357 = getelementptr %struct.ColorStop, %struct.ColorStop* %354, i64 2
  %358 = bitcast %struct.ColorStop* %357 to <2 x i64>*
  %359 = load <2 x i64>, <2 x i64>* %358, align 4, !alias.scope !105
  %360 = bitcast %struct.ColorStop* %353 to <2 x i64>*
  store <2 x i64> %356, <2 x i64>* %360, align 4, !alias.scope !108, !noalias !105
  %361 = getelementptr %struct.ColorStop, %struct.ColorStop* %353, i64 2
  %362 = bitcast %struct.ColorStop* %361 to <2 x i64>*
  store <2 x i64> %359, <2 x i64>* %362, align 4, !alias.scope !108, !noalias !105
  %363 = add i64 %351, 4
  %364 = add i64 %352, -1
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %366, label %350, !llvm.loop !111

366:                                              ; preds = %350, %347
  %367 = icmp eq i64 %273, %288
  br i1 %367, label %460, label %368

368:                                              ; preds = %366, %275, %267
  %369 = phi %struct.ColorStop* [ %260, %275 ], [ %260, %267 ], [ %289, %366 ]
  %370 = phi %struct.ColorStop* [ %261, %275 ], [ %261, %267 ], [ %290, %366 ]
  %371 = ptrtoint %struct.ColorStop* %370 to i64
  %372 = add nsw i64 %80, -1
  %373 = getelementptr %struct.ColorStop, %struct.ColorStop* %0, i64 %372, i32 0
  %374 = ptrtoint float* %373 to i64
  %375 = sub i64 %374, %371
  %376 = lshr i64 %375, 3
  %377 = add nuw nsw i64 %376, 1
  %378 = and i64 %377, 7
  %379 = icmp eq i64 %378, 0
  br i1 %379, label %391, label %380

380:                                              ; preds = %368, %380
  %381 = phi %struct.ColorStop* [ %388, %380 ], [ %369, %368 ]
  %382 = phi %struct.ColorStop* [ %387, %380 ], [ %370, %368 ]
  %383 = phi i64 [ %389, %380 ], [ %378, %368 ]
  %384 = bitcast %struct.ColorStop* %382 to i64*
  %385 = bitcast %struct.ColorStop* %381 to i64*
  %386 = load i64, i64* %384, align 4
  store i64 %386, i64* %385, align 4
  %387 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %382, i64 1
  %388 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %381, i64 1
  %389 = add i64 %383, -1
  %390 = icmp eq i64 %389, 0
  br i1 %390, label %391, label %380, !llvm.loop !112

391:                                              ; preds = %380, %368
  %392 = phi %struct.ColorStop* [ %369, %368 ], [ %388, %380 ]
  %393 = phi %struct.ColorStop* [ %370, %368 ], [ %387, %380 ]
  %394 = icmp ult i64 %375, 56
  br i1 %394, label %460, label %395

395:                                              ; preds = %391, %395
  %396 = phi %struct.ColorStop* [ %437, %395 ], [ %392, %391 ]
  %397 = phi %struct.ColorStop* [ %436, %395 ], [ %393, %391 ]
  %398 = bitcast %struct.ColorStop* %397 to i64*
  %399 = bitcast %struct.ColorStop* %396 to i64*
  %400 = load i64, i64* %398, align 4
  store i64 %400, i64* %399, align 4
  %401 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 1
  %402 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %396, i64 1
  %403 = bitcast %struct.ColorStop* %401 to i64*
  %404 = bitcast %struct.ColorStop* %402 to i64*
  %405 = load i64, i64* %403, align 4
  store i64 %405, i64* %404, align 4
  %406 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 2
  %407 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %396, i64 2
  %408 = bitcast %struct.ColorStop* %406 to i64*
  %409 = bitcast %struct.ColorStop* %407 to i64*
  %410 = load i64, i64* %408, align 4
  store i64 %410, i64* %409, align 4
  %411 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 3
  %412 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %396, i64 3
  %413 = bitcast %struct.ColorStop* %411 to i64*
  %414 = bitcast %struct.ColorStop* %412 to i64*
  %415 = load i64, i64* %413, align 4
  store i64 %415, i64* %414, align 4
  %416 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 4
  %417 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %396, i64 4
  %418 = bitcast %struct.ColorStop* %416 to i64*
  %419 = bitcast %struct.ColorStop* %417 to i64*
  %420 = load i64, i64* %418, align 4
  store i64 %420, i64* %419, align 4
  %421 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 5
  %422 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %396, i64 5
  %423 = bitcast %struct.ColorStop* %421 to i64*
  %424 = bitcast %struct.ColorStop* %422 to i64*
  %425 = load i64, i64* %423, align 4
  store i64 %425, i64* %424, align 4
  %426 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 6
  %427 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %396, i64 6
  %428 = bitcast %struct.ColorStop* %426 to i64*
  %429 = bitcast %struct.ColorStop* %427 to i64*
  %430 = load i64, i64* %428, align 4
  store i64 %430, i64* %429, align 4
  %431 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 7
  %432 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %396, i64 7
  %433 = bitcast %struct.ColorStop* %431 to i64*
  %434 = bitcast %struct.ColorStop* %432 to i64*
  %435 = load i64, i64* %433, align 4
  store i64 %435, i64* %434, align 4
  %436 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %397, i64 8
  %437 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %396, i64 8
  %438 = icmp eq %struct.ColorStop* %436, %81
  br i1 %438, label %460, label %395, !llvm.loop !113

439:                                              ; preds = %259
  %440 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %262, i64 0, i32 0
  %441 = load float, float* %440, align 4
  %442 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %261, i64 0, i32 0
  %443 = load float, float* %442, align 4
  %444 = fcmp olt float %441, %443
  br i1 %444, label %445, label %450

445:                                              ; preds = %439
  %446 = bitcast %struct.ColorStop* %262 to i64*
  %447 = bitcast %struct.ColorStop* %260 to i64*
  %448 = load i64, i64* %446, align 4
  store i64 %448, i64* %447, align 4
  %449 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %262, i64 1
  br label %455

450:                                              ; preds = %439
  %451 = bitcast %struct.ColorStop* %261 to i64*
  %452 = bitcast %struct.ColorStop* %260 to i64*
  %453 = load i64, i64* %451, align 4
  store i64 %453, i64* %452, align 4
  %454 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %261, i64 1
  br label %455

455:                                              ; preds = %450, %445
  %456 = phi %struct.ColorStop* [ %449, %445 ], [ %262, %450 ]
  %457 = phi %struct.ColorStop* [ %261, %445 ], [ %454, %450 ]
  %458 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %260, i64 1
  %459 = icmp eq %struct.ColorStop* %457, %81
  br i1 %459, label %85, label %259

460:                                              ; preds = %391, %395, %211, %215, %73, %366, %187, %264, %85, %37, %35, %17, %25, %5, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__115__inplace_mergeIRZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNS_6vectorIfNS_9allocatorIfEEEERNSD_IjNSE_IjEEEEEUlRKZZNS1_24colrv1_configure_skpaintES3_S6_S7_S9_ENKSA_clESC_SH_SK_E9ColorStopSN_E_NS_11__wrap_iterIPSL_EEEEvT0_ST_ST_T_NS_15iterator_traitsIST_E15difference_typeESX_PNSW_10value_typeEl"(%struct.ColorStop*, %struct.ColorStop*, %struct.ColorStop*, %class.anon.61* readnone dereferenceable(1), i64, i64, %struct.ColorStop*, i64) unnamed_addr #1 {
  %9 = ptrtoint %struct.ColorStop* %6 to i64
  %10 = icmp eq i64 %5, 0
  br i1 %10, label %894, label %11

11:                                               ; preds = %8
  %12 = ptrtoint %struct.ColorStop* %1 to i64
  %13 = ptrtoint %struct.ColorStop* %0 to i64
  br label %14

14:                                               ; preds = %11, %887
  %15 = phi %struct.ColorStop* [ %892, %887 ], [ %2, %11 ]
  %16 = phi i64 [ %891, %887 ], [ %4, %11 ]
  %17 = phi i64 [ %890, %887 ], [ %5, %11 ]
  %18 = phi i64 [ %889, %887 ], [ %12, %11 ]
  %19 = phi i64 [ %888, %887 ], [ %13, %11 ]
  %20 = icmp sgt i64 %16, %7
  %21 = icmp sgt i64 %17, %7
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %29

23:                                               ; preds = %14
  %24 = icmp eq i64 %16, 0
  br i1 %24, label %894, label %25

25:                                               ; preds = %23
  %26 = inttoptr i64 %18 to %struct.ColorStop*
  %27 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %26, i64 0, i32 0
  %28 = load float, float* %27, align 4
  br label %616

29:                                               ; preds = %14
  %30 = inttoptr i64 %19 to %struct.ColorStop*
  %31 = inttoptr i64 %19 to i8*
  %32 = inttoptr i64 %18 to %struct.ColorStop*
  %33 = inttoptr i64 %18 to i8*
  %34 = icmp sgt i64 %16, %17
  br i1 %34, label %168, label %35

35:                                               ; preds = %29
  %36 = icmp eq %struct.ColorStop* %30, %32
  br i1 %36, label %894, label %37

37:                                               ; preds = %35
  %38 = getelementptr %struct.ColorStop, %struct.ColorStop* %32, i64 -1, i32 0
  %39 = bitcast float* %38 to i8*
  %40 = sub i64 0, %19
  %41 = getelementptr i8, i8* %39, i64 %40
  %42 = ptrtoint i8* %41 to i64
  %43 = lshr i64 %42, 3
  %44 = add nuw nsw i64 %43, 1
  %45 = icmp ult i64 %44, 4
  br i1 %45, label %46, label %73

46:                                               ; preds = %166, %73, %37
  %47 = phi %struct.ColorStop* [ %6, %73 ], [ %6, %37 ], [ %89, %166 ]
  %48 = phi %struct.ColorStop* [ %30, %73 ], [ %30, %37 ], [ %90, %166 ]
  %49 = ptrtoint %struct.ColorStop* %48 to i64
  %50 = getelementptr %struct.ColorStop, %struct.ColorStop* %32, i64 -1, i32 0
  %51 = ptrtoint float* %50 to i64
  %52 = sub i64 %51, %49
  %53 = lshr i64 %52, 3
  %54 = add nuw nsw i64 %53, 1
  %55 = and i64 %54, 7
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %68, label %57

57:                                               ; preds = %46, %57
  %58 = phi %struct.ColorStop* [ %65, %57 ], [ %47, %46 ]
  %59 = phi %struct.ColorStop* [ %64, %57 ], [ %48, %46 ]
  %60 = phi i64 [ %66, %57 ], [ %55, %46 ]
  %61 = bitcast %struct.ColorStop* %59 to i64*
  %62 = bitcast %struct.ColorStop* %58 to i64*
  %63 = load i64, i64* %61, align 4
  store i64 %63, i64* %62, align 4
  %64 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %59, i64 1
  %65 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %58, i64 1
  %66 = add i64 %60, -1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %57, !llvm.loop !114

68:                                               ; preds = %57, %46
  %69 = phi %struct.ColorStop* [ undef, %46 ], [ %65, %57 ]
  %70 = phi %struct.ColorStop* [ %47, %46 ], [ %65, %57 ]
  %71 = phi %struct.ColorStop* [ %48, %46 ], [ %64, %57 ]
  %72 = icmp ult i64 %52, 56
  br i1 %72, label %301, label %338

73:                                               ; preds = %37
  %74 = getelementptr %struct.ColorStop, %struct.ColorStop* %32, i64 -1, i32 0
  %75 = bitcast float* %74 to i8*
  %76 = sub i64 0, %19
  %77 = getelementptr i8, i8* %75, i64 %76
  %78 = ptrtoint i8* %77 to i64
  %79 = lshr i64 %78, 3
  %80 = add nuw nsw i64 %79, 1
  %81 = getelementptr %struct.ColorStop, %struct.ColorStop* %6, i64 %80
  %82 = bitcast %struct.ColorStop* %81 to i8*
  %83 = getelementptr %struct.ColorStop, %struct.ColorStop* %30, i64 %80
  %84 = icmp ugt %struct.ColorStop* %83, %6
  %85 = icmp ult i8* %31, %82
  %86 = and i1 %84, %85
  br i1 %86, label %46, label %87

87:                                               ; preds = %73
  %88 = and i64 %44, 4611686018427387900
  %89 = getelementptr %struct.ColorStop, %struct.ColorStop* %6, i64 %88
  %90 = getelementptr %struct.ColorStop, %struct.ColorStop* %30, i64 %88
  %91 = add nsw i64 %88, -4
  %92 = lshr exact i64 %91, 2
  %93 = add nuw nsw i64 %92, 1
  %94 = and i64 %93, 3
  %95 = icmp ult i64 %91, 12
  br i1 %95, label %147, label %96

96:                                               ; preds = %87
  %97 = sub nsw i64 %93, %94
  br label %98

98:                                               ; preds = %98, %96
  %99 = phi i64 [ 0, %96 ], [ %144, %98 ]
  %100 = phi i64 [ %97, %96 ], [ %145, %98 ]
  %101 = getelementptr %struct.ColorStop, %struct.ColorStop* %6, i64 %99
  %102 = getelementptr %struct.ColorStop, %struct.ColorStop* %30, i64 %99
  %103 = bitcast %struct.ColorStop* %102 to <2 x i64>*
  %104 = load <2 x i64>, <2 x i64>* %103, align 4, !alias.scope !115
  %105 = getelementptr %struct.ColorStop, %struct.ColorStop* %102, i64 2
  %106 = bitcast %struct.ColorStop* %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 4, !alias.scope !115
  %108 = bitcast %struct.ColorStop* %101 to <2 x i64>*
  store <2 x i64> %104, <2 x i64>* %108, align 4, !alias.scope !118, !noalias !115
  %109 = getelementptr %struct.ColorStop, %struct.ColorStop* %101, i64 2
  %110 = bitcast %struct.ColorStop* %109 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %110, align 4, !alias.scope !118, !noalias !115
  %111 = or i64 %99, 4
  %112 = getelementptr %struct.ColorStop, %struct.ColorStop* %6, i64 %111
  %113 = getelementptr %struct.ColorStop, %struct.ColorStop* %30, i64 %111
  %114 = bitcast %struct.ColorStop* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 4, !alias.scope !115
  %116 = getelementptr %struct.ColorStop, %struct.ColorStop* %113, i64 2
  %117 = bitcast %struct.ColorStop* %116 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 4, !alias.scope !115
  %119 = bitcast %struct.ColorStop* %112 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %119, align 4, !alias.scope !118, !noalias !115
  %120 = getelementptr %struct.ColorStop, %struct.ColorStop* %112, i64 2
  %121 = bitcast %struct.ColorStop* %120 to <2 x i64>*
  store <2 x i64> %118, <2 x i64>* %121, align 4, !alias.scope !118, !noalias !115
  %122 = or i64 %99, 8
  %123 = getelementptr %struct.ColorStop, %struct.ColorStop* %6, i64 %122
  %124 = getelementptr %struct.ColorStop, %struct.ColorStop* %30, i64 %122
  %125 = bitcast %struct.ColorStop* %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 4, !alias.scope !115
  %127 = getelementptr %struct.ColorStop, %struct.ColorStop* %124, i64 2
  %128 = bitcast %struct.ColorStop* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 4, !alias.scope !115
  %130 = bitcast %struct.ColorStop* %123 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %130, align 4, !alias.scope !118, !noalias !115
  %131 = getelementptr %struct.ColorStop, %struct.ColorStop* %123, i64 2
  %132 = bitcast %struct.ColorStop* %131 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %132, align 4, !alias.scope !118, !noalias !115
  %133 = or i64 %99, 12
  %134 = getelementptr %struct.ColorStop, %struct.ColorStop* %6, i64 %133
  %135 = getelementptr %struct.ColorStop, %struct.ColorStop* %30, i64 %133
  %136 = bitcast %struct.ColorStop* %135 to <2 x i64>*
  %137 = load <2 x i64>, <2 x i64>* %136, align 4, !alias.scope !115
  %138 = getelementptr %struct.ColorStop, %struct.ColorStop* %135, i64 2
  %139 = bitcast %struct.ColorStop* %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 4, !alias.scope !115
  %141 = bitcast %struct.ColorStop* %134 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %141, align 4, !alias.scope !118, !noalias !115
  %142 = getelementptr %struct.ColorStop, %struct.ColorStop* %134, i64 2
  %143 = bitcast %struct.ColorStop* %142 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %143, align 4, !alias.scope !118, !noalias !115
  %144 = add i64 %99, 16
  %145 = add i64 %100, -4
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %147, label %98, !llvm.loop !120

147:                                              ; preds = %98, %87
  %148 = phi i64 [ 0, %87 ], [ %144, %98 ]
  %149 = icmp eq i64 %94, 0
  br i1 %149, label %166, label %150

150:                                              ; preds = %147, %150
  %151 = phi i64 [ %163, %150 ], [ %148, %147 ]
  %152 = phi i64 [ %164, %150 ], [ %94, %147 ]
  %153 = getelementptr %struct.ColorStop, %struct.ColorStop* %6, i64 %151
  %154 = getelementptr %struct.ColorStop, %struct.ColorStop* %30, i64 %151
  %155 = bitcast %struct.ColorStop* %154 to <2 x i64>*
  %156 = load <2 x i64>, <2 x i64>* %155, align 4, !alias.scope !115
  %157 = getelementptr %struct.ColorStop, %struct.ColorStop* %154, i64 2
  %158 = bitcast %struct.ColorStop* %157 to <2 x i64>*
  %159 = load <2 x i64>, <2 x i64>* %158, align 4, !alias.scope !115
  %160 = bitcast %struct.ColorStop* %153 to <2 x i64>*
  store <2 x i64> %156, <2 x i64>* %160, align 4, !alias.scope !118, !noalias !115
  %161 = getelementptr %struct.ColorStop, %struct.ColorStop* %153, i64 2
  %162 = bitcast %struct.ColorStop* %161 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %162, align 4, !alias.scope !118, !noalias !115
  %163 = add i64 %151, 4
  %164 = add i64 %152, -1
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %150, !llvm.loop !121

166:                                              ; preds = %150, %147
  %167 = icmp eq i64 %44, %88
  br i1 %167, label %301, label %46

168:                                              ; preds = %29
  %169 = icmp eq %struct.ColorStop* %15, %32
  br i1 %169, label %894, label %170

170:                                              ; preds = %168
  %171 = getelementptr %struct.ColorStop, %struct.ColorStop* %15, i64 -1, i32 0
  %172 = bitcast float* %171 to i8*
  %173 = sub i64 0, %18
  %174 = getelementptr i8, i8* %172, i64 %173
  %175 = ptrtoint i8* %174 to i64
  %176 = lshr i64 %175, 3
  %177 = add nuw nsw i64 %176, 1
  %178 = icmp ult i64 %177, 4
  br i1 %178, label %179, label %206

179:                                              ; preds = %299, %206, %170
  %180 = phi %struct.ColorStop* [ %6, %206 ], [ %6, %170 ], [ %222, %299 ]
  %181 = phi %struct.ColorStop* [ %32, %206 ], [ %32, %170 ], [ %223, %299 ]
  %182 = ptrtoint %struct.ColorStop* %181 to i64
  %183 = getelementptr %struct.ColorStop, %struct.ColorStop* %15, i64 -1, i32 0
  %184 = ptrtoint float* %183 to i64
  %185 = sub i64 %184, %182
  %186 = lshr i64 %185, 3
  %187 = add nuw nsw i64 %186, 1
  %188 = and i64 %187, 7
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %201, label %190

190:                                              ; preds = %179, %190
  %191 = phi %struct.ColorStop* [ %198, %190 ], [ %180, %179 ]
  %192 = phi %struct.ColorStop* [ %197, %190 ], [ %181, %179 ]
  %193 = phi i64 [ %199, %190 ], [ %188, %179 ]
  %194 = bitcast %struct.ColorStop* %192 to i64*
  %195 = bitcast %struct.ColorStop* %191 to i64*
  %196 = load i64, i64* %194, align 4
  store i64 %196, i64* %195, align 4
  %197 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %192, i64 1
  %198 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %191, i64 1
  %199 = add i64 %193, -1
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %190, !llvm.loop !122

201:                                              ; preds = %190, %179
  %202 = phi %struct.ColorStop* [ undef, %179 ], [ %198, %190 ]
  %203 = phi %struct.ColorStop* [ %180, %179 ], [ %198, %190 ]
  %204 = phi %struct.ColorStop* [ %181, %179 ], [ %197, %190 ]
  %205 = icmp ult i64 %185, 56
  br i1 %205, label %382, label %572

206:                                              ; preds = %170
  %207 = getelementptr %struct.ColorStop, %struct.ColorStop* %15, i64 -1, i32 0
  %208 = bitcast float* %207 to i8*
  %209 = sub i64 0, %18
  %210 = getelementptr i8, i8* %208, i64 %209
  %211 = ptrtoint i8* %210 to i64
  %212 = lshr i64 %211, 3
  %213 = add nuw nsw i64 %212, 1
  %214 = getelementptr %struct.ColorStop, %struct.ColorStop* %6, i64 %213
  %215 = bitcast %struct.ColorStop* %214 to i8*
  %216 = getelementptr %struct.ColorStop, %struct.ColorStop* %32, i64 %213
  %217 = icmp ugt %struct.ColorStop* %216, %6
  %218 = icmp ult i8* %33, %215
  %219 = and i1 %217, %218
  br i1 %219, label %179, label %220

220:                                              ; preds = %206
  %221 = and i64 %177, 4611686018427387900
  %222 = getelementptr %struct.ColorStop, %struct.ColorStop* %6, i64 %221
  %223 = getelementptr %struct.ColorStop, %struct.ColorStop* %32, i64 %221
  %224 = add nsw i64 %221, -4
  %225 = lshr exact i64 %224, 2
  %226 = add nuw nsw i64 %225, 1
  %227 = and i64 %226, 3
  %228 = icmp ult i64 %224, 12
  br i1 %228, label %280, label %229

229:                                              ; preds = %220
  %230 = sub nsw i64 %226, %227
  br label %231

231:                                              ; preds = %231, %229
  %232 = phi i64 [ 0, %229 ], [ %277, %231 ]
  %233 = phi i64 [ %230, %229 ], [ %278, %231 ]
  %234 = getelementptr %struct.ColorStop, %struct.ColorStop* %6, i64 %232
  %235 = getelementptr %struct.ColorStop, %struct.ColorStop* %32, i64 %232
  %236 = bitcast %struct.ColorStop* %235 to <2 x i64>*
  %237 = load <2 x i64>, <2 x i64>* %236, align 4, !alias.scope !123
  %238 = getelementptr %struct.ColorStop, %struct.ColorStop* %235, i64 2
  %239 = bitcast %struct.ColorStop* %238 to <2 x i64>*
  %240 = load <2 x i64>, <2 x i64>* %239, align 4, !alias.scope !123
  %241 = bitcast %struct.ColorStop* %234 to <2 x i64>*
  store <2 x i64> %237, <2 x i64>* %241, align 4, !alias.scope !126, !noalias !123
  %242 = getelementptr %struct.ColorStop, %struct.ColorStop* %234, i64 2
  %243 = bitcast %struct.ColorStop* %242 to <2 x i64>*
  store <2 x i64> %240, <2 x i64>* %243, align 4, !alias.scope !126, !noalias !123
  %244 = or i64 %232, 4
  %245 = getelementptr %struct.ColorStop, %struct.ColorStop* %6, i64 %244
  %246 = getelementptr %struct.ColorStop, %struct.ColorStop* %32, i64 %244
  %247 = bitcast %struct.ColorStop* %246 to <2 x i64>*
  %248 = load <2 x i64>, <2 x i64>* %247, align 4, !alias.scope !123
  %249 = getelementptr %struct.ColorStop, %struct.ColorStop* %246, i64 2
  %250 = bitcast %struct.ColorStop* %249 to <2 x i64>*
  %251 = load <2 x i64>, <2 x i64>* %250, align 4, !alias.scope !123
  %252 = bitcast %struct.ColorStop* %245 to <2 x i64>*
  store <2 x i64> %248, <2 x i64>* %252, align 4, !alias.scope !126, !noalias !123
  %253 = getelementptr %struct.ColorStop, %struct.ColorStop* %245, i64 2
  %254 = bitcast %struct.ColorStop* %253 to <2 x i64>*
  store <2 x i64> %251, <2 x i64>* %254, align 4, !alias.scope !126, !noalias !123
  %255 = or i64 %232, 8
  %256 = getelementptr %struct.ColorStop, %struct.ColorStop* %6, i64 %255
  %257 = getelementptr %struct.ColorStop, %struct.ColorStop* %32, i64 %255
  %258 = bitcast %struct.ColorStop* %257 to <2 x i64>*
  %259 = load <2 x i64>, <2 x i64>* %258, align 4, !alias.scope !123
  %260 = getelementptr %struct.ColorStop, %struct.ColorStop* %257, i64 2
  %261 = bitcast %struct.ColorStop* %260 to <2 x i64>*
  %262 = load <2 x i64>, <2 x i64>* %261, align 4, !alias.scope !123
  %263 = bitcast %struct.ColorStop* %256 to <2 x i64>*
  store <2 x i64> %259, <2 x i64>* %263, align 4, !alias.scope !126, !noalias !123
  %264 = getelementptr %struct.ColorStop, %struct.ColorStop* %256, i64 2
  %265 = bitcast %struct.ColorStop* %264 to <2 x i64>*
  store <2 x i64> %262, <2 x i64>* %265, align 4, !alias.scope !126, !noalias !123
  %266 = or i64 %232, 12
  %267 = getelementptr %struct.ColorStop, %struct.ColorStop* %6, i64 %266
  %268 = getelementptr %struct.ColorStop, %struct.ColorStop* %32, i64 %266
  %269 = bitcast %struct.ColorStop* %268 to <2 x i64>*
  %270 = load <2 x i64>, <2 x i64>* %269, align 4, !alias.scope !123
  %271 = getelementptr %struct.ColorStop, %struct.ColorStop* %268, i64 2
  %272 = bitcast %struct.ColorStop* %271 to <2 x i64>*
  %273 = load <2 x i64>, <2 x i64>* %272, align 4, !alias.scope !123
  %274 = bitcast %struct.ColorStop* %267 to <2 x i64>*
  store <2 x i64> %270, <2 x i64>* %274, align 4, !alias.scope !126, !noalias !123
  %275 = getelementptr %struct.ColorStop, %struct.ColorStop* %267, i64 2
  %276 = bitcast %struct.ColorStop* %275 to <2 x i64>*
  store <2 x i64> %273, <2 x i64>* %276, align 4, !alias.scope !126, !noalias !123
  %277 = add i64 %232, 16
  %278 = add i64 %233, -4
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %231, !llvm.loop !128

280:                                              ; preds = %231, %220
  %281 = phi i64 [ 0, %220 ], [ %277, %231 ]
  %282 = icmp eq i64 %227, 0
  br i1 %282, label %299, label %283

283:                                              ; preds = %280, %283
  %284 = phi i64 [ %296, %283 ], [ %281, %280 ]
  %285 = phi i64 [ %297, %283 ], [ %227, %280 ]
  %286 = getelementptr %struct.ColorStop, %struct.ColorStop* %6, i64 %284
  %287 = getelementptr %struct.ColorStop, %struct.ColorStop* %32, i64 %284
  %288 = bitcast %struct.ColorStop* %287 to <2 x i64>*
  %289 = load <2 x i64>, <2 x i64>* %288, align 4, !alias.scope !123
  %290 = getelementptr %struct.ColorStop, %struct.ColorStop* %287, i64 2
  %291 = bitcast %struct.ColorStop* %290 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 4, !alias.scope !123
  %293 = bitcast %struct.ColorStop* %286 to <2 x i64>*
  store <2 x i64> %289, <2 x i64>* %293, align 4, !alias.scope !126, !noalias !123
  %294 = getelementptr %struct.ColorStop, %struct.ColorStop* %286, i64 2
  %295 = bitcast %struct.ColorStop* %294 to <2 x i64>*
  store <2 x i64> %292, <2 x i64>* %295, align 4, !alias.scope !126, !noalias !123
  %296 = add i64 %284, 4
  %297 = add i64 %285, -1
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %299, label %283, !llvm.loop !129

299:                                              ; preds = %283, %280
  %300 = icmp eq i64 %177, %221
  br i1 %300, label %382, label %179

301:                                              ; preds = %68, %338, %166
  %302 = phi %struct.ColorStop* [ %89, %166 ], [ %69, %68 ], [ %380, %338 ]
  %303 = icmp eq %struct.ColorStop* %302, %6
  br i1 %303, label %894, label %304

304:                                              ; preds = %301, %333
  %305 = phi %struct.ColorStop* [ %335, %333 ], [ %6, %301 ]
  %306 = phi %struct.ColorStop* [ %336, %333 ], [ %30, %301 ]
  %307 = phi %struct.ColorStop* [ %334, %333 ], [ %32, %301 ]
  %308 = icmp eq %struct.ColorStop* %307, %15
  br i1 %308, label %309, label %317

309:                                              ; preds = %304
  %310 = ptrtoint %struct.ColorStop* %302 to i64
  %311 = ptrtoint %struct.ColorStop* %305 to i64
  %312 = sub i64 %310, %311
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %894, label %314

314:                                              ; preds = %309
  %315 = bitcast %struct.ColorStop* %306 to i8*
  %316 = bitcast %struct.ColorStop* %305 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %315, i8* align 4 %316, i64 %312, i1 false) #14
  br label %894

317:                                              ; preds = %304
  %318 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %307, i64 0, i32 0
  %319 = load float, float* %318, align 4
  %320 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %305, i64 0, i32 0
  %321 = load float, float* %320, align 4
  %322 = fcmp olt float %319, %321
  br i1 %322, label %323, label %328

323:                                              ; preds = %317
  %324 = bitcast %struct.ColorStop* %307 to i64*
  %325 = bitcast %struct.ColorStop* %306 to i64*
  %326 = load i64, i64* %324, align 4
  store i64 %326, i64* %325, align 4
  %327 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %307, i64 1
  br label %333

328:                                              ; preds = %317
  %329 = bitcast %struct.ColorStop* %305 to i64*
  %330 = bitcast %struct.ColorStop* %306 to i64*
  %331 = load i64, i64* %329, align 4
  store i64 %331, i64* %330, align 4
  %332 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %305, i64 1
  br label %333

333:                                              ; preds = %328, %323
  %334 = phi %struct.ColorStop* [ %327, %323 ], [ %307, %328 ]
  %335 = phi %struct.ColorStop* [ %305, %323 ], [ %332, %328 ]
  %336 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %306, i64 1
  %337 = icmp eq %struct.ColorStop* %335, %302
  br i1 %337, label %894, label %304

338:                                              ; preds = %68, %338
  %339 = phi %struct.ColorStop* [ %380, %338 ], [ %70, %68 ]
  %340 = phi %struct.ColorStop* [ %379, %338 ], [ %71, %68 ]
  %341 = bitcast %struct.ColorStop* %340 to i64*
  %342 = bitcast %struct.ColorStop* %339 to i64*
  %343 = load i64, i64* %341, align 4
  store i64 %343, i64* %342, align 4
  %344 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %340, i64 1
  %345 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %339, i64 1
  %346 = bitcast %struct.ColorStop* %344 to i64*
  %347 = bitcast %struct.ColorStop* %345 to i64*
  %348 = load i64, i64* %346, align 4
  store i64 %348, i64* %347, align 4
  %349 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %340, i64 2
  %350 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %339, i64 2
  %351 = bitcast %struct.ColorStop* %349 to i64*
  %352 = bitcast %struct.ColorStop* %350 to i64*
  %353 = load i64, i64* %351, align 4
  store i64 %353, i64* %352, align 4
  %354 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %340, i64 3
  %355 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %339, i64 3
  %356 = bitcast %struct.ColorStop* %354 to i64*
  %357 = bitcast %struct.ColorStop* %355 to i64*
  %358 = load i64, i64* %356, align 4
  store i64 %358, i64* %357, align 4
  %359 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %340, i64 4
  %360 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %339, i64 4
  %361 = bitcast %struct.ColorStop* %359 to i64*
  %362 = bitcast %struct.ColorStop* %360 to i64*
  %363 = load i64, i64* %361, align 4
  store i64 %363, i64* %362, align 4
  %364 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %340, i64 5
  %365 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %339, i64 5
  %366 = bitcast %struct.ColorStop* %364 to i64*
  %367 = bitcast %struct.ColorStop* %365 to i64*
  %368 = load i64, i64* %366, align 4
  store i64 %368, i64* %367, align 4
  %369 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %340, i64 6
  %370 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %339, i64 6
  %371 = bitcast %struct.ColorStop* %369 to i64*
  %372 = bitcast %struct.ColorStop* %370 to i64*
  %373 = load i64, i64* %371, align 4
  store i64 %373, i64* %372, align 4
  %374 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %340, i64 7
  %375 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %339, i64 7
  %376 = bitcast %struct.ColorStop* %374 to i64*
  %377 = bitcast %struct.ColorStop* %375 to i64*
  %378 = load i64, i64* %376, align 4
  store i64 %378, i64* %377, align 4
  %379 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %340, i64 8
  %380 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %339, i64 8
  %381 = icmp eq %struct.ColorStop* %379, %32
  br i1 %381, label %301, label %338, !llvm.loop !130

382:                                              ; preds = %201, %572, %299
  %383 = phi %struct.ColorStop* [ %222, %299 ], [ %202, %201 ], [ %614, %572 ]
  %384 = icmp eq %struct.ColorStop* %383, %6
  br i1 %384, label %894, label %385

385:                                              ; preds = %382, %556
  %386 = phi %struct.ColorStop* [ %564, %556 ], [ %15, %382 ]
  %387 = phi %struct.ColorStop* [ %567, %556 ], [ %383, %382 ]
  %388 = phi %struct.ColorStop* [ %566, %556 ], [ %32, %382 ]
  %389 = icmp eq %struct.ColorStop* %388, %30
  br i1 %389, label %390, label %556

390:                                              ; preds = %385
  %391 = getelementptr %struct.ColorStop, %struct.ColorStop* %387, i64 -1, i32 0
  %392 = ptrtoint float* %391 to i64
  %393 = sub i64 %392, %9
  %394 = lshr i64 %393, 3
  %395 = add nuw nsw i64 %394, 1
  %396 = icmp ult i64 %395, 4
  br i1 %396, label %487, label %397

397:                                              ; preds = %390
  %398 = getelementptr %struct.ColorStop, %struct.ColorStop* %387, i64 -1, i32 0
  %399 = ptrtoint float* %398 to i64
  %400 = sub i64 %399, %9
  %401 = lshr i64 %400, 3
  %402 = xor i64 %401, -1
  %403 = getelementptr %struct.ColorStop, %struct.ColorStop* %386, i64 %402
  %404 = getelementptr %struct.ColorStop, %struct.ColorStop* %387, i64 %402
  %405 = icmp ult %struct.ColorStop* %403, %387
  %406 = icmp ult %struct.ColorStop* %404, %386
  %407 = and i1 %405, %406
  br i1 %407, label %487, label %408

408:                                              ; preds = %397
  %409 = and i64 %395, 4611686018427387900
  %410 = sub nsw i64 0, %409
  %411 = getelementptr %struct.ColorStop, %struct.ColorStop* %387, i64 %410
  %412 = sub nsw i64 0, %409
  %413 = getelementptr %struct.ColorStop, %struct.ColorStop* %386, i64 %412
  %414 = add nsw i64 %409, -4
  %415 = lshr exact i64 %414, 2
  %416 = add nuw nsw i64 %415, 1
  %417 = and i64 %416, 1
  %418 = icmp eq i64 %414, 0
  br i1 %418, label %465, label %419

419:                                              ; preds = %408
  %420 = sub nuw nsw i64 %416, %417
  %421 = getelementptr %struct.ColorStop, %struct.ColorStop* %387, i64 -1
  %422 = getelementptr %struct.ColorStop, %struct.ColorStop* %386, i64 -1
  %423 = getelementptr %struct.ColorStop, %struct.ColorStop* %387, i64 -1
  %424 = getelementptr %struct.ColorStop, %struct.ColorStop* %386, i64 -1
  br label %425

425:                                              ; preds = %425, %419
  %426 = phi i64 [ 0, %419 ], [ %460, %425 ]
  %427 = phi i64 [ %420, %419 ], [ %461, %425 ]
  %428 = sub i64 0, %426
  %429 = sub i64 0, %426
  %430 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %421, i64 %428
  %431 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %422, i64 %429
  %432 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %430, i64 -1
  %433 = bitcast %struct.ColorStop* %432 to <2 x i64>*
  %434 = load <2 x i64>, <2 x i64>* %433, align 4, !alias.scope !131
  %435 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %430, i64 -2
  %436 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %435, i64 -1
  %437 = bitcast %struct.ColorStop* %436 to <2 x i64>*
  %438 = load <2 x i64>, <2 x i64>* %437, align 4, !alias.scope !131
  %439 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %431, i64 -1
  %440 = bitcast %struct.ColorStop* %439 to <2 x i64>*
  store <2 x i64> %434, <2 x i64>* %440, align 4, !alias.scope !134, !noalias !131
  %441 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %431, i64 -2
  %442 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %441, i64 -1
  %443 = bitcast %struct.ColorStop* %442 to <2 x i64>*
  store <2 x i64> %438, <2 x i64>* %443, align 4, !alias.scope !134, !noalias !131
  %444 = sub nuw nsw i64 -4, %426
  %445 = sub nuw nsw i64 -4, %426
  %446 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %423, i64 %444
  %447 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %424, i64 %445
  %448 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %446, i64 -1
  %449 = bitcast %struct.ColorStop* %448 to <2 x i64>*
  %450 = load <2 x i64>, <2 x i64>* %449, align 4, !alias.scope !131
  %451 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %446, i64 -2
  %452 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %451, i64 -1
  %453 = bitcast %struct.ColorStop* %452 to <2 x i64>*
  %454 = load <2 x i64>, <2 x i64>* %453, align 4, !alias.scope !131
  %455 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %447, i64 -1
  %456 = bitcast %struct.ColorStop* %455 to <2 x i64>*
  store <2 x i64> %450, <2 x i64>* %456, align 4, !alias.scope !134, !noalias !131
  %457 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %447, i64 -2
  %458 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %457, i64 -1
  %459 = bitcast %struct.ColorStop* %458 to <2 x i64>*
  store <2 x i64> %454, <2 x i64>* %459, align 4, !alias.scope !134, !noalias !131
  %460 = add i64 %426, 8
  %461 = add i64 %427, -2
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %463, label %425, !llvm.loop !136

463:                                              ; preds = %425
  %464 = sub nuw nsw i64 -8, %426
  br label %465

465:                                              ; preds = %463, %408
  %466 = phi i64 [ 0, %408 ], [ %464, %463 ]
  %467 = icmp eq i64 %417, 0
  br i1 %467, label %485, label %468

468:                                              ; preds = %465
  %469 = getelementptr %struct.ColorStop, %struct.ColorStop* %387, i64 -1
  %470 = getelementptr %struct.ColorStop, %struct.ColorStop* %386, i64 -1
  %471 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %469, i64 %466
  %472 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %470, i64 %466
  %473 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %471, i64 -1
  %474 = bitcast %struct.ColorStop* %473 to <2 x i64>*
  %475 = load <2 x i64>, <2 x i64>* %474, align 4, !alias.scope !131
  %476 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %471, i64 -2
  %477 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %476, i64 -1
  %478 = bitcast %struct.ColorStop* %477 to <2 x i64>*
  %479 = load <2 x i64>, <2 x i64>* %478, align 4, !alias.scope !131
  %480 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %472, i64 -1
  %481 = bitcast %struct.ColorStop* %480 to <2 x i64>*
  store <2 x i64> %475, <2 x i64>* %481, align 4, !alias.scope !134, !noalias !131
  %482 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %472, i64 -2
  %483 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %482, i64 -1
  %484 = bitcast %struct.ColorStop* %483 to <2 x i64>*
  store <2 x i64> %479, <2 x i64>* %484, align 4, !alias.scope !134, !noalias !131
  br label %485

485:                                              ; preds = %465, %468
  %486 = icmp eq i64 %395, %409
  br i1 %486, label %894, label %487

487:                                              ; preds = %485, %397, %390
  %488 = phi %struct.ColorStop* [ %387, %397 ], [ %387, %390 ], [ %411, %485 ]
  %489 = phi %struct.ColorStop* [ %386, %397 ], [ %386, %390 ], [ %413, %485 ]
  %490 = getelementptr %struct.ColorStop, %struct.ColorStop* %488, i64 -1, i32 0
  %491 = ptrtoint float* %490 to i64
  %492 = sub i64 %491, %9
  %493 = lshr i64 %492, 3
  %494 = add nuw nsw i64 %493, 1
  %495 = and i64 %494, 7
  %496 = icmp eq i64 %495, 0
  br i1 %496, label %508, label %497

497:                                              ; preds = %487, %497
  %498 = phi %struct.ColorStop* [ %501, %497 ], [ %488, %487 ]
  %499 = phi %struct.ColorStop* [ %502, %497 ], [ %489, %487 ]
  %500 = phi i64 [ %506, %497 ], [ %495, %487 ]
  %501 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %498, i64 -1
  %502 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %499, i64 -1
  %503 = bitcast %struct.ColorStop* %501 to i64*
  %504 = bitcast %struct.ColorStop* %502 to i64*
  %505 = load i64, i64* %503, align 4
  store i64 %505, i64* %504, align 4
  %506 = add i64 %500, -1
  %507 = icmp eq i64 %506, 0
  br i1 %507, label %508, label %497, !llvm.loop !137

508:                                              ; preds = %497, %487
  %509 = phi %struct.ColorStop* [ %488, %487 ], [ %501, %497 ]
  %510 = phi %struct.ColorStop* [ %489, %487 ], [ %502, %497 ]
  %511 = icmp ult i64 %492, 56
  br i1 %511, label %894, label %512

512:                                              ; preds = %508, %512
  %513 = phi %struct.ColorStop* [ %550, %512 ], [ %509, %508 ]
  %514 = phi %struct.ColorStop* [ %551, %512 ], [ %510, %508 ]
  %515 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %513, i64 -1
  %516 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %514, i64 -1
  %517 = bitcast %struct.ColorStop* %515 to i64*
  %518 = bitcast %struct.ColorStop* %516 to i64*
  %519 = load i64, i64* %517, align 4
  store i64 %519, i64* %518, align 4
  %520 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %513, i64 -2
  %521 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %514, i64 -2
  %522 = bitcast %struct.ColorStop* %520 to i64*
  %523 = bitcast %struct.ColorStop* %521 to i64*
  %524 = load i64, i64* %522, align 4
  store i64 %524, i64* %523, align 4
  %525 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %513, i64 -3
  %526 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %514, i64 -3
  %527 = bitcast %struct.ColorStop* %525 to i64*
  %528 = bitcast %struct.ColorStop* %526 to i64*
  %529 = load i64, i64* %527, align 4
  store i64 %529, i64* %528, align 4
  %530 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %513, i64 -4
  %531 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %514, i64 -4
  %532 = bitcast %struct.ColorStop* %530 to i64*
  %533 = bitcast %struct.ColorStop* %531 to i64*
  %534 = load i64, i64* %532, align 4
  store i64 %534, i64* %533, align 4
  %535 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %513, i64 -5
  %536 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %514, i64 -5
  %537 = bitcast %struct.ColorStop* %535 to i64*
  %538 = bitcast %struct.ColorStop* %536 to i64*
  %539 = load i64, i64* %537, align 4
  store i64 %539, i64* %538, align 4
  %540 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %513, i64 -6
  %541 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %514, i64 -6
  %542 = bitcast %struct.ColorStop* %540 to i64*
  %543 = bitcast %struct.ColorStop* %541 to i64*
  %544 = load i64, i64* %542, align 4
  store i64 %544, i64* %543, align 4
  %545 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %513, i64 -7
  %546 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %514, i64 -7
  %547 = bitcast %struct.ColorStop* %545 to i64*
  %548 = bitcast %struct.ColorStop* %546 to i64*
  %549 = load i64, i64* %547, align 4
  store i64 %549, i64* %548, align 4
  %550 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %513, i64 -8
  %551 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %514, i64 -8
  %552 = bitcast %struct.ColorStop* %550 to i64*
  %553 = bitcast %struct.ColorStop* %551 to i64*
  %554 = load i64, i64* %552, align 4
  store i64 %554, i64* %553, align 4
  %555 = icmp eq %struct.ColorStop* %550, %6
  br i1 %555, label %894, label %512, !llvm.loop !138

556:                                              ; preds = %385
  %557 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %388, i64 -1
  %558 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %387, i64 -1
  %559 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %558, i64 0, i32 0
  %560 = load float, float* %559, align 4
  %561 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %557, i64 0, i32 0
  %562 = load float, float* %561, align 4
  %563 = fcmp olt float %560, %562
  %564 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %386, i64 -1
  %565 = select i1 %563, %struct.ColorStop* %557, %struct.ColorStop* %558
  %566 = select i1 %563, %struct.ColorStop* %557, %struct.ColorStop* %388
  %567 = select i1 %563, %struct.ColorStop* %387, %struct.ColorStop* %558
  %568 = bitcast %struct.ColorStop* %565 to i64*
  %569 = bitcast %struct.ColorStop* %564 to i64*
  %570 = load i64, i64* %568, align 4
  store i64 %570, i64* %569, align 4
  %571 = icmp eq %struct.ColorStop* %567, %6
  br i1 %571, label %894, label %385

572:                                              ; preds = %201, %572
  %573 = phi %struct.ColorStop* [ %614, %572 ], [ %203, %201 ]
  %574 = phi %struct.ColorStop* [ %613, %572 ], [ %204, %201 ]
  %575 = bitcast %struct.ColorStop* %574 to i64*
  %576 = bitcast %struct.ColorStop* %573 to i64*
  %577 = load i64, i64* %575, align 4
  store i64 %577, i64* %576, align 4
  %578 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %574, i64 1
  %579 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %573, i64 1
  %580 = bitcast %struct.ColorStop* %578 to i64*
  %581 = bitcast %struct.ColorStop* %579 to i64*
  %582 = load i64, i64* %580, align 4
  store i64 %582, i64* %581, align 4
  %583 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %574, i64 2
  %584 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %573, i64 2
  %585 = bitcast %struct.ColorStop* %583 to i64*
  %586 = bitcast %struct.ColorStop* %584 to i64*
  %587 = load i64, i64* %585, align 4
  store i64 %587, i64* %586, align 4
  %588 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %574, i64 3
  %589 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %573, i64 3
  %590 = bitcast %struct.ColorStop* %588 to i64*
  %591 = bitcast %struct.ColorStop* %589 to i64*
  %592 = load i64, i64* %590, align 4
  store i64 %592, i64* %591, align 4
  %593 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %574, i64 4
  %594 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %573, i64 4
  %595 = bitcast %struct.ColorStop* %593 to i64*
  %596 = bitcast %struct.ColorStop* %594 to i64*
  %597 = load i64, i64* %595, align 4
  store i64 %597, i64* %596, align 4
  %598 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %574, i64 5
  %599 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %573, i64 5
  %600 = bitcast %struct.ColorStop* %598 to i64*
  %601 = bitcast %struct.ColorStop* %599 to i64*
  %602 = load i64, i64* %600, align 4
  store i64 %602, i64* %601, align 4
  %603 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %574, i64 6
  %604 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %573, i64 6
  %605 = bitcast %struct.ColorStop* %603 to i64*
  %606 = bitcast %struct.ColorStop* %604 to i64*
  %607 = load i64, i64* %605, align 4
  store i64 %607, i64* %606, align 4
  %608 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %574, i64 7
  %609 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %573, i64 7
  %610 = bitcast %struct.ColorStop* %608 to i64*
  %611 = bitcast %struct.ColorStop* %609 to i64*
  %612 = load i64, i64* %610, align 4
  store i64 %612, i64* %611, align 4
  %613 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %574, i64 8
  %614 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %573, i64 8
  %615 = icmp eq %struct.ColorStop* %613, %15
  br i1 %615, label %382, label %572, !llvm.loop !139

616:                                              ; preds = %25, %623
  %617 = phi i64 [ %16, %25 ], [ %626, %623 ]
  %618 = phi i64 [ %19, %25 ], [ %625, %623 ]
  %619 = inttoptr i64 %618 to %struct.ColorStop*
  %620 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %619, i64 0, i32 0
  %621 = load float, float* %620, align 4
  %622 = fcmp olt float %28, %621
  br i1 %622, label %628, label %623

623:                                              ; preds = %616
  %624 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %619, i64 1
  %625 = ptrtoint %struct.ColorStop* %624 to i64
  %626 = add nsw i64 %617, -1
  %627 = icmp eq i64 %626, 0
  br i1 %627, label %894, label %616

628:                                              ; preds = %616
  %629 = inttoptr i64 %618 to %struct.ColorStop*
  %630 = icmp slt i64 %617, %17
  br i1 %630, label %631, label %660

631:                                              ; preds = %628
  %632 = sdiv i64 %17, 2
  %633 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %26, i64 %632
  %634 = ptrtoint %struct.ColorStop* %633 to i64
  %635 = sub i64 %18, %618
  %636 = icmp eq i64 %635, 0
  br i1 %636, label %655, label %637

637:                                              ; preds = %631
  %638 = ashr exact i64 %635, 3
  %639 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %633, i64 0, i32 0
  %640 = load float, float* %639, align 4
  br label %641

641:                                              ; preds = %641, %637
  %642 = phi %struct.ColorStop* [ %629, %637 ], [ %653, %641 ]
  %643 = phi i64 [ %638, %637 ], [ %652, %641 ]
  %644 = lshr i64 %643, 1
  %645 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %642, i64 %644
  %646 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %645, i64 0, i32 0
  %647 = load float, float* %646, align 4
  %648 = fcmp olt float %640, %647
  %649 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %645, i64 1
  %650 = xor i64 %644, -1
  %651 = add i64 %643, %650
  %652 = select i1 %648, i64 %644, i64 %651
  %653 = select i1 %648, %struct.ColorStop* %642, %struct.ColorStop* %649
  %654 = icmp eq i64 %652, 0
  br i1 %654, label %655, label %641

655:                                              ; preds = %641, %631
  %656 = phi %struct.ColorStop* [ %629, %631 ], [ %653, %641 ]
  %657 = ptrtoint %struct.ColorStop* %656 to i64
  %658 = sub i64 %657, %618
  %659 = ashr exact i64 %658, 3
  br label %704

660:                                              ; preds = %628
  %661 = icmp eq i64 %617, 1
  br i1 %661, label %662, label %674

662:                                              ; preds = %660
  %663 = inttoptr i64 %18 to %struct.ColorStop*
  %664 = inttoptr i64 %618 to %struct.ColorStop*
  %665 = inttoptr i64 %618 to i32*
  %666 = load i32, i32* %665, align 4
  %667 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %664, i64 0, i32 1
  %668 = load i32, i32* %667, align 4
  %669 = inttoptr i64 %18 to i64*
  %670 = inttoptr i64 %618 to i64*
  %671 = load i64, i64* %669, align 4
  store i64 %671, i64* %670, align 4
  %672 = inttoptr i64 %18 to i32*
  store i32 %666, i32* %672, align 4
  %673 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %663, i64 0, i32 1
  store i32 %668, i32* %673, align 4
  br label %894

674:                                              ; preds = %660
  %675 = sdiv i64 %617, 2
  %676 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %629, i64 %675
  %677 = ptrtoint %struct.ColorStop* %676 to i64
  %678 = ptrtoint %struct.ColorStop* %15 to i64
  %679 = sub i64 %678, %18
  %680 = icmp eq i64 %679, 0
  br i1 %680, label %699, label %681

681:                                              ; preds = %674
  %682 = ashr exact i64 %679, 3
  %683 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %676, i64 0, i32 0
  %684 = load float, float* %683, align 4
  br label %685

685:                                              ; preds = %685, %681
  %686 = phi %struct.ColorStop* [ %26, %681 ], [ %697, %685 ]
  %687 = phi i64 [ %682, %681 ], [ %696, %685 ]
  %688 = lshr i64 %687, 1
  %689 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %686, i64 %688
  %690 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %689, i64 0, i32 0
  %691 = load float, float* %690, align 4
  %692 = fcmp olt float %691, %684
  %693 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %689, i64 1
  %694 = xor i64 %688, -1
  %695 = add i64 %687, %694
  %696 = select i1 %692, i64 %695, i64 %688
  %697 = select i1 %692, %struct.ColorStop* %693, %struct.ColorStop* %686
  %698 = icmp eq i64 %696, 0
  br i1 %698, label %699, label %685

699:                                              ; preds = %685, %674
  %700 = phi %struct.ColorStop* [ %26, %674 ], [ %697, %685 ]
  %701 = ptrtoint %struct.ColorStop* %700 to i64
  %702 = sub i64 %701, %18
  %703 = ashr exact i64 %702, 3
  br label %704

704:                                              ; preds = %699, %655
  %705 = phi i64 [ %657, %655 ], [ %677, %699 ]
  %706 = phi i64 [ %634, %655 ], [ %701, %699 ]
  %707 = phi i64 [ %632, %655 ], [ %703, %699 ]
  %708 = phi i64 [ %659, %655 ], [ %675, %699 ]
  %709 = sub nsw i64 %617, %708
  %710 = sub nsw i64 %17, %707
  %711 = inttoptr i64 %705 to %struct.ColorStop*
  %712 = inttoptr i64 %706 to %struct.ColorStop*
  %713 = inttoptr i64 %705 to i8*
  %714 = icmp eq %struct.ColorStop* %711, %26
  br i1 %714, label %879, label %715

715:                                              ; preds = %704
  %716 = icmp eq %struct.ColorStop* %26, %712
  br i1 %716, label %879, label %717

717:                                              ; preds = %715
  %718 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %711, i64 1
  %719 = icmp eq %struct.ColorStop* %718, %26
  br i1 %719, label %720, label %734

720:                                              ; preds = %717
  %721 = inttoptr i64 %705 to i32*
  %722 = load i32, i32* %721, align 4
  %723 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %711, i64 0, i32 1
  %724 = load i32, i32* %723, align 4
  %725 = sub i64 %706, %18
  %726 = ashr exact i64 %725, 3
  %727 = icmp eq i64 %725, 0
  br i1 %727, label %730, label %728

728:                                              ; preds = %720
  %729 = inttoptr i64 %18 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %713, i8* align 4 %729, i64 %725, i1 false) #14
  br label %730

730:                                              ; preds = %728, %720
  %731 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %711, i64 %726
  %732 = bitcast %struct.ColorStop* %731 to i32*
  store i32 %722, i32* %732, align 4
  %733 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %711, i64 %726, i32 1
  store i32 %724, i32* %733, align 4
  br label %879

734:                                              ; preds = %717
  %735 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %26, i64 1
  %736 = icmp eq %struct.ColorStop* %735, %712
  br i1 %736, label %737, label %755

737:                                              ; preds = %734
  %738 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %712, i64 -1
  %739 = bitcast %struct.ColorStop* %738 to i32*
  %740 = load i32, i32* %739, align 4
  %741 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %712, i64 -1, i32 1
  %742 = load i32, i32* %741, align 4
  %743 = ptrtoint %struct.ColorStop* %738 to i64
  %744 = sub i64 %743, %705
  %745 = icmp eq i64 %744, 0
  br i1 %745, label %751, label %746

746:                                              ; preds = %737
  %747 = ashr exact i64 %744, 3
  %748 = sub nsw i64 0, %747
  %749 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %712, i64 %748
  %750 = bitcast %struct.ColorStop* %749 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %750, i8* align 4 %713, i64 %744, i1 false) #14
  br label %751

751:                                              ; preds = %746, %737
  %752 = phi %struct.ColorStop* [ %749, %746 ], [ %712, %737 ]
  %753 = inttoptr i64 %705 to i32*
  store i32 %740, i32* %753, align 4
  %754 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %711, i64 0, i32 1
  store i32 %742, i32* %754, align 4
  br label %879

755:                                              ; preds = %734
  %756 = sub i64 %18, %705
  %757 = ashr exact i64 %756, 3
  %758 = sub i64 %706, %18
  %759 = ashr exact i64 %758, 3
  %760 = icmp eq i64 %757, %759
  br i1 %760, label %761, label %840

761:                                              ; preds = %755
  %762 = getelementptr %struct.ColorStop, %struct.ColorStop* %26, i64 -1
  %763 = bitcast %struct.ColorStop* %762 to i8*
  %764 = sub i64 0, %705
  %765 = getelementptr i8, i8* %763, i64 %764
  %766 = ptrtoint i8* %765 to i64
  %767 = lshr i64 %766, 3
  %768 = add nuw nsw i64 %767, 1
  %769 = and i64 %768, 3
  %770 = icmp eq i64 %769, 0
  br i1 %770, label %788, label %771

771:                                              ; preds = %761, %771
  %772 = phi %struct.ColorStop* [ %785, %771 ], [ %26, %761 ]
  %773 = phi %struct.ColorStop* [ %784, %771 ], [ %711, %761 ]
  %774 = phi i64 [ %786, %771 ], [ %769, %761 ]
  %775 = bitcast %struct.ColorStop* %773 to i32*
  %776 = load i32, i32* %775, align 4
  %777 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %773, i64 0, i32 1
  %778 = load i32, i32* %777, align 4
  %779 = bitcast %struct.ColorStop* %772 to i64*
  %780 = bitcast %struct.ColorStop* %773 to i64*
  %781 = load i64, i64* %779, align 4
  store i64 %781, i64* %780, align 4
  %782 = bitcast %struct.ColorStop* %772 to i32*
  store i32 %776, i32* %782, align 4
  %783 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %772, i64 0, i32 1
  store i32 %778, i32* %783, align 4
  %784 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %773, i64 1
  %785 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %772, i64 1
  %786 = add i64 %774, -1
  %787 = icmp eq i64 %786, 0
  br i1 %787, label %788, label %771, !llvm.loop !140

788:                                              ; preds = %771, %761
  %789 = phi %struct.ColorStop* [ %26, %761 ], [ %785, %771 ]
  %790 = phi %struct.ColorStop* [ %711, %761 ], [ %784, %771 ]
  %791 = icmp ult i8* %765, inttoptr (i64 24 to i8*)
  br i1 %791, label %879, label %792

792:                                              ; preds = %788, %792
  %793 = phi %struct.ColorStop* [ %838, %792 ], [ %789, %788 ]
  %794 = phi %struct.ColorStop* [ %837, %792 ], [ %790, %788 ]
  %795 = bitcast %struct.ColorStop* %794 to i32*
  %796 = load i32, i32* %795, align 4
  %797 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %794, i64 0, i32 1
  %798 = load i32, i32* %797, align 4
  %799 = bitcast %struct.ColorStop* %793 to i64*
  %800 = bitcast %struct.ColorStop* %794 to i64*
  %801 = load i64, i64* %799, align 4
  store i64 %801, i64* %800, align 4
  %802 = bitcast %struct.ColorStop* %793 to i32*
  store i32 %796, i32* %802, align 4
  %803 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %793, i64 0, i32 1
  store i32 %798, i32* %803, align 4
  %804 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %794, i64 1
  %805 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %793, i64 1
  %806 = bitcast %struct.ColorStop* %804 to i32*
  %807 = load i32, i32* %806, align 4
  %808 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %794, i64 1, i32 1
  %809 = load i32, i32* %808, align 4
  %810 = bitcast %struct.ColorStop* %805 to i64*
  %811 = bitcast %struct.ColorStop* %804 to i64*
  %812 = load i64, i64* %810, align 4
  store i64 %812, i64* %811, align 4
  %813 = bitcast %struct.ColorStop* %805 to i32*
  store i32 %807, i32* %813, align 4
  %814 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %793, i64 1, i32 1
  store i32 %809, i32* %814, align 4
  %815 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %794, i64 2
  %816 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %793, i64 2
  %817 = bitcast %struct.ColorStop* %815 to i32*
  %818 = load i32, i32* %817, align 4
  %819 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %794, i64 2, i32 1
  %820 = load i32, i32* %819, align 4
  %821 = bitcast %struct.ColorStop* %816 to i64*
  %822 = bitcast %struct.ColorStop* %815 to i64*
  %823 = load i64, i64* %821, align 4
  store i64 %823, i64* %822, align 4
  %824 = bitcast %struct.ColorStop* %816 to i32*
  store i32 %818, i32* %824, align 4
  %825 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %793, i64 2, i32 1
  store i32 %820, i32* %825, align 4
  %826 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %794, i64 3
  %827 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %793, i64 3
  %828 = bitcast %struct.ColorStop* %826 to i32*
  %829 = load i32, i32* %828, align 4
  %830 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %794, i64 3, i32 1
  %831 = load i32, i32* %830, align 4
  %832 = bitcast %struct.ColorStop* %827 to i64*
  %833 = bitcast %struct.ColorStop* %826 to i64*
  %834 = load i64, i64* %832, align 4
  store i64 %834, i64* %833, align 4
  %835 = bitcast %struct.ColorStop* %827 to i32*
  store i32 %829, i32* %835, align 4
  %836 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %793, i64 3, i32 1
  store i32 %831, i32* %836, align 4
  %837 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %794, i64 4
  %838 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %793, i64 4
  %839 = icmp eq %struct.ColorStop* %837, %26
  br i1 %839, label %879, label %792

840:                                              ; preds = %755, %840
  %841 = phi i64 [ %843, %840 ], [ %759, %755 ]
  %842 = phi i64 [ %841, %840 ], [ %757, %755 ]
  %843 = srem i64 %842, %841
  %844 = icmp eq i64 %843, 0
  br i1 %844, label %845, label %840

845:                                              ; preds = %840
  %846 = icmp eq i64 %841, 0
  br i1 %846, label %849, label %847

847:                                              ; preds = %845
  %848 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %711, i64 %841
  br label %851

849:                                              ; preds = %875, %845
  %850 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %711, i64 %759
  br label %879

851:                                              ; preds = %875, %847
  %852 = phi %struct.ColorStop* [ %853, %875 ], [ %848, %847 ]
  %853 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %852, i64 -1
  %854 = ptrtoint %struct.ColorStop* %853 to i64
  %855 = bitcast %struct.ColorStop* %853 to i32*
  %856 = load i32, i32* %855, align 4
  %857 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %852, i64 -1, i32 1
  %858 = load i32, i32* %857, align 4
  %859 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %853, i64 %757
  br label %860

860:                                              ; preds = %860, %851
  %861 = phi i64 [ %854, %851 ], [ %863, %860 ]
  %862 = phi %struct.ColorStop* [ %859, %851 ], [ %873, %860 ]
  %863 = ptrtoint %struct.ColorStop* %862 to i64
  %864 = bitcast %struct.ColorStop* %862 to i64*
  %865 = inttoptr i64 %861 to i64*
  %866 = load i64, i64* %864, align 4
  store i64 %866, i64* %865, align 4
  %867 = sub i64 %706, %863
  %868 = ashr exact i64 %867, 3
  %869 = icmp slt i64 %757, %868
  %870 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %862, i64 %757
  %871 = sub nsw i64 %757, %868
  %872 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %711, i64 %871
  %873 = select i1 %869, %struct.ColorStop* %870, %struct.ColorStop* %872
  %874 = icmp eq %struct.ColorStop* %873, %853
  br i1 %874, label %875, label %860

875:                                              ; preds = %860
  %876 = bitcast %struct.ColorStop* %862 to i32*
  store i32 %856, i32* %876, align 4
  %877 = getelementptr inbounds %struct.ColorStop, %struct.ColorStop* %862, i64 0, i32 1
  store i32 %858, i32* %877, align 4
  %878 = icmp eq %struct.ColorStop* %853, %711
  br i1 %878, label %849, label %851

879:                                              ; preds = %788, %792, %704, %715, %730, %751, %849
  %880 = phi %struct.ColorStop* [ %711, %715 ], [ %712, %704 ], [ %731, %730 ], [ %752, %751 ], [ %850, %849 ], [ %26, %792 ], [ %26, %788 ]
  %881 = add nsw i64 %708, %707
  %882 = add nsw i64 %709, %710
  %883 = icmp slt i64 %881, %882
  br i1 %883, label %884, label %886

884:                                              ; preds = %879
  %885 = ptrtoint %struct.ColorStop* %880 to i64
  tail call fastcc void @"_ZNSt3__115__inplace_mergeIRZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNS_6vectorIfNS_9allocatorIfEEEERNSD_IjNSE_IjEEEEEUlRKZZNS1_24colrv1_configure_skpaintES3_S6_S7_S9_ENKSA_clESC_SH_SK_E9ColorStopSN_E_NS_11__wrap_iterIPSL_EEEEvT0_ST_ST_T_NS_15iterator_traitsIST_E15difference_typeESX_PNSW_10value_typeEl"(%struct.ColorStop* %629, %struct.ColorStop* %711, %struct.ColorStop* %880, %class.anon.61* dereferenceable(1) %3, i64 %708, i64 %707, %struct.ColorStop* %6, i64 %7)
  br label %887

886:                                              ; preds = %879
  tail call fastcc void @"_ZNSt3__115__inplace_mergeIRZZN12_GLOBAL__N_124colrv1_configure_skpaintEP11FT_FaceRec_PK9FT_Color_14FT_COLR_Paint_P7SkPaintENK3$_0clER21FT_ColorStopIterator_RNS_6vectorIfNS_9allocatorIfEEEERNSD_IjNSE_IjEEEEEUlRKZZNS1_24colrv1_configure_skpaintES3_S6_S7_S9_ENKSA_clESC_SH_SK_E9ColorStopSN_E_NS_11__wrap_iterIPSL_EEEEvT0_ST_ST_T_NS_15iterator_traitsIST_E15difference_typeESX_PNSW_10value_typeEl"(%struct.ColorStop* %880, %struct.ColorStop* %712, %struct.ColorStop* %15, %class.anon.61* dereferenceable(1) %3, i64 %709, i64 %710, %struct.ColorStop* %6, i64 %7)
  br label %887

887:                                              ; preds = %884, %886
  %888 = phi i64 [ %885, %884 ], [ %618, %886 ]
  %889 = phi i64 [ %706, %884 ], [ %705, %886 ]
  %890 = phi i64 [ %710, %884 ], [ %707, %886 ]
  %891 = phi i64 [ %709, %884 ], [ %708, %886 ]
  %892 = phi %struct.ColorStop* [ %15, %884 ], [ %880, %886 ]
  %893 = icmp eq i64 %890, 0
  br i1 %893, label %894, label %14

894:                                              ; preds = %887, %23, %623, %333, %556, %508, %512, %485, %8, %662, %382, %314, %309, %301, %168, %35
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast float** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast float** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to float*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds float, float* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr float, float* %13, i64 %18
  %20 = bitcast float* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #14
  %26 = ptrtoint float* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #16
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #16
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #15
  %54 = bitcast i8* %53 to float*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi float* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds float, float* %57, i64 %33
  %59 = getelementptr inbounds float, float* %57, i64 %56
  %60 = getelementptr inbounds float, float* %58, i64 %1
  %61 = bitcast float* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #14
  %63 = ptrtoint float* %59 to i64
  %64 = ptrtoint float* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load float*, float** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint float* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds float, float* %58, i64 %71
  %73 = ptrtoint float* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast float* %72 to i8*
  %77 = bitcast float* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #14
  %78 = load float*, float** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi float* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq float* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast float* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #15
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.45"*, i64) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #14
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.45"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.45"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #16
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #16
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #15
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #14
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #14
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #15
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

declare void @_ZNK7SkPoint5scaleEfPS_(%struct.SkPoint*, float, %struct.SkPoint*) local_unnamed_addr #3

declare void @_ZN16SkGradientShader10MakeLinearEPK7SkPointPKjPKfi10SkTileModejPK8SkMatrix(%class.sk_sp.30* sret, %struct.SkPoint*, i32*, float*, i32, i32, i32, %class.SkMatrix*) local_unnamed_addr #3

declare void @_ZN16SkGradientShader19MakeTwoPointConicalERK7SkPointfS2_fPKjPKfi10SkTileModejPK8SkMatrix(%class.sk_sp.30* sret, %struct.SkPoint* dereferenceable(8), float, %struct.SkPoint* dereferenceable(8), float, i32*, float*, i32, i32, i32, %class.SkMatrix*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare float @fmodf(float, float) local_unnamed_addr #13

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setRotateEfff(%class.SkMatrix*, float, float, float) local_unnamed_addr #3

declare i32 @FT_Activate_Size(%struct.FT_SizeRec_*) local_unnamed_addr #3

declare i32 @FT_New_Size(%struct.FT_FaceRec_*, %struct.FT_SizeRec_**) local_unnamed_addr #3

declare i32 @FT_Set_Char_Size(%struct.FT_FaceRec_*, i64, i64, i32, i32) local_unnamed_addr #3

declare i32 @FT_Load_Glyph(%struct.FT_FaceRec_*, i32, i32) local_unnamed_addr #3

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath*) local_unnamed_addr #3

declare i32 @FT_Done_Size(%struct.FT_SizeRec_*) local_unnamed_addr #3

declare void @_ZN8SkCanvas9drawPaintERK7SkPaint(%class.SkCanvas*, %class.SkPaint* dereferenceable(72)) local_unnamed_addr #3

declare void @_ZN8SkCanvas8clipPathERK6SkPath8SkClipOpb(%class.SkCanvas*, %class.SkPath* dereferenceable(16), i32, i1 zeroext) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare float @tanf(float) local_unnamed_addr #13

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #3

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12setTranslateEff(%class.SkMatrix*, float, float) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

declare void @_ZN8SkCanvas14restoreToCountEi(%class.SkCanvas*, i32) local_unnamed_addr #3

declare zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #3

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #3

declare i32 @FT_Outline_Decompose(%struct.FT_Outline_*, %struct.FT_Outline_Funcs_*, i8*) local_unnamed_addr #3

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN12_GLOBAL__N_116SkFTGeometrySink4MoveEPK10FT_Vector_Pv(%struct.FT_Vector_* nocapture readonly, i8* nocapture) #1 align 2 {
  %3 = getelementptr inbounds i8, i8* %1, i64 8
  %4 = load i8, i8* %3, align 8, !range !56
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = bitcast i8* %1 to %class.SkPath**
  %8 = load %class.SkPath*, %class.SkPath** %7, align 8
  %9 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath* %8) #14
  store i8 0, i8* %3, align 8
  br label %10

10:                                               ; preds = %2, %6
  %11 = getelementptr inbounds i8, i8* %1, i64 16
  %12 = bitcast %struct.FT_Vector_* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 16, i1 false)
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN12_GLOBAL__N_116SkFTGeometrySink4LineEPK10FT_Vector_Pv(%struct.FT_Vector_* nocapture readonly, i8* nocapture) #1 align 2 {
  %3 = getelementptr inbounds i8, i8* %1, i64 16
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %0, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %5, %7
  br i1 %8, label %9, label %16

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %1, i64 24
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %0, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %46, label %16

16:                                               ; preds = %9, %2
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = load i8, i8* %17, align 8, !range !56
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %22, label %20

20:                                               ; preds = %16
  %21 = bitcast i8* %1 to %class.SkPath**
  br label %34

22:                                               ; preds = %16
  store i8 1, i8* %17, align 8
  %23 = bitcast i8* %1 to %class.SkPath**
  %24 = load %class.SkPath*, %class.SkPath** %23, align 8
  %25 = sitofp i64 %5 to float
  %26 = fmul float %25, 1.562500e-02
  %27 = getelementptr inbounds i8, i8* %1, i64 24
  %28 = bitcast i8* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sitofp i64 %29 to float
  %31 = fmul float %30, -1.562500e-02
  %32 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* %24, float %26, float %31) #14
  %33 = load i64, i64* %6, align 8
  br label %34

34:                                               ; preds = %20, %22
  %35 = phi %class.SkPath** [ %21, %20 ], [ %23, %22 ]
  %36 = phi i64 [ %7, %20 ], [ %33, %22 ]
  %37 = bitcast %struct.FT_Vector_* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %37, i64 16, i1 false) #14
  %38 = load %class.SkPath*, %class.SkPath** %35, align 8
  %39 = sitofp i64 %36 to float
  %40 = fmul float %39, 1.562500e-02
  %41 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %0, i64 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = sitofp i64 %42 to float
  %44 = fmul float %43, -1.562500e-02
  %45 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath* %38, float %40, float %44) #14
  br label %46

46:                                               ; preds = %9, %34
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN12_GLOBAL__N_116SkFTGeometrySink4QuadEPK10FT_Vector_S3_Pv(%struct.FT_Vector_* nocapture readonly, %struct.FT_Vector_* nocapture readonly, i8* nocapture) #1 align 2 {
  %4 = getelementptr inbounds i8, i8* %2, i64 16
  %5 = bitcast i8* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %0, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %10, label %25

10:                                               ; preds = %3
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %0, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %13, %15
  br i1 %16, label %17, label %25

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1, i64 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %6, %19
  br i1 %20, label %21, label %25

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1, i64 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %13, %23
  br i1 %24, label %62, label %25

25:                                               ; preds = %21, %10, %17, %3
  %26 = getelementptr inbounds i8, i8* %2, i64 8
  %27 = load i8, i8* %26, align 8, !range !56
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %25
  %30 = bitcast i8* %2 to %class.SkPath**
  br label %42

31:                                               ; preds = %25
  store i8 1, i8* %26, align 8
  %32 = bitcast i8* %2 to %class.SkPath**
  %33 = load %class.SkPath*, %class.SkPath** %32, align 8
  %34 = sitofp i64 %6 to float
  %35 = fmul float %34, 1.562500e-02
  %36 = getelementptr inbounds i8, i8* %2, i64 24
  %37 = bitcast i8* %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = sitofp i64 %38 to float
  %40 = fmul float %39, -1.562500e-02
  %41 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* %33, float %35, float %40) #14
  br label %42

42:                                               ; preds = %29, %31
  %43 = phi %class.SkPath** [ %30, %29 ], [ %32, %31 ]
  %44 = bitcast %struct.FT_Vector_* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %44, i64 16, i1 false) #14
  %45 = load %class.SkPath*, %class.SkPath** %43, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sitofp i64 %46 to float
  %48 = fmul float %47, 1.562500e-02
  %49 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %0, i64 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = sitofp i64 %50 to float
  %52 = fmul float %51, -1.562500e-02
  %53 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1, i64 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = sitofp i64 %54 to float
  %56 = fmul float %55, 1.562500e-02
  %57 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1, i64 0, i32 1
  %58 = load i64, i64* %57, align 8
  %59 = sitofp i64 %58 to float
  %60 = fmul float %59, -1.562500e-02
  %61 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6quadToEffff(%class.SkPath* %45, float %48, float %52, float %56, float %60) #14
  br label %62

62:                                               ; preds = %21, %42
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN12_GLOBAL__N_116SkFTGeometrySink5CubicEPK10FT_Vector_S3_S3_Pv(%struct.FT_Vector_* nocapture readonly, %struct.FT_Vector_* nocapture readonly, %struct.FT_Vector_* nocapture readonly, i8* nocapture) #1 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 16
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %0, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %7, %9
  br i1 %10, label %11, label %34

11:                                               ; preds = %4
  %12 = getelementptr inbounds i8, i8* %3, i64 24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %0, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %14, %16
  br i1 %17, label %18, label %34

18:                                               ; preds = %11
  %19 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1, i64 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %7, %20
  br i1 %21, label %22, label %34

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %14, %24
  br i1 %25, label %26, label %34

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %2, i64 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %7, %28
  br i1 %29, label %30, label %34

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %2, i64 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %14, %32
  br i1 %33, label %79, label %34

34:                                               ; preds = %30, %22, %11, %26, %18, %4
  %35 = getelementptr inbounds i8, i8* %3, i64 8
  %36 = load i8, i8* %35, align 8, !range !56
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %34
  %39 = bitcast i8* %3 to %class.SkPath**
  br label %51

40:                                               ; preds = %34
  store i8 1, i8* %35, align 8
  %41 = bitcast i8* %3 to %class.SkPath**
  %42 = load %class.SkPath*, %class.SkPath** %41, align 8
  %43 = sitofp i64 %7 to float
  %44 = fmul float %43, 1.562500e-02
  %45 = getelementptr inbounds i8, i8* %3, i64 24
  %46 = bitcast i8* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = sitofp i64 %47 to float
  %49 = fmul float %48, -1.562500e-02
  %50 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* %42, float %44, float %49) #14
  br label %51

51:                                               ; preds = %38, %40
  %52 = phi %class.SkPath** [ %39, %38 ], [ %41, %40 ]
  %53 = bitcast %struct.FT_Vector_* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %53, i64 16, i1 false) #14
  %54 = load %class.SkPath*, %class.SkPath** %52, align 8
  %55 = load i64, i64* %8, align 8
  %56 = sitofp i64 %55 to float
  %57 = fmul float %56, 1.562500e-02
  %58 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %0, i64 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = sitofp i64 %59 to float
  %61 = fmul float %60, -1.562500e-02
  %62 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1, i64 0, i32 0
  %63 = load i64, i64* %62, align 8
  %64 = sitofp i64 %63 to float
  %65 = fmul float %64, 1.562500e-02
  %66 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %1, i64 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = sitofp i64 %67 to float
  %69 = fmul float %68, -1.562500e-02
  %70 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %2, i64 0, i32 0
  %71 = load i64, i64* %70, align 8
  %72 = sitofp i64 %71 to float
  %73 = fmul float %72, 1.562500e-02
  %74 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %2, i64 0, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = sitofp i64 %75 to float
  %77 = fmul float %76, -1.562500e-02
  %78 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath7cubicToEffffff(%class.SkPath* %54, float %57, float %61, float %65, float %69, float %73, float %77) #14
  br label %79

79:                                               ; preds = %30, %51
  ret i32 0
}

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath*, float, float) local_unnamed_addr #3

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath*, float, float) local_unnamed_addr #3

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath6quadToEffff(%class.SkPath*, float, float, float, float) local_unnamed_addr #3

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath7cubicToEffffff(%class.SkPath*, float, float, float, float, float, float) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!4 = distinct !{!4, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!15 = distinct !{!15, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!18 = distinct !{!18, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !11}
!25 = distinct !{!25, !11}
!26 = !{!27}
!27 = distinct !{!27, !28}
!28 = distinct !{!28, !"LVerDomain"}
!29 = !{!30}
!30 = distinct !{!30, !28}
!31 = distinct !{!31, !11}
!32 = distinct !{!32, !11}
!33 = !{!34}
!34 = distinct !{!34, !35}
!35 = distinct !{!35, !"LVerDomain"}
!36 = !{!37}
!37 = distinct !{!37, !35}
!38 = distinct !{!38, !11}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !11}
!45 = distinct !{!45, !11}
!46 = distinct !{!46, !11}
!47 = distinct !{!47, !48}
!48 = !{!"llvm.loop.unroll.disable"}
!49 = !{!50}
!50 = distinct !{!50, !51}
!51 = distinct !{!51, !"LVerDomain"}
!52 = !{!53}
!53 = distinct !{!53, !51}
!54 = distinct !{!54, !11}
!55 = distinct !{!55, !11}
!56 = !{i8 0, i8 2}
!57 = !{!58}
!58 = distinct !{!58, !59, !"_ZN8SkMatrix9TranslateEff: argument 0"}
!59 = distinct !{!59, !"_ZN8SkMatrix9TranslateEff"}
!60 = !{!61}
!61 = distinct !{!61, !62, !"_ZN8SkMatrix9RotateDegEf7SkPoint: argument 0"}
!62 = distinct !{!62, !"_ZN8SkMatrix9RotateDegEf7SkPoint"}
!63 = !{!64}
!64 = distinct !{!64, !65, !"_ZN8SkMatrix9TranslateEff: argument 0"}
!65 = distinct !{!65, !"_ZN8SkMatrix9TranslateEff"}
!66 = !{!67}
!67 = distinct !{!67, !68, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!68 = distinct !{!68, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!69 = !{!70}
!70 = distinct !{!70, !71, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!71 = distinct !{!71, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!72 = distinct !{!72, !11}
!73 = distinct !{!73, !74, !11}
!74 = !{!"llvm.loop.unroll.runtime.disable"}
!75 = !{!76}
!76 = distinct !{!76, !77, !"_ZN8SkMatrix9RotateDegEf7SkPoint: argument 0"}
!77 = distinct !{!77, !"_ZN8SkMatrix9RotateDegEf7SkPoint"}
!78 = distinct !{!78, !48}
!79 = !{!80}
!80 = distinct !{!80, !81}
!81 = distinct !{!81, !"LVerDomain"}
!82 = !{!83}
!83 = distinct !{!83, !81}
!84 = distinct !{!84, !11}
!85 = distinct !{!85, !48}
!86 = !{!87}
!87 = distinct !{!87, !88}
!88 = distinct !{!88, !"LVerDomain"}
!89 = !{!90}
!90 = distinct !{!90, !88}
!91 = distinct !{!91, !11}
!92 = distinct !{!92, !48}
!93 = distinct !{!93, !48}
!94 = distinct !{!94, !11}
!95 = distinct !{!95, !11}
!96 = !{!97}
!97 = distinct !{!97, !98}
!98 = distinct !{!98, !"LVerDomain"}
!99 = !{!100}
!100 = distinct !{!100, !98}
!101 = distinct !{!101, !11}
!102 = distinct !{!102, !48}
!103 = distinct !{!103, !48}
!104 = distinct !{!104, !11}
!105 = !{!106}
!106 = distinct !{!106, !107}
!107 = distinct !{!107, !"LVerDomain"}
!108 = !{!109}
!109 = distinct !{!109, !107}
!110 = distinct !{!110, !11}
!111 = distinct !{!111, !48}
!112 = distinct !{!112, !48}
!113 = distinct !{!113, !11}
!114 = distinct !{!114, !48}
!115 = !{!116}
!116 = distinct !{!116, !117}
!117 = distinct !{!117, !"LVerDomain"}
!118 = !{!119}
!119 = distinct !{!119, !117}
!120 = distinct !{!120, !11}
!121 = distinct !{!121, !48}
!122 = distinct !{!122, !48}
!123 = !{!124}
!124 = distinct !{!124, !125}
!125 = distinct !{!125, !"LVerDomain"}
!126 = !{!127}
!127 = distinct !{!127, !125}
!128 = distinct !{!128, !11}
!129 = distinct !{!129, !48}
!130 = distinct !{!130, !11}
!131 = !{!132}
!132 = distinct !{!132, !133}
!133 = distinct !{!133, !"LVerDomain"}
!134 = !{!135}
!135 = distinct !{!135, !133}
!136 = distinct !{!136, !11}
!137 = distinct !{!137, !48}
!138 = distinct !{!138, !11}
!139 = distinct !{!139, !11}
!140 = distinct !{!140, !48}
