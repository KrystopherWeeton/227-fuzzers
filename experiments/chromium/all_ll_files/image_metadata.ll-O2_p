; ModuleID = '../../third_party/libjxl/src/lib/jxl/image_metadata.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/image_metadata.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i8* }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::Visitor" = type { i32 (...)** }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"struct.jxl::AuxOut" = type opaque
%"struct.std::__1::__split_buffer" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.5", %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::allocator.7"* }
%"class.std::__1::allocator.7" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN3jxl16ExtraChannelInfoENS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_ = comdat any

$_ZN3jxl16ExtraChannelInfoD2Ev = comdat any

$_ZN3jxl13ImageMetadataD2Ev = comdat any

$_ZN3jxl13ImageMetadataD0Ev = comdat any

$_ZNK3jxl13ImageMetadata4NameEv = comdat any

$_ZN3jxl8BitDepthD0Ev = comdat any

$_ZNK3jxl8BitDepth4NameEv = comdat any

$_ZN3jxl11ToneMappingD0Ev = comdat any

$_ZNK3jxl11ToneMapping4NameEv = comdat any

$_ZN3jxl19CustomTransformDataD2Ev = comdat any

$_ZN3jxl19CustomTransformDataD0Ev = comdat any

$_ZNK3jxl19CustomTransformData4NameEv = comdat any

$_ZN3jxl18OpsinInverseMatrixD0Ev = comdat any

$_ZNK3jxl18OpsinInverseMatrix4NameEv = comdat any

$_ZN3jxl16ExtraChannelInfoD0Ev = comdat any

$_ZNK3jxl16ExtraChannelInfo4NameEv = comdat any

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZNSt3__16vectorIN3jxl16ExtraChannelInfoENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__114__split_bufferIN3jxl16ExtraChannelInfoERNS_9allocatorIS2_EEE9push_backERKS2_ = comdat any

@_ZTVN3jxl8BitDepthE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::BitDepth"*)* @_ZN3jxl8BitDepthD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::BitDepth"*)* @_ZNK3jxl8BitDepth4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::BitDepth"*, %"class.jxl::Visitor"*)* @_ZN3jxl8BitDepth11VisitFieldsEPNS_7VisitorE to i8*)] }, align 8
@_ZTVN3jxl19CustomTransformDataE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.jxl::CustomTransformData"*)* @_ZN3jxl19CustomTransformDataD2Ev to i8*), i8* bitcast (void (%"struct.jxl::CustomTransformData"*)* @_ZN3jxl19CustomTransformDataD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::CustomTransformData"*)* @_ZNK3jxl19CustomTransformData4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::CustomTransformData"*, %"class.jxl::Visitor"*)* @_ZN3jxl19CustomTransformData11VisitFieldsEPNS_7VisitorE to i8*)] }, align 8
@_ZZN3jxl19CustomTransformData11VisitFieldsEPNS_7VisitorEE9kWeights2 = internal unnamed_addr constant [15 x float] [float 0xBF9192EA60000000, float 0xBFA1AD00A0000000, float 0xBFA497F1A0000000, float 0xBF9DE94360000000, float 0xBF7995E0A0000000, float 0x3FC20FEC20000000, float 0x3FD27E71C0000000, float 0x3F66D523E0000000, float 0xBF907D37E0000000, float 0x3FE221B6E0000000, float 0x3FA35762A0000000, float 0xBF9457FFC0000000, float 0xBFA019DCA0000000, float 0xBF88452B60000000, float 0xBF617E3CC0000000], align 16
@_ZZN3jxl19CustomTransformData11VisitFieldsEPNS_7VisitorEE9kWeights4 = internal unnamed_addr constant [55 x float] [float 0xBF98C57060000000, float 0xBFA1E10460000000, float 0xBFA2E8F300000000, float 0xBF9FAF7B80000000, float 0xBF75B332C0000000, float 0xBF91089660000000, float 0xBFA2360D20000000, float 0xBFA3E94400000000, float 0xBFA2019B00000000, float 0xBF8443AAC0000000, float 0x3FCE464600000000, float 0x3FD55F19A0000000, float 0xBF85FC7500000000, float 0xBF8AE4D9C0000000, float 0xBFA235D480000000, float 0x3FC0B3A040000000, float 0x3FD9AA7AC0000000, float 0x3FA43ADA00000000, float 0xBF95464300000000, float 0x3FDE066C20000000, float 0xBF6124B5C0000000, float 0xBF8E6785A0000000, float 0xBFA4CFD2A0000000, float 0x3FC83F16A0000000, float 0x3FE20272E0000000, float 0x3FB1162280000000, float 0xBF97EA5B80000000, float 0xBFA22F42C0000000, float 0xBF7EEAF760000000, float 0xBF973936A0000000, float 0xBF9833FA60000000, float 0x3F69DEE3E0000000, float 0xBFA1674400000000, float 0xBF8BD7CB80000000, float 0xBF4E086940000000, float 0xBF6B7B40C0000000, float 0xBF87D302C0000000, float 0xBF907D4A00000000, float 0xBF83F306C0000000, float 0xBF5F653580000000, float 0xBF866F4AC0000000, float 0xBFA0604A60000000, float 0xBFA6CF6A80000000, float 0xBF9CAB7B40000000, float 0xBF7A74E0E0000000, float 0x3FB05C24A0000000, float 0x3FCD64CE80000000, float 0x3F79D850C0000000, float 0xBF936DC960000000, float 0x3FE59CA720000000, float 0x3FB5B7A920000000, float 0xBF99F555A0000000, float 0xBF9694CAA0000000, float 0xBF91148F20000000, float 0xBF6F7E5AA0000000], align 16
@_ZZN3jxl19CustomTransformData11VisitFieldsEPNS_7VisitorEE9kWeights8 = internal unnamed_addr constant [210 x float] [float 0xBF9DFD2EE0000000, float 0xBFA2F9FDC0000000, float 0xBFA35F84A0000000, float 0xBFA1059080000000, float 0xBF7255C300000000, float 0xBF99CC78C0000000, float 0xBFA3369C00000000, float 0xBFA3F9C8E0000000, float 0xBFA2C18A80000000, float 0xBF7A7C9B40000000, float 0xBF9528F640000000, float 0xBFA3A75F80000000, float 0xBFA47DA240000000, float 0xBFA3F7DAA0000000, float 0xBF8278EFA0000000, float 0xBF90A77DE0000000, float 0xBFA43EC7E0000000, float 0xBFA4B7FC60000000, float 0xBFA4602B40000000, float 0xBF8913D400000000, float 0x3FD3220D00000000, float 0x3FD6E28B00000000, float 0xBF99101C60000000, float 0xBF862779A0000000, float 0xBFA6173980000000, float 0x3FCE989B60000000, float 0x3FDA50FC80000000, float 0xBF7778D2A0000000, float 0xBF8DB36DE0000000, float 0xBFA5BE6CC0000000, float 0x3FC67C8EA0000000, float 0x3FDCF0F340000000, float 0x3F976D37C0000000, float 0xBF93D52920000000, float 0xBFA258A4E0000000, float 0x3FBDA022A0000000, float 0x3FDE58C1E0000000, float 0x3FB0169220000000, float 0xBF9B7EBD40000000, float 0x3FDB5740C0000000, float 0xBF97077560000000, float 0xBF87A8F520000000, float 0xBFA75C7E80000000, float 0x3FD25C7CA0000000, float 0x3FDF6B8A20000000, float 0xBF14AF8F80000000, float 0xBF8FA91AC0000000, float 0xBFA75C5E40000000, float 0x3FCB2F91C0000000, float 0x3FE1461E40000000, float 0x3FA1406FE0000000, float 0xBF9532EF20000000, float 0xBFA3CC89E0000000, float 0x3FC236BD20000000, float 0x3FE21C21A0000000, float 0x3FB4987D60000000, float 0xBF9D938000000000, float 0xBFA2D8A720000000, float 0xBF7635AEE0000000, float 0xBF9DE7DB00000000, float 0xBF9C8E1460000000, float 0xBF95B0AE80000000, float 0xBFA42F62A0000000, float 0xBF7FC43320000000, float 0xBF98EB92C0000000, float 0xBFA05A5D60000000, float 0xBF94CBB1A0000000, float 0xBFA4B491E0000000, float 0xBF85FEEFE0000000, float 0xBF93C588C0000000, float 0xBFA2895460000000, float 0xBF94370CE0000000, float 0xBFA4116D00000000, float 0xBF8DD21F00000000, float 0xBF3D89D3A0000000, float 0xBF6D800DE0000000, float 0xBF84E4D2A0000000, float 0xBF893ABDA0000000, float 0xBF7A2C4660000000, float 0xBF47759280000000, float 0xBF66DD9CE0000000, float 0xBF839A0A00000000, float 0xBF8A628B40000000, float 0xBF7DF06E20000000, float 0xBF51A8BF20000000, float 0xBF61374A60000000, float 0xBF823DDC00000000, float 0xBF8AFC6000000000, float 0xBF80AB2760000000, float 0xBF5925E120000000, float 0xBF95CBAF60000000, float 0xBFA55DB140000000, float 0xBFA8BCBA00000000, float 0xBFA0DC7340000000, float 0xBF7583C020000000, float 0xBF919DB880000000, float 0xBFA4C00080000000, float 0xBFA9D58200000000, float 0xBFA2782EC0000000, float 0xBF7E3ACE40000000, float 0xBF8B7AB520000000, float 0xBFA44DD440000000, float 0xBFAA605380000000, float 0xBFA3883F60000000, float 0xBF84996360000000, float 0x3FC8478620000000, float 0x3FD5292760000000, float 0xBF8AA04B60000000, float 0xBF8C1E3640000000, float 0xBFA491C580000000, float 0x3FC1925600000000, float 0x3FD74C2460000000, float 0x3F850D1AA0000000, float 0xBF92C2C240000000, float 0xBFA13AAAC0000000, float 0x3FB65C3F00000000, float 0x3FD871C0E0000000, float 0x3FA63633C0000000, float 0xBF99DDBD40000000, float 0x3FE20CF420000000, float 0x3F72C62B40000000, float 0xBF90E0BA60000000, float 0xBFA906A060000000, float 0x3FCF782EE0000000, float 0x3FE3D92E60000000, float 0x3FA6178100000000, float 0xBF96AB2DC0000000, float 0xBFA549FE00000000, float 0x3FC54BB500000000, float 0x3FE4CF0380000000, float 0x3FB8A1A2A0000000, float 0xBF9FC21A40000000, float 0xBFA4E754E0000000, float 0xBF828648E0000000, float 0xBF9C943C00000000, float 0xBF95AFBBA0000000, float 0x3F805B4A00000000, float 0xBFA4754220000000, float 0xBF89772380000000, float 0xBF96DA47E0000000, float 0xBF9E2B75A0000000, float 0x3F845139A0000000, float 0xBFA26EF680000000, float 0xBF9140EAA0000000, float 0xBF524C5DE0000000, float 0xBF70D7C960000000, float 0xBF8A90B260000000, float 0xBF91A6A440000000, float 0xBF84F114A0000000, float 0xBF5B156FA0000000, float 0xBF69A66480000000, float 0xBF88F1E960000000, float 0xBF920E4BC0000000, float 0xBF870D7DA0000000, float 0xBF62FA5340000000, float 0xBF8C247FA0000000, float 0xBFA3719DE0000000, float 0xBFAA54F340000000, float 0xBF9FEBD560000000, float 0xBF77D5CF80000000, float 0xBF85CA70A0000000, float 0xBFA27931C0000000, float 0xBFAAFE5600000000, float 0xBFA1488EE0000000, float 0xBF804B2980000000, float 0x3FB8A5DFC0000000, float 0x3FD15CFA40000000, float 0xBF6CFB4880000000, float 0xBF91C1F900000000, float 0xBFA025FC60000000, float 0x3FAD1D0E20000000, float 0x3FD23D9A80000000, float 0x3F96D75E40000000, float 0xBF9851CD60000000, float 0x3FE5D41E20000000, float 0x3FA9B14180000000, float 0xBF97C3F960000000, float 0xBFA671B180000000, float 0x3FC7A0CCE0000000, float 0x3FE6E2C0A0000000, float 0x3FBBA99100000000, float 0xBFA0B5C440000000, float 0xBFA29FED20000000, float 0xBF8C8E87C0000000, float 0xBF99B6F7C0000000, float 0xBF91B38400000000, float 0x3FABAF7F40000000, float 0xBF9D5D2840000000, float 0xBF9362BAC0000000, float 0xBF63BB1320000000, float 0xBF724A01E0000000, float 0xBF90C12A80000000, float 0xBF98574D40000000, float 0xBF8F301C00000000, float 0xBF6B4E8540000000, float 0xBF80CB07E0000000, float 0xBF9E5A6420000000, float 0xBFA7094E40000000, float 0xBF9C1CC540000000, float 0xBF79159040000000, float 0x3F9BEDC1E0000000, float 0x3FC8E44300000000, float 0x3F5A2FD700000000, float 0xBF96DC4B40000000, float 0x3FE7FE9120000000, float 0x3FBD5196C0000000, float 0xBFA1245A80000000, float 0xBF90713240000000, float 0xBF95334500000000, float 0xBF72C4D100000000], align 16
@_ZTVN3jxl16ExtraChannelInfoE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.jxl::ExtraChannelInfo"*)* @_ZN3jxl16ExtraChannelInfoD2Ev to i8*), i8* bitcast (void (%"struct.jxl::ExtraChannelInfo"*)* @_ZN3jxl16ExtraChannelInfoD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::ExtraChannelInfo"*)* @_ZNK3jxl16ExtraChannelInfo4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::ExtraChannelInfo"*, %"class.jxl::Visitor"*)* @_ZN3jxl16ExtraChannelInfo11VisitFieldsEPNS_7VisitorE to i8*)] }, align 8
@_ZTVN3jxl13ImageMetadataE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.jxl::ImageMetadata"*)* @_ZN3jxl13ImageMetadataD2Ev to i8*), i8* bitcast (void (%"struct.jxl::ImageMetadata"*)* @_ZN3jxl13ImageMetadataD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::ImageMetadata"*)* @_ZNK3jxl13ImageMetadata4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::ImageMetadata"*, %"class.jxl::Visitor"*)* @_ZN3jxl13ImageMetadata11VisitFieldsEPNS_7VisitorE to i8*)] }, align 8
@_ZTVN3jxl18OpsinInverseMatrixE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::OpsinInverseMatrix"*)* @_ZN3jxl18OpsinInverseMatrixD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::OpsinInverseMatrix"*)* @_ZNK3jxl18OpsinInverseMatrix4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::OpsinInverseMatrix"*, %"class.jxl::Visitor"*)* @_ZN3jxl18OpsinInverseMatrix11VisitFieldsEPNS_7VisitorE to i8*)] }, align 8
@_ZTVN3jxl11ToneMappingE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::ToneMapping"*)* @_ZN3jxl11ToneMappingD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::ToneMapping"*)* @_ZNK3jxl11ToneMapping4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::ToneMapping"*, %"class.jxl::Visitor"*)* @_ZN3jxl11ToneMapping11VisitFieldsEPNS_7VisitorE to i8*)] }, align 8
@__const._ZN3jxl13ImageMetadata12SetAlphaBitsEjb.info = private unnamed_addr constant { %"class.jxl::Fields", i8, [3 x i8], i32, %"struct.jxl::BitDepth", i32, [4 x i8], %"class.std::__1::basic_string", i8, [3 x i8], [4 x float], i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, %"struct.jxl::BitDepth" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, i8 -86, [3 x i8] c"\AA\AA\AA", [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766 }, align 8
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.9 = private unnamed_addr constant [14 x i8] c"ImageMetadata\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"BitDepth\00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"ToneMapping\00", align 1
@.str.12 = private unnamed_addr constant [20 x i8] c"CustomTransformData\00", align 1
@.str.13 = private unnamed_addr constant [19 x i8] c"OpsinInverseMatrix\00", align 1
@.str.14 = private unnamed_addr constant [17 x i8] c"ExtraChannelInfo\00", align 1

@_ZN3jxl8BitDepthC1Ev = hidden unnamed_addr alias void (%"struct.jxl::BitDepth"*), void (%"struct.jxl::BitDepth"*)* @_ZN3jxl8BitDepthC2Ev
@_ZN3jxl19CustomTransformDataC1Ev = hidden unnamed_addr alias void (%"struct.jxl::CustomTransformData"*), void (%"struct.jxl::CustomTransformData"*)* @_ZN3jxl19CustomTransformDataC2Ev
@_ZN3jxl16ExtraChannelInfoC1Ev = hidden unnamed_addr alias void (%"struct.jxl::ExtraChannelInfo"*), void (%"struct.jxl::ExtraChannelInfo"*)* @_ZN3jxl16ExtraChannelInfoC2Ev
@_ZN3jxl13ImageMetadataC1Ev = hidden unnamed_addr alias void (%"struct.jxl::ImageMetadata"*), void (%"struct.jxl::ImageMetadata"*)* @_ZN3jxl13ImageMetadataC2Ev
@_ZN3jxl18OpsinInverseMatrixC1Ev = hidden unnamed_addr alias void (%"struct.jxl::OpsinInverseMatrix"*), void (%"struct.jxl::OpsinInverseMatrix"*)* @_ZN3jxl18OpsinInverseMatrixC2Ev
@_ZN3jxl11ToneMappingC1Ev = hidden unnamed_addr alias void (%"struct.jxl::ToneMapping"*), void (%"struct.jxl::ToneMapping"*)* @_ZN3jxl11ToneMappingC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8BitDepthC2Ev(%"struct.jxl::BitDepth"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %2) #8
  ret void
}

declare void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl8BitDepth11VisitFieldsEPNS_7VisitorE(%"struct.jxl::BitDepth"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %0, i64 0, i32 1
  %4 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %5 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %5, i64 3
  %7 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %3) #8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %55

10:                                               ; preds = %2
  %11 = load i8, i8* %3, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  %13 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %0, i64 0, i32 3
  %14 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %15 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %14, align 8
  %16 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %15, i64 4
  %17 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %16, align 8
  br i1 %12, label %18, label %23

18:                                               ; preds = %10
  %19 = tail call i32 %17(%"class.jxl::Visitor"* %1, i64 -9223371991757619192, i64 161061273612, i32 8, i32* %13) #8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %55

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %0, i64 0, i32 4
  store i32 0, i32* %22, align 8
  br label %39

23:                                               ; preds = %10
  %24 = tail call i32 %17(%"class.jxl::Visitor"* %1, i64 -9223371965987815392, i64 161061273624, i32 32, i32* %13) #8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %55

26:                                               ; preds = %23
  %27 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %0, i64 0, i32 4
  %28 = load i32, i32* %27, align 8
  %29 = add i32 %28, -1
  store i32 %29, i32* %27, align 8
  %30 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %31 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %30, align 8
  %32 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %31, i64 5
  %33 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %32, align 8
  %34 = tail call i32 %33(%"class.jxl::Visitor"* %1, i64 4, i32 7, i32* %27) #8
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %55

36:                                               ; preds = %26
  %37 = load i32, i32* %27, align 8
  %38 = add i32 %37, 1
  store i32 %38, i32* %27, align 8
  br label %39

39:                                               ; preds = %36, %21
  %40 = phi i32 [ %38, %36 ], [ 0, %21 ]
  %41 = load i8, i8* %3, align 8, !range !2
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %51, label %43

43:                                               ; preds = %39
  %44 = add i32 %40, -2
  %45 = icmp ugt i32 %44, 6
  br i1 %45, label %55, label %46

46:                                               ; preds = %43
  %47 = load i32, i32* %13, align 4
  %48 = sub nuw nsw i32 -3, %40
  %49 = add i32 %48, %47
  %50 = icmp ugt i32 %49, 21
  br i1 %50, label %55, label %54

51:                                               ; preds = %39
  %52 = load i32, i32* %13, align 4
  %53 = icmp ugt i32 %52, 31
  br i1 %53, label %55, label %54

54:                                               ; preds = %46, %51
  br label %55

55:                                               ; preds = %51, %46, %43, %26, %23, %18, %2, %54
  %56 = phi i32 [ 0, %54 ], [ %19, %18 ], [ %34, %26 ], [ %24, %23 ], [ %8, %2 ], [ 1, %43 ], [ 1, %46 ], [ 1, %51 ]
  ret i32 %56
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl19CustomTransformDataC2Ev(%"struct.jxl::CustomTransformData"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl19CustomTransformDataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %0, i64 0, i32 1
  store i8 0, i8* %4, align 8
  %5 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %0, i64 0, i32 4
  %6 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %5, i64 0, i32 0
  %7 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %5, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl18OpsinInverseMatrixE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %6) #8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl19CustomTransformData11VisitFieldsEPNS_7VisitorE(%"struct.jxl::CustomTransformData"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %0, i64 0, i32 2
  %5 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)***
  %6 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*** %5, align 8
  %7 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %6, i64 9
  %8 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %7, align 8
  %9 = tail call i32 %8(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* dereferenceable(8) %3, i8* %4) #8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %2
  %12 = bitcast %"class.jxl::Visitor"* %1 to void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %13 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %13, i64 10
  %15 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %14, align 8
  tail call void %15(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %3) #8
  br label %114

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %0, i64 0, i32 1
  %18 = load i8, i8* %17, align 8, !range !2
  %19 = icmp ne i8 %18, 0
  %20 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1)***
  %21 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %20, align 8
  %22 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %21, i64 8
  %23 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %22, align 8
  %24 = tail call i32 %23(%"class.jxl::Visitor"* %1, i1 zeroext %19) #8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %34

26:                                               ; preds = %16
  %27 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %0, i64 0, i32 4, i32 0
  %28 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %29 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %28, align 8
  %30 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %29, i64 11
  %31 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %30, align 8
  %32 = tail call i32 %31(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %27) #8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %114

34:                                               ; preds = %16, %26
  %35 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %0, i64 0, i32 5
  %36 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %37 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %36, align 8
  %38 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %37, i64 5
  %39 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %38, align 8
  %40 = tail call i32 %39(%"class.jxl::Visitor"* %1, i64 3, i32 0, i32* %35) #8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %114

42:                                               ; preds = %34
  %43 = load i32, i32* %35, align 8
  %44 = and i32 %43, 1
  %45 = icmp ne i32 %44, 0
  %46 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %20, align 8
  %47 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %46, i64 8
  %48 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %47, align 8
  %49 = tail call i32 %48(%"class.jxl::Visitor"* %1, i1 zeroext %45) #8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %66

51:                                               ; preds = %42
  %52 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, float, float*)***
  br label %55

53:                                               ; preds = %55
  %54 = icmp eq i64 %65, 15
  br i1 %54, label %66, label %55

55:                                               ; preds = %53, %51
  %56 = phi i64 [ 0, %51 ], [ %65, %53 ]
  %57 = getelementptr inbounds [15 x float], [15 x float]* @_ZZN3jxl19CustomTransformData11VisitFieldsEPNS_7VisitorEE9kWeights2, i64 0, i64 %56
  %58 = load float, float* %57, align 4
  %59 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %0, i64 0, i32 6, i64 %56
  %60 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %52, align 8
  %61 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %60, i64 7
  %62 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %61, align 8
  %63 = tail call i32 %62(%"class.jxl::Visitor"* %1, float %58, float* %59) #8
  %64 = icmp eq i32 %63, 0
  %65 = add nuw nsw i64 %56, 1
  br i1 %64, label %53, label %114

66:                                               ; preds = %53, %42
  %67 = load i32, i32* %35, align 8
  %68 = and i32 %67, 2
  %69 = icmp ne i32 %68, 0
  %70 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %20, align 8
  %71 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %70, i64 8
  %72 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %71, align 8
  %73 = tail call i32 %72(%"class.jxl::Visitor"* %1, i1 zeroext %69) #8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %90

75:                                               ; preds = %66
  %76 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, float, float*)***
  br label %79

77:                                               ; preds = %79
  %78 = icmp eq i64 %89, 55
  br i1 %78, label %90, label %79

79:                                               ; preds = %77, %75
  %80 = phi i64 [ 0, %75 ], [ %89, %77 ]
  %81 = getelementptr inbounds [55 x float], [55 x float]* @_ZZN3jxl19CustomTransformData11VisitFieldsEPNS_7VisitorEE9kWeights4, i64 0, i64 %80
  %82 = load float, float* %81, align 4
  %83 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %0, i64 0, i32 7, i64 %80
  %84 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %76, align 8
  %85 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %84, i64 7
  %86 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %85, align 8
  %87 = tail call i32 %86(%"class.jxl::Visitor"* %1, float %82, float* %83) #8
  %88 = icmp eq i32 %87, 0
  %89 = add nuw nsw i64 %80, 1
  br i1 %88, label %77, label %114

90:                                               ; preds = %77, %66
  %91 = load i32, i32* %35, align 8
  %92 = and i32 %91, 4
  %93 = icmp ne i32 %92, 0
  %94 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %20, align 8
  %95 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %94, i64 8
  %96 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %95, align 8
  %97 = tail call i32 %96(%"class.jxl::Visitor"* %1, i1 zeroext %93) #8
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %114

99:                                               ; preds = %90
  %100 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, float, float*)***
  br label %103

101:                                              ; preds = %103
  %102 = icmp eq i64 %113, 210
  br i1 %102, label %114, label %103

103:                                              ; preds = %101, %99
  %104 = phi i64 [ 0, %99 ], [ %113, %101 ]
  %105 = getelementptr inbounds [210 x float], [210 x float]* @_ZZN3jxl19CustomTransformData11VisitFieldsEPNS_7VisitorEE9kWeights8, i64 0, i64 %104
  %106 = load float, float* %105, align 4
  %107 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %0, i64 0, i32 8, i64 %104
  %108 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %100, align 8
  %109 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %108, i64 7
  %110 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %109, align 8
  %111 = tail call i32 %110(%"class.jxl::Visitor"* %1, float %106, float* %107) #8
  %112 = icmp eq i32 %111, 0
  %113 = add nuw nsw i64 %104, 1
  br i1 %112, label %101, label %114

114:                                              ; preds = %55, %79, %103, %101, %90, %34, %26, %11
  %115 = phi i32 [ 0, %11 ], [ %40, %34 ], [ %32, %26 ], [ 0, %90 ], [ 0, %101 ], [ %111, %103 ], [ %87, %79 ], [ %63, %55 ]
  ret i32 %115
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl16ExtraChannelInfoC2Ev(%"struct.jxl::ExtraChannelInfo"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 3
  %5 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %4, i64 0, i32 0
  %6 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %5) #8
  %7 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 5
  %8 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl16ExtraChannelInfo11VisitFieldsEPNS_7VisitorE(%"struct.jxl::ExtraChannelInfo"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 1
  %8 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)***
  %9 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*** %8, align 8
  %10 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %9, i64 9
  %11 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %10, align 8
  %12 = tail call i32 %11(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* dereferenceable(8) %6, i8* %7) #8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %19

14:                                               ; preds = %2
  %15 = bitcast %"class.jxl::Visitor"* %1 to void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %16 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %16, i64 10
  %18 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %17, align 8
  tail call void %18(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %6) #8
  br label %183

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 2
  %21 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #8, !noalias !3
  %22 = load i32, i32* %20, align 4, !alias.scope !3
  store i32 %22, i32* %5, align 4, !noalias !3
  %23 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %24 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %23, align 8, !noalias !6
  %25 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %24, i64 4
  %26 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %25, align 8, !noalias !6
  %27 = call i32 %26(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 2495375999043, i32 0, i32* nonnull %5) #8, !noalias !3
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %19
  %30 = load i32, i32* %5, align 4, !noalias !3
  store i32 %30, i32* %20, align 4, !alias.scope !3
  %31 = icmp ugt i32 %30, 63
  br i1 %31, label %32, label %34

32:                                               ; preds = %19, %29
  %33 = phi i32 [ 1, %29 ], [ %27, %19 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #8, !noalias !3
  br label %183

34:                                               ; preds = %29
  %35 = zext i32 %30 to i64
  %36 = shl i64 1, %35
  %37 = and i64 %36, 98367
  %38 = icmp eq i64 %37, 0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #8, !noalias !3
  br i1 %38, label %183, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 3, i32 0
  %41 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %42 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %41, align 8
  %43 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %42, i64 11
  %44 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %43, align 8
  %45 = call i32 %44(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %40) #8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %183

47:                                               ; preds = %39
  %48 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 4
  %49 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %23, align 8, !noalias !9
  %50 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %49, i64 4
  %51 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %50, align 8, !noalias !9
  %52 = call i32 %51(%"class.jxl::Visitor"* %1, i64 -9223372021822390272, i64 148176371716, i32 0, i32* %48) #8
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %183

54:                                               ; preds = %47
  %55 = load i32, i32* %48, align 8
  %56 = icmp ugt i32 %55, 3
  br i1 %56, label %183, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 5
  %59 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %59) #8, !noalias !12
  store i32 -1431655766, i32* %3, align 4, !noalias !12
  %60 = bitcast %"class.std::__1::basic_string"* %58 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %61 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %60, i64 0, i32 1, i32 0
  %62 = load i8, i8* %61, align 1, !noalias !12
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %67

64:                                               ; preds = %57
  %65 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %66 = load i64, i64* %65, align 8, !noalias !12
  br label %69

67:                                               ; preds = %57
  %68 = zext i8 %62 to i64
  br label %69

69:                                               ; preds = %67, %64
  %70 = phi i64 [ %66, %64 ], [ %68, %67 ]
  %71 = trunc i64 %70 to i32
  store i32 %71, i32* %3, align 4, !noalias !12
  %72 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %23, align 8, !alias.scope !12, !noalias !15
  %73 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %72, i64 4
  %74 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %73, align 8, !noalias !18
  %75 = call i32 %74(%"class.jxl::Visitor"* %1, i64 15032385536, i64 6635724472836, i32 0, i32* nonnull %3) #8
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %125

77:                                               ; preds = %69
  %78 = bitcast %"class.jxl::Visitor"* %1 to i1 (%"class.jxl::Visitor"*)***
  %79 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %78, align 8, !alias.scope !12
  %80 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %79, i64 12
  %81 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %80, align 8
  %82 = call zeroext i1 %81(%"class.jxl::Visitor"* %1) #8
  br i1 %82, label %83, label %86

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4, !noalias !12
  %85 = zext i32 %84 to i64
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %58, i64 %85, i8 signext 0) #8
  br label %86

86:                                               ; preds = %83, %77
  %87 = load i32, i32* %3, align 4, !noalias !12
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %127, label %89

89:                                               ; preds = %86
  %90 = bitcast i32* %4 to i8*
  %91 = bitcast %"class.std::__1::basic_string"* %58 to i8*
  %92 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %58, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %93 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  br label %94

94:                                               ; preds = %117, %89
  %95 = phi i64 [ 0, %89 ], [ %120, %117 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %90) #8, !noalias !12
  store i32 -1431655766, i32* %4, align 4, !noalias !12
  %96 = load i8, i8* %61, align 1, !noalias !12
  %97 = icmp slt i8 %96, 0
  br i1 %97, label %98, label %100

98:                                               ; preds = %94
  %99 = load i8*, i8** %92, align 8, !noalias !12
  br label %100

100:                                              ; preds = %98, %94
  %101 = phi i8* [ %99, %98 ], [ %91, %94 ]
  %102 = getelementptr inbounds i8, i8* %101, i64 %95
  %103 = load i8, i8* %102, align 1
  %104 = sext i8 %103 to i32
  store i32 %104, i32* %4, align 4, !noalias !12
  %105 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %93, align 8, !alias.scope !12
  %106 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %105, i64 5
  %107 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %106, align 8
  %108 = call i32 %107(%"class.jxl::Visitor"* %1, i64 8, i32 0, i32* nonnull %4) #8
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %124

110:                                              ; preds = %100
  %111 = load i32, i32* %4, align 4, !noalias !12
  %112 = trunc i32 %111 to i8
  %113 = load i8, i8* %61, align 1, !noalias !12
  %114 = icmp slt i8 %113, 0
  br i1 %114, label %115, label %117

115:                                              ; preds = %110
  %116 = load i8*, i8** %92, align 8, !noalias !12
  br label %117

117:                                              ; preds = %115, %110
  %118 = phi i8* [ %116, %115 ], [ %91, %110 ]
  %119 = getelementptr inbounds i8, i8* %118, i64 %95
  store i8 %112, i8* %119, align 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %90) #8, !noalias !12
  %120 = add nuw nsw i64 %95, 1
  %121 = load i32, i32* %3, align 4, !noalias !12
  %122 = zext i32 %121 to i64
  %123 = icmp ult i64 %120, %122
  br i1 %123, label %94, label %127

124:                                              ; preds = %100
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %90) #8, !noalias !12
  br label %125

125:                                              ; preds = %69, %124
  %126 = phi i32 [ %108, %124 ], [ %75, %69 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %59) #8, !noalias !12
  br label %183

127:                                              ; preds = %117, %86
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %59) #8, !noalias !12
  %128 = load i32, i32* %20, align 4
  %129 = icmp eq i32 %128, 0
  %130 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1)***
  %131 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %130, align 8
  %132 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %131, i64 8
  %133 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %132, align 8
  %134 = call i32 %133(%"class.jxl::Visitor"* %1, i1 zeroext %129) #8
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %144

136:                                              ; preds = %127
  %137 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 6
  %138 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %139 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %138, align 8
  %140 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %139, i64 3
  %141 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %140, align 8
  %142 = call i32 %141(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %137) #8
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %183

144:                                              ; preds = %136, %127
  %145 = load i32, i32* %20, align 4
  %146 = icmp eq i32 %145, 2
  %147 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %130, align 8
  %148 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %147, i64 8
  %149 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %148, align 8
  %150 = call i32 %149(%"class.jxl::Visitor"* %1, i1 zeroext %146) #8
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %167

152:                                              ; preds = %144
  %153 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 7, i64 0
  %154 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, float, float*)***
  %155 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %154, align 8
  %156 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %155, i64 7
  %157 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %156, align 8
  %158 = call i32 %157(%"class.jxl::Visitor"* %1, float 0.000000e+00, float* %153) #8
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %183

160:                                              ; preds = %152
  %161 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 7, i64 1
  %162 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %154, align 8
  %163 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %162, i64 7
  %164 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %163, align 8
  %165 = call i32 %164(%"class.jxl::Visitor"* %1, float 0.000000e+00, float* %161) #8
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %185, label %183

167:                                              ; preds = %192, %144
  %168 = load i32, i32* %20, align 4
  %169 = icmp eq i32 %168, 5
  %170 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %130, align 8
  %171 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %170, i64 8
  %172 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %171, align 8
  %173 = call i32 %172(%"class.jxl::Visitor"* %1, i1 zeroext %169) #8
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %182

175:                                              ; preds = %167
  %176 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 8
  %177 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %23, align 8, !noalias !19
  %178 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %177, i64 4
  %179 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %178, align 8, !noalias !19
  %180 = call i32 %179(%"class.jxl::Visitor"* %1, i64 6442450945, i64 2641404887139, i32 1, i32* %176) #8
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %183

182:                                              ; preds = %175, %167
  br label %183

183:                                              ; preds = %152, %160, %185, %192, %34, %125, %54, %32, %175, %136, %47, %39, %182, %14
  %184 = phi i32 [ 0, %14 ], [ 0, %182 ], [ %180, %175 ], [ %142, %136 ], [ %126, %125 ], [ %52, %47 ], [ %45, %39 ], [ 1, %34 ], [ %33, %32 ], [ 1, %54 ], [ %158, %152 ], [ %165, %160 ], [ %190, %185 ], [ %197, %192 ]
  ret i32 %184

185:                                              ; preds = %160
  %186 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 7, i64 2
  %187 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %154, align 8
  %188 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %187, i64 7
  %189 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %188, align 8
  %190 = call i32 %189(%"class.jxl::Visitor"* %1, float 0.000000e+00, float* %186) #8
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %192, label %183

192:                                              ; preds = %185
  %193 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 7, i64 3
  %194 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %154, align 8
  %195 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %194, i64 7
  %196 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %195, align 8
  %197 = call i32 %196(%"class.jxl::Visitor"* %1, float 0.000000e+00, float* %193) #8
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %167, label %183
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl13ImageMetadataC2Ev(%"struct.jxl::ImageMetadata"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ImageMetadataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 3
  %5 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %4, i64 0, i32 0
  %6 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %5) #8
  %7 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 7
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %7) #8
  %8 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 8
  store i32 1, i32* %8, align 8
  %9 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 9
  store i8 0, i8* %9, align 4
  %10 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 10
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 11
  store i8 0, i8* %11, align 2
  %12 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 13
  tail call void @_ZN3jxl10SizeHeaderC1Ev(%"class.jxl::SizeHeader"* %12) #8
  %13 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 14
  %14 = getelementptr inbounds %"struct.jxl::ToneMapping", %"struct.jxl::ToneMapping"* %13, i64 0, i32 0
  %15 = getelementptr inbounds %"struct.jxl::ToneMapping", %"struct.jxl::ToneMapping"* %13, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11ToneMappingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %15, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %14) #8
  %16 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 17
  %17 = bitcast %"class.std::__1::vector"* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #8
  %18 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 18
  %19 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %18, i64 0, i32 0
  %20 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %18, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl19CustomTransformDataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %20, align 8
  %21 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 18, i32 1
  store i8 0, i8* %21, align 8
  %22 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 18, i32 4
  %23 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %22, i64 0, i32 0
  %24 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %22, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl18OpsinInverseMatrixE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %24, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %23) #8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %19) #8
  %25 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 19
  tail call void @_ZN3jxl13PreviewHeaderC1Ev(%"class.jxl::PreviewHeader"* %25) #8
  %26 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 20
  tail call void @_ZN3jxl15AnimationHeaderC1Ev(%"struct.jxl::AnimationHeader"* %26) #8
  %27 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 22
  store i8 0, i8* %27, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %2) #8
  ret void
}

declare void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"*) unnamed_addr #1

declare void @_ZN3jxl10SizeHeaderC1Ev(%"class.jxl::SizeHeader"*) unnamed_addr #1

declare void @_ZN3jxl13PreviewHeaderC1Ev(%"class.jxl::PreviewHeader"*) unnamed_addr #1

declare void @_ZN3jxl15AnimationHeaderC1Ev(%"struct.jxl::AnimationHeader"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl13ImageMetadata11VisitFieldsEPNS_7VisitorE(%"struct.jxl::ImageMetadata"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 align 2 {
  %3 = alloca i8, align 1
  %4 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 1
  %6 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)***
  %7 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*** %6, align 8
  %8 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %7, i64 9
  %9 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %8, align 8
  %10 = tail call i32 %9(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* dereferenceable(8) %4, i8* %5) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %2
  %13 = bitcast %"class.jxl::Visitor"* %1 to void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %14 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %14, i64 10
  %16 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %15, align 8
  tail call void %16(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %4) #8
  br label %287

17:                                               ; preds = %2
  %18 = bitcast %"class.jxl::Visitor"* %1 to i1 (%"class.jxl::Visitor"*)***
  %19 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %18, align 8
  %20 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %19, i64 12
  %21 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %20, align 8
  %22 = tail call zeroext i1 %21(%"class.jxl::Visitor"* %1) #8
  br i1 %22, label %26, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 14, i32 0
  %25 = tail call zeroext i1 @_ZN3jxl6Bundle10AllDefaultERKNS_6FieldsE(%"class.jxl::Fields"* dereferenceable(8) %24) #8
  br label %26

26:                                               ; preds = %17, %23
  %27 = phi i1 [ %25, %23 ], [ false, %17 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #8
  store i8 -86, i8* %3, align 1
  %28 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 8
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 1
  br i1 %30, label %31, label %45

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 9
  %33 = load i8, i8* %32, align 4, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %45

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 10
  %37 = load i8, i8* %36, align 1, !range !2
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %45

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 11
  %41 = load i8, i8* %40, align 2, !range !2
  %42 = icmp ne i8 %41, 0
  %43 = xor i1 %27, true
  %44 = or i1 %42, %43
  br label %45

45:                                               ; preds = %39, %35, %31, %26
  %46 = phi i1 [ true, %35 ], [ true, %31 ], [ true, %26 ], [ %44, %39 ]
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %3, align 1
  %48 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %49 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %48, align 8
  %50 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %49, i64 3
  %51 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %50, align 8
  %52 = call i32 %51(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* nonnull %3) #8
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %285

54:                                               ; preds = %45
  %55 = load i8, i8* %3, align 1, !range !2
  %56 = icmp ne i8 %55, 0
  %57 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1)***
  %58 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %57, align 8
  %59 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %58, i64 8
  %60 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %59, align 8
  %61 = call i32 %60(%"class.jxl::Visitor"* %1, i1 zeroext %56) #8
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %143

63:                                               ; preds = %54
  %64 = load i32, i32* %28, align 8
  %65 = add i32 %64, -1
  store i32 %65, i32* %28, align 8
  %66 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %67 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %66, align 8
  %68 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %67, i64 5
  %69 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %68, align 8
  %70 = call i32 %69(%"class.jxl::Visitor"* %1, i64 3, i32 0, i32* %28) #8
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %285

72:                                               ; preds = %63
  %73 = load i32, i32* %28, align 8
  %74 = add i32 %73, 1
  store i32 %74, i32* %28, align 8
  %75 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 11
  %76 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %48, align 8
  %77 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %76, i64 3
  %78 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %77, align 8
  %79 = call i32 %78(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %75) #8
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %285

81:                                               ; preds = %72
  %82 = load i8, i8* %75, align 2, !range !2
  %83 = icmp ne i8 %82, 0
  %84 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %57, align 8
  %85 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %84, i64 8
  %86 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %85, align 8
  %87 = call i32 %86(%"class.jxl::Visitor"* %1, i1 zeroext %83) #8
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %97

89:                                               ; preds = %81
  %90 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 13, i32 0
  %91 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %92 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %91, align 8
  %93 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %92, i64 11
  %94 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %93, align 8
  %95 = call i32 %94(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %90) #8
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %285

97:                                               ; preds = %81, %89
  %98 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 9
  %99 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %48, align 8
  %100 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %99, i64 3
  %101 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %100, align 8
  %102 = call i32 %101(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %98) #8
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %285

104:                                              ; preds = %97
  %105 = load i8, i8* %98, align 4, !range !2
  %106 = icmp ne i8 %105, 0
  %107 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %57, align 8
  %108 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %107, i64 8
  %109 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %108, align 8
  %110 = call i32 %109(%"class.jxl::Visitor"* %1, i1 zeroext %106) #8
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %120

112:                                              ; preds = %104
  %113 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 19, i32 0
  %114 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %115 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %114, align 8
  %116 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %115, i64 11
  %117 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %116, align 8
  %118 = call i32 %117(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %113) #8
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %285

120:                                              ; preds = %104, %112
  %121 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 10
  %122 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %48, align 8
  %123 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %122, i64 3
  %124 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %123, align 8
  %125 = call i32 %124(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %121) #8
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %285

127:                                              ; preds = %120
  %128 = load i8, i8* %121, align 1, !range !2
  %129 = icmp ne i8 %128, 0
  %130 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %57, align 8
  %131 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %130, i64 8
  %132 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %131, align 8
  %133 = call i32 %132(%"class.jxl::Visitor"* %1, i1 zeroext %129) #8
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %147

135:                                              ; preds = %127
  %136 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 20, i32 0
  %137 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %138 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %137, align 8
  %139 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %138, i64 11
  %140 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %139, align 8
  %141 = call i32 %140(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %136) #8
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %147, label %285

143:                                              ; preds = %54
  store i32 1, i32* %28, align 8
  %144 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 11
  store i8 0, i8* %144, align 2
  %145 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 9
  store i8 0, i8* %145, align 4
  %146 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 10
  store i8 0, i8* %146, align 1
  br label %147

147:                                              ; preds = %143, %135, %127
  %148 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 3, i32 0
  %149 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %150 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %149, align 8
  %151 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %150, i64 11
  %152 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %151, align 8
  %153 = call i32 %152(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %148) #8
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %285

155:                                              ; preds = %147
  %156 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 4
  %157 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %48, align 8
  %158 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %157, i64 3
  %159 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %158, align 8
  %160 = call i32 %159(%"class.jxl::Visitor"* %1, i1 zeroext true, i8* %156) #8
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %285

162:                                              ; preds = %155
  %163 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 17
  %164 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 17, i32 0, i32 1
  %165 = bitcast %"struct.jxl::ExtraChannelInfo"** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = bitcast %"class.std::__1::vector"* %163 to i64*
  %168 = load i64, i64* %167, align 8
  %169 = sub i64 %166, %168
  %170 = sdiv exact i64 %169, 96
  %171 = trunc i64 %170 to i32
  %172 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 15
  store i32 %171, i32* %172, align 8
  %173 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %174 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %173, align 8, !noalias !22
  %175 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %174, i64 4
  %176 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %175, align 8, !noalias !22
  %177 = call i32 %176(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 184683593795, i32 0, i32* %172) #8
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %285

179:                                              ; preds = %162
  %180 = load i32, i32* %172, align 8
  %181 = icmp ne i32 %180, 0
  %182 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %57, align 8
  %183 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %182, i64 8
  %184 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %183, align 8
  %185 = call i32 %184(%"class.jxl::Visitor"* %1, i1 zeroext %181) #8
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %233

187:                                              ; preds = %179
  %188 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %18, align 8
  %189 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %188, i64 12
  %190 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %189, align 8
  %191 = call zeroext i1 %190(%"class.jxl::Visitor"* %1) #8
  br i1 %191, label %192, label %217

192:                                              ; preds = %187
  %193 = load i32, i32* %172, align 8
  %194 = zext i32 %193 to i64
  %195 = load i64, i64* %165, align 8
  %196 = load i64, i64* %167, align 8
  %197 = sub i64 %195, %196
  %198 = sdiv exact i64 %197, 96
  %199 = icmp ult i64 %198, %194
  %200 = inttoptr i64 %196 to %"struct.jxl::ExtraChannelInfo"*
  %201 = inttoptr i64 %195 to %"struct.jxl::ExtraChannelInfo"*
  br i1 %199, label %202, label %204

202:                                              ; preds = %192
  %203 = sub nsw i64 %194, %198
  call void @_ZNSt3__16vectorIN3jxl16ExtraChannelInfoENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"* %163, i64 %203) #8
  br label %217

204:                                              ; preds = %192
  %205 = icmp ugt i64 %198, %194
  br i1 %205, label %206, label %217

206:                                              ; preds = %204
  %207 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %200, i64 %194
  %208 = icmp eq %"struct.jxl::ExtraChannelInfo"* %207, %201
  br i1 %208, label %216, label %209

209:                                              ; preds = %206, %209
  %210 = phi %"struct.jxl::ExtraChannelInfo"* [ %211, %209 ], [ %201, %206 ]
  %211 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %210, i64 -1
  %212 = bitcast %"struct.jxl::ExtraChannelInfo"* %211 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %213 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %212, align 8
  %214 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %213, align 8
  call void %214(%"struct.jxl::ExtraChannelInfo"* %211) #8
  %215 = icmp eq %"struct.jxl::ExtraChannelInfo"* %211, %207
  br i1 %215, label %216, label %209

216:                                              ; preds = %209, %206
  store %"struct.jxl::ExtraChannelInfo"* %207, %"struct.jxl::ExtraChannelInfo"** %164, align 8
  br label %217

217:                                              ; preds = %216, %204, %202, %187
  %218 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %163, i64 0, i32 0, i32 0
  %219 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %218, align 8
  %220 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %164, align 8
  %221 = icmp eq %"struct.jxl::ExtraChannelInfo"* %219, %220
  br i1 %221, label %233, label %224

222:                                              ; preds = %224
  %223 = icmp eq %"struct.jxl::ExtraChannelInfo"* %232, %220
  br i1 %223, label %233, label %224

224:                                              ; preds = %217, %222
  %225 = phi %"struct.jxl::ExtraChannelInfo"* [ %232, %222 ], [ %219, %217 ]
  %226 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %225, i64 0, i32 0
  %227 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %149, align 8
  %228 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %227, i64 11
  %229 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %228, align 8
  %230 = call i32 %229(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %226) #8
  %231 = icmp eq i32 %230, 0
  %232 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %225, i64 1
  br i1 %231, label %222, label %285

233:                                              ; preds = %222, %217, %179
  %234 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 5
  %235 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %48, align 8
  %236 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %235, i64 3
  %237 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %236, align 8
  %238 = call i32 %237(%"class.jxl::Visitor"* %1, i1 zeroext true, i8* %234) #8
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %285

240:                                              ; preds = %233
  %241 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 7, i32 0
  %242 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %149, align 8
  %243 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %242, i64 11
  %244 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %243, align 8
  %245 = call i32 %244(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %241) #8
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %285

247:                                              ; preds = %240
  %248 = load i8, i8* %3, align 1, !range !2
  %249 = icmp ne i8 %248, 0
  %250 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %57, align 8
  %251 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %250, i64 8
  %252 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %251, align 8
  %253 = call i32 %252(%"class.jxl::Visitor"* %1, i1 zeroext %249) #8
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %255, label %262

255:                                              ; preds = %247
  %256 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 14, i32 0
  %257 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %149, align 8
  %258 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %257, i64 11
  %259 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %258, align 8
  %260 = call i32 %259(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %256) #8
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %262, label %285

262:                                              ; preds = %255, %247
  %263 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %18, align 8
  %264 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %263, i64 12
  %265 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %264, align 8
  %266 = call zeroext i1 %265(%"class.jxl::Visitor"* %1) #8
  br i1 %266, label %267, label %271

267:                                              ; preds = %262
  %268 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 22
  %269 = load i8, i8* %268, align 8, !range !2
  %270 = icmp eq i8 %269, 0
  br i1 %270, label %271, label %285

271:                                              ; preds = %267, %262
  %272 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 21
  %273 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64*)***
  %274 = load i32 (%"class.jxl::Visitor"*, i64*)**, i32 (%"class.jxl::Visitor"*, i64*)*** %273, align 8
  %275 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64*)*, i32 (%"class.jxl::Visitor"*, i64*)** %274, i64 13
  %276 = load i32 (%"class.jxl::Visitor"*, i64*)*, i32 (%"class.jxl::Visitor"*, i64*)** %275, align 8
  %277 = call i32 %276(%"class.jxl::Visitor"* %1, i64* %272) #8
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %279, label %285

279:                                              ; preds = %271
  %280 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*)***
  %281 = load i32 (%"class.jxl::Visitor"*)**, i32 (%"class.jxl::Visitor"*)*** %280, align 8
  %282 = getelementptr inbounds i32 (%"class.jxl::Visitor"*)*, i32 (%"class.jxl::Visitor"*)** %281, i64 14
  %283 = load i32 (%"class.jxl::Visitor"*)*, i32 (%"class.jxl::Visitor"*)** %282, align 8
  %284 = call i32 %283(%"class.jxl::Visitor"* %1) #8
  br label %285

285:                                              ; preds = %224, %267, %271, %255, %240, %233, %162, %155, %147, %135, %120, %112, %97, %89, %72, %63, %45, %279
  %286 = phi i32 [ %284, %279 ], [ %277, %271 ], [ %260, %255 ], [ %245, %240 ], [ %238, %233 ], [ %177, %162 ], [ %160, %155 ], [ %153, %147 ], [ %141, %135 ], [ %125, %120 ], [ %118, %112 ], [ %102, %97 ], [ %95, %89 ], [ %79, %72 ], [ %70, %63 ], [ %52, %45 ], [ 0, %267 ], [ %230, %224 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #8
  br label %287

287:                                              ; preds = %285, %12
  %288 = phi i32 [ 0, %12 ], [ %286, %285 ]
  ret i32 %288
}

declare zeroext i1 @_ZN3jxl6Bundle10AllDefaultERKNS_6FieldsE(%"class.jxl::Fields"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl18OpsinInverseMatrixC2Ev(%"struct.jxl::OpsinInverseMatrix"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl18OpsinInverseMatrixE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl18OpsinInverseMatrix11VisitFieldsEPNS_7VisitorE(%"struct.jxl::OpsinInverseMatrix"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 1
  %5 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)***
  %6 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*** %5, align 8
  %7 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %6, i64 9
  %8 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %7, align 8
  %9 = tail call i32 %8(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* dereferenceable(8) %3, i8* %4) #8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %19, label %11

11:                                               ; preds = %2
  %12 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, float, float*)***
  %13 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 3, i64 0
  %14 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %15 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %14, i64 7
  %16 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %15, align 8
  %17 = tail call i32 %16(%"class.jxl::Visitor"* %1, float 0x4026102980000000, float* %13) #8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %24, label %45

19:                                               ; preds = %2
  %20 = bitcast %"class.jxl::Visitor"* %1 to void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %21 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %21, i64 10
  %23 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %22, align 8
  tail call void %23(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %3) #8
  br label %45

24:                                               ; preds = %11
  %25 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 3, i64 1
  %26 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %27 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %26, i64 7
  %28 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %27, align 8
  %29 = tail call i32 %28(%"class.jxl::Visitor"* %1, float 0xC023BBE020000000, float* %25) #8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %74, label %45

31:                                               ; preds = %123
  %32 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 4, i64 1
  %33 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %34 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %33, i64 7
  %35 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %34, align 8
  %36 = tail call i32 %35(%"class.jxl::Visitor"* %1, float 0xBF6F12A6C0000000, float* %32) #8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %60, label %45

38:                                               ; preds = %67
  %39 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 5, i64 1
  %40 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %41 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %40, i64 7
  %42 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %41, align 8
  %43 = tail call i32 %42(%"class.jxl::Visitor"* %1, float 0x3FEDC21D00000000, float* %39) #8
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %47, label %45

45:                                               ; preds = %11, %24, %74, %81, %88, %95, %102, %109, %116, %123, %31, %60, %67, %38, %47, %19
  %46 = phi i32 [ 0, %19 ], [ %72, %67 ], [ %43, %38 ], [ %52, %47 ], [ %128, %123 ], [ %36, %31 ], [ %65, %60 ], [ %17, %11 ], [ %29, %24 ], [ %79, %74 ], [ %86, %81 ], [ %93, %88 ], [ %100, %95 ], [ %107, %102 ], [ %114, %109 ], [ %121, %116 ]
  ret i32 %46

47:                                               ; preds = %38
  %48 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 5, i64 2
  %49 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %50 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %49, i64 7
  %51 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %50, align 8
  %52 = tail call i32 %51(%"class.jxl::Visitor"* %1, float 0x3FEE66EE80000000, float* %48) #8
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %45

54:                                               ; preds = %47
  %55 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 5, i64 3
  %56 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %57 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %56, i64 7
  %58 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %57, align 8
  %59 = tail call i32 %58(%"class.jxl::Visitor"* %1, float 0x3FC28F5C20000000, float* %55) #8
  ret i32 %59

60:                                               ; preds = %31
  %61 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 4, i64 2
  %62 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %63 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %62, i64 7
  %64 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %63, align 8
  %65 = tail call i32 %64(%"class.jxl::Visitor"* %1, float 0xBF6F12A6C0000000, float* %61) #8
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %45

67:                                               ; preds = %60
  %68 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 5, i64 0
  %69 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %70 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %69, i64 7
  %71 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %70, align 8
  %72 = tail call i32 %71(%"class.jxl::Visitor"* %1, float 0x3FEE404E80000000, float* %68) #8
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %38, label %45

74:                                               ; preds = %24
  %75 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 3, i64 2
  %76 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %77 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %76, i64 7
  %78 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %77, align 8
  %79 = tail call i32 %78(%"class.jxl::Visitor"* %1, float 0xBFC5125DC0000000, float* %75) #8
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %45

81:                                               ; preds = %74
  %82 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 3, i64 3
  %83 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %84 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %83, i64 7
  %85 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %84, align 8
  %86 = tail call i32 %85(%"class.jxl::Visitor"* %1, float 0xC00A087E60000000, float* %82) #8
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %45

88:                                               ; preds = %81
  %89 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 3, i64 4
  %90 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %91 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %90, i64 7
  %92 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %91, align 8
  %93 = tail call i32 %92(%"class.jxl::Visitor"* %1, float 0x4011ACD220000000, float* %89) #8
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %45

95:                                               ; preds = %88
  %96 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 3, i64 5
  %97 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %98 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %97, i64 7
  %99 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %98, align 8
  %100 = tail call i32 %99(%"class.jxl::Visitor"* %1, float 0xBFC5125DC0000000, float* %96) #8
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %45

102:                                              ; preds = %95
  %103 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 3, i64 6
  %104 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %105 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %104, i64 7
  %106 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %105, align 8
  %107 = tail call i32 %106(%"class.jxl::Visitor"* %1, float 0xC00D4553E0000000, float* %103) #8
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %45

109:                                              ; preds = %102
  %110 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 3, i64 7
  %111 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %112 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %111, i64 7
  %113 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %112, align 8
  %114 = tail call i32 %113(%"class.jxl::Visitor"* %1, float 0x4005B41100000000, float* %110) #8
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %45

116:                                              ; preds = %109
  %117 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 3, i64 8
  %118 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %119 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %118, i64 7
  %120 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %119, align 8
  %121 = tail call i32 %120(%"class.jxl::Visitor"* %1, float 0x3FFF2285A0000000, float* %117) #8
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %45

123:                                              ; preds = %116
  %124 = getelementptr inbounds %"struct.jxl::OpsinInverseMatrix", %"struct.jxl::OpsinInverseMatrix"* %0, i64 0, i32 4, i64 0
  %125 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %12, align 8
  %126 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %125, i64 7
  %127 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %126, align 8
  %128 = tail call i32 %127(%"class.jxl::Visitor"* %1, float 0xBF6F12A6C0000000, float* %124) #8
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %31, label %45
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11ToneMappingC2Ev(%"struct.jxl::ToneMapping"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.jxl::ToneMapping", %"struct.jxl::ToneMapping"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"struct.jxl::ToneMapping", %"struct.jxl::ToneMapping"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11ToneMappingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl11ToneMapping11VisitFieldsEPNS_7VisitorE(%"struct.jxl::ToneMapping"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::ToneMapping", %"struct.jxl::ToneMapping"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.jxl::ToneMapping", %"struct.jxl::ToneMapping"* %0, i64 0, i32 1
  %5 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)***
  %6 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*** %5, align 8
  %7 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %6, i64 9
  %8 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %7, align 8
  %9 = tail call i32 %8(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* dereferenceable(8) %3, i8* %4) #8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %2
  %12 = bitcast %"class.jxl::Visitor"* %1 to void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %13 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %13, i64 10
  %15 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %14, align 8
  tail call void %15(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %3) #8
  br label %64

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"struct.jxl::ToneMapping", %"struct.jxl::ToneMapping"* %0, i64 0, i32 3
  %18 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, float, float*)***
  %19 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %18, align 8
  %20 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %19, i64 7
  %21 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %20, align 8
  %22 = tail call i32 %21(%"class.jxl::Visitor"* %1, float 2.550000e+02, float* %17) #8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %64

24:                                               ; preds = %16
  %25 = load float, float* %17, align 4
  %26 = fcmp ugt float %25, 0.000000e+00
  br i1 %26, label %27, label %64

27:                                               ; preds = %24
  %28 = getelementptr inbounds %"struct.jxl::ToneMapping", %"struct.jxl::ToneMapping"* %0, i64 0, i32 4
  %29 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %18, align 8
  %30 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %29, i64 7
  %31 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %30, align 8
  %32 = tail call i32 %31(%"class.jxl::Visitor"* %1, float 0.000000e+00, float* %28) #8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %64

34:                                               ; preds = %27
  %35 = load float, float* %28, align 8
  %36 = fcmp olt float %35, 0.000000e+00
  br i1 %36, label %64, label %37

37:                                               ; preds = %34
  %38 = load float, float* %17, align 4
  %39 = fcmp ogt float %35, %38
  br i1 %39, label %64, label %40

40:                                               ; preds = %37
  %41 = getelementptr inbounds %"struct.jxl::ToneMapping", %"struct.jxl::ToneMapping"* %0, i64 0, i32 5
  %42 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %43 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %42, align 8
  %44 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %43, i64 3
  %45 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %44, align 8
  %46 = tail call i32 %45(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %41) #8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %64

48:                                               ; preds = %40
  %49 = getelementptr inbounds %"struct.jxl::ToneMapping", %"struct.jxl::ToneMapping"* %0, i64 0, i32 7
  %50 = load i32 (%"class.jxl::Visitor"*, float, float*)**, i32 (%"class.jxl::Visitor"*, float, float*)*** %18, align 8
  %51 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %50, i64 7
  %52 = load i32 (%"class.jxl::Visitor"*, float, float*)*, i32 (%"class.jxl::Visitor"*, float, float*)** %51, align 8
  %53 = tail call i32 %52(%"class.jxl::Visitor"* %1, float 0.000000e+00, float* %49) #8
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %64

55:                                               ; preds = %48
  %56 = load float, float* %49, align 8
  %57 = fcmp olt float %56, 0.000000e+00
  br i1 %57, label %63, label %58

58:                                               ; preds = %55
  %59 = load i8, i8* %41, align 4, !range !2
  %60 = icmp ne i8 %59, 0
  %61 = fcmp ogt float %56, 1.000000e+00
  %62 = and i1 %61, %60
  br i1 %62, label %63, label %64

63:                                               ; preds = %58, %55
  br label %64

64:                                               ; preds = %34, %37, %58, %24, %48, %40, %27, %16, %63, %11
  %65 = phi i32 [ 0, %11 ], [ 1, %63 ], [ %53, %48 ], [ %46, %40 ], [ %32, %27 ], [ %22, %16 ], [ 1, %24 ], [ 0, %58 ], [ 1, %37 ], [ 1, %34 ]
  ret i32 %65
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl17ReadImageMetadataEPNS_9BitReaderEPNS_13ImageMetadataE(%"class.jxl::BitReader"* noalias, %"struct.jxl::ImageMetadata"* noalias) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %1, i64 0, i32 0
  %4 = tail call i32 @_ZN3jxl6Bundle4ReadEPNS_9BitReaderEPNS_6FieldsE(%"class.jxl::BitReader"* %0, %"class.jxl::Fields"* %3) #8
  ret i32 %4
}

declare i32 @_ZN3jxl6Bundle4ReadEPNS_9BitReaderEPNS_6FieldsE(%"class.jxl::BitReader"*, %"class.jxl::Fields"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl18WriteImageMetadataERKNS_13ImageMetadataEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::ImageMetadata"* dereferenceable(1600), %"struct.jxl::BitWriter"* noalias, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 0
  %6 = tail call i32 @_ZN3jxl6Bundle5WriteERKNS_6FieldsEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Fields"* dereferenceable(8) %5, %"struct.jxl::BitWriter"* %1, i64 %2, %"struct.jxl::AuxOut"* %3) #8
  ret i32 %6
}

declare i32 @_ZN3jxl6Bundle5WriteERKNS_6FieldsEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Fields"* dereferenceable(8), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl13ImageMetadata12SetAlphaBitsEjb(%"struct.jxl::ImageMetadata"*, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.jxl::ExtraChannelInfo", align 8
  %5 = zext i1 %2 to i8
  %6 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 17
  %7 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 17, i32 0, i32 0
  %8 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %7, align 8
  %9 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 17, i32 0, i32 1
  %10 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %9, align 8
  %11 = icmp eq %"struct.jxl::ExtraChannelInfo"* %8, %10
  br i1 %11, label %20, label %14

12:                                               ; preds = %14
  %13 = icmp eq %"struct.jxl::ExtraChannelInfo"* %19, %10
  br i1 %13, label %20, label %14

14:                                               ; preds = %3, %12
  %15 = phi %"struct.jxl::ExtraChannelInfo"* [ %19, %12 ], [ %8, %3 ]
  %16 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %15, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %15, i64 1
  br i1 %18, label %20, label %12

20:                                               ; preds = %12, %14, %3
  %21 = phi %"struct.jxl::ExtraChannelInfo"* [ null, %3 ], [ null, %12 ], [ %15, %14 ]
  %22 = icmp eq i32 %1, 0
  %23 = icmp eq %"struct.jxl::ExtraChannelInfo"* %21, null
  br i1 %22, label %24, label %99

24:                                               ; preds = %20
  br i1 %23, label %129, label %25

25:                                               ; preds = %24
  br i1 %11, label %36, label %26

26:                                               ; preds = %25, %31
  %27 = phi %"struct.jxl::ExtraChannelInfo"* [ %32, %31 ], [ %8, %25 ]
  %28 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %27, i64 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %27, i64 1
  %33 = icmp eq %"struct.jxl::ExtraChannelInfo"* %32, %10
  br i1 %33, label %34, label %26

34:                                               ; preds = %31
  %35 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %10 to i64
  br label %86

36:                                               ; preds = %26, %25
  %37 = phi %"struct.jxl::ExtraChannelInfo"* [ %8, %25 ], [ %27, %26 ]
  %38 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %37 to i64
  %39 = icmp eq %"struct.jxl::ExtraChannelInfo"* %37, %10
  br i1 %39, label %86, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %37, i64 1
  %42 = icmp eq %"struct.jxl::ExtraChannelInfo"* %41, %10
  br i1 %42, label %86, label %43

43:                                               ; preds = %40, %80
  %44 = phi %"struct.jxl::ExtraChannelInfo"* [ %82, %80 ], [ %41, %40 ]
  %45 = phi %"struct.jxl::ExtraChannelInfo"* [ %44, %80 ], [ %37, %40 ]
  %46 = phi i64 [ %81, %80 ], [ %38, %40 ]
  %47 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %45, i64 1, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %80, label %50

50:                                               ; preds = %43
  %51 = inttoptr i64 %46 to %"struct.jxl::ExtraChannelInfo"*
  %52 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %51, i64 0, i32 1
  %53 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %45, i64 1, i32 1
  %54 = bitcast i8* %53 to i64*
  %55 = bitcast i8* %52 to i64*
  %56 = load i64, i64* %54, align 8
  store i64 %56, i64* %55, align 8
  %57 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %51, i64 0, i32 3, i32 1
  %58 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %45, i64 1, i32 3, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %58, i64 12, i1 false) #8
  %59 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %45, i64 1, i32 4
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %51, i64 0, i32 4
  store i32 %60, i32* %61, align 8
  %62 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %51, i64 0, i32 5
  %63 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %45, i64 1, i32 5
  %64 = bitcast %"class.std::__1::basic_string"* %62 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %65 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %64, i64 0, i32 1, i32 0
  %66 = load i8, i8* %65, align 1
  %67 = icmp slt i8 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %50
  %69 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %62, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  tail call void @_ZdlPv(i8* %70) #9
  br label %71

71:                                               ; preds = %68, %50
  %72 = bitcast %"class.std::__1::basic_string"* %62 to i8*
  %73 = bitcast %"class.std::__1::basic_string"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* align 8 %73, i64 24, i1 false) #8
  %74 = bitcast %"class.std::__1::basic_string"* %63 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %75 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %74, i64 0, i32 1, i32 0
  store i8 0, i8* %75, align 1
  store i8 0, i8* %73, align 1
  %76 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %51, i64 0, i32 6
  %77 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %45, i64 1, i32 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 24, i1 false) #8
  %78 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %51, i64 1
  %79 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %78 to i64
  br label %80

80:                                               ; preds = %71, %43
  %81 = phi i64 [ %46, %43 ], [ %79, %71 ]
  %82 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %44, i64 1
  %83 = icmp eq %"struct.jxl::ExtraChannelInfo"* %82, %10
  br i1 %83, label %84, label %43

84:                                               ; preds = %80
  %85 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %9, align 8
  br label %86

86:                                               ; preds = %84, %34, %36, %40
  %87 = phi %"struct.jxl::ExtraChannelInfo"* [ %10, %36 ], [ %10, %34 ], [ %10, %40 ], [ %85, %84 ]
  %88 = phi i64 [ %38, %36 ], [ %35, %34 ], [ %38, %40 ], [ %81, %84 ]
  %89 = inttoptr i64 %88 to %"struct.jxl::ExtraChannelInfo"*
  %90 = icmp eq %"struct.jxl::ExtraChannelInfo"* %87, %89
  br i1 %90, label %129, label %91

91:                                               ; preds = %86, %91
  %92 = phi %"struct.jxl::ExtraChannelInfo"* [ %93, %91 ], [ %87, %86 ]
  %93 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %92, i64 -1
  %94 = bitcast %"struct.jxl::ExtraChannelInfo"* %93 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %95 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %94, align 8
  %96 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %95, align 8
  tail call void %96(%"struct.jxl::ExtraChannelInfo"* %93) #8
  %97 = icmp eq %"struct.jxl::ExtraChannelInfo"* %93, %89
  br i1 %97, label %98, label %91

98:                                               ; preds = %91
  store %"struct.jxl::ExtraChannelInfo"* %89, %"struct.jxl::ExtraChannelInfo"** %9, align 8
  br label %129

99:                                               ; preds = %20
  br i1 %23, label %100, label %124

100:                                              ; preds = %99
  %101 = bitcast %"struct.jxl::ExtraChannelInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %101) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %101, i8* align 8 bitcast ({ %"class.jxl::Fields", i8, [3 x i8], i32, %"struct.jxl::BitDepth", i32, [4 x i8], %"class.std::__1::basic_string", i8, [3 x i8], [4 x float], i32 }* @__const._ZN3jxl13ImageMetadata12SetAlphaBitsEjb.info to i8*), i64 96, i1 false)
  %102 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %4, i64 0, i32 0
  %103 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %103, align 8
  %104 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %4, i64 0, i32 3
  %105 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %104, i64 0, i32 0
  %106 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %104, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %106, align 8
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %105) #8
  %107 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %4, i64 0, i32 5
  %108 = bitcast %"class.std::__1::basic_string"* %107 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %108, i8 0, i64 24, i1 false) #8
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %102) #8
  %109 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %4, i64 0, i32 2
  store i32 0, i32* %109, align 4
  %110 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %4, i64 0, i32 3, i32 3
  store i32 %1, i32* %110, align 4
  %111 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %4, i64 0, i32 4
  store i32 0, i32* %111, align 8
  %112 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %4, i64 0, i32 6
  store i8 %5, i8* %112, align 8
  %113 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %114 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %113, align 8
  %115 = call %"struct.jxl::ExtraChannelInfo"* @_ZNSt3__16vectorIN3jxl16ExtraChannelInfoENS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_(%"class.std::__1::vector"* %6, %"struct.jxl::ExtraChannelInfo"* %114, %"struct.jxl::ExtraChannelInfo"* nonnull dereferenceable(96) %4)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %103, align 8
  %116 = bitcast %"class.std::__1::basic_string"* %107 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %117 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %116, i64 0, i32 1, i32 0
  %118 = load i8, i8* %117, align 1
  %119 = icmp slt i8 %118, 0
  br i1 %119, label %120, label %123

120:                                              ; preds = %100
  %121 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %107, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %122 = load i8*, i8** %121, align 8
  call void @_ZdlPv(i8* %122) #9
  br label %123

123:                                              ; preds = %100, %120
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %101) #8
  br label %129

124:                                              ; preds = %99
  %125 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %21, i64 0, i32 3, i32 3
  store i32 %1, i32* %125, align 4
  %126 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %21, i64 0, i32 3, i32 1
  store i8 0, i8* %126, align 8
  %127 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %21, i64 0, i32 3, i32 4
  store i32 0, i32* %127, align 8
  %128 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %21, i64 0, i32 6
  store i8 %5, i8* %128, align 8
  br label %129

129:                                              ; preds = %98, %86, %24, %123, %124
  %130 = bitcast %"struct.jxl::ExtraChannelInfo"** %9 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = bitcast %"class.std::__1::vector"* %6 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = sub i64 %131, %133
  %135 = sdiv exact i64 %134, 96
  %136 = trunc i64 %135 to i32
  %137 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 15
  store i32 %136, i32* %137, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.jxl::ExtraChannelInfo"* @_ZNSt3__16vectorIN3jxl16ExtraChannelInfoENS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_(%"class.std::__1::vector"*, %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"* dereferenceable(96)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"struct.std::__1::__split_buffer", align 8
  %5 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %1 to i64
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %8 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %9, align 8
  %11 = icmp ult %"struct.jxl::ExtraChannelInfo"* %8, %10
  %12 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %8 to i64
  %13 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %10 to i64
  br i1 %11, label %14, label %172

14:                                               ; preds = %3
  %15 = icmp eq %"struct.jxl::ExtraChannelInfo"* %8, %1
  br i1 %15, label %16, label %49

16:                                               ; preds = %14
  %17 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %17, align 8
  %18 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 1
  %19 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %2, i64 0, i32 1
  %20 = bitcast i8* %19 to i64*
  %21 = bitcast i8* %18 to i64*
  %22 = load i64, i64* %20, align 8
  store i64 %22, i64* %21, align 8
  %23 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %23, align 8
  %24 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 3, i32 1
  %25 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %2, i64 0, i32 3, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 12, i1 false) #8
  %26 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 4
  %27 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %2, i64 0, i32 4
  %28 = load i32, i32* %27, align 8
  store i32 %28, i32* %26, align 8
  %29 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 5
  %30 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %2, i64 0, i32 5
  %31 = bitcast %"class.std::__1::basic_string"* %30 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %31, i64 0, i32 1, i32 0
  %33 = load i8, i8* %32, align 1
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %16
  %36 = bitcast %"class.std::__1::basic_string"* %29 to i8*
  %37 = bitcast %"class.std::__1::basic_string"* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 24, i1 false) #8
  br label %43

38:                                               ; preds = %16
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %2, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %29, i8* %40, i64 %42) #8
  br label %43

43:                                               ; preds = %35, %38
  %44 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 6
  %45 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %2, i64 0, i32 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 24, i1 false) #8
  %46 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 1
  %47 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %46 to i64
  %48 = bitcast %"struct.jxl::ExtraChannelInfo"** %7 to i64*
  store i64 %47, i64* %48, align 8
  br label %320

49:                                               ; preds = %14
  %50 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 1
  %51 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %50 to i64
  %52 = sub i64 %12, %51
  %53 = sdiv exact i64 %52, 96
  %54 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 %53
  %55 = bitcast %"struct.jxl::ExtraChannelInfo"** %7 to i64*
  %56 = icmp ult %"struct.jxl::ExtraChannelInfo"* %54, %8
  br i1 %56, label %94, label %59

57:                                               ; preds = %94
  %58 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %116 to i64
  br label %59

59:                                               ; preds = %57, %49
  %60 = phi i64 [ %58, %57 ], [ %12, %49 ]
  store i64 %60, i64* %55, align 8
  %61 = icmp eq i64 %52, 0
  br i1 %61, label %118, label %62

62:                                               ; preds = %59, %86
  %63 = phi %"struct.jxl::ExtraChannelInfo"* [ %66, %86 ], [ %8, %59 ]
  %64 = phi %"struct.jxl::ExtraChannelInfo"* [ %65, %86 ], [ %54, %59 ]
  %65 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %64, i64 -1
  %66 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %63, i64 -1
  %67 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %63, i64 -1, i32 1
  %68 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %64, i64 -1, i32 1
  %69 = bitcast i8* %68 to i64*
  %70 = bitcast i8* %67 to i64*
  %71 = load i64, i64* %69, align 8
  store i64 %71, i64* %70, align 8
  %72 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %63, i64 -1, i32 3, i32 1
  %73 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %64, i64 -1, i32 3, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* align 8 %73, i64 12, i1 false) #8
  %74 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %64, i64 -1, i32 4
  %75 = load i32, i32* %74, align 8
  %76 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %63, i64 -1, i32 4
  store i32 %75, i32* %76, align 8
  %77 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %63, i64 -1, i32 5
  %78 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %64, i64 -1, i32 5
  %79 = bitcast %"class.std::__1::basic_string"* %77 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %80 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %79, i64 0, i32 1, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp slt i8 %81, 0
  br i1 %82, label %83, label %86

83:                                               ; preds = %62
  %84 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %77, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  tail call void @_ZdlPv(i8* %85) #9
  br label %86

86:                                               ; preds = %83, %62
  %87 = bitcast %"class.std::__1::basic_string"* %77 to i8*
  %88 = bitcast %"class.std::__1::basic_string"* %78 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 24, i1 false) #8
  %89 = bitcast %"class.std::__1::basic_string"* %78 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %90 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %89, i64 0, i32 1, i32 0
  store i8 0, i8* %90, align 1
  store i8 0, i8* %88, align 1
  %91 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %63, i64 -1, i32 6
  %92 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %64, i64 -1, i32 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 24, i1 false) #8
  %93 = icmp eq %"struct.jxl::ExtraChannelInfo"* %65, %1
  br i1 %93, label %118, label %62

94:                                               ; preds = %49, %94
  %95 = phi %"struct.jxl::ExtraChannelInfo"* [ %116, %94 ], [ %8, %49 ]
  %96 = phi %"struct.jxl::ExtraChannelInfo"* [ %115, %94 ], [ %54, %49 ]
  %97 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %95, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %97, align 8
  %98 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %95, i64 0, i32 1
  %99 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %96, i64 0, i32 1
  %100 = bitcast i8* %99 to i64*
  %101 = bitcast i8* %98 to i64*
  %102 = load i64, i64* %100, align 8
  store i64 %102, i64* %101, align 8
  %103 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %95, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %103, align 8
  %104 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %95, i64 0, i32 3, i32 1
  %105 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %96, i64 0, i32 3, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 12, i1 false) #8
  %106 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %95, i64 0, i32 4
  %107 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %96, i64 0, i32 4
  %108 = load i32, i32* %107, align 8
  store i32 %108, i32* %106, align 8
  %109 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %95, i64 0, i32 5
  %110 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %96, i64 0, i32 5
  %111 = bitcast %"class.std::__1::basic_string"* %109 to i8*
  %112 = bitcast %"class.std::__1::basic_string"* %110 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %111, i8* align 8 %112, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 24, i1 false) #8
  %113 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %95, i64 0, i32 6
  %114 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %96, i64 0, i32 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* align 8 %114, i64 24, i1 false) #8
  %115 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %96, i64 1
  %116 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %95, i64 1
  %117 = icmp ult %"struct.jxl::ExtraChannelInfo"* %115, %8
  br i1 %117, label %94, label %57

118:                                              ; preds = %86, %59
  %119 = icmp ugt %"struct.jxl::ExtraChannelInfo"* %1, %2
  br i1 %119, label %125, label %120

120:                                              ; preds = %118
  %121 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %7, align 8
  %122 = icmp ugt %"struct.jxl::ExtraChannelInfo"* %121, %2
  %123 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %2, i64 1
  %124 = select i1 %122, %"struct.jxl::ExtraChannelInfo"* %123, %"struct.jxl::ExtraChannelInfo"* %2
  br label %125

125:                                              ; preds = %120, %118
  %126 = phi %"struct.jxl::ExtraChannelInfo"* [ %2, %118 ], [ %124, %120 ]
  %127 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 1
  %128 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %126, i64 0, i32 1
  %129 = bitcast i8* %128 to i64*
  %130 = bitcast i8* %127 to i64*
  %131 = load i64, i64* %129, align 8
  store i64 %131, i64* %130, align 8
  %132 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 3, i32 1
  %133 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %126, i64 0, i32 3, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %132, i8* align 8 %133, i64 12, i1 false) #8
  %134 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %126, i64 0, i32 4
  %135 = load i32, i32* %134, align 8
  %136 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 4
  store i32 %135, i32* %136, align 8
  %137 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 5
  %138 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %126, i64 0, i32 5
  %139 = icmp eq %"struct.jxl::ExtraChannelInfo"* %126, %1
  br i1 %139, label %169, label %140

140:                                              ; preds = %125
  %141 = bitcast %"class.std::__1::basic_string"* %137 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %142 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %141, i64 0, i32 1, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp slt i8 %143, 0
  %145 = bitcast %"class.std::__1::basic_string"* %138 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %146 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %145, i64 0, i32 1, i32 0
  %147 = load i8, i8* %146, align 1
  %148 = icmp slt i8 %147, 0
  br i1 %144, label %159, label %149

149:                                              ; preds = %140
  br i1 %148, label %153, label %150

150:                                              ; preds = %149
  %151 = bitcast %"class.std::__1::basic_string"* %137 to i8*
  %152 = bitcast %"class.std::__1::basic_string"* %138 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %151, i8* align 8 %152, i64 24, i1 false) #8
  br label %169

153:                                              ; preds = %149
  %154 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %138, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %155 = load i8*, i8** %154, align 8
  %156 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %126, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %157 = load i64, i64* %156, align 8
  %158 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %137, i8* %155, i64 %157) #8
  br label %169

159:                                              ; preds = %140
  %160 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %138, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %161 = load i8*, i8** %160, align 8
  %162 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %126, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %163 = load i64, i64* %162, align 8
  %164 = bitcast %"class.std::__1::basic_string"* %138 to i8*
  %165 = zext i8 %147 to i64
  %166 = select i1 %148, i8* %161, i8* %164
  %167 = select i1 %148, i64 %163, i64 %165
  %168 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %137, i8* %166, i64 %167) #8
  br label %169

169:                                              ; preds = %125, %150, %153, %159
  %170 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 6
  %171 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %126, i64 0, i32 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %170, i8* align 8 %171, i64 24, i1 false) #8
  br label %320

172:                                              ; preds = %3
  %173 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2
  %174 = bitcast %"struct.std::__1::__split_buffer"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %174) #8
  %175 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %4, i64 0, i32 0
  %176 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %4, i64 0, i32 1
  %177 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %4, i64 0, i32 2
  %178 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %4, i64 0, i32 3, i32 0, i32 0
  %179 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %4, i64 0, i32 3, i32 1, i32 0
  %180 = bitcast %"struct.jxl::ExtraChannelInfo"** %7 to i64*
  %181 = bitcast %"class.std::__1::vector"* %0 to i64*
  %182 = bitcast %"struct.std::__1::__split_buffer"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %182, i8 -86, i64 40, i1 false)
  %183 = load i64, i64* %181, align 8
  %184 = sub i64 %12, %183
  %185 = sdiv exact i64 %184, 96
  %186 = add nsw i64 %185, 1
  %187 = icmp ugt i64 %186, 192153584101141162
  br i1 %187, label %188, label %190

188:                                              ; preds = %172
  %189 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %189) #10
  unreachable

190:                                              ; preds = %172
  %191 = bitcast %"struct.jxl::ExtraChannelInfo"** %9 to i64*
  %192 = sub i64 %13, %183
  %193 = sdiv exact i64 %192, 96
  %194 = icmp ult i64 %193, 96076792050570581
  br i1 %194, label %199, label %195

195:                                              ; preds = %190
  %196 = sub i64 %5, %183
  %197 = sdiv exact i64 %196, 96
  store %"struct.jxl::ExtraChannelInfo"* null, %"struct.jxl::ExtraChannelInfo"** %178, align 8
  %198 = bitcast %"class.std::__1::allocator.7"** %179 to %"class.std::__1::__compressed_pair.4"**
  store %"class.std::__1::__compressed_pair.4"* %173, %"class.std::__1::__compressed_pair.4"** %198, align 8
  br label %207

199:                                              ; preds = %190
  %200 = shl nsw i64 %193, 1
  %201 = icmp ult i64 %200, %186
  %202 = select i1 %201, i64 %186, i64 %200
  %203 = sub i64 %5, %183
  %204 = sdiv exact i64 %203, 96
  store %"struct.jxl::ExtraChannelInfo"* null, %"struct.jxl::ExtraChannelInfo"** %178, align 8
  %205 = bitcast %"class.std::__1::allocator.7"** %179 to %"class.std::__1::__compressed_pair.4"**
  store %"class.std::__1::__compressed_pair.4"* %173, %"class.std::__1::__compressed_pair.4"** %205, align 8
  %206 = icmp eq i64 %202, 0
  br i1 %206, label %213, label %207

207:                                              ; preds = %199, %195
  %208 = phi i64 [ %197, %195 ], [ %204, %199 ]
  %209 = phi i64 [ 192153584101141162, %195 ], [ %202, %199 ]
  %210 = mul i64 %209, 96
  %211 = tail call i8* @_Znwm(i64 %210) #9
  %212 = bitcast i8* %211 to %"struct.jxl::ExtraChannelInfo"*
  br label %213

213:                                              ; preds = %199, %207
  %214 = phi i64 [ %208, %207 ], [ %204, %199 ]
  %215 = phi i64 [ %209, %207 ], [ 0, %199 ]
  %216 = phi %"struct.jxl::ExtraChannelInfo"* [ %212, %207 ], [ null, %199 ]
  store %"struct.jxl::ExtraChannelInfo"* %216, %"struct.jxl::ExtraChannelInfo"** %175, align 8
  %217 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %216, i64 %214
  store %"struct.jxl::ExtraChannelInfo"* %217, %"struct.jxl::ExtraChannelInfo"** %177, align 8
  store %"struct.jxl::ExtraChannelInfo"* %217, %"struct.jxl::ExtraChannelInfo"** %176, align 8
  %218 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %216, i64 %215
  store %"struct.jxl::ExtraChannelInfo"* %218, %"struct.jxl::ExtraChannelInfo"** %178, align 8
  call void @_ZNSt3__114__split_bufferIN3jxl16ExtraChannelInfoERNS_9allocatorIS2_EEE9push_backERKS2_(%"struct.std::__1::__split_buffer"* nonnull %4, %"struct.jxl::ExtraChannelInfo"* dereferenceable(96) %2)
  %219 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %176, align 8
  %220 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %6, align 8
  %221 = icmp eq %"struct.jxl::ExtraChannelInfo"* %220, %1
  br i1 %221, label %247, label %222

222:                                              ; preds = %213, %222
  %223 = phi %"struct.jxl::ExtraChannelInfo"* [ %245, %222 ], [ %219, %213 ]
  %224 = phi %"struct.jxl::ExtraChannelInfo"* [ %225, %222 ], [ %1, %213 ]
  %225 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %224, i64 -1
  %226 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %223, i64 -1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %226, align 8
  %227 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %223, i64 -1, i32 1
  %228 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %224, i64 -1, i32 1
  %229 = bitcast i8* %228 to i64*
  %230 = bitcast i8* %227 to i64*
  %231 = load i64, i64* %229, align 8
  store i64 %231, i64* %230, align 8
  %232 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %223, i64 -1, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %232, align 8
  %233 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %223, i64 -1, i32 3, i32 1
  %234 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %224, i64 -1, i32 3, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %233, i8* align 8 %234, i64 12, i1 false) #8
  %235 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %223, i64 -1, i32 4
  %236 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %224, i64 -1, i32 4
  %237 = load i32, i32* %236, align 8
  store i32 %237, i32* %235, align 8
  %238 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %223, i64 -1, i32 5
  %239 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %224, i64 -1, i32 5
  %240 = bitcast %"class.std::__1::basic_string"* %238 to i8*
  %241 = bitcast %"class.std::__1::basic_string"* %239 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %240, i8* align 8 %241, i64 24, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* align 8 %241, i8 0, i64 24, i1 false) #8
  %242 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %223, i64 -1, i32 6
  %243 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %224, i64 -1, i32 6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %242, i8* align 8 %243, i64 24, i1 false) #8
  %244 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %176, align 8
  %245 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %244, i64 -1
  store %"struct.jxl::ExtraChannelInfo"* %245, %"struct.jxl::ExtraChannelInfo"** %176, align 8
  %246 = icmp eq %"struct.jxl::ExtraChannelInfo"* %225, %220
  br i1 %246, label %247, label %222

247:                                              ; preds = %222, %213
  %248 = phi %"struct.jxl::ExtraChannelInfo"* [ %219, %213 ], [ %245, %222 ]
  %249 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %7, align 8
  %250 = icmp eq %"struct.jxl::ExtraChannelInfo"* %249, %1
  br i1 %250, label %251, label %257

251:                                              ; preds = %247
  %252 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %249 to i64
  %253 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %248 to i64
  %254 = bitcast %"struct.jxl::ExtraChannelInfo"** %176 to i64*
  %255 = bitcast %"struct.jxl::ExtraChannelInfo"** %177 to i64*
  %256 = load i64, i64* %255, align 8
  br label %290

257:                                              ; preds = %247
  %258 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %177, align 8
  br label %259

259:                                              ; preds = %259, %257
  %260 = phi %"struct.jxl::ExtraChannelInfo"* [ %282, %259 ], [ %258, %257 ]
  %261 = phi %"struct.jxl::ExtraChannelInfo"* [ %280, %259 ], [ %1, %257 ]
  %262 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %260, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %262, align 8
  %263 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %260, i64 0, i32 1
  %264 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %261, i64 0, i32 1
  %265 = bitcast i8* %264 to i64*
  %266 = bitcast i8* %263 to i64*
  %267 = load i64, i64* %265, align 8
  store i64 %267, i64* %266, align 8
  %268 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %260, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %268, align 8
  %269 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %260, i64 0, i32 3, i32 1
  %270 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %261, i64 0, i32 3, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %269, i8* align 8 %270, i64 12, i1 false) #8
  %271 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %260, i64 0, i32 4
  %272 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %261, i64 0, i32 4
  %273 = load i32, i32* %272, align 8
  store i32 %273, i32* %271, align 8
  %274 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %260, i64 0, i32 5
  %275 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %261, i64 0, i32 5
  %276 = bitcast %"class.std::__1::basic_string"* %274 to i8*
  %277 = bitcast %"class.std::__1::basic_string"* %275 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %276, i8* align 8 %277, i64 24, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* align 8 %277, i8 0, i64 24, i1 false) #8
  %278 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %260, i64 0, i32 6
  %279 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %261, i64 0, i32 6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %278, i8* align 8 %279, i64 24, i1 false) #8
  %280 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %261, i64 1
  %281 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %177, align 8
  %282 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %281, i64 1
  store %"struct.jxl::ExtraChannelInfo"* %282, %"struct.jxl::ExtraChannelInfo"** %177, align 8
  %283 = icmp eq %"struct.jxl::ExtraChannelInfo"* %280, %249
  br i1 %283, label %284, label %259

284:                                              ; preds = %259
  %285 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %282 to i64
  %286 = bitcast %"struct.jxl::ExtraChannelInfo"** %176 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = load i64, i64* %180, align 8
  %289 = bitcast %"struct.jxl::ExtraChannelInfo"** %177 to i64*
  br label %290

290:                                              ; preds = %251, %284
  %291 = phi i64* [ %255, %251 ], [ %289, %284 ]
  %292 = phi i64 [ %256, %251 ], [ %285, %284 ]
  %293 = phi i64 [ %252, %251 ], [ %288, %284 ]
  %294 = phi i64* [ %254, %251 ], [ %286, %284 ]
  %295 = phi i64 [ %253, %251 ], [ %287, %284 ]
  %296 = load i64, i64* %181, align 8
  store i64 %295, i64* %181, align 8
  store i64 %296, i64* %294, align 8
  store i64 %292, i64* %180, align 8
  store i64 %293, i64* %291, align 8
  %297 = load i64, i64* %191, align 8
  %298 = bitcast %"struct.jxl::ExtraChannelInfo"** %178 to i64*
  %299 = load i64, i64* %298, align 8
  store i64 %299, i64* %191, align 8
  store i64 %297, i64* %298, align 8
  %300 = bitcast %"struct.std::__1::__split_buffer"* %4 to i64*
  store i64 %296, i64* %300, align 8
  %301 = inttoptr i64 %296 to %"struct.jxl::ExtraChannelInfo"*
  %302 = inttoptr i64 %293 to %"struct.jxl::ExtraChannelInfo"*
  %303 = icmp eq %"struct.jxl::ExtraChannelInfo"* %302, %301
  br i1 %303, label %314, label %304

304:                                              ; preds = %290, %304
  %305 = phi %"struct.jxl::ExtraChannelInfo"* [ %310, %304 ], [ %302, %290 ]
  %306 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %305, i64 -1
  store %"struct.jxl::ExtraChannelInfo"* %306, %"struct.jxl::ExtraChannelInfo"** %177, align 8
  %307 = bitcast %"struct.jxl::ExtraChannelInfo"* %306 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %308 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %307, align 8
  %309 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %308, align 8
  call void %309(%"struct.jxl::ExtraChannelInfo"* %306) #8
  %310 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %177, align 8
  %311 = icmp eq %"struct.jxl::ExtraChannelInfo"* %310, %301
  br i1 %311, label %312, label %304

312:                                              ; preds = %304
  %313 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %175, align 8
  br label %314

314:                                              ; preds = %312, %290
  %315 = phi %"struct.jxl::ExtraChannelInfo"* [ %313, %312 ], [ %301, %290 ]
  %316 = icmp eq %"struct.jxl::ExtraChannelInfo"* %315, null
  br i1 %316, label %319, label %317

317:                                              ; preds = %314
  %318 = bitcast %"struct.jxl::ExtraChannelInfo"* %315 to i8*
  call void @_ZdlPv(i8* %318) #9
  br label %319

319:                                              ; preds = %314, %317
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %174) #8
  br label %320

320:                                              ; preds = %43, %169, %319
  %321 = phi %"struct.jxl::ExtraChannelInfo"* [ %1, %43 ], [ %1, %169 ], [ %219, %319 ]
  ret %"struct.jxl::ExtraChannelInfo"* %321
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl16ExtraChannelInfoD2Ev(%"struct.jxl::ExtraChannelInfo"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 5
  %4 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  tail call void @_ZdlPv(i8* %10) #9
  br label %11

11:                                               ; preds = %1, %8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl13ImageMetadataD2Ev(%"struct.jxl::ImageMetadata"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ImageMetadataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 17
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %5 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %4, align 8
  %6 = icmp eq %"struct.jxl::ExtraChannelInfo"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.jxl::ExtraChannelInfo"* %5 to i8*
  %9 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 17, i32 0, i32 1
  %10 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %9, align 8
  %11 = icmp eq %"struct.jxl::ExtraChannelInfo"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"struct.jxl::ExtraChannelInfo"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %13, i64 -1
  %15 = bitcast %"struct.jxl::ExtraChannelInfo"* %14 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %16 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %15, align 8
  %17 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %16, align 8
  tail call void %17(%"struct.jxl::ExtraChannelInfo"* %14) #8
  %18 = icmp eq %"struct.jxl::ExtraChannelInfo"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"struct.jxl::ExtraChannelInfo"* %5, %"struct.jxl::ExtraChannelInfo"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #9
  br label %24

24:                                               ; preds = %1, %22
  %25 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 7, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %25, align 8
  %26 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  store i8* null, i8** %26, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %30, label %29

29:                                               ; preds = %24
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %27) #8
  br label %30

30:                                               ; preds = %24, %29
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl13ImageMetadataD0Ev(%"struct.jxl::ImageMetadata"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ImageMetadataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 17
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %5 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %4, align 8
  %6 = icmp eq %"struct.jxl::ExtraChannelInfo"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.jxl::ExtraChannelInfo"* %5 to i8*
  %9 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 17, i32 0, i32 1
  %10 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %9, align 8
  %11 = icmp eq %"struct.jxl::ExtraChannelInfo"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"struct.jxl::ExtraChannelInfo"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %13, i64 -1
  %15 = bitcast %"struct.jxl::ExtraChannelInfo"* %14 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %16 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %15, align 8
  %17 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %16, align 8
  tail call void %17(%"struct.jxl::ExtraChannelInfo"* %14) #8
  %18 = icmp eq %"struct.jxl::ExtraChannelInfo"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"struct.jxl::ExtraChannelInfo"* %5, %"struct.jxl::ExtraChannelInfo"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #9
  br label %24

24:                                               ; preds = %22, %1
  %25 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 7, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %25, align 8
  %26 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %0, i64 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  store i8* null, i8** %26, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %30, label %29

29:                                               ; preds = %24
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %27) #8
  br label %30

30:                                               ; preds = %24, %29
  %31 = bitcast %"struct.jxl::ImageMetadata"* %0 to i8*
  tail call void @_ZdlPv(i8* %31) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl13ImageMetadata4NameEv(%"struct.jxl::ImageMetadata"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8BitDepthD0Ev(%"struct.jxl::BitDepth"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"struct.jxl::BitDepth"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl8BitDepth4NameEv(%"struct.jxl::BitDepth"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ToneMappingD0Ev(%"struct.jxl::ToneMapping"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"struct.jxl::ToneMapping"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl11ToneMapping4NameEv(%"struct.jxl::ToneMapping"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl19CustomTransformDataD2Ev(%"struct.jxl::CustomTransformData"*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl19CustomTransformDataD0Ev(%"struct.jxl::CustomTransformData"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"struct.jxl::CustomTransformData"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl19CustomTransformData4NameEv(%"struct.jxl::CustomTransformData"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18OpsinInverseMatrixD0Ev(%"struct.jxl::OpsinInverseMatrix"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"struct.jxl::OpsinInverseMatrix"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl18OpsinInverseMatrix4NameEv(%"struct.jxl::OpsinInverseMatrix"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.13, i64 0, i64 0)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl16ExtraChannelInfoD0Ev(%"struct.jxl::ExtraChannelInfo"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %0, i64 0, i32 5
  %4 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  tail call void @_ZdlPv(i8* %10) #9
  br label %11

11:                                               ; preds = %1, %8
  %12 = bitcast %"struct.jxl::ExtraChannelInfo"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl16ExtraChannelInfo4NameEv(%"struct.jxl::ExtraChannelInfo"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14, i64 0, i64 0)
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl16ExtraChannelInfoENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::ExtraChannelInfo"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::ExtraChannelInfo"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 96
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %31, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::ExtraChannelInfo"*
  %14 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %29, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %14 to i64
  br label %29

18:                                               ; preds = %12, %18
  %19 = phi %"struct.jxl::ExtraChannelInfo"* [ %27, %18 ], [ %13, %12 ]
  %20 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %19, i64 0, i32 0
  %21 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %19, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %22 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %19, i64 0, i32 3
  %23 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %22, i64 0, i32 0
  %24 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %22, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %24, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %23) #8
  %25 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %19, i64 0, i32 5
  %26 = bitcast %"class.std::__1::basic_string"* %25 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %20) #8
  %27 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %19, i64 1
  %28 = icmp eq %"struct.jxl::ExtraChannelInfo"* %27, %14
  br i1 %28, label %16, label %18

29:                                               ; preds = %12, %16
  %30 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %30, i64* %7, align 8
  br label %125

31:                                               ; preds = %2
  %32 = bitcast %"class.std::__1::vector"* %0 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %8, %33
  %35 = sdiv exact i64 %34, 96
  %36 = add i64 %35, %1
  %37 = icmp ugt i64 %36, 192153584101141162
  br i1 %37, label %38, label %40

38:                                               ; preds = %31
  %39 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %39) #10
  unreachable

40:                                               ; preds = %31
  %41 = sub i64 %5, %33
  %42 = sdiv exact i64 %41, 96
  %43 = icmp ult i64 %42, 96076792050570581
  br i1 %43, label %44, label %49

44:                                               ; preds = %40
  %45 = shl nsw i64 %42, 1
  %46 = icmp ult i64 %45, %36
  %47 = select i1 %46, i64 %36, i64 %45
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %54, label %49

49:                                               ; preds = %40, %44
  %50 = phi i64 [ %47, %44 ], [ 192153584101141162, %40 ]
  %51 = mul i64 %50, 96
  %52 = tail call i8* @_Znwm(i64 %51) #9
  %53 = bitcast i8* %52 to %"struct.jxl::ExtraChannelInfo"*
  br label %54

54:                                               ; preds = %44, %49
  %55 = phi i64 [ %50, %49 ], [ 0, %44 ]
  %56 = phi %"struct.jxl::ExtraChannelInfo"* [ %53, %49 ], [ null, %44 ]
  %57 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %56, i64 %35
  %58 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %56, i64 %55
  %59 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %57, i64 %1
  br label %60

60:                                               ; preds = %54, %60
  %61 = phi %"struct.jxl::ExtraChannelInfo"* [ %69, %60 ], [ %57, %54 ]
  %62 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %61, i64 0, i32 0
  %63 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %61, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %63, align 8
  %64 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %61, i64 0, i32 3
  %65 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %64, i64 0, i32 0
  %66 = getelementptr inbounds %"struct.jxl::BitDepth", %"struct.jxl::BitDepth"* %64, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %66, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %65) #8
  %67 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %61, i64 0, i32 5
  %68 = bitcast %"class.std::__1::basic_string"* %67 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 24, i1 false) #8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %62) #8
  %69 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %61, i64 1
  %70 = icmp eq %"struct.jxl::ExtraChannelInfo"* %59, %69
  br i1 %70, label %71, label %60

71:                                               ; preds = %60
  %72 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %58 to i64
  %73 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %59 to i64
  %74 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %75 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %74, align 8
  %76 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %6, align 8
  %77 = icmp eq %"struct.jxl::ExtraChannelInfo"* %76, %75
  br i1 %77, label %78, label %80

78:                                               ; preds = %71
  %79 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %75 to i64
  br label %107

80:                                               ; preds = %71, %80
  %81 = phi %"struct.jxl::ExtraChannelInfo"* [ %102, %80 ], [ %57, %71 ]
  %82 = phi %"struct.jxl::ExtraChannelInfo"* [ %83, %80 ], [ %76, %71 ]
  %83 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %82, i64 -1
  %84 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %81, i64 -1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %84, align 8
  %85 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %81, i64 -1, i32 1
  %86 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %82, i64 -1, i32 1
  %87 = bitcast i8* %86 to i64*
  %88 = bitcast i8* %85 to i64*
  %89 = load i64, i64* %87, align 8
  store i64 %89, i64* %88, align 8
  %90 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %81, i64 -1, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %90, align 8
  %91 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %81, i64 -1, i32 3, i32 1
  %92 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %82, i64 -1, i32 3, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 12, i1 false) #8
  %93 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %81, i64 -1, i32 4
  %94 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %82, i64 -1, i32 4
  %95 = load i32, i32* %94, align 8
  store i32 %95, i32* %93, align 8
  %96 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %81, i64 -1, i32 5
  %97 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %82, i64 -1, i32 5
  %98 = bitcast %"class.std::__1::basic_string"* %96 to i8*
  %99 = bitcast %"class.std::__1::basic_string"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %99, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 24, i1 false) #8
  %100 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %81, i64 -1, i32 6
  %101 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %82, i64 -1, i32 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 24, i1 false) #8
  %102 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %81, i64 -1
  %103 = icmp eq %"struct.jxl::ExtraChannelInfo"* %83, %75
  br i1 %103, label %104, label %80

104:                                              ; preds = %80
  %105 = load i64, i64* %32, align 8
  %106 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %6, align 8
  br label %107

107:                                              ; preds = %78, %104
  %108 = phi %"struct.jxl::ExtraChannelInfo"* [ %75, %78 ], [ %106, %104 ]
  %109 = phi %"struct.jxl::ExtraChannelInfo"* [ %57, %78 ], [ %102, %104 ]
  %110 = phi i64 [ %79, %78 ], [ %105, %104 ]
  %111 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %109 to i64
  store i64 %111, i64* %32, align 8
  store i64 %73, i64* %7, align 8
  store i64 %72, i64* %4, align 8
  %112 = inttoptr i64 %110 to %"struct.jxl::ExtraChannelInfo"*
  %113 = icmp eq %"struct.jxl::ExtraChannelInfo"* %108, %112
  br i1 %113, label %121, label %114

114:                                              ; preds = %107, %114
  %115 = phi %"struct.jxl::ExtraChannelInfo"* [ %116, %114 ], [ %108, %107 ]
  %116 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %115, i64 -1
  %117 = bitcast %"struct.jxl::ExtraChannelInfo"* %116 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %118 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %117, align 8
  %119 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %118, align 8
  tail call void %119(%"struct.jxl::ExtraChannelInfo"* %116) #8
  %120 = icmp eq %"struct.jxl::ExtraChannelInfo"* %116, %112
  br i1 %120, label %121, label %114

121:                                              ; preds = %114, %107
  %122 = icmp eq i64 %110, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %121
  %124 = inttoptr i64 %110 to i8*
  tail call void @_ZdlPv(i8* %124) #9
  br label %125

125:                                              ; preds = %123, %121, %29
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIN3jxl16ExtraChannelInfoERNS_9allocatorIS2_EEE9push_backERKS2_(%"struct.std::__1::__split_buffer"*, %"struct.jxl::ExtraChannelInfo"* dereferenceable(96)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %5, align 8
  %7 = icmp eq %"struct.jxl::ExtraChannelInfo"* %4, %6
  %8 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %6 to i64
  br i1 %7, label %9, label %136

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %11 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %13 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %12, align 8
  %14 = icmp ugt %"struct.jxl::ExtraChannelInfo"* %11, %13
  %15 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %13 to i64
  br i1 %14, label %16, label %62

16:                                               ; preds = %9
  %17 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %11 to i64
  %18 = sub i64 %17, %15
  %19 = sdiv exact i64 %18, 96
  %20 = add nsw i64 %19, 1
  %21 = sdiv i64 %20, -2
  %22 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %11, i64 %21
  %23 = icmp eq %"struct.jxl::ExtraChannelInfo"* %11, %4
  br i1 %23, label %58, label %24

24:                                               ; preds = %16, %46
  %25 = phi %"struct.jxl::ExtraChannelInfo"* [ %54, %46 ], [ %22, %16 ]
  %26 = phi %"struct.jxl::ExtraChannelInfo"* [ %53, %46 ], [ %11, %16 ]
  %27 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %25, i64 0, i32 1
  %28 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %26, i64 0, i32 1
  %29 = bitcast i8* %28 to i64*
  %30 = bitcast i8* %27 to i64*
  %31 = load i64, i64* %29, align 8
  store i64 %31, i64* %30, align 8
  %32 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %25, i64 0, i32 3, i32 1
  %33 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %26, i64 0, i32 3, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 12, i1 false) #8
  %34 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %26, i64 0, i32 4
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %25, i64 0, i32 4
  store i32 %35, i32* %36, align 8
  %37 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %25, i64 0, i32 5
  %38 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %26, i64 0, i32 5
  %39 = bitcast %"class.std::__1::basic_string"* %37 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  %41 = load i8, i8* %40, align 1
  %42 = icmp slt i8 %41, 0
  br i1 %42, label %43, label %46

43:                                               ; preds = %24
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  tail call void @_ZdlPv(i8* %45) #9
  br label %46

46:                                               ; preds = %43, %24
  %47 = bitcast %"class.std::__1::basic_string"* %37 to i8*
  %48 = bitcast %"class.std::__1::basic_string"* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 24, i1 false) #8
  %49 = bitcast %"class.std::__1::basic_string"* %38 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %49, i64 0, i32 1, i32 0
  store i8 0, i8* %50, align 1
  store i8 0, i8* %48, align 1
  %51 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %25, i64 0, i32 6
  %52 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %26, i64 0, i32 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 24, i1 false) #8
  %53 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %26, i64 1
  %54 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %25, i64 1
  %55 = icmp eq %"struct.jxl::ExtraChannelInfo"* %53, %4
  br i1 %55, label %56, label %24

56:                                               ; preds = %46
  %57 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %10, align 8
  br label %58

58:                                               ; preds = %56, %16
  %59 = phi %"struct.jxl::ExtraChannelInfo"* [ %4, %16 ], [ %57, %56 ]
  %60 = phi %"struct.jxl::ExtraChannelInfo"* [ %22, %16 ], [ %54, %56 ]
  store %"struct.jxl::ExtraChannelInfo"* %60, %"struct.jxl::ExtraChannelInfo"** %3, align 8
  %61 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %59, i64 %21
  store %"struct.jxl::ExtraChannelInfo"* %61, %"struct.jxl::ExtraChannelInfo"** %10, align 8
  br label %136

62:                                               ; preds = %9
  %63 = bitcast %"struct.jxl::ExtraChannelInfo"** %5 to i64*
  %64 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %65 = sub i64 %8, %15
  %66 = sdiv exact i64 %65, 96
  %67 = shl nsw i64 %66, 1
  %68 = icmp eq i64 %65, 0
  %69 = select i1 %68, i64 1, i64 %67
  %70 = icmp ugt i64 %69, 192153584101141162
  br i1 %70, label %71, label %72

71:                                               ; preds = %62
  tail call void @abort() #10
  unreachable

72:                                               ; preds = %62
  %73 = lshr i64 %69, 2
  %74 = mul i64 %69, 96
  %75 = tail call i8* @_Znwm(i64 %74) #9
  %76 = bitcast i8* %75 to %"struct.jxl::ExtraChannelInfo"*
  %77 = ptrtoint i8* %75 to i64
  %78 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %76, i64 %73
  %79 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %78 to i64
  %80 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %76, i64 %69
  %81 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %80 to i64
  %82 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %11 to i64
  %83 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %4 to i64
  %84 = sub i64 %83, %82
  %85 = sdiv exact i64 %84, 96
  %86 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %78, i64 %85
  %87 = icmp eq i64 %84, 0
  br i1 %87, label %117, label %88

88:                                               ; preds = %72, %88
  %89 = phi %"struct.jxl::ExtraChannelInfo"* [ %109, %88 ], [ %78, %72 ]
  %90 = phi %"struct.jxl::ExtraChannelInfo"* [ %110, %88 ], [ %11, %72 ]
  %91 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %89, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %91, align 8
  %92 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %89, i64 0, i32 1
  %93 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %90, i64 0, i32 1
  %94 = bitcast i8* %93 to i64*
  %95 = bitcast i8* %92 to i64*
  %96 = load i64, i64* %94, align 8
  store i64 %96, i64* %95, align 8
  %97 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %89, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %97, align 8
  %98 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %89, i64 0, i32 3, i32 1
  %99 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %90, i64 0, i32 3, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %99, i64 12, i1 false) #8
  %100 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %89, i64 0, i32 4
  %101 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %90, i64 0, i32 4
  %102 = load i32, i32* %101, align 8
  store i32 %102, i32* %100, align 8
  %103 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %89, i64 0, i32 5
  %104 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %90, i64 0, i32 5
  %105 = bitcast %"class.std::__1::basic_string"* %103 to i8*
  %106 = bitcast %"class.std::__1::basic_string"* %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %106, i8 0, i64 24, i1 false) #8
  %107 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %89, i64 0, i32 6
  %108 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %90, i64 0, i32 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %107, i8* align 8 %108, i64 24, i1 false) #8
  %109 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %89, i64 1
  %110 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %90, i64 1
  %111 = icmp eq %"struct.jxl::ExtraChannelInfo"* %86, %109
  br i1 %111, label %112, label %88

112:                                              ; preds = %88
  %113 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %86 to i64
  %114 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %12, align 8
  %115 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %10, align 8
  %116 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %3, align 8
  br label %117

117:                                              ; preds = %72, %112
  %118 = phi %"struct.jxl::ExtraChannelInfo"* [ %116, %112 ], [ %4, %72 ]
  %119 = phi %"struct.jxl::ExtraChannelInfo"* [ %115, %112 ], [ %11, %72 ]
  %120 = phi %"struct.jxl::ExtraChannelInfo"* [ %114, %112 ], [ %13, %72 ]
  %121 = phi i64 [ %113, %112 ], [ %79, %72 ]
  store i64 %77, i64* %64, align 8
  %122 = bitcast %"struct.jxl::ExtraChannelInfo"** %10 to i64*
  store i64 %79, i64* %122, align 8
  %123 = bitcast %"struct.jxl::ExtraChannelInfo"** %3 to i64*
  store i64 %121, i64* %123, align 8
  store i64 %81, i64* %63, align 8
  %124 = icmp eq %"struct.jxl::ExtraChannelInfo"* %118, %119
  br i1 %124, label %132, label %125

125:                                              ; preds = %117, %125
  %126 = phi %"struct.jxl::ExtraChannelInfo"* [ %127, %125 ], [ %118, %117 ]
  %127 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %126, i64 -1
  %128 = bitcast %"struct.jxl::ExtraChannelInfo"* %127 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %129 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %128, align 8
  %130 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %129, align 8
  tail call void %130(%"struct.jxl::ExtraChannelInfo"* %127) #8
  %131 = icmp eq %"struct.jxl::ExtraChannelInfo"* %127, %119
  br i1 %131, label %132, label %125

132:                                              ; preds = %125, %117
  %133 = icmp eq %"struct.jxl::ExtraChannelInfo"* %120, null
  br i1 %133, label %136, label %134

134:                                              ; preds = %132
  %135 = bitcast %"struct.jxl::ExtraChannelInfo"* %120 to i8*
  tail call void @_ZdlPv(i8* %135) #9
  br label %136

136:                                              ; preds = %134, %132, %58, %2
  %137 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %3, align 8
  %138 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %137, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %138, align 8
  %139 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %137, i64 0, i32 1
  %140 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 1
  %141 = bitcast i8* %140 to i64*
  %142 = bitcast i8* %139 to i64*
  %143 = load i64, i64* %141, align 8
  store i64 %143, i64* %142, align 8
  %144 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %137, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %144, align 8
  %145 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %137, i64 0, i32 3, i32 1
  %146 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 3, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %145, i8* align 8 %146, i64 12, i1 false) #8
  %147 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %137, i64 0, i32 4
  %148 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 4
  %149 = load i32, i32* %148, align 8
  store i32 %149, i32* %147, align 8
  %150 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %137, i64 0, i32 5
  %151 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 5
  %152 = bitcast %"class.std::__1::basic_string"* %151 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %153 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %152, i64 0, i32 1, i32 0
  %154 = load i8, i8* %153, align 1
  %155 = icmp slt i8 %154, 0
  br i1 %155, label %159, label %156

156:                                              ; preds = %136
  %157 = bitcast %"class.std::__1::basic_string"* %150 to i8*
  %158 = bitcast %"class.std::__1::basic_string"* %151 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %157, i8* align 8 %158, i64 24, i1 false) #8
  br label %164

159:                                              ; preds = %136
  %160 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %151, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %161 = load i8*, i8** %160, align 8
  %162 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %163 = load i64, i64* %162, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %150, i8* %161, i64 %163) #8
  br label %164

164:                                              ; preds = %156, %159
  %165 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %137, i64 0, i32 6
  %166 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 0, i32 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %165, i8* align 8 %166, i64 24, i1 false) #8
  %167 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %3, align 8
  %168 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %167, i64 1
  store %"struct.jxl::ExtraChannelInfo"* %168, %"struct.jxl::ExtraChannelInfo"** %3, align 8
  ret void
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3jxl7Visitor4EnumINS_12ExtraChannelEEENS_6StatusET_PS4_: argument 0"}
!5 = distinct !{!5, !"_ZN3jxl7Visitor4EnumINS_12ExtraChannelEEENS_6StatusET_PS4_"}
!6 = !{!7, !4}
!7 = distinct !{!7, !8, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!8 = distinct !{!8, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!11 = distinct !{!11, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN3jxlL15VisitNameStringEPNS_7VisitorEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE: argument 0"}
!14 = distinct !{!14, !"_ZN3jxlL15VisitNameStringEPNS_7VisitorEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!17 = distinct !{!17, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!18 = !{!16, !13}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!21 = distinct !{!21, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!24 = distinct !{!24, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
