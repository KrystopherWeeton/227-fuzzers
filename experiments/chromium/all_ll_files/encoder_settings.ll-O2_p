; ModuleID = '../../third_party/webrtc/call/adaptation/encoder_settings.cc'
source_filename = "../../third_party/webrtc/call/adaptation/encoder_settings.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::EncoderSettings" = type { %"struct.webrtc::VideoEncoder::EncoderInfo", %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoCodec" }
%"struct.webrtc::VideoEncoder::EncoderInfo" = type { %"struct.webrtc::VideoEncoder::ScalingSettings", i32, i8, i8, %"class.std::__1::basic_string", i8, i8, i8, [5 x %"class.absl::InlinedVector"], %"class.std::__1::vector", i8, %"class.absl::InlinedVector.10" }
%"struct.webrtc::VideoEncoder::ScalingSettings" = type { %"class.absl::optional", i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.webrtc::VideoEncoder::QpThresholds" }
%"struct.webrtc::VideoEncoder::QpThresholds" = type { i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.0 }
%union.anon.0 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.4" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.4" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Allocated" }
%"struct.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Allocated" = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"*, %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"*, %"class.std::__1::__compressed_pair.5" }
%"struct.webrtc::VideoEncoder::ResolutionBitrateLimits" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* }
%"class.absl::InlinedVector.10" = type { %"class.absl::inlined_vector_internal::Storage.11" }
%"class.absl::inlined_vector_internal::Storage.11" = type { %"class.absl::container_internal::CompressedTuple.12", %"union.absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type, 5, std::__1::allocator<webrtc::VideoFrameBuffer::Type> >::Data" }
%"class.absl::container_internal::CompressedTuple.12" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.13" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.13" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.4" }
%"union.absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type, 5, std::__1::allocator<webrtc::VideoFrameBuffer::Type> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type, 5, std::__1::allocator<webrtc::VideoFrameBuffer::Type> >::Allocated", [8 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type, 5, std::__1::allocator<webrtc::VideoFrameBuffer::Type> >::Allocated" = type { i32*, i64 }
%"class.webrtc::VideoEncoderConfig" = type <{ i32, [4 x i8], %"struct.webrtc::SdpVideoFormat", %"class.rtc::scoped_refptr", %"class.std::__1::vector.25", i32, [4 x i8], %"class.rtc::scoped_refptr.32", i32, i32, double, %"class.std::__1::vector.33", i64, i8, i8, [6 x i8] }>
%"struct.webrtc::SdpVideoFormat" = type { %"class.std::__1::basic_string", %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.17", %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { i64 }
%"class.rtc::scoped_refptr" = type { %"class.webrtc::VideoEncoderConfig::VideoStreamFactoryInterface"* }
%"class.webrtc::VideoEncoderConfig::VideoStreamFactoryInterface" = type { %"class.rtc::RefCountInterface" }
%"class.rtc::RefCountInterface" = type { i32 (...)** }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"struct.webrtc::SpatialLayer"*, %"struct.webrtc::SpatialLayer"*, %"class.std::__1::__compressed_pair.27" }
%"struct.webrtc::SpatialLayer" = type { i16, i16, float, i8, i32, i32, i32, i32, i8 }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.webrtc::SpatialLayer"* }
%"class.rtc::scoped_refptr.32" = type { %"class.webrtc::VideoEncoderConfig::EncoderSpecificSettings"* }
%"class.webrtc::VideoEncoderConfig::EncoderSpecificSettings" = type { %"class.rtc::RefCountInterface" }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { %"struct.webrtc::VideoStream"*, %"struct.webrtc::VideoStream"*, %"class.std::__1::__compressed_pair.50" }
%"struct.webrtc::VideoStream" = type <{ i64, i64, i32, i32, i32, i32, double, i32, [4 x i8], %"class.absl::optional.35", %"class.absl::optional.40", %"class.absl::optional.45", i8, [7 x i8] }>
%"class.absl::optional.35" = type { %"class.absl::optional_internal::optional_data.36" }
%"class.absl::optional_internal::optional_data.36" = type { %"class.absl::optional_internal::optional_data_base.37" }
%"class.absl::optional_internal::optional_data_base.37" = type { %"class.absl::optional_internal::optional_data_dtor_base.38" }
%"class.absl::optional_internal::optional_data_dtor_base.38" = type { i8, %union.anon.39 }
%union.anon.39 = type { i64 }
%"class.absl::optional.40" = type { %"class.absl::optional_internal::optional_data.41" }
%"class.absl::optional_internal::optional_data.41" = type { %"class.absl::optional_internal::optional_data_base.42" }
%"class.absl::optional_internal::optional_data_base.42" = type { %"class.absl::optional_internal::optional_data_dtor_base.43" }
%"class.absl::optional_internal::optional_data_dtor_base.43" = type { i8, %union.anon.44 }
%union.anon.44 = type { double }
%"class.absl::optional.45" = type { %"class.absl::optional_internal::optional_data.46" }
%"class.absl::optional_internal::optional_data.46" = type { %"class.absl::optional_internal::optional_data_base.47" }
%"class.absl::optional_internal::optional_data_base.47" = type { %"class.absl::optional_internal::optional_data_dtor_base.48" }
%"class.absl::optional_internal::optional_data_dtor_base.48" = type { i8, %union.anon.49 }
%union.anon.49 = type { %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"struct.webrtc::VideoStream"* }
%"class.webrtc::VideoCodec" = type { i32, i16, i16, i32, i32, i32, i32, i8, i32, i8, [3 x %"struct.webrtc::SpatialLayer"], [5 x %"struct.webrtc::SpatialLayer"], i32, i8, %"class.absl::optional.55", %"struct.webrtc::VideoCodec::TimingFrameTriggerThresholds", i8, %"union.webrtc::VideoCodecUnion", %"class.std::__1::basic_string" }
%"class.absl::optional.55" = type { %"class.absl::optional_internal::optional_data.56" }
%"class.absl::optional_internal::optional_data.56" = type { %"class.absl::optional_internal::optional_data_base.57" }
%"class.absl::optional_internal::optional_data_base.57" = type { %"class.absl::optional_internal::optional_data_dtor_base.58" }
%"class.absl::optional_internal::optional_data_dtor_base.58" = type { i8, %union.anon.59 }
%union.anon.59 = type { i32 }
%"struct.webrtc::VideoCodec::TimingFrameTriggerThresholds" = type { i64, i16 }
%"union.webrtc::VideoCodecUnion" = type { %"struct.webrtc::VideoCodecVP9" }
%"struct.webrtc::VideoCodecVP9" = type { i32, i8, i8, i8, i32, i8, i8, i8, i8, i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.absl::optional.60" = type { %"class.absl::optional_internal::optional_data.61" }
%"class.absl::optional_internal::optional_data.61" = type { %"class.absl::optional_internal::optional_data_base.62" }
%"class.absl::optional_internal::optional_data_base.62" = type { %"class.absl::optional_internal::optional_data_dtor_base.63" }
%"class.absl::optional_internal::optional_data_dtor_base.63" = type { i8, %union.anon.64 }
%union.anon.64 = type { %"class.webrtc::EncoderSettings" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN6webrtc12VideoEncoder11EncoderInfoaSERKS1_ = comdat any

$_ZN6webrtc18VideoEncoderConfigaSEOS0_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE6AssignINS0_20IteratorValueAdapterIS4_PKhEEEEvT_m = comdat any

$_ZNSt3__16vectorIN6webrtc12VideoEncoder23ResolutionBitrateLimitsENS_9allocatorIS3_EEE6assignIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIN6webrtc16VideoFrameBuffer4TypeELm5ENSt3__19allocatorIS4_EEE6AssignINS0_20IteratorValueAdapterIS7_PKS4_EEEEvT_m = comdat any

@_ZN6webrtc15EncoderSettingsC1ENS_12VideoEncoder11EncoderInfoENS_18VideoEncoderConfigENS_10VideoCodecE = hidden unnamed_addr alias void (%"class.webrtc::EncoderSettings"*, %"struct.webrtc::VideoEncoder::EncoderInfo"*, %"class.webrtc::VideoEncoderConfig"*, %"class.webrtc::VideoCodec"*), void (%"class.webrtc::EncoderSettings"*, %"struct.webrtc::VideoEncoder::EncoderInfo"*, %"class.webrtc::VideoEncoderConfig"*, %"class.webrtc::VideoCodec"*)* @_ZN6webrtc15EncoderSettingsC2ENS_12VideoEncoder11EncoderInfoENS_18VideoEncoderConfigENS_10VideoCodecE
@_ZN6webrtc15EncoderSettingsC1ERKS0_ = hidden unnamed_addr alias void (%"class.webrtc::EncoderSettings"*, %"class.webrtc::EncoderSettings"*), void (%"class.webrtc::EncoderSettings"*, %"class.webrtc::EncoderSettings"*)* @_ZN6webrtc15EncoderSettingsC2ERKS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15EncoderSettingsC2ENS_12VideoEncoder11EncoderInfoENS_18VideoEncoderConfigENS_10VideoCodecE(%"class.webrtc::EncoderSettings"*, %"struct.webrtc::VideoEncoder::EncoderInfo"*, %"class.webrtc::VideoEncoderConfig"*, %"class.webrtc::VideoCodec"* nocapture) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %0, i64 0, i32 0
  tail call void @_ZN6webrtc12VideoEncoder11EncoderInfoC1ERKS1_(%"struct.webrtc::VideoEncoder::EncoderInfo"* %5, %"struct.webrtc::VideoEncoder::EncoderInfo"* dereferenceable(240) %1) #11
  %6 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %0, i64 0, i32 1
  tail call void @_ZN6webrtc18VideoEncoderConfigC1EOS0_(%"class.webrtc::VideoEncoderConfig"* %6, %"class.webrtc::VideoEncoderConfig"* dereferenceable(160) %2) #11
  %7 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %0, i64 0, i32 2
  %8 = bitcast %"class.webrtc::VideoCodec"* %7 to i8*
  %9 = bitcast %"class.webrtc::VideoCodec"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 352, i1 false) #11
  %10 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %0, i64 0, i32 2, i32 18
  %11 = getelementptr inbounds %"class.webrtc::VideoCodec", %"class.webrtc::VideoCodec"* %3, i64 0, i32 18
  %12 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  %13 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 24, i1 false) #11
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 24, i1 false) #11
  ret void
}

declare void @_ZN6webrtc12VideoEncoder11EncoderInfoC1ERKS1_(%"struct.webrtc::VideoEncoder::EncoderInfo"*, %"struct.webrtc::VideoEncoder::EncoderInfo"* dereferenceable(240)) unnamed_addr #1

declare void @_ZN6webrtc18VideoEncoderConfigC1EOS0_(%"class.webrtc::VideoEncoderConfig"*, %"class.webrtc::VideoEncoderConfig"* dereferenceable(160)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15EncoderSettingsC2ERKS0_(%"class.webrtc::EncoderSettings"*, %"class.webrtc::EncoderSettings"* dereferenceable(776)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %1, i64 0, i32 0
  tail call void @_ZN6webrtc12VideoEncoder11EncoderInfoC1ERKS1_(%"struct.webrtc::VideoEncoder::EncoderInfo"* %3, %"struct.webrtc::VideoEncoder::EncoderInfo"* dereferenceable(240) %4) #11
  %5 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %1, i64 0, i32 1
  tail call void @_ZN6webrtc18VideoEncoderConfigC1ERKS0_(%"class.webrtc::VideoEncoderConfig"* %5, %"class.webrtc::VideoEncoderConfig"* dereferenceable(160) %6) #11
  %7 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %0, i64 0, i32 2
  %8 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %1, i64 0, i32 2
  %9 = bitcast %"class.webrtc::VideoCodec"* %7 to i8*
  %10 = bitcast %"class.webrtc::VideoCodec"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 352, i1 false) #11
  %11 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %0, i64 0, i32 2, i32 18
  %12 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %1, i64 0, i32 2, i32 18
  %13 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %13, i64 0, i32 1, i32 0
  %15 = load i8, i8* %14, align 1
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %2
  %18 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  %19 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 24, i1 false) #11
  br label %25

20:                                               ; preds = %2
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %1, i64 0, i32 2, i32 18, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %11, i8* %22, i64 %24) #11
  br label %25

25:                                               ; preds = %17, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(776) %"class.webrtc::EncoderSettings"* @_ZN6webrtc15EncoderSettingsaSERKS0_(%"class.webrtc::EncoderSettings"* returned, %"class.webrtc::EncoderSettings"* dereferenceable(776)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.webrtc::VideoEncoderConfig", align 8
  %4 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %1, i64 0, i32 0
  %5 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %0, i64 0, i32 0
  %6 = tail call dereferenceable(240) %"struct.webrtc::VideoEncoder::EncoderInfo"* @_ZN6webrtc12VideoEncoder11EncoderInfoaSERKS1_(%"struct.webrtc::VideoEncoder::EncoderInfo"* %5, %"struct.webrtc::VideoEncoder::EncoderInfo"* dereferenceable(240) %4)
  %7 = bitcast %"class.webrtc::VideoEncoderConfig"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %7) #11
  %8 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %1, i64 0, i32 1
  call void @_ZN6webrtc18VideoEncoderConfigC1ERKS0_(%"class.webrtc::VideoEncoderConfig"* nonnull %3, %"class.webrtc::VideoEncoderConfig"* dereferenceable(160) %8) #11
  %9 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %0, i64 0, i32 1
  %10 = call dereferenceable(160) %"class.webrtc::VideoEncoderConfig"* @_ZN6webrtc18VideoEncoderConfigaSEOS0_(%"class.webrtc::VideoEncoderConfig"* %9, %"class.webrtc::VideoEncoderConfig"* nonnull dereferenceable(160) %3)
  call void @_ZN6webrtc18VideoEncoderConfigD1Ev(%"class.webrtc::VideoEncoderConfig"* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %7) #11
  %11 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %1, i64 0, i32 2
  %12 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %0, i64 0, i32 2
  %13 = bitcast %"class.webrtc::VideoCodec"* %12 to i8*
  %14 = bitcast %"class.webrtc::VideoCodec"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 352, i1 false) #11
  %15 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %0, i64 0, i32 2, i32 18
  %16 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %1, i64 0, i32 2, i32 18
  %17 = icmp eq %"class.webrtc::EncoderSettings"* %0, %1
  br i1 %17, label %47, label %18

18:                                               ; preds = %2
  %19 = bitcast %"class.std::__1::basic_string"* %15 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  %23 = bitcast %"class.std::__1::basic_string"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = load i8, i8* %24, align 1
  %26 = icmp slt i8 %25, 0
  br i1 %22, label %37, label %27

27:                                               ; preds = %18
  br i1 %26, label %31, label %28

28:                                               ; preds = %27
  %29 = bitcast %"class.std::__1::basic_string"* %15 to i8*
  %30 = bitcast %"class.std::__1::basic_string"* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 24, i1 false) #11
  br label %47

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %1, i64 0, i32 2, i32 18, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %15, i8* %33, i64 %35) #11
  br label %47

37:                                               ; preds = %18
  %38 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %1, i64 0, i32 2, i32 18, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %16 to i8*
  %43 = zext i8 %25 to i64
  %44 = select i1 %26, i8* %39, i8* %42
  %45 = select i1 %26, i64 %41, i64 %43
  %46 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %15, i8* %44, i64 %45) #11
  br label %47

47:                                               ; preds = %2, %28, %31, %37
  ret %"class.webrtc::EncoderSettings"* %0
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(240) %"struct.webrtc::VideoEncoder::EncoderInfo"* @_ZN6webrtc12VideoEncoder11EncoderInfoaSERKS1_(%"struct.webrtc::VideoEncoder::EncoderInfo"*, %"struct.webrtc::VideoEncoder::EncoderInfo"* dereferenceable(240)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 22, i1 false)
  %5 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 4
  %6 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 4
  %7 = icmp eq %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, %1
  br i1 %7, label %117, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  %13 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %13, i64 0, i32 1, i32 0
  %15 = load i8, i8* %14, align 1
  %16 = icmp slt i8 %15, 0
  br i1 %12, label %27, label %17

17:                                               ; preds = %8
  br i1 %16, label %21, label %18

18:                                               ; preds = %17
  %19 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  %20 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 24, i1 false) #11
  br label %37

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %5, i8* %23, i64 %25) #11
  br label %37

27:                                               ; preds = %8
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  %33 = zext i8 %15 to i64
  %34 = select i1 %16, i8* %29, i8* %32
  %35 = select i1 %16, i64 %31, i64 %33
  %36 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %5, i8* %34, i64 %35) #11
  br label %37

37:                                               ; preds = %18, %21, %27
  %38 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 5
  %39 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 5
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 3, i1 false)
  %40 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = and i64 %41, 1
  %43 = icmp eq i64 %42, 0
  %44 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 8, i64 0, i32 0, i32 1, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 8, i64 0, i32 0, i32 1
  %47 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Data"* %46 to i8*
  %48 = select i1 %43, i8* %47, i8* %45
  %49 = lshr i64 %41, 1
  %50 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 8, i64 0, i32 0
  tail call void @_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE6AssignINS0_20IteratorValueAdapterIS4_PKhEEEEvT_m(%"class.absl::inlined_vector_internal::Storage"* %50, i8* %48, i64 %49) #11
  %51 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 8, i64 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = and i64 %52, 1
  %54 = icmp eq i64 %53, 0
  %55 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 8, i64 1, i32 0, i32 1, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 8, i64 1, i32 0, i32 1
  %58 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Data"* %57 to i8*
  %59 = select i1 %54, i8* %58, i8* %56
  %60 = lshr i64 %52, 1
  %61 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 8, i64 1, i32 0
  tail call void @_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE6AssignINS0_20IteratorValueAdapterIS4_PKhEEEEvT_m(%"class.absl::inlined_vector_internal::Storage"* %61, i8* %59, i64 %60) #11
  %62 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 8, i64 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load i64, i64* %62, align 8
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %64, 0
  %66 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 8, i64 2, i32 0, i32 1, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 8, i64 2, i32 0, i32 1
  %69 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Data"* %68 to i8*
  %70 = select i1 %65, i8* %69, i8* %67
  %71 = lshr i64 %63, 1
  %72 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 8, i64 2, i32 0
  tail call void @_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE6AssignINS0_20IteratorValueAdapterIS4_PKhEEEEvT_m(%"class.absl::inlined_vector_internal::Storage"* %72, i8* %70, i64 %71) #11
  %73 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 8, i64 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = and i64 %74, 1
  %76 = icmp eq i64 %75, 0
  %77 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 8, i64 3, i32 0, i32 1, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 8, i64 3, i32 0, i32 1
  %80 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Data"* %79 to i8*
  %81 = select i1 %76, i8* %80, i8* %78
  %82 = lshr i64 %74, 1
  %83 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 8, i64 3, i32 0
  tail call void @_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE6AssignINS0_20IteratorValueAdapterIS4_PKhEEEEvT_m(%"class.absl::inlined_vector_internal::Storage"* %83, i8* %81, i64 %82) #11
  %84 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 8, i64 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = load i64, i64* %84, align 8
  %86 = and i64 %85, 1
  %87 = icmp eq i64 %86, 0
  %88 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 8, i64 4, i32 0, i32 1, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  %90 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 8, i64 4, i32 0, i32 1
  %91 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Data"* %90 to i8*
  %92 = select i1 %87, i8* %91, i8* %89
  %93 = lshr i64 %85, 1
  %94 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 8, i64 4, i32 0
  tail call void @_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE6AssignINS0_20IteratorValueAdapterIS4_PKhEEEEvT_m(%"class.absl::inlined_vector_internal::Storage"* %94, i8* %92, i64 %93) #11
  %95 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 9
  %96 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 9, i32 0, i32 0
  %97 = load %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"*, %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"** %96, align 8
  %98 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 9, i32 0, i32 1
  %99 = load %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"*, %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"** %98, align 8
  tail call void @_ZNSt3__16vectorIN6webrtc12VideoEncoder23ResolutionBitrateLimitsENS_9allocatorIS3_EEE6assignIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector"* %95, %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %97, %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %99) #11
  %100 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 10
  %101 = load i8, i8* %100, align 8, !range !2
  %102 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 10
  store i8 %101, i8* %102, align 8
  %103 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = load i64, i64* %103, align 8
  %105 = and i64 %104, 1
  %106 = icmp eq i64 %105, 0
  %107 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 11, i32 0, i32 1, i32 0, i32 0
  %108 = load i32*, i32** %107, align 8
  %109 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 11, i32 0, i32 1
  %110 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type, 5, std::__1::allocator<webrtc::VideoFrameBuffer::Type> >::Data"* %109 to i32*
  %111 = select i1 %106, i32* %110, i32* %108
  %112 = lshr i64 %104, 1
  %113 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 11, i32 0
  %114 = shl nuw i64 %112, 2
  %115 = ashr exact i64 %114, 2
  tail call void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc16VideoFrameBuffer4TypeELm5ENSt3__19allocatorIS4_EEE6AssignINS0_20IteratorValueAdapterIS7_PKS4_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage.11"* %113, i32* %111, i64 %115) #11
  br label %116

116:                                              ; preds = %117, %37
  ret %"struct.webrtc::VideoEncoder::EncoderInfo"* %0

117:                                              ; preds = %2
  %118 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 5
  %119 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 5
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %118, i8* align 8 %119, i64 3, i1 false)
  %120 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %1, i64 0, i32 10
  %121 = load i8, i8* %120, align 8, !range !2
  %122 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 10
  store i8 %121, i8* %122, align 8
  br label %116
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.webrtc::VideoEncoderConfig"* @_ZN6webrtc18VideoEncoderConfigaSEOS0_(%"class.webrtc::VideoEncoderConfig"*, %"class.webrtc::VideoEncoderConfig"* dereferenceable(160)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %0, i64 0, i32 0
  store i32 %4, i32* %5, align 8
  %6 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %1, i64 0, i32 2
  %8 = tail call dereferenceable(48) %"struct.webrtc::SdpVideoFormat"* @_ZN6webrtc14SdpVideoFormataSEOS0_(%"struct.webrtc::SdpVideoFormat"* %6, %"struct.webrtc::SdpVideoFormat"* dereferenceable(48) %7) #11
  %9 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %0, i64 0, i32 3
  %10 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %1, i64 0, i32 3
  %11 = getelementptr inbounds %"class.rtc::scoped_refptr", %"class.rtc::scoped_refptr"* %10, i64 0, i32 0
  %12 = bitcast %"class.rtc::scoped_refptr"* %10 to i64*
  %13 = load i64, i64* %12, align 8
  store %"class.webrtc::VideoEncoderConfig::VideoStreamFactoryInterface"* null, %"class.webrtc::VideoEncoderConfig::VideoStreamFactoryInterface"** %11, align 8
  %14 = bitcast %"class.rtc::scoped_refptr"* %9 to i64*
  %15 = getelementptr inbounds %"class.rtc::scoped_refptr", %"class.rtc::scoped_refptr"* %9, i64 0, i32 0
  %16 = load %"class.webrtc::VideoEncoderConfig::VideoStreamFactoryInterface"*, %"class.webrtc::VideoEncoderConfig::VideoStreamFactoryInterface"** %15, align 8
  store i64 %13, i64* %14, align 8
  %17 = icmp eq %"class.webrtc::VideoEncoderConfig::VideoStreamFactoryInterface"* %16, null
  br i1 %17, label %25, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig::VideoStreamFactoryInterface", %"class.webrtc::VideoEncoderConfig::VideoStreamFactoryInterface"* %16, i64 0, i32 0
  %20 = bitcast %"class.webrtc::VideoEncoderConfig::VideoStreamFactoryInterface"* %16 to i32 (%"class.rtc::RefCountInterface"*)***
  %21 = load i32 (%"class.rtc::RefCountInterface"*)**, i32 (%"class.rtc::RefCountInterface"*)*** %20, align 8
  %22 = getelementptr inbounds i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %21, i64 1
  %23 = load i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %22, align 8
  %24 = tail call i32 %23(%"class.rtc::RefCountInterface"* %19) #11
  br label %25

25:                                               ; preds = %2, %18
  %26 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %0, i64 0, i32 4
  %27 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %1, i64 0, i32 4
  %28 = getelementptr inbounds %"class.std::__1::vector.25", %"class.std::__1::vector.25"* %26, i64 0, i32 0, i32 0
  %29 = load %"struct.webrtc::SpatialLayer"*, %"struct.webrtc::SpatialLayer"** %28, align 8
  %30 = icmp eq %"struct.webrtc::SpatialLayer"* %29, null
  br i1 %30, label %37, label %31

31:                                               ; preds = %25
  %32 = ptrtoint %"struct.webrtc::SpatialLayer"* %29 to i64
  %33 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %0, i64 0, i32 4, i32 0, i32 1
  %34 = bitcast %"struct.webrtc::SpatialLayer"** %33 to i64*
  store i64 %32, i64* %34, align 8
  %35 = bitcast %"struct.webrtc::SpatialLayer"* %29 to i8*
  tail call void @_ZdlPv(i8* %35) #12
  %36 = bitcast %"class.std::__1::vector.25"* %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #11
  br label %37

37:                                               ; preds = %25, %31
  %38 = bitcast %"class.std::__1::vector.25"* %27 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.25"* %26 to i64*
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %1, i64 0, i32 4, i32 0, i32 1
  %42 = bitcast %"struct.webrtc::SpatialLayer"** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %0, i64 0, i32 4, i32 0, i32 1
  %45 = bitcast %"struct.webrtc::SpatialLayer"** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %1, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %47 = bitcast %"struct.webrtc::SpatialLayer"** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %50 = bitcast %"struct.webrtc::SpatialLayer"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = bitcast %"class.std::__1::vector.25"* %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 24, i1 false) #11
  %52 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %1, i64 0, i32 5
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %0, i64 0, i32 5
  store i32 %53, i32* %54, align 8
  %55 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %0, i64 0, i32 7
  %56 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %1, i64 0, i32 7
  %57 = getelementptr inbounds %"class.rtc::scoped_refptr.32", %"class.rtc::scoped_refptr.32"* %56, i64 0, i32 0
  %58 = bitcast %"class.rtc::scoped_refptr.32"* %56 to i64*
  %59 = load i64, i64* %58, align 8
  store %"class.webrtc::VideoEncoderConfig::EncoderSpecificSettings"* null, %"class.webrtc::VideoEncoderConfig::EncoderSpecificSettings"** %57, align 8
  %60 = bitcast %"class.rtc::scoped_refptr.32"* %55 to i64*
  %61 = getelementptr inbounds %"class.rtc::scoped_refptr.32", %"class.rtc::scoped_refptr.32"* %55, i64 0, i32 0
  %62 = load %"class.webrtc::VideoEncoderConfig::EncoderSpecificSettings"*, %"class.webrtc::VideoEncoderConfig::EncoderSpecificSettings"** %61, align 8
  store i64 %59, i64* %60, align 8
  %63 = icmp eq %"class.webrtc::VideoEncoderConfig::EncoderSpecificSettings"* %62, null
  br i1 %63, label %71, label %64

64:                                               ; preds = %37
  %65 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig::EncoderSpecificSettings", %"class.webrtc::VideoEncoderConfig::EncoderSpecificSettings"* %62, i64 0, i32 0
  %66 = bitcast %"class.webrtc::VideoEncoderConfig::EncoderSpecificSettings"* %62 to i32 (%"class.rtc::RefCountInterface"*)***
  %67 = load i32 (%"class.rtc::RefCountInterface"*)**, i32 (%"class.rtc::RefCountInterface"*)*** %66, align 8
  %68 = getelementptr inbounds i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %67, i64 1
  %69 = load i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %68, align 8
  %70 = tail call i32 %69(%"class.rtc::RefCountInterface"* %65) #11
  br label %71

71:                                               ; preds = %37, %64
  %72 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %0, i64 0, i32 8
  %73 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %1, i64 0, i32 8
  %74 = bitcast i32* %72 to i8*
  %75 = bitcast i32* %73 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 16, i1 false)
  %76 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %0, i64 0, i32 11
  %77 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %1, i64 0, i32 11
  %78 = getelementptr inbounds %"class.std::__1::vector.33", %"class.std::__1::vector.33"* %76, i64 0, i32 0, i32 0
  %79 = load %"struct.webrtc::VideoStream"*, %"struct.webrtc::VideoStream"** %78, align 8
  %80 = icmp eq %"struct.webrtc::VideoStream"* %79, null
  br i1 %80, label %96, label %81

81:                                               ; preds = %71
  %82 = bitcast %"struct.webrtc::VideoStream"* %79 to i8*
  %83 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %0, i64 0, i32 11, i32 0, i32 1
  %84 = load %"struct.webrtc::VideoStream"*, %"struct.webrtc::VideoStream"** %83, align 8
  %85 = icmp eq %"struct.webrtc::VideoStream"* %84, %79
  br i1 %85, label %93, label %86

86:                                               ; preds = %81, %86
  %87 = phi %"struct.webrtc::VideoStream"* [ %88, %86 ], [ %84, %81 ]
  %88 = getelementptr inbounds %"struct.webrtc::VideoStream", %"struct.webrtc::VideoStream"* %87, i64 -1
  tail call void @_ZN6webrtc11VideoStreamD1Ev(%"struct.webrtc::VideoStream"* %88) #11
  %89 = icmp eq %"struct.webrtc::VideoStream"* %88, %79
  br i1 %89, label %90, label %86

90:                                               ; preds = %86
  %91 = bitcast %"class.std::__1::vector.33"* %76 to i8**
  %92 = load i8*, i8** %91, align 8
  br label %93

93:                                               ; preds = %90, %81
  %94 = phi i8* [ %92, %90 ], [ %82, %81 ]
  store %"struct.webrtc::VideoStream"* %79, %"struct.webrtc::VideoStream"** %83, align 8
  tail call void @_ZdlPv(i8* %94) #12
  %95 = bitcast %"class.std::__1::vector.33"* %76 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #11
  br label %96

96:                                               ; preds = %71, %93
  %97 = bitcast %"class.std::__1::vector.33"* %77 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"class.std::__1::vector.33"* %76 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %1, i64 0, i32 11, i32 0, i32 1
  %101 = bitcast %"struct.webrtc::VideoStream"** %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %0, i64 0, i32 11, i32 0, i32 1
  %104 = bitcast %"struct.webrtc::VideoStream"** %103 to i64*
  store i64 %102, i64* %104, align 8
  %105 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %1, i64 0, i32 11, i32 0, i32 2, i32 0, i32 0
  %106 = bitcast %"struct.webrtc::VideoStream"** %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %0, i64 0, i32 11, i32 0, i32 2, i32 0, i32 0
  %109 = bitcast %"struct.webrtc::VideoStream"** %108 to i64*
  store i64 %107, i64* %109, align 8
  %110 = bitcast %"class.std::__1::vector.33"* %77 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %110, i8 0, i64 24, i1 false) #11
  %111 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %0, i64 0, i32 12
  %112 = getelementptr inbounds %"class.webrtc::VideoEncoderConfig", %"class.webrtc::VideoEncoderConfig"* %1, i64 0, i32 12
  %113 = bitcast i64* %111 to i8*
  %114 = bitcast i64* %112 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* align 8 %114, i64 10, i1 false)
  ret %"class.webrtc::VideoEncoderConfig"* %0
}

; Function Attrs: nounwind
declare void @_ZN6webrtc18VideoEncoderConfigD1Ev(%"class.webrtc::VideoEncoderConfig"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(240) %"struct.webrtc::VideoEncoder::EncoderInfo"* @_ZNK6webrtc15EncoderSettings12encoder_infoEv(%"class.webrtc::EncoderSettings"* readnone) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %0, i64 0, i32 0
  ret %"struct.webrtc::VideoEncoder::EncoderInfo"* %2
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(160) %"class.webrtc::VideoEncoderConfig"* @_ZNK6webrtc15EncoderSettings14encoder_configEv(%"class.webrtc::EncoderSettings"* readnone) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %0, i64 0, i32 1
  ret %"class.webrtc::VideoEncoderConfig"* %2
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(376) %"class.webrtc::VideoCodec"* @_ZNK6webrtc15EncoderSettings11video_codecEv(%"class.webrtc::EncoderSettings"* readnone) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::EncoderSettings", %"class.webrtc::EncoderSettings"* %0, i64 0, i32 2
  ret %"class.webrtc::VideoCodec"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc26GetVideoCodecTypeOrGenericERKN4absl8optionalINS_15EncoderSettingsEEE(%"class.absl::optional.60"* nocapture readonly dereferenceable(784)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.absl::optional.60", %"class.absl::optional.60"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  %5 = getelementptr inbounds %"class.absl::optional.60", %"class.absl::optional.60"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = select i1 %4, i32 0, i32 %6
  ret i32 %7
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN6webrtc18VideoEncoderConfigC1ERKS0_(%"class.webrtc::VideoEncoderConfig"*, %"class.webrtc::VideoEncoderConfig"* dereferenceable(160)) unnamed_addr #1

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE6AssignINS0_20IteratorValueAdapterIS4_PKhEEEEvT_m(%"class.absl::inlined_vector_internal::Storage"*, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !noalias !3
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast i8** %9 to i64*
  %11 = load i64, i64* %10, align 8, !noalias !3
  %12 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !noalias !3
  br label %17

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1
  %16 = ptrtoint %"union.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Data"* %15 to i64
  br label %17

17:                                               ; preds = %8, %14
  %18 = phi i64 [ %16, %14 ], [ %11, %8 ]
  %19 = phi i64 [ 4, %14 ], [ %13, %8 ]
  %20 = lshr i64 %5, 1
  %21 = icmp ult i64 %19, %2
  br i1 %21, label %22, label %28

22:                                               ; preds = %17
  %23 = shl i64 %19, 1
  %24 = icmp ult i64 %23, %2
  %25 = select i1 %24, i64 %2, i64 %23
  %26 = tail call i8* @_Znwm(i64 %25) #12
  %27 = ptrtoint i8* %26 to i64
  br label %169

28:                                               ; preds = %17
  %29 = icmp ult i64 %20, %2
  %30 = inttoptr i64 %18 to i8*
  %31 = getelementptr inbounds i8, i8* %30, i64 %20
  %32 = call i64 @llvm.usub.sat.i64(i64 %2, i64 %20)
  %33 = select i1 %29, i8* %31, i8* null
  %34 = select i1 %29, i64 %20, i64 %2
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %166, label %36

36:                                               ; preds = %28
  %37 = icmp ult i64 %34, 32
  br i1 %37, label %124, label %38

38:                                               ; preds = %36
  %39 = getelementptr i8, i8* %30, i64 %34
  %40 = getelementptr i8, i8* %1, i64 %34
  %41 = icmp ugt i8* %40, %30
  %42 = icmp ugt i8* %39, %1
  %43 = and i1 %41, %42
  br i1 %43, label %124, label %44

44:                                               ; preds = %38
  %45 = and i64 %34, 9223372036854775776
  %46 = getelementptr i8, i8* %1, i64 %45
  %47 = add nsw i64 %45, -32
  %48 = lshr exact i64 %47, 5
  %49 = add nuw nsw i64 %48, 1
  %50 = and i64 %49, 3
  %51 = icmp ult i64 %47, 96
  br i1 %51, label %103, label %52

52:                                               ; preds = %44
  %53 = sub nsw i64 %49, %50
  br label %54

54:                                               ; preds = %54, %52
  %55 = phi i64 [ 0, %52 ], [ %100, %54 ]
  %56 = phi i64 [ %53, %52 ], [ %101, %54 ]
  %57 = getelementptr i8, i8* %1, i64 %55
  %58 = getelementptr inbounds i8, i8* %30, i64 %55
  %59 = bitcast i8* %57 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1, !alias.scope !6
  %61 = getelementptr i8, i8* %57, i64 16
  %62 = bitcast i8* %61 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1, !alias.scope !6
  %64 = bitcast i8* %58 to <16 x i8>*
  store <16 x i8> %60, <16 x i8>* %64, align 1, !alias.scope !9, !noalias !6
  %65 = getelementptr inbounds i8, i8* %58, i64 16
  %66 = bitcast i8* %65 to <16 x i8>*
  store <16 x i8> %63, <16 x i8>* %66, align 1, !alias.scope !9, !noalias !6
  %67 = or i64 %55, 32
  %68 = getelementptr i8, i8* %1, i64 %67
  %69 = getelementptr inbounds i8, i8* %30, i64 %67
  %70 = bitcast i8* %68 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 1, !alias.scope !6
  %72 = getelementptr i8, i8* %68, i64 16
  %73 = bitcast i8* %72 to <16 x i8>*
  %74 = load <16 x i8>, <16 x i8>* %73, align 1, !alias.scope !6
  %75 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %71, <16 x i8>* %75, align 1, !alias.scope !9, !noalias !6
  %76 = getelementptr inbounds i8, i8* %69, i64 16
  %77 = bitcast i8* %76 to <16 x i8>*
  store <16 x i8> %74, <16 x i8>* %77, align 1, !alias.scope !9, !noalias !6
  %78 = or i64 %55, 64
  %79 = getelementptr i8, i8* %1, i64 %78
  %80 = getelementptr inbounds i8, i8* %30, i64 %78
  %81 = bitcast i8* %79 to <16 x i8>*
  %82 = load <16 x i8>, <16 x i8>* %81, align 1, !alias.scope !6
  %83 = getelementptr i8, i8* %79, i64 16
  %84 = bitcast i8* %83 to <16 x i8>*
  %85 = load <16 x i8>, <16 x i8>* %84, align 1, !alias.scope !6
  %86 = bitcast i8* %80 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %86, align 1, !alias.scope !9, !noalias !6
  %87 = getelementptr inbounds i8, i8* %80, i64 16
  %88 = bitcast i8* %87 to <16 x i8>*
  store <16 x i8> %85, <16 x i8>* %88, align 1, !alias.scope !9, !noalias !6
  %89 = or i64 %55, 96
  %90 = getelementptr i8, i8* %1, i64 %89
  %91 = getelementptr inbounds i8, i8* %30, i64 %89
  %92 = bitcast i8* %90 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1, !alias.scope !6
  %94 = getelementptr i8, i8* %90, i64 16
  %95 = bitcast i8* %94 to <16 x i8>*
  %96 = load <16 x i8>, <16 x i8>* %95, align 1, !alias.scope !6
  %97 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %93, <16 x i8>* %97, align 1, !alias.scope !9, !noalias !6
  %98 = getelementptr inbounds i8, i8* %91, i64 16
  %99 = bitcast i8* %98 to <16 x i8>*
  store <16 x i8> %96, <16 x i8>* %99, align 1, !alias.scope !9, !noalias !6
  %100 = add i64 %55, 128
  %101 = add i64 %56, -4
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %54, !llvm.loop !11

103:                                              ; preds = %54, %44
  %104 = phi i64 [ 0, %44 ], [ %100, %54 ]
  %105 = icmp eq i64 %50, 0
  br i1 %105, label %122, label %106

106:                                              ; preds = %103, %106
  %107 = phi i64 [ %119, %106 ], [ %104, %103 ]
  %108 = phi i64 [ %120, %106 ], [ %50, %103 ]
  %109 = getelementptr i8, i8* %1, i64 %107
  %110 = getelementptr inbounds i8, i8* %30, i64 %107
  %111 = bitcast i8* %109 to <16 x i8>*
  %112 = load <16 x i8>, <16 x i8>* %111, align 1, !alias.scope !6
  %113 = getelementptr i8, i8* %109, i64 16
  %114 = bitcast i8* %113 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1, !alias.scope !6
  %116 = bitcast i8* %110 to <16 x i8>*
  store <16 x i8> %112, <16 x i8>* %116, align 1, !alias.scope !9, !noalias !6
  %117 = getelementptr inbounds i8, i8* %110, i64 16
  %118 = bitcast i8* %117 to <16 x i8>*
  store <16 x i8> %115, <16 x i8>* %118, align 1, !alias.scope !9, !noalias !6
  %119 = add i64 %107, 32
  %120 = add i64 %108, -1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %106, !llvm.loop !13

122:                                              ; preds = %106, %103
  %123 = icmp eq i64 %34, %45
  br i1 %123, label %166, label %124

124:                                              ; preds = %122, %38, %36
  %125 = phi i8* [ %1, %38 ], [ %1, %36 ], [ %46, %122 ]
  %126 = phi i64 [ 0, %38 ], [ 0, %36 ], [ %45, %122 ]
  %127 = xor i64 %126, -1
  %128 = add nsw i64 %34, %127
  %129 = and i64 %34, 3
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %141, label %131

131:                                              ; preds = %124, %131
  %132 = phi i8* [ %137, %131 ], [ %125, %124 ]
  %133 = phi i64 [ %138, %131 ], [ %126, %124 ]
  %134 = phi i64 [ %139, %131 ], [ %129, %124 ]
  %135 = getelementptr inbounds i8, i8* %30, i64 %133
  %136 = load i8, i8* %132, align 1
  store i8 %136, i8* %135, align 1
  %137 = getelementptr inbounds i8, i8* %132, i64 1
  %138 = add nuw i64 %133, 1
  %139 = add i64 %134, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %131, !llvm.loop !15

141:                                              ; preds = %131, %124
  %142 = phi i8* [ undef, %124 ], [ %137, %131 ]
  %143 = phi i8* [ %125, %124 ], [ %137, %131 ]
  %144 = phi i64 [ %126, %124 ], [ %138, %131 ]
  %145 = icmp ult i64 %128, 3
  br i1 %145, label %166, label %146

146:                                              ; preds = %141, %146
  %147 = phi i8* [ %163, %146 ], [ %143, %141 ]
  %148 = phi i64 [ %164, %146 ], [ %144, %141 ]
  %149 = getelementptr inbounds i8, i8* %30, i64 %148
  %150 = load i8, i8* %147, align 1
  store i8 %150, i8* %149, align 1
  %151 = getelementptr inbounds i8, i8* %147, i64 1
  %152 = add nuw i64 %148, 1
  %153 = getelementptr inbounds i8, i8* %30, i64 %152
  %154 = load i8, i8* %151, align 1
  store i8 %154, i8* %153, align 1
  %155 = getelementptr inbounds i8, i8* %147, i64 2
  %156 = add nuw i64 %148, 2
  %157 = getelementptr inbounds i8, i8* %30, i64 %156
  %158 = load i8, i8* %155, align 1
  store i8 %158, i8* %157, align 1
  %159 = getelementptr inbounds i8, i8* %147, i64 3
  %160 = add nuw i64 %148, 3
  %161 = getelementptr inbounds i8, i8* %30, i64 %160
  %162 = load i8, i8* %159, align 1
  store i8 %162, i8* %161, align 1
  %163 = getelementptr inbounds i8, i8* %147, i64 4
  %164 = add nuw i64 %148, 4
  %165 = icmp eq i64 %164, %34
  br i1 %165, label %166, label %146, !llvm.loop !16

166:                                              ; preds = %141, %146, %122, %28
  %167 = phi i8* [ %1, %28 ], [ %46, %122 ], [ %142, %141 ], [ %163, %146 ]
  %168 = icmp eq i64 %32, 0
  br i1 %168, label %305, label %169

169:                                              ; preds = %22, %166
  %170 = phi i8* [ %1, %22 ], [ %167, %166 ]
  %171 = phi i64 [ %2, %22 ], [ %32, %166 ]
  %172 = phi i8* [ %26, %22 ], [ %33, %166 ]
  %173 = phi i64 [ %25, %22 ], [ 0, %166 ]
  %174 = phi i64 [ %27, %22 ], [ 0, %166 ]
  %175 = icmp ult i64 %171, 32
  br i1 %175, label %262, label %176

176:                                              ; preds = %169
  %177 = getelementptr i8, i8* %172, i64 %171
  %178 = getelementptr i8, i8* %170, i64 %171
  %179 = icmp ult i8* %172, %178
  %180 = icmp ult i8* %170, %177
  %181 = and i1 %179, %180
  br i1 %181, label %262, label %182

182:                                              ; preds = %176
  %183 = and i64 %171, -32
  %184 = getelementptr i8, i8* %170, i64 %183
  %185 = add i64 %183, -32
  %186 = lshr exact i64 %185, 5
  %187 = add nuw nsw i64 %186, 1
  %188 = and i64 %187, 3
  %189 = icmp ult i64 %185, 96
  br i1 %189, label %241, label %190

190:                                              ; preds = %182
  %191 = sub nsw i64 %187, %188
  br label %192

192:                                              ; preds = %192, %190
  %193 = phi i64 [ 0, %190 ], [ %238, %192 ]
  %194 = phi i64 [ %191, %190 ], [ %239, %192 ]
  %195 = getelementptr i8, i8* %170, i64 %193
  %196 = getelementptr inbounds i8, i8* %172, i64 %193
  %197 = bitcast i8* %195 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1, !alias.scope !17
  %199 = getelementptr i8, i8* %195, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1, !alias.scope !17
  %202 = bitcast i8* %196 to <16 x i8>*
  store <16 x i8> %198, <16 x i8>* %202, align 1, !alias.scope !20, !noalias !17
  %203 = getelementptr inbounds i8, i8* %196, i64 16
  %204 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %201, <16 x i8>* %204, align 1, !alias.scope !20, !noalias !17
  %205 = or i64 %193, 32
  %206 = getelementptr i8, i8* %170, i64 %205
  %207 = getelementptr inbounds i8, i8* %172, i64 %205
  %208 = bitcast i8* %206 to <16 x i8>*
  %209 = load <16 x i8>, <16 x i8>* %208, align 1, !alias.scope !17
  %210 = getelementptr i8, i8* %206, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  %212 = load <16 x i8>, <16 x i8>* %211, align 1, !alias.scope !17
  %213 = bitcast i8* %207 to <16 x i8>*
  store <16 x i8> %209, <16 x i8>* %213, align 1, !alias.scope !20, !noalias !17
  %214 = getelementptr inbounds i8, i8* %207, i64 16
  %215 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %212, <16 x i8>* %215, align 1, !alias.scope !20, !noalias !17
  %216 = or i64 %193, 64
  %217 = getelementptr i8, i8* %170, i64 %216
  %218 = getelementptr inbounds i8, i8* %172, i64 %216
  %219 = bitcast i8* %217 to <16 x i8>*
  %220 = load <16 x i8>, <16 x i8>* %219, align 1, !alias.scope !17
  %221 = getelementptr i8, i8* %217, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  %223 = load <16 x i8>, <16 x i8>* %222, align 1, !alias.scope !17
  %224 = bitcast i8* %218 to <16 x i8>*
  store <16 x i8> %220, <16 x i8>* %224, align 1, !alias.scope !20, !noalias !17
  %225 = getelementptr inbounds i8, i8* %218, i64 16
  %226 = bitcast i8* %225 to <16 x i8>*
  store <16 x i8> %223, <16 x i8>* %226, align 1, !alias.scope !20, !noalias !17
  %227 = or i64 %193, 96
  %228 = getelementptr i8, i8* %170, i64 %227
  %229 = getelementptr inbounds i8, i8* %172, i64 %227
  %230 = bitcast i8* %228 to <16 x i8>*
  %231 = load <16 x i8>, <16 x i8>* %230, align 1, !alias.scope !17
  %232 = getelementptr i8, i8* %228, i64 16
  %233 = bitcast i8* %232 to <16 x i8>*
  %234 = load <16 x i8>, <16 x i8>* %233, align 1, !alias.scope !17
  %235 = bitcast i8* %229 to <16 x i8>*
  store <16 x i8> %231, <16 x i8>* %235, align 1, !alias.scope !20, !noalias !17
  %236 = getelementptr inbounds i8, i8* %229, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  store <16 x i8> %234, <16 x i8>* %237, align 1, !alias.scope !20, !noalias !17
  %238 = add i64 %193, 128
  %239 = add i64 %194, -4
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %241, label %192, !llvm.loop !22

241:                                              ; preds = %192, %182
  %242 = phi i64 [ 0, %182 ], [ %238, %192 ]
  %243 = icmp eq i64 %188, 0
  br i1 %243, label %260, label %244

244:                                              ; preds = %241, %244
  %245 = phi i64 [ %257, %244 ], [ %242, %241 ]
  %246 = phi i64 [ %258, %244 ], [ %188, %241 ]
  %247 = getelementptr i8, i8* %170, i64 %245
  %248 = getelementptr inbounds i8, i8* %172, i64 %245
  %249 = bitcast i8* %247 to <16 x i8>*
  %250 = load <16 x i8>, <16 x i8>* %249, align 1, !alias.scope !17
  %251 = getelementptr i8, i8* %247, i64 16
  %252 = bitcast i8* %251 to <16 x i8>*
  %253 = load <16 x i8>, <16 x i8>* %252, align 1, !alias.scope !17
  %254 = bitcast i8* %248 to <16 x i8>*
  store <16 x i8> %250, <16 x i8>* %254, align 1, !alias.scope !20, !noalias !17
  %255 = getelementptr inbounds i8, i8* %248, i64 16
  %256 = bitcast i8* %255 to <16 x i8>*
  store <16 x i8> %253, <16 x i8>* %256, align 1, !alias.scope !20, !noalias !17
  %257 = add i64 %245, 32
  %258 = add i64 %246, -1
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %244, !llvm.loop !23

260:                                              ; preds = %244, %241
  %261 = icmp eq i64 %171, %183
  br i1 %261, label %303, label %262

262:                                              ; preds = %260, %176, %169
  %263 = phi i8* [ %170, %176 ], [ %170, %169 ], [ %184, %260 ]
  %264 = phi i64 [ 0, %176 ], [ 0, %169 ], [ %183, %260 ]
  %265 = xor i64 %264, -1
  %266 = add i64 %171, %265
  %267 = and i64 %171, 3
  %268 = icmp eq i64 %267, 0
  br i1 %268, label %279, label %269

269:                                              ; preds = %262, %269
  %270 = phi i8* [ %275, %269 ], [ %263, %262 ]
  %271 = phi i64 [ %276, %269 ], [ %264, %262 ]
  %272 = phi i64 [ %277, %269 ], [ %267, %262 ]
  %273 = getelementptr inbounds i8, i8* %172, i64 %271
  %274 = load i8, i8* %270, align 1
  store i8 %274, i8* %273, align 1
  %275 = getelementptr inbounds i8, i8* %270, i64 1
  %276 = add nuw i64 %271, 1
  %277 = add i64 %272, -1
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %269, !llvm.loop !24

279:                                              ; preds = %269, %262
  %280 = phi i8* [ %263, %262 ], [ %275, %269 ]
  %281 = phi i64 [ %264, %262 ], [ %276, %269 ]
  %282 = icmp ult i64 %266, 3
  br i1 %282, label %303, label %283

283:                                              ; preds = %279, %283
  %284 = phi i8* [ %300, %283 ], [ %280, %279 ]
  %285 = phi i64 [ %301, %283 ], [ %281, %279 ]
  %286 = getelementptr inbounds i8, i8* %172, i64 %285
  %287 = load i8, i8* %284, align 1
  store i8 %287, i8* %286, align 1
  %288 = getelementptr inbounds i8, i8* %284, i64 1
  %289 = add nuw i64 %285, 1
  %290 = getelementptr inbounds i8, i8* %172, i64 %289
  %291 = load i8, i8* %288, align 1
  store i8 %291, i8* %290, align 1
  %292 = getelementptr inbounds i8, i8* %284, i64 2
  %293 = add nuw i64 %285, 2
  %294 = getelementptr inbounds i8, i8* %172, i64 %293
  %295 = load i8, i8* %292, align 1
  store i8 %295, i8* %294, align 1
  %296 = getelementptr inbounds i8, i8* %284, i64 3
  %297 = add nuw i64 %285, 3
  %298 = getelementptr inbounds i8, i8* %172, i64 %297
  %299 = load i8, i8* %296, align 1
  store i8 %299, i8* %298, align 1
  %300 = getelementptr inbounds i8, i8* %284, i64 4
  %301 = add nuw i64 %285, 4
  %302 = icmp eq i64 %301, %171
  br i1 %302, label %303, label %283, !llvm.loop !25

303:                                              ; preds = %279, %283, %260
  %304 = icmp eq i64 %174, 0
  br i1 %304, label %305, label %307

305:                                              ; preds = %166, %303
  %306 = load i64, i64* %4, align 8
  br label %321

307:                                              ; preds = %303
  %308 = load i64, i64* %4, align 8
  %309 = and i64 %308, 1
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %315, label %311

311:                                              ; preds = %307
  %312 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %313 = load i8*, i8** %312, align 8
  tail call void @_ZdlPv(i8* %313) #12
  %314 = load i64, i64* %4, align 8
  br label %315

315:                                              ; preds = %307, %311
  %316 = phi i64 [ %308, %307 ], [ %314, %311 ]
  %317 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %318 = bitcast i8** %317 to i64*
  store i64 %174, i64* %318, align 8
  %319 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %173, i64* %319, align 8
  %320 = or i64 %316, 1
  store i64 %320, i64* %4, align 8
  br label %321

321:                                              ; preds = %315, %305
  %322 = phi i64 [ %306, %305 ], [ %320, %315 ]
  %323 = shl i64 %2, 1
  %324 = and i64 %322, 1
  %325 = or i64 %324, %323
  store i64 %325, i64* %4, align 8
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN6webrtc12VideoEncoder23ResolutionBitrateLimitsENS_9allocatorIS3_EEE6assignIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector"*, %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"*, %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %2 to i64
  %5 = ptrtoint %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 4
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 4
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 4
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits", %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %1, i64 %22
  %25 = select i1 %23, %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %24, %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %2
  %26 = ptrtoint %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 4
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #11
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 4
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #11
  %42 = inttoptr i64 %35 to %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"*
  %43 = getelementptr inbounds %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits", %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %42, i64 %39
  %44 = ptrtoint %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits", %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %16, i64 %28
  store %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %48, %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %53 = bitcast %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #12
  %55 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #11
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 1152921504606846975
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #13
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 4
  %63 = icmp ult i64 %62, 576460752303423487
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 3
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 1152921504606846975
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #13
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 1152921504606846975, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 4
  %74 = tail call i8* @_Znwm(i64 %73) #12
  %75 = bitcast i8* %74 to %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"*
  %76 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %77 = bitcast %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits", %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %75, i64 %72
  store %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %79, %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"** %8, align 8
  %80 = bitcast %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 4
  %85 = bitcast %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #11
  %86 = getelementptr inbounds %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits", %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %75, i64 %84
  %87 = ptrtoint %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc16VideoFrameBuffer4TypeELm5ENSt3__19allocatorIS4_EEE6AssignINS0_20IteratorValueAdapterIS7_PKS4_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage.11"*, i32*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.11", %"class.absl::inlined_vector_internal::Storage.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !noalias !26
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.11", %"class.absl::inlined_vector_internal::Storage.11"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8, !noalias !26
  %12 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.11", %"class.absl::inlined_vector_internal::Storage.11"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !noalias !26
  br label %17

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.11", %"class.absl::inlined_vector_internal::Storage.11"* %0, i64 0, i32 1
  %16 = ptrtoint %"union.absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type, 5, std::__1::allocator<webrtc::VideoFrameBuffer::Type> >::Data"* %15 to i64
  br label %17

17:                                               ; preds = %8, %14
  %18 = phi i64 [ %16, %14 ], [ %11, %8 ]
  %19 = phi i64 [ 5, %14 ], [ %13, %8 ]
  %20 = lshr i64 %5, 1
  %21 = icmp ult i64 %19, %2
  br i1 %21, label %22, label %33

22:                                               ; preds = %17
  %23 = shl i64 %19, 1
  %24 = icmp ult i64 %23, %2
  %25 = select i1 %24, i64 %2, i64 %23
  %26 = icmp ugt i64 %25, 4611686018427387903
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  tail call void @abort() #13
  unreachable

28:                                               ; preds = %22
  %29 = shl i64 %25, 2
  %30 = tail call i8* @_Znwm(i64 %29) #12
  %31 = bitcast i8* %30 to i32*
  %32 = ptrtoint i8* %30 to i64
  br label %176

33:                                               ; preds = %17
  %34 = icmp ult i64 %20, %2
  %35 = inttoptr i64 %18 to i32*
  %36 = inttoptr i64 %18 to i8*
  %37 = getelementptr inbounds i32, i32* %35, i64 %20
  %38 = call i64 @llvm.usub.sat.i64(i64 %2, i64 %20)
  %39 = select i1 %34, i32* %37, i32* null
  %40 = select i1 %34, i64 %20, i64 %2
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %173, label %42

42:                                               ; preds = %33
  %43 = icmp ult i64 %40, 8
  br i1 %43, label %131, label %44

44:                                               ; preds = %42
  %45 = getelementptr i32, i32* %35, i64 %40
  %46 = getelementptr i32, i32* %1, i64 %40
  %47 = bitcast i32* %46 to i8*
  %48 = icmp ult i8* %36, %47
  %49 = icmp ugt i32* %45, %1
  %50 = and i1 %48, %49
  br i1 %50, label %131, label %51

51:                                               ; preds = %44
  %52 = and i64 %40, 9223372036854775800
  %53 = getelementptr i32, i32* %1, i64 %52
  %54 = add nsw i64 %52, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 3
  %58 = icmp ult i64 %54, 24
  br i1 %58, label %110, label %59

59:                                               ; preds = %51
  %60 = sub nsw i64 %56, %57
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %107, %61 ]
  %63 = phi i64 [ %60, %59 ], [ %108, %61 ]
  %64 = getelementptr i32, i32* %1, i64 %62
  %65 = getelementptr inbounds i32, i32* %35, i64 %62
  %66 = bitcast i32* %64 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4, !alias.scope !29
  %68 = getelementptr i32, i32* %64, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4, !alias.scope !29
  %71 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %67, <4 x i32>* %71, align 4, !alias.scope !32, !noalias !29
  %72 = getelementptr inbounds i32, i32* %65, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %73, align 4, !alias.scope !32, !noalias !29
  %74 = or i64 %62, 8
  %75 = getelementptr i32, i32* %1, i64 %74
  %76 = getelementptr inbounds i32, i32* %35, i64 %74
  %77 = bitcast i32* %75 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4, !alias.scope !29
  %79 = getelementptr i32, i32* %75, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4, !alias.scope !29
  %82 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %82, align 4, !alias.scope !32, !noalias !29
  %83 = getelementptr inbounds i32, i32* %76, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %84, align 4, !alias.scope !32, !noalias !29
  %85 = or i64 %62, 16
  %86 = getelementptr i32, i32* %1, i64 %85
  %87 = getelementptr inbounds i32, i32* %35, i64 %85
  %88 = bitcast i32* %86 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !29
  %90 = getelementptr i32, i32* %86, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !alias.scope !29
  %93 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %93, align 4, !alias.scope !32, !noalias !29
  %94 = getelementptr inbounds i32, i32* %87, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %95, align 4, !alias.scope !32, !noalias !29
  %96 = or i64 %62, 24
  %97 = getelementptr i32, i32* %1, i64 %96
  %98 = getelementptr inbounds i32, i32* %35, i64 %96
  %99 = bitcast i32* %97 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4, !alias.scope !29
  %101 = getelementptr i32, i32* %97, i64 4
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !29
  %104 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %104, align 4, !alias.scope !32, !noalias !29
  %105 = getelementptr inbounds i32, i32* %98, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %106, align 4, !alias.scope !32, !noalias !29
  %107 = add i64 %62, 32
  %108 = add i64 %63, -4
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %61, !llvm.loop !34

110:                                              ; preds = %61, %51
  %111 = phi i64 [ 0, %51 ], [ %107, %61 ]
  %112 = icmp eq i64 %57, 0
  br i1 %112, label %129, label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %126, %113 ], [ %111, %110 ]
  %115 = phi i64 [ %127, %113 ], [ %57, %110 ]
  %116 = getelementptr i32, i32* %1, i64 %114
  %117 = getelementptr inbounds i32, i32* %35, i64 %114
  %118 = bitcast i32* %116 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !alias.scope !29
  %120 = getelementptr i32, i32* %116, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !29
  %123 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %119, <4 x i32>* %123, align 4, !alias.scope !32, !noalias !29
  %124 = getelementptr inbounds i32, i32* %117, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %125, align 4, !alias.scope !32, !noalias !29
  %126 = add i64 %114, 8
  %127 = add i64 %115, -1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %113, !llvm.loop !35

129:                                              ; preds = %113, %110
  %130 = icmp eq i64 %40, %52
  br i1 %130, label %173, label %131

131:                                              ; preds = %129, %44, %42
  %132 = phi i32* [ %1, %44 ], [ %1, %42 ], [ %53, %129 ]
  %133 = phi i64 [ 0, %44 ], [ 0, %42 ], [ %52, %129 ]
  %134 = xor i64 %133, -1
  %135 = add nsw i64 %40, %134
  %136 = and i64 %40, 3
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %148, label %138

138:                                              ; preds = %131, %138
  %139 = phi i32* [ %144, %138 ], [ %132, %131 ]
  %140 = phi i64 [ %145, %138 ], [ %133, %131 ]
  %141 = phi i64 [ %146, %138 ], [ %136, %131 ]
  %142 = getelementptr inbounds i32, i32* %35, i64 %140
  %143 = load i32, i32* %139, align 4
  store i32 %143, i32* %142, align 4
  %144 = getelementptr inbounds i32, i32* %139, i64 1
  %145 = add nuw i64 %140, 1
  %146 = add i64 %141, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %138, !llvm.loop !36

148:                                              ; preds = %138, %131
  %149 = phi i32* [ undef, %131 ], [ %144, %138 ]
  %150 = phi i32* [ %132, %131 ], [ %144, %138 ]
  %151 = phi i64 [ %133, %131 ], [ %145, %138 ]
  %152 = icmp ult i64 %135, 3
  br i1 %152, label %173, label %153

153:                                              ; preds = %148, %153
  %154 = phi i32* [ %170, %153 ], [ %150, %148 ]
  %155 = phi i64 [ %171, %153 ], [ %151, %148 ]
  %156 = getelementptr inbounds i32, i32* %35, i64 %155
  %157 = load i32, i32* %154, align 4
  store i32 %157, i32* %156, align 4
  %158 = getelementptr inbounds i32, i32* %154, i64 1
  %159 = add nuw i64 %155, 1
  %160 = getelementptr inbounds i32, i32* %35, i64 %159
  %161 = load i32, i32* %158, align 4
  store i32 %161, i32* %160, align 4
  %162 = getelementptr inbounds i32, i32* %154, i64 2
  %163 = add nuw i64 %155, 2
  %164 = getelementptr inbounds i32, i32* %35, i64 %163
  %165 = load i32, i32* %162, align 4
  store i32 %165, i32* %164, align 4
  %166 = getelementptr inbounds i32, i32* %154, i64 3
  %167 = add nuw i64 %155, 3
  %168 = getelementptr inbounds i32, i32* %35, i64 %167
  %169 = load i32, i32* %166, align 4
  store i32 %169, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %154, i64 4
  %171 = add nuw i64 %155, 4
  %172 = icmp eq i64 %171, %40
  br i1 %172, label %173, label %153, !llvm.loop !37

173:                                              ; preds = %148, %153, %129, %33
  %174 = phi i32* [ %1, %33 ], [ %53, %129 ], [ %149, %148 ], [ %170, %153 ]
  %175 = icmp eq i64 %38, 0
  br i1 %175, label %312, label %176

176:                                              ; preds = %28, %173
  %177 = phi i32* [ %1, %28 ], [ %174, %173 ]
  %178 = phi i64 [ %2, %28 ], [ %38, %173 ]
  %179 = phi i32* [ %31, %28 ], [ %39, %173 ]
  %180 = phi i64 [ %25, %28 ], [ 0, %173 ]
  %181 = phi i64 [ %32, %28 ], [ 0, %173 ]
  %182 = icmp ult i64 %178, 8
  br i1 %182, label %269, label %183

183:                                              ; preds = %176
  %184 = getelementptr i32, i32* %179, i64 %178
  %185 = getelementptr i32, i32* %177, i64 %178
  %186 = icmp ult i32* %179, %185
  %187 = icmp ult i32* %177, %184
  %188 = and i1 %186, %187
  br i1 %188, label %269, label %189

189:                                              ; preds = %183
  %190 = and i64 %178, -8
  %191 = getelementptr i32, i32* %177, i64 %190
  %192 = add i64 %190, -8
  %193 = lshr exact i64 %192, 3
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 3
  %196 = icmp ult i64 %192, 24
  br i1 %196, label %248, label %197

197:                                              ; preds = %189
  %198 = sub nsw i64 %194, %195
  br label %199

199:                                              ; preds = %199, %197
  %200 = phi i64 [ 0, %197 ], [ %245, %199 ]
  %201 = phi i64 [ %198, %197 ], [ %246, %199 ]
  %202 = getelementptr i32, i32* %177, i64 %200
  %203 = getelementptr inbounds i32, i32* %179, i64 %200
  %204 = bitcast i32* %202 to <4 x i32>*
  %205 = load <4 x i32>, <4 x i32>* %204, align 4, !alias.scope !38
  %206 = getelementptr i32, i32* %202, i64 4
  %207 = bitcast i32* %206 to <4 x i32>*
  %208 = load <4 x i32>, <4 x i32>* %207, align 4, !alias.scope !38
  %209 = bitcast i32* %203 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %209, align 4, !alias.scope !41, !noalias !38
  %210 = getelementptr inbounds i32, i32* %203, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %211, align 4, !alias.scope !41, !noalias !38
  %212 = or i64 %200, 8
  %213 = getelementptr i32, i32* %177, i64 %212
  %214 = getelementptr inbounds i32, i32* %179, i64 %212
  %215 = bitcast i32* %213 to <4 x i32>*
  %216 = load <4 x i32>, <4 x i32>* %215, align 4, !alias.scope !38
  %217 = getelementptr i32, i32* %213, i64 4
  %218 = bitcast i32* %217 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 4, !alias.scope !38
  %220 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %216, <4 x i32>* %220, align 4, !alias.scope !41, !noalias !38
  %221 = getelementptr inbounds i32, i32* %214, i64 4
  %222 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %222, align 4, !alias.scope !41, !noalias !38
  %223 = or i64 %200, 16
  %224 = getelementptr i32, i32* %177, i64 %223
  %225 = getelementptr inbounds i32, i32* %179, i64 %223
  %226 = bitcast i32* %224 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4, !alias.scope !38
  %228 = getelementptr i32, i32* %224, i64 4
  %229 = bitcast i32* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 4, !alias.scope !38
  %231 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %227, <4 x i32>* %231, align 4, !alias.scope !41, !noalias !38
  %232 = getelementptr inbounds i32, i32* %225, i64 4
  %233 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %233, align 4, !alias.scope !41, !noalias !38
  %234 = or i64 %200, 24
  %235 = getelementptr i32, i32* %177, i64 %234
  %236 = getelementptr inbounds i32, i32* %179, i64 %234
  %237 = bitcast i32* %235 to <4 x i32>*
  %238 = load <4 x i32>, <4 x i32>* %237, align 4, !alias.scope !38
  %239 = getelementptr i32, i32* %235, i64 4
  %240 = bitcast i32* %239 to <4 x i32>*
  %241 = load <4 x i32>, <4 x i32>* %240, align 4, !alias.scope !38
  %242 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %242, align 4, !alias.scope !41, !noalias !38
  %243 = getelementptr inbounds i32, i32* %236, i64 4
  %244 = bitcast i32* %243 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %244, align 4, !alias.scope !41, !noalias !38
  %245 = add i64 %200, 32
  %246 = add i64 %201, -4
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %199, !llvm.loop !43

248:                                              ; preds = %199, %189
  %249 = phi i64 [ 0, %189 ], [ %245, %199 ]
  %250 = icmp eq i64 %195, 0
  br i1 %250, label %267, label %251

251:                                              ; preds = %248, %251
  %252 = phi i64 [ %264, %251 ], [ %249, %248 ]
  %253 = phi i64 [ %265, %251 ], [ %195, %248 ]
  %254 = getelementptr i32, i32* %177, i64 %252
  %255 = getelementptr inbounds i32, i32* %179, i64 %252
  %256 = bitcast i32* %254 to <4 x i32>*
  %257 = load <4 x i32>, <4 x i32>* %256, align 4, !alias.scope !38
  %258 = getelementptr i32, i32* %254, i64 4
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 4, !alias.scope !38
  %261 = bitcast i32* %255 to <4 x i32>*
  store <4 x i32> %257, <4 x i32>* %261, align 4, !alias.scope !41, !noalias !38
  %262 = getelementptr inbounds i32, i32* %255, i64 4
  %263 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> %260, <4 x i32>* %263, align 4, !alias.scope !41, !noalias !38
  %264 = add i64 %252, 8
  %265 = add i64 %253, -1
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %251, !llvm.loop !44

267:                                              ; preds = %251, %248
  %268 = icmp eq i64 %178, %190
  br i1 %268, label %310, label %269

269:                                              ; preds = %267, %183, %176
  %270 = phi i32* [ %177, %183 ], [ %177, %176 ], [ %191, %267 ]
  %271 = phi i64 [ 0, %183 ], [ 0, %176 ], [ %190, %267 ]
  %272 = xor i64 %271, -1
  %273 = add i64 %178, %272
  %274 = and i64 %178, 3
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %286, label %276

276:                                              ; preds = %269, %276
  %277 = phi i32* [ %282, %276 ], [ %270, %269 ]
  %278 = phi i64 [ %283, %276 ], [ %271, %269 ]
  %279 = phi i64 [ %284, %276 ], [ %274, %269 ]
  %280 = getelementptr inbounds i32, i32* %179, i64 %278
  %281 = load i32, i32* %277, align 4
  store i32 %281, i32* %280, align 4
  %282 = getelementptr inbounds i32, i32* %277, i64 1
  %283 = add nuw i64 %278, 1
  %284 = add i64 %279, -1
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %276, !llvm.loop !45

286:                                              ; preds = %276, %269
  %287 = phi i32* [ %270, %269 ], [ %282, %276 ]
  %288 = phi i64 [ %271, %269 ], [ %283, %276 ]
  %289 = icmp ult i64 %273, 3
  br i1 %289, label %310, label %290

290:                                              ; preds = %286, %290
  %291 = phi i32* [ %307, %290 ], [ %287, %286 ]
  %292 = phi i64 [ %308, %290 ], [ %288, %286 ]
  %293 = getelementptr inbounds i32, i32* %179, i64 %292
  %294 = load i32, i32* %291, align 4
  store i32 %294, i32* %293, align 4
  %295 = getelementptr inbounds i32, i32* %291, i64 1
  %296 = add nuw i64 %292, 1
  %297 = getelementptr inbounds i32, i32* %179, i64 %296
  %298 = load i32, i32* %295, align 4
  store i32 %298, i32* %297, align 4
  %299 = getelementptr inbounds i32, i32* %291, i64 2
  %300 = add nuw i64 %292, 2
  %301 = getelementptr inbounds i32, i32* %179, i64 %300
  %302 = load i32, i32* %299, align 4
  store i32 %302, i32* %301, align 4
  %303 = getelementptr inbounds i32, i32* %291, i64 3
  %304 = add nuw i64 %292, 3
  %305 = getelementptr inbounds i32, i32* %179, i64 %304
  %306 = load i32, i32* %303, align 4
  store i32 %306, i32* %305, align 4
  %307 = getelementptr inbounds i32, i32* %291, i64 4
  %308 = add nuw i64 %292, 4
  %309 = icmp eq i64 %308, %178
  br i1 %309, label %310, label %290, !llvm.loop !46

310:                                              ; preds = %286, %290, %267
  %311 = icmp eq i64 %181, 0
  br i1 %311, label %312, label %314

312:                                              ; preds = %173, %310
  %313 = load i64, i64* %4, align 8
  br label %329

314:                                              ; preds = %310
  %315 = load i64, i64* %4, align 8
  %316 = and i64 %315, 1
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %314
  %319 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.11", %"class.absl::inlined_vector_internal::Storage.11"* %0, i64 0, i32 1, i32 0, i32 0
  %320 = bitcast i32** %319 to i8**
  %321 = load i8*, i8** %320, align 8
  tail call void @_ZdlPv(i8* %321) #12
  %322 = load i64, i64* %4, align 8
  br label %323

323:                                              ; preds = %314, %318
  %324 = phi i64 [ %315, %314 ], [ %322, %318 ]
  %325 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.11", %"class.absl::inlined_vector_internal::Storage.11"* %0, i64 0, i32 1, i32 0, i32 0
  %326 = bitcast i32** %325 to i64*
  store i64 %181, i64* %326, align 8
  %327 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.11", %"class.absl::inlined_vector_internal::Storage.11"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %180, i64* %327, align 8
  %328 = or i64 %324, 1
  store i64 %328, i64* %4, align 8
  br label %329

329:                                              ; preds = %323, %312
  %330 = phi i64 [ %313, %312 ], [ %328, %323 ]
  %331 = shl i64 %2, 1
  %332 = and i64 %330, 1
  %333 = or i64 %332, %331
  store i64 %333, i64* %4, align 8
  ret void
}

declare dereferenceable(48) %"struct.webrtc::SdpVideoFormat"* @_ZN6webrtc14SdpVideoFormataSEOS0_(%"struct.webrtc::SdpVideoFormat"*, %"struct.webrtc::SdpVideoFormat"* dereferenceable(48)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN6webrtc11VideoStreamD1Ev(%"struct.webrtc::VideoStream"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE15MakeStorageViewEv: argument 0"}
!5 = distinct !{!5, !"_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE15MakeStorageViewEv"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !14}
!16 = distinct !{!16, !12}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !12}
!23 = distinct !{!23, !14}
!24 = distinct !{!24, !14}
!25 = distinct !{!25, !12}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc16VideoFrameBuffer4TypeELm5ENSt3__19allocatorIS4_EEE15MakeStorageViewEv: argument 0"}
!28 = distinct !{!28, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc16VideoFrameBuffer4TypeELm5ENSt3__19allocatorIS4_EEE15MakeStorageViewEv"}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !12}
!35 = distinct !{!35, !14}
!36 = distinct !{!36, !14}
!37 = distinct !{!37, !12}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !12}
!44 = distinct !{!44, !14}
!45 = distinct !{!45, !14}
!46 = distinct !{!46, !12}
