; ModuleID = '../../services/network/ct_log_list_distributor.cc'
source_filename = "../../services/network/ct_log_list_distributor.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.network::CtLogListDistributor" = type { i32 (...)**, %"class.net::MultiLogCTVerifier::CTLogProvider" }
%"class.net::MultiLogCTVerifier::CTLogProvider" = type { %"class.base::RepeatingCallbackList" }
%"class.base::RepeatingCallbackList" = type { %"class.base::internal::CallbackListBase" }
%"class.base::internal::CallbackListBase" = type { %"class.std::__1::list", i8, %"class.base::RepeatingCallback", %"class.base::WeakPtrFactory" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.2 }
%class.scoped_refptr.2 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.3", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.3" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.4" }
%"struct.std::__1::atomic.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl.7" }
%"struct.std::__1::__cxx_atomic_impl.7" = type { %"struct.std::__1::__cxx_atomic_base_impl.8" }
%"struct.std::__1::__cxx_atomic_base_impl.8" = type { i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"*, %"class.std::__1::__compressed_pair.18" }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.network::mojom::CTLogInfo"* }
%"class.network::mojom::CTLogInfo" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, %"class.absl::optional" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.16 }
%union.anon.16 = type { %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.mojo::StructPtr"* }
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { %class.scoped_refptr.25*, %class.scoped_refptr.25*, %"class.std::__1::__compressed_pair.27" }
%class.scoped_refptr.25 = type { %"class.net::CTLogVerifier"* }
%"class.net::CTLogVerifier" = type { %"class.base::RefCountedThreadSafe.26", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, %struct.evp_pkey_st* }
%"class.base::RefCountedThreadSafe.26" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%struct.evp_pkey_st = type opaque
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %class.scoped_refptr.25* }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorI13scoped_refptrIKN3net13CTLogVerifierEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_ = comdat any

@_ZTVN7network20CtLogListDistributorE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.network::CtLogListDistributor"*)* @_ZN7network20CtLogListDistributorD2Ev to i8*), i8* bitcast (void (%"class.network::CtLogListDistributor"*)* @_ZN7network20CtLogListDistributorD0Ev to i8*)] }, align 8

@_ZN7network20CtLogListDistributorC1Ev = hidden unnamed_addr alias void (%"class.network::CtLogListDistributor"*), void (%"class.network::CtLogListDistributor"*)* @_ZN7network20CtLogListDistributorC2Ev
@_ZN7network20CtLogListDistributorD1Ev = hidden unnamed_addr alias void (%"class.network::CtLogListDistributor"*), void (%"class.network::CtLogListDistributor"*)* @_ZN7network20CtLogListDistributorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network20CtLogListDistributorC2Ev(%"class.network::CtLogListDistributor"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::CtLogListDistributor", %"class.network::CtLogListDistributor"* %0, i64 0, i32 1
  tail call void @_ZN3net18MultiLogCTVerifier13CTLogProviderC2Ev(%"class.net::MultiLogCTVerifier::CTLogProvider"* %2) #9
  %3 = getelementptr inbounds %"class.network::CtLogListDistributor", %"class.network::CtLogListDistributor"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN7network20CtLogListDistributorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

declare void @_ZN3net18MultiLogCTVerifier13CTLogProviderC2Ev(%"class.net::MultiLogCTVerifier::CTLogProvider"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network20CtLogListDistributorD2Ev(%"class.network::CtLogListDistributor"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::CtLogListDistributor", %"class.network::CtLogListDistributor"* %0, i64 0, i32 1
  tail call void @_ZN3net18MultiLogCTVerifier13CTLogProviderD2Ev(%"class.net::MultiLogCTVerifier::CTLogProvider"* %2) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net18MultiLogCTVerifier13CTLogProviderD2Ev(%"class.net::MultiLogCTVerifier::CTLogProvider"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network20CtLogListDistributorD0Ev(%"class.network::CtLogListDistributor"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::CtLogListDistributor", %"class.network::CtLogListDistributor"* %0, i64 0, i32 1
  tail call void @_ZN3net18MultiLogCTVerifier13CTLogProviderD2Ev(%"class.net::MultiLogCTVerifier::CTLogProvider"* %2) #9
  %3 = bitcast %"class.network::CtLogListDistributor"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network20CtLogListDistributor13OnNewCtConfigERKNSt3__16vectorIN4mojo9StructPtrINS_5mojom9CTLogInfoEEENS1_9allocatorIS7_EEEE(%"class.network::CtLogListDistributor"*, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector.23", align 8
  %4 = alloca %class.scoped_refptr.25, align 8
  %5 = alloca %"class.base::BasicStringPiece", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = bitcast %"class.std::__1::vector.23"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %3, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %3, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #9
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %12 = load %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %14 = load %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"** %13, align 8
  %15 = icmp eq %"class.mojo::StructPtr"* %12, %14
  br i1 %15, label %27, label %16

16:                                               ; preds = %2
  %17 = bitcast %class.scoped_refptr.25* %4 to i8*
  %18 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %4, i64 0, i32 0
  %19 = bitcast %"class.base::BasicStringPiece"* %5 to i8*
  %20 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 0
  %21 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 1
  %22 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  %23 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = bitcast %class.scoped_refptr.25** %9 to i64*
  br label %55

27:                                               ; preds = %112, %2
  %28 = getelementptr inbounds %"class.network::CtLogListDistributor", %"class.network::CtLogListDistributor"* %0, i64 0, i32 1
  call void @_ZN3net18MultiLogCTVerifier13CTLogProvider15NotifyCallbacksERKNSt3__16vectorI13scoped_refptrIKNS_13CTLogVerifierEENS2_9allocatorIS7_EEEE(%"class.net::MultiLogCTVerifier::CTLogProvider"* %28, %"class.std::__1::vector.23"* nonnull dereferenceable(24) %3) #9
  %29 = load %class.scoped_refptr.25*, %class.scoped_refptr.25** %8, align 8
  %30 = icmp eq %class.scoped_refptr.25* %29, null
  br i1 %30, label %54, label %31

31:                                               ; preds = %27
  %32 = bitcast %class.scoped_refptr.25* %29 to i8*
  %33 = load %class.scoped_refptr.25*, %class.scoped_refptr.25** %9, align 8
  %34 = icmp eq %class.scoped_refptr.25* %33, %29
  br i1 %34, label %52, label %35

35:                                               ; preds = %31, %47
  %36 = phi %class.scoped_refptr.25* [ %37, %47 ], [ %33, %31 ]
  %37 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %36, i64 -1
  %38 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %37, i64 0, i32 0
  %39 = load %"class.net::CTLogVerifier"*, %"class.net::CTLogVerifier"** %38, align 8
  %40 = icmp eq %"class.net::CTLogVerifier"* %39, null
  br i1 %40, label %47, label %41

41:                                               ; preds = %35
  %42 = getelementptr inbounds %"class.net::CTLogVerifier", %"class.net::CTLogVerifier"* %39, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = atomicrmw sub i32* %42, i32 1 acq_rel
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %47

45:                                               ; preds = %41
  call void @_ZN3net13CTLogVerifierD1Ev(%"class.net::CTLogVerifier"* nonnull %39) #9
  %46 = bitcast %"class.net::CTLogVerifier"* %39 to i8*
  call void @_ZdlPv(i8* %46) #10
  br label %47

47:                                               ; preds = %45, %41, %35
  %48 = icmp eq %class.scoped_refptr.25* %37, %29
  br i1 %48, label %49, label %35

49:                                               ; preds = %47
  %50 = bitcast %"class.std::__1::vector.23"* %3 to i8**
  %51 = load i8*, i8** %50, align 8
  br label %52

52:                                               ; preds = %49, %31
  %53 = phi i8* [ %51, %49 ], [ %32, %31 ]
  store %class.scoped_refptr.25* %29, %class.scoped_refptr.25** %9, align 8
  call void @_ZdlPv(i8* %53) #10
  br label %54

54:                                               ; preds = %27, %52
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #9
  ret void

55:                                               ; preds = %16, %112
  %56 = phi %"class.mojo::StructPtr"* [ %12, %16 ], [ %113, %112 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  store %"class.net::CTLogVerifier"* inttoptr (i64 -6148914691236517206 to %"class.net::CTLogVerifier"*), %"class.net::CTLogVerifier"** %18, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #9
  %57 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %56, i64 0, i32 0, i32 0, i32 0, i32 0
  %58 = load %"class.network::mojom::CTLogInfo"*, %"class.network::mojom::CTLogInfo"** %57, align 8
  %59 = bitcast %"class.network::mojom::CTLogInfo"* %58 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %60 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %59, i64 0, i32 1, i32 0
  %61 = load i8, i8* %60, align 1
  %62 = icmp slt i8 %61, 0
  %63 = getelementptr inbounds %"class.network::mojom::CTLogInfo", %"class.network::mojom::CTLogInfo"* %58, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = bitcast %"class.network::mojom::CTLogInfo"* %58 to i8*
  %66 = select i1 %62, i8* %64, i8* %65
  store i8* %66, i8** %20, align 8
  %67 = getelementptr inbounds %"class.network::mojom::CTLogInfo", %"class.network::mojom::CTLogInfo"* %58, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = zext i8 %61 to i64
  %70 = select i1 %62, i64 %68, i64 %69
  store i64 %70, i64* %21, align 8
  %71 = load %"class.network::mojom::CTLogInfo"*, %"class.network::mojom::CTLogInfo"** %57, align 8
  %72 = getelementptr inbounds %"class.network::mojom::CTLogInfo", %"class.network::mojom::CTLogInfo"* %71, i64 0, i32 1
  %73 = bitcast %"class.std::__1::basic_string"* %72 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %74 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %73, i64 0, i32 1, i32 0
  %75 = load i8, i8* %74, align 1
  %76 = icmp slt i8 %75, 0
  br i1 %76, label %79, label %77

77:                                               ; preds = %55
  %78 = bitcast %"class.std::__1::basic_string"* %72 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* align 8 %78, i64 24, i1 false) #9
  br label %84

79:                                               ; preds = %55
  %80 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %72, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds %"class.network::mojom::CTLogInfo", %"class.network::mojom::CTLogInfo"* %71, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %83 = load i64, i64* %82, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %6, i8* %81, i64 %83) #9
  br label %84

84:                                               ; preds = %77, %79
  %85 = call %"class.net::CTLogVerifier"* @_ZN3net13CTLogVerifier6CreateERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEENS3_12basic_stringIcS5_NS3_9allocatorIcEEEE(%"class.base::BasicStringPiece"* nonnull dereferenceable(16) %5, %"class.std::__1::basic_string"* nonnull %6) #9
  store %"class.net::CTLogVerifier"* %85, %"class.net::CTLogVerifier"** %18, align 8
  %86 = load i8, i8* %24, align 1
  %87 = icmp slt i8 %86, 0
  br i1 %87, label %88, label %91

88:                                               ; preds = %84
  %89 = load i8*, i8** %25, align 8
  call void @_ZdlPv(i8* %89) #10
  %90 = load %"class.net::CTLogVerifier"*, %"class.net::CTLogVerifier"** %18, align 8
  br label %91

91:                                               ; preds = %84, %88
  %92 = phi %"class.net::CTLogVerifier"* [ %85, %84 ], [ %90, %88 ]
  %93 = ptrtoint %"class.net::CTLogVerifier"* %92 to i64
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #9
  %94 = icmp eq %"class.net::CTLogVerifier"* %92, null
  br i1 %94, label %112, label %95

95:                                               ; preds = %91
  %96 = load %class.scoped_refptr.25*, %class.scoped_refptr.25** %9, align 8
  %97 = load %class.scoped_refptr.25*, %class.scoped_refptr.25** %10, align 8
  %98 = icmp ult %class.scoped_refptr.25* %96, %97
  br i1 %98, label %99, label %103

99:                                               ; preds = %95
  %100 = bitcast %class.scoped_refptr.25* %96 to i64*
  store i64 %93, i64* %100, align 8
  store %"class.net::CTLogVerifier"* null, %"class.net::CTLogVerifier"** %18, align 8
  %101 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %96, i64 1
  %102 = ptrtoint %class.scoped_refptr.25* %101 to i64
  store i64 %102, i64* %26, align 8
  br label %112

103:                                              ; preds = %95
  call void @_ZNSt3__16vectorI13scoped_refptrIKN3net13CTLogVerifierEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.23"* nonnull %3, %class.scoped_refptr.25* nonnull dereferenceable(8) %4) #9
  %104 = load %"class.net::CTLogVerifier"*, %"class.net::CTLogVerifier"** %18, align 8
  %105 = icmp eq %"class.net::CTLogVerifier"* %104, null
  br i1 %105, label %112, label %106

106:                                              ; preds = %103
  %107 = getelementptr inbounds %"class.net::CTLogVerifier", %"class.net::CTLogVerifier"* %104, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %108 = atomicrmw sub i32* %107, i32 1 acq_rel
  %109 = icmp eq i32 %108, 1
  br i1 %109, label %110, label %112

110:                                              ; preds = %106
  call void @_ZN3net13CTLogVerifierD1Ev(%"class.net::CTLogVerifier"* nonnull %104) #9
  %111 = bitcast %"class.net::CTLogVerifier"* %104 to i8*
  call void @_ZdlPv(i8* %111) #10
  br label %112

112:                                              ; preds = %91, %110, %106, %103, %99
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  %113 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %56, i64 1
  %114 = icmp eq %"class.mojo::StructPtr"* %113, %14
  br i1 %114, label %27, label %55
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare %"class.net::CTLogVerifier"* @_ZN3net13CTLogVerifier6CreateERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEENS3_12basic_stringIcS5_NS3_9allocatorIcEEEE(%"class.base::BasicStringPiece"* dereferenceable(16), %"class.std::__1::basic_string"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN3net18MultiLogCTVerifier13CTLogProvider15NotifyCallbacksERKNSt3__16vectorI13scoped_refptrIKNS_13CTLogVerifierEENS2_9allocatorIS7_EEEE(%"class.net::MultiLogCTVerifier::CTLogProvider"*, %"class.std::__1::vector.23"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN3net13CTLogVerifierD1Ev(%"class.net::CTLogVerifier"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI13scoped_refptrIKN3net13CTLogVerifierEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.23"*, %class.scoped_refptr.25* dereferenceable(8)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %class.scoped_refptr.25** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.23"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.23"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.scoped_refptr.25** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #11
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to %class.scoped_refptr.25*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %class.scoped_refptr.25* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %36, i64 %9
  %38 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %36, i64 %35
  %39 = ptrtoint %class.scoped_refptr.25* %38 to i64
  %40 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %1, i64 0, i32 0
  %41 = bitcast %class.scoped_refptr.25* %1 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %class.scoped_refptr.25* %37 to i64*
  store i64 %42, i64* %43, align 8
  store %"class.net::CTLogVerifier"* null, %"class.net::CTLogVerifier"** %40, align 8
  %44 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %37, i64 1
  %45 = ptrtoint %class.scoped_refptr.25* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %0, i64 0, i32 0, i32 0
  %47 = load %class.scoped_refptr.25*, %class.scoped_refptr.25** %46, align 8
  %48 = ptrtoint %class.scoped_refptr.25* %47 to i64
  %49 = load %class.scoped_refptr.25*, %class.scoped_refptr.25** %3, align 8
  %50 = icmp eq %class.scoped_refptr.25* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %class.scoped_refptr.25, %class.scoped_refptr.25* %49, i64 -1, i32 0
  %53 = ptrtoint %"class.net::CTLogVerifier"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %class.scoped_refptr.25* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %class.scoped_refptr.25* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %60, i64 -1
  %64 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %61, i64 -1
  %65 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %64, i64 0, i32 0
  %66 = bitcast %class.scoped_refptr.25* %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %class.scoped_refptr.25* %63 to i64*
  store i64 %67, i64* %68, align 8
  store %"class.net::CTLogVerifier"* null, %"class.net::CTLogVerifier"** %65, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !2

71:                                               ; preds = %59, %51
  %72 = phi %class.scoped_refptr.25* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %class.scoped_refptr.25* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %class.scoped_refptr.25* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %class.scoped_refptr.25* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %class.scoped_refptr.25* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %77, i64 -1
  %80 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %78, i64 -1
  %81 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %80, i64 0, i32 0
  %82 = bitcast %class.scoped_refptr.25* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %class.scoped_refptr.25* %79 to i64*
  store i64 %83, i64* %84, align 8
  store %"class.net::CTLogVerifier"* null, %"class.net::CTLogVerifier"** %81, align 8
  %85 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %77, i64 -2
  %86 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %78, i64 -2
  %87 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %86, i64 0, i32 0
  %88 = bitcast %class.scoped_refptr.25* %86 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = bitcast %class.scoped_refptr.25* %85 to i64*
  store i64 %89, i64* %90, align 8
  store %"class.net::CTLogVerifier"* null, %"class.net::CTLogVerifier"** %87, align 8
  %91 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %77, i64 -3
  %92 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %78, i64 -3
  %93 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %92, i64 0, i32 0
  %94 = bitcast %class.scoped_refptr.25* %92 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %class.scoped_refptr.25* %91 to i64*
  store i64 %95, i64* %96, align 8
  store %"class.net::CTLogVerifier"* null, %"class.net::CTLogVerifier"** %93, align 8
  %97 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %77, i64 -4
  %98 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %78, i64 -4
  %99 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %98, i64 0, i32 0
  %100 = bitcast %class.scoped_refptr.25* %98 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %class.scoped_refptr.25* %97 to i64*
  store i64 %101, i64* %102, align 8
  store %"class.net::CTLogVerifier"* null, %"class.net::CTLogVerifier"** %99, align 8
  %103 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %77, i64 -5
  %104 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %78, i64 -5
  %105 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %104, i64 0, i32 0
  %106 = bitcast %class.scoped_refptr.25* %104 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %class.scoped_refptr.25* %103 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.net::CTLogVerifier"* null, %"class.net::CTLogVerifier"** %105, align 8
  %109 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %77, i64 -6
  %110 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %78, i64 -6
  %111 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %110, i64 0, i32 0
  %112 = bitcast %class.scoped_refptr.25* %110 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %class.scoped_refptr.25* %109 to i64*
  store i64 %113, i64* %114, align 8
  store %"class.net::CTLogVerifier"* null, %"class.net::CTLogVerifier"** %111, align 8
  %115 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %77, i64 -7
  %116 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %78, i64 -7
  %117 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %116, i64 0, i32 0
  %118 = bitcast %class.scoped_refptr.25* %116 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %class.scoped_refptr.25* %115 to i64*
  store i64 %119, i64* %120, align 8
  store %"class.net::CTLogVerifier"* null, %"class.net::CTLogVerifier"** %117, align 8
  %121 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %77, i64 -8
  %122 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %78, i64 -8
  %123 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %122, i64 0, i32 0
  %124 = bitcast %class.scoped_refptr.25* %122 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = bitcast %class.scoped_refptr.25* %121 to i64*
  store i64 %125, i64* %126, align 8
  store %"class.net::CTLogVerifier"* null, %"class.net::CTLogVerifier"** %123, align 8
  %127 = icmp eq %class.scoped_refptr.25* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %class.scoped_refptr.25* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %class.scoped_refptr.25*, %class.scoped_refptr.25** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %class.scoped_refptr.25* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %class.scoped_refptr.25* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %class.scoped_refptr.25* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %class.scoped_refptr.25*
  %138 = icmp eq %class.scoped_refptr.25* %133, %137
  br i1 %138, label %153, label %139

139:                                              ; preds = %132, %151
  %140 = phi %class.scoped_refptr.25* [ %141, %151 ], [ %133, %132 ]
  %141 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %140, i64 -1
  %142 = getelementptr inbounds %class.scoped_refptr.25, %class.scoped_refptr.25* %141, i64 0, i32 0
  %143 = load %"class.net::CTLogVerifier"*, %"class.net::CTLogVerifier"** %142, align 8
  %144 = icmp eq %"class.net::CTLogVerifier"* %143, null
  br i1 %144, label %151, label %145

145:                                              ; preds = %139
  %146 = getelementptr inbounds %"class.net::CTLogVerifier", %"class.net::CTLogVerifier"* %143, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %147 = atomicrmw sub i32* %146, i32 1 acq_rel
  %148 = icmp eq i32 %147, 1
  br i1 %148, label %149, label %151

149:                                              ; preds = %145
  tail call void @_ZN3net13CTLogVerifierD1Ev(%"class.net::CTLogVerifier"* nonnull %143) #9
  %150 = bitcast %"class.net::CTLogVerifier"* %143 to i8*
  tail call void @_ZdlPv(i8* %150) #10
  br label %151

151:                                              ; preds = %149, %145, %139
  %152 = icmp eq %class.scoped_refptr.25* %141, %137
  br i1 %152, label %153, label %139

153:                                              ; preds = %151, %132
  %154 = icmp eq i64 %135, 0
  br i1 %154, label %157, label %155

155:                                              ; preds = %153
  %156 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %156) #10
  br label %157

157:                                              ; preds = %153, %155
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
