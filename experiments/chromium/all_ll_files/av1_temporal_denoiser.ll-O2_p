; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/av1_temporal_denoiser.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/av1_temporal_denoiser.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }

@block_size_high = internal unnamed_addr constant [22 x i8] c"\04\08\04\08\10\08\10 \10 @ @\80@\80\10\04 \08@\10", align 16
@block_size_wide = internal unnamed_addr constant [22 x i8] c"\04\04\08\08\08\10\10\10   @@@\80\80\04\10\08 \10@", align 16
@num_pels_log2_lookup = internal unnamed_addr constant [22 x i8] c"\04\05\05\06\07\07\08\09\09\0A\0B\0B\0C\0D\0D\0E\06\06\08\08\0A\0A", align 16
@aom_convolve_copy = external local_unnamed_addr global void (i8*, i64, i8*, i64, i32, i32)*, align 8
@.str = private unnamed_addr constant [43 x i8] c"Failed to allocate denoiser->running_avg_y\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"Failed to allocate denoiser->mc_running_avg_y\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @av1_denoiser_filter_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture, i32, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %10 = icmp slt i32 %8, 25
  br i1 %10, label %11, label %17

11:                                               ; preds = %9
  %12 = icmp eq i32 %6, 0
  %13 = select i1 %12, i32 1, i32 2
  %14 = add nuw nsw i32 %13, 3
  %15 = or i32 %13, 4
  %16 = add nuw nsw i32 %13, 6
  br label %17

17:                                               ; preds = %9, %11
  %18 = phi i32 [ %16, %11 ], [ 6, %9 ]
  %19 = phi i32 [ %15, %11 ], [ 4, %9 ]
  %20 = phi i32 [ %14, %11 ], [ 3, %9 ]
  %21 = zext i8 %7 to i64
  %22 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %21
  %25 = icmp eq i32 %6, 0
  %26 = select i1 %25, i32 3, i32 4
  %27 = sext i32 %1 to i64
  %28 = sext i32 %5 to i64
  %29 = sext i32 %3 to i64
  %30 = zext i8 %23 to i32
  %31 = load i8, i8* %24, align 1
  %32 = zext i8 %31 to i64
  br label %33

33:                                               ; preds = %80, %17
  %34 = phi i32 [ 0, %17 ], [ %77, %80 ]
  %35 = phi i32 [ 0, %17 ], [ %84, %80 ]
  %36 = phi i8* [ %0, %17 ], [ %81, %80 ]
  %37 = phi i8* [ %2, %17 ], [ %83, %80 ]
  %38 = phi i8* [ %4, %17 ], [ %82, %80 ]
  br label %39

39:                                               ; preds = %33, %76
  %40 = phi i64 [ 0, %33 ], [ %78, %76 ]
  %41 = phi i32 [ %34, %33 ], [ %77, %76 ]
  %42 = getelementptr inbounds i8, i8* %37, i64 %40
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %36, i64 %40
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = sub nsw i32 %44, %47
  %49 = icmp slt i32 %48, 0
  %50 = sub nsw i32 0, %48
  %51 = select i1 %49, i32 %50, i32 %48
  %52 = icmp sgt i32 %51, %26
  br i1 %52, label %56, label %53

53:                                               ; preds = %39
  %54 = getelementptr inbounds i8, i8* %38, i64 %40
  store i8 %43, i8* %54, align 1
  %55 = add nsw i32 %48, %41
  br label %76

56:                                               ; preds = %39
  switch i32 %51, label %58 [
    i32 4, label %59
    i32 5, label %59
    i32 6, label %59
    i32 7, label %59
    i32 8, label %57
    i32 9, label %57
    i32 10, label %57
    i32 11, label %57
    i32 12, label %57
    i32 13, label %57
    i32 14, label %57
    i32 15, label %57
  ]

57:                                               ; preds = %56, %56, %56, %56, %56, %56, %56, %56
  br label %59

58:                                               ; preds = %56
  br label %59

59:                                               ; preds = %56, %56, %56, %56, %58, %57
  %60 = phi i32 [ %18, %58 ], [ %19, %57 ], [ %20, %56 ], [ %20, %56 ], [ %20, %56 ], [ %20, %56 ]
  %61 = icmp sgt i32 %48, 0
  br i1 %61, label %62, label %69

62:                                               ; preds = %59
  %63 = add nsw i32 %60, %47
  %64 = icmp slt i32 %63, 255
  %65 = select i1 %64, i32 %63, i32 255
  %66 = trunc i32 %65 to i8
  %67 = getelementptr inbounds i8, i8* %38, i64 %40
  store i8 %66, i8* %67, align 1
  %68 = add nsw i32 %60, %41
  br label %76

69:                                               ; preds = %59
  %70 = sub nsw i32 %47, %60
  %71 = icmp sgt i32 %70, 0
  %72 = select i1 %71, i32 %70, i32 0
  %73 = trunc i32 %72 to i8
  %74 = getelementptr inbounds i8, i8* %38, i64 %40
  store i8 %73, i8* %74, align 1
  %75 = sub nsw i32 %41, %60
  br label %76

76:                                               ; preds = %53, %69, %62
  %77 = phi i32 [ %55, %53 ], [ %68, %62 ], [ %75, %69 ]
  %78 = add nuw nsw i64 %40, 1
  %79 = icmp ult i64 %78, %32
  br i1 %79, label %39, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds i8, i8* %36, i64 %27
  %82 = getelementptr inbounds i8, i8* %38, i64 %28
  %83 = getelementptr inbounds i8, i8* %37, i64 %29
  %84 = add nuw nsw i32 %35, 1
  %85 = icmp ult i32 %84, %30
  br i1 %85, label %33, label %86

86:                                               ; preds = %80
  %87 = icmp slt i32 %77, 0
  %88 = sub nsw i32 0, %77
  %89 = select i1 %87, i32 %88, i32 %77
  %90 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %21
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = icmp eq i32 %6, 0
  %94 = select i1 %93, i32 2, i32 3
  %95 = shl i32 %94, %92
  %96 = icmp sgt i32 %89, %95
  br i1 %96, label %97, label %162

97:                                               ; preds = %86
  %98 = sub nsw i32 %89, %95
  %99 = ashr i32 %98, %92
  %100 = add nsw i32 %99, 1
  %101 = icmp sgt i32 %99, 2
  br i1 %101, label %162, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %21
  %104 = sext i32 %1 to i64
  %105 = sext i32 %5 to i64
  %106 = sext i32 %3 to i64
  %107 = load i8, i8* %103, align 1
  %108 = zext i8 %107 to i64
  br label %109

109:                                              ; preds = %102, %150
  %110 = phi i32 [ %77, %102 ], [ %147, %150 ]
  %111 = phi i32 [ 0, %102 ], [ %154, %150 ]
  %112 = phi i8* [ %0, %102 ], [ %151, %150 ]
  %113 = phi i8* [ %2, %102 ], [ %153, %150 ]
  %114 = phi i8* [ %4, %102 ], [ %152, %150 ]
  br label %115

115:                                              ; preds = %109, %146
  %116 = phi i64 [ 0, %109 ], [ %148, %146 ]
  %117 = phi i32 [ %110, %109 ], [ %147, %146 ]
  %118 = getelementptr inbounds i8, i8* %113, i64 %116
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = getelementptr inbounds i8, i8* %112, i64 %116
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = sub nsw i32 %120, %123
  %125 = icmp slt i32 %124, 0
  %126 = sub nsw i32 0, %124
  %127 = select i1 %125, i32 %126, i32 %124
  %128 = icmp sgt i32 %127, %100
  %129 = select i1 %128, i32 %100, i32 %127
  %130 = icmp sgt i32 %124, 0
  %131 = getelementptr inbounds i8, i8* %114, i64 %116
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  br i1 %130, label %134, label %140

134:                                              ; preds = %115
  %135 = sub nsw i32 %133, %129
  %136 = icmp sgt i32 %135, 0
  %137 = select i1 %136, i32 %135, i32 0
  %138 = trunc i32 %137 to i8
  store i8 %138, i8* %131, align 1
  %139 = sub nsw i32 %117, %129
  br label %146

140:                                              ; preds = %115
  %141 = add nsw i32 %129, %133
  %142 = icmp slt i32 %141, 255
  %143 = select i1 %142, i32 %141, i32 255
  %144 = trunc i32 %143 to i8
  store i8 %144, i8* %131, align 1
  %145 = add nsw i32 %129, %117
  br label %146

146:                                              ; preds = %134, %140
  %147 = phi i32 [ %139, %134 ], [ %145, %140 ]
  %148 = add nuw nsw i64 %116, 1
  %149 = icmp ult i64 %148, %108
  br i1 %149, label %115, label %150

150:                                              ; preds = %146
  %151 = getelementptr inbounds i8, i8* %112, i64 %104
  %152 = getelementptr inbounds i8, i8* %114, i64 %105
  %153 = getelementptr inbounds i8, i8* %113, i64 %106
  %154 = add nuw nsw i32 %111, 1
  %155 = icmp eq i32 %154, %30
  br i1 %155, label %156, label %109

156:                                              ; preds = %150
  %157 = sub nsw i32 0, %147
  %158 = icmp slt i32 %147, 0
  %159 = select i1 %158, i32 %157, i32 %147
  %160 = icmp sle i32 %159, %95
  %161 = zext i1 %160 to i32
  br label %162

162:                                              ; preds = %156, %97, %86
  %163 = phi i32 [ 1, %86 ], [ 0, %97 ], [ %161, %156 ]
  ret i32 %163
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_denoiser_denoise(%struct.AV1_COMP*, %struct.macroblock*, i32, i32, i8 zeroext, %struct.PICK_MODE_CONTEXT* nocapture, i32* nocapture, i32) local_unnamed_addr #2 {
  %9 = alloca %struct.MB_MODE_INFO, align 8
  %10 = alloca [3 x %struct.buf_2d], align 16
  %11 = alloca [3 x %struct.buf_2d], align 16
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %15 = load i32, i32* %14, align 16
  %16 = sub nsw i32 %13, %15
  %17 = icmp eq i32 %16, 2
  br i1 %17, label %18, label %22

18:                                               ; preds = %8
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 5
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  br label %22

22:                                               ; preds = %8, %18
  %23 = phi i64 [ %21, %18 ], [ 0, %8 ]
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 0
  %25 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %24, align 8
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %25, i64 %23, i32 4, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %25, i64 %23, i32 5, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = xor i32 %15, -1
  %31 = add i32 %13, %30
  %32 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 1
  %33 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %32, align 8
  %34 = sext i32 %31 to i64
  %35 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %33, i64 %34, i32 4, i32 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %33, i64 %34, i32 5, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = shl i32 %2, 2
  %40 = mul i32 %39, %27
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %29, i64 %41
  %43 = shl i32 %3, 2
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %42, i64 %44
  %46 = mul i32 %39, %36
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %38, i64 %47
  %49 = getelementptr inbounds i8, i8* %48, i64 %44
  %50 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 0
  %51 = load i8*, i8** %50, align 16
  %52 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 4
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 38
  %55 = load i32, i32* %54, align 8
  %56 = and i32 %55, 1
  %57 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 21
  %58 = bitcast %union.int_mv* %57 to %struct.mv*
  %59 = getelementptr inbounds %struct.mv, %struct.mv* %58, i64 0, i32 1
  %60 = load i16, i16* %59, align 2
  %61 = sext i16 %60 to i32
  %62 = bitcast %union.int_mv* %57 to i16*
  %63 = load i16, i16* %62, align 4
  %64 = sext i16 %63 to i32
  %65 = mul nsw i32 %64, %64
  %66 = mul nsw i32 %61, %61
  %67 = add nuw nsw i32 %65, %66
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 8
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, 3
  %71 = zext i1 %70 to i32
  %72 = icmp eq i32 %56, 0
  %73 = icmp eq i32 %69, 0
  %74 = or i1 %72, %73
  br i1 %74, label %266, label %75

75:                                               ; preds = %22
  %76 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 24
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %266

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 12
  %81 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %80, align 8
  %82 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %81, i64 0, i32 0, i32 0, i32 0
  %83 = load i32, i32* %82, align 8
  %84 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 0
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 3
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %89 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %88, align 16
  %90 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %89, i64 0, i32 16
  %91 = load i32, i32* %90, align 8
  %92 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 17
  %93 = load i64, i64* %92, align 8
  %94 = icmp eq i64 %93, 4294967295
  br i1 %94, label %101, label %95

95:                                               ; preds = %79
  %96 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 18
  %97 = load i64, i64* %96, align 8
  %98 = trunc i64 %97 to i32
  %99 = trunc i64 %93 to i32
  %100 = sub nsw i32 %98, %99
  br label %101

101:                                              ; preds = %95, %79
  %102 = phi i32 [ %100, %95 ], [ 0, %79 ]
  %103 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %104 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %105 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %104, align 8
  %106 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %105, align 8
  %107 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %107)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %107, i8 -86, i64 184, i1 false)
  %108 = bitcast [3 x %struct.buf_2d]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %108)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %108, i8 -86, i64 96, i1 false)
  %109 = bitcast [3 x %struct.buf_2d]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %109)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %109, i8 -86, i64 96, i1 false)
  %110 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 22
  %111 = load i8, i8* %110, align 8
  %112 = sext i8 %111 to i32
  %113 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %106, i64 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %107, i8* align 8 %113, i64 184, i1 false) #6
  %114 = add i8 %4, -3
  %115 = icmp ult i8 %114, 3
  br i1 %115, label %264, label %116

116:                                              ; preds = %101
  %117 = icmp eq i8 %4, 6
  %118 = icmp sgt i32 %83, 480
  %119 = and i1 %117, %118
  %120 = icmp ult i32 %69, 2
  %121 = and i1 %119, %120
  br i1 %121, label %264, label %122

122:                                              ; preds = %116
  switch i8 %111, label %123 [
    i8 7, label %144
    i8 4, label %144
    i8 0, label %144
  ]

123:                                              ; preds = %122
  %124 = icmp ult i32 %67, 626
  %125 = or i1 %124, %70
  br i1 %125, label %126, label %133

126:                                              ; preds = %123
  %127 = select i1 %124, i32 16, i32 4
  %128 = zext i8 %4 to i64
  %129 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = shl i32 %127, %131
  br label %133

133:                                              ; preds = %123, %126
  %134 = phi i32 [ %132, %126 ], [ 0, %123 ]
  %135 = icmp sgt i32 %102, %134
  br i1 %135, label %136, label %144

136:                                              ; preds = %133
  %137 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %106, i64 0, i32 6, i64 0
  store i8 %111, i8* %137, align 8
  %138 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 20
  %139 = load i8, i8* %138, align 8
  %140 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %106, i64 0, i32 2
  store i8 %139, i8* %140, align 2
  %141 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 21, i32 0
  %142 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %106, i64 0, i32 5, i64 0, i32 0
  %143 = load i32, i32* %141, align 4
  store i32 %143, i32* %142, align 8
  br label %186

144:                                              ; preds = %133, %122, %122, %122
  %145 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 23
  %146 = load i8, i8* %145, align 1
  %147 = sext i8 %146 to i32
  %148 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 18
  %149 = load i64, i64* %148, align 8
  store i64 %149, i64* %92, align 8
  %150 = icmp slt i32 %13, 2
  %151 = icmp ne i32 %7, 0
  %152 = or i1 %151, %150
  %153 = xor i1 %152, true
  %154 = icmp eq i8 %146, 7
  %155 = or i1 %154, %153
  %156 = icmp eq i8 %146, 4
  %157 = and i1 %151, %156
  %158 = or i1 %155, %157
  br i1 %158, label %159, label %162

159:                                              ; preds = %144
  %160 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 19
  %161 = load i64, i64* %160, align 8
  br label %173

162:                                              ; preds = %144
  %163 = icmp eq i8 %146, 1
  br i1 %163, label %175, label %164

164:                                              ; preds = %162
  %165 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 19
  %166 = load i64, i64* %165, align 8
  %167 = mul nsw i64 %149, 5
  %168 = ashr i64 %167, 2
  %169 = icmp slt i64 %166, %168
  br i1 %169, label %173, label %170

170:                                              ; preds = %164
  %171 = load i32, i32* %68, align 4
  %172 = icmp ugt i32 %171, 2
  br i1 %172, label %173, label %175

173:                                              ; preds = %170, %164, %159
  %174 = phi i64 [ %161, %159 ], [ %166, %170 ], [ %166, %164 ]
  store i64 %174, i64* %92, align 8
  br label %175

175:                                              ; preds = %173, %170, %162
  %176 = phi i32 [ 1, %173 ], [ %147, %170 ], [ 1, %162 ]
  %177 = trunc i32 %176 to i8
  %178 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %106, i64 0, i32 6, i64 0
  store i8 %177, i8* %178, align 8
  %179 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %106, i64 0, i32 2
  store i8 15, i8* %179, align 2
  %180 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %106, i64 0, i32 5, i64 0, i32 0
  store i32 0, i32* %180, align 8
  %181 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 20
  store i8 15, i8* %181, align 8
  %182 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 21, i32 0
  store i32 0, i32* %182, align 4
  %183 = load i32, i32* %68, align 4
  %184 = icmp ugt i32 %183, 2
  %185 = select i1 %184, i32 0, i32 %67
  br label %186

186:                                              ; preds = %175, %136
  %187 = phi i32 [ 0, %136 ], [ 1, %175 ]
  %188 = phi i8 [ %111, %136 ], [ %177, %175 ]
  %189 = phi i32 [ %67, %136 ], [ %185, %175 ]
  %190 = phi i32 [ %112, %136 ], [ %176, %175 ]
  %191 = icmp eq i32 %91, 0
  br i1 %191, label %207, label %192

192:                                              ; preds = %186
  switch i32 %190, label %197 [
    i32 1, label %193
    i32 4, label %195
  ]

193:                                              ; preds = %192
  %194 = add nsw i32 %85, 1
  br label %197

195:                                              ; preds = %192
  %196 = add nsw i32 %87, 1
  br label %197

197:                                              ; preds = %195, %193, %192
  %198 = phi i32 [ %194, %193 ], [ %196, %195 ], [ %190, %192 ]
  br i1 %17, label %199, label %203

199:                                              ; preds = %197
  %200 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 5
  %201 = load i32, i32* %200, align 8
  %202 = add nsw i32 %201, %198
  br label %203

203:                                              ; preds = %199, %197
  %204 = phi i32 [ %202, %199 ], [ %198, %197 ]
  %205 = add nsw i32 %16, -1
  %206 = sext i32 %205 to i64
  br label %207

207:                                              ; preds = %203, %186
  %208 = phi i32 [ %204, %203 ], [ %190, %186 ]
  %209 = phi i64 [ %206, %203 ], [ 0, %186 ]
  %210 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %24, align 8
  %211 = sext i32 %208 to i64
  %212 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %210, i64 %211, i32 10
  %213 = load i8*, i8** %212, align 8
  %214 = icmp eq i8* %213, null
  br i1 %214, label %215, label %216

215:                                              ; preds = %207
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* nonnull align 8 %107, i64 184, i1 false) #6
  br label %264

216:                                              ; preds = %207
  %217 = load i64, i64* %92, align 8
  %218 = zext i8 %4 to i64
  %219 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %218
  %220 = load i8, i8* %219, align 1
  %221 = zext i8 %220 to i32
  %222 = select i1 %70, i32 80, i32 40
  %223 = shl i32 %222, %221
  %224 = zext i32 %223 to i64
  %225 = icmp sgt i64 %217, %224
  br i1 %225, label %226, label %227

226:                                              ; preds = %216
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* nonnull align 8 %107, i64 184, i1 false) #6
  br label %264

227:                                              ; preds = %216
  %228 = icmp sgt i32 %189, 5000
  br i1 %228, label %254, label %229

229:                                              ; preds = %227
  %230 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 4, i64 0
  %231 = bitcast %struct.buf_2d* %230 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %109, i8* align 16 %231, i64 32, i1 false) #6
  %232 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 3
  %233 = bitcast %struct.buf_2d* %232 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %108, i8* align 16 %233, i64 32, i1 false) #6
  %234 = getelementptr inbounds [3 x %struct.buf_2d], [3 x %struct.buf_2d]* %11, i64 0, i64 1
  %235 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 4, i64 0
  %236 = bitcast %struct.buf_2d* %234 to i8*
  %237 = bitcast %struct.buf_2d* %235 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %236, i8* align 16 %237, i64 32, i1 false) #6
  %238 = getelementptr inbounds [3 x %struct.buf_2d], [3 x %struct.buf_2d]* %10, i64 0, i64 1
  %239 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 3
  %240 = bitcast %struct.buf_2d* %238 to i8*
  %241 = bitcast %struct.buf_2d* %239 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %240, i8* align 16 %241, i64 32, i1 false) #6
  %242 = getelementptr inbounds [3 x %struct.buf_2d], [3 x %struct.buf_2d]* %11, i64 0, i64 2
  %243 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 2, i32 4, i64 0
  %244 = bitcast %struct.buf_2d* %242 to i8*
  %245 = bitcast %struct.buf_2d* %243 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %244, i8* align 16 %245, i64 32, i1 false) #6
  %246 = getelementptr inbounds [3 x %struct.buf_2d], [3 x %struct.buf_2d]* %10, i64 0, i64 2
  %247 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 2, i32 3
  %248 = bitcast %struct.buf_2d* %246 to i8*
  %249 = bitcast %struct.buf_2d* %247 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %248, i8* align 16 %249, i64 32, i1 false) #6
  %250 = icmp sgt i8 %188, 1
  %251 = select i1 %250, i8 %188, i8 1
  %252 = add nsw i8 %251, -1
  %253 = icmp ult i8 %252, 8
  br i1 %253, label %255, label %263

254:                                              ; preds = %227
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* nonnull align 8 %107, i64 184, i1 false) #6
  br label %264

255:                                              ; preds = %229
  %256 = zext i8 %251 to i64
  %257 = add nsw i64 %256, -1
  %258 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 %257
  %259 = load i32, i32* %258, align 4
  %260 = icmp eq i32 %259, -1
  %261 = sext i32 %259 to i64
  %262 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %261
  br i1 %260, label %263, label %269

263:                                              ; preds = %255, %229
  br label %269

264:                                              ; preds = %116, %101, %215, %226, %254
  %265 = phi i32 [ %187, %254 ], [ %187, %226 ], [ %187, %215 ], [ 0, %101 ], [ 0, %116 ]
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %109)
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %108)
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %107)
  br label %266

266:                                              ; preds = %264, %75, %22
  %267 = phi i32 [ 0, %75 ], [ 0, %22 ], [ %265, %264 ]
  %268 = load void (i8*, i64, i8*, i64, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32)** @aom_convolve_copy, align 8
  br label %297

269:                                              ; preds = %263, %255
  %270 = phi %struct.scale_factors* [ null, %263 ], [ %262, %255 ]
  %271 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 21, i64 0
  store %struct.scale_factors* %270, %struct.scale_factors** %271, align 8
  %272 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 0
  %273 = load i32, i32* %272, align 4
  %274 = icmp eq i32 %273, -1
  %275 = sext i32 %273 to i64
  %276 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %275
  %277 = select i1 %274, %struct.scale_factors* null, %struct.scale_factors* %276
  %278 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 21, i64 1
  store %struct.scale_factors* %277, %struct.scale_factors** %278, align 8
  %279 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %24, align 8
  %280 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %279, i64 %211
  tail call void @av1_setup_pre_planes(%struct.macroblockd* %103, i32 0, %struct.yv12_buffer_config* %280, i32 %2, i32 %3, %struct.scale_factors* %270, i32 1) #6
  %281 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0
  %282 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %32, align 8
  %283 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %282, i64 %209
  tail call void @av1_setup_dst_planes(%struct.macroblockd_plane* %281, i8 zeroext %4, %struct.yv12_buffer_config* %283, i32 %2, i32 %3, i32 0, i32 1) #6
  tail call void @av1_enc_build_inter_predictor_y(%struct.macroblockd* %103, i32 %2, i32 %3) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* nonnull align 8 %107, i64 184, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %231, i8* nonnull align 16 %109, i64 32, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %233, i8* nonnull align 16 %108, i64 32, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %237, i8* align 16 %236, i64 32, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %241, i8* align 16 %240, i64 32, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %245, i8* align 16 %244, i64 32, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %249, i8* align 16 %248, i64 32, i1 false) #6
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %109)
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %108)
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %107)
  %284 = tail call i32 @av1_denoiser_filter_sse2(i8* %51, i32 %53, i8* %49, i32 %36, i8* %45, i32 %27, i32 %71, i8 zeroext %4, i32 %67) #6
  %285 = icmp eq i32 %284, 1
  %286 = load void (i8*, i64, i8*, i64, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32)** @aom_convolve_copy, align 8
  br i1 %285, label %287, label %297

287:                                              ; preds = %269
  %288 = sext i32 %27 to i64
  %289 = sext i32 %53 to i64
  %290 = zext i8 %4 to i64
  %291 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %290
  %292 = load i8, i8* %291, align 1
  %293 = zext i8 %292 to i32
  %294 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %290
  %295 = load i8, i8* %294, align 1
  %296 = zext i8 %295 to i32
  tail call void %286(i8* %45, i64 %288, i8* %51, i64 %289, i32 %293, i32 %296) #6
  br label %310

297:                                              ; preds = %266, %269
  %298 = phi void (i8*, i64, i8*, i64, i32, i32)* [ %268, %266 ], [ %286, %269 ]
  %299 = phi i32 [ 0, %266 ], [ %284, %269 ]
  %300 = phi i32 [ %267, %266 ], [ %187, %269 ]
  %301 = sext i32 %53 to i64
  %302 = sext i32 %27 to i64
  %303 = zext i8 %4 to i64
  %304 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %303
  %305 = load i8, i8* %304, align 1
  %306 = zext i8 %305 to i32
  %307 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %303
  %308 = load i8, i8* %307, align 1
  %309 = zext i8 %308 to i32
  tail call void %298(i8* %51, i64 %301, i8* %45, i64 %302, i32 %306, i32 %309) #6
  br label %310

310:                                              ; preds = %297, %287
  %311 = phi i1 [ false, %297 ], [ true, %287 ]
  %312 = phi i32 [ %299, %297 ], [ 1, %287 ]
  %313 = phi i32 [ %300, %297 ], [ %187, %287 ]
  %314 = icmp eq i32 %313, 1
  %315 = and i1 %311, %314
  %316 = select i1 %315, i32 2, i32 %312
  store i32 %316, i32* %6, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @av1_denoiser_filter_sse2(i8*, i32, i8*, i32, i8*, i32, i32, i8 zeroext, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_denoiser_update_frame_info(%struct.av1_denoiser* nocapture, %struct.yv12_buffer_config* nocapture readonly byval(%struct.yv12_buffer_config) align 8, %struct.SVC* nocapture readonly, i8 zeroext, i32, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2 {
  %14 = icmp eq i32 %12, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 5
  %17 = load i32, i32* %16, align 8
  br label %18

18:                                               ; preds = %13, %15
  %19 = phi i32 [ %17, %15 ], [ 0, %13 ]
  %20 = icmp eq i8 %3, 0
  %21 = icmp ne i32 %10, 0
  %22 = or i1 %20, %21
  br i1 %22, label %28, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = or i32 %25, %11
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %79, label %28

28:                                               ; preds = %23, %18
  %29 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 5
  %30 = load i32, i32* %29, align 8
  %31 = icmp sgt i32 %30, 1
  br i1 %31, label %32, label %77

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 0
  %34 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5, i32 0, i32 0
  %35 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4, i32 0, i32 0
  %36 = sext i32 %19 to i64
  br label %37

37:                                               ; preds = %32, %72
  %38 = phi i32 [ %30, %32 ], [ %73, %72 ]
  %39 = phi i64 [ 1, %32 ], [ %74, %72 ]
  %40 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %33, align 8
  %41 = add nsw i64 %39, %36
  %42 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %40, i64 %41, i32 10
  %43 = load i8*, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %72, label %45

45:                                               ; preds = %37
  %46 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %40, i64 %41, i32 1, i32 0, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %72

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %40, i64 %41, i32 5, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = load i8*, i8** %34, align 8
  %53 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %40, i64 %41, i32 0, i32 0, i32 0
  %54 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %40, i64 %41, i32 4, i32 0, i32 0
  br label %55

55:                                               ; preds = %55, %49
  %56 = phi i8* [ %51, %49 ], [ %63, %55 ]
  %57 = phi i8* [ %52, %49 ], [ %66, %55 ]
  %58 = phi i32 [ 0, %49 ], [ %67, %55 ]
  %59 = load i32, i32* %53, align 8
  %60 = sext i32 %59 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %56, i8* align 1 %57, i64 %60, i1 false) #6
  %61 = load i32, i32* %54, align 8
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  %64 = load i32, i32* %35, align 8
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %57, i64 %65
  %67 = add nuw nsw i32 %58, 1
  %68 = load i32, i32* %46, align 8
  %69 = icmp slt i32 %67, %68
  br i1 %69, label %55, label %70

70:                                               ; preds = %55
  %71 = load i32, i32* %29, align 8
  br label %72

72:                                               ; preds = %70, %45, %37
  %73 = phi i32 [ %71, %70 ], [ %38, %45 ], [ %38, %37 ]
  %74 = add nuw nsw i64 %39, 1
  %75 = sext i32 %73 to i64
  %76 = icmp slt i64 %74, %75
  br i1 %76, label %37, label %77

77:                                               ; preds = %72, %28
  %78 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 4
  store i32 0, i32* %78, align 4
  br label %284

79:                                               ; preds = %23
  %80 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 4
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %131, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 0
  %85 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 0
  %86 = add i32 %19, 1
  %87 = sext i32 %19 to i64
  br label %88

88:                                               ; preds = %128, %83
  %89 = phi i64 [ 0, %83 ], [ %129, %128 ]
  %90 = load i32, i32* %84, align 8
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 10, i64 %91
  %93 = load i32, i32* %92, align 4
  %94 = trunc i64 %89 to i32
  %95 = shl i32 1, %94
  %96 = and i32 %93, %95
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %128, label %98

98:                                               ; preds = %88
  %99 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %85, align 8
  %100 = add i32 %86, %94
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %99, i64 %101, i32 1, i32 0, i32 0
  %103 = load i32, i32* %102, align 8
  %104 = icmp sgt i32 %103, 0
  br i1 %104, label %105, label %128

105:                                              ; preds = %98
  %106 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %99, i64 %101, i32 5, i32 0, i32 0
  %107 = load i8*, i8** %106, align 8
  %108 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %99, i64 %87, i32 5, i32 0, i32 0
  %109 = load i8*, i8** %108, align 8
  %110 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %99, i64 %101, i32 0, i32 0, i32 0
  %111 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %99, i64 %101, i32 4, i32 0, i32 0
  %112 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %99, i64 %87, i32 4, i32 0, i32 0
  br label %113

113:                                              ; preds = %113, %105
  %114 = phi i8* [ %107, %105 ], [ %121, %113 ]
  %115 = phi i8* [ %109, %105 ], [ %124, %113 ]
  %116 = phi i32 [ 0, %105 ], [ %125, %113 ]
  %117 = load i32, i32* %110, align 8
  %118 = sext i32 %117 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 %115, i64 %118, i1 false) #6
  %119 = load i32, i32* %111, align 8
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %114, i64 %120
  %122 = load i32, i32* %112, align 8
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %115, i64 %123
  %125 = add nuw nsw i32 %116, 1
  %126 = load i32, i32* %102, align 8
  %127 = icmp slt i32 %125, %126
  br i1 %127, label %113, label %128

128:                                              ; preds = %113, %98, %88
  %129 = add nuw nsw i64 %89, 1
  %130 = icmp eq i64 %129, 8
  br i1 %130, label %284, label %88

131:                                              ; preds = %79
  %132 = add nsw i32 %5, %4
  %133 = add nsw i32 %132, %6
  %134 = icmp sgt i32 %133, 1
  %135 = icmp ne i32 %4, 0
  br i1 %134, label %136, label %240

136:                                              ; preds = %131
  br i1 %135, label %137, label %170

137:                                              ; preds = %136
  %138 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 0
  %139 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %138, align 8
  %140 = add i32 %19, 1
  %141 = add i32 %140, %7
  %142 = sext i32 %141 to i64
  %143 = sext i32 %19 to i64
  %144 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %139, i64 %142, i32 1, i32 0, i32 0
  %145 = load i32, i32* %144, align 8
  %146 = icmp sgt i32 %145, 0
  br i1 %146, label %147, label %170

147:                                              ; preds = %137
  %148 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %139, i64 %142, i32 5, i32 0, i32 0
  %149 = load i8*, i8** %148, align 8
  %150 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %139, i64 %143, i32 5, i32 0, i32 0
  %151 = load i8*, i8** %150, align 8
  %152 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %139, i64 %142, i32 0, i32 0, i32 0
  %153 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %139, i64 %142, i32 4, i32 0, i32 0
  %154 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %139, i64 %143, i32 4, i32 0, i32 0
  br label %155

155:                                              ; preds = %155, %147
  %156 = phi i8* [ %149, %147 ], [ %163, %155 ]
  %157 = phi i8* [ %151, %147 ], [ %166, %155 ]
  %158 = phi i32 [ 0, %147 ], [ %167, %155 ]
  %159 = load i32, i32* %152, align 8
  %160 = sext i32 %159 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %156, i8* align 1 %157, i64 %160, i1 false) #6
  %161 = load i32, i32* %153, align 8
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i8, i8* %156, i64 %162
  %164 = load i32, i32* %154, align 8
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds i8, i8* %157, i64 %165
  %167 = add nuw nsw i32 %158, 1
  %168 = load i32, i32* %144, align 8
  %169 = icmp slt i32 %167, %168
  br i1 %169, label %155, label %170

170:                                              ; preds = %155, %137, %136
  %171 = icmp eq i32 %5, 0
  br i1 %171, label %205, label %172

172:                                              ; preds = %170
  %173 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 0
  %174 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %173, align 8
  %175 = add i32 %19, 1
  %176 = add i32 %175, %8
  %177 = sext i32 %176 to i64
  %178 = sext i32 %19 to i64
  %179 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %174, i64 %177, i32 1, i32 0, i32 0
  %180 = load i32, i32* %179, align 8
  %181 = icmp sgt i32 %180, 0
  br i1 %181, label %182, label %205

182:                                              ; preds = %172
  %183 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %174, i64 %177, i32 5, i32 0, i32 0
  %184 = load i8*, i8** %183, align 8
  %185 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %174, i64 %178, i32 5, i32 0, i32 0
  %186 = load i8*, i8** %185, align 8
  %187 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %174, i64 %177, i32 0, i32 0, i32 0
  %188 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %174, i64 %177, i32 4, i32 0, i32 0
  %189 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %174, i64 %178, i32 4, i32 0, i32 0
  br label %190

190:                                              ; preds = %190, %182
  %191 = phi i8* [ %184, %182 ], [ %198, %190 ]
  %192 = phi i8* [ %186, %182 ], [ %201, %190 ]
  %193 = phi i32 [ 0, %182 ], [ %202, %190 ]
  %194 = load i32, i32* %187, align 8
  %195 = sext i32 %194 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %191, i8* align 1 %192, i64 %195, i1 false) #6
  %196 = load i32, i32* %188, align 8
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %191, i64 %197
  %199 = load i32, i32* %189, align 8
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds i8, i8* %192, i64 %200
  %202 = add nuw nsw i32 %193, 1
  %203 = load i32, i32* %179, align 8
  %204 = icmp slt i32 %202, %203
  br i1 %204, label %190, label %205

205:                                              ; preds = %190, %172, %170
  %206 = icmp eq i32 %6, 0
  br i1 %206, label %284, label %207

207:                                              ; preds = %205
  %208 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 0
  %209 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %208, align 8
  %210 = add i32 %19, 1
  %211 = add i32 %210, %9
  %212 = sext i32 %211 to i64
  %213 = sext i32 %19 to i64
  %214 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %209, i64 %212, i32 1, i32 0, i32 0
  %215 = load i32, i32* %214, align 8
  %216 = icmp sgt i32 %215, 0
  br i1 %216, label %217, label %284

217:                                              ; preds = %207
  %218 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %209, i64 %212, i32 5, i32 0, i32 0
  %219 = load i8*, i8** %218, align 8
  %220 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %209, i64 %213, i32 5, i32 0, i32 0
  %221 = load i8*, i8** %220, align 8
  %222 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %209, i64 %212, i32 0, i32 0, i32 0
  %223 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %209, i64 %212, i32 4, i32 0, i32 0
  %224 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %209, i64 %213, i32 4, i32 0, i32 0
  br label %225

225:                                              ; preds = %225, %217
  %226 = phi i8* [ %219, %217 ], [ %233, %225 ]
  %227 = phi i8* [ %221, %217 ], [ %236, %225 ]
  %228 = phi i32 [ 0, %217 ], [ %237, %225 ]
  %229 = load i32, i32* %222, align 8
  %230 = sext i32 %229 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %226, i8* align 1 %227, i64 %230, i1 false) #6
  %231 = load i32, i32* %223, align 8
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds i8, i8* %226, i64 %232
  %234 = load i32, i32* %224, align 8
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds i8, i8* %227, i64 %235
  %237 = add nuw nsw i32 %228, 1
  %238 = load i32, i32* %214, align 8
  %239 = icmp slt i32 %237, %238
  br i1 %239, label %225, label %284

240:                                              ; preds = %131
  br i1 %135, label %241, label %254

241:                                              ; preds = %240
  %242 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 0
  %243 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %242, align 8
  %244 = add i32 %19, 1
  %245 = add i32 %244, %7
  %246 = sext i32 %245 to i64
  %247 = sext i32 %19 to i64
  %248 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %243, i64 %246, i32 5, i32 0, i32 0
  %249 = bitcast i8** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %243, i64 %247, i32 5
  %252 = bitcast %union.anon.8* %251 to i64*
  %253 = load i64, i64* %252, align 8
  store i64 %253, i64* %249, align 8
  store i64 %250, i64* %252, align 8
  br label %254

254:                                              ; preds = %241, %240
  %255 = icmp eq i32 %5, 0
  br i1 %255, label %269, label %256

256:                                              ; preds = %254
  %257 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 0
  %258 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %257, align 8
  %259 = add i32 %19, 1
  %260 = add i32 %259, %8
  %261 = sext i32 %260 to i64
  %262 = sext i32 %19 to i64
  %263 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %258, i64 %261, i32 5, i32 0, i32 0
  %264 = bitcast i8** %263 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %258, i64 %262, i32 5
  %267 = bitcast %union.anon.8* %266 to i64*
  %268 = load i64, i64* %267, align 8
  store i64 %268, i64* %264, align 8
  store i64 %265, i64* %267, align 8
  br label %269

269:                                              ; preds = %254, %256
  %270 = icmp eq i32 %6, 0
  br i1 %270, label %284, label %271

271:                                              ; preds = %269
  %272 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 0
  %273 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %272, align 8
  %274 = add i32 %19, 1
  %275 = add i32 %274, %9
  %276 = sext i32 %275 to i64
  %277 = sext i32 %19 to i64
  %278 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %273, i64 %276, i32 5, i32 0, i32 0
  %279 = bitcast i8** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %273, i64 %277, i32 5
  %282 = bitcast %union.anon.8* %281 to i64*
  %283 = load i64, i64* %282, align 8
  store i64 %283, i64* %279, align 8
  store i64 %280, i64* %282, align 8
  br label %284

284:                                              ; preds = %128, %225, %207, %271, %269, %205, %77
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @av1_denoiser_reset_frame_stats(%struct.PICK_MODE_CONTEXT* nocapture) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 17
  %3 = bitcast i64* %2 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %3, align 8
  %4 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 19
  store i64 9223372036854775807, i64* %4, align 8
  %5 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 21, i32 0
  store i32 0, i32* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_denoiser_update_frame_stats(%struct.MB_MODE_INFO* nocapture readonly, i64, i8 zeroext, %struct.PICK_MODE_CONTEXT* nocapture) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 5, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %23

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %3, i64 0, i32 18
  %10 = load i64, i64* %9, align 8
  %11 = icmp sgt i64 %10, %1
  br i1 %11, label %12, label %20

12:                                               ; preds = %8
  store i64 %1, i64* %9, align 8
  %13 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 6, i64 0
  %14 = load i8, i8* %13, align 8
  %15 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %3, i64 0, i32 23
  store i8 %14, i8* %15, align 1
  %16 = load i8, i8* %13, align 8
  %17 = icmp eq i8 %16, 1
  br i1 %17, label %18, label %20

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %3, i64 0, i32 19
  store i64 %1, i64* %19, align 8
  br label %20

20:                                               ; preds = %12, %18, %8
  %21 = load i32, i32* %5, align 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %34, label %23

23:                                               ; preds = %4, %20
  %24 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %3, i64 0, i32 17
  %25 = load i64, i64* %24, align 8
  %26 = icmp sgt i64 %25, %1
  br i1 %26, label %27, label %34

27:                                               ; preds = %23
  store i64 %1, i64* %24, align 8
  %28 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %3, i64 0, i32 20
  store i8 %2, i8* %28, align 8
  %29 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %3, i64 0, i32 21, i32 0
  %30 = load i32, i32* %5, align 8
  store i32 %30, i32* %29, align 4
  %31 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 6, i64 0
  %32 = load i8, i8* %31, align 8
  %33 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %3, i64 0, i32 22
  store i8 %32, i8* %33, align 8
  br label %34

34:                                               ; preds = %20, %27, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_denoiser_realloc_svc(%struct.AV1Common* nocapture readonly, %struct.av1_denoiser*, %struct.SVC* nocapture readonly, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2 {
  %11 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %65, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 0
  %17 = add i32 %3, 1
  %18 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %1, i64 0, i32 0
  %19 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 2
  %20 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 3
  %21 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %22 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 20, i32 15
  br label %23

23:                                               ; preds = %62, %14
  %24 = phi i64 [ 0, %14 ], [ %63, %62 ]
  %25 = load i8, i8* %15, align 16
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %23
  %28 = trunc i64 %24 to i32
  br label %38

29:                                               ; preds = %23
  %30 = load i32, i32* %16, align 8
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 10, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = trunc i64 %24 to i32
  %35 = shl i32 1, %34
  %36 = and i32 %33, %35
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %62, label %38

38:                                               ; preds = %27, %29
  %39 = phi i32 [ %28, %27 ], [ %34, %29 ]
  %40 = add i32 %17, %39
  %41 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %18, align 8
  %42 = sext i32 %40 to i64
  %43 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %41, i64 %42, i32 10
  %44 = load i8*, i8** %43, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %46, label %62

46:                                               ; preds = %38
  %47 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %41, i64 %42
  %48 = load i32, i32* %19, align 16
  %49 = load i32, i32* %20, align 4
  %50 = load %struct.SequenceHeader*, %struct.SequenceHeader** %21, align 16
  %51 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %50, i64 0, i32 32
  %52 = load i32, i32* %51, align 8
  %53 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %50, i64 0, i32 33
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %50, i64 0, i32 26
  %56 = load i8, i8* %55, align 4
  %57 = zext i8 %56 to i32
  %58 = load i32, i32* %22, align 4
  %59 = tail call i32 @aom_alloc_frame_buffer(%struct.yv12_buffer_config* %47, i32 %48, i32 %49, i32 %52, i32 %54, i32 %57, i32 288, i32 %58) #6
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %62, label %61

61:                                               ; preds = %46
  tail call void @av1_denoiser_free(%struct.av1_denoiser* %1) #6
  br label %62

62:                                               ; preds = %61, %46, %38, %29
  %63 = add nuw nsw i64 %24, 1
  %64 = icmp eq i64 %63, 8
  br i1 %64, label %158, label %23

65:                                               ; preds = %10
  %66 = icmp eq i32 %4, 0
  br i1 %66, label %96, label %67

67:                                               ; preds = %65
  %68 = add i32 %3, 1
  %69 = add i32 %68, %7
  %70 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %1, i64 0, i32 0
  %71 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %70, align 8
  %72 = sext i32 %69 to i64
  %73 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %71, i64 %72, i32 10
  %74 = load i8*, i8** %73, align 8
  %75 = icmp eq i8* %74, null
  br i1 %75, label %76, label %96

76:                                               ; preds = %67
  %77 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %71, i64 %72
  %78 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 2
  %79 = load i32, i32* %78, align 16
  %80 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 3
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %83 = load %struct.SequenceHeader*, %struct.SequenceHeader** %82, align 16
  %84 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %83, i64 0, i32 32
  %85 = load i32, i32* %84, align 8
  %86 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %83, i64 0, i32 33
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %83, i64 0, i32 26
  %89 = load i8, i8* %88, align 4
  %90 = zext i8 %89 to i32
  %91 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 20, i32 15
  %92 = load i32, i32* %91, align 4
  %93 = tail call i32 @aom_alloc_frame_buffer(%struct.yv12_buffer_config* %77, i32 %79, i32 %81, i32 %85, i32 %87, i32 %90, i32 288, i32 %92) #6
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %96, label %95

95:                                               ; preds = %76
  tail call void @av1_denoiser_free(%struct.av1_denoiser* %1) #6
  br label %158

96:                                               ; preds = %67, %76, %65
  %97 = icmp eq i32 %5, 0
  br i1 %97, label %127, label %98

98:                                               ; preds = %96
  %99 = add i32 %3, 1
  %100 = add i32 %99, %8
  %101 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %1, i64 0, i32 0
  %102 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %101, align 8
  %103 = sext i32 %100 to i64
  %104 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %102, i64 %103, i32 10
  %105 = load i8*, i8** %104, align 8
  %106 = icmp eq i8* %105, null
  br i1 %106, label %107, label %127

107:                                              ; preds = %98
  %108 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %102, i64 %103
  %109 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 2
  %110 = load i32, i32* %109, align 16
  %111 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 3
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %114 = load %struct.SequenceHeader*, %struct.SequenceHeader** %113, align 16
  %115 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %114, i64 0, i32 32
  %116 = load i32, i32* %115, align 8
  %117 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %114, i64 0, i32 33
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %114, i64 0, i32 26
  %120 = load i8, i8* %119, align 4
  %121 = zext i8 %120 to i32
  %122 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 20, i32 15
  %123 = load i32, i32* %122, align 4
  %124 = tail call i32 @aom_alloc_frame_buffer(%struct.yv12_buffer_config* %108, i32 %110, i32 %112, i32 %116, i32 %118, i32 %121, i32 288, i32 %123) #6
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %127, label %126

126:                                              ; preds = %107
  tail call void @av1_denoiser_free(%struct.av1_denoiser* %1) #6
  br label %158

127:                                              ; preds = %98, %107, %96
  %128 = icmp eq i32 %6, 0
  br i1 %128, label %158, label %129

129:                                              ; preds = %127
  %130 = add i32 %3, 1
  %131 = add i32 %130, %9
  %132 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %1, i64 0, i32 0
  %133 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %132, align 8
  %134 = sext i32 %131 to i64
  %135 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %133, i64 %134, i32 10
  %136 = load i8*, i8** %135, align 8
  %137 = icmp eq i8* %136, null
  br i1 %137, label %138, label %158

138:                                              ; preds = %129
  %139 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %133, i64 %134
  %140 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 2
  %141 = load i32, i32* %140, align 16
  %142 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 3
  %143 = load i32, i32* %142, align 4
  %144 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %145 = load %struct.SequenceHeader*, %struct.SequenceHeader** %144, align 16
  %146 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %145, i64 0, i32 32
  %147 = load i32, i32* %146, align 8
  %148 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %145, i64 0, i32 33
  %149 = load i32, i32* %148, align 4
  %150 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %145, i64 0, i32 26
  %151 = load i8, i8* %150, align 4
  %152 = zext i8 %151 to i32
  %153 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 20, i32 15
  %154 = load i32, i32* %153, align 4
  %155 = tail call i32 @aom_alloc_frame_buffer(%struct.yv12_buffer_config* %139, i32 %141, i32 %143, i32 %147, i32 %149, i32 %152, i32 288, i32 %154) #6
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %158, label %157

157:                                              ; preds = %138
  tail call void @av1_denoiser_free(%struct.av1_denoiser* %1) #6
  br label %158

158:                                              ; preds = %62, %129, %138, %127, %157, %126, %95
  %159 = phi i32 [ 1, %95 ], [ 1, %126 ], [ 1, %157 ], [ 0, %127 ], [ 0, %138 ], [ 0, %129 ], [ 0, %62 ]
  ret i32 %159
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_denoiser_alloc(%struct.AV1Common* nocapture readonly, %struct.SVC* nocapture, %struct.av1_denoiser*, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2 {
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #6
  store i32 %5, i32* %12, align 4
  %15 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #6
  store i32 %6, i32* %13, align 4
  %16 = icmp ne i32 %3, 0
  br i1 %16, label %17, label %42

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.SVC, %struct.SVC* %1, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.SVC, %struct.SVC* %1, i64 0, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = mul nsw i32 %21, %19
  %23 = getelementptr inbounds %struct.SVC, %struct.SVC* %1, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %22, %24
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %struct.SVC, %struct.SVC* %1, i64 0, i32 21, i64 %26, i32 4
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %struct.SVC, %struct.SVC* %1, i64 0, i32 21, i64 %26, i32 5
  %30 = load i32, i32* %29, align 4
  call void @av1_get_layer_resolution(i32 %5, i32 %6, i32 %28, i32 %30, i32* nonnull %12, i32* nonnull %13) #6
  %31 = icmp sgt i32 %4, 1
  %32 = getelementptr inbounds %struct.SVC, %struct.SVC* %1, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = select i1 %31, i32 2, i32 1
  %35 = select i1 %31, i32 2, i32 1
  %36 = select i1 %31, i32 -2, i32 -1
  %37 = icmp sgt i32 %33, %34
  %38 = select i1 %37, i32 %33, i32 %35
  %39 = add nsw i32 %38, %36
  %40 = getelementptr inbounds %struct.SVC, %struct.SVC* %1, i64 0, i32 20
  store i32 %39, i32* %40, align 8
  %41 = sub nsw i32 %33, %39
  br label %42

42:                                               ; preds = %17, %11
  %43 = phi i32 [ %41, %17 ], [ 1, %11 ]
  %44 = select i1 %16, i32 9, i32 7
  %45 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %2, i64 0, i32 5
  store i32 %44, i32* %45, align 8
  %46 = select i1 %16, i32 8, i32 7
  %47 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %2, i64 0, i32 6
  store i32 %43, i32* %47, align 4
  %48 = mul nsw i32 %43, %44
  %49 = sext i32 %48 to i64
  %50 = call i8* @aom_calloc(i64 %49, i64 208) #6
  %51 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %2, i64 0, i32 0
  %52 = bitcast %struct.av1_denoiser* %2 to i8**
  store i8* %50, i8** %52, align 8
  %53 = icmp eq i8* %50, null
  br i1 %53, label %54, label %57

54:                                               ; preds = %42
  %55 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 1
  %56 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %55, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %56, i32 2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0)) #6
  br label %57

57:                                               ; preds = %42, %54
  %58 = sext i32 %43 to i64
  %59 = call i8* @aom_calloc(i64 %58, i64 208) #6
  %60 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %2, i64 0, i32 1
  %61 = bitcast %struct.yv12_buffer_config** %60 to i8**
  store i8* %59, i8** %61, align 8
  %62 = icmp eq i8* %59, null
  br i1 %62, label %63, label %66

63:                                               ; preds = %57
  %64 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 1
  %65 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %64, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %65, i32 2, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0)) #6
  br label %66

66:                                               ; preds = %57, %63
  %67 = icmp sgt i32 %43, 0
  br i1 %67, label %68, label %101

68:                                               ; preds = %66
  %69 = zext i32 %43 to i64
  br label %72

70:                                               ; preds = %94
  %71 = icmp eq i64 %99, %69
  br i1 %71, label %101, label %72

72:                                               ; preds = %70, %68
  %73 = phi i64 [ 0, %68 ], [ %99, %70 ]
  %74 = icmp eq i64 %73, 0
  %75 = load i32, i32* %12, align 4
  %76 = select i1 %74, i32 %5, i32 %75
  %77 = load i32, i32* %13, align 4
  %78 = select i1 %74, i32 %6, i32 %77
  %79 = trunc i64 %73 to i32
  br label %82

80:                                               ; preds = %82
  %81 = icmp ult i32 %92, %46
  br i1 %81, label %82, label %94

82:                                               ; preds = %72, %80
  %83 = phi i32 [ 0, %72 ], [ %92, %80 ]
  %84 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %51, align 8
  %85 = load i32, i32* %45, align 8
  %86 = mul nsw i32 %85, %79
  %87 = add nsw i32 %86, %83
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %84, i64 %88
  %90 = call i32 @aom_alloc_frame_buffer(%struct.yv12_buffer_config* %89, i32 %76, i32 %78, i32 %7, i32 %8, i32 %9, i32 %10, i32 0) #6
  %91 = icmp eq i32 %90, 0
  %92 = add nuw nsw i32 %83, 1
  br i1 %91, label %80, label %93

93:                                               ; preds = %82
  call void @av1_denoiser_free(%struct.av1_denoiser* %2)
  br label %112

94:                                               ; preds = %80
  %95 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %60, align 8
  %96 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %95, i64 %73
  %97 = call i32 @aom_alloc_frame_buffer(%struct.yv12_buffer_config* %96, i32 %76, i32 %78, i32 %7, i32 %8, i32 %9, i32 %10, i32 0) #6
  %98 = icmp eq i32 %97, 0
  %99 = add nuw nsw i64 %73, 1
  br i1 %98, label %70, label %100

100:                                              ; preds = %94
  call void @av1_denoiser_free(%struct.av1_denoiser* %2)
  br label %112

101:                                              ; preds = %70, %66
  %102 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %2, i64 0, i32 2
  %103 = call i32 @aom_alloc_frame_buffer(%struct.yv12_buffer_config* %102, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 0) #6
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %106, label %105

105:                                              ; preds = %101
  call void @av1_denoiser_free(%struct.av1_denoiser* %2)
  br label %112

106:                                              ; preds = %101
  %107 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %2, i64 0, i32 3
  store i32 1, i32* %107, align 8
  %108 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %2, i64 0, i32 8
  store i32 2, i32* %108, align 4
  %109 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %2, i64 0, i32 9
  store i32 2, i32* %109, align 8
  %110 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %2, i64 0, i32 4
  store i32 0, i32* %110, align 4
  %111 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %2, i64 0, i32 7
  store i32 0, i32* %111, align 8
  br label %112

112:                                              ; preds = %100, %93, %106, %105
  %113 = phi i32 [ 1, %105 ], [ 0, %106 ], [ 1, %93 ], [ 1, %100 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #6
  ret i32 %113
}

declare void @av1_get_layer_resolution(i32, i32, i32, i32, i32*, i32*) local_unnamed_addr #3

declare i8* @aom_calloc(i64, i64) local_unnamed_addr #3

declare void @aom_internal_error(%struct.aom_internal_error_info*, i32, i8*, ...) local_unnamed_addr #3

declare i32 @aom_alloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_denoiser_free(%struct.av1_denoiser*) local_unnamed_addr #2 {
  %2 = icmp eq %struct.av1_denoiser* %0, null
  br i1 %2, label %47, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 3
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 5
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 6
  %8 = load i32, i32* %7, align 4
  %9 = mul nsw i32 %8, %6
  %10 = icmp sgt i32 %9, 0
  %11 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 0
  %12 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %11, align 8
  br i1 %10, label %13, label %25

13:                                               ; preds = %3, %13
  %14 = phi i64 [ %18, %13 ], [ 0, %3 ]
  %15 = phi %struct.yv12_buffer_config* [ %24, %13 ], [ %12, %3 ]
  %16 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %15, i64 %14
  %17 = tail call i32 @aom_free_frame_buffer(%struct.yv12_buffer_config* %16) #6
  %18 = add nuw nsw i64 %14, 1
  %19 = load i32, i32* %5, align 8
  %20 = load i32, i32* %7, align 4
  %21 = mul nsw i32 %20, %19
  %22 = sext i32 %21 to i64
  %23 = icmp slt i64 %18, %22
  %24 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %11, align 8
  br i1 %23, label %13, label %25

25:                                               ; preds = %13, %3
  %26 = phi %struct.yv12_buffer_config* [ %12, %3 ], [ %24, %13 ]
  %27 = bitcast %struct.yv12_buffer_config* %26 to i8*
  tail call void @aom_free(i8* %27) #6
  store %struct.yv12_buffer_config* null, %struct.yv12_buffer_config** %11, align 8
  %28 = load i32, i32* %7, align 4
  %29 = icmp sgt i32 %28, 0
  %30 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 1
  %31 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %30, align 8
  br i1 %29, label %32, label %42

32:                                               ; preds = %25, %32
  %33 = phi i64 [ %37, %32 ], [ 0, %25 ]
  %34 = phi %struct.yv12_buffer_config* [ %41, %32 ], [ %31, %25 ]
  %35 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %34, i64 %33
  %36 = tail call i32 @aom_free_frame_buffer(%struct.yv12_buffer_config* %35) #6
  %37 = add nuw nsw i64 %33, 1
  %38 = load i32, i32* %7, align 4
  %39 = sext i32 %38 to i64
  %40 = icmp slt i64 %37, %39
  %41 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %30, align 8
  br i1 %40, label %32, label %42

42:                                               ; preds = %32, %25
  %43 = phi %struct.yv12_buffer_config* [ %31, %25 ], [ %41, %32 ]
  %44 = bitcast %struct.yv12_buffer_config* %43 to i8*
  tail call void @aom_free(i8* %44) #6
  store %struct.yv12_buffer_config* null, %struct.yv12_buffer_config** %30, align 8
  %45 = getelementptr inbounds %struct.av1_denoiser, %struct.av1_denoiser* %0, i64 0, i32 2
  %46 = tail call i32 @aom_free_frame_buffer(%struct.yv12_buffer_config* %45) #6
  br label %47

47:                                               ; preds = %1, %42
  ret void
}

declare i32 @aom_free_frame_buffer(%struct.yv12_buffer_config*) local_unnamed_addr #3

declare void @aom_free(i8*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_denoiser_set_noise_level(%struct.AV1_COMP* nocapture, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 8
  store i32 %1, i32* %3, align 4
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 9
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %2, %5
  br label %10

10:                                               ; preds = %5, %9
  %11 = phi i32 [ 0, %9 ], [ 1, %5 ]
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 4
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 9
  store i32 %1, i32* %13, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @av1_scale_part_thresh(i64, i32, i64, i32, i32) local_unnamed_addr #5 {
  %6 = trunc i64 %2 to i32
  %7 = icmp eq i32 %3, 0
  %8 = or i32 %6, 2
  %9 = icmp ne i32 %8, 3
  %10 = or i1 %7, %9
  %11 = xor i1 %10, true
  %12 = icmp ugt i64 %2, 4294967295
  %13 = and i1 %12, %7
  %14 = or i1 %13, %11
  br i1 %14, label %19, label %15

15:                                               ; preds = %5
  %16 = icmp eq i32 %1, 3
  %17 = icmp ne i32 %4, 0
  %18 = or i1 %16, %17
  br i1 %18, label %19, label %26

19:                                               ; preds = %5, %15
  %20 = icmp slt i32 %4, 2
  %21 = mul nsw i64 %0, 3
  %22 = ashr i64 %21, 1
  %23 = mul nsw i64 %0, 7
  %24 = ashr i64 %23, 2
  %25 = select i1 %20, i64 %22, i64 %24
  br label %29

26:                                               ; preds = %15
  %27 = mul nsw i64 %0, 5
  %28 = ashr i64 %27, 2
  br label %29

29:                                               ; preds = %26, %19
  %30 = phi i64 [ %25, %19 ], [ %28, %26 ]
  ret i64 %30
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @av1_scale_acskip_thresh(i64, i32, i32, i32) local_unnamed_addr #5 {
  %5 = icmp ne i32 %1, 0
  %6 = icmp slt i32 %2, 5
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = icmp eq i32 %1, 1
  %10 = icmp eq i32 %3, 2
  %11 = select i1 %10, i64 10, i64 6
  %12 = select i1 %9, i64 2, i64 %11
  %13 = mul nsw i64 %12, %0
  br label %14

14:                                               ; preds = %4, %8
  %15 = phi i64 [ %13, %8 ], [ %0, %4 ]
  ret i64 %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_denoiser_reset_on_first_frame(%struct.AV1_COMP* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 7
  %3 = load i32, i32* %2, align 16
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 4
  store i32 1, i32* %6, align 4
  br label %7

7:                                                ; preds = %5, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_denoiser_update_ref_frame(%struct.AV1_COMP* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 26
  %4 = load i32, i32* %3, align 4
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %63

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %8 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %7, align 16
  %9 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %8, i64 0, i32 16
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %18, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %14 = load i32, i32* %13, align 16
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 20
  %16 = load i32, i32* %15, align 8
  %17 = icmp slt i32 %14, %16
  br i1 %17, label %63, label %18

18:                                               ; preds = %6, %12
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 8
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %63, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %25 = load i8, i8* %24, align 16
  %26 = icmp eq i8 %25, 2
  %27 = select i1 %26, i8 0, i8 %25
  %28 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 7
  %29 = load i32, i32* %28, align 16
  %30 = add i32 %29, 1
  store i32 %30, i32* %28, align 16
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 54, i32 0
  %32 = load i32, i32* %31, align 16
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %47, label %34

34:                                               ; preds = %23
  %35 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 54, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %47, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %40 = load i32, i32* %39, align 16
  %41 = icmp eq i32 %40, %32
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %44 = load i32, i32* %43, align 4
  %45 = icmp ne i32 %44, %36
  %46 = zext i1 %45 to i32
  br label %47

47:                                               ; preds = %38, %34, %23, %42
  %48 = phi i32 [ 0, %34 ], [ 0, %23 ], [ 1, %38 ], [ %46, %42 ]
  %49 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 12
  %50 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %49, align 8
  %51 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 25, i32 2
  %52 = load i8, i8* %51, align 2, !range !2
  %53 = zext i8 %52 to i32
  %54 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 25, i32 0
  %55 = load i8, i8* %54, align 16, !range !2
  %56 = zext i8 %55 to i32
  %57 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 6
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 3
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 0
  %62 = load i32, i32* %61, align 4
  tail call void @av1_denoiser_update_frame_info(%struct.av1_denoiser* %19, %struct.yv12_buffer_config* byval(%struct.yv12_buffer_config) align 8 %50, %struct.SVC* %2, i8 zeroext %27, i32 %53, i32 %56, i32 1, i32 %58, i32 %60, i32 %62, i32 %48, i32 0, i32 0)
  br label %63

63:                                               ; preds = %18, %12, %47, %1
  ret void
}

declare void @av1_setup_pre_planes(%struct.macroblockd*, i32, %struct.yv12_buffer_config*, i32, i32, %struct.scale_factors*, i32) local_unnamed_addr #3

declare void @av1_setup_dst_planes(%struct.macroblockd_plane*, i8 zeroext, %struct.yv12_buffer_config*, i32, i32, i32, i32) local_unnamed_addr #3

declare void @av1_enc_build_inter_predictor_y(%struct.macroblockd*, i32, i32) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
