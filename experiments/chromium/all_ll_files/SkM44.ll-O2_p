; ModuleID = '../../third_party/skia/src/core/SkM44.cpp'
source_filename = "../../third_party/skia/src/core/SkM44.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkM44 = type { [16 x float] }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkV3 = type { float, float, float }

@.str = private unnamed_addr constant [57 x i8] c"|%g %g %g %g|\0A|%g %g %g %g|\0A|%g %g %g %g|\0A|%g %g %g %g|\0A\00", align 1
@.str.1 = private unnamed_addr constant [42 x i8] c"../../third_party/skia/src/core/SkM44.cpp\00", align 1
@.ref.tmp.3 = private unnamed_addr constant %class.SkM44 { [16 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00] }, align 4
@constinit = private unnamed_addr constant [16 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00], align 4

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5SkM44eqERKS_(%class.SkM44* readonly, %class.SkM44* readonly dereferenceable(64)) local_unnamed_addr #0 align 2 {
  %3 = icmp eq %class.SkM44* %0, %1
  br i1 %3, label %143, label %4

4:                                                ; preds = %2
  %5 = bitcast %class.SkM44* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = shufflevector <2 x float> %6, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %11 = shufflevector <2 x float> %9, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %12 = shufflevector <4 x float> %10, <4 x float> %11, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %13 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %14 = bitcast float* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %17 = bitcast float* %16 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 1
  %19 = shufflevector <2 x float> %15, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %20 = shufflevector <2 x float> %18, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %21 = shufflevector <4 x float> %19, <4 x float> %20, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %22 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %23 = bitcast float* %22 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 1
  %25 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  %26 = bitcast float* %25 to <2 x float>*
  %27 = load <2 x float>, <2 x float>* %26, align 1
  %28 = shufflevector <2 x float> %24, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <2 x float> %27, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %30 = shufflevector <4 x float> %28, <4 x float> %29, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %31 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %32 = bitcast float* %31 to <2 x float>*
  %33 = load <2 x float>, <2 x float>* %32, align 1
  %34 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  %35 = bitcast float* %34 to <2 x float>*
  %36 = load <2 x float>, <2 x float>* %35, align 1
  %37 = shufflevector <2 x float> %33, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x float> %36, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %39 = shufflevector <4 x float> %37, <4 x float> %38, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %40 = bitcast %class.SkM44* %1 to <2 x float>*
  %41 = load <2 x float>, <2 x float>* %40, align 1
  %42 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 2
  %43 = bitcast float* %42 to <2 x float>*
  %44 = load <2 x float>, <2 x float>* %43, align 1
  %45 = shufflevector <2 x float> %41, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %46 = shufflevector <2 x float> %44, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %47 = shufflevector <4 x float> %45, <4 x float> %46, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %48 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 4
  %49 = bitcast float* %48 to <2 x float>*
  %50 = load <2 x float>, <2 x float>* %49, align 1
  %51 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 6
  %52 = bitcast float* %51 to <2 x float>*
  %53 = load <2 x float>, <2 x float>* %52, align 1
  %54 = shufflevector <2 x float> %50, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %55 = shufflevector <2 x float> %53, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %56 = shufflevector <4 x float> %54, <4 x float> %55, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %57 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 8
  %58 = bitcast float* %57 to <2 x float>*
  %59 = load <2 x float>, <2 x float>* %58, align 1
  %60 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 10
  %61 = bitcast float* %60 to <2 x float>*
  %62 = load <2 x float>, <2 x float>* %61, align 1
  %63 = shufflevector <2 x float> %59, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %64 = shufflevector <2 x float> %62, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %65 = shufflevector <4 x float> %63, <4 x float> %64, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %66 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 12
  %67 = bitcast float* %66 to <2 x float>*
  %68 = load <2 x float>, <2 x float>* %67, align 1
  %69 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 14
  %70 = bitcast float* %69 to <2 x float>*
  %71 = load <2 x float>, <2 x float>* %70, align 1
  %72 = shufflevector <2 x float> %68, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %73 = shufflevector <2 x float> %71, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %74 = shufflevector <4 x float> %72, <4 x float> %73, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %75 = fcmp oeq <4 x float> %12, %47
  %76 = sext <4 x i1> %75 to <4 x i32>
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = extractelement <2 x i64> %77, i32 0
  %79 = extractelement <2 x i64> %77, i32 1
  %80 = bitcast i64 %78 to <2 x i32>
  %81 = shufflevector <2 x i32> %80, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %82 = bitcast i64 %79 to <2 x i32>
  %83 = shufflevector <2 x i32> %82, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %84 = shufflevector <4 x i32> %81, <4 x i32> %83, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %85 = fcmp oeq <4 x float> %21, %56
  %86 = sext <4 x i1> %85 to <4 x i32>
  %87 = bitcast <4 x i32> %86 to <2 x i64>
  %88 = extractelement <2 x i64> %87, i32 0
  %89 = extractelement <2 x i64> %87, i32 1
  %90 = bitcast i64 %88 to <2 x i32>
  %91 = shufflevector <2 x i32> %90, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %92 = bitcast i64 %89 to <2 x i32>
  %93 = shufflevector <2 x i32> %92, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %94 = shufflevector <4 x i32> %91, <4 x i32> %93, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %95 = and <4 x i32> %94, %84
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = extractelement <2 x i64> %96, i32 0
  %98 = extractelement <2 x i64> %96, i32 1
  %99 = bitcast i64 %97 to <2 x i32>
  %100 = shufflevector <2 x i32> %99, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %101 = bitcast i64 %98 to <2 x i32>
  %102 = shufflevector <2 x i32> %101, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %103 = shufflevector <4 x i32> %100, <4 x i32> %102, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %104 = fcmp oeq <4 x float> %30, %65
  %105 = sext <4 x i1> %104 to <4 x i32>
  %106 = bitcast <4 x i32> %105 to <2 x i64>
  %107 = extractelement <2 x i64> %106, i32 0
  %108 = extractelement <2 x i64> %106, i32 1
  %109 = bitcast i64 %107 to <2 x i32>
  %110 = shufflevector <2 x i32> %109, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %111 = bitcast i64 %108 to <2 x i32>
  %112 = shufflevector <2 x i32> %111, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %113 = shufflevector <4 x i32> %110, <4 x i32> %112, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %114 = and <4 x i32> %103, %113
  %115 = bitcast <4 x i32> %114 to <2 x i64>
  %116 = extractelement <2 x i64> %115, i32 0
  %117 = extractelement <2 x i64> %115, i32 1
  %118 = bitcast i64 %116 to <2 x i32>
  %119 = shufflevector <2 x i32> %118, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %120 = bitcast i64 %117 to <2 x i32>
  %121 = shufflevector <2 x i32> %120, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %122 = shufflevector <4 x i32> %119, <4 x i32> %121, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %123 = fcmp oeq <4 x float> %39, %74
  %124 = sext <4 x i1> %123 to <4 x i32>
  %125 = bitcast <4 x i32> %124 to <2 x i64>
  %126 = extractelement <2 x i64> %125, i32 0
  %127 = extractelement <2 x i64> %125, i32 1
  %128 = bitcast i64 %126 to <2 x i32>
  %129 = shufflevector <2 x i32> %128, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %130 = bitcast i64 %127 to <2 x i32>
  %131 = shufflevector <2 x i32> %130, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %132 = shufflevector <4 x i32> %129, <4 x i32> %131, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %133 = and <4 x i32> %122, %132
  %134 = bitcast <4 x i32> %133 to <2 x i64>
  %135 = extractelement <2 x i64> %134, i32 0
  %136 = extractelement <2 x i64> %134, i32 1
  %137 = lshr i64 %135, 32
  %138 = lshr i64 %136, 32
  %139 = and i64 %136, %135
  %140 = and i64 %139, %137
  %141 = and i64 %140, %138
  %142 = icmp eq i64 %141, 4294967295
  br label %143

143:                                              ; preds = %2, %4
  %144 = phi i1 [ %142, %4 ], [ true, %2 ]
  ret i1 %144
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK5SkM4411getRowMajorEPf(%class.SkM44* nocapture readonly, float* nocapture) local_unnamed_addr #2 align 2 {
  %3 = bitcast %class.SkM44* %0 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast float* %1 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds float, float* %1, i64 1
  %10 = bitcast float* %9 to i32*
  store i32 %8, i32* %10, align 4
  %11 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds float, float* %1, i64 2
  %15 = bitcast float* %14 to i32*
  store i32 %13, i32* %15, align 4
  %16 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds float, float* %1, i64 3
  %20 = bitcast float* %19 to i32*
  store i32 %18, i32* %20, align 4
  %21 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 1
  %22 = bitcast float* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds float, float* %1, i64 4
  %25 = bitcast float* %24 to i32*
  store i32 %23, i32* %25, align 4
  %26 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 5
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds float, float* %1, i64 5
  %30 = bitcast float* %29 to i32*
  store i32 %28, i32* %30, align 4
  %31 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 9
  %32 = bitcast float* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds float, float* %1, i64 6
  %35 = bitcast float* %34 to i32*
  store i32 %33, i32* %35, align 4
  %36 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 13
  %37 = bitcast float* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds float, float* %1, i64 7
  %40 = bitcast float* %39 to i32*
  store i32 %38, i32* %40, align 4
  %41 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %42 = bitcast float* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds float, float* %1, i64 8
  %45 = bitcast float* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %47 = bitcast float* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds float, float* %1, i64 9
  %50 = bitcast float* %49 to i32*
  store i32 %48, i32* %50, align 4
  %51 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  %52 = bitcast float* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds float, float* %1, i64 10
  %55 = bitcast float* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  %57 = bitcast float* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds float, float* %1, i64 11
  %60 = bitcast float* %59 to i32*
  store i32 %58, i32* %60, align 4
  %61 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 3
  %62 = bitcast float* %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds float, float* %1, i64 12
  %65 = bitcast float* %64 to i32*
  store i32 %63, i32* %65, align 4
  %66 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 7
  %67 = bitcast float* %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds float, float* %1, i64 13
  %70 = bitcast float* %69 to i32*
  store i32 %68, i32* %70, align 4
  %71 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 11
  %72 = bitcast float* %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds float, float* %1, i64 14
  %75 = bitcast float* %74 to i32*
  store i32 %73, i32* %75, align 4
  %76 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  %77 = bitcast float* %76 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds float, float* %1, i64 15
  %80 = bitcast float* %79 to i32*
  store i32 %78, i32* %80, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(64) %class.SkM44* @_ZN5SkM449setConcatERKS_S1_(%class.SkM44* returned, %class.SkM44* nocapture readonly dereferenceable(64), %class.SkM44* nocapture readonly dereferenceable(64)) local_unnamed_addr #3 align 2 {
  %4 = bitcast %class.SkM44* %1 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 1
  %6 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 2
  %7 = bitcast float* %6 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 1
  %9 = shufflevector <2 x float> %5, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %10 = shufflevector <2 x float> %8, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %11 = shufflevector <4 x float> %9, <4 x float> %10, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %12 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 4
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 1
  %15 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 6
  %16 = bitcast float* %15 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 1
  %18 = shufflevector <2 x float> %14, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %19 = shufflevector <2 x float> %17, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %20 = shufflevector <4 x float> %18, <4 x float> %19, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %21 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 8
  %22 = bitcast float* %21 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 1
  %24 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 10
  %25 = bitcast float* %24 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 1
  %27 = shufflevector <2 x float> %23, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = shufflevector <2 x float> %26, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %29 = shufflevector <4 x float> %27, <4 x float> %28, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %30 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 12
  %31 = bitcast float* %30 to <2 x float>*
  %32 = load <2 x float>, <2 x float>* %31, align 1
  %33 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 14
  %34 = bitcast float* %33 to <2 x float>*
  %35 = load <2 x float>, <2 x float>* %34, align 1
  %36 = shufflevector <2 x float> %32, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = shufflevector <2 x float> %35, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %38 = shufflevector <4 x float> %36, <4 x float> %37, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %39 = bitcast %class.SkM44* %2 to <2 x float>*
  %40 = load <2 x float>, <2 x float>* %39, align 1
  %41 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 2
  %42 = bitcast float* %41 to <2 x float>*
  %43 = load <2 x float>, <2 x float>* %42, align 1
  %44 = shufflevector <2 x float> %40, <2 x float> undef, <4 x i32> zeroinitializer
  %45 = fmul <4 x float> %11, %44
  %46 = shufflevector <2 x float> %40, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %47 = fmul <4 x float> %20, %46
  %48 = shufflevector <2 x float> %43, <2 x float> undef, <4 x i32> zeroinitializer
  %49 = fmul <4 x float> %29, %48
  %50 = shufflevector <2 x float> %43, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %51 = fmul <4 x float> %38, %50
  %52 = fadd <4 x float> %49, %51
  %53 = fadd <4 x float> %47, %52
  %54 = fadd <4 x float> %45, %53
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %56 = shufflevector <4 x float> %54, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %57 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 4
  %58 = bitcast float* %57 to <2 x float>*
  %59 = load <2 x float>, <2 x float>* %58, align 1
  %60 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 6
  %61 = bitcast float* %60 to <2 x float>*
  %62 = load <2 x float>, <2 x float>* %61, align 1
  %63 = shufflevector <2 x float> %59, <2 x float> undef, <4 x i32> zeroinitializer
  %64 = fmul <4 x float> %11, %63
  %65 = shufflevector <2 x float> %59, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %66 = fmul <4 x float> %20, %65
  %67 = shufflevector <2 x float> %62, <2 x float> undef, <4 x i32> zeroinitializer
  %68 = fmul <4 x float> %29, %67
  %69 = shufflevector <2 x float> %62, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %70 = fmul <4 x float> %38, %69
  %71 = fadd <4 x float> %68, %70
  %72 = fadd <4 x float> %66, %71
  %73 = fadd <4 x float> %64, %72
  %74 = shufflevector <4 x float> %73, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %75 = shufflevector <4 x float> %73, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %76 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 8
  %77 = bitcast float* %76 to <2 x float>*
  %78 = load <2 x float>, <2 x float>* %77, align 1
  %79 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 10
  %80 = bitcast float* %79 to <2 x float>*
  %81 = load <2 x float>, <2 x float>* %80, align 1
  %82 = shufflevector <2 x float> %78, <2 x float> undef, <4 x i32> zeroinitializer
  %83 = fmul <4 x float> %11, %82
  %84 = shufflevector <2 x float> %78, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %85 = fmul <4 x float> %20, %84
  %86 = shufflevector <2 x float> %81, <2 x float> undef, <4 x i32> zeroinitializer
  %87 = fmul <4 x float> %29, %86
  %88 = shufflevector <2 x float> %81, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %89 = fmul <4 x float> %38, %88
  %90 = fadd <4 x float> %87, %89
  %91 = fadd <4 x float> %85, %90
  %92 = fadd <4 x float> %83, %91
  %93 = shufflevector <4 x float> %92, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %94 = shufflevector <4 x float> %92, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %95 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 12
  %96 = bitcast float* %95 to <2 x float>*
  %97 = load <2 x float>, <2 x float>* %96, align 1
  %98 = getelementptr inbounds %class.SkM44, %class.SkM44* %2, i64 0, i32 0, i64 14
  %99 = bitcast float* %98 to <2 x float>*
  %100 = load <2 x float>, <2 x float>* %99, align 1
  %101 = shufflevector <2 x float> %97, <2 x float> undef, <4 x i32> zeroinitializer
  %102 = fmul <4 x float> %11, %101
  %103 = shufflevector <2 x float> %97, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %104 = fmul <4 x float> %20, %103
  %105 = shufflevector <2 x float> %100, <2 x float> undef, <4 x i32> zeroinitializer
  %106 = fmul <4 x float> %29, %105
  %107 = shufflevector <2 x float> %100, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %108 = fmul <4 x float> %38, %107
  %109 = fadd <4 x float> %106, %108
  %110 = fadd <4 x float> %104, %109
  %111 = fadd <4 x float> %102, %110
  %112 = shufflevector <4 x float> %111, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %113 = shufflevector <4 x float> %111, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %114 = bitcast %class.SkM44* %0 to <2 x float>*
  store <2 x float> %55, <2 x float>* %114, align 1
  %115 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %116 = bitcast float* %115 to <2 x float>*
  store <2 x float> %56, <2 x float>* %116, align 1
  %117 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %118 = bitcast float* %117 to <2 x float>*
  store <2 x float> %74, <2 x float>* %118, align 1
  %119 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %120 = bitcast float* %119 to <2 x float>*
  store <2 x float> %75, <2 x float>* %120, align 1
  %121 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %122 = bitcast float* %121 to <2 x float>*
  store <2 x float> %93, <2 x float>* %122, align 1
  %123 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  %124 = bitcast float* %123 to <2 x float>*
  store <2 x float> %94, <2 x float>* %124, align 1
  %125 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %126 = bitcast float* %125 to <2 x float>*
  store <2 x float> %112, <2 x float>* %126, align 1
  %127 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  %128 = bitcast float* %127 to <2 x float>*
  store <2 x float> %113, <2 x float>* %128, align 1
  ret %class.SkM44* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(64) %class.SkM44* @_ZN5SkM449preConcatERK8SkMatrix(%class.SkM44* returned, %class.SkMatrix* nocapture readonly dereferenceable(40)) local_unnamed_addr #3 align 2 {
  %3 = bitcast %class.SkM44* %0 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 1
  %5 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %6 = bitcast float* %5 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = shufflevector <2 x float> %4, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %9 = shufflevector <2 x float> %7, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %10 = shufflevector <4 x float> %8, <4 x float> %9, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %11 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %12 = bitcast float* %11 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 1
  %14 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %15 = bitcast float* %14 to <2 x float>*
  %16 = load <2 x float>, <2 x float>* %15, align 1
  %17 = shufflevector <2 x float> %13, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %18 = shufflevector <2 x float> %16, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %19 = shufflevector <4 x float> %17, <4 x float> %18, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %20 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %21 = bitcast float* %20 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 1
  %23 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  %24 = bitcast float* %23 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 1
  %26 = shufflevector <2 x float> %22, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %27 = shufflevector <2 x float> %25, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %28 = shufflevector <4 x float> %26, <4 x float> %27, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 0
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 3
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 6
  %34 = load float, float* %33, align 4
  %35 = insertelement <4 x float> undef, float %30, i32 0
  %36 = shufflevector <4 x float> %35, <4 x float> undef, <4 x i32> zeroinitializer
  %37 = fmul <4 x float> %10, %36
  %38 = insertelement <4 x float> undef, float %32, i32 0
  %39 = shufflevector <4 x float> %38, <4 x float> undef, <4 x i32> zeroinitializer
  %40 = fmul <4 x float> %19, %39
  %41 = insertelement <4 x float> undef, float %34, i32 0
  %42 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> zeroinitializer
  %43 = fmul <4 x float> %28, %42
  %44 = fadd <4 x float> %40, %43
  %45 = fadd <4 x float> %37, %44
  %46 = shufflevector <4 x float> %45, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %47 = shufflevector <4 x float> %45, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %48 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 1
  %49 = load float, float* %48, align 4
  %50 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  %51 = load float, float* %50, align 4
  %52 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 7
  %53 = load float, float* %52, align 4
  %54 = insertelement <4 x float> undef, float %49, i32 0
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <4 x i32> zeroinitializer
  %56 = fmul <4 x float> %10, %55
  %57 = insertelement <4 x float> undef, float %51, i32 0
  %58 = shufflevector <4 x float> %57, <4 x float> undef, <4 x i32> zeroinitializer
  %59 = fmul <4 x float> %19, %58
  %60 = insertelement <4 x float> undef, float %53, i32 0
  %61 = shufflevector <4 x float> %60, <4 x float> undef, <4 x i32> zeroinitializer
  %62 = fmul <4 x float> %28, %61
  %63 = fadd <4 x float> %59, %62
  %64 = fadd <4 x float> %56, %63
  %65 = shufflevector <4 x float> %64, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %66 = shufflevector <4 x float> %64, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %67 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 2
  %68 = load float, float* %67, align 4
  %69 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 5
  %70 = load float, float* %69, align 4
  %71 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 8
  %72 = load float, float* %71, align 4
  %73 = insertelement <4 x float> undef, float %68, i32 0
  %74 = shufflevector <4 x float> %73, <4 x float> undef, <4 x i32> zeroinitializer
  %75 = fmul <4 x float> %10, %74
  %76 = insertelement <4 x float> undef, float %70, i32 0
  %77 = shufflevector <4 x float> %76, <4 x float> undef, <4 x i32> zeroinitializer
  %78 = fmul <4 x float> %19, %77
  %79 = insertelement <4 x float> undef, float %72, i32 0
  %80 = shufflevector <4 x float> %79, <4 x float> undef, <4 x i32> zeroinitializer
  %81 = fmul <4 x float> %28, %80
  %82 = fadd <4 x float> %78, %81
  %83 = fadd <4 x float> %75, %82
  %84 = shufflevector <4 x float> %83, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %85 = shufflevector <4 x float> %83, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %46, <2 x float>* %3, align 1
  store <2 x float> %47, <2 x float>* %6, align 1
  store <2 x float> %65, <2 x float>* %12, align 1
  store <2 x float> %66, <2 x float>* %15, align 1
  store <2 x float> %84, <2 x float>* %21, align 1
  store <2 x float> %85, <2 x float>* %24, align 1
  ret %class.SkM44* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(64) %class.SkM44* @_ZN5SkM4412preTranslateEfff(%class.SkM44* returned, float, float, float) local_unnamed_addr #3 align 2 {
  %5 = bitcast %class.SkM44* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = shufflevector <2 x float> %6, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %11 = shufflevector <2 x float> %9, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %12 = shufflevector <4 x float> %10, <4 x float> %11, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %13 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %14 = bitcast float* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %17 = bitcast float* %16 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 1
  %19 = shufflevector <2 x float> %15, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %20 = shufflevector <2 x float> %18, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %21 = shufflevector <4 x float> %19, <4 x float> %20, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %22 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %23 = bitcast float* %22 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 1
  %25 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  %26 = bitcast float* %25 to <2 x float>*
  %27 = load <2 x float>, <2 x float>* %26, align 1
  %28 = shufflevector <2 x float> %24, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <2 x float> %27, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %30 = shufflevector <4 x float> %28, <4 x float> %29, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %31 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %32 = bitcast float* %31 to <2 x float>*
  %33 = load <2 x float>, <2 x float>* %32, align 1
  %34 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  %35 = bitcast float* %34 to <2 x float>*
  %36 = load <2 x float>, <2 x float>* %35, align 1
  %37 = shufflevector <2 x float> %33, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x float> %36, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %39 = shufflevector <4 x float> %37, <4 x float> %38, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %40 = insertelement <4 x float> undef, float %1, i32 0
  %41 = shufflevector <4 x float> %40, <4 x float> undef, <4 x i32> zeroinitializer
  %42 = fmul <4 x float> %41, %12
  %43 = insertelement <4 x float> undef, float %2, i32 0
  %44 = shufflevector <4 x float> %43, <4 x float> undef, <4 x i32> zeroinitializer
  %45 = fmul <4 x float> %44, %21
  %46 = insertelement <4 x float> undef, float %3, i32 0
  %47 = shufflevector <4 x float> %46, <4 x float> undef, <4 x i32> zeroinitializer
  %48 = fmul <4 x float> %47, %30
  %49 = fadd <4 x float> %48, %39
  %50 = fadd <4 x float> %45, %49
  %51 = fadd <4 x float> %42, %50
  %52 = shufflevector <4 x float> %51, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %53 = shufflevector <4 x float> %51, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %52, <2 x float>* %32, align 1
  store <2 x float> %53, <2 x float>* %35, align 1
  ret %class.SkM44* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(64) %class.SkM44* @_ZN5SkM4413postTranslateEfff(%class.SkM44* returned, float, float, float) local_unnamed_addr #3 align 2 {
  %5 = insertelement <4 x float> undef, float %1, i32 0
  %6 = insertelement <4 x float> %5, float %2, i32 1
  %7 = insertelement <4 x float> <float undef, float undef, float undef, float 0.000000e+00>, float %3, i32 2
  %8 = shufflevector <4 x float> %6, <4 x float> %7, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %9 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 3
  %10 = load float, float* %9, align 4
  %11 = insertelement <4 x float> undef, float %10, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = fmul <4 x float> %8, %12
  %14 = bitcast %class.SkM44* %0 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %17 = bitcast float* %16 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 1
  %19 = shufflevector <2 x float> %15, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %20 = shufflevector <2 x float> %18, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %21 = shufflevector <4 x float> %19, <4 x float> %20, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %22 = fadd <4 x float> %13, %21
  %23 = shufflevector <4 x float> %22, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x float> %22, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %23, <2 x float>* %14, align 1
  store <2 x float> %24, <2 x float>* %17, align 1
  %25 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 7
  %26 = load float, float* %25, align 4
  %27 = insertelement <4 x float> undef, float %26, i32 0
  %28 = shufflevector <4 x float> %27, <4 x float> undef, <4 x i32> zeroinitializer
  %29 = fmul <4 x float> %8, %28
  %30 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %31 = bitcast float* %30 to <2 x float>*
  %32 = load <2 x float>, <2 x float>* %31, align 1
  %33 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %34 = bitcast float* %33 to <2 x float>*
  %35 = load <2 x float>, <2 x float>* %34, align 1
  %36 = shufflevector <2 x float> %32, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = shufflevector <2 x float> %35, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %38 = shufflevector <4 x float> %36, <4 x float> %37, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %39 = fadd <4 x float> %29, %38
  %40 = shufflevector <4 x float> %39, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %41 = shufflevector <4 x float> %39, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %40, <2 x float>* %31, align 1
  store <2 x float> %41, <2 x float>* %34, align 1
  %42 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 11
  %43 = load float, float* %42, align 4
  %44 = insertelement <4 x float> undef, float %43, i32 0
  %45 = shufflevector <4 x float> %44, <4 x float> undef, <4 x i32> zeroinitializer
  %46 = fmul <4 x float> %8, %45
  %47 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %48 = bitcast float* %47 to <2 x float>*
  %49 = load <2 x float>, <2 x float>* %48, align 1
  %50 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  %51 = bitcast float* %50 to <2 x float>*
  %52 = load <2 x float>, <2 x float>* %51, align 1
  %53 = shufflevector <2 x float> %49, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %54 = shufflevector <2 x float> %52, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %55 = shufflevector <4 x float> %53, <4 x float> %54, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %56 = fadd <4 x float> %46, %55
  %57 = shufflevector <4 x float> %56, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %58 = shufflevector <4 x float> %56, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %57, <2 x float>* %48, align 1
  store <2 x float> %58, <2 x float>* %51, align 1
  %59 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  %60 = load float, float* %59, align 4
  %61 = insertelement <4 x float> undef, float %60, i32 0
  %62 = shufflevector <4 x float> %61, <4 x float> undef, <4 x i32> zeroinitializer
  %63 = fmul <4 x float> %8, %62
  %64 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %65 = bitcast float* %64 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 1
  %67 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  %68 = bitcast float* %67 to <2 x float>*
  %69 = load <2 x float>, <2 x float>* %68, align 1
  %70 = shufflevector <2 x float> %66, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %71 = shufflevector <2 x float> %69, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %72 = shufflevector <4 x float> %70, <4 x float> %71, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %73 = fadd <4 x float> %63, %72
  %74 = shufflevector <4 x float> %73, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %75 = shufflevector <4 x float> %73, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %74, <2 x float>* %65, align 1
  store <2 x float> %75, <2 x float>* %68, align 1
  ret %class.SkM44* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(64) %class.SkM44* @_ZN5SkM448preScaleEff(%class.SkM44* returned, float, float) local_unnamed_addr #3 align 2 {
  %4 = bitcast %class.SkM44* %0 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 1
  %6 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %7 = bitcast float* %6 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 1
  %9 = shufflevector <2 x float> %5, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %10 = shufflevector <2 x float> %8, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %11 = shufflevector <4 x float> %9, <4 x float> %10, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %12 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 1
  %15 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %16 = bitcast float* %15 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 1
  %18 = shufflevector <2 x float> %14, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %19 = shufflevector <2 x float> %17, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %20 = shufflevector <4 x float> %18, <4 x float> %19, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %21 = insertelement <4 x float> undef, float %1, i32 0
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <4 x i32> zeroinitializer
  %23 = fmul <4 x float> %22, %11
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %25 = shufflevector <4 x float> %23, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %24, <2 x float>* %4, align 1
  store <2 x float> %25, <2 x float>* %7, align 1
  %26 = insertelement <4 x float> undef, float %2, i32 0
  %27 = shufflevector <4 x float> %26, <4 x float> undef, <4 x i32> zeroinitializer
  %28 = fmul <4 x float> %27, %20
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %30 = shufflevector <4 x float> %28, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %29, <2 x float>* %13, align 1
  store <2 x float> %30, <2 x float>* %16, align 1
  ret %class.SkM44* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(64) %class.SkM44* @_ZN5SkM448preScaleEfff(%class.SkM44* returned, float, float, float) local_unnamed_addr #3 align 2 {
  %5 = bitcast %class.SkM44* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = shufflevector <2 x float> %6, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %11 = shufflevector <2 x float> %9, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %12 = shufflevector <4 x float> %10, <4 x float> %11, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %13 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %14 = bitcast float* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %17 = bitcast float* %16 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 1
  %19 = shufflevector <2 x float> %15, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %20 = shufflevector <2 x float> %18, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %21 = shufflevector <4 x float> %19, <4 x float> %20, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %22 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %23 = bitcast float* %22 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 1
  %25 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  %26 = bitcast float* %25 to <2 x float>*
  %27 = load <2 x float>, <2 x float>* %26, align 1
  %28 = shufflevector <2 x float> %24, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <2 x float> %27, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %30 = shufflevector <4 x float> %28, <4 x float> %29, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %31 = insertelement <4 x float> undef, float %1, i32 0
  %32 = shufflevector <4 x float> %31, <4 x float> undef, <4 x i32> zeroinitializer
  %33 = fmul <4 x float> %32, %12
  %34 = shufflevector <4 x float> %33, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %35 = shufflevector <4 x float> %33, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %34, <2 x float>* %5, align 1
  store <2 x float> %35, <2 x float>* %8, align 1
  %36 = insertelement <4 x float> undef, float %2, i32 0
  %37 = shufflevector <4 x float> %36, <4 x float> undef, <4 x i32> zeroinitializer
  %38 = fmul <4 x float> %37, %21
  %39 = shufflevector <4 x float> %38, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %40 = shufflevector <4 x float> %38, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %39, <2 x float>* %14, align 1
  store <2 x float> %40, <2 x float>* %17, align 1
  %41 = insertelement <4 x float> undef, float %3, i32 0
  %42 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> zeroinitializer
  %43 = fmul <4 x float> %42, %30
  %44 = shufflevector <4 x float> %43, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %45 = shufflevector <4 x float> %43, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %44, <2 x float>* %23, align 1
  store <2 x float> %45, <2 x float>* %26, align 1
  ret %class.SkM44* %0
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* nocapture readonly, float, float, float, float) local_unnamed_addr #0 align 2 {
  %6 = bitcast %class.SkM44* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %9 = bitcast float* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = shufflevector <2 x float> %7, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %12 = shufflevector <2 x float> %10, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %13 = shufflevector <4 x float> %11, <4 x float> %12, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %14 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %15 = bitcast float* %14 to <2 x float>*
  %16 = load <2 x float>, <2 x float>* %15, align 1
  %17 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 1
  %20 = shufflevector <2 x float> %16, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <2 x float> %19, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %22 = shufflevector <4 x float> %20, <4 x float> %21, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %23 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %24 = bitcast float* %23 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 1
  %26 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  %27 = bitcast float* %26 to <2 x float>*
  %28 = load <2 x float>, <2 x float>* %27, align 1
  %29 = shufflevector <2 x float> %25, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %30 = shufflevector <2 x float> %28, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %31 = shufflevector <4 x float> %29, <4 x float> %30, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %32 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %33 = bitcast float* %32 to <2 x float>*
  %34 = load <2 x float>, <2 x float>* %33, align 1
  %35 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  %36 = bitcast float* %35 to <2 x float>*
  %37 = load <2 x float>, <2 x float>* %36, align 1
  %38 = shufflevector <2 x float> %34, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <2 x float> %37, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %40 = shufflevector <4 x float> %38, <4 x float> %39, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %41 = insertelement <4 x float> undef, float %1, i32 0
  %42 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> zeroinitializer
  %43 = fmul <4 x float> %42, %13
  %44 = insertelement <4 x float> undef, float %2, i32 0
  %45 = shufflevector <4 x float> %44, <4 x float> undef, <4 x i32> zeroinitializer
  %46 = fmul <4 x float> %45, %22
  %47 = insertelement <4 x float> undef, float %3, i32 0
  %48 = shufflevector <4 x float> %47, <4 x float> undef, <4 x i32> zeroinitializer
  %49 = fmul <4 x float> %48, %31
  %50 = insertelement <4 x float> undef, float %4, i32 0
  %51 = shufflevector <4 x float> %50, <4 x float> undef, <4 x i32> zeroinitializer
  %52 = fmul <4 x float> %51, %40
  %53 = fadd <4 x float> %49, %52
  %54 = fadd <4 x float> %46, %53
  %55 = fadd <4 x float> %43, %54
  %56 = shufflevector <4 x float> %55, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %57 = shufflevector <4 x float> %55, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %58 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %56, 0
  %59 = insertvalue { <2 x float>, <2 x float> } %58, <2 x float> %57, 1
  ret { <2 x float>, <2 x float> } %59
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN12SkMatrixPriv7MapRectERK5SkM44RK6SkRect(%class.SkM44* nocapture readonly dereferenceable(64), %struct.SkRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 3
  %4 = load float, float* %3, align 4
  %5 = fcmp une float %4, 0.000000e+00
  br i1 %5, label %18, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 7
  %8 = load float, float* %7, align 4
  %9 = fcmp une float %8, 0.000000e+00
  br i1 %9, label %18, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 11
  %12 = load float, float* %11, align 4
  %13 = fcmp une float %12, 0.000000e+00
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  %16 = load float, float* %15, align 4
  %17 = fcmp une float %16, 1.000000e+00
  br i1 %17, label %18, label %777

18:                                               ; preds = %2, %6, %10, %14
  %19 = bitcast %class.SkM44* %0 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 1
  %21 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %22 = bitcast float* %21 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 1
  %24 = shufflevector <2 x float> %20, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = shufflevector <2 x float> %23, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %26 = shufflevector <4 x float> %24, <4 x float> %25, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %27 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %28 = bitcast float* %27 to <2 x float>*
  %29 = load <2 x float>, <2 x float>* %28, align 1
  %30 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %31 = bitcast float* %30 to <2 x float>*
  %32 = load <2 x float>, <2 x float>* %31, align 1
  %33 = shufflevector <2 x float> %29, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %34 = shufflevector <2 x float> %32, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %35 = shufflevector <4 x float> %33, <4 x float> %34, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %36 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %37 = bitcast float* %36 to <2 x float>*
  %38 = load <2 x float>, <2 x float>* %37, align 1
  %39 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  %40 = bitcast float* %39 to <2 x float>*
  %41 = load <2 x float>, <2 x float>* %40, align 1
  %42 = shufflevector <2 x float> %38, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x float> %41, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %44 = shufflevector <4 x float> %42, <4 x float> %43, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %45 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  %46 = load float, float* %45, align 4
  %47 = insertelement <4 x float> undef, float %46, i32 0
  %48 = shufflevector <4 x float> %47, <4 x float> undef, <4 x i32> zeroinitializer
  %49 = fmul <4 x float> %26, %48
  %50 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %51 = load float, float* %50, align 4
  %52 = insertelement <4 x float> undef, float %51, i32 0
  %53 = shufflevector <4 x float> %52, <4 x float> undef, <4 x i32> zeroinitializer
  %54 = fmul <4 x float> %35, %53
  %55 = fadd <4 x float> %49, %54
  %56 = fadd <4 x float> %44, %55
  %57 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %58 = load float, float* %57, align 4
  %59 = insertelement <4 x float> undef, float %58, i32 0
  %60 = shufflevector <4 x float> %59, <4 x float> undef, <4 x i32> zeroinitializer
  %61 = fmul <4 x float> %26, %60
  %62 = fadd <4 x float> %54, %61
  %63 = fadd <4 x float> %44, %62
  %64 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %65 = load float, float* %64, align 4
  %66 = insertelement <4 x float> undef, float %65, i32 0
  %67 = shufflevector <4 x float> %66, <4 x float> undef, <4 x i32> zeroinitializer
  %68 = fmul <4 x float> %35, %67
  %69 = fadd <4 x float> %49, %68
  %70 = fadd <4 x float> %44, %69
  %71 = fadd <4 x float> %61, %68
  %72 = fadd <4 x float> %44, %71
  %73 = extractelement <4 x float> %56, i32 3
  %74 = fcmp ult float %73, 0x3F50000000000000
  br i1 %74, label %84, label %75

75:                                               ; preds = %18
  %76 = shufflevector <4 x float> %56, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %77 = shufflevector <4 x float> %56, <4 x float> %76, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %78 = fmul <4 x float> %77, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %79 = shufflevector <4 x float> %56, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %80 = fdiv <4 x float> %78, %79
  %81 = shufflevector <4 x float> %80, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %82 = shufflevector <4 x float> %80, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %83 = extractelement <4 x float> %63, i32 3
  br label %200

84:                                               ; preds = %18
  %85 = extractelement <4 x float> %63, i32 3
  %86 = fcmp ult float %85, 0x3F50000000000000
  br i1 %86, label %108, label %87

87:                                               ; preds = %84
  %88 = fsub float 0x3F50000000000000, %73
  %89 = fsub float %85, %73
  %90 = fdiv float %88, %89
  %91 = shufflevector <4 x float> %63, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %92 = insertelement <2 x float> undef, float %90, i32 0
  %93 = shufflevector <2 x float> %92, <2 x float> undef, <2 x i32> zeroinitializer
  %94 = fmul <2 x float> %91, %93
  %95 = fsub float 1.000000e+00, %90
  %96 = shufflevector <4 x float> %56, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %97 = insertelement <2 x float> undef, float %95, i32 0
  %98 = shufflevector <2 x float> %97, <2 x float> undef, <2 x i32> zeroinitializer
  %99 = fmul <2 x float> %96, %98
  %100 = fadd <2 x float> %94, %99
  %101 = fmul <2 x float> %100, <float 1.024000e+03, float 1.024000e+03>
  %102 = shufflevector <2 x float> %101, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %103 = shufflevector <2 x float> %101, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %104 = shufflevector <4 x float> %102, <4 x float> %103, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %105 = fmul <4 x float> %104, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %106 = shufflevector <4 x float> %105, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %107 = shufflevector <4 x float> %105, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  br label %108

108:                                              ; preds = %87, %84
  %109 = phi <2 x float> [ %106, %87 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %84 ]
  %110 = phi <2 x float> [ %107, %87 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %84 ]
  %111 = shufflevector <2 x float> %109, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %112 = shufflevector <2 x float> %110, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %113 = shufflevector <4 x float> %111, <4 x float> %112, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %114 = extractelement <4 x float> %70, i32 3
  %115 = fcmp ult float %114, 0x3F50000000000000
  br i1 %115, label %137, label %116

116:                                              ; preds = %108
  %117 = fsub float 0x3F50000000000000, %73
  %118 = fsub float %114, %73
  %119 = fdiv float %117, %118
  %120 = shufflevector <4 x float> %70, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %121 = insertelement <2 x float> undef, float %119, i32 0
  %122 = shufflevector <2 x float> %121, <2 x float> undef, <2 x i32> zeroinitializer
  %123 = fmul <2 x float> %120, %122
  %124 = fsub float 1.000000e+00, %119
  %125 = shufflevector <4 x float> %56, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %126 = insertelement <2 x float> undef, float %124, i32 0
  %127 = shufflevector <2 x float> %126, <2 x float> undef, <2 x i32> zeroinitializer
  %128 = fmul <2 x float> %125, %127
  %129 = fadd <2 x float> %123, %128
  %130 = fmul <2 x float> %129, <float 1.024000e+03, float 1.024000e+03>
  %131 = shufflevector <2 x float> %130, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %132 = shufflevector <2 x float> %130, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %133 = shufflevector <4 x float> %131, <4 x float> %132, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %134 = fmul <4 x float> %133, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %135 = shufflevector <4 x float> %134, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %136 = shufflevector <4 x float> %134, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  br label %137

137:                                              ; preds = %116, %108
  %138 = phi <2 x float> [ %135, %116 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %108 ]
  %139 = phi <2 x float> [ %136, %116 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %108 ]
  %140 = shufflevector <2 x float> %138, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %141 = shufflevector <2 x float> %139, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %142 = shufflevector <4 x float> %140, <4 x float> %141, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %143 = fcmp olt <4 x float> %142, %113
  %144 = sext <4 x i1> %143 to <4 x i32>
  %145 = bitcast <4 x i32> %144 to <2 x i64>
  %146 = extractelement <2 x i64> %145, i32 0
  %147 = extractelement <2 x i64> %145, i32 1
  %148 = bitcast i64 %146 to <2 x i32>
  %149 = shufflevector <2 x i32> %148, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %150 = bitcast i64 %147 to <2 x i32>
  %151 = shufflevector <2 x i32> %150, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %152 = shufflevector <4 x i32> %149, <4 x i32> %151, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %153 = bitcast <4 x float> %142 to <2 x i64>
  %154 = extractelement <2 x i64> %153, i32 0
  %155 = bitcast i64 %154 to <2 x i32>
  %156 = bitcast <2 x float> %139 to <2 x i32>
  %157 = shufflevector <2 x i32> %155, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = shufflevector <2 x i32> %156, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %159 = shufflevector <4 x i32> %157, <4 x i32> %158, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %160 = and <4 x i32> %152, %159
  %161 = bitcast <4 x i32> %160 to <2 x i64>
  %162 = extractelement <2 x i64> %161, i32 0
  %163 = extractelement <2 x i64> %161, i32 1
  %164 = bitcast i64 %162 to <2 x i32>
  %165 = shufflevector <2 x i32> %164, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %166 = bitcast i64 %163 to <2 x i32>
  %167 = shufflevector <2 x i32> %166, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %168 = shufflevector <4 x i32> %165, <4 x i32> %167, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %169 = bitcast <4 x i32> %152 to <2 x i64>
  %170 = xor <2 x i64> %169, <i64 -1, i64 -1>
  %171 = extractelement <2 x i64> %170, i32 0
  %172 = extractelement <2 x i64> %170, i32 1
  %173 = bitcast i64 %171 to <2 x i32>
  %174 = shufflevector <2 x i32> %173, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %175 = bitcast i64 %172 to <2 x i32>
  %176 = shufflevector <2 x i32> %175, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %177 = shufflevector <4 x i32> %174, <4 x i32> %176, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %178 = bitcast <4 x float> %113 to <2 x i64>
  %179 = extractelement <2 x i64> %178, i32 0
  %180 = bitcast i64 %179 to <2 x i32>
  %181 = bitcast <2 x float> %110 to <2 x i32>
  %182 = shufflevector <2 x i32> %180, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %183 = shufflevector <2 x i32> %181, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %184 = shufflevector <4 x i32> %182, <4 x i32> %183, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %185 = and <4 x i32> %177, %184
  %186 = bitcast <4 x i32> %185 to <2 x i64>
  %187 = extractelement <2 x i64> %186, i32 0
  %188 = extractelement <2 x i64> %186, i32 1
  %189 = bitcast i64 %187 to <2 x i32>
  %190 = shufflevector <2 x i32> %189, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %191 = bitcast i64 %188 to <2 x i32>
  %192 = shufflevector <2 x i32> %191, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %193 = shufflevector <4 x i32> %190, <4 x i32> %192, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %194 = or <4 x i32> %193, %168
  %195 = bitcast <4 x i32> %194 to <2 x i64>
  %196 = extractelement <2 x i64> %195, i32 0
  %197 = extractelement <2 x i64> %195, i32 1
  %198 = bitcast i64 %196 to <2 x float>
  %199 = bitcast i64 %197 to <2 x float>
  br label %200

200:                                              ; preds = %137, %75
  %201 = phi float [ %83, %75 ], [ %85, %137 ]
  %202 = phi <2 x float> [ %81, %75 ], [ %198, %137 ]
  %203 = phi <2 x float> [ %82, %75 ], [ %199, %137 ]
  %204 = shufflevector <2 x float> %202, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %205 = shufflevector <2 x float> %203, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %206 = shufflevector <4 x float> %204, <4 x float> %205, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %207 = fcmp ult float %201, 0x3F50000000000000
  br i1 %207, label %217, label %208

208:                                              ; preds = %200
  %209 = shufflevector <4 x float> %63, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %210 = shufflevector <4 x float> %63, <4 x float> %209, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %211 = fmul <4 x float> %210, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %212 = shufflevector <4 x float> %63, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %213 = fdiv <4 x float> %211, %212
  %214 = shufflevector <4 x float> %213, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %215 = shufflevector <4 x float> %213, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %216 = extractelement <4 x float> %72, i32 3
  br label %331

217:                                              ; preds = %200
  %218 = extractelement <4 x float> %72, i32 3
  %219 = fcmp ult float %218, 0x3F50000000000000
  br i1 %219, label %241, label %220

220:                                              ; preds = %217
  %221 = fsub float 0x3F50000000000000, %201
  %222 = fsub float %218, %201
  %223 = fdiv float %221, %222
  %224 = shufflevector <4 x float> %72, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %225 = insertelement <2 x float> undef, float %223, i32 0
  %226 = shufflevector <2 x float> %225, <2 x float> undef, <2 x i32> zeroinitializer
  %227 = fmul <2 x float> %224, %226
  %228 = fsub float 1.000000e+00, %223
  %229 = shufflevector <4 x float> %63, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %230 = insertelement <2 x float> undef, float %228, i32 0
  %231 = shufflevector <2 x float> %230, <2 x float> undef, <2 x i32> zeroinitializer
  %232 = fmul <2 x float> %229, %231
  %233 = fadd <2 x float> %227, %232
  %234 = fmul <2 x float> %233, <float 1.024000e+03, float 1.024000e+03>
  %235 = shufflevector <2 x float> %234, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %236 = shufflevector <2 x float> %234, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %237 = shufflevector <4 x float> %235, <4 x float> %236, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %238 = fmul <4 x float> %237, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %239 = shufflevector <4 x float> %238, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %240 = shufflevector <4 x float> %238, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  br label %241

241:                                              ; preds = %220, %217
  %242 = phi <2 x float> [ %239, %220 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %217 ]
  %243 = phi <2 x float> [ %240, %220 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %217 ]
  %244 = shufflevector <2 x float> %242, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %245 = shufflevector <2 x float> %243, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %246 = shufflevector <4 x float> %244, <4 x float> %245, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br i1 %74, label %268, label %247

247:                                              ; preds = %241
  %248 = fsub float 0x3F50000000000000, %201
  %249 = fsub float %73, %201
  %250 = fdiv float %248, %249
  %251 = shufflevector <4 x float> %56, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %252 = insertelement <2 x float> undef, float %250, i32 0
  %253 = shufflevector <2 x float> %252, <2 x float> undef, <2 x i32> zeroinitializer
  %254 = fmul <2 x float> %251, %253
  %255 = fsub float 1.000000e+00, %250
  %256 = shufflevector <4 x float> %63, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %257 = insertelement <2 x float> undef, float %255, i32 0
  %258 = shufflevector <2 x float> %257, <2 x float> undef, <2 x i32> zeroinitializer
  %259 = fmul <2 x float> %256, %258
  %260 = fadd <2 x float> %254, %259
  %261 = fmul <2 x float> %260, <float 1.024000e+03, float 1.024000e+03>
  %262 = shufflevector <2 x float> %261, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %263 = shufflevector <2 x float> %261, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %264 = shufflevector <4 x float> %262, <4 x float> %263, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %265 = fmul <4 x float> %264, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %266 = shufflevector <4 x float> %265, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %267 = shufflevector <4 x float> %265, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  br label %268

268:                                              ; preds = %247, %241
  %269 = phi <2 x float> [ %266, %247 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %241 ]
  %270 = phi <2 x float> [ %267, %247 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %241 ]
  %271 = shufflevector <2 x float> %269, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %272 = shufflevector <2 x float> %270, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %273 = shufflevector <4 x float> %271, <4 x float> %272, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %274 = fcmp olt <4 x float> %273, %246
  %275 = sext <4 x i1> %274 to <4 x i32>
  %276 = bitcast <4 x i32> %275 to <2 x i64>
  %277 = extractelement <2 x i64> %276, i32 0
  %278 = extractelement <2 x i64> %276, i32 1
  %279 = bitcast i64 %277 to <2 x i32>
  %280 = shufflevector <2 x i32> %279, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %281 = bitcast i64 %278 to <2 x i32>
  %282 = shufflevector <2 x i32> %281, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %283 = shufflevector <4 x i32> %280, <4 x i32> %282, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %284 = bitcast <4 x float> %273 to <2 x i64>
  %285 = extractelement <2 x i64> %284, i32 0
  %286 = bitcast i64 %285 to <2 x i32>
  %287 = bitcast <2 x float> %270 to <2 x i32>
  %288 = shufflevector <2 x i32> %286, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %289 = shufflevector <2 x i32> %287, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %290 = shufflevector <4 x i32> %288, <4 x i32> %289, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %291 = and <4 x i32> %283, %290
  %292 = bitcast <4 x i32> %291 to <2 x i64>
  %293 = extractelement <2 x i64> %292, i32 0
  %294 = extractelement <2 x i64> %292, i32 1
  %295 = bitcast i64 %293 to <2 x i32>
  %296 = shufflevector <2 x i32> %295, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %297 = bitcast i64 %294 to <2 x i32>
  %298 = shufflevector <2 x i32> %297, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %299 = shufflevector <4 x i32> %296, <4 x i32> %298, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %300 = bitcast <4 x i32> %283 to <2 x i64>
  %301 = xor <2 x i64> %300, <i64 -1, i64 -1>
  %302 = extractelement <2 x i64> %301, i32 0
  %303 = extractelement <2 x i64> %301, i32 1
  %304 = bitcast i64 %302 to <2 x i32>
  %305 = shufflevector <2 x i32> %304, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %306 = bitcast i64 %303 to <2 x i32>
  %307 = shufflevector <2 x i32> %306, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %308 = shufflevector <4 x i32> %305, <4 x i32> %307, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %309 = bitcast <4 x float> %246 to <2 x i64>
  %310 = extractelement <2 x i64> %309, i32 0
  %311 = bitcast i64 %310 to <2 x i32>
  %312 = bitcast <2 x float> %243 to <2 x i32>
  %313 = shufflevector <2 x i32> %311, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %314 = shufflevector <2 x i32> %312, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %315 = shufflevector <4 x i32> %313, <4 x i32> %314, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %316 = and <4 x i32> %308, %315
  %317 = bitcast <4 x i32> %316 to <2 x i64>
  %318 = extractelement <2 x i64> %317, i32 0
  %319 = extractelement <2 x i64> %317, i32 1
  %320 = bitcast i64 %318 to <2 x i32>
  %321 = shufflevector <2 x i32> %320, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %322 = bitcast i64 %319 to <2 x i32>
  %323 = shufflevector <2 x i32> %322, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %324 = shufflevector <4 x i32> %321, <4 x i32> %323, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %325 = or <4 x i32> %324, %299
  %326 = bitcast <4 x i32> %325 to <2 x i64>
  %327 = extractelement <2 x i64> %326, i32 0
  %328 = extractelement <2 x i64> %326, i32 1
  %329 = bitcast i64 %327 to <2 x float>
  %330 = bitcast i64 %328 to <2 x float>
  br label %331

331:                                              ; preds = %268, %208
  %332 = phi float [ %216, %208 ], [ %218, %268 ]
  %333 = phi <2 x float> [ %214, %208 ], [ %329, %268 ]
  %334 = phi <2 x float> [ %215, %208 ], [ %330, %268 ]
  %335 = shufflevector <2 x float> %333, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %336 = shufflevector <2 x float> %334, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %337 = shufflevector <4 x float> %335, <4 x float> %336, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %338 = fcmp olt <4 x float> %337, %206
  %339 = sext <4 x i1> %338 to <4 x i32>
  %340 = bitcast <4 x i32> %339 to <2 x i64>
  %341 = extractelement <2 x i64> %340, i32 0
  %342 = extractelement <2 x i64> %340, i32 1
  %343 = bitcast i64 %341 to <2 x i32>
  %344 = shufflevector <2 x i32> %343, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %345 = bitcast i64 %342 to <2 x i32>
  %346 = shufflevector <2 x i32> %345, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %347 = shufflevector <4 x i32> %344, <4 x i32> %346, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %348 = bitcast <4 x float> %337 to <2 x i64>
  %349 = extractelement <2 x i64> %348, i32 0
  %350 = bitcast i64 %349 to <2 x i32>
  %351 = bitcast <2 x float> %334 to <2 x i32>
  %352 = shufflevector <2 x i32> %350, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %353 = shufflevector <2 x i32> %351, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %354 = shufflevector <4 x i32> %352, <4 x i32> %353, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %355 = and <4 x i32> %347, %354
  %356 = bitcast <4 x i32> %355 to <2 x i64>
  %357 = extractelement <2 x i64> %356, i32 0
  %358 = extractelement <2 x i64> %356, i32 1
  %359 = bitcast i64 %357 to <2 x i32>
  %360 = shufflevector <2 x i32> %359, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %361 = bitcast i64 %358 to <2 x i32>
  %362 = shufflevector <2 x i32> %361, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %363 = shufflevector <4 x i32> %360, <4 x i32> %362, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %364 = bitcast <4 x i32> %347 to <2 x i64>
  %365 = xor <2 x i64> %364, <i64 -1, i64 -1>
  %366 = extractelement <2 x i64> %365, i32 0
  %367 = extractelement <2 x i64> %365, i32 1
  %368 = bitcast i64 %366 to <2 x i32>
  %369 = shufflevector <2 x i32> %368, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %370 = bitcast i64 %367 to <2 x i32>
  %371 = shufflevector <2 x i32> %370, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %372 = shufflevector <4 x i32> %369, <4 x i32> %371, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %373 = bitcast <4 x float> %206 to <2 x i64>
  %374 = extractelement <2 x i64> %373, i32 0
  %375 = bitcast i64 %374 to <2 x i32>
  %376 = bitcast <2 x float> %203 to <2 x i32>
  %377 = shufflevector <2 x i32> %375, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %378 = shufflevector <2 x i32> %376, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %379 = shufflevector <4 x i32> %377, <4 x i32> %378, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %380 = and <4 x i32> %372, %379
  %381 = bitcast <4 x i32> %380 to <2 x i64>
  %382 = extractelement <2 x i64> %381, i32 0
  %383 = extractelement <2 x i64> %381, i32 1
  %384 = bitcast i64 %382 to <2 x i32>
  %385 = shufflevector <2 x i32> %384, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %386 = bitcast i64 %383 to <2 x i32>
  %387 = shufflevector <2 x i32> %386, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %388 = shufflevector <4 x i32> %385, <4 x i32> %387, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %389 = or <4 x i32> %388, %363
  %390 = bitcast <4 x i32> %389 to <2 x i64>
  %391 = extractelement <2 x i64> %390, i32 0
  %392 = extractelement <2 x i64> %390, i32 1
  %393 = bitcast i64 %391 to <2 x float>
  %394 = bitcast i64 %392 to <2 x float>
  %395 = shufflevector <2 x float> %393, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %396 = shufflevector <2 x float> %394, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %397 = shufflevector <4 x float> %395, <4 x float> %396, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %398 = fcmp ult float %332, 0x3F50000000000000
  br i1 %398, label %408, label %399

399:                                              ; preds = %331
  %400 = shufflevector <4 x float> %72, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %401 = shufflevector <4 x float> %72, <4 x float> %400, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %402 = fmul <4 x float> %401, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %403 = shufflevector <4 x float> %72, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %404 = fdiv <4 x float> %402, %403
  %405 = shufflevector <4 x float> %404, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %406 = shufflevector <4 x float> %404, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %407 = extractelement <4 x float> %70, i32 3
  br label %522

408:                                              ; preds = %331
  %409 = extractelement <4 x float> %70, i32 3
  %410 = fcmp ult float %409, 0x3F50000000000000
  br i1 %410, label %432, label %411

411:                                              ; preds = %408
  %412 = fsub float 0x3F50000000000000, %332
  %413 = fsub float %409, %332
  %414 = fdiv float %412, %413
  %415 = shufflevector <4 x float> %70, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %416 = insertelement <2 x float> undef, float %414, i32 0
  %417 = shufflevector <2 x float> %416, <2 x float> undef, <2 x i32> zeroinitializer
  %418 = fmul <2 x float> %415, %417
  %419 = fsub float 1.000000e+00, %414
  %420 = shufflevector <4 x float> %72, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %421 = insertelement <2 x float> undef, float %419, i32 0
  %422 = shufflevector <2 x float> %421, <2 x float> undef, <2 x i32> zeroinitializer
  %423 = fmul <2 x float> %420, %422
  %424 = fadd <2 x float> %418, %423
  %425 = fmul <2 x float> %424, <float 1.024000e+03, float 1.024000e+03>
  %426 = shufflevector <2 x float> %425, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %427 = shufflevector <2 x float> %425, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %428 = shufflevector <4 x float> %426, <4 x float> %427, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %429 = fmul <4 x float> %428, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %430 = shufflevector <4 x float> %429, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %431 = shufflevector <4 x float> %429, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  br label %432

432:                                              ; preds = %411, %408
  %433 = phi <2 x float> [ %430, %411 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %408 ]
  %434 = phi <2 x float> [ %431, %411 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %408 ]
  %435 = shufflevector <2 x float> %433, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %436 = shufflevector <2 x float> %434, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %437 = shufflevector <4 x float> %435, <4 x float> %436, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br i1 %207, label %459, label %438

438:                                              ; preds = %432
  %439 = fsub float 0x3F50000000000000, %332
  %440 = fsub float %201, %332
  %441 = fdiv float %439, %440
  %442 = shufflevector <4 x float> %63, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %443 = insertelement <2 x float> undef, float %441, i32 0
  %444 = shufflevector <2 x float> %443, <2 x float> undef, <2 x i32> zeroinitializer
  %445 = fmul <2 x float> %442, %444
  %446 = fsub float 1.000000e+00, %441
  %447 = shufflevector <4 x float> %72, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %448 = insertelement <2 x float> undef, float %446, i32 0
  %449 = shufflevector <2 x float> %448, <2 x float> undef, <2 x i32> zeroinitializer
  %450 = fmul <2 x float> %447, %449
  %451 = fadd <2 x float> %445, %450
  %452 = fmul <2 x float> %451, <float 1.024000e+03, float 1.024000e+03>
  %453 = shufflevector <2 x float> %452, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %454 = shufflevector <2 x float> %452, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %455 = shufflevector <4 x float> %453, <4 x float> %454, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %456 = fmul <4 x float> %455, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %457 = shufflevector <4 x float> %456, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %458 = shufflevector <4 x float> %456, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  br label %459

459:                                              ; preds = %438, %432
  %460 = phi <2 x float> [ %457, %438 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %432 ]
  %461 = phi <2 x float> [ %458, %438 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %432 ]
  %462 = shufflevector <2 x float> %460, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %463 = shufflevector <2 x float> %461, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %464 = shufflevector <4 x float> %462, <4 x float> %463, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %465 = fcmp olt <4 x float> %464, %437
  %466 = sext <4 x i1> %465 to <4 x i32>
  %467 = bitcast <4 x i32> %466 to <2 x i64>
  %468 = extractelement <2 x i64> %467, i32 0
  %469 = extractelement <2 x i64> %467, i32 1
  %470 = bitcast i64 %468 to <2 x i32>
  %471 = shufflevector <2 x i32> %470, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %472 = bitcast i64 %469 to <2 x i32>
  %473 = shufflevector <2 x i32> %472, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %474 = shufflevector <4 x i32> %471, <4 x i32> %473, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %475 = bitcast <4 x float> %464 to <2 x i64>
  %476 = extractelement <2 x i64> %475, i32 0
  %477 = bitcast i64 %476 to <2 x i32>
  %478 = bitcast <2 x float> %461 to <2 x i32>
  %479 = shufflevector <2 x i32> %477, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %480 = shufflevector <2 x i32> %478, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %481 = shufflevector <4 x i32> %479, <4 x i32> %480, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %482 = and <4 x i32> %474, %481
  %483 = bitcast <4 x i32> %482 to <2 x i64>
  %484 = extractelement <2 x i64> %483, i32 0
  %485 = extractelement <2 x i64> %483, i32 1
  %486 = bitcast i64 %484 to <2 x i32>
  %487 = shufflevector <2 x i32> %486, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %488 = bitcast i64 %485 to <2 x i32>
  %489 = shufflevector <2 x i32> %488, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %490 = shufflevector <4 x i32> %487, <4 x i32> %489, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %491 = bitcast <4 x i32> %474 to <2 x i64>
  %492 = xor <2 x i64> %491, <i64 -1, i64 -1>
  %493 = extractelement <2 x i64> %492, i32 0
  %494 = extractelement <2 x i64> %492, i32 1
  %495 = bitcast i64 %493 to <2 x i32>
  %496 = shufflevector <2 x i32> %495, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %497 = bitcast i64 %494 to <2 x i32>
  %498 = shufflevector <2 x i32> %497, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %499 = shufflevector <4 x i32> %496, <4 x i32> %498, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %500 = bitcast <4 x float> %437 to <2 x i64>
  %501 = extractelement <2 x i64> %500, i32 0
  %502 = bitcast i64 %501 to <2 x i32>
  %503 = bitcast <2 x float> %434 to <2 x i32>
  %504 = shufflevector <2 x i32> %502, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %505 = shufflevector <2 x i32> %503, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %506 = shufflevector <4 x i32> %504, <4 x i32> %505, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %507 = and <4 x i32> %499, %506
  %508 = bitcast <4 x i32> %507 to <2 x i64>
  %509 = extractelement <2 x i64> %508, i32 0
  %510 = extractelement <2 x i64> %508, i32 1
  %511 = bitcast i64 %509 to <2 x i32>
  %512 = shufflevector <2 x i32> %511, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %513 = bitcast i64 %510 to <2 x i32>
  %514 = shufflevector <2 x i32> %513, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %515 = shufflevector <4 x i32> %512, <4 x i32> %514, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %516 = or <4 x i32> %515, %490
  %517 = bitcast <4 x i32> %516 to <2 x i64>
  %518 = extractelement <2 x i64> %517, i32 0
  %519 = extractelement <2 x i64> %517, i32 1
  %520 = bitcast i64 %518 to <2 x float>
  %521 = bitcast i64 %519 to <2 x float>
  br label %522

522:                                              ; preds = %459, %399
  %523 = phi float [ %407, %399 ], [ %409, %459 ]
  %524 = phi <2 x float> [ %405, %399 ], [ %520, %459 ]
  %525 = phi <2 x float> [ %406, %399 ], [ %521, %459 ]
  %526 = shufflevector <2 x float> %524, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %527 = shufflevector <2 x float> %525, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %528 = shufflevector <4 x float> %526, <4 x float> %527, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %529 = fcmp ult float %523, 0x3F50000000000000
  br i1 %529, label %538, label %530

530:                                              ; preds = %522
  %531 = shufflevector <4 x float> %70, <4 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %532 = shufflevector <4 x float> %70, <4 x float> %531, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %533 = fmul <4 x float> %532, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %534 = shufflevector <4 x float> %70, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %535 = fdiv <4 x float> %533, %534
  %536 = shufflevector <4 x float> %535, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %537 = shufflevector <4 x float> %535, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  br label %650

538:                                              ; preds = %522
  br i1 %74, label %560, label %539

539:                                              ; preds = %538
  %540 = fsub float 0x3F50000000000000, %523
  %541 = fsub float %73, %523
  %542 = fdiv float %540, %541
  %543 = shufflevector <4 x float> %56, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %544 = insertelement <2 x float> undef, float %542, i32 0
  %545 = shufflevector <2 x float> %544, <2 x float> undef, <2 x i32> zeroinitializer
  %546 = fmul <2 x float> %543, %545
  %547 = fsub float 1.000000e+00, %542
  %548 = shufflevector <4 x float> %70, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %549 = insertelement <2 x float> undef, float %547, i32 0
  %550 = shufflevector <2 x float> %549, <2 x float> undef, <2 x i32> zeroinitializer
  %551 = fmul <2 x float> %548, %550
  %552 = fadd <2 x float> %546, %551
  %553 = fmul <2 x float> %552, <float 1.024000e+03, float 1.024000e+03>
  %554 = shufflevector <2 x float> %553, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %555 = shufflevector <2 x float> %553, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %556 = shufflevector <4 x float> %554, <4 x float> %555, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %557 = fmul <4 x float> %556, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %558 = shufflevector <4 x float> %557, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %559 = shufflevector <4 x float> %557, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  br label %560

560:                                              ; preds = %539, %538
  %561 = phi <2 x float> [ %558, %539 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %538 ]
  %562 = phi <2 x float> [ %559, %539 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %538 ]
  %563 = shufflevector <2 x float> %561, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %564 = shufflevector <2 x float> %562, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %565 = shufflevector <4 x float> %563, <4 x float> %564, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br i1 %398, label %587, label %566

566:                                              ; preds = %560
  %567 = fsub float 0x3F50000000000000, %523
  %568 = fsub float %332, %523
  %569 = fdiv float %567, %568
  %570 = shufflevector <4 x float> %72, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %571 = insertelement <2 x float> undef, float %569, i32 0
  %572 = shufflevector <2 x float> %571, <2 x float> undef, <2 x i32> zeroinitializer
  %573 = fmul <2 x float> %570, %572
  %574 = fsub float 1.000000e+00, %569
  %575 = shufflevector <4 x float> %70, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %576 = insertelement <2 x float> undef, float %574, i32 0
  %577 = shufflevector <2 x float> %576, <2 x float> undef, <2 x i32> zeroinitializer
  %578 = fmul <2 x float> %575, %577
  %579 = fadd <2 x float> %573, %578
  %580 = fmul <2 x float> %579, <float 1.024000e+03, float 1.024000e+03>
  %581 = shufflevector <2 x float> %580, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %582 = shufflevector <2 x float> %580, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %583 = shufflevector <4 x float> %581, <4 x float> %582, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %584 = fmul <4 x float> %583, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %585 = shufflevector <4 x float> %584, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %586 = shufflevector <4 x float> %584, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  br label %587

587:                                              ; preds = %566, %560
  %588 = phi <2 x float> [ %585, %566 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %560 ]
  %589 = phi <2 x float> [ %586, %566 ], [ <float 0x7FF0000000000000, float 0x7FF0000000000000>, %560 ]
  %590 = shufflevector <2 x float> %588, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %591 = shufflevector <2 x float> %589, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %592 = shufflevector <4 x float> %590, <4 x float> %591, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %593 = fcmp olt <4 x float> %592, %565
  %594 = sext <4 x i1> %593 to <4 x i32>
  %595 = bitcast <4 x i32> %594 to <2 x i64>
  %596 = extractelement <2 x i64> %595, i32 0
  %597 = extractelement <2 x i64> %595, i32 1
  %598 = bitcast i64 %596 to <2 x i32>
  %599 = shufflevector <2 x i32> %598, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %600 = bitcast i64 %597 to <2 x i32>
  %601 = shufflevector <2 x i32> %600, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %602 = shufflevector <4 x i32> %599, <4 x i32> %601, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %603 = bitcast <4 x float> %592 to <2 x i64>
  %604 = extractelement <2 x i64> %603, i32 0
  %605 = bitcast i64 %604 to <2 x i32>
  %606 = bitcast <2 x float> %589 to <2 x i32>
  %607 = shufflevector <2 x i32> %605, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %608 = shufflevector <2 x i32> %606, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %609 = shufflevector <4 x i32> %607, <4 x i32> %608, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %610 = and <4 x i32> %602, %609
  %611 = bitcast <4 x i32> %610 to <2 x i64>
  %612 = extractelement <2 x i64> %611, i32 0
  %613 = extractelement <2 x i64> %611, i32 1
  %614 = bitcast i64 %612 to <2 x i32>
  %615 = shufflevector <2 x i32> %614, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %616 = bitcast i64 %613 to <2 x i32>
  %617 = shufflevector <2 x i32> %616, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %618 = shufflevector <4 x i32> %615, <4 x i32> %617, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %619 = bitcast <4 x i32> %602 to <2 x i64>
  %620 = xor <2 x i64> %619, <i64 -1, i64 -1>
  %621 = extractelement <2 x i64> %620, i32 0
  %622 = extractelement <2 x i64> %620, i32 1
  %623 = bitcast i64 %621 to <2 x i32>
  %624 = shufflevector <2 x i32> %623, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %625 = bitcast i64 %622 to <2 x i32>
  %626 = shufflevector <2 x i32> %625, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %627 = shufflevector <4 x i32> %624, <4 x i32> %626, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %628 = bitcast <4 x float> %565 to <2 x i64>
  %629 = extractelement <2 x i64> %628, i32 0
  %630 = bitcast i64 %629 to <2 x i32>
  %631 = bitcast <2 x float> %562 to <2 x i32>
  %632 = shufflevector <2 x i32> %630, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %633 = shufflevector <2 x i32> %631, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %634 = shufflevector <4 x i32> %632, <4 x i32> %633, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %635 = and <4 x i32> %627, %634
  %636 = bitcast <4 x i32> %635 to <2 x i64>
  %637 = extractelement <2 x i64> %636, i32 0
  %638 = extractelement <2 x i64> %636, i32 1
  %639 = bitcast i64 %637 to <2 x i32>
  %640 = shufflevector <2 x i32> %639, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %641 = bitcast i64 %638 to <2 x i32>
  %642 = shufflevector <2 x i32> %641, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %643 = shufflevector <4 x i32> %640, <4 x i32> %642, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %644 = or <4 x i32> %643, %618
  %645 = bitcast <4 x i32> %644 to <2 x i64>
  %646 = extractelement <2 x i64> %645, i32 0
  %647 = extractelement <2 x i64> %645, i32 1
  %648 = bitcast i64 %646 to <2 x float>
  %649 = bitcast i64 %647 to <2 x float>
  br label %650

650:                                              ; preds = %530, %587
  %651 = phi <2 x float> [ %536, %530 ], [ %648, %587 ]
  %652 = phi <2 x float> [ %537, %530 ], [ %649, %587 ]
  %653 = shufflevector <2 x float> %651, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %654 = shufflevector <2 x float> %652, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %655 = shufflevector <4 x float> %653, <4 x float> %654, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %656 = fcmp olt <4 x float> %655, %528
  %657 = sext <4 x i1> %656 to <4 x i32>
  %658 = bitcast <4 x i32> %657 to <2 x i64>
  %659 = extractelement <2 x i64> %658, i32 0
  %660 = extractelement <2 x i64> %658, i32 1
  %661 = bitcast i64 %659 to <2 x i32>
  %662 = shufflevector <2 x i32> %661, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %663 = bitcast i64 %660 to <2 x i32>
  %664 = shufflevector <2 x i32> %663, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %665 = shufflevector <4 x i32> %662, <4 x i32> %664, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %666 = bitcast <4 x float> %655 to <2 x i64>
  %667 = extractelement <2 x i64> %666, i32 0
  %668 = bitcast i64 %667 to <2 x i32>
  %669 = bitcast <2 x float> %652 to <2 x i32>
  %670 = shufflevector <2 x i32> %668, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %671 = shufflevector <2 x i32> %669, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %672 = shufflevector <4 x i32> %670, <4 x i32> %671, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %673 = and <4 x i32> %665, %672
  %674 = bitcast <4 x i32> %673 to <2 x i64>
  %675 = extractelement <2 x i64> %674, i32 0
  %676 = extractelement <2 x i64> %674, i32 1
  %677 = bitcast i64 %675 to <2 x i32>
  %678 = shufflevector <2 x i32> %677, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %679 = bitcast i64 %676 to <2 x i32>
  %680 = shufflevector <2 x i32> %679, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %681 = shufflevector <4 x i32> %678, <4 x i32> %680, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %682 = bitcast <4 x i32> %665 to <2 x i64>
  %683 = xor <2 x i64> %682, <i64 -1, i64 -1>
  %684 = extractelement <2 x i64> %683, i32 0
  %685 = extractelement <2 x i64> %683, i32 1
  %686 = bitcast i64 %684 to <2 x i32>
  %687 = shufflevector <2 x i32> %686, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %688 = bitcast i64 %685 to <2 x i32>
  %689 = shufflevector <2 x i32> %688, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %690 = shufflevector <4 x i32> %687, <4 x i32> %689, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %691 = bitcast <4 x float> %528 to <2 x i64>
  %692 = extractelement <2 x i64> %691, i32 0
  %693 = bitcast i64 %692 to <2 x i32>
  %694 = bitcast <2 x float> %525 to <2 x i32>
  %695 = shufflevector <2 x i32> %693, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %696 = shufflevector <2 x i32> %694, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %697 = shufflevector <4 x i32> %695, <4 x i32> %696, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %698 = and <4 x i32> %690, %697
  %699 = bitcast <4 x i32> %698 to <2 x i64>
  %700 = extractelement <2 x i64> %699, i32 0
  %701 = extractelement <2 x i64> %699, i32 1
  %702 = bitcast i64 %700 to <2 x i32>
  %703 = shufflevector <2 x i32> %702, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %704 = bitcast i64 %701 to <2 x i32>
  %705 = shufflevector <2 x i32> %704, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %706 = shufflevector <4 x i32> %703, <4 x i32> %705, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %707 = or <4 x i32> %706, %681
  %708 = bitcast <4 x i32> %707 to <2 x i64>
  %709 = extractelement <2 x i64> %708, i32 0
  %710 = extractelement <2 x i64> %708, i32 1
  %711 = bitcast i64 %709 to <2 x float>
  %712 = bitcast i64 %710 to <2 x float>
  %713 = shufflevector <2 x float> %711, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %714 = shufflevector <2 x float> %712, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %715 = shufflevector <4 x float> %713, <4 x float> %714, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %716 = fcmp olt <4 x float> %715, %397
  %717 = sext <4 x i1> %716 to <4 x i32>
  %718 = bitcast <4 x i32> %717 to <2 x i64>
  %719 = extractelement <2 x i64> %718, i32 0
  %720 = extractelement <2 x i64> %718, i32 1
  %721 = bitcast i64 %719 to <2 x i32>
  %722 = shufflevector <2 x i32> %721, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %723 = bitcast i64 %720 to <2 x i32>
  %724 = shufflevector <2 x i32> %723, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %725 = shufflevector <4 x i32> %722, <4 x i32> %724, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %726 = bitcast <4 x float> %715 to <2 x i64>
  %727 = extractelement <2 x i64> %726, i32 0
  %728 = bitcast i64 %727 to <2 x i32>
  %729 = bitcast i64 %710 to <2 x i32>
  %730 = shufflevector <2 x i32> %728, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %731 = shufflevector <2 x i32> %729, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %732 = shufflevector <4 x i32> %730, <4 x i32> %731, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %733 = and <4 x i32> %725, %732
  %734 = bitcast <4 x i32> %733 to <2 x i64>
  %735 = extractelement <2 x i64> %734, i32 0
  %736 = extractelement <2 x i64> %734, i32 1
  %737 = bitcast i64 %735 to <2 x i32>
  %738 = shufflevector <2 x i32> %737, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %739 = bitcast i64 %736 to <2 x i32>
  %740 = shufflevector <2 x i32> %739, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %741 = shufflevector <4 x i32> %738, <4 x i32> %740, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %742 = bitcast <4 x i32> %725 to <2 x i64>
  %743 = xor <2 x i64> %742, <i64 -1, i64 -1>
  %744 = extractelement <2 x i64> %743, i32 0
  %745 = extractelement <2 x i64> %743, i32 1
  %746 = bitcast i64 %744 to <2 x i32>
  %747 = shufflevector <2 x i32> %746, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %748 = bitcast i64 %745 to <2 x i32>
  %749 = shufflevector <2 x i32> %748, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %750 = shufflevector <4 x i32> %747, <4 x i32> %749, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %751 = bitcast <4 x float> %397 to <2 x i64>
  %752 = extractelement <2 x i64> %751, i32 0
  %753 = bitcast i64 %752 to <2 x i32>
  %754 = bitcast i64 %392 to <2 x i32>
  %755 = shufflevector <2 x i32> %753, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %756 = shufflevector <2 x i32> %754, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %757 = shufflevector <4 x i32> %755, <4 x i32> %756, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %758 = and <4 x i32> %750, %757
  %759 = bitcast <4 x i32> %758 to <2 x i64>
  %760 = extractelement <2 x i64> %759, i32 0
  %761 = extractelement <2 x i64> %759, i32 1
  %762 = bitcast i64 %760 to <2 x i32>
  %763 = shufflevector <2 x i32> %762, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %764 = bitcast i64 %761 to <2 x i32>
  %765 = shufflevector <2 x i32> %764, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %766 = shufflevector <4 x i32> %763, <4 x i32> %765, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %767 = or <4 x i32> %766, %741
  %768 = bitcast <4 x i32> %767 to <2 x i64>
  %769 = extractelement <2 x i64> %768, i32 0
  %770 = extractelement <2 x i64> %768, i32 1
  %771 = bitcast i64 %769 to <2 x float>
  %772 = bitcast i64 %770 to <2 x float>
  %773 = shufflevector <2 x float> %771, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %774 = shufflevector <2 x float> %772, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %775 = shufflevector <4 x float> %773, <4 x float> %774, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %776 = fmul <4 x float> %775, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  br label %1007

777:                                              ; preds = %14
  %778 = bitcast %class.SkM44* %0 to <2 x float>*
  %779 = load <2 x float>, <2 x float>* %778, align 1
  %780 = shufflevector <2 x float> %779, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %781 = shufflevector <2 x float> %779, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %782 = shufflevector <4 x float> %780, <4 x float> %781, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %783 = fmul <4 x float> %782, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %784 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %785 = bitcast float* %784 to <2 x float>*
  %786 = load <2 x float>, <2 x float>* %785, align 1
  %787 = shufflevector <2 x float> %786, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %788 = shufflevector <2 x float> %786, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %789 = shufflevector <4 x float> %787, <4 x float> %788, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %790 = fmul <4 x float> %789, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %791 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %792 = bitcast float* %791 to <2 x float>*
  %793 = load <2 x float>, <2 x float>* %792, align 1
  %794 = shufflevector <2 x float> %793, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %795 = shufflevector <2 x float> %793, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %796 = shufflevector <4 x float> %794, <4 x float> %795, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %797 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  %798 = load float, float* %797, align 4
  %799 = insertelement <4 x float> undef, float %798, i32 0
  %800 = shufflevector <4 x float> %799, <4 x float> undef, <4 x i32> zeroinitializer
  %801 = fmul <4 x float> %783, %800
  %802 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %803 = load float, float* %802, align 4
  %804 = insertelement <4 x float> undef, float %803, i32 0
  %805 = shufflevector <4 x float> %804, <4 x float> undef, <4 x i32> zeroinitializer
  %806 = fmul <4 x float> %790, %805
  %807 = fadd <4 x float> %801, %806
  %808 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %809 = load float, float* %808, align 4
  %810 = insertelement <4 x float> undef, float %809, i32 0
  %811 = shufflevector <4 x float> %810, <4 x float> undef, <4 x i32> zeroinitializer
  %812 = fmul <4 x float> %783, %811
  %813 = fadd <4 x float> %806, %812
  %814 = fcmp olt <4 x float> %813, %807
  %815 = sext <4 x i1> %814 to <4 x i32>
  %816 = bitcast <4 x i32> %815 to <2 x i64>
  %817 = extractelement <2 x i64> %816, i32 0
  %818 = extractelement <2 x i64> %816, i32 1
  %819 = bitcast i64 %817 to <2 x i32>
  %820 = shufflevector <2 x i32> %819, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %821 = bitcast i64 %818 to <2 x i32>
  %822 = shufflevector <2 x i32> %821, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %823 = shufflevector <4 x i32> %820, <4 x i32> %822, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %824 = bitcast <4 x float> %813 to <2 x i64>
  %825 = extractelement <2 x i64> %824, i32 0
  %826 = bitcast i64 %825 to <2 x i32>
  %827 = shufflevector <4 x float> %813, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %828 = bitcast <2 x float> %827 to <2 x i32>
  %829 = shufflevector <2 x i32> %826, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %830 = shufflevector <2 x i32> %828, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %831 = shufflevector <4 x i32> %829, <4 x i32> %830, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %832 = and <4 x i32> %823, %831
  %833 = bitcast <4 x i32> %832 to <2 x i64>
  %834 = extractelement <2 x i64> %833, i32 0
  %835 = extractelement <2 x i64> %833, i32 1
  %836 = bitcast i64 %834 to <2 x i32>
  %837 = shufflevector <2 x i32> %836, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %838 = bitcast i64 %835 to <2 x i32>
  %839 = shufflevector <2 x i32> %838, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %840 = shufflevector <4 x i32> %837, <4 x i32> %839, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %841 = bitcast <4 x i32> %823 to <2 x i64>
  %842 = xor <2 x i64> %841, <i64 -1, i64 -1>
  %843 = extractelement <2 x i64> %842, i32 0
  %844 = extractelement <2 x i64> %842, i32 1
  %845 = bitcast i64 %843 to <2 x i32>
  %846 = shufflevector <2 x i32> %845, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %847 = bitcast i64 %844 to <2 x i32>
  %848 = shufflevector <2 x i32> %847, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %849 = shufflevector <4 x i32> %846, <4 x i32> %848, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %850 = bitcast <4 x float> %807 to <2 x i64>
  %851 = extractelement <2 x i64> %850, i32 0
  %852 = bitcast i64 %851 to <2 x i32>
  %853 = shufflevector <4 x float> %807, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %854 = bitcast <2 x float> %853 to <2 x i32>
  %855 = shufflevector <2 x i32> %852, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %856 = shufflevector <2 x i32> %854, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %857 = shufflevector <4 x i32> %855, <4 x i32> %856, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %858 = and <4 x i32> %849, %857
  %859 = bitcast <4 x i32> %858 to <2 x i64>
  %860 = extractelement <2 x i64> %859, i32 0
  %861 = extractelement <2 x i64> %859, i32 1
  %862 = bitcast i64 %860 to <2 x i32>
  %863 = shufflevector <2 x i32> %862, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %864 = bitcast i64 %861 to <2 x i32>
  %865 = shufflevector <2 x i32> %864, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %866 = shufflevector <4 x i32> %863, <4 x i32> %865, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %867 = or <4 x i32> %866, %840
  %868 = bitcast <4 x i32> %867 to <2 x i64>
  %869 = extractelement <2 x i64> %868, i32 0
  %870 = extractelement <2 x i64> %868, i32 1
  %871 = bitcast i64 %869 to <2 x float>
  %872 = bitcast i64 %870 to <2 x float>
  %873 = shufflevector <2 x float> %871, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %874 = shufflevector <2 x float> %872, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %875 = shufflevector <4 x float> %873, <4 x float> %874, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %876 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %877 = load float, float* %876, align 4
  %878 = insertelement <4 x float> undef, float %877, i32 0
  %879 = shufflevector <4 x float> %878, <4 x float> undef, <4 x i32> zeroinitializer
  %880 = fmul <4 x float> %790, %879
  %881 = fadd <4 x float> %801, %880
  %882 = fadd <4 x float> %812, %880
  %883 = fcmp olt <4 x float> %882, %881
  %884 = sext <4 x i1> %883 to <4 x i32>
  %885 = bitcast <4 x i32> %884 to <2 x i64>
  %886 = extractelement <2 x i64> %885, i32 0
  %887 = extractelement <2 x i64> %885, i32 1
  %888 = bitcast i64 %886 to <2 x i32>
  %889 = shufflevector <2 x i32> %888, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %890 = bitcast i64 %887 to <2 x i32>
  %891 = shufflevector <2 x i32> %890, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %892 = shufflevector <4 x i32> %889, <4 x i32> %891, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %893 = bitcast <4 x float> %882 to <2 x i64>
  %894 = extractelement <2 x i64> %893, i32 0
  %895 = bitcast i64 %894 to <2 x i32>
  %896 = shufflevector <4 x float> %882, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %897 = bitcast <2 x float> %896 to <2 x i32>
  %898 = shufflevector <2 x i32> %895, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %899 = shufflevector <2 x i32> %897, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %900 = shufflevector <4 x i32> %898, <4 x i32> %899, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %901 = and <4 x i32> %892, %900
  %902 = bitcast <4 x i32> %901 to <2 x i64>
  %903 = extractelement <2 x i64> %902, i32 0
  %904 = extractelement <2 x i64> %902, i32 1
  %905 = bitcast i64 %903 to <2 x i32>
  %906 = shufflevector <2 x i32> %905, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %907 = bitcast i64 %904 to <2 x i32>
  %908 = shufflevector <2 x i32> %907, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %909 = shufflevector <4 x i32> %906, <4 x i32> %908, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %910 = bitcast <4 x i32> %892 to <2 x i64>
  %911 = xor <2 x i64> %910, <i64 -1, i64 -1>
  %912 = extractelement <2 x i64> %911, i32 0
  %913 = extractelement <2 x i64> %911, i32 1
  %914 = bitcast i64 %912 to <2 x i32>
  %915 = shufflevector <2 x i32> %914, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %916 = bitcast i64 %913 to <2 x i32>
  %917 = shufflevector <2 x i32> %916, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %918 = shufflevector <4 x i32> %915, <4 x i32> %917, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %919 = bitcast <4 x float> %881 to <2 x i64>
  %920 = extractelement <2 x i64> %919, i32 0
  %921 = bitcast i64 %920 to <2 x i32>
  %922 = shufflevector <4 x float> %881, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %923 = bitcast <2 x float> %922 to <2 x i32>
  %924 = shufflevector <2 x i32> %921, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %925 = shufflevector <2 x i32> %923, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %926 = shufflevector <4 x i32> %924, <4 x i32> %925, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %927 = and <4 x i32> %918, %926
  %928 = bitcast <4 x i32> %927 to <2 x i64>
  %929 = extractelement <2 x i64> %928, i32 0
  %930 = extractelement <2 x i64> %928, i32 1
  %931 = bitcast i64 %929 to <2 x i32>
  %932 = shufflevector <2 x i32> %931, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %933 = bitcast i64 %930 to <2 x i32>
  %934 = shufflevector <2 x i32> %933, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %935 = shufflevector <4 x i32> %932, <4 x i32> %934, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %936 = or <4 x i32> %935, %909
  %937 = bitcast <4 x i32> %936 to <2 x i64>
  %938 = extractelement <2 x i64> %937, i32 0
  %939 = extractelement <2 x i64> %937, i32 1
  %940 = bitcast i64 %938 to <2 x float>
  %941 = bitcast i64 %939 to <2 x float>
  %942 = shufflevector <2 x float> %940, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %943 = shufflevector <2 x float> %941, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %944 = shufflevector <4 x float> %942, <4 x float> %943, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %945 = fcmp olt <4 x float> %944, %875
  %946 = sext <4 x i1> %945 to <4 x i32>
  %947 = bitcast <4 x i32> %946 to <2 x i64>
  %948 = extractelement <2 x i64> %947, i32 0
  %949 = extractelement <2 x i64> %947, i32 1
  %950 = bitcast i64 %948 to <2 x i32>
  %951 = shufflevector <2 x i32> %950, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %952 = bitcast i64 %949 to <2 x i32>
  %953 = shufflevector <2 x i32> %952, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %954 = shufflevector <4 x i32> %951, <4 x i32> %953, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %955 = bitcast <4 x float> %944 to <2 x i64>
  %956 = extractelement <2 x i64> %955, i32 0
  %957 = bitcast i64 %956 to <2 x i32>
  %958 = bitcast i64 %939 to <2 x i32>
  %959 = shufflevector <2 x i32> %957, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %960 = shufflevector <2 x i32> %958, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %961 = shufflevector <4 x i32> %959, <4 x i32> %960, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %962 = and <4 x i32> %954, %961
  %963 = bitcast <4 x i32> %962 to <2 x i64>
  %964 = extractelement <2 x i64> %963, i32 0
  %965 = extractelement <2 x i64> %963, i32 1
  %966 = bitcast i64 %964 to <2 x i32>
  %967 = shufflevector <2 x i32> %966, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %968 = bitcast i64 %965 to <2 x i32>
  %969 = shufflevector <2 x i32> %968, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %970 = shufflevector <4 x i32> %967, <4 x i32> %969, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %971 = bitcast <4 x i32> %954 to <2 x i64>
  %972 = xor <2 x i64> %971, <i64 -1, i64 -1>
  %973 = extractelement <2 x i64> %972, i32 0
  %974 = extractelement <2 x i64> %972, i32 1
  %975 = bitcast i64 %973 to <2 x i32>
  %976 = shufflevector <2 x i32> %975, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %977 = bitcast i64 %974 to <2 x i32>
  %978 = shufflevector <2 x i32> %977, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %979 = shufflevector <4 x i32> %976, <4 x i32> %978, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %980 = bitcast <4 x float> %875 to <2 x i64>
  %981 = extractelement <2 x i64> %980, i32 0
  %982 = bitcast i64 %981 to <2 x i32>
  %983 = bitcast i64 %870 to <2 x i32>
  %984 = shufflevector <2 x i32> %982, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %985 = shufflevector <2 x i32> %983, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %986 = shufflevector <4 x i32> %984, <4 x i32> %985, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %987 = and <4 x i32> %979, %986
  %988 = bitcast <4 x i32> %987 to <2 x i64>
  %989 = extractelement <2 x i64> %988, i32 0
  %990 = extractelement <2 x i64> %988, i32 1
  %991 = bitcast i64 %989 to <2 x i32>
  %992 = shufflevector <2 x i32> %991, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %993 = bitcast i64 %990 to <2 x i32>
  %994 = shufflevector <2 x i32> %993, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %995 = shufflevector <4 x i32> %992, <4 x i32> %994, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %996 = or <4 x i32> %995, %970
  %997 = bitcast <4 x i32> %996 to <2 x i64>
  %998 = extractelement <2 x i64> %997, i32 0
  %999 = extractelement <2 x i64> %997, i32 1
  %1000 = bitcast i64 %998 to <2 x float>
  %1001 = bitcast i64 %999 to <2 x float>
  %1002 = shufflevector <2 x float> %1000, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1003 = shufflevector <2 x float> %1001, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1004 = shufflevector <4 x float> %1002, <4 x float> %1003, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1005 = fmul <4 x float> %1004, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %1006 = fadd <4 x float> %796, %1005
  br label %1007

1007:                                             ; preds = %777, %650
  %1008 = phi <4 x float> [ %1006, %777 ], [ %776, %650 ]
  %1009 = shufflevector <4 x float> %1008, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %1010 = shufflevector <4 x float> %1008, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %1011 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %1009, 0
  %1012 = insertvalue { <2 x float>, <2 x float> } %1011, <2 x float> %1010, 1
  ret { <2 x float>, <2 x float> } %1012
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5SkM4420normalizePerspectiveEv(%class.SkM44* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  %3 = load float, float* %2, align 4
  %4 = fcmp une float %3, 1.000000e+00
  %5 = fcmp une float %3, 0.000000e+00
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %70

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 3
  %9 = load float, float* %8, align 4
  %10 = fcmp oeq float %9, 0.000000e+00
  br i1 %10, label %11, label %70

11:                                               ; preds = %7
  %12 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 7
  %13 = load float, float* %12, align 4
  %14 = fcmp oeq float %13, 0.000000e+00
  br i1 %14, label %15, label %70

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 11
  %17 = load float, float* %16, align 4
  %18 = fcmp oeq float %17, 0.000000e+00
  br i1 %18, label %19, label %70

19:                                               ; preds = %15
  %20 = bitcast %class.SkM44* %0 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 1
  %22 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %23 = bitcast float* %22 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 1
  %25 = shufflevector <2 x float> %21, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <2 x float> %24, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %27 = shufflevector <4 x float> %25, <4 x float> %26, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %28 = fdiv float 1.000000e+00, %3
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = fmul <4 x float> %30, %27
  %32 = shufflevector <4 x float> %31, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %33 = shufflevector <4 x float> %31, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %32, <2 x float>* %20, align 1
  store <2 x float> %33, <2 x float>* %23, align 1
  %34 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %35 = bitcast float* %34 to <2 x float>*
  %36 = load <2 x float>, <2 x float>* %35, align 1
  %37 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %38 = bitcast float* %37 to <2 x float>*
  %39 = load <2 x float>, <2 x float>* %38, align 1
  %40 = shufflevector <2 x float> %36, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <2 x float> %39, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %42 = shufflevector <4 x float> %40, <4 x float> %41, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %43 = fmul <4 x float> %30, %42
  %44 = shufflevector <4 x float> %43, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %45 = shufflevector <4 x float> %43, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %44, <2 x float>* %35, align 1
  store <2 x float> %45, <2 x float>* %38, align 1
  %46 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %47 = bitcast float* %46 to <2 x float>*
  %48 = load <2 x float>, <2 x float>* %47, align 1
  %49 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  %50 = bitcast float* %49 to <2 x float>*
  %51 = load <2 x float>, <2 x float>* %50, align 1
  %52 = shufflevector <2 x float> %48, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %53 = shufflevector <2 x float> %51, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %54 = shufflevector <4 x float> %52, <4 x float> %53, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %55 = fmul <4 x float> %30, %54
  %56 = shufflevector <4 x float> %55, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %57 = shufflevector <4 x float> %55, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %56, <2 x float>* %47, align 1
  store <2 x float> %57, <2 x float>* %50, align 1
  %58 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %59 = bitcast float* %58 to <2 x float>*
  %60 = load <2 x float>, <2 x float>* %59, align 1
  %61 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  %62 = bitcast float* %61 to <2 x float>*
  %63 = load <2 x float>, <2 x float>* %62, align 1
  %64 = shufflevector <2 x float> %60, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = shufflevector <2 x float> %63, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %66 = shufflevector <4 x float> %64, <4 x float> %65, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %67 = fmul <4 x float> %30, %66
  %68 = shufflevector <4 x float> %67, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %69 = shufflevector <4 x float> %67, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %68, <2 x float>* %59, align 1
  store <2 x float> %69, <2 x float>* %62, align 1
  store float 1.000000e+00, float* %2, align 4
  br label %70

70:                                               ; preds = %19, %15, %11, %7, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5SkM446invertEPS_(%class.SkM44* nocapture readonly, %class.SkM44* nocapture) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 3
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %12 = load float, float* %11, align 4
  %13 = insertelement <2 x float> undef, float %4, i32 0
  %14 = insertelement <2 x float> %13, float %12, i32 1
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = shufflevector <2 x double> %15, <2 x double> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %17 = shufflevector <2 x double> %15, <2 x double> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %18 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 5
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %21 = load float, float* %20, align 4
  %22 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 7
  %23 = load float, float* %22, align 4
  %24 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %25 = load float, float* %24, align 4
  %26 = fpext float %25 to double
  %27 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 9
  %28 = load float, float* %27, align 4
  %29 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  %30 = load float, float* %29, align 4
  %31 = insertelement <4 x float> undef, float %30, i32 0
  %32 = insertelement <4 x float> %31, float %28, i32 1
  %33 = insertelement <4 x float> %32, float %8, i32 2
  %34 = insertelement <4 x float> %33, float %6, i32 3
  %35 = fpext <4 x float> %34 to <4 x double>
  %36 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 11
  %37 = load float, float* %36, align 4
  %38 = insertelement <2 x float> undef, float %37, i32 0
  %39 = insertelement <2 x float> %38, float %10, i32 1
  %40 = fpext <2 x float> %39 to <2 x double>
  %41 = shufflevector <2 x double> %40, <2 x double> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <2 x double> %40, <2 x double> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %43 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %44 = load float, float* %43, align 4
  %45 = fpext float %44 to double
  %46 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 13
  %47 = load float, float* %46, align 4
  %48 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  %49 = load float, float* %48, align 4
  %50 = insertelement <4 x float> undef, float %49, i32 0
  %51 = insertelement <4 x float> %50, float %47, i32 1
  %52 = insertelement <4 x float> %51, float %21, i32 2
  %53 = insertelement <4 x float> %52, float %19, i32 3
  %54 = fpext <4 x float> %53 to <4 x double>
  %55 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  %56 = load float, float* %55, align 4
  %57 = insertelement <2 x float> undef, float %56, i32 0
  %58 = insertelement <2 x float> %57, float %23, i32 1
  %59 = fpext <2 x float> %58 to <2 x double>
  %60 = shufflevector <2 x double> %59, <2 x double> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %61 = shufflevector <2 x double> %59, <2 x double> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %62 = shufflevector <4 x double> %54, <4 x double> %35, <2 x i32> <i32 3, i32 7>
  %63 = fmul <2 x double> %62, %15
  %64 = extractelement <2 x double> %63, i32 0
  %65 = extractelement <2 x double> %63, i32 1
  %66 = fsub double %64, %65
  %67 = extractelement <4 x double> %54, i32 2
  %68 = extractelement <4 x double> %35, i32 2
  %69 = extractelement <2 x double> %59, i32 1
  %70 = extractelement <2 x double> %15, i32 0
  %71 = fmul double %70, %69
  %72 = extractelement <2 x double> %40, i32 1
  %73 = extractelement <2 x double> %15, i32 1
  %74 = fmul double %72, %73
  %75 = fsub double %71, %74
  %76 = extractelement <4 x double> %54, i32 1
  %77 = insertelement <2 x double> undef, double %70, i32 0
  %78 = insertelement <2 x double> %77, double %26, i32 1
  %79 = shufflevector <4 x double> %54, <4 x double> undef, <2 x i32> <i32 2, i32 1>
  %80 = fmul <2 x double> %78, %79
  %81 = extractelement <4 x double> %35, i32 1
  %82 = shufflevector <4 x double> %35, <4 x double> undef, <2 x i32> <i32 2, i32 1>
  %83 = insertelement <2 x double> undef, double %73, i32 0
  %84 = insertelement <2 x double> %83, double %45, i32 1
  %85 = fmul <2 x double> %82, %84
  %86 = fsub <2 x double> %80, %85
  %87 = extractelement <4 x double> %54, i32 0
  %88 = extractelement <4 x double> %35, i32 0
  %89 = extractelement <2 x double> %59, i32 0
  %90 = insertelement <2 x double> undef, double %26, i32 0
  %91 = shufflevector <2 x double> %90, <2 x double> undef, <2 x i32> zeroinitializer
  %92 = insertelement <2 x double> undef, double %89, i32 0
  %93 = insertelement <2 x double> %92, double %87, i32 1
  %94 = fmul <2 x double> %91, %93
  %95 = extractelement <2 x double> %40, i32 0
  %96 = insertelement <2 x double> undef, double %95, i32 0
  %97 = insertelement <2 x double> %96, double %88, i32 1
  %98 = insertelement <2 x double> undef, double %45, i32 0
  %99 = shufflevector <2 x double> %98, <2 x double> undef, <2 x i32> zeroinitializer
  %100 = fmul <2 x double> %97, %99
  %101 = fsub <2 x double> %94, %100
  %102 = shufflevector <4 x double> %35, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %103 = shufflevector <4 x double> %54, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %104 = fmul <2 x double> %102, %103
  %105 = shufflevector <4 x double> %35, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %106 = shufflevector <4 x double> %54, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %107 = fmul <2 x double> %105, %106
  %108 = fsub <2 x double> %104, %107
  %109 = fmul <4 x double> %61, %35
  %110 = fmul <4 x double> %42, %54
  %111 = fsub <4 x double> %109, %110
  %112 = extractelement <4 x double> %111, i32 0
  %113 = fmul double %66, %112
  %114 = extractelement <4 x double> %111, i32 1
  %115 = extractelement <2 x double> %86, i32 0
  %116 = fmul double %115, %114
  %117 = fsub double %113, %116
  %118 = extractelement <2 x double> %108, i32 0
  %119 = fmul double %75, %118
  %120 = fadd double %119, %117
  %121 = extractelement <2 x double> %108, i32 1
  %122 = extractelement <4 x double> %111, i32 3
  %123 = insertelement <2 x double> undef, double %121, i32 0
  %124 = insertelement <2 x double> %123, double %122, i32 1
  %125 = fmul <2 x double> %124, %101
  %126 = extractelement <2 x double> %125, i32 0
  %127 = fadd double %126, %120
  %128 = extractelement <2 x double> %125, i32 1
  %129 = fsub double %127, %128
  %130 = extractelement <4 x double> %111, i32 2
  %131 = extractelement <2 x double> %86, i32 1
  %132 = fmul double %130, %131
  %133 = fadd double %132, %129
  %134 = fdiv double 1.000000e+00, %133
  %135 = fmul double %66, %134
  %136 = fmul double %75, %134
  %137 = insertelement <2 x double> undef, double %134, i32 0
  %138 = shufflevector <2 x double> %137, <2 x double> undef, <2 x i32> zeroinitializer
  %139 = fmul <2 x double> %86, %138
  %140 = shufflevector <2 x double> %139, <2 x double> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %141 = shufflevector <2 x double> %139, <2 x double> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %142 = extractelement <2 x double> %101, i32 1
  %143 = fmul double %142, %134
  %144 = extractelement <2 x double> %101, i32 0
  %145 = fmul double %144, %134
  %146 = fmul <2 x double> %108, %138
  %147 = shufflevector <2 x double> %146, <2 x double> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %148 = shufflevector <2 x double> %146, <2 x double> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %149 = shufflevector <2 x double> %146, <2 x double> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %150 = insertelement <4 x double> undef, double %134, i32 0
  %151 = shufflevector <4 x double> %150, <4 x double> undef, <4 x i32> zeroinitializer
  %152 = fmul <4 x double> %111, %151
  %153 = shufflevector <4 x double> %54, <4 x double> %35, <4 x i32> <i32 3, i32 6, i32 1, i32 4>
  %154 = fmul <4 x double> %152, %153
  %155 = extractelement <4 x double> %152, i32 0
  %156 = shufflevector <4 x double> %152, <4 x double> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %157 = shufflevector <4 x double> %54, <4 x double> %35, <4 x i32> <i32 2, i32 7, i32 0, i32 5>
  %158 = fmul <4 x double> %156, %157
  %159 = fsub <4 x double> %154, %158
  %160 = shufflevector <2 x double> %59, <2 x double> %40, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %161 = fmul <4 x double> %149, %160
  %162 = fadd <4 x double> %159, %161
  %163 = fsub <4 x double> %159, %161
  %164 = shufflevector <4 x double> %162, <4 x double> %163, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %165 = fptrunc <4 x double> %164 to <4 x float>
  %166 = fmul double %145, %67
  %167 = fmul double %155, %73
  %168 = fsub double %166, %167
  %169 = fmul double %143, %69
  %170 = fsub double %168, %169
  %171 = fptrunc double %170 to float
  %172 = fmul double %155, %70
  %173 = fmul double %145, %68
  %174 = fsub double %172, %173
  %175 = fmul double %143, %72
  %176 = fadd double %175, %174
  %177 = fptrunc double %176 to float
  %178 = insertelement <4 x double> undef, double %136, i32 0
  %179 = insertelement <4 x double> %178, double %26, i32 1
  %180 = shufflevector <4 x double> %179, <4 x double> %17, <4 x i32> <i32 0, i32 1, i32 5, i32 undef>
  %181 = insertelement <4 x double> %180, double %145, i32 3
  %182 = shufflevector <4 x double> %54, <4 x double> %152, <4 x i32> <i32 0, i32 6, i32 5, i32 undef>
  %183 = shufflevector <4 x double> %182, <4 x double> %35, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %184 = fmul <4 x double> %181, %183
  %185 = shufflevector <4 x double> %152, <4 x double> %35, <4 x i32> <i32 2, i32 4, i32 undef, i32 undef>
  %186 = shufflevector <4 x double> %185, <4 x double> %54, <4 x i32> <i32 0, i32 1, i32 7, i32 undef>
  %187 = shufflevector <4 x double> %186, <4 x double> %152, <4 x i32> <i32 0, i32 1, i32 2, i32 5>
  %188 = insertelement <4 x double> undef, double %45, i32 0
  %189 = insertelement <4 x double> %188, double %136, i32 1
  %190 = insertelement <4 x double> %189, double %145, i32 2
  %191 = shufflevector <4 x double> %190, <4 x double> %17, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %192 = fmul <4 x double> %187, %191
  %193 = fsub <4 x double> %184, %192
  %194 = shufflevector <2 x double> %59, <2 x double> %40, <4 x i32> <i32 0, i32 2, i32 undef, i32 undef>
  %195 = shufflevector <4 x double> %194, <4 x double> %60, <4 x i32> <i32 0, i32 1, i32 5, i32 undef>
  %196 = shufflevector <4 x double> %195, <4 x double> %41, <4 x i32> <i32 0, i32 1, i32 2, i32 5>
  %197 = fmul <4 x double> %141, %196
  %198 = fsub <4 x double> %193, %197
  %199 = fadd <4 x double> %193, %197
  %200 = shufflevector <4 x double> %198, <4 x double> %199, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %201 = fptrunc <4 x double> %200 to <4 x float>
  %202 = shufflevector <4 x double> %152, <4 x double> %35, <4 x i32> <i32 3, i32 5, i32 undef, i32 undef>
  %203 = shufflevector <4 x double> %202, <4 x double> %54, <4 x i32> <i32 0, i32 1, i32 7, i32 undef>
  %204 = shufflevector <4 x double> %203, <4 x double> %148, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %205 = insertelement <4 x double> %189, double %143, i32 2
  %206 = shufflevector <4 x double> %205, <4 x double> %16, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %207 = fmul <4 x double> %204, %206
  %208 = insertelement <4 x double> %180, double %143, i32 3
  %209 = shufflevector <4 x double> %54, <4 x double> %152, <4 x i32> <i32 1, i32 7, i32 undef, i32 undef>
  %210 = shufflevector <4 x double> %209, <4 x double> %147, <4 x i32> <i32 0, i32 1, i32 4, i32 undef>
  %211 = shufflevector <4 x double> %210, <4 x double> %35, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %212 = fmul <4 x double> %208, %211
  %213 = fsub <4 x double> %207, %212
  %214 = insertelement <4 x double> undef, double %135, i32 0
  %215 = shufflevector <4 x double> %214, <4 x double> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %216 = shufflevector <4 x double> %215, <4 x double> %140, <4 x i32> <i32 0, i32 1, i32 5, i32 5>
  %217 = shufflevector <4 x double> %194, <4 x double> %54, <4 x i32> <i32 0, i32 1, i32 6, i32 undef>
  %218 = shufflevector <4 x double> %217, <4 x double> %35, <4 x i32> <i32 0, i32 1, i32 2, i32 6>
  %219 = fmul <4 x double> %216, %218
  %220 = fadd <4 x double> %213, %219
  %221 = fsub <4 x double> %213, %219
  %222 = shufflevector <4 x double> %220, <4 x double> %221, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %223 = fptrunc <4 x double> %222 to <4 x float>
  %224 = extractelement <2 x double> %139, i32 0
  %225 = fmul double %224, %76
  %226 = extractelement <2 x double> %146, i32 1
  %227 = fmul double %226, %45
  %228 = fsub double %225, %227
  %229 = fmul double %135, %87
  %230 = fsub double %228, %229
  %231 = fptrunc double %230 to float
  %232 = fmul double %226, %26
  %233 = fmul double %224, %81
  %234 = fsub double %232, %233
  %235 = fmul double %135, %88
  %236 = fadd double %235, %234
  %237 = fptrunc double %236 to float
  %238 = extractelement <4 x float> %165, i32 0
  %239 = fmul float %238, 0.000000e+00
  %240 = extractelement <4 x float> %165, i32 1
  %241 = fmul float %239, %240
  %242 = extractelement <4 x float> %165, i32 2
  %243 = fmul float %241, %242
  %244 = extractelement <4 x float> %165, i32 3
  %245 = fmul float %243, %244
  %246 = fmul float %245, %171
  %247 = fmul float %246, %177
  %248 = extractelement <4 x float> %201, i32 0
  %249 = fmul float %247, %248
  %250 = extractelement <4 x float> %201, i32 1
  %251 = fmul float %249, %250
  %252 = extractelement <4 x float> %201, i32 2
  %253 = fmul float %251, %252
  %254 = extractelement <4 x float> %201, i32 3
  %255 = fmul float %253, %254
  %256 = extractelement <4 x float> %223, i32 0
  %257 = fmul float %255, %256
  %258 = extractelement <4 x float> %223, i32 1
  %259 = fmul float %257, %258
  %260 = extractelement <4 x float> %223, i32 2
  %261 = fmul float %259, %260
  %262 = extractelement <4 x float> %223, i32 3
  %263 = fmul float %261, %262
  %264 = fmul float %263, %231
  %265 = fmul float %264, %237
  %266 = fcmp oeq float %265, 0.000000e+00
  br i1 %266, label %267, label %277

267:                                              ; preds = %2
  %268 = bitcast %class.SkM44* %1 to <4 x float>*
  store <4 x float> %165, <4 x float>* %268, align 4
  %269 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 4
  store float %171, float* %269, align 4
  %270 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 5
  store float %177, float* %270, align 4
  %271 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 6
  %272 = bitcast float* %271 to <4 x float>*
  store <4 x float> %201, <4 x float>* %272, align 4
  %273 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 10
  %274 = bitcast float* %273 to <4 x float>*
  store <4 x float> %223, <4 x float>* %274, align 4
  %275 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 14
  store float %231, float* %275, align 4
  %276 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 15
  store float %237, float* %276, align 4
  br label %277

277:                                              ; preds = %2, %267
  %278 = phi i1 [ true, %267 ], [ false, %2 ]
  ret i1 %278
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5SkM449transposeEv(%class.SkM44* noalias nocapture sret, %class.SkM44* nocapture readonly) local_unnamed_addr #4 align 2 {
  %3 = bitcast %class.SkM44* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast %class.SkM44* %0 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 4
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 1
  %10 = bitcast float* %9 to i32*
  store i32 %8, i32* %10, align 4
  %11 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 8
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %15 = bitcast float* %14 to i32*
  store i32 %13, i32* %15, align 4
  %16 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 12
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 3
  %20 = bitcast float* %19 to i32*
  store i32 %18, i32* %20, align 4
  %21 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 1
  %22 = bitcast float* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %25 = bitcast float* %24 to i32*
  store i32 %23, i32* %25, align 4
  %26 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 5
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 5
  %30 = bitcast float* %29 to i32*
  store i32 %28, i32* %30, align 4
  %31 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 9
  %32 = bitcast float* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %35 = bitcast float* %34 to i32*
  store i32 %33, i32* %35, align 4
  %36 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 13
  %37 = bitcast float* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 7
  %40 = bitcast float* %39 to i32*
  store i32 %38, i32* %40, align 4
  %41 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 2
  %42 = bitcast float* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %45 = bitcast float* %44 to i32*
  store i32 %43, i32* %45, align 4
  %46 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 6
  %47 = bitcast float* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 9
  %50 = bitcast float* %49 to i32*
  store i32 %48, i32* %50, align 4
  %51 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 10
  %52 = bitcast float* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  %55 = bitcast float* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 14
  %57 = bitcast float* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 11
  %60 = bitcast float* %59 to i32*
  store i32 %58, i32* %60, align 4
  %61 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 3
  %62 = bitcast float* %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %65 = bitcast float* %64 to i32*
  store i32 %63, i32* %65, align 4
  %66 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 7
  %67 = bitcast float* %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 13
  %70 = bitcast float* %69 to i32*
  store i32 %68, i32* %70, align 4
  %71 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 11
  %72 = bitcast float* %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  %75 = bitcast float* %74 to i32*
  store i32 %73, i32* %75, align 4
  %76 = getelementptr inbounds %class.SkM44, %class.SkM44* %1, i64 0, i32 0, i64 15
  %77 = bitcast float* %76 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  %80 = bitcast float* %79 to i32*
  store i32 %78, i32* %80, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(64) %class.SkM44* @_ZN5SkM4419setRotateUnitSinCosE4SkV3ff(%class.SkM44* returned, <2 x float>, float, float, float) local_unnamed_addr #5 align 2 {
  %6 = extractelement <2 x float> %1, i32 0
  %7 = extractelement <2 x float> %1, i32 1
  %8 = fsub float 1.000000e+00, %4
  %9 = fmul float %6, %8
  %10 = fmul float %6, %9
  %11 = fadd float %10, %4
  %12 = fmul float %7, %9
  %13 = fmul float %2, %3
  %14 = fsub float %12, %13
  %15 = fmul float %9, %2
  %16 = fmul float %7, %3
  %17 = fadd float %16, %15
  %18 = fadd float %13, %12
  %19 = fmul float %7, %8
  %20 = fmul float %7, %19
  %21 = fadd float %20, %4
  %22 = fmul float %19, %2
  %23 = fmul float %6, %3
  %24 = fsub float %22, %23
  %25 = fsub float %15, %16
  %26 = fadd float %23, %22
  %27 = fmul float %8, %2
  %28 = fmul float %27, %2
  %29 = fadd float %28, %4
  %30 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 0
  store float %11, float* %30, align 4
  %31 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 1
  store float %18, float* %31, align 4
  %32 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  store float %25, float* %32, align 4
  %33 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 3
  store float 0.000000e+00, float* %33, align 4
  %34 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  store float %14, float* %34, align 4
  %35 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 5
  store float %21, float* %35, align 4
  %36 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  store float %26, float* %36, align 4
  %37 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %37, align 4
  %38 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  store float %17, float* %38, align 4
  %39 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 9
  store float %24, float* %39, align 4
  %40 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  store float %29, float* %40, align 4
  %41 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 11
  %42 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  %43 = bitcast float* %41 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %43, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %42, align 4
  ret %class.SkM44* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(64) %class.SkM44* @_ZN5SkM449setRotateE4SkV3f(%class.SkM44* returned, <2 x float>, float, float) local_unnamed_addr #5 align 2 {
  %5 = extractelement <2 x float> %1, i32 0
  %6 = fmul float %5, %5
  %7 = extractelement <2 x float> %1, i32 1
  %8 = fmul float %7, %7
  %9 = fadd float %6, %8
  %10 = fmul float %2, %2
  %11 = fadd float %10, %9
  %12 = tail call float @sqrtf(float %11) #8
  %13 = fcmp ogt float %12, 0.000000e+00
  br i1 %13, label %14, label %61

14:                                               ; preds = %4
  %15 = bitcast float %12 to i32
  %16 = and i32 %15, 2139095040
  %17 = icmp eq i32 %16, 2139095040
  br i1 %17, label %61, label %18

18:                                               ; preds = %14
  %19 = fdiv float 1.000000e+00, %12
  %20 = fmul float %5, %19
  %21 = fmul float %7, %19
  %22 = fmul float %19, %2
  %23 = tail call float @sinf(float %3) #8
  %24 = tail call float @cosf(float %3) #8
  %25 = fsub float 1.000000e+00, %24
  %26 = fmul float %20, %25
  %27 = fmul float %20, %26
  %28 = fadd float %24, %27
  %29 = fmul float %21, %26
  %30 = fmul float %22, %23
  %31 = fsub float %29, %30
  %32 = fmul float %22, %26
  %33 = fmul float %21, %23
  %34 = fadd float %33, %32
  %35 = fadd float %30, %29
  %36 = fmul float %21, %25
  %37 = fmul float %21, %36
  %38 = fadd float %24, %37
  %39 = fmul float %22, %36
  %40 = fmul float %20, %23
  %41 = fsub float %39, %40
  %42 = fsub float %32, %33
  %43 = fadd float %40, %39
  %44 = fmul float %22, %25
  %45 = fmul float %22, %44
  %46 = fadd float %24, %45
  %47 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 0
  store float %28, float* %47, align 4
  %48 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 1
  store float %35, float* %48, align 4
  %49 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  store float %42, float* %49, align 4
  %50 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 3
  store float 0.000000e+00, float* %50, align 4
  %51 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  store float %31, float* %51, align 4
  %52 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 5
  store float %38, float* %52, align 4
  %53 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  store float %43, float* %53, align 4
  %54 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %54, align 4
  %55 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  store float %34, float* %55, align 4
  %56 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 9
  store float %41, float* %56, align 4
  %57 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  store float %46, float* %57, align 4
  %58 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 11
  %59 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  %60 = bitcast float* %58 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %60, i8 0, i64 16, i1 false) #8
  store float 1.000000e+00, float* %59, align 4
  br label %63

61:                                               ; preds = %14, %4
  %62 = bitcast %class.SkM44* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %62, i8* align 4 bitcast (%class.SkM44* @.ref.tmp.3 to i8*), i64 64, i1 false) #8
  br label %63

63:                                               ; preds = %61, %18
  ret %class.SkM44* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5SkM444dumpEv(%class.SkM44* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 0
  %3 = load float, float* %2, align 4
  %4 = fpext float %3 to double
  %5 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %6 = load float, float* %5, align 4
  %7 = fpext float %6 to double
  %8 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %9 = load float, float* %8, align 4
  %10 = fpext float %9 to double
  %11 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %12 = load float, float* %11, align 4
  %13 = fpext float %12 to double
  %14 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 1
  %15 = load float, float* %14, align 4
  %16 = fpext float %15 to double
  %17 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 5
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 9
  %21 = load float, float* %20, align 4
  %22 = fpext float %21 to double
  %23 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 13
  %24 = load float, float* %23, align 4
  %25 = fpext float %24 to double
  %26 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %27 = load float, float* %26, align 4
  %28 = fpext float %27 to double
  %29 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %30 = load float, float* %29, align 4
  %31 = fpext float %30 to double
  %32 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  %33 = load float, float* %32, align 4
  %34 = fpext float %33 to double
  %35 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  %36 = load float, float* %35, align 4
  %37 = fpext float %36 to double
  %38 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 3
  %39 = load float, float* %38, align 4
  %40 = fpext float %39 to double
  %41 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 7
  %42 = load float, float* %41, align 4
  %43 = fpext float %42 to double
  %44 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 11
  %45 = load float, float* %44, align 4
  %46 = fpext float %45 to double
  %47 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  %48 = load float, float* %47, align 4
  %49 = fpext float %48 to double
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i32 368, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0), double %4, double %7, double %10, double %13, double %16, double %19, double %22, double %25, double %28, double %31, double %34, double %37, double %40, double %43, double %46, double %49) #8
  ret void
}

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5SkM4410RectToRectERK6SkRectS2_(%class.SkM44* noalias sret, %struct.SkRect* nocapture readonly dereferenceable(16), %struct.SkRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %7 = load float, float* %6, align 4
  %8 = fcmp olt float %5, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %13 = load float, float* %12, align 4
  %14 = fcmp uge float %11, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %3, %9
  %16 = bitcast %class.SkM44* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %16, i8* align 4 bitcast ([16 x float]* @constinit to i8*), i64 64, i1 false) #8
  br label %55

17:                                               ; preds = %9
  %18 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 0
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 2
  %21 = load float, float* %20, align 4
  %22 = fcmp olt float %19, %21
  br i1 %22, label %23, label %29

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 1
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 3
  %27 = load float, float* %26, align 4
  %28 = fcmp uge float %25, %27
  br i1 %28, label %29, label %32

29:                                               ; preds = %17, %23
  %30 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  %31 = bitcast %class.SkM44* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %31, i8 0, i64 60, i1 false)
  store float 1.000000e+00, float* %30, align 4, !alias.scope !2
  br label %55

32:                                               ; preds = %23
  %33 = fsub float %21, %19
  %34 = fsub float %7, %5
  %35 = fdiv float %33, %34
  %36 = fsub float %27, %25
  %37 = fsub float %13, %11
  %38 = fdiv float %36, %37
  %39 = fmul float %5, %35
  %40 = fsub float %19, %39
  %41 = fmul float %11, %38
  %42 = fsub float %25, %41
  %43 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 0
  store float %35, float* %43, align 4
  %44 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 1
  %45 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 5
  %46 = bitcast float* %44 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %46, i8 0, i64 16, i1 false)
  store float %38, float* %45, align 4
  %47 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %48 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  %49 = bitcast float* %47 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %49, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %48, align 4
  %50 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 11
  store float 0.000000e+00, float* %50, align 4
  %51 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  store float %40, float* %51, align 4
  %52 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 13
  store float %42, float* %52, align 4
  %53 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  store float 0.000000e+00, float* %53, align 4
  %54 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  store float 1.000000e+00, float* %54, align 4
  br label %55

55:                                               ; preds = %32, %29, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5SkM446LookAtERK4SkV3S2_S2_(%class.SkM44* noalias nocapture sret, %struct.SkV3* nocapture readonly dereferenceable(12), %struct.SkV3* nocapture readonly dereferenceable(12), %struct.SkV3* nocapture readonly dereferenceable(12)) local_unnamed_addr #5 align 2 {
  %5 = alloca %class.SkM44, align 8
  %6 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %2, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %1, i64 0, i32 0
  %9 = load float, float* %8, align 4
  %10 = fsub float %7, %9
  %11 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %2, i64 0, i32 1
  %12 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %1, i64 0, i32 1
  %13 = bitcast float* %11 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %1, i64 0, i32 2
  %16 = bitcast float* %12 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = fsub <2 x float> %14, %17
  %19 = fmul float %10, %10
  %20 = extractelement <2 x float> %18, i32 0
  %21 = fmul float %20, %20
  %22 = fadd float %19, %21
  %23 = extractelement <2 x float> %18, i32 1
  %24 = fmul float %23, %23
  %25 = fadd float %22, %24
  %26 = tail call float @sqrtf(float %25) #8
  %27 = fdiv float 1.000000e+00, %26
  %28 = fmul float %10, %27
  %29 = insertelement <2 x float> undef, float %27, i32 0
  %30 = shufflevector <2 x float> %29, <2 x float> undef, <2 x i32> zeroinitializer
  %31 = fmul <2 x float> %18, %30
  %32 = bitcast %struct.SkV3* %3 to <2 x float>*
  %33 = load <2 x float>, <2 x float>* %32, align 4
  %34 = getelementptr inbounds %struct.SkV3, %struct.SkV3* %3, i64 0, i32 2
  %35 = load float, float* %34, align 4
  %36 = extractelement <2 x float> %33, i32 0
  %37 = fmul float %36, %36
  %38 = extractelement <2 x float> %33, i32 1
  %39 = fmul float %38, %38
  %40 = fadd float %37, %39
  %41 = fmul float %35, %35
  %42 = fadd float %41, %40
  %43 = tail call float @sqrtf(float %42) #8
  %44 = fdiv float 1.000000e+00, %43
  %45 = fmul float %38, %44
  %46 = insertelement <2 x float> undef, float %35, i32 0
  %47 = shufflevector <2 x float> %46, <2 x float> %33, <2 x i32> <i32 0, i32 2>
  %48 = insertelement <2 x float> undef, float %44, i32 0
  %49 = shufflevector <2 x float> %48, <2 x float> undef, <2 x i32> zeroinitializer
  %50 = fmul <2 x float> %47, %49
  %51 = fmul <2 x float> %31, %50
  %52 = extractelement <2 x float> %31, i32 1
  %53 = insertelement <2 x float> undef, float %52, i32 0
  %54 = insertelement <2 x float> %53, float %28, i32 1
  %55 = insertelement <2 x float> undef, float %45, i32 0
  %56 = shufflevector <2 x float> %55, <2 x float> %50, <2 x i32> <i32 0, i32 2>
  %57 = fmul <2 x float> %54, %56
  %58 = fsub <2 x float> %51, %57
  %59 = fmul float %28, %45
  %60 = extractelement <2 x float> %31, i32 0
  %61 = extractelement <2 x float> %50, i32 1
  %62 = fmul float %60, %61
  %63 = fsub float %59, %62
  %64 = extractelement <2 x float> %58, i32 0
  %65 = fmul float %64, %64
  %66 = extractelement <2 x float> %58, i32 1
  %67 = fmul float %66, %66
  %68 = fadd float %65, %67
  %69 = fmul float %63, %63
  %70 = fadd float %69, %68
  %71 = tail call float @sqrtf(float %70) #8
  %72 = fdiv float 1.000000e+00, %71
  %73 = insertelement <2 x float> undef, float %72, i32 0
  %74 = shufflevector <2 x float> %73, <2 x float> undef, <2 x i32> zeroinitializer
  %75 = fmul <2 x float> %74, %58
  %76 = extractelement <2 x float> %75, i32 0
  %77 = extractelement <2 x float> %75, i32 1
  %78 = fmul float %72, %63
  %79 = bitcast %class.SkM44* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %79, i8 -1, i64 64, i1 false)
  %80 = bitcast %class.SkM44* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %80) #8
  %81 = insertelement <2 x float> <float undef, float 0.000000e+00>, float %78, i32 0
  %82 = insertelement <2 x float> undef, float %77, i32 0
  %83 = insertelement <2 x float> %82, float %78, i32 1
  %84 = fmul <2 x float> %54, %83
  %85 = insertelement <2 x float> undef, float %78, i32 0
  %86 = shufflevector <2 x float> %85, <2 x float> %75, <2 x i32> <i32 0, i32 2>
  %87 = fmul <2 x float> %31, %86
  %88 = fsub <2 x float> %84, %87
  %89 = fmul float %60, %76
  %90 = fmul float %28, %77
  %91 = fsub float %89, %90
  %92 = insertelement <2 x float> <float undef, float 0.000000e+00>, float %91, i32 0
  %93 = insertelement <2 x float> undef, float %28, i32 0
  %94 = shufflevector <2 x float> %93, <2 x float> %31, <2 x i32> <i32 0, i32 2>
  %95 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %94
  %96 = fsub float -0.000000e+00, %52
  %97 = insertelement <2 x float> <float undef, float 0.000000e+00>, float %96, i32 0
  %98 = bitcast %struct.SkV3* %1 to i64*
  %99 = load i64, i64* %98, align 4
  %100 = load float, float* %15, align 4
  %101 = insertelement <2 x float> <float undef, float 1.000000e+00>, float %100, i32 0
  %102 = bitcast %class.SkM44* %5 to <2 x float>*
  store <2 x float> %75, <2 x float>* %102, align 8
  %103 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 2
  %104 = bitcast float* %103 to <2 x float>*
  store <2 x float> %81, <2 x float>* %104, align 8
  %105 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 4
  %106 = bitcast float* %105 to <2 x float>*
  store <2 x float> %88, <2 x float>* %106, align 8
  %107 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 6
  %108 = bitcast float* %107 to <2 x float>*
  store <2 x float> %92, <2 x float>* %108, align 8
  %109 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 8
  %110 = bitcast float* %109 to <2 x float>*
  store <2 x float> %95, <2 x float>* %110, align 8
  %111 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 10
  %112 = bitcast float* %111 to <2 x float>*
  store <2 x float> %97, <2 x float>* %112, align 8
  %113 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 12
  %114 = bitcast float* %113 to i64*
  store i64 %99, i64* %114, align 8
  %115 = getelementptr inbounds %class.SkM44, %class.SkM44* %5, i64 0, i32 0, i64 14
  %116 = bitcast float* %115 to <2 x float>*
  store <2 x float> %101, <2 x float>* %116, align 8
  %117 = call zeroext i1 @_ZNK5SkM446invertEPS_(%class.SkM44* nonnull %5, %class.SkM44* %0)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %80) #8
  br i1 %117, label %119, label %118

118:                                              ; preds = %4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %79, i8* align 4 bitcast (%class.SkM44* @.ref.tmp.3 to i8*), i64 64, i1 false) #8
  br label %119

119:                                              ; preds = %4, %118
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5SkM4411PerspectiveEfff(%class.SkM44* noalias nocapture sret, float, float, float) local_unnamed_addr #4 align 2 {
  %5 = fsub float %2, %1
  %6 = fdiv float 1.000000e+00, %5
  %7 = fmul float %3, 5.000000e-01
  %8 = tail call float @cosf(float %7) #8
  %9 = tail call float @sinf(float %7) #8
  %10 = fdiv float %8, %9
  %11 = bitcast %class.SkM44* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %11, i8* align 4 bitcast ([16 x float]* @constinit to i8*), i64 64, i1 false) #8
  %12 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 0
  store float %10, float* %12, align 4
  %13 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 5
  store float %10, float* %13, align 4
  %14 = fadd float %1, %2
  %15 = fmul float %14, %6
  %16 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  store float %15, float* %16, align 4
  %17 = fmul float %2, 2.000000e+00
  %18 = fmul float %17, %1
  %19 = fmul float %18, %6
  %20 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  store float %19, float* %20, align 4
  %21 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 11
  store float -1.000000e+00, float* %21, align 4
  ret void
}

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare float @sinf(float) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #7

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN5SkM445ScaleEfff: argument 0"}
!4 = distinct !{!4, !"_ZN5SkM445ScaleEfff"}
