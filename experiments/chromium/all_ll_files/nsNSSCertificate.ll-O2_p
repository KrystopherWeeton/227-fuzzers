; ModuleID = '../../chrome/third_party/mozilla_security_manager/nsNSSCertificate.cpp'
source_filename = "../../chrome/third_party/mozilla_security_manager/nsNSSCertificate.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.1 }
%union.anon.1 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%struct.CERTCertificateStr = type { %struct.PLArenaPool*, i8*, i8*, %struct.CERTSignedDataStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECAlgorithmIDStr, %struct.CERTNameStr, %struct.CERTValidityStr, %struct.CERTNameStr, %struct.CERTSubjectPublicKeyInfoStr, %struct.SECItemStr, %struct.SECItemStr, %struct.CERTCertExtensionStr**, i8*, %struct.NSSTrustDomainStr*, %struct.SECItemStr, i32, i32, i32, i32, i32, i32, i32, %struct.CERTOKDomainNameStr*, i32, i32, i8*, i8*, %struct.NSSCertificateStr*, %struct.CERTCertTrustStr*, i32, %struct.CERTSubjectListStr*, %struct.CERTAuthKeyIDStr*, i32, %union.anon.0, i32, %struct.PK11SlotInfoStr*, i64, i32, %struct.CERTCertDistrustStr* }
%struct.PLArenaPool = type { %struct.PLArena, %struct.PLArena*, i32, i64 }
%struct.PLArena = type { %struct.PLArena*, i64, i64, i64 }
%struct.CERTSignedDataStr = type { %struct.SECItemStr, %struct.SECAlgorithmIDStr, %struct.SECItemStr }
%struct.SECAlgorithmIDStr = type { %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTValidityStr = type { %struct.PLArenaPool*, %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTNameStr = type { %struct.PLArenaPool*, %struct.CERTRDNStr** }
%struct.CERTRDNStr = type { %struct.CERTAVAStr** }
%struct.CERTAVAStr = type { %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTSubjectPublicKeyInfoStr = type { %struct.PLArenaPool*, %struct.SECAlgorithmIDStr, %struct.SECItemStr }
%struct.CERTCertExtensionStr = type { %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr }
%struct.NSSTrustDomainStr = type opaque
%struct.SECItemStr = type { i32, i8*, i32 }
%struct.CERTOKDomainNameStr = type { %struct.CERTOKDomainNameStr*, i8* }
%struct.NSSCertificateStr = type opaque
%struct.CERTCertTrustStr = type { i32, i32, i32 }
%struct.CERTSubjectListStr = type { %struct.PLArenaPool*, i32, i8*, %struct.CERTSubjectNodeStr*, %struct.CERTSubjectNodeStr*, i8* }
%struct.CERTSubjectNodeStr = type { %struct.CERTSubjectNodeStr*, %struct.CERTSubjectNodeStr*, %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTAuthKeyIDStr = type { %struct.SECItemStr, %struct.CERTGeneralNameStr*, %struct.SECItemStr, %struct.SECItemStr** }
%struct.CERTGeneralNameStr = type { i32, %union.anon, %struct.SECItemStr, %struct.PRCListStr }
%union.anon = type { %struct.OtherNameStr }
%struct.OtherNameStr = type { %struct.SECItemStr, %struct.SECItemStr }
%struct.PRCListStr = type { %struct.PRCListStr*, %struct.PRCListStr* }
%union.anon.0 = type { i8* }
%struct.PK11SlotInfoStr = type opaque
%struct.CERTCertDistrustStr = type { %struct.SECItemStr, %struct.SECItemStr }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.2 }
%struct.anon.2 = type { i8 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24mozilla_security_manager12GetCertTitleEP18CERTCertificateStr(%"class.std::__1::basic_string"* noalias sret, %struct.CERTCertificateStr*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %5 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #5
  %6 = getelementptr inbounds %struct.CERTCertificateStr, %struct.CERTCertificateStr* %1, i64 0, i32 32
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %27, label %9

9:                                                ; preds = %2
  %10 = load i8, i8* %7, align 1
  %11 = tail call i1 @llvm.is.constant.i8(i8 %10) #5
  br i1 %11, label %12, label %25

12:                                               ; preds = %9
  %13 = tail call i64 @strlen(i8* nonnull %7) #5
  %14 = icmp ult i64 %13, 23
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = trunc i64 %13 to i8
  store i8 %18, i8* %17, align 1
  %19 = icmp eq i64 %13, 0
  br i1 %19, label %21, label %20

20:                                               ; preds = %15
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %5, i8* nonnull align 1 %7, i64 %13, i1 false) #5
  br label %21

21:                                               ; preds = %20, %15
  %22 = getelementptr inbounds i8, i8* %5, i64 %13
  store i8 0, i8* %22, align 1
  br label %115

23:                                               ; preds = %12
  %24 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* nonnull %7, i64 %13) #5
  br label %115

25:                                               ; preds = %9
  %26 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"* %0, i8* nonnull %7) #5
  br label %115

27:                                               ; preds = %2
  %28 = getelementptr inbounds %struct.CERTCertificateStr, %struct.CERTCertificateStr* %1, i64 0, i32 14
  %29 = tail call i8* @CERT_GetCommonName(%struct.CERTNameStr* %28) #5
  %30 = icmp eq i8* %29, null
  br i1 %30, label %57, label %31

31:                                               ; preds = %27
  %32 = load i8, i8* %29, align 1
  %33 = tail call i1 @llvm.is.constant.i8(i8 %32) #5
  br i1 %33, label %34, label %54

34:                                               ; preds = %31
  %35 = tail call i64 @strlen(i8* nonnull %29) #5
  %36 = icmp ult i64 %35, 23
  br i1 %36, label %37, label %52

37:                                               ; preds = %34
  %38 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %39 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %38, i64 0, i32 1, i32 0
  %40 = load i8, i8* %39, align 1
  %41 = icmp slt i8 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %37
  store i64 %35, i64* %4, align 8
  %43 = load i8*, i8** %3, align 8
  br label %46

44:                                               ; preds = %37
  %45 = trunc i64 %35 to i8
  store i8 %45, i8* %39, align 1
  br label %46

46:                                               ; preds = %44, %42
  %47 = phi i8* [ %43, %42 ], [ %5, %44 ]
  %48 = icmp eq i64 %35, 0
  br i1 %48, label %50, label %49

49:                                               ; preds = %46
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %47, i8* nonnull align 1 %29, i64 %35, i1 false) #5
  br label %50

50:                                               ; preds = %49, %46
  %51 = getelementptr inbounds i8, i8* %47, i64 %35
  store i8 0, i8* %51, align 1
  br label %56

52:                                               ; preds = %34
  %53 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* nonnull %29, i64 %35) #5
  br label %56

54:                                               ; preds = %31
  %55 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"* %0, i8* nonnull %29) #5
  br label %56

56:                                               ; preds = %50, %52, %54
  tail call void @PORT_Free(i8* nonnull %29) #5
  br label %115

57:                                               ; preds = %27
  %58 = getelementptr inbounds %struct.CERTCertificateStr, %struct.CERTCertificateStr* %1, i64 0, i32 1
  %59 = load i8*, i8** %58, align 8
  %60 = icmp eq i8* %59, null
  br i1 %60, label %86, label %61

61:                                               ; preds = %57
  %62 = load i8, i8* %59, align 1
  %63 = tail call i1 @llvm.is.constant.i8(i8 %62) #5
  br i1 %63, label %64, label %84

64:                                               ; preds = %61
  %65 = tail call i64 @strlen(i8* nonnull %59) #5
  %66 = icmp ult i64 %65, 23
  br i1 %66, label %67, label %82

67:                                               ; preds = %64
  %68 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %69 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %68, i64 0, i32 1, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp slt i8 %70, 0
  br i1 %71, label %72, label %74

72:                                               ; preds = %67
  store i64 %65, i64* %4, align 8
  %73 = load i8*, i8** %3, align 8
  br label %76

74:                                               ; preds = %67
  %75 = trunc i64 %65 to i8
  store i8 %75, i8* %69, align 1
  br label %76

76:                                               ; preds = %74, %72
  %77 = phi i8* [ %73, %72 ], [ %5, %74 ]
  %78 = icmp eq i64 %65, 0
  br i1 %78, label %80, label %79

79:                                               ; preds = %76
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %77, i8* nonnull align 1 %59, i64 %65, i1 false) #5
  br label %80

80:                                               ; preds = %79, %76
  %81 = getelementptr inbounds i8, i8* %77, i64 %65
  store i8 0, i8* %81, align 1
  br label %115

82:                                               ; preds = %64
  %83 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* nonnull %59, i64 %65) #5
  br label %115

84:                                               ; preds = %61
  %85 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"* %0, i8* nonnull %59) #5
  br label %115

86:                                               ; preds = %57
  %87 = getelementptr inbounds %struct.CERTCertificateStr, %struct.CERTCertificateStr* %1, i64 0, i32 19
  %88 = load i8*, i8** %87, align 8
  %89 = icmp eq i8* %88, null
  br i1 %89, label %115, label %90

90:                                               ; preds = %86
  %91 = load i8, i8* %88, align 1
  %92 = tail call i1 @llvm.is.constant.i8(i8 %91) #5
  br i1 %92, label %93, label %113

93:                                               ; preds = %90
  %94 = tail call i64 @strlen(i8* nonnull %88) #5
  %95 = icmp ult i64 %94, 23
  br i1 %95, label %96, label %111

96:                                               ; preds = %93
  %97 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %98 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %97, i64 0, i32 1, i32 0
  %99 = load i8, i8* %98, align 1
  %100 = icmp slt i8 %99, 0
  br i1 %100, label %101, label %103

101:                                              ; preds = %96
  store i64 %94, i64* %4, align 8
  %102 = load i8*, i8** %3, align 8
  br label %105

103:                                              ; preds = %96
  %104 = trunc i64 %94 to i8
  store i8 %104, i8* %98, align 1
  br label %105

105:                                              ; preds = %103, %101
  %106 = phi i8* [ %102, %101 ], [ %5, %103 ]
  %107 = icmp eq i64 %94, 0
  br i1 %107, label %109, label %108

108:                                              ; preds = %105
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %106, i8* nonnull align 1 %88, i64 %94, i1 false) #5
  br label %109

109:                                              ; preds = %108, %105
  %110 = getelementptr inbounds i8, i8* %106, i64 %94
  store i8 0, i8* %110, align 1
  br label %115

111:                                              ; preds = %93
  %112 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* nonnull %88, i64 %94) #5
  br label %115

113:                                              ; preds = %90
  %114 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"* %0, i8* nonnull %88) #5
  br label %115

115:                                              ; preds = %113, %111, %109, %84, %82, %80, %25, %23, %21, %86, %56
  ret void
}

declare i8* @CERT_GetCommonName(%struct.CERTNameStr*) local_unnamed_addr #1

declare void @PORT_Free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i8(i8) #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
