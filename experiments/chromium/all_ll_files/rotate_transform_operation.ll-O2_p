; ModuleID = '../../third_party/blink/renderer/platform/transforms/rotate_transform_operation.cc'
source_filename = "../../third_party/blink/renderer/platform/transforms/rotate_transform_operation.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::FloatPoint3D" = type { float, float, float }
%"class.blink::RotateAroundOriginTransformOperation" = type { %"class.blink::RotateTransformOperation.base", double, double }
%"class.blink::RotateTransformOperation.base" = type <{ %"class.blink::TransformOperation.base", [4 x i8], %"struct.blink::Rotation", i32 }>
%"class.blink::TransformOperation.base" = type <{ i32 (...)**, %"class.WTF::RefCounted" }>
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"struct.blink::Rotation" = type { %"class.blink::FloatPoint3D", double }
%"class.blink::RotateTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], %"struct.blink::Rotation", i32, [4 x i8] }>
%"class.blink::TransformOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted", [4 x i8] }>
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%"class.blink::FloatSize" = type { float, float }

$_ZNK5blink24RotateTransformOperation5ApplyERNS_20TransformationMatrixERKNS_9FloatSizeE = comdat any

$_ZN5blink18TransformOperationD2Ev = comdat any

$_ZN5blink24RotateTransformOperationD0Ev = comdat any

$_ZN5blink24RotateTransformOperation4ZoomEd = comdat any

$_ZNK5blink24RotateTransformOperation7GetTypeEv = comdat any

$_ZNK5blink24RotateTransformOperation13PrimitiveTypeEv = comdat any

$_ZNK5blink18TransformOperation22PreservesAxisAlignmentEv = comdat any

$_ZNK5blink18TransformOperation23IsIdentityOrTranslationEv = comdat any

$_ZNK5blink24RotateTransformOperation24HasNonTrivial3DComponentEv = comdat any

$_ZNK5blink18TransformOperation19BoxSizeDependenciesEv = comdat any

$_ZN5blink36RotateAroundOriginTransformOperationD0Ev = comdat any

$_ZNK5blink36RotateAroundOriginTransformOperation13PrimitiveTypeEv = comdat any

@__const._ZN5blink24RotateTransformOperation10AccumulateERKNS_18TransformOperationE.new_rotation = private unnamed_addr constant { %"class.blink::FloatPoint3D", [4 x i8], double } { %"class.blink::FloatPoint3D" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, [4 x i8] c"\AA\AA\AA\AA", double 0xFFFFFFFFFFFFFFFF }, align 8
@_ZTVN5blink36RotateAroundOriginTransformOperationE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::TransformOperation"*)* @_ZN5blink18TransformOperationD2Ev to i8*), i8* bitcast (void (%"class.blink::RotateAroundOriginTransformOperation"*)* @_ZN5blink36RotateAroundOriginTransformOperationD0Ev to i8*), i8* bitcast (i1 (%"class.blink::RotateAroundOriginTransformOperation"*, %"class.blink::TransformOperation"*)* @_ZNK5blink36RotateAroundOriginTransformOperationeqERKNS_18TransformOperationE to i8*), i8* bitcast (void (%"class.blink::RotateAroundOriginTransformOperation"*, %"class.blink::TransformationMatrix"*, %"class.blink::FloatSize"*)* @_ZNK5blink36RotateAroundOriginTransformOperation5ApplyERNS_20TransformationMatrixERKNS_9FloatSizeE to i8*), i8* bitcast (%"class.blink::TransformOperation"* (%"class.blink::RotateTransformOperation"*, %"class.blink::TransformOperation"*)* @_ZN5blink24RotateTransformOperation10AccumulateERKNS_18TransformOperationE to i8*), i8* bitcast (%"class.blink::TransformOperation"* (%"class.blink::RotateAroundOriginTransformOperation"*, %"class.blink::TransformOperation"*, double, i1)* @_ZN5blink36RotateAroundOriginTransformOperation5BlendEPKNS_18TransformOperationEdb to i8*), i8* bitcast (%"class.blink::TransformOperation"* (%"class.blink::RotateAroundOriginTransformOperation"*, double)* @_ZN5blink36RotateAroundOriginTransformOperation4ZoomEd to i8*), i8* bitcast (i32 (%"class.blink::RotateTransformOperation"*)* @_ZNK5blink24RotateTransformOperation7GetTypeEv to i8*), i8* bitcast (i32 (%"class.blink::RotateAroundOriginTransformOperation"*)* @_ZNK5blink36RotateAroundOriginTransformOperation13PrimitiveTypeEv to i8*), i8* bitcast (i1 (%"class.blink::TransformOperation"*)* @_ZNK5blink18TransformOperation22PreservesAxisAlignmentEv to i8*), i8* bitcast (i1 (%"class.blink::TransformOperation"*)* @_ZNK5blink18TransformOperation23IsIdentityOrTranslationEv to i8*), i8* bitcast (i1 (%"class.blink::RotateTransformOperation"*)* @_ZNK5blink24RotateTransformOperation24HasNonTrivial3DComponentEv to i8*), i8* bitcast (i32 (%"class.blink::TransformOperation"*)* @_ZNK5blink18TransformOperation19BoxSizeDependenciesEv to i8*)] }, align 8
@_ZTVN5blink24RotateTransformOperationE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::TransformOperation"*)* @_ZN5blink18TransformOperationD2Ev to i8*), i8* bitcast (void (%"class.blink::RotateTransformOperation"*)* @_ZN5blink24RotateTransformOperationD0Ev to i8*), i8* bitcast (i1 (%"class.blink::RotateTransformOperation"*, %"class.blink::TransformOperation"*)* @_ZNK5blink24RotateTransformOperationeqERKNS_18TransformOperationE to i8*), i8* bitcast (void (%"class.blink::RotateTransformOperation"*, %"class.blink::TransformationMatrix"*, %"class.blink::FloatSize"*)* @_ZNK5blink24RotateTransformOperation5ApplyERNS_20TransformationMatrixERKNS_9FloatSizeE to i8*), i8* bitcast (%"class.blink::TransformOperation"* (%"class.blink::RotateTransformOperation"*, %"class.blink::TransformOperation"*)* @_ZN5blink24RotateTransformOperation10AccumulateERKNS_18TransformOperationE to i8*), i8* bitcast (%"class.blink::TransformOperation"* (%"class.blink::RotateTransformOperation"*, %"class.blink::TransformOperation"*, double, i1)* @_ZN5blink24RotateTransformOperation5BlendEPKNS_18TransformOperationEdb to i8*), i8* bitcast (%"class.blink::TransformOperation"* (%"class.blink::RotateTransformOperation"*, double)* @_ZN5blink24RotateTransformOperation4ZoomEd to i8*), i8* bitcast (i32 (%"class.blink::RotateTransformOperation"*)* @_ZNK5blink24RotateTransformOperation7GetTypeEv to i8*), i8* bitcast (i32 (%"class.blink::RotateTransformOperation"*)* @_ZNK5blink24RotateTransformOperation13PrimitiveTypeEv to i8*), i8* bitcast (i1 (%"class.blink::TransformOperation"*)* @_ZNK5blink18TransformOperation22PreservesAxisAlignmentEv to i8*), i8* bitcast (i1 (%"class.blink::TransformOperation"*)* @_ZNK5blink18TransformOperation23IsIdentityOrTranslationEv to i8*), i8* bitcast (i1 (%"class.blink::RotateTransformOperation"*)* @_ZNK5blink24RotateTransformOperation24HasNonTrivial3DComponentEv to i8*), i8* bitcast (i32 (%"class.blink::TransformOperation"*)* @_ZNK5blink18TransformOperation19BoxSizeDependenciesEv to i8*)] }, align 8

@_ZN5blink36RotateAroundOriginTransformOperationC1Eddd = hidden unnamed_addr alias void (%"class.blink::RotateAroundOriginTransformOperation"*, double, double, double), void (%"class.blink::RotateAroundOriginTransformOperation"*, double, double, double)* @_ZN5blink36RotateAroundOriginTransformOperationC2Eddd

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink24RotateTransformOperationeqERKNS_18TransformOperationE(%"class.blink::RotateTransformOperation"*, %"class.blink::TransformOperation"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::RotateTransformOperation"* %0 to %"class.blink::TransformOperation"*
  %4 = bitcast %"class.blink::TransformOperation"* %1 to i32 (%"class.blink::TransformOperation"*)***
  %5 = load i32 (%"class.blink::TransformOperation"*)**, i32 (%"class.blink::TransformOperation"*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %5, i64 7
  %7 = load i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %6, align 8
  %8 = tail call i32 %7(%"class.blink::TransformOperation"* %1) #7
  %9 = bitcast %"class.blink::RotateTransformOperation"* %0 to i32 (%"class.blink::TransformOperation"*)***
  %10 = load i32 (%"class.blink::TransformOperation"*)**, i32 (%"class.blink::TransformOperation"*)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %10, i64 7
  %12 = load i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %11, align 8
  %13 = tail call i32 %12(%"class.blink::TransformOperation"* %3) #7
  %14 = icmp eq i32 %8, %13
  br i1 %14, label %15, label %43

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 1
  %17 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 0, i32 0
  %18 = load float, float* %17, align 4
  %19 = bitcast %"class.blink::TransformOperation"* %16 to float*
  %20 = load float, float* %19, align 4
  %21 = fcmp oeq float %18, %20
  br i1 %21, label %22, label %43

22:                                               ; preds = %15
  %23 = bitcast %"class.blink::TransformOperation"* %16 to %"class.blink::FloatPoint3D"*
  %24 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 0, i32 1
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %23, i64 0, i32 1
  %27 = load float, float* %26, align 4
  %28 = fcmp oeq float %25, %27
  br i1 %28, label %29, label %43

29:                                               ; preds = %22
  %30 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 0, i32 2
  %31 = load float, float* %30, align 4
  %32 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 1, i32 1
  %33 = bitcast %"class.WTF::RefCounted"* %32 to float*
  %34 = load float, float* %33, align 4
  %35 = fcmp oeq float %31, %34
  br i1 %35, label %36, label %43

36:                                               ; preds = %29
  %37 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 1
  %38 = load double, double* %37, align 8
  %39 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 2
  %40 = bitcast %"class.blink::TransformOperation"* %39 to double*
  %41 = load double, double* %40, align 8
  %42 = fcmp oeq double %38, %41
  br label %43

43:                                               ; preds = %15, %22, %29, %36, %2
  %44 = phi i1 [ false, %2 ], [ false, %29 ], [ %42, %36 ], [ false, %22 ], [ false, %15 ]
  ret i1 %44
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink24RotateTransformOperation13GetCommonAxisEPKS0_S2_RNS_12FloatPoint3DERdS5_(%"class.blink::RotateTransformOperation"* readonly, %"class.blink::RotateTransformOperation"* readonly, %"class.blink::FloatPoint3D"* dereferenceable(12), double* dereferenceable(8), double* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %6 = alloca %"struct.blink::Rotation", align 8
  %7 = alloca %"struct.blink::Rotation", align 8
  %8 = bitcast %"struct.blink::Rotation"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #7
  %9 = icmp eq %"class.blink::RotateTransformOperation"* %0, null
  br i1 %9, label %30, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2
  %12 = bitcast %"struct.blink::Rotation"* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = bitcast %"struct.blink::Rotation"* %6 to i32*
  store i32 %13, i32* %14, align 8
  %15 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %6, i64 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 0, i32 1
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = bitcast float* %15 to i32*
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %6, i64 0, i32 0, i32 2
  %21 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 0, i32 2
  %22 = bitcast float* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = bitcast float* %20 to i32*
  store i32 %23, i32* %24, align 8
  %25 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %6, i64 0, i32 1
  %26 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast double* %25 to i64*
  store i64 %28, i64* %29, align 8
  br label %35

30:                                               ; preds = %5
  %31 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %6, i64 0, i32 0, i32 0
  store float 0.000000e+00, float* %31, align 8
  %32 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %6, i64 0, i32 0, i32 1
  store float 0.000000e+00, float* %32, align 4
  %33 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %6, i64 0, i32 0, i32 2
  store float 0.000000e+00, float* %33, align 8
  %34 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %6, i64 0, i32 1
  store double 0.000000e+00, double* %34, align 8
  br label %35

35:                                               ; preds = %30, %10
  %36 = bitcast %"struct.blink::Rotation"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #7
  %37 = icmp eq %"class.blink::RotateTransformOperation"* %1, null
  br i1 %37, label %58, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %1, i64 0, i32 2
  %40 = bitcast %"struct.blink::Rotation"* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = bitcast %"struct.blink::Rotation"* %7 to i32*
  store i32 %41, i32* %42, align 8
  %43 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %7, i64 0, i32 0, i32 1
  %44 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %1, i64 0, i32 2, i32 0, i32 1
  %45 = bitcast float* %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = bitcast float* %43 to i32*
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %7, i64 0, i32 0, i32 2
  %49 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %1, i64 0, i32 2, i32 0, i32 2
  %50 = bitcast float* %49 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = bitcast float* %48 to i32*
  store i32 %51, i32* %52, align 8
  %53 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %7, i64 0, i32 1
  %54 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %1, i64 0, i32 2, i32 1
  %55 = bitcast double* %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast double* %53 to i64*
  store i64 %56, i64* %57, align 8
  br label %63

58:                                               ; preds = %35
  %59 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %7, i64 0, i32 0, i32 0
  store float 0.000000e+00, float* %59, align 8
  %60 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %7, i64 0, i32 0, i32 1
  store float 0.000000e+00, float* %60, align 4
  %61 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %7, i64 0, i32 0, i32 2
  store float 0.000000e+00, float* %61, align 8
  %62 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %7, i64 0, i32 1
  store double 0.000000e+00, double* %62, align 8
  br label %63

63:                                               ; preds = %58, %38
  %64 = call zeroext i1 @_ZN5blink8Rotation13GetCommonAxisERKS0_S2_RNS_12FloatPoint3DERdS5_(%"struct.blink::Rotation"* nonnull dereferenceable(24) %6, %"struct.blink::Rotation"* nonnull dereferenceable(24) %7, %"class.blink::FloatPoint3D"* dereferenceable(12) %2, double* dereferenceable(8) %3, double* dereferenceable(8) %4) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #7
  ret i1 %64
}

declare zeroext i1 @_ZN5blink8Rotation13GetCommonAxisERKS0_S2_RNS_12FloatPoint3DERdS5_(%"struct.blink::Rotation"* dereferenceable(24), %"struct.blink::Rotation"* dereferenceable(24), %"class.blink::FloatPoint3D"* dereferenceable(12), double* dereferenceable(8), double* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::TransformOperation"* @_ZN5blink24RotateTransformOperation10AccumulateERKNS_18TransformOperationE(%"class.blink::RotateTransformOperation"*, %"class.blink::TransformOperation"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.blink::Rotation", align 8
  %4 = bitcast %"struct.blink::Rotation"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 bitcast ({ %"class.blink::FloatPoint3D", [4 x i8], double }* @__const._ZN5blink24RotateTransformOperation10AccumulateERKNS_18TransformOperationE.new_rotation to i8*), i64 24, i1 false)
  %5 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 1
  %7 = bitcast %"class.blink::TransformOperation"* %6 to %"struct.blink::Rotation"*
  call void @_ZN5blink8Rotation3AddERKS0_S2_(%"struct.blink::Rotation"* nonnull sret %3, %"struct.blink::Rotation"* dereferenceable(24) %5, %"struct.blink::Rotation"* dereferenceable(24) %7) #7
  %8 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %3, i64 0, i32 0, i32 0
  %9 = load float, float* %8, align 8
  %10 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %3, i64 0, i32 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %3, i64 0, i32 0, i32 2
  %13 = load float, float* %12, align 8
  %14 = fcmp oeq float %9, 0.000000e+00
  %15 = fcmp une float %11, 0.000000e+00
  %16 = or i1 %14, %15
  %17 = fcmp une float %13, 0.000000e+00
  %18 = or i1 %16, %17
  br i1 %18, label %19, label %29

19:                                               ; preds = %2
  %20 = fcmp oeq float %11, 0.000000e+00
  %21 = fcmp une float %9, 0.000000e+00
  %22 = or i1 %21, %20
  %23 = or i1 %22, %17
  br i1 %23, label %24, label %29

24:                                               ; preds = %19
  %25 = fcmp oeq float %13, 0.000000e+00
  %26 = or i1 %21, %25
  %27 = or i1 %15, %26
  %28 = select i1 %27, i32 17, i32 6
  br label %29

29:                                               ; preds = %24, %19, %2
  %30 = phi i32 [ 15, %2 ], [ 16, %19 ], [ %28, %24 ]
  %31 = call noalias i8* @malloc(i64 48) #7
  %32 = getelementptr inbounds i8, i8* %31, i64 8
  %33 = bitcast i8* %32 to i32*
  store i32 1, i32* %33, align 4
  %34 = bitcast i8* %31 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN5blink24RotateTransformOperationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %34, align 8
  %35 = getelementptr inbounds i8, i8* %31, i64 16
  %36 = bitcast i8* %35 to float*
  store float %9, float* %36, align 4
  %37 = getelementptr inbounds i8, i8* %31, i64 20
  %38 = bitcast i8* %37 to float*
  store float %11, float* %38, align 4
  %39 = getelementptr inbounds i8, i8* %31, i64 24
  %40 = bitcast i8* %39 to float*
  store float %13, float* %40, align 4
  %41 = getelementptr inbounds i8, i8* %31, i64 32
  %42 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %3, i64 0, i32 1
  %43 = bitcast double* %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast i8* %41 to i64*
  store i64 %44, i64* %45, align 8
  %46 = getelementptr inbounds i8, i8* %31, i64 40
  %47 = bitcast i8* %46 to i32*
  store i32 %30, i32* %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #7
  %48 = bitcast i8* %31 to %"class.blink::TransformOperation"*
  ret %"class.blink::TransformOperation"* %48
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN5blink8Rotation3AddERKS0_S2_(%"struct.blink::Rotation"* sret, %"struct.blink::Rotation"* dereferenceable(24), %"struct.blink::Rotation"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::TransformOperation"* @_ZN5blink24RotateTransformOperation5BlendEPKNS_18TransformOperationEdb(%"class.blink::RotateTransformOperation"*, %"class.blink::TransformOperation"*, double, i1 zeroext) unnamed_addr #0 align 2 {
  %5 = alloca %"struct.blink::Rotation", align 8
  br i1 %3, label %6, label %36

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 0
  %8 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 1
  %9 = load double, double* %8, align 8
  %10 = fsub double 1.000000e+00, %2
  %11 = fmul double %10, %9
  %12 = bitcast %"class.blink::FloatPoint3D"* %7 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 0, i32 1
  %15 = bitcast float* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 0, i32 2
  %18 = bitcast float* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 3
  %21 = load i32, i32* %20, align 8
  %22 = tail call noalias i8* @malloc(i64 48) #7
  %23 = getelementptr inbounds i8, i8* %22, i64 8
  %24 = bitcast i8* %23 to i32*
  store i32 1, i32* %24, align 4
  %25 = bitcast i8* %22 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN5blink24RotateTransformOperationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %25, align 8
  %26 = getelementptr inbounds i8, i8* %22, i64 16
  %27 = bitcast i8* %26 to i32*
  store i32 %13, i32* %27, align 4
  %28 = getelementptr inbounds i8, i8* %22, i64 20
  %29 = bitcast i8* %28 to i32*
  store i32 %16, i32* %29, align 4
  %30 = getelementptr inbounds i8, i8* %22, i64 24
  %31 = bitcast i8* %30 to i32*
  store i32 %19, i32* %31, align 4
  %32 = getelementptr inbounds i8, i8* %22, i64 32
  %33 = bitcast i8* %32 to double*
  store double %11, double* %33, align 8
  %34 = getelementptr inbounds i8, i8* %22, i64 40
  %35 = bitcast i8* %34 to i32*
  store i32 %21, i32* %35, align 8
  br label %114

36:                                               ; preds = %4
  %37 = icmp eq %"class.blink::TransformOperation"* %1, null
  br i1 %37, label %38, label %67

38:                                               ; preds = %36
  %39 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 0
  %40 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 1
  %41 = load double, double* %40, align 8
  %42 = fmul double %41, %2
  %43 = bitcast %"class.blink::FloatPoint3D"* %39 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 0, i32 1
  %46 = bitcast float* %45 to i32*
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 0, i32 2
  %49 = bitcast float* %48 to i32*
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 3
  %52 = load i32, i32* %51, align 8
  %53 = tail call noalias i8* @malloc(i64 48) #7
  %54 = getelementptr inbounds i8, i8* %53, i64 8
  %55 = bitcast i8* %54 to i32*
  store i32 1, i32* %55, align 4
  %56 = bitcast i8* %53 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN5blink24RotateTransformOperationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %57 = getelementptr inbounds i8, i8* %53, i64 16
  %58 = bitcast i8* %57 to i32*
  store i32 %44, i32* %58, align 4
  %59 = getelementptr inbounds i8, i8* %53, i64 20
  %60 = bitcast i8* %59 to i32*
  store i32 %47, i32* %60, align 4
  %61 = getelementptr inbounds i8, i8* %53, i64 24
  %62 = bitcast i8* %61 to i32*
  store i32 %50, i32* %62, align 4
  %63 = getelementptr inbounds i8, i8* %53, i64 32
  %64 = bitcast i8* %63 to double*
  store double %42, double* %64, align 8
  %65 = getelementptr inbounds i8, i8* %53, i64 40
  %66 = bitcast i8* %65 to i32*
  store i32 %52, i32* %66, align 8
  br label %114

67:                                               ; preds = %36
  %68 = bitcast %"class.blink::RotateTransformOperation"* %0 to %"class.blink::TransformOperation"*
  %69 = bitcast %"class.blink::RotateTransformOperation"* %0 to i32 (%"class.blink::TransformOperation"*)***
  %70 = load i32 (%"class.blink::TransformOperation"*)**, i32 (%"class.blink::TransformOperation"*)*** %69, align 8
  %71 = getelementptr inbounds i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %70, i64 7
  %72 = load i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %71, align 8
  %73 = tail call i32 %72(%"class.blink::TransformOperation"* %68) #7
  %74 = bitcast %"class.blink::TransformOperation"* %1 to i32 (%"class.blink::TransformOperation"*)***
  %75 = load i32 (%"class.blink::TransformOperation"*)**, i32 (%"class.blink::TransformOperation"*)*** %74, align 8
  %76 = getelementptr inbounds i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %75, i64 7
  %77 = load i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %76, align 8
  %78 = tail call i32 %77(%"class.blink::TransformOperation"* nonnull %1) #7
  %79 = icmp eq i32 %73, %78
  br i1 %79, label %80, label %83

80:                                               ; preds = %67
  %81 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 3
  %82 = load i32, i32* %81, align 8
  br label %83

83:                                               ; preds = %80, %67
  %84 = phi i32 [ %82, %80 ], [ 17, %67 ]
  %85 = bitcast %"struct.blink::Rotation"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %85) #7
  %86 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 1
  %87 = bitcast %"class.blink::TransformOperation"* %86 to %"struct.blink::Rotation"*
  %88 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2
  call void @_ZN5blink8Rotation5SlerpERKS0_S2_d(%"struct.blink::Rotation"* nonnull sret %5, %"struct.blink::Rotation"* dereferenceable(24) %87, %"struct.blink::Rotation"* dereferenceable(24) %88, double %2) #7
  %89 = call noalias i8* @malloc(i64 48) #7
  %90 = getelementptr inbounds i8, i8* %89, i64 8
  %91 = bitcast i8* %90 to i32*
  store i32 1, i32* %91, align 4
  %92 = bitcast i8* %89 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN5blink24RotateTransformOperationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %92, align 8
  %93 = getelementptr inbounds i8, i8* %89, i64 16
  %94 = bitcast %"struct.blink::Rotation"* %5 to i32*
  %95 = load i32, i32* %94, align 8
  %96 = bitcast i8* %93 to i32*
  store i32 %95, i32* %96, align 4
  %97 = getelementptr inbounds i8, i8* %89, i64 20
  %98 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %5, i64 0, i32 0, i32 1
  %99 = bitcast float* %98 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = bitcast i8* %97 to i32*
  store i32 %100, i32* %101, align 4
  %102 = getelementptr inbounds i8, i8* %89, i64 24
  %103 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %5, i64 0, i32 0, i32 2
  %104 = bitcast float* %103 to i32*
  %105 = load i32, i32* %104, align 8
  %106 = bitcast i8* %102 to i32*
  store i32 %105, i32* %106, align 4
  %107 = getelementptr inbounds i8, i8* %89, i64 32
  %108 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %5, i64 0, i32 1
  %109 = bitcast double* %108 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = bitcast i8* %107 to i64*
  store i64 %110, i64* %111, align 8
  %112 = getelementptr inbounds i8, i8* %89, i64 40
  %113 = bitcast i8* %112 to i32*
  store i32 %84, i32* %113, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %85) #7
  br label %114

114:                                              ; preds = %83, %38, %6
  %115 = phi i8* [ %22, %6 ], [ %53, %38 ], [ %89, %83 ]
  %116 = bitcast i8* %115 to %"class.blink::TransformOperation"*
  ret %"class.blink::TransformOperation"* %116
}

declare void @_ZN5blink8Rotation5SlerpERKS0_S2_d(%"struct.blink::Rotation"* sret, %"struct.blink::Rotation"* dereferenceable(24), %"struct.blink::Rotation"* dereferenceable(24), double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN5blink36RotateAroundOriginTransformOperationC2Eddd(%"class.blink::RotateAroundOriginTransformOperation"* nocapture, double, double, double) unnamed_addr #3 align 2 {
  %5 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store i32 1, i32* %5, align 4
  %6 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 2
  %8 = bitcast %"struct.blink::Rotation"* %7 to i32*
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 2, i32 0, i32 1
  %10 = bitcast float* %9 to i32*
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 2, i32 0, i32 2
  %12 = bitcast float* %11 to i32*
  store i32 1065353216, i32* %12, align 4
  %13 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 2, i32 1
  store double %1, double* %13, align 8
  %14 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 3
  store i32 21, i32* %14, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN5blink36RotateAroundOriginTransformOperationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %15 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 1
  store double %2, double* %15, align 8
  %16 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 2
  store double %3, double* %16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink36RotateAroundOriginTransformOperation5ApplyERNS_20TransformationMatrixERKNS_9FloatSizeE(%"class.blink::RotateAroundOriginTransformOperation"*, %"class.blink::TransformationMatrix"* dereferenceable(128), %"class.blink::FloatSize"* nocapture readnone dereferenceable(8)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 2
  %7 = load double, double* %6, align 8
  %8 = tail call dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix9TranslateEdd(%"class.blink::TransformationMatrix"* %1, double %5, double %7) #7
  %9 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 2
  %10 = tail call dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix8Rotate3dERKNS_8RotationE(%"class.blink::TransformationMatrix"* %1, %"struct.blink::Rotation"* dereferenceable(24) %9) #7
  %11 = load double, double* %4, align 8
  %12 = fsub double -0.000000e+00, %11
  %13 = load double, double* %6, align 8
  %14 = fsub double -0.000000e+00, %13
  %15 = tail call dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix9TranslateEdd(%"class.blink::TransformationMatrix"* %1, double %12, double %14) #7
  ret void
}

declare dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix9TranslateEdd(%"class.blink::TransformationMatrix"*, double, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink24RotateTransformOperation5ApplyERNS_20TransformationMatrixERKNS_9FloatSizeE(%"class.blink::RotateTransformOperation"*, %"class.blink::TransformationMatrix"* dereferenceable(128), %"class.blink::FloatSize"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2
  %5 = tail call dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix8Rotate3dERKNS_8RotationE(%"class.blink::TransformationMatrix"* %1, %"struct.blink::Rotation"* dereferenceable(24) %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink36RotateAroundOriginTransformOperationeqERKNS_18TransformOperationE(%"class.blink::RotateAroundOriginTransformOperation"*, %"class.blink::TransformOperation"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::RotateAroundOriginTransformOperation"* %0 to %"class.blink::TransformOperation"*
  %4 = bitcast %"class.blink::TransformOperation"* %1 to i32 (%"class.blink::TransformOperation"*)***
  %5 = load i32 (%"class.blink::TransformOperation"*)**, i32 (%"class.blink::TransformOperation"*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %5, i64 7
  %7 = load i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %6, align 8
  %8 = tail call i32 %7(%"class.blink::TransformOperation"* %1) #7
  %9 = bitcast %"class.blink::RotateAroundOriginTransformOperation"* %0 to i32 (%"class.blink::TransformOperation"*)***
  %10 = load i32 (%"class.blink::TransformOperation"*)**, i32 (%"class.blink::TransformOperation"*)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %10, i64 7
  %12 = load i32 (%"class.blink::TransformOperation"*)*, i32 (%"class.blink::TransformOperation"*)** %11, align 8
  %13 = tail call i32 %12(%"class.blink::TransformOperation"* %3) #7
  %14 = icmp eq i32 %8, %13
  br i1 %14, label %15, label %57

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 1
  %17 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = load float, float* %17, align 4
  %19 = bitcast %"class.blink::TransformOperation"* %16 to float*
  %20 = load float, float* %19, align 4
  %21 = fcmp oeq float %18, %20
  br i1 %21, label %22, label %57

22:                                               ; preds = %15
  %23 = bitcast %"class.blink::TransformOperation"* %16 to %"class.blink::FloatPoint3D"*
  %24 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 2, i32 0, i32 1
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %23, i64 0, i32 1
  %27 = load float, float* %26, align 4
  %28 = fcmp oeq float %25, %27
  br i1 %28, label %29, label %57

29:                                               ; preds = %22
  %30 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 2, i32 0, i32 2
  %31 = load float, float* %30, align 4
  %32 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 1, i32 1
  %33 = bitcast %"class.WTF::RefCounted"* %32 to float*
  %34 = load float, float* %33, align 4
  %35 = fcmp oeq float %31, %34
  br i1 %35, label %36, label %57

36:                                               ; preds = %29
  %37 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 2, i32 1
  %38 = load double, double* %37, align 8
  %39 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 2
  %40 = bitcast %"class.blink::TransformOperation"* %39 to double*
  %41 = load double, double* %40, align 8
  %42 = fcmp oeq double %38, %41
  br i1 %42, label %43, label %57

43:                                               ; preds = %36
  %44 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 1
  %45 = load double, double* %44, align 8
  %46 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 3
  %47 = bitcast %"class.blink::TransformOperation"* %46 to double*
  %48 = load double, double* %47, align 8
  %49 = fcmp oeq double %45, %48
  br i1 %49, label %50, label %57

50:                                               ; preds = %43
  %51 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 2
  %52 = load double, double* %51, align 8
  %53 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 3, i32 1
  %54 = bitcast %"class.WTF::RefCounted"* %53 to double*
  %55 = load double, double* %54, align 8
  %56 = fcmp oeq double %52, %55
  br label %57

57:                                               ; preds = %15, %22, %29, %36, %43, %50, %2
  %58 = phi i1 [ false, %2 ], [ false, %43 ], [ false, %36 ], [ false, %29 ], [ %56, %50 ], [ false, %22 ], [ false, %15 ]
  ret i1 %58
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::TransformOperation"* @_ZN5blink36RotateAroundOriginTransformOperation5BlendEPKNS_18TransformOperationEdb(%"class.blink::RotateAroundOriginTransformOperation"* nocapture readonly, %"class.blink::TransformOperation"* readonly, double, i1 zeroext) unnamed_addr #0 align 2 {
  br i1 %3, label %5, label %29

5:                                                ; preds = %4
  %6 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 2, i32 1
  %7 = load double, double* %6, align 8
  %8 = fsub double 1.000000e+00, %2
  %9 = fmul double %8, %7
  %10 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 1
  %11 = bitcast double* %10 to <2 x i64>*
  %12 = load <2 x i64>, <2 x i64>* %11, align 8
  %13 = tail call noalias i8* @malloc(i64 64) #7
  %14 = getelementptr inbounds i8, i8* %13, i64 8
  %15 = bitcast i8* %14 to i32*
  store i32 1, i32* %15, align 4
  %16 = bitcast i8* %13 to i32 (...)***
  %17 = getelementptr inbounds i8, i8* %13, i64 16
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds i8, i8* %13, i64 20
  %20 = bitcast i8* %19 to i32*
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds i8, i8* %13, i64 24
  %22 = bitcast i8* %21 to i32*
  store i32 1065353216, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %13, i64 32
  %24 = bitcast i8* %23 to double*
  store double %9, double* %24, align 8
  %25 = getelementptr inbounds i8, i8* %13, i64 40
  %26 = bitcast i8* %25 to i32*
  store i32 21, i32* %26, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN5blink36RotateAroundOriginTransformOperationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %16, align 8
  %27 = getelementptr inbounds i8, i8* %13, i64 48
  %28 = bitcast i8* %27 to <2 x i64>*
  store <2 x i64> %12, <2 x i64>* %28, align 8
  br label %90

29:                                               ; preds = %4
  %30 = icmp eq %"class.blink::TransformOperation"* %1, null
  br i1 %30, label %31, label %54

31:                                               ; preds = %29
  %32 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 2, i32 1
  %33 = load double, double* %32, align 8
  %34 = fmul double %33, %2
  %35 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 1
  %36 = bitcast double* %35 to <2 x i64>*
  %37 = load <2 x i64>, <2 x i64>* %36, align 8
  %38 = tail call noalias i8* @malloc(i64 64) #7
  %39 = getelementptr inbounds i8, i8* %38, i64 8
  %40 = bitcast i8* %39 to i32*
  store i32 1, i32* %40, align 4
  %41 = bitcast i8* %38 to i32 (...)***
  %42 = getelementptr inbounds i8, i8* %38, i64 16
  %43 = bitcast i8* %42 to i32*
  store i32 0, i32* %43, align 4
  %44 = getelementptr inbounds i8, i8* %38, i64 20
  %45 = bitcast i8* %44 to i32*
  store i32 0, i32* %45, align 4
  %46 = getelementptr inbounds i8, i8* %38, i64 24
  %47 = bitcast i8* %46 to i32*
  store i32 1065353216, i32* %47, align 4
  %48 = getelementptr inbounds i8, i8* %38, i64 32
  %49 = bitcast i8* %48 to double*
  store double %34, double* %49, align 8
  %50 = getelementptr inbounds i8, i8* %38, i64 40
  %51 = bitcast i8* %50 to i32*
  store i32 21, i32* %51, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN5blink36RotateAroundOriginTransformOperationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %41, align 8
  %52 = getelementptr inbounds i8, i8* %38, i64 48
  %53 = bitcast i8* %52 to <2 x i64>*
  store <2 x i64> %37, <2 x i64>* %53, align 8
  br label %90

54:                                               ; preds = %29
  %55 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 2
  %56 = bitcast %"class.blink::TransformOperation"* %55 to double*
  %57 = load double, double* %56, align 8
  %58 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 2, i32 1
  %59 = load double, double* %58, align 8
  %60 = fsub double %59, %57
  %61 = fmul double %60, %2
  %62 = fadd double %57, %61
  %63 = getelementptr inbounds %"class.blink::TransformOperation", %"class.blink::TransformOperation"* %1, i64 3
  %64 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 1
  %65 = bitcast %"class.blink::TransformOperation"* %63 to <2 x double>*
  %66 = load <2 x double>, <2 x double>* %65, align 8
  %67 = bitcast double* %64 to <2 x double>*
  %68 = load <2 x double>, <2 x double>* %67, align 8
  %69 = fsub <2 x double> %68, %66
  %70 = insertelement <2 x double> undef, double %2, i32 0
  %71 = shufflevector <2 x double> %70, <2 x double> undef, <2 x i32> zeroinitializer
  %72 = fmul <2 x double> %69, %71
  %73 = fadd <2 x double> %66, %72
  %74 = tail call noalias i8* @malloc(i64 64) #7
  %75 = getelementptr inbounds i8, i8* %74, i64 8
  %76 = bitcast i8* %75 to i32*
  store i32 1, i32* %76, align 4
  %77 = bitcast i8* %74 to i32 (...)***
  %78 = getelementptr inbounds i8, i8* %74, i64 16
  %79 = bitcast i8* %78 to i32*
  store i32 0, i32* %79, align 4
  %80 = getelementptr inbounds i8, i8* %74, i64 20
  %81 = bitcast i8* %80 to i32*
  store i32 0, i32* %81, align 4
  %82 = getelementptr inbounds i8, i8* %74, i64 24
  %83 = bitcast i8* %82 to i32*
  store i32 1065353216, i32* %83, align 4
  %84 = getelementptr inbounds i8, i8* %74, i64 32
  %85 = bitcast i8* %84 to double*
  store double %62, double* %85, align 8
  %86 = getelementptr inbounds i8, i8* %74, i64 40
  %87 = bitcast i8* %86 to i32*
  store i32 21, i32* %87, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN5blink36RotateAroundOriginTransformOperationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %77, align 8
  %88 = getelementptr inbounds i8, i8* %74, i64 48
  %89 = bitcast i8* %88 to <2 x double>*
  store <2 x double> %73, <2 x double>* %89, align 8
  br label %90

90:                                               ; preds = %54, %31, %5
  %91 = phi i8* [ %13, %5 ], [ %38, %31 ], [ %74, %54 ]
  %92 = bitcast i8* %91 to %"class.blink::TransformOperation"*
  ret %"class.blink::TransformOperation"* %92
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::TransformOperation"* @_ZN5blink36RotateAroundOriginTransformOperation4ZoomEd(%"class.blink::RotateAroundOriginTransformOperation"* nocapture readonly, double) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 0, i32 2, i32 1
  %4 = bitcast double* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.blink::RotateAroundOriginTransformOperation", %"class.blink::RotateAroundOriginTransformOperation"* %0, i64 0, i32 1
  %7 = bitcast double* %6 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = insertelement <2 x double> undef, double %1, i32 0
  %10 = shufflevector <2 x double> %9, <2 x double> undef, <2 x i32> zeroinitializer
  %11 = fmul <2 x double> %8, %10
  %12 = tail call noalias i8* @malloc(i64 64) #7
  %13 = getelementptr inbounds i8, i8* %12, i64 8
  %14 = bitcast i8* %13 to i32*
  store i32 1, i32* %14, align 4
  %15 = bitcast i8* %12 to i32 (...)***
  %16 = getelementptr inbounds i8, i8* %12, i64 16
  %17 = bitcast i8* %16 to i32*
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds i8, i8* %12, i64 20
  %19 = bitcast i8* %18 to i32*
  store i32 0, i32* %19, align 4
  %20 = getelementptr inbounds i8, i8* %12, i64 24
  %21 = bitcast i8* %20 to i32*
  store i32 1065353216, i32* %21, align 4
  %22 = getelementptr inbounds i8, i8* %12, i64 32
  %23 = bitcast i8* %22 to i64*
  store i64 %5, i64* %23, align 8
  %24 = getelementptr inbounds i8, i8* %12, i64 40
  %25 = bitcast i8* %24 to i32*
  store i32 21, i32* %25, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN5blink36RotateAroundOriginTransformOperationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %15, align 8
  %26 = getelementptr inbounds i8, i8* %12, i64 48
  %27 = bitcast i8* %26 to <2 x double>*
  store <2 x double> %11, <2 x double>* %27, align 8
  %28 = bitcast i8* %12 to %"class.blink::TransformOperation"*
  ret %"class.blink::TransformOperation"* %28
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink18TransformOperationD2Ev(%"class.blink::TransformOperation"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink24RotateTransformOperationD0Ev(%"class.blink::RotateTransformOperation"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"class.blink::RotateTransformOperation"* %0 to i8*
  tail call void @free(i8* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::TransformOperation"* @_ZN5blink24RotateTransformOperation4ZoomEd(%"class.blink::RotateTransformOperation"*, double) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.blink::RotateTransformOperation"* %0 to %"class.blink::TransformOperation"*
  %4 = icmp eq %"class.blink::RotateTransformOperation"* %0, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %6) #7
  br label %7

7:                                                ; preds = %2, %5
  ret %"class.blink::TransformOperation"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink24RotateTransformOperation7GetTypeEv(%"class.blink::RotateTransformOperation"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink24RotateTransformOperation13PrimitiveTypeEv(%"class.blink::RotateTransformOperation"*) unnamed_addr #0 comdat align 2 {
  ret i32 17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink18TransformOperation22PreservesAxisAlignmentEv(%"class.blink::TransformOperation"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink18TransformOperation23IsIdentityOrTranslationEv(%"class.blink::TransformOperation"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink24RotateTransformOperation24HasNonTrivial3DComponentEv(%"class.blink::RotateTransformOperation"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 1
  %3 = load double, double* %2, align 8
  %4 = fcmp une double %3, 0.000000e+00
  br i1 %4, label %5, label %13

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = fcmp une float %7, 0.000000e+00
  br i1 %8, label %13, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::RotateTransformOperation", %"class.blink::RotateTransformOperation"* %0, i64 0, i32 2, i32 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = fcmp une float %11, 0.000000e+00
  br label %13

13:                                               ; preds = %5, %9, %1
  %14 = phi i1 [ false, %1 ], [ true, %5 ], [ %12, %9 ]
  ret i1 %14
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink18TransformOperation19BoxSizeDependenciesEv(%"class.blink::TransformOperation"*) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink36RotateAroundOriginTransformOperationD0Ev(%"class.blink::RotateAroundOriginTransformOperation"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"class.blink::RotateAroundOriginTransformOperation"* %0 to i8*
  tail call void @free(i8* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink36RotateAroundOriginTransformOperation13PrimitiveTypeEv(%"class.blink::RotateAroundOriginTransformOperation"*) unnamed_addr #0 comdat align 2 {
  ret i32 21
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #5

declare dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix8Rotate3dERKNS_8RotationE(%"class.blink::TransformationMatrix"*, %"struct.blink::Rotation"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #6

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
