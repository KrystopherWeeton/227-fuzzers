; ModuleID = '../../courgette/disassembler_elf_32_x86.cc'
source_filename = "../../courgette/disassembler_elf_32_x86.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.courgette::DisassemblerElf32X86" = type { %"class.courgette::DisassemblerElf32" }
%"class.courgette::DisassemblerElf32" = type { %"class.courgette::Disassembler", %struct.Elf32_Ehdr*, i16, %"class.std::__1::vector", %"class.std::__1::vector.1", %struct.Elf32_Phdr*, i16, i8*, i64, %"class.std::__1::vector.8", %"class.std::__1::vector.15" }
%"class.courgette::Disassembler" = type { %"class.courgette::AddressTranslator", i8*, i64, i8*, i8* }
%"class.courgette::AddressTranslator" = type { i32 (...)** }
%struct.Elf32_Ehdr = type { [16 x i8], i16, i16, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %struct.Elf32_Shdr*, %struct.Elf32_Shdr*, %"class.std::__1::__compressed_pair" }
%struct.Elf32_Shdr = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.Elf32_Shdr* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i16*, i16*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i16* }
%struct.Elf32_Phdr = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i32*, i32*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i32* }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.courgette::DisassemblerElf32::TypedRVA"* }
%"class.courgette::DisassemblerElf32::TypedRVA" = type { i32 (...)**, i32, i32, i64 }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.std::__1::unique_ptr"* }
%"class.courgette::DisassemblerElf32X86::TypedRVAX86" = type { %"class.courgette::DisassemblerElf32::TypedRVA" }
%"class.courgette::Label" = type { i32, i32, i32 }
%"class.courgette::InstructionReceptor" = type { i32 (...)** }
%struct.Elf32_Rel = type { i32, i32 }
%"class.courgette::RvaVisitor" = type { i32 (...)** }
%"class.courgette::AssemblyProgram" = type { i32, i64, %"class.courgette::LabelManager", %"class.courgette::LabelManager", %"class.std::__1::vector.39", %"class.std::__1::vector.39" }
%"class.courgette::LabelManager" = type { %"class.std::__1::vector.32" }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.courgette::Label"*, %"class.courgette::Label"*, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.courgette::Label"* }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"class.courgette::Label"**, %"class.courgette::Label"**, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.courgette::Label"** }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN9courgette17DisassemblerElf328TypedRVAD2Ev = comdat any

$_ZN9courgette20DisassemblerElf32X8611TypedRVAX86D0Ev = comdat any

$_ZN9courgette17DisassemblerElf32D2Ev = comdat any

$_ZN9courgette20DisassemblerElf32X86D0Ev = comdat any

$_ZNK9courgette20DisassemblerElf32X864kindEv = comdat any

$_ZNK9courgette17DisassemblerElf3210image_baseEv = comdat any

$_ZNK9courgette20DisassemblerElf32X865ElfEMEv = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_ = comdat any

@_ZTVN9courgette20DisassemblerElf32X86E = hidden unnamed_addr constant { [22 x i8*] } { [22 x i8*] [i8* null, i8* null, i8* bitcast (i32 (%"class.courgette::DisassemblerElf32"*, i64)* @_ZNK9courgette17DisassemblerElf3215FileOffsetToRVAEm to i8*), i8* bitcast (i64 (%"class.courgette::DisassemblerElf32"*, i32)* @_ZNK9courgette17DisassemblerElf3215RVAToFileOffsetEj to i8*), i8* bitcast (i8* (%"class.courgette::Disassembler"*, i64)* @_ZNK9courgette12Disassembler19FileOffsetToPointerEm to i8*), i8* bitcast (i8* (%"class.courgette::Disassembler"*, i32)* @_ZNK9courgette12Disassembler12RVAToPointerEj to i8*), i8* bitcast (i32 (%"class.courgette::DisassemblerElf32"*, i8*)* @_ZNK9courgette17DisassemblerElf3218PointerToTargetRVAEPKh to i8*), i8* bitcast (void (%"class.courgette::DisassemblerElf32"*)* @_ZN9courgette17DisassemblerElf32D2Ev to i8*), i8* bitcast (void (%"class.courgette::DisassemblerElf32X86"*)* @_ZN9courgette20DisassemblerElf32X86D0Ev to i8*), i8* bitcast (i32 (%"class.courgette::DisassemblerElf32X86"*)* @_ZNK9courgette20DisassemblerElf32X864kindEv to i8*), i8* bitcast (i64 (%"class.courgette::DisassemblerElf32"*)* @_ZNK9courgette17DisassemblerElf3210image_baseEv to i8*), i8* bitcast (i1 (%"class.courgette::DisassemblerElf32"*)* @_ZN9courgette17DisassemblerElf3221ExtractAbs32LocationsEv to i8*), i8* bitcast (i1 (%"class.courgette::DisassemblerElf32"*)* @_ZN9courgette17DisassemblerElf3221ExtractRel32LocationsEv to i8*), i8* bitcast (%"class.courgette::RvaVisitor"* (%"class.courgette::DisassemblerElf32"*)* @_ZN9courgette17DisassemblerElf3227CreateAbs32TargetRvaVisitorEv to i8*), i8* bitcast (%"class.courgette::RvaVisitor"* (%"class.courgette::DisassemblerElf32"*)* @_ZN9courgette17DisassemblerElf3227CreateRel32TargetRvaVisitorEv to i8*), i8* bitcast (void (%"class.courgette::DisassemblerElf32"*, %"class.courgette::AssemblyProgram"*)* @_ZN9courgette17DisassemblerElf3226RemoveUnusedRel32LocationsEPNS_15AssemblyProgramE to i8*), i8* bitcast (i1 (%"class.courgette::DisassemblerElf32"*)* @_ZN9courgette17DisassemblerElf3211ParseHeaderEv to i8*), i8* bitcast (void ()* @_ZN9courgette17DisassemblerElf3223GetInstructionGeneratorEPNS_15AssemblyProgramE to i8*), i8* bitcast (i32 (%"class.courgette::DisassemblerElf32X86"*)* @_ZNK9courgette20DisassemblerElf32X865ElfEMEv to i8*), i8* bitcast (i1 (%"class.courgette::DisassemblerElf32X86"*, i64, i32*)* @_ZNK9courgette20DisassemblerElf32X868RelToRVAE9Elf32_RelPj to i8*), i8* bitcast (i1 (%"class.courgette::DisassemblerElf32X86"*, %struct.Elf32_Shdr*, %"class.courgette::InstructionReceptor"*)* @_ZNK9courgette20DisassemblerElf32X8622ParseRelocationSectionEPK10Elf32_ShdrPNS_19InstructionReceptorE to i8*), i8* bitcast (i1 (%"class.courgette::DisassemblerElf32X86"*, %struct.Elf32_Shdr*)* @_ZN9courgette20DisassemblerElf32X8627ParseRel32RelocsFromSectionEPK10Elf32_Shdr to i8*)] }, align 8
@_ZTVN9courgette20DisassemblerElf32X8611TypedRVAX86E = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.courgette::DisassemblerElf32::TypedRVA"*)* @_ZN9courgette17DisassemblerElf328TypedRVAD2Ev to i8*), i8* bitcast (void (%"class.courgette::DisassemblerElf32X86::TypedRVAX86"*)* @_ZN9courgette20DisassemblerElf32X8611TypedRVAX86D0Ev to i8*), i8* bitcast (i1 (%"class.courgette::DisassemblerElf32X86::TypedRVAX86"*, i8*)* @_ZN9courgette20DisassemblerElf32X8611TypedRVAX8621ComputeRelativeTargetEPKh to i8*), i8* bitcast (i1 (%"class.courgette::DisassemblerElf32X86::TypedRVAX86"*, %"class.courgette::Label"*, %"class.courgette::InstructionReceptor"*)* @_ZN9courgette20DisassemblerElf32X8611TypedRVAX8615EmitInstructionEPNS_5LabelEPNS_19InstructionReceptorE to i8*), i8* bitcast (i16 (%"class.courgette::DisassemblerElf32X86::TypedRVAX86"*)* @_ZNK9courgette20DisassemblerElf32X8611TypedRVAX867op_sizeEv to i8*)] }, align 8
@_ZTVN9courgette17DisassemblerElf32E = external unnamed_addr constant { [22 x i8*] }, align 8

@_ZN9courgette20DisassemblerElf32X86C1EPKhm = hidden unnamed_addr alias void (%"class.courgette::DisassemblerElf32X86"*, i8*, i64), void (%"class.courgette::DisassemblerElf32X86"*, i8*, i64)* @_ZN9courgette20DisassemblerElf32X86C2EPKhm

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN9courgette20DisassemblerElf32X8611TypedRVAX8621ComputeRelativeTargetEPKh(%"class.courgette::DisassemblerElf32X86::TypedRVAX86"* nocapture, i8* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 4
  %6 = getelementptr inbounds %"class.courgette::DisassemblerElf32X86::TypedRVAX86", %"class.courgette::DisassemblerElf32X86::TypedRVAX86"* %0, i64 0, i32 0, i32 2
  store i32 %5, i32* %6, align 4
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9courgette20DisassemblerElf32X8611TypedRVAX8615EmitInstructionEPNS_5LabelEPNS_19InstructionReceptorE(%"class.courgette::DisassemblerElf32X86::TypedRVAX86"* nocapture readnone, %"class.courgette::Label"*, %"class.courgette::InstructionReceptor"*) unnamed_addr #1 align 2 {
  %4 = bitcast %"class.courgette::InstructionReceptor"* %2 to i1 (%"class.courgette::InstructionReceptor"*, %"class.courgette::Label"*)***
  %5 = load i1 (%"class.courgette::InstructionReceptor"*, %"class.courgette::Label"*)**, i1 (%"class.courgette::InstructionReceptor"*, %"class.courgette::Label"*)*** %4, align 8
  %6 = getelementptr inbounds i1 (%"class.courgette::InstructionReceptor"*, %"class.courgette::Label"*)*, i1 (%"class.courgette::InstructionReceptor"*, %"class.courgette::Label"*)** %5, i64 7
  %7 = load i1 (%"class.courgette::InstructionReceptor"*, %"class.courgette::Label"*)*, i1 (%"class.courgette::InstructionReceptor"*, %"class.courgette::Label"*)** %6, align 8
  %8 = tail call zeroext i1 %7(%"class.courgette::InstructionReceptor"* %2, %"class.courgette::Label"* %1) #12
  ret i1 %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i16 @_ZNK9courgette20DisassemblerElf32X8611TypedRVAX867op_sizeEv(%"class.courgette::DisassemblerElf32X86::TypedRVAX86"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i16 4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9courgette20DisassemblerElf32X86C2EPKhm(%"class.courgette::DisassemblerElf32X86"*, i8*, i64) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.courgette::DisassemblerElf32X86", %"class.courgette::DisassemblerElf32X86"* %0, i64 0, i32 0
  tail call void @_ZN9courgette17DisassemblerElf32C2EPKhm(%"class.courgette::DisassemblerElf32"* %4, i8* %1, i64 %2) #12
  %5 = getelementptr inbounds %"class.courgette::DisassemblerElf32X86", %"class.courgette::DisassemblerElf32X86"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [22 x i8*] }, { [22 x i8*] }* @_ZTVN9courgette20DisassemblerElf32X86E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  ret void
}

declare void @_ZN9courgette17DisassemblerElf32C2EPKhm(%"class.courgette::DisassemblerElf32"*, i8*, i64) unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden zeroext i1 @_ZNK9courgette20DisassemblerElf32X868RelToRVAE9Elf32_RelPj(%"class.courgette::DisassemblerElf32X86"* nocapture readnone, i64, i32* nocapture) unnamed_addr #4 align 2 {
  %4 = and i64 %1, -4294967296
  %5 = icmp eq i64 %4, 34359738368
  br i1 %5, label %6, label %8

6:                                                ; preds = %3
  %7 = trunc i64 %1 to i32
  store i32 %7, i32* %2, align 4
  br label %8

8:                                                ; preds = %3, %6
  %9 = phi i1 [ true, %6 ], [ false, %3 ]
  ret i1 %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK9courgette20DisassemblerElf32X8622ParseRelocationSectionEPK10Elf32_ShdrPNS_19InstructionReceptorE(%"class.courgette::DisassemblerElf32X86"*, %struct.Elf32_Shdr* nocapture readonly, %"class.courgette::InstructionReceptor"*) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %1, i64 0, i32 4
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %1, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = add nuw nsw i64 %9, %6
  %11 = getelementptr inbounds %"class.courgette::DisassemblerElf32X86", %"class.courgette::DisassemblerElf32X86"* %0, i64 0, i32 0, i32 0
  %12 = bitcast %"class.courgette::DisassemblerElf32X86"* %0 to i8* (%"class.courgette::Disassembler"*, i64)***
  %13 = load i8* (%"class.courgette::Disassembler"*, i64)**, i8* (%"class.courgette::Disassembler"*, i64)*** %12, align 8
  %14 = getelementptr inbounds i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %13, i64 2
  %15 = load i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %14, align 8
  %16 = tail call i8* %15(%"class.courgette::Disassembler"* %11, i64 %6) #12
  %17 = load i32, i32* %7, align 4
  %18 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %1, i64 0, i32 9
  %19 = load i32, i32* %18, align 4
  %20 = udiv i32 %17, %19
  %21 = getelementptr inbounds %"class.courgette::DisassemblerElf32X86", %"class.courgette::DisassemblerElf32X86"* %0, i64 0, i32 0
  %22 = getelementptr inbounds %"class.courgette::DisassemblerElf32X86", %"class.courgette::DisassemblerElf32X86"* %0, i64 0, i32 0, i32 9
  %23 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %22, i64 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = getelementptr inbounds %"class.courgette::DisassemblerElf32X86", %"class.courgette::DisassemblerElf32X86"* %0, i64 0, i32 0, i32 9, i32 0, i32 1
  %26 = load i32*, i32** %25, align 8
  %27 = icmp ne i32* %24, %26
  %28 = bitcast i32** %25 to i64*
  %29 = ptrtoint i32* %26 to i64
  %30 = bitcast %"class.std::__1::vector.8"* %22 to i64*
  %31 = ptrtoint i32* %24 to i64
  %32 = sub i64 %29, %31
  %33 = ashr exact i64 %32, 2
  %34 = zext i32 %20 to i64
  %35 = icmp ule i64 %33, %34
  %36 = and i1 %27, %35
  br i1 %36, label %37, label %66

37:                                               ; preds = %3
  %38 = bitcast i8* %16 to %struct.Elf32_Rel*
  br label %39

39:                                               ; preds = %37, %50
  %40 = phi i32* [ %24, %37 ], [ %52, %50 ]
  %41 = phi %struct.Elf32_Rel* [ %38, %37 ], [ %51, %50 ]
  %42 = getelementptr inbounds %struct.Elf32_Rel, %struct.Elf32_Rel* %41, i64 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 8
  br i1 %44, label %45, label %66

45:                                               ; preds = %39
  %46 = getelementptr inbounds %struct.Elf32_Rel, %struct.Elf32_Rel* %41, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = load i32, i32* %40, align 4
  %49 = icmp eq i32 %47, %48
  br i1 %49, label %50, label %66

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.Elf32_Rel, %struct.Elf32_Rel* %41, i64 1
  %52 = getelementptr inbounds i32, i32* %40, i64 1
  %53 = icmp eq i32* %52, %26
  br i1 %53, label %54, label %39

54:                                               ; preds = %50
  %55 = bitcast %"class.courgette::InstructionReceptor"* %2 to i1 (%"class.courgette::InstructionReceptor"*)***
  %56 = load i1 (%"class.courgette::InstructionReceptor"*)**, i1 (%"class.courgette::InstructionReceptor"*)*** %55, align 8
  %57 = getelementptr inbounds i1 (%"class.courgette::InstructionReceptor"*)*, i1 (%"class.courgette::InstructionReceptor"*)** %56, i64 3
  %58 = load i1 (%"class.courgette::InstructionReceptor"*)*, i1 (%"class.courgette::InstructionReceptor"*)** %57, align 8
  %59 = tail call zeroext i1 %58(%"class.courgette::InstructionReceptor"* %2) #12
  br i1 %59, label %60, label %69

60:                                               ; preds = %54
  %61 = load i64, i64* %28, align 8
  %62 = load i64, i64* %30, align 8
  %63 = sub i64 %61, %62
  %64 = shl i64 %63, 1
  %65 = add i64 %64, %6
  br label %66

66:                                               ; preds = %45, %39, %3, %60
  %67 = phi i64 [ %65, %60 ], [ %6, %3 ], [ %6, %39 ], [ %6, %45 ]
  %68 = tail call zeroext i1 @_ZNK9courgette17DisassemblerElf3217ParseSimpleRegionEmmPNS_19InstructionReceptorE(%"class.courgette::DisassemblerElf32"* %21, i64 %67, i64 %10, %"class.courgette::InstructionReceptor"* %2) #12
  br label %69

69:                                               ; preds = %54, %66
  %70 = phi i1 [ %68, %66 ], [ false, %54 ]
  ret i1 %70
}

declare zeroext i1 @_ZNK9courgette17DisassemblerElf3217ParseSimpleRegionEmmPNS_19InstructionReceptorE(%"class.courgette::DisassemblerElf32"*, i64, i64, %"class.courgette::InstructionReceptor"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9courgette20DisassemblerElf32X8627ParseRel32RelocsFromSectionEPK10Elf32_Shdr(%"class.courgette::DisassemblerElf32X86"*, %struct.Elf32_Shdr* nocapture readonly) unnamed_addr #1 align 2 {
  %3 = alloca %"class.std::__1::unique_ptr", align 8
  %4 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %1, i64 0, i32 4
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %1, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = add nuw nsw i64 %9, %6
  %11 = getelementptr inbounds %"class.courgette::DisassemblerElf32X86", %"class.courgette::DisassemblerElf32X86"* %0, i64 0, i32 0, i32 0
  %12 = bitcast %"class.courgette::DisassemblerElf32X86"* %0 to i8* (%"class.courgette::Disassembler"*, i64)***
  %13 = load i8* (%"class.courgette::Disassembler"*, i64)**, i8* (%"class.courgette::Disassembler"*, i64)*** %12, align 8
  %14 = getelementptr inbounds i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %13, i64 2
  %15 = load i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %14, align 8
  %16 = tail call i8* %15(%"class.courgette::Disassembler"* %11, i64 %6) #12
  %17 = load i8* (%"class.courgette::Disassembler"*, i64)**, i8* (%"class.courgette::Disassembler"*, i64)*** %12, align 8
  %18 = getelementptr inbounds i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %17, i64 2
  %19 = load i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %18, align 8
  %20 = tail call i8* %19(%"class.courgette::Disassembler"* %11, i64 %10) #12
  %21 = getelementptr inbounds %"class.courgette::DisassemblerElf32X86", %"class.courgette::DisassemblerElf32X86"* %0, i64 0, i32 0
  %22 = icmp ult i8* %16, %20
  br i1 %22, label %23, label %145

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"class.courgette::DisassemblerElf32X86", %"class.courgette::DisassemblerElf32X86"* %0, i64 0, i32 0, i32 9, i32 0, i32 0
  %25 = load i32*, i32** %24, align 8
  %26 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %1, i64 0, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = zext i32 %27 to i64
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i8, i8* %16, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = getelementptr inbounds %"class.courgette::DisassemblerElf32X86", %"class.courgette::DisassemblerElf32X86"* %0, i64 0, i32 0, i32 9, i32 0, i32 1
  %33 = bitcast %"class.std::__1::unique_ptr"* %3 to i8*
  %34 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  %35 = getelementptr inbounds %"class.courgette::DisassemblerElf32X86", %"class.courgette::DisassemblerElf32X86"* %0, i64 0, i32 0, i32 10, i32 0, i32 1
  %36 = getelementptr inbounds %"class.courgette::DisassemblerElf32X86", %"class.courgette::DisassemblerElf32X86"* %0, i64 0, i32 0, i32 10, i32 0, i32 2, i32 0, i32 0
  %37 = getelementptr inbounds %"class.courgette::DisassemblerElf32X86", %"class.courgette::DisassemblerElf32X86"* %0, i64 0, i32 0, i32 10
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %3, i64 0, i32 0, i32 0, i32 0
  %39 = bitcast %"class.std::__1::unique_ptr"** %35 to i64*
  br label %40

40:                                               ; preds = %23, %141
  %41 = phi i8* [ %16, %23 ], [ %143, %141 ]
  %42 = phi i32* [ %25, %23 ], [ %142, %141 ]
  %43 = getelementptr inbounds i8, i8* %41, i64 5
  %44 = icmp ugt i8* %43, %20
  br i1 %44, label %51, label %45

45:                                               ; preds = %40
  %46 = load i8, i8* %41, align 1
  %47 = and i8 %46, -2
  %48 = icmp eq i8 %47, -24
  %49 = getelementptr inbounds i8, i8* %41, i64 1
  %50 = select i1 %48, i8* %49, i8* null
  br label %51

51:                                               ; preds = %45, %40
  %52 = phi i8* [ null, %40 ], [ %50, %45 ]
  %53 = getelementptr inbounds i8, i8* %41, i64 6
  %54 = icmp ugt i8* %53, %20
  br i1 %54, label %68, label %55

55:                                               ; preds = %51
  %56 = load i8, i8* %41, align 1
  %57 = icmp eq i8 %56, 15
  br i1 %57, label %58, label %68

58:                                               ; preds = %55
  %59 = getelementptr inbounds i8, i8* %41, i64 1
  %60 = load i8, i8* %59, align 1
  %61 = and i8 %60, -16
  %62 = icmp ne i8 %61, -128
  %63 = and i8 %60, -2
  %64 = icmp eq i8 %63, -118
  %65 = or i1 %62, %64
  %66 = getelementptr inbounds i8, i8* %41, i64 2
  %67 = select i1 %65, i8* %52, i8* %66
  br label %68

68:                                               ; preds = %58, %51, %55
  %69 = phi i8* [ %52, %55 ], [ %52, %51 ], [ %67, %58 ]
  %70 = icmp eq i8* %69, null
  br i1 %70, label %138, label %71

71:                                               ; preds = %68
  %72 = ptrtoint i8* %69 to i64
  %73 = sub i64 %72, %31
  %74 = trunc i64 %73 to i32
  %75 = load i32*, i32** %32, align 8
  %76 = icmp eq i32* %42, %75
  br i1 %76, label %97, label %77

77:                                               ; preds = %71
  %78 = add i32 %74, -3
  br label %79

79:                                               ; preds = %77, %83
  %80 = phi i32* [ %42, %77 ], [ %84, %83 ]
  %81 = load i32, i32* %80, align 4
  %82 = icmp ult i32 %81, %78
  br i1 %82, label %83, label %86

83:                                               ; preds = %79
  %84 = getelementptr inbounds i32, i32* %80, i64 1
  %85 = icmp eq i32* %84, %75
  br i1 %85, label %97, label %79

86:                                               ; preds = %79
  %87 = add i32 %74, 4
  %88 = icmp ult i32 %81, %87
  br i1 %88, label %89, label %97

89:                                               ; preds = %86
  %90 = ptrtoint i8* %41 to i64
  %91 = sub i64 %90, %31
  %92 = trunc i64 %91 to i32
  %93 = sub i32 4, %92
  %94 = add i32 %93, %81
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %41, i64 %95
  br label %141

97:                                               ; preds = %83, %86, %71
  %98 = phi i32* [ %80, %86 ], [ %42, %71 ], [ %75, %83 ]
  %99 = call i8* @_Znwm(i64 24) #13
  %100 = bitcast i8* %99 to i32 (...)***
  %101 = getelementptr inbounds i8, i8* %99, i64 8
  %102 = bitcast i8* %101 to i32*
  store i32 %74, i32* %102, align 8
  %103 = getelementptr inbounds i8, i8* %99, i64 12
  %104 = bitcast i8* %103 to i32*
  store i32 -1, i32* %104, align 4
  %105 = getelementptr inbounds i8, i8* %99, i64 16
  %106 = bitcast i8* %105 to i64*
  store i64 -1, i64* %106, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN9courgette20DisassemblerElf32X8611TypedRVAX86E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %100, align 8
  %107 = ptrtoint i8* %99 to i64
  %108 = bitcast i8* %69 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = add i32 %109, 4
  store i32 %110, i32* %104, align 4
  %111 = add i32 %110, %74
  %112 = call zeroext i1 @_ZNK9courgette17DisassemblerElf3216IsValidTargetRVAEj(%"class.courgette::DisassemblerElf32"* %21, i32 %111) #12
  br i1 %112, label %113, label %132

113:                                              ; preds = %97
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #12
  store i64 %107, i64* %34, align 8
  %114 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %35, align 8
  %115 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %36, align 8
  %116 = icmp ult %"class.std::__1::unique_ptr"* %114, %115
  br i1 %116, label %117, label %121

117:                                              ; preds = %113
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %38, align 8
  %118 = bitcast %"class.std::__1::unique_ptr"* %114 to i64*
  store i64 %107, i64* %118, align 8
  %119 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %114, i64 1
  %120 = ptrtoint %"class.std::__1::unique_ptr"* %119 to i64
  store i64 %120, i64* %39, align 8
  br label %122

121:                                              ; preds = %113
  call void @_ZNSt3__16vectorINS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_(%"class.std::__1::vector.15"* %37, %"class.std::__1::unique_ptr"* nonnull dereferenceable(8) %3) #12
  br label %122

122:                                              ; preds = %117, %121
  %123 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %38, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %38, align 8
  %124 = icmp eq %"class.courgette::DisassemblerElf32::TypedRVA"* %123, null
  br i1 %124, label %130, label %125

125:                                              ; preds = %122
  %126 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %123 to void (%"class.courgette::DisassemblerElf32::TypedRVA"*)***
  %127 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)**, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*** %126, align 8
  %128 = getelementptr inbounds void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %127, i64 1
  %129 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %128, align 8
  call void %129(%"class.courgette::DisassemblerElf32::TypedRVA"* nonnull %123) #12
  br label %130

130:                                              ; preds = %125, %122
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #12
  %131 = getelementptr inbounds i8, i8* %69, i64 4
  br label %141

132:                                              ; preds = %97
  %133 = bitcast i8* %99 to %"class.courgette::DisassemblerElf32X86::TypedRVAX86"*
  %134 = bitcast i8* %99 to void (%"class.courgette::DisassemblerElf32X86::TypedRVAX86"*)***
  %135 = load void (%"class.courgette::DisassemblerElf32X86::TypedRVAX86"*)**, void (%"class.courgette::DisassemblerElf32X86::TypedRVAX86"*)*** %134, align 8
  %136 = getelementptr inbounds void (%"class.courgette::DisassemblerElf32X86::TypedRVAX86"*)*, void (%"class.courgette::DisassemblerElf32X86::TypedRVAX86"*)** %135, i64 1
  %137 = load void (%"class.courgette::DisassemblerElf32X86::TypedRVAX86"*)*, void (%"class.courgette::DisassemblerElf32X86::TypedRVAX86"*)** %136, align 8
  call void %137(%"class.courgette::DisassemblerElf32X86::TypedRVAX86"* nonnull %133) #12
  br label %138

138:                                              ; preds = %132, %68
  %139 = phi i32* [ %42, %68 ], [ %98, %132 ]
  %140 = getelementptr inbounds i8, i8* %41, i64 1
  br label %141

141:                                              ; preds = %130, %89, %138
  %142 = phi i32* [ %139, %138 ], [ %80, %89 ], [ %98, %130 ]
  %143 = phi i8* [ %140, %138 ], [ %96, %89 ], [ %131, %130 ]
  %144 = icmp ult i8* %143, %20
  br i1 %144, label %40, label %145

145:                                              ; preds = %141, %2
  ret i1 true
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare zeroext i1 @_ZNK9courgette17DisassemblerElf3216IsValidTargetRVAEj(%"class.courgette::DisassemblerElf32"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette17DisassemblerElf328TypedRVAD2Ev(%"class.courgette::DisassemblerElf32::TypedRVA"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette20DisassemblerElf32X8611TypedRVAX86D0Ev(%"class.courgette::DisassemblerElf32X86::TypedRVAX86"*) unnamed_addr #1 comdat align 2 {
  %2 = bitcast %"class.courgette::DisassemblerElf32X86::TypedRVAX86"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #13
  ret void
}

declare i32 @_ZNK9courgette17DisassemblerElf3215FileOffsetToRVAEm(%"class.courgette::DisassemblerElf32"*, i64) unnamed_addr #3

declare i64 @_ZNK9courgette17DisassemblerElf3215RVAToFileOffsetEj(%"class.courgette::DisassemblerElf32"*, i32) unnamed_addr #3

declare i8* @_ZNK9courgette12Disassembler19FileOffsetToPointerEm(%"class.courgette::Disassembler"*, i64) unnamed_addr #3

declare i8* @_ZNK9courgette12Disassembler12RVAToPointerEj(%"class.courgette::Disassembler"*, i32) unnamed_addr #3

declare i32 @_ZNK9courgette17DisassemblerElf3218PointerToTargetRVAEPKh(%"class.courgette::DisassemblerElf32"*, i8*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette17DisassemblerElf32D2Ev(%"class.courgette::DisassemblerElf32"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [22 x i8*] }, { [22 x i8*] }* @_ZTVN9courgette17DisassemblerElf32E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 10
  %4 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %6 = icmp eq %"class.std::__1::unique_ptr"* %5, null
  br i1 %6, label %30, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.std::__1::unique_ptr"* %5 to i8*
  %9 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 10, i32 0, i32 1
  %10 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %9, align 8
  %11 = icmp eq %"class.std::__1::unique_ptr"* %10, %5
  br i1 %11, label %28, label %12

12:                                               ; preds = %7, %23
  %13 = phi %"class.std::__1::unique_ptr"* [ %14, %23 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 -1
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %15, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %15, align 8
  %17 = icmp eq %"class.courgette::DisassemblerElf32::TypedRVA"* %16, null
  br i1 %17, label %23, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %16 to void (%"class.courgette::DisassemblerElf32::TypedRVA"*)***
  %20 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)**, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %20, i64 1
  %22 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %21, align 8
  tail call void %22(%"class.courgette::DisassemblerElf32::TypedRVA"* nonnull %16) #12
  br label %23

23:                                               ; preds = %18, %12
  %24 = icmp eq %"class.std::__1::unique_ptr"* %14, %5
  br i1 %24, label %25, label %12

25:                                               ; preds = %23
  %26 = bitcast %"class.std::__1::vector.15"* %3 to i8**
  %27 = load i8*, i8** %26, align 8
  br label %28

28:                                               ; preds = %25, %7
  %29 = phi i8* [ %27, %25 ], [ %8, %7 ]
  store %"class.std::__1::unique_ptr"* %5, %"class.std::__1::unique_ptr"** %9, align 8
  tail call void @_ZdlPv(i8* %29) #13
  br label %30

30:                                               ; preds = %1, %28
  %31 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 9, i32 0, i32 0
  %32 = load i32*, i32** %31, align 8
  %33 = icmp eq i32* %32, null
  br i1 %33, label %39, label %34

34:                                               ; preds = %30
  %35 = ptrtoint i32* %32 to i64
  %36 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 9, i32 0, i32 1
  %37 = bitcast i32** %36 to i64*
  store i64 %35, i64* %37, align 8
  %38 = bitcast i32* %32 to i8*
  tail call void @_ZdlPv(i8* %38) #13
  br label %39

39:                                               ; preds = %30, %34
  %40 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 4, i32 0, i32 0
  %41 = load i16*, i16** %40, align 8
  %42 = icmp eq i16* %41, null
  br i1 %42, label %48, label %43

43:                                               ; preds = %39
  %44 = ptrtoint i16* %41 to i64
  %45 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 4, i32 0, i32 1
  %46 = bitcast i16** %45 to i64*
  store i64 %44, i64* %46, align 8
  %47 = bitcast i16* %41 to i8*
  tail call void @_ZdlPv(i8* %47) #13
  br label %48

48:                                               ; preds = %39, %43
  %49 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3, i32 0, i32 0
  %50 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %49, align 8
  %51 = icmp eq %struct.Elf32_Shdr* %50, null
  br i1 %51, label %57, label %52

52:                                               ; preds = %48
  %53 = ptrtoint %struct.Elf32_Shdr* %50 to i64
  %54 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3, i32 0, i32 1
  %55 = bitcast %struct.Elf32_Shdr** %54 to i64*
  store i64 %53, i64* %55, align 8
  %56 = bitcast %struct.Elf32_Shdr* %50 to i8*
  tail call void @_ZdlPv(i8* %56) #13
  br label %57

57:                                               ; preds = %48, %52
  %58 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0
  tail call void @_ZN9courgette12DisassemblerD2Ev(%"class.courgette::Disassembler"* %58) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette20DisassemblerElf32X86D0Ev(%"class.courgette::DisassemblerElf32X86"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.courgette::DisassemblerElf32X86", %"class.courgette::DisassemblerElf32X86"* %0, i64 0, i32 0
  tail call void @_ZN9courgette17DisassemblerElf32D2Ev(%"class.courgette::DisassemblerElf32"* %2) #12
  %3 = bitcast %"class.courgette::DisassemblerElf32X86"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK9courgette20DisassemblerElf32X864kindEv(%"class.courgette::DisassemblerElf32X86"*) unnamed_addr #1 comdat align 2 {
  ret i32 2
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK9courgette17DisassemblerElf3210image_baseEv(%"class.courgette::DisassemblerElf32"*) unnamed_addr #1 comdat align 2 {
  ret i64 0
}

declare zeroext i1 @_ZN9courgette17DisassemblerElf3221ExtractAbs32LocationsEv(%"class.courgette::DisassemblerElf32"*) unnamed_addr #3

declare zeroext i1 @_ZN9courgette17DisassemblerElf3221ExtractRel32LocationsEv(%"class.courgette::DisassemblerElf32"*) unnamed_addr #3

declare %"class.courgette::RvaVisitor"* @_ZN9courgette17DisassemblerElf3227CreateAbs32TargetRvaVisitorEv(%"class.courgette::DisassemblerElf32"*) unnamed_addr #3

declare %"class.courgette::RvaVisitor"* @_ZN9courgette17DisassemblerElf3227CreateRel32TargetRvaVisitorEv(%"class.courgette::DisassemblerElf32"*) unnamed_addr #3

declare void @_ZN9courgette17DisassemblerElf3226RemoveUnusedRel32LocationsEPNS_15AssemblyProgramE(%"class.courgette::DisassemblerElf32"*, %"class.courgette::AssemblyProgram"*) unnamed_addr #3

declare zeroext i1 @_ZN9courgette17DisassemblerElf3211ParseHeaderEv(%"class.courgette::DisassemblerElf32"*) unnamed_addr #3

declare void @_ZN9courgette17DisassemblerElf3223GetInstructionGeneratorEPNS_15AssemblyProgramE() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK9courgette20DisassemblerElf32X865ElfEMEv(%"class.courgette::DisassemblerElf32X86"*) unnamed_addr #1 comdat align 2 {
  ret i32 3
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN9courgette12DisassemblerD2Ev(%"class.courgette::Disassembler"*) unnamed_addr #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_(%"class.std::__1::vector.15"*, %"class.std::__1::unique_ptr"* dereferenceable(8)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.15"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.15"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #14
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #14
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #13
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"class.courgette::DisassemblerElf32::TypedRVA"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !2

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr"*
  %138 = icmp eq %"class.std::__1::unique_ptr"* %133, %137
  br i1 %138, label %152, label %139

139:                                              ; preds = %132, %150
  %140 = phi %"class.std::__1::unique_ptr"* [ %141, %150 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %142, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %142, align 8
  %144 = icmp eq %"class.courgette::DisassemblerElf32::TypedRVA"* %143, null
  br i1 %144, label %150, label %145

145:                                              ; preds = %139
  %146 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %143 to void (%"class.courgette::DisassemblerElf32::TypedRVA"*)***
  %147 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)**, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*** %146, align 8
  %148 = getelementptr inbounds void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %147, i64 1
  %149 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %148, align 8
  tail call void %149(%"class.courgette::DisassemblerElf32::TypedRVA"* nonnull %143) #12
  br label %150

150:                                              ; preds = %145, %139
  %151 = icmp eq %"class.std::__1::unique_ptr"* %141, %137
  br i1 %151, label %152, label %139

152:                                              ; preds = %150, %132
  %153 = icmp eq i64 %135, 0
  br i1 %153, label %156, label %154

154:                                              ; preds = %152
  %155 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %155) #13
  br label %156

156:                                              ; preds = %152, %154
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #11

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
