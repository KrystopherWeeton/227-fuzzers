; ModuleID = '../../third_party/webrtc/common_audio/signal_processing/ilbc_specific_functions.c'
source_filename = "../../third_party/webrtc/common_audio/signal_processing/ilbc_specific_functions.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebRtcSpl_ReverseOrderMultArrayElements(i16* nocapture, i16* nocapture readonly, i16* nocapture readonly, i64, i16 signext) local_unnamed_addr #0 {
  %6 = icmp eq i64 %3, 0
  br i1 %6, label %180, label %7

7:                                                ; preds = %5
  %8 = sext i16 %4 to i32
  %9 = icmp ult i64 %3, 8
  br i1 %9, label %99, label %10

10:                                               ; preds = %7
  %11 = getelementptr i16, i16* %0, i64 %3
  %12 = getelementptr i16, i16* %1, i64 %3
  %13 = sub i64 1, %3
  %14 = getelementptr i16, i16* %2, i64 %13
  %15 = getelementptr i16, i16* %2, i64 1
  %16 = icmp ugt i16* %12, %0
  %17 = icmp ugt i16* %11, %1
  %18 = and i1 %16, %17
  %19 = icmp ugt i16* %15, %0
  %20 = icmp ult i16* %14, %11
  %21 = and i1 %19, %20
  %22 = or i1 %18, %21
  br i1 %22, label %99, label %23

23:                                               ; preds = %10
  %24 = and i64 %3, -8
  %25 = sub i64 0, %24
  %26 = getelementptr i16, i16* %2, i64 %25
  %27 = getelementptr i16, i16* %1, i64 %24
  %28 = getelementptr i16, i16* %0, i64 %24
  %29 = insertelement <8 x i32> undef, i32 %8, i32 0
  %30 = shufflevector <8 x i32> %29, <8 x i32> undef, <8 x i32> zeroinitializer
  %31 = add i64 %24, -8
  %32 = lshr exact i64 %31, 3
  %33 = add nuw nsw i64 %32, 1
  %34 = and i64 %33, 1
  %35 = icmp eq i64 %31, 0
  br i1 %35, label %77, label %36

36:                                               ; preds = %23
  %37 = sub nuw nsw i64 %33, %34
  %38 = getelementptr i16, i16* %2, i64 -7
  %39 = getelementptr i16, i16* %2, i64 -7
  br label %40

40:                                               ; preds = %40, %36
  %41 = phi i64 [ 0, %36 ], [ %74, %40 ]
  %42 = phi i64 [ %37, %36 ], [ %75, %40 ]
  %43 = sub i64 0, %41
  %44 = getelementptr i16, i16* %1, i64 %41
  %45 = getelementptr i16, i16* %0, i64 %41
  %46 = bitcast i16* %44 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 2, !alias.scope !2
  %48 = sext <8 x i16> %47 to <8 x i32>
  %49 = getelementptr i16, i16* %38, i64 %43
  %50 = bitcast i16* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 2, !alias.scope !5
  %52 = shufflevector <8 x i16> %51, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %53 = sext <8 x i16> %52 to <8 x i32>
  %54 = mul nsw <8 x i32> %53, %48
  %55 = ashr <8 x i32> %54, %30
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %45 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !7, !noalias !9
  %58 = or i64 %41, 8
  %59 = sub nuw nsw i64 -8, %41
  %60 = getelementptr i16, i16* %1, i64 %58
  %61 = getelementptr i16, i16* %0, i64 %58
  %62 = bitcast i16* %60 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !2
  %64 = sext <8 x i16> %63 to <8 x i32>
  %65 = getelementptr i16, i16* %39, i64 %59
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2, !alias.scope !5
  %68 = shufflevector <8 x i16> %67, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %69 = sext <8 x i16> %68 to <8 x i32>
  %70 = mul nsw <8 x i32> %69, %64
  %71 = ashr <8 x i32> %70, %30
  %72 = trunc <8 x i32> %71 to <8 x i16>
  %73 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %73, align 2, !alias.scope !7, !noalias !9
  %74 = add i64 %41, 16
  %75 = add i64 %42, -2
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %40, !llvm.loop !10

77:                                               ; preds = %40, %23
  %78 = phi i64 [ 0, %23 ], [ %74, %40 ]
  %79 = icmp eq i64 %34, 0
  br i1 %79, label %97, label %80

80:                                               ; preds = %77
  %81 = sub i64 0, %78
  %82 = getelementptr i16, i16* %2, i64 -7
  %83 = getelementptr i16, i16* %1, i64 %78
  %84 = getelementptr i16, i16* %0, i64 %78
  %85 = bitcast i16* %83 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !2
  %87 = sext <8 x i16> %86 to <8 x i32>
  %88 = getelementptr i16, i16* %82, i64 %81
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !5
  %91 = shufflevector <8 x i16> %90, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %92 = sext <8 x i16> %91 to <8 x i32>
  %93 = mul nsw <8 x i32> %92, %87
  %94 = ashr <8 x i32> %93, %30
  %95 = trunc <8 x i32> %94 to <8 x i16>
  %96 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %96, align 2, !alias.scope !7, !noalias !9
  br label %97

97:                                               ; preds = %77, %80
  %98 = icmp eq i64 %24, %3
  br i1 %98, label %180, label %99

99:                                               ; preds = %97, %10, %7
  %100 = phi i16* [ %2, %10 ], [ %2, %7 ], [ %26, %97 ]
  %101 = phi i16* [ %1, %10 ], [ %1, %7 ], [ %27, %97 ]
  %102 = phi i16* [ %0, %10 ], [ %0, %7 ], [ %28, %97 ]
  %103 = phi i64 [ 0, %10 ], [ 0, %7 ], [ %24, %97 ]
  %104 = xor i64 %103, -1
  %105 = add i64 %104, %3
  %106 = and i64 %3, 3
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %127, label %108

108:                                              ; preds = %99, %108
  %109 = phi i16* [ %117, %108 ], [ %100, %99 ]
  %110 = phi i16* [ %114, %108 ], [ %101, %99 ]
  %111 = phi i16* [ %123, %108 ], [ %102, %99 ]
  %112 = phi i64 [ %124, %108 ], [ %103, %99 ]
  %113 = phi i64 [ %125, %108 ], [ %106, %99 ]
  %114 = getelementptr inbounds i16, i16* %110, i64 1
  %115 = load i16, i16* %110, align 2
  %116 = sext i16 %115 to i32
  %117 = getelementptr inbounds i16, i16* %109, i64 -1
  %118 = load i16, i16* %109, align 2
  %119 = sext i16 %118 to i32
  %120 = mul nsw i32 %119, %116
  %121 = ashr i32 %120, %8
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %111, i64 1
  store i16 %122, i16* %111, align 2
  %124 = add nuw i64 %112, 1
  %125 = add i64 %113, -1
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %127, label %108, !llvm.loop !12

127:                                              ; preds = %108, %99
  %128 = phi i16* [ %100, %99 ], [ %117, %108 ]
  %129 = phi i16* [ %101, %99 ], [ %114, %108 ]
  %130 = phi i16* [ %102, %99 ], [ %123, %108 ]
  %131 = phi i64 [ %103, %99 ], [ %124, %108 ]
  %132 = icmp ult i64 %105, 3
  br i1 %132, label %180, label %133

133:                                              ; preds = %127, %133
  %134 = phi i16* [ %171, %133 ], [ %128, %127 ]
  %135 = phi i16* [ %168, %133 ], [ %129, %127 ]
  %136 = phi i16* [ %177, %133 ], [ %130, %127 ]
  %137 = phi i64 [ %178, %133 ], [ %131, %127 ]
  %138 = getelementptr inbounds i16, i16* %135, i64 1
  %139 = load i16, i16* %135, align 2
  %140 = sext i16 %139 to i32
  %141 = getelementptr inbounds i16, i16* %134, i64 -1
  %142 = load i16, i16* %134, align 2
  %143 = sext i16 %142 to i32
  %144 = mul nsw i32 %143, %140
  %145 = ashr i32 %144, %8
  %146 = trunc i32 %145 to i16
  %147 = getelementptr inbounds i16, i16* %136, i64 1
  store i16 %146, i16* %136, align 2
  %148 = getelementptr inbounds i16, i16* %135, i64 2
  %149 = load i16, i16* %138, align 2
  %150 = sext i16 %149 to i32
  %151 = getelementptr inbounds i16, i16* %134, i64 -2
  %152 = load i16, i16* %141, align 2
  %153 = sext i16 %152 to i32
  %154 = mul nsw i32 %153, %150
  %155 = ashr i32 %154, %8
  %156 = trunc i32 %155 to i16
  %157 = getelementptr inbounds i16, i16* %136, i64 2
  store i16 %156, i16* %147, align 2
  %158 = getelementptr inbounds i16, i16* %135, i64 3
  %159 = load i16, i16* %148, align 2
  %160 = sext i16 %159 to i32
  %161 = getelementptr inbounds i16, i16* %134, i64 -3
  %162 = load i16, i16* %151, align 2
  %163 = sext i16 %162 to i32
  %164 = mul nsw i32 %163, %160
  %165 = ashr i32 %164, %8
  %166 = trunc i32 %165 to i16
  %167 = getelementptr inbounds i16, i16* %136, i64 3
  store i16 %166, i16* %157, align 2
  %168 = getelementptr inbounds i16, i16* %135, i64 4
  %169 = load i16, i16* %158, align 2
  %170 = sext i16 %169 to i32
  %171 = getelementptr inbounds i16, i16* %134, i64 -4
  %172 = load i16, i16* %161, align 2
  %173 = sext i16 %172 to i32
  %174 = mul nsw i32 %173, %170
  %175 = ashr i32 %174, %8
  %176 = trunc i32 %175 to i16
  %177 = getelementptr inbounds i16, i16* %136, i64 4
  store i16 %176, i16* %167, align 2
  %178 = add nuw i64 %137, 4
  %179 = icmp eq i64 %178, %3
  br i1 %179, label %180, label %133, !llvm.loop !14

180:                                              ; preds = %127, %133, %97, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebRtcSpl_ElementwiseVectorMult(i16* nocapture, i16* nocapture readonly, i16* nocapture readonly, i64, i16 signext) local_unnamed_addr #0 {
  %6 = icmp eq i64 %3, 0
  br i1 %6, label %168, label %7

7:                                                ; preds = %5
  %8 = sext i16 %4 to i32
  %9 = icmp ult i64 %3, 8
  br i1 %9, label %87, label %10

10:                                               ; preds = %7
  %11 = getelementptr i16, i16* %0, i64 %3
  %12 = getelementptr i16, i16* %1, i64 %3
  %13 = getelementptr i16, i16* %2, i64 %3
  %14 = icmp ugt i16* %12, %0
  %15 = icmp ugt i16* %11, %1
  %16 = and i1 %14, %15
  %17 = icmp ugt i16* %13, %0
  %18 = icmp ugt i16* %11, %2
  %19 = and i1 %17, %18
  %20 = or i1 %16, %19
  br i1 %20, label %87, label %21

21:                                               ; preds = %10
  %22 = and i64 %3, -8
  %23 = getelementptr i16, i16* %2, i64 %22
  %24 = getelementptr i16, i16* %1, i64 %22
  %25 = getelementptr i16, i16* %0, i64 %22
  %26 = insertelement <8 x i32> undef, i32 %8, i32 0
  %27 = shufflevector <8 x i32> %26, <8 x i32> undef, <8 x i32> zeroinitializer
  %28 = add i64 %22, -8
  %29 = lshr exact i64 %28, 3
  %30 = add nuw nsw i64 %29, 1
  %31 = and i64 %30, 1
  %32 = icmp eq i64 %28, 0
  br i1 %32, label %68, label %33

33:                                               ; preds = %21
  %34 = sub nuw nsw i64 %30, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %65, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %66, %35 ]
  %38 = getelementptr i16, i16* %2, i64 %36
  %39 = getelementptr i16, i16* %1, i64 %36
  %40 = getelementptr i16, i16* %0, i64 %36
  %41 = bitcast i16* %39 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 2, !alias.scope !15
  %43 = sext <8 x i16> %42 to <8 x i32>
  %44 = bitcast i16* %38 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !18
  %46 = sext <8 x i16> %45 to <8 x i32>
  %47 = mul nsw <8 x i32> %46, %43
  %48 = ashr <8 x i32> %47, %27
  %49 = trunc <8 x i32> %48 to <8 x i16>
  %50 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %50, align 2, !alias.scope !20, !noalias !22
  %51 = or i64 %36, 8
  %52 = getelementptr i16, i16* %2, i64 %51
  %53 = getelementptr i16, i16* %1, i64 %51
  %54 = getelementptr i16, i16* %0, i64 %51
  %55 = bitcast i16* %53 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2, !alias.scope !15
  %57 = sext <8 x i16> %56 to <8 x i32>
  %58 = bitcast i16* %52 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !18
  %60 = sext <8 x i16> %59 to <8 x i32>
  %61 = mul nsw <8 x i32> %60, %57
  %62 = ashr <8 x i32> %61, %27
  %63 = trunc <8 x i32> %62 to <8 x i16>
  %64 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %64, align 2, !alias.scope !20, !noalias !22
  %65 = add i64 %36, 16
  %66 = add i64 %37, -2
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %35, !llvm.loop !23

68:                                               ; preds = %35, %21
  %69 = phi i64 [ 0, %21 ], [ %65, %35 ]
  %70 = icmp eq i64 %31, 0
  br i1 %70, label %85, label %71

71:                                               ; preds = %68
  %72 = getelementptr i16, i16* %2, i64 %69
  %73 = getelementptr i16, i16* %1, i64 %69
  %74 = getelementptr i16, i16* %0, i64 %69
  %75 = bitcast i16* %73 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !15
  %77 = sext <8 x i16> %76 to <8 x i32>
  %78 = bitcast i16* %72 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !18
  %80 = sext <8 x i16> %79 to <8 x i32>
  %81 = mul nsw <8 x i32> %80, %77
  %82 = ashr <8 x i32> %81, %27
  %83 = trunc <8 x i32> %82 to <8 x i16>
  %84 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %84, align 2, !alias.scope !20, !noalias !22
  br label %85

85:                                               ; preds = %68, %71
  %86 = icmp eq i64 %22, %3
  br i1 %86, label %168, label %87

87:                                               ; preds = %85, %10, %7
  %88 = phi i16* [ %2, %10 ], [ %2, %7 ], [ %23, %85 ]
  %89 = phi i16* [ %1, %10 ], [ %1, %7 ], [ %24, %85 ]
  %90 = phi i16* [ %0, %10 ], [ %0, %7 ], [ %25, %85 ]
  %91 = phi i64 [ 0, %10 ], [ 0, %7 ], [ %22, %85 ]
  %92 = xor i64 %91, -1
  %93 = add i64 %92, %3
  %94 = and i64 %3, 3
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %115, label %96

96:                                               ; preds = %87, %96
  %97 = phi i16* [ %105, %96 ], [ %88, %87 ]
  %98 = phi i16* [ %102, %96 ], [ %89, %87 ]
  %99 = phi i16* [ %111, %96 ], [ %90, %87 ]
  %100 = phi i64 [ %112, %96 ], [ %91, %87 ]
  %101 = phi i64 [ %113, %96 ], [ %94, %87 ]
  %102 = getelementptr inbounds i16, i16* %98, i64 1
  %103 = load i16, i16* %98, align 2
  %104 = sext i16 %103 to i32
  %105 = getelementptr inbounds i16, i16* %97, i64 1
  %106 = load i16, i16* %97, align 2
  %107 = sext i16 %106 to i32
  %108 = mul nsw i32 %107, %104
  %109 = ashr i32 %108, %8
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %99, i64 1
  store i16 %110, i16* %99, align 2
  %112 = add nuw i64 %100, 1
  %113 = add i64 %101, -1
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %96, !llvm.loop !24

115:                                              ; preds = %96, %87
  %116 = phi i16* [ %88, %87 ], [ %105, %96 ]
  %117 = phi i16* [ %89, %87 ], [ %102, %96 ]
  %118 = phi i16* [ %90, %87 ], [ %111, %96 ]
  %119 = phi i64 [ %91, %87 ], [ %112, %96 ]
  %120 = icmp ult i64 %93, 3
  br i1 %120, label %168, label %121

121:                                              ; preds = %115, %121
  %122 = phi i16* [ %159, %121 ], [ %116, %115 ]
  %123 = phi i16* [ %156, %121 ], [ %117, %115 ]
  %124 = phi i16* [ %165, %121 ], [ %118, %115 ]
  %125 = phi i64 [ %166, %121 ], [ %119, %115 ]
  %126 = getelementptr inbounds i16, i16* %123, i64 1
  %127 = load i16, i16* %123, align 2
  %128 = sext i16 %127 to i32
  %129 = getelementptr inbounds i16, i16* %122, i64 1
  %130 = load i16, i16* %122, align 2
  %131 = sext i16 %130 to i32
  %132 = mul nsw i32 %131, %128
  %133 = ashr i32 %132, %8
  %134 = trunc i32 %133 to i16
  %135 = getelementptr inbounds i16, i16* %124, i64 1
  store i16 %134, i16* %124, align 2
  %136 = getelementptr inbounds i16, i16* %123, i64 2
  %137 = load i16, i16* %126, align 2
  %138 = sext i16 %137 to i32
  %139 = getelementptr inbounds i16, i16* %122, i64 2
  %140 = load i16, i16* %129, align 2
  %141 = sext i16 %140 to i32
  %142 = mul nsw i32 %141, %138
  %143 = ashr i32 %142, %8
  %144 = trunc i32 %143 to i16
  %145 = getelementptr inbounds i16, i16* %124, i64 2
  store i16 %144, i16* %135, align 2
  %146 = getelementptr inbounds i16, i16* %123, i64 3
  %147 = load i16, i16* %136, align 2
  %148 = sext i16 %147 to i32
  %149 = getelementptr inbounds i16, i16* %122, i64 3
  %150 = load i16, i16* %139, align 2
  %151 = sext i16 %150 to i32
  %152 = mul nsw i32 %151, %148
  %153 = ashr i32 %152, %8
  %154 = trunc i32 %153 to i16
  %155 = getelementptr inbounds i16, i16* %124, i64 3
  store i16 %154, i16* %145, align 2
  %156 = getelementptr inbounds i16, i16* %123, i64 4
  %157 = load i16, i16* %146, align 2
  %158 = sext i16 %157 to i32
  %159 = getelementptr inbounds i16, i16* %122, i64 4
  %160 = load i16, i16* %149, align 2
  %161 = sext i16 %160 to i32
  %162 = mul nsw i32 %161, %158
  %163 = ashr i32 %162, %8
  %164 = trunc i32 %163 to i16
  %165 = getelementptr inbounds i16, i16* %124, i64 4
  store i16 %164, i16* %155, align 2
  %166 = add nuw i64 %125, 4
  %167 = icmp eq i64 %166, %3
  br i1 %167, label %168, label %121, !llvm.loop !25

168:                                              ; preds = %115, %121, %85, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebRtcSpl_AddVectorsAndShift(i16* nocapture, i16* nocapture readonly, i16* nocapture readonly, i64, i16 signext) local_unnamed_addr #0 {
  %6 = icmp eq i64 %3, 0
  br i1 %6, label %168, label %7

7:                                                ; preds = %5
  %8 = sext i16 %4 to i32
  %9 = icmp ult i64 %3, 8
  br i1 %9, label %88, label %10

10:                                               ; preds = %7
  %11 = getelementptr i16, i16* %0, i64 %3
  %12 = getelementptr i16, i16* %1, i64 %3
  %13 = getelementptr i16, i16* %2, i64 %3
  %14 = icmp ugt i16* %12, %0
  %15 = icmp ugt i16* %11, %1
  %16 = and i1 %14, %15
  %17 = icmp ugt i16* %13, %0
  %18 = icmp ugt i16* %11, %2
  %19 = and i1 %17, %18
  %20 = or i1 %16, %19
  br i1 %20, label %88, label %21

21:                                               ; preds = %10
  %22 = and i64 %3, -8
  %23 = getelementptr i16, i16* %2, i64 %22
  %24 = getelementptr i16, i16* %1, i64 %22
  %25 = getelementptr i16, i16* %0, i64 %22
  %26 = sub i64 %3, %22
  %27 = insertelement <8 x i32> undef, i32 %8, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  %29 = add i64 %22, -8
  %30 = lshr exact i64 %29, 3
  %31 = add nuw nsw i64 %30, 1
  %32 = and i64 %31, 1
  %33 = icmp eq i64 %29, 0
  br i1 %33, label %69, label %34

34:                                               ; preds = %21
  %35 = sub nuw nsw i64 %31, %32
  br label %36

36:                                               ; preds = %36, %34
  %37 = phi i64 [ 0, %34 ], [ %66, %36 ]
  %38 = phi i64 [ %35, %34 ], [ %67, %36 ]
  %39 = getelementptr i16, i16* %2, i64 %37
  %40 = getelementptr i16, i16* %1, i64 %37
  %41 = getelementptr i16, i16* %0, i64 %37
  %42 = bitcast i16* %40 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 2, !alias.scope !26
  %44 = sext <8 x i16> %43 to <8 x i32>
  %45 = bitcast i16* %39 to <8 x i16>*
  %46 = load <8 x i16>, <8 x i16>* %45, align 2, !alias.scope !29
  %47 = sext <8 x i16> %46 to <8 x i32>
  %48 = add nsw <8 x i32> %47, %44
  %49 = ashr <8 x i32> %48, %28
  %50 = trunc <8 x i32> %49 to <8 x i16>
  %51 = bitcast i16* %41 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %51, align 2, !alias.scope !31, !noalias !33
  %52 = or i64 %37, 8
  %53 = getelementptr i16, i16* %2, i64 %52
  %54 = getelementptr i16, i16* %1, i64 %52
  %55 = getelementptr i16, i16* %0, i64 %52
  %56 = bitcast i16* %54 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 2, !alias.scope !26
  %58 = sext <8 x i16> %57 to <8 x i32>
  %59 = bitcast i16* %53 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !29
  %61 = sext <8 x i16> %60 to <8 x i32>
  %62 = add nsw <8 x i32> %61, %58
  %63 = ashr <8 x i32> %62, %28
  %64 = trunc <8 x i32> %63 to <8 x i16>
  %65 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %65, align 2, !alias.scope !31, !noalias !33
  %66 = add i64 %37, 16
  %67 = add i64 %38, -2
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %36, !llvm.loop !34

69:                                               ; preds = %36, %21
  %70 = phi i64 [ 0, %21 ], [ %66, %36 ]
  %71 = icmp eq i64 %32, 0
  br i1 %71, label %86, label %72

72:                                               ; preds = %69
  %73 = getelementptr i16, i16* %2, i64 %70
  %74 = getelementptr i16, i16* %1, i64 %70
  %75 = getelementptr i16, i16* %0, i64 %70
  %76 = bitcast i16* %74 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2, !alias.scope !26
  %78 = sext <8 x i16> %77 to <8 x i32>
  %79 = bitcast i16* %73 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2, !alias.scope !29
  %81 = sext <8 x i16> %80 to <8 x i32>
  %82 = add nsw <8 x i32> %81, %78
  %83 = ashr <8 x i32> %82, %28
  %84 = trunc <8 x i32> %83 to <8 x i16>
  %85 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %85, align 2, !alias.scope !31, !noalias !33
  br label %86

86:                                               ; preds = %69, %72
  %87 = icmp eq i64 %22, %3
  br i1 %87, label %168, label %88

88:                                               ; preds = %86, %10, %7
  %89 = phi i16* [ %2, %10 ], [ %2, %7 ], [ %23, %86 ]
  %90 = phi i16* [ %1, %10 ], [ %1, %7 ], [ %24, %86 ]
  %91 = phi i16* [ %0, %10 ], [ %0, %7 ], [ %25, %86 ]
  %92 = phi i64 [ %3, %10 ], [ %3, %7 ], [ %26, %86 ]
  %93 = add i64 %92, -1
  %94 = and i64 %92, 3
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %115, label %96

96:                                               ; preds = %88, %96
  %97 = phi i16* [ %105, %96 ], [ %89, %88 ]
  %98 = phi i16* [ %102, %96 ], [ %90, %88 ]
  %99 = phi i16* [ %111, %96 ], [ %91, %88 ]
  %100 = phi i64 [ %112, %96 ], [ %92, %88 ]
  %101 = phi i64 [ %113, %96 ], [ %94, %88 ]
  %102 = getelementptr inbounds i16, i16* %98, i64 1
  %103 = load i16, i16* %98, align 2
  %104 = sext i16 %103 to i32
  %105 = getelementptr inbounds i16, i16* %97, i64 1
  %106 = load i16, i16* %97, align 2
  %107 = sext i16 %106 to i32
  %108 = add nsw i32 %107, %104
  %109 = ashr i32 %108, %8
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %99, i64 1
  store i16 %110, i16* %99, align 2
  %112 = add i64 %100, -1
  %113 = add i64 %101, -1
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %96, !llvm.loop !35

115:                                              ; preds = %96, %88
  %116 = phi i16* [ %89, %88 ], [ %105, %96 ]
  %117 = phi i16* [ %90, %88 ], [ %102, %96 ]
  %118 = phi i16* [ %91, %88 ], [ %111, %96 ]
  %119 = phi i64 [ %92, %88 ], [ %112, %96 ]
  %120 = icmp ult i64 %93, 3
  br i1 %120, label %168, label %121

121:                                              ; preds = %115, %121
  %122 = phi i16* [ %159, %121 ], [ %116, %115 ]
  %123 = phi i16* [ %156, %121 ], [ %117, %115 ]
  %124 = phi i16* [ %165, %121 ], [ %118, %115 ]
  %125 = phi i64 [ %166, %121 ], [ %119, %115 ]
  %126 = getelementptr inbounds i16, i16* %123, i64 1
  %127 = load i16, i16* %123, align 2
  %128 = sext i16 %127 to i32
  %129 = getelementptr inbounds i16, i16* %122, i64 1
  %130 = load i16, i16* %122, align 2
  %131 = sext i16 %130 to i32
  %132 = add nsw i32 %131, %128
  %133 = ashr i32 %132, %8
  %134 = trunc i32 %133 to i16
  %135 = getelementptr inbounds i16, i16* %124, i64 1
  store i16 %134, i16* %124, align 2
  %136 = getelementptr inbounds i16, i16* %123, i64 2
  %137 = load i16, i16* %126, align 2
  %138 = sext i16 %137 to i32
  %139 = getelementptr inbounds i16, i16* %122, i64 2
  %140 = load i16, i16* %129, align 2
  %141 = sext i16 %140 to i32
  %142 = add nsw i32 %141, %138
  %143 = ashr i32 %142, %8
  %144 = trunc i32 %143 to i16
  %145 = getelementptr inbounds i16, i16* %124, i64 2
  store i16 %144, i16* %135, align 2
  %146 = getelementptr inbounds i16, i16* %123, i64 3
  %147 = load i16, i16* %136, align 2
  %148 = sext i16 %147 to i32
  %149 = getelementptr inbounds i16, i16* %122, i64 3
  %150 = load i16, i16* %139, align 2
  %151 = sext i16 %150 to i32
  %152 = add nsw i32 %151, %148
  %153 = ashr i32 %152, %8
  %154 = trunc i32 %153 to i16
  %155 = getelementptr inbounds i16, i16* %124, i64 3
  store i16 %154, i16* %145, align 2
  %156 = getelementptr inbounds i16, i16* %123, i64 4
  %157 = load i16, i16* %146, align 2
  %158 = sext i16 %157 to i32
  %159 = getelementptr inbounds i16, i16* %122, i64 4
  %160 = load i16, i16* %149, align 2
  %161 = sext i16 %160 to i32
  %162 = add nsw i32 %161, %158
  %163 = ashr i32 %162, %8
  %164 = trunc i32 %163 to i16
  %165 = getelementptr inbounds i16, i16* %124, i64 4
  store i16 %164, i16* %155, align 2
  %166 = add i64 %125, -4
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %121, !llvm.loop !36

168:                                              ; preds = %115, %121, %86, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebRtcSpl_AddAffineVectorToVector(i16* nocapture, i16* nocapture readonly, i16 signext, i32, i16 signext, i64) local_unnamed_addr #0 {
  %7 = icmp eq i64 %5, 0
  br i1 %7, label %131, label %8

8:                                                ; preds = %6
  %9 = sext i16 %2 to i32
  %10 = sext i16 %4 to i32
  %11 = icmp ult i64 %5, 8
  br i1 %11, label %85, label %12

12:                                               ; preds = %8
  %13 = getelementptr i16, i16* %0, i64 %5
  %14 = getelementptr i16, i16* %1, i64 %5
  %15 = icmp ugt i16* %14, %0
  %16 = icmp ugt i16* %13, %1
  %17 = and i1 %15, %16
  br i1 %17, label %85, label %18

18:                                               ; preds = %12
  %19 = and i64 %5, -8
  %20 = insertelement <8 x i32> undef, i32 %9, i32 0
  %21 = shufflevector <8 x i32> %20, <8 x i32> undef, <8 x i32> zeroinitializer
  %22 = insertelement <8 x i32> undef, i32 %3, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = insertelement <8 x i32> undef, i32 %10, i32 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> undef, <8 x i32> zeroinitializer
  %26 = add i64 %19, -8
  %27 = lshr exact i64 %26, 3
  %28 = add nuw nsw i64 %27, 1
  %29 = and i64 %28, 1
  %30 = icmp eq i64 %26, 0
  br i1 %30, label %66, label %31

31:                                               ; preds = %18
  %32 = sub nuw nsw i64 %28, %29
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi i64 [ 0, %31 ], [ %63, %33 ]
  %35 = phi i64 [ %32, %31 ], [ %64, %33 ]
  %36 = getelementptr inbounds i16, i16* %1, i64 %34
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 2, !alias.scope !37
  %39 = sext <8 x i16> %38 to <8 x i32>
  %40 = mul nsw <8 x i32> %21, %39
  %41 = add nsw <8 x i32> %40, %23
  %42 = ashr <8 x i32> %41, %25
  %43 = getelementptr inbounds i16, i16* %0, i64 %34
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !40, !noalias !37
  %46 = trunc <8 x i32> %42 to <8 x i16>
  %47 = add <8 x i16> %45, %46
  %48 = bitcast i16* %43 to <8 x i16>*
  store <8 x i16> %47, <8 x i16>* %48, align 2, !alias.scope !40, !noalias !37
  %49 = or i64 %34, 8
  %50 = getelementptr inbounds i16, i16* %1, i64 %49
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 2, !alias.scope !37
  %53 = sext <8 x i16> %52 to <8 x i32>
  %54 = mul nsw <8 x i32> %21, %53
  %55 = add nsw <8 x i32> %54, %23
  %56 = ashr <8 x i32> %55, %25
  %57 = getelementptr inbounds i16, i16* %0, i64 %49
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !40, !noalias !37
  %60 = trunc <8 x i32> %56 to <8 x i16>
  %61 = add <8 x i16> %59, %60
  %62 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %61, <8 x i16>* %62, align 2, !alias.scope !40, !noalias !37
  %63 = add i64 %34, 16
  %64 = add i64 %35, -2
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %66, label %33, !llvm.loop !42

66:                                               ; preds = %33, %18
  %67 = phi i64 [ 0, %18 ], [ %63, %33 ]
  %68 = icmp eq i64 %29, 0
  br i1 %68, label %83, label %69

69:                                               ; preds = %66
  %70 = getelementptr inbounds i16, i16* %1, i64 %67
  %71 = bitcast i16* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !37
  %73 = sext <8 x i16> %72 to <8 x i32>
  %74 = mul nsw <8 x i32> %21, %73
  %75 = add nsw <8 x i32> %74, %23
  %76 = ashr <8 x i32> %75, %25
  %77 = getelementptr inbounds i16, i16* %0, i64 %67
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !40, !noalias !37
  %80 = trunc <8 x i32> %76 to <8 x i16>
  %81 = add <8 x i16> %79, %80
  %82 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %82, align 2, !alias.scope !40, !noalias !37
  br label %83

83:                                               ; preds = %66, %69
  %84 = icmp eq i64 %19, %5
  br i1 %84, label %131, label %85

85:                                               ; preds = %83, %12, %8
  %86 = phi i64 [ 0, %12 ], [ 0, %8 ], [ %19, %83 ]
  %87 = xor i64 %86, -1
  %88 = and i64 %5, 1
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %102, label %90

90:                                               ; preds = %85
  %91 = getelementptr inbounds i16, i16* %1, i64 %86
  %92 = load i16, i16* %91, align 2
  %93 = sext i16 %92 to i32
  %94 = mul nsw i32 %93, %9
  %95 = add nsw i32 %94, %3
  %96 = ashr i32 %95, %10
  %97 = getelementptr inbounds i16, i16* %0, i64 %86
  %98 = load i16, i16* %97, align 2
  %99 = trunc i32 %96 to i16
  %100 = add i16 %98, %99
  store i16 %100, i16* %97, align 2
  %101 = or i64 %86, 1
  br label %102

102:                                              ; preds = %85, %90
  %103 = phi i64 [ %86, %85 ], [ %101, %90 ]
  %104 = sub i64 0, %5
  %105 = icmp eq i64 %87, %104
  br i1 %105, label %131, label %106

106:                                              ; preds = %102, %106
  %107 = phi i64 [ %129, %106 ], [ %103, %102 ]
  %108 = getelementptr inbounds i16, i16* %1, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = sext i16 %109 to i32
  %111 = mul nsw i32 %110, %9
  %112 = add nsw i32 %111, %3
  %113 = ashr i32 %112, %10
  %114 = getelementptr inbounds i16, i16* %0, i64 %107
  %115 = load i16, i16* %114, align 2
  %116 = trunc i32 %113 to i16
  %117 = add i16 %115, %116
  store i16 %117, i16* %114, align 2
  %118 = add nuw i64 %107, 1
  %119 = getelementptr inbounds i16, i16* %1, i64 %118
  %120 = load i16, i16* %119, align 2
  %121 = sext i16 %120 to i32
  %122 = mul nsw i32 %121, %9
  %123 = add nsw i32 %122, %3
  %124 = ashr i32 %123, %10
  %125 = getelementptr inbounds i16, i16* %0, i64 %118
  %126 = load i16, i16* %125, align 2
  %127 = trunc i32 %124 to i16
  %128 = add i16 %126, %127
  store i16 %128, i16* %125, align 2
  %129 = add nuw i64 %107, 2
  %130 = icmp eq i64 %129, %5
  br i1 %130, label %131, label %106, !llvm.loop !43

131:                                              ; preds = %102, %106, %83, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebRtcSpl_AffineTransformVector(i16* nocapture, i16* nocapture readonly, i16 signext, i32, i16 signext, i64) local_unnamed_addr #0 {
  %7 = icmp eq i64 %5, 0
  br i1 %7, label %116, label %8

8:                                                ; preds = %6
  %9 = sext i16 %2 to i32
  %10 = sext i16 %4 to i32
  %11 = icmp ult i64 %5, 8
  br i1 %11, label %76, label %12

12:                                               ; preds = %8
  %13 = getelementptr i16, i16* %0, i64 %5
  %14 = getelementptr i16, i16* %1, i64 %5
  %15 = icmp ugt i16* %14, %0
  %16 = icmp ugt i16* %13, %1
  %17 = and i1 %15, %16
  br i1 %17, label %76, label %18

18:                                               ; preds = %12
  %19 = and i64 %5, -8
  %20 = insertelement <8 x i32> undef, i32 %9, i32 0
  %21 = shufflevector <8 x i32> %20, <8 x i32> undef, <8 x i32> zeroinitializer
  %22 = insertelement <8 x i32> undef, i32 %3, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = insertelement <8 x i32> undef, i32 %10, i32 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> undef, <8 x i32> zeroinitializer
  %26 = add i64 %19, -8
  %27 = lshr exact i64 %26, 3
  %28 = add nuw nsw i64 %27, 1
  %29 = and i64 %28, 1
  %30 = icmp eq i64 %26, 0
  br i1 %30, label %60, label %31

31:                                               ; preds = %18
  %32 = sub nuw nsw i64 %28, %29
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi i64 [ 0, %31 ], [ %57, %33 ]
  %35 = phi i64 [ %32, %31 ], [ %58, %33 ]
  %36 = getelementptr inbounds i16, i16* %1, i64 %34
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 2, !alias.scope !44
  %39 = sext <8 x i16> %38 to <8 x i32>
  %40 = mul nsw <8 x i32> %21, %39
  %41 = add nsw <8 x i32> %40, %23
  %42 = ashr <8 x i32> %41, %25
  %43 = trunc <8 x i32> %42 to <8 x i16>
  %44 = getelementptr inbounds i16, i16* %0, i64 %34
  %45 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %45, align 2, !alias.scope !47, !noalias !44
  %46 = or i64 %34, 8
  %47 = getelementptr inbounds i16, i16* %1, i64 %46
  %48 = bitcast i16* %47 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 2, !alias.scope !44
  %50 = sext <8 x i16> %49 to <8 x i32>
  %51 = mul nsw <8 x i32> %21, %50
  %52 = add nsw <8 x i32> %51, %23
  %53 = ashr <8 x i32> %52, %25
  %54 = trunc <8 x i32> %53 to <8 x i16>
  %55 = getelementptr inbounds i16, i16* %0, i64 %46
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %56, align 2, !alias.scope !47, !noalias !44
  %57 = add i64 %34, 16
  %58 = add i64 %35, -2
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %33, !llvm.loop !49

60:                                               ; preds = %33, %18
  %61 = phi i64 [ 0, %18 ], [ %57, %33 ]
  %62 = icmp eq i64 %29, 0
  br i1 %62, label %74, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds i16, i16* %1, i64 %61
  %65 = bitcast i16* %64 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2, !alias.scope !44
  %67 = sext <8 x i16> %66 to <8 x i32>
  %68 = mul nsw <8 x i32> %21, %67
  %69 = add nsw <8 x i32> %68, %23
  %70 = ashr <8 x i32> %69, %25
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %0, i64 %61
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !47, !noalias !44
  br label %74

74:                                               ; preds = %60, %63
  %75 = icmp eq i64 %19, %5
  br i1 %75, label %116, label %76

76:                                               ; preds = %74, %12, %8
  %77 = phi i64 [ 0, %12 ], [ 0, %8 ], [ %19, %74 ]
  %78 = xor i64 %77, -1
  %79 = and i64 %5, 1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %91, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds i16, i16* %1, i64 %77
  %83 = load i16, i16* %82, align 2
  %84 = sext i16 %83 to i32
  %85 = mul nsw i32 %84, %9
  %86 = add nsw i32 %85, %3
  %87 = ashr i32 %86, %10
  %88 = trunc i32 %87 to i16
  %89 = getelementptr inbounds i16, i16* %0, i64 %77
  store i16 %88, i16* %89, align 2
  %90 = or i64 %77, 1
  br label %91

91:                                               ; preds = %76, %81
  %92 = phi i64 [ %77, %76 ], [ %90, %81 ]
  %93 = sub i64 0, %5
  %94 = icmp eq i64 %78, %93
  br i1 %94, label %116, label %95

95:                                               ; preds = %91, %95
  %96 = phi i64 [ %114, %95 ], [ %92, %91 ]
  %97 = getelementptr inbounds i16, i16* %1, i64 %96
  %98 = load i16, i16* %97, align 2
  %99 = sext i16 %98 to i32
  %100 = mul nsw i32 %99, %9
  %101 = add nsw i32 %100, %3
  %102 = ashr i32 %101, %10
  %103 = trunc i32 %102 to i16
  %104 = getelementptr inbounds i16, i16* %0, i64 %96
  store i16 %103, i16* %104, align 2
  %105 = add nuw i64 %96, 1
  %106 = getelementptr inbounds i16, i16* %1, i64 %105
  %107 = load i16, i16* %106, align 2
  %108 = sext i16 %107 to i32
  %109 = mul nsw i32 %108, %9
  %110 = add nsw i32 %109, %3
  %111 = ashr i32 %110, %10
  %112 = trunc i32 %111 to i16
  %113 = getelementptr inbounds i16, i16* %0, i64 %105
  store i16 %112, i16* %113, align 2
  %114 = add nuw i64 %96, 2
  %115 = icmp eq i64 %114, %5
  br i1 %115, label %116, label %95, !llvm.loop !50

116:                                              ; preds = %91, %95, %74, %6
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!3, !6}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !11}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = !{!21}
!21 = distinct !{!21, !17}
!22 = !{!16, !19}
!23 = distinct !{!23, !11}
!24 = distinct !{!24, !13}
!25 = distinct !{!25, !11}
!26 = !{!27}
!27 = distinct !{!27, !28}
!28 = distinct !{!28, !"LVerDomain"}
!29 = !{!30}
!30 = distinct !{!30, !28}
!31 = !{!32}
!32 = distinct !{!32, !28}
!33 = !{!27, !30}
!34 = distinct !{!34, !11}
!35 = distinct !{!35, !13}
!36 = distinct !{!36, !11}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !11}
!43 = distinct !{!43, !11}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !11}
!50 = distinct !{!50, !11}
