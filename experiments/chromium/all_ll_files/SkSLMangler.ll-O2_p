; ModuleID = '../../third_party/skia/src/sksl/SkSLMangler.cpp'
source_filename = "../../third_party/skia/src/sksl/SkSLMangler.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::Mangler" = type { i32 }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.SkSL::SymbolTable" = type { %"class.std::__1::shared_ptr", %"class.std::__1::vector", i8, %"class.std::__1::vector.1", %"class.std::__1::forward_list", %class.SkTHashMap, %"class.SkSL::ErrorReporter"* }
%"class.std::__1::shared_ptr" = type { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.SkSL::Symbol"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::Type" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::unique_ptr.3"*, %"class.std::__1::unique_ptr.3"*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.SkSL::IRNode"* }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::unique_ptr.3"* }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type { %"struct.std::__1::__forward_begin_node", %"class.SkSL::String" }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.14" }
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"struct.SkSL::SymbolTable::SymbolKey", %"class.SkSL::Symbol"* }
%"struct.SkSL::SymbolTable::SymbolKey" = type <{ %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [2 x i8] c"_\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"_%d_%s\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL7Mangler10uniqueNameENS_6StringEPNS_11SymbolTableE(%"class.SkSL::String"* noalias sret, %"class.SkSL::Mangler"* nocapture, %"class.SkSL::String"*, %"class.SkSL::SymbolTable"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"struct.SkSL::StringFragment", align 8
  %6 = alloca %"class.SkSL::String", align 8
  %7 = bitcast %"struct.SkSL::StringFragment"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #4
  %8 = bitcast %"class.SkSL::String"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  br label %20

17:                                               ; preds = %4
  %18 = bitcast %"class.SkSL::String"* %2 to i8*
  %19 = zext i8 %10 to i64
  br label %20

20:                                               ; preds = %12, %17
  %21 = phi i8* [ %14, %12 ], [ %18, %17 ]
  %22 = phi i64 [ %16, %12 ], [ %19, %17 ]
  %23 = getelementptr inbounds %"struct.SkSL::StringFragment", %"struct.SkSL::StringFragment"* %5, i64 0, i32 0
  store i8* %21, i8** %23, align 8
  %24 = getelementptr inbounds %"struct.SkSL::StringFragment", %"struct.SkSL::StringFragment"* %5, i64 0, i32 1
  store i64 %22, i64* %24, align 8
  %25 = call zeroext i1 @_ZNK4SkSL14StringFragment10startsWithEPKc(%"struct.SkSL::StringFragment"* nonnull %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #4
  br i1 %25, label %28, label %26

26:                                               ; preds = %20
  %27 = bitcast %"class.SkSL::String"* %2 to i8*
  br label %70

28:                                               ; preds = %20
  %29 = load i8, i8* %9, align 1
  %30 = icmp slt i8 %29, 0
  %31 = bitcast %"class.SkSL::String"* %2 to i8*
  %32 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %33

33:                                               ; preds = %37, %28
  %34 = phi i64 [ %44, %37 ], [ 1, %28 ]
  br i1 %30, label %35, label %37

35:                                               ; preds = %33
  %36 = load i8*, i8** %32, align 8
  br label %37

37:                                               ; preds = %33, %35
  %38 = phi i8* [ %36, %35 ], [ %31, %33 ]
  %39 = getelementptr inbounds i8, i8* %38, i64 %34
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = add nsw i32 %41, -48
  %43 = icmp ult i32 %42, 10
  %44 = add nuw i64 %34, 1
  br i1 %43, label %33, label %45

45:                                               ; preds = %37
  %46 = trunc i64 %34 to i32
  %47 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %2, i64 0, i32 0
  %48 = and i64 %34, 4294967295
  %49 = icmp ugt i32 %46, 1
  br i1 %49, label %50, label %69

50:                                               ; preds = %45
  br i1 %30, label %51, label %53

51:                                               ; preds = %50
  %52 = load i8*, i8** %32, align 8
  br label %53

53:                                               ; preds = %50, %51
  %54 = phi i8* [ %52, %51 ], [ %31, %50 ]
  %55 = getelementptr inbounds i8, i8* %54, i64 %48
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 95
  br i1 %57, label %58, label %69

58:                                               ; preds = %53
  %59 = add i64 %34, 1
  %60 = and i64 %59, 4294967295
  br i1 %30, label %61, label %63

61:                                               ; preds = %58
  %62 = load i8*, i8** %32, align 8
  br label %63

63:                                               ; preds = %58, %61
  %64 = phi i8* [ %62, %61 ], [ %31, %58 ]
  %65 = getelementptr inbounds i8, i8* %64, i64 %60
  %66 = load i8, i8* %65, align 1
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %69, label %68

68:                                               ; preds = %63
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE26__erase_external_with_moveEmm(%"class.std::__1::basic_string"* %47, i64 0, i64 %60) #4
  br label %70

69:                                               ; preds = %63, %53, %45
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE26__erase_external_with_moveEmm(%"class.std::__1::basic_string"* %47, i64 0, i64 1) #4
  br label %70

70:                                               ; preds = %26, %68, %69
  %71 = phi i8* [ %27, %26 ], [ %31, %68 ], [ %31, %69 ]
  %72 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %74 = bitcast %"class.SkSL::String"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 24, i1 false) #4
  %75 = bitcast %"class.SkSL::String"* %6 to i8*
  %76 = getelementptr inbounds %"class.SkSL::Mangler", %"class.SkSL::Mangler"* %1, i64 0, i32 0
  %77 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = bitcast %"class.SkSL::String"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %79 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %78, i64 0, i32 1, i32 0
  br label %80

80:                                               ; preds = %93, %70
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %75) #4
  %81 = load i32, i32* %76, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %76, align 4
  %83 = load i8, i8* %9, align 1
  %84 = icmp slt i8 %83, 0
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = load i8*, i8** %77, align 8
  br label %87

87:                                               ; preds = %80, %85
  %88 = phi i8* [ %86, %85 ], [ %71, %80 ]
  call void (%"class.SkSL::String"*, i8*, ...) @_ZN4SkSL6String6printfEPKcz(%"class.SkSL::String"* nonnull sret %6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 %81, i8* %88) #4
  %89 = load i8, i8* %79, align 1
  %90 = icmp slt i8 %89, 0
  br i1 %90, label %91, label %93

91:                                               ; preds = %87
  %92 = load i8*, i8** %72, align 8
  call void @_ZdlPv(i8* %92) #5
  br label %93

93:                                               ; preds = %87, %91
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* nonnull align 8 %75, i64 24, i1 false) #4
  %94 = load i8, i8* %79, align 1
  %95 = load i8*, i8** %72, align 8
  %96 = load i64, i64* %73, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %75) #4
  %97 = icmp slt i8 %94, 0
  %98 = zext i8 %94 to i64
  %99 = select i1 %97, i8* %95, i8* %74
  %100 = select i1 %97, i64 %96, i64 %98
  %101 = call %"class.SkSL::Symbol"* @_ZN4SkSL11SymbolTableixENS_14StringFragmentE(%"class.SkSL::SymbolTable"* %3, i8* %99, i64 %100) #4
  %102 = icmp eq %"class.SkSL::Symbol"* %101, null
  br i1 %102, label %103, label %80

103:                                              ; preds = %93
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4SkSL6String6printfEPKcz(%"class.SkSL::String"* sret, i8*, ...) local_unnamed_addr #2

declare %"class.SkSL::Symbol"* @_ZN4SkSL11SymbolTableixENS_14StringFragmentE(%"class.SkSL::SymbolTable"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare zeroext i1 @_ZNK4SkSL14StringFragment10startsWithEPKc(%"struct.SkSL::StringFragment"*, i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE26__erase_external_with_moveEmm(%"class.std::__1::basic_string"*, i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
