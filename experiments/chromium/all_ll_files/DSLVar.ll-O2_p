; ModuleID = '../../third_party/skia/src/sksl/dsl/DSLVar.cpp'
source_filename = "../../third_party/skia/src/sksl/dsl/DSLVar.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::dsl::DSLVar" = type <{ %"class.SkSL::dsl::DSLModifiers", %"class.SkSL::dsl::DSLType", i32, [4 x i8], %"class.std::__1::unique_ptr", %"class.SkSL::Variable"*, i8*, i8*, %"class.SkSL::dsl::DSLExpression", i8, i8, [6 x i8] }>
%"class.SkSL::dsl::DSLModifiers" = type { %"struct.SkSL::Modifiers" }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::dsl::DSLType" = type <{ %"class.SkSL::Type"*, i8, [7 x i8] }>
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.6", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.8" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.SkSL::Type::Field"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.SkSL::Statement"* }
%"class.SkSL::Statement" = type { %"class.SkSL::IRNode" }
%"class.SkSL::Variable" = type <{ %"class.SkSL::Symbol", %"class.SkSL::VarDeclaration"*, %"struct.SkSL::Modifiers"*, i8, i8, [6 x i8] }>
%"class.SkSL::VarDeclaration" = type { %"class.SkSL::Statement", %"class.SkSL::Variable"*, %"class.SkSL::Type"*, i32, %"class.std::__1::unique_ptr.16" }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.SkSL::Expression"* }
%"class.SkSL::Expression" = type { %"class.SkSL::IRNode", %"class.SkSL::Type"* }
%"class.SkSL::dsl::DSLExpression" = type { %"class.std::__1::unique_ptr.16" }
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.SkSL::IRNode"* }
%"class.SkSL::dsl::DSLWriter" = type { %"class.std::__1::unique_ptr.98", %"class.std::__1::unique_ptr.104", %"class.SkSL::Compiler"*, %"class.std::__1::unique_ptr.233", %"struct.SkSL::ProgramConfig"*, %"class.SkSL::ModifiersPool"*, %"class.std::__1::vector.203", %"class.std::__1::vector.216", %"class.SkSL::dsl::ErrorHandler"*, %"struct.SkSL::ProgramSettings", %"class.SkSL::Mangler", %"class.std::__1::stack" }
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"struct.SkSL::ProgramConfig"* }
%"class.std::__1::unique_ptr.104" = type { %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"class.SkSL::ModifiersPool"* }
%"class.SkSL::Compiler" = type { %"class.SkSL::ErrorReporter", %"class.std::__1::shared_ptr.110", %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"class.SkSL::ModifiersPool", %"class.SkSL::Inliner", %"class.std::__1::unique_ptr.136", %"class.SkSL::String"*, i32, %"class.SkSL::String", %"class.std::__1::vector.226" }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%"class.std::__1::shared_ptr.110" = type { %"class.SkSL::Context"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.29" }
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.SkSL::Type"* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::shared_ptr" = type { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::SymbolTable" = type { %"class.std::__1::shared_ptr", %"class.std::__1::vector.55", i8, %"class.std::__1::vector.63", %"class.std::__1::forward_list", %class.SkTHashMap, %"class.SkSL::ErrorReporter"* }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { %"class.std::__1::unique_ptr.57"*, %"class.std::__1::unique_ptr.57"*, %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::unique_ptr.57" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.SkSL::Symbol"* }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"class.std::__1::unique_ptr.57"* }
%"class.std::__1::vector.63" = type { %"class.std::__1::__vector_base.64" }
%"class.std::__1::__vector_base.64" = type { %"class.std::__1::unique_ptr.65"*, %"class.std::__1::unique_ptr.65"*, %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.std::__1::unique_ptr.65"* }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type { %"struct.std::__1::__forward_begin_node", %"class.SkSL::String" }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.76" }
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"struct.SkSL::SymbolTable::SymbolKey", %"class.SkSL::Symbol"* }
%"struct.SkSL::SymbolTable::SymbolKey" = type <{ %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"struct.SkSL::ParsedModule" = type { %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr.111" }
%"class.std::__1::shared_ptr.111" = type { %"class.SkSL::IRIntrinsicMap"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::IRIntrinsicMap" = type { %"class.std::__1::unordered_map", %"class.SkSL::IRIntrinsicMap"* }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table.112" }
%"class.std::__1::__hash_table.112" = type <{ %"class.std::__1::unique_ptr.113", %"class.std::__1::__compressed_pair.123", %"class.std::__1::__compressed_pair.128", %"class.std::__1::__compressed_pair.131", [4 x i8] }>
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115", %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.std::__1::__hash_node_base.116"** }
%"struct.std::__1::__hash_node_base.116" = type { %"struct.std::__1::__hash_node_base.116"* }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.std::__1::__bucket_list_deallocator.118" }
%"class.std::__1::__bucket_list_deallocator.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { i64 }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.std::__1::__hash_node_base.116" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { float }
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.35", %"class.std::__1::__compressed_pair.44", %"class.std::__1::__compressed_pair.49", %"class.std::__1::__compressed_pair.51", [4 x i8] }>
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37", %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.SkSL::Inliner" = type { %"class.SkSL::Context"*, %"class.SkSL::Mangler", i32 }
%"class.std::__1::unique_ptr.136" = type { %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"class.SkSL::IRGenerator"* }
%"class.SkSL::IRGenerator" = type <{ %"class.SkSL::Context"*, %"struct.SkSL::Program::Inputs", [6 x i8], %"class.std::__1::unique_ptr.139", %"class.std::__1::shared_ptr", %"class.SkSL::IRIntrinsicMap"*, %"class.std::__1::unordered_set.152", i32, [4 x i8], %"class.std::__1::unordered_set.177", %"class.std::__1::vector.203"*, %"class.std::__1::vector.216"*, %"class.SkSL::Variable"*, %"class.SkSL::Variable"*, i32, i8, [3 x i8] }>
%"struct.SkSL::Program::Inputs" = type { i8, i8 }
%"class.std::__1::unique_ptr.139" = type { %"class.std::__1::__compressed_pair.140" }
%"class.std::__1::__compressed_pair.140" = type { %"struct.std::__1::__compressed_pair_elem.141" }
%"struct.std::__1::__compressed_pair_elem.141" = type { %"struct.SkSL::ASTFile"* }
%"struct.SkSL::ASTFile" = type <{ %"class.std::__1::vector.142", %"class.SkSL::ASTNode::ID", [4 x i8] }>
%"class.std::__1::vector.142" = type { %"class.std::__1::__vector_base.143" }
%"class.std::__1::__vector_base.143" = type { %"struct.SkSL::ASTNode"*, %"struct.SkSL::ASTNode"*, %"class.std::__1::__compressed_pair.144" }
%"struct.SkSL::ASTNode" = type { %"class.std::__1::vector.142"*, %"struct.SkSL::ASTNode::NodeData", i32, i32, %"class.SkSL::ASTNode::ID", %"class.SkSL::ASTNode::ID", %"class.SkSL::ASTNode::ID" }
%"struct.SkSL::ASTNode::NodeData" = type { [128 x i8], i32 }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"struct.SkSL::ASTNode"* }
%"class.SkSL::ASTNode::ID" = type { i32 }
%"class.std::__1::unordered_set.152" = type { %"class.std::__1::__hash_table.153" }
%"class.std::__1::__hash_table.153" = type <{ %"class.std::__1::unique_ptr.154", %"class.std::__1::__compressed_pair.164", %"class.std::__1::__compressed_pair.169", %"class.std::__1::__compressed_pair.172", [4 x i8] }>
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156", %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"struct.std::__1::__hash_node_base.157"** }
%"struct.std::__1::__hash_node_base.157" = type { %"struct.std::__1::__hash_node_base.157"* }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"class.std::__1::__bucket_list_deallocator.159" }
%"class.std::__1::__bucket_list_deallocator.159" = type { %"class.std::__1::__compressed_pair.160" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"struct.std::__1::__hash_node_base.157" }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::unordered_set.177" = type { %"class.std::__1::__hash_table.178" }
%"class.std::__1::__hash_table.178" = type <{ %"class.std::__1::unique_ptr.179", %"class.std::__1::__compressed_pair.189", %"class.std::__1::__compressed_pair.194", %"class.std::__1::__compressed_pair.198", [4 x i8] }>
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181", %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"struct.std::__1::__hash_node_base.182"** }
%"struct.std::__1::__hash_node_base.182" = type { %"struct.std::__1::__hash_node_base.182"* }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"class.std::__1::__bucket_list_deallocator.184" }
%"class.std::__1::__bucket_list_deallocator.184" = type { %"class.std::__1::__compressed_pair.185" }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"struct.std::__1::__hash_node_base.182" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::vector.226" = type { %"class.std::__1::__vector_base.227" }
%"class.std::__1::__vector_base.227" = type { i64*, i64*, %"class.std::__1::__compressed_pair.228" }
%"class.std::__1::__compressed_pair.228" = type { %"struct.std::__1::__compressed_pair_elem.229" }
%"struct.std::__1::__compressed_pair_elem.229" = type { i64* }
%"class.std::__1::unique_ptr.233" = type { %"class.std::__1::__compressed_pair.234" }
%"class.std::__1::__compressed_pair.234" = type { %"struct.std::__1::__compressed_pair_elem.235" }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"class.SkSL::Pool"* }
%"class.SkSL::Pool" = type { %"class.std::__1::unique_ptr.236" }
%"class.std::__1::unique_ptr.236" = type { %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.238" }
%"struct.std::__1::__compressed_pair_elem.238" = type { %class.GrMemoryPool* }
%class.GrMemoryPool = type { %class.GrBlockAllocator }
%class.GrBlockAllocator = type { %"class.GrBlockAllocator::Block"*, i64, %"class.GrBlockAllocator::Block" }
%"class.GrBlockAllocator::Block" = type { %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"*, i32, i32, i32, i32 }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"class.std::__1::vector.203" = type { %"class.std::__1::__vector_base.204" }
%"class.std::__1::__vector_base.204" = type { %"class.std::__1::unique_ptr.205"*, %"class.std::__1::unique_ptr.205"*, %"class.std::__1::__compressed_pair.211" }
%"class.std::__1::unique_ptr.205" = type { %"class.std::__1::__compressed_pair.206" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { %"class.SkSL::ProgramElement"* }
%"class.SkSL::ProgramElement" = type { %"class.SkSL::IRNode" }
%"class.std::__1::__compressed_pair.211" = type { %"struct.std::__1::__compressed_pair_elem.212" }
%"struct.std::__1::__compressed_pair_elem.212" = type { %"class.std::__1::unique_ptr.205"* }
%"class.std::__1::vector.216" = type { %"class.std::__1::__vector_base.217" }
%"class.std::__1::__vector_base.217" = type { %"class.SkSL::ProgramElement"**, %"class.SkSL::ProgramElement"**, %"class.std::__1::__compressed_pair.218" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"class.SkSL::ProgramElement"** }
%"class.SkSL::dsl::ErrorHandler" = type { i32 (...)** }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.54"* }
%"class.std::__1::vector.54" = type opaque
%"class.SkSL::Mangler" = type { i32 }
%"class.std::__1::stack" = type { %"class.std::__1::list" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.245" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__list_node" = type { %"struct.std::__1::__list_node_base", %"struct.SkSL::dsl::DSLWriter::StackFrame" }
%"struct.SkSL::dsl::DSLWriter::StackFrame" = type { %class.GrGLSLFragmentProcessor*, %"struct.GrGLSLFragmentProcessor::EmitArgs"*, %class.SkSTArray.257 }
%class.GrGLSLFragmentProcessor = type { i32 (...)**, %class.SkTArray.249, %class.SkTArray.250 }
%class.SkTArray.249 = type { %class.SkString*, i64 }
%class.SkString = type { %class.sk_sp }
%class.sk_sp = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%class.SkTArray.250 = type { %"class.std::__1::unique_ptr.251"*, i64 }
%"class.std::__1::unique_ptr.251" = type { %"class.std::__1::__compressed_pair.252" }
%"class.std::__1::__compressed_pair.252" = type { %"struct.std::__1::__compressed_pair_elem.253" }
%"struct.std::__1::__compressed_pair_elem.253" = type { %class.GrGLSLFragmentProcessor* }
%"struct.GrGLSLFragmentProcessor::EmitArgs" = type { %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*, %class.GrFragmentProcessor*, i8*, i8*, %"class.GrGLSLFragmentProcessor::BuilderInputProvider"* }
%class.GrGLSLFPFragmentBuilder = type opaque
%class.GrGLSLUniformHandler = type { i32 (...)**, %class.GrGLSLProgramBuilder* }
%class.GrGLSLProgramBuilder = type opaque
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray = type { %"class.std::__1::unique_ptr.23"*, i64 }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %class.GrFragmentProcessor* }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%"class.GrGLSLFragmentProcessor::BuilderInputProvider" = type opaque
%class.SkSTArray.257 = type { %class.SkAlignedSTStorage.258, %class.SkTArray.259 }
%class.SkAlignedSTStorage.258 = type { [16 x i8] }
%class.SkTArray.259 = type { %"class.std::__1::unique_ptr"*, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.SkSL::dsl::PositionInfo" = type <{ i8*, i32, [4 x i8] }>
%"class.SkSL::dsl::DSLPossibleExpression" = type { %"class.std::__1::unique_ptr.16" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__112__hash_tableIN4SkSL9ModifiersENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS2_PvEEEEbEERKT_DpOT0_ = comdat any

$_ZNSt3__112__hash_tableIN4SkSL9ModifiersENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE6rehashEm = comdat any

$_ZNK4SkSL6LayouteqERKS0_ = comdat any

$_ZNSt3__112__hash_tableIN4SkSL9ModifiersENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE8__rehashEm = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN4SkSL6IRNodeENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_ = comdat any

@.str = private unnamed_addr constant [15 x i8] c"sk_SampleCoord\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"var\00", align 1
@.str.3 = private unnamed_addr constant [59 x i8] c"error: variable '%s' was destroyed without being declared\0A\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"sk_\00", align 1
@_ZTVN4SkSL8VariableE = external unnamed_addr constant { [5 x i8*] }, align 8

@_ZN4SkSL3dsl6DSLVarC1EPKc = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLVar"*, i8*), void (%"class.SkSL::dsl::DSLVar"*, i8*)* @_ZN4SkSL3dsl6DSLVarC2EPKc
@_ZN4SkSL3dsl6DSLVarC1ENS0_7DSLTypeEPKcNS0_13DSLExpressionE = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLVar"*, %"class.SkSL::Type"*, i8, i8*, %"class.SkSL::dsl::DSLExpression"*), void (%"class.SkSL::dsl::DSLVar"*, %"class.SkSL::Type"*, i8, i8*, %"class.SkSL::dsl::DSLExpression"*)* @_ZN4SkSL3dsl6DSLVarC2ENS0_7DSLTypeEPKcNS0_13DSLExpressionE
@_ZN4SkSL3dsl6DSLVarC1ENS0_7DSLTypeENS0_13DSLExpressionE = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLVar"*, %"class.SkSL::Type"*, i8, %"class.SkSL::dsl::DSLExpression"*), void (%"class.SkSL::dsl::DSLVar"*, %"class.SkSL::Type"*, i8, %"class.SkSL::dsl::DSLExpression"*)* @_ZN4SkSL3dsl6DSLVarC2ENS0_7DSLTypeENS0_13DSLExpressionE
@_ZN4SkSL3dsl6DSLVarC1ENS0_12DSLModifiersENS0_7DSLTypeENS0_13DSLExpressionE = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLVar"*, %"class.SkSL::dsl::DSLModifiers"*, %"class.SkSL::Type"*, i8, %"class.SkSL::dsl::DSLExpression"*), void (%"class.SkSL::dsl::DSLVar"*, %"class.SkSL::dsl::DSLModifiers"*, %"class.SkSL::Type"*, i8, %"class.SkSL::dsl::DSLExpression"*)* @_ZN4SkSL3dsl6DSLVarC2ENS0_12DSLModifiersENS0_7DSLTypeENS0_13DSLExpressionE
@_ZN4SkSL3dsl6DSLVarC1ENS0_12DSLModifiersENS0_7DSLTypeEPKcNS0_13DSLExpressionE = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLVar"*, %"class.SkSL::dsl::DSLModifiers"*, %"class.SkSL::Type"*, i8, i8*, %"class.SkSL::dsl::DSLExpression"*), void (%"class.SkSL::dsl::DSLVar"*, %"class.SkSL::dsl::DSLModifiers"*, %"class.SkSL::Type"*, i8, i8*, %"class.SkSL::dsl::DSLExpression"*)* @_ZN4SkSL3dsl6DSLVarC2ENS0_12DSLModifiersENS0_7DSLTypeEPKcNS0_13DSLExpressionE
@_ZN4SkSL3dsl6DSLVarD1Ev = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLVar"*), void (%"class.SkSL::dsl::DSLVar"*)* @_ZN4SkSL3dsl6DSLVarD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl6DSLVarC2EPKc(%"class.SkSL::dsl::DSLVar"*, i8*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::unique_ptr.65", align 8
  %4 = alloca %"struct.SkSL::Modifiers", align 8
  %5 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 -1, i64 40, i1 false) #12
  %8 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 0, i32 0, i32 0, i32 11
  %9 = bitcast [4 x i8]* %8 to i32*
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 0, i32 0, i32 0, i32 12, i32 0
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8** %10, align 8
  %11 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 0, i32 0, i32 0, i32 12, i32 1
  %12 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 1, i32 0
  store %"class.SkSL::Type"* null, %"class.SkSL::Type"** %12, align 8
  %13 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 1, i32 1
  %14 = bitcast i64* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 20, i1 false)
  store i8 48, i8* %13, align 8
  %15 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 2
  store i32 -1, i32* %15, align 8
  %16 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 4
  %17 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 5
  %18 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 6
  %19 = bitcast %"class.std::__1::unique_ptr"* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 16, i1 false)
  store i8* %1, i8** %18, align 8
  %20 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 7
  store i8* %1, i8** %20, align 8
  %21 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 8
  tail call void @_ZN4SkSL3dsl13DSLExpressionC1Ev(%"class.SkSL::dsl::DSLExpression"* %21) #12
  %22 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 10
  store i8 1, i8* %22, align 1
  %23 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0)) #13
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %109

25:                                               ; preds = %2
  %26 = tail call dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() #12
  %27 = getelementptr inbounds %"class.SkSL::dsl::DSLWriter", %"class.SkSL::dsl::DSLWriter"* %26, i64 0, i32 11
  %28 = bitcast %"class.std::__1::stack"* %27 to %"struct.std::__1::__list_node"**
  %29 = load %"struct.std::__1::__list_node"*, %"struct.std::__1::__list_node"** %28, align 8
  %30 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %29, i64 0, i32 1, i32 1
  %31 = load %"struct.GrGLSLFragmentProcessor::EmitArgs"*, %"struct.GrGLSLFragmentProcessor::EmitArgs"** %30, align 8
  %32 = getelementptr inbounds %"struct.GrGLSLFragmentProcessor::EmitArgs", %"struct.GrGLSLFragmentProcessor::EmitArgs"* %31, i64 0, i32 5
  %33 = bitcast i8** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast i8** %20 to i64*
  store i64 %34, i64* %35, align 8
  %36 = tail call dereferenceable(744) %"class.SkSL::Context"* @_ZN4SkSL3dsl9DSLWriter7ContextEv() #12
  %37 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %36, i64 0, i32 3
  %38 = load %"class.SkSL::ModifiersPool"*, %"class.SkSL::ModifiersPool"** %37, align 8
  %39 = bitcast %"struct.SkSL::Modifiers"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %39) #12
  %40 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %4, i64 0, i32 0, i32 0
  store i32 0, i32* %40, align 8
  %41 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %4, i64 0, i32 0, i32 1
  %42 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %4, i64 0, i32 0, i32 6
  %43 = bitcast i32* %41 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %43, i8 -1, i64 20, i1 false)
  %44 = bitcast i32* %42 to <4 x i32>*
  store <4 x i32> <i32 10009, i32 -1, i32 -1, i32 1>, <4 x i32>* %44, align 8
  %45 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %4, i64 0, i32 0, i32 10
  store i32 -1, i32* %45, align 8
  %46 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %4, i64 0, i32 0, i32 12, i32 0
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8** %46, align 8
  %47 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %4, i64 0, i32 0, i32 12, i32 1
  store i64 0, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %4, i64 0, i32 0, i32 13
  store i32 0, i32* %48, align 8
  %49 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %4, i64 0, i32 1
  store i32 0, i32* %49, align 8
  %50 = getelementptr inbounds %"class.SkSL::ModifiersPool", %"class.SkSL::ModifiersPool"* %38, i64 0, i32 0, i32 0
  %51 = call { %"struct.std::__1::__hash_node_base"*, i8 } @_ZNSt3__112__hash_tableIN4SkSL9ModifiersENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS2_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table"* %50, %"struct.SkSL::Modifiers"* nonnull dereferenceable(80) %4, %"struct.SkSL::Modifiers"* nonnull dereferenceable(80) %4) #12
  %52 = extractvalue { %"struct.std::__1::__hash_node_base"*, i8 } %51, 0
  %53 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %52, i64 2
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %39) #12
  %54 = ptrtoint %"struct.std::__1::__hash_node_base"* %53 to i64
  %55 = call dereferenceable(16) %"class.std::__1::shared_ptr"* @_ZN4SkSL3dsl9DSLWriter11SymbolTableEv() #12
  %56 = getelementptr inbounds %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr"* %55, i64 0, i32 0
  %57 = load %"class.SkSL::SymbolTable"*, %"class.SkSL::SymbolTable"** %56, align 8
  %58 = call dereferenceable(744) %"class.SkSL::Context"* @_ZN4SkSL3dsl9DSLWriter7ContextEv() #12
  %59 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %58, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %60 = bitcast %"class.SkSL::Type"** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 64) #12
  %63 = load i8*, i8** %20, align 8
  %64 = call i64 @strlen(i8* %63) #13
  %65 = bitcast i8* %62 to i32 (...)***
  %66 = getelementptr inbounds i8, i8* %62, i64 8
  %67 = bitcast i8* %66 to i32*
  store i32 -1, i32* %67, align 8
  %68 = getelementptr inbounds i8, i8* %62, i64 12
  %69 = bitcast i8* %68 to i32*
  store i32 15, i32* %69, align 4
  %70 = getelementptr inbounds i8, i8* %62, i64 16
  %71 = bitcast i8* %70 to i8**
  store i8* %63, i8** %71, align 8
  %72 = getelementptr inbounds i8, i8* %62, i64 24
  %73 = bitcast i8* %72 to i64*
  store i64 %64, i64* %73, align 8
  %74 = getelementptr inbounds i8, i8* %62, i64 32
  %75 = bitcast i8* %74 to i64*
  store i64 %61, i64* %75, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN4SkSL8VariableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %65, align 8
  %76 = getelementptr inbounds i8, i8* %62, i64 40
  %77 = bitcast i8* %76 to %"class.SkSL::VarDeclaration"**
  store %"class.SkSL::VarDeclaration"* null, %"class.SkSL::VarDeclaration"** %77, align 8
  %78 = getelementptr inbounds i8, i8* %62, i64 48
  %79 = bitcast i8* %78 to i64*
  store i64 %54, i64* %79, align 8
  %80 = getelementptr inbounds i8, i8* %62, i64 56
  store i8 0, i8* %80, align 8
  %81 = getelementptr inbounds i8, i8* %62, i64 57
  store i8 1, i8* %81, align 1
  %82 = ptrtoint i8* %62 to i64
  %83 = bitcast %"class.std::__1::unique_ptr.65"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #12
  %84 = bitcast %"class.std::__1::unique_ptr.65"* %3 to i64*
  store i64 %82, i64* %84, align 8
  %85 = getelementptr inbounds %"class.SkSL::SymbolTable", %"class.SkSL::SymbolTable"* %57, i64 0, i32 3, i32 0, i32 1
  %86 = load %"class.std::__1::unique_ptr.65"*, %"class.std::__1::unique_ptr.65"** %85, align 8
  %87 = getelementptr inbounds %"class.SkSL::SymbolTable", %"class.SkSL::SymbolTable"* %57, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %88 = load %"class.std::__1::unique_ptr.65"*, %"class.std::__1::unique_ptr.65"** %87, align 8
  %89 = icmp ult %"class.std::__1::unique_ptr.65"* %86, %88
  br i1 %89, label %90, label %96

90:                                               ; preds = %25
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.SkSL::IRNode"* null, %"class.SkSL::IRNode"** %91, align 8
  %92 = bitcast %"class.std::__1::unique_ptr.65"* %86 to i64*
  store i64 %82, i64* %92, align 8
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %86, i64 1
  %94 = ptrtoint %"class.std::__1::unique_ptr.65"* %93 to i64
  %95 = bitcast %"class.std::__1::unique_ptr.65"** %85 to i64*
  store i64 %94, i64* %95, align 8
  br label %98

96:                                               ; preds = %25
  %97 = getelementptr inbounds %"class.SkSL::SymbolTable", %"class.SkSL::SymbolTable"* %57, i64 0, i32 3
  call void @_ZNSt3__16vectorINS_10unique_ptrIN4SkSL6IRNodeENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.63"* %97, %"class.std::__1::unique_ptr.65"* nonnull dereferenceable(8) %3) #12
  br label %98

98:                                               ; preds = %96, %90
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %3, i64 0, i32 0, i32 0, i32 0
  %100 = load %"class.SkSL::IRNode"*, %"class.SkSL::IRNode"** %99, align 8
  store %"class.SkSL::IRNode"* null, %"class.SkSL::IRNode"** %99, align 8
  %101 = icmp eq %"class.SkSL::IRNode"* %100, null
  br i1 %101, label %107, label %102

102:                                              ; preds = %98
  %103 = bitcast %"class.SkSL::IRNode"* %100 to void (%"class.SkSL::IRNode"*)***
  %104 = load void (%"class.SkSL::IRNode"*)**, void (%"class.SkSL::IRNode"*)*** %103, align 8
  %105 = getelementptr inbounds void (%"class.SkSL::IRNode"*)*, void (%"class.SkSL::IRNode"*)** %104, i64 1
  %106 = load void (%"class.SkSL::IRNode"*)*, void (%"class.SkSL::IRNode"*)** %105, align 8
  call void %106(%"class.SkSL::IRNode"* nonnull %100) #12
  br label %107

107:                                              ; preds = %98, %102
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #12
  %108 = bitcast %"class.SkSL::Variable"** %17 to i8**
  store i8* %62, i8** %108, align 8
  br label %117

109:                                              ; preds = %2
  %110 = tail call dereferenceable(16) %"class.std::__1::shared_ptr"* @_ZN4SkSL3dsl9DSLWriter11SymbolTableEv() #12
  %111 = getelementptr inbounds %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr"* %110, i64 0, i32 0
  %112 = load %"class.SkSL::SymbolTable"*, %"class.SkSL::SymbolTable"** %111, align 8
  %113 = load i8*, i8** %20, align 8
  %114 = tail call i64 @strlen(i8* %113) #13
  %115 = tail call %"class.SkSL::Symbol"* @_ZN4SkSL11SymbolTableixENS_14StringFragmentE(%"class.SkSL::SymbolTable"* %112, i8* %113, i64 %114) #12
  %116 = bitcast %"class.SkSL::Variable"** %17 to %"class.SkSL::Symbol"**
  store %"class.SkSL::Symbol"* %115, %"class.SkSL::Symbol"** %116, align 8
  br label %117

117:                                              ; preds = %109, %107
  ret void
}

declare void @_ZN4SkSL3dsl13DSLExpressionC1Ev(%"class.SkSL::dsl::DSLExpression"*) unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dereferenceable(744) %"class.SkSL::Context"* @_ZN4SkSL3dsl9DSLWriter7ContextEv() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare dereferenceable(16) %"class.std::__1::shared_ptr"* @_ZN4SkSL3dsl9DSLWriter11SymbolTableEv() local_unnamed_addr #1

declare %"class.SkSL::Symbol"* @_ZN4SkSL11SymbolTableixENS_14StringFragmentE(%"class.SkSL::SymbolTable"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl6DSLVarC2ENS0_7DSLTypeEPKcNS0_13DSLExpressionE(%"class.SkSL::dsl::DSLVar"*, %"class.SkSL::Type"*, i8, i8*, %"class.SkSL::dsl::DSLExpression"*) unnamed_addr #0 align 2 {
  %6 = alloca %"class.SkSL::dsl::DSLModifiers", align 8
  %7 = alloca %"class.SkSL::dsl::DSLExpression", align 8
  %8 = getelementptr inbounds %"class.SkSL::dsl::DSLModifiers", %"class.SkSL::dsl::DSLModifiers"* %6, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"class.SkSL::dsl::DSLModifiers", %"class.SkSL::dsl::DSLModifiers"* %6, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast i32* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %10, i8 -1, i64 40, i1 false) #12
  %11 = getelementptr inbounds %"class.SkSL::dsl::DSLModifiers", %"class.SkSL::dsl::DSLModifiers"* %6, i64 0, i32 0, i32 0, i32 11
  %12 = bitcast [4 x i8]* %11 to i32*
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %"class.SkSL::dsl::DSLModifiers", %"class.SkSL::dsl::DSLModifiers"* %6, i64 0, i32 0, i32 0, i32 12, i32 0
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8** %13, align 8
  %14 = getelementptr inbounds %"class.SkSL::dsl::DSLModifiers", %"class.SkSL::dsl::DSLModifiers"* %6, i64 0, i32 0, i32 0, i32 12, i32 1
  %15 = bitcast i64* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 20, i1 false)
  call void @_ZN4SkSL3dsl13DSLExpressionC1EOS1_(%"class.SkSL::dsl::DSLExpression"* nonnull %7, %"class.SkSL::dsl::DSLExpression"* dereferenceable(8) %4) #12
  call void @_ZN4SkSL3dsl6DSLVarC2ENS0_12DSLModifiersENS0_7DSLTypeEPKcNS0_13DSLExpressionE(%"class.SkSL::dsl::DSLVar"* %0, %"class.SkSL::dsl::DSLModifiers"* nonnull byval(%"class.SkSL::dsl::DSLModifiers") align 8 %6, %"class.SkSL::Type"* %1, i8 %2, i8* %3, %"class.SkSL::dsl::DSLExpression"* nonnull %7)
  call void @_ZN4SkSL3dsl13DSLExpressionD1Ev(%"class.SkSL::dsl::DSLExpression"* nonnull %7) #12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN4SkSL3dsl13DSLExpressionC1EOS1_(%"class.SkSL::dsl::DSLExpression"*, %"class.SkSL::dsl::DSLExpression"* dereferenceable(8)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl6DSLVarC2ENS0_12DSLModifiersENS0_7DSLTypeEPKcNS0_13DSLExpressionE(%"class.SkSL::dsl::DSLVar"*, %"class.SkSL::dsl::DSLModifiers"* nocapture readonly byval(%"class.SkSL::dsl::DSLModifiers") align 8, %"class.SkSL::Type"*, i8, i8*, %"class.SkSL::dsl::DSLExpression"*) unnamed_addr #0 align 2 {
  %7 = alloca { %"class.SkSL::Type"*, i8 }, align 8
  %8 = bitcast { %"class.SkSL::Type"*, i8 }* %7 to %"class.SkSL::dsl::DSLType"*
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = getelementptr inbounds { %"class.SkSL::Type"*, i8 }, { %"class.SkSL::Type"*, i8 }* %7, i64 0, i32 0
  store %"class.SkSL::Type"* %2, %"class.SkSL::Type"** %11, align 8
  %12 = getelementptr inbounds { %"class.SkSL::Type"*, i8 }, { %"class.SkSL::Type"*, i8 }* %7, i64 0, i32 1
  store i8 %3, i8* %12, align 8
  %13 = bitcast %"class.SkSL::dsl::DSLVar"* %0 to i8*
  %14 = bitcast %"class.SkSL::dsl::DSLModifiers"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* nonnull align 8 %14, i64 80, i1 false)
  %15 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 1
  %16 = bitcast %"class.SkSL::dsl::DSLType"* %15 to i8*
  %17 = bitcast { %"class.SkSL::Type"*, i8 }* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* nonnull align 8 %17, i64 16, i1 false)
  %18 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 2
  store i32 -1, i32* %18, align 8
  %19 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 4
  %20 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 6
  %21 = bitcast %"class.std::__1::unique_ptr"* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 16, i1 false)
  store i8* %4, i8** %20, align 8
  %22 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 7
  %23 = tail call dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL3dsl7DSLType8skslTypeEv(%"class.SkSL::dsl::DSLType"* %15) #12
  %24 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %23, i64 0, i32 3
  %25 = load i32, i32* %24, align 8
  switch i32 %25, label %26 [
    i32 13, label %28
    i32 2, label %28
    i32 5, label %28
    i32 6, label %28
    i32 7, label %28
    i32 14, label %28
    i32 10, label %28
    i32 12, label %28
  ]

26:                                               ; preds = %6
  %27 = tail call i8* @_ZN4SkSL3dsl9DSLWriter4NameEPKc(i8* %4) #12
  br label %28

28:                                               ; preds = %6, %6, %6, %6, %6, %6, %6, %6, %26
  %29 = phi i8* [ %27, %26 ], [ %4, %6 ], [ %4, %6 ], [ %4, %6 ], [ %4, %6 ], [ %4, %6 ], [ %4, %6 ], [ %4, %6 ], [ %4, %6 ]
  store i8* %29, i8** %22, align 8
  %30 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 8
  tail call void @_ZN4SkSL3dsl13DSLExpressionC1EOS1_(%"class.SkSL::dsl::DSLExpression"* %30, %"class.SkSL::dsl::DSLExpression"* dereferenceable(8) %5) #12
  %31 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 9
  store i8 2, i8* %31, align 8
  %32 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 10
  %33 = tail call dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() #12
  %34 = getelementptr inbounds %"class.SkSL::dsl::DSLWriter", %"class.SkSL::dsl::DSLWriter"* %33, i64 0, i32 9, i32 21
  %35 = load i8, i8* %34, align 1, !range !2
  store i8 %35, i8* %32, align 1
  %36 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 0, i32 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = and i32 %37, 8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %93, label %40

40:                                               ; preds = %28
  store i8 0, i8* %31, align 8
  %41 = tail call dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() #12
  %42 = getelementptr inbounds %"class.SkSL::dsl::DSLWriter", %"class.SkSL::dsl::DSLWriter"* %41, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0, i32 0
  %43 = load i64, i64* %42, align 8
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %93, label %45

45:                                               ; preds = %40
  %46 = call dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL3dsl7DSLType8skslTypeEv(%"class.SkSL::dsl::DSLType"* nonnull %8) #12
  %47 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %47) #12
  store i32 -1431655766, i32* %9, align 4
  %48 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %46, i64 0, i32 3
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 0
  %51 = call dereferenceable(744) %"class.SkSL::Context"* @_ZN4SkSL3dsl9DSLWriter7ContextEv() #12
  br i1 %50, label %52, label %60

52:                                               ; preds = %45
  %53 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %46, i64 0, i32 6
  %54 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %53, align 8
  %55 = icmp eq %"class.SkSL::Type"* %54, null
  %56 = select i1 %55, %"class.SkSL::Type"* %46, %"class.SkSL::Type"* %54
  %57 = call zeroext i1 @_ZN4SkSL16type_to_grsltypeERKNS_7ContextERKNS_4TypeEP8GrSLType(%"class.SkSL::Context"* dereferenceable(744) %51, %"class.SkSL::Type"* dereferenceable(184) %56, i32* nonnull %9) #12
  %58 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %46, i64 0, i32 8
  %59 = load i32, i32* %58, align 8
  br label %62

60:                                               ; preds = %45
  %61 = call zeroext i1 @_ZN4SkSL16type_to_grsltypeERKNS_7ContextERKNS_4TypeEP8GrSLType(%"class.SkSL::Context"* dereferenceable(744) %51, %"class.SkSL::Type"* dereferenceable(184) %46, i32* nonnull %9) #12
  br label %62

62:                                               ; preds = %60, %52
  %63 = phi i32 [ %59, %52 ], [ 0, %60 ]
  %64 = bitcast i8** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %64) #12
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %65 = call dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() #12
  %66 = getelementptr inbounds %"class.SkSL::dsl::DSLWriter", %"class.SkSL::dsl::DSLWriter"* %65, i64 0, i32 11
  %67 = bitcast %"class.std::__1::stack"* %66 to %"struct.std::__1::__list_node"**
  %68 = load %"struct.std::__1::__list_node"*, %"struct.std::__1::__list_node"** %67, align 8
  %69 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %68, i64 0, i32 1, i32 1
  %70 = load %"struct.GrGLSLFragmentProcessor::EmitArgs"*, %"struct.GrGLSLFragmentProcessor::EmitArgs"** %69, align 8
  %71 = getelementptr inbounds %"struct.GrGLSLFragmentProcessor::EmitArgs", %"struct.GrGLSLFragmentProcessor::EmitArgs"* %70, i64 0, i32 1
  %72 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %71, align 8
  %73 = call dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() #12
  %74 = getelementptr inbounds %"class.SkSL::dsl::DSLWriter", %"class.SkSL::dsl::DSLWriter"* %73, i64 0, i32 11
  %75 = bitcast %"class.std::__1::stack"* %74 to %"struct.std::__1::__list_node"**
  %76 = load %"struct.std::__1::__list_node"*, %"struct.std::__1::__list_node"** %75, align 8
  %77 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %76, i64 0, i32 1, i32 1
  %78 = load %"struct.GrGLSLFragmentProcessor::EmitArgs"*, %"struct.GrGLSLFragmentProcessor::EmitArgs"** %77, align 8
  %79 = getelementptr inbounds %"struct.GrGLSLFragmentProcessor::EmitArgs", %"struct.GrGLSLFragmentProcessor::EmitArgs"* %78, i64 0, i32 3
  %80 = load %class.GrFragmentProcessor*, %class.GrFragmentProcessor** %79, align 8
  %81 = load i32, i32* %9, align 4
  %82 = load i8*, i8** %22, align 8
  %83 = call i32 @strncmp(i8* %82, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i64 3) #13
  %84 = icmp ne i32 %83, 0
  %85 = bitcast %class.GrGLSLUniformHandler* %72 to i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)***
  %86 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)**, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** %85, align 8
  %87 = getelementptr inbounds i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %86, i64 13
  %88 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %87, align 8
  %89 = call i32 %88(%class.GrGLSLUniformHandler* %72, %class.GrFragmentProcessor* %80, i32 16, i32 %81, i8* %82, i1 zeroext %84, i32 %63, i8** nonnull %10) #12
  store i32 %89, i32* %18, align 8
  %90 = bitcast i8** %10 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = bitcast i8** %22 to i64*
  store i64 %91, i64* %92, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %64) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %47) #12
  br label %93

93:                                               ; preds = %40, %28, %62
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4SkSL3dsl13DSLExpressionD1Ev(%"class.SkSL::dsl::DSLExpression"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl6DSLVarC2ENS0_7DSLTypeENS0_13DSLExpressionE(%"class.SkSL::dsl::DSLVar"*, %"class.SkSL::Type"*, i8, %"class.SkSL::dsl::DSLExpression"*) unnamed_addr #0 align 2 {
  %5 = alloca %"class.SkSL::dsl::DSLModifiers", align 8
  %6 = alloca %"class.SkSL::dsl::DSLExpression", align 8
  %7 = alloca %"class.SkSL::dsl::DSLExpression", align 8
  call void @_ZN4SkSL3dsl13DSLExpressionC1EOS1_(%"class.SkSL::dsl::DSLExpression"* nonnull %7, %"class.SkSL::dsl::DSLExpression"* dereferenceable(8) %3) #12
  %8 = bitcast %"class.SkSL::dsl::DSLModifiers"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %8)
  %9 = bitcast %"class.SkSL::dsl::DSLExpression"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = getelementptr inbounds %"class.SkSL::dsl::DSLModifiers", %"class.SkSL::dsl::DSLModifiers"* %5, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %"class.SkSL::dsl::DSLModifiers", %"class.SkSL::dsl::DSLModifiers"* %5, i64 0, i32 0, i32 0, i32 1
  %12 = bitcast i32* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 -1, i64 40, i1 false) #12
  %13 = getelementptr inbounds %"class.SkSL::dsl::DSLModifiers", %"class.SkSL::dsl::DSLModifiers"* %5, i64 0, i32 0, i32 0, i32 11
  %14 = bitcast [4 x i8]* %13 to i32*
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %"class.SkSL::dsl::DSLModifiers", %"class.SkSL::dsl::DSLModifiers"* %5, i64 0, i32 0, i32 0, i32 12, i32 0
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8** %15, align 8
  %16 = getelementptr inbounds %"class.SkSL::dsl::DSLModifiers", %"class.SkSL::dsl::DSLModifiers"* %5, i64 0, i32 0, i32 0, i32 12, i32 1
  %17 = bitcast i64* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 20, i1 false) #12
  call void @_ZN4SkSL3dsl13DSLExpressionC1EOS1_(%"class.SkSL::dsl::DSLExpression"* nonnull %6, %"class.SkSL::dsl::DSLExpression"* nonnull dereferenceable(8) %7) #12
  call void @_ZN4SkSL3dsl6DSLVarC2ENS0_12DSLModifiersENS0_7DSLTypeEPKcNS0_13DSLExpressionE(%"class.SkSL::dsl::DSLVar"* %0, %"class.SkSL::dsl::DSLModifiers"* nonnull byval(%"class.SkSL::dsl::DSLModifiers") align 8 %5, %"class.SkSL::Type"* %1, i8 %2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), %"class.SkSL::dsl::DSLExpression"* nonnull %6) #12
  call void @_ZN4SkSL3dsl13DSLExpressionD1Ev(%"class.SkSL::dsl::DSLExpression"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  call void @_ZN4SkSL3dsl13DSLExpressionD1Ev(%"class.SkSL::dsl::DSLExpression"* nonnull %7) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl6DSLVarC2ENS0_12DSLModifiersENS0_7DSLTypeENS0_13DSLExpressionE(%"class.SkSL::dsl::DSLVar"*, %"class.SkSL::dsl::DSLModifiers"* nocapture readonly byval(%"class.SkSL::dsl::DSLModifiers") align 8, %"class.SkSL::Type"*, i8, %"class.SkSL::dsl::DSLExpression"*) unnamed_addr #0 align 2 {
  %6 = alloca %"class.SkSL::dsl::DSLExpression", align 8
  call void @_ZN4SkSL3dsl13DSLExpressionC1EOS1_(%"class.SkSL::dsl::DSLExpression"* nonnull %6, %"class.SkSL::dsl::DSLExpression"* dereferenceable(8) %4) #12
  call void @_ZN4SkSL3dsl6DSLVarC2ENS0_12DSLModifiersENS0_7DSLTypeEPKcNS0_13DSLExpressionE(%"class.SkSL::dsl::DSLVar"* %0, %"class.SkSL::dsl::DSLModifiers"* nonnull byval(%"class.SkSL::dsl::DSLModifiers") align 8 %1, %"class.SkSL::Type"* %2, i8 %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), %"class.SkSL::dsl::DSLExpression"* nonnull %6)
  call void @_ZN4SkSL3dsl13DSLExpressionD1Ev(%"class.SkSL::dsl::DSLExpression"* nonnull %6) #12
  ret void
}

declare dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL3dsl7DSLType8skslTypeEv(%"class.SkSL::dsl::DSLType"*) local_unnamed_addr #1

declare i8* @_ZN4SkSL3dsl9DSLWriter4NameEPKc(i8*) local_unnamed_addr #1

declare zeroext i1 @_ZN4SkSL16type_to_grsltypeERKNS_7ContextERKNS_4TypeEP8GrSLType(%"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Type"* dereferenceable(184), i32*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl6DSLVarD2Ev(%"class.SkSL::dsl::DSLVar"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.SkSL::String", align 8
  %3 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 10
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %22

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::String"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 6
  %9 = load i8*, i8** %8, align 8
  call void (%"class.SkSL::String"*, i8*, ...) @_ZN4SkSL6String6printfEPKcz(%"class.SkSL::String"* nonnull sret %2, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i8* %9) #12
  %10 = bitcast %"class.SkSL::String"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  %14 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = select i1 %13, i8* %15, i8* %7
  call void @_ZN4SkSL3dsl9DSLWriter11ReportErrorEPKcPNS0_12PositionInfoE(i8* %16, %"class.SkSL::dsl::PositionInfo"* null) #12
  %17 = load i8, i8* %11, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %6
  %20 = load i8*, i8** %14, align 8
  call void @_ZdlPv(i8* %20) #14
  br label %21

21:                                               ; preds = %6, %19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #12
  br label %22

22:                                               ; preds = %1, %21
  %23 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 8
  call void @_ZN4SkSL3dsl13DSLExpressionD1Ev(%"class.SkSL::dsl::DSLExpression"* %23) #12
  %24 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %25 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %24, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %24, align 8
  %26 = icmp eq %"class.SkSL::Statement"* %25, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %22
  %28 = bitcast %"class.SkSL::Statement"* %25 to void (%"class.SkSL::Statement"*)***
  %29 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %29, i64 1
  %31 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %30, align 8
  call void %31(%"class.SkSL::Statement"* nonnull %25) #12
  br label %32

32:                                               ; preds = %22, %27
  ret void
}

declare void @_ZN4SkSL3dsl9DSLWriter11ReportErrorEPKcPNS0_12PositionInfoE(i8*, %"class.SkSL::dsl::PositionInfo"*) local_unnamed_addr #1

declare void @_ZN4SkSL6String6printfEPKcz(%"class.SkSL::String"* sret, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl6DSLVar4swapERS1_(%"class.SkSL::dsl::DSLVar"* nocapture, %"class.SkSL::dsl::DSLVar"* nocapture dereferenceable(152)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.SkSL::Modifiers", align 8
  %4 = bitcast %"struct.SkSL::Modifiers"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %4)
  %5 = bitcast %"class.SkSL::dsl::DSLVar"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %5, i64 80, i1 false) #12
  %6 = bitcast %"class.SkSL::dsl::DSLVar"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 80, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 80, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %4)
  %7 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %1, i64 0, i32 1
  %9 = bitcast %"class.SkSL::dsl::DSLType"* %7 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 1, i32 1
  %12 = load i8, i8* %11, align 8
  %13 = bitcast %"class.SkSL::dsl::DSLType"* %7 to i8*
  %14 = bitcast %"class.SkSL::dsl::DSLType"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 9, i1 false) #12
  %15 = bitcast %"class.SkSL::dsl::DSLType"* %8 to i64*
  store i64 %10, i64* %15, align 8
  %16 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %1, i64 0, i32 1, i32 1
  store i8 %12, i8* %16, align 8
  %17 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 2
  %18 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %1, i64 0, i32 2
  %19 = load i32, i32* %17, align 4
  %20 = load i32, i32* %18, align 4
  store i32 %20, i32* %17, align 4
  store i32 %19, i32* %18, align 4
  %21 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 4
  %22 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %1, i64 0, i32 4
  %23 = bitcast %"class.std::__1::unique_ptr"* %21 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.std::__1::unique_ptr"* %22 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %23, align 8
  store i64 %24, i64* %25, align 8
  %27 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 5
  %28 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %1, i64 0, i32 5
  %29 = bitcast %"class.SkSL::Variable"** %27 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %"class.SkSL::Variable"** %28 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %29, align 8
  store i64 %30, i64* %31, align 8
  %33 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 6
  %34 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %1, i64 0, i32 6
  %35 = bitcast i8** %33 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = bitcast i8** %34 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %35, align 8
  store i64 %36, i64* %37, align 8
  %39 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 7
  %40 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %1, i64 0, i32 7
  %41 = bitcast i8** %39 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast i8** %40 to i64*
  %44 = load i64, i64* %43, align 8
  store i64 %44, i64* %41, align 8
  store i64 %42, i64* %43, align 8
  %45 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 8, i32 0
  %46 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %1, i64 0, i32 8, i32 0
  %47 = bitcast %"class.std::__1::unique_ptr.16"* %45 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = bitcast %"class.std::__1::unique_ptr.16"* %46 to i64*
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %47, align 8
  store i64 %48, i64* %49, align 8
  %51 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 9
  %52 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %1, i64 0, i32 9
  %53 = load i8, i8* %51, align 1
  %54 = load i8, i8* %52, align 1
  store i8 %54, i8* %51, align 1
  store i8 %53, i8* %52, align 1
  %55 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %0, i64 0, i32 10
  %56 = getelementptr inbounds %"class.SkSL::dsl::DSLVar", %"class.SkSL::dsl::DSLVar"* %1, i64 0, i32 10
  %57 = load i8, i8* %55, align 1, !range !2
  %58 = load i8, i8* %56, align 1, !range !2
  store i8 %58, i8* %55, align 1
  store i8 %57, i8* %56, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl6DSLVarixEONS0_13DSLExpressionE(%"class.SkSL::dsl::DSLPossibleExpression"* noalias sret, %"class.SkSL::dsl::DSLVar"*, %"class.SkSL::dsl::DSLExpression"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.SkSL::dsl::DSLExpression", align 8
  %5 = alloca %"class.SkSL::dsl::DSLExpression", align 8
  %6 = bitcast %"class.SkSL::dsl::DSLExpression"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  call void @_ZN4SkSL3dsl13DSLExpressionC1ERNS0_6DSLVarE(%"class.SkSL::dsl::DSLExpression"* nonnull %4, %"class.SkSL::dsl::DSLVar"* dereferenceable(152) %1) #12
  call void @_ZN4SkSL3dsl13DSLExpressionC1EOS1_(%"class.SkSL::dsl::DSLExpression"* nonnull %5, %"class.SkSL::dsl::DSLExpression"* dereferenceable(8) %2) #12
  call void @_ZN4SkSL3dsl13DSLExpressionixES1_(%"class.SkSL::dsl::DSLPossibleExpression"* sret %0, %"class.SkSL::dsl::DSLExpression"* nonnull %4, %"class.SkSL::dsl::DSLExpression"* nonnull %5) #12
  call void @_ZN4SkSL3dsl13DSLExpressionD1Ev(%"class.SkSL::dsl::DSLExpression"* nonnull %5) #12
  call void @_ZN4SkSL3dsl13DSLExpressionD1Ev(%"class.SkSL::dsl::DSLExpression"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  ret void
}

declare void @_ZN4SkSL3dsl13DSLExpressionC1ERNS0_6DSLVarE(%"class.SkSL::dsl::DSLExpression"*, %"class.SkSL::dsl::DSLVar"* dereferenceable(152)) unnamed_addr #1

declare void @_ZN4SkSL3dsl13DSLExpressionixES1_(%"class.SkSL::dsl::DSLPossibleExpression"* sret, %"class.SkSL::dsl::DSLExpression"*, %"class.SkSL::dsl::DSLExpression"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl6DSLVaraSENS0_13DSLExpressionE(%"class.SkSL::dsl::DSLPossibleExpression"* noalias sret, %"class.SkSL::dsl::DSLVar"*, %"class.SkSL::dsl::DSLExpression"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.SkSL::dsl::DSLExpression", align 8
  %5 = bitcast %"class.SkSL::dsl::DSLExpression"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  call void @_ZN4SkSL3dsl13DSLExpressionC1ERNS0_6DSLVarE(%"class.SkSL::dsl::DSLExpression"* nonnull %4, %"class.SkSL::dsl::DSLVar"* dereferenceable(152) %1) #12
  %6 = call %"class.SkSL::Expression"* @_ZN4SkSL3dsl13DSLExpression7releaseEv(%"class.SkSL::dsl::DSLExpression"* nonnull %4) #12
  %7 = call %"class.SkSL::Expression"* @_ZN4SkSL3dsl13DSLExpression7releaseEv(%"class.SkSL::dsl::DSLExpression"* %2) #12
  %8 = call %"class.SkSL::Expression"* @_ZN4SkSL3dsl9DSLWriter13ConvertBinaryENSt3__110unique_ptrINS_10ExpressionENS2_14default_deleteIS4_EEEENS_8OperatorES7_(%"class.SkSL::Expression"* %6, i32 64, %"class.SkSL::Expression"* %7) #12
  call void @_ZN4SkSL3dsl21DSLPossibleExpressionC1ENSt3__110unique_ptrINS_10ExpressionENS2_14default_deleteIS4_EEEE(%"class.SkSL::dsl::DSLPossibleExpression"* %0, %"class.SkSL::Expression"* %8) #12
  call void @_ZN4SkSL3dsl13DSLExpressionD1Ev(%"class.SkSL::dsl::DSLExpression"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  ret void
}

declare %"class.SkSL::Expression"* @_ZN4SkSL3dsl9DSLWriter13ConvertBinaryENSt3__110unique_ptrINS_10ExpressionENS2_14default_deleteIS4_EEEENS_8OperatorES7_(%"class.SkSL::Expression"*, i32, %"class.SkSL::Expression"*) local_unnamed_addr #1

declare %"class.SkSL::Expression"* @_ZN4SkSL3dsl13DSLExpression7releaseEv(%"class.SkSL::dsl::DSLExpression"*) local_unnamed_addr #1

declare void @_ZN4SkSL3dsl21DSLPossibleExpressionC1ENSt3__110unique_ptrINS_10ExpressionENS2_14default_deleteIS4_EEEE(%"class.SkSL::dsl::DSLPossibleExpression"*, %"class.SkSL::Expression"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.std::__1::__hash_node_base"*, i8 } @_ZNSt3__112__hash_tableIN4SkSL9ModifiersENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS2_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table"*, %"struct.SkSL::Modifiers"* dereferenceable(80), %"struct.SkSL::Modifiers"* dereferenceable(80)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %1, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %1, i64 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = shl nsw i64 %9, 8
  %11 = xor i64 %10, %6
  %12 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %1, i64 0, i32 0, i32 6
  %13 = load i32, i32* %12, align 8
  %14 = sext i32 %13 to i64
  %15 = shl nsw i64 %14, 16
  %16 = xor i64 %11, %15
  %17 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %74, label %20

20:                                               ; preds = %3
  %21 = tail call i64 @llvm.ctpop.i64(i64 %18) #12, !range !3
  %22 = icmp ugt i64 %21, 1
  br i1 %22, label %26, label %23

23:                                               ; preds = %20
  %24 = add i64 %18, -1
  %25 = and i64 %16, %24
  br label %30

26:                                               ; preds = %20
  %27 = icmp ult i64 %16, %18
  br i1 %27, label %30, label %28

28:                                               ; preds = %26
  %29 = urem i64 %16, %18
  br label %30

30:                                               ; preds = %23, %26, %28
  %31 = phi i64 [ %25, %23 ], [ %29, %28 ], [ %16, %26 ]
  %32 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %33 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %32, align 8
  %34 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %33, i64 %31
  %35 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %34, align 8
  %36 = icmp eq %"struct.std::__1::__hash_node_base"* %35, null
  br i1 %36, label %74, label %37

37:                                               ; preds = %30
  %38 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %35, i64 0, i32 0
  %39 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %38, align 8
  %40 = icmp eq %"struct.std::__1::__hash_node_base"* %39, null
  br i1 %40, label %74, label %41

41:                                               ; preds = %37
  %42 = add i64 %18, -1
  %43 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %1, i64 0, i32 0
  br label %44

44:                                               ; preds = %41, %70
  %45 = phi %"struct.std::__1::__hash_node_base"* [ %39, %41 ], [ %72, %70 ]
  %46 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %45, i64 1
  %47 = bitcast %"struct.std::__1::__hash_node_base"* %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = icmp eq i64 %48, %16
  br i1 %49, label %60, label %50

50:                                               ; preds = %44
  br i1 %22, label %53, label %51

51:                                               ; preds = %50
  %52 = and i64 %48, %42
  br label %57

53:                                               ; preds = %50
  %54 = icmp ult i64 %48, %18
  br i1 %54, label %57, label %55

55:                                               ; preds = %53
  %56 = urem i64 %48, %18
  br label %57

57:                                               ; preds = %51, %53, %55
  %58 = phi i64 [ %52, %51 ], [ %56, %55 ], [ %48, %53 ]
  %59 = icmp eq i64 %58, %31
  br i1 %59, label %60, label %74

60:                                               ; preds = %44, %57
  %61 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %45, i64 2
  %62 = bitcast %"struct.std::__1::__hash_node_base"* %61 to %"struct.SkSL::Layout"*
  %63 = tail call zeroext i1 @_ZNK4SkSL6LayouteqERKS0_(%"struct.SkSL::Layout"* %62, %"struct.SkSL::Layout"* dereferenceable(72) %43) #12
  br i1 %63, label %64, label %70

64:                                               ; preds = %60
  %65 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %45, i64 11
  %66 = bitcast %"struct.std::__1::__hash_node_base"* %65 to i32*
  %67 = load i32, i32* %66, align 8
  %68 = load i32, i32* %4, align 8
  %69 = icmp eq i32 %67, %68
  br i1 %69, label %160, label %70

70:                                               ; preds = %64, %60
  %71 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %45, i64 0, i32 0
  %72 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %71, align 8
  %73 = icmp eq %"struct.std::__1::__hash_node_base"* %72, null
  br i1 %73, label %74, label %44

74:                                               ; preds = %57, %70, %37, %30, %3
  %75 = phi i64 [ %31, %30 ], [ -6148914691236517206, %3 ], [ %31, %37 ], [ %31, %70 ], [ %31, %57 ]
  %76 = tail call i8* @_Znwm(i64 96) #14, !noalias !4
  %77 = getelementptr inbounds i8, i8* %76, i64 16
  %78 = bitcast %"struct.SkSL::Modifiers"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 80, i1 false) #12, !noalias !4
  %79 = getelementptr inbounds i8, i8* %76, i64 8
  %80 = bitcast i8* %79 to i64*
  store i64 %16, i64* %80, align 8, !noalias !4
  %81 = bitcast i8* %76 to %"struct.std::__1::__hash_node_base"**
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %81, align 8, !noalias !4
  %82 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 2, i32 0, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = add i64 %83, 1
  %85 = uitofp i64 %84 to float
  %86 = uitofp i64 %18 to float
  %87 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 3, i32 0, i32 0
  %88 = load float, float* %87, align 4
  %89 = fmul float %88, %86
  %90 = fcmp olt float %89, %85
  %91 = or i1 %19, %90
  br i1 %91, label %92, label %115

92:                                               ; preds = %74
  %93 = shl i64 %18, 1
  %94 = icmp ult i64 %18, 3
  %95 = tail call i64 @llvm.ctpop.i64(i64 %18) #12, !range !3
  %96 = icmp ugt i64 %95, 1
  %97 = or i1 %94, %96
  %98 = zext i1 %97 to i64
  %99 = or i64 %93, %98
  %100 = fdiv float %85, %88
  %101 = tail call float @llvm.ceil.f32(float %100) #12
  %102 = fptoui float %101 to i64
  %103 = icmp ult i64 %99, %102
  %104 = select i1 %103, i64 %102, i64 %99
  tail call void @_ZNSt3__112__hash_tableIN4SkSL9ModifiersENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE6rehashEm(%"class.std::__1::__hash_table"* %0, i64 %104)
  %105 = load i64, i64* %17, align 8
  %106 = tail call i64 @llvm.ctpop.i64(i64 %105) #12, !range !3
  %107 = icmp ugt i64 %106, 1
  br i1 %107, label %111, label %108

108:                                              ; preds = %92
  %109 = add i64 %105, -1
  %110 = and i64 %109, %16
  br label %115

111:                                              ; preds = %92
  %112 = icmp ult i64 %16, %105
  br i1 %112, label %115, label %113

113:                                              ; preds = %111
  %114 = urem i64 %16, %105
  br label %115

115:                                              ; preds = %113, %111, %108, %74
  %116 = phi i64 [ %18, %74 ], [ %105, %108 ], [ %105, %111 ], [ %105, %113 ]
  %117 = phi i64 [ %75, %74 ], [ %110, %108 ], [ %16, %111 ], [ %114, %113 ]
  %118 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %119 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %118, align 8
  %120 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %119, i64 %117
  %121 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %120, align 8
  %122 = icmp eq %"struct.std::__1::__hash_node_base"* %121, null
  br i1 %122, label %123, label %149

123:                                              ; preds = %115
  %124 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 0, i32 0
  %125 = bitcast %"struct.std::__1::__hash_node_base"* %124 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = bitcast i8* %76 to i64*
  store i64 %126, i64* %127, align 8
  %128 = bitcast %"struct.std::__1::__hash_node_base"* %124 to i8**
  store i8* %76, i8** %128, align 8
  store %"struct.std::__1::__hash_node_base"* %124, %"struct.std::__1::__hash_node_base"** %120, align 8
  %129 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %81, align 8
  %130 = icmp eq %"struct.std::__1::__hash_node_base"* %129, null
  br i1 %130, label %156, label %131

131:                                              ; preds = %123
  %132 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %129, i64 1
  %133 = bitcast %"struct.std::__1::__hash_node_base"* %132 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = tail call i64 @llvm.ctpop.i64(i64 %116) #12, !range !3
  %136 = icmp ugt i64 %135, 1
  br i1 %136, label %140, label %137

137:                                              ; preds = %131
  %138 = add i64 %116, -1
  %139 = and i64 %134, %138
  br label %144

140:                                              ; preds = %131
  %141 = icmp ult i64 %134, %116
  br i1 %141, label %144, label %142

142:                                              ; preds = %140
  %143 = urem i64 %134, %116
  br label %144

144:                                              ; preds = %137, %140, %142
  %145 = phi i64 [ %139, %137 ], [ %143, %142 ], [ %134, %140 ]
  %146 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %118, align 8
  %147 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %146, i64 %145
  %148 = bitcast %"struct.std::__1::__hash_node_base"** %147 to i8**
  br label %154

149:                                              ; preds = %115
  %150 = bitcast %"struct.std::__1::__hash_node_base"* %121 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i8* %76 to i64*
  store i64 %151, i64* %152, align 8
  %153 = bitcast %"struct.std::__1::__hash_node_base"* %121 to i8**
  br label %154

154:                                              ; preds = %144, %149
  %155 = phi i8** [ %153, %149 ], [ %148, %144 ]
  store i8* %76, i8** %155, align 8
  br label %156

156:                                              ; preds = %154, %123
  %157 = bitcast i8* %76 to %"struct.std::__1::__hash_node_base"*
  %158 = load i64, i64* %82, align 8
  %159 = add i64 %158, 1
  store i64 %159, i64* %82, align 8
  br label %160

160:                                              ; preds = %64, %156
  %161 = phi i8 [ 1, %156 ], [ 0, %64 ]
  %162 = phi %"struct.std::__1::__hash_node_base"* [ %157, %156 ], [ %45, %64 ]
  %163 = insertvalue { %"struct.std::__1::__hash_node_base"*, i8 } undef, %"struct.std::__1::__hash_node_base"* %162, 0
  %164 = insertvalue { %"struct.std::__1::__hash_node_base"*, i8 } %163, i8 %161, 1
  ret { %"struct.std::__1::__hash_node_base"*, i8 } %164
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableIN4SkSL9ModifiersENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE6rehashEm(%"class.std::__1::__hash_table"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 1
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = tail call i64 @llvm.ctpop.i64(i64 %1), !range !3
  %6 = icmp ugt i64 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %1) #12
  br label %9

9:                                                ; preds = %2, %4, %7
  %10 = phi i64 [ %8, %7 ], [ %1, %4 ], [ 2, %2 ]
  %11 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %10, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  tail call void @_ZNSt3__112__hash_tableIN4SkSL9ModifiersENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE8__rehashEm(%"class.std::__1::__hash_table"* %0, i64 %10)
  br label %45

15:                                               ; preds = %9
  %16 = icmp ult i64 %10, %12
  br i1 %16, label %17, label %45

17:                                               ; preds = %15
  %18 = icmp ugt i64 %12, 2
  %19 = tail call i64 @llvm.ctpop.i64(i64 %12) #12, !range !3
  %20 = icmp ult i64 %19, 2
  %21 = and i1 %18, %20
  %22 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 2, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = uitofp i64 %23 to float
  %25 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 3, i32 0, i32 0
  %26 = load float, float* %25, align 4
  %27 = fdiv float %24, %26
  %28 = tail call float @llvm.ceil.f32(float %27) #12
  %29 = fptoui float %28 to i64
  br i1 %21, label %30, label %37

30:                                               ; preds = %17
  %31 = icmp ult i64 %29, 2
  br i1 %31, label %39, label %32

32:                                               ; preds = %30
  %33 = add i64 %29, -1
  %34 = tail call i64 @llvm.ctlz.i64(i64 %33, i1 true) #12, !range !3
  %35 = sub nuw nsw i64 64, %34
  %36 = shl i64 1, %35
  br label %39

37:                                               ; preds = %17
  %38 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %29) #12
  br label %39

39:                                               ; preds = %32, %30, %37
  %40 = phi i64 [ %38, %37 ], [ %36, %32 ], [ %29, %30 ]
  %41 = icmp ult i64 %10, %40
  %42 = select i1 %41, i64 %40, i64 %10
  %43 = icmp ult i64 %42, %12
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  tail call void @_ZNSt3__112__hash_tableIN4SkSL9ModifiersENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE8__rehashEm(%"class.std::__1::__hash_table"* %0, i64 %42)
  br label %45

45:                                               ; preds = %15, %44, %39, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL6LayouteqERKS0_(%"struct.SkSL::Layout"*, %"struct.SkSL::Layout"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %81

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %14, label %81

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %1, i64 0, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %20, label %81

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %0, i64 0, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %1, i64 0, i32 3
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %22, %24
  br i1 %25, label %26, label %81

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %0, i64 0, i32 4
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %1, i64 0, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %28, %30
  br i1 %31, label %32, label %81

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %0, i64 0, i32 5
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %1, i64 0, i32 5
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %34, %36
  br i1 %37, label %38, label %81

38:                                               ; preds = %32
  %39 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %0, i64 0, i32 6
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %1, i64 0, i32 6
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %40, %42
  br i1 %43, label %44, label %81

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %0, i64 0, i32 7
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %1, i64 0, i32 7
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %46, %48
  br i1 %49, label %50, label %81

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %0, i64 0, i32 8
  %52 = load i32, i32* %51, align 8
  %53 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %1, i64 0, i32 8
  %54 = load i32, i32* %53, align 8
  %55 = icmp eq i32 %52, %54
  br i1 %55, label %56, label %81

56:                                               ; preds = %50
  %57 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %0, i64 0, i32 9
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %1, i64 0, i32 9
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %58, %60
  br i1 %61, label %62, label %81

62:                                               ; preds = %56
  %63 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %0, i64 0, i32 10
  %64 = load i32, i32* %63, align 8
  %65 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %1, i64 0, i32 10
  %66 = load i32, i32* %65, align 8
  %67 = icmp eq i32 %64, %66
  br i1 %67, label %68, label %81

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %0, i64 0, i32 12
  %70 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %1, i64 0, i32 12, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %1, i64 0, i32 12, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = tail call zeroext i1 @_ZNK4SkSL14StringFragmenteqES0_(%"struct.SkSL::StringFragment"* %69, i8* %71, i64 %73) #12
  br i1 %74, label %75, label %81

75:                                               ; preds = %68
  %76 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %0, i64 0, i32 13
  %77 = load i32, i32* %76, align 8
  %78 = getelementptr inbounds %"struct.SkSL::Layout", %"struct.SkSL::Layout"* %1, i64 0, i32 13
  %79 = load i32, i32* %78, align 8
  %80 = icmp eq i32 %77, %79
  br label %81

81:                                               ; preds = %75, %68, %62, %56, %50, %44, %38, %32, %26, %20, %14, %8, %2
  %82 = phi i1 [ false, %68 ], [ false, %62 ], [ false, %56 ], [ false, %50 ], [ false, %44 ], [ false, %38 ], [ false, %32 ], [ false, %26 ], [ false, %20 ], [ false, %14 ], [ false, %8 ], [ false, %2 ], [ %80, %75 ]
  ret i1 %82
}

declare zeroext i1 @_ZNK4SkSL14StringFragmenteqES0_(%"struct.SkSL::StringFragment"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare i64 @_ZNSt3__112__next_primeEm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableIN4SkSL9ModifiersENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE8__rehashEm(%"class.std::__1::__hash_table"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %151, label %5

5:                                                ; preds = %2
  %6 = icmp ugt i64 %1, 2305843009213693951
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @abort() #15
  unreachable

8:                                                ; preds = %5
  %9 = shl i64 %1, 3
  %10 = tail call i8* @_Znwm(i64 %9) #14
  %11 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %13 = bitcast %"class.std::__1::__hash_table"* %0 to i8**
  store i8* %10, i8** %13, align 8
  %14 = icmp eq %"struct.std::__1::__hash_node_base"** %12, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %8
  %16 = bitcast %"struct.std::__1::__hash_node_base"** %12 to i8*
  tail call void @_ZdlPv(i8* %16) #14
  br label %17

17:                                               ; preds = %15, %8
  %18 = getelementptr inbounds %"class.std::__1::__bucket_list_deallocator", %"class.std::__1::__bucket_list_deallocator"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %18, align 8
  %19 = add i64 %1, -1
  %20 = and i64 %1, 3
  %21 = icmp ult i64 %19, 3
  br i1 %21, label %24, label %22

22:                                               ; preds = %17
  %23 = sub i64 %1, %20
  br label %40

24:                                               ; preds = %40, %17
  %25 = phi i64 [ 0, %17 ], [ %54, %40 ]
  %26 = icmp eq i64 %20, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %24, %27
  %28 = phi i64 [ %32, %27 ], [ %25, %24 ]
  %29 = phi i64 [ %33, %27 ], [ %20, %24 ]
  %30 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %31 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %30, i64 %28
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %31, align 8
  %32 = add nuw i64 %28, 1
  %33 = add i64 %29, -1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %27, !llvm.loop !7

35:                                               ; preds = %27, %24
  %36 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 0, i32 0
  %37 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %36, i64 0, i32 0
  %38 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %37, align 8
  %39 = icmp eq %"struct.std::__1::__hash_node_base"* %38, null
  br i1 %39, label %159, label %57

40:                                               ; preds = %40, %22
  %41 = phi i64 [ 0, %22 ], [ %54, %40 ]
  %42 = phi i64 [ %23, %22 ], [ %55, %40 ]
  %43 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %44 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %43, i64 %41
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %44, align 8
  %45 = or i64 %41, 1
  %46 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %47 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %46, i64 %45
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %47, align 8
  %48 = or i64 %41, 2
  %49 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %50 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %49, i64 %48
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %50, align 8
  %51 = or i64 %41, 3
  %52 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %53 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %52, i64 %51
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %53, align 8
  %54 = add nuw i64 %41, 4
  %55 = add i64 %42, -4
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %24, label %40

57:                                               ; preds = %35
  %58 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %38, i64 1
  %59 = bitcast %"struct.std::__1::__hash_node_base"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = tail call i64 @llvm.ctpop.i64(i64 %1) #12, !range !3
  %62 = icmp ugt i64 %61, 1
  br i1 %62, label %66, label %63

63:                                               ; preds = %57
  %64 = add i64 %1, -1
  %65 = and i64 %60, %64
  br label %70

66:                                               ; preds = %57
  %67 = icmp ult i64 %60, %1
  br i1 %67, label %70, label %68

68:                                               ; preds = %66
  %69 = urem i64 %60, %1
  br label %70

70:                                               ; preds = %63, %66, %68
  %71 = phi i64 [ %65, %63 ], [ %69, %68 ], [ %60, %66 ]
  %72 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %73 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %72, i64 %71
  store %"struct.std::__1::__hash_node_base"* %36, %"struct.std::__1::__hash_node_base"** %73, align 8
  %74 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %38, i64 0, i32 0
  %75 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %74, align 8
  %76 = icmp eq %"struct.std::__1::__hash_node_base"* %75, null
  br i1 %76, label %159, label %77

77:                                               ; preds = %70
  %78 = add i64 %1, -1
  br label %79

79:                                               ; preds = %77, %145
  %80 = phi %"struct.std::__1::__hash_node_base"* [ %75, %77 ], [ %149, %145 ]
  %81 = phi i64 [ %71, %77 ], [ %147, %145 ]
  %82 = phi %"struct.std::__1::__hash_node_base"* [ %38, %77 ], [ %146, %145 ]
  %83 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %80, i64 1
  %84 = bitcast %"struct.std::__1::__hash_node_base"* %83 to i64*
  %85 = load i64, i64* %84, align 8
  br i1 %62, label %88, label %86

86:                                               ; preds = %79
  %87 = and i64 %85, %78
  br label %92

88:                                               ; preds = %79
  %89 = icmp ult i64 %85, %1
  br i1 %89, label %92, label %90

90:                                               ; preds = %88
  %91 = urem i64 %85, %1
  br label %92

92:                                               ; preds = %86, %88, %90
  %93 = phi i64 [ %87, %86 ], [ %91, %90 ], [ %85, %88 ]
  %94 = icmp eq i64 %93, %81
  br i1 %94, label %145, label %95

95:                                               ; preds = %92
  %96 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %97 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %96, i64 %93
  %98 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %97, align 8
  %99 = icmp eq %"struct.std::__1::__hash_node_base"* %98, null
  br i1 %99, label %112, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %80, i64 11
  %102 = bitcast %"struct.std::__1::__hash_node_base"* %101 to i32*
  %103 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %80, i64 0, i32 0
  %104 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %103, align 8
  %105 = icmp eq %"struct.std::__1::__hash_node_base"* %104, null
  br i1 %105, label %131, label %106

106:                                              ; preds = %100
  %107 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %80, i64 2
  %108 = bitcast %"struct.std::__1::__hash_node_base"* %107 to %"struct.SkSL::Layout"*
  %109 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %104, i64 2
  %110 = bitcast %"struct.std::__1::__hash_node_base"* %109 to %"struct.SkSL::Layout"*
  %111 = tail call zeroext i1 @_ZNK4SkSL6LayouteqERKS0_(%"struct.SkSL::Layout"* %108, %"struct.SkSL::Layout"* dereferenceable(72) %110) #12
  br i1 %111, label %117, label %131

112:                                              ; preds = %95
  store %"struct.std::__1::__hash_node_base"* %82, %"struct.std::__1::__hash_node_base"** %97, align 8
  br label %145

113:                                              ; preds = %126
  %114 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %129, i64 2
  %115 = bitcast %"struct.std::__1::__hash_node_base"* %114 to %"struct.SkSL::Layout"*
  %116 = tail call zeroext i1 @_ZNK4SkSL6LayouteqERKS0_(%"struct.SkSL::Layout"* %108, %"struct.SkSL::Layout"* dereferenceable(72) %115) #12
  br i1 %116, label %117, label %131

117:                                              ; preds = %106, %113
  %118 = phi %"struct.std::__1::__hash_node_base"* [ %127, %113 ], [ %80, %106 ]
  %119 = phi %"struct.std::__1::__hash_node_base"** [ %128, %113 ], [ %103, %106 ]
  %120 = phi %"struct.std::__1::__hash_node_base"* [ %129, %113 ], [ %104, %106 ]
  %121 = load i32, i32* %102, align 8
  %122 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %120, i64 11
  %123 = bitcast %"struct.std::__1::__hash_node_base"* %122 to i32*
  %124 = load i32, i32* %123, align 8
  %125 = icmp eq i32 %121, %124
  br i1 %125, label %126, label %131

126:                                              ; preds = %117
  %127 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %119, align 8
  %128 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %127, i64 0, i32 0
  %129 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %128, align 8
  %130 = icmp eq %"struct.std::__1::__hash_node_base"* %129, null
  br i1 %130, label %131, label %113

131:                                              ; preds = %113, %126, %117, %106, %100
  %132 = phi %"struct.std::__1::__hash_node_base"* [ %80, %100 ], [ %80, %106 ], [ %118, %117 ], [ %127, %126 ], [ %127, %113 ]
  %133 = bitcast %"struct.std::__1::__hash_node_base"* %132 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = bitcast %"struct.std::__1::__hash_node_base"* %82 to i64*
  store i64 %134, i64* %135, align 8
  %136 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %137 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %136, i64 %93
  %138 = bitcast %"struct.std::__1::__hash_node_base"** %137 to i64**
  %139 = load i64*, i64** %138, align 8
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %133, align 8
  %141 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %142 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %141, i64 %93
  %143 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %142, align 8
  %144 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %143, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base"* %80, %"struct.std::__1::__hash_node_base"** %144, align 8
  br label %145

145:                                              ; preds = %92, %131, %112
  %146 = phi %"struct.std::__1::__hash_node_base"* [ %80, %112 ], [ %82, %131 ], [ %80, %92 ]
  %147 = phi i64 [ %93, %112 ], [ %81, %131 ], [ %81, %92 ]
  %148 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %146, i64 0, i32 0
  %149 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %148, align 8
  %150 = icmp eq %"struct.std::__1::__hash_node_base"* %149, null
  br i1 %150, label %159, label %79

151:                                              ; preds = %2
  %152 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %153 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %152, align 8
  store %"struct.std::__1::__hash_node_base"** null, %"struct.std::__1::__hash_node_base"*** %152, align 8
  %154 = icmp eq %"struct.std::__1::__hash_node_base"** %153, null
  br i1 %154, label %157, label %155

155:                                              ; preds = %151
  %156 = bitcast %"struct.std::__1::__hash_node_base"** %153 to i8*
  tail call void @_ZdlPv(i8* %156) #14
  br label %157

157:                                              ; preds = %151, %155
  %158 = getelementptr inbounds %"class.std::__1::__bucket_list_deallocator", %"class.std::__1::__bucket_list_deallocator"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 0, i64* %158, align 8
  br label %159

159:                                              ; preds = %145, %70, %35, %157
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #8

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #8

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #2

declare i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN4SkSL6IRNodeENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.63"*, %"class.std::__1::unique_ptr.65"* dereferenceable(8)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr.65"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.63"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.63"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #15
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr.65"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #15
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #14
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr.65"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr.65"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr.65"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr.65"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %"class.SkSL::IRNode"* null, %"class.SkSL::IRNode"** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr.65"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr.65"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr.65"*, %"class.std::__1::unique_ptr.65"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr.65"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr.65"*, %"class.std::__1::unique_ptr.65"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr.65"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"class.SkSL::IRNode"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr.65"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr.65"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr.65"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %"class.SkSL::IRNode"* null, %"class.SkSL::IRNode"** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.65"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !9

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr.65"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr.65"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr.65"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr.65"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr.65"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr.65"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"class.SkSL::IRNode"* null, %"class.SkSL::IRNode"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr.65"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr.65"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"class.SkSL::IRNode"* null, %"class.SkSL::IRNode"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr.65"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.65"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.SkSL::IRNode"* null, %"class.SkSL::IRNode"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr.65"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr.65"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"class.SkSL::IRNode"* null, %"class.SkSL::IRNode"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr.65"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr.65"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.SkSL::IRNode"* null, %"class.SkSL::IRNode"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr.65"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr.65"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %"class.SkSL::IRNode"* null, %"class.SkSL::IRNode"** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr.65"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr.65"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %"class.SkSL::IRNode"* null, %"class.SkSL::IRNode"** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr.65"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr.65"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %"class.SkSL::IRNode"* null, %"class.SkSL::IRNode"** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr.65"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr.65"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr.65"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr.65"*, %"class.std::__1::unique_ptr.65"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr.65"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr.65"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr.65"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr.65"*
  %138 = icmp eq %"class.std::__1::unique_ptr.65"* %133, %137
  br i1 %138, label %152, label %139

139:                                              ; preds = %132, %150
  %140 = phi %"class.std::__1::unique_ptr.65"* [ %141, %150 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"class.SkSL::IRNode"*, %"class.SkSL::IRNode"** %142, align 8
  store %"class.SkSL::IRNode"* null, %"class.SkSL::IRNode"** %142, align 8
  %144 = icmp eq %"class.SkSL::IRNode"* %143, null
  br i1 %144, label %150, label %145

145:                                              ; preds = %139
  %146 = bitcast %"class.SkSL::IRNode"* %143 to void (%"class.SkSL::IRNode"*)***
  %147 = load void (%"class.SkSL::IRNode"*)**, void (%"class.SkSL::IRNode"*)*** %146, align 8
  %148 = getelementptr inbounds void (%"class.SkSL::IRNode"*)*, void (%"class.SkSL::IRNode"*)** %147, i64 1
  %149 = load void (%"class.SkSL::IRNode"*)*, void (%"class.SkSL::IRNode"*)** %148, align 8
  tail call void %149(%"class.SkSL::IRNode"* nonnull %143) #12
  br label %150

150:                                              ; preds = %145, %139
  %151 = icmp eq %"class.std::__1::unique_ptr.65"* %141, %137
  br i1 %151, label %152, label %139

152:                                              ; preds = %150, %132
  %153 = icmp eq i64 %135, 0
  br i1 %153, label %156, label %154

154:                                              ; preds = %152
  %155 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %155) #14
  br label %156

156:                                              ; preds = %152, %154
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { builtin nounwind }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{i64 0, i64 65}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZNSt3__112__hash_tableIN4SkSL9ModifiersENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE21__construct_node_hashIRKS2_JEEENS_10unique_ptrINS_11__hash_nodeIS2_PvEENS_22__hash_node_destructorINS7_ISG_EEEEEEmOT_DpOT0_: argument 0"}
!6 = distinct !{!6, !"_ZNSt3__112__hash_tableIN4SkSL9ModifiersENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE21__construct_node_hashIRKS2_JEEENS_10unique_ptrINS_11__hash_nodeIS2_PvEENS_22__hash_node_destructorINS7_ISG_EEEEEEmOT_DpOT0_"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.unroll.disable"}
!9 = distinct !{!9, !8}
