; ModuleID = '../../third_party/libjpeg_turbo/jccolor.c'
source_filename = "../../third_party/libjpeg_turbo/jccolor.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder*, %struct.jpeg_scan_info*, i32 }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_compress_struct*)*, {}* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_comp_master = type { {}*, {}*, {}*, i32, i32 }
%struct.jpeg_c_main_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32)* }
%struct.jpeg_c_prep_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* }
%struct.jpeg_c_coef_controller = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, i8***)* }
%struct.jpeg_marker_writer = type { {}*, {}*, {}*, {}*, {}*, void (%struct.jpeg_compress_struct*, i32, i32)*, void (%struct.jpeg_compress_struct*, i32)* }
%struct.jpeg_color_converter = type { {}*, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* }
%struct.jpeg_downsampler = type { {}*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, i32 }
%struct.jpeg_forward_dct = type { {}*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)* }
%struct.jpeg_entropy_encoder = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, {}* }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.my_color_converter = type { %struct.jpeg_color_converter, i64* }

@rgb_pixelsize = internal unnamed_addr constant [17 x i32] [i32 -1, i32 -1, i32 3, i32 -1, i32 -1, i32 -1, i32 3, i32 4, i32 3, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 -1], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_color_converter(%struct.jpeg_compress_struct*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %4 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %3, i64 0, i32 0
  %5 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %4, align 8
  %6 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %7 = tail call i8* %5(%struct.jpeg_common_struct* %6, i32 1, i64 24) #4
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %9 = bitcast %struct.jpeg_color_converter** %8 to i8**
  store i8* %7, i8** %9, align 8
  %10 = bitcast i8* %7 to void (%struct.jpeg_compress_struct*)**
  store void (%struct.jpeg_compress_struct*)* @null_method, void (%struct.jpeg_compress_struct*)** %10, align 8
  %11 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 10
  %12 = load i32, i32* %11, align 4
  switch i32 %12, label %60 [
    i32 1, label %13
    i32 2, label %24
    i32 6, label %24
    i32 7, label %24
    i32 8, label %24
    i32 9, label %24
    i32 10, label %24
    i32 11, label %24
    i32 12, label %24
    i32 13, label %24
    i32 14, label %24
    i32 15, label %24
    i32 3, label %38
    i32 4, label %49
    i32 5, label %49
  ]

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 9
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %71, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %19 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %18, align 8
  %20 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %19, i64 0, i32 5
  store i32 9, i32* %20, align 8
  %21 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %18, align 8
  %22 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %21, i64 0, i32 0
  %23 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %22, align 8
  tail call void %23(%struct.jpeg_common_struct* %6) #4
  br label %71

24:                                               ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  %25 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 9
  %26 = load i32, i32* %25, align 8
  %27 = zext i32 %12 to i64
  %28 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_pixelsize, i64 0, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %26, %29
  br i1 %30, label %71, label %31

31:                                               ; preds = %24
  %32 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %33 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %32, align 8
  %34 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %33, i64 0, i32 5
  store i32 9, i32* %34, align 8
  %35 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %32, align 8
  %36 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %35, i64 0, i32 0
  %37 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %36, align 8
  tail call void %37(%struct.jpeg_common_struct* %6) #4
  br label %71

38:                                               ; preds = %1
  %39 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 9
  %40 = load i32, i32* %39, align 8
  %41 = icmp eq i32 %40, 3
  br i1 %41, label %71, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %44 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %43, align 8
  %45 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %44, i64 0, i32 5
  store i32 9, i32* %45, align 8
  %46 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %43, align 8
  %47 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %46, i64 0, i32 0
  %48 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %47, align 8
  tail call void %48(%struct.jpeg_common_struct* %6) #4
  br label %71

49:                                               ; preds = %1, %1
  %50 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 9
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, 4
  br i1 %52, label %71, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %55 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %54, align 8
  %56 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %55, i64 0, i32 5
  store i32 9, i32* %56, align 8
  %57 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %54, align 8
  %58 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %57, i64 0, i32 0
  %59 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %58, align 8
  tail call void %59(%struct.jpeg_common_struct* %6) #4
  br label %71

60:                                               ; preds = %1
  %61 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 9
  %62 = load i32, i32* %61, align 8
  %63 = icmp slt i32 %62, 1
  br i1 %63, label %64, label %71

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %66 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %65, align 8
  %67 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %66, i64 0, i32 5
  store i32 9, i32* %67, align 8
  %68 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %65, align 8
  %69 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %68, i64 0, i32 0
  %70 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %69, align 8
  tail call void %70(%struct.jpeg_common_struct* %6) #4
  br label %71

71:                                               ; preds = %13, %24, %38, %49, %60, %64, %53, %42, %31, %17
  %72 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 14
  %73 = load i32, i32* %72, align 8
  switch i32 %73, label %230 [
    i32 1, label %74
    i32 2, label %109
    i32 3, label %148
    i32 4, label %180
    i32 5, label %204
  ]

74:                                               ; preds = %71
  %75 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %76 = load i32, i32* %75, align 4
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %85, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %80 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %79, align 8
  %81 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %80, i64 0, i32 5
  store i32 10, i32* %81, align 8
  %82 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %79, align 8
  %83 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %82, i64 0, i32 0
  %84 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %83, align 8
  tail call void %84(%struct.jpeg_common_struct* %6) #4
  br label %85

85:                                               ; preds = %74, %78
  %86 = load i32, i32* %11, align 4
  switch i32 %86, label %102 [
    i32 1, label %87
    i32 2, label %90
    i32 6, label %90
    i32 7, label %90
    i32 8, label %90
    i32 9, label %90
    i32 10, label %90
    i32 11, label %90
    i32 12, label %90
    i32 13, label %90
    i32 14, label %90
    i32 15, label %90
    i32 3, label %99
  ]

87:                                               ; preds = %85
  %88 = getelementptr inbounds i8, i8* %7, i64 8
  %89 = bitcast i8* %88 to void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)**
  store void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* @grayscale_convert, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %89, align 8
  br label %249

90:                                               ; preds = %85, %85, %85, %85, %85, %85, %85, %85, %85, %85, %85
  %91 = tail call i32 @jsimd_can_rgb_gray() #4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %96, label %93

93:                                               ; preds = %90
  %94 = getelementptr inbounds i8, i8* %7, i64 8
  %95 = bitcast i8* %94 to void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)**
  store void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* @jsimd_rgb_gray_convert, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %95, align 8
  br label %249

96:                                               ; preds = %90
  store void (%struct.jpeg_compress_struct*)* @rgb_ycc_start, void (%struct.jpeg_compress_struct*)** %10, align 8
  %97 = getelementptr inbounds i8, i8* %7, i64 8
  %98 = bitcast i8* %97 to void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)**
  store void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* @rgb_gray_convert, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %98, align 8
  br label %249

99:                                               ; preds = %85
  %100 = getelementptr inbounds i8, i8* %7, i64 8
  %101 = bitcast i8* %100 to void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)**
  store void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* @grayscale_convert, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %101, align 8
  br label %249

102:                                              ; preds = %85
  %103 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %104 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %103, align 8
  %105 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %104, i64 0, i32 5
  store i32 27, i32* %105, align 8
  %106 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %103, align 8
  %107 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %106, i64 0, i32 0
  %108 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %107, align 8
  tail call void %108(%struct.jpeg_common_struct* %6) #4
  br label %249

109:                                              ; preds = %71
  %110 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %111 = load i32, i32* %110, align 4
  %112 = icmp eq i32 %111, 3
  br i1 %112, label %120, label %113

113:                                              ; preds = %109
  %114 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %115 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %114, align 8
  %116 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %115, i64 0, i32 5
  store i32 10, i32* %116, align 8
  %117 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %114, align 8
  %118 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %117, i64 0, i32 0
  %119 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %118, align 8
  tail call void %119(%struct.jpeg_common_struct* %6) #4
  br label %120

120:                                              ; preds = %109, %113
  %121 = load i32, i32* %11, align 4
  %122 = zext i32 %121 to i64
  %123 = lshr i64 4292, %122
  %124 = and i64 %123, 1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %137, label %126

126:                                              ; preds = %120
  %127 = lshr i64 13252, %122
  %128 = and i64 %127, 1
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %137, label %130

130:                                              ; preds = %126
  %131 = lshr i64 324, %122
  %132 = and i64 %131, 1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %137, label %134

134:                                              ; preds = %130
  %135 = getelementptr inbounds i8, i8* %7, i64 8
  %136 = bitcast i8* %135 to void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)**
  store void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* @null_convert, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %136, align 8
  br label %249

137:                                              ; preds = %130, %126, %120
  switch i32 %121, label %141 [
    i32 2, label %138
    i32 6, label %138
    i32 7, label %138
    i32 8, label %138
    i32 9, label %138
    i32 10, label %138
    i32 11, label %138
    i32 12, label %138
    i32 13, label %138
    i32 14, label %138
    i32 15, label %138
  ]

138:                                              ; preds = %137, %137, %137, %137, %137, %137, %137, %137, %137, %137, %137
  %139 = getelementptr inbounds i8, i8* %7, i64 8
  %140 = bitcast i8* %139 to void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)**
  store void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* @rgb_rgb_convert, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %140, align 8
  br label %249

141:                                              ; preds = %137
  %142 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %143 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %142, align 8
  %144 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %143, i64 0, i32 5
  store i32 27, i32* %144, align 8
  %145 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %142, align 8
  %146 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %145, i64 0, i32 0
  %147 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %146, align 8
  tail call void %147(%struct.jpeg_common_struct* %6) #4
  br label %249

148:                                              ; preds = %71
  %149 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 3
  br i1 %151, label %159, label %152

152:                                              ; preds = %148
  %153 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %154 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %153, align 8
  %155 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %154, i64 0, i32 5
  store i32 10, i32* %155, align 8
  %156 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %153, align 8
  %157 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %156, i64 0, i32 0
  %158 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %157, align 8
  tail call void %158(%struct.jpeg_common_struct* %6) #4
  br label %159

159:                                              ; preds = %148, %152
  %160 = load i32, i32* %11, align 4
  switch i32 %160, label %173 [
    i32 2, label %161
    i32 6, label %161
    i32 7, label %161
    i32 8, label %161
    i32 9, label %161
    i32 10, label %161
    i32 11, label %161
    i32 12, label %161
    i32 13, label %161
    i32 14, label %161
    i32 15, label %161
    i32 3, label %170
  ]

161:                                              ; preds = %159, %159, %159, %159, %159, %159, %159, %159, %159, %159, %159
  %162 = tail call i32 @jsimd_can_rgb_ycc() #4
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %167, label %164

164:                                              ; preds = %161
  %165 = getelementptr inbounds i8, i8* %7, i64 8
  %166 = bitcast i8* %165 to void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)**
  store void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* @jsimd_rgb_ycc_convert, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %166, align 8
  br label %249

167:                                              ; preds = %161
  store void (%struct.jpeg_compress_struct*)* @rgb_ycc_start, void (%struct.jpeg_compress_struct*)** %10, align 8
  %168 = getelementptr inbounds i8, i8* %7, i64 8
  %169 = bitcast i8* %168 to void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)**
  store void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* @rgb_ycc_convert, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %169, align 8
  br label %249

170:                                              ; preds = %159
  %171 = getelementptr inbounds i8, i8* %7, i64 8
  %172 = bitcast i8* %171 to void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)**
  store void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* @null_convert, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %172, align 8
  br label %249

173:                                              ; preds = %159
  %174 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %175 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %174, align 8
  %176 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %175, i64 0, i32 5
  store i32 27, i32* %176, align 8
  %177 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %174, align 8
  %178 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %177, i64 0, i32 0
  %179 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %178, align 8
  tail call void %179(%struct.jpeg_common_struct* %6) #4
  br label %249

180:                                              ; preds = %71
  %181 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %182 = load i32, i32* %181, align 4
  %183 = icmp eq i32 %182, 4
  br i1 %183, label %191, label %184

184:                                              ; preds = %180
  %185 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %186 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %185, align 8
  %187 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %186, i64 0, i32 5
  store i32 10, i32* %187, align 8
  %188 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %185, align 8
  %189 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %188, i64 0, i32 0
  %190 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %189, align 8
  tail call void %190(%struct.jpeg_common_struct* %6) #4
  br label %191

191:                                              ; preds = %180, %184
  %192 = load i32, i32* %11, align 4
  %193 = icmp eq i32 %192, 4
  br i1 %193, label %194, label %197

194:                                              ; preds = %191
  %195 = getelementptr inbounds i8, i8* %7, i64 8
  %196 = bitcast i8* %195 to void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)**
  store void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* @null_convert, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %196, align 8
  br label %249

197:                                              ; preds = %191
  %198 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %199 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %198, align 8
  %200 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %199, i64 0, i32 5
  store i32 27, i32* %200, align 8
  %201 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %198, align 8
  %202 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %201, i64 0, i32 0
  %203 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %202, align 8
  tail call void %203(%struct.jpeg_common_struct* %6) #4
  br label %249

204:                                              ; preds = %71
  %205 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %206 = load i32, i32* %205, align 4
  %207 = icmp eq i32 %206, 4
  br i1 %207, label %215, label %208

208:                                              ; preds = %204
  %209 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %210 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %209, align 8
  %211 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %210, i64 0, i32 5
  store i32 10, i32* %211, align 8
  %212 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %209, align 8
  %213 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %212, i64 0, i32 0
  %214 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %213, align 8
  tail call void %214(%struct.jpeg_common_struct* %6) #4
  br label %215

215:                                              ; preds = %204, %208
  %216 = load i32, i32* %11, align 4
  switch i32 %216, label %223 [
    i32 4, label %217
    i32 5, label %220
  ]

217:                                              ; preds = %215
  store void (%struct.jpeg_compress_struct*)* @rgb_ycc_start, void (%struct.jpeg_compress_struct*)** %10, align 8
  %218 = getelementptr inbounds i8, i8* %7, i64 8
  %219 = bitcast i8* %218 to void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)**
  store void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* @cmyk_ycck_convert, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %219, align 8
  br label %249

220:                                              ; preds = %215
  %221 = getelementptr inbounds i8, i8* %7, i64 8
  %222 = bitcast i8* %221 to void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)**
  store void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* @null_convert, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %222, align 8
  br label %249

223:                                              ; preds = %215
  %224 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %225 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %224, align 8
  %226 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %225, i64 0, i32 5
  store i32 27, i32* %226, align 8
  %227 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %224, align 8
  %228 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %227, i64 0, i32 0
  %229 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %228, align 8
  tail call void %229(%struct.jpeg_common_struct* %6) #4
  br label %249

230:                                              ; preds = %71
  %231 = load i32, i32* %11, align 4
  %232 = icmp eq i32 %73, %231
  br i1 %232, label %233, label %239

233:                                              ; preds = %230
  %234 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %235 = load i32, i32* %234, align 4
  %236 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 9
  %237 = load i32, i32* %236, align 8
  %238 = icmp eq i32 %235, %237
  br i1 %238, label %246, label %239

239:                                              ; preds = %233, %230
  %240 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %241 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %240, align 8
  %242 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %241, i64 0, i32 5
  store i32 27, i32* %242, align 8
  %243 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %240, align 8
  %244 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %243, i64 0, i32 0
  %245 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %244, align 8
  tail call void %245(%struct.jpeg_common_struct* %6) #4
  br label %246

246:                                              ; preds = %233, %239
  %247 = getelementptr inbounds i8, i8* %7, i64 8
  %248 = bitcast i8* %247 to void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)**
  store void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* @null_convert, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %248, align 8
  br label %249

249:                                              ; preds = %217, %223, %220, %194, %197, %167, %164, %173, %170, %134, %141, %138, %87, %99, %102, %93, %96, %246
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @null_method(%struct.jpeg_compress_struct* nocapture) #1 {
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @grayscale_convert(%struct.jpeg_compress_struct* nocapture readonly, i8** nocapture readonly, i8*** nocapture readonly, i32, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %70

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 9
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %7, 0
  %13 = sext i32 %11 to i64
  %14 = zext i32 %7 to i64
  %15 = add nsw i64 %14, -1
  %16 = and i64 %14, 3
  %17 = icmp ult i64 %15, 3
  %18 = sub nsw i64 %14, %16
  %19 = icmp eq i64 %16, 0
  br label %35

20:                                               ; preds = %48, %46
  %21 = phi i64 [ 0, %46 ], [ %67, %48 ]
  %22 = phi i8* [ %47, %46 ], [ %66, %48 ]
  br i1 %19, label %33, label %23

23:                                               ; preds = %20, %23
  %24 = phi i64 [ %30, %23 ], [ %21, %20 ]
  %25 = phi i8* [ %29, %23 ], [ %22, %20 ]
  %26 = phi i64 [ %31, %23 ], [ %16, %20 ]
  %27 = load i8, i8* %25, align 1
  %28 = getelementptr inbounds i8, i8* %44, i64 %24
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %25, i64 %13
  %30 = add nuw nsw i64 %24, 1
  %31 = add i64 %26, -1
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %23, !llvm.loop !2

33:                                               ; preds = %20, %23, %35
  %34 = icmp sgt i32 %39, 0
  br i1 %34, label %35, label %70

35:                                               ; preds = %9, %33
  %36 = phi i32 [ %4, %9 ], [ %39, %33 ]
  %37 = phi i32 [ %3, %9 ], [ %45, %33 ]
  %38 = phi i8** [ %1, %9 ], [ %40, %33 ]
  %39 = add nsw i32 %36, -1
  %40 = getelementptr inbounds i8*, i8** %38, i64 1
  %41 = load i8**, i8*** %2, align 8
  %42 = zext i32 %37 to i64
  %43 = getelementptr inbounds i8*, i8** %41, i64 %42
  %44 = load i8*, i8** %43, align 8
  %45 = add i32 %37, 1
  br i1 %12, label %33, label %46

46:                                               ; preds = %35
  %47 = load i8*, i8** %38, align 8
  br i1 %17, label %20, label %48

48:                                               ; preds = %46, %48
  %49 = phi i64 [ %67, %48 ], [ 0, %46 ]
  %50 = phi i8* [ %66, %48 ], [ %47, %46 ]
  %51 = phi i64 [ %68, %48 ], [ %18, %46 ]
  %52 = load i8, i8* %50, align 1
  %53 = getelementptr inbounds i8, i8* %44, i64 %49
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds i8, i8* %50, i64 %13
  %55 = or i64 %49, 1
  %56 = load i8, i8* %54, align 1
  %57 = getelementptr inbounds i8, i8* %44, i64 %55
  store i8 %56, i8* %57, align 1
  %58 = getelementptr inbounds i8, i8* %54, i64 %13
  %59 = or i64 %49, 2
  %60 = load i8, i8* %58, align 1
  %61 = getelementptr inbounds i8, i8* %44, i64 %59
  store i8 %60, i8* %61, align 1
  %62 = getelementptr inbounds i8, i8* %58, i64 %13
  %63 = or i64 %49, 3
  %64 = load i8, i8* %62, align 1
  %65 = getelementptr inbounds i8, i8* %44, i64 %63
  store i8 %64, i8* %65, align 1
  %66 = getelementptr inbounds i8, i8* %62, i64 %13
  %67 = add nuw nsw i64 %49, 4
  %68 = add i64 %51, -4
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %20, label %48

70:                                               ; preds = %33, %5
  ret void
}

declare i32 @jsimd_can_rgb_gray() local_unnamed_addr #3

declare void @jsimd_rgb_gray_convert(%struct.jpeg_compress_struct*, i8**, i8***, i32, i32) #3

; Function Attrs: nounwind ssp uwtable
define internal void @rgb_ycc_start(%struct.jpeg_compress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %3 = bitcast %struct.jpeg_color_converter** %2 to %struct.my_color_converter**
  %4 = load %struct.my_color_converter*, %struct.my_color_converter** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %6 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %5, align 8
  %7 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %6, i64 0, i32 0
  %8 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %7, align 8
  %9 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %10 = tail call i8* %8(%struct.jpeg_common_struct* %9, i32 1, i64 16384) #4
  %11 = bitcast i8* %10 to i64*
  %12 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %4, i64 0, i32 1
  %13 = bitcast i64** %12 to i8**
  store i8* %10, i8** %13, align 8
  br label %14

14:                                               ; preds = %14, %1
  %15 = phi i64 [ 0, %1 ], [ %41, %14 ]
  %16 = mul nuw nsw i64 %15, 19595
  %17 = getelementptr inbounds i64, i64* %11, i64 %15
  store i64 %16, i64* %17, align 8
  %18 = mul nuw nsw i64 %15, 38470
  %19 = add nuw nsw i64 %15, 256
  %20 = getelementptr inbounds i64, i64* %11, i64 %19
  store i64 %18, i64* %20, align 8
  %21 = mul nuw nsw i64 %15, 7471
  %22 = add nuw nsw i64 %21, 32768
  %23 = add nuw nsw i64 %15, 512
  %24 = getelementptr inbounds i64, i64* %11, i64 %23
  store i64 %22, i64* %24, align 8
  %25 = mul nsw i64 %15, -11059
  %26 = add nuw nsw i64 %15, 768
  %27 = getelementptr inbounds i64, i64* %11, i64 %26
  store i64 %25, i64* %27, align 8
  %28 = mul nsw i64 %15, -21709
  %29 = add nuw nsw i64 %15, 1024
  %30 = getelementptr inbounds i64, i64* %11, i64 %29
  store i64 %28, i64* %30, align 8
  %31 = shl i64 %15, 15
  %32 = add nuw nsw i64 %31, 8421375
  %33 = add nuw nsw i64 %15, 1280
  %34 = getelementptr inbounds i64, i64* %11, i64 %33
  store i64 %32, i64* %34, align 8
  %35 = mul nsw i64 %15, -27439
  %36 = add nuw nsw i64 %15, 1536
  %37 = getelementptr inbounds i64, i64* %11, i64 %36
  store i64 %35, i64* %37, align 8
  %38 = mul nsw i64 %15, -5329
  %39 = add nuw nsw i64 %15, 1792
  %40 = getelementptr inbounds i64, i64* %11, i64 %39
  store i64 %38, i64* %40, align 8
  %41 = add nuw nsw i64 %15, 1
  %42 = icmp eq i64 %41, 256
  br i1 %42, label %43, label %14

43:                                               ; preds = %14
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @rgb_gray_convert(%struct.jpeg_compress_struct* nocapture readonly, i8** nocapture readonly, i8*** nocapture readonly, i32, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 10
  %7 = load i32, i32* %6, align 4
  switch i32 %7, label %334 [
    i32 6, label %8
    i32 7, label %62
    i32 12, label %62
    i32 8, label %116
    i32 9, label %170
    i32 13, label %170
    i32 10, label %224
    i32 14, label %224
    i32 11, label %279
    i32 15, label %279
  ]

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %10 = bitcast %struct.jpeg_color_converter** %9 to %struct.my_color_converter**
  %11 = load %struct.my_color_converter*, %struct.my_color_converter** %10, align 8
  %12 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %11, i64 0, i32 1
  %13 = load i64*, i64** %12, align 8
  %14 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %15 = load i32, i32* %14, align 8
  %16 = icmp sgt i32 %4, 0
  br i1 %16, label %17, label %388

17:                                               ; preds = %8
  %18 = icmp eq i32 %15, 0
  %19 = zext i32 %15 to i64
  br label %22

20:                                               ; preds = %35, %22
  %21 = icmp sgt i32 %26, 0
  br i1 %21, label %22, label %388

22:                                               ; preds = %20, %17
  %23 = phi i32 [ %4, %17 ], [ %26, %20 ]
  %24 = phi i8** [ %1, %17 ], [ %27, %20 ]
  %25 = phi i32 [ %3, %17 ], [ %32, %20 ]
  %26 = add nsw i32 %23, -1
  %27 = getelementptr inbounds i8*, i8** %24, i64 1
  %28 = load i8**, i8*** %2, align 8
  %29 = zext i32 %25 to i64
  %30 = getelementptr inbounds i8*, i8** %28, i64 %29
  %31 = load i8*, i8** %30, align 8
  %32 = add i32 %25, 1
  br i1 %18, label %20, label %33

33:                                               ; preds = %22
  %34 = load i8*, i8** %24, align 8
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %60, %35 ]
  %37 = phi i8* [ %34, %33 ], [ %45, %35 ]
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 1
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i64
  %42 = getelementptr inbounds i8, i8* %37, i64 2
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i64
  %45 = getelementptr inbounds i8, i8* %37, i64 3
  %46 = zext i8 %38 to i64
  %47 = getelementptr inbounds i64, i64* %13, i64 %46
  %48 = load i64, i64* %47, align 8
  %49 = or i64 %41, 256
  %50 = getelementptr inbounds i64, i64* %13, i64 %49
  %51 = load i64, i64* %50, align 8
  %52 = add nsw i64 %51, %48
  %53 = or i64 %44, 512
  %54 = getelementptr inbounds i64, i64* %13, i64 %53
  %55 = load i64, i64* %54, align 8
  %56 = add nsw i64 %52, %55
  %57 = lshr i64 %56, 16
  %58 = trunc i64 %57 to i8
  %59 = getelementptr inbounds i8, i8* %31, i64 %36
  store i8 %58, i8* %59, align 1
  %60 = add nuw nsw i64 %36, 1
  %61 = icmp eq i64 %60, %19
  br i1 %61, label %20, label %35

62:                                               ; preds = %5, %5
  %63 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %64 = bitcast %struct.jpeg_color_converter** %63 to %struct.my_color_converter**
  %65 = load %struct.my_color_converter*, %struct.my_color_converter** %64, align 8
  %66 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %65, i64 0, i32 1
  %67 = load i64*, i64** %66, align 8
  %68 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %69 = load i32, i32* %68, align 8
  %70 = icmp sgt i32 %4, 0
  br i1 %70, label %71, label %388

71:                                               ; preds = %62
  %72 = icmp eq i32 %69, 0
  %73 = zext i32 %69 to i64
  br label %76

74:                                               ; preds = %89, %76
  %75 = icmp sgt i32 %80, 0
  br i1 %75, label %76, label %388

76:                                               ; preds = %74, %71
  %77 = phi i32 [ %4, %71 ], [ %80, %74 ]
  %78 = phi i8** [ %1, %71 ], [ %81, %74 ]
  %79 = phi i32 [ %3, %71 ], [ %86, %74 ]
  %80 = add nsw i32 %77, -1
  %81 = getelementptr inbounds i8*, i8** %78, i64 1
  %82 = load i8**, i8*** %2, align 8
  %83 = zext i32 %79 to i64
  %84 = getelementptr inbounds i8*, i8** %82, i64 %83
  %85 = load i8*, i8** %84, align 8
  %86 = add i32 %79, 1
  br i1 %72, label %74, label %87

87:                                               ; preds = %76
  %88 = load i8*, i8** %78, align 8
  br label %89

89:                                               ; preds = %89, %87
  %90 = phi i64 [ 0, %87 ], [ %114, %89 ]
  %91 = phi i8* [ %88, %87 ], [ %99, %89 ]
  %92 = load i8, i8* %91, align 1
  %93 = getelementptr inbounds i8, i8* %91, i64 1
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i64
  %96 = getelementptr inbounds i8, i8* %91, i64 2
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i64
  %99 = getelementptr inbounds i8, i8* %91, i64 4
  %100 = zext i8 %92 to i64
  %101 = getelementptr inbounds i64, i64* %67, i64 %100
  %102 = load i64, i64* %101, align 8
  %103 = or i64 %95, 256
  %104 = getelementptr inbounds i64, i64* %67, i64 %103
  %105 = load i64, i64* %104, align 8
  %106 = add nsw i64 %105, %102
  %107 = or i64 %98, 512
  %108 = getelementptr inbounds i64, i64* %67, i64 %107
  %109 = load i64, i64* %108, align 8
  %110 = add nsw i64 %106, %109
  %111 = lshr i64 %110, 16
  %112 = trunc i64 %111 to i8
  %113 = getelementptr inbounds i8, i8* %85, i64 %90
  store i8 %112, i8* %113, align 1
  %114 = add nuw nsw i64 %90, 1
  %115 = icmp eq i64 %114, %73
  br i1 %115, label %74, label %89

116:                                              ; preds = %5
  %117 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %118 = bitcast %struct.jpeg_color_converter** %117 to %struct.my_color_converter**
  %119 = load %struct.my_color_converter*, %struct.my_color_converter** %118, align 8
  %120 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %119, i64 0, i32 1
  %121 = load i64*, i64** %120, align 8
  %122 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %123 = load i32, i32* %122, align 8
  %124 = icmp sgt i32 %4, 0
  br i1 %124, label %125, label %388

125:                                              ; preds = %116
  %126 = icmp eq i32 %123, 0
  %127 = zext i32 %123 to i64
  br label %130

128:                                              ; preds = %143, %130
  %129 = icmp sgt i32 %134, 0
  br i1 %129, label %130, label %388

130:                                              ; preds = %128, %125
  %131 = phi i32 [ %4, %125 ], [ %134, %128 ]
  %132 = phi i8** [ %1, %125 ], [ %135, %128 ]
  %133 = phi i32 [ %3, %125 ], [ %140, %128 ]
  %134 = add nsw i32 %131, -1
  %135 = getelementptr inbounds i8*, i8** %132, i64 1
  %136 = load i8**, i8*** %2, align 8
  %137 = zext i32 %133 to i64
  %138 = getelementptr inbounds i8*, i8** %136, i64 %137
  %139 = load i8*, i8** %138, align 8
  %140 = add i32 %133, 1
  br i1 %126, label %128, label %141

141:                                              ; preds = %130
  %142 = load i8*, i8** %132, align 8
  br label %143

143:                                              ; preds = %143, %141
  %144 = phi i64 [ 0, %141 ], [ %168, %143 ]
  %145 = phi i8* [ %142, %141 ], [ %153, %143 ]
  %146 = getelementptr inbounds i8, i8* %145, i64 2
  %147 = load i8, i8* %146, align 1
  %148 = getelementptr inbounds i8, i8* %145, i64 1
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i64
  %151 = load i8, i8* %145, align 1
  %152 = zext i8 %151 to i64
  %153 = getelementptr inbounds i8, i8* %145, i64 3
  %154 = zext i8 %147 to i64
  %155 = getelementptr inbounds i64, i64* %121, i64 %154
  %156 = load i64, i64* %155, align 8
  %157 = or i64 %150, 256
  %158 = getelementptr inbounds i64, i64* %121, i64 %157
  %159 = load i64, i64* %158, align 8
  %160 = add nsw i64 %159, %156
  %161 = or i64 %152, 512
  %162 = getelementptr inbounds i64, i64* %121, i64 %161
  %163 = load i64, i64* %162, align 8
  %164 = add nsw i64 %160, %163
  %165 = lshr i64 %164, 16
  %166 = trunc i64 %165 to i8
  %167 = getelementptr inbounds i8, i8* %139, i64 %144
  store i8 %166, i8* %167, align 1
  %168 = add nuw nsw i64 %144, 1
  %169 = icmp eq i64 %168, %127
  br i1 %169, label %128, label %143

170:                                              ; preds = %5, %5
  %171 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %172 = bitcast %struct.jpeg_color_converter** %171 to %struct.my_color_converter**
  %173 = load %struct.my_color_converter*, %struct.my_color_converter** %172, align 8
  %174 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %173, i64 0, i32 1
  %175 = load i64*, i64** %174, align 8
  %176 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %177 = load i32, i32* %176, align 8
  %178 = icmp sgt i32 %4, 0
  br i1 %178, label %179, label %388

179:                                              ; preds = %170
  %180 = icmp eq i32 %177, 0
  %181 = zext i32 %177 to i64
  br label %184

182:                                              ; preds = %197, %184
  %183 = icmp sgt i32 %188, 0
  br i1 %183, label %184, label %388

184:                                              ; preds = %182, %179
  %185 = phi i32 [ %4, %179 ], [ %188, %182 ]
  %186 = phi i8** [ %1, %179 ], [ %189, %182 ]
  %187 = phi i32 [ %3, %179 ], [ %194, %182 ]
  %188 = add nsw i32 %185, -1
  %189 = getelementptr inbounds i8*, i8** %186, i64 1
  %190 = load i8**, i8*** %2, align 8
  %191 = zext i32 %187 to i64
  %192 = getelementptr inbounds i8*, i8** %190, i64 %191
  %193 = load i8*, i8** %192, align 8
  %194 = add i32 %187, 1
  br i1 %180, label %182, label %195

195:                                              ; preds = %184
  %196 = load i8*, i8** %186, align 8
  br label %197

197:                                              ; preds = %197, %195
  %198 = phi i64 [ 0, %195 ], [ %222, %197 ]
  %199 = phi i8* [ %196, %195 ], [ %207, %197 ]
  %200 = getelementptr inbounds i8, i8* %199, i64 2
  %201 = load i8, i8* %200, align 1
  %202 = getelementptr inbounds i8, i8* %199, i64 1
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i64
  %205 = load i8, i8* %199, align 1
  %206 = zext i8 %205 to i64
  %207 = getelementptr inbounds i8, i8* %199, i64 4
  %208 = zext i8 %201 to i64
  %209 = getelementptr inbounds i64, i64* %175, i64 %208
  %210 = load i64, i64* %209, align 8
  %211 = or i64 %204, 256
  %212 = getelementptr inbounds i64, i64* %175, i64 %211
  %213 = load i64, i64* %212, align 8
  %214 = add nsw i64 %213, %210
  %215 = or i64 %206, 512
  %216 = getelementptr inbounds i64, i64* %175, i64 %215
  %217 = load i64, i64* %216, align 8
  %218 = add nsw i64 %214, %217
  %219 = lshr i64 %218, 16
  %220 = trunc i64 %219 to i8
  %221 = getelementptr inbounds i8, i8* %193, i64 %198
  store i8 %220, i8* %221, align 1
  %222 = add nuw nsw i64 %198, 1
  %223 = icmp eq i64 %222, %181
  br i1 %223, label %182, label %197

224:                                              ; preds = %5, %5
  %225 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %226 = bitcast %struct.jpeg_color_converter** %225 to %struct.my_color_converter**
  %227 = load %struct.my_color_converter*, %struct.my_color_converter** %226, align 8
  %228 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %227, i64 0, i32 1
  %229 = load i64*, i64** %228, align 8
  %230 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %231 = load i32, i32* %230, align 8
  %232 = icmp sgt i32 %4, 0
  br i1 %232, label %233, label %388

233:                                              ; preds = %224
  %234 = icmp eq i32 %231, 0
  %235 = zext i32 %231 to i64
  br label %238

236:                                              ; preds = %251, %238
  %237 = icmp sgt i32 %242, 0
  br i1 %237, label %238, label %388

238:                                              ; preds = %236, %233
  %239 = phi i32 [ %4, %233 ], [ %242, %236 ]
  %240 = phi i8** [ %1, %233 ], [ %243, %236 ]
  %241 = phi i32 [ %3, %233 ], [ %248, %236 ]
  %242 = add nsw i32 %239, -1
  %243 = getelementptr inbounds i8*, i8** %240, i64 1
  %244 = load i8**, i8*** %2, align 8
  %245 = zext i32 %241 to i64
  %246 = getelementptr inbounds i8*, i8** %244, i64 %245
  %247 = load i8*, i8** %246, align 8
  %248 = add i32 %241, 1
  br i1 %234, label %236, label %249

249:                                              ; preds = %238
  %250 = load i8*, i8** %240, align 8
  br label %251

251:                                              ; preds = %251, %249
  %252 = phi i64 [ 0, %249 ], [ %277, %251 ]
  %253 = phi i8* [ %250, %249 ], [ %262, %251 ]
  %254 = getelementptr inbounds i8, i8* %253, i64 3
  %255 = load i8, i8* %254, align 1
  %256 = getelementptr inbounds i8, i8* %253, i64 2
  %257 = load i8, i8* %256, align 1
  %258 = zext i8 %257 to i64
  %259 = getelementptr inbounds i8, i8* %253, i64 1
  %260 = load i8, i8* %259, align 1
  %261 = zext i8 %260 to i64
  %262 = getelementptr inbounds i8, i8* %253, i64 4
  %263 = zext i8 %255 to i64
  %264 = getelementptr inbounds i64, i64* %229, i64 %263
  %265 = load i64, i64* %264, align 8
  %266 = or i64 %258, 256
  %267 = getelementptr inbounds i64, i64* %229, i64 %266
  %268 = load i64, i64* %267, align 8
  %269 = add nsw i64 %268, %265
  %270 = or i64 %261, 512
  %271 = getelementptr inbounds i64, i64* %229, i64 %270
  %272 = load i64, i64* %271, align 8
  %273 = add nsw i64 %269, %272
  %274 = lshr i64 %273, 16
  %275 = trunc i64 %274 to i8
  %276 = getelementptr inbounds i8, i8* %247, i64 %252
  store i8 %275, i8* %276, align 1
  %277 = add nuw nsw i64 %252, 1
  %278 = icmp eq i64 %277, %235
  br i1 %278, label %236, label %251

279:                                              ; preds = %5, %5
  %280 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %281 = bitcast %struct.jpeg_color_converter** %280 to %struct.my_color_converter**
  %282 = load %struct.my_color_converter*, %struct.my_color_converter** %281, align 8
  %283 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %282, i64 0, i32 1
  %284 = load i64*, i64** %283, align 8
  %285 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %286 = load i32, i32* %285, align 8
  %287 = icmp sgt i32 %4, 0
  br i1 %287, label %288, label %388

288:                                              ; preds = %279
  %289 = icmp eq i32 %286, 0
  %290 = zext i32 %286 to i64
  br label %293

291:                                              ; preds = %306, %293
  %292 = icmp sgt i32 %297, 0
  br i1 %292, label %293, label %388

293:                                              ; preds = %291, %288
  %294 = phi i32 [ %4, %288 ], [ %297, %291 ]
  %295 = phi i8** [ %1, %288 ], [ %298, %291 ]
  %296 = phi i32 [ %3, %288 ], [ %303, %291 ]
  %297 = add nsw i32 %294, -1
  %298 = getelementptr inbounds i8*, i8** %295, i64 1
  %299 = load i8**, i8*** %2, align 8
  %300 = zext i32 %296 to i64
  %301 = getelementptr inbounds i8*, i8** %299, i64 %300
  %302 = load i8*, i8** %301, align 8
  %303 = add i32 %296, 1
  br i1 %289, label %291, label %304

304:                                              ; preds = %293
  %305 = load i8*, i8** %295, align 8
  br label %306

306:                                              ; preds = %306, %304
  %307 = phi i64 [ 0, %304 ], [ %332, %306 ]
  %308 = phi i8* [ %305, %304 ], [ %317, %306 ]
  %309 = getelementptr inbounds i8, i8* %308, i64 1
  %310 = load i8, i8* %309, align 1
  %311 = getelementptr inbounds i8, i8* %308, i64 2
  %312 = load i8, i8* %311, align 1
  %313 = zext i8 %312 to i64
  %314 = getelementptr inbounds i8, i8* %308, i64 3
  %315 = load i8, i8* %314, align 1
  %316 = zext i8 %315 to i64
  %317 = getelementptr inbounds i8, i8* %308, i64 4
  %318 = zext i8 %310 to i64
  %319 = getelementptr inbounds i64, i64* %284, i64 %318
  %320 = load i64, i64* %319, align 8
  %321 = or i64 %313, 256
  %322 = getelementptr inbounds i64, i64* %284, i64 %321
  %323 = load i64, i64* %322, align 8
  %324 = add nsw i64 %323, %320
  %325 = or i64 %316, 512
  %326 = getelementptr inbounds i64, i64* %284, i64 %325
  %327 = load i64, i64* %326, align 8
  %328 = add nsw i64 %324, %327
  %329 = lshr i64 %328, 16
  %330 = trunc i64 %329 to i8
  %331 = getelementptr inbounds i8, i8* %302, i64 %307
  store i8 %330, i8* %331, align 1
  %332 = add nuw nsw i64 %307, 1
  %333 = icmp eq i64 %332, %290
  br i1 %333, label %291, label %306

334:                                              ; preds = %5
  %335 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %336 = bitcast %struct.jpeg_color_converter** %335 to %struct.my_color_converter**
  %337 = load %struct.my_color_converter*, %struct.my_color_converter** %336, align 8
  %338 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %337, i64 0, i32 1
  %339 = load i64*, i64** %338, align 8
  %340 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %341 = load i32, i32* %340, align 8
  %342 = icmp sgt i32 %4, 0
  br i1 %342, label %343, label %388

343:                                              ; preds = %334
  %344 = icmp eq i32 %341, 0
  %345 = zext i32 %341 to i64
  br label %348

346:                                              ; preds = %361, %348
  %347 = icmp sgt i32 %352, 0
  br i1 %347, label %348, label %388

348:                                              ; preds = %346, %343
  %349 = phi i32 [ %4, %343 ], [ %352, %346 ]
  %350 = phi i8** [ %1, %343 ], [ %353, %346 ]
  %351 = phi i32 [ %3, %343 ], [ %358, %346 ]
  %352 = add nsw i32 %349, -1
  %353 = getelementptr inbounds i8*, i8** %350, i64 1
  %354 = load i8**, i8*** %2, align 8
  %355 = zext i32 %351 to i64
  %356 = getelementptr inbounds i8*, i8** %354, i64 %355
  %357 = load i8*, i8** %356, align 8
  %358 = add i32 %351, 1
  br i1 %344, label %346, label %359

359:                                              ; preds = %348
  %360 = load i8*, i8** %350, align 8
  br label %361

361:                                              ; preds = %361, %359
  %362 = phi i64 [ 0, %359 ], [ %386, %361 ]
  %363 = phi i8* [ %360, %359 ], [ %371, %361 ]
  %364 = load i8, i8* %363, align 1
  %365 = getelementptr inbounds i8, i8* %363, i64 1
  %366 = load i8, i8* %365, align 1
  %367 = zext i8 %366 to i64
  %368 = getelementptr inbounds i8, i8* %363, i64 2
  %369 = load i8, i8* %368, align 1
  %370 = zext i8 %369 to i64
  %371 = getelementptr inbounds i8, i8* %363, i64 3
  %372 = zext i8 %364 to i64
  %373 = getelementptr inbounds i64, i64* %339, i64 %372
  %374 = load i64, i64* %373, align 8
  %375 = or i64 %367, 256
  %376 = getelementptr inbounds i64, i64* %339, i64 %375
  %377 = load i64, i64* %376, align 8
  %378 = add nsw i64 %377, %374
  %379 = or i64 %370, 512
  %380 = getelementptr inbounds i64, i64* %339, i64 %379
  %381 = load i64, i64* %380, align 8
  %382 = add nsw i64 %378, %381
  %383 = lshr i64 %382, 16
  %384 = trunc i64 %383 to i8
  %385 = getelementptr inbounds i8, i8* %357, i64 %362
  store i8 %384, i8* %385, align 1
  %386 = add nuw nsw i64 %362, 1
  %387 = icmp eq i64 %386, %345
  br i1 %387, label %346, label %361

388:                                              ; preds = %291, %236, %182, %128, %74, %20, %346, %334, %279, %224, %170, %116, %62, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @null_convert(%struct.jpeg_compress_struct* nocapture readonly, i8** nocapture readonly, i8*** nocapture readonly, i32, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %9 = load i32, i32* %8, align 8
  switch i32 %7, label %33 [
    i32 3, label %22
    i32 4, label %10
  ]

10:                                               ; preds = %5
  %11 = icmp sgt i32 %4, 0
  br i1 %11, label %12, label %238

12:                                               ; preds = %10
  %13 = getelementptr inbounds i8**, i8*** %2, i64 1
  %14 = getelementptr inbounds i8**, i8*** %2, i64 2
  %15 = getelementptr inbounds i8**, i8*** %2, i64 3
  %16 = icmp eq i32 %9, 0
  %17 = zext i32 %9 to i64
  %18 = and i64 %17, 1
  %19 = icmp eq i32 %9, 1
  %20 = sub nsw i64 %17, %18
  %21 = icmp eq i64 %18, 0
  br label %122

22:                                               ; preds = %5
  %23 = icmp sgt i32 %4, 0
  br i1 %23, label %24, label %238

24:                                               ; preds = %22
  %25 = getelementptr inbounds i8**, i8*** %2, i64 1
  %26 = getelementptr inbounds i8**, i8*** %2, i64 2
  %27 = icmp eq i32 %9, 0
  %28 = zext i32 %9 to i64
  %29 = and i64 %28, 1
  %30 = icmp eq i32 %9, 1
  %31 = sub nsw i64 %28, %29
  %32 = icmp eq i64 %29, 0
  br label %60

33:                                               ; preds = %5
  %34 = icmp sgt i32 %4, 0
  br i1 %34, label %35, label %238

35:                                               ; preds = %33
  %36 = icmp sgt i32 %7, 0
  %37 = icmp eq i32 %9, 0
  %38 = sext i32 %7 to i64
  %39 = zext i32 %7 to i64
  %40 = zext i32 %9 to i64
  %41 = add nsw i64 %40, -1
  %42 = and i64 %40, 3
  %43 = icmp ult i64 %41, 3
  %44 = sub nsw i64 %40, %42
  %45 = icmp eq i64 %42, 0
  br label %176

46:                                               ; preds = %79, %77
  %47 = phi i64 [ 0, %77 ], [ %102, %79 ]
  %48 = phi i8* [ %78, %77 ], [ %99, %79 ]
  br i1 %32, label %58, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds i8, i8* %48, i64 1
  %51 = load i8, i8* %48, align 1
  %52 = getelementptr inbounds i8, i8* %69, i64 %47
  store i8 %51, i8* %52, align 1
  %53 = getelementptr inbounds i8, i8* %48, i64 2
  %54 = load i8, i8* %50, align 1
  %55 = getelementptr inbounds i8, i8* %72, i64 %47
  store i8 %54, i8* %55, align 1
  %56 = load i8, i8* %53, align 1
  %57 = getelementptr inbounds i8, i8* %75, i64 %47
  store i8 %56, i8* %57, align 1
  br label %58

58:                                               ; preds = %49, %46, %60
  %59 = icmp sgt i32 %64, 0
  br i1 %59, label %60, label %238

60:                                               ; preds = %24, %58
  %61 = phi i32 [ %4, %24 ], [ %64, %58 ]
  %62 = phi i32 [ %3, %24 ], [ %76, %58 ]
  %63 = phi i8** [ %1, %24 ], [ %65, %58 ]
  %64 = add nsw i32 %61, -1
  %65 = getelementptr inbounds i8*, i8** %63, i64 1
  %66 = load i8**, i8*** %2, align 8
  %67 = zext i32 %62 to i64
  %68 = getelementptr inbounds i8*, i8** %66, i64 %67
  %69 = load i8*, i8** %68, align 8
  %70 = load i8**, i8*** %25, align 8
  %71 = getelementptr inbounds i8*, i8** %70, i64 %67
  %72 = load i8*, i8** %71, align 8
  %73 = load i8**, i8*** %26, align 8
  %74 = getelementptr inbounds i8*, i8** %73, i64 %67
  %75 = load i8*, i8** %74, align 8
  %76 = add i32 %62, 1
  br i1 %27, label %58, label %77

77:                                               ; preds = %60
  %78 = load i8*, i8** %63, align 8
  br i1 %30, label %46, label %79

79:                                               ; preds = %77, %79
  %80 = phi i64 [ %102, %79 ], [ 0, %77 ]
  %81 = phi i8* [ %99, %79 ], [ %78, %77 ]
  %82 = phi i64 [ %103, %79 ], [ %31, %77 ]
  %83 = getelementptr inbounds i8, i8* %81, i64 1
  %84 = load i8, i8* %81, align 1
  %85 = getelementptr inbounds i8, i8* %69, i64 %80
  store i8 %84, i8* %85, align 1
  %86 = getelementptr inbounds i8, i8* %81, i64 2
  %87 = load i8, i8* %83, align 1
  %88 = getelementptr inbounds i8, i8* %72, i64 %80
  store i8 %87, i8* %88, align 1
  %89 = getelementptr inbounds i8, i8* %81, i64 3
  %90 = load i8, i8* %86, align 1
  %91 = getelementptr inbounds i8, i8* %75, i64 %80
  store i8 %90, i8* %91, align 1
  %92 = or i64 %80, 1
  %93 = getelementptr inbounds i8, i8* %81, i64 4
  %94 = load i8, i8* %89, align 1
  %95 = getelementptr inbounds i8, i8* %69, i64 %92
  store i8 %94, i8* %95, align 1
  %96 = getelementptr inbounds i8, i8* %81, i64 5
  %97 = load i8, i8* %93, align 1
  %98 = getelementptr inbounds i8, i8* %72, i64 %92
  store i8 %97, i8* %98, align 1
  %99 = getelementptr inbounds i8, i8* %81, i64 6
  %100 = load i8, i8* %96, align 1
  %101 = getelementptr inbounds i8, i8* %75, i64 %92
  store i8 %100, i8* %101, align 1
  %102 = add nuw nsw i64 %80, 2
  %103 = add i64 %82, -2
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %46, label %79

105:                                              ; preds = %144, %142
  %106 = phi i64 [ 0, %142 ], [ %173, %144 ]
  %107 = phi i8* [ %143, %142 ], [ %170, %144 ]
  br i1 %21, label %120, label %108

108:                                              ; preds = %105
  %109 = getelementptr inbounds i8, i8* %107, i64 1
  %110 = load i8, i8* %107, align 1
  %111 = getelementptr inbounds i8, i8* %131, i64 %106
  store i8 %110, i8* %111, align 1
  %112 = getelementptr inbounds i8, i8* %107, i64 2
  %113 = load i8, i8* %109, align 1
  %114 = getelementptr inbounds i8, i8* %134, i64 %106
  store i8 %113, i8* %114, align 1
  %115 = getelementptr inbounds i8, i8* %107, i64 3
  %116 = load i8, i8* %112, align 1
  %117 = getelementptr inbounds i8, i8* %137, i64 %106
  store i8 %116, i8* %117, align 1
  %118 = load i8, i8* %115, align 1
  %119 = getelementptr inbounds i8, i8* %140, i64 %106
  store i8 %118, i8* %119, align 1
  br label %120

120:                                              ; preds = %108, %105, %122
  %121 = icmp sgt i32 %126, 0
  br i1 %121, label %122, label %238

122:                                              ; preds = %12, %120
  %123 = phi i32 [ %4, %12 ], [ %126, %120 ]
  %124 = phi i32 [ %3, %12 ], [ %141, %120 ]
  %125 = phi i8** [ %1, %12 ], [ %127, %120 ]
  %126 = add nsw i32 %123, -1
  %127 = getelementptr inbounds i8*, i8** %125, i64 1
  %128 = load i8**, i8*** %2, align 8
  %129 = zext i32 %124 to i64
  %130 = getelementptr inbounds i8*, i8** %128, i64 %129
  %131 = load i8*, i8** %130, align 8
  %132 = load i8**, i8*** %13, align 8
  %133 = getelementptr inbounds i8*, i8** %132, i64 %129
  %134 = load i8*, i8** %133, align 8
  %135 = load i8**, i8*** %14, align 8
  %136 = getelementptr inbounds i8*, i8** %135, i64 %129
  %137 = load i8*, i8** %136, align 8
  %138 = load i8**, i8*** %15, align 8
  %139 = getelementptr inbounds i8*, i8** %138, i64 %129
  %140 = load i8*, i8** %139, align 8
  %141 = add i32 %124, 1
  br i1 %16, label %120, label %142

142:                                              ; preds = %122
  %143 = load i8*, i8** %125, align 8
  br i1 %19, label %105, label %144

144:                                              ; preds = %142, %144
  %145 = phi i64 [ %173, %144 ], [ 0, %142 ]
  %146 = phi i8* [ %170, %144 ], [ %143, %142 ]
  %147 = phi i64 [ %174, %144 ], [ %20, %142 ]
  %148 = getelementptr inbounds i8, i8* %146, i64 1
  %149 = load i8, i8* %146, align 1
  %150 = getelementptr inbounds i8, i8* %131, i64 %145
  store i8 %149, i8* %150, align 1
  %151 = getelementptr inbounds i8, i8* %146, i64 2
  %152 = load i8, i8* %148, align 1
  %153 = getelementptr inbounds i8, i8* %134, i64 %145
  store i8 %152, i8* %153, align 1
  %154 = getelementptr inbounds i8, i8* %146, i64 3
  %155 = load i8, i8* %151, align 1
  %156 = getelementptr inbounds i8, i8* %137, i64 %145
  store i8 %155, i8* %156, align 1
  %157 = getelementptr inbounds i8, i8* %146, i64 4
  %158 = load i8, i8* %154, align 1
  %159 = getelementptr inbounds i8, i8* %140, i64 %145
  store i8 %158, i8* %159, align 1
  %160 = or i64 %145, 1
  %161 = getelementptr inbounds i8, i8* %146, i64 5
  %162 = load i8, i8* %157, align 1
  %163 = getelementptr inbounds i8, i8* %131, i64 %160
  store i8 %162, i8* %163, align 1
  %164 = getelementptr inbounds i8, i8* %146, i64 6
  %165 = load i8, i8* %161, align 1
  %166 = getelementptr inbounds i8, i8* %134, i64 %160
  store i8 %165, i8* %166, align 1
  %167 = getelementptr inbounds i8, i8* %146, i64 7
  %168 = load i8, i8* %164, align 1
  %169 = getelementptr inbounds i8, i8* %137, i64 %160
  store i8 %168, i8* %169, align 1
  %170 = getelementptr inbounds i8, i8* %146, i64 8
  %171 = load i8, i8* %167, align 1
  %172 = getelementptr inbounds i8, i8* %140, i64 %160
  store i8 %171, i8* %172, align 1
  %173 = add nuw nsw i64 %145, 2
  %174 = add i64 %147, -2
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %105, label %144

176:                                              ; preds = %35, %234
  %177 = phi i32 [ %4, %35 ], [ %180, %234 ]
  %178 = phi i32 [ %3, %35 ], [ %236, %234 ]
  %179 = phi i8** [ %1, %35 ], [ %235, %234 ]
  %180 = add nsw i32 %177, -1
  br i1 %36, label %181, label %234

181:                                              ; preds = %176
  %182 = zext i32 %178 to i64
  br label %183

183:                                              ; preds = %231, %181
  %184 = phi i64 [ 0, %181 ], [ %232, %231 ]
  %185 = getelementptr inbounds i8**, i8*** %2, i64 %184
  %186 = load i8**, i8*** %185, align 8
  %187 = getelementptr inbounds i8*, i8** %186, i64 %182
  %188 = load i8*, i8** %187, align 8
  br i1 %37, label %231, label %189

189:                                              ; preds = %183
  %190 = load i8*, i8** %179, align 8
  br i1 %43, label %217, label %191

191:                                              ; preds = %189, %191
  %192 = phi i64 [ %214, %191 ], [ 0, %189 ]
  %193 = phi i8* [ %213, %191 ], [ %190, %189 ]
  %194 = phi i64 [ %215, %191 ], [ %44, %189 ]
  %195 = getelementptr inbounds i8, i8* %193, i64 %184
  %196 = load i8, i8* %195, align 1
  %197 = getelementptr inbounds i8, i8* %188, i64 %192
  store i8 %196, i8* %197, align 1
  %198 = getelementptr inbounds i8, i8* %193, i64 %38
  %199 = or i64 %192, 1
  %200 = getelementptr inbounds i8, i8* %198, i64 %184
  %201 = load i8, i8* %200, align 1
  %202 = getelementptr inbounds i8, i8* %188, i64 %199
  store i8 %201, i8* %202, align 1
  %203 = getelementptr inbounds i8, i8* %198, i64 %38
  %204 = or i64 %192, 2
  %205 = getelementptr inbounds i8, i8* %203, i64 %184
  %206 = load i8, i8* %205, align 1
  %207 = getelementptr inbounds i8, i8* %188, i64 %204
  store i8 %206, i8* %207, align 1
  %208 = getelementptr inbounds i8, i8* %203, i64 %38
  %209 = or i64 %192, 3
  %210 = getelementptr inbounds i8, i8* %208, i64 %184
  %211 = load i8, i8* %210, align 1
  %212 = getelementptr inbounds i8, i8* %188, i64 %209
  store i8 %211, i8* %212, align 1
  %213 = getelementptr inbounds i8, i8* %208, i64 %38
  %214 = add nuw nsw i64 %192, 4
  %215 = add i64 %194, -4
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %191

217:                                              ; preds = %191, %189
  %218 = phi i64 [ 0, %189 ], [ %214, %191 ]
  %219 = phi i8* [ %190, %189 ], [ %213, %191 ]
  br i1 %45, label %231, label %220

220:                                              ; preds = %217, %220
  %221 = phi i64 [ %228, %220 ], [ %218, %217 ]
  %222 = phi i8* [ %227, %220 ], [ %219, %217 ]
  %223 = phi i64 [ %229, %220 ], [ %42, %217 ]
  %224 = getelementptr inbounds i8, i8* %222, i64 %184
  %225 = load i8, i8* %224, align 1
  %226 = getelementptr inbounds i8, i8* %188, i64 %221
  store i8 %225, i8* %226, align 1
  %227 = getelementptr inbounds i8, i8* %222, i64 %38
  %228 = add nuw nsw i64 %221, 1
  %229 = add i64 %223, -1
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %231, label %220, !llvm.loop !4

231:                                              ; preds = %217, %220, %183
  %232 = add nuw nsw i64 %184, 1
  %233 = icmp eq i64 %232, %39
  br i1 %233, label %234, label %183

234:                                              ; preds = %231, %176
  %235 = getelementptr inbounds i8*, i8** %179, i64 1
  %236 = add i32 %178, 1
  %237 = icmp sgt i32 %180, 0
  br i1 %237, label %176, label %238

238:                                              ; preds = %120, %58, %234, %10, %22, %33
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @rgb_rgb_convert(%struct.jpeg_compress_struct* nocapture readonly, i8** nocapture readonly, i8*** readonly, i32, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 10
  %7 = load i32, i32* %6, align 4
  switch i32 %7, label %686 [
    i32 6, label %8
    i32 7, label %80
    i32 12, label %80
    i32 8, label %212
    i32 9, label %284
    i32 13, label %284
    i32 10, label %416
    i32 14, label %416
    i32 11, label %551
    i32 15, label %551
  ]

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %10 = load i32, i32* %9, align 8
  %11 = icmp sgt i32 %4, 0
  br i1 %11, label %12, label %758

12:                                               ; preds = %8
  %13 = getelementptr inbounds i8**, i8*** %2, i64 1
  %14 = getelementptr inbounds i8**, i8*** %2, i64 2
  %15 = icmp eq i32 %10, 0
  %16 = zext i32 %10 to i64
  %17 = and i64 %16, 1
  %18 = icmp eq i32 %10, 1
  %19 = sub nsw i64 %16, %17
  %20 = icmp eq i64 %17, 0
  br label %35

21:                                               ; preds = %54, %52
  %22 = phi i64 [ 0, %52 ], [ %77, %54 ]
  %23 = phi i8* [ %53, %52 ], [ %76, %54 ]
  br i1 %20, label %33, label %24

24:                                               ; preds = %21
  %25 = load i8, i8* %23, align 1
  %26 = getelementptr inbounds i8, i8* %44, i64 %22
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds i8, i8* %23, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds i8, i8* %47, i64 %22
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %23, i64 2
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds i8, i8* %50, i64 %22
  store i8 %31, i8* %32, align 1
  br label %33

33:                                               ; preds = %24, %21, %35
  %34 = icmp sgt i32 %39, 0
  br i1 %34, label %35, label %758

35:                                               ; preds = %33, %12
  %36 = phi i32 [ %4, %12 ], [ %39, %33 ]
  %37 = phi i32 [ %3, %12 ], [ %51, %33 ]
  %38 = phi i8** [ %1, %12 ], [ %40, %33 ]
  %39 = add nsw i32 %36, -1
  %40 = getelementptr inbounds i8*, i8** %38, i64 1
  %41 = load i8**, i8*** %2, align 8
  %42 = zext i32 %37 to i64
  %43 = getelementptr inbounds i8*, i8** %41, i64 %42
  %44 = load i8*, i8** %43, align 8
  %45 = load i8**, i8*** %13, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 %42
  %47 = load i8*, i8** %46, align 8
  %48 = load i8**, i8*** %14, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 %42
  %50 = load i8*, i8** %49, align 8
  %51 = add i32 %37, 1
  br i1 %15, label %33, label %52

52:                                               ; preds = %35
  %53 = load i8*, i8** %38, align 8
  br i1 %18, label %21, label %54

54:                                               ; preds = %52, %54
  %55 = phi i64 [ %77, %54 ], [ 0, %52 ]
  %56 = phi i8* [ %76, %54 ], [ %53, %52 ]
  %57 = phi i64 [ %78, %54 ], [ %19, %52 ]
  %58 = load i8, i8* %56, align 1
  %59 = getelementptr inbounds i8, i8* %44, i64 %55
  store i8 %58, i8* %59, align 1
  %60 = getelementptr inbounds i8, i8* %56, i64 1
  %61 = load i8, i8* %60, align 1
  %62 = getelementptr inbounds i8, i8* %47, i64 %55
  store i8 %61, i8* %62, align 1
  %63 = getelementptr inbounds i8, i8* %56, i64 2
  %64 = load i8, i8* %63, align 1
  %65 = getelementptr inbounds i8, i8* %50, i64 %55
  store i8 %64, i8* %65, align 1
  %66 = getelementptr inbounds i8, i8* %56, i64 3
  %67 = or i64 %55, 1
  %68 = load i8, i8* %66, align 1
  %69 = getelementptr inbounds i8, i8* %44, i64 %67
  store i8 %68, i8* %69, align 1
  %70 = getelementptr inbounds i8, i8* %56, i64 4
  %71 = load i8, i8* %70, align 1
  %72 = getelementptr inbounds i8, i8* %47, i64 %67
  store i8 %71, i8* %72, align 1
  %73 = getelementptr inbounds i8, i8* %56, i64 5
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds i8, i8* %50, i64 %67
  store i8 %74, i8* %75, align 1
  %76 = getelementptr inbounds i8, i8* %56, i64 6
  %77 = add nuw nsw i64 %55, 2
  %78 = add i64 %57, -2
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %21, label %54

80:                                               ; preds = %5, %5
  %81 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %82 = load i32, i32* %81, align 8
  %83 = icmp sgt i32 %4, 0
  br i1 %83, label %84, label %758

84:                                               ; preds = %80
  %85 = getelementptr inbounds i8**, i8*** %2, i64 1
  %86 = getelementptr inbounds i8**, i8*** %2, i64 2
  %87 = icmp eq i32 %82, 0
  %88 = zext i32 %82 to i64
  %89 = shl nuw nsw i64 %88, 2
  %90 = add nsw i64 %89, -1
  %91 = icmp ult i32 %82, 17
  %92 = and i64 %88, 15
  %93 = icmp eq i64 %92, 0
  %94 = select i1 %93, i64 16, i64 %92
  %95 = sub nsw i64 %88, %94
  %96 = shl nsw i64 %95, 2
  %97 = sub nsw i64 0, %88
  br label %100

98:                                               ; preds = %184, %188, %100
  %99 = icmp sgt i32 %104, 0
  br i1 %99, label %100, label %758

100:                                              ; preds = %98, %84
  %101 = phi i32 [ %4, %84 ], [ %104, %98 ]
  %102 = phi i32 [ %3, %84 ], [ %116, %98 ]
  %103 = phi i8** [ %1, %84 ], [ %105, %98 ]
  %104 = add nsw i32 %101, -1
  %105 = getelementptr inbounds i8*, i8** %103, i64 1
  %106 = load i8**, i8*** %2, align 8
  %107 = zext i32 %102 to i64
  %108 = getelementptr inbounds i8*, i8** %106, i64 %107
  %109 = load i8*, i8** %108, align 8
  %110 = load i8**, i8*** %85, align 8
  %111 = getelementptr inbounds i8*, i8** %110, i64 %107
  %112 = load i8*, i8** %111, align 8
  %113 = load i8**, i8*** %86, align 8
  %114 = getelementptr inbounds i8*, i8** %113, i64 %107
  %115 = load i8*, i8** %114, align 8
  %116 = add i32 %102, 1
  br i1 %87, label %98, label %117

117:                                              ; preds = %100
  %118 = load i8*, i8** %103, align 8
  br i1 %91, label %166, label %119

119:                                              ; preds = %117
  %120 = getelementptr i8, i8* %109, i64 %88
  %121 = getelementptr i8, i8* %112, i64 %88
  %122 = getelementptr i8, i8* %115, i64 %88
  %123 = getelementptr i8, i8* %118, i64 %90
  %124 = icmp ult i8* %109, %121
  %125 = icmp ult i8* %112, %120
  %126 = and i1 %124, %125
  %127 = icmp ult i8* %109, %122
  %128 = icmp ult i8* %115, %120
  %129 = and i1 %127, %128
  %130 = or i1 %126, %129
  %131 = icmp ult i8* %109, %123
  %132 = icmp ult i8* %118, %120
  %133 = and i1 %131, %132
  %134 = or i1 %130, %133
  %135 = icmp ult i8* %112, %122
  %136 = icmp ult i8* %115, %121
  %137 = and i1 %135, %136
  %138 = or i1 %134, %137
  %139 = icmp ult i8* %112, %123
  %140 = icmp ult i8* %118, %121
  %141 = and i1 %139, %140
  %142 = or i1 %138, %141
  %143 = icmp ult i8* %115, %123
  %144 = icmp ult i8* %118, %122
  %145 = and i1 %143, %144
  %146 = or i1 %142, %145
  br i1 %146, label %166, label %147

147:                                              ; preds = %119
  %148 = getelementptr i8, i8* %118, i64 %96
  br label %149

149:                                              ; preds = %149, %147
  %150 = phi i64 [ 0, %147 ], [ %164, %149 ]
  %151 = shl i64 %150, 2
  %152 = getelementptr i8, i8* %118, i64 %151
  %153 = bitcast i8* %152 to <64 x i8>*
  %154 = load <64 x i8>, <64 x i8>* %153, align 1
  %155 = shufflevector <64 x i8> %154, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %156 = shufflevector <64 x i8> %154, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %157 = shufflevector <64 x i8> %154, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %158 = getelementptr inbounds i8, i8* %109, i64 %150
  %159 = bitcast i8* %158 to <16 x i8>*
  store <16 x i8> %155, <16 x i8>* %159, align 1, !alias.scope !5, !noalias !8
  %160 = getelementptr inbounds i8, i8* %112, i64 %150
  %161 = bitcast i8* %160 to <16 x i8>*
  store <16 x i8> %156, <16 x i8>* %161, align 1, !alias.scope !12, !noalias !13
  %162 = getelementptr inbounds i8, i8* %115, i64 %150
  %163 = bitcast i8* %162 to <16 x i8>*
  store <16 x i8> %157, <16 x i8>* %163, align 1, !alias.scope !14, !noalias !15
  %164 = add i64 %150, 16
  %165 = icmp eq i64 %164, %95
  br i1 %165, label %166, label %149, !llvm.loop !16

166:                                              ; preds = %149, %119, %117
  %167 = phi i64 [ 0, %119 ], [ 0, %117 ], [ %95, %149 ]
  %168 = phi i8* [ %118, %119 ], [ %118, %117 ], [ %148, %149 ]
  %169 = sub nsw i64 %88, %167
  %170 = xor i64 %167, -1
  %171 = and i64 %169, 1
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %184, label %173

173:                                              ; preds = %166
  %174 = load i8, i8* %168, align 1
  %175 = getelementptr inbounds i8, i8* %109, i64 %167
  store i8 %174, i8* %175, align 1
  %176 = getelementptr inbounds i8, i8* %168, i64 1
  %177 = load i8, i8* %176, align 1
  %178 = getelementptr inbounds i8, i8* %112, i64 %167
  store i8 %177, i8* %178, align 1
  %179 = getelementptr inbounds i8, i8* %168, i64 2
  %180 = load i8, i8* %179, align 1
  %181 = getelementptr inbounds i8, i8* %115, i64 %167
  store i8 %180, i8* %181, align 1
  %182 = getelementptr inbounds i8, i8* %168, i64 4
  %183 = add nuw nsw i64 %167, 1
  br label %184

184:                                              ; preds = %173, %166
  %185 = phi i64 [ %183, %173 ], [ %167, %166 ]
  %186 = phi i8* [ %182, %173 ], [ %168, %166 ]
  %187 = icmp eq i64 %170, %97
  br i1 %187, label %98, label %188

188:                                              ; preds = %184, %188
  %189 = phi i64 [ %210, %188 ], [ %185, %184 ]
  %190 = phi i8* [ %209, %188 ], [ %186, %184 ]
  %191 = load i8, i8* %190, align 1
  %192 = getelementptr inbounds i8, i8* %109, i64 %189
  store i8 %191, i8* %192, align 1
  %193 = getelementptr inbounds i8, i8* %190, i64 1
  %194 = load i8, i8* %193, align 1
  %195 = getelementptr inbounds i8, i8* %112, i64 %189
  store i8 %194, i8* %195, align 1
  %196 = getelementptr inbounds i8, i8* %190, i64 2
  %197 = load i8, i8* %196, align 1
  %198 = getelementptr inbounds i8, i8* %115, i64 %189
  store i8 %197, i8* %198, align 1
  %199 = getelementptr inbounds i8, i8* %190, i64 4
  %200 = add nuw nsw i64 %189, 1
  %201 = load i8, i8* %199, align 1
  %202 = getelementptr inbounds i8, i8* %109, i64 %200
  store i8 %201, i8* %202, align 1
  %203 = getelementptr inbounds i8, i8* %190, i64 5
  %204 = load i8, i8* %203, align 1
  %205 = getelementptr inbounds i8, i8* %112, i64 %200
  store i8 %204, i8* %205, align 1
  %206 = getelementptr inbounds i8, i8* %190, i64 6
  %207 = load i8, i8* %206, align 1
  %208 = getelementptr inbounds i8, i8* %115, i64 %200
  store i8 %207, i8* %208, align 1
  %209 = getelementptr inbounds i8, i8* %190, i64 8
  %210 = add nuw nsw i64 %189, 2
  %211 = icmp eq i64 %210, %88
  br i1 %211, label %98, label %188, !llvm.loop !18

212:                                              ; preds = %5
  %213 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %214 = load i32, i32* %213, align 8
  %215 = icmp sgt i32 %4, 0
  br i1 %215, label %216, label %758

216:                                              ; preds = %212
  %217 = getelementptr inbounds i8**, i8*** %2, i64 1
  %218 = getelementptr inbounds i8**, i8*** %2, i64 2
  %219 = icmp eq i32 %214, 0
  %220 = zext i32 %214 to i64
  %221 = and i64 %220, 1
  %222 = icmp eq i32 %214, 1
  %223 = sub nsw i64 %220, %221
  %224 = icmp eq i64 %221, 0
  br label %239

225:                                              ; preds = %258, %256
  %226 = phi i64 [ 0, %256 ], [ %281, %258 ]
  %227 = phi i8* [ %257, %256 ], [ %280, %258 ]
  br i1 %224, label %237, label %228

228:                                              ; preds = %225
  %229 = getelementptr inbounds i8, i8* %227, i64 2
  %230 = load i8, i8* %229, align 1
  %231 = getelementptr inbounds i8, i8* %248, i64 %226
  store i8 %230, i8* %231, align 1
  %232 = getelementptr inbounds i8, i8* %227, i64 1
  %233 = load i8, i8* %232, align 1
  %234 = getelementptr inbounds i8, i8* %251, i64 %226
  store i8 %233, i8* %234, align 1
  %235 = load i8, i8* %227, align 1
  %236 = getelementptr inbounds i8, i8* %254, i64 %226
  store i8 %235, i8* %236, align 1
  br label %237

237:                                              ; preds = %228, %225, %239
  %238 = icmp sgt i32 %243, 0
  br i1 %238, label %239, label %758

239:                                              ; preds = %237, %216
  %240 = phi i32 [ %4, %216 ], [ %243, %237 ]
  %241 = phi i32 [ %3, %216 ], [ %255, %237 ]
  %242 = phi i8** [ %1, %216 ], [ %244, %237 ]
  %243 = add nsw i32 %240, -1
  %244 = getelementptr inbounds i8*, i8** %242, i64 1
  %245 = load i8**, i8*** %2, align 8
  %246 = zext i32 %241 to i64
  %247 = getelementptr inbounds i8*, i8** %245, i64 %246
  %248 = load i8*, i8** %247, align 8
  %249 = load i8**, i8*** %217, align 8
  %250 = getelementptr inbounds i8*, i8** %249, i64 %246
  %251 = load i8*, i8** %250, align 8
  %252 = load i8**, i8*** %218, align 8
  %253 = getelementptr inbounds i8*, i8** %252, i64 %246
  %254 = load i8*, i8** %253, align 8
  %255 = add i32 %241, 1
  br i1 %219, label %237, label %256

256:                                              ; preds = %239
  %257 = load i8*, i8** %242, align 8
  br i1 %222, label %225, label %258

258:                                              ; preds = %256, %258
  %259 = phi i64 [ %281, %258 ], [ 0, %256 ]
  %260 = phi i8* [ %280, %258 ], [ %257, %256 ]
  %261 = phi i64 [ %282, %258 ], [ %223, %256 ]
  %262 = getelementptr inbounds i8, i8* %260, i64 2
  %263 = load i8, i8* %262, align 1
  %264 = getelementptr inbounds i8, i8* %248, i64 %259
  store i8 %263, i8* %264, align 1
  %265 = getelementptr inbounds i8, i8* %260, i64 1
  %266 = load i8, i8* %265, align 1
  %267 = getelementptr inbounds i8, i8* %251, i64 %259
  store i8 %266, i8* %267, align 1
  %268 = load i8, i8* %260, align 1
  %269 = getelementptr inbounds i8, i8* %254, i64 %259
  store i8 %268, i8* %269, align 1
  %270 = getelementptr inbounds i8, i8* %260, i64 3
  %271 = or i64 %259, 1
  %272 = getelementptr inbounds i8, i8* %260, i64 5
  %273 = load i8, i8* %272, align 1
  %274 = getelementptr inbounds i8, i8* %248, i64 %271
  store i8 %273, i8* %274, align 1
  %275 = getelementptr inbounds i8, i8* %260, i64 4
  %276 = load i8, i8* %275, align 1
  %277 = getelementptr inbounds i8, i8* %251, i64 %271
  store i8 %276, i8* %277, align 1
  %278 = load i8, i8* %270, align 1
  %279 = getelementptr inbounds i8, i8* %254, i64 %271
  store i8 %278, i8* %279, align 1
  %280 = getelementptr inbounds i8, i8* %260, i64 6
  %281 = add nuw nsw i64 %259, 2
  %282 = add i64 %261, -2
  %283 = icmp eq i64 %282, 0
  br i1 %283, label %225, label %258

284:                                              ; preds = %5, %5
  %285 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %286 = load i32, i32* %285, align 8
  %287 = icmp sgt i32 %4, 0
  br i1 %287, label %288, label %758

288:                                              ; preds = %284
  %289 = getelementptr inbounds i8**, i8*** %2, i64 1
  %290 = getelementptr inbounds i8**, i8*** %2, i64 2
  %291 = icmp eq i32 %286, 0
  %292 = zext i32 %286 to i64
  %293 = shl nuw nsw i64 %292, 2
  %294 = add nsw i64 %293, -1
  %295 = icmp ult i32 %286, 17
  %296 = and i64 %292, 15
  %297 = icmp eq i64 %296, 0
  %298 = select i1 %297, i64 16, i64 %296
  %299 = sub nsw i64 %292, %298
  %300 = shl nsw i64 %299, 2
  %301 = sub nsw i64 0, %292
  br label %304

302:                                              ; preds = %388, %392, %304
  %303 = icmp sgt i32 %308, 0
  br i1 %303, label %304, label %758

304:                                              ; preds = %302, %288
  %305 = phi i32 [ %4, %288 ], [ %308, %302 ]
  %306 = phi i32 [ %3, %288 ], [ %320, %302 ]
  %307 = phi i8** [ %1, %288 ], [ %309, %302 ]
  %308 = add nsw i32 %305, -1
  %309 = getelementptr inbounds i8*, i8** %307, i64 1
  %310 = load i8**, i8*** %2, align 8
  %311 = zext i32 %306 to i64
  %312 = getelementptr inbounds i8*, i8** %310, i64 %311
  %313 = load i8*, i8** %312, align 8
  %314 = load i8**, i8*** %289, align 8
  %315 = getelementptr inbounds i8*, i8** %314, i64 %311
  %316 = load i8*, i8** %315, align 8
  %317 = load i8**, i8*** %290, align 8
  %318 = getelementptr inbounds i8*, i8** %317, i64 %311
  %319 = load i8*, i8** %318, align 8
  %320 = add i32 %306, 1
  br i1 %291, label %302, label %321

321:                                              ; preds = %304
  %322 = load i8*, i8** %307, align 8
  br i1 %295, label %370, label %323

323:                                              ; preds = %321
  %324 = getelementptr i8, i8* %313, i64 %292
  %325 = getelementptr i8, i8* %316, i64 %292
  %326 = getelementptr i8, i8* %319, i64 %292
  %327 = getelementptr i8, i8* %322, i64 %294
  %328 = icmp ult i8* %313, %325
  %329 = icmp ult i8* %316, %324
  %330 = and i1 %328, %329
  %331 = icmp ult i8* %313, %326
  %332 = icmp ult i8* %319, %324
  %333 = and i1 %331, %332
  %334 = or i1 %330, %333
  %335 = icmp ult i8* %313, %327
  %336 = icmp ult i8* %322, %324
  %337 = and i1 %335, %336
  %338 = or i1 %334, %337
  %339 = icmp ult i8* %316, %326
  %340 = icmp ult i8* %319, %325
  %341 = and i1 %339, %340
  %342 = or i1 %338, %341
  %343 = icmp ult i8* %316, %327
  %344 = icmp ult i8* %322, %325
  %345 = and i1 %343, %344
  %346 = or i1 %342, %345
  %347 = icmp ult i8* %319, %327
  %348 = icmp ult i8* %322, %326
  %349 = and i1 %347, %348
  %350 = or i1 %346, %349
  br i1 %350, label %370, label %351

351:                                              ; preds = %323
  %352 = getelementptr i8, i8* %322, i64 %300
  br label %353

353:                                              ; preds = %353, %351
  %354 = phi i64 [ 0, %351 ], [ %368, %353 ]
  %355 = shl i64 %354, 2
  %356 = getelementptr inbounds i8, i8* %322, i64 %355
  %357 = bitcast i8* %356 to <64 x i8>*
  %358 = load <64 x i8>, <64 x i8>* %357, align 1
  %359 = shufflevector <64 x i8> %358, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %360 = shufflevector <64 x i8> %358, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %361 = shufflevector <64 x i8> %358, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %362 = getelementptr inbounds i8, i8* %313, i64 %354
  %363 = bitcast i8* %362 to <16 x i8>*
  store <16 x i8> %361, <16 x i8>* %363, align 1, !alias.scope !19, !noalias !22
  %364 = getelementptr inbounds i8, i8* %316, i64 %354
  %365 = bitcast i8* %364 to <16 x i8>*
  store <16 x i8> %360, <16 x i8>* %365, align 1, !alias.scope !26, !noalias !27
  %366 = getelementptr inbounds i8, i8* %319, i64 %354
  %367 = bitcast i8* %366 to <16 x i8>*
  store <16 x i8> %359, <16 x i8>* %367, align 1, !alias.scope !28, !noalias !29
  %368 = add i64 %354, 16
  %369 = icmp eq i64 %368, %299
  br i1 %369, label %370, label %353, !llvm.loop !30

370:                                              ; preds = %353, %323, %321
  %371 = phi i64 [ 0, %323 ], [ 0, %321 ], [ %299, %353 ]
  %372 = phi i8* [ %322, %323 ], [ %322, %321 ], [ %352, %353 ]
  %373 = sub nsw i64 %292, %371
  %374 = xor i64 %371, -1
  %375 = and i64 %373, 1
  %376 = icmp eq i64 %375, 0
  br i1 %376, label %388, label %377

377:                                              ; preds = %370
  %378 = getelementptr inbounds i8, i8* %372, i64 2
  %379 = load i8, i8* %378, align 1
  %380 = getelementptr inbounds i8, i8* %313, i64 %371
  store i8 %379, i8* %380, align 1
  %381 = getelementptr inbounds i8, i8* %372, i64 1
  %382 = load i8, i8* %381, align 1
  %383 = getelementptr inbounds i8, i8* %316, i64 %371
  store i8 %382, i8* %383, align 1
  %384 = load i8, i8* %372, align 1
  %385 = getelementptr inbounds i8, i8* %319, i64 %371
  store i8 %384, i8* %385, align 1
  %386 = getelementptr inbounds i8, i8* %372, i64 4
  %387 = add nuw nsw i64 %371, 1
  br label %388

388:                                              ; preds = %377, %370
  %389 = phi i64 [ %387, %377 ], [ %371, %370 ]
  %390 = phi i8* [ %386, %377 ], [ %372, %370 ]
  %391 = icmp eq i64 %374, %301
  br i1 %391, label %302, label %392

392:                                              ; preds = %388, %392
  %393 = phi i64 [ %414, %392 ], [ %389, %388 ]
  %394 = phi i8* [ %413, %392 ], [ %390, %388 ]
  %395 = getelementptr inbounds i8, i8* %394, i64 2
  %396 = load i8, i8* %395, align 1
  %397 = getelementptr inbounds i8, i8* %313, i64 %393
  store i8 %396, i8* %397, align 1
  %398 = getelementptr inbounds i8, i8* %394, i64 1
  %399 = load i8, i8* %398, align 1
  %400 = getelementptr inbounds i8, i8* %316, i64 %393
  store i8 %399, i8* %400, align 1
  %401 = load i8, i8* %394, align 1
  %402 = getelementptr inbounds i8, i8* %319, i64 %393
  store i8 %401, i8* %402, align 1
  %403 = getelementptr inbounds i8, i8* %394, i64 4
  %404 = add nuw nsw i64 %393, 1
  %405 = getelementptr inbounds i8, i8* %394, i64 6
  %406 = load i8, i8* %405, align 1
  %407 = getelementptr inbounds i8, i8* %313, i64 %404
  store i8 %406, i8* %407, align 1
  %408 = getelementptr inbounds i8, i8* %394, i64 5
  %409 = load i8, i8* %408, align 1
  %410 = getelementptr inbounds i8, i8* %316, i64 %404
  store i8 %409, i8* %410, align 1
  %411 = load i8, i8* %403, align 1
  %412 = getelementptr inbounds i8, i8* %319, i64 %404
  store i8 %411, i8* %412, align 1
  %413 = getelementptr inbounds i8, i8* %394, i64 8
  %414 = add nuw nsw i64 %393, 2
  %415 = icmp eq i64 %414, %292
  br i1 %415, label %302, label %392, !llvm.loop !31

416:                                              ; preds = %5, %5
  %417 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %418 = load i32, i32* %417, align 8
  %419 = icmp sgt i32 %4, 0
  br i1 %419, label %420, label %758

420:                                              ; preds = %416
  %421 = getelementptr inbounds i8**, i8*** %2, i64 1
  %422 = getelementptr inbounds i8**, i8*** %2, i64 2
  %423 = icmp eq i32 %418, 0
  %424 = zext i32 %418 to i64
  %425 = shl nuw nsw i64 %424, 2
  %426 = icmp ult i32 %418, 17
  %427 = and i64 %424, 15
  %428 = icmp eq i64 %427, 0
  %429 = select i1 %428, i64 16, i64 %427
  %430 = sub nsw i64 %424, %429
  %431 = shl nsw i64 %430, 2
  %432 = sub nsw i64 0, %424
  br label %435

433:                                              ; preds = %522, %526, %435
  %434 = icmp sgt i32 %439, 0
  br i1 %434, label %435, label %758

435:                                              ; preds = %433, %420
  %436 = phi i32 [ %4, %420 ], [ %439, %433 ]
  %437 = phi i32 [ %3, %420 ], [ %451, %433 ]
  %438 = phi i8** [ %1, %420 ], [ %440, %433 ]
  %439 = add nsw i32 %436, -1
  %440 = getelementptr inbounds i8*, i8** %438, i64 1
  %441 = load i8**, i8*** %2, align 8
  %442 = zext i32 %437 to i64
  %443 = getelementptr inbounds i8*, i8** %441, i64 %442
  %444 = load i8*, i8** %443, align 8
  %445 = load i8**, i8*** %421, align 8
  %446 = getelementptr inbounds i8*, i8** %445, i64 %442
  %447 = load i8*, i8** %446, align 8
  %448 = load i8**, i8*** %422, align 8
  %449 = getelementptr inbounds i8*, i8** %448, i64 %442
  %450 = load i8*, i8** %449, align 8
  %451 = add i32 %437, 1
  br i1 %423, label %433, label %452

452:                                              ; preds = %435
  %453 = load i8*, i8** %438, align 8
  br i1 %426, label %503, label %454

454:                                              ; preds = %452
  %455 = getelementptr i8, i8* %444, i64 %424
  %456 = getelementptr i8, i8* %447, i64 %424
  %457 = getelementptr i8, i8* %450, i64 %424
  %458 = getelementptr i8, i8* %453, i64 1
  %459 = getelementptr i8, i8* %453, i64 %425
  %460 = icmp ult i8* %444, %456
  %461 = icmp ult i8* %447, %455
  %462 = and i1 %460, %461
  %463 = icmp ult i8* %444, %457
  %464 = icmp ult i8* %450, %455
  %465 = and i1 %463, %464
  %466 = or i1 %462, %465
  %467 = icmp ult i8* %444, %459
  %468 = icmp ult i8* %458, %455
  %469 = and i1 %467, %468
  %470 = or i1 %466, %469
  %471 = icmp ult i8* %447, %457
  %472 = icmp ult i8* %450, %456
  %473 = and i1 %471, %472
  %474 = or i1 %470, %473
  %475 = icmp ult i8* %447, %459
  %476 = icmp ult i8* %458, %456
  %477 = and i1 %475, %476
  %478 = or i1 %474, %477
  %479 = icmp ult i8* %450, %459
  %480 = icmp ult i8* %458, %457
  %481 = and i1 %479, %480
  %482 = or i1 %478, %481
  br i1 %482, label %503, label %483

483:                                              ; preds = %454
  %484 = getelementptr i8, i8* %453, i64 %431
  %485 = getelementptr inbounds i8, i8* %453, i64 1
  br label %486

486:                                              ; preds = %486, %483
  %487 = phi i64 [ 0, %483 ], [ %501, %486 ]
  %488 = shl i64 %487, 2
  %489 = getelementptr inbounds i8, i8* %485, i64 %488
  %490 = bitcast i8* %489 to <64 x i8>*
  %491 = load <64 x i8>, <64 x i8>* %490, align 1
  %492 = shufflevector <64 x i8> %491, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %493 = shufflevector <64 x i8> %491, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %494 = shufflevector <64 x i8> %491, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %495 = getelementptr inbounds i8, i8* %444, i64 %487
  %496 = bitcast i8* %495 to <16 x i8>*
  store <16 x i8> %494, <16 x i8>* %496, align 1, !alias.scope !32, !noalias !35
  %497 = getelementptr inbounds i8, i8* %447, i64 %487
  %498 = bitcast i8* %497 to <16 x i8>*
  store <16 x i8> %493, <16 x i8>* %498, align 1, !alias.scope !39, !noalias !40
  %499 = getelementptr inbounds i8, i8* %450, i64 %487
  %500 = bitcast i8* %499 to <16 x i8>*
  store <16 x i8> %492, <16 x i8>* %500, align 1, !alias.scope !41, !noalias !42
  %501 = add i64 %487, 16
  %502 = icmp eq i64 %501, %430
  br i1 %502, label %503, label %486, !llvm.loop !43

503:                                              ; preds = %486, %454, %452
  %504 = phi i64 [ 0, %454 ], [ 0, %452 ], [ %430, %486 ]
  %505 = phi i8* [ %453, %454 ], [ %453, %452 ], [ %484, %486 ]
  %506 = sub nsw i64 %424, %504
  %507 = xor i64 %504, -1
  %508 = and i64 %506, 1
  %509 = icmp eq i64 %508, 0
  br i1 %509, label %522, label %510

510:                                              ; preds = %503
  %511 = getelementptr inbounds i8, i8* %505, i64 3
  %512 = load i8, i8* %511, align 1
  %513 = getelementptr inbounds i8, i8* %444, i64 %504
  store i8 %512, i8* %513, align 1
  %514 = getelementptr inbounds i8, i8* %505, i64 2
  %515 = load i8, i8* %514, align 1
  %516 = getelementptr inbounds i8, i8* %447, i64 %504
  store i8 %515, i8* %516, align 1
  %517 = getelementptr inbounds i8, i8* %505, i64 1
  %518 = load i8, i8* %517, align 1
  %519 = getelementptr inbounds i8, i8* %450, i64 %504
  store i8 %518, i8* %519, align 1
  %520 = getelementptr inbounds i8, i8* %505, i64 4
  %521 = add nuw nsw i64 %504, 1
  br label %522

522:                                              ; preds = %510, %503
  %523 = phi i64 [ %521, %510 ], [ %504, %503 ]
  %524 = phi i8* [ %520, %510 ], [ %505, %503 ]
  %525 = icmp eq i64 %507, %432
  br i1 %525, label %433, label %526

526:                                              ; preds = %522, %526
  %527 = phi i64 [ %549, %526 ], [ %523, %522 ]
  %528 = phi i8* [ %548, %526 ], [ %524, %522 ]
  %529 = getelementptr inbounds i8, i8* %528, i64 3
  %530 = load i8, i8* %529, align 1
  %531 = getelementptr inbounds i8, i8* %444, i64 %527
  store i8 %530, i8* %531, align 1
  %532 = getelementptr inbounds i8, i8* %528, i64 2
  %533 = load i8, i8* %532, align 1
  %534 = getelementptr inbounds i8, i8* %447, i64 %527
  store i8 %533, i8* %534, align 1
  %535 = getelementptr inbounds i8, i8* %528, i64 1
  %536 = load i8, i8* %535, align 1
  %537 = getelementptr inbounds i8, i8* %450, i64 %527
  store i8 %536, i8* %537, align 1
  %538 = add nuw nsw i64 %527, 1
  %539 = getelementptr inbounds i8, i8* %528, i64 7
  %540 = load i8, i8* %539, align 1
  %541 = getelementptr inbounds i8, i8* %444, i64 %538
  store i8 %540, i8* %541, align 1
  %542 = getelementptr inbounds i8, i8* %528, i64 6
  %543 = load i8, i8* %542, align 1
  %544 = getelementptr inbounds i8, i8* %447, i64 %538
  store i8 %543, i8* %544, align 1
  %545 = getelementptr inbounds i8, i8* %528, i64 5
  %546 = load i8, i8* %545, align 1
  %547 = getelementptr inbounds i8, i8* %450, i64 %538
  store i8 %546, i8* %547, align 1
  %548 = getelementptr inbounds i8, i8* %528, i64 8
  %549 = add nuw nsw i64 %527, 2
  %550 = icmp eq i64 %549, %424
  br i1 %550, label %433, label %526, !llvm.loop !44

551:                                              ; preds = %5, %5
  %552 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %553 = load i32, i32* %552, align 8
  %554 = icmp sgt i32 %4, 0
  br i1 %554, label %555, label %758

555:                                              ; preds = %551
  %556 = getelementptr inbounds i8**, i8*** %2, i64 1
  %557 = getelementptr inbounds i8**, i8*** %2, i64 2
  %558 = icmp eq i32 %553, 0
  %559 = zext i32 %553 to i64
  %560 = shl nuw nsw i64 %559, 2
  %561 = icmp ult i32 %553, 17
  %562 = and i64 %559, 15
  %563 = icmp eq i64 %562, 0
  %564 = select i1 %563, i64 16, i64 %562
  %565 = sub nsw i64 %559, %564
  %566 = shl nsw i64 %565, 2
  %567 = sub nsw i64 0, %559
  br label %570

568:                                              ; preds = %657, %661, %570
  %569 = icmp sgt i32 %574, 0
  br i1 %569, label %570, label %758

570:                                              ; preds = %568, %555
  %571 = phi i32 [ %4, %555 ], [ %574, %568 ]
  %572 = phi i32 [ %3, %555 ], [ %586, %568 ]
  %573 = phi i8** [ %1, %555 ], [ %575, %568 ]
  %574 = add nsw i32 %571, -1
  %575 = getelementptr inbounds i8*, i8** %573, i64 1
  %576 = load i8**, i8*** %2, align 8
  %577 = zext i32 %572 to i64
  %578 = getelementptr inbounds i8*, i8** %576, i64 %577
  %579 = load i8*, i8** %578, align 8
  %580 = load i8**, i8*** %556, align 8
  %581 = getelementptr inbounds i8*, i8** %580, i64 %577
  %582 = load i8*, i8** %581, align 8
  %583 = load i8**, i8*** %557, align 8
  %584 = getelementptr inbounds i8*, i8** %583, i64 %577
  %585 = load i8*, i8** %584, align 8
  %586 = add i32 %572, 1
  br i1 %558, label %568, label %587

587:                                              ; preds = %570
  %588 = load i8*, i8** %573, align 8
  br i1 %561, label %638, label %589

589:                                              ; preds = %587
  %590 = getelementptr i8, i8* %579, i64 %559
  %591 = getelementptr i8, i8* %582, i64 %559
  %592 = getelementptr i8, i8* %585, i64 %559
  %593 = getelementptr i8, i8* %588, i64 1
  %594 = getelementptr i8, i8* %588, i64 %560
  %595 = icmp ult i8* %579, %591
  %596 = icmp ult i8* %582, %590
  %597 = and i1 %595, %596
  %598 = icmp ult i8* %579, %592
  %599 = icmp ult i8* %585, %590
  %600 = and i1 %598, %599
  %601 = or i1 %597, %600
  %602 = icmp ult i8* %579, %594
  %603 = icmp ult i8* %593, %590
  %604 = and i1 %602, %603
  %605 = or i1 %601, %604
  %606 = icmp ult i8* %582, %592
  %607 = icmp ult i8* %585, %591
  %608 = and i1 %606, %607
  %609 = or i1 %605, %608
  %610 = icmp ult i8* %582, %594
  %611 = icmp ult i8* %593, %591
  %612 = and i1 %610, %611
  %613 = or i1 %609, %612
  %614 = icmp ult i8* %585, %594
  %615 = icmp ult i8* %593, %592
  %616 = and i1 %614, %615
  %617 = or i1 %613, %616
  br i1 %617, label %638, label %618

618:                                              ; preds = %589
  %619 = getelementptr i8, i8* %588, i64 %566
  %620 = getelementptr i8, i8* %588, i64 1
  br label %621

621:                                              ; preds = %621, %618
  %622 = phi i64 [ 0, %618 ], [ %636, %621 ]
  %623 = shl i64 %622, 2
  %624 = getelementptr inbounds i8, i8* %620, i64 %623
  %625 = bitcast i8* %624 to <64 x i8>*
  %626 = load <64 x i8>, <64 x i8>* %625, align 1
  %627 = shufflevector <64 x i8> %626, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %628 = shufflevector <64 x i8> %626, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %629 = shufflevector <64 x i8> %626, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %630 = getelementptr inbounds i8, i8* %579, i64 %622
  %631 = bitcast i8* %630 to <16 x i8>*
  store <16 x i8> %627, <16 x i8>* %631, align 1, !alias.scope !45, !noalias !48
  %632 = getelementptr inbounds i8, i8* %582, i64 %622
  %633 = bitcast i8* %632 to <16 x i8>*
  store <16 x i8> %628, <16 x i8>* %633, align 1, !alias.scope !52, !noalias !53
  %634 = getelementptr inbounds i8, i8* %585, i64 %622
  %635 = bitcast i8* %634 to <16 x i8>*
  store <16 x i8> %629, <16 x i8>* %635, align 1, !alias.scope !54, !noalias !55
  %636 = add i64 %622, 16
  %637 = icmp eq i64 %636, %565
  br i1 %637, label %638, label %621, !llvm.loop !56

638:                                              ; preds = %621, %589, %587
  %639 = phi i64 [ 0, %589 ], [ 0, %587 ], [ %565, %621 ]
  %640 = phi i8* [ %588, %589 ], [ %588, %587 ], [ %619, %621 ]
  %641 = sub nsw i64 %559, %639
  %642 = xor i64 %639, -1
  %643 = and i64 %641, 1
  %644 = icmp eq i64 %643, 0
  br i1 %644, label %657, label %645

645:                                              ; preds = %638
  %646 = getelementptr inbounds i8, i8* %640, i64 1
  %647 = load i8, i8* %646, align 1
  %648 = getelementptr inbounds i8, i8* %579, i64 %639
  store i8 %647, i8* %648, align 1
  %649 = getelementptr inbounds i8, i8* %640, i64 2
  %650 = load i8, i8* %649, align 1
  %651 = getelementptr inbounds i8, i8* %582, i64 %639
  store i8 %650, i8* %651, align 1
  %652 = getelementptr inbounds i8, i8* %640, i64 3
  %653 = load i8, i8* %652, align 1
  %654 = getelementptr inbounds i8, i8* %585, i64 %639
  store i8 %653, i8* %654, align 1
  %655 = getelementptr inbounds i8, i8* %640, i64 4
  %656 = add nuw nsw i64 %639, 1
  br label %657

657:                                              ; preds = %645, %638
  %658 = phi i64 [ %656, %645 ], [ %639, %638 ]
  %659 = phi i8* [ %655, %645 ], [ %640, %638 ]
  %660 = icmp eq i64 %642, %567
  br i1 %660, label %568, label %661

661:                                              ; preds = %657, %661
  %662 = phi i64 [ %684, %661 ], [ %658, %657 ]
  %663 = phi i8* [ %683, %661 ], [ %659, %657 ]
  %664 = getelementptr inbounds i8, i8* %663, i64 1
  %665 = load i8, i8* %664, align 1
  %666 = getelementptr inbounds i8, i8* %579, i64 %662
  store i8 %665, i8* %666, align 1
  %667 = getelementptr inbounds i8, i8* %663, i64 2
  %668 = load i8, i8* %667, align 1
  %669 = getelementptr inbounds i8, i8* %582, i64 %662
  store i8 %668, i8* %669, align 1
  %670 = getelementptr inbounds i8, i8* %663, i64 3
  %671 = load i8, i8* %670, align 1
  %672 = getelementptr inbounds i8, i8* %585, i64 %662
  store i8 %671, i8* %672, align 1
  %673 = add nuw nsw i64 %662, 1
  %674 = getelementptr inbounds i8, i8* %663, i64 5
  %675 = load i8, i8* %674, align 1
  %676 = getelementptr inbounds i8, i8* %579, i64 %673
  store i8 %675, i8* %676, align 1
  %677 = getelementptr inbounds i8, i8* %663, i64 6
  %678 = load i8, i8* %677, align 1
  %679 = getelementptr inbounds i8, i8* %582, i64 %673
  store i8 %678, i8* %679, align 1
  %680 = getelementptr inbounds i8, i8* %663, i64 7
  %681 = load i8, i8* %680, align 1
  %682 = getelementptr inbounds i8, i8* %585, i64 %673
  store i8 %681, i8* %682, align 1
  %683 = getelementptr inbounds i8, i8* %663, i64 8
  %684 = add nuw nsw i64 %662, 2
  %685 = icmp eq i64 %684, %559
  br i1 %685, label %568, label %661, !llvm.loop !57

686:                                              ; preds = %5
  %687 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %688 = load i32, i32* %687, align 8
  %689 = icmp sgt i32 %4, 0
  br i1 %689, label %690, label %758

690:                                              ; preds = %686
  %691 = getelementptr inbounds i8**, i8*** %2, i64 1
  %692 = getelementptr inbounds i8**, i8*** %2, i64 2
  %693 = icmp eq i32 %688, 0
  %694 = zext i32 %688 to i64
  %695 = and i64 %694, 1
  %696 = icmp eq i32 %688, 1
  %697 = sub nsw i64 %694, %695
  %698 = icmp eq i64 %695, 0
  br label %713

699:                                              ; preds = %732, %730
  %700 = phi i64 [ 0, %730 ], [ %755, %732 ]
  %701 = phi i8* [ %731, %730 ], [ %754, %732 ]
  br i1 %698, label %711, label %702

702:                                              ; preds = %699
  %703 = load i8, i8* %701, align 1
  %704 = getelementptr inbounds i8, i8* %722, i64 %700
  store i8 %703, i8* %704, align 1
  %705 = getelementptr inbounds i8, i8* %701, i64 1
  %706 = load i8, i8* %705, align 1
  %707 = getelementptr inbounds i8, i8* %725, i64 %700
  store i8 %706, i8* %707, align 1
  %708 = getelementptr inbounds i8, i8* %701, i64 2
  %709 = load i8, i8* %708, align 1
  %710 = getelementptr inbounds i8, i8* %728, i64 %700
  store i8 %709, i8* %710, align 1
  br label %711

711:                                              ; preds = %702, %699, %713
  %712 = icmp sgt i32 %717, 0
  br i1 %712, label %713, label %758

713:                                              ; preds = %711, %690
  %714 = phi i32 [ %4, %690 ], [ %717, %711 ]
  %715 = phi i32 [ %3, %690 ], [ %729, %711 ]
  %716 = phi i8** [ %1, %690 ], [ %718, %711 ]
  %717 = add nsw i32 %714, -1
  %718 = getelementptr inbounds i8*, i8** %716, i64 1
  %719 = load i8**, i8*** %2, align 8
  %720 = zext i32 %715 to i64
  %721 = getelementptr inbounds i8*, i8** %719, i64 %720
  %722 = load i8*, i8** %721, align 8
  %723 = load i8**, i8*** %691, align 8
  %724 = getelementptr inbounds i8*, i8** %723, i64 %720
  %725 = load i8*, i8** %724, align 8
  %726 = load i8**, i8*** %692, align 8
  %727 = getelementptr inbounds i8*, i8** %726, i64 %720
  %728 = load i8*, i8** %727, align 8
  %729 = add i32 %715, 1
  br i1 %693, label %711, label %730

730:                                              ; preds = %713
  %731 = load i8*, i8** %716, align 8
  br i1 %696, label %699, label %732

732:                                              ; preds = %730, %732
  %733 = phi i64 [ %755, %732 ], [ 0, %730 ]
  %734 = phi i8* [ %754, %732 ], [ %731, %730 ]
  %735 = phi i64 [ %756, %732 ], [ %697, %730 ]
  %736 = load i8, i8* %734, align 1
  %737 = getelementptr inbounds i8, i8* %722, i64 %733
  store i8 %736, i8* %737, align 1
  %738 = getelementptr inbounds i8, i8* %734, i64 1
  %739 = load i8, i8* %738, align 1
  %740 = getelementptr inbounds i8, i8* %725, i64 %733
  store i8 %739, i8* %740, align 1
  %741 = getelementptr inbounds i8, i8* %734, i64 2
  %742 = load i8, i8* %741, align 1
  %743 = getelementptr inbounds i8, i8* %728, i64 %733
  store i8 %742, i8* %743, align 1
  %744 = getelementptr inbounds i8, i8* %734, i64 3
  %745 = or i64 %733, 1
  %746 = load i8, i8* %744, align 1
  %747 = getelementptr inbounds i8, i8* %722, i64 %745
  store i8 %746, i8* %747, align 1
  %748 = getelementptr inbounds i8, i8* %734, i64 4
  %749 = load i8, i8* %748, align 1
  %750 = getelementptr inbounds i8, i8* %725, i64 %745
  store i8 %749, i8* %750, align 1
  %751 = getelementptr inbounds i8, i8* %734, i64 5
  %752 = load i8, i8* %751, align 1
  %753 = getelementptr inbounds i8, i8* %728, i64 %745
  store i8 %752, i8* %753, align 1
  %754 = getelementptr inbounds i8, i8* %734, i64 6
  %755 = add nuw nsw i64 %733, 2
  %756 = add i64 %735, -2
  %757 = icmp eq i64 %756, 0
  br i1 %757, label %699, label %732

758:                                              ; preds = %568, %433, %302, %237, %98, %33, %711, %686, %551, %416, %284, %212, %80, %8
  ret void
}

declare i32 @jsimd_can_rgb_ycc() local_unnamed_addr #3

declare void @jsimd_rgb_ycc_convert(%struct.jpeg_compress_struct*, i8**, i8***, i32, i32) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @rgb_ycc_convert(%struct.jpeg_compress_struct* nocapture readonly, i8** nocapture readonly, i8*** readonly, i32, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 10
  %7 = load i32, i32* %6, align 4
  switch i32 %7, label %604 [
    i32 6, label %8
    i32 7, label %107
    i32 12, label %107
    i32 8, label %206
    i32 9, label %305
    i32 13, label %305
    i32 10, label %404
    i32 14, label %404
    i32 11, label %504
    i32 15, label %504
  ]

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %10 = bitcast %struct.jpeg_color_converter** %9 to %struct.my_color_converter**
  %11 = load %struct.my_color_converter*, %struct.my_color_converter** %10, align 8
  %12 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %11, i64 0, i32 1
  %13 = load i64*, i64** %12, align 8
  %14 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %15 = load i32, i32* %14, align 8
  %16 = icmp sgt i32 %4, 0
  br i1 %16, label %17, label %703

17:                                               ; preds = %8
  %18 = getelementptr inbounds i8**, i8*** %2, i64 1
  %19 = getelementptr inbounds i8**, i8*** %2, i64 2
  %20 = icmp eq i32 %15, 0
  %21 = zext i32 %15 to i64
  br label %24

22:                                               ; preds = %43, %24
  %23 = icmp sgt i32 %28, 0
  br i1 %23, label %24, label %703

24:                                               ; preds = %22, %17
  %25 = phi i32 [ %4, %17 ], [ %28, %22 ]
  %26 = phi i8** [ %1, %17 ], [ %29, %22 ]
  %27 = phi i32 [ %3, %17 ], [ %40, %22 ]
  %28 = add nsw i32 %25, -1
  %29 = getelementptr inbounds i8*, i8** %26, i64 1
  %30 = load i8**, i8*** %2, align 8
  %31 = zext i32 %27 to i64
  %32 = getelementptr inbounds i8*, i8** %30, i64 %31
  %33 = load i8*, i8** %32, align 8
  %34 = load i8**, i8*** %18, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 %31
  %36 = load i8*, i8** %35, align 8
  %37 = load i8**, i8*** %19, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 %31
  %39 = load i8*, i8** %38, align 8
  %40 = add i32 %27, 1
  br i1 %20, label %22, label %41

41:                                               ; preds = %24
  %42 = load i8*, i8** %26, align 8
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %105, %43 ]
  %45 = phi i8* [ %42, %41 ], [ %54, %43 ]
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds i8, i8* %45, i64 1
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = getelementptr inbounds i8, i8* %45, i64 2
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = getelementptr inbounds i8, i8* %45, i64 3
  %55 = zext i8 %46 to i64
  %56 = getelementptr inbounds i64, i64* %13, i64 %55
  %57 = load i64, i64* %56, align 8
  %58 = or i32 %50, 256
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds i64, i64* %13, i64 %59
  %61 = load i64, i64* %60, align 8
  %62 = add nsw i64 %61, %57
  %63 = or i32 %53, 512
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i64, i64* %13, i64 %64
  %66 = load i64, i64* %65, align 8
  %67 = add nsw i64 %62, %66
  %68 = lshr i64 %67, 16
  %69 = trunc i64 %68 to i8
  %70 = getelementptr inbounds i8, i8* %33, i64 %44
  store i8 %69, i8* %70, align 1
  %71 = or i32 %47, 768
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i64, i64* %13, i64 %72
  %74 = load i64, i64* %73, align 8
  %75 = or i32 %50, 1024
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i64, i64* %13, i64 %76
  %78 = load i64, i64* %77, align 8
  %79 = add nsw i64 %78, %74
  %80 = or i32 %53, 1280
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i64, i64* %13, i64 %81
  %83 = load i64, i64* %82, align 8
  %84 = add nsw i64 %79, %83
  %85 = lshr i64 %84, 16
  %86 = trunc i64 %85 to i8
  %87 = getelementptr inbounds i8, i8* %36, i64 %44
  store i8 %86, i8* %87, align 1
  %88 = or i32 %47, 1280
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds i64, i64* %13, i64 %89
  %91 = load i64, i64* %90, align 8
  %92 = or i32 %50, 1536
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds i64, i64* %13, i64 %93
  %95 = load i64, i64* %94, align 8
  %96 = add nsw i64 %95, %91
  %97 = or i32 %53, 1792
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds i64, i64* %13, i64 %98
  %100 = load i64, i64* %99, align 8
  %101 = add nsw i64 %96, %100
  %102 = lshr i64 %101, 16
  %103 = trunc i64 %102 to i8
  %104 = getelementptr inbounds i8, i8* %39, i64 %44
  store i8 %103, i8* %104, align 1
  %105 = add nuw nsw i64 %44, 1
  %106 = icmp eq i64 %105, %21
  br i1 %106, label %22, label %43

107:                                              ; preds = %5, %5
  %108 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %109 = bitcast %struct.jpeg_color_converter** %108 to %struct.my_color_converter**
  %110 = load %struct.my_color_converter*, %struct.my_color_converter** %109, align 8
  %111 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %110, i64 0, i32 1
  %112 = load i64*, i64** %111, align 8
  %113 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %114 = load i32, i32* %113, align 8
  %115 = icmp sgt i32 %4, 0
  br i1 %115, label %116, label %703

116:                                              ; preds = %107
  %117 = getelementptr inbounds i8**, i8*** %2, i64 1
  %118 = getelementptr inbounds i8**, i8*** %2, i64 2
  %119 = icmp eq i32 %114, 0
  %120 = zext i32 %114 to i64
  br label %123

121:                                              ; preds = %142, %123
  %122 = icmp sgt i32 %127, 0
  br i1 %122, label %123, label %703

123:                                              ; preds = %121, %116
  %124 = phi i32 [ %4, %116 ], [ %127, %121 ]
  %125 = phi i8** [ %1, %116 ], [ %128, %121 ]
  %126 = phi i32 [ %3, %116 ], [ %139, %121 ]
  %127 = add nsw i32 %124, -1
  %128 = getelementptr inbounds i8*, i8** %125, i64 1
  %129 = load i8**, i8*** %2, align 8
  %130 = zext i32 %126 to i64
  %131 = getelementptr inbounds i8*, i8** %129, i64 %130
  %132 = load i8*, i8** %131, align 8
  %133 = load i8**, i8*** %117, align 8
  %134 = getelementptr inbounds i8*, i8** %133, i64 %130
  %135 = load i8*, i8** %134, align 8
  %136 = load i8**, i8*** %118, align 8
  %137 = getelementptr inbounds i8*, i8** %136, i64 %130
  %138 = load i8*, i8** %137, align 8
  %139 = add i32 %126, 1
  br i1 %119, label %121, label %140

140:                                              ; preds = %123
  %141 = load i8*, i8** %125, align 8
  br label %142

142:                                              ; preds = %142, %140
  %143 = phi i64 [ 0, %140 ], [ %204, %142 ]
  %144 = phi i8* [ %141, %140 ], [ %153, %142 ]
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = getelementptr inbounds i8, i8* %144, i64 1
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = getelementptr inbounds i8, i8* %144, i64 2
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = getelementptr inbounds i8, i8* %144, i64 4
  %154 = zext i8 %145 to i64
  %155 = getelementptr inbounds i64, i64* %112, i64 %154
  %156 = load i64, i64* %155, align 8
  %157 = or i32 %149, 256
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds i64, i64* %112, i64 %158
  %160 = load i64, i64* %159, align 8
  %161 = add nsw i64 %160, %156
  %162 = or i32 %152, 512
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds i64, i64* %112, i64 %163
  %165 = load i64, i64* %164, align 8
  %166 = add nsw i64 %161, %165
  %167 = lshr i64 %166, 16
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds i8, i8* %132, i64 %143
  store i8 %168, i8* %169, align 1
  %170 = or i32 %146, 768
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds i64, i64* %112, i64 %171
  %173 = load i64, i64* %172, align 8
  %174 = or i32 %149, 1024
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds i64, i64* %112, i64 %175
  %177 = load i64, i64* %176, align 8
  %178 = add nsw i64 %177, %173
  %179 = or i32 %152, 1280
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds i64, i64* %112, i64 %180
  %182 = load i64, i64* %181, align 8
  %183 = add nsw i64 %178, %182
  %184 = lshr i64 %183, 16
  %185 = trunc i64 %184 to i8
  %186 = getelementptr inbounds i8, i8* %135, i64 %143
  store i8 %185, i8* %186, align 1
  %187 = or i32 %146, 1280
  %188 = zext i32 %187 to i64
  %189 = getelementptr inbounds i64, i64* %112, i64 %188
  %190 = load i64, i64* %189, align 8
  %191 = or i32 %149, 1536
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds i64, i64* %112, i64 %192
  %194 = load i64, i64* %193, align 8
  %195 = add nsw i64 %194, %190
  %196 = or i32 %152, 1792
  %197 = zext i32 %196 to i64
  %198 = getelementptr inbounds i64, i64* %112, i64 %197
  %199 = load i64, i64* %198, align 8
  %200 = add nsw i64 %195, %199
  %201 = lshr i64 %200, 16
  %202 = trunc i64 %201 to i8
  %203 = getelementptr inbounds i8, i8* %138, i64 %143
  store i8 %202, i8* %203, align 1
  %204 = add nuw nsw i64 %143, 1
  %205 = icmp eq i64 %204, %120
  br i1 %205, label %121, label %142

206:                                              ; preds = %5
  %207 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %208 = bitcast %struct.jpeg_color_converter** %207 to %struct.my_color_converter**
  %209 = load %struct.my_color_converter*, %struct.my_color_converter** %208, align 8
  %210 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %209, i64 0, i32 1
  %211 = load i64*, i64** %210, align 8
  %212 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %213 = load i32, i32* %212, align 8
  %214 = icmp sgt i32 %4, 0
  br i1 %214, label %215, label %703

215:                                              ; preds = %206
  %216 = getelementptr inbounds i8**, i8*** %2, i64 1
  %217 = getelementptr inbounds i8**, i8*** %2, i64 2
  %218 = icmp eq i32 %213, 0
  %219 = zext i32 %213 to i64
  br label %222

220:                                              ; preds = %241, %222
  %221 = icmp sgt i32 %226, 0
  br i1 %221, label %222, label %703

222:                                              ; preds = %220, %215
  %223 = phi i32 [ %4, %215 ], [ %226, %220 ]
  %224 = phi i8** [ %1, %215 ], [ %227, %220 ]
  %225 = phi i32 [ %3, %215 ], [ %238, %220 ]
  %226 = add nsw i32 %223, -1
  %227 = getelementptr inbounds i8*, i8** %224, i64 1
  %228 = load i8**, i8*** %2, align 8
  %229 = zext i32 %225 to i64
  %230 = getelementptr inbounds i8*, i8** %228, i64 %229
  %231 = load i8*, i8** %230, align 8
  %232 = load i8**, i8*** %216, align 8
  %233 = getelementptr inbounds i8*, i8** %232, i64 %229
  %234 = load i8*, i8** %233, align 8
  %235 = load i8**, i8*** %217, align 8
  %236 = getelementptr inbounds i8*, i8** %235, i64 %229
  %237 = load i8*, i8** %236, align 8
  %238 = add i32 %225, 1
  br i1 %218, label %220, label %239

239:                                              ; preds = %222
  %240 = load i8*, i8** %224, align 8
  br label %241

241:                                              ; preds = %241, %239
  %242 = phi i64 [ 0, %239 ], [ %303, %241 ]
  %243 = phi i8* [ %240, %239 ], [ %252, %241 ]
  %244 = getelementptr inbounds i8, i8* %243, i64 2
  %245 = load i8, i8* %244, align 1
  %246 = zext i8 %245 to i32
  %247 = getelementptr inbounds i8, i8* %243, i64 1
  %248 = load i8, i8* %247, align 1
  %249 = zext i8 %248 to i32
  %250 = load i8, i8* %243, align 1
  %251 = zext i8 %250 to i32
  %252 = getelementptr inbounds i8, i8* %243, i64 3
  %253 = zext i8 %245 to i64
  %254 = getelementptr inbounds i64, i64* %211, i64 %253
  %255 = load i64, i64* %254, align 8
  %256 = or i32 %249, 256
  %257 = zext i32 %256 to i64
  %258 = getelementptr inbounds i64, i64* %211, i64 %257
  %259 = load i64, i64* %258, align 8
  %260 = add nsw i64 %259, %255
  %261 = or i32 %251, 512
  %262 = zext i32 %261 to i64
  %263 = getelementptr inbounds i64, i64* %211, i64 %262
  %264 = load i64, i64* %263, align 8
  %265 = add nsw i64 %260, %264
  %266 = lshr i64 %265, 16
  %267 = trunc i64 %266 to i8
  %268 = getelementptr inbounds i8, i8* %231, i64 %242
  store i8 %267, i8* %268, align 1
  %269 = or i32 %246, 768
  %270 = zext i32 %269 to i64
  %271 = getelementptr inbounds i64, i64* %211, i64 %270
  %272 = load i64, i64* %271, align 8
  %273 = or i32 %249, 1024
  %274 = zext i32 %273 to i64
  %275 = getelementptr inbounds i64, i64* %211, i64 %274
  %276 = load i64, i64* %275, align 8
  %277 = add nsw i64 %276, %272
  %278 = or i32 %251, 1280
  %279 = zext i32 %278 to i64
  %280 = getelementptr inbounds i64, i64* %211, i64 %279
  %281 = load i64, i64* %280, align 8
  %282 = add nsw i64 %277, %281
  %283 = lshr i64 %282, 16
  %284 = trunc i64 %283 to i8
  %285 = getelementptr inbounds i8, i8* %234, i64 %242
  store i8 %284, i8* %285, align 1
  %286 = or i32 %246, 1280
  %287 = zext i32 %286 to i64
  %288 = getelementptr inbounds i64, i64* %211, i64 %287
  %289 = load i64, i64* %288, align 8
  %290 = or i32 %249, 1536
  %291 = zext i32 %290 to i64
  %292 = getelementptr inbounds i64, i64* %211, i64 %291
  %293 = load i64, i64* %292, align 8
  %294 = add nsw i64 %293, %289
  %295 = or i32 %251, 1792
  %296 = zext i32 %295 to i64
  %297 = getelementptr inbounds i64, i64* %211, i64 %296
  %298 = load i64, i64* %297, align 8
  %299 = add nsw i64 %294, %298
  %300 = lshr i64 %299, 16
  %301 = trunc i64 %300 to i8
  %302 = getelementptr inbounds i8, i8* %237, i64 %242
  store i8 %301, i8* %302, align 1
  %303 = add nuw nsw i64 %242, 1
  %304 = icmp eq i64 %303, %219
  br i1 %304, label %220, label %241

305:                                              ; preds = %5, %5
  %306 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %307 = bitcast %struct.jpeg_color_converter** %306 to %struct.my_color_converter**
  %308 = load %struct.my_color_converter*, %struct.my_color_converter** %307, align 8
  %309 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %308, i64 0, i32 1
  %310 = load i64*, i64** %309, align 8
  %311 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %312 = load i32, i32* %311, align 8
  %313 = icmp sgt i32 %4, 0
  br i1 %313, label %314, label %703

314:                                              ; preds = %305
  %315 = getelementptr inbounds i8**, i8*** %2, i64 1
  %316 = getelementptr inbounds i8**, i8*** %2, i64 2
  %317 = icmp eq i32 %312, 0
  %318 = zext i32 %312 to i64
  br label %321

319:                                              ; preds = %340, %321
  %320 = icmp sgt i32 %325, 0
  br i1 %320, label %321, label %703

321:                                              ; preds = %319, %314
  %322 = phi i32 [ %4, %314 ], [ %325, %319 ]
  %323 = phi i8** [ %1, %314 ], [ %326, %319 ]
  %324 = phi i32 [ %3, %314 ], [ %337, %319 ]
  %325 = add nsw i32 %322, -1
  %326 = getelementptr inbounds i8*, i8** %323, i64 1
  %327 = load i8**, i8*** %2, align 8
  %328 = zext i32 %324 to i64
  %329 = getelementptr inbounds i8*, i8** %327, i64 %328
  %330 = load i8*, i8** %329, align 8
  %331 = load i8**, i8*** %315, align 8
  %332 = getelementptr inbounds i8*, i8** %331, i64 %328
  %333 = load i8*, i8** %332, align 8
  %334 = load i8**, i8*** %316, align 8
  %335 = getelementptr inbounds i8*, i8** %334, i64 %328
  %336 = load i8*, i8** %335, align 8
  %337 = add i32 %324, 1
  br i1 %317, label %319, label %338

338:                                              ; preds = %321
  %339 = load i8*, i8** %323, align 8
  br label %340

340:                                              ; preds = %340, %338
  %341 = phi i64 [ 0, %338 ], [ %402, %340 ]
  %342 = phi i8* [ %339, %338 ], [ %351, %340 ]
  %343 = getelementptr inbounds i8, i8* %342, i64 2
  %344 = load i8, i8* %343, align 1
  %345 = zext i8 %344 to i32
  %346 = getelementptr inbounds i8, i8* %342, i64 1
  %347 = load i8, i8* %346, align 1
  %348 = zext i8 %347 to i32
  %349 = load i8, i8* %342, align 1
  %350 = zext i8 %349 to i32
  %351 = getelementptr inbounds i8, i8* %342, i64 4
  %352 = zext i8 %344 to i64
  %353 = getelementptr inbounds i64, i64* %310, i64 %352
  %354 = load i64, i64* %353, align 8
  %355 = or i32 %348, 256
  %356 = zext i32 %355 to i64
  %357 = getelementptr inbounds i64, i64* %310, i64 %356
  %358 = load i64, i64* %357, align 8
  %359 = add nsw i64 %358, %354
  %360 = or i32 %350, 512
  %361 = zext i32 %360 to i64
  %362 = getelementptr inbounds i64, i64* %310, i64 %361
  %363 = load i64, i64* %362, align 8
  %364 = add nsw i64 %359, %363
  %365 = lshr i64 %364, 16
  %366 = trunc i64 %365 to i8
  %367 = getelementptr inbounds i8, i8* %330, i64 %341
  store i8 %366, i8* %367, align 1
  %368 = or i32 %345, 768
  %369 = zext i32 %368 to i64
  %370 = getelementptr inbounds i64, i64* %310, i64 %369
  %371 = load i64, i64* %370, align 8
  %372 = or i32 %348, 1024
  %373 = zext i32 %372 to i64
  %374 = getelementptr inbounds i64, i64* %310, i64 %373
  %375 = load i64, i64* %374, align 8
  %376 = add nsw i64 %375, %371
  %377 = or i32 %350, 1280
  %378 = zext i32 %377 to i64
  %379 = getelementptr inbounds i64, i64* %310, i64 %378
  %380 = load i64, i64* %379, align 8
  %381 = add nsw i64 %376, %380
  %382 = lshr i64 %381, 16
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds i8, i8* %333, i64 %341
  store i8 %383, i8* %384, align 1
  %385 = or i32 %345, 1280
  %386 = zext i32 %385 to i64
  %387 = getelementptr inbounds i64, i64* %310, i64 %386
  %388 = load i64, i64* %387, align 8
  %389 = or i32 %348, 1536
  %390 = zext i32 %389 to i64
  %391 = getelementptr inbounds i64, i64* %310, i64 %390
  %392 = load i64, i64* %391, align 8
  %393 = add nsw i64 %392, %388
  %394 = or i32 %350, 1792
  %395 = zext i32 %394 to i64
  %396 = getelementptr inbounds i64, i64* %310, i64 %395
  %397 = load i64, i64* %396, align 8
  %398 = add nsw i64 %393, %397
  %399 = lshr i64 %398, 16
  %400 = trunc i64 %399 to i8
  %401 = getelementptr inbounds i8, i8* %336, i64 %341
  store i8 %400, i8* %401, align 1
  %402 = add nuw nsw i64 %341, 1
  %403 = icmp eq i64 %402, %318
  br i1 %403, label %319, label %340

404:                                              ; preds = %5, %5
  %405 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %406 = bitcast %struct.jpeg_color_converter** %405 to %struct.my_color_converter**
  %407 = load %struct.my_color_converter*, %struct.my_color_converter** %406, align 8
  %408 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %407, i64 0, i32 1
  %409 = load i64*, i64** %408, align 8
  %410 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %411 = load i32, i32* %410, align 8
  %412 = icmp sgt i32 %4, 0
  br i1 %412, label %413, label %703

413:                                              ; preds = %404
  %414 = getelementptr inbounds i8**, i8*** %2, i64 1
  %415 = getelementptr inbounds i8**, i8*** %2, i64 2
  %416 = icmp eq i32 %411, 0
  %417 = zext i32 %411 to i64
  br label %420

418:                                              ; preds = %439, %420
  %419 = icmp sgt i32 %424, 0
  br i1 %419, label %420, label %703

420:                                              ; preds = %418, %413
  %421 = phi i32 [ %4, %413 ], [ %424, %418 ]
  %422 = phi i8** [ %1, %413 ], [ %425, %418 ]
  %423 = phi i32 [ %3, %413 ], [ %436, %418 ]
  %424 = add nsw i32 %421, -1
  %425 = getelementptr inbounds i8*, i8** %422, i64 1
  %426 = load i8**, i8*** %2, align 8
  %427 = zext i32 %423 to i64
  %428 = getelementptr inbounds i8*, i8** %426, i64 %427
  %429 = load i8*, i8** %428, align 8
  %430 = load i8**, i8*** %414, align 8
  %431 = getelementptr inbounds i8*, i8** %430, i64 %427
  %432 = load i8*, i8** %431, align 8
  %433 = load i8**, i8*** %415, align 8
  %434 = getelementptr inbounds i8*, i8** %433, i64 %427
  %435 = load i8*, i8** %434, align 8
  %436 = add i32 %423, 1
  br i1 %416, label %418, label %437

437:                                              ; preds = %420
  %438 = load i8*, i8** %422, align 8
  br label %439

439:                                              ; preds = %439, %437
  %440 = phi i64 [ 0, %437 ], [ %502, %439 ]
  %441 = phi i8* [ %438, %437 ], [ %451, %439 ]
  %442 = getelementptr inbounds i8, i8* %441, i64 3
  %443 = load i8, i8* %442, align 1
  %444 = zext i8 %443 to i32
  %445 = getelementptr inbounds i8, i8* %441, i64 2
  %446 = load i8, i8* %445, align 1
  %447 = zext i8 %446 to i32
  %448 = getelementptr inbounds i8, i8* %441, i64 1
  %449 = load i8, i8* %448, align 1
  %450 = zext i8 %449 to i32
  %451 = getelementptr inbounds i8, i8* %441, i64 4
  %452 = zext i8 %443 to i64
  %453 = getelementptr inbounds i64, i64* %409, i64 %452
  %454 = load i64, i64* %453, align 8
  %455 = or i32 %447, 256
  %456 = zext i32 %455 to i64
  %457 = getelementptr inbounds i64, i64* %409, i64 %456
  %458 = load i64, i64* %457, align 8
  %459 = add nsw i64 %458, %454
  %460 = or i32 %450, 512
  %461 = zext i32 %460 to i64
  %462 = getelementptr inbounds i64, i64* %409, i64 %461
  %463 = load i64, i64* %462, align 8
  %464 = add nsw i64 %459, %463
  %465 = lshr i64 %464, 16
  %466 = trunc i64 %465 to i8
  %467 = getelementptr inbounds i8, i8* %429, i64 %440
  store i8 %466, i8* %467, align 1
  %468 = or i32 %444, 768
  %469 = zext i32 %468 to i64
  %470 = getelementptr inbounds i64, i64* %409, i64 %469
  %471 = load i64, i64* %470, align 8
  %472 = or i32 %447, 1024
  %473 = zext i32 %472 to i64
  %474 = getelementptr inbounds i64, i64* %409, i64 %473
  %475 = load i64, i64* %474, align 8
  %476 = add nsw i64 %475, %471
  %477 = or i32 %450, 1280
  %478 = zext i32 %477 to i64
  %479 = getelementptr inbounds i64, i64* %409, i64 %478
  %480 = load i64, i64* %479, align 8
  %481 = add nsw i64 %476, %480
  %482 = lshr i64 %481, 16
  %483 = trunc i64 %482 to i8
  %484 = getelementptr inbounds i8, i8* %432, i64 %440
  store i8 %483, i8* %484, align 1
  %485 = or i32 %444, 1280
  %486 = zext i32 %485 to i64
  %487 = getelementptr inbounds i64, i64* %409, i64 %486
  %488 = load i64, i64* %487, align 8
  %489 = or i32 %447, 1536
  %490 = zext i32 %489 to i64
  %491 = getelementptr inbounds i64, i64* %409, i64 %490
  %492 = load i64, i64* %491, align 8
  %493 = add nsw i64 %492, %488
  %494 = or i32 %450, 1792
  %495 = zext i32 %494 to i64
  %496 = getelementptr inbounds i64, i64* %409, i64 %495
  %497 = load i64, i64* %496, align 8
  %498 = add nsw i64 %493, %497
  %499 = lshr i64 %498, 16
  %500 = trunc i64 %499 to i8
  %501 = getelementptr inbounds i8, i8* %435, i64 %440
  store i8 %500, i8* %501, align 1
  %502 = add nuw nsw i64 %440, 1
  %503 = icmp eq i64 %502, %417
  br i1 %503, label %418, label %439

504:                                              ; preds = %5, %5
  %505 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %506 = bitcast %struct.jpeg_color_converter** %505 to %struct.my_color_converter**
  %507 = load %struct.my_color_converter*, %struct.my_color_converter** %506, align 8
  %508 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %507, i64 0, i32 1
  %509 = load i64*, i64** %508, align 8
  %510 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %511 = load i32, i32* %510, align 8
  %512 = icmp sgt i32 %4, 0
  br i1 %512, label %513, label %703

513:                                              ; preds = %504
  %514 = getelementptr inbounds i8**, i8*** %2, i64 1
  %515 = getelementptr inbounds i8**, i8*** %2, i64 2
  %516 = icmp eq i32 %511, 0
  %517 = zext i32 %511 to i64
  br label %520

518:                                              ; preds = %539, %520
  %519 = icmp sgt i32 %524, 0
  br i1 %519, label %520, label %703

520:                                              ; preds = %518, %513
  %521 = phi i32 [ %4, %513 ], [ %524, %518 ]
  %522 = phi i8** [ %1, %513 ], [ %525, %518 ]
  %523 = phi i32 [ %3, %513 ], [ %536, %518 ]
  %524 = add nsw i32 %521, -1
  %525 = getelementptr inbounds i8*, i8** %522, i64 1
  %526 = load i8**, i8*** %2, align 8
  %527 = zext i32 %523 to i64
  %528 = getelementptr inbounds i8*, i8** %526, i64 %527
  %529 = load i8*, i8** %528, align 8
  %530 = load i8**, i8*** %514, align 8
  %531 = getelementptr inbounds i8*, i8** %530, i64 %527
  %532 = load i8*, i8** %531, align 8
  %533 = load i8**, i8*** %515, align 8
  %534 = getelementptr inbounds i8*, i8** %533, i64 %527
  %535 = load i8*, i8** %534, align 8
  %536 = add i32 %523, 1
  br i1 %516, label %518, label %537

537:                                              ; preds = %520
  %538 = load i8*, i8** %522, align 8
  br label %539

539:                                              ; preds = %539, %537
  %540 = phi i64 [ 0, %537 ], [ %602, %539 ]
  %541 = phi i8* [ %538, %537 ], [ %551, %539 ]
  %542 = getelementptr inbounds i8, i8* %541, i64 1
  %543 = load i8, i8* %542, align 1
  %544 = zext i8 %543 to i32
  %545 = getelementptr inbounds i8, i8* %541, i64 2
  %546 = load i8, i8* %545, align 1
  %547 = zext i8 %546 to i32
  %548 = getelementptr inbounds i8, i8* %541, i64 3
  %549 = load i8, i8* %548, align 1
  %550 = zext i8 %549 to i32
  %551 = getelementptr inbounds i8, i8* %541, i64 4
  %552 = zext i8 %543 to i64
  %553 = getelementptr inbounds i64, i64* %509, i64 %552
  %554 = load i64, i64* %553, align 8
  %555 = or i32 %547, 256
  %556 = zext i32 %555 to i64
  %557 = getelementptr inbounds i64, i64* %509, i64 %556
  %558 = load i64, i64* %557, align 8
  %559 = add nsw i64 %558, %554
  %560 = or i32 %550, 512
  %561 = zext i32 %560 to i64
  %562 = getelementptr inbounds i64, i64* %509, i64 %561
  %563 = load i64, i64* %562, align 8
  %564 = add nsw i64 %559, %563
  %565 = lshr i64 %564, 16
  %566 = trunc i64 %565 to i8
  %567 = getelementptr inbounds i8, i8* %529, i64 %540
  store i8 %566, i8* %567, align 1
  %568 = or i32 %544, 768
  %569 = zext i32 %568 to i64
  %570 = getelementptr inbounds i64, i64* %509, i64 %569
  %571 = load i64, i64* %570, align 8
  %572 = or i32 %547, 1024
  %573 = zext i32 %572 to i64
  %574 = getelementptr inbounds i64, i64* %509, i64 %573
  %575 = load i64, i64* %574, align 8
  %576 = add nsw i64 %575, %571
  %577 = or i32 %550, 1280
  %578 = zext i32 %577 to i64
  %579 = getelementptr inbounds i64, i64* %509, i64 %578
  %580 = load i64, i64* %579, align 8
  %581 = add nsw i64 %576, %580
  %582 = lshr i64 %581, 16
  %583 = trunc i64 %582 to i8
  %584 = getelementptr inbounds i8, i8* %532, i64 %540
  store i8 %583, i8* %584, align 1
  %585 = or i32 %544, 1280
  %586 = zext i32 %585 to i64
  %587 = getelementptr inbounds i64, i64* %509, i64 %586
  %588 = load i64, i64* %587, align 8
  %589 = or i32 %547, 1536
  %590 = zext i32 %589 to i64
  %591 = getelementptr inbounds i64, i64* %509, i64 %590
  %592 = load i64, i64* %591, align 8
  %593 = add nsw i64 %592, %588
  %594 = or i32 %550, 1792
  %595 = zext i32 %594 to i64
  %596 = getelementptr inbounds i64, i64* %509, i64 %595
  %597 = load i64, i64* %596, align 8
  %598 = add nsw i64 %593, %597
  %599 = lshr i64 %598, 16
  %600 = trunc i64 %599 to i8
  %601 = getelementptr inbounds i8, i8* %535, i64 %540
  store i8 %600, i8* %601, align 1
  %602 = add nuw nsw i64 %540, 1
  %603 = icmp eq i64 %602, %517
  br i1 %603, label %518, label %539

604:                                              ; preds = %5
  %605 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %606 = bitcast %struct.jpeg_color_converter** %605 to %struct.my_color_converter**
  %607 = load %struct.my_color_converter*, %struct.my_color_converter** %606, align 8
  %608 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %607, i64 0, i32 1
  %609 = load i64*, i64** %608, align 8
  %610 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %611 = load i32, i32* %610, align 8
  %612 = icmp sgt i32 %4, 0
  br i1 %612, label %613, label %703

613:                                              ; preds = %604
  %614 = getelementptr inbounds i8**, i8*** %2, i64 1
  %615 = getelementptr inbounds i8**, i8*** %2, i64 2
  %616 = icmp eq i32 %611, 0
  %617 = zext i32 %611 to i64
  br label %620

618:                                              ; preds = %639, %620
  %619 = icmp sgt i32 %624, 0
  br i1 %619, label %620, label %703

620:                                              ; preds = %618, %613
  %621 = phi i32 [ %4, %613 ], [ %624, %618 ]
  %622 = phi i8** [ %1, %613 ], [ %625, %618 ]
  %623 = phi i32 [ %3, %613 ], [ %636, %618 ]
  %624 = add nsw i32 %621, -1
  %625 = getelementptr inbounds i8*, i8** %622, i64 1
  %626 = load i8**, i8*** %2, align 8
  %627 = zext i32 %623 to i64
  %628 = getelementptr inbounds i8*, i8** %626, i64 %627
  %629 = load i8*, i8** %628, align 8
  %630 = load i8**, i8*** %614, align 8
  %631 = getelementptr inbounds i8*, i8** %630, i64 %627
  %632 = load i8*, i8** %631, align 8
  %633 = load i8**, i8*** %615, align 8
  %634 = getelementptr inbounds i8*, i8** %633, i64 %627
  %635 = load i8*, i8** %634, align 8
  %636 = add i32 %623, 1
  br i1 %616, label %618, label %637

637:                                              ; preds = %620
  %638 = load i8*, i8** %622, align 8
  br label %639

639:                                              ; preds = %639, %637
  %640 = phi i64 [ 0, %637 ], [ %701, %639 ]
  %641 = phi i8* [ %638, %637 ], [ %650, %639 ]
  %642 = load i8, i8* %641, align 1
  %643 = zext i8 %642 to i32
  %644 = getelementptr inbounds i8, i8* %641, i64 1
  %645 = load i8, i8* %644, align 1
  %646 = zext i8 %645 to i32
  %647 = getelementptr inbounds i8, i8* %641, i64 2
  %648 = load i8, i8* %647, align 1
  %649 = zext i8 %648 to i32
  %650 = getelementptr inbounds i8, i8* %641, i64 3
  %651 = zext i8 %642 to i64
  %652 = getelementptr inbounds i64, i64* %609, i64 %651
  %653 = load i64, i64* %652, align 8
  %654 = or i32 %646, 256
  %655 = zext i32 %654 to i64
  %656 = getelementptr inbounds i64, i64* %609, i64 %655
  %657 = load i64, i64* %656, align 8
  %658 = add nsw i64 %657, %653
  %659 = or i32 %649, 512
  %660 = zext i32 %659 to i64
  %661 = getelementptr inbounds i64, i64* %609, i64 %660
  %662 = load i64, i64* %661, align 8
  %663 = add nsw i64 %658, %662
  %664 = lshr i64 %663, 16
  %665 = trunc i64 %664 to i8
  %666 = getelementptr inbounds i8, i8* %629, i64 %640
  store i8 %665, i8* %666, align 1
  %667 = or i32 %643, 768
  %668 = zext i32 %667 to i64
  %669 = getelementptr inbounds i64, i64* %609, i64 %668
  %670 = load i64, i64* %669, align 8
  %671 = or i32 %646, 1024
  %672 = zext i32 %671 to i64
  %673 = getelementptr inbounds i64, i64* %609, i64 %672
  %674 = load i64, i64* %673, align 8
  %675 = add nsw i64 %674, %670
  %676 = or i32 %649, 1280
  %677 = zext i32 %676 to i64
  %678 = getelementptr inbounds i64, i64* %609, i64 %677
  %679 = load i64, i64* %678, align 8
  %680 = add nsw i64 %675, %679
  %681 = lshr i64 %680, 16
  %682 = trunc i64 %681 to i8
  %683 = getelementptr inbounds i8, i8* %632, i64 %640
  store i8 %682, i8* %683, align 1
  %684 = or i32 %643, 1280
  %685 = zext i32 %684 to i64
  %686 = getelementptr inbounds i64, i64* %609, i64 %685
  %687 = load i64, i64* %686, align 8
  %688 = or i32 %646, 1536
  %689 = zext i32 %688 to i64
  %690 = getelementptr inbounds i64, i64* %609, i64 %689
  %691 = load i64, i64* %690, align 8
  %692 = add nsw i64 %691, %687
  %693 = or i32 %649, 1792
  %694 = zext i32 %693 to i64
  %695 = getelementptr inbounds i64, i64* %609, i64 %694
  %696 = load i64, i64* %695, align 8
  %697 = add nsw i64 %692, %696
  %698 = lshr i64 %697, 16
  %699 = trunc i64 %698 to i8
  %700 = getelementptr inbounds i8, i8* %635, i64 %640
  store i8 %699, i8* %700, align 1
  %701 = add nuw nsw i64 %640, 1
  %702 = icmp eq i64 %701, %617
  br i1 %702, label %618, label %639

703:                                              ; preds = %518, %418, %319, %220, %121, %22, %618, %604, %504, %404, %305, %206, %107, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @cmyk_ycck_convert(%struct.jpeg_compress_struct* nocapture readonly, i8** nocapture readonly, i8*** nocapture readonly, i32, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %7 = bitcast %struct.jpeg_color_converter** %6 to %struct.my_color_converter**
  %8 = load %struct.my_color_converter*, %struct.my_color_converter** %7, align 8
  %9 = getelementptr inbounds %struct.my_color_converter, %struct.my_color_converter* %8, i64 0, i32 1
  %10 = load i64*, i64** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %12 = load i32, i32* %11, align 8
  %13 = icmp sgt i32 %4, 0
  br i1 %13, label %14, label %114

14:                                               ; preds = %5
  %15 = getelementptr inbounds i8**, i8*** %2, i64 1
  %16 = getelementptr inbounds i8**, i8*** %2, i64 2
  %17 = getelementptr inbounds i8**, i8*** %2, i64 3
  %18 = icmp eq i32 %12, 0
  %19 = zext i32 %12 to i64
  br label %22

20:                                               ; preds = %44, %22
  %21 = icmp sgt i32 %26, 0
  br i1 %21, label %22, label %114

22:                                               ; preds = %14, %20
  %23 = phi i32 [ %4, %14 ], [ %26, %20 ]
  %24 = phi i8** [ %1, %14 ], [ %27, %20 ]
  %25 = phi i32 [ %3, %14 ], [ %41, %20 ]
  %26 = add nsw i32 %23, -1
  %27 = getelementptr inbounds i8*, i8** %24, i64 1
  %28 = load i8**, i8*** %2, align 8
  %29 = zext i32 %25 to i64
  %30 = getelementptr inbounds i8*, i8** %28, i64 %29
  %31 = load i8*, i8** %30, align 8
  %32 = load i8**, i8*** %15, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 %29
  %34 = load i8*, i8** %33, align 8
  %35 = load i8**, i8*** %16, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 %29
  %37 = load i8*, i8** %36, align 8
  %38 = load i8**, i8*** %17, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 %29
  %40 = load i8*, i8** %39, align 8
  %41 = add i32 %25, 1
  br i1 %18, label %20, label %42

42:                                               ; preds = %22
  %43 = load i8*, i8** %24, align 8
  br label %44

44:                                               ; preds = %44, %42
  %45 = phi i64 [ 0, %42 ], [ %112, %44 ]
  %46 = phi i8* [ %43, %42 ], [ %61, %44 ]
  %47 = load i8, i8* %46, align 1
  %48 = xor i8 %47, -1
  %49 = zext i8 %48 to i32
  %50 = getelementptr inbounds i8, i8* %46, i64 1
  %51 = load i8, i8* %50, align 1
  %52 = xor i8 %51, -1
  %53 = zext i8 %52 to i32
  %54 = getelementptr inbounds i8, i8* %46, i64 2
  %55 = load i8, i8* %54, align 1
  %56 = xor i8 %55, -1
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds i8, i8* %46, i64 3
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds i8, i8* %40, i64 %45
  store i8 %59, i8* %60, align 1
  %61 = getelementptr inbounds i8, i8* %46, i64 4
  %62 = zext i8 %48 to i64
  %63 = getelementptr inbounds i64, i64* %10, i64 %62
  %64 = load i64, i64* %63, align 8
  %65 = or i32 %53, 256
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds i64, i64* %10, i64 %66
  %68 = load i64, i64* %67, align 8
  %69 = add nsw i64 %68, %64
  %70 = or i32 %57, 512
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds i64, i64* %10, i64 %71
  %73 = load i64, i64* %72, align 8
  %74 = add nsw i64 %69, %73
  %75 = lshr i64 %74, 16
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds i8, i8* %31, i64 %45
  store i8 %76, i8* %77, align 1
  %78 = or i32 %49, 768
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds i64, i64* %10, i64 %79
  %81 = load i64, i64* %80, align 8
  %82 = or i32 %53, 1024
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i64, i64* %10, i64 %83
  %85 = load i64, i64* %84, align 8
  %86 = add nsw i64 %85, %81
  %87 = or i32 %57, 1280
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds i64, i64* %10, i64 %88
  %90 = load i64, i64* %89, align 8
  %91 = add nsw i64 %86, %90
  %92 = lshr i64 %91, 16
  %93 = trunc i64 %92 to i8
  %94 = getelementptr inbounds i8, i8* %34, i64 %45
  store i8 %93, i8* %94, align 1
  %95 = or i32 %49, 1280
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds i64, i64* %10, i64 %96
  %98 = load i64, i64* %97, align 8
  %99 = or i32 %53, 1536
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds i64, i64* %10, i64 %100
  %102 = load i64, i64* %101, align 8
  %103 = add nsw i64 %102, %98
  %104 = or i32 %57, 1792
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds i64, i64* %10, i64 %105
  %107 = load i64, i64* %106, align 8
  %108 = add nsw i64 %103, %107
  %109 = lshr i64 %108, 16
  %110 = trunc i64 %109 to i8
  %111 = getelementptr inbounds i8, i8* %37, i64 %45
  store i8 %110, i8* %111, align 1
  %112 = add nuw nsw i64 %45, 1
  %113 = icmp eq i64 %112, %19
  br i1 %113, label %20, label %44

114:                                              ; preds = %20, %5
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9, !10, !11}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
!11 = distinct !{!11, !7}
!12 = !{!9}
!13 = !{!10, !11}
!14 = !{!10}
!15 = !{!11}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.isvectorized", i32 1}
!18 = distinct !{!18, !17}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23, !24, !25}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !21}
!25 = distinct !{!25, !21}
!26 = !{!23}
!27 = !{!24, !25}
!28 = !{!24}
!29 = !{!25}
!30 = distinct !{!30, !17}
!31 = distinct !{!31, !17}
!32 = !{!33}
!33 = distinct !{!33, !34}
!34 = distinct !{!34, !"LVerDomain"}
!35 = !{!36, !37, !38}
!36 = distinct !{!36, !34}
!37 = distinct !{!37, !34}
!38 = distinct !{!38, !34}
!39 = !{!36}
!40 = !{!37, !38}
!41 = !{!37}
!42 = !{!38}
!43 = distinct !{!43, !17}
!44 = distinct !{!44, !17}
!45 = !{!46}
!46 = distinct !{!46, !47}
!47 = distinct !{!47, !"LVerDomain"}
!48 = !{!49, !50, !51}
!49 = distinct !{!49, !47}
!50 = distinct !{!50, !47}
!51 = distinct !{!51, !47}
!52 = !{!49}
!53 = !{!50, !51}
!54 = !{!50}
!55 = !{!51}
!56 = distinct !{!56, !17}
!57 = distinct !{!57, !17}
