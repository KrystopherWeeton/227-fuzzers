; ModuleID = '../../third_party/crashpad/crashpad/util/numeric/checked_address_range.cc'
source_filename = "../../third_party/crashpad/crashpad/util/numeric/checked_address_range.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.crashpad::internal::CheckedAddressRangeGeneric" = type <{ %union.anon, i8, i8, [6 x i8] }>
%union.anon = type { %"class.crashpad::CheckedRange.0" }
%"class.crashpad::CheckedRange.0" = type { i64, i64 }
%"class.crashpad::CheckedRange" = type { i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.1 }
%union.anon.1 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }

$_ZN8crashpad8internal26CheckedAddressRangeGenericImmEC5Ev = comdat any

$_ZN8crashpad8internal26CheckedAddressRangeGenericImmEC5Ebmm = comdat any

$_ZN8crashpad8internal26CheckedAddressRangeGenericImmE8SetRangeEbmm = comdat any

$_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE4BaseEv = comdat any

$_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE4SizeEv = comdat any

$_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE3EndEv = comdat any

$_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE7IsValidEv = comdat any

$_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE7Is64BitEv = comdat any

$_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE13ContainsValueEm = comdat any

$_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE13ContainsRangeERKS2_ = comdat any

$_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE8AsStringEv = comdat any

@.str = private unnamed_addr constant [19 x i8] c"0x%lx + 0x%lx (%s)\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"64\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"32\00", align 1

@_ZN8crashpad8internal26CheckedAddressRangeGenericImmEC1Ev = weak_odr hidden unnamed_addr alias void (%"class.crashpad::internal::CheckedAddressRangeGeneric"*), void (%"class.crashpad::internal::CheckedAddressRangeGeneric"*)* @_ZN8crashpad8internal26CheckedAddressRangeGenericImmEC2Ev
@_ZN8crashpad8internal26CheckedAddressRangeGenericImmEC1Ebmm = weak_odr hidden unnamed_addr alias void (%"class.crashpad::internal::CheckedAddressRangeGeneric"*, i1, i64, i64), void (%"class.crashpad::internal::CheckedAddressRangeGeneric"*, i1, i64, i64)* @_ZN8crashpad8internal26CheckedAddressRangeGenericImmEC2Ebmm

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN8crashpad8internal26CheckedAddressRangeGenericImmEC2Ev(%"class.crashpad::internal::CheckedAddressRangeGeneric"*) unnamed_addr #0 comdat($_ZN8crashpad8internal26CheckedAddressRangeGenericImmEC5Ev) align 2 {
  %2 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to %"class.crashpad::CheckedRange"*
  %3 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to i32*
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %"class.crashpad::CheckedRange", %"class.crashpad::CheckedRange"* %2, i64 0, i32 1
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 1
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 2
  store i8 1, i8* %6, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN8crashpad8internal26CheckedAddressRangeGenericImmEC2Ebmm(%"class.crashpad::internal::CheckedAddressRangeGeneric"*, i1 zeroext, i64, i64) unnamed_addr #0 comdat($_ZN8crashpad8internal26CheckedAddressRangeGenericImmEC5Ebmm) align 2 {
  %5 = zext i1 %1 to i8
  %6 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 1
  store i8 %5, i8* %6, align 8
  br i1 %1, label %7, label %10

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 0, i32 0, i32 0
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 0, i32 0, i32 1
  store i64 %3, i64* %9, align 8
  br label %19

10:                                               ; preds = %4
  %11 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to %"class.crashpad::CheckedRange"*
  %12 = trunc i64 %2 to i32
  %13 = trunc i64 %3 to i32
  %14 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to i32*
  store i32 %12, i32* %14, align 4
  %15 = getelementptr inbounds %"class.crashpad::CheckedRange", %"class.crashpad::CheckedRange"* %11, i64 0, i32 1
  store i32 %13, i32* %15, align 4
  %16 = or i64 %3, %2
  %17 = icmp ult i64 %16, 4294967296
  %18 = zext i1 %17 to i8
  br label %19

19:                                               ; preds = %7, %10
  %20 = phi i8 [ %18, %10 ], [ 1, %7 ]
  %21 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 2
  store i8 %20, i8* %21, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN8crashpad8internal26CheckedAddressRangeGenericImmE8SetRangeEbmm(%"class.crashpad::internal::CheckedAddressRangeGeneric"*, i1 zeroext, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = zext i1 %1 to i8
  %6 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 1
  store i8 %5, i8* %6, align 8
  br i1 %1, label %7, label %10

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 0, i32 0, i32 0
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 0, i32 0, i32 1
  store i64 %3, i64* %9, align 8
  br label %19

10:                                               ; preds = %4
  %11 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to %"class.crashpad::CheckedRange"*
  %12 = trunc i64 %2 to i32
  %13 = trunc i64 %3 to i32
  %14 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to i32*
  store i32 %12, i32* %14, align 4
  %15 = getelementptr inbounds %"class.crashpad::CheckedRange", %"class.crashpad::CheckedRange"* %11, i64 0, i32 1
  store i32 %13, i32* %15, align 4
  %16 = or i64 %3, %2
  %17 = icmp ult i64 %16, 4294967296
  %18 = zext i1 %17 to i8
  br label %19

19:                                               ; preds = %10, %7
  %20 = phi i8 [ %18, %10 ], [ 1, %7 ]
  %21 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 2
  store i8 %20, i8* %21, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE4BaseEv(%"class.crashpad::internal::CheckedAddressRangeGeneric"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  br label %12

8:                                                ; preds = %1
  %9 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  br label %12

12:                                               ; preds = %8, %5
  %13 = phi i64 [ %7, %5 ], [ %11, %8 ]
  ret i64 %13
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE4SizeEv(%"class.crashpad::internal::CheckedAddressRangeGeneric"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  br label %13

8:                                                ; preds = %1
  %9 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to %"class.crashpad::CheckedRange"*
  %10 = getelementptr inbounds %"class.crashpad::CheckedRange", %"class.crashpad::CheckedRange"* %9, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  br label %13

13:                                               ; preds = %8, %5
  %14 = phi i64 [ %7, %5 ], [ %12, %8 ]
  ret i64 %14
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE3EndEv(%"class.crashpad::internal::CheckedAddressRangeGeneric"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, %7
  br label %19

11:                                               ; preds = %1
  %12 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to %"class.crashpad::CheckedRange"*
  %13 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.crashpad::CheckedRange", %"class.crashpad::CheckedRange"* %12, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = add i32 %16, %14
  %18 = zext i32 %17 to i64
  br label %19

19:                                               ; preds = %11, %5
  %20 = phi i64 [ %10, %5 ], [ %18, %11 ]
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE7IsValidEv(%"class.crashpad::internal::CheckedAddressRangeGeneric"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %26, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 1
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %17, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load i64, i64* %10, align 8
  %14 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %12, i64 %13) #3
  %15 = extractvalue { i64, i1 } %14, 1
  %16 = xor i1 %15, true
  br label %26

17:                                               ; preds = %5
  %18 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to %"class.crashpad::CheckedRange"*
  %19 = getelementptr inbounds %"class.crashpad::CheckedRange", %"class.crashpad::CheckedRange"* %18, i64 0, i32 1
  %20 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = load i32, i32* %19, align 4
  %23 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %21, i32 %22) #3
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = xor i1 %24, true
  br label %26

26:                                               ; preds = %1, %9, %17
  %27 = phi i1 [ false, %1 ], [ %16, %9 ], [ %25, %17 ]
  ret i1 %27
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE7Is64BitEv(%"class.crashpad::internal::CheckedAddressRangeGeneric"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE13ContainsValueEm(%"class.crashpad::internal::CheckedAddressRangeGeneric"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %15, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp ugt i64 %8, %1
  br i1 %9, label %28, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, %8
  %14 = icmp ugt i64 %13, %1
  br label %28

15:                                               ; preds = %2
  %16 = icmp ult i64 %1, 4294967296
  br i1 %16, label %17, label %28

17:                                               ; preds = %15
  %18 = trunc i64 %1 to i32
  %19 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = icmp ugt i32 %20, %18
  br i1 %21, label %28, label %22

22:                                               ; preds = %17
  %23 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to %"class.crashpad::CheckedRange"*
  %24 = getelementptr inbounds %"class.crashpad::CheckedRange", %"class.crashpad::CheckedRange"* %23, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %25, %20
  %27 = icmp ugt i32 %26, %18
  br label %28

28:                                               ; preds = %22, %17, %10, %6, %15
  %29 = phi i1 [ false, %15 ], [ false, %6 ], [ %14, %10 ], [ false, %17 ], [ %27, %22 ]
  ret i1 %29
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE13ContainsRangeERKS2_(%"class.crashpad::internal::CheckedAddressRangeGeneric"*, %"class.crashpad::internal::CheckedAddressRangeGeneric"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %1, i64 0, i32 0, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp ult i64 %8, %10
  br i1 %11, label %36, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %1, i64 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %14, %8
  %16 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0, i64 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, %10
  %19 = icmp ule i64 %15, %18
  br label %36

20:                                               ; preds = %2
  %21 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %1 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = icmp ult i32 %22, %24
  br i1 %25, label %36, label %26

26:                                               ; preds = %20
  %27 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %0 to %"class.crashpad::CheckedRange"*
  %28 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %1 to %"class.crashpad::CheckedRange"*
  %29 = getelementptr inbounds %"class.crashpad::CheckedRange", %"class.crashpad::CheckedRange"* %28, i64 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = add i32 %30, %22
  %32 = getelementptr inbounds %"class.crashpad::CheckedRange", %"class.crashpad::CheckedRange"* %27, i64 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = add i32 %33, %24
  %35 = icmp ule i32 %31, %34
  br label %36

36:                                               ; preds = %26, %20, %12, %6
  %37 = phi i1 [ false, %6 ], [ %19, %12 ], [ false, %20 ], [ %35, %26 ]
  ret i1 %37
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZNK8crashpad8internal26CheckedAddressRangeGenericImmE8AsStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.crashpad::internal::CheckedAddressRangeGeneric"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %1, i64 0, i32 0, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.crashpad::internal::CheckedAddressRangeGeneric", %"class.crashpad::internal::CheckedAddressRangeGeneric"* %1, i64 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  br label %19

11:                                               ; preds = %2
  %12 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %1 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = bitcast %"class.crashpad::internal::CheckedAddressRangeGeneric"* %1 to %"class.crashpad::CheckedRange"*
  %16 = getelementptr inbounds %"class.crashpad::CheckedRange", %"class.crashpad::CheckedRange"* %15, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i64
  br label %19

19:                                               ; preds = %6, %11
  %20 = phi i64 [ %8, %6 ], [ %14, %11 ]
  %21 = phi i64 [ %10, %6 ], [ %18, %11 ]
  %22 = select i1 %5, [3 x i8]* @.str.2, [3 x i8]* @.str.1
  %23 = getelementptr inbounds [3 x i8], [3 x i8]* %22, i64 0, i64 0
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i64 %20, i64 %21, i8* nonnull %23) #3
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
