; ModuleID = '../../third_party/skia/modules/sksg/src/SkSGNode.cpp'
source_filename = "../../third_party/skia/modules/sksg/src/SkSGNode.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sksg::Node" = type <{ %class.SkRefCnt.base, [4 x i8], %union.anon, %struct.SkRect, i16, [6 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%union.anon = type { %"class.sksg::Node"* }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sksg::Node"**, %"class.sksg::Node"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sksg::Node"** }
%class.sk_sp = type { %"class.sksg::Node"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sksg::InvalidationController" = type { %"class.std::__1::vector.3", %struct.SkRect }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { %struct.SkRect*, %struct.SkRect*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %struct.SkRect* }
%class.SkMatrix = type { [9 x float], i32 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

@_ZTVN4sksg4NodeE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::Node"*)* @_ZN4sksg4NodeD2Ev to i8*), i8* bitcast (void (%"class.sksg::Node"*)* @_ZN4sksg4NodeD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN4sksg4NodeD1Ev = hidden unnamed_addr alias void (%"class.sksg::Node"*), void (%"class.sksg::Node"*)* @_ZN4sksg4NodeD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4sksg4NodeC2Ej(%"class.sksg::Node"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4sksg4NodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 2, i32 0
  store %"class.sksg::Node"* null, %"class.sksg::Node"** %5, align 8
  %6 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 3
  %7 = bitcast %struct.SkRect* %6 to <2 x float>*
  store <2 x float> <float 0xC1C0000000000000, float 0xC1C0000000000000>, <2 x float>* %7, align 8
  %8 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 3, i32 2
  %9 = bitcast float* %8 to <2 x float>*
  store <2 x float> <float 0x41C0000000000000, float 0x41C0000000000000>, <2 x float>* %9, align 8
  %10 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 4
  %11 = trunc i32 %1 to i16
  %12 = load i16, i16* %10, align 8
  %13 = and i16 %11, 3
  %14 = and i16 %12, -16384
  %15 = or i16 %13, %14
  %16 = or i16 %15, 4
  store i16 %16, i16* %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4sksg4NodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 4
  %4 = load i16, i16* %3, align 8
  %5 = and i16 %4, 16
  %6 = icmp eq i16 %5, 0
  br i1 %6, label %23, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 2
  %9 = bitcast %union.anon* %8 to %"class.std::__1::vector"**
  %10 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %9, align 8
  %11 = icmp eq %"class.std::__1::vector"* %10, null
  br i1 %11, label %23, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 0
  %14 = load %"class.sksg::Node"**, %"class.sksg::Node"*** %13, align 8
  %15 = icmp eq %"class.sksg::Node"** %14, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %12
  %17 = ptrtoint %"class.sksg::Node"** %14 to i64
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 1
  %19 = bitcast %"class.sksg::Node"*** %18 to i64*
  store i64 %17, i64* %19, align 8
  %20 = bitcast %"class.sksg::Node"** %14 to i8*
  tail call void @_ZdlPv(i8* %20) #10
  br label %21

21:                                               ; preds = %12, %16
  %22 = bitcast %"class.std::__1::vector"* %10 to i8*
  tail call void @_ZdlPv(i8* %22) #10
  br label %23

23:                                               ; preds = %1, %7, %21
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN4sksg4NodeD0Ev(%"class.sksg::Node"* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #11
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg4Node12observeInvalERK5sk_spIS0_E(%"class.sksg::Node"*, %class.sk_sp* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %4 = load %"class.sksg::Node"*, %"class.sksg::Node"** %3, align 8
  %5 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %4, i64 0, i32 4
  %6 = load i16, i16* %5, align 8
  %7 = and i16 %6, 16
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %40

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %4, i64 0, i32 2, i32 0
  %11 = load %"class.sksg::Node"*, %"class.sksg::Node"** %10, align 8
  %12 = icmp eq %"class.sksg::Node"* %11, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %9
  store %"class.sksg::Node"* %0, %"class.sksg::Node"** %10, align 8
  br label %114

14:                                               ; preds = %9
  %15 = tail call i8* @_Znwm(i64 24) #10
  %16 = getelementptr inbounds i8, i8* %15, i64 16
  %17 = bitcast i8* %16 to i64*
  %18 = tail call i8* @_Znwm(i64 16) #10
  %19 = getelementptr inbounds i8, i8* %18, i64 16
  %20 = ptrtoint i8* %19 to i64
  %21 = insertelement <2 x i8*> undef, i8* %18, i32 0
  %22 = shufflevector <2 x i8*> %21, <2 x i8*> undef, <2 x i32> zeroinitializer
  %23 = ptrtoint <2 x i8*> %22 to <2 x i64>
  %24 = bitcast i8* %15 to <2 x i64>*
  store <2 x i64> %23, <2 x i64>* %24, align 8
  store i64 %20, i64* %17, align 8
  %25 = getelementptr inbounds i8, i8* %15, i64 8
  %26 = bitcast %"class.sksg::Node"** %10 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast i8* %18 to i64*
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds i8, i8* %18, i64 8
  %30 = ptrtoint i8* %29 to i64
  %31 = bitcast i8* %25 to i64*
  store i64 %30, i64* %31, align 8
  %32 = load %"class.sksg::Node"*, %"class.sksg::Node"** %3, align 8
  %33 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %32, i64 0, i32 2
  %34 = bitcast %union.anon* %33 to i8**
  store i8* %15, i8** %34, align 8
  %35 = load %"class.sksg::Node"*, %"class.sksg::Node"** %3, align 8
  %36 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %35, i64 0, i32 4
  %37 = load i16, i16* %36, align 8
  %38 = or i16 %37, 16
  store i16 %38, i16* %36, align 8
  %39 = load %"class.sksg::Node"*, %"class.sksg::Node"** %3, align 8
  br label %40

40:                                               ; preds = %2, %14
  %41 = phi %"class.sksg::Node"* [ %4, %2 ], [ %39, %14 ]
  %42 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %41, i64 0, i32 2
  %43 = bitcast %union.anon* %42 to %"class.std::__1::vector"**
  %44 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %43, align 8
  %45 = ptrtoint %"class.sksg::Node"* %0 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %44, i64 0, i32 0, i32 1
  %47 = load %"class.sksg::Node"**, %"class.sksg::Node"*** %46, align 8
  %48 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %44, i64 0, i32 0, i32 2, i32 0, i32 0
  %49 = load %"class.sksg::Node"**, %"class.sksg::Node"*** %48, align 8
  %50 = icmp ult %"class.sksg::Node"** %47, %49
  %51 = ptrtoint %"class.sksg::Node"** %49 to i64
  br i1 %50, label %52, label %57

52:                                               ; preds = %40
  %53 = bitcast %"class.sksg::Node"** %47 to i64*
  store i64 %45, i64* %53, align 8
  %54 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %47, i64 1
  %55 = ptrtoint %"class.sksg::Node"** %54 to i64
  %56 = bitcast %"class.sksg::Node"*** %46 to i64*
  store i64 %55, i64* %56, align 8
  br label %114

57:                                               ; preds = %40
  %58 = ptrtoint %"class.sksg::Node"** %47 to i64
  %59 = bitcast %"class.sksg::Node"*** %46 to i64*
  %60 = bitcast %"class.std::__1::vector"* %44 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %58, %61
  %63 = ashr exact i64 %62, 3
  %64 = add nsw i64 %63, 1
  %65 = icmp ugt i64 %64, 2305843009213693951
  br i1 %65, label %66, label %68

66:                                               ; preds = %57
  %67 = bitcast %"class.std::__1::vector"* %44 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %67) #11
  unreachable

68:                                               ; preds = %57
  %69 = bitcast %"class.sksg::Node"*** %48 to i64*
  %70 = sub i64 %51, %61
  %71 = ashr exact i64 %70, 3
  %72 = icmp ult i64 %71, 1152921504606846975
  br i1 %72, label %73, label %81

73:                                               ; preds = %68
  %74 = ashr exact i64 %70, 2
  %75 = icmp ult i64 %74, %64
  %76 = select i1 %75, i64 %64, i64 %74
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %86, label %78

78:                                               ; preds = %73
  %79 = icmp ugt i64 %76, 2305843009213693951
  br i1 %79, label %80, label %81

80:                                               ; preds = %78
  tail call void @abort() #11
  unreachable

81:                                               ; preds = %78, %68
  %82 = phi i64 [ %76, %78 ], [ 2305843009213693951, %68 ]
  %83 = shl i64 %82, 3
  %84 = tail call i8* @_Znwm(i64 %83) #10
  %85 = bitcast i8* %84 to %"class.sksg::Node"**
  br label %86

86:                                               ; preds = %81, %73
  %87 = phi i64 [ %82, %81 ], [ 0, %73 ]
  %88 = phi %"class.sksg::Node"** [ %85, %81 ], [ null, %73 ]
  %89 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %88, i64 %63
  %90 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %88, i64 %87
  %91 = ptrtoint %"class.sksg::Node"** %90 to i64
  %92 = bitcast %"class.sksg::Node"** %89 to i64*
  store i64 %45, i64* %92, align 8
  %93 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %89, i64 1
  %94 = ptrtoint %"class.sksg::Node"** %93 to i64
  %95 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %44, i64 0, i32 0, i32 0
  %96 = load %"class.sksg::Node"**, %"class.sksg::Node"*** %95, align 8
  %97 = load i64, i64* %59, align 8
  %98 = ptrtoint %"class.sksg::Node"** %96 to i64
  %99 = sub i64 %97, %98
  %100 = ashr exact i64 %99, 3
  %101 = sub nsw i64 0, %100
  %102 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %89, i64 %101
  %103 = ptrtoint %"class.sksg::Node"** %102 to i64
  %104 = icmp sgt i64 %99, 0
  br i1 %104, label %105, label %109

105:                                              ; preds = %86
  %106 = bitcast %"class.sksg::Node"** %102 to i8*
  %107 = bitcast %"class.sksg::Node"** %96 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 %99, i1 false) #12
  %108 = load %"class.sksg::Node"**, %"class.sksg::Node"*** %95, align 8
  br label %109

109:                                              ; preds = %105, %86
  %110 = phi %"class.sksg::Node"** [ %96, %86 ], [ %108, %105 ]
  store i64 %103, i64* %60, align 8
  store i64 %94, i64* %59, align 8
  store i64 %91, i64* %69, align 8
  %111 = icmp eq %"class.sksg::Node"** %110, null
  br i1 %111, label %114, label %112

112:                                              ; preds = %109
  %113 = bitcast %"class.sksg::Node"** %110 to i8*
  tail call void @_ZdlPv(i8* %113) #10
  br label %114

114:                                              ; preds = %112, %109, %52, %13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"*, %class.sk_sp* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %4 = load %"class.sksg::Node"*, %"class.sksg::Node"** %3, align 8
  %5 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %4, i64 0, i32 4
  %6 = load i16, i16* %5, align 8
  %7 = and i16 %6, 16
  %8 = icmp eq i16 %7, 0
  %9 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %4, i64 0, i32 2
  br i1 %8, label %10, label %12

10:                                               ; preds = %2
  %11 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0
  store %"class.sksg::Node"* null, %"class.sksg::Node"** %11, align 8
  br label %105

12:                                               ; preds = %2
  %13 = bitcast %union.anon* %9 to %"class.std::__1::vector"**
  %14 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %14, i64 0, i32 0, i32 0
  %16 = load %"class.sksg::Node"**, %"class.sksg::Node"*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %14, i64 0, i32 0, i32 1
  %18 = load %"class.sksg::Node"**, %"class.sksg::Node"*** %17, align 8
  %19 = icmp eq %"class.sksg::Node"** %16, %18
  br i1 %19, label %27, label %20

20:                                               ; preds = %12, %24
  %21 = phi %"class.sksg::Node"** [ %25, %24 ], [ %16, %12 ]
  %22 = load %"class.sksg::Node"*, %"class.sksg::Node"** %21, align 8
  %23 = icmp eq %"class.sksg::Node"* %22, %0
  br i1 %23, label %27, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %21, i64 1
  %26 = icmp eq %"class.sksg::Node"** %25, %18
  br i1 %26, label %105, label %20

27:                                               ; preds = %20, %12
  %28 = phi %"class.sksg::Node"** [ %16, %12 ], [ %21, %20 ]
  %29 = ptrtoint %"class.sksg::Node"** %28 to i64
  %30 = icmp eq %"class.sksg::Node"** %28, %18
  br i1 %30, label %105, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %28, i64 1
  %33 = icmp eq %"class.sksg::Node"** %32, %18
  br i1 %33, label %89, label %34

34:                                               ; preds = %31
  %35 = getelementptr %"class.sksg::Node"*, %"class.sksg::Node"** %18, i64 -2
  %36 = ptrtoint %"class.sksg::Node"** %35 to i64
  %37 = sub i64 %36, %29
  %38 = lshr i64 %37, 3
  %39 = add nuw nsw i64 %38, 1
  %40 = and i64 %39, 3
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %59, label %42

42:                                               ; preds = %34, %54
  %43 = phi %"class.sksg::Node"** [ %56, %54 ], [ %32, %34 ]
  %44 = phi i64 [ %55, %54 ], [ %29, %34 ]
  %45 = phi i64 [ %57, %54 ], [ %40, %34 ]
  %46 = load %"class.sksg::Node"*, %"class.sksg::Node"** %43, align 8
  %47 = icmp eq %"class.sksg::Node"* %46, %0
  br i1 %47, label %54, label %48

48:                                               ; preds = %42
  %49 = ptrtoint %"class.sksg::Node"* %46 to i64
  %50 = inttoptr i64 %44 to %"class.sksg::Node"**
  %51 = inttoptr i64 %44 to i64*
  store i64 %49, i64* %51, align 8
  %52 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %50, i64 1
  %53 = ptrtoint %"class.sksg::Node"** %52 to i64
  br label %54

54:                                               ; preds = %48, %42
  %55 = phi i64 [ %44, %42 ], [ %53, %48 ]
  %56 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %43, i64 1
  %57 = add i64 %45, -1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %42, !llvm.loop !2

59:                                               ; preds = %54, %34
  %60 = phi i64 [ undef, %34 ], [ %55, %54 ]
  %61 = phi %"class.sksg::Node"** [ %32, %34 ], [ %56, %54 ]
  %62 = phi i64 [ %29, %34 ], [ %55, %54 ]
  %63 = icmp ult i64 %37, 24
  br i1 %63, label %80, label %64

64:                                               ; preds = %59, %134
  %65 = phi %"class.sksg::Node"** [ %136, %134 ], [ %61, %59 ]
  %66 = phi i64 [ %135, %134 ], [ %62, %59 ]
  %67 = load %"class.sksg::Node"*, %"class.sksg::Node"** %65, align 8
  %68 = icmp eq %"class.sksg::Node"* %67, %0
  br i1 %68, label %75, label %69

69:                                               ; preds = %64
  %70 = ptrtoint %"class.sksg::Node"* %67 to i64
  %71 = inttoptr i64 %66 to %"class.sksg::Node"**
  %72 = inttoptr i64 %66 to i64*
  store i64 %70, i64* %72, align 8
  %73 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %71, i64 1
  %74 = ptrtoint %"class.sksg::Node"** %73 to i64
  br label %75

75:                                               ; preds = %69, %64
  %76 = phi i64 [ %66, %64 ], [ %74, %69 ]
  %77 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %65, i64 1
  %78 = load %"class.sksg::Node"*, %"class.sksg::Node"** %77, align 8
  %79 = icmp eq %"class.sksg::Node"* %78, %0
  br i1 %79, label %112, label %106

80:                                               ; preds = %134, %59
  %81 = phi i64 [ %60, %59 ], [ %135, %134 ]
  %82 = inttoptr i64 %81 to %"class.sksg::Node"**
  %83 = load %"class.sksg::Node"*, %"class.sksg::Node"** %3, align 8
  %84 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %83, i64 0, i32 2
  %85 = bitcast %union.anon* %84 to %"class.std::__1::vector"**
  %86 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %85, align 8
  %87 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %86, i64 0, i32 0, i32 1
  %88 = load %"class.sksg::Node"**, %"class.sksg::Node"*** %87, align 8
  br label %89

89:                                               ; preds = %80, %31
  %90 = phi %"class.sksg::Node"** [ %18, %31 ], [ %88, %80 ]
  %91 = phi %"class.sksg::Node"** [ %28, %31 ], [ %82, %80 ]
  %92 = icmp eq %"class.sksg::Node"** %91, %90
  br i1 %92, label %105, label %93

93:                                               ; preds = %89
  %94 = ptrtoint %"class.sksg::Node"** %90 to i64
  %95 = bitcast %"class.sksg::Node"*** %17 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = sub i64 %96, %94
  %98 = ashr exact i64 %97, 3
  %99 = icmp eq i64 %97, 0
  br i1 %99, label %103, label %100

100:                                              ; preds = %93
  %101 = bitcast %"class.sksg::Node"** %91 to i8*
  %102 = bitcast %"class.sksg::Node"** %90 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %101, i8* align 8 %102, i64 %97, i1 false) #12
  br label %103

103:                                              ; preds = %100, %93
  %104 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %91, i64 %98
  store %"class.sksg::Node"** %104, %"class.sksg::Node"*** %17, align 8
  br label %105

105:                                              ; preds = %24, %27, %103, %89, %10
  ret void

106:                                              ; preds = %75
  %107 = ptrtoint %"class.sksg::Node"* %78 to i64
  %108 = inttoptr i64 %76 to %"class.sksg::Node"**
  %109 = inttoptr i64 %76 to i64*
  store i64 %107, i64* %109, align 8
  %110 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %108, i64 1
  %111 = ptrtoint %"class.sksg::Node"** %110 to i64
  br label %112

112:                                              ; preds = %106, %75
  %113 = phi i64 [ %76, %75 ], [ %111, %106 ]
  %114 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %65, i64 2
  %115 = load %"class.sksg::Node"*, %"class.sksg::Node"** %114, align 8
  %116 = icmp eq %"class.sksg::Node"* %115, %0
  br i1 %116, label %123, label %117

117:                                              ; preds = %112
  %118 = ptrtoint %"class.sksg::Node"* %115 to i64
  %119 = inttoptr i64 %113 to %"class.sksg::Node"**
  %120 = inttoptr i64 %113 to i64*
  store i64 %118, i64* %120, align 8
  %121 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %119, i64 1
  %122 = ptrtoint %"class.sksg::Node"** %121 to i64
  br label %123

123:                                              ; preds = %117, %112
  %124 = phi i64 [ %113, %112 ], [ %122, %117 ]
  %125 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %65, i64 3
  %126 = load %"class.sksg::Node"*, %"class.sksg::Node"** %125, align 8
  %127 = icmp eq %"class.sksg::Node"* %126, %0
  br i1 %127, label %134, label %128

128:                                              ; preds = %123
  %129 = ptrtoint %"class.sksg::Node"* %126 to i64
  %130 = inttoptr i64 %124 to %"class.sksg::Node"**
  %131 = inttoptr i64 %124 to i64*
  store i64 %129, i64* %131, align 8
  %132 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %130, i64 1
  %133 = ptrtoint %"class.sksg::Node"** %132 to i64
  br label %134

134:                                              ; preds = %128, %123
  %135 = phi i64 [ %124, %123 ], [ %133, %128 ]
  %136 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %65, i64 4
  %137 = icmp eq %"class.sksg::Node"** %136, %18
  br i1 %137, label %80, label %64
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg4Node10invalidateEb(%"class.sksg::Node"*, i1 zeroext) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 4
  %4 = load i16, i16* %3, align 8
  %5 = and i16 %4, 32
  %6 = icmp eq i16 %5, 0
  %7 = or i16 %4, 32
  store i16 %7, i16* %3, align 8
  br i1 %6, label %8, label %52

8:                                                ; preds = %2
  %9 = and i16 %4, 4
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %8
  %12 = and i16 %4, 8
  %13 = icmp eq i16 %12, 0
  %14 = and i1 %13, %1
  br i1 %14, label %16, label %49

15:                                               ; preds = %8
  br i1 %1, label %16, label %21

16:                                               ; preds = %15, %11
  %17 = and i16 %4, 1
  %18 = icmp eq i16 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %16
  %20 = or i16 %4, 40
  store i16 %20, i16* %3, align 8
  br label %21

21:                                               ; preds = %15, %16, %19
  %22 = phi i16 [ %7, %15 ], [ %20, %19 ], [ %7, %16 ]
  %23 = phi i8 [ 0, %15 ], [ 0, %19 ], [ 1, %16 ]
  %24 = or i16 %22, 4
  store i16 %24, i16* %3, align 8
  %25 = and i16 %22, 16
  %26 = icmp eq i16 %25, 0
  br i1 %26, label %43, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 2
  %29 = bitcast %union.anon* %28 to %"class.std::__1::vector"**
  %30 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %29, align 8
  %31 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %30, i64 0, i32 0, i32 0
  %32 = load %"class.sksg::Node"**, %"class.sksg::Node"*** %31, align 8
  %33 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %30, i64 0, i32 0, i32 1
  %34 = load %"class.sksg::Node"**, %"class.sksg::Node"*** %33, align 8
  %35 = icmp eq %"class.sksg::Node"** %32, %34
  br i1 %35, label %49, label %36

36:                                               ; preds = %27
  %37 = icmp ne i8 %23, 0
  br label %38

38:                                               ; preds = %36, %38
  %39 = phi %"class.sksg::Node"** [ %32, %36 ], [ %41, %38 ]
  %40 = load %"class.sksg::Node"*, %"class.sksg::Node"** %39, align 8
  tail call void @_ZN4sksg4Node10invalidateEb(%"class.sksg::Node"* %40, i1 zeroext %37) #12
  %41 = getelementptr inbounds %"class.sksg::Node"*, %"class.sksg::Node"** %39, i64 1
  %42 = icmp eq %"class.sksg::Node"** %41, %34
  br i1 %42, label %49, label %38

43:                                               ; preds = %21
  %44 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 2, i32 0
  %45 = load %"class.sksg::Node"*, %"class.sksg::Node"** %44, align 8
  %46 = icmp eq %"class.sksg::Node"* %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %43
  %48 = icmp ne i8 %23, 0
  tail call void @_ZN4sksg4Node10invalidateEb(%"class.sksg::Node"* nonnull %45, i1 zeroext %48) #12
  br label %49

49:                                               ; preds = %38, %27, %11, %43, %47
  %50 = load i16, i16* %3, align 8
  %51 = and i16 %50, -33
  store i16 %51, i16* %3, align 8
  br label %52

52:                                               ; preds = %2, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %struct.SkRect* @_ZN4sksg4Node10revalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #1 align 2 {
  %4 = alloca %struct.SkRect, align 4
  %5 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 4
  %6 = load i16, i16* %5, align 8
  %7 = and i16 %6, 32
  %8 = icmp eq i16 %7, 0
  %9 = or i16 %6, 32
  store i16 %9, i16* %5, align 8
  br i1 %8, label %10, label %78

10:                                               ; preds = %3
  %11 = and i16 %6, 4
  %12 = icmp eq i16 %11, 0
  br i1 %12, label %75, label %13

13:                                               ; preds = %10
  %14 = icmp eq %"class.sksg::InvalidationController"* %1, null
  %15 = and i16 %6, 10
  %16 = icmp eq i16 %15, 0
  %17 = or i1 %14, %16
  br i1 %17, label %18, label %30

18:                                               ; preds = %13
  %19 = bitcast %"class.sksg::Node"* %0 to { <2 x float>, <2 x float> } (%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)***
  %20 = load { <2 x float>, <2 x float> } (%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)**, { <2 x float>, <2 x float> } (%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)*** %19, align 8
  %21 = getelementptr inbounds { <2 x float>, <2 x float> } (%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)*, { <2 x float>, <2 x float> } (%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)** %20, i64 3
  %22 = load { <2 x float>, <2 x float> } (%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)*, { <2 x float>, <2 x float> } (%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)** %21, align 8
  %23 = tail call { <2 x float>, <2 x float> } %22(%"class.sksg::Node"* %0, %"class.sksg::InvalidationController"* %1, %class.SkMatrix* dereferenceable(40) %2) #12
  %24 = extractvalue { <2 x float>, <2 x float> } %23, 0
  %25 = extractvalue { <2 x float>, <2 x float> } %23, 1
  %26 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 3
  %27 = bitcast %struct.SkRect* %26 to <2 x float>*
  store <2 x float> %24, <2 x float>* %27, align 8
  %28 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 3, i32 2
  %29 = bitcast float* %28 to <2 x float>*
  store <2 x float> %25, <2 x float>* %29, align 8
  br label %72

30:                                               ; preds = %13
  %31 = and i16 %6, 2
  %32 = bitcast %struct.SkRect* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #12
  %33 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %4, i64 0, i32 0
  %34 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 3
  %35 = bitcast %struct.SkRect* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %32, i8* align 8 %35, i64 16, i1 false)
  %36 = icmp eq i16 %31, 0
  %37 = select i1 %36, %"class.sksg::InvalidationController"* %1, %"class.sksg::InvalidationController"* null
  %38 = bitcast %"class.sksg::Node"* %0 to { <2 x float>, <2 x float> } (%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)***
  %39 = load { <2 x float>, <2 x float> } (%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)**, { <2 x float>, <2 x float> } (%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)*** %38, align 8
  %40 = getelementptr inbounds { <2 x float>, <2 x float> } (%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)*, { <2 x float>, <2 x float> } (%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)** %39, i64 3
  %41 = load { <2 x float>, <2 x float> } (%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)*, { <2 x float>, <2 x float> } (%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)** %40, align 8
  %42 = tail call { <2 x float>, <2 x float> } %41(%"class.sksg::Node"* %0, %"class.sksg::InvalidationController"* %37, %class.SkMatrix* dereferenceable(40) %2) #12
  %43 = extractvalue { <2 x float>, <2 x float> } %42, 0
  %44 = extractvalue { <2 x float>, <2 x float> } %42, 1
  %45 = bitcast %struct.SkRect* %34 to <2 x float>*
  store <2 x float> %43, <2 x float>* %45, align 8
  %46 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 3, i32 2
  %47 = bitcast float* %46 to <2 x float>*
  store <2 x float> %44, <2 x float>* %47, align 8
  call void @_ZN4sksg22InvalidationController5invalERK6SkRectRK8SkMatrix(%"class.sksg::InvalidationController"* nonnull %1, %struct.SkRect* nonnull dereferenceable(16) %4, %class.SkMatrix* dereferenceable(40) %2) #12
  %48 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %34, i64 0, i32 0
  %49 = load float, float* %48, align 4
  %50 = load float, float* %33, align 4
  %51 = fcmp une float %49, %50
  br i1 %51, label %70, label %52

52:                                               ; preds = %30
  %53 = getelementptr inbounds float, float* %48, i64 1
  %54 = load float, float* %53, align 4
  %55 = getelementptr inbounds float, float* %33, i64 1
  %56 = load float, float* %55, align 4
  %57 = fcmp une float %54, %56
  br i1 %57, label %70, label %58

58:                                               ; preds = %52
  %59 = getelementptr inbounds float, float* %48, i64 2
  %60 = load float, float* %59, align 4
  %61 = getelementptr inbounds float, float* %33, i64 2
  %62 = load float, float* %61, align 4
  %63 = fcmp une float %60, %62
  br i1 %63, label %70, label %64

64:                                               ; preds = %58
  %65 = getelementptr inbounds float, float* %48, i64 3
  %66 = load float, float* %65, align 4
  %67 = getelementptr inbounds float, float* %33, i64 3
  %68 = load float, float* %67, align 4
  %69 = fcmp une float %66, %68
  br i1 %69, label %70, label %71

70:                                               ; preds = %30, %52, %58, %64
  call void @_ZN4sksg22InvalidationController5invalERK6SkRectRK8SkMatrix(%"class.sksg::InvalidationController"* nonnull %1, %struct.SkRect* dereferenceable(16) %34, %class.SkMatrix* dereferenceable(40) %2) #12
  br label %71

71:                                               ; preds = %64, %70
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #12
  br label %72

72:                                               ; preds = %71, %18
  %73 = load i16, i16* %5, align 8
  %74 = and i16 %73, -13
  store i16 %74, i16* %5, align 8
  br label %75

75:                                               ; preds = %10, %72
  %76 = phi i16 [ %9, %10 ], [ %74, %72 ]
  %77 = and i16 %76, -33
  store i16 %77, i16* %5, align 8
  br label %78

78:                                               ; preds = %3, %75
  %79 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %0, i64 0, i32 3
  ret %struct.SkRect* %79
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

declare void @_ZN4sksg22InvalidationController5invalERK6SkRectRK8SkMatrix(%"class.sksg::InvalidationController"*, %struct.SkRect* dereferenceable(16), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #1 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #12
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
