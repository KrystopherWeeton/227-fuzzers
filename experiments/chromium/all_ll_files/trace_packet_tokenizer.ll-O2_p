; ModuleID = '../../services/tracing/public/cpp/perfetto/trace_packet_tokenizer.cc'
source_filename = "../../services/tracing/public/cpp/perfetto/trace_packet_tokenizer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.tracing::TracePacketTokenizer" = type { %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet" }
%"struct.tracing::TracePacketTokenizer::Packet" = type { %"class.base::StackVector", i64, %"class.base::StackVector.1" }
%"class.base::StackVector" = type { %"class.base::StackContainer" }
%"class.base::StackContainer" = type { %"struct.base::StackAllocator<unsigned char, 64>::Source", %"class.base::StackAllocator", %"class.std::__1::vector" }
%"struct.base::StackAllocator<unsigned char, 64>::Source" = type { [64 x i8], i8 }
%"class.base::StackAllocator" = type { %"struct.base::StackAllocator<unsigned char, 64>::Source"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.base::StackAllocator" }
%"class.base::StackVector.1" = type { %"class.base::StackContainer.2" }
%"class.base::StackContainer.2" = type { %"struct.base::StackAllocator<unsigned char, 5>::Source", %"class.base::StackAllocator.3", %"class.std::__1::vector.4" }
%"struct.base::StackAllocator<unsigned char, 5>::Source" = type { [5 x i8], i8 }
%"class.base::StackAllocator.3" = type { %"struct.base::StackAllocator<unsigned char, 5>::Source"* }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { i8*, i8*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.base::StackAllocator.3" }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"class.perfetto::TracePacket"*, %"class.perfetto::TracePacket"*, %"class.std::__1::__compressed_pair.19" }
%"class.perfetto::TracePacket" = type { %"class.std::__1::vector.10", i64, [8 x i8] }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"struct.perfetto::Slice"*, %"struct.perfetto::Slice"*, %"class.std::__1::__compressed_pair.14" }
%"struct.perfetto::Slice" = type { i8*, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.perfetto::Slice"* }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.perfetto::TracePacket"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhN4base14StackAllocatorIhLm5EEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_ = comdat any

$_ZNSt3__16vectorIhN4base14StackAllocatorIhLm64EEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_ = comdat any

$_ZNSt3__16vectorIhN4base14StackAllocatorIhLm64EEEE6assignINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_ = comdat any

$_ZNSt3__16vectorIhN4base14StackAllocatorIhLm5EEEE6assignINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_ = comdat any

$_ZNSt3__16vectorIN8perfetto11TracePacketENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJEEEvDpOT_ = comdat any

@_ZN7tracing20TracePacketTokenizerC1Ev = hidden unnamed_addr alias void (%"class.tracing::TracePacketTokenizer"*), void (%"class.tracing::TracePacketTokenizer"*)* @_ZN7tracing20TracePacketTokenizerC2Ev
@_ZN7tracing20TracePacketTokenizerD1Ev = hidden unnamed_addr alias void (%"class.tracing::TracePacketTokenizer"*), void (%"class.tracing::TracePacketTokenizer"*)* @_ZN7tracing20TracePacketTokenizerD2Ev
@_ZN7tracing20TracePacketTokenizer6PacketC1Ev = hidden unnamed_addr alias void (%"struct.tracing::TracePacketTokenizer::Packet"*), void (%"struct.tracing::TracePacketTokenizer::Packet"*)* @_ZN7tracing20TracePacketTokenizer6PacketC2Ev
@_ZN7tracing20TracePacketTokenizer6PacketD1Ev = hidden unnamed_addr alias void (%"struct.tracing::TracePacketTokenizer::Packet"*), void (%"struct.tracing::TracePacketTokenizer::Packet"*)* @_ZN7tracing20TracePacketTokenizer6PacketD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7tracing20TracePacketTokenizerC2Ev(%"class.tracing::TracePacketTokenizer"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8 0, i8* %3, align 1
  %4 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store %"struct.base::StackAllocator<unsigned char, 64>::Source"* %2, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %4, align 8
  %5 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %6 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1
  %7 = bitcast %"class.std::__1::vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #8
  %8 = ptrtoint %"class.tracing::TracePacketTokenizer"* %0 to i64
  %9 = bitcast %"struct.std::__1::__compressed_pair_elem.0"* %6 to i64*
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %11 = bitcast i8** %10 to i64*
  %12 = bitcast %"class.std::__1::vector"* %5 to i64*
  %13 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %14 = bitcast i8** %13 to i64*
  %15 = icmp eq %"class.tracing::TracePacketTokenizer"* %0, null
  br i1 %15, label %16, label %20

16:                                               ; preds = %1
  %17 = tail call i8* @_Znwm(i64 64) #9
  %18 = ptrtoint i8* %17 to i64
  %19 = getelementptr inbounds i8, i8* %17, i64 64
  br label %22

20:                                               ; preds = %1
  store i8 1, i8* %3, align 1
  %21 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 64
  br label %22

22:                                               ; preds = %16, %20
  %23 = phi i8* [ %19, %16 ], [ %21, %20 ]
  %24 = phi i64 [ %18, %16 ], [ %8, %20 ]
  %25 = ptrtoint i8* %23 to i64
  store i64 %24, i64* %12, align 8
  store i64 %24, i64* %14, align 8
  store i64 %25, i64* %11, align 8
  %26 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 1
  store i64 0, i64* %26, align 8
  %27 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 2
  %28 = getelementptr inbounds %"class.base::StackVector.1", %"class.base::StackVector.1"* %27, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 2, i32 0, i32 1, i32 0
  store %"struct.base::StackAllocator<unsigned char, 5>::Source"* %28, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %30, align 8
  %31 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 2, i32 0, i32 2
  %32 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 1
  %33 = ptrtoint %"class.base::StackVector.1"* %27 to i64
  %34 = bitcast %"struct.std::__1::__compressed_pair_elem.7"* %32 to i64*
  store i64 %33, i64* %34, align 8
  %35 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %36 = bitcast i8** %35 to i64*
  %37 = bitcast %"class.std::__1::vector.4"* %31 to i64*
  %38 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 1
  %39 = bitcast i8** %38 to i64*
  store i8 1, i8* %29, align 1
  %40 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 5
  %41 = ptrtoint i8* %40 to i64
  store i64 %33, i64* %37, align 8
  store i64 %33, i64* %39, align 8
  store i64 %41, i64* %36, align 8
  %42 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1
  %43 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %42, i64 0, i32 0, i32 0, i32 0
  %44 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 1, i32 0
  store %"struct.base::StackAllocator<unsigned char, 64>::Source"* %43, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %45, align 8
  %46 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %47 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1
  %48 = bitcast %"class.std::__1::vector"* %46 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 24, i1 false) #8
  %49 = ptrtoint %"struct.tracing::TracePacketTokenizer::Packet"* %42 to i64
  %50 = bitcast %"struct.std::__1::__compressed_pair_elem.0"* %47 to i64*
  store i64 %49, i64* %50, align 8
  %51 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %52 = bitcast i8** %51 to i64*
  %53 = bitcast %"class.std::__1::vector"* %46 to i64*
  %54 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 1
  %55 = bitcast i8** %54 to i64*
  %56 = icmp eq %"struct.tracing::TracePacketTokenizer::Packet"* %42, null
  br i1 %56, label %57, label %61

57:                                               ; preds = %22
  %58 = tail call i8* @_Znwm(i64 64) #9
  %59 = ptrtoint i8* %58 to i64
  %60 = getelementptr inbounds i8, i8* %58, i64 64
  br label %63

61:                                               ; preds = %22
  store i8 1, i8* %44, align 1
  %62 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 64
  br label %63

63:                                               ; preds = %57, %61
  %64 = phi i8* [ %60, %57 ], [ %62, %61 ]
  %65 = phi i64 [ %59, %57 ], [ %49, %61 ]
  %66 = ptrtoint i8* %64 to i64
  store i64 %65, i64* %53, align 8
  store i64 %65, i64* %55, align 8
  store i64 %66, i64* %52, align 8
  %67 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 1
  store i64 0, i64* %67, align 8
  %68 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 2
  %69 = getelementptr inbounds %"class.base::StackVector.1", %"class.base::StackVector.1"* %68, i64 0, i32 0, i32 0
  %70 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 2, i32 0, i32 0, i32 1
  %71 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 2, i32 0, i32 1, i32 0
  store %"struct.base::StackAllocator<unsigned char, 5>::Source"* %69, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %71, align 8
  %72 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 2, i32 0, i32 2
  %73 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 2, i32 0, i32 2, i32 0, i32 2, i32 1
  %74 = ptrtoint %"class.base::StackVector.1"* %68 to i64
  %75 = bitcast %"struct.std::__1::__compressed_pair_elem.7"* %73 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %77 = bitcast i8** %76 to i64*
  %78 = bitcast %"class.std::__1::vector.4"* %72 to i64*
  %79 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 2, i32 0, i32 2, i32 0, i32 1
  %80 = bitcast i8** %79 to i64*
  store i8 1, i8* %70, align 1
  %81 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0, i64 5
  %82 = ptrtoint i8* %81 to i64
  store i64 %74, i64* %78, align 8
  store i64 %74, i64* %80, align 8
  store i64 %82, i64* %77, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7tracing20TracePacketTokenizerD2Ev(%"class.tracing::TracePacketTokenizer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 2, i32 0, i32 2, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 2, i32 0, i32 2, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 2, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %10 = load %"struct.base::StackAllocator<unsigned char, 5>::Source"*, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %9, align 8
  %11 = icmp ne %"struct.base::StackAllocator<unsigned char, 5>::Source"* %10, null
  %12 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %10, i64 0, i32 0, i64 0
  %13 = icmp eq i8* %12, %3
  %14 = and i1 %11, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %5
  %16 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %10, i64 0, i32 1
  store i8 0, i8* %16, align 1
  br label %18

17:                                               ; preds = %5
  tail call void @_ZdlPv(i8* nonnull %3) #9
  br label %18

18:                                               ; preds = %17, %15, %1
  %19 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %18
  %23 = ptrtoint i8* %20 to i64
  %24 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 1
  %25 = bitcast i8** %24 to i64*
  store i64 %23, i64* %25, align 8
  %26 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %27 = load %"struct.base::StackAllocator<unsigned char, 64>::Source"*, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %26, align 8
  %28 = icmp ne %"struct.base::StackAllocator<unsigned char, 64>::Source"* %27, null
  %29 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %27, i64 0, i32 0, i64 0
  %30 = icmp eq i8* %29, %20
  %31 = and i1 %28, %30
  br i1 %31, label %32, label %34

32:                                               ; preds = %22
  %33 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %27, i64 0, i32 1
  store i8 0, i8* %33, align 1
  br label %35

34:                                               ; preds = %22
  tail call void @_ZdlPv(i8* nonnull %20) #9
  br label %35

35:                                               ; preds = %18, %32, %34
  %36 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = icmp eq i8* %37, null
  br i1 %38, label %52, label %39

39:                                               ; preds = %35
  %40 = ptrtoint i8* %37 to i64
  %41 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 1
  %42 = bitcast i8** %41 to i64*
  store i64 %40, i64* %42, align 8
  %43 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %44 = load %"struct.base::StackAllocator<unsigned char, 5>::Source"*, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %43, align 8
  %45 = icmp ne %"struct.base::StackAllocator<unsigned char, 5>::Source"* %44, null
  %46 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %44, i64 0, i32 0, i64 0
  %47 = icmp eq i8* %46, %37
  %48 = and i1 %45, %47
  br i1 %48, label %49, label %51

49:                                               ; preds = %39
  %50 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %44, i64 0, i32 1
  store i8 0, i8* %50, align 1
  br label %52

51:                                               ; preds = %39
  tail call void @_ZdlPv(i8* nonnull %37) #9
  br label %52

52:                                               ; preds = %51, %49, %35
  %53 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = icmp eq i8* %54, null
  br i1 %55, label %69, label %56

56:                                               ; preds = %52
  %57 = ptrtoint i8* %54 to i64
  %58 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %59 = bitcast i8** %58 to i64*
  store i64 %57, i64* %59, align 8
  %60 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %61 = load %"struct.base::StackAllocator<unsigned char, 64>::Source"*, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %60, align 8
  %62 = icmp ne %"struct.base::StackAllocator<unsigned char, 64>::Source"* %61, null
  %63 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %61, i64 0, i32 0, i64 0
  %64 = icmp eq i8* %63, %54
  %65 = and i1 %62, %64
  br i1 %65, label %66, label %68

66:                                               ; preds = %56
  %67 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %61, i64 0, i32 1
  store i8 0, i8* %67, align 1
  br label %69

68:                                               ; preds = %56
  tail call void @_ZdlPv(i8* nonnull %54) #9
  br label %69

69:                                               ; preds = %52, %66, %68
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7tracing20TracePacketTokenizer6PacketC2Ev(%"struct.tracing::TracePacketTokenizer::Packet"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i8 0, i8* %3, align 1
  %4 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  store %"struct.base::StackAllocator<unsigned char, 64>::Source"* %2, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %4, align 8
  %5 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1
  %7 = bitcast %"class.std::__1::vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #8
  %8 = ptrtoint %"struct.tracing::TracePacketTokenizer::Packet"* %0 to i64
  %9 = bitcast %"struct.std::__1::__compressed_pair_elem.0"* %6 to i64*
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %11 = bitcast i8** %10 to i64*
  %12 = bitcast %"class.std::__1::vector"* %5 to i64*
  %13 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %14 = bitcast i8** %13 to i64*
  %15 = icmp eq %"struct.tracing::TracePacketTokenizer::Packet"* %0, null
  br i1 %15, label %16, label %20

16:                                               ; preds = %1
  %17 = tail call i8* @_Znwm(i64 64) #9
  %18 = ptrtoint i8* %17 to i64
  %19 = getelementptr inbounds i8, i8* %17, i64 64
  br label %22

20:                                               ; preds = %1
  store i8 1, i8* %3, align 1
  %21 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 64
  br label %22

22:                                               ; preds = %16, %20
  %23 = phi i8* [ %19, %16 ], [ %21, %20 ]
  %24 = phi i64 [ %18, %16 ], [ %8, %20 ]
  %25 = ptrtoint i8* %23 to i64
  store i64 %24, i64* %12, align 8
  store i64 %24, i64* %14, align 8
  store i64 %25, i64* %11, align 8
  %26 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 1
  store i64 0, i64* %26, align 8
  %27 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"class.base::StackVector.1", %"class.base::StackVector.1"* %27, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 2, i32 0, i32 1, i32 0
  store %"struct.base::StackAllocator<unsigned char, 5>::Source"* %28, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %30, align 8
  %31 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 2, i32 0, i32 2
  %32 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 1
  %33 = bitcast %"class.std::__1::vector.4"* %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 24, i1 false) #8
  %34 = ptrtoint %"class.base::StackVector.1"* %27 to i64
  %35 = bitcast %"struct.std::__1::__compressed_pair_elem.7"* %32 to i64*
  store i64 %34, i64* %35, align 8
  %36 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %37 = bitcast i8** %36 to i64*
  %38 = bitcast %"class.std::__1::vector.4"* %31 to i64*
  %39 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 1
  %40 = bitcast i8** %39 to i64*
  %41 = icmp eq %"class.base::StackVector.1"* %27, null
  br i1 %41, label %42, label %46

42:                                               ; preds = %22
  %43 = tail call i8* @_Znwm(i64 5) #9
  %44 = ptrtoint i8* %43 to i64
  %45 = getelementptr inbounds i8, i8* %43, i64 5
  br label %48

46:                                               ; preds = %22
  store i8 1, i8* %29, align 1
  %47 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i64 5
  br label %48

48:                                               ; preds = %42, %46
  %49 = phi i8* [ %45, %42 ], [ %47, %46 ]
  %50 = phi i64 [ %44, %42 ], [ %34, %46 ]
  %51 = ptrtoint i8* %49 to i64
  store i64 %50, i64* %38, align 8
  store i64 %50, i64* %40, align 8
  store i64 %51, i64* %37, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7tracing20TracePacketTokenizer6PacketD2Ev(%"struct.tracing::TracePacketTokenizer::Packet"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %10 = load %"struct.base::StackAllocator<unsigned char, 5>::Source"*, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %9, align 8
  %11 = icmp ne %"struct.base::StackAllocator<unsigned char, 5>::Source"* %10, null
  %12 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %10, i64 0, i32 0, i64 0
  %13 = icmp eq i8* %12, %3
  %14 = and i1 %11, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %5
  %16 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %10, i64 0, i32 1
  store i8 0, i8* %16, align 1
  br label %18

17:                                               ; preds = %5
  tail call void @_ZdlPv(i8* nonnull %3) #9
  br label %18

18:                                               ; preds = %1, %15, %17
  %19 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %18
  %23 = ptrtoint i8* %20 to i64
  %24 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %25 = bitcast i8** %24 to i64*
  store i64 %23, i64* %25, align 8
  %26 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %27 = load %"struct.base::StackAllocator<unsigned char, 64>::Source"*, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %26, align 8
  %28 = icmp ne %"struct.base::StackAllocator<unsigned char, 64>::Source"* %27, null
  %29 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %27, i64 0, i32 0, i64 0
  %30 = icmp eq i8* %29, %20
  %31 = and i1 %28, %30
  br i1 %31, label %32, label %34

32:                                               ; preds = %22
  %33 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %27, i64 0, i32 1
  store i8 0, i8* %33, align 1
  br label %35

34:                                               ; preds = %22
  tail call void @_ZdlPv(i8* nonnull %20) #9
  br label %35

35:                                               ; preds = %18, %32, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7tracing20TracePacketTokenizer5ParseEPKhm(%"class.std::__1::vector.8"* noalias sret, %"class.tracing::TracePacketTokenizer"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"struct.tracing::TracePacketTokenizer::Packet", align 8
  %6 = alloca %"struct.tracing::TracePacketTokenizer::Packet", align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"class.std::__1::vector.8"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #8
  %10 = getelementptr inbounds i8, i8* %2, i64 %3
  %11 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %11) #8
  %12 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 0, i32 0, i32 0, i32 1
  %14 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 0, i32 0, i32 1, i32 0
  store %"struct.base::StackAllocator<unsigned char, 64>::Source"* %12, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %14, align 8
  %15 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 0, i32 0, i32 2
  %16 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1
  %17 = ptrtoint %"struct.tracing::TracePacketTokenizer::Packet"* %5 to i64
  %18 = bitcast %"struct.std::__1::__compressed_pair_elem.0"* %16 to i64*
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %20 = bitcast i8** %19 to i64*
  %21 = bitcast %"class.std::__1::vector"* %15 to i64*
  %22 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %23 = bitcast i8** %22 to i64*
  store i8 1, i8* %13, align 8
  %24 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 64
  %25 = ptrtoint i8* %24 to i64
  store i64 %17, i64* %21, align 8
  store i64 %17, i64* %23, align 8
  store i64 %25, i64* %20, align 8
  %26 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 1
  store i64 0, i64* %26, align 8
  %27 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 2
  %28 = getelementptr inbounds %"class.base::StackVector.1", %"class.base::StackVector.1"* %27, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 2, i32 0, i32 0, i32 1
  %30 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 2, i32 0, i32 1, i32 0
  store %"struct.base::StackAllocator<unsigned char, 5>::Source"* %28, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %30, align 8
  %31 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 2, i32 0, i32 2
  %32 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 1
  %33 = ptrtoint %"class.base::StackVector.1"* %27 to i64
  %34 = bitcast %"struct.std::__1::__compressed_pair_elem.7"* %32 to i64*
  store i64 %33, i64* %34, align 8
  %35 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %36 = bitcast i8** %35 to i64*
  %37 = bitcast %"class.std::__1::vector.4"* %31 to i64*
  %38 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 2, i32 0, i32 2, i32 0, i32 1
  %39 = bitcast i8** %38 to i64*
  store i8 1, i8* %29, align 1
  %40 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i64 5
  %41 = ptrtoint i8* %40 to i64
  store i64 %33, i64* %37, align 8
  store i64 %33, i64* %39, align 8
  store i64 %41, i64* %36, align 8
  %42 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %43 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %44 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm64EEEE6assignINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_(%"class.std::__1::vector"* %42, i8* nonnull %44, i8* nonnull %44) #8
  %45 = load i64, i64* %26, align 8
  %46 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %1, i64 0, i32 1, i32 1
  store i64 %45, i64* %46, align 8
  %47 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %1, i64 0, i32 1, i32 2, i32 0, i32 2
  %48 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = load i8*, i8** %38, align 8
  call void @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm5EEEE6assignINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_(%"class.std::__1::vector.4"* %47, i8* %49, i8* %50) #8
  %51 = load i8*, i8** %48, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %64, label %53

53:                                               ; preds = %4
  %54 = ptrtoint i8* %51 to i64
  store i64 %54, i64* %39, align 8
  %55 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %56 = load %"struct.base::StackAllocator<unsigned char, 5>::Source"*, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %55, align 8
  %57 = icmp ne %"struct.base::StackAllocator<unsigned char, 5>::Source"* %56, null
  %58 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %56, i64 0, i32 0, i64 0
  %59 = icmp eq i8* %58, %51
  %60 = and i1 %57, %59
  br i1 %60, label %61, label %63

61:                                               ; preds = %53
  %62 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %56, i64 0, i32 1
  store i8 0, i8* %62, align 1
  br label %64

63:                                               ; preds = %53
  call void @_ZdlPv(i8* nonnull %51) #9
  br label %64

64:                                               ; preds = %63, %61, %4
  %65 = load i8*, i8** %43, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %78, label %67

67:                                               ; preds = %64
  %68 = ptrtoint i8* %65 to i64
  store i64 %68, i64* %23, align 8
  %69 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %70 = load %"struct.base::StackAllocator<unsigned char, 64>::Source"*, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %69, align 8
  %71 = icmp ne %"struct.base::StackAllocator<unsigned char, 64>::Source"* %70, null
  %72 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %70, i64 0, i32 0, i64 0
  %73 = icmp eq i8* %72, %65
  %74 = and i1 %71, %73
  br i1 %74, label %75, label %77

75:                                               ; preds = %67
  %76 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %70, i64 0, i32 1
  store i8 0, i8* %76, align 1
  br label %78

77:                                               ; preds = %67
  call void @_ZdlPv(i8* nonnull %65) #9
  br label %78

78:                                               ; preds = %64, %75, %77
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %11) #8
  %79 = icmp sgt i64 %3, 0
  br i1 %79, label %80, label %248

80:                                               ; preds = %78
  %81 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %1, i64 0, i32 0, i32 1
  %82 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %1, i64 0, i32 0, i32 2, i32 0, i32 2
  %83 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %1, i64 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 1
  %84 = bitcast i8** %83 to i64*
  %85 = bitcast %"class.std::__1::vector.4"* %82 to i64*
  %86 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %1, i64 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %87 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %1, i64 0, i32 0, i32 0, i32 0, i32 2
  %88 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %89 = bitcast i8** %88 to i64*
  %90 = bitcast %"class.std::__1::vector"* %87 to i64*
  %91 = bitcast %"class.perfetto::TracePacket"** %7 to i64*
  %92 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %87, i64 0, i32 0, i32 0
  %93 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %94 = getelementptr inbounds %"class.tracing::TracePacketTokenizer", %"class.tracing::TracePacketTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 1
  %95 = bitcast i8** %94 to i64*
  %96 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %97 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 0, i32 0, i32 0
  %98 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %99 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 0, i32 0, i32 1, i32 0
  %100 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 0, i32 0, i32 2
  %101 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1
  %102 = ptrtoint %"struct.tracing::TracePacketTokenizer::Packet"* %6 to i64
  %103 = bitcast %"struct.std::__1::__compressed_pair_elem.0"* %101 to i64*
  %104 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %105 = bitcast i8** %104 to i64*
  %106 = bitcast %"class.std::__1::vector"* %100 to i64*
  %107 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %108 = bitcast i8** %107 to i64*
  %109 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i64 64
  %110 = ptrtoint i8* %109 to i64
  %111 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 1
  %112 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 2
  %113 = getelementptr inbounds %"class.base::StackVector.1", %"class.base::StackVector.1"* %112, i64 0, i32 0, i32 0
  %114 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 2, i32 0, i32 0, i32 1
  %115 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 2, i32 0, i32 1, i32 0
  %116 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 2, i32 0, i32 2
  %117 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 1
  %118 = ptrtoint %"class.base::StackVector.1"* %112 to i64
  %119 = bitcast %"struct.std::__1::__compressed_pair_elem.7"* %117 to i64*
  %120 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %121 = bitcast i8** %120 to i64*
  %122 = bitcast %"class.std::__1::vector.4"* %116 to i64*
  %123 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 2, i32 0, i32 2, i32 0, i32 1
  %124 = bitcast i8** %123 to i64*
  %125 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i64 5
  %126 = ptrtoint i8* %125 to i64
  %127 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %128 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %129 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %130 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %131 = getelementptr inbounds %"struct.tracing::TracePacketTokenizer::Packet", %"struct.tracing::TracePacketTokenizer::Packet"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  br label %132

132:                                              ; preds = %80, %246
  %133 = phi i8* [ %2, %80 ], [ %188, %246 ]
  %134 = load i64, i64* %81, align 8
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %136, label %181

136:                                              ; preds = %132
  %137 = load i64, i64* %84, align 8
  %138 = load i64, i64* %85, align 8
  %139 = sub i64 %137, %138
  %140 = sub i64 5, %139
  %141 = inttoptr i64 %137 to i8*
  %142 = getelementptr inbounds i8, i8* %133, i64 %140
  %143 = icmp ult i8* %10, %142
  %144 = select i1 %143, i8* %10, i8* %142
  %145 = call i8* @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm5EEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_(%"class.std::__1::vector.4"* %82, i8* %141, i8* %133, i8* %144)
  %146 = load i64, i64* %84, align 8
  %147 = load i64, i64* %85, align 8
  %148 = sub i64 %146, %147
  %149 = icmp ult i64 %148, 2
  %150 = inttoptr i64 %146 to i8*
  br i1 %149, label %248, label %151

151:                                              ; preds = %136
  %152 = inttoptr i64 %147 to i8*
  %153 = getelementptr inbounds i8, i8* %152, i64 1
  %154 = icmp ult i8* %153, %150
  br i1 %154, label %159, label %171

155:                                              ; preds = %159
  %156 = icmp ult i8* %163, %150
  %157 = icmp ult i64 %170, 64
  %158 = and i1 %157, %156
  br i1 %158, label %159, label %171

159:                                              ; preds = %151, %155
  %160 = phi i64 [ %170, %155 ], [ 0, %151 ]
  %161 = phi i64 [ %168, %155 ], [ 0, %151 ]
  %162 = phi i8* [ %163, %155 ], [ %153, %151 ]
  %163 = getelementptr inbounds i8, i8* %162, i64 1
  %164 = load i8, i8* %162, align 1
  %165 = and i8 %164, 127
  %166 = zext i8 %165 to i64
  %167 = shl i64 %166, %160
  %168 = or i64 %167, %161
  %169 = icmp sgt i8 %164, -1
  %170 = add nuw nsw i64 %160, 7
  br i1 %169, label %171, label %155

171:                                              ; preds = %155, %159, %151
  %172 = phi i64 [ 0, %151 ], [ %168, %159 ], [ 0, %155 ]
  %173 = phi i8* [ %153, %151 ], [ %163, %159 ], [ %153, %155 ]
  store i64 %172, i64* %81, align 8
  %174 = ptrtoint i8* %173 to i64
  %175 = ptrtoint i8* %153 to i64
  %176 = sub i64 %174, %175
  %177 = icmp eq i64 %176, 0
  %178 = sub i64 1, %139
  %179 = add i64 %178, %176
  %180 = getelementptr inbounds i8, i8* %133, i64 %179
  br i1 %177, label %248, label %181

181:                                              ; preds = %171, %132
  %182 = phi i64 [ %134, %132 ], [ %172, %171 ]
  %183 = phi i8* [ %133, %132 ], [ %180, %171 ]
  %184 = load i64, i64* %89, align 8
  %185 = load i64, i64* %90, align 8
  %186 = sub i64 %185, %184
  %187 = add i64 %186, %182
  %188 = getelementptr inbounds i8, i8* %183, i64 %187
  %189 = icmp ugt i8* %188, %10
  br i1 %189, label %190, label %193

190:                                              ; preds = %181
  %191 = inttoptr i64 %184 to i8*
  %192 = call i8* @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm64EEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_(%"class.std::__1::vector"* %87, i8* %191, i8* %183, i8* %10)
  br label %248

193:                                              ; preds = %181
  %194 = load %"class.perfetto::TracePacket"*, %"class.perfetto::TracePacket"** %7, align 8
  %195 = load %"class.perfetto::TracePacket"*, %"class.perfetto::TracePacket"** %8, align 8
  %196 = icmp ult %"class.perfetto::TracePacket"* %194, %195
  br i1 %196, label %197, label %200

197:                                              ; preds = %193
  call void @_ZN8perfetto11TracePacketC1Ev(%"class.perfetto::TracePacket"* %194) #8
  %198 = getelementptr inbounds %"class.perfetto::TracePacket", %"class.perfetto::TracePacket"* %194, i64 1
  %199 = ptrtoint %"class.perfetto::TracePacket"* %198 to i64
  store i64 %199, i64* %91, align 8
  br label %201

200:                                              ; preds = %193
  call void @_ZNSt3__16vectorIN8perfetto11TracePacketENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJEEEvDpOT_(%"class.std::__1::vector.8"* %0) #8
  br label %201

201:                                              ; preds = %197, %200
  %202 = load i8*, i8** %92, align 8
  %203 = load i8*, i8** %88, align 8
  %204 = icmp eq i8* %202, %203
  br i1 %204, label %215, label %205

205:                                              ; preds = %201
  call void @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm64EEEE6assignINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_(%"class.std::__1::vector"* %42, i8* %202, i8* %203) #8
  %206 = load i64, i64* %81, align 8
  store i64 %206, i64* %46, align 8
  %207 = load i8*, i8** %86, align 8
  %208 = load i8*, i8** %83, align 8
  call void @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm5EEEE6assignINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_(%"class.std::__1::vector.4"* %47, i8* %207, i8* %208) #8
  %209 = load %"class.perfetto::TracePacket"*, %"class.perfetto::TracePacket"** %7, align 8
  %210 = getelementptr inbounds %"class.perfetto::TracePacket", %"class.perfetto::TracePacket"* %209, i64 -1
  %211 = load i8*, i8** %93, align 8
  %212 = load i64, i64* %95, align 8
  %213 = ptrtoint i8* %211 to i64
  %214 = sub i64 %212, %213
  call void @_ZN8perfetto11TracePacket8AddSliceEPKvm(%"class.perfetto::TracePacket"* %210, i8* %211, i64 %214) #8
  br label %215

215:                                              ; preds = %201, %205
  %216 = load %"class.perfetto::TracePacket"*, %"class.perfetto::TracePacket"** %7, align 8
  %217 = getelementptr inbounds %"class.perfetto::TracePacket", %"class.perfetto::TracePacket"* %216, i64 -1
  call void @_ZN8perfetto11TracePacket8AddSliceEPKvm(%"class.perfetto::TracePacket"* %217, i8* %183, i64 %187) #8
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %96) #8
  store %"struct.base::StackAllocator<unsigned char, 64>::Source"* %97, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %99, align 8
  store i64 %102, i64* %103, align 8
  store i8 1, i8* %98, align 8
  store i64 %102, i64* %106, align 8
  store i64 %102, i64* %108, align 8
  store i64 %110, i64* %105, align 8
  store i64 0, i64* %111, align 8
  store %"struct.base::StackAllocator<unsigned char, 5>::Source"* %113, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %115, align 8
  store i64 %118, i64* %119, align 8
  store i8 1, i8* %114, align 1
  store i64 %118, i64* %122, align 8
  store i64 %118, i64* %124, align 8
  store i64 %126, i64* %121, align 8
  call void @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm64EEEE6assignINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_(%"class.std::__1::vector"* %87, i8* nonnull %131, i8* nonnull %131) #8
  %218 = load i64, i64* %111, align 8
  store i64 %218, i64* %81, align 8
  %219 = load i8*, i8** %128, align 8
  %220 = load i8*, i8** %123, align 8
  call void @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm5EEEE6assignINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_(%"class.std::__1::vector.4"* %82, i8* %219, i8* %220) #8
  %221 = load i8*, i8** %128, align 8
  %222 = icmp eq i8* %221, null
  br i1 %222, label %233, label %223

223:                                              ; preds = %215
  %224 = ptrtoint i8* %221 to i64
  store i64 %224, i64* %124, align 8
  %225 = load %"struct.base::StackAllocator<unsigned char, 5>::Source"*, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %129, align 8
  %226 = icmp ne %"struct.base::StackAllocator<unsigned char, 5>::Source"* %225, null
  %227 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %225, i64 0, i32 0, i64 0
  %228 = icmp eq i8* %227, %221
  %229 = and i1 %226, %228
  br i1 %229, label %230, label %232

230:                                              ; preds = %223
  %231 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %225, i64 0, i32 1
  store i8 0, i8* %231, align 1
  br label %233

232:                                              ; preds = %223
  call void @_ZdlPv(i8* nonnull %221) #9
  br label %233

233:                                              ; preds = %232, %230, %215
  %234 = load i8*, i8** %127, align 8
  %235 = icmp eq i8* %234, null
  br i1 %235, label %246, label %236

236:                                              ; preds = %233
  %237 = ptrtoint i8* %234 to i64
  store i64 %237, i64* %108, align 8
  %238 = load %"struct.base::StackAllocator<unsigned char, 64>::Source"*, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %130, align 8
  %239 = icmp ne %"struct.base::StackAllocator<unsigned char, 64>::Source"* %238, null
  %240 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %238, i64 0, i32 0, i64 0
  %241 = icmp eq i8* %240, %234
  %242 = and i1 %239, %241
  br i1 %242, label %243, label %245

243:                                              ; preds = %236
  %244 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %238, i64 0, i32 1
  store i8 0, i8* %244, align 1
  br label %246

245:                                              ; preds = %236
  call void @_ZdlPv(i8* nonnull %234) #9
  br label %246

246:                                              ; preds = %245, %243, %233
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %96) #8
  %247 = icmp ult i8* %188, %10
  br i1 %247, label %132, label %248

248:                                              ; preds = %246, %136, %171, %78, %190
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm5EEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_(%"class.std::__1::vector.4"*, i8*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %2 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %8 = ptrtoint i8* %3 to i64
  %9 = sub i64 %8, %6
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %647

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  br i1 %19, label %268, label %20

20:                                               ; preds = %11
  %21 = bitcast i8** %15 to i64*
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %141

24:                                               ; preds = %20
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = icmp eq i8* %25, %3
  br i1 %26, label %136, label %27

27:                                               ; preds = %24
  %28 = sub i64 %5, %6
  %29 = sub i64 %28, %17
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = icmp ult i8* %30, inttoptr (i64 32 to i8*)
  br i1 %32, label %123, label %33

33:                                               ; preds = %27
  %34 = sub i64 %5, %6
  %35 = sub i64 %34, %17
  %36 = getelementptr i8, i8* %3, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = getelementptr i8, i8* %16, i64 %37
  %39 = icmp ult i8* %16, %3
  %40 = icmp ult i8* %25, %38
  %41 = and i1 %39, %40
  br i1 %41, label %123, label %42

42:                                               ; preds = %33
  %43 = and i64 %31, -32
  %44 = getelementptr i8, i8* %16, i64 %43
  %45 = getelementptr i8, i8* %25, i64 %43
  %46 = add i64 %43, -32
  %47 = lshr exact i64 %46, 5
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 3
  %50 = icmp ult i64 %46, 96
  br i1 %50, label %102, label %51

51:                                               ; preds = %42
  %52 = sub nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %99, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %100, %53 ]
  %56 = getelementptr i8, i8* %16, i64 %54
  %57 = getelementptr i8, i8* %25, i64 %54
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !2
  %60 = getelementptr i8, i8* %57, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !2
  %63 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %63, align 1, !alias.scope !5, !noalias !2
  %64 = getelementptr i8, i8* %56, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %65, align 1, !alias.scope !5, !noalias !2
  %66 = or i64 %54, 32
  %67 = getelementptr i8, i8* %16, i64 %66
  %68 = getelementptr i8, i8* %25, i64 %66
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !2
  %71 = getelementptr i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !2
  %74 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !5, !noalias !2
  %75 = getelementptr i8, i8* %67, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !alias.scope !5, !noalias !2
  %77 = or i64 %54, 64
  %78 = getelementptr i8, i8* %16, i64 %77
  %79 = getelementptr i8, i8* %25, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !2
  %82 = getelementptr i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !2
  %85 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !5, !noalias !2
  %86 = getelementptr i8, i8* %78, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !5, !noalias !2
  %88 = or i64 %54, 96
  %89 = getelementptr i8, i8* %16, i64 %88
  %90 = getelementptr i8, i8* %25, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !2
  %93 = getelementptr i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !2
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !5, !noalias !2
  %97 = getelementptr i8, i8* %89, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !5, !noalias !2
  %99 = add i64 %54, 128
  %100 = add i64 %55, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %53, !llvm.loop !7

102:                                              ; preds = %53, %42
  %103 = phi i64 [ 0, %42 ], [ %99, %53 ]
  %104 = icmp eq i64 %49, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %118, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %119, %105 ], [ %49, %102 ]
  %108 = getelementptr i8, i8* %16, i64 %106
  %109 = getelementptr i8, i8* %25, i64 %106
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !2
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !2
  %115 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !5, !noalias !2
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !5, !noalias !2
  %118 = add i64 %106, 32
  %119 = add i64 %107, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !9

121:                                              ; preds = %105, %102
  %122 = icmp eq i64 %43, %31
  br i1 %122, label %133, label %123

123:                                              ; preds = %121, %33, %27
  %124 = phi i8* [ %16, %33 ], [ %16, %27 ], [ %44, %121 ]
  %125 = phi i8* [ %25, %33 ], [ %25, %27 ], [ %45, %121 ]
  br label %126

126:                                              ; preds = %123, %126
  %127 = phi i8* [ %131, %126 ], [ %124, %123 ]
  %128 = phi i8* [ %130, %126 ], [ %125, %123 ]
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %127, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 1
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  %132 = icmp eq i8* %130, %3
  br i1 %132, label %133, label %126, !llvm.loop !11

133:                                              ; preds = %126, %121
  %134 = phi i8* [ %44, %121 ], [ %131, %126 ]
  %135 = ptrtoint i8* %134 to i64
  br label %136

136:                                              ; preds = %133, %24
  %137 = phi i64 [ %17, %24 ], [ %135, %133 ]
  store i64 %137, i64* %21, align 8
  %138 = icmp sgt i64 %22, 0
  br i1 %138, label %139, label %647

139:                                              ; preds = %136
  %140 = inttoptr i64 %137 to i8*
  br label %141

141:                                              ; preds = %139, %20
  %142 = phi i64 [ %137, %139 ], [ %17, %20 ]
  %143 = phi i8* [ %140, %139 ], [ %16, %20 ]
  %144 = phi i8* [ %25, %139 ], [ %3, %20 ]
  %145 = getelementptr inbounds i8, i8* %1, i64 %9
  %146 = ptrtoint i8* %145 to i64
  %147 = sub i64 %142, %146
  %148 = getelementptr inbounds i8, i8* %1, i64 %147
  %149 = icmp ult i8* %148, %16
  br i1 %149, label %150, label %250

150:                                              ; preds = %141
  %151 = sub i64 %9, %142
  %152 = getelementptr i8, i8* %16, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp ult i8* %152, inttoptr (i64 32 to i8*)
  br i1 %154, label %155, label %158

155:                                              ; preds = %245, %158, %150
  %156 = phi i8* [ %148, %158 ], [ %148, %150 ], [ %168, %245 ]
  %157 = phi i8* [ %143, %158 ], [ %143, %150 ], [ %169, %245 ]
  br label %256

158:                                              ; preds = %150
  %159 = sub i64 %9, %142
  %160 = getelementptr i8, i8* %16, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = getelementptr i8, i8* %143, i64 %161
  %163 = icmp ult i8* %143, %16
  %164 = icmp ult i8* %148, %162
  %165 = and i1 %163, %164
  br i1 %165, label %155, label %166

166:                                              ; preds = %158
  %167 = and i64 %153, -32
  %168 = getelementptr i8, i8* %148, i64 %167
  %169 = getelementptr i8, i8* %143, i64 %167
  %170 = add i64 %167, -32
  %171 = lshr exact i64 %170, 5
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp ult i64 %170, 96
  br i1 %174, label %226, label %175

175:                                              ; preds = %166
  %176 = sub nsw i64 %172, %173
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi i64 [ 0, %175 ], [ %223, %177 ]
  %179 = phi i64 [ %176, %175 ], [ %224, %177 ]
  %180 = getelementptr i8, i8* %148, i64 %178
  %181 = getelementptr i8, i8* %143, i64 %178
  %182 = bitcast i8* %180 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !12
  %184 = getelementptr i8, i8* %180, i64 16
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !12
  %187 = bitcast i8* %181 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %187, align 1, !alias.scope !15, !noalias !12
  %188 = getelementptr i8, i8* %181, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %189, align 1, !alias.scope !15, !noalias !12
  %190 = or i64 %178, 32
  %191 = getelementptr i8, i8* %148, i64 %190
  %192 = getelementptr i8, i8* %143, i64 %190
  %193 = bitcast i8* %191 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !12
  %195 = getelementptr i8, i8* %191, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !12
  %198 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %198, align 1, !alias.scope !15, !noalias !12
  %199 = getelementptr i8, i8* %192, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %200, align 1, !alias.scope !15, !noalias !12
  %201 = or i64 %178, 64
  %202 = getelementptr i8, i8* %148, i64 %201
  %203 = getelementptr i8, i8* %143, i64 %201
  %204 = bitcast i8* %202 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !12
  %206 = getelementptr i8, i8* %202, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1, !alias.scope !12
  %209 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %209, align 1, !alias.scope !15, !noalias !12
  %210 = getelementptr i8, i8* %203, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %211, align 1, !alias.scope !15, !noalias !12
  %212 = or i64 %178, 96
  %213 = getelementptr i8, i8* %148, i64 %212
  %214 = getelementptr i8, i8* %143, i64 %212
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !12
  %217 = getelementptr i8, i8* %213, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !12
  %220 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !15, !noalias !12
  %221 = getelementptr i8, i8* %214, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !15, !noalias !12
  %223 = add i64 %178, 128
  %224 = add i64 %179, -4
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %177, !llvm.loop !17

226:                                              ; preds = %177, %166
  %227 = phi i64 [ 0, %166 ], [ %223, %177 ]
  %228 = icmp eq i64 %173, 0
  br i1 %228, label %245, label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %242, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %243, %229 ], [ %173, %226 ]
  %232 = getelementptr i8, i8* %148, i64 %230
  %233 = getelementptr i8, i8* %143, i64 %230
  %234 = bitcast i8* %232 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !12
  %236 = getelementptr i8, i8* %232, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !12
  %239 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %239, align 1, !alias.scope !15, !noalias !12
  %240 = getelementptr i8, i8* %233, i64 16
  %241 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %241, align 1, !alias.scope !15, !noalias !12
  %242 = add i64 %230, 32
  %243 = add i64 %231, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %229, !llvm.loop !18

245:                                              ; preds = %229, %226
  %246 = icmp eq i64 %167, %153
  br i1 %246, label %247, label %155

247:                                              ; preds = %256, %245
  %248 = phi i8* [ %169, %245 ], [ %261, %256 ]
  %249 = ptrtoint i8* %248 to i64
  br label %250

250:                                              ; preds = %247, %141
  %251 = phi i64 [ %249, %247 ], [ %142, %141 ]
  store i64 %251, i64* %21, align 8
  %252 = icmp eq i64 %147, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %250
  %254 = sub i64 0, %147
  %255 = getelementptr inbounds i8, i8* %143, i64 %254
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %255, i8* align 1 %1, i64 %147, i1 false) #8
  br label %263

256:                                              ; preds = %155, %256
  %257 = phi i8* [ %260, %256 ], [ %156, %155 ]
  %258 = phi i8* [ %261, %256 ], [ %157, %155 ]
  %259 = load i8, i8* %257, align 1
  store i8 %259, i8* %258, align 1
  %260 = getelementptr inbounds i8, i8* %257, i64 1
  %261 = getelementptr inbounds i8, i8* %258, i64 1
  %262 = icmp eq i8* %260, %16
  br i1 %262, label %247, label %256, !llvm.loop !19

263:                                              ; preds = %250, %253
  %264 = ptrtoint i8* %144 to i64
  %265 = sub i64 %264, %6
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %647, label %267

267:                                              ; preds = %263
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %265, i1 false) #8
  br label %647

268:                                              ; preds = %11
  %269 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 1, i32 0
  %270 = bitcast i8** %15 to i64*
  %271 = bitcast %"class.std::__1::vector.4"* %0 to i64*
  %272 = load i64, i64* %271, align 8
  %273 = sub i64 %17, %272
  %274 = add i64 %273, %9
  %275 = icmp slt i64 %274, 0
  br i1 %275, label %276, label %278

276:                                              ; preds = %268
  %277 = bitcast %"class.std::__1::vector.4"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %277) #10
  unreachable

278:                                              ; preds = %268
  %279 = sub i64 %14, %272
  %280 = icmp ult i64 %279, 4611686018427387903
  br i1 %280, label %283, label %281

281:                                              ; preds = %278
  %282 = sub i64 %5, %272
  br label %289

283:                                              ; preds = %278
  %284 = shl i64 %279, 1
  %285 = icmp ult i64 %284, %274
  %286 = select i1 %285, i64 %274, i64 %284
  %287 = sub i64 %5, %272
  %288 = icmp eq i64 %286, 0
  br i1 %288, label %306, label %289

289:                                              ; preds = %281, %283
  %290 = phi i64 [ %282, %281 ], [ %287, %283 ]
  %291 = phi i64 [ 9223372036854775807, %281 ], [ %286, %283 ]
  %292 = getelementptr inbounds %"class.base::StackAllocator.3", %"class.base::StackAllocator.3"* %269, i64 0, i32 0
  %293 = load %"struct.base::StackAllocator<unsigned char, 5>::Source"*, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %292, align 8
  %294 = icmp eq %"struct.base::StackAllocator<unsigned char, 5>::Source"* %293, null
  br i1 %294, label %304, label %295

295:                                              ; preds = %289
  %296 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %293, i64 0, i32 1
  %297 = load i8, i8* %296, align 1, !range !20
  %298 = icmp eq i8 %297, 0
  %299 = icmp ult i64 %291, 6
  %300 = and i1 %299, %298
  br i1 %300, label %301, label %304

301:                                              ; preds = %295
  store i8 1, i8* %296, align 1
  %302 = load %"struct.base::StackAllocator<unsigned char, 5>::Source"*, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %292, align 8
  %303 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %302, i64 0, i32 0, i64 0
  br label %306

304:                                              ; preds = %295, %289
  %305 = tail call i8* @_Znwm(i64 %291) #9
  br label %306

306:                                              ; preds = %283, %301, %304
  %307 = phi i64 [ %287, %283 ], [ %290, %301 ], [ %290, %304 ]
  %308 = phi i64 [ 0, %283 ], [ %291, %301 ], [ %291, %304 ]
  %309 = phi i8* [ null, %283 ], [ %303, %301 ], [ %305, %304 ]
  %310 = getelementptr inbounds i8, i8* %309, i64 %307
  %311 = getelementptr inbounds i8, i8* %309, i64 %308
  %312 = getelementptr inbounds i8, i8* %310, i64 %9
  %313 = icmp ult i64 %9, 32
  br i1 %313, label %399, label %314

314:                                              ; preds = %306
  %315 = icmp ult i8* %310, %3
  %316 = icmp ugt i8* %312, %2
  %317 = and i1 %315, %316
  br i1 %317, label %399, label %318

318:                                              ; preds = %314
  %319 = and i64 %9, -32
  %320 = getelementptr i8, i8* %310, i64 %319
  %321 = getelementptr i8, i8* %2, i64 %319
  %322 = add i64 %319, -32
  %323 = lshr exact i64 %322, 5
  %324 = add nuw nsw i64 %323, 1
  %325 = and i64 %324, 3
  %326 = icmp ult i64 %322, 96
  br i1 %326, label %378, label %327

327:                                              ; preds = %318
  %328 = sub nsw i64 %324, %325
  br label %329

329:                                              ; preds = %329, %327
  %330 = phi i64 [ 0, %327 ], [ %375, %329 ]
  %331 = phi i64 [ %328, %327 ], [ %376, %329 ]
  %332 = getelementptr i8, i8* %310, i64 %330
  %333 = getelementptr i8, i8* %2, i64 %330
  %334 = bitcast i8* %333 to <16 x i8>*
  %335 = load <16 x i8>, <16 x i8>* %334, align 1, !alias.scope !21
  %336 = getelementptr i8, i8* %333, i64 16
  %337 = bitcast i8* %336 to <16 x i8>*
  %338 = load <16 x i8>, <16 x i8>* %337, align 1, !alias.scope !21
  %339 = bitcast i8* %332 to <16 x i8>*
  store <16 x i8> %335, <16 x i8>* %339, align 1, !alias.scope !24, !noalias !21
  %340 = getelementptr i8, i8* %332, i64 16
  %341 = bitcast i8* %340 to <16 x i8>*
  store <16 x i8> %338, <16 x i8>* %341, align 1, !alias.scope !24, !noalias !21
  %342 = or i64 %330, 32
  %343 = getelementptr i8, i8* %310, i64 %342
  %344 = getelementptr i8, i8* %2, i64 %342
  %345 = bitcast i8* %344 to <16 x i8>*
  %346 = load <16 x i8>, <16 x i8>* %345, align 1, !alias.scope !21
  %347 = getelementptr i8, i8* %344, i64 16
  %348 = bitcast i8* %347 to <16 x i8>*
  %349 = load <16 x i8>, <16 x i8>* %348, align 1, !alias.scope !21
  %350 = bitcast i8* %343 to <16 x i8>*
  store <16 x i8> %346, <16 x i8>* %350, align 1, !alias.scope !24, !noalias !21
  %351 = getelementptr i8, i8* %343, i64 16
  %352 = bitcast i8* %351 to <16 x i8>*
  store <16 x i8> %349, <16 x i8>* %352, align 1, !alias.scope !24, !noalias !21
  %353 = or i64 %330, 64
  %354 = getelementptr i8, i8* %310, i64 %353
  %355 = getelementptr i8, i8* %2, i64 %353
  %356 = bitcast i8* %355 to <16 x i8>*
  %357 = load <16 x i8>, <16 x i8>* %356, align 1, !alias.scope !21
  %358 = getelementptr i8, i8* %355, i64 16
  %359 = bitcast i8* %358 to <16 x i8>*
  %360 = load <16 x i8>, <16 x i8>* %359, align 1, !alias.scope !21
  %361 = bitcast i8* %354 to <16 x i8>*
  store <16 x i8> %357, <16 x i8>* %361, align 1, !alias.scope !24, !noalias !21
  %362 = getelementptr i8, i8* %354, i64 16
  %363 = bitcast i8* %362 to <16 x i8>*
  store <16 x i8> %360, <16 x i8>* %363, align 1, !alias.scope !24, !noalias !21
  %364 = or i64 %330, 96
  %365 = getelementptr i8, i8* %310, i64 %364
  %366 = getelementptr i8, i8* %2, i64 %364
  %367 = bitcast i8* %366 to <16 x i8>*
  %368 = load <16 x i8>, <16 x i8>* %367, align 1, !alias.scope !21
  %369 = getelementptr i8, i8* %366, i64 16
  %370 = bitcast i8* %369 to <16 x i8>*
  %371 = load <16 x i8>, <16 x i8>* %370, align 1, !alias.scope !21
  %372 = bitcast i8* %365 to <16 x i8>*
  store <16 x i8> %368, <16 x i8>* %372, align 1, !alias.scope !24, !noalias !21
  %373 = getelementptr i8, i8* %365, i64 16
  %374 = bitcast i8* %373 to <16 x i8>*
  store <16 x i8> %371, <16 x i8>* %374, align 1, !alias.scope !24, !noalias !21
  %375 = add i64 %330, 128
  %376 = add i64 %331, -4
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %378, label %329, !llvm.loop !26

378:                                              ; preds = %329, %318
  %379 = phi i64 [ 0, %318 ], [ %375, %329 ]
  %380 = icmp eq i64 %325, 0
  br i1 %380, label %397, label %381

381:                                              ; preds = %378, %381
  %382 = phi i64 [ %394, %381 ], [ %379, %378 ]
  %383 = phi i64 [ %395, %381 ], [ %325, %378 ]
  %384 = getelementptr i8, i8* %310, i64 %382
  %385 = getelementptr i8, i8* %2, i64 %382
  %386 = bitcast i8* %385 to <16 x i8>*
  %387 = load <16 x i8>, <16 x i8>* %386, align 1, !alias.scope !21
  %388 = getelementptr i8, i8* %385, i64 16
  %389 = bitcast i8* %388 to <16 x i8>*
  %390 = load <16 x i8>, <16 x i8>* %389, align 1, !alias.scope !21
  %391 = bitcast i8* %384 to <16 x i8>*
  store <16 x i8> %387, <16 x i8>* %391, align 1, !alias.scope !24, !noalias !21
  %392 = getelementptr i8, i8* %384, i64 16
  %393 = bitcast i8* %392 to <16 x i8>*
  store <16 x i8> %390, <16 x i8>* %393, align 1, !alias.scope !24, !noalias !21
  %394 = add i64 %382, 32
  %395 = add i64 %383, -1
  %396 = icmp eq i64 %395, 0
  br i1 %396, label %397, label %381, !llvm.loop !27

397:                                              ; preds = %381, %378
  %398 = icmp eq i64 %9, %319
  br i1 %398, label %409, label %399

399:                                              ; preds = %397, %314, %306
  %400 = phi i8* [ %310, %314 ], [ %310, %306 ], [ %320, %397 ]
  %401 = phi i8* [ %2, %314 ], [ %2, %306 ], [ %321, %397 ]
  br label %402

402:                                              ; preds = %399, %402
  %403 = phi i8* [ %406, %402 ], [ %400, %399 ]
  %404 = phi i8* [ %407, %402 ], [ %401, %399 ]
  %405 = load i8, i8* %404, align 1
  store i8 %405, i8* %403, align 1
  %406 = getelementptr inbounds i8, i8* %403, i64 1
  %407 = getelementptr inbounds i8, i8* %404, i64 1
  %408 = icmp eq i8* %312, %406
  br i1 %408, label %409, label %402, !llvm.loop !28

409:                                              ; preds = %402, %397
  %410 = ptrtoint i8* %311 to i64
  %411 = load i8*, i8** %7, align 8
  %412 = icmp eq i8* %411, %1
  br i1 %412, label %522, label %413

413:                                              ; preds = %409
  %414 = ptrtoint i8* %411 to i64
  %415 = ptrtoint i8* %1 to i64
  %416 = sub i64 %415, %414
  %417 = icmp ult i64 %416, 16
  br i1 %417, label %512, label %418

418:                                              ; preds = %413
  %419 = sub i64 %307, %5
  %420 = getelementptr i8, i8* %411, i64 %419
  %421 = ptrtoint i8* %420 to i64
  %422 = getelementptr i8, i8* %309, i64 %421
  %423 = icmp ult i8* %422, %1
  %424 = icmp ult i8* %411, %310
  %425 = and i1 %423, %424
  br i1 %425, label %512, label %426

426:                                              ; preds = %418
  %427 = and i64 %416, -16
  %428 = sub i64 0, %427
  %429 = getelementptr i8, i8* %310, i64 %428
  %430 = sub i64 0, %427
  %431 = getelementptr i8, i8* %1, i64 %430
  %432 = add i64 %427, -16
  %433 = lshr exact i64 %432, 4
  %434 = add nuw nsw i64 %433, 1
  %435 = and i64 %434, 3
  %436 = icmp ult i64 %432, 48
  br i1 %436, label %489, label %437

437:                                              ; preds = %426
  %438 = sub nsw i64 %434, %435
  %439 = getelementptr i8, i8* %310, i64 -1
  %440 = getelementptr inbounds i8, i8* %439, i64 -8
  %441 = getelementptr inbounds i8, i8* %1, i64 -16
  %442 = getelementptr inbounds i8, i8* %440, i64 -7
  %443 = getelementptr i8, i8* %310, i64 -1
  %444 = getelementptr inbounds i8, i8* %443, i64 -8
  %445 = getelementptr inbounds i8, i8* %1, i64 -16
  %446 = getelementptr inbounds i8, i8* %444, i64 -7
  %447 = getelementptr i8, i8* %310, i64 -1
  %448 = getelementptr inbounds i8, i8* %447, i64 -8
  %449 = getelementptr inbounds i8, i8* %1, i64 -16
  %450 = getelementptr inbounds i8, i8* %448, i64 -7
  %451 = getelementptr i8, i8* %310, i64 -1
  %452 = getelementptr inbounds i8, i8* %451, i64 -8
  %453 = getelementptr inbounds i8, i8* %1, i64 -16
  %454 = getelementptr inbounds i8, i8* %452, i64 -7
  br label %455

455:                                              ; preds = %455, %437
  %456 = phi i64 [ 0, %437 ], [ %486, %455 ]
  %457 = phi i64 [ %438, %437 ], [ %487, %455 ]
  %458 = sub i64 0, %456
  %459 = sub i64 0, %456
  %460 = getelementptr inbounds i8, i8* %441, i64 %459
  %461 = bitcast i8* %460 to <2 x i64>*
  %462 = load <2 x i64>, <2 x i64>* %461, align 1, !alias.scope !29
  %463 = getelementptr inbounds i8, i8* %442, i64 %458
  %464 = bitcast i8* %463 to <2 x i64>*
  store <2 x i64> %462, <2 x i64>* %464, align 1, !alias.scope !32, !noalias !29
  %465 = sub nuw nsw i64 -16, %456
  %466 = sub nuw nsw i64 -16, %456
  %467 = getelementptr inbounds i8, i8* %445, i64 %466
  %468 = bitcast i8* %467 to <2 x i64>*
  %469 = load <2 x i64>, <2 x i64>* %468, align 1, !alias.scope !29
  %470 = getelementptr inbounds i8, i8* %446, i64 %465
  %471 = bitcast i8* %470 to <2 x i64>*
  store <2 x i64> %469, <2 x i64>* %471, align 1, !alias.scope !32, !noalias !29
  %472 = sub nuw nsw i64 -32, %456
  %473 = sub nuw nsw i64 -32, %456
  %474 = getelementptr inbounds i8, i8* %449, i64 %473
  %475 = bitcast i8* %474 to <2 x i64>*
  %476 = load <2 x i64>, <2 x i64>* %475, align 1, !alias.scope !29
  %477 = getelementptr inbounds i8, i8* %450, i64 %472
  %478 = bitcast i8* %477 to <2 x i64>*
  store <2 x i64> %476, <2 x i64>* %478, align 1, !alias.scope !32, !noalias !29
  %479 = sub nuw nsw i64 -48, %456
  %480 = sub nuw nsw i64 -48, %456
  %481 = getelementptr inbounds i8, i8* %453, i64 %480
  %482 = bitcast i8* %481 to <2 x i64>*
  %483 = load <2 x i64>, <2 x i64>* %482, align 1, !alias.scope !29
  %484 = getelementptr inbounds i8, i8* %454, i64 %479
  %485 = bitcast i8* %484 to <2 x i64>*
  store <2 x i64> %483, <2 x i64>* %485, align 1, !alias.scope !32, !noalias !29
  %486 = add i64 %456, 64
  %487 = add i64 %457, -4
  %488 = icmp eq i64 %487, 0
  br i1 %488, label %489, label %455, !llvm.loop !34

489:                                              ; preds = %455, %426
  %490 = phi i64 [ 0, %426 ], [ %486, %455 ]
  %491 = icmp eq i64 %435, 0
  br i1 %491, label %510, label %492

492:                                              ; preds = %489
  %493 = getelementptr i8, i8* %310, i64 -1
  %494 = getelementptr inbounds i8, i8* %493, i64 -8
  %495 = getelementptr inbounds i8, i8* %1, i64 -16
  %496 = getelementptr inbounds i8, i8* %494, i64 -7
  br label %497

497:                                              ; preds = %497, %492
  %498 = phi i64 [ %490, %492 ], [ %507, %497 ]
  %499 = phi i64 [ %435, %492 ], [ %508, %497 ]
  %500 = sub i64 0, %498
  %501 = sub i64 0, %498
  %502 = getelementptr inbounds i8, i8* %495, i64 %501
  %503 = bitcast i8* %502 to <2 x i64>*
  %504 = load <2 x i64>, <2 x i64>* %503, align 1, !alias.scope !29
  %505 = getelementptr inbounds i8, i8* %496, i64 %500
  %506 = bitcast i8* %505 to <2 x i64>*
  store <2 x i64> %504, <2 x i64>* %506, align 1, !alias.scope !32, !noalias !29
  %507 = add i64 %498, 16
  %508 = add i64 %499, -1
  %509 = icmp eq i64 %508, 0
  br i1 %509, label %510, label %497, !llvm.loop !35

510:                                              ; preds = %497, %489
  %511 = icmp eq i64 %416, %427
  br i1 %511, label %522, label %512

512:                                              ; preds = %510, %418, %413
  %513 = phi i8* [ %310, %418 ], [ %310, %413 ], [ %429, %510 ]
  %514 = phi i8* [ %1, %418 ], [ %1, %413 ], [ %431, %510 ]
  br label %515

515:                                              ; preds = %512, %515
  %516 = phi i8* [ %518, %515 ], [ %513, %512 ]
  %517 = phi i8* [ %519, %515 ], [ %514, %512 ]
  %518 = getelementptr inbounds i8, i8* %516, i64 -1
  %519 = getelementptr inbounds i8, i8* %517, i64 -1
  %520 = load i8, i8* %519, align 1
  store i8 %520, i8* %518, align 1
  %521 = icmp eq i8* %519, %411
  br i1 %521, label %522, label %515, !llvm.loop !36

522:                                              ; preds = %515, %510, %409
  %523 = phi i8* [ %310, %409 ], [ %429, %510 ], [ %518, %515 ]
  %524 = load i8*, i8** %15, align 8
  %525 = icmp eq i8* %524, %1
  br i1 %525, label %631, label %526

526:                                              ; preds = %522
  %527 = ptrtoint i8* %524 to i64
  %528 = sub i64 %527, %5
  %529 = icmp ult i64 %528, 32
  br i1 %529, label %621, label %530

530:                                              ; preds = %526
  %531 = add i64 %307, %8
  %532 = sub i64 %531, %5
  %533 = sub i64 %532, %6
  %534 = getelementptr i8, i8* %524, i64 %533
  %535 = ptrtoint i8* %534 to i64
  %536 = getelementptr i8, i8* %309, i64 %535
  %537 = icmp ult i8* %312, %524
  %538 = icmp ugt i8* %536, %1
  %539 = and i1 %537, %538
  br i1 %539, label %621, label %540

540:                                              ; preds = %530
  %541 = and i64 %528, -32
  %542 = getelementptr i8, i8* %312, i64 %541
  %543 = getelementptr i8, i8* %1, i64 %541
  %544 = add i64 %541, -32
  %545 = lshr exact i64 %544, 5
  %546 = add nuw nsw i64 %545, 1
  %547 = and i64 %546, 3
  %548 = icmp ult i64 %544, 96
  br i1 %548, label %600, label %549

549:                                              ; preds = %540
  %550 = sub nsw i64 %546, %547
  br label %551

551:                                              ; preds = %551, %549
  %552 = phi i64 [ 0, %549 ], [ %597, %551 ]
  %553 = phi i64 [ %550, %549 ], [ %598, %551 ]
  %554 = getelementptr i8, i8* %312, i64 %552
  %555 = getelementptr i8, i8* %1, i64 %552
  %556 = bitcast i8* %555 to <16 x i8>*
  %557 = load <16 x i8>, <16 x i8>* %556, align 1, !alias.scope !37
  %558 = getelementptr i8, i8* %555, i64 16
  %559 = bitcast i8* %558 to <16 x i8>*
  %560 = load <16 x i8>, <16 x i8>* %559, align 1, !alias.scope !37
  %561 = bitcast i8* %554 to <16 x i8>*
  store <16 x i8> %557, <16 x i8>* %561, align 1, !alias.scope !40, !noalias !37
  %562 = getelementptr i8, i8* %554, i64 16
  %563 = bitcast i8* %562 to <16 x i8>*
  store <16 x i8> %560, <16 x i8>* %563, align 1, !alias.scope !40, !noalias !37
  %564 = or i64 %552, 32
  %565 = getelementptr i8, i8* %312, i64 %564
  %566 = getelementptr i8, i8* %1, i64 %564
  %567 = bitcast i8* %566 to <16 x i8>*
  %568 = load <16 x i8>, <16 x i8>* %567, align 1, !alias.scope !37
  %569 = getelementptr i8, i8* %566, i64 16
  %570 = bitcast i8* %569 to <16 x i8>*
  %571 = load <16 x i8>, <16 x i8>* %570, align 1, !alias.scope !37
  %572 = bitcast i8* %565 to <16 x i8>*
  store <16 x i8> %568, <16 x i8>* %572, align 1, !alias.scope !40, !noalias !37
  %573 = getelementptr i8, i8* %565, i64 16
  %574 = bitcast i8* %573 to <16 x i8>*
  store <16 x i8> %571, <16 x i8>* %574, align 1, !alias.scope !40, !noalias !37
  %575 = or i64 %552, 64
  %576 = getelementptr i8, i8* %312, i64 %575
  %577 = getelementptr i8, i8* %1, i64 %575
  %578 = bitcast i8* %577 to <16 x i8>*
  %579 = load <16 x i8>, <16 x i8>* %578, align 1, !alias.scope !37
  %580 = getelementptr i8, i8* %577, i64 16
  %581 = bitcast i8* %580 to <16 x i8>*
  %582 = load <16 x i8>, <16 x i8>* %581, align 1, !alias.scope !37
  %583 = bitcast i8* %576 to <16 x i8>*
  store <16 x i8> %579, <16 x i8>* %583, align 1, !alias.scope !40, !noalias !37
  %584 = getelementptr i8, i8* %576, i64 16
  %585 = bitcast i8* %584 to <16 x i8>*
  store <16 x i8> %582, <16 x i8>* %585, align 1, !alias.scope !40, !noalias !37
  %586 = or i64 %552, 96
  %587 = getelementptr i8, i8* %312, i64 %586
  %588 = getelementptr i8, i8* %1, i64 %586
  %589 = bitcast i8* %588 to <16 x i8>*
  %590 = load <16 x i8>, <16 x i8>* %589, align 1, !alias.scope !37
  %591 = getelementptr i8, i8* %588, i64 16
  %592 = bitcast i8* %591 to <16 x i8>*
  %593 = load <16 x i8>, <16 x i8>* %592, align 1, !alias.scope !37
  %594 = bitcast i8* %587 to <16 x i8>*
  store <16 x i8> %590, <16 x i8>* %594, align 1, !alias.scope !40, !noalias !37
  %595 = getelementptr i8, i8* %587, i64 16
  %596 = bitcast i8* %595 to <16 x i8>*
  store <16 x i8> %593, <16 x i8>* %596, align 1, !alias.scope !40, !noalias !37
  %597 = add i64 %552, 128
  %598 = add i64 %553, -4
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %600, label %551, !llvm.loop !42

600:                                              ; preds = %551, %540
  %601 = phi i64 [ 0, %540 ], [ %597, %551 ]
  %602 = icmp eq i64 %547, 0
  br i1 %602, label %619, label %603

603:                                              ; preds = %600, %603
  %604 = phi i64 [ %616, %603 ], [ %601, %600 ]
  %605 = phi i64 [ %617, %603 ], [ %547, %600 ]
  %606 = getelementptr i8, i8* %312, i64 %604
  %607 = getelementptr i8, i8* %1, i64 %604
  %608 = bitcast i8* %607 to <16 x i8>*
  %609 = load <16 x i8>, <16 x i8>* %608, align 1, !alias.scope !37
  %610 = getelementptr i8, i8* %607, i64 16
  %611 = bitcast i8* %610 to <16 x i8>*
  %612 = load <16 x i8>, <16 x i8>* %611, align 1, !alias.scope !37
  %613 = bitcast i8* %606 to <16 x i8>*
  store <16 x i8> %609, <16 x i8>* %613, align 1, !alias.scope !40, !noalias !37
  %614 = getelementptr i8, i8* %606, i64 16
  %615 = bitcast i8* %614 to <16 x i8>*
  store <16 x i8> %612, <16 x i8>* %615, align 1, !alias.scope !40, !noalias !37
  %616 = add i64 %604, 32
  %617 = add i64 %605, -1
  %618 = icmp eq i64 %617, 0
  br i1 %618, label %619, label %603, !llvm.loop !43

619:                                              ; preds = %603, %600
  %620 = icmp eq i64 %528, %541
  br i1 %620, label %631, label %621

621:                                              ; preds = %619, %530, %526
  %622 = phi i8* [ %312, %530 ], [ %312, %526 ], [ %542, %619 ]
  %623 = phi i8* [ %1, %530 ], [ %1, %526 ], [ %543, %619 ]
  br label %624

624:                                              ; preds = %621, %624
  %625 = phi i8* [ %629, %624 ], [ %622, %621 ]
  %626 = phi i8* [ %628, %624 ], [ %623, %621 ]
  %627 = load i8, i8* %626, align 1
  store i8 %627, i8* %625, align 1
  %628 = getelementptr inbounds i8, i8* %626, i64 1
  %629 = getelementptr inbounds i8, i8* %625, i64 1
  %630 = icmp eq i8* %628, %524
  br i1 %630, label %631, label %624, !llvm.loop !44

631:                                              ; preds = %624, %619, %522
  %632 = phi i8* [ %312, %522 ], [ %542, %619 ], [ %629, %624 ]
  %633 = ptrtoint i8* %523 to i64
  %634 = ptrtoint i8* %632 to i64
  %635 = load i8*, i8** %7, align 8
  store i64 %633, i64* %271, align 8
  store i64 %634, i64* %270, align 8
  store i64 %410, i64* %13, align 8
  %636 = icmp eq i8* %635, null
  br i1 %636, label %647, label %637

637:                                              ; preds = %631
  %638 = getelementptr inbounds %"class.base::StackAllocator.3", %"class.base::StackAllocator.3"* %269, i64 0, i32 0
  %639 = load %"struct.base::StackAllocator<unsigned char, 5>::Source"*, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %638, align 8
  %640 = icmp ne %"struct.base::StackAllocator<unsigned char, 5>::Source"* %639, null
  %641 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %639, i64 0, i32 0, i64 0
  %642 = icmp eq i8* %641, %635
  %643 = and i1 %640, %642
  br i1 %643, label %644, label %646

644:                                              ; preds = %637
  %645 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %639, i64 0, i32 1
  store i8 0, i8* %645, align 1
  br label %647

646:                                              ; preds = %637
  tail call void @_ZdlPv(i8* nonnull %635) #9
  br label %647

647:                                              ; preds = %646, %644, %631, %136, %263, %267, %4
  %648 = phi i8* [ %1, %4 ], [ %1, %267 ], [ %1, %263 ], [ %1, %136 ], [ %310, %631 ], [ %310, %644 ], [ %310, %646 ]
  ret i8* %648
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm64EEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_(%"class.std::__1::vector"*, i8*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %2 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %8 = ptrtoint i8* %3 to i64
  %9 = sub i64 %8, %6
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %647

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  br i1 %19, label %268, label %20

20:                                               ; preds = %11
  %21 = bitcast i8** %15 to i64*
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %141

24:                                               ; preds = %20
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = icmp eq i8* %25, %3
  br i1 %26, label %136, label %27

27:                                               ; preds = %24
  %28 = sub i64 %5, %6
  %29 = sub i64 %28, %17
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = icmp ult i8* %30, inttoptr (i64 32 to i8*)
  br i1 %32, label %123, label %33

33:                                               ; preds = %27
  %34 = sub i64 %5, %6
  %35 = sub i64 %34, %17
  %36 = getelementptr i8, i8* %3, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = getelementptr i8, i8* %16, i64 %37
  %39 = icmp ult i8* %16, %3
  %40 = icmp ult i8* %25, %38
  %41 = and i1 %39, %40
  br i1 %41, label %123, label %42

42:                                               ; preds = %33
  %43 = and i64 %31, -32
  %44 = getelementptr i8, i8* %16, i64 %43
  %45 = getelementptr i8, i8* %25, i64 %43
  %46 = add i64 %43, -32
  %47 = lshr exact i64 %46, 5
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 3
  %50 = icmp ult i64 %46, 96
  br i1 %50, label %102, label %51

51:                                               ; preds = %42
  %52 = sub nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %99, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %100, %53 ]
  %56 = getelementptr i8, i8* %16, i64 %54
  %57 = getelementptr i8, i8* %25, i64 %54
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !45
  %60 = getelementptr i8, i8* %57, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !45
  %63 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %63, align 1, !alias.scope !48, !noalias !45
  %64 = getelementptr i8, i8* %56, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %65, align 1, !alias.scope !48, !noalias !45
  %66 = or i64 %54, 32
  %67 = getelementptr i8, i8* %16, i64 %66
  %68 = getelementptr i8, i8* %25, i64 %66
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !45
  %71 = getelementptr i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !45
  %74 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !48, !noalias !45
  %75 = getelementptr i8, i8* %67, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !alias.scope !48, !noalias !45
  %77 = or i64 %54, 64
  %78 = getelementptr i8, i8* %16, i64 %77
  %79 = getelementptr i8, i8* %25, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !45
  %82 = getelementptr i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !45
  %85 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !48, !noalias !45
  %86 = getelementptr i8, i8* %78, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !48, !noalias !45
  %88 = or i64 %54, 96
  %89 = getelementptr i8, i8* %16, i64 %88
  %90 = getelementptr i8, i8* %25, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !45
  %93 = getelementptr i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !45
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !48, !noalias !45
  %97 = getelementptr i8, i8* %89, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !48, !noalias !45
  %99 = add i64 %54, 128
  %100 = add i64 %55, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %53, !llvm.loop !50

102:                                              ; preds = %53, %42
  %103 = phi i64 [ 0, %42 ], [ %99, %53 ]
  %104 = icmp eq i64 %49, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %118, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %119, %105 ], [ %49, %102 ]
  %108 = getelementptr i8, i8* %16, i64 %106
  %109 = getelementptr i8, i8* %25, i64 %106
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !45
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !45
  %115 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !48, !noalias !45
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !48, !noalias !45
  %118 = add i64 %106, 32
  %119 = add i64 %107, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !51

121:                                              ; preds = %105, %102
  %122 = icmp eq i64 %43, %31
  br i1 %122, label %133, label %123

123:                                              ; preds = %121, %33, %27
  %124 = phi i8* [ %16, %33 ], [ %16, %27 ], [ %44, %121 ]
  %125 = phi i8* [ %25, %33 ], [ %25, %27 ], [ %45, %121 ]
  br label %126

126:                                              ; preds = %123, %126
  %127 = phi i8* [ %131, %126 ], [ %124, %123 ]
  %128 = phi i8* [ %130, %126 ], [ %125, %123 ]
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %127, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 1
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  %132 = icmp eq i8* %130, %3
  br i1 %132, label %133, label %126, !llvm.loop !52

133:                                              ; preds = %126, %121
  %134 = phi i8* [ %44, %121 ], [ %131, %126 ]
  %135 = ptrtoint i8* %134 to i64
  br label %136

136:                                              ; preds = %133, %24
  %137 = phi i64 [ %17, %24 ], [ %135, %133 ]
  store i64 %137, i64* %21, align 8
  %138 = icmp sgt i64 %22, 0
  br i1 %138, label %139, label %647

139:                                              ; preds = %136
  %140 = inttoptr i64 %137 to i8*
  br label %141

141:                                              ; preds = %139, %20
  %142 = phi i64 [ %137, %139 ], [ %17, %20 ]
  %143 = phi i8* [ %140, %139 ], [ %16, %20 ]
  %144 = phi i8* [ %25, %139 ], [ %3, %20 ]
  %145 = getelementptr inbounds i8, i8* %1, i64 %9
  %146 = ptrtoint i8* %145 to i64
  %147 = sub i64 %142, %146
  %148 = getelementptr inbounds i8, i8* %1, i64 %147
  %149 = icmp ult i8* %148, %16
  br i1 %149, label %150, label %250

150:                                              ; preds = %141
  %151 = sub i64 %9, %142
  %152 = getelementptr i8, i8* %16, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp ult i8* %152, inttoptr (i64 32 to i8*)
  br i1 %154, label %155, label %158

155:                                              ; preds = %245, %158, %150
  %156 = phi i8* [ %148, %158 ], [ %148, %150 ], [ %168, %245 ]
  %157 = phi i8* [ %143, %158 ], [ %143, %150 ], [ %169, %245 ]
  br label %256

158:                                              ; preds = %150
  %159 = sub i64 %9, %142
  %160 = getelementptr i8, i8* %16, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = getelementptr i8, i8* %143, i64 %161
  %163 = icmp ult i8* %143, %16
  %164 = icmp ult i8* %148, %162
  %165 = and i1 %163, %164
  br i1 %165, label %155, label %166

166:                                              ; preds = %158
  %167 = and i64 %153, -32
  %168 = getelementptr i8, i8* %148, i64 %167
  %169 = getelementptr i8, i8* %143, i64 %167
  %170 = add i64 %167, -32
  %171 = lshr exact i64 %170, 5
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp ult i64 %170, 96
  br i1 %174, label %226, label %175

175:                                              ; preds = %166
  %176 = sub nsw i64 %172, %173
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi i64 [ 0, %175 ], [ %223, %177 ]
  %179 = phi i64 [ %176, %175 ], [ %224, %177 ]
  %180 = getelementptr i8, i8* %148, i64 %178
  %181 = getelementptr i8, i8* %143, i64 %178
  %182 = bitcast i8* %180 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !53
  %184 = getelementptr i8, i8* %180, i64 16
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !53
  %187 = bitcast i8* %181 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %187, align 1, !alias.scope !56, !noalias !53
  %188 = getelementptr i8, i8* %181, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %189, align 1, !alias.scope !56, !noalias !53
  %190 = or i64 %178, 32
  %191 = getelementptr i8, i8* %148, i64 %190
  %192 = getelementptr i8, i8* %143, i64 %190
  %193 = bitcast i8* %191 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !53
  %195 = getelementptr i8, i8* %191, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !53
  %198 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %198, align 1, !alias.scope !56, !noalias !53
  %199 = getelementptr i8, i8* %192, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %200, align 1, !alias.scope !56, !noalias !53
  %201 = or i64 %178, 64
  %202 = getelementptr i8, i8* %148, i64 %201
  %203 = getelementptr i8, i8* %143, i64 %201
  %204 = bitcast i8* %202 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !53
  %206 = getelementptr i8, i8* %202, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1, !alias.scope !53
  %209 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %209, align 1, !alias.scope !56, !noalias !53
  %210 = getelementptr i8, i8* %203, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %211, align 1, !alias.scope !56, !noalias !53
  %212 = or i64 %178, 96
  %213 = getelementptr i8, i8* %148, i64 %212
  %214 = getelementptr i8, i8* %143, i64 %212
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !53
  %217 = getelementptr i8, i8* %213, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !53
  %220 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !56, !noalias !53
  %221 = getelementptr i8, i8* %214, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !56, !noalias !53
  %223 = add i64 %178, 128
  %224 = add i64 %179, -4
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %177, !llvm.loop !58

226:                                              ; preds = %177, %166
  %227 = phi i64 [ 0, %166 ], [ %223, %177 ]
  %228 = icmp eq i64 %173, 0
  br i1 %228, label %245, label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %242, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %243, %229 ], [ %173, %226 ]
  %232 = getelementptr i8, i8* %148, i64 %230
  %233 = getelementptr i8, i8* %143, i64 %230
  %234 = bitcast i8* %232 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !53
  %236 = getelementptr i8, i8* %232, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !53
  %239 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %239, align 1, !alias.scope !56, !noalias !53
  %240 = getelementptr i8, i8* %233, i64 16
  %241 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %241, align 1, !alias.scope !56, !noalias !53
  %242 = add i64 %230, 32
  %243 = add i64 %231, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %229, !llvm.loop !59

245:                                              ; preds = %229, %226
  %246 = icmp eq i64 %167, %153
  br i1 %246, label %247, label %155

247:                                              ; preds = %256, %245
  %248 = phi i8* [ %169, %245 ], [ %261, %256 ]
  %249 = ptrtoint i8* %248 to i64
  br label %250

250:                                              ; preds = %247, %141
  %251 = phi i64 [ %249, %247 ], [ %142, %141 ]
  store i64 %251, i64* %21, align 8
  %252 = icmp eq i64 %147, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %250
  %254 = sub i64 0, %147
  %255 = getelementptr inbounds i8, i8* %143, i64 %254
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %255, i8* align 1 %1, i64 %147, i1 false) #8
  br label %263

256:                                              ; preds = %155, %256
  %257 = phi i8* [ %260, %256 ], [ %156, %155 ]
  %258 = phi i8* [ %261, %256 ], [ %157, %155 ]
  %259 = load i8, i8* %257, align 1
  store i8 %259, i8* %258, align 1
  %260 = getelementptr inbounds i8, i8* %257, i64 1
  %261 = getelementptr inbounds i8, i8* %258, i64 1
  %262 = icmp eq i8* %260, %16
  br i1 %262, label %247, label %256, !llvm.loop !60

263:                                              ; preds = %250, %253
  %264 = ptrtoint i8* %144 to i64
  %265 = sub i64 %264, %6
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %647, label %267

267:                                              ; preds = %263
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %265, i1 false) #8
  br label %647

268:                                              ; preds = %11
  %269 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 1, i32 0
  %270 = bitcast i8** %15 to i64*
  %271 = bitcast %"class.std::__1::vector"* %0 to i64*
  %272 = load i64, i64* %271, align 8
  %273 = sub i64 %17, %272
  %274 = add i64 %273, %9
  %275 = icmp slt i64 %274, 0
  br i1 %275, label %276, label %278

276:                                              ; preds = %268
  %277 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %277) #10
  unreachable

278:                                              ; preds = %268
  %279 = sub i64 %14, %272
  %280 = icmp ult i64 %279, 4611686018427387903
  br i1 %280, label %283, label %281

281:                                              ; preds = %278
  %282 = sub i64 %5, %272
  br label %289

283:                                              ; preds = %278
  %284 = shl i64 %279, 1
  %285 = icmp ult i64 %284, %274
  %286 = select i1 %285, i64 %274, i64 %284
  %287 = sub i64 %5, %272
  %288 = icmp eq i64 %286, 0
  br i1 %288, label %306, label %289

289:                                              ; preds = %281, %283
  %290 = phi i64 [ %282, %281 ], [ %287, %283 ]
  %291 = phi i64 [ 9223372036854775807, %281 ], [ %286, %283 ]
  %292 = getelementptr inbounds %"class.base::StackAllocator", %"class.base::StackAllocator"* %269, i64 0, i32 0
  %293 = load %"struct.base::StackAllocator<unsigned char, 64>::Source"*, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %292, align 8
  %294 = icmp eq %"struct.base::StackAllocator<unsigned char, 64>::Source"* %293, null
  br i1 %294, label %304, label %295

295:                                              ; preds = %289
  %296 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %293, i64 0, i32 1
  %297 = load i8, i8* %296, align 1, !range !20
  %298 = icmp eq i8 %297, 0
  %299 = icmp ult i64 %291, 65
  %300 = and i1 %299, %298
  br i1 %300, label %301, label %304

301:                                              ; preds = %295
  store i8 1, i8* %296, align 1
  %302 = load %"struct.base::StackAllocator<unsigned char, 64>::Source"*, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %292, align 8
  %303 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %302, i64 0, i32 0, i64 0
  br label %306

304:                                              ; preds = %295, %289
  %305 = tail call i8* @_Znwm(i64 %291) #9
  br label %306

306:                                              ; preds = %283, %301, %304
  %307 = phi i64 [ %287, %283 ], [ %290, %301 ], [ %290, %304 ]
  %308 = phi i64 [ 0, %283 ], [ %291, %301 ], [ %291, %304 ]
  %309 = phi i8* [ null, %283 ], [ %303, %301 ], [ %305, %304 ]
  %310 = getelementptr inbounds i8, i8* %309, i64 %307
  %311 = getelementptr inbounds i8, i8* %309, i64 %308
  %312 = getelementptr inbounds i8, i8* %310, i64 %9
  %313 = icmp ult i64 %9, 32
  br i1 %313, label %399, label %314

314:                                              ; preds = %306
  %315 = icmp ult i8* %310, %3
  %316 = icmp ugt i8* %312, %2
  %317 = and i1 %315, %316
  br i1 %317, label %399, label %318

318:                                              ; preds = %314
  %319 = and i64 %9, -32
  %320 = getelementptr i8, i8* %310, i64 %319
  %321 = getelementptr i8, i8* %2, i64 %319
  %322 = add i64 %319, -32
  %323 = lshr exact i64 %322, 5
  %324 = add nuw nsw i64 %323, 1
  %325 = and i64 %324, 3
  %326 = icmp ult i64 %322, 96
  br i1 %326, label %378, label %327

327:                                              ; preds = %318
  %328 = sub nsw i64 %324, %325
  br label %329

329:                                              ; preds = %329, %327
  %330 = phi i64 [ 0, %327 ], [ %375, %329 ]
  %331 = phi i64 [ %328, %327 ], [ %376, %329 ]
  %332 = getelementptr i8, i8* %310, i64 %330
  %333 = getelementptr i8, i8* %2, i64 %330
  %334 = bitcast i8* %333 to <16 x i8>*
  %335 = load <16 x i8>, <16 x i8>* %334, align 1, !alias.scope !61
  %336 = getelementptr i8, i8* %333, i64 16
  %337 = bitcast i8* %336 to <16 x i8>*
  %338 = load <16 x i8>, <16 x i8>* %337, align 1, !alias.scope !61
  %339 = bitcast i8* %332 to <16 x i8>*
  store <16 x i8> %335, <16 x i8>* %339, align 1, !alias.scope !64, !noalias !61
  %340 = getelementptr i8, i8* %332, i64 16
  %341 = bitcast i8* %340 to <16 x i8>*
  store <16 x i8> %338, <16 x i8>* %341, align 1, !alias.scope !64, !noalias !61
  %342 = or i64 %330, 32
  %343 = getelementptr i8, i8* %310, i64 %342
  %344 = getelementptr i8, i8* %2, i64 %342
  %345 = bitcast i8* %344 to <16 x i8>*
  %346 = load <16 x i8>, <16 x i8>* %345, align 1, !alias.scope !61
  %347 = getelementptr i8, i8* %344, i64 16
  %348 = bitcast i8* %347 to <16 x i8>*
  %349 = load <16 x i8>, <16 x i8>* %348, align 1, !alias.scope !61
  %350 = bitcast i8* %343 to <16 x i8>*
  store <16 x i8> %346, <16 x i8>* %350, align 1, !alias.scope !64, !noalias !61
  %351 = getelementptr i8, i8* %343, i64 16
  %352 = bitcast i8* %351 to <16 x i8>*
  store <16 x i8> %349, <16 x i8>* %352, align 1, !alias.scope !64, !noalias !61
  %353 = or i64 %330, 64
  %354 = getelementptr i8, i8* %310, i64 %353
  %355 = getelementptr i8, i8* %2, i64 %353
  %356 = bitcast i8* %355 to <16 x i8>*
  %357 = load <16 x i8>, <16 x i8>* %356, align 1, !alias.scope !61
  %358 = getelementptr i8, i8* %355, i64 16
  %359 = bitcast i8* %358 to <16 x i8>*
  %360 = load <16 x i8>, <16 x i8>* %359, align 1, !alias.scope !61
  %361 = bitcast i8* %354 to <16 x i8>*
  store <16 x i8> %357, <16 x i8>* %361, align 1, !alias.scope !64, !noalias !61
  %362 = getelementptr i8, i8* %354, i64 16
  %363 = bitcast i8* %362 to <16 x i8>*
  store <16 x i8> %360, <16 x i8>* %363, align 1, !alias.scope !64, !noalias !61
  %364 = or i64 %330, 96
  %365 = getelementptr i8, i8* %310, i64 %364
  %366 = getelementptr i8, i8* %2, i64 %364
  %367 = bitcast i8* %366 to <16 x i8>*
  %368 = load <16 x i8>, <16 x i8>* %367, align 1, !alias.scope !61
  %369 = getelementptr i8, i8* %366, i64 16
  %370 = bitcast i8* %369 to <16 x i8>*
  %371 = load <16 x i8>, <16 x i8>* %370, align 1, !alias.scope !61
  %372 = bitcast i8* %365 to <16 x i8>*
  store <16 x i8> %368, <16 x i8>* %372, align 1, !alias.scope !64, !noalias !61
  %373 = getelementptr i8, i8* %365, i64 16
  %374 = bitcast i8* %373 to <16 x i8>*
  store <16 x i8> %371, <16 x i8>* %374, align 1, !alias.scope !64, !noalias !61
  %375 = add i64 %330, 128
  %376 = add i64 %331, -4
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %378, label %329, !llvm.loop !66

378:                                              ; preds = %329, %318
  %379 = phi i64 [ 0, %318 ], [ %375, %329 ]
  %380 = icmp eq i64 %325, 0
  br i1 %380, label %397, label %381

381:                                              ; preds = %378, %381
  %382 = phi i64 [ %394, %381 ], [ %379, %378 ]
  %383 = phi i64 [ %395, %381 ], [ %325, %378 ]
  %384 = getelementptr i8, i8* %310, i64 %382
  %385 = getelementptr i8, i8* %2, i64 %382
  %386 = bitcast i8* %385 to <16 x i8>*
  %387 = load <16 x i8>, <16 x i8>* %386, align 1, !alias.scope !61
  %388 = getelementptr i8, i8* %385, i64 16
  %389 = bitcast i8* %388 to <16 x i8>*
  %390 = load <16 x i8>, <16 x i8>* %389, align 1, !alias.scope !61
  %391 = bitcast i8* %384 to <16 x i8>*
  store <16 x i8> %387, <16 x i8>* %391, align 1, !alias.scope !64, !noalias !61
  %392 = getelementptr i8, i8* %384, i64 16
  %393 = bitcast i8* %392 to <16 x i8>*
  store <16 x i8> %390, <16 x i8>* %393, align 1, !alias.scope !64, !noalias !61
  %394 = add i64 %382, 32
  %395 = add i64 %383, -1
  %396 = icmp eq i64 %395, 0
  br i1 %396, label %397, label %381, !llvm.loop !67

397:                                              ; preds = %381, %378
  %398 = icmp eq i64 %9, %319
  br i1 %398, label %409, label %399

399:                                              ; preds = %397, %314, %306
  %400 = phi i8* [ %310, %314 ], [ %310, %306 ], [ %320, %397 ]
  %401 = phi i8* [ %2, %314 ], [ %2, %306 ], [ %321, %397 ]
  br label %402

402:                                              ; preds = %399, %402
  %403 = phi i8* [ %406, %402 ], [ %400, %399 ]
  %404 = phi i8* [ %407, %402 ], [ %401, %399 ]
  %405 = load i8, i8* %404, align 1
  store i8 %405, i8* %403, align 1
  %406 = getelementptr inbounds i8, i8* %403, i64 1
  %407 = getelementptr inbounds i8, i8* %404, i64 1
  %408 = icmp eq i8* %312, %406
  br i1 %408, label %409, label %402, !llvm.loop !68

409:                                              ; preds = %402, %397
  %410 = ptrtoint i8* %311 to i64
  %411 = load i8*, i8** %7, align 8
  %412 = icmp eq i8* %411, %1
  br i1 %412, label %522, label %413

413:                                              ; preds = %409
  %414 = ptrtoint i8* %411 to i64
  %415 = ptrtoint i8* %1 to i64
  %416 = sub i64 %415, %414
  %417 = icmp ult i64 %416, 16
  br i1 %417, label %512, label %418

418:                                              ; preds = %413
  %419 = sub i64 %307, %5
  %420 = getelementptr i8, i8* %411, i64 %419
  %421 = ptrtoint i8* %420 to i64
  %422 = getelementptr i8, i8* %309, i64 %421
  %423 = icmp ult i8* %422, %1
  %424 = icmp ult i8* %411, %310
  %425 = and i1 %423, %424
  br i1 %425, label %512, label %426

426:                                              ; preds = %418
  %427 = and i64 %416, -16
  %428 = sub i64 0, %427
  %429 = getelementptr i8, i8* %310, i64 %428
  %430 = sub i64 0, %427
  %431 = getelementptr i8, i8* %1, i64 %430
  %432 = add i64 %427, -16
  %433 = lshr exact i64 %432, 4
  %434 = add nuw nsw i64 %433, 1
  %435 = and i64 %434, 3
  %436 = icmp ult i64 %432, 48
  br i1 %436, label %489, label %437

437:                                              ; preds = %426
  %438 = sub nsw i64 %434, %435
  %439 = getelementptr i8, i8* %310, i64 -1
  %440 = getelementptr inbounds i8, i8* %439, i64 -8
  %441 = getelementptr inbounds i8, i8* %1, i64 -16
  %442 = getelementptr inbounds i8, i8* %440, i64 -7
  %443 = getelementptr i8, i8* %310, i64 -1
  %444 = getelementptr inbounds i8, i8* %443, i64 -8
  %445 = getelementptr inbounds i8, i8* %1, i64 -16
  %446 = getelementptr inbounds i8, i8* %444, i64 -7
  %447 = getelementptr i8, i8* %310, i64 -1
  %448 = getelementptr inbounds i8, i8* %447, i64 -8
  %449 = getelementptr inbounds i8, i8* %1, i64 -16
  %450 = getelementptr inbounds i8, i8* %448, i64 -7
  %451 = getelementptr i8, i8* %310, i64 -1
  %452 = getelementptr inbounds i8, i8* %451, i64 -8
  %453 = getelementptr inbounds i8, i8* %1, i64 -16
  %454 = getelementptr inbounds i8, i8* %452, i64 -7
  br label %455

455:                                              ; preds = %455, %437
  %456 = phi i64 [ 0, %437 ], [ %486, %455 ]
  %457 = phi i64 [ %438, %437 ], [ %487, %455 ]
  %458 = sub i64 0, %456
  %459 = sub i64 0, %456
  %460 = getelementptr inbounds i8, i8* %441, i64 %459
  %461 = bitcast i8* %460 to <2 x i64>*
  %462 = load <2 x i64>, <2 x i64>* %461, align 1, !alias.scope !69
  %463 = getelementptr inbounds i8, i8* %442, i64 %458
  %464 = bitcast i8* %463 to <2 x i64>*
  store <2 x i64> %462, <2 x i64>* %464, align 1, !alias.scope !72, !noalias !69
  %465 = sub nuw nsw i64 -16, %456
  %466 = sub nuw nsw i64 -16, %456
  %467 = getelementptr inbounds i8, i8* %445, i64 %466
  %468 = bitcast i8* %467 to <2 x i64>*
  %469 = load <2 x i64>, <2 x i64>* %468, align 1, !alias.scope !69
  %470 = getelementptr inbounds i8, i8* %446, i64 %465
  %471 = bitcast i8* %470 to <2 x i64>*
  store <2 x i64> %469, <2 x i64>* %471, align 1, !alias.scope !72, !noalias !69
  %472 = sub nuw nsw i64 -32, %456
  %473 = sub nuw nsw i64 -32, %456
  %474 = getelementptr inbounds i8, i8* %449, i64 %473
  %475 = bitcast i8* %474 to <2 x i64>*
  %476 = load <2 x i64>, <2 x i64>* %475, align 1, !alias.scope !69
  %477 = getelementptr inbounds i8, i8* %450, i64 %472
  %478 = bitcast i8* %477 to <2 x i64>*
  store <2 x i64> %476, <2 x i64>* %478, align 1, !alias.scope !72, !noalias !69
  %479 = sub nuw nsw i64 -48, %456
  %480 = sub nuw nsw i64 -48, %456
  %481 = getelementptr inbounds i8, i8* %453, i64 %480
  %482 = bitcast i8* %481 to <2 x i64>*
  %483 = load <2 x i64>, <2 x i64>* %482, align 1, !alias.scope !69
  %484 = getelementptr inbounds i8, i8* %454, i64 %479
  %485 = bitcast i8* %484 to <2 x i64>*
  store <2 x i64> %483, <2 x i64>* %485, align 1, !alias.scope !72, !noalias !69
  %486 = add i64 %456, 64
  %487 = add i64 %457, -4
  %488 = icmp eq i64 %487, 0
  br i1 %488, label %489, label %455, !llvm.loop !74

489:                                              ; preds = %455, %426
  %490 = phi i64 [ 0, %426 ], [ %486, %455 ]
  %491 = icmp eq i64 %435, 0
  br i1 %491, label %510, label %492

492:                                              ; preds = %489
  %493 = getelementptr i8, i8* %310, i64 -1
  %494 = getelementptr inbounds i8, i8* %493, i64 -8
  %495 = getelementptr inbounds i8, i8* %1, i64 -16
  %496 = getelementptr inbounds i8, i8* %494, i64 -7
  br label %497

497:                                              ; preds = %497, %492
  %498 = phi i64 [ %490, %492 ], [ %507, %497 ]
  %499 = phi i64 [ %435, %492 ], [ %508, %497 ]
  %500 = sub i64 0, %498
  %501 = sub i64 0, %498
  %502 = getelementptr inbounds i8, i8* %495, i64 %501
  %503 = bitcast i8* %502 to <2 x i64>*
  %504 = load <2 x i64>, <2 x i64>* %503, align 1, !alias.scope !69
  %505 = getelementptr inbounds i8, i8* %496, i64 %500
  %506 = bitcast i8* %505 to <2 x i64>*
  store <2 x i64> %504, <2 x i64>* %506, align 1, !alias.scope !72, !noalias !69
  %507 = add i64 %498, 16
  %508 = add i64 %499, -1
  %509 = icmp eq i64 %508, 0
  br i1 %509, label %510, label %497, !llvm.loop !75

510:                                              ; preds = %497, %489
  %511 = icmp eq i64 %416, %427
  br i1 %511, label %522, label %512

512:                                              ; preds = %510, %418, %413
  %513 = phi i8* [ %310, %418 ], [ %310, %413 ], [ %429, %510 ]
  %514 = phi i8* [ %1, %418 ], [ %1, %413 ], [ %431, %510 ]
  br label %515

515:                                              ; preds = %512, %515
  %516 = phi i8* [ %518, %515 ], [ %513, %512 ]
  %517 = phi i8* [ %519, %515 ], [ %514, %512 ]
  %518 = getelementptr inbounds i8, i8* %516, i64 -1
  %519 = getelementptr inbounds i8, i8* %517, i64 -1
  %520 = load i8, i8* %519, align 1
  store i8 %520, i8* %518, align 1
  %521 = icmp eq i8* %519, %411
  br i1 %521, label %522, label %515, !llvm.loop !76

522:                                              ; preds = %515, %510, %409
  %523 = phi i8* [ %310, %409 ], [ %429, %510 ], [ %518, %515 ]
  %524 = load i8*, i8** %15, align 8
  %525 = icmp eq i8* %524, %1
  br i1 %525, label %631, label %526

526:                                              ; preds = %522
  %527 = ptrtoint i8* %524 to i64
  %528 = sub i64 %527, %5
  %529 = icmp ult i64 %528, 32
  br i1 %529, label %621, label %530

530:                                              ; preds = %526
  %531 = add i64 %307, %8
  %532 = sub i64 %531, %5
  %533 = sub i64 %532, %6
  %534 = getelementptr i8, i8* %524, i64 %533
  %535 = ptrtoint i8* %534 to i64
  %536 = getelementptr i8, i8* %309, i64 %535
  %537 = icmp ult i8* %312, %524
  %538 = icmp ugt i8* %536, %1
  %539 = and i1 %537, %538
  br i1 %539, label %621, label %540

540:                                              ; preds = %530
  %541 = and i64 %528, -32
  %542 = getelementptr i8, i8* %312, i64 %541
  %543 = getelementptr i8, i8* %1, i64 %541
  %544 = add i64 %541, -32
  %545 = lshr exact i64 %544, 5
  %546 = add nuw nsw i64 %545, 1
  %547 = and i64 %546, 3
  %548 = icmp ult i64 %544, 96
  br i1 %548, label %600, label %549

549:                                              ; preds = %540
  %550 = sub nsw i64 %546, %547
  br label %551

551:                                              ; preds = %551, %549
  %552 = phi i64 [ 0, %549 ], [ %597, %551 ]
  %553 = phi i64 [ %550, %549 ], [ %598, %551 ]
  %554 = getelementptr i8, i8* %312, i64 %552
  %555 = getelementptr i8, i8* %1, i64 %552
  %556 = bitcast i8* %555 to <16 x i8>*
  %557 = load <16 x i8>, <16 x i8>* %556, align 1, !alias.scope !77
  %558 = getelementptr i8, i8* %555, i64 16
  %559 = bitcast i8* %558 to <16 x i8>*
  %560 = load <16 x i8>, <16 x i8>* %559, align 1, !alias.scope !77
  %561 = bitcast i8* %554 to <16 x i8>*
  store <16 x i8> %557, <16 x i8>* %561, align 1, !alias.scope !80, !noalias !77
  %562 = getelementptr i8, i8* %554, i64 16
  %563 = bitcast i8* %562 to <16 x i8>*
  store <16 x i8> %560, <16 x i8>* %563, align 1, !alias.scope !80, !noalias !77
  %564 = or i64 %552, 32
  %565 = getelementptr i8, i8* %312, i64 %564
  %566 = getelementptr i8, i8* %1, i64 %564
  %567 = bitcast i8* %566 to <16 x i8>*
  %568 = load <16 x i8>, <16 x i8>* %567, align 1, !alias.scope !77
  %569 = getelementptr i8, i8* %566, i64 16
  %570 = bitcast i8* %569 to <16 x i8>*
  %571 = load <16 x i8>, <16 x i8>* %570, align 1, !alias.scope !77
  %572 = bitcast i8* %565 to <16 x i8>*
  store <16 x i8> %568, <16 x i8>* %572, align 1, !alias.scope !80, !noalias !77
  %573 = getelementptr i8, i8* %565, i64 16
  %574 = bitcast i8* %573 to <16 x i8>*
  store <16 x i8> %571, <16 x i8>* %574, align 1, !alias.scope !80, !noalias !77
  %575 = or i64 %552, 64
  %576 = getelementptr i8, i8* %312, i64 %575
  %577 = getelementptr i8, i8* %1, i64 %575
  %578 = bitcast i8* %577 to <16 x i8>*
  %579 = load <16 x i8>, <16 x i8>* %578, align 1, !alias.scope !77
  %580 = getelementptr i8, i8* %577, i64 16
  %581 = bitcast i8* %580 to <16 x i8>*
  %582 = load <16 x i8>, <16 x i8>* %581, align 1, !alias.scope !77
  %583 = bitcast i8* %576 to <16 x i8>*
  store <16 x i8> %579, <16 x i8>* %583, align 1, !alias.scope !80, !noalias !77
  %584 = getelementptr i8, i8* %576, i64 16
  %585 = bitcast i8* %584 to <16 x i8>*
  store <16 x i8> %582, <16 x i8>* %585, align 1, !alias.scope !80, !noalias !77
  %586 = or i64 %552, 96
  %587 = getelementptr i8, i8* %312, i64 %586
  %588 = getelementptr i8, i8* %1, i64 %586
  %589 = bitcast i8* %588 to <16 x i8>*
  %590 = load <16 x i8>, <16 x i8>* %589, align 1, !alias.scope !77
  %591 = getelementptr i8, i8* %588, i64 16
  %592 = bitcast i8* %591 to <16 x i8>*
  %593 = load <16 x i8>, <16 x i8>* %592, align 1, !alias.scope !77
  %594 = bitcast i8* %587 to <16 x i8>*
  store <16 x i8> %590, <16 x i8>* %594, align 1, !alias.scope !80, !noalias !77
  %595 = getelementptr i8, i8* %587, i64 16
  %596 = bitcast i8* %595 to <16 x i8>*
  store <16 x i8> %593, <16 x i8>* %596, align 1, !alias.scope !80, !noalias !77
  %597 = add i64 %552, 128
  %598 = add i64 %553, -4
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %600, label %551, !llvm.loop !82

600:                                              ; preds = %551, %540
  %601 = phi i64 [ 0, %540 ], [ %597, %551 ]
  %602 = icmp eq i64 %547, 0
  br i1 %602, label %619, label %603

603:                                              ; preds = %600, %603
  %604 = phi i64 [ %616, %603 ], [ %601, %600 ]
  %605 = phi i64 [ %617, %603 ], [ %547, %600 ]
  %606 = getelementptr i8, i8* %312, i64 %604
  %607 = getelementptr i8, i8* %1, i64 %604
  %608 = bitcast i8* %607 to <16 x i8>*
  %609 = load <16 x i8>, <16 x i8>* %608, align 1, !alias.scope !77
  %610 = getelementptr i8, i8* %607, i64 16
  %611 = bitcast i8* %610 to <16 x i8>*
  %612 = load <16 x i8>, <16 x i8>* %611, align 1, !alias.scope !77
  %613 = bitcast i8* %606 to <16 x i8>*
  store <16 x i8> %609, <16 x i8>* %613, align 1, !alias.scope !80, !noalias !77
  %614 = getelementptr i8, i8* %606, i64 16
  %615 = bitcast i8* %614 to <16 x i8>*
  store <16 x i8> %612, <16 x i8>* %615, align 1, !alias.scope !80, !noalias !77
  %616 = add i64 %604, 32
  %617 = add i64 %605, -1
  %618 = icmp eq i64 %617, 0
  br i1 %618, label %619, label %603, !llvm.loop !83

619:                                              ; preds = %603, %600
  %620 = icmp eq i64 %528, %541
  br i1 %620, label %631, label %621

621:                                              ; preds = %619, %530, %526
  %622 = phi i8* [ %312, %530 ], [ %312, %526 ], [ %542, %619 ]
  %623 = phi i8* [ %1, %530 ], [ %1, %526 ], [ %543, %619 ]
  br label %624

624:                                              ; preds = %621, %624
  %625 = phi i8* [ %629, %624 ], [ %622, %621 ]
  %626 = phi i8* [ %628, %624 ], [ %623, %621 ]
  %627 = load i8, i8* %626, align 1
  store i8 %627, i8* %625, align 1
  %628 = getelementptr inbounds i8, i8* %626, i64 1
  %629 = getelementptr inbounds i8, i8* %625, i64 1
  %630 = icmp eq i8* %628, %524
  br i1 %630, label %631, label %624, !llvm.loop !84

631:                                              ; preds = %624, %619, %522
  %632 = phi i8* [ %312, %522 ], [ %542, %619 ], [ %629, %624 ]
  %633 = ptrtoint i8* %523 to i64
  %634 = ptrtoint i8* %632 to i64
  %635 = load i8*, i8** %7, align 8
  store i64 %633, i64* %271, align 8
  store i64 %634, i64* %270, align 8
  store i64 %410, i64* %13, align 8
  %636 = icmp eq i8* %635, null
  br i1 %636, label %647, label %637

637:                                              ; preds = %631
  %638 = getelementptr inbounds %"class.base::StackAllocator", %"class.base::StackAllocator"* %269, i64 0, i32 0
  %639 = load %"struct.base::StackAllocator<unsigned char, 64>::Source"*, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %638, align 8
  %640 = icmp ne %"struct.base::StackAllocator<unsigned char, 64>::Source"* %639, null
  %641 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %639, i64 0, i32 0, i64 0
  %642 = icmp eq i8* %641, %635
  %643 = and i1 %640, %642
  br i1 %643, label %644, label %646

644:                                              ; preds = %637
  %645 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %639, i64 0, i32 1
  store i8 0, i8* %645, align 1
  br label %647

646:                                              ; preds = %637
  tail call void @_ZdlPv(i8* nonnull %635) #9
  br label %647

647:                                              ; preds = %646, %644, %631, %136, %263, %267, %4
  %648 = phi i8* [ %1, %4 ], [ %1, %267 ], [ %1, %263 ], [ %1, %136 ], [ %310, %631 ], [ %310, %644 ], [ %310, %646 ]
  ret i8* %648
}

declare void @_ZN8perfetto11TracePacket8AddSliceEPKvm(%"class.perfetto::TracePacket"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm64EEEE6assignINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_(%"class.std::__1::vector"*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i8* %1 to i64
  %5 = ptrtoint i8* %2 to i64
  %6 = sub i64 %5, %4
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %0 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = icmp ugt i64 %6, %12
  %14 = inttoptr i64 %11 to i8*
  br i1 %13, label %145, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %11
  %20 = icmp ugt i64 %6, %19
  %21 = getelementptr inbounds i8, i8* %1, i64 %19
  %22 = select i1 %20, i8* %21, i8* %2
  %23 = ptrtoint i8* %22 to i64
  %24 = sub i64 %23, %4
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %15
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %1, i64 %24, i1 false) #8
  br label %27

27:                                               ; preds = %15, %26
  br i1 %20, label %28, label %143

28:                                               ; preds = %27
  %29 = load i64, i64* %17, align 8
  %30 = icmp eq i8* %22, %2
  br i1 %30, label %141, label %31

31:                                               ; preds = %28
  %32 = inttoptr i64 %29 to i8*
  %33 = sub i64 %11, %4
  %34 = sub i64 %33, %18
  %35 = getelementptr i8, i8* %2, i64 %34
  %36 = ptrtoint i8* %35 to i64
  %37 = icmp ult i8* %35, inttoptr (i64 32 to i8*)
  br i1 %37, label %128, label %38

38:                                               ; preds = %31
  %39 = sub i64 %11, %4
  %40 = sub i64 %39, %18
  %41 = getelementptr i8, i8* %2, i64 %40
  %42 = ptrtoint i8* %41 to i64
  %43 = getelementptr i8, i8* %32, i64 %42
  %44 = icmp ult i8* %32, %2
  %45 = icmp ult i8* %21, %43
  %46 = and i1 %44, %45
  br i1 %46, label %128, label %47

47:                                               ; preds = %38
  %48 = and i64 %36, -32
  %49 = getelementptr i8, i8* %32, i64 %48
  %50 = getelementptr i8, i8* %21, i64 %48
  %51 = add i64 %48, -32
  %52 = lshr exact i64 %51, 5
  %53 = add nuw nsw i64 %52, 1
  %54 = and i64 %53, 3
  %55 = icmp ult i64 %51, 96
  br i1 %55, label %107, label %56

56:                                               ; preds = %47
  %57 = sub nsw i64 %53, %54
  br label %58

58:                                               ; preds = %58, %56
  %59 = phi i64 [ 0, %56 ], [ %104, %58 ]
  %60 = phi i64 [ %57, %56 ], [ %105, %58 ]
  %61 = getelementptr i8, i8* %32, i64 %59
  %62 = getelementptr i8, i8* %21, i64 %59
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1, !alias.scope !85
  %65 = getelementptr i8, i8* %62, i64 16
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1, !alias.scope !85
  %68 = bitcast i8* %61 to <16 x i8>*
  store <16 x i8> %64, <16 x i8>* %68, align 1, !alias.scope !88, !noalias !85
  %69 = getelementptr i8, i8* %61, i64 16
  %70 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %70, align 1, !alias.scope !88, !noalias !85
  %71 = or i64 %59, 32
  %72 = getelementptr i8, i8* %32, i64 %71
  %73 = getelementptr i8, i8* %21, i64 %71
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1, !alias.scope !85
  %76 = getelementptr i8, i8* %73, i64 16
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1, !alias.scope !85
  %79 = bitcast i8* %72 to <16 x i8>*
  store <16 x i8> %75, <16 x i8>* %79, align 1, !alias.scope !88, !noalias !85
  %80 = getelementptr i8, i8* %72, i64 16
  %81 = bitcast i8* %80 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %81, align 1, !alias.scope !88, !noalias !85
  %82 = or i64 %59, 64
  %83 = getelementptr i8, i8* %32, i64 %82
  %84 = getelementptr i8, i8* %21, i64 %82
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1, !alias.scope !85
  %87 = getelementptr i8, i8* %84, i64 16
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1, !alias.scope !85
  %90 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %86, <16 x i8>* %90, align 1, !alias.scope !88, !noalias !85
  %91 = getelementptr i8, i8* %83, i64 16
  %92 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %89, <16 x i8>* %92, align 1, !alias.scope !88, !noalias !85
  %93 = or i64 %59, 96
  %94 = getelementptr i8, i8* %32, i64 %93
  %95 = getelementptr i8, i8* %21, i64 %93
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1, !alias.scope !85
  %98 = getelementptr i8, i8* %95, i64 16
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1, !alias.scope !85
  %101 = bitcast i8* %94 to <16 x i8>*
  store <16 x i8> %97, <16 x i8>* %101, align 1, !alias.scope !88, !noalias !85
  %102 = getelementptr i8, i8* %94, i64 16
  %103 = bitcast i8* %102 to <16 x i8>*
  store <16 x i8> %100, <16 x i8>* %103, align 1, !alias.scope !88, !noalias !85
  %104 = add i64 %59, 128
  %105 = add i64 %60, -4
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %58, !llvm.loop !90

107:                                              ; preds = %58, %47
  %108 = phi i64 [ 0, %47 ], [ %104, %58 ]
  %109 = icmp eq i64 %54, 0
  br i1 %109, label %126, label %110

110:                                              ; preds = %107, %110
  %111 = phi i64 [ %123, %110 ], [ %108, %107 ]
  %112 = phi i64 [ %124, %110 ], [ %54, %107 ]
  %113 = getelementptr i8, i8* %32, i64 %111
  %114 = getelementptr i8, i8* %21, i64 %111
  %115 = bitcast i8* %114 to <16 x i8>*
  %116 = load <16 x i8>, <16 x i8>* %115, align 1, !alias.scope !85
  %117 = getelementptr i8, i8* %114, i64 16
  %118 = bitcast i8* %117 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 1, !alias.scope !85
  %120 = bitcast i8* %113 to <16 x i8>*
  store <16 x i8> %116, <16 x i8>* %120, align 1, !alias.scope !88, !noalias !85
  %121 = getelementptr i8, i8* %113, i64 16
  %122 = bitcast i8* %121 to <16 x i8>*
  store <16 x i8> %119, <16 x i8>* %122, align 1, !alias.scope !88, !noalias !85
  %123 = add i64 %111, 32
  %124 = add i64 %112, -1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %110, !llvm.loop !91

126:                                              ; preds = %110, %107
  %127 = icmp eq i64 %48, %36
  br i1 %127, label %138, label %128

128:                                              ; preds = %126, %38, %31
  %129 = phi i8* [ %32, %38 ], [ %32, %31 ], [ %49, %126 ]
  %130 = phi i8* [ %21, %38 ], [ %21, %31 ], [ %50, %126 ]
  br label %131

131:                                              ; preds = %128, %131
  %132 = phi i8* [ %136, %131 ], [ %129, %128 ]
  %133 = phi i8* [ %135, %131 ], [ %130, %128 ]
  %134 = load i8, i8* %133, align 1
  store i8 %134, i8* %132, align 1
  %135 = getelementptr inbounds i8, i8* %133, i64 1
  %136 = getelementptr inbounds i8, i8* %132, i64 1
  %137 = icmp eq i8* %135, %2
  br i1 %137, label %138, label %131, !llvm.loop !92

138:                                              ; preds = %131, %126
  %139 = phi i8* [ %49, %126 ], [ %136, %131 ]
  %140 = ptrtoint i8* %139 to i64
  br label %141

141:                                              ; preds = %28, %138
  %142 = phi i64 [ %29, %28 ], [ %140, %138 ]
  store i64 %142, i64* %17, align 8
  br label %300

143:                                              ; preds = %27
  %144 = getelementptr inbounds i8, i8* %14, i64 %24
  store i8* %144, i8** %16, align 8
  br label %300

145:                                              ; preds = %3
  %146 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %147 = icmp eq i64 %11, 0
  br i1 %147, label %162, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %150 = bitcast i8** %149 to i64*
  store i64 %11, i64* %150, align 8
  %151 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %152 = load %"struct.base::StackAllocator<unsigned char, 64>::Source"*, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %151, align 8
  %153 = icmp ne %"struct.base::StackAllocator<unsigned char, 64>::Source"* %152, null
  %154 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %152, i64 0, i32 0, i64 0
  %155 = icmp eq i8* %154, %14
  %156 = and i1 %153, %155
  br i1 %156, label %157, label %159

157:                                              ; preds = %148
  %158 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %152, i64 0, i32 1
  store i8 0, i8* %158, align 1
  br label %160

159:                                              ; preds = %148
  tail call void @_ZdlPv(i8* nonnull %14) #9
  br label %160

160:                                              ; preds = %159, %157
  %161 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %161, i8 0, i64 24, i1 false) #8
  br label %162

162:                                              ; preds = %145, %160
  %163 = phi i64 [ %9, %145 ], [ 0, %160 ]
  %164 = icmp slt i64 %6, 0
  br i1 %164, label %165, label %167

165:                                              ; preds = %162
  %166 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %166) #10
  unreachable

167:                                              ; preds = %162
  %168 = icmp ult i64 %163, 4611686018427387903
  br i1 %168, label %169, label %173

169:                                              ; preds = %167
  %170 = shl i64 %163, 1
  %171 = icmp ult i64 %170, %6
  %172 = select i1 %171, i64 %6, i64 %170
  br label %173

173:                                              ; preds = %169, %167
  %174 = phi i64 [ %172, %169 ], [ 9223372036854775807, %167 ]
  %175 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %176 = load %"struct.base::StackAllocator<unsigned char, 64>::Source"*, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %175, align 8
  %177 = icmp eq %"struct.base::StackAllocator<unsigned char, 64>::Source"* %176, null
  br i1 %177, label %187, label %178

178:                                              ; preds = %173
  %179 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %176, i64 0, i32 1
  %180 = load i8, i8* %179, align 1, !range !20
  %181 = icmp eq i8 %180, 0
  %182 = icmp ult i64 %174, 65
  %183 = and i1 %182, %181
  br i1 %183, label %184, label %187

184:                                              ; preds = %178
  store i8 1, i8* %179, align 1
  %185 = load %"struct.base::StackAllocator<unsigned char, 64>::Source"*, %"struct.base::StackAllocator<unsigned char, 64>::Source"** %175, align 8
  %186 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 64>::Source", %"struct.base::StackAllocator<unsigned char, 64>::Source"* %185, i64 0, i32 0, i64 0
  br label %189

187:                                              ; preds = %178, %173
  %188 = tail call i8* @_Znwm(i64 %174) #9
  br label %189

189:                                              ; preds = %184, %187
  %190 = phi i8* [ %186, %184 ], [ %188, %187 ]
  %191 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  store i8* %190, i8** %191, align 8
  store i8* %190, i8** %146, align 8
  %192 = getelementptr inbounds i8, i8* %190, i64 %174
  store i8* %192, i8** %7, align 8
  %193 = bitcast i8** %191 to i64*
  %194 = icmp eq i8* %1, %2
  br i1 %194, label %297, label %195

195:                                              ; preds = %189
  %196 = ptrtoint i8* %2 to i64
  %197 = sub i64 %196, %4
  %198 = icmp ult i64 %197, 32
  br i1 %198, label %287, label %199

199:                                              ; preds = %195
  %200 = ptrtoint i8* %2 to i64
  %201 = sub i64 %200, %4
  %202 = getelementptr i8, i8* %190, i64 %201
  %203 = icmp ult i8* %190, %2
  %204 = icmp ugt i8* %202, %1
  %205 = and i1 %203, %204
  br i1 %205, label %287, label %206

206:                                              ; preds = %199
  %207 = and i64 %197, -32
  %208 = getelementptr i8, i8* %190, i64 %207
  %209 = getelementptr i8, i8* %1, i64 %207
  %210 = add i64 %207, -32
  %211 = lshr exact i64 %210, 5
  %212 = add nuw nsw i64 %211, 1
  %213 = and i64 %212, 3
  %214 = icmp ult i64 %210, 96
  br i1 %214, label %266, label %215

215:                                              ; preds = %206
  %216 = sub nsw i64 %212, %213
  br label %217

217:                                              ; preds = %217, %215
  %218 = phi i64 [ 0, %215 ], [ %263, %217 ]
  %219 = phi i64 [ %216, %215 ], [ %264, %217 ]
  %220 = getelementptr i8, i8* %190, i64 %218
  %221 = getelementptr i8, i8* %1, i64 %218
  %222 = bitcast i8* %221 to <16 x i8>*
  %223 = load <16 x i8>, <16 x i8>* %222, align 1, !alias.scope !93
  %224 = getelementptr i8, i8* %221, i64 16
  %225 = bitcast i8* %224 to <16 x i8>*
  %226 = load <16 x i8>, <16 x i8>* %225, align 1, !alias.scope !93
  %227 = bitcast i8* %220 to <16 x i8>*
  store <16 x i8> %223, <16 x i8>* %227, align 1, !alias.scope !96, !noalias !93
  %228 = getelementptr i8, i8* %220, i64 16
  %229 = bitcast i8* %228 to <16 x i8>*
  store <16 x i8> %226, <16 x i8>* %229, align 1, !alias.scope !96, !noalias !93
  %230 = or i64 %218, 32
  %231 = getelementptr i8, i8* %190, i64 %230
  %232 = getelementptr i8, i8* %1, i64 %230
  %233 = bitcast i8* %232 to <16 x i8>*
  %234 = load <16 x i8>, <16 x i8>* %233, align 1, !alias.scope !93
  %235 = getelementptr i8, i8* %232, i64 16
  %236 = bitcast i8* %235 to <16 x i8>*
  %237 = load <16 x i8>, <16 x i8>* %236, align 1, !alias.scope !93
  %238 = bitcast i8* %231 to <16 x i8>*
  store <16 x i8> %234, <16 x i8>* %238, align 1, !alias.scope !96, !noalias !93
  %239 = getelementptr i8, i8* %231, i64 16
  %240 = bitcast i8* %239 to <16 x i8>*
  store <16 x i8> %237, <16 x i8>* %240, align 1, !alias.scope !96, !noalias !93
  %241 = or i64 %218, 64
  %242 = getelementptr i8, i8* %190, i64 %241
  %243 = getelementptr i8, i8* %1, i64 %241
  %244 = bitcast i8* %243 to <16 x i8>*
  %245 = load <16 x i8>, <16 x i8>* %244, align 1, !alias.scope !93
  %246 = getelementptr i8, i8* %243, i64 16
  %247 = bitcast i8* %246 to <16 x i8>*
  %248 = load <16 x i8>, <16 x i8>* %247, align 1, !alias.scope !93
  %249 = bitcast i8* %242 to <16 x i8>*
  store <16 x i8> %245, <16 x i8>* %249, align 1, !alias.scope !96, !noalias !93
  %250 = getelementptr i8, i8* %242, i64 16
  %251 = bitcast i8* %250 to <16 x i8>*
  store <16 x i8> %248, <16 x i8>* %251, align 1, !alias.scope !96, !noalias !93
  %252 = or i64 %218, 96
  %253 = getelementptr i8, i8* %190, i64 %252
  %254 = getelementptr i8, i8* %1, i64 %252
  %255 = bitcast i8* %254 to <16 x i8>*
  %256 = load <16 x i8>, <16 x i8>* %255, align 1, !alias.scope !93
  %257 = getelementptr i8, i8* %254, i64 16
  %258 = bitcast i8* %257 to <16 x i8>*
  %259 = load <16 x i8>, <16 x i8>* %258, align 1, !alias.scope !93
  %260 = bitcast i8* %253 to <16 x i8>*
  store <16 x i8> %256, <16 x i8>* %260, align 1, !alias.scope !96, !noalias !93
  %261 = getelementptr i8, i8* %253, i64 16
  %262 = bitcast i8* %261 to <16 x i8>*
  store <16 x i8> %259, <16 x i8>* %262, align 1, !alias.scope !96, !noalias !93
  %263 = add i64 %218, 128
  %264 = add i64 %219, -4
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %266, label %217, !llvm.loop !98

266:                                              ; preds = %217, %206
  %267 = phi i64 [ 0, %206 ], [ %263, %217 ]
  %268 = icmp eq i64 %213, 0
  br i1 %268, label %285, label %269

269:                                              ; preds = %266, %269
  %270 = phi i64 [ %282, %269 ], [ %267, %266 ]
  %271 = phi i64 [ %283, %269 ], [ %213, %266 ]
  %272 = getelementptr i8, i8* %190, i64 %270
  %273 = getelementptr i8, i8* %1, i64 %270
  %274 = bitcast i8* %273 to <16 x i8>*
  %275 = load <16 x i8>, <16 x i8>* %274, align 1, !alias.scope !93
  %276 = getelementptr i8, i8* %273, i64 16
  %277 = bitcast i8* %276 to <16 x i8>*
  %278 = load <16 x i8>, <16 x i8>* %277, align 1, !alias.scope !93
  %279 = bitcast i8* %272 to <16 x i8>*
  store <16 x i8> %275, <16 x i8>* %279, align 1, !alias.scope !96, !noalias !93
  %280 = getelementptr i8, i8* %272, i64 16
  %281 = bitcast i8* %280 to <16 x i8>*
  store <16 x i8> %278, <16 x i8>* %281, align 1, !alias.scope !96, !noalias !93
  %282 = add i64 %270, 32
  %283 = add i64 %271, -1
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %285, label %269, !llvm.loop !99

285:                                              ; preds = %269, %266
  %286 = icmp eq i64 %197, %207
  br i1 %286, label %297, label %287

287:                                              ; preds = %285, %199, %195
  %288 = phi i8* [ %190, %199 ], [ %190, %195 ], [ %208, %285 ]
  %289 = phi i8* [ %1, %199 ], [ %1, %195 ], [ %209, %285 ]
  br label %290

290:                                              ; preds = %287, %290
  %291 = phi i8* [ %295, %290 ], [ %288, %287 ]
  %292 = phi i8* [ %294, %290 ], [ %289, %287 ]
  %293 = load i8, i8* %292, align 1
  store i8 %293, i8* %291, align 1
  %294 = getelementptr inbounds i8, i8* %292, i64 1
  %295 = getelementptr inbounds i8, i8* %291, i64 1
  %296 = icmp eq i8* %294, %2
  br i1 %296, label %297, label %290, !llvm.loop !100

297:                                              ; preds = %290, %285, %189
  %298 = phi i8* [ %190, %189 ], [ %208, %285 ], [ %295, %290 ]
  %299 = ptrtoint i8* %298 to i64
  store i64 %299, i64* %193, align 8
  br label %300

300:                                              ; preds = %141, %143, %297
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm5EEEE6assignINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_(%"class.std::__1::vector.4"*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i8* %1 to i64
  %5 = ptrtoint i8* %2 to i64
  %6 = sub i64 %5, %4
  %7 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector.4"* %0 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = icmp ugt i64 %6, %12
  %14 = inttoptr i64 %11 to i8*
  br i1 %13, label %145, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %11
  %20 = icmp ugt i64 %6, %19
  %21 = getelementptr inbounds i8, i8* %1, i64 %19
  %22 = select i1 %20, i8* %21, i8* %2
  %23 = ptrtoint i8* %22 to i64
  %24 = sub i64 %23, %4
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %15
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %1, i64 %24, i1 false) #8
  br label %27

27:                                               ; preds = %15, %26
  br i1 %20, label %28, label %143

28:                                               ; preds = %27
  %29 = load i64, i64* %17, align 8
  %30 = icmp eq i8* %22, %2
  br i1 %30, label %141, label %31

31:                                               ; preds = %28
  %32 = inttoptr i64 %29 to i8*
  %33 = sub i64 %11, %4
  %34 = sub i64 %33, %18
  %35 = getelementptr i8, i8* %2, i64 %34
  %36 = ptrtoint i8* %35 to i64
  %37 = icmp ult i8* %35, inttoptr (i64 32 to i8*)
  br i1 %37, label %128, label %38

38:                                               ; preds = %31
  %39 = sub i64 %11, %4
  %40 = sub i64 %39, %18
  %41 = getelementptr i8, i8* %2, i64 %40
  %42 = ptrtoint i8* %41 to i64
  %43 = getelementptr i8, i8* %32, i64 %42
  %44 = icmp ult i8* %32, %2
  %45 = icmp ult i8* %21, %43
  %46 = and i1 %44, %45
  br i1 %46, label %128, label %47

47:                                               ; preds = %38
  %48 = and i64 %36, -32
  %49 = getelementptr i8, i8* %32, i64 %48
  %50 = getelementptr i8, i8* %21, i64 %48
  %51 = add i64 %48, -32
  %52 = lshr exact i64 %51, 5
  %53 = add nuw nsw i64 %52, 1
  %54 = and i64 %53, 3
  %55 = icmp ult i64 %51, 96
  br i1 %55, label %107, label %56

56:                                               ; preds = %47
  %57 = sub nsw i64 %53, %54
  br label %58

58:                                               ; preds = %58, %56
  %59 = phi i64 [ 0, %56 ], [ %104, %58 ]
  %60 = phi i64 [ %57, %56 ], [ %105, %58 ]
  %61 = getelementptr i8, i8* %32, i64 %59
  %62 = getelementptr i8, i8* %21, i64 %59
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1, !alias.scope !101
  %65 = getelementptr i8, i8* %62, i64 16
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1, !alias.scope !101
  %68 = bitcast i8* %61 to <16 x i8>*
  store <16 x i8> %64, <16 x i8>* %68, align 1, !alias.scope !104, !noalias !101
  %69 = getelementptr i8, i8* %61, i64 16
  %70 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %70, align 1, !alias.scope !104, !noalias !101
  %71 = or i64 %59, 32
  %72 = getelementptr i8, i8* %32, i64 %71
  %73 = getelementptr i8, i8* %21, i64 %71
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1, !alias.scope !101
  %76 = getelementptr i8, i8* %73, i64 16
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1, !alias.scope !101
  %79 = bitcast i8* %72 to <16 x i8>*
  store <16 x i8> %75, <16 x i8>* %79, align 1, !alias.scope !104, !noalias !101
  %80 = getelementptr i8, i8* %72, i64 16
  %81 = bitcast i8* %80 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %81, align 1, !alias.scope !104, !noalias !101
  %82 = or i64 %59, 64
  %83 = getelementptr i8, i8* %32, i64 %82
  %84 = getelementptr i8, i8* %21, i64 %82
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1, !alias.scope !101
  %87 = getelementptr i8, i8* %84, i64 16
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1, !alias.scope !101
  %90 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %86, <16 x i8>* %90, align 1, !alias.scope !104, !noalias !101
  %91 = getelementptr i8, i8* %83, i64 16
  %92 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %89, <16 x i8>* %92, align 1, !alias.scope !104, !noalias !101
  %93 = or i64 %59, 96
  %94 = getelementptr i8, i8* %32, i64 %93
  %95 = getelementptr i8, i8* %21, i64 %93
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1, !alias.scope !101
  %98 = getelementptr i8, i8* %95, i64 16
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1, !alias.scope !101
  %101 = bitcast i8* %94 to <16 x i8>*
  store <16 x i8> %97, <16 x i8>* %101, align 1, !alias.scope !104, !noalias !101
  %102 = getelementptr i8, i8* %94, i64 16
  %103 = bitcast i8* %102 to <16 x i8>*
  store <16 x i8> %100, <16 x i8>* %103, align 1, !alias.scope !104, !noalias !101
  %104 = add i64 %59, 128
  %105 = add i64 %60, -4
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %58, !llvm.loop !106

107:                                              ; preds = %58, %47
  %108 = phi i64 [ 0, %47 ], [ %104, %58 ]
  %109 = icmp eq i64 %54, 0
  br i1 %109, label %126, label %110

110:                                              ; preds = %107, %110
  %111 = phi i64 [ %123, %110 ], [ %108, %107 ]
  %112 = phi i64 [ %124, %110 ], [ %54, %107 ]
  %113 = getelementptr i8, i8* %32, i64 %111
  %114 = getelementptr i8, i8* %21, i64 %111
  %115 = bitcast i8* %114 to <16 x i8>*
  %116 = load <16 x i8>, <16 x i8>* %115, align 1, !alias.scope !101
  %117 = getelementptr i8, i8* %114, i64 16
  %118 = bitcast i8* %117 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 1, !alias.scope !101
  %120 = bitcast i8* %113 to <16 x i8>*
  store <16 x i8> %116, <16 x i8>* %120, align 1, !alias.scope !104, !noalias !101
  %121 = getelementptr i8, i8* %113, i64 16
  %122 = bitcast i8* %121 to <16 x i8>*
  store <16 x i8> %119, <16 x i8>* %122, align 1, !alias.scope !104, !noalias !101
  %123 = add i64 %111, 32
  %124 = add i64 %112, -1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %110, !llvm.loop !107

126:                                              ; preds = %110, %107
  %127 = icmp eq i64 %48, %36
  br i1 %127, label %138, label %128

128:                                              ; preds = %126, %38, %31
  %129 = phi i8* [ %32, %38 ], [ %32, %31 ], [ %49, %126 ]
  %130 = phi i8* [ %21, %38 ], [ %21, %31 ], [ %50, %126 ]
  br label %131

131:                                              ; preds = %128, %131
  %132 = phi i8* [ %136, %131 ], [ %129, %128 ]
  %133 = phi i8* [ %135, %131 ], [ %130, %128 ]
  %134 = load i8, i8* %133, align 1
  store i8 %134, i8* %132, align 1
  %135 = getelementptr inbounds i8, i8* %133, i64 1
  %136 = getelementptr inbounds i8, i8* %132, i64 1
  %137 = icmp eq i8* %135, %2
  br i1 %137, label %138, label %131, !llvm.loop !108

138:                                              ; preds = %131, %126
  %139 = phi i8* [ %49, %126 ], [ %136, %131 ]
  %140 = ptrtoint i8* %139 to i64
  br label %141

141:                                              ; preds = %28, %138
  %142 = phi i64 [ %29, %28 ], [ %140, %138 ]
  store i64 %142, i64* %17, align 8
  br label %300

143:                                              ; preds = %27
  %144 = getelementptr inbounds i8, i8* %14, i64 %24
  store i8* %144, i8** %16, align 8
  br label %300

145:                                              ; preds = %3
  %146 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %147 = icmp eq i64 %11, 0
  br i1 %147, label %162, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %150 = bitcast i8** %149 to i64*
  store i64 %11, i64* %150, align 8
  %151 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %152 = load %"struct.base::StackAllocator<unsigned char, 5>::Source"*, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %151, align 8
  %153 = icmp ne %"struct.base::StackAllocator<unsigned char, 5>::Source"* %152, null
  %154 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %152, i64 0, i32 0, i64 0
  %155 = icmp eq i8* %154, %14
  %156 = and i1 %153, %155
  br i1 %156, label %157, label %159

157:                                              ; preds = %148
  %158 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %152, i64 0, i32 1
  store i8 0, i8* %158, align 1
  br label %160

159:                                              ; preds = %148
  tail call void @_ZdlPv(i8* nonnull %14) #9
  br label %160

160:                                              ; preds = %159, %157
  %161 = bitcast %"class.std::__1::vector.4"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %161, i8 0, i64 24, i1 false) #8
  br label %162

162:                                              ; preds = %145, %160
  %163 = phi i64 [ %9, %145 ], [ 0, %160 ]
  %164 = icmp slt i64 %6, 0
  br i1 %164, label %165, label %167

165:                                              ; preds = %162
  %166 = bitcast %"class.std::__1::vector.4"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %166) #10
  unreachable

167:                                              ; preds = %162
  %168 = icmp ult i64 %163, 4611686018427387903
  br i1 %168, label %169, label %173

169:                                              ; preds = %167
  %170 = shl i64 %163, 1
  %171 = icmp ult i64 %170, %6
  %172 = select i1 %171, i64 %6, i64 %170
  br label %173

173:                                              ; preds = %169, %167
  %174 = phi i64 [ %172, %169 ], [ 9223372036854775807, %167 ]
  %175 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %176 = load %"struct.base::StackAllocator<unsigned char, 5>::Source"*, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %175, align 8
  %177 = icmp eq %"struct.base::StackAllocator<unsigned char, 5>::Source"* %176, null
  br i1 %177, label %187, label %178

178:                                              ; preds = %173
  %179 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %176, i64 0, i32 1
  %180 = load i8, i8* %179, align 1, !range !20
  %181 = icmp eq i8 %180, 0
  %182 = icmp ult i64 %174, 6
  %183 = and i1 %182, %181
  br i1 %183, label %184, label %187

184:                                              ; preds = %178
  store i8 1, i8* %179, align 1
  %185 = load %"struct.base::StackAllocator<unsigned char, 5>::Source"*, %"struct.base::StackAllocator<unsigned char, 5>::Source"** %175, align 8
  %186 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 5>::Source", %"struct.base::StackAllocator<unsigned char, 5>::Source"* %185, i64 0, i32 0, i64 0
  br label %189

187:                                              ; preds = %178, %173
  %188 = tail call i8* @_Znwm(i64 %174) #9
  br label %189

189:                                              ; preds = %184, %187
  %190 = phi i8* [ %186, %184 ], [ %188, %187 ]
  %191 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  store i8* %190, i8** %191, align 8
  store i8* %190, i8** %146, align 8
  %192 = getelementptr inbounds i8, i8* %190, i64 %174
  store i8* %192, i8** %7, align 8
  %193 = bitcast i8** %191 to i64*
  %194 = icmp eq i8* %1, %2
  br i1 %194, label %297, label %195

195:                                              ; preds = %189
  %196 = ptrtoint i8* %2 to i64
  %197 = sub i64 %196, %4
  %198 = icmp ult i64 %197, 32
  br i1 %198, label %287, label %199

199:                                              ; preds = %195
  %200 = ptrtoint i8* %2 to i64
  %201 = sub i64 %200, %4
  %202 = getelementptr i8, i8* %190, i64 %201
  %203 = icmp ult i8* %190, %2
  %204 = icmp ugt i8* %202, %1
  %205 = and i1 %203, %204
  br i1 %205, label %287, label %206

206:                                              ; preds = %199
  %207 = and i64 %197, -32
  %208 = getelementptr i8, i8* %190, i64 %207
  %209 = getelementptr i8, i8* %1, i64 %207
  %210 = add i64 %207, -32
  %211 = lshr exact i64 %210, 5
  %212 = add nuw nsw i64 %211, 1
  %213 = and i64 %212, 3
  %214 = icmp ult i64 %210, 96
  br i1 %214, label %266, label %215

215:                                              ; preds = %206
  %216 = sub nsw i64 %212, %213
  br label %217

217:                                              ; preds = %217, %215
  %218 = phi i64 [ 0, %215 ], [ %263, %217 ]
  %219 = phi i64 [ %216, %215 ], [ %264, %217 ]
  %220 = getelementptr i8, i8* %190, i64 %218
  %221 = getelementptr i8, i8* %1, i64 %218
  %222 = bitcast i8* %221 to <16 x i8>*
  %223 = load <16 x i8>, <16 x i8>* %222, align 1, !alias.scope !109
  %224 = getelementptr i8, i8* %221, i64 16
  %225 = bitcast i8* %224 to <16 x i8>*
  %226 = load <16 x i8>, <16 x i8>* %225, align 1, !alias.scope !109
  %227 = bitcast i8* %220 to <16 x i8>*
  store <16 x i8> %223, <16 x i8>* %227, align 1, !alias.scope !112, !noalias !109
  %228 = getelementptr i8, i8* %220, i64 16
  %229 = bitcast i8* %228 to <16 x i8>*
  store <16 x i8> %226, <16 x i8>* %229, align 1, !alias.scope !112, !noalias !109
  %230 = or i64 %218, 32
  %231 = getelementptr i8, i8* %190, i64 %230
  %232 = getelementptr i8, i8* %1, i64 %230
  %233 = bitcast i8* %232 to <16 x i8>*
  %234 = load <16 x i8>, <16 x i8>* %233, align 1, !alias.scope !109
  %235 = getelementptr i8, i8* %232, i64 16
  %236 = bitcast i8* %235 to <16 x i8>*
  %237 = load <16 x i8>, <16 x i8>* %236, align 1, !alias.scope !109
  %238 = bitcast i8* %231 to <16 x i8>*
  store <16 x i8> %234, <16 x i8>* %238, align 1, !alias.scope !112, !noalias !109
  %239 = getelementptr i8, i8* %231, i64 16
  %240 = bitcast i8* %239 to <16 x i8>*
  store <16 x i8> %237, <16 x i8>* %240, align 1, !alias.scope !112, !noalias !109
  %241 = or i64 %218, 64
  %242 = getelementptr i8, i8* %190, i64 %241
  %243 = getelementptr i8, i8* %1, i64 %241
  %244 = bitcast i8* %243 to <16 x i8>*
  %245 = load <16 x i8>, <16 x i8>* %244, align 1, !alias.scope !109
  %246 = getelementptr i8, i8* %243, i64 16
  %247 = bitcast i8* %246 to <16 x i8>*
  %248 = load <16 x i8>, <16 x i8>* %247, align 1, !alias.scope !109
  %249 = bitcast i8* %242 to <16 x i8>*
  store <16 x i8> %245, <16 x i8>* %249, align 1, !alias.scope !112, !noalias !109
  %250 = getelementptr i8, i8* %242, i64 16
  %251 = bitcast i8* %250 to <16 x i8>*
  store <16 x i8> %248, <16 x i8>* %251, align 1, !alias.scope !112, !noalias !109
  %252 = or i64 %218, 96
  %253 = getelementptr i8, i8* %190, i64 %252
  %254 = getelementptr i8, i8* %1, i64 %252
  %255 = bitcast i8* %254 to <16 x i8>*
  %256 = load <16 x i8>, <16 x i8>* %255, align 1, !alias.scope !109
  %257 = getelementptr i8, i8* %254, i64 16
  %258 = bitcast i8* %257 to <16 x i8>*
  %259 = load <16 x i8>, <16 x i8>* %258, align 1, !alias.scope !109
  %260 = bitcast i8* %253 to <16 x i8>*
  store <16 x i8> %256, <16 x i8>* %260, align 1, !alias.scope !112, !noalias !109
  %261 = getelementptr i8, i8* %253, i64 16
  %262 = bitcast i8* %261 to <16 x i8>*
  store <16 x i8> %259, <16 x i8>* %262, align 1, !alias.scope !112, !noalias !109
  %263 = add i64 %218, 128
  %264 = add i64 %219, -4
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %266, label %217, !llvm.loop !114

266:                                              ; preds = %217, %206
  %267 = phi i64 [ 0, %206 ], [ %263, %217 ]
  %268 = icmp eq i64 %213, 0
  br i1 %268, label %285, label %269

269:                                              ; preds = %266, %269
  %270 = phi i64 [ %282, %269 ], [ %267, %266 ]
  %271 = phi i64 [ %283, %269 ], [ %213, %266 ]
  %272 = getelementptr i8, i8* %190, i64 %270
  %273 = getelementptr i8, i8* %1, i64 %270
  %274 = bitcast i8* %273 to <16 x i8>*
  %275 = load <16 x i8>, <16 x i8>* %274, align 1, !alias.scope !109
  %276 = getelementptr i8, i8* %273, i64 16
  %277 = bitcast i8* %276 to <16 x i8>*
  %278 = load <16 x i8>, <16 x i8>* %277, align 1, !alias.scope !109
  %279 = bitcast i8* %272 to <16 x i8>*
  store <16 x i8> %275, <16 x i8>* %279, align 1, !alias.scope !112, !noalias !109
  %280 = getelementptr i8, i8* %272, i64 16
  %281 = bitcast i8* %280 to <16 x i8>*
  store <16 x i8> %278, <16 x i8>* %281, align 1, !alias.scope !112, !noalias !109
  %282 = add i64 %270, 32
  %283 = add i64 %271, -1
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %285, label %269, !llvm.loop !115

285:                                              ; preds = %269, %266
  %286 = icmp eq i64 %197, %207
  br i1 %286, label %297, label %287

287:                                              ; preds = %285, %199, %195
  %288 = phi i8* [ %190, %199 ], [ %190, %195 ], [ %208, %285 ]
  %289 = phi i8* [ %1, %199 ], [ %1, %195 ], [ %209, %285 ]
  br label %290

290:                                              ; preds = %287, %290
  %291 = phi i8* [ %295, %290 ], [ %288, %287 ]
  %292 = phi i8* [ %294, %290 ], [ %289, %287 ]
  %293 = load i8, i8* %292, align 1
  store i8 %293, i8* %291, align 1
  %294 = getelementptr inbounds i8, i8* %292, i64 1
  %295 = getelementptr inbounds i8, i8* %291, i64 1
  %296 = icmp eq i8* %294, %2
  br i1 %296, label %297, label %290, !llvm.loop !116

297:                                              ; preds = %290, %285, %189
  %298 = phi i8* [ %190, %189 ], [ %208, %285 ], [ %295, %290 ]
  %299 = ptrtoint i8* %298 to i64
  store i64 %299, i64* %193, align 8
  br label %300

300:                                              ; preds = %141, %143, %297
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind
declare void @_ZN8perfetto11TracePacketD1Ev(%"class.perfetto::TracePacket"*) unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN8perfetto11TracePacketENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJEEEvDpOT_(%"class.std::__1::vector.8"*) local_unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %3 = bitcast %"class.perfetto::TracePacket"** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = sdiv exact i64 %7, 40
  %9 = add nsw i64 %8, 1
  %10 = icmp ugt i64 %9, 461168601842738790
  br i1 %10, label %11, label %13

11:                                               ; preds = %1
  %12 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %12) #10
  unreachable

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %"class.perfetto::TracePacket"** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %6
  %18 = sdiv exact i64 %17, 40
  %19 = icmp ult i64 %18, 230584300921369395
  br i1 %19, label %20, label %25

20:                                               ; preds = %13
  %21 = shl nsw i64 %18, 1
  %22 = icmp ult i64 %21, %9
  %23 = select i1 %22, i64 %9, i64 %21
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %13, %20
  %26 = phi i64 [ %23, %20 ], [ 461168601842738790, %13 ]
  %27 = mul i64 %26, 40
  %28 = tail call i8* @_Znwm(i64 %27) #9
  %29 = bitcast i8* %28 to %"class.perfetto::TracePacket"*
  br label %30

30:                                               ; preds = %20, %25
  %31 = phi i64 [ %26, %25 ], [ 0, %20 ]
  %32 = phi %"class.perfetto::TracePacket"* [ %29, %25 ], [ null, %20 ]
  %33 = getelementptr inbounds %"class.perfetto::TracePacket", %"class.perfetto::TracePacket"* %32, i64 %8
  %34 = getelementptr inbounds %"class.perfetto::TracePacket", %"class.perfetto::TracePacket"* %32, i64 %31
  %35 = ptrtoint %"class.perfetto::TracePacket"* %34 to i64
  tail call void @_ZN8perfetto11TracePacketC1Ev(%"class.perfetto::TracePacket"* %33) #8
  %36 = getelementptr inbounds %"class.perfetto::TracePacket", %"class.perfetto::TracePacket"* %33, i64 1
  %37 = ptrtoint %"class.perfetto::TracePacket"* %36 to i64
  %38 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %39 = load %"class.perfetto::TracePacket"*, %"class.perfetto::TracePacket"** %38, align 8
  %40 = load %"class.perfetto::TracePacket"*, %"class.perfetto::TracePacket"** %2, align 8
  %41 = icmp eq %"class.perfetto::TracePacket"* %40, %39
  br i1 %41, label %42, label %44

42:                                               ; preds = %30
  %43 = ptrtoint %"class.perfetto::TracePacket"* %39 to i64
  br label %53

44:                                               ; preds = %30, %44
  %45 = phi %"class.perfetto::TracePacket"* [ %47, %44 ], [ %33, %30 ]
  %46 = phi %"class.perfetto::TracePacket"* [ %48, %44 ], [ %40, %30 ]
  %47 = getelementptr inbounds %"class.perfetto::TracePacket", %"class.perfetto::TracePacket"* %45, i64 -1
  %48 = getelementptr inbounds %"class.perfetto::TracePacket", %"class.perfetto::TracePacket"* %46, i64 -1
  tail call void @_ZN8perfetto11TracePacketC1EOS0_(%"class.perfetto::TracePacket"* %47, %"class.perfetto::TracePacket"* dereferenceable(40) %48) #8
  %49 = icmp eq %"class.perfetto::TracePacket"* %48, %39
  br i1 %49, label %50, label %44

50:                                               ; preds = %44
  %51 = load i64, i64* %5, align 8
  %52 = load %"class.perfetto::TracePacket"*, %"class.perfetto::TracePacket"** %2, align 8
  br label %53

53:                                               ; preds = %42, %50
  %54 = phi %"class.perfetto::TracePacket"* [ %39, %42 ], [ %52, %50 ]
  %55 = phi %"class.perfetto::TracePacket"* [ %33, %42 ], [ %47, %50 ]
  %56 = phi i64 [ %43, %42 ], [ %51, %50 ]
  %57 = ptrtoint %"class.perfetto::TracePacket"* %55 to i64
  store i64 %57, i64* %5, align 8
  store i64 %37, i64* %3, align 8
  store i64 %35, i64* %15, align 8
  %58 = inttoptr i64 %56 to %"class.perfetto::TracePacket"*
  %59 = icmp eq %"class.perfetto::TracePacket"* %54, %58
  br i1 %59, label %64, label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.perfetto::TracePacket"* [ %62, %60 ], [ %54, %53 ]
  %62 = getelementptr inbounds %"class.perfetto::TracePacket", %"class.perfetto::TracePacket"* %61, i64 -1
  tail call void @_ZN8perfetto11TracePacketD1Ev(%"class.perfetto::TracePacket"* %62) #8
  %63 = icmp eq %"class.perfetto::TracePacket"* %62, %58
  br i1 %63, label %64, label %60

64:                                               ; preds = %60, %53
  %65 = icmp eq i64 %56, 0
  br i1 %65, label %68, label %66

66:                                               ; preds = %64
  %67 = inttoptr i64 %56 to i8*
  tail call void @_ZdlPv(i8* %67) #9
  br label %68

68:                                               ; preds = %64, %66
  ret void
}

declare void @_ZN8perfetto11TracePacketC1Ev(%"class.perfetto::TracePacket"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN8perfetto11TracePacketC1EOS0_(%"class.perfetto::TracePacket"*, %"class.perfetto::TracePacket"* dereferenceable(40)) unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
!20 = !{i8 0, i8 2}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !8}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !8}
!35 = distinct !{!35, !10}
!36 = distinct !{!36, !8}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !8}
!43 = distinct !{!43, !10}
!44 = distinct !{!44, !8}
!45 = !{!46}
!46 = distinct !{!46, !47}
!47 = distinct !{!47, !"LVerDomain"}
!48 = !{!49}
!49 = distinct !{!49, !47}
!50 = distinct !{!50, !8}
!51 = distinct !{!51, !10}
!52 = distinct !{!52, !8}
!53 = !{!54}
!54 = distinct !{!54, !55}
!55 = distinct !{!55, !"LVerDomain"}
!56 = !{!57}
!57 = distinct !{!57, !55}
!58 = distinct !{!58, !8}
!59 = distinct !{!59, !10}
!60 = distinct !{!60, !8}
!61 = !{!62}
!62 = distinct !{!62, !63}
!63 = distinct !{!63, !"LVerDomain"}
!64 = !{!65}
!65 = distinct !{!65, !63}
!66 = distinct !{!66, !8}
!67 = distinct !{!67, !10}
!68 = distinct !{!68, !8}
!69 = !{!70}
!70 = distinct !{!70, !71}
!71 = distinct !{!71, !"LVerDomain"}
!72 = !{!73}
!73 = distinct !{!73, !71}
!74 = distinct !{!74, !8}
!75 = distinct !{!75, !10}
!76 = distinct !{!76, !8}
!77 = !{!78}
!78 = distinct !{!78, !79}
!79 = distinct !{!79, !"LVerDomain"}
!80 = !{!81}
!81 = distinct !{!81, !79}
!82 = distinct !{!82, !8}
!83 = distinct !{!83, !10}
!84 = distinct !{!84, !8}
!85 = !{!86}
!86 = distinct !{!86, !87}
!87 = distinct !{!87, !"LVerDomain"}
!88 = !{!89}
!89 = distinct !{!89, !87}
!90 = distinct !{!90, !8}
!91 = distinct !{!91, !10}
!92 = distinct !{!92, !8}
!93 = !{!94}
!94 = distinct !{!94, !95}
!95 = distinct !{!95, !"LVerDomain"}
!96 = !{!97}
!97 = distinct !{!97, !95}
!98 = distinct !{!98, !8}
!99 = distinct !{!99, !10}
!100 = distinct !{!100, !8}
!101 = !{!102}
!102 = distinct !{!102, !103}
!103 = distinct !{!103, !"LVerDomain"}
!104 = !{!105}
!105 = distinct !{!105, !103}
!106 = distinct !{!106, !8}
!107 = distinct !{!107, !10}
!108 = distinct !{!108, !8}
!109 = !{!110}
!110 = distinct !{!110, !111}
!111 = distinct !{!111, !"LVerDomain"}
!112 = !{!113}
!113 = distinct !{!113, !111}
!114 = distinct !{!114, !8}
!115 = distinct !{!115, !10}
!116 = distinct !{!116, !8}
