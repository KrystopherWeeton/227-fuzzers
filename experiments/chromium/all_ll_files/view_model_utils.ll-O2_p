; ModuleID = '../../ui/views/view_model_utils.cc'
source_filename = "../../ui/views/view_model_utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.views::ViewModelBase" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"*, %"class.std::__1::__compressed_pair.132" }
%"struct.views::ViewModelBase::Entry" = type { %"class.views::View"*, %"class.gfx::Rect" }
%"class.views::View" = type <{ %"class.ui::LayerDelegate", %"class.ui::LayerObserver", %"class.ui::LayerOwner", %"class.ui::AcceleratorTarget", %"class.ui::EventTarget", %"class.ui::EventHandler", %"class.ui::PropertyHandler", %"class.ui::metadata::MetaDataProvider", i8, [3 x i8], i32, i32, [4 x i8], %"class.views::View"*, %"class.std::__1::vector.37", i8, [3 x i8], %"class.absl::optional", %"class.gfx::Rect", i8, i8, i8, i8, [4 x i8], %"class.std::__1::unique_ptr.44", %class.SkPath, i8, [7 x i8], %"class.std::__1::unique_ptr.63", %"class.absl::optional.69", i8, [7 x i8], %"class.std::__1::unique_ptr.74", %"class.std::__1::unique_ptr.80", %"class.ui::PaintCache", i8, [7 x i8], %"class.ui::NativeTheme"*, i8, %"class.absl::optional.91", i8, i8, [3 x i8], %"class.std::__1::vector.96", %"class.std::__1::unique_ptr.103", %"class.views::FocusManager"*, %"class.std::__1::unique_ptr.109", i64, %"class.views::View"*, %"class.views::View"*, i32, [4 x i8], %"class.views::ContextMenuController"*, %"class.views::DragController"*, %"class.std::__1::unique_ptr.116", %"class.std::__1::unique_ptr.122", %"class.base::ObserverList.128", i32, [4 x i8] }>
%"class.ui::LayerDelegate" = type { i32 (...)** }
%"class.ui::LayerObserver" = type { i32 (...)** }
%"class.ui::LayerOwner" = type { i32 (...)**, %"class.std::__1::unique_ptr", %"class.ui::Layer"*, %"class.base::ObserverList" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.ui::Layer"* }
%"class.ui::Layer" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.1", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.3" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.ui::AcceleratorTarget" = type { i32 (...)** }
%"class.ui::EventTarget" = type { i32 (...)**, %"class.std::__1::vector.6", %"class.std::__1::vector.13", %"class.ui::EventHandler"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.ui::EventTarget::PrioritizedHandler"*, %"struct.ui::EventTarget::PrioritizedHandler"*, %"class.std::__1::__compressed_pair.8" }
%"struct.ui::EventTarget::PrioritizedHandler" = type <{ %"class.ui::EventHandler"*, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.ui::EventTarget::PrioritizedHandler"* }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"class.ui::EventHandler"**, %"class.ui::EventHandler"**, %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.ui::EventHandler"** }
%"class.ui::EventHandler" = type { i32 (...)**, %"class.std::__1::stack" }
%"class.std::__1::stack" = type { %"class.base::circular_deque" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.ui::EventDispatcher"**, i64 }
%"class.ui::EventDispatcher" = type opaque
%"class.ui::PropertyHandler" = type { i32 (...)**, %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.20", %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i64 }
%"class.ui::metadata::MetaDataProvider" = type { i32 (...)**, %"class.std::__1::map.28" }
%"class.std::__1::map.28" = type { %"class.std::__1::__tree.29" }
%"class.std::__1::__tree.29" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.30", %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"class.views::View"**, %"class.views::View"**, %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.views::View"** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.std::__1::vector.37"* }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.53", %"struct.std::__1::atomic.53", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.51, %class.SkTDArray.52, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.50" }
%"struct.std::__1::__atomic_base.50" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.51 = type { i8*, i32, i32 }
%class.SkTDArray.52 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.58 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.53" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.58 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.59", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.59" = type { %"struct.std::__1::__atomic_base.60" }
%"struct.std::__1::__atomic_base.60" = type { %"struct.std::__1::__cxx_atomic_impl.61" }
%"struct.std::__1::__cxx_atomic_impl.61" = type { %"struct.std::__1::__cxx_atomic_base_impl.62" }
%"struct.std::__1::__cxx_atomic_base_impl.62" = type { i8 }
%"struct.std::__1::atomic.53" = type { %"struct.std::__1::__atomic_base.54" }
%"struct.std::__1::__atomic_base.54" = type { %"struct.std::__1::__atomic_base.55" }
%"struct.std::__1::__atomic_base.55" = type { %"struct.std::__1::__cxx_atomic_impl.56" }
%"struct.std::__1::__cxx_atomic_impl.56" = type { %"struct.std::__1::__cxx_atomic_base_impl.57" }
%"struct.std::__1::__cxx_atomic_base_impl.57" = type { i8 }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.views::LayoutManager"* }
%"class.views::LayoutManager" = type { i32 (...)**, %"class.views::View"* }
%"class.absl::optional.69" = type { %"class.absl::optional_internal::optional_data.70" }
%"class.absl::optional_internal::optional_data.70" = type { %"class.absl::optional_internal::optional_data_base.71" }
%"class.absl::optional_internal::optional_data_base.71" = type { %"class.absl::optional_internal::optional_data_dtor_base.72" }
%"class.absl::optional_internal::optional_data_dtor_base.72" = type { i8, %union.anon.73 }
%union.anon.73 = type { %"class.views::View::DefaultFillLayout" }
%"class.views::View::DefaultFillLayout" = type { %"class.views::LayoutManager" }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.views::Background"* }
%"class.views::Background" = type opaque
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.views::Border"* }
%"class.views::Border" = type opaque
%"class.ui::PaintCache" = type <{ %class.sk_sp.86, float, [4 x i8] }>
%class.sk_sp.86 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.87", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { i8* }
%"class.ui::NativeTheme" = type opaque
%"class.absl::optional.91" = type { %"class.absl::optional_internal::optional_data.92" }
%"class.absl::optional_internal::optional_data.92" = type { %"class.absl::optional_internal::optional_data_base.93" }
%"class.absl::optional_internal::optional_data_base.93" = type { %"class.absl::optional_internal::optional_data_dtor_base.94" }
%"class.absl::optional_internal::optional_data_dtor_base.94" = type { i8, %union.anon.95 }
%union.anon.95 = type { i8 }
%"class.std::__1::vector.96" = type { %"class.std::__1::__vector_base.97" }
%"class.std::__1::__vector_base.97" = type { %"class.ui::Layer"**, %"class.ui::Layer"**, %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.ui::Layer"** }
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.views::ViewMaskLayer"* }
%"class.views::ViewMaskLayer" = type opaque
%"class.views::FocusManager" = type opaque
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.std::__1::vector.112"* }
%"class.std::__1::vector.112" = type opaque
%"class.views::ContextMenuController" = type opaque
%"class.views::DragController" = type opaque
%"class.std::__1::unique_ptr.116" = type { %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.views::ViewTargeter"* }
%"class.views::ViewTargeter" = type { %"class.ui::EventTargeter", %"class.views::ViewTargeterDelegate"* }
%"class.ui::EventTargeter" = type { i32 (...)** }
%"class.views::ViewTargeterDelegate" = type opaque
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.views::ViewAccessibility"* }
%"class.views::ViewAccessibility" = type opaque
%"class.base::ObserverList.128" = type <{ %"class.std::__1::vector.1", %"class.base::LinkedList.129", i64, i32, [4 x i8] }>
%"class.base::LinkedList.129" = type { %"class.base::LinkNode.130" }
%"class.base::LinkNode.130" = type { %"class.base::internal::LinkNodeBase" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"struct.views::ViewModelBase::Entry"* }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views14ViewModelUtils26SetViewBoundsToIdealBoundsERKNS_13ViewModelBaseE(%"class.views::ViewModelBase"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %2, align 8
  %4 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %4, align 8
  %6 = icmp eq %"struct.views::ViewModelBase::Entry"* %3, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %8, %1
  ret void

8:                                                ; preds = %1, %8
  %9 = phi %"struct.views::ViewModelBase::Entry"* [ %13, %8 ], [ %3, %1 ]
  %10 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %9, i64 0, i32 0
  %11 = load %"class.views::View"*, %"class.views::View"** %10, align 8
  %12 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %9, i64 0, i32 1
  tail call void @_ZN5views4View13SetBoundsRectERKN3gfx4RectE(%"class.views::View"* %11, %"class.gfx::Rect"* dereferenceable(16) %12) #4
  %13 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %9, i64 1
  %14 = icmp eq %"struct.views::ViewModelBase::Entry"* %13, %5
  br i1 %14, label %7, label %8
}

declare void @_ZN5views4View13SetBoundsRectERKN3gfx4RectE(%"class.views::View"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5views14ViewModelUtils15IsAtIdealBoundsERKNS_13ViewModelBaseE(%"class.views::ViewModelBase"* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %2, align 8
  %4 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %4, align 8
  %6 = icmp eq %"struct.views::ViewModelBase::Entry"* %3, %5
  br i1 %6, label %37, label %9

7:                                                ; preds = %30
  %8 = icmp eq %"struct.views::ViewModelBase::Entry"* %36, %5
  br i1 %8, label %37, label %9

9:                                                ; preds = %1, %7
  %10 = phi %"struct.views::ViewModelBase::Entry"* [ %36, %7 ], [ %3, %1 ]
  %11 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %10, i64 0, i32 0
  %12 = load %"class.views::View"*, %"class.views::View"** %11, align 8
  %13 = getelementptr inbounds %"class.views::View", %"class.views::View"* %12, i64 0, i32 18, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %10, i64 0, i32 1, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %14, %16
  br i1 %17, label %18, label %37

18:                                               ; preds = %9
  %19 = getelementptr inbounds %"class.views::View", %"class.views::View"* %12, i64 0, i32 18, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %10, i64 0, i32 1, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %20, %22
  br i1 %23, label %24, label %37

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"class.views::View", %"class.views::View"* %12, i64 0, i32 18, i32 1, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %10, i64 0, i32 1, i32 1, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %26, %28
  br i1 %29, label %30, label %37

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.views::View", %"class.views::View"* %12, i64 0, i32 18, i32 1, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %10, i64 0, i32 1, i32 1, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %32, %34
  %36 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %10, i64 1
  br i1 %35, label %7, label %37

37:                                               ; preds = %7, %9, %18, %24, %30, %1
  %38 = phi i1 [ true, %1 ], [ false, %30 ], [ false, %18 ], [ false, %24 ], [ false, %9 ], [ true, %7 ]
  ret i1 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5views14ViewModelUtils18DetermineMoveIndexERKNS_13ViewModelBaseEPNS_4ViewEbii(%"class.views::ViewModelBase"* nocapture readonly dereferenceable(24), %"class.views::View"* readnone, i1 zeroext, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = select i1 %2, i32 %3, i32 %4
  %7 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %7, align 8
  %9 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %8, i64 0, i32 0
  %10 = load %"class.views::View"*, %"class.views::View"** %9, align 8
  %11 = icmp eq %"class.views::View"* %10, %1
  br i1 %11, label %32, label %12

12:                                               ; preds = %5, %27
  %13 = phi %"struct.views::ViewModelBase::Entry"* [ %28, %27 ], [ %8, %5 ]
  %14 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %13, i64 0, i32 1
  %15 = tail call i64 @_ZNK3gfx4Rect11CenterPointEv(%"class.gfx::Rect"* %14) #4
  %16 = lshr i64 %15, 32
  %17 = select i1 %2, i64 %15, i64 %16
  %18 = trunc i64 %17 to i32
  %19 = icmp slt i32 %6, %18
  br i1 %19, label %20, label %27

20:                                               ; preds = %12
  %21 = bitcast %"class.views::ViewModelBase"* %0 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = ptrtoint %"struct.views::ViewModelBase::Entry"* %13 to i64
  %24 = sub i64 %23, %22
  %25 = sdiv exact i64 %24, 24
  %26 = trunc i64 %25 to i32
  br label %98

27:                                               ; preds = %12
  %28 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %13, i64 1
  %29 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %28, i64 0, i32 0
  %30 = load %"class.views::View"*, %"class.views::View"** %29, align 8
  %31 = icmp eq %"class.views::View"* %30, %1
  br i1 %31, label %32, label %12

32:                                               ; preds = %27, %5
  %33 = phi %"struct.views::ViewModelBase::Entry"* [ %8, %5 ], [ %28, %27 ]
  %34 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %33, i64 1
  %35 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 1
  %36 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %35, align 8
  %37 = icmp eq %"struct.views::ViewModelBase::Entry"* %34, %36
  br i1 %37, label %38, label %45

38:                                               ; preds = %32
  %39 = bitcast %"class.views::ViewModelBase"* %0 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = ptrtoint %"struct.views::ViewModelBase::Entry"* %33 to i64
  %42 = sub i64 %41, %40
  %43 = sdiv exact i64 %42, 24
  %44 = trunc i64 %43 to i32
  br label %98

45:                                               ; preds = %32
  %46 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %33, i64 1, i32 1, i32 0
  %47 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %33, i64 0, i32 1, i32 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %33, i64 0, i32 1, i32 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = bitcast %"class.gfx::Point"* %46 to i64*
  %52 = load i64, i64* %51, align 4
  %53 = trunc i64 %52 to i32
  %54 = lshr i64 %52, 32
  %55 = trunc i64 %54 to i32
  %56 = icmp sgt i32 %48, -1
  %57 = select i1 %56, i32 -2147483648, i32 2147483647
  %58 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %53, i32 %48) #4
  %59 = extractvalue { i32, i1 } %58, 1
  %60 = extractvalue { i32, i1 } %58, 0
  %61 = select i1 %59, i32 %57, i32 %60, !prof !2
  %62 = icmp sgt i32 %50, -1
  %63 = select i1 %62, i32 -2147483648, i32 2147483647
  %64 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %55, i32 %50) #4
  %65 = extractvalue { i32, i1 } %64, 1
  %66 = extractvalue { i32, i1 } %64, 0
  %67 = select i1 %65, i32 %63, i32 %66, !prof !2
  %68 = select i1 %2, i32 %61, i32 %67
  br label %69

69:                                               ; preds = %45, %86
  %70 = phi %"struct.views::ViewModelBase::Entry"* [ %87, %86 ], [ %34, %45 ]
  %71 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %70, i64 0, i32 1
  %72 = tail call i64 @_ZNK3gfx4Rect11CenterPointEv(%"class.gfx::Rect"* %71) #4
  %73 = lshr i64 %72, 32
  %74 = select i1 %2, i64 %72, i64 %73
  %75 = trunc i64 %74 to i32
  %76 = sub nsw i32 %75, %68
  %77 = icmp slt i32 %6, %76
  br i1 %77, label %78, label %86

78:                                               ; preds = %69
  %79 = bitcast %"class.views::ViewModelBase"* %0 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = ptrtoint %"struct.views::ViewModelBase::Entry"* %70 to i64
  %82 = sub i64 %81, %80
  %83 = sdiv exact i64 %82, 24
  %84 = trunc i64 %83 to i32
  %85 = add i32 %84, -1
  br label %98

86:                                               ; preds = %69
  %87 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %70, i64 1
  %88 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %35, align 8
  %89 = icmp eq %"struct.views::ViewModelBase::Entry"* %87, %88
  br i1 %89, label %90, label %69

90:                                               ; preds = %86
  %91 = ptrtoint %"struct.views::ViewModelBase::Entry"* %88 to i64
  %92 = bitcast %"class.views::ViewModelBase"* %0 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %91, %93
  %95 = sdiv exact i64 %94, 24
  %96 = trunc i64 %95 to i32
  %97 = add i32 %96, -1
  br label %98

98:                                               ; preds = %78, %20, %90, %38
  %99 = phi i32 [ %26, %20 ], [ %44, %38 ], [ %85, %78 ], [ %97, %90 ]
  ret i32 %99
}

declare i64 @_ZNK3gfx4Rect11CenterPointEv(%"class.gfx::Rect"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
