; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/decoder/onyxd_if.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/decoder/onyxd_if.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8D_COMP = type { %struct.macroblockd, [4 x %struct.yv12_buffer_config*], %struct.VP8Common, [9 x %struct.BOOL_DECODER], %struct.VP8D_CONFIG, %struct.FRAGMENT_DATA, %struct.vpx_atomic_int, i32, i32, i32, i32, [4 x i32], i32, %struct.vpx_atomic_int*, i8**, i8**, i8**, i8**, i8**, i8**, %struct.MB_ROW_DEC*, %struct.DECODETHREAD_DATA*, i64*, %union.sem_t*, %union.sem_t, i64, i32, i8, i8, i8, i8, i32, i32, i32, i32, i32, void (i8*, i8*, i8*, i32)*, i8*, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%union.int_mv = type { i32 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.mv_context = type { [19 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_DECODER = type { i8*, i8*, i64, i32, i32, void (i8*, i8*, i8*, i32)*, i8* }
%struct.VP8D_CONFIG = type { i32, i32, i32, i32, i32, i32 }
%struct.FRAGMENT_DATA = type { i32, i32, [9 x i8*], [9 x i32] }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_DEC = type { %struct.macroblockd }
%struct.DECODETHREAD_DATA = type { i32, i8*, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.vp8_ppflags_t = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.frame_buffers = type { [32 x %struct.VP8D_COMP*] }

@.str = private unnamed_addr constant [24 x i8] c"Invalid reference frame\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"Incorrect buffer dimensions\00", align 1
@once.lock = internal global i32 0, align 4
@initialize_dec.init_done = internal global i32 0, align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8dx_get_reference(%struct.VP8D_COMP*, i32, %struct.yv12_buffer_config*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2
  switch i32 %1, label %11 [
    i32 1, label %5
    i32 2, label %7
    i32 4, label %9
  ]

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 14
  br label %13

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 15
  br label %13

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 16
  br label %13

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %4, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %12, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0)) #5
  br label %44

13:                                               ; preds = %7, %9, %5
  %14 = phi i32* [ %6, %5 ], [ %8, %7 ], [ %10, %9 ]
  %15 = load i32, i32* %14, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %16
  %18 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %16, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %23, label %41

23:                                               ; preds = %13
  %24 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %17, i64 0, i32 0
  %25 = load i32, i32* %24, align 16
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %25, %27
  br i1 %28, label %29, label %41

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %16, i32 6
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 6
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %31, %33
  br i1 %34, label %35, label %41

35:                                               ; preds = %29
  %36 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %16, i32 5
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 5
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %37, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %35, %29, %23, %13
  %42 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %4, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %42, i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0)) #5
  br label %44

43:                                               ; preds = %35
  tail call void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* %17, %struct.yv12_buffer_config* %2) #5
  br label %44

44:                                               ; preds = %41, %43, %11
  %45 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %4, i64 0, i32 0, i32 0
  %46 = load i32, i32* %45, align 32
  ret i32 %46
}

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #1

declare void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8dx_set_reference(%struct.VP8D_COMP*, i32, %struct.yv12_buffer_config*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2
  switch i32 %1, label %11 [
    i32 1, label %5
    i32 2, label %7
    i32 4, label %9
  ]

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 14
  br label %13

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 15
  br label %13

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 16
  br label %13

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %4, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %12, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0)) #5
  br label %76

13:                                               ; preds = %7, %9, %5
  %14 = phi i32* [ %6, %5 ], [ %8, %7 ], [ %10, %9 ]
  %15 = load i32, i32* %14, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %16, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %18, %20
  br i1 %21, label %22, label %40

22:                                               ; preds = %13
  %23 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %16, i32 0
  %24 = load i32, i32* %23, align 16
  %25 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %24, %26
  br i1 %27, label %28, label %40

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %16, i32 6
  %30 = load i32, i32* %29, align 8
  %31 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 6
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %30, %32
  br i1 %33, label %34, label %40

34:                                               ; preds = %28
  %35 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %16, i32 5
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 5
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %36, %38
  br i1 %39, label %42, label %40

40:                                               ; preds = %34, %28, %22, %13
  %41 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %4, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %41, i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0)) #5
  br label %76

42:                                               ; preds = %34
  %43 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 0
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %59, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 1
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %59, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 2
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %59, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 3
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 0
  %58 = select i1 %57, i32 3, i32 4
  br label %59

59:                                               ; preds = %42, %46, %50, %54
  %60 = phi i32 [ 0, %42 ], [ 1, %46 ], [ 2, %50 ], [ %58, %54 ]
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %61
  store i32 0, i32* %62, align 4
  %63 = load i32, i32* %14, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = icmp sgt i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %59
  %69 = add nsw i32 %66, -1
  store i32 %69, i32* %65, align 4
  br label %70

70:                                               ; preds = %59, %68
  store i32 %60, i32* %14, align 4
  %71 = load i32, i32* %62, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %62, align 4
  %73 = load i32, i32* %14, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %74
  tail call void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* %2, %struct.yv12_buffer_config* %75) #5
  br label %76

76:                                               ; preds = %40, %70, %11
  %77 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %4, i64 0, i32 0, i32 0
  %78 = load i32, i32* %77, align 32
  ret i32 %78
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8dx_receive_compressed_data(%struct.VP8D_COMP*, i64) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 0, i32 0
  store i32 0, i32* %3, align 32
  %4 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 32
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %52

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 5, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp ult i32 %9, 2
  br i1 %10, label %11, label %52

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 5, i32 3, i64 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %52

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 14
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %20, 1
  br i1 %21, label %22, label %48

22:                                               ; preds = %15
  %23 = add nsw i32 %20, -1
  store i32 %23, i32* %19, align 4
  %24 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %40, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 1
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %40, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %40, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 0
  %39 = select i1 %38, i32 3, i32 4
  br label %40

40:                                               ; preds = %35, %31, %27, %22
  %41 = phi i32 [ 0, %22 ], [ 1, %27 ], [ 2, %31 ], [ %39, %35 ]
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %42
  store i32 1, i32* %43, align 4
  store i32 %41, i32* %16, align 4
  %44 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %18
  %45 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %42
  tail call void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* %44, %struct.yv12_buffer_config* %45) #5
  %46 = load i32, i32* %16, align 4
  %47 = sext i32 %46 to i64
  br label %48

48:                                               ; preds = %15, %40
  %49 = phi i64 [ %47, %40 ], [ %18, %15 ]
  %50 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %49, i32 28
  store i32 1, i32* %50, align 4
  %51 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 24
  store i32 0, i32* %51, align 8
  br label %242

52:                                               ; preds = %2, %11, %7
  %53 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 0
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %69, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 1
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %69, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 2
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %69, label %64

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 3
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  %68 = select i1 %67, i32 3, i32 4
  br label %69

69:                                               ; preds = %52, %56, %60, %64
  %70 = phi i32 [ 0, %52 ], [ 1, %56 ], [ 2, %60 ], [ %68, %64 ]
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %71
  store i32 1, i32* %72, align 4
  %73 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 13
  store i32 %70, i32* %73, align 16
  %74 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %71
  %75 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 1, i64 0
  store %struct.yv12_buffer_config* %74, %struct.yv12_buffer_config** %75, align 32
  %76 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 14
  %77 = load i32, i32* %76, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %78
  %80 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 1, i64 1
  store %struct.yv12_buffer_config* %79, %struct.yv12_buffer_config** %80, align 8
  %81 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 15
  %82 = load i32, i32* %81, align 8
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %83
  %85 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 1, i64 2
  store %struct.yv12_buffer_config* %84, %struct.yv12_buffer_config** %85, align 16
  %86 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 16
  %87 = load i32, i32* %86, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %88
  %90 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 1, i64 3
  store %struct.yv12_buffer_config* %89, %struct.yv12_buffer_config** %90, align 8
  %91 = tail call i32 @vp8_decode_frame(%struct.VP8D_COMP* %0) #5
  %92 = icmp slt i32 %91, 0
  br i1 %92, label %93, label %108

93:                                               ; preds = %69
  %94 = load i32, i32* %73, align 16
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = icmp sgt i32 %97, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %93
  %100 = add nsw i32 %97, -1
  store i32 %100, i32* %96, align 4
  br label %101

101:                                              ; preds = %99, %93
  store i32 1, i32* %3, align 32
  %102 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 45, i32 0
  %103 = load i32, i32* %102, align 8
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %241, label %105

105:                                              ; preds = %101
  store i32 %103, i32* %3, align 32
  %106 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 0, i32 2, i64 0
  %107 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 45, i32 2, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 80, i1 false)
  br label %241

108:                                              ; preds = %69
  %109 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 53
  %110 = load i32, i32* %109, align 4
  switch i32 %110, label %115 [
    i32 0, label %130
    i32 1, label %111
    i32 2, label %113
  ]

111:                                              ; preds = %108
  %112 = load i32, i32* %76, align 4
  br label %115

113:                                              ; preds = %108
  %114 = load i32, i32* %81, align 8
  br label %115

115:                                              ; preds = %113, %111, %108
  %116 = phi i32 [ 0, %111 ], [ 0, %113 ], [ -1, %108 ]
  %117 = phi i32 [ %112, %111 ], [ %114, %113 ], [ 0, %108 ]
  %118 = load i32, i32* %86, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %119
  %121 = load i32, i32* %120, align 4
  %122 = icmp sgt i32 %121, 0
  br i1 %122, label %123, label %125

123:                                              ; preds = %115
  %124 = add nsw i32 %121, -1
  store i32 %124, i32* %120, align 4
  br label %125

125:                                              ; preds = %123, %115
  store i32 %117, i32* %86, align 4
  %126 = sext i32 %117 to i64
  %127 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %126
  %128 = load i32, i32* %127, align 4
  %129 = add nsw i32 %128, 1
  store i32 %129, i32* %127, align 4
  br label %130

130:                                              ; preds = %125, %108
  %131 = phi i32 [ %116, %125 ], [ %110, %108 ]
  %132 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 52
  %133 = load i32, i32* %132, align 8
  switch i32 %133, label %138 [
    i32 0, label %153
    i32 1, label %135
    i32 2, label %134
  ]

134:                                              ; preds = %130
  br label %135

135:                                              ; preds = %130, %134
  %136 = phi i32* [ %86, %134 ], [ %76, %130 ]
  %137 = load i32, i32* %136, align 4
  br label %138

138:                                              ; preds = %135, %130
  %139 = phi i32 [ -1, %130 ], [ %131, %135 ]
  %140 = phi i32 [ 0, %130 ], [ %137, %135 ]
  %141 = load i32, i32* %81, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %142
  %144 = load i32, i32* %143, align 4
  %145 = icmp sgt i32 %144, 0
  br i1 %145, label %146, label %148

146:                                              ; preds = %138
  %147 = add nsw i32 %144, -1
  store i32 %147, i32* %143, align 4
  br label %148

148:                                              ; preds = %146, %138
  store i32 %140, i32* %81, align 4
  %149 = sext i32 %140 to i64
  %150 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = add nsw i32 %151, 1
  store i32 %152, i32* %150, align 4
  br label %153

153:                                              ; preds = %148, %130
  %154 = phi i32 [ %139, %148 ], [ %131, %130 ]
  %155 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 50
  %156 = load i32, i32* %155, align 16
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %172, label %158

158:                                              ; preds = %153
  %159 = load i32, i32* %73, align 16
  %160 = load i32, i32* %81, align 4
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %165, label %167

165:                                              ; preds = %158
  %166 = add nsw i32 %163, -1
  store i32 %166, i32* %162, align 4
  br label %167

167:                                              ; preds = %165, %158
  store i32 %159, i32* %81, align 4
  %168 = sext i32 %159 to i64
  %169 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %168
  %170 = load i32, i32* %169, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %169, align 4
  br label %172

172:                                              ; preds = %167, %153
  %173 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 51
  %174 = load i32, i32* %173, align 4
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %190, label %176

176:                                              ; preds = %172
  %177 = load i32, i32* %73, align 16
  %178 = load i32, i32* %86, align 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %179
  %181 = load i32, i32* %180, align 4
  %182 = icmp sgt i32 %181, 0
  br i1 %182, label %183, label %185

183:                                              ; preds = %176
  %184 = add nsw i32 %181, -1
  store i32 %184, i32* %180, align 4
  br label %185

185:                                              ; preds = %183, %176
  store i32 %177, i32* %86, align 4
  %186 = sext i32 %177 to i64
  %187 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = add nsw i32 %188, 1
  store i32 %189, i32* %187, align 4
  br label %190

190:                                              ; preds = %185, %172
  %191 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 49
  %192 = load i32, i32* %191, align 4
  %193 = icmp eq i32 %192, 0
  %194 = load i32, i32* %73, align 16
  br i1 %193, label %214, label %195

195:                                              ; preds = %190
  %196 = load i32, i32* %76, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %197
  %199 = load i32, i32* %198, align 4
  %200 = icmp sgt i32 %199, 0
  br i1 %200, label %201, label %203

201:                                              ; preds = %195
  %202 = add nsw i32 %199, -1
  store i32 %202, i32* %198, align 4
  br label %203

203:                                              ; preds = %201, %195
  store i32 %194, i32* %76, align 4
  %204 = sext i32 %194 to i64
  %205 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %204
  %206 = load i32, i32* %205, align 4
  %207 = add nsw i32 %206, 1
  store i32 %207, i32* %205, align 4
  %208 = load i32, i32* %76, align 4
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %209
  %211 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 10
  store %struct.yv12_buffer_config* %210, %struct.yv12_buffer_config** %211, align 8
  %212 = load i32, i32* %73, align 16
  %213 = sext i32 %212 to i64
  br label %218

214:                                              ; preds = %190
  %215 = sext i32 %194 to i64
  %216 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 11, i64 %215
  %217 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 10
  store %struct.yv12_buffer_config* %216, %struct.yv12_buffer_config** %217, align 8
  br label %218

218:                                              ; preds = %203, %214
  %219 = phi i64 [ %215, %214 ], [ %213, %203 ]
  %220 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 12, i64 %219
  %221 = load i32, i32* %220, align 4
  %222 = add nsw i32 %221, -1
  store i32 %222, i32* %220, align 4
  %223 = icmp eq i32 %154, 0
  br i1 %223, label %225, label %224

224:                                              ; preds = %218
  store i32 1, i32* %3, align 32
  br label %241

225:                                              ; preds = %218
  tail call void @vpx_clear_system_state() #5
  %226 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 24
  %227 = load i32, i32* %226, align 8
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %238, label %229

229:                                              ; preds = %225
  %230 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 60
  %231 = load i32, i32* %230, align 4
  %232 = add i32 %231, 1
  store i32 %232, i32* %230, align 4
  %233 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 41
  %234 = bitcast %struct.modeinfo** %233 to i64*
  %235 = load i64, i64* %234, align 16
  %236 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 42
  %237 = bitcast %struct.modeinfo** %236 to i64*
  store i64 %235, i64* %237, align 8
  br label %238

238:                                              ; preds = %225, %229
  %239 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 26
  store i32 0, i32* %239, align 8
  %240 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 25
  store i64 %1, i64* %240, align 32
  br label %241

241:                                              ; preds = %101, %105, %238, %224
  tail call void @vpx_clear_system_state() #5
  br label %242

242:                                              ; preds = %48, %241
  %243 = phi i32 [ %91, %241 ], [ 0, %48 ]
  ret i32 %243
}

declare i32 @vp8_decode_frame(%struct.VP8D_COMP*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @vpx_clear_system_state() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8dx_get_raw_frame(%struct.VP8D_COMP*, %struct.yv12_buffer_config*, i64* nocapture, i64* nocapture, %struct.vp8_ppflags_t*) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 26
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %18, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 24
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2
  store i32 1, i32* %6, align 8
  %15 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 25
  %16 = load i64, i64* %15, align 32
  store i64 %16, i64* %2, align 8
  store i64 0, i64* %3, align 8
  %17 = tail call i32 @vp8_post_proc_frame(%struct.VP8Common* %14, %struct.yv12_buffer_config* %1, %struct.vp8_ppflags_t* %4) #5
  tail call void @vpx_clear_system_state() #5
  br label %18

18:                                               ; preds = %9, %5, %13
  %19 = phi i32 [ %17, %13 ], [ -1, %5 ], [ -1, %9 ]
  ret i32 %19
}

declare i32 @vp8_post_proc_frame(%struct.VP8Common*, %struct.yv12_buffer_config*, %struct.vp8_ppflags_t*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vp8dx_references_buffer(%struct.VP8Common* nocapture readonly, i32) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 27
  %4 = load i32, i32* %3, align 4
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %31

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 41
  %8 = load %struct.modeinfo*, %struct.modeinfo** %7, align 16
  %9 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 28
  %10 = load i32, i32* %9, align 8
  %11 = icmp sgt i32 %10, 0
  br label %12

12:                                               ; preds = %6, %26
  %13 = phi i32 [ 0, %6 ], [ %29, %26 ]
  %14 = phi %struct.modeinfo* [ %8, %6 ], [ %28, %26 ]
  br i1 %11, label %15, label %26

15:                                               ; preds = %12, %22
  %16 = phi i32 [ %23, %22 ], [ 0, %12 ]
  %17 = phi %struct.modeinfo* [ %24, %22 ], [ %14, %12 ]
  %18 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %17, i64 0, i32 0, i32 2
  %19 = load i8, i8* %18, align 2
  %20 = zext i8 %19 to i32
  %21 = icmp eq i32 %20, %1
  br i1 %21, label %31, label %22

22:                                               ; preds = %15
  %23 = add nuw nsw i32 %16, 1
  %24 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %17, i64 1
  %25 = icmp slt i32 %23, %10
  br i1 %25, label %15, label %26

26:                                               ; preds = %22, %12
  %27 = phi %struct.modeinfo* [ %14, %12 ], [ %24, %22 ]
  %28 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %27, i64 1
  %29 = add nuw nsw i32 %13, 1
  %30 = icmp slt i32 %29, %4
  br i1 %30, label %12, label %31

31:                                               ; preds = %26, %15, %2
  %32 = phi i32 [ 0, %2 ], [ 1, %15 ], [ 0, %26 ]
  ret i32 %32
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_create_decoder_instances(%struct.frame_buffers* nocapture, %struct.VP8D_CONFIG* nocapture readonly) local_unnamed_addr #0 {
  %3 = call fastcc %struct.VP8D_COMP* @create_decompressor()
  %4 = getelementptr inbounds %struct.frame_buffers, %struct.frame_buffers* %0, i64 0, i32 0, i64 0
  store %struct.VP8D_COMP* %3, %struct.VP8D_COMP** %4, align 8
  %5 = icmp eq %struct.VP8D_COMP* %3, null
  br i1 %5, label %27, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %3, i64 0, i32 2, i32 0, i32 4, i64 0
  %8 = call i32 @_setjmp(%struct.__jmp_buf_tag* %7) #6
  %9 = icmp eq i32 %8, 0
  %10 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %4, align 8
  br i1 %9, label %18, label %11

11:                                               ; preds = %6
  %12 = icmp eq %struct.VP8D_COMP* %10, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %11
  call void @vp8_decoder_remove_threads(%struct.VP8D_COMP* nonnull %10) #5
  %14 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %10, i64 0, i32 2
  call void @vp8_remove_common(%struct.VP8Common* %14) #5
  %15 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %10, i64 0, i32 0, i32 0, i64 0
  call void @vpx_free(i8* %15) #5
  br label %16

16:                                               ; preds = %11, %13
  %17 = bitcast %struct.frame_buffers* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 256, i1 false)
  call void @vpx_clear_system_state() #5
  br label %27

18:                                               ; preds = %6
  %19 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %10, i64 0, i32 2, i32 0, i32 3
  store i32 1, i32* %19, align 8
  %20 = getelementptr inbounds %struct.VP8D_CONFIG, %struct.VP8D_CONFIG* %1, i64 0, i32 4
  %21 = load i32, i32* %20, align 4
  %22 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %4, align 8
  %23 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %22, i64 0, i32 7
  store i32 %21, i32* %23, align 4
  %24 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %4, align 8
  call void @vp8_decoder_create_threads(%struct.VP8D_COMP* %24) #5
  %25 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %4, align 8
  %26 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %25, i64 0, i32 2, i32 0, i32 3
  store i32 0, i32* %26, align 8
  br label %27

27:                                               ; preds = %2, %18, %16
  %28 = phi i32 [ 1, %16 ], [ 0, %18 ], [ 1, %2 ]
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct.VP8D_COMP* @create_decompressor() unnamed_addr #0 {
  %1 = call i8* @vpx_memalign(i64 32, i64 14784) #5
  %2 = bitcast i8* %1 to %struct.VP8D_COMP*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %22, label %4

4:                                                ; preds = %0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %1, i8 0, i64 14784, i1 false)
  %5 = getelementptr inbounds i8, i8* %1, i64 5120
  %6 = bitcast i8* %5 to %struct.VP8Common*
  %7 = getelementptr inbounds i8, i8* %1, i64 5216
  %8 = bitcast i8* %7 to %struct.__jmp_buf_tag*
  %9 = call i32 @_setjmp(%struct.__jmp_buf_tag* %8) #6
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds i8, i8* %1, i64 5208
  %12 = bitcast i8* %11 to i32*
  br i1 %10, label %14, label %13

13:                                               ; preds = %4
  store i32 0, i32* %12, align 8
  call void @vp8_remove_common(%struct.VP8Common* %6) #5
  call void @vpx_free(i8* nonnull %1) #5
  br label %22

14:                                               ; preds = %4
  store i32 1, i32* %12, align 8
  call void @vp8_create_common(%struct.VP8Common* %6) #5
  %15 = getelementptr inbounds i8, i8* %1, i64 13916
  %16 = bitcast i8* %15 to i32*
  store i32 0, i32* %16, align 4
  %17 = getelementptr inbounds i8, i8* %1, i64 14728
  %18 = bitcast i8* %17 to i32*
  store i32 1, i32* %18, align 8
  call void @vp8cx_init_de_quantizer(%struct.VP8D_COMP* nonnull %2) #5
  call void @vp8_loop_filter_init(%struct.VP8Common* %6) #5
  store i32 0, i32* %12, align 8
  %19 = getelementptr inbounds i8, i8* %1, i64 14736
  %20 = bitcast i8* %1 to %struct.macroblockd*
  call void @llvm.memset.p0i8.i64(i8* align 16 %19, i8 0, i64 16, i1 false)
  call void @vp8_setup_block_dptrs(%struct.macroblockd* nonnull %20) #5
  %21 = call i32 @pthread_once(i32* nonnull @once.lock, void ()* nonnull @initialize_dec) #5
  br label %22

22:                                               ; preds = %0, %14, %13
  %23 = phi %struct.VP8D_COMP* [ null, %13 ], [ %2, %14 ], [ null, %0 ]
  ret %struct.VP8D_COMP* %23
}

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_remove_decoder_instances(%struct.frame_buffers* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.frame_buffers, %struct.frame_buffers* %0, i64 0, i32 0, i64 0
  %3 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %2, align 8
  %4 = icmp eq %struct.VP8D_COMP* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  tail call void @vp8_decoder_remove_threads(%struct.VP8D_COMP* nonnull %3) #5
  %6 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %3, i64 0, i32 2
  tail call void @vp8_remove_common(%struct.VP8Common* %6) #5
  %7 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %3, i64 0, i32 0, i32 0, i64 0
  tail call void @vpx_free(i8* %7) #5
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i32 [ 0, %5 ], [ 1, %1 ]
  ret i32 %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @vp8_decoder_create_threads(%struct.VP8D_COMP*) local_unnamed_addr #1

declare void @vp8_decoder_remove_threads(%struct.VP8D_COMP*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vp8dx_get_quantizer(%struct.VP8D_COMP* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 34
  %3 = load i32, i32* %2, align 16
  ret i32 %3
}

declare i8* @vpx_memalign(i64, i64) local_unnamed_addr #1

declare void @vp8_create_common(%struct.VP8Common*) local_unnamed_addr #1

declare void @vp8cx_init_de_quantizer(%struct.VP8D_COMP*) local_unnamed_addr #1

declare void @vp8_loop_filter_init(%struct.VP8Common*) local_unnamed_addr #1

declare void @vp8_setup_block_dptrs(%struct.macroblockd*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @initialize_dec() #0 {
  %1 = load volatile i32, i32* @initialize_dec.init_done, align 4
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %4

3:                                                ; preds = %0
  tail call void @vpx_dsp_rtcd() #5
  tail call void @vp8_init_intra_predictors() #5
  store volatile i32 1, i32* @initialize_dec.init_done, align 4
  br label %4

4:                                                ; preds = %0, %3
  ret void
}

declare i32 @pthread_once(i32*, void ()*) local_unnamed_addr #1

declare void @vpx_dsp_rtcd() local_unnamed_addr #1

declare void @vp8_init_intra_predictors() local_unnamed_addr #1

declare void @vp8_remove_common(%struct.VP8Common*) local_unnamed_addr #1

declare void @vpx_free(i8*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind returns_twice }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
