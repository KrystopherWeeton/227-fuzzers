; ModuleID = '../../components/viz/common/surfaces/surface_range.cc'
source_filename = "../../components/viz/common/surfaces/surface_range.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.viz::SurfaceRange" = type { %"class.absl::optional", %"class.viz::SurfaceId" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.viz::SurfaceId" }
%"class.viz::SurfaceId" = type { %"class.viz::FrameSinkId", %"class.viz::LocalSurfaceId" }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.viz::LocalSurfaceId" = type { i32, i32, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"struct.std::__1::__tuple_less" = type { i8 }
%"class.std::__1::tuple" = type { %"struct.std::__1::__tuple_impl" }
%"struct.std::__1::__tuple_impl" = type { %"class.std::__1::__tuple_leaf", %"class.std::__1::__tuple_leaf.0" }
%"class.std::__1::__tuple_leaf" = type { %"class.viz::SurfaceId"* }
%"class.std::__1::__tuple_leaf.0" = type { %"class.absl::optional"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.1 }
%union.anon.1 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>

$_ZNSt3__112__tuple_lessILm2EEclINS_5tupleIJRKN3viz9SurfaceIdERKN4absl8optionalIS5_EEEEESD_EEbRKT_RKT0_ = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@.str = private unnamed_addr constant [33 x i8] c"SurfaceRange(start: %s, end: %s)\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN3viz12SurfaceRangeC1Ev = hidden unnamed_addr alias void (%"class.viz::SurfaceRange"*), void (%"class.viz::SurfaceRange"*)* @_ZN3viz12SurfaceRangeC2Ev
@_ZN3viz12SurfaceRangeC1ERKN4absl8optionalINS_9SurfaceIdEEERKS3_ = hidden unnamed_addr alias void (%"class.viz::SurfaceRange"*, %"class.absl::optional"*, %"class.viz::SurfaceId"*), void (%"class.viz::SurfaceRange"*, %"class.absl::optional"*, %"class.viz::SurfaceId"*)* @_ZN3viz12SurfaceRangeC2ERKN4absl8optionalINS_9SurfaceIdEEERKS3_
@_ZN3viz12SurfaceRangeC1ERKNS_9SurfaceIdE = hidden unnamed_addr alias void (%"class.viz::SurfaceRange"*, %"class.viz::SurfaceId"*), void (%"class.viz::SurfaceRange"*, %"class.viz::SurfaceId"*)* @_ZN3viz12SurfaceRangeC2ERKNS_9SurfaceIdE
@_ZN3viz12SurfaceRangeC1ERKS0_ = hidden unnamed_addr alias void (%"class.viz::SurfaceRange"*, %"class.viz::SurfaceRange"*), void (%"class.viz::SurfaceRange"*, %"class.viz::SurfaceRange"*)* @_ZN3viz12SurfaceRangeC2ERKS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz12SurfaceRangeC2Ev(%"class.viz::SurfaceRange"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %4 = bitcast %union.anon* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 64, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz12SurfaceRangeC2ERKN4absl8optionalINS_9SurfaceIdEEERKS3_(%"class.viz::SurfaceRange"* nocapture, %"class.absl::optional"* nocapture readonly dereferenceable(40), %"class.viz::SurfaceId"* nocapture readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 40, i1 false) #7
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %25, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  store i32 %11, i32* %9, align 4
  %12 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  store i32 %14, i32* %12, align 4
  %15 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %16 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 8
  store i32 %17, i32* %15, align 8
  %18 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %20 = load i32, i32* %19, align 4
  store i32 %20, i32* %18, align 4
  %21 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %22 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %23 = bitcast %"class.base::UnguessableToken"* %21 to i8*
  %24 = bitcast %"class.base::UnguessableToken"* %22 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 16, i1 false) #7
  store i8 1, i8* %4, align 8
  br label %25

25:                                               ; preds = %3, %8
  %26 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 0
  %27 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  store i32 %28, i32* %26, align 4
  %29 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 1
  %30 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %29, align 4
  %32 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 0
  %33 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 1, i32 0
  %34 = load i32, i32* %33, align 8
  store i32 %34, i32* %32, align 8
  %35 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 1
  %36 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 1, i32 1
  %37 = load i32, i32* %36, align 4
  store i32 %37, i32* %35, align 4
  %38 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 2
  %39 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 1, i32 2
  %40 = bitcast %"class.base::UnguessableToken"* %38 to i8*
  %41 = bitcast %"class.base::UnguessableToken"* %39 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 16, i1 false) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz12SurfaceRangeC2ERKNS_9SurfaceIdE(%"class.viz::SurfaceRange"* nocapture, %"class.viz::SurfaceId"* nocapture readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %3, align 8
  %4 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %4, align 4
  %7 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %7, align 4
  %10 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %11 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 8
  store i32 %12, i32* %10, align 8
  %13 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %14 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %15 = load i32, i32* %14, align 4
  store i32 %15, i32* %13, align 4
  %16 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %17 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2
  %18 = bitcast %"class.base::UnguessableToken"* %16 to i8*
  %19 = bitcast %"class.base::UnguessableToken"* %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 16, i1 false) #7
  %20 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 0
  %21 = load i32, i32* %5, align 4
  store i32 %21, i32* %20, align 4
  %22 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 1
  %23 = load i32, i32* %8, align 4
  store i32 %23, i32* %22, align 4
  %24 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 0
  %25 = load i32, i32* %11, align 8
  store i32 %25, i32* %24, align 8
  %26 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 1
  %27 = load i32, i32* %14, align 4
  store i32 %27, i32* %26, align 4
  %28 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 2
  %29 = bitcast %"class.base::UnguessableToken"* %28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %19, i64 16, i1 false) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz12SurfaceRangeC2ERKS0_(%"class.viz::SurfaceRange"* nocapture, %"class.viz::SurfaceRange"* nocapture readonly dereferenceable(72)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 40, i1 false) #7
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  store i32 %10, i32* %8, align 4
  %11 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  store i32 %13, i32* %11, align 4
  %14 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %15 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %16 = load i32, i32* %15, align 8
  store i32 %16, i32* %14, align 8
  %17 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %18 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  store i32 %19, i32* %17, align 4
  %20 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %21 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %22 = bitcast %"class.base::UnguessableToken"* %20 to i8*
  %23 = bitcast %"class.base::UnguessableToken"* %21 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 16, i1 false) #7
  store i8 1, i8* %3, align 8
  br label %24

24:                                               ; preds = %2, %7
  %25 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 0
  %26 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %25, align 4
  %28 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 1
  %29 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  store i32 %30, i32* %28, align 4
  %31 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 0
  %32 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1, i32 1, i32 0
  %33 = load i32, i32* %32, align 8
  store i32 %33, i32* %31, align 8
  %34 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 1
  %35 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1, i32 1, i32 1
  %36 = load i32, i32* %35, align 4
  store i32 %36, i32* %34, align 4
  %37 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 2
  %38 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1, i32 1, i32 2
  %39 = bitcast %"class.base::UnguessableToken"* %37 to i8*
  %40 = bitcast %"class.base::UnguessableToken"* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 16, i1 false) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3viz12SurfaceRangeeqERKS0_(%"class.viz::SurfaceRange"* nocapture readonly, %"class.viz::SurfaceRange"* nocapture readonly dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp ne i8 %4, 0
  %6 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp ne i8 %7, 0
  %9 = xor i1 %5, %8
  %10 = xor i1 %5, true
  %11 = or i1 %9, %10
  br i1 %11, label %51, label %12

12:                                               ; preds = %2
  %13 = icmp eq i8 %7, 0
  br i1 %13, label %14, label %15, !prof !3

14:                                               ; preds = %12
  tail call void @llvm.trap() #7
  unreachable

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %17, %19
  br i1 %20, label %21, label %88

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %23, %25
  br i1 %26, label %27, label %88

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %29, %31
  br i1 %32, label %33, label %88

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %35, %37
  br i1 %38, label %39, label %88

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 0
  %43 = load i64, i64* %42, align 8
  %44 = icmp eq i64 %41, %43
  br i1 %44, label %45, label %88

45:                                               ; preds = %39
  %46 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = icmp eq i64 %47, %49
  br i1 %50, label %52, label %88

51:                                               ; preds = %2
  br i1 %9, label %88, label %52

52:                                               ; preds = %51, %45
  %53 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1, i32 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %54, %56
  br i1 %57, label %58, label %88

58:                                               ; preds = %52
  %59 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1, i32 0, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %60, %62
  br i1 %63, label %64, label %88

64:                                               ; preds = %58
  %65 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 0
  %66 = load i32, i32* %65, align 8
  %67 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1, i32 1, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = icmp eq i32 %66, %68
  br i1 %69, label %70, label %88

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1, i32 1, i32 1
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %72, %74
  br i1 %75, label %76, label %88

76:                                               ; preds = %70
  %77 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 2, i32 0, i32 0
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1, i32 1, i32 2, i32 0, i32 0
  %80 = load i64, i64* %79, align 8
  %81 = icmp eq i64 %78, %80
  br i1 %81, label %82, label %88

82:                                               ; preds = %76
  %83 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 2, i32 0, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1, i32 1, i32 2, i32 0, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = icmp eq i64 %84, %86
  br label %88

88:                                               ; preds = %51, %15, %39, %27, %33, %21, %82, %76, %70, %64, %58, %52, %45
  %89 = phi i1 [ false, %51 ], [ false, %45 ], [ false, %58 ], [ false, %70 ], [ false, %64 ], [ false, %76 ], [ %87, %82 ], [ false, %52 ], [ false, %21 ], [ false, %33 ], [ false, %27 ], [ false, %39 ], [ false, %15 ]
  ret i1 %89
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3viz12SurfaceRangeneERKS0_(%"class.viz::SurfaceRange"* nocapture readonly, %"class.viz::SurfaceRange"* nocapture readonly dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = tail call zeroext i1 @_ZNK3viz12SurfaceRangeeqERKS0_(%"class.viz::SurfaceRange"* %0, %"class.viz::SurfaceRange"* dereferenceable(72) %1)
  %4 = xor i1 %3, true
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3viz12SurfaceRangeltERKS0_(%"class.viz::SurfaceRange"*, %"class.viz::SurfaceRange"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.std::__1::__tuple_less", align 1
  %4 = alloca %"class.std::__1::tuple", align 8
  %5 = alloca %"class.std::__1::tuple", align 8
  %6 = bitcast %"class.std::__1::tuple"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.viz::SurfaceId"* %7, %"class.viz::SurfaceId"** %9, align 8
  %10 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %4, i64 0, i32 0, i32 1, i32 0
  store %"class.absl::optional"* %8, %"class.absl::optional"** %10, align 8
  %11 = bitcast %"class.std::__1::tuple"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #7
  %12 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1
  %13 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0
  %14 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %5, i64 0, i32 0, i32 0, i32 0
  store %"class.viz::SurfaceId"* %12, %"class.viz::SurfaceId"** %14, align 8
  %15 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %5, i64 0, i32 0, i32 1, i32 0
  store %"class.absl::optional"* %13, %"class.absl::optional"** %15, align 8
  %16 = getelementptr inbounds %"struct.std::__1::__tuple_less", %"struct.std::__1::__tuple_less"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16) #7
  %17 = call zeroext i1 @_ZNSt3__112__tuple_lessILm2EEclINS_5tupleIJRKN3viz9SurfaceIdERKN4absl8optionalIS5_EEEEESD_EEbRKT_RKT0_(%"struct.std::__1::__tuple_less"* nonnull %3, %"class.std::__1::tuple"* nonnull dereferenceable(16) %4, %"class.std::__1::tuple"* nonnull dereferenceable(16) %5) #7
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  ret i1 %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3viz12SurfaceRange18IsInRangeExclusiveERKNS_9SurfaceIdE(%"class.viz::SurfaceRange"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1
  %8 = tail call zeroext i1 @_ZNK3viz9SurfaceId11IsNewerThanERKS0_(%"class.viz::SurfaceId"* %7, %"class.viz::SurfaceId"* dereferenceable(32) %1) #7
  br label %45

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %35

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %17, %19
  br i1 %20, label %21, label %35

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1
  %23 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %24 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 2, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %25, %27
  br i1 %28, label %29, label %35

29:                                               ; preds = %21
  %30 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 2, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = icmp eq i64 %31, %33
  br i1 %34, label %41, label %35

35:                                               ; preds = %29, %15, %21, %9
  %36 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %37 = tail call zeroext i1 @_ZNK3viz9SurfaceId11IsNewerThanERKS0_(%"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* dereferenceable(32) %36) #7
  br i1 %37, label %45, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1
  %40 = tail call zeroext i1 @_ZNK3viz9SurfaceId11IsNewerThanERKS0_(%"class.viz::SurfaceId"* %39, %"class.viz::SurfaceId"* dereferenceable(32) %1) #7
  br label %45

41:                                               ; preds = %29
  %42 = tail call zeroext i1 @_ZNK3viz9SurfaceId11IsNewerThanERKS0_(%"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* dereferenceable(32) %23) #7
  br i1 %42, label %43, label %45

43:                                               ; preds = %41
  %44 = tail call zeroext i1 @_ZNK3viz9SurfaceId11IsNewerThanERKS0_(%"class.viz::SurfaceId"* %22, %"class.viz::SurfaceId"* dereferenceable(32) %1) #7
  br label %45

45:                                               ; preds = %41, %43, %35, %38, %6
  %46 = phi i1 [ %8, %6 ], [ true, %35 ], [ %40, %38 ], [ false, %41 ], [ %44, %43 ]
  ret i1 %46
}

declare zeroext i1 @_ZNK3viz9SurfaceId11IsNewerThanERKS0_(%"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3viz12SurfaceRange24HasDifferentFrameSinkIdsEv(%"class.viz::SurfaceRange"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %7, %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp ne i32 %13, %15
  br label %17

17:                                               ; preds = %1, %11, %5
  %18 = phi i1 [ false, %1 ], [ true, %5 ], [ %16, %11 ]
  ret i1 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3viz12SurfaceRange18IsInRangeInclusiveERKNS_9SurfaceIdE(%"class.viz::SurfaceRange"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = tail call zeroext i1 @_ZNK3viz12SurfaceRange18IsInRangeExclusiveERKNS_9SurfaceIdE(%"class.viz::SurfaceRange"* %0, %"class.viz::SurfaceId"* dereferenceable(32) %1)
  br i1 %3, label %78, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %6, %8
  br i1 %9, label %10, label %40

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %12, %14
  br i1 %15, label %16, label %40

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %18, %20
  br i1 %21, label %22, label %40

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %24, %26
  br i1 %27, label %28, label %40

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 2, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %30, %32
  br i1 %33, label %34, label %40

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 2, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = icmp eq i64 %36, %38
  br i1 %39, label %78, label %40

40:                                               ; preds = %4, %28, %16, %22, %10, %34
  %41 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i8, i8* %41, align 8, !range !2
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %78, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, %8
  br i1 %47, label %48, label %78

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %50, %52
  br i1 %53, label %54, label %78

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %56, %58
  br i1 %59, label %60, label %78

60:                                               ; preds = %54
  %61 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %62, %64
  br i1 %65, label %66, label %78

66:                                               ; preds = %60
  %67 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 0
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = icmp eq i64 %68, %70
  br i1 %71, label %72, label %78

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = icmp eq i64 %74, %76
  br label %78

78:                                               ; preds = %72, %66, %60, %54, %48, %44, %40, %34, %2
  %79 = phi i1 [ true, %34 ], [ true, %2 ], [ false, %40 ], [ false, %48 ], [ false, %60 ], [ false, %54 ], [ false, %66 ], [ %77, %72 ], [ false, %44 ]
  ret i1 %79
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3viz12SurfaceRange23HasDifferentEmbedTokensEv(%"class.viz::SurfaceRange"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 2, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %7, %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 2, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp ne i64 %13, %15
  br label %17

17:                                               ; preds = %1, %11, %5
  %18 = phi i1 [ false, %1 ], [ true, %5 ], [ %16, %11 ]
  ret i1 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3viz12SurfaceRange7IsValidEv(%"class.viz::SurfaceRange"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %65, label %9

9:                                                ; preds = %5, %1
  %10 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %65, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %65, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 2, i32 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %25

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1, i32 2, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %65, label %25

25:                                               ; preds = %21, %17
  %26 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i8, i8* %26, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %65, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %33, %29
  %38 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %65, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %65, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %53

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %49, %45
  %54 = icmp eq i32 %3, %31
  br i1 %54, label %55, label %65

55:                                               ; preds = %53
  %56 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %57, %59
  br i1 %60, label %61, label %65

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 1, i32 1
  %63 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %64 = tail call zeroext i1 @_ZNK3viz14LocalSurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::LocalSurfaceId"* %62, %"class.viz::LocalSurfaceId"* dereferenceable(24) %63) #7
  br label %65

65:                                               ; preds = %21, %49, %55, %25, %53, %37, %41, %33, %9, %13, %5, %61
  %66 = phi i1 [ %64, %61 ], [ false, %21 ], [ true, %25 ], [ false, %49 ], [ true, %55 ], [ false, %5 ], [ false, %13 ], [ false, %9 ], [ false, %33 ], [ false, %41 ], [ false, %37 ], [ true, %53 ]
  ret i1 %66
}

declare zeroext i1 @_ZNK3viz14LocalSurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::LocalSurfaceId"*, %"class.viz::LocalSurfaceId"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz12SurfaceRange8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.viz::SurfaceRange"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %36, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #7
  %10 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZNK3viz9SurfaceId8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %3, %"class.viz::SurfaceId"* %10) #7
  %11 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = select i1 %14, i8* %16, i8* %9
  %18 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #7
  %19 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1
  call void @_ZNK3viz9SurfaceId8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %4, %"class.viz::SurfaceId"* %19) #7
  %20 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = select i1 %23, i8* %25, i8* %18
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i8* %17, i8* %26) #7
  %27 = load i8, i8* %21, align 1
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %8
  %30 = load i8*, i8** %24, align 8
  call void @_ZdlPv(i8* %30) #8
  br label %31

31:                                               ; preds = %8, %29
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #7
  %32 = load i8, i8* %12, align 1
  %33 = icmp slt i8 %32, 0
  br i1 %33, label %34, label %50

34:                                               ; preds = %31
  %35 = load i8*, i8** %15, align 8
  call void @_ZdlPv(i8* %35) #8
  br label %50

36:                                               ; preds = %2
  %37 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #7
  %38 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1
  call void @_ZNK3viz9SurfaceId8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %4, %"class.viz::SurfaceId"* %38) #7
  %39 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  %41 = load i8, i8* %40, align 1
  %42 = icmp slt i8 %41, 0
  %43 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = select i1 %42, i8* %44, i8* %37
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i8* %45) #7
  %46 = load i8, i8* %40, align 1
  %47 = icmp slt i8 %46, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %36
  %49 = load i8*, i8** %43, align 8
  call void @_ZdlPv(i8* %49) #8
  br label %50

50:                                               ; preds = %48, %36, %34, %31
  %51 = phi i8* [ %9, %31 ], [ %9, %34 ], [ %37, %36 ], [ %37, %48 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51) #7
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #2

declare void @_ZNK3viz9SurfaceId8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.viz::SurfaceId"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3vizlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_12SurfaceRangeE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.viz::SurfaceRange"* dereferenceable(72)) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #7
  call void @_ZNK3viz12SurfaceRange8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %3, %"class.viz::SurfaceRange"* %1)
  %5 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = zext i8 %7 to i64
  %14 = select i1 %8, i8* %10, i8* %4
  %15 = select i1 %8, i64 %12, i64 %13
  %16 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* %14, i64 %15) #7
  %17 = load i8, i8* %6, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %2
  %20 = load i8*, i8** %9, align 8
  call void @_ZdlPv(i8* %20) #8
  br label %21

21:                                               ; preds = %2, %19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #7
  ret %"class.std::__1::basic_ostream"* %16
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__112__tuple_lessILm2EEclINS_5tupleIJRKN3viz9SurfaceIdERKN4absl8optionalIS5_EEEEESD_EEbRKT_RKT0_(%"struct.std::__1::__tuple_less"*, %"class.std::__1::tuple"* dereferenceable(16), %"class.std::__1::tuple"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %2, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %6, align 8
  %8 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %5, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %5, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %7, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %7, i64 0, i32 0, i32 1
  %12 = load i32, i32* %8, align 4
  %13 = load i32, i32* %10, align 4
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %147, label %15

15:                                               ; preds = %3
  %16 = icmp ult i32 %13, %12
  br i1 %16, label %147, label %17

17:                                               ; preds = %15
  %18 = load i32, i32* %9, align 4
  %19 = load i32, i32* %11, align 4
  %20 = icmp ult i32 %18, %19
  br i1 %20, label %147, label %21

21:                                               ; preds = %17
  %22 = icmp ult i32 %19, %18
  br i1 %22, label %53, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %5, i64 0, i32 1, i32 0
  %25 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %5, i64 0, i32 1, i32 1
  %26 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %7, i64 0, i32 1, i32 0
  %27 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %7, i64 0, i32 1, i32 1
  %28 = load i32, i32* %24, align 4
  %29 = load i32, i32* %26, align 4
  %30 = icmp ult i32 %28, %29
  br i1 %30, label %147, label %31

31:                                               ; preds = %23
  %32 = icmp ult i32 %29, %28
  br i1 %32, label %53, label %33

33:                                               ; preds = %31
  %34 = load i32, i32* %25, align 4
  %35 = load i32, i32* %27, align 4
  %36 = icmp ult i32 %34, %35
  br i1 %36, label %147, label %37

37:                                               ; preds = %33
  %38 = icmp ult i32 %35, %34
  br i1 %38, label %53, label %39

39:                                               ; preds = %37
  %40 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %5, i64 0, i32 1, i32 2, i32 0, i32 0
  %41 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %5, i64 0, i32 1, i32 2, i32 0, i32 1
  %42 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %7, i64 0, i32 1, i32 2, i32 0, i32 0
  %43 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %7, i64 0, i32 1, i32 2, i32 0, i32 1
  %44 = load i64, i64* %40, align 8
  %45 = load i64, i64* %42, align 8
  %46 = icmp ult i64 %44, %45
  br i1 %46, label %147, label %47

47:                                               ; preds = %39
  %48 = icmp ult i64 %45, %44
  br i1 %48, label %53, label %49

49:                                               ; preds = %47
  %50 = load i64, i64* %41, align 8
  %51 = load i64, i64* %43, align 8
  %52 = icmp ult i64 %50, %51
  br i1 %52, label %147, label %53

53:                                               ; preds = %31, %37, %47, %21, %49
  %54 = load i32, i32* %11, align 4
  %55 = load i32, i32* %9, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %147, label %57

57:                                               ; preds = %53
  %58 = icmp ult i32 %55, %54
  br i1 %58, label %89, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %7, i64 0, i32 1, i32 0
  %61 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %7, i64 0, i32 1, i32 1
  %62 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %5, i64 0, i32 1, i32 0
  %63 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %5, i64 0, i32 1, i32 1
  %64 = load i32, i32* %60, align 4
  %65 = load i32, i32* %62, align 4
  %66 = icmp ult i32 %64, %65
  br i1 %66, label %147, label %67

67:                                               ; preds = %59
  %68 = icmp ult i32 %65, %64
  br i1 %68, label %89, label %69

69:                                               ; preds = %67
  %70 = load i32, i32* %61, align 4
  %71 = load i32, i32* %63, align 4
  %72 = icmp ult i32 %70, %71
  br i1 %72, label %147, label %73

73:                                               ; preds = %69
  %74 = icmp ult i32 %71, %70
  br i1 %74, label %89, label %75

75:                                               ; preds = %73
  %76 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %7, i64 0, i32 1, i32 2, i32 0, i32 0
  %77 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %7, i64 0, i32 1, i32 2, i32 0, i32 1
  %78 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %5, i64 0, i32 1, i32 2, i32 0, i32 0
  %79 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %5, i64 0, i32 1, i32 2, i32 0, i32 1
  %80 = load i64, i64* %76, align 8
  %81 = load i64, i64* %78, align 8
  %82 = icmp ult i64 %80, %81
  br i1 %82, label %147, label %83

83:                                               ; preds = %75
  %84 = icmp ult i64 %81, %80
  br i1 %84, label %89, label %85

85:                                               ; preds = %83
  %86 = load i64, i64* %77, align 8
  %87 = load i64, i64* %79, align 8
  %88 = icmp ult i64 %86, %87
  br i1 %88, label %147, label %89

89:                                               ; preds = %67, %73, %83, %57, %85
  %90 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %1, i64 0, i32 0, i32 1, i32 0
  %91 = load %"class.absl::optional"*, %"class.absl::optional"** %90, align 8
  %92 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %2, i64 0, i32 0, i32 1, i32 0
  %93 = load %"class.absl::optional"*, %"class.absl::optional"** %92, align 8
  %94 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %93, i64 0, i32 0, i32 0, i32 0, i32 0
  %95 = load i8, i8* %94, align 8, !range !2
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %147, label %97

97:                                               ; preds = %89
  %98 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %91, i64 0, i32 0, i32 0, i32 0, i32 0
  %99 = load i8, i8* %98, align 8, !range !2
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %147, label %101

101:                                              ; preds = %97
  %102 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %91, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %103 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %91, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %104 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %93, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %105 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %93, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %106 = load i32, i32* %102, align 4
  %107 = load i32, i32* %104, align 4
  %108 = icmp ult i32 %106, %107
  br i1 %108, label %147, label %109

109:                                              ; preds = %101
  %110 = icmp ult i32 %107, %106
  br i1 %110, label %147, label %111

111:                                              ; preds = %109
  %112 = load i32, i32* %103, align 4
  %113 = load i32, i32* %105, align 4
  %114 = icmp ult i32 %112, %113
  br i1 %114, label %147, label %115

115:                                              ; preds = %111
  %116 = icmp ult i32 %113, %112
  br i1 %116, label %147, label %117

117:                                              ; preds = %115
  %118 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %91, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %119 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %91, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %120 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %93, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %121 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %93, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %122 = load i32, i32* %118, align 4
  %123 = load i32, i32* %120, align 4
  %124 = icmp ult i32 %122, %123
  br i1 %124, label %147, label %125

125:                                              ; preds = %117
  %126 = icmp ult i32 %123, %122
  br i1 %126, label %147, label %127

127:                                              ; preds = %125
  %128 = load i32, i32* %119, align 4
  %129 = load i32, i32* %121, align 4
  %130 = icmp ult i32 %128, %129
  br i1 %130, label %147, label %131

131:                                              ; preds = %127
  %132 = icmp ult i32 %129, %128
  br i1 %132, label %147, label %133

133:                                              ; preds = %131
  %134 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %91, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 0
  %135 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %91, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 1
  %136 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %93, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 0
  %137 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %93, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 1
  %138 = load i64, i64* %134, align 8
  %139 = load i64, i64* %136, align 8
  %140 = icmp ult i64 %138, %139
  br i1 %140, label %147, label %141

141:                                              ; preds = %133
  %142 = icmp ult i64 %139, %138
  br i1 %142, label %147, label %143

143:                                              ; preds = %141
  %144 = load i64, i64* %135, align 8
  %145 = load i64, i64* %137, align 8
  %146 = icmp ult i64 %144, %145
  br label %147

147:                                              ; preds = %15, %59, %69, %75, %53, %3, %23, %33, %39, %17, %143, %141, %133, %131, %127, %125, %117, %115, %111, %109, %101, %97, %89, %85, %49
  %148 = phi i1 [ true, %49 ], [ false, %85 ], [ %146, %143 ], [ false, %109 ], [ false, %125 ], [ false, %131 ], [ false, %141 ], [ false, %115 ], [ false, %89 ], [ true, %101 ], [ true, %117 ], [ true, %127 ], [ true, %133 ], [ true, %111 ], [ true, %97 ], [ true, %17 ], [ true, %39 ], [ true, %33 ], [ true, %23 ], [ true, %3 ], [ false, %53 ], [ false, %75 ], [ false, %69 ], [ false, %59 ], [ false, %15 ]
  ret i1 %148
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #7
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #7
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #7
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #7
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #7
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #7
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #7
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #8
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #7
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #7
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #8
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #7
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #7
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #5

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
