; ModuleID = '../../base/task/thread_pool/thread_pool_instance.cc'
source_filename = "../../base/task/thread_pool/thread_pool_instance.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::ThreadPoolInstance" = type { i32 (...)** }
%"struct.base::ThreadPoolInstance::InitParams" = type { i32, i32, %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::ThreadPoolInstance::ScopedExecutionFence" = type { i8 }
%"class.base::ThreadPoolInstance::ScopedBestEffortExecutionFence" = type { i8 }
%"class.base::internal::ThreadPoolImpl" = type { %"class.base::ThreadPoolInstance", %"class.base::TaskExecutor", %"class.base::internal::ThreadGroup::Delegate", %"class.base::internal::PooledTaskRunnerDelegate", %"class.std::__1::unique_ptr.4", %"class.base::internal::ServiceThread", %"class.base::internal::DelayedTaskManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.79", i8, i8, %"struct.std::__1::atomic.102", i8, i8, i32, i32, %"class.base::internal::TrackedRefFactory.83" }
%"class.base::TaskExecutor" = type { i32 (...)** }
%"class.base::internal::ThreadGroup::Delegate" = type { i32 (...)** }
%"class.base::internal::PooledTaskRunnerDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.base::internal::TaskTrackerPosix"* }
%"class.base::internal::TaskTrackerPosix" = type { %"class.base::internal::TaskTracker", %class.scoped_refptr.52 }
%"class.base::internal::TaskTracker" = type { i32 (...)**, %"class.base::TaskAnnotator", %"class.std::__1::basic_string", i8, %"class.std::__1::unique_ptr.10", %"struct.std::__1::atomic", %"struct.std::__1::atomic.17", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr.21", %"class.base::OnceCallback", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr.31", %"class.base::internal::TrackedRefFactory" }
%"class.base::TaskAnnotator" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.base::internal::TaskTracker::State"* }
%"class.base::internal::TaskTracker::State" = type opaque
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.std::__1::atomic.17" = type { %"struct.std::__1::__atomic_base.18" }
%"struct.std::__1::__atomic_base.18" = type { %"struct.std::__1::__cxx_atomic_impl.19" }
%"struct.std::__1::__cxx_atomic_impl.19" = type { %"struct.std::__1::__cxx_atomic_base_impl.20" }
%"struct.std::__1::__cxx_atomic_base_impl.20" = type { i32 }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.base::ConditionVariable"* }
%"class.base::ConditionVariable" = type <{ %union.pthread_cond_t, %union.pthread_mutex_t*, i8, [7 x i8] }>
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.24, %union.anon.26, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.24 = type { i64 }
%union.anon.26 = type { i64 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.base::internal::CheckedLock" = type { %"class.base::Lock" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.base::WaitableEvent"* }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.34, i8, [7 x i8] }>
%class.scoped_refptr.34 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.35", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.35" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.36" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { i64 }
%"class.base::internal::TrackedRefFactory" = type { %"class.base::internal::TaskTracker"*, %"class.base::AtomicRefCount", [4 x i8], %"class.absl::optional", %"class.absl::optional.45" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [7 x i8], %union.anon.44 }
%union.anon.44 = type { %"class.base::WaitableEvent" }
%"class.absl::optional.45" = type { %"class.absl::optional_internal::optional_data.46" }
%"class.absl::optional_internal::optional_data.46" = type { %"class.absl::optional_internal::optional_data_base.47" }
%"class.absl::optional_internal::optional_data_base.47" = type { %"class.absl::optional_internal::optional_data_dtor_base.48" }
%"class.absl::optional_internal::optional_data_dtor_base.48" = type { i8, %union.anon.49 }
%union.anon.49 = type { %"class.base::internal::TrackedRef" }
%"class.base::internal::TrackedRef" = type { %"class.base::internal::TaskTracker"*, %"class.base::internal::TrackedRefFactory"* }
%class.scoped_refptr.52 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.53" }>
%"class.base::RefCountedThreadSafe.53" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::internal::ServiceThread" = type { %"class.base::Thread.base", [7 x i8] }
%"class.base::Thread.base" = type <{ %"class.base::PlatformThread::Delegate", i8, i8, i8, [5 x i8], %"class.base::Lock", %"class.base::PlatformThreadHandle", %"class.base::Lock", i32, [4 x i8], %"class.base::WaitableEvent", %"class.std::__1::unique_ptr.57", %"class.base::RunLoop"*, i32, [4 x i8], %"class.std::__1::basic_string", %"class.base::WaitableEvent", %"class.base::SequenceCheckerDoNothing" }>
%"class.base::PlatformThread::Delegate" = type { i32 (...)** }
%"class.base::PlatformThreadHandle" = type { i64 }
%"class.std::__1::unique_ptr.57" = type { %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"class.base::Thread::Delegate"* }
%"class.base::Thread::Delegate" = type { i32 (...)** }
%"class.base::RunLoop" = type opaque
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::DelayedTaskManager" = type { %"class.base::RepeatingCallback", %"class.base::TickClock"*, %"class.base::internal::CheckedLock", %class.scoped_refptr.63, %"class.base::internal::IntrusiveHeap" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::TickClock" = type { i32 (...)** }
%class.scoped_refptr.63 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::internal::IntrusiveHeap" = type { %"class.base::IntrusiveHeap" }
%"class.base::IntrusiveHeap" = type { %"struct.base::IntrusiveHeap<base::internal::DelayedTaskManager::DelayedTask, base::internal::IntrusiveHeapImpl<base::internal::DelayedTaskManager::DelayedTask>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::DelayedTaskManager::DelayedTask> >::Impl" }
%"struct.base::IntrusiveHeap<base::internal::DelayedTaskManager::DelayedTask, base::internal::IntrusiveHeapImpl<base::internal::DelayedTaskManager::DelayedTask>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::DelayedTaskManager::DelayedTask> >::Impl" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.base::internal::DelayedTaskManager::DelayedTask"*, %"struct.base::internal::DelayedTaskManager::DelayedTask"*, %"class.std::__1::__compressed_pair.66" }
%"struct.base::internal::DelayedTaskManager::DelayedTask" = type <{ %"struct.base::internal::Task", %"class.base::OnceCallback.64", %class.scoped_refptr.65, i8, [7 x i8] }>
%"struct.base::internal::Task" = type { %"struct.base::PendingTask.base", [3 x i8] }
%"struct.base::PendingTask.base" = type <{ %"class.base::OnceCallback", %"class.base::Location", %"class.base::TimeTicks", %"class.base::TimeTicks", %"struct.std::__1::array", i32, [4 x i8], i8*, i32, i8 }>
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"struct.std::__1::array" = type { [4 x i8*] }
%"class.base::OnceCallback.64" = type { %"class.base::internal::CallbackBase" }
%class.scoped_refptr.65 = type { %"class.base::TaskRunner"* }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.53", [4 x i8] }>
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"struct.base::internal::DelayedTaskManager::DelayedTask"* }
%"class.base::internal::PooledSingleThreadTaskRunnerManager" = type <{ %"class.base::internal::TrackedRef", %"class.base::internal::DelayedTaskManager"*, %"class.base::WorkerThreadObserver"*, %"class.base::internal::CheckedLock", %"class.std::__1::vector.71", i32, [4 x i8], [4 x [2 x %"class.base::internal::WorkerThread"*]], i8, [7 x i8] }>
%"class.base::WorkerThreadObserver" = type opaque
%"class.std::__1::vector.71" = type { %"class.std::__1::__vector_base.72" }
%"class.std::__1::__vector_base.72" = type { %class.scoped_refptr.73*, %class.scoped_refptr.73*, %"class.std::__1::__compressed_pair.74" }
%class.scoped_refptr.73 = type { %"class.base::internal::WorkerThread"* }
%"class.base::internal::WorkerThread" = type <{ %"class.base::PlatformThread::Delegate", %"class.base::RefCountedThreadSafe.114", [4 x i8], %class.scoped_refptr.73, %"class.base::internal::CheckedLock", %"class.base::PlatformThreadHandle", %"class.base::TimeTicks", %"class.base::WaitableEvent", %"class.base::AtomicFlag", [7 x i8], %"class.std::__1::unique_ptr.120", %"class.base::internal::TrackedRef", %"class.base::WorkerThreadObserver"*, i32, i32, %"class.base::AtomicFlag", [7 x i8] }>
%"class.base::RefCountedThreadSafe.114" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.base::internal::WorkerThread::Delegate"* }
%"class.base::internal::WorkerThread::Delegate" = type { i32 (...)** }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.115" }
%"struct.std::__1::atomic.115" = type { %"struct.std::__1::__atomic_base.116" }
%"struct.std::__1::__atomic_base.116" = type { %"struct.std::__1::__atomic_base.117" }
%"struct.std::__1::__atomic_base.117" = type { %"struct.std::__1::__cxx_atomic_impl.118" }
%"struct.std::__1::__cxx_atomic_impl.118" = type { %"struct.std::__1::__cxx_atomic_base_impl.119" }
%"struct.std::__1::__cxx_atomic_base_impl.119" = type { i8 }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %class.scoped_refptr.73* }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.base::internal::ThreadGroup"* }
%"class.base::internal::ThreadGroup" = type { i32 (...)**, %"class.base::internal::TrackedRef", %"class.base::internal::TrackedRef.82", %"class.base::internal::CheckedLock", i8, [7 x i8], %"class.base::internal::PriorityQueue", %"struct.std::__1::atomic.95", %"class.base::internal::ThreadGroup"* }
%"class.base::internal::TrackedRef.82" = type { %"class.base::internal::ThreadGroup::Delegate"*, %"class.base::internal::TrackedRefFactory.83"* }
%"class.base::internal::PriorityQueue" = type <{ %"class.base::internal::IntrusiveHeap.84", %"struct.std::__1::array.94", i8, [7 x i8] }>
%"class.base::internal::IntrusiveHeap.84" = type { %"class.base::IntrusiveHeap.85" }
%"class.base::IntrusiveHeap.85" = type { %"struct.base::IntrusiveHeap<base::internal::PriorityQueue::TaskSourceAndSortKey, base::internal::IntrusiveHeapImpl<base::internal::PriorityQueue::TaskSourceAndSortKey>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::PriorityQueue::TaskSourceAndSortKey> >::Impl" }
%"struct.base::IntrusiveHeap<base::internal::PriorityQueue::TaskSourceAndSortKey, base::internal::IntrusiveHeapImpl<base::internal::PriorityQueue::TaskSourceAndSortKey>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::PriorityQueue::TaskSourceAndSortKey> >::Impl" = type { %"class.std::__1::vector.87" }
%"class.std::__1::vector.87" = type { %"class.std::__1::__vector_base.88" }
%"class.std::__1::__vector_base.88" = type { %"class.base::internal::PriorityQueue::TaskSourceAndSortKey"*, %"class.base::internal::PriorityQueue::TaskSourceAndSortKey"*, %"class.std::__1::__compressed_pair.89" }
%"class.base::internal::PriorityQueue::TaskSourceAndSortKey" = type opaque
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.base::internal::PriorityQueue::TaskSourceAndSortKey"* }
%"struct.std::__1::array.94" = type { [3 x i64] }
%"struct.std::__1::atomic.95" = type { %"struct.std::__1::__atomic_base.96" }
%"struct.std::__1::__atomic_base.96" = type { %"struct.std::__1::__cxx_atomic_impl.97" }
%"struct.std::__1::__cxx_atomic_impl.97" = type { %"struct.std::__1::__cxx_atomic_base_impl.98" }
%"struct.std::__1::__cxx_atomic_base_impl.98" = type { %"struct.base::internal::ThreadGroup::YieldSortKey" }
%"struct.base::internal::ThreadGroup::YieldSortKey" = type { i8, i8 }
%"struct.std::__1::atomic.102" = type { %"struct.std::__1::__atomic_base.103" }
%"struct.std::__1::__atomic_base.103" = type { %"struct.std::__1::__cxx_atomic_impl.104" }
%"struct.std::__1::__cxx_atomic_impl.104" = type { %"struct.std::__1::__cxx_atomic_base_impl.105" }
%"struct.std::__1::__cxx_atomic_base_impl.105" = type { i8 }
%"class.base::internal::TrackedRefFactory.83" = type { %"class.base::internal::ThreadGroup::Delegate"*, %"class.base::AtomicRefCount", [4 x i8], %"class.absl::optional", %"class.absl::optional.106" }
%"class.absl::optional.106" = type { %"class.absl::optional_internal::optional_data.107" }
%"class.absl::optional_internal::optional_data.107" = type { %"class.absl::optional_internal::optional_data_base.108" }
%"class.absl::optional_internal::optional_data_base.108" = type { %"class.absl::optional_internal::optional_data_dtor_base.109" }
%"class.absl::optional_internal::optional_data_dtor_base.109" = type { i8, %union.anon.110 }
%union.anon.110 = type { %"class.base::internal::TrackedRef.82" }

@_ZN4base12_GLOBAL__N_113g_thread_poolE = internal unnamed_addr global %"class.base::ThreadPoolInstance"* null, align 8

@_ZN4base18ThreadPoolInstance10InitParamsC1Ei = hidden unnamed_addr alias void (%"struct.base::ThreadPoolInstance::InitParams"*, i32), void (%"struct.base::ThreadPoolInstance::InitParams"*, i32)* @_ZN4base18ThreadPoolInstance10InitParamsC2Ei
@_ZN4base18ThreadPoolInstance10InitParamsD1Ev = hidden unnamed_addr alias void (%"struct.base::ThreadPoolInstance::InitParams"*), void (%"struct.base::ThreadPoolInstance::InitParams"*)* @_ZN4base18ThreadPoolInstance10InitParamsD2Ev
@_ZN4base18ThreadPoolInstance20ScopedExecutionFenceC1Ev = hidden unnamed_addr alias void (%"class.base::ThreadPoolInstance::ScopedExecutionFence"*), void (%"class.base::ThreadPoolInstance::ScopedExecutionFence"*)* @_ZN4base18ThreadPoolInstance20ScopedExecutionFenceC2Ev
@_ZN4base18ThreadPoolInstance20ScopedExecutionFenceD1Ev = hidden unnamed_addr alias void (%"class.base::ThreadPoolInstance::ScopedExecutionFence"*), void (%"class.base::ThreadPoolInstance::ScopedExecutionFence"*)* @_ZN4base18ThreadPoolInstance20ScopedExecutionFenceD2Ev
@_ZN4base18ThreadPoolInstance30ScopedBestEffortExecutionFenceC1Ev = hidden unnamed_addr alias void (%"class.base::ThreadPoolInstance::ScopedBestEffortExecutionFence"*), void (%"class.base::ThreadPoolInstance::ScopedBestEffortExecutionFence"*)* @_ZN4base18ThreadPoolInstance30ScopedBestEffortExecutionFenceC2Ev
@_ZN4base18ThreadPoolInstance30ScopedBestEffortExecutionFenceD1Ev = hidden unnamed_addr alias void (%"class.base::ThreadPoolInstance::ScopedBestEffortExecutionFence"*), void (%"class.base::ThreadPoolInstance::ScopedBestEffortExecutionFence"*)* @_ZN4base18ThreadPoolInstance30ScopedBestEffortExecutionFenceD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base18ThreadPoolInstance10InitParamsC2Ei(%"struct.base::ThreadPoolInstance::InitParams"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.base::ThreadPoolInstance::InitParams", %"struct.base::ThreadPoolInstance::InitParams"* %0, i64 0, i32 0
  store i32 %1, i32* %3, align 8
  %4 = getelementptr inbounds %"struct.base::ThreadPoolInstance::InitParams", %"struct.base::ThreadPoolInstance::InitParams"* %0, i64 0, i32 1
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %"struct.base::ThreadPoolInstance::InitParams", %"struct.base::ThreadPoolInstance::InitParams"* %0, i64 0, i32 2, i32 0
  store i64 30000000, i64* %5, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4base18ThreadPoolInstance10InitParamsD2Ev(%"struct.base::ThreadPoolInstance::InitParams"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base18ThreadPoolInstance20ScopedExecutionFenceC2Ev(%"class.base::ThreadPoolInstance::ScopedExecutionFence"* nocapture readnone) unnamed_addr #2 align 2 {
  %2 = load %"class.base::ThreadPoolInstance"*, %"class.base::ThreadPoolInstance"** @_ZN4base12_GLOBAL__N_113g_thread_poolE, align 8
  %3 = bitcast %"class.base::ThreadPoolInstance"* %2 to void (%"class.base::ThreadPoolInstance"*)***
  %4 = load void (%"class.base::ThreadPoolInstance"*)**, void (%"class.base::ThreadPoolInstance"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.base::ThreadPoolInstance"*)*, void (%"class.base::ThreadPoolInstance"*)** %4, i64 8
  %6 = load void (%"class.base::ThreadPoolInstance"*)*, void (%"class.base::ThreadPoolInstance"*)** %5, align 8
  tail call void %6(%"class.base::ThreadPoolInstance"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base18ThreadPoolInstance20ScopedExecutionFenceD2Ev(%"class.base::ThreadPoolInstance::ScopedExecutionFence"* nocapture readnone) unnamed_addr #2 align 2 {
  %2 = load %"class.base::ThreadPoolInstance"*, %"class.base::ThreadPoolInstance"** @_ZN4base12_GLOBAL__N_113g_thread_poolE, align 8
  %3 = bitcast %"class.base::ThreadPoolInstance"* %2 to void (%"class.base::ThreadPoolInstance"*)***
  %4 = load void (%"class.base::ThreadPoolInstance"*)**, void (%"class.base::ThreadPoolInstance"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.base::ThreadPoolInstance"*)*, void (%"class.base::ThreadPoolInstance"*)** %4, i64 9
  %6 = load void (%"class.base::ThreadPoolInstance"*)*, void (%"class.base::ThreadPoolInstance"*)** %5, align 8
  tail call void %6(%"class.base::ThreadPoolInstance"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base18ThreadPoolInstance30ScopedBestEffortExecutionFenceC2Ev(%"class.base::ThreadPoolInstance::ScopedBestEffortExecutionFence"* nocapture readnone) unnamed_addr #2 align 2 {
  %2 = load %"class.base::ThreadPoolInstance"*, %"class.base::ThreadPoolInstance"** @_ZN4base12_GLOBAL__N_113g_thread_poolE, align 8
  %3 = bitcast %"class.base::ThreadPoolInstance"* %2 to void (%"class.base::ThreadPoolInstance"*)***
  %4 = load void (%"class.base::ThreadPoolInstance"*)**, void (%"class.base::ThreadPoolInstance"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.base::ThreadPoolInstance"*)*, void (%"class.base::ThreadPoolInstance"*)** %4, i64 10
  %6 = load void (%"class.base::ThreadPoolInstance"*)*, void (%"class.base::ThreadPoolInstance"*)** %5, align 8
  tail call void %6(%"class.base::ThreadPoolInstance"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base18ThreadPoolInstance30ScopedBestEffortExecutionFenceD2Ev(%"class.base::ThreadPoolInstance::ScopedBestEffortExecutionFence"* nocapture readnone) unnamed_addr #2 align 2 {
  %2 = load %"class.base::ThreadPoolInstance"*, %"class.base::ThreadPoolInstance"** @_ZN4base12_GLOBAL__N_113g_thread_poolE, align 8
  %3 = bitcast %"class.base::ThreadPoolInstance"* %2 to void (%"class.base::ThreadPoolInstance"*)***
  %4 = load void (%"class.base::ThreadPoolInstance"*)**, void (%"class.base::ThreadPoolInstance"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.base::ThreadPoolInstance"*)*, void (%"class.base::ThreadPoolInstance"*)** %4, i64 11
  %6 = load void (%"class.base::ThreadPoolInstance"*)*, void (%"class.base::ThreadPoolInstance"*)** %5, align 8
  tail call void %6(%"class.base::ThreadPoolInstance"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base18ThreadPoolInstance31CreateAndStartWithDefaultParamsENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(i8*, i64) local_unnamed_addr #2 align 2 {
  %3 = alloca %"struct.base::ThreadPoolInstance::InitParams", align 8
  %4 = tail call i8* @_Znwm(i64 600) #8
  %5 = bitcast i8* %4 to %"class.base::internal::ThreadPoolImpl"*
  tail call void @_ZN4base8internal14ThreadPoolImplC1ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::internal::ThreadPoolImpl"* nonnull %5, i8* %0, i64 %1) #7
  %6 = load %"class.base::ThreadPoolInstance"*, %"class.base::ThreadPoolInstance"** @_ZN4base12_GLOBAL__N_113g_thread_poolE, align 8
  %7 = icmp eq %"class.base::ThreadPoolInstance"* %6, null
  br i1 %7, label %13, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.base::ThreadPoolInstance"* %6 to void (%"class.base::ThreadPoolInstance"*)***
  %10 = load void (%"class.base::ThreadPoolInstance"*)**, void (%"class.base::ThreadPoolInstance"*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.base::ThreadPoolInstance"*)*, void (%"class.base::ThreadPoolInstance"*)** %10, i64 1
  %12 = load void (%"class.base::ThreadPoolInstance"*)*, void (%"class.base::ThreadPoolInstance"*)** %11, align 8
  tail call void %12(%"class.base::ThreadPoolInstance"* nonnull %6) #7
  br label %13

13:                                               ; preds = %2, %8
  store i8* %4, i8** bitcast (%"class.base::ThreadPoolInstance"** @_ZN4base12_GLOBAL__N_113g_thread_poolE to i8**), align 8
  %14 = bitcast i8* %4 to %"class.base::ThreadPoolInstance"*
  %15 = tail call i32 @_ZN4base7SysInfo18NumberOfProcessorsEv() #7
  %16 = icmp sgt i32 %15, 4
  %17 = select i1 %16, i32 %15, i32 4
  %18 = add nsw i32 %17, -1
  %19 = bitcast %"struct.base::ThreadPoolInstance::InitParams"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #7
  %20 = getelementptr inbounds %"struct.base::ThreadPoolInstance::InitParams", %"struct.base::ThreadPoolInstance::InitParams"* %3, i64 0, i32 0
  store i32 %18, i32* %20, align 8
  %21 = getelementptr inbounds %"struct.base::ThreadPoolInstance::InitParams", %"struct.base::ThreadPoolInstance::InitParams"* %3, i64 0, i32 1
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %"struct.base::ThreadPoolInstance::InitParams", %"struct.base::ThreadPoolInstance::InitParams"* %3, i64 0, i32 2, i32 0
  store i64 30000000, i64* %22, align 8
  %23 = bitcast i8* %4 to void (%"class.base::ThreadPoolInstance"*, %"struct.base::ThreadPoolInstance::InitParams"*, %"class.base::WorkerThreadObserver"*)***
  %24 = load void (%"class.base::ThreadPoolInstance"*, %"struct.base::ThreadPoolInstance::InitParams"*, %"class.base::WorkerThreadObserver"*)**, void (%"class.base::ThreadPoolInstance"*, %"struct.base::ThreadPoolInstance::InitParams"*, %"class.base::WorkerThreadObserver"*)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.base::ThreadPoolInstance"*, %"struct.base::ThreadPoolInstance::InitParams"*, %"class.base::WorkerThreadObserver"*)*, void (%"class.base::ThreadPoolInstance"*, %"struct.base::ThreadPoolInstance::InitParams"*, %"class.base::WorkerThreadObserver"*)** %24, i64 2
  %26 = load void (%"class.base::ThreadPoolInstance"*, %"struct.base::ThreadPoolInstance::InitParams"*, %"class.base::WorkerThreadObserver"*)*, void (%"class.base::ThreadPoolInstance"*, %"struct.base::ThreadPoolInstance::InitParams"*, %"class.base::WorkerThreadObserver"*)** %25, align 8
  call void %26(%"class.base::ThreadPoolInstance"* nonnull %14, %"struct.base::ThreadPoolInstance::InitParams"* nonnull dereferenceable(16) %3, %"class.base::WorkerThreadObserver"* null) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base18ThreadPoolInstance6CreateENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(i8*, i64) local_unnamed_addr #2 align 2 {
  %3 = tail call i8* @_Znwm(i64 600) #8
  %4 = bitcast i8* %3 to %"class.base::internal::ThreadPoolImpl"*
  tail call void @_ZN4base8internal14ThreadPoolImplC1ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::internal::ThreadPoolImpl"* nonnull %4, i8* %0, i64 %1) #7
  %5 = load %"class.base::ThreadPoolInstance"*, %"class.base::ThreadPoolInstance"** @_ZN4base12_GLOBAL__N_113g_thread_poolE, align 8
  %6 = icmp eq %"class.base::ThreadPoolInstance"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %2
  %8 = bitcast %"class.base::ThreadPoolInstance"* %5 to void (%"class.base::ThreadPoolInstance"*)***
  %9 = load void (%"class.base::ThreadPoolInstance"*)**, void (%"class.base::ThreadPoolInstance"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.base::ThreadPoolInstance"*)*, void (%"class.base::ThreadPoolInstance"*)** %9, i64 1
  %11 = load void (%"class.base::ThreadPoolInstance"*)*, void (%"class.base::ThreadPoolInstance"*)** %10, align 8
  tail call void %11(%"class.base::ThreadPoolInstance"* nonnull %5) #7
  br label %12

12:                                               ; preds = %7, %2
  store i8* %3, i8** bitcast (%"class.base::ThreadPoolInstance"** @_ZN4base12_GLOBAL__N_113g_thread_poolE to i8**), align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base18ThreadPoolInstance22StartWithDefaultParamsEv(%"class.base::ThreadPoolInstance"*) local_unnamed_addr #2 align 2 {
  %2 = alloca %"struct.base::ThreadPoolInstance::InitParams", align 8
  %3 = tail call i32 @_ZN4base7SysInfo18NumberOfProcessorsEv() #7
  %4 = icmp sgt i32 %3, 4
  %5 = select i1 %4, i32 %3, i32 4
  %6 = add nsw i32 %5, -1
  %7 = bitcast %"struct.base::ThreadPoolInstance::InitParams"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #7
  %8 = getelementptr inbounds %"struct.base::ThreadPoolInstance::InitParams", %"struct.base::ThreadPoolInstance::InitParams"* %2, i64 0, i32 0
  store i32 %6, i32* %8, align 8
  %9 = getelementptr inbounds %"struct.base::ThreadPoolInstance::InitParams", %"struct.base::ThreadPoolInstance::InitParams"* %2, i64 0, i32 1
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %"struct.base::ThreadPoolInstance::InitParams", %"struct.base::ThreadPoolInstance::InitParams"* %2, i64 0, i32 2, i32 0
  store i64 30000000, i64* %10, align 8
  %11 = bitcast %"class.base::ThreadPoolInstance"* %0 to void (%"class.base::ThreadPoolInstance"*, %"struct.base::ThreadPoolInstance::InitParams"*, %"class.base::WorkerThreadObserver"*)***
  %12 = load void (%"class.base::ThreadPoolInstance"*, %"struct.base::ThreadPoolInstance::InitParams"*, %"class.base::WorkerThreadObserver"*)**, void (%"class.base::ThreadPoolInstance"*, %"struct.base::ThreadPoolInstance::InitParams"*, %"class.base::WorkerThreadObserver"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.base::ThreadPoolInstance"*, %"struct.base::ThreadPoolInstance::InitParams"*, %"class.base::WorkerThreadObserver"*)*, void (%"class.base::ThreadPoolInstance"*, %"struct.base::ThreadPoolInstance::InitParams"*, %"class.base::WorkerThreadObserver"*)** %12, i64 2
  %14 = load void (%"class.base::ThreadPoolInstance"*, %"struct.base::ThreadPoolInstance::InitParams"*, %"class.base::WorkerThreadObserver"*)*, void (%"class.base::ThreadPoolInstance"*, %"struct.base::ThreadPoolInstance::InitParams"*, %"class.base::WorkerThreadObserver"*)** %13, align 8
  call void %14(%"class.base::ThreadPoolInstance"* %0, %"struct.base::ThreadPoolInstance::InitParams"* nonnull dereferenceable(16) %2, %"class.base::WorkerThreadObserver"* null) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare i32 @_ZN4base7SysInfo18NumberOfProcessorsEv() local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base18ThreadPoolInstance3SetENSt3__110unique_ptrIS0_NS1_14default_deleteIS0_EEEE(%"class.base::ThreadPoolInstance"*) local_unnamed_addr #2 align 2 {
  %2 = load %"class.base::ThreadPoolInstance"*, %"class.base::ThreadPoolInstance"** @_ZN4base12_GLOBAL__N_113g_thread_poolE, align 8
  %3 = icmp eq %"class.base::ThreadPoolInstance"* %2, null
  br i1 %3, label %9, label %4

4:                                                ; preds = %1
  %5 = bitcast %"class.base::ThreadPoolInstance"* %2 to void (%"class.base::ThreadPoolInstance"*)***
  %6 = load void (%"class.base::ThreadPoolInstance"*)**, void (%"class.base::ThreadPoolInstance"*)*** %5, align 8
  %7 = getelementptr inbounds void (%"class.base::ThreadPoolInstance"*)*, void (%"class.base::ThreadPoolInstance"*)** %6, i64 1
  %8 = load void (%"class.base::ThreadPoolInstance"*)*, void (%"class.base::ThreadPoolInstance"*)** %7, align 8
  tail call void %8(%"class.base::ThreadPoolInstance"* nonnull %2) #7
  br label %9

9:                                                ; preds = %1, %4
  store %"class.base::ThreadPoolInstance"* %0, %"class.base::ThreadPoolInstance"** @_ZN4base12_GLOBAL__N_113g_thread_poolE, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.base::ThreadPoolInstance"* @_ZN4base18ThreadPoolInstance3GetEv() local_unnamed_addr #5 align 2 {
  %1 = load %"class.base::ThreadPoolInstance"*, %"class.base::ThreadPoolInstance"** @_ZN4base12_GLOBAL__N_113g_thread_poolE, align 8
  ret %"class.base::ThreadPoolInstance"* %1
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZN4base8internal14ThreadPoolImplC1ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::internal::ThreadPoolImpl"*, i8*, i64) unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
