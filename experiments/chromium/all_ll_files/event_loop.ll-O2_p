; ModuleID = '../../third_party/blink/renderer/platform/scheduler/common/event_loop.cc'
source_filename = "../../third_party/blink/renderer/platform/scheduler/common/event_loop.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::trace_event::TraceCategory" = type { i8, i32, i8* }
%"class.blink::scheduler::EventLoop" = type { %"class.WTF::RefCounted", %"class.v8::Isolate"*, i8, %"class.WTF::Deque", %"class.std::__1::unique_ptr", %"class.WTF::HashSet" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::Deque" = type { %"class.WTF::Deque<base::OnceCallback<void ()>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<base::OnceCallback<void ()>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::MicrotaskQueue"* }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"class.blink::FrameOrWorkerScheduler"**, i32, i32, i32, [4 x i8] }>
%"class.blink::FrameOrWorkerScheduler" = type { i32 (...)**, %"class.WTF::HashMap", %"class.base::WeakPtrFactory" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable.4" }
%"class.WTF::HashTable.4" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.7 }
%class.scoped_refptr.7 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.8", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.8" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.9" }
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__cxx_atomic_impl.12" }
%"struct.std::__1::__cxx_atomic_impl.12" = type { %"struct.std::__1::__cxx_atomic_base_impl.13" }
%"struct.std::__1::__cxx_atomic_base_impl.13" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::MicrotaskQueue" = type { i32 (...)** }
%"class.WTF::ConditionalDestructor" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::trace_event::TraceArguments" = type { i8, [2 x i8], [2 x i8*], [2 x %"union.base::trace_event::TraceValue"] }
%"union.base::trace_event::TraceValue" = type { i64 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF21ConditionalDestructorINS_5DequeIN4base12OnceCallbackIFvvEEELj0ENS_18PartitionAllocatorEEELb0EED2Ev = comdat any

$_ZN3WTF5DequeIN4base12OnceCallbackIFvvEEELj0ENS_18PartitionAllocatorEE14ExpandCapacityEv = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN4base12OnceCallbackIFvvEEEEEmm = comdat any

$_ZN3WTF9HashTableIPN5blink22FrameOrWorkerSchedulerES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS6_S8_S9_EERKS3_RS3_EENS_18HashTableAddResultISA_S3_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIPN5blink22FrameOrWorkerSchedulerES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_ = comdat any

$_ZN3WTF9HashTableIPN5blink22FrameOrWorkerSchedulerES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSB_ = comdat any

@_ZN4base11trace_event16CategoryRegistry11categories_E = external global [300 x %"struct.base::trace_event::TraceCategory"], align 16
@.str = private unnamed_addr constant [20 x i8] c"RunPendingMicrotask\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.2 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN4base12OnceCallbackIFvvEEEEEPKcv = private unnamed_addr constant [75 x i8] c"const char *WTF::GetStringWithTypeName() [T = base::OnceCallback<void ()>]\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.4 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink22FrameOrWorkerSchedulerEEEPKcv = private unnamed_addr constant [79 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::FrameOrWorkerScheduler *]\00", align 1

@_ZN5blink9scheduler9EventLoopC1EPN2v87IsolateENSt3__110unique_ptrINS2_14MicrotaskQueueENS5_14default_deleteIS7_EEEE = hidden unnamed_addr alias void (%"class.blink::scheduler::EventLoop"*, %"class.v8::Isolate"*, %"class.v8::MicrotaskQueue"*), void (%"class.blink::scheduler::EventLoop"*, %"class.v8::Isolate"*, %"class.v8::MicrotaskQueue"*)* @_ZN5blink9scheduler9EventLoopC2EPN2v87IsolateENSt3__110unique_ptrINS2_14MicrotaskQueueENS5_14default_deleteIS7_EEEE
@_ZN5blink9scheduler9EventLoopD1Ev = hidden unnamed_addr alias void (%"class.blink::scheduler::EventLoop"*), void (%"class.blink::scheduler::EventLoop"*)* @_ZN5blink9scheduler9EventLoopD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler9EventLoopC2EPN2v87IsolateENSt3__110unique_ptrINS2_14MicrotaskQueueENS5_14default_deleteIS7_EEEE(%"class.blink::scheduler::EventLoop"* nocapture, %"class.v8::Isolate"*, %"class.v8::MicrotaskQueue"*) unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.v8::MicrotaskQueue"* %2 to i64
  %5 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %5, align 4
  %6 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 1
  store %"class.v8::Isolate"* %1, %"class.v8::Isolate"** %6, align 8
  %7 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 2
  store i8 1, i8* %7, align 8
  %8 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 3
  %9 = bitcast %"class.WTF::Deque"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #5
  %10 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 4
  %11 = bitcast %"class.std::__1::unique_ptr"* %10 to i64*
  store i64 %4, i64* %11, align 8
  %12 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 5
  %13 = bitcast %"class.WTF::HashSet"* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 20, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler9EventLoopD2Ev(%"class.blink::scheduler::EventLoop"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 5, i32 0, i32 0
  %3 = load %"class.blink::FrameOrWorkerScheduler"**, %"class.blink::FrameOrWorkerScheduler"*** %2, align 8
  %4 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %3, null
  br i1 %4, label %7, label %5, !prof !2

5:                                                ; preds = %1
  %6 = bitcast %"class.blink::FrameOrWorkerScheduler"** %3 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %6) #5
  store %"class.blink::FrameOrWorkerScheduler"** null, %"class.blink::FrameOrWorkerScheduler"*** %2, align 8
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %9 = load %"class.v8::MicrotaskQueue"*, %"class.v8::MicrotaskQueue"** %8, align 8
  store %"class.v8::MicrotaskQueue"* null, %"class.v8::MicrotaskQueue"** %8, align 8
  %10 = icmp eq %"class.v8::MicrotaskQueue"* %9, null
  br i1 %10, label %16, label %11

11:                                               ; preds = %7
  %12 = bitcast %"class.v8::MicrotaskQueue"* %9 to void (%"class.v8::MicrotaskQueue"*)***
  %13 = load void (%"class.v8::MicrotaskQueue"*)**, void (%"class.v8::MicrotaskQueue"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.v8::MicrotaskQueue"*)*, void (%"class.v8::MicrotaskQueue"*)** %13, i64 1
  %15 = load void (%"class.v8::MicrotaskQueue"*)*, void (%"class.v8::MicrotaskQueue"*)** %14, align 8
  tail call void %15(%"class.v8::MicrotaskQueue"* nonnull %9) #5
  br label %16

16:                                               ; preds = %7, %11
  %17 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 3
  %18 = bitcast %"class.WTF::Deque"* %17 to %"class.WTF::ConditionalDestructor"*
  tail call void @_ZN3WTF21ConditionalDestructorINS_5DequeIN4base12OnceCallbackIFvvEEELj0ENS_18PartitionAllocatorEEELb0EED2Ev(%"class.WTF::ConditionalDestructor"* %18) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF21ConditionalDestructorINS_5DequeIN4base12OnceCallbackIFvvEEELj0ENS_18PartitionAllocatorEEELb0EED2Ev(%"class.WTF::ConditionalDestructor"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.WTF::ConditionalDestructor"* %0 to %"class.base::OnceCallback"**
  %3 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %2, align 8
  %4 = icmp eq %"class.base::OnceCallback"* %3, null
  br i1 %4, label %55, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::ConditionalDestructor", %"class.WTF::ConditionalDestructor"* %0, i64 16
  %7 = bitcast %"class.WTF::ConditionalDestructor"* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.WTF::ConditionalDestructor", %"class.WTF::ConditionalDestructor"* %0, i64 20
  %10 = bitcast %"class.WTF::ConditionalDestructor"* %9 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %8, %11
  br i1 %12, label %52, label %13

13:                                               ; preds = %5
  %14 = icmp ugt i32 %8, %11
  %15 = zext i32 %11 to i64
  %16 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 %15
  br i1 %14, label %25, label %17

17:                                               ; preds = %13
  %18 = zext i32 %8 to i64
  %19 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 %18
  br label %20

20:                                               ; preds = %20, %17
  %21 = phi %"class.base::OnceCallback"* [ %23, %20 ], [ %19, %17 ]
  %22 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %21, i64 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %22) #5
  %23 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %21, i64 1
  %24 = icmp eq %"class.base::OnceCallback"* %23, %16
  br i1 %24, label %52, label %20

25:                                               ; preds = %13
  %26 = icmp eq i32 %11, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %25, %27
  %28 = phi %"class.base::OnceCallback"* [ %30, %27 ], [ %3, %25 ]
  %29 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %28, i64 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %29) #5
  %30 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %28, i64 1
  %31 = icmp eq %"class.base::OnceCallback"* %30, %16
  br i1 %31, label %32, label %27

32:                                               ; preds = %27
  %33 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %2, align 8
  %34 = load i32, i32* %7, align 8
  br label %35

35:                                               ; preds = %32, %25
  %36 = phi i32 [ %34, %32 ], [ %8, %25 ]
  %37 = phi %"class.base::OnceCallback"* [ %33, %32 ], [ %3, %25 ]
  %38 = getelementptr inbounds %"class.WTF::ConditionalDestructor", %"class.WTF::ConditionalDestructor"* %0, i64 8
  %39 = bitcast %"class.WTF::ConditionalDestructor"* %38 to i32*
  %40 = load i32, i32* %39, align 8
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %37, i64 %41
  %43 = icmp eq i32 %36, %40
  br i1 %43, label %52, label %44

44:                                               ; preds = %35
  %45 = zext i32 %36 to i64
  %46 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %37, i64 %45
  br label %47

47:                                               ; preds = %47, %44
  %48 = phi %"class.base::OnceCallback"* [ %50, %47 ], [ %46, %44 ]
  %49 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %48, i64 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %49) #5
  %50 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %48, i64 1
  %51 = icmp eq %"class.base::OnceCallback"* %50, %42
  br i1 %51, label %52, label %47

52:                                               ; preds = %20, %47, %35, %5
  %53 = bitcast %"class.WTF::ConditionalDestructor"* %0 to i8**
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %54) #5
  store %"class.base::OnceCallback"* null, %"class.base::OnceCallback"** %2, align 8
  br label %55

55:                                               ; preds = %1, %52
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler9EventLoop16EnqueueMicrotaskEN4base12OnceCallbackIFvvEEE(%"class.blink::scheduler::EventLoop"*, %"class.base::OnceCallback"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 3, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 3, i32 2
  %8 = load i32, i32* %7, align 4
  br i1 %6, label %12, label %9

9:                                                ; preds = %2
  %10 = add i32 %8, 1
  %11 = icmp eq i32 %10, %5
  br i1 %11, label %21, label %23

12:                                               ; preds = %2
  %13 = icmp eq i32 %8, 0
  %14 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  br i1 %13, label %19, label %16

16:                                               ; preds = %12
  %17 = add i32 %15, -1
  %18 = icmp eq i32 %8, %17
  br i1 %18, label %21, label %23

19:                                               ; preds = %12
  %20 = icmp eq i32 %15, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %19, %16, %9
  tail call void @_ZN3WTF5DequeIN4base12OnceCallbackIFvvEEELj0ENS_18PartitionAllocatorEE14ExpandCapacityEv(%"class.WTF::Deque"* %3) #5
  %22 = load i32, i32* %7, align 4
  br label %23

23:                                               ; preds = %9, %16, %19, %21
  %24 = phi i32 [ %8, %9 ], [ %8, %16 ], [ 0, %19 ], [ %22, %21 ]
  %25 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %26 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %25, align 8
  %27 = zext i32 %24 to i64
  %28 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %26, i64 %27
  %29 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = add i32 %30, -1
  %32 = icmp eq i32 %24, %31
  %33 = add i32 %24, 1
  %34 = select i1 %32, i32 0, i32 %33
  store i32 %34, i32* %7, align 4
  %35 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %36 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %"class.base::OnceCallback"* %28 to i64*
  store i64 %37, i64* %38, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %35, align 8
  %39 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %40 = load %"class.v8::MicrotaskQueue"*, %"class.v8::MicrotaskQueue"** %39, align 8
  %41 = icmp eq %"class.v8::MicrotaskQueue"* %40, null
  %42 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 1
  %43 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %42, align 8
  %44 = bitcast %"class.blink::scheduler::EventLoop"* %0 to i8*
  br i1 %41, label %50, label %45

45:                                               ; preds = %23
  %46 = bitcast %"class.v8::MicrotaskQueue"* %40 to void (%"class.v8::MicrotaskQueue"*, %"class.v8::Isolate"*, void (i8*)*, i8*)***
  %47 = load void (%"class.v8::MicrotaskQueue"*, %"class.v8::Isolate"*, void (i8*)*, i8*)**, void (%"class.v8::MicrotaskQueue"*, %"class.v8::Isolate"*, void (i8*)*, i8*)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.v8::MicrotaskQueue"*, %"class.v8::Isolate"*, void (i8*)*, i8*)*, void (%"class.v8::MicrotaskQueue"*, %"class.v8::Isolate"*, void (i8*)*, i8*)** %47, i64 3
  %49 = load void (%"class.v8::MicrotaskQueue"*, %"class.v8::Isolate"*, void (i8*)*, i8*)*, void (%"class.v8::MicrotaskQueue"*, %"class.v8::Isolate"*, void (i8*)*, i8*)** %48, align 8
  tail call void %49(%"class.v8::MicrotaskQueue"* nonnull %40, %"class.v8::Isolate"* %43, void (i8*)* nonnull @_ZN5blink9scheduler9EventLoop19RunPendingMicrotaskEPv, i8* %44) #5
  br label %51

50:                                               ; preds = %23
  tail call void @_ZN2v87Isolate16EnqueueMicrotaskEPFvPvES1_(%"class.v8::Isolate"* %43, void (i8*)* nonnull @_ZN5blink9scheduler9EventLoop19RunPendingMicrotaskEPv, i8* %44) #5
  br label %51

51:                                               ; preds = %50, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler9EventLoop19RunPendingMicrotaskEPv(i8* nocapture) #0 align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = alloca %"class.base::TimeTicks", align 8
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 107, i32 0), align 16
  %6 = and i8 %5, 25
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %14, label %8, !prof !2

8:                                                ; preds = %1
  %9 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #5
  %10 = bitcast %"class.base::TimeTicks"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #5
  %11 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %3, i64 0, i32 0, i32 0
  %12 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #5
  store i64 %12, i64* %11, align 8
  %13 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 107, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i8* null, i64 0, i64 0, i32 %9, %"class.base::TimeTicks"* nonnull dereferenceable(8) %3, %"class.base::trace_event::TraceArguments"* null, i32 0) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #5
  br label %14

14:                                               ; preds = %1, %8
  %15 = phi i64 [ -6148914691236517206, %1 ], [ %13, %8 ]
  %16 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %1 ], [ getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), %8 ]
  %17 = phi i8* [ null, %1 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 107, i32 0), %8 ]
  %18 = bitcast %"class.base::OnceCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #5
  %19 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* inttoptr (i64 -6148914691236517206 to %"class.base::internal::BindStateBase"*), %"class.base::internal::BindStateBase"** %19, align 8
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %"class.base::OnceCallback"**
  %22 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %21, align 8
  %23 = getelementptr inbounds i8, i8* %0, i64 40
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %22, i64 %26
  %28 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %27, i64 0, i32 0, i32 0, i32 0
  %29 = bitcast %"class.base::OnceCallback"* %27 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %30, i64* %31, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %28, align 8
  %32 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %21, align 8
  %33 = load i32, i32* %24, align 8
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %32, i64 %34
  %36 = add i32 %33, 1
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %32, i64 %37
  br label %39

39:                                               ; preds = %39, %14
  %40 = phi %"class.base::OnceCallback"* [ %42, %39 ], [ %35, %14 ]
  %41 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %40, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %41) #5
  %42 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %40, i64 1
  %43 = icmp eq %"class.base::OnceCallback"* %42, %38
  br i1 %43, label %44, label %39

44:                                               ; preds = %39
  %45 = load i32, i32* %24, align 8
  %46 = add i32 %45, 1
  %47 = getelementptr inbounds i8, i8* %0, i64 32
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 8
  %50 = add i32 %49, -1
  %51 = icmp eq i32 %45, %50
  %52 = select i1 %51, i32 0, i32 %46
  store i32 %52, i32* %24, align 8
  %53 = bitcast %"class.base::OnceCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #5
  %54 = load i64, i64* %31, align 8
  %55 = bitcast %"class.base::OnceCallback"* %2 to i64*
  store i64 %54, i64* %55, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %19, align 8
  %56 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  %57 = inttoptr i64 %54 to %"class.base::internal::BindStateBase"*
  %58 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %57, i64 0, i32 1
  %59 = bitcast void ()** %58 to void (%"class.base::internal::BindStateBase"*)**
  %60 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %59, align 8
  call void %60(%"class.base::internal::BindStateBase"* %57) #5
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %56) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #5
  %61 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %61) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #5
  %62 = icmp eq i8* %17, null
  br i1 %62, label %67, label %63

63:                                               ; preds = %44
  %64 = load i8, i8* %17, align 1
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %67, label %66

66:                                               ; preds = %63
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %17, i8* %16, i64 %15) #5
  br label %67

67:                                               ; preds = %44, %63, %66
  ret void
}

declare void @_ZN2v87Isolate16EnqueueMicrotaskEPFvPvES1_(%"class.v8::Isolate"*, void (i8*)*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler9EventLoop26PerformMicrotaskCheckpointEv(%"class.blink::scheduler::EventLoop"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %3 = load %"class.v8::MicrotaskQueue"*, %"class.v8::MicrotaskQueue"** %2, align 8
  %4 = icmp eq %"class.v8::MicrotaskQueue"* %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 1
  %7 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %6, align 8
  %8 = bitcast %"class.v8::MicrotaskQueue"* %3 to void (%"class.v8::MicrotaskQueue"*, %"class.v8::Isolate"*)***
  %9 = load void (%"class.v8::MicrotaskQueue"*, %"class.v8::Isolate"*)**, void (%"class.v8::MicrotaskQueue"*, %"class.v8::Isolate"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.v8::MicrotaskQueue"*, %"class.v8::Isolate"*)*, void (%"class.v8::MicrotaskQueue"*, %"class.v8::Isolate"*)** %9, i64 6
  %11 = load void (%"class.v8::MicrotaskQueue"*, %"class.v8::Isolate"*)*, void (%"class.v8::MicrotaskQueue"*, %"class.v8::Isolate"*)** %10, align 8
  tail call void %11(%"class.v8::MicrotaskQueue"* nonnull %3, %"class.v8::Isolate"* %7) #5
  br label %12

12:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler9EventLoop40PerformIsolateGlobalMicrotasksCheckpointEPN2v87IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v815MicrotasksScope17PerformCheckpointEPNS_7IsolateE(%"class.v8::Isolate"* %0) #5
  ret void
}

declare void @_ZN2v815MicrotasksScope17PerformCheckpointEPNS_7IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler9EventLoop7DisableEv(%"class.blink::scheduler::EventLoop"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 2
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 5, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 5, i32 0, i32 0
  %7 = load %"class.blink::FrameOrWorkerScheduler"**, %"class.blink::FrameOrWorkerScheduler"*** %6, align 8
  %8 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 5, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %7, i64 %10
  br i1 %5, label %24, label %12

12:                                               ; preds = %1
  %13 = icmp eq i32 %9, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %12, %18
  %15 = phi %"class.blink::FrameOrWorkerScheduler"** [ %19, %18 ], [ %7, %12 ]
  %16 = bitcast %"class.blink::FrameOrWorkerScheduler"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  switch i64 %17, label %21 [
    i64 -1, label %18
    i64 0, label %18
  ]

18:                                               ; preds = %14, %14
  %19 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %15, i64 1
  %20 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %19, %11
  br i1 %20, label %24, label %14

21:                                               ; preds = %14, %12
  %22 = phi %"class.blink::FrameOrWorkerScheduler"** [ %7, %12 ], [ %15, %14 ]
  %23 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %22, %11
  br i1 %23, label %24, label %25

24:                                               ; preds = %18, %25, %41, %38, %1, %21
  ret void

25:                                               ; preds = %21, %41
  %26 = phi %"class.blink::FrameOrWorkerScheduler"** [ %35, %41 ], [ %22, %21 ]
  %27 = load %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %26, align 8
  %28 = bitcast %"class.blink::FrameOrWorkerScheduler"* %27 to void (%"class.blink::FrameOrWorkerScheduler"*, i8)***
  %29 = load void (%"class.blink::FrameOrWorkerScheduler"*, i8)**, void (%"class.blink::FrameOrWorkerScheduler"*, i8)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.blink::FrameOrWorkerScheduler"*, i8)*, void (%"class.blink::FrameOrWorkerScheduler"*, i8)** %29, i64 2
  %31 = load void (%"class.blink::FrameOrWorkerScheduler"*, i8)*, void (%"class.blink::FrameOrWorkerScheduler"*, i8)** %30, align 8
  tail call void %31(%"class.blink::FrameOrWorkerScheduler"* %27, i8 1) #5
  %32 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %26, i64 1
  %33 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %32, %11
  br i1 %33, label %24, label %34

34:                                               ; preds = %25, %38
  %35 = phi %"class.blink::FrameOrWorkerScheduler"** [ %39, %38 ], [ %32, %25 ]
  %36 = bitcast %"class.blink::FrameOrWorkerScheduler"** %35 to i64*
  %37 = load i64, i64* %36, align 8
  switch i64 %37, label %41 [
    i64 -1, label %38
    i64 0, label %38
  ]

38:                                               ; preds = %34, %34
  %39 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %35, i64 1
  %40 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %39, %11
  br i1 %40, label %24, label %34

41:                                               ; preds = %34
  %42 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %35, %11
  br i1 %42, label %24, label %25
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler9EventLoop6EnableEv(%"class.blink::scheduler::EventLoop"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 2
  store i8 1, i8* %2, align 8
  %3 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 5, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 5, i32 0, i32 0
  %7 = load %"class.blink::FrameOrWorkerScheduler"**, %"class.blink::FrameOrWorkerScheduler"*** %6, align 8
  %8 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 5, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %7, i64 %10
  br i1 %5, label %24, label %12

12:                                               ; preds = %1
  %13 = icmp eq i32 %9, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %12, %18
  %15 = phi %"class.blink::FrameOrWorkerScheduler"** [ %19, %18 ], [ %7, %12 ]
  %16 = bitcast %"class.blink::FrameOrWorkerScheduler"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  switch i64 %17, label %21 [
    i64 -1, label %18
    i64 0, label %18
  ]

18:                                               ; preds = %14, %14
  %19 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %15, i64 1
  %20 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %19, %11
  br i1 %20, label %24, label %14

21:                                               ; preds = %14, %12
  %22 = phi %"class.blink::FrameOrWorkerScheduler"** [ %7, %12 ], [ %15, %14 ]
  %23 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %22, %11
  br i1 %23, label %24, label %25

24:                                               ; preds = %18, %25, %41, %38, %1, %21
  ret void

25:                                               ; preds = %21, %41
  %26 = phi %"class.blink::FrameOrWorkerScheduler"** [ %35, %41 ], [ %22, %21 ]
  %27 = load %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %26, align 8
  %28 = bitcast %"class.blink::FrameOrWorkerScheduler"* %27 to void (%"class.blink::FrameOrWorkerScheduler"*, i8)***
  %29 = load void (%"class.blink::FrameOrWorkerScheduler"*, i8)**, void (%"class.blink::FrameOrWorkerScheduler"*, i8)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.blink::FrameOrWorkerScheduler"*, i8)*, void (%"class.blink::FrameOrWorkerScheduler"*, i8)** %29, i64 2
  %31 = load void (%"class.blink::FrameOrWorkerScheduler"*, i8)*, void (%"class.blink::FrameOrWorkerScheduler"*, i8)** %30, align 8
  tail call void %31(%"class.blink::FrameOrWorkerScheduler"* %27, i8 0) #5
  %32 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %26, i64 1
  %33 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %32, %11
  br i1 %33, label %24, label %34

34:                                               ; preds = %25, %38
  %35 = phi %"class.blink::FrameOrWorkerScheduler"** [ %39, %38 ], [ %32, %25 ]
  %36 = bitcast %"class.blink::FrameOrWorkerScheduler"** %35 to i64*
  %37 = load i64, i64* %36, align 8
  switch i64 %37, label %41 [
    i64 -1, label %38
    i64 0, label %38
  ]

38:                                               ; preds = %34, %34
  %39 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %35, i64 1
  %40 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %39, %11
  br i1 %40, label %24, label %34

41:                                               ; preds = %34
  %42 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %35, %11
  br i1 %42, label %24, label %25
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler9EventLoop15AttachSchedulerEPNS_22FrameOrWorkerSchedulerE(%"class.blink::scheduler::EventLoop"*, %"class.blink::FrameOrWorkerScheduler"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::FrameOrWorkerScheduler"*, align 8
  store %"class.blink::FrameOrWorkerScheduler"* %1, %"class.blink::FrameOrWorkerScheduler"** %3, align 8
  %4 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 5, i32 0
  %5 = call { %"class.blink::FrameOrWorkerScheduler"**, i8 } @_ZN3WTF9HashTableIPN5blink22FrameOrWorkerSchedulerES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS6_S8_S9_EERKS3_RS3_EENS_18HashTableAddResultISA_S3_EEOT0_OT1_(%"class.WTF::HashTable"* %4, %"class.blink::FrameOrWorkerScheduler"** nonnull dereferenceable(8) %3, %"class.blink::FrameOrWorkerScheduler"** nonnull dereferenceable(8) %3) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler9EventLoop15DetachSchedulerEPNS_22FrameOrWorkerSchedulerE(%"class.blink::scheduler::EventLoop"*, %"class.blink::FrameOrWorkerScheduler"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.blink::FrameOrWorkerScheduler"* %1 to i64
  %4 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 5
  %5 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %4, i64 0, i32 0
  %6 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %4, i64 0, i32 0, i32 0
  %7 = load %"class.blink::FrameOrWorkerScheduler"**, %"class.blink::FrameOrWorkerScheduler"*** %6, align 8
  %8 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %7, null
  %9 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 5, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  br i1 %8, label %72, label %11

11:                                               ; preds = %2
  %12 = add i32 %10, -1
  %13 = zext i32 %12 to i64
  %14 = shl i64 %3, 32
  %15 = xor i64 %14, -1
  %16 = add i64 %15, %3
  %17 = lshr i64 %16, 22
  %18 = xor i64 %17, %16
  %19 = shl i64 %18, 13
  %20 = xor i64 %19, -1
  %21 = add i64 %18, %20
  %22 = lshr i64 %21, 8
  %23 = xor i64 %22, %21
  %24 = mul i64 %23, 9
  %25 = lshr i64 %24, 15
  %26 = xor i64 %25, %24
  %27 = shl i64 %26, 27
  %28 = xor i64 %27, -1
  %29 = add i64 %26, %28
  %30 = lshr i64 %29, 31
  %31 = xor i64 %30, %29
  %32 = trunc i64 %31 to i32
  %33 = and i32 %12, %32
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %7, i64 %34
  %36 = load %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %35, align 8
  %37 = icmp eq %"class.blink::FrameOrWorkerScheduler"* %36, %1
  br i1 %37, label %67, label %38

38:                                               ; preds = %11
  %39 = xor i32 %32, -1
  %40 = lshr i32 %32, 23
  %41 = add i32 %40, %39
  %42 = shl i32 %41, 12
  %43 = xor i32 %42, %41
  %44 = lshr i32 %43, 7
  %45 = xor i32 %44, %43
  %46 = shl i32 %45, 2
  %47 = xor i32 %46, %45
  %48 = lshr i32 %47, 20
  %49 = xor i32 %48, %47
  %50 = or i32 %49, 1
  %51 = zext i32 %50 to i64
  br label %52

52:                                               ; preds = %57, %38
  %53 = phi %"class.blink::FrameOrWorkerScheduler"* [ %36, %38 ], [ %63, %57 ]
  %54 = phi i64 [ %34, %38 ], [ %61, %57 ]
  %55 = phi i64 [ 0, %38 ], [ %59, %57 ]
  %56 = icmp eq %"class.blink::FrameOrWorkerScheduler"* %53, null
  br i1 %56, label %72, label %57

57:                                               ; preds = %52
  %58 = icmp eq i64 %55, 0
  %59 = select i1 %58, i64 %51, i64 %55
  %60 = add i64 %59, %54
  %61 = and i64 %60, %13
  %62 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %7, i64 %61
  %63 = load %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %62, align 8
  %64 = icmp eq %"class.blink::FrameOrWorkerScheduler"* %63, %1
  br i1 %64, label %65, label %52

65:                                               ; preds = %57
  %66 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %7, i64 %61
  br label %67

67:                                               ; preds = %65, %11
  %68 = phi %"class.blink::FrameOrWorkerScheduler"** [ %35, %11 ], [ %66, %65 ]
  %69 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %68, null
  br i1 %69, label %72, label %70

70:                                               ; preds = %67
  %71 = zext i32 %10 to i64
  br label %75

72:                                               ; preds = %52, %67, %2
  %73 = zext i32 %10 to i64
  %74 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %7, i64 %73
  br label %75

75:                                               ; preds = %70, %72
  %76 = phi i64 [ %71, %70 ], [ %73, %72 ]
  %77 = phi %"class.blink::FrameOrWorkerScheduler"** [ %68, %70 ], [ %74, %72 ]
  %78 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %7, i64 %76
  %79 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %78, %77
  br i1 %79, label %102, label %80

80:                                               ; preds = %75
  store %"class.blink::FrameOrWorkerScheduler"* inttoptr (i64 -1 to %"class.blink::FrameOrWorkerScheduler"*), %"class.blink::FrameOrWorkerScheduler"** %77, align 8
  %81 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 5, i32 0, i32 3
  %82 = load i32, i32* %81, align 8
  %83 = add i32 %82, 1
  %84 = and i32 %83, 2147483647
  %85 = and i32 %82, -2147483648
  %86 = or i32 %84, %85
  store i32 %86, i32* %81, align 8
  %87 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 5, i32 0, i32 2
  %88 = load i32, i32* %87, align 4
  %89 = add i32 %88, -1
  store i32 %89, i32* %87, align 4
  %90 = mul i32 %89, 6
  %91 = load i32, i32* %9, align 8
  %92 = icmp ult i32 %90, %91
  %93 = icmp ugt i32 %91, 8
  %94 = and i1 %92, %93
  br i1 %94, label %95, label %102

95:                                               ; preds = %80
  %96 = lshr i32 %91, 1
  %97 = zext i32 %96 to i64
  %98 = shl nuw nsw i64 %97, 3
  %99 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %98, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink22FrameOrWorkerSchedulerEEEPKcv, i64 0, i64 0)) #5
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %99, i8 0, i64 %98, i1 false) #5
  %100 = bitcast i8* %99 to %"class.blink::FrameOrWorkerScheduler"**
  %101 = tail call %"class.blink::FrameOrWorkerScheduler"** @_ZN3WTF9HashTableIPN5blink22FrameOrWorkerSchedulerES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSB_(%"class.WTF::HashTable"* %5, %"class.blink::FrameOrWorkerScheduler"** %100, i32 %96, %"class.blink::FrameOrWorkerScheduler"** null) #5
  br label %102

102:                                              ; preds = %75, %80, %95
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink9scheduler9EventLoop26IsSchedulerAttachedForTestEPNS_22FrameOrWorkerSchedulerE(%"class.blink::scheduler::EventLoop"* nocapture readonly, %"class.blink::FrameOrWorkerScheduler"*) local_unnamed_addr #3 align 2 {
  %3 = ptrtoint %"class.blink::FrameOrWorkerScheduler"* %1 to i64
  %4 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 5, i32 0, i32 0
  %5 = load %"class.blink::FrameOrWorkerScheduler"**, %"class.blink::FrameOrWorkerScheduler"*** %4, align 8
  %6 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %5, null
  br i1 %6, label %65, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::scheduler::EventLoop", %"class.blink::scheduler::EventLoop"* %0, i64 0, i32 5, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, -1
  %11 = zext i32 %10 to i64
  %12 = shl i64 %3, 32
  %13 = xor i64 %12, -1
  %14 = add i64 %13, %3
  %15 = lshr i64 %14, 22
  %16 = xor i64 %15, %14
  %17 = shl i64 %16, 13
  %18 = xor i64 %17, -1
  %19 = add i64 %16, %18
  %20 = lshr i64 %19, 8
  %21 = xor i64 %20, %19
  %22 = mul i64 %21, 9
  %23 = lshr i64 %22, 15
  %24 = xor i64 %23, %22
  %25 = shl i64 %24, 27
  %26 = xor i64 %25, -1
  %27 = add i64 %24, %26
  %28 = lshr i64 %27, 31
  %29 = xor i64 %28, %27
  %30 = trunc i64 %29 to i32
  %31 = and i32 %10, %30
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %5, i64 %32
  %34 = load %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %33, align 8
  %35 = icmp eq %"class.blink::FrameOrWorkerScheduler"* %34, %1
  br i1 %35, label %65, label %36

36:                                               ; preds = %7
  %37 = xor i32 %30, -1
  %38 = lshr i32 %30, 23
  %39 = add i32 %38, %37
  %40 = shl i32 %39, 12
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 7
  %43 = xor i32 %42, %41
  %44 = shl i32 %43, 2
  %45 = xor i32 %44, %43
  %46 = lshr i32 %45, 20
  %47 = xor i32 %46, %45
  %48 = or i32 %47, 1
  %49 = zext i32 %48 to i64
  br label %50

50:                                               ; preds = %55, %36
  %51 = phi %"class.blink::FrameOrWorkerScheduler"* [ %34, %36 ], [ %61, %55 ]
  %52 = phi i64 [ %32, %36 ], [ %59, %55 ]
  %53 = phi i64 [ 0, %36 ], [ %57, %55 ]
  %54 = icmp eq %"class.blink::FrameOrWorkerScheduler"* %51, null
  br i1 %54, label %65, label %55

55:                                               ; preds = %50
  %56 = icmp eq i64 %53, 0
  %57 = select i1 %56, i64 %49, i64 %53
  %58 = add i64 %57, %52
  %59 = and i64 %58, %11
  %60 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %5, i64 %59
  %61 = load %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %60, align 8
  %62 = icmp eq %"class.blink::FrameOrWorkerScheduler"* %61, %1
  br i1 %62, label %63, label %50

63:                                               ; preds = %55
  %64 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %5, i64 %59
  br label %65

65:                                               ; preds = %50, %63, %2, %7
  %66 = phi %"class.blink::FrameOrWorkerScheduler"** [ null, %2 ], [ %33, %7 ], [ %64, %63 ], [ null, %50 ]
  %67 = icmp ne %"class.blink::FrameOrWorkerScheduler"** %66, null
  ret i1 %67
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #4

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare i32 @_ZN4base14PlatformThread9CurrentIdEv() local_unnamed_addr #1

declare i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() local_unnamed_addr #1

declare i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext, i8*, i8*, i8*, i64, i64, i32, %"class.base::TimeTicks"* dereferenceable(8), %"class.base::trace_event::TraceArguments"*, i32) local_unnamed_addr #1

declare void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeIN4base12OnceCallbackIFvvEEELj0ENS_18PartitionAllocatorEE14ExpandCapacityEv(%"class.WTF::Deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %4, align 8
  %6 = lshr i32 %3, 2
  %7 = add i32 %3, 1
  %8 = add i32 %7, %6
  %9 = icmp ugt i32 %8, 16
  %10 = select i1 %9, i32 %8, i32 16
  %11 = zext i32 %10 to i64
  %12 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN4base12OnceCallbackIFvvEEEEEmm(i64 %11) #5
  %13 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN4base12OnceCallbackIFvvEEEEEmm(i64 %11) #5
  %14 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %13, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN4base12OnceCallbackIFvvEEEEEPKcv, i64 0, i64 0)) #5
  %15 = ptrtoint i8* %14 to i64
  %16 = bitcast %"class.WTF::Deque"* %0 to i64*
  store atomic i64 %15, i64* %16 monotonic, align 8
  %17 = lshr i64 %13, 3
  %18 = trunc i64 %17 to i32
  store i32 %18, i32* %2, align 8
  %19 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp ugt i32 %20, %22
  %24 = bitcast i8* %14 to %"class.base::OnceCallback"*
  br i1 %23, label %44, label %25

25:                                               ; preds = %1
  %26 = zext i32 %20 to i64
  %27 = zext i32 %22 to i64
  %28 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 %27
  %29 = icmp eq i32 %20, %22
  br i1 %29, label %89, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %24, i64 %26
  %32 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 %26
  br label %33

33:                                               ; preds = %30, %33
  %34 = phi %"class.base::OnceCallback"* [ %42, %33 ], [ %32, %30 ]
  %35 = phi %"class.base::OnceCallback"* [ %41, %33 ], [ %31, %30 ]
  %36 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %34, i64 0, i32 0, i32 0, i32 0
  %37 = bitcast %"class.base::OnceCallback"* %34 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.base::OnceCallback"* %35 to i64*
  store i64 %38, i64* %39, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %36, align 8
  %40 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %34, i64 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %40) #5
  %41 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %35, i64 1
  %42 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %34, i64 1
  %43 = icmp eq %"class.base::OnceCallback"* %42, %28
  br i1 %43, label %89, label %33

44:                                               ; preds = %1
  %45 = zext i32 %22 to i64
  %46 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 %45
  %47 = icmp eq i32 %22, 0
  br i1 %47, label %63, label %48

48:                                               ; preds = %44, %48
  %49 = phi %"class.base::OnceCallback"* [ %57, %48 ], [ %5, %44 ]
  %50 = phi %"class.base::OnceCallback"* [ %56, %48 ], [ %24, %44 ]
  %51 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %49, i64 0, i32 0, i32 0, i32 0
  %52 = bitcast %"class.base::OnceCallback"* %49 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %"class.base::OnceCallback"* %50 to i64*
  store i64 %53, i64* %54, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %51, align 8
  %55 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %49, i64 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %55) #5
  %56 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %50, i64 1
  %57 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %49, i64 1
  %58 = icmp eq %"class.base::OnceCallback"* %57, %46
  br i1 %58, label %59, label %48

59:                                               ; preds = %48
  %60 = load i32, i32* %2, align 8
  %61 = load i32, i32* %19, align 8
  %62 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %4, align 8
  br label %63

63:                                               ; preds = %59, %44
  %64 = phi %"class.base::OnceCallback"* [ %62, %59 ], [ %24, %44 ]
  %65 = phi i32 [ %61, %59 ], [ %20, %44 ]
  %66 = phi i32 [ %60, %59 ], [ %18, %44 ]
  %67 = sub i32 %65, %3
  %68 = add i32 %67, %66
  %69 = zext i32 %3 to i64
  %70 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 %69
  %71 = icmp eq i32 %65, %3
  br i1 %71, label %88, label %72

72:                                               ; preds = %63
  %73 = zext i32 %68 to i64
  %74 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %64, i64 %73
  %75 = zext i32 %65 to i64
  %76 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 %75
  br label %77

77:                                               ; preds = %72, %77
  %78 = phi %"class.base::OnceCallback"* [ %86, %77 ], [ %76, %72 ]
  %79 = phi %"class.base::OnceCallback"* [ %85, %77 ], [ %74, %72 ]
  %80 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %78, i64 0, i32 0, i32 0, i32 0
  %81 = bitcast %"class.base::OnceCallback"* %78 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = bitcast %"class.base::OnceCallback"* %79 to i64*
  store i64 %82, i64* %83, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %80, align 8
  %84 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %78, i64 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %84) #5
  %85 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %79, i64 1
  %86 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %78, i64 1
  %87 = icmp eq %"class.base::OnceCallback"* %86, %70
  br i1 %87, label %88, label %77

88:                                               ; preds = %77, %63
  store i32 %68, i32* %19, align 8
  br label %89

89:                                               ; preds = %33, %25, %88
  %90 = bitcast %"class.base::OnceCallback"* %5 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN4base12OnceCallbackIFvvEEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #5
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i8* %11, i8* %12) #5
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #5
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #5
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #5
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.blink::FrameOrWorkerScheduler"**, i8 } @_ZN3WTF9HashTableIPN5blink22FrameOrWorkerSchedulerES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS6_S8_S9_EERKS3_RS3_EENS_18HashTableAddResultISA_S3_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.blink::FrameOrWorkerScheduler"** dereferenceable(8), %"class.blink::FrameOrWorkerScheduler"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"class.blink::FrameOrWorkerScheduler"**, %"class.blink::FrameOrWorkerScheduler"*** %4, align 8
  %6 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.blink::FrameOrWorkerScheduler"** @_ZN3WTF9HashTableIPN5blink22FrameOrWorkerSchedulerES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable"* %0, %"class.blink::FrameOrWorkerScheduler"** null)
  %9 = load %"class.blink::FrameOrWorkerScheduler"**, %"class.blink::FrameOrWorkerScheduler"*** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.blink::FrameOrWorkerScheduler"** [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = bitcast %"class.blink::FrameOrWorkerScheduler"** %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = shl i64 %17, 32
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 22
  %22 = xor i64 %21, %20
  %23 = shl i64 %22, 13
  %24 = xor i64 %23, -1
  %25 = add i64 %22, %24
  %26 = lshr i64 %25, 8
  %27 = xor i64 %26, %25
  %28 = mul i64 %27, 9
  %29 = lshr i64 %28, 15
  %30 = xor i64 %29, %28
  %31 = shl i64 %30, 27
  %32 = xor i64 %31, -1
  %33 = add i64 %30, %32
  %34 = lshr i64 %33, 31
  %35 = xor i64 %34, %33
  %36 = trunc i64 %35 to i32
  %37 = and i32 %14, %36
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %11, i64 %38
  %40 = load %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %39, align 8
  %41 = icmp eq %"class.blink::FrameOrWorkerScheduler"* %40, null
  %42 = inttoptr i64 %17 to %"class.blink::FrameOrWorkerScheduler"*
  br i1 %41, label %76, label %43

43:                                               ; preds = %10
  %44 = xor i32 %36, -1
  %45 = lshr i32 %36, 23
  %46 = add i32 %45, %44
  %47 = shl i32 %46, 12
  %48 = xor i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = xor i32 %49, %48
  %51 = shl i32 %50, 2
  %52 = xor i32 %51, %50
  %53 = lshr i32 %52, 20
  %54 = xor i32 %53, %52
  %55 = or i32 %54, 1
  %56 = zext i32 %55 to i64
  br label %57

57:                                               ; preds = %43, %64
  %58 = phi %"class.blink::FrameOrWorkerScheduler"* [ %40, %43 ], [ %72, %64 ]
  %59 = phi %"class.blink::FrameOrWorkerScheduler"** [ %39, %43 ], [ %71, %64 ]
  %60 = phi %"class.blink::FrameOrWorkerScheduler"** [ null, %43 ], [ %66, %64 ]
  %61 = phi i64 [ %38, %43 ], [ %70, %64 ]
  %62 = phi i64 [ 0, %43 ], [ %68, %64 ]
  %63 = icmp eq %"class.blink::FrameOrWorkerScheduler"* %58, %42
  br i1 %63, label %103, label %64

64:                                               ; preds = %57
  %65 = icmp eq %"class.blink::FrameOrWorkerScheduler"* %58, inttoptr (i64 -1 to %"class.blink::FrameOrWorkerScheduler"*)
  %66 = select i1 %65, %"class.blink::FrameOrWorkerScheduler"** %59, %"class.blink::FrameOrWorkerScheduler"** %60
  %67 = icmp eq i64 %62, 0
  %68 = select i1 %67, i64 %56, i64 %62
  %69 = add i64 %68, %61
  %70 = and i64 %69, %15
  %71 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %11, i64 %70
  %72 = load %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %71, align 8
  %73 = icmp eq %"class.blink::FrameOrWorkerScheduler"* %72, null
  br i1 %73, label %74, label %57

74:                                               ; preds = %64
  %75 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %66, null
  br i1 %75, label %76, label %79

76:                                               ; preds = %10, %74
  %77 = phi %"class.blink::FrameOrWorkerScheduler"** [ %71, %74 ], [ %39, %10 ]
  %78 = bitcast %"class.blink::FrameOrWorkerScheduler"** %77 to i64*
  br label %87

79:                                               ; preds = %74
  %80 = bitcast %"class.blink::FrameOrWorkerScheduler"** %66 to i64*
  store i64 0, i64* %80, align 8
  %81 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %82 = load i32, i32* %81, align 8
  %83 = add i32 %82, 2147483647
  %84 = and i32 %83, 2147483647
  %85 = and i32 %82, -2147483648
  %86 = or i32 %84, %85
  store i32 %86, i32* %81, align 8
  br label %87

87:                                               ; preds = %76, %79
  %88 = phi i64* [ %78, %76 ], [ %80, %79 ]
  %89 = phi %"class.blink::FrameOrWorkerScheduler"** [ %77, %76 ], [ %66, %79 ]
  %90 = bitcast %"class.blink::FrameOrWorkerScheduler"** %2 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %88, align 8
  %92 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %93 = load i32, i32* %92, align 4
  %94 = add i32 %93, 1
  store i32 %94, i32* %92, align 4
  %95 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %96 = load i32, i32* %95, align 8
  %97 = add i32 %96, %94
  %98 = shl i32 %97, 1
  %99 = load i32, i32* %12, align 8
  %100 = icmp ult i32 %98, %99
  br i1 %100, label %103, label %101

101:                                              ; preds = %87
  %102 = tail call %"class.blink::FrameOrWorkerScheduler"** @_ZN3WTF9HashTableIPN5blink22FrameOrWorkerSchedulerES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable"* %0, %"class.blink::FrameOrWorkerScheduler"** %89)
  br label %103

103:                                              ; preds = %57, %87, %101
  %104 = phi i8 [ 1, %87 ], [ 1, %101 ], [ 0, %57 ]
  %105 = phi %"class.blink::FrameOrWorkerScheduler"** [ %89, %87 ], [ %102, %101 ], [ %59, %57 ]
  %106 = insertvalue { %"class.blink::FrameOrWorkerScheduler"**, i8 } undef, %"class.blink::FrameOrWorkerScheduler"** %105, 0
  %107 = insertvalue { %"class.blink::FrameOrWorkerScheduler"**, i8 } %106, i8 %104, 1
  ret { %"class.blink::FrameOrWorkerScheduler"**, i8 } %107
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::FrameOrWorkerScheduler"** @_ZN3WTF9HashTableIPN5blink22FrameOrWorkerSchedulerES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable"*, %"class.blink::FrameOrWorkerScheduler"**) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #5
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #5
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* %22, i8* %23) #5
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.4, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #5
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #5
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #5
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink22FrameOrWorkerSchedulerEEEPKcv, i64 0, i64 0)) #5
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #5
  %36 = bitcast i8* %35 to %"class.blink::FrameOrWorkerScheduler"**
  %37 = call %"class.blink::FrameOrWorkerScheduler"** @_ZN3WTF9HashTableIPN5blink22FrameOrWorkerSchedulerES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSB_(%"class.WTF::HashTable"* %0, %"class.blink::FrameOrWorkerScheduler"** %36, i32 %32, %"class.blink::FrameOrWorkerScheduler"** %1) #5
  ret %"class.blink::FrameOrWorkerScheduler"** %37
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::FrameOrWorkerScheduler"** @_ZN3WTF9HashTableIPN5blink22FrameOrWorkerSchedulerES3_NS_17IdentityExtractorENS_7PtrHashIS2_EENS_10HashTraitsIS3_EES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSB_(%"class.WTF::HashTable"*, %"class.blink::FrameOrWorkerScheduler"**, i32, %"class.blink::FrameOrWorkerScheduler"**) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"class.blink::FrameOrWorkerScheduler"** %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"class.blink::FrameOrWorkerScheduler"**, %"class.blink::FrameOrWorkerScheduler"*** %9, align 8
  %17 = ptrtoint %"class.blink::FrameOrWorkerScheduler"** %16 to i64
  br label %31

18:                                               ; preds = %119
  %19 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %120, %18 ]
  %23 = phi %"class.blink::FrameOrWorkerScheduler"** [ null, %10 ], [ %123, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %26) #5
  br label %27

27:                                               ; preds = %20, %25
  %28 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, -2147483648
  store i32 %30, i32* %28, align 8
  ret %"class.blink::FrameOrWorkerScheduler"** %23

31:                                               ; preds = %13, %119
  %32 = phi i64 [ %17, %13 ], [ %120, %119 ]
  %33 = phi i32 [ %7, %13 ], [ %121, %119 ]
  %34 = phi %"class.blink::FrameOrWorkerScheduler"** [ %16, %13 ], [ %122, %119 ]
  %35 = phi %"class.blink::FrameOrWorkerScheduler"** [ null, %13 ], [ %123, %119 ]
  %36 = phi i32 [ 0, %13 ], [ %124, %119 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %34, i64 %37
  %39 = bitcast %"class.blink::FrameOrWorkerScheduler"** %38 to i64*
  %40 = load i64, i64* %39, align 8
  switch i64 %40, label %41 [
    i64 -1, label %119
    i64 0, label %119
  ]

41:                                               ; preds = %31
  %42 = shl i64 %40, 32
  %43 = xor i64 %42, -1
  %44 = add i64 %40, %43
  %45 = lshr i64 %44, 22
  %46 = xor i64 %45, %44
  %47 = shl i64 %46, 13
  %48 = xor i64 %47, -1
  %49 = add i64 %46, %48
  %50 = lshr i64 %49, 8
  %51 = xor i64 %50, %49
  %52 = mul i64 %51, 9
  %53 = lshr i64 %52, 15
  %54 = xor i64 %53, %52
  %55 = shl i64 %54, 27
  %56 = xor i64 %55, -1
  %57 = add i64 %54, %56
  %58 = lshr i64 %57, 31
  %59 = xor i64 %58, %57
  %60 = trunc i64 %59 to i32
  %61 = and i32 %14, %60
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %1, i64 %62
  %64 = ptrtoint %"class.blink::FrameOrWorkerScheduler"** %63 to i64
  %65 = load %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %63, align 8
  %66 = icmp eq %"class.blink::FrameOrWorkerScheduler"* %65, null
  %67 = inttoptr i64 %40 to %"class.blink::FrameOrWorkerScheduler"*
  br i1 %66, label %85, label %68

68:                                               ; preds = %41
  %69 = xor i32 %60, -1
  %70 = lshr i32 %60, 23
  %71 = add i32 %70, %69
  %72 = shl i32 %71, 12
  %73 = xor i32 %72, %71
  %74 = lshr i32 %73, 7
  %75 = xor i32 %74, %73
  %76 = shl i32 %75, 2
  %77 = xor i32 %76, %75
  %78 = lshr i32 %77, 20
  %79 = xor i32 %78, %77
  %80 = or i32 %79, 1
  %81 = zext i32 %80 to i64
  br label %91

82:                                               ; preds = %98
  %83 = ptrtoint %"class.blink::FrameOrWorkerScheduler"** %105 to i64
  %84 = inttoptr i64 %100 to %"class.blink::FrameOrWorkerScheduler"**
  br label %85

85:                                               ; preds = %82, %41
  %86 = phi i64 [ %83, %82 ], [ %64, %41 ]
  %87 = phi %"class.blink::FrameOrWorkerScheduler"** [ %84, %82 ], [ null, %41 ]
  %88 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %87, null
  %89 = ptrtoint %"class.blink::FrameOrWorkerScheduler"** %87 to i64
  %90 = select i1 %88, i64 %86, i64 %89
  br label %109

91:                                               ; preds = %98, %68
  %92 = phi i64 [ 0, %68 ], [ %100, %98 ]
  %93 = phi %"class.blink::FrameOrWorkerScheduler"* [ %65, %68 ], [ %107, %98 ]
  %94 = phi i64 [ %64, %68 ], [ %106, %98 ]
  %95 = phi i64 [ %62, %68 ], [ %104, %98 ]
  %96 = phi i64 [ 0, %68 ], [ %102, %98 ]
  %97 = icmp eq %"class.blink::FrameOrWorkerScheduler"* %93, %67
  br i1 %97, label %109, label %98

98:                                               ; preds = %91
  %99 = icmp eq %"class.blink::FrameOrWorkerScheduler"* %93, inttoptr (i64 -1 to %"class.blink::FrameOrWorkerScheduler"*)
  %100 = select i1 %99, i64 %94, i64 %92
  %101 = icmp eq i64 %96, 0
  %102 = select i1 %101, i64 %81, i64 %96
  %103 = add i64 %102, %95
  %104 = and i64 %103, %15
  %105 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %1, i64 %104
  %106 = ptrtoint %"class.blink::FrameOrWorkerScheduler"** %105 to i64
  %107 = load %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %105, align 8
  %108 = icmp eq %"class.blink::FrameOrWorkerScheduler"* %107, null
  br i1 %108, label %82, label %91

109:                                              ; preds = %91, %85
  %110 = phi i64 [ %90, %85 ], [ %94, %91 ]
  %111 = inttoptr i64 %110 to %"class.blink::FrameOrWorkerScheduler"**
  %112 = inttoptr i64 %110 to i64*
  store i64 %40, i64* %112, align 8
  %113 = load %"class.blink::FrameOrWorkerScheduler"**, %"class.blink::FrameOrWorkerScheduler"*** %9, align 8
  %114 = getelementptr inbounds %"class.blink::FrameOrWorkerScheduler"*, %"class.blink::FrameOrWorkerScheduler"** %113, i64 %37
  %115 = icmp eq %"class.blink::FrameOrWorkerScheduler"** %114, %3
  %116 = select i1 %115, %"class.blink::FrameOrWorkerScheduler"** %111, %"class.blink::FrameOrWorkerScheduler"** %35
  %117 = load i32, i32* %6, align 8
  %118 = ptrtoint %"class.blink::FrameOrWorkerScheduler"** %113 to i64
  br label %119

119:                                              ; preds = %31, %31, %109
  %120 = phi i64 [ %32, %31 ], [ %118, %109 ], [ %32, %31 ]
  %121 = phi i32 [ %33, %31 ], [ %117, %109 ], [ %33, %31 ]
  %122 = phi %"class.blink::FrameOrWorkerScheduler"** [ %34, %31 ], [ %113, %109 ], [ %34, %31 ]
  %123 = phi %"class.blink::FrameOrWorkerScheduler"** [ %35, %31 ], [ %116, %109 ], [ %35, %31 ]
  %124 = add i32 %36, 1
  %125 = icmp eq i32 %124, %121
  br i1 %125, label %18, label %31
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
