; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/encoder.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/encoder.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.PSNR_STATS = type { [4 x double], [4 x i64], [4 x i32], [4 x double], [4 x i64], [4 x i32] }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.AV1_COMP*, %struct.ThreadData*, i32, i32 }
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVxWorkerInterface = type { void (%struct.AVxWorker*)*, i32 (%struct.AVxWorker*)*, i32 (%struct.AVxWorker*)*, void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)* }
%struct.EncodeFrameInput = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i64 }
%struct.EncodeFrameParams = type { i32, i8, i32, i32, i32, i32, i32, i32, i32, [8 x i32], %struct.RefreshFrameFlagsInfo, i32 }
%struct.EncodeFrameResults = type { i64 }
%struct.aom_rational64 = type { i64, i32 }

@mi_size_wide = internal unnamed_addr constant [22 x i8] c"\01\01\02\02\02\04\04\04\08\08\08\10\10\10  \01\04\02\08\04\10", align 16
@.str = private unnamed_addr constant [35 x i8] c"Failed to allocate context buffers\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"Failed to allocate level_params->level_info[i]\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"Failed to allocate x->palette_buffer\00", align 1
@.str.3 = private unnamed_addr constant [35 x i8] c"Failed to allocate x->tmp_conv_dst\00", align 1
@.str.4 = private unnamed_addr constant [39 x i8] c"Failed to allocate x->tmp_pred_bufs[i]\00", align 1
@.str.5 = private unnamed_addr constant [42 x i8] c"Failed to allocate x->pixel_gradient_info\00", align 1
@aom_sad128x128 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad128x128_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*)*, align 8
@aom_variance128x128 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_variance128x128 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance128x128 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_sad128x128x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@aom_dist_wtd_sad128x128_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance128x128 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_sad128x64 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad128x64_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*)*, align 8
@aom_variance128x64 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_variance128x64 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance128x64 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_sad128x64x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@aom_dist_wtd_sad128x64_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance128x64 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_sad64x128 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad64x128_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*)*, align 8
@aom_variance64x128 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_variance64x128 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance64x128 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_sad64x128x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@aom_dist_wtd_sad64x128_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance64x128 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_sad32x16 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad32x16_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*)*, align 8
@aom_variance32x16 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_variance32x16 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance32x16 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_sad32x16x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@aom_dist_wtd_sad32x16_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance32x16 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_variance16x32 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_variance16x32 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance16x32 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_dist_wtd_sad16x32_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance16x32 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_sad64x32 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad64x32_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*)*, align 8
@aom_variance64x32 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_variance64x32 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance64x32 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_sad64x32x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@aom_dist_wtd_sad64x32_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance64x32 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_sad32x64 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad32x64_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*)*, align 8
@aom_variance32x64 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_variance32x64 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance32x64 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_sad32x64x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@aom_dist_wtd_sad32x64_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance32x64 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_sad32x32 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad32x32_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*)*, align 8
@aom_variance32x32 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_variance32x32 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance32x32 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_sad32x32x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@aom_dist_wtd_sad32x32_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance32x32 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_sad64x64 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad64x64_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*)*, align 8
@aom_variance64x64 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_variance64x64 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance64x64 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_sad64x64x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@aom_dist_wtd_sad64x64_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance64x64 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_variance16x16 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_variance16x16 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance16x16 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_dist_wtd_sad16x16_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance16x16 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_variance16x8 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_variance16x8 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance16x8 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_dist_wtd_sad16x8_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance16x8 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_sub_pixel_variance8x16 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance8x16 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_dist_wtd_sad8x16_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance8x16 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_sub_pixel_variance8x8 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance8x8 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_dist_wtd_sad8x8_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance8x8 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_sub_pixel_variance8x4 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance8x4 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_dist_wtd_sad8x4_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance8x4 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_sub_pixel_variance4x8 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance4x8 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_dist_wtd_sad4x8_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance4x8 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_sub_pixel_variance4x4 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@aom_sub_pixel_avg_variance4x4 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, align 8
@aom_dist_wtd_sad4x4_avg = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_dist_wtd_sub_pixel_avg_variance4x4 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)*, align 8
@aom_masked_sad128x128 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance128x128 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_masked_sad128x64 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance128x64 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_masked_sad64x128 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance64x128 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_masked_sad64x64 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance64x64 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_masked_sad64x32 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance64x32 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_masked_sad32x64 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance32x64 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_masked_sad32x32 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance32x32 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_masked_sad32x16 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance32x16 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_masked_sad16x32 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance16x32 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_masked_sad16x16 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance16x16 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_masked_sad16x8 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance16x8 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_masked_sad8x16 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance8x16 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_masked_sad8x8 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance8x8 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_masked_sad4x8 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance4x8 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_masked_sad8x4 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance8x4 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_masked_sad4x4 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, align 8
@aom_masked_sub_pixel_variance4x4 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, align 8
@aom_sad_skip_128x128 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad_skip_128x128x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@aom_sad_skip_128x64 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad_skip_128x64x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@aom_sad_skip_64x128 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad_skip_64x128x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@aom_sad_skip_64x64 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad_skip_64x64x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@aom_sad_skip_64x32 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad_skip_64x32x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@aom_sad_skip_32x64 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad_skip_32x64x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@aom_sad_skip_32x32 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad_skip_32x32x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@aom_sad_skip_32x16 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32)*, align 8
@aom_sad_skip_32x16x4d = external local_unnamed_addr global void (i8*, i32, i8**, i32, i32*)*, align 8
@.str.6 = private unnamed_addr constant [51 x i8] c"Failed to allocate ppi->tpl_rdmult_scaling_factors\00", align 1
@.str.7 = private unnamed_addr constant [54 x i8] c"Failed to allocate ppi->tpl_sb_rdmult_scaling_factors\00", align 1
@.str.8 = private unnamed_addr constant [26 x i8] c"Failed to allocate cm->fc\00", align 1
@.str.9 = private unnamed_addr constant [45 x i8] c"Failed to allocate cm->default_frame_context\00", align 1
@.str.10 = private unnamed_addr constant [47 x i8] c"Failed to allocate cpi->td.mb.inter_modes_info\00", align 1
@.str.11 = private unnamed_addr constant [72 x i8] c"Failed to allocate cpi->td.mb.intrabc_hash_info.hash_value_buffer[x][y]\00", align 1
@.str.12 = private unnamed_addr constant [39 x i8] c"Failed to allocate cpi->consec_zero_mv\00", align 1
@.str.13 = private unnamed_addr constant [52 x i8] c"Failed to allocate cpi->ssim_rdmult_scaling_factors\00", align 1
@av1_init_motion_compensation = hidden local_unnamed_addr global [7 x void (%struct.search_site_config*, i32, i32)*] [void (%struct.search_site_config*, i32, i32)* @av1_init_dsmotion_compensation, void (%struct.search_site_config*, i32, i32)* @av1_init_motion_compensation_nstep, void (%struct.search_site_config*, i32, i32)* @av1_init_motion_compensation_nstep, void (%struct.search_site_config*, i32, i32)* @av1_init_dsmotion_compensation, void (%struct.search_site_config*, i32, i32)* @av1_init_motion_compensation_hex, void (%struct.search_site_config*, i32, i32)* @av1_init_motion_compensation_bigdia, void (%struct.search_site_config*, i32, i32)* @av1_init_motion_compensation_square], align 16
@.str.14 = private unnamed_addr constant [32 x i8] c"Failed to allocate frame buffer\00", align 1
@.str.15 = private unnamed_addr constant [47 x i8] c"Non-4:2:0 color format requires profile 1 or 2\00", align 1
@.str.16 = private unnamed_addr constant [38 x i8] c"Profile 1 requires 4:4:4 color format\00", align 1
@.str.17 = private unnamed_addr constant [54 x i8] c"Profile 2 bit-depth <= 10 requires 4:2:2 color format\00", align 1
@.str.18 = private unnamed_addr constant [28 x i8] c"Incorrect buffer dimensions\00", align 1
@.str.19 = private unnamed_addr constant [45 x i8] c"Failed to allocate mbmi_ext_info->frame_base\00", align 1
@mi_size_wide_log2 = internal unnamed_addr constant [22 x i8] c"\00\00\01\01\01\02\02\02\03\03\03\04\04\04\05\05\00\02\01\03\02\04", align 16
@.str.20 = private unnamed_addr constant [67 x i8] c"AV1 does not support this combination of profile, level, and tier.\00", align 1
@.str.21 = private unnamed_addr constant [31 x i8] c"Failed to allocate bufs->pred0\00", align 1
@.str.22 = private unnamed_addr constant [31 x i8] c"Failed to allocate bufs->pred1\00", align 1
@.str.23 = private unnamed_addr constant [35 x i8] c"Failed to allocate bufs->residual1\00", align 1
@.str.24 = private unnamed_addr constant [32 x i8] c"Failed to allocate bufs->diff10\00", align 1
@.str.25 = private unnamed_addr constant [43 x i8] c"Failed to allocate bufs->tmp_best_mask_buf\00", align 1
@.str.26 = private unnamed_addr constant [39 x i8] c"Failed to allocate cpi->td.mb.mv_costs\00", align 1
@.str.27 = private unnamed_addr constant [39 x i8] c"Failed to allocate cpi->td.mb.dv_costs\00", align 1
@.str.28 = private unnamed_addr constant [46 x i8] c"Failed to allocate token_info->tile_tok[0][0]\00", align 1
@.str.29 = private unnamed_addr constant [44 x i8] c"Failed to allocate token_info->tplist[0][0]\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"Failed to allocate cpi->enc_seg.map\00", align 1
@.str.31 = private unnamed_addr constant [39 x i8] c"Failed to allocate cpi->cyclic_refresh\00", align 1
@.str.32 = private unnamed_addr constant [39 x i8] c"Failed to allocate cpi->active_map.map\00", align 1
@.str.33 = private unnamed_addr constant [37 x i8] c"Failed to allocate obmc_buffer->wsrc\00", align 1
@.str.34 = private unnamed_addr constant [37 x i8] c"Failed to allocate obmc_buffer->mask\00", align 1
@.str.35 = private unnamed_addr constant [43 x i8] c"Failed to allocate obmc_buffer->above_pred\00", align 1
@.str.36 = private unnamed_addr constant [42 x i8] c"Failed to allocate obmc_buffer->left_pred\00", align 1
@.str.37 = private unnamed_addr constant [33 x i8] c"Failed to allocate altref buffer\00", align 1
@.str.38 = private unnamed_addr constant [37 x i8] c"Failed to allocate last frame buffer\00", align 1
@.str.39 = private unnamed_addr constant [47 x i8] c"Failed to allocate trial restored frame buffer\00", align 1
@.str.40 = private unnamed_addr constant [40 x i8] c"Failed to allocate scaled source buffer\00", align 1
@.str.41 = private unnamed_addr constant [45 x i8] c"Failed to allocate scaled last source buffer\00", align 1
@.str.42 = private unnamed_addr constant [28 x i8] c"Failed to allocate denoiser\00", align 1
@.str.43 = private unnamed_addr constant [28 x i8] c"Failed to allocate buf->mvs\00", align 1
@.str.44 = private unnamed_addr constant [32 x i8] c"Failed to allocate buf->seg_map\00", align 1
@.str.45 = private unnamed_addr constant [31 x i8] c"Failed to allocate cm->tpl_mvs\00", align 1
@__const.encode_frame_to_data_rate.fn = private unnamed_addr constant [20 x i8] c"./fc\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@.str.46 = private unnamed_addr constant [42 x i8] c"Failed to reallocate scaled source buffer\00", align 1
@default_warp_params = internal unnamed_addr constant %struct.WarpedMotionParams { [8 x i32] [i32 0, i32 0, i32 65536, i32 0, i32 0, i32 65536, i32 0, i32 0], i16 0, i16 0, i16 0, i16 0, i8 0, i8 0 }, align 4
@.str.47 = private unnamed_addr constant [35 x i8] c"Failed to allocate cpi->td.vt64x64\00", align 1
@default_tx_type_probs = external local_unnamed_addr constant [7 x [19 x [16 x i32]]], align 16
@default_obmc_probs = external local_unnamed_addr constant [7 x [22 x i32]], align 16
@default_warped_probs = external local_unnamed_addr constant [7 x i32], align 16
@default_switchable_interp_probs = external local_unnamed_addr constant [7 x [16 x [3 x i32]]], align 16
@.str.48 = private unnamed_addr constant [35 x i8] c"Error allocating denoise and model\00", align 1
@.str.49 = private unnamed_addr constant [29 x i8] c"Error allocating grain table\00", align 1
@__const.generate_psnr_packet.pkt = private unnamed_addr constant { i32, [4 x i8], %union.anon.10 } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %union.anon.10 { %struct.aom_psnr_pkt { [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i64] [i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206], [4 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i64] [i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206], [4 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF] } } }, align 8
@__const.generate_psnr_packet.psnr = private unnamed_addr constant %struct.PSNR_STATS { [4 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [4 x i64] [i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206], [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [4 x i64] [i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206], [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766] }, align 8
@switch.table.av1_set_internal_size.51 = private unnamed_addr constant [6 x i32] [i32 4, i32 3, i32 3, i32 1, i32 1, i32 1], align 4
@switch.table.av1_set_internal_size.52 = private unnamed_addr constant [6 x i32] [i32 5, i32 5, i32 4, i32 4, i32 8, i32 2], align 4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @av1_set_active_map(%struct.AV1_COMP* nocapture, i8* readonly, i32, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, %2
  br i1 %7, label %8, label %87

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, %3
  br i1 %11, label %12, label %87

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 45
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 45, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 45, i32 1
  store i32 1, i32* %20, align 4
  %21 = icmp eq i8* %1, null
  br i1 %21, label %85, label %22

22:                                               ; preds = %12
  %23 = icmp sgt i32 %17, 0
  br i1 %23, label %24, label %83

24:                                               ; preds = %22
  %25 = icmp sgt i32 %19, 0
  %26 = sext i32 %19 to i64
  %27 = zext i32 %17 to i64
  %28 = zext i32 %19 to i64
  %29 = and i64 %28, 1
  %30 = icmp eq i32 %19, 1
  %31 = sub nsw i64 %28, %29
  %32 = icmp eq i64 %29, 0
  br label %33

33:                                               ; preds = %80, %24
  %34 = phi i64 [ 0, %24 ], [ %81, %80 ]
  br i1 %25, label %35, label %80

35:                                               ; preds = %33
  %36 = trunc i64 %34 to i32
  %37 = lshr i32 %36, 2
  %38 = mul nsw i32 %37, %3
  %39 = mul nsw i64 %34, %26
  br i1 %30, label %67, label %40

40:                                               ; preds = %35, %40
  %41 = phi i64 [ %64, %40 ], [ 0, %35 ]
  %42 = phi i64 [ %65, %40 ], [ %31, %35 ]
  %43 = trunc i64 %41 to i32
  %44 = lshr i32 %43, 2
  %45 = add nsw i32 %44, %38
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %1, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 0
  %50 = select i1 %49, i8 7, i8 0
  %51 = add nsw i64 %41, %39
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  store i8 %50, i8* %52, align 1
  %53 = or i64 %41, 1
  %54 = trunc i64 %41 to i32
  %55 = lshr i32 %54, 2
  %56 = add nsw i32 %55, %38
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %1, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = icmp eq i8 %59, 0
  %61 = select i1 %60, i8 7, i8 0
  %62 = add nsw i64 %53, %39
  %63 = getelementptr inbounds i8, i8* %15, i64 %62
  store i8 %61, i8* %63, align 1
  %64 = add nuw nsw i64 %41, 2
  %65 = add i64 %42, -2
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %40

67:                                               ; preds = %40, %35
  %68 = phi i64 [ 0, %35 ], [ %64, %40 ]
  br i1 %32, label %80, label %69

69:                                               ; preds = %67
  %70 = trunc i64 %68 to i32
  %71 = lshr i32 %70, 2
  %72 = add nsw i32 %71, %38
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %1, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = icmp eq i8 %75, 0
  %77 = select i1 %76, i8 7, i8 0
  %78 = add nsw i64 %68, %39
  %79 = getelementptr inbounds i8, i8* %15, i64 %78
  store i8 %77, i8* %79, align 1
  br label %80

80:                                               ; preds = %69, %67, %33
  %81 = add nuw nsw i64 %34, 1
  %82 = icmp eq i64 %81, %27
  br i1 %82, label %83, label %33

83:                                               ; preds = %80, %22
  %84 = getelementptr inbounds %struct.ActiveMap, %struct.ActiveMap* %13, i64 0, i32 0
  store i32 1, i32* %84, align 16
  br label %87

85:                                               ; preds = %12
  %86 = getelementptr inbounds %struct.ActiveMap, %struct.ActiveMap* %13, i64 0, i32 0
  store i32 0, i32* %86, align 16
  br label %87

87:                                               ; preds = %4, %8, %83, %85
  %88 = phi i32 [ 0, %85 ], [ 0, %83 ], [ -1, %8 ], [ -1, %4 ]
  ret i32 %88
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_get_active_map(%struct.AV1_COMP* nocapture readonly, i8*, i32, i32) local_unnamed_addr #2 {
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, %2
  br i1 %7, label %8, label %96

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, %3
  %12 = icmp ne i8* %1, null
  %13 = and i1 %12, %11
  br i1 %13, label %14, label %96

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 43, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 45, i32 0
  %22 = load i32, i32* %21, align 16
  %23 = icmp eq i32 %22, 0
  %24 = zext i1 %23 to i8
  %25 = mul nsw i32 %3, %2
  %26 = sext i32 %25 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %1, i8 %24, i64 %26, i1 false)
  %27 = load i32, i32* %21, align 16
  %28 = icmp ne i32 %27, 0
  %29 = icmp sgt i32 %18, 0
  %30 = and i1 %28, %29
  br i1 %30, label %31, label %96

31:                                               ; preds = %14
  %32 = icmp sgt i32 %20, 0
  %33 = sext i32 %20 to i64
  %34 = zext i32 %18 to i64
  %35 = zext i32 %20 to i64
  %36 = and i64 %35, 1
  %37 = icmp eq i32 %20, 1
  %38 = sub nsw i64 %35, %36
  %39 = icmp eq i64 %36, 0
  br label %40

40:                                               ; preds = %93, %31
  %41 = phi i64 [ 0, %31 ], [ %94, %93 ]
  br i1 %32, label %42, label %93

42:                                               ; preds = %40
  %43 = mul nsw i64 %41, %33
  %44 = trunc i64 %41 to i32
  %45 = lshr i32 %44, 2
  %46 = mul nsw i32 %45, %3
  br i1 %37, label %78, label %47

47:                                               ; preds = %42, %47
  %48 = phi i64 [ %75, %47 ], [ 0, %42 ]
  %49 = phi i64 [ %76, %47 ], [ %38, %42 ]
  %50 = add nsw i64 %48, %43
  %51 = getelementptr inbounds i8, i8* %16, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = icmp ne i8 %52, 7
  %54 = zext i1 %53 to i8
  %55 = trunc i64 %48 to i32
  %56 = lshr i32 %55, 2
  %57 = add nsw i32 %56, %46
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %1, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = or i8 %60, %54
  store i8 %61, i8* %59, align 1
  %62 = or i64 %48, 1
  %63 = add nsw i64 %62, %43
  %64 = getelementptr inbounds i8, i8* %16, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = icmp ne i8 %65, 7
  %67 = zext i1 %66 to i8
  %68 = trunc i64 %48 to i32
  %69 = lshr i32 %68, 2
  %70 = add nsw i32 %69, %46
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %1, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = or i8 %73, %67
  store i8 %74, i8* %72, align 1
  %75 = add nuw nsw i64 %48, 2
  %76 = add i64 %49, -2
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %47

78:                                               ; preds = %47, %42
  %79 = phi i64 [ 0, %42 ], [ %75, %47 ]
  br i1 %39, label %93, label %80

80:                                               ; preds = %78
  %81 = add nsw i64 %79, %43
  %82 = getelementptr inbounds i8, i8* %16, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = icmp ne i8 %83, 7
  %85 = zext i1 %84 to i8
  %86 = trunc i64 %79 to i32
  %87 = lshr i32 %86, 2
  %88 = add nsw i32 %87, %46
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %1, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = or i8 %91, %85
  store i8 %92, i8* %90, align 1
  br label %93

93:                                               ; preds = %80, %78, %40
  %94 = add nuw nsw i64 %41, 1
  %95 = icmp eq i64 %94, %34
  br i1 %95, label %96, label %40

96:                                               ; preds = %93, %14, %4, %8
  %97 = phi i32 [ 0, %14 ], [ -1, %8 ], [ -1, %4 ], [ 0, %93 ]
  ret i32 %97
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_initialize_enc() local_unnamed_addr #2 {
  tail call void @av1_rtcd() #12
  tail call void @aom_dsp_rtcd() #12
  tail call void @aom_scale_rtcd() #12
  tail call void @av1_init_intra_predictors() #12
  tail call void @av1_init_me_luts() #12
  tail call void @av1_rc_init_minq_luts() #12
  tail call void (...) @av1_init_wedge_masks() #12
  ret void
}

declare void @av1_rtcd() local_unnamed_addr #3

declare void @aom_dsp_rtcd() local_unnamed_addr #3

declare void @aom_scale_rtcd() local_unnamed_addr #3

declare void @av1_init_intra_predictors() local_unnamed_addr #3

declare void @av1_init_me_luts() local_unnamed_addr #3

declare void @av1_rc_init_minq_luts() local_unnamed_addr #3

declare void @av1_init_wedge_masks(...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_new_framerate(%struct.AV1_COMP*, double) local_unnamed_addr #2 {
  %3 = fcmp olt double %1, 1.000000e-01
  %4 = select i1 %3, double 3.000000e+01, double %1
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 37
  store double %4, double* %5, align 16
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %7 = load i32, i32* %6, align 16
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %9 = load i32, i32* %8, align 4
  tail call void @av1_rc_update_framerate(%struct.AV1_COMP* %0, i32 %7, i32 %9) #12
  ret void
}

declare void @av1_rc_update_framerate(%struct.AV1_COMP*, i32, i32) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @av1_get_compression_ratio(%struct.AV1Common* nocapture readonly, i64) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 16
  %5 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = mul nsw i32 %6, %4
  %8 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %9 = load %struct.SequenceHeader*, %struct.SequenceHeader** %8, align 16
  %10 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %9, i64 0, i32 24
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 0
  %13 = icmp eq i8 %11, 1
  %14 = select i1 %13, i32 30, i32 36
  %15 = select i1 %12, i32 15, i32 %14
  %16 = icmp ugt i64 %1, 129
  %17 = add i64 %1, -128
  %18 = select i1 %16, i64 %17, i64 1
  %19 = mul nsw i32 %7, %15
  %20 = ashr i32 %19, 3
  %21 = sext i32 %20 to i64
  %22 = uitofp i64 %21 to double
  %23 = uitofp i64 %18 to double
  %24 = fdiv double %22, %23
  ret double %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_update_frame_size(%struct.AV1_COMP*) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %4 = load i32, i32* %3, align 16
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = tail call i32 @av1_alloc_context_buffers(%struct.AV1Common* %2, i32 %4, i32 %6) #12
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %11 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %10, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %11, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0)) #12
  br label %12

12:                                               ; preds = %1, %9
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21
  tail call void @av1_init_mi_buffers(%struct.CommonModeInfoParams* %13) #12
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %15 = load %struct.SequenceHeader*, %struct.SequenceHeader** %14, align 16
  %16 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %15, i64 0, i32 27
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 0
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 8, i64 0
  %20 = bitcast [2 x i16]* %19 to i8*
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 13, i64 0
  %22 = bitcast [19 x i8*]* %21 to i8*
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 7, i64 0
  %24 = bitcast [2 x i16]* %23 to i8*
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 12, i64 0
  %26 = bitcast [19 x i8*]* %25 to i8*
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 6, i64 0
  %28 = bitcast [2 x i16]* %27 to i8*
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 11, i64 0
  %30 = bitcast [19 x i8*]* %29 to i8*
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 4, i64 1, i32 11, i64 0
  %32 = bitcast [19 x i8*]* %31 to i8*
  %33 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 4, i64 0, i32 0
  %34 = load i8, i8* %33, align 16
  %35 = icmp eq i8 %34, 0
  %36 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 4, i64 0, i32 7, i64 0
  %37 = bitcast [2 x i16]* %36 to i8*
  br i1 %35, label %38, label %41

38:                                               ; preds = %12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %37, i8* align 8 %28, i64 32, i1 false) #12
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 4, i64 0, i32 11, i64 0
  %40 = bitcast [19 x i8*]* %39 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %40, i8* align 8 %30, i64 1216, i1 false) #12
  br label %44

41:                                               ; preds = %12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %37, i8* align 8 %20, i64 32, i1 false) #12
  %42 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 4, i64 0, i32 11, i64 0
  %43 = bitcast [19 x i8*]* %42 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %43, i8* align 8 %22, i64 1216, i1 false) #12
  br label %44

44:                                               ; preds = %41, %38
  br i1 %18, label %126, label %45

45:                                               ; preds = %142, %145, %44
  %46 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 11
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 2
  store i32 %47, i32* %48, align 8
  %49 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %50 = bitcast %struct.aom_internal_error_info** %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 45
  %53 = bitcast %struct.aom_internal_error_info** %52 to i64*
  store i64 %51, i64* %53, align 16
  %54 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 51
  %55 = load %struct.SequenceHeader*, %struct.SequenceHeader** %14, align 16
  tail call void @cfl_init(%struct.cfl_ctx* %54, %struct.SequenceHeader* %55) #12
  %56 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 1
  br i1 %58, label %100, label %59

59:                                               ; preds = %45
  %60 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %61 = load i8, i8* %60, align 8
  %62 = icmp eq i8 %61, 1
  br i1 %62, label %100, label %63

63:                                               ; preds = %59
  %64 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5
  %65 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 8
  %66 = load i8, i8* %65, align 8
  %67 = zext i8 %66 to i64
  %68 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %72 = load i32, i32* %71, align 4
  %73 = add nsw i32 %70, -1
  %74 = add i32 %73, %72
  %75 = sdiv i32 %74, %70
  %76 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %77 = load i32, i32* %76, align 8
  %78 = add i32 %77, %73
  %79 = sdiv i32 %78, %70
  %80 = mul nsw i32 %79, %75
  %81 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 1
  %82 = load i32, i32* %81, align 8
  %83 = icmp sgt i32 %80, %82
  br i1 %83, label %84, label %98

84:                                               ; preds = %63
  %85 = getelementptr inbounds %struct.MBMIExtFrameBufferInfo, %struct.MBMIExtFrameBufferInfo* %64, i64 0, i32 0
  %86 = load %struct.MB_MODE_INFO_EXT_FRAME*, %struct.MB_MODE_INFO_EXT_FRAME** %85, align 8
  %87 = icmp eq %struct.MB_MODE_INFO_EXT_FRAME* %86, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %84
  %89 = bitcast %struct.MB_MODE_INFO_EXT_FRAME* %86 to i8*
  tail call void @aom_free(i8* nonnull %89) #12
  store %struct.MB_MODE_INFO_EXT_FRAME* null, %struct.MB_MODE_INFO_EXT_FRAME** %85, align 8
  store i32 0, i32* %81, align 8
  br label %90

90:                                               ; preds = %88, %84
  %91 = sext i32 %80 to i64
  %92 = tail call i8* @aom_calloc(i64 %91, i64 84) #12
  %93 = bitcast %struct.MBMIExtFrameBufferInfo* %64 to i8**
  store i8* %92, i8** %93, align 8
  %94 = icmp eq i8* %92, null
  br i1 %94, label %95, label %97

95:                                               ; preds = %90
  %96 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %49, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %96, i32 2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.19, i64 0, i64 0)) #12
  br label %97

97:                                               ; preds = %95, %90
  store i32 %80, i32* %81, align 8
  br label %98

98:                                               ; preds = %63, %97
  %99 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 2
  store i32 %79, i32* %99, align 4
  br label %100

100:                                              ; preds = %59, %45, %98
  %101 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %102 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %101, align 16
  %103 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %102, i64 0, i32 3
  %104 = load i32, i32* %103, align 8
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %124

106:                                              ; preds = %100
  %107 = load %struct.SequenceHeader*, %struct.SequenceHeader** %14, align 16
  %108 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9
  %109 = load i32, i32* %3, align 16
  %110 = load i32, i32* %5, align 4
  %111 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %112 = load i32, i32* %111, align 8
  %113 = tail call zeroext i8 @av1_select_sb_size(%struct.AV1EncoderConfig* %108, i32 %109, i32 %110, i32 %112) #12
  %114 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %107, i64 0, i32 7
  store i8 %113, i8* %114, align 4
  %115 = zext i8 %113 to i64
  %116 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %107, i64 0, i32 8
  store i32 %118, i32* %119, align 8
  %120 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide_log2, i64 0, i64 %115
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %107, i64 0, i32 9
  store i32 %122, i32* %123, align 4
  br label %124

124:                                              ; preds = %100, %106
  %125 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 11
  tail call fastcc void @set_tile_info(%struct.AV1Common* %2, %struct.TileConfig* %125)
  ret void

126:                                              ; preds = %44
  %127 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 4, i64 1, i32 0
  %128 = load i8, i8* %127, align 16
  %129 = icmp eq i8 %128, 0
  %130 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 4, i64 1, i32 7, i64 0
  %131 = bitcast [2 x i16]* %130 to i8*
  br i1 %129, label %133, label %132

132:                                              ; preds = %126
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %131, i8* align 8 %24, i64 32, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %32, i8* align 8 %26, i64 1216, i1 false) #12
  br label %136

133:                                              ; preds = %126
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %131, i8* align 8 %28, i64 32, i1 false) #12
  %134 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 4, i64 1, i32 11, i64 0
  %135 = bitcast [19 x i8*]* %134 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %135, i8* align 8 %30, i64 1216, i1 false) #12
  br label %136

136:                                              ; preds = %132, %133
  %137 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 4, i64 2, i32 0
  %138 = load i8, i8* %137, align 16
  %139 = icmp eq i8 %138, 0
  %140 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 4, i64 2, i32 7, i64 0
  %141 = bitcast [2 x i16]* %140 to i8*
  br i1 %139, label %145, label %142

142:                                              ; preds = %136
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %141, i8* align 8 %20, i64 32, i1 false) #12
  %143 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 4, i64 2, i32 11, i64 0
  %144 = bitcast [19 x i8*]* %143 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %144, i8* align 8 %22, i64 1216, i1 false) #12
  br label %45

145:                                              ; preds = %136
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %141, i8* align 8 %28, i64 32, i1 false) #12
  %146 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 4, i64 2, i32 11, i64 0
  %147 = bitcast [19 x i8*]* %146 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %147, i8* align 8 %30, i64 1216, i1 false) #12
  br label %45
}

declare i32 @av1_alloc_context_buffers(%struct.AV1Common*, i32, i32) local_unnamed_addr #3

declare void @aom_internal_error(%struct.aom_internal_error_info*, i32, i8*, ...) local_unnamed_addr #3

declare void @av1_init_mi_buffers(%struct.CommonModeInfoParams*) local_unnamed_addr #3

declare zeroext i8 @av1_select_sb_size(%struct.AV1EncoderConfig*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @set_tile_info(%struct.AV1Common*, %struct.TileConfig* nocapture readonly) unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %4 = load %struct.SequenceHeader*, %struct.SequenceHeader** %3, align 16
  %5 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38
  tail call void @av1_get_tile_limits(%struct.AV1Common* %0) #12
  %6 = getelementptr inbounds %struct.TileConfig, %struct.TileConfig* %1, i64 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.TileConfig, %struct.TileConfig* %1, i64 0, i32 5
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %28

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 5
  store i32 1, i32* %14, align 4
  %15 = getelementptr inbounds %struct.TileConfig, %struct.TileConfig* %1, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 10
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %16, %18
  %20 = select i1 %19, i32 %16, i32 %18
  %21 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 6
  %22 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 12
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %20, %23
  %25 = select i1 %24, i32 %20, i32 %23
  store i32 %25, i32* %21, align 4
  %26 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 4
  %27 = load i32, i32* %26, align 8
  br label %69

28:                                               ; preds = %9
  %29 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %4, i64 0, i32 9
  %32 = load i32, i32* %31, align 4
  %33 = shl nsw i32 -1, %32
  %34 = xor i32 %33, -1
  %35 = add nsw i32 %30, %34
  %36 = and i32 %35, %33
  %37 = ashr i32 %36, %32
  %38 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 5
  store i32 0, i32* %38, align 4
  %39 = icmp sgt i32 %37, 0
  br i1 %39, label %40, label %64

40:                                               ; preds = %28
  %41 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 2
  %42 = load i32, i32* %41, align 4
  br label %43

43:                                               ; preds = %40, %43
  %44 = phi i64 [ 0, %40 ], [ %58, %43 ]
  %45 = phi i32 [ 0, %40 ], [ %54, %43 ]
  %46 = phi i32 [ 0, %40 ], [ %57, %43 ]
  %47 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 15, i64 %44
  store i32 %46, i32* %47, align 4
  %48 = add nsw i32 %45, 1
  %49 = sext i32 %45 to i64
  %50 = getelementptr inbounds %struct.TileConfig, %struct.TileConfig* %1, i64 0, i32 6, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = load i32, i32* %6, align 4
  %53 = icmp slt i32 %48, %52
  %54 = select i1 %53, i32 %48, i32 0
  %55 = icmp slt i32 %51, %42
  %56 = select i1 %55, i32 %51, i32 %42
  %57 = add nsw i32 %56, %46
  %58 = add nuw nsw i64 %44, 1
  %59 = icmp slt i32 %57, %37
  %60 = icmp ult i64 %58, 64
  %61 = and i1 %60, %59
  br i1 %61, label %43, label %62

62:                                               ; preds = %43
  %63 = trunc i64 %58 to i32
  br label %64

64:                                               ; preds = %62, %28
  %65 = phi i32 [ 0, %28 ], [ %63, %62 ]
  %66 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %5, i64 0, i32 0
  store i32 %65, i32* %66, align 4
  %67 = zext i32 %65 to i64
  %68 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 15, i64 %67
  store i32 %37, i32* %68, align 4
  br label %69

69:                                               ; preds = %64, %13
  %70 = phi i32 [ %30, %64 ], [ %27, %13 ]
  %71 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 3
  %72 = load i32, i32* %71, align 4
  tail call void @av1_calculate_tile_cols(%struct.SequenceHeader* %4, i32 %72, i32 %70, %struct.CommonTileParams* %5) #12
  %73 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 5
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %89, label %76

76:                                               ; preds = %69
  %77 = getelementptr inbounds %struct.TileConfig, %struct.TileConfig* %1, i64 0, i32 3
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 11
  %80 = load i32, i32* %79, align 4
  %81 = icmp sgt i32 %78, %80
  %82 = select i1 %81, i32 %78, i32 %80
  %83 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 7
  %84 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 13
  %85 = load i32, i32* %84, align 4
  %86 = icmp slt i32 %82, %85
  %87 = select i1 %86, i32 %82, i32 %85
  store i32 %87, i32* %83, align 4
  %88 = load i32, i32* %71, align 4
  br label %129

89:                                               ; preds = %69
  %90 = load i32, i32* %71, align 4
  %91 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %4, i64 0, i32 9
  %92 = load i32, i32* %91, align 4
  %93 = shl nsw i32 -1, %92
  %94 = xor i32 %93, -1
  %95 = add nsw i32 %90, %94
  %96 = and i32 %95, %93
  %97 = ashr i32 %96, %92
  %98 = icmp sgt i32 %97, 0
  br i1 %98, label %99, label %124

99:                                               ; preds = %89
  %100 = getelementptr inbounds %struct.TileConfig, %struct.TileConfig* %1, i64 0, i32 5
  %101 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 3
  %102 = load i32, i32* %101, align 4
  br label %103

103:                                              ; preds = %99, %103
  %104 = phi i64 [ 0, %99 ], [ %118, %103 ]
  %105 = phi i32 [ 0, %99 ], [ %114, %103 ]
  %106 = phi i32 [ 0, %99 ], [ %117, %103 ]
  %107 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 16, i64 %104
  store i32 %106, i32* %107, align 4
  %108 = add nsw i32 %105, 1
  %109 = sext i32 %105 to i64
  %110 = getelementptr inbounds %struct.TileConfig, %struct.TileConfig* %1, i64 0, i32 7, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = load i32, i32* %100, align 4
  %113 = icmp slt i32 %108, %112
  %114 = select i1 %113, i32 %108, i32 0
  %115 = icmp slt i32 %111, %102
  %116 = select i1 %115, i32 %111, i32 %102
  %117 = add nsw i32 %116, %106
  %118 = add nuw nsw i64 %104, 1
  %119 = icmp slt i32 %117, %97
  %120 = icmp ult i64 %118, 64
  %121 = and i1 %120, %119
  br i1 %121, label %103, label %122

122:                                              ; preds = %103
  %123 = trunc i64 %118 to i32
  br label %124

124:                                              ; preds = %122, %89
  %125 = phi i32 [ 0, %89 ], [ %123, %122 ]
  %126 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 1
  store i32 %125, i32* %126, align 4
  %127 = zext i32 %125 to i64
  %128 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 16, i64 %127
  store i32 %97, i32* %128, align 4
  br label %129

129:                                              ; preds = %124, %76
  %130 = phi i32 [ %90, %124 ], [ %88, %76 ]
  tail call void @av1_calculate_tile_rows(%struct.SequenceHeader* %4, i32 %130, %struct.CommonTileParams* %5) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_init_seq_coding_tools(%struct.AV1_PRIMARY*, %struct.AV1EncoderConfig* readonly, i32) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 1
  %5 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 9, i32 5
  %6 = load i8, i8* %5, align 1, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 12
  store i8 0, i8* %9, align 1
  br label %20

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 1
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 12
  store i8 %14, i8* %15, align 1
  br i1 %13, label %16, label %20

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 9, i32 9
  %18 = load i8, i8* %17, align 1, !range !2
  %19 = xor i8 %18, 1
  br label %20

20:                                               ; preds = %10, %8, %16
  %21 = phi i8 [ 0, %10 ], [ %19, %16 ], [ 0, %8 ]
  %22 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 13
  store i8 %21, i8* %22, align 2
  %23 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 34
  %24 = load i8, i8* %23, align 8
  %25 = icmp eq i8 %24, 1
  %26 = select i1 %25, i8 0, i8 2
  %27 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 11
  store i8 %26, i8* %27, align 8
  %28 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 14
  store i8 2, i8* %28, align 1
  %29 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 9, i32 11
  %30 = load i8, i8* %29, align 1, !range !2
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 10, i32 0
  store i32 %31, i32* %32, align 8
  %33 = icmp eq i8 %21, 0
  br i1 %33, label %34, label %45

34:                                               ; preds = %20
  %35 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 11, i32 8
  %36 = load i8, i8* %35, align 8, !range !2
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %47

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 9, i32 6
  %40 = load i8, i8* %39, align 4, !range !2
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %38
  %43 = icmp eq i32 %2, 0
  %44 = zext i1 %43 to i8
  br label %47

45:                                               ; preds = %20
  %46 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 4
  store i8 0, i8* %46, align 8
  store i32 0, i32* %32, align 8
  store i8 2, i8* %27, align 8
  store i8 2, i8* %28, align 1
  br label %51

47:                                               ; preds = %42, %34, %38
  %48 = phi i8 [ %44, %42 ], [ 0, %34 ], [ 0, %38 ]
  %49 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 4
  store i8 %48, i8* %49, align 8
  %50 = icmp eq i8 %30, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %45, %47
  br label %52

52:                                               ; preds = %47, %51
  %53 = phi i32 [ 0, %51 ], [ 1, %47 ]
  %54 = phi i32 [ -1, %51 ], [ 6, %47 ]
  %55 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 10, i32 1
  store i32 %54, i32* %55, align 4
  %56 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 1, i32 2
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %52
  %60 = getelementptr inbounds %struct.FrameDimensionCfg, %struct.FrameDimensionCfg* %4, i64 0, i32 0
  %61 = load i32, i32* %60, align 4
  br label %62

62:                                               ; preds = %52, %59
  %63 = phi i32 [ %61, %59 ], [ %57, %52 ]
  %64 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 2
  store i32 %63, i32* %64, align 8
  %65 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 1, i32 3
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %62
  %69 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 1, i32 1
  %70 = load i32, i32* %69, align 4
  br label %71

71:                                               ; preds = %62, %68
  %72 = phi i32 [ %70, %68 ], [ %66, %62 ]
  %73 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 3
  store i32 %72, i32* %73, align 4
  %74 = icmp sgt i32 %63, 1
  br i1 %74, label %75, label %79

75:                                               ; preds = %71
  %76 = add nsw i32 %63, -1
  %77 = tail call i32 @llvm.ctlz.i32(i32 %76, i1 true) #12, !range !3
  %78 = sub nuw nsw i32 32, %77
  br label %79

79:                                               ; preds = %71, %75
  %80 = phi i32 [ %78, %75 ], [ 1, %71 ]
  %81 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 0
  store i32 %80, i32* %81, align 8
  %82 = icmp sgt i32 %72, 1
  br i1 %82, label %83, label %87

83:                                               ; preds = %79
  %84 = add nsw i32 %72, -1
  %85 = tail call i32 @llvm.ctlz.i32(i32 %84, i1 true) #12, !range !3
  %86 = sub nuw nsw i32 32, %85
  br label %87

87:                                               ; preds = %79, %83
  %88 = phi i32 [ %86, %83 ], [ 1, %79 ]
  %89 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 1
  store i32 %88, i32* %89, align 4
  %90 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 5
  store i32 15, i32* %90, align 4
  %91 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 6
  store i32 14, i32* %91, align 8
  %92 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 9, i32 10
  %93 = load i8, i8* %92, align 4, !range !2
  %94 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 19
  store i8 %93, i8* %94, align 8
  %95 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 20, i32 0
  %96 = load i8, i8* %95, align 1, !range !2
  %97 = zext i8 %96 to i32
  %98 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 10, i32 2
  %99 = and i32 %53, %97
  store i32 %99, i32* %98, align 8
  %100 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 9, i32 12
  %101 = load i8, i8* %100, align 2, !range !2
  %102 = zext i8 %101 to i32
  %103 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 10, i32 3
  %104 = and i32 %53, %102
  store i32 %104, i32* %103, align 4
  %105 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 7, i32 5
  %106 = load i8, i8* %105, align 4, !range !2
  %107 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 21
  store i8 %106, i8* %107, align 2
  %108 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 9, i32 3
  %109 = load i8, i8* %108, align 1, !range !2
  %110 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 22
  store i8 %109, i8* %110, align 1
  %111 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 9, i32 4
  %112 = load i8, i8* %111, align 2, !range !2
  %113 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 23
  store i8 %112, i8* %113, align 4
  %114 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 17, i32 0
  %115 = load i8, i8* %114, align 4, !range !2
  %116 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 20
  store i8 %115, i8* %116, align 1
  %117 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 9, i32 14
  %118 = load i8, i8* %117, align 4, !range !2
  %119 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 17
  store i8 %118, i8* %119, align 2
  %120 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 20, i32 1
  %121 = load i8, i8* %120, align 1, !range !2
  %122 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 18
  store i8 %121, i8* %122, align 1
  %123 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 18, i32 0
  %124 = load i8, i8* %123, align 1, !range !2
  %125 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 16
  store i8 %124, i8* %125, align 1
  %126 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 18, i32 1
  %127 = load i8, i8* %126, align 1, !range !2
  %128 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 15
  store i8 %127, i8* %128, align 4
  %129 = getelementptr inbounds %struct.FrameDimensionCfg, %struct.FrameDimensionCfg* %4, i64 0, i32 0
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 1, i32 1
  %132 = load i32, i32* %131, align 4
  %133 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 0, i32 0
  %134 = load double, double* %133, align 8
  %135 = mul nsw i32 %132, %130
  %136 = icmp sgt i32 %135, 147456
  br i1 %136, label %145, label %137

137:                                              ; preds = %87
  %138 = sitofp i32 %135 to double
  %139 = fmul double %134, %138
  %140 = fcmp ugt double %139, 4.423680e+06
  %141 = icmp sgt i32 %130, 2048
  %142 = or i1 %141, %140
  %143 = icmp sgt i32 %132, 1152
  %144 = or i1 %143, %142
  br i1 %144, label %150, label %238

145:                                              ; preds = %87
  %146 = icmp sgt i32 %135, 278784
  br i1 %146, label %157, label %147

147:                                              ; preds = %145
  %148 = sitofp i32 %135 to double
  %149 = fmul double %134, %148
  br label %150

150:                                              ; preds = %147, %137
  %151 = phi double [ %149, %147 ], [ %139, %137 ]
  %152 = fcmp ugt double %151, 8.363520e+06
  %153 = icmp sgt i32 %130, 2816
  %154 = or i1 %153, %152
  %155 = icmp sgt i32 %132, 1584
  %156 = or i1 %155, %154
  br i1 %156, label %162, label %238

157:                                              ; preds = %145
  %158 = icmp sgt i32 %135, 665856
  br i1 %158, label %169, label %159

159:                                              ; preds = %157
  %160 = sitofp i32 %135 to double
  %161 = fmul double %134, %160
  br label %162

162:                                              ; preds = %159, %150
  %163 = phi double [ %161, %159 ], [ %151, %150 ]
  %164 = fcmp ugt double %163, 0x41730CE000000000
  %165 = icmp sgt i32 %130, 4352
  %166 = or i1 %165, %164
  %167 = icmp sgt i32 %132, 2448
  %168 = or i1 %167, %166
  br i1 %168, label %174, label %238

169:                                              ; preds = %157
  %170 = icmp sgt i32 %135, 1065024
  br i1 %170, label %181, label %171

171:                                              ; preds = %169
  %172 = sitofp i32 %135 to double
  %173 = fmul double %134, %172
  br label %174

174:                                              ; preds = %171, %162
  %175 = phi double [ %173, %171 ], [ %163, %162 ]
  %176 = fcmp ugt double %175, 0x417E787800000000
  %177 = icmp sgt i32 %130, 5504
  %178 = or i1 %177, %176
  %179 = icmp sgt i32 %132, 3096
  %180 = or i1 %179, %178
  br i1 %180, label %186, label %238

181:                                              ; preds = %169
  %182 = icmp sgt i32 %135, 2359296
  br i1 %182, label %197, label %183

183:                                              ; preds = %181
  %184 = sitofp i32 %135 to double
  %185 = fmul double %134, %184
  br label %186

186:                                              ; preds = %183, %174
  %187 = phi double [ %185, %183 ], [ %175, %174 ]
  %188 = fcmp ugt double %187, 0x4190E00000000000
  %189 = icmp sgt i32 %130, 6144
  %190 = or i1 %189, %188
  %191 = icmp sgt i32 %132, 3456
  %192 = or i1 %191, %190
  br i1 %192, label %193, label %238

193:                                              ; preds = %186
  %194 = fcmp ugt double %187, 0x41A0E00000000000
  %195 = or i1 %189, %194
  %196 = or i1 %191, %195
  br i1 %196, label %202, label %238

197:                                              ; preds = %181
  %198 = icmp sgt i32 %135, 8912896
  br i1 %198, label %217, label %199

199:                                              ; preds = %197
  %200 = sitofp i32 %135 to double
  %201 = fmul double %134, %200
  br label %202

202:                                              ; preds = %199, %193
  %203 = phi double [ %201, %199 ], [ %187, %193 ]
  %204 = fcmp ugt double %203, 0x41AFE00000000000
  %205 = icmp sgt i32 %130, 8192
  %206 = or i1 %205, %204
  %207 = icmp sgt i32 %132, 4352
  %208 = or i1 %207, %206
  br i1 %208, label %209, label %238

209:                                              ; preds = %202
  %210 = fcmp ugt double %203, 0x41BFE00000000000
  %211 = or i1 %205, %210
  %212 = or i1 %207, %211
  br i1 %212, label %213, label %238

213:                                              ; preds = %209
  %214 = fcmp ugt double %203, 0x41CFE00000000000
  %215 = or i1 %205, %214
  %216 = or i1 %207, %215
  br i1 %216, label %222, label %238

217:                                              ; preds = %197
  %218 = icmp sgt i32 %135, 35651584
  br i1 %218, label %237, label %219

219:                                              ; preds = %217
  %220 = sitofp i32 %135 to double
  %221 = fmul double %134, %220
  br label %222

222:                                              ; preds = %219, %213
  %223 = phi double [ %221, %219 ], [ %203, %213 ]
  %224 = fcmp ugt double %223, 0x41CFE00000000000
  %225 = icmp sgt i32 %130, 16384
  %226 = or i1 %225, %224
  %227 = icmp sgt i32 %132, 8704
  %228 = or i1 %227, %226
  br i1 %228, label %229, label %238

229:                                              ; preds = %222
  %230 = fcmp ugt double %223, 0x41DFE00000000000
  %231 = or i1 %225, %230
  %232 = or i1 %227, %231
  br i1 %232, label %233, label %238

233:                                              ; preds = %229
  %234 = fcmp ugt double %223, 0x41EFE00000000000
  %235 = or i1 %225, %234
  %236 = or i1 %227, %235
  br i1 %236, label %237, label %238

237:                                              ; preds = %233, %217
  br label %238

238:                                              ; preds = %237, %233, %229, %222, %213, %209, %202, %193, %186, %174, %162, %150, %137
  %239 = phi i8 [ 31, %237 ], [ 0, %137 ], [ 1, %150 ], [ 4, %162 ], [ 5, %174 ], [ 9, %193 ], [ 12, %202 ], [ 13, %209 ], [ 14, %213 ], [ 17, %229 ], [ 18, %233 ], [ 8, %186 ], [ 16, %222 ]
  %240 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 24
  %241 = zext i8 %239 to i32
  %242 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 20
  br label %243

243:                                              ; preds = %255, %238
  %244 = phi i64 [ 0, %238 ], [ %258, %255 ]
  %245 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 44, i64 %244
  store i8 %239, i8* %245, align 1
  %246 = load i8, i8* %240, align 1
  %247 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 %244
  %248 = load i8, i8* %247, align 1
  %249 = zext i8 %248 to i32
  %250 = tail call i64 @av1_max_level_bitrate(i8 signext %246, i32 %241, i32 %249) #12
  %251 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 46, i64 %244, i32 1
  store i64 %250, i64* %251, align 8
  %252 = icmp eq i64 %250, 0
  br i1 %252, label %253, label %255

253:                                              ; preds = %243
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %242, i32 5, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.20, i64 0, i64 0)) #12
  %254 = load i64, i64* %251, align 8
  br label %255

255:                                              ; preds = %253, %243
  %256 = phi i64 [ %254, %253 ], [ %250, %243 ]
  %257 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 46, i64 %244, i32 2
  store i64 %256, i64* %257, align 8
  %258 = add nuw nsw i64 %244, 1
  %259 = icmp eq i64 %258, 32
  br i1 %259, label %260, label %243

260:                                              ; preds = %255
  %261 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 37
  %262 = load i32, i32* %261, align 8
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %271, label %264

264:                                              ; preds = %260
  %265 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 19
  %266 = load i32, i32* %265, align 4
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %319, label %268

268:                                              ; preds = %264
  %269 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 18
  %270 = load i32, i32* %269, align 8
  br label %273

271:                                              ; preds = %260
  %272 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 38, i64 0
  store i32 0, i32* %272, align 4
  br label %319

273:                                              ; preds = %268, %296
  %274 = phi i32 [ %266, %268 ], [ %297, %296 ]
  %275 = phi i32 [ %270, %268 ], [ %298, %296 ]
  %276 = phi i32 [ 0, %268 ], [ %300, %296 ]
  %277 = phi i32 [ 0, %268 ], [ %299, %296 ]
  %278 = icmp eq i32 %275, 0
  br i1 %278, label %296, label %279

279:                                              ; preds = %273
  %280 = sext i32 %277 to i64
  %281 = sub i32 %274, %276
  %282 = shl i32 -256, %281
  %283 = xor i32 %282, -256
  %284 = shl i32 -1, %275
  %285 = xor i32 %284, -1
  %286 = or i32 %283, %285
  %287 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 38, i64 %280
  store i32 %286, i32* %287, align 4
  %288 = add nsw i64 %280, 1
  %289 = load i32, i32* %269, align 8
  %290 = icmp ugt i32 %289, 1
  br i1 %290, label %302, label %291

291:                                              ; preds = %302, %279
  %292 = phi i64 [ %288, %279 ], [ %315, %302 ]
  %293 = phi i32 [ %289, %279 ], [ %317, %302 ]
  %294 = trunc i64 %292 to i32
  %295 = load i32, i32* %265, align 4
  br label %296

296:                                              ; preds = %291, %273
  %297 = phi i32 [ %274, %273 ], [ %295, %291 ]
  %298 = phi i32 [ 0, %273 ], [ %293, %291 ]
  %299 = phi i32 [ %277, %273 ], [ %294, %291 ]
  %300 = add nuw i32 %276, 1
  %301 = icmp ult i32 %300, %297
  br i1 %301, label %273, label %319

302:                                              ; preds = %279, %302
  %303 = phi i32 [ %317, %302 ], [ %289, %279 ]
  %304 = phi i32 [ %316, %302 ], [ 1, %279 ]
  %305 = phi i64 [ %315, %302 ], [ %288, %279 ]
  %306 = load i32, i32* %265, align 4
  %307 = sub i32 %306, %276
  %308 = shl i32 -256, %307
  %309 = xor i32 %308, -256
  %310 = sub i32 %303, %304
  %311 = shl i32 -1, %310
  %312 = xor i32 %311, -1
  %313 = or i32 %309, %312
  %314 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 38, i64 %305
  store i32 %313, i32* %314, align 4
  %315 = add i64 %305, 1
  %316 = add nuw i32 %304, 1
  %317 = load i32, i32* %269, align 8
  %318 = icmp ugt i32 %317, %316
  br i1 %318, label %302, label %291

319:                                              ; preds = %296, %264, %271
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_change_config_seq(%struct.AV1_PRIMARY*, %struct.AV1EncoderConfig*, i8*) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 24
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 32
  %7 = load i8, i8* %6, align 8
  %8 = icmp eq i8 %5, %7
  br i1 %8, label %10, label %9

9:                                                ; preds = %3
  store i8 %7, i8* %4, align 1
  br label %10

10:                                               ; preds = %3, %9
  %11 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 9, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 25
  store i32 %12, i32* %13, align 8
  %14 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 13, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 28
  store i32 %15, i32* %16, align 8
  %17 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 13, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 29
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 13, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 30
  store i32 %21, i32* %22, align 8
  %23 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 9, i32 8
  %24 = load i8, i8* %23, align 2, !range !2
  %25 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 27
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 13, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 34
  store i32 %27, i32* %28, align 8
  %29 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 13, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 31
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 14, i32 4
  %33 = load i8, i8* %32, align 2, !range !2
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 39
  store i32 %34, i32* %35, align 4
  %36 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 14, i32 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 40, i32 0
  store i32 %37, i32* %38, align 8
  %39 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 14, i32 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 40, i32 1
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 14, i32 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 40, i32 2
  store i32 %43, i32* %44, align 8
  %45 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 14, i32 0, i32 3
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 40, i32 3
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 14, i32 3
  %49 = load i8, i8* %48, align 1, !range !2
  %50 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 43
  store i8 %49, i8* %50, align 4
  %51 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 14, i32 2
  %52 = load i8, i8* %51, align 4, !range !2
  %53 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 41
  store i8 %52, i8* %53, align 8
  %54 = load i8, i8* %51, align 4, !range !2
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %63, label %56

56:                                               ; preds = %10
  %57 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 14, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 42
  %60 = getelementptr inbounds %struct.aom_dec_model_info, %struct.aom_dec_model_info* %59, i64 0, i32 0
  store i32 %58, i32* %60, align 4
  %61 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 17
  store i8 1, i8* %61, align 4
  tail call void @av1_set_aom_dec_model_info(%struct.aom_dec_model_info* %59) #12
  %62 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 46, i64 0
  tail call void @av1_set_dec_model_op_parameters(%struct.aom_dec_model_op_parameters* %62) #12
  br label %73

63:                                               ; preds = %10
  %64 = icmp ne i8 %52, 0
  %65 = icmp eq i8 %33, 0
  %66 = icmp eq i32 %43, 0
  %67 = or i1 %66, %64
  %68 = or i1 %65, %67
  br i1 %68, label %71, label %69

69:                                               ; preds = %63
  %70 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 46, i64 0
  tail call void @av1_set_resource_availability_parameters(%struct.aom_dec_model_op_parameters* %70) #12
  br label %73

71:                                               ; preds = %63
  %72 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 46, i64 0, i32 7
  store i32 10, i32* %72, align 8
  br label %73

73:                                               ; preds = %69, %71, %56
  tail call void @av1_update_film_grain_parameters_seq(%struct.AV1_PRIMARY* %0, %struct.AV1EncoderConfig* %1) #12
  %74 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 7
  %75 = load i8, i8* %74, align 4
  %76 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 3
  %77 = load i32, i32* %76, align 8
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %266

79:                                               ; preds = %73
  %80 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 1, i32 0
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 1, i32 1
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 19
  %85 = load i32, i32* %84, align 4
  %86 = tail call zeroext i8 @av1_select_sb_size(%struct.AV1EncoderConfig* %1, i32 %81, i32 %83, i32 %85) #12
  store i8 %86, i8* %74, align 4
  %87 = zext i8 %86 to i64
  %88 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 8
  store i32 %90, i32* %91, align 8
  %92 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide_log2, i64 0, i64 %87
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 9
  store i32 %94, i32* %95, align 4
  %96 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 27
  %97 = getelementptr %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 0
  %98 = getelementptr %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 32
  %99 = getelementptr %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 27
  %100 = bitcast i32* %99 to i8*
  %101 = getelementptr i8, i8* %100, i64 1
  %102 = bitcast i32* %96 to i8*
  %103 = icmp ult i8* %97, %101
  %104 = icmp ugt i8* %98, %102
  %105 = and i1 %103, %104
  br i1 %105, label %235, label %106

106:                                              ; preds = %79
  %107 = load i32, i32* %96, align 8, !alias.scope !4
  %108 = insertelement <2 x i32> undef, i32 %107, i32 0
  %109 = shufflevector <2 x i32> %108, <2 x i32> undef, <2 x i32> zeroinitializer
  %110 = lshr <2 x i32> %109, <i32 0, i32 1>
  %111 = trunc <2 x i32> %110 to <2 x i8>
  %112 = and <2 x i8> %111, <i8 1, i8 1>
  %113 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 0
  %114 = bitcast i8* %113 to <2 x i8>*
  store <2 x i8> %112, <2 x i8>* %114, align 1, !alias.scope !7, !noalias !4
  %115 = load i32, i32* %96, align 8, !alias.scope !4
  %116 = insertelement <2 x i32> undef, i32 %115, i32 0
  %117 = shufflevector <2 x i32> %116, <2 x i32> undef, <2 x i32> zeroinitializer
  %118 = lshr <2 x i32> %117, <i32 2, i32 3>
  %119 = trunc <2 x i32> %118 to <2 x i8>
  %120 = and <2 x i8> %119, <i8 1, i8 1>
  %121 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 2
  %122 = bitcast i8* %121 to <2 x i8>*
  store <2 x i8> %120, <2 x i8>* %122, align 1, !alias.scope !7, !noalias !4
  %123 = load i32, i32* %96, align 8, !alias.scope !4
  %124 = insertelement <2 x i32> undef, i32 %123, i32 0
  %125 = shufflevector <2 x i32> %124, <2 x i32> undef, <2 x i32> zeroinitializer
  %126 = lshr <2 x i32> %125, <i32 4, i32 5>
  %127 = trunc <2 x i32> %126 to <2 x i8>
  %128 = and <2 x i8> %127, <i8 1, i8 1>
  %129 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 4
  %130 = bitcast i8* %129 to <2 x i8>*
  store <2 x i8> %128, <2 x i8>* %130, align 1, !alias.scope !7, !noalias !4
  %131 = load i32, i32* %96, align 8, !alias.scope !4
  %132 = insertelement <2 x i32> undef, i32 %131, i32 0
  %133 = shufflevector <2 x i32> %132, <2 x i32> undef, <2 x i32> zeroinitializer
  %134 = lshr <2 x i32> %133, <i32 6, i32 7>
  %135 = trunc <2 x i32> %134 to <2 x i8>
  %136 = and <2 x i8> %135, <i8 1, i8 1>
  %137 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 6
  %138 = bitcast i8* %137 to <2 x i8>*
  store <2 x i8> %136, <2 x i8>* %138, align 1, !alias.scope !7, !noalias !4
  %139 = load i32, i32* %96, align 8, !alias.scope !4
  %140 = insertelement <2 x i32> undef, i32 %139, i32 0
  %141 = shufflevector <2 x i32> %140, <2 x i32> undef, <2 x i32> zeroinitializer
  %142 = lshr <2 x i32> %141, <i32 8, i32 9>
  %143 = trunc <2 x i32> %142 to <2 x i8>
  %144 = and <2 x i8> %143, <i8 1, i8 1>
  %145 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 8
  %146 = bitcast i8* %145 to <2 x i8>*
  store <2 x i8> %144, <2 x i8>* %146, align 1, !alias.scope !7, !noalias !4
  %147 = load i32, i32* %96, align 8, !alias.scope !4
  %148 = insertelement <2 x i32> undef, i32 %147, i32 0
  %149 = shufflevector <2 x i32> %148, <2 x i32> undef, <2 x i32> zeroinitializer
  %150 = lshr <2 x i32> %149, <i32 10, i32 11>
  %151 = trunc <2 x i32> %150 to <2 x i8>
  %152 = and <2 x i8> %151, <i8 1, i8 1>
  %153 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 10
  %154 = bitcast i8* %153 to <2 x i8>*
  store <2 x i8> %152, <2 x i8>* %154, align 1, !alias.scope !7, !noalias !4
  %155 = load i32, i32* %96, align 8, !alias.scope !4
  %156 = insertelement <2 x i32> undef, i32 %155, i32 0
  %157 = shufflevector <2 x i32> %156, <2 x i32> undef, <2 x i32> zeroinitializer
  %158 = lshr <2 x i32> %157, <i32 12, i32 13>
  %159 = trunc <2 x i32> %158 to <2 x i8>
  %160 = and <2 x i8> %159, <i8 1, i8 1>
  %161 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 12
  %162 = bitcast i8* %161 to <2 x i8>*
  store <2 x i8> %160, <2 x i8>* %162, align 1, !alias.scope !7, !noalias !4
  %163 = load i32, i32* %96, align 8, !alias.scope !4
  %164 = insertelement <2 x i32> undef, i32 %163, i32 0
  %165 = shufflevector <2 x i32> %164, <2 x i32> undef, <2 x i32> zeroinitializer
  %166 = lshr <2 x i32> %165, <i32 14, i32 15>
  %167 = trunc <2 x i32> %166 to <2 x i8>
  %168 = and <2 x i8> %167, <i8 1, i8 1>
  %169 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 14
  %170 = bitcast i8* %169 to <2 x i8>*
  store <2 x i8> %168, <2 x i8>* %170, align 1, !alias.scope !7, !noalias !4
  %171 = load i32, i32* %96, align 8, !alias.scope !4
  %172 = insertelement <2 x i32> undef, i32 %171, i32 0
  %173 = shufflevector <2 x i32> %172, <2 x i32> undef, <2 x i32> zeroinitializer
  %174 = lshr <2 x i32> %173, <i32 16, i32 17>
  %175 = trunc <2 x i32> %174 to <2 x i8>
  %176 = and <2 x i8> %175, <i8 1, i8 1>
  %177 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 16
  %178 = bitcast i8* %177 to <2 x i8>*
  store <2 x i8> %176, <2 x i8>* %178, align 1, !alias.scope !7, !noalias !4
  %179 = load i32, i32* %96, align 8, !alias.scope !4
  %180 = insertelement <2 x i32> undef, i32 %179, i32 0
  %181 = shufflevector <2 x i32> %180, <2 x i32> undef, <2 x i32> zeroinitializer
  %182 = lshr <2 x i32> %181, <i32 18, i32 19>
  %183 = trunc <2 x i32> %182 to <2 x i8>
  %184 = and <2 x i8> %183, <i8 1, i8 1>
  %185 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 18
  %186 = bitcast i8* %185 to <2 x i8>*
  store <2 x i8> %184, <2 x i8>* %186, align 1, !alias.scope !7, !noalias !4
  %187 = load i32, i32* %96, align 8, !alias.scope !4
  %188 = insertelement <2 x i32> undef, i32 %187, i32 0
  %189 = shufflevector <2 x i32> %188, <2 x i32> undef, <2 x i32> zeroinitializer
  %190 = lshr <2 x i32> %189, <i32 20, i32 21>
  %191 = trunc <2 x i32> %190 to <2 x i8>
  %192 = and <2 x i8> %191, <i8 1, i8 1>
  %193 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 20
  %194 = bitcast i8* %193 to <2 x i8>*
  store <2 x i8> %192, <2 x i8>* %194, align 1, !alias.scope !7, !noalias !4
  %195 = load i32, i32* %96, align 8, !alias.scope !4
  %196 = insertelement <2 x i32> undef, i32 %195, i32 0
  %197 = shufflevector <2 x i32> %196, <2 x i32> undef, <2 x i32> zeroinitializer
  %198 = lshr <2 x i32> %197, <i32 22, i32 23>
  %199 = trunc <2 x i32> %198 to <2 x i8>
  %200 = and <2 x i8> %199, <i8 1, i8 1>
  %201 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 22
  %202 = bitcast i8* %201 to <2 x i8>*
  store <2 x i8> %200, <2 x i8>* %202, align 1, !alias.scope !7, !noalias !4
  %203 = load i32, i32* %96, align 8, !alias.scope !4
  %204 = insertelement <2 x i32> undef, i32 %203, i32 0
  %205 = shufflevector <2 x i32> %204, <2 x i32> undef, <2 x i32> zeroinitializer
  %206 = lshr <2 x i32> %205, <i32 24, i32 25>
  %207 = trunc <2 x i32> %206 to <2 x i8>
  %208 = and <2 x i8> %207, <i8 1, i8 1>
  %209 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 24
  %210 = bitcast i8* %209 to <2 x i8>*
  store <2 x i8> %208, <2 x i8>* %210, align 1, !alias.scope !7, !noalias !4
  %211 = load i32, i32* %96, align 8, !alias.scope !4
  %212 = insertelement <2 x i32> undef, i32 %211, i32 0
  %213 = shufflevector <2 x i32> %212, <2 x i32> undef, <2 x i32> zeroinitializer
  %214 = lshr <2 x i32> %213, <i32 26, i32 27>
  %215 = trunc <2 x i32> %214 to <2 x i8>
  %216 = and <2 x i8> %215, <i8 1, i8 1>
  %217 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 26
  %218 = bitcast i8* %217 to <2 x i8>*
  store <2 x i8> %216, <2 x i8>* %218, align 1, !alias.scope !7, !noalias !4
  %219 = load i32, i32* %96, align 8, !alias.scope !4
  %220 = insertelement <2 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <2 x i32> %220, <2 x i32> undef, <2 x i32> zeroinitializer
  %222 = lshr <2 x i32> %221, <i32 28, i32 29>
  %223 = trunc <2 x i32> %222 to <2 x i8>
  %224 = and <2 x i8> %223, <i8 1, i8 1>
  %225 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 28
  %226 = bitcast i8* %225 to <2 x i8>*
  store <2 x i8> %224, <2 x i8>* %226, align 1, !alias.scope !7, !noalias !4
  %227 = load i32, i32* %96, align 8, !alias.scope !4
  %228 = insertelement <2 x i32> undef, i32 %227, i32 0
  %229 = shufflevector <2 x i32> %228, <2 x i32> undef, <2 x i32> zeroinitializer
  %230 = lshr <2 x i32> %229, <i32 30, i32 31>
  %231 = trunc <2 x i32> %230 to <2 x i8>
  %232 = and <2 x i8> %231, <i8 1, i8 1>
  %233 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 30
  %234 = bitcast i8* %233 to <2 x i8>*
  store <2 x i8> %232, <2 x i8>* %234, align 1, !alias.scope !7, !noalias !4
  br label %266

235:                                              ; preds = %79, %235
  %236 = phi i64 [ %264, %235 ], [ 0, %79 ]
  %237 = load i32, i32* %96, align 8
  %238 = trunc i64 %236 to i32
  %239 = lshr i32 %237, %238
  %240 = trunc i32 %239 to i8
  %241 = and i8 %240, 1
  %242 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 %236
  store i8 %241, i8* %242, align 1
  %243 = or i64 %236, 1
  %244 = load i32, i32* %96, align 8
  %245 = trunc i64 %243 to i32
  %246 = lshr i32 %244, %245
  %247 = trunc i32 %246 to i8
  %248 = and i8 %247, 1
  %249 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 %243
  store i8 %248, i8* %249, align 1
  %250 = or i64 %236, 2
  %251 = load i32, i32* %96, align 8
  %252 = trunc i64 %250 to i32
  %253 = lshr i32 %251, %252
  %254 = trunc i32 %253 to i8
  %255 = and i8 %254, 1
  %256 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 %250
  store i8 %255, i8* %256, align 1
  %257 = or i64 %236, 3
  %258 = load i32, i32* %96, align 8
  %259 = trunc i64 %257 to i32
  %260 = lshr i32 %258, %259
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 45, i64 %257
  store i8 %262, i8* %263, align 1
  %264 = add nuw nsw i64 %236, 4
  %265 = icmp eq i64 %264, 32
  br i1 %265, label %266, label %235, !llvm.loop !9

266:                                              ; preds = %235, %106, %73
  %267 = phi i8 [ %75, %73 ], [ %86, %106 ], [ %86, %235 ]
  %268 = icmp eq i8* %2, null
  %269 = icmp eq i8 %75, %267
  %270 = or i1 %268, %269
  br i1 %270, label %272, label %271

271:                                              ; preds = %266
  store i8 1, i8* %2, align 1
  br label %272

272:                                              ; preds = %266, %271
  %273 = load i32, i32* %76, align 8
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %288

275:                                              ; preds = %272
  %276 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 19
  %277 = load i32, i32* %276, align 4
  %278 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 18
  %279 = load i32, i32* %278, align 8
  %280 = or i32 %277, %279
  %281 = icmp ugt i32 %280, 1
  %282 = mul i32 %279, %277
  %283 = add i32 %282, -1
  %284 = select i1 %281, i32 %283, i32 0
  %285 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 37
  store i32 %284, i32* %285, align 8
  %286 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 16
  %287 = load i32, i32* %286, align 8
  tail call void @av1_init_seq_coding_tools(%struct.AV1_PRIMARY* %0, %struct.AV1EncoderConfig* %1, i32 %287)
  br label %288

288:                                              ; preds = %272, %275
  ret void
}

declare void @av1_set_aom_dec_model_info(%struct.aom_dec_model_info*) local_unnamed_addr #3

declare void @av1_set_dec_model_op_parameters(%struct.aom_dec_model_op_parameters*) local_unnamed_addr #3

declare void @av1_set_resource_availability_parameters(%struct.aom_dec_model_op_parameters*) local_unnamed_addr #3

declare void @av1_update_film_grain_parameters_seq(%struct.AV1_PRIMARY*, %struct.AV1EncoderConfig*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_change_config(%struct.AV1_COMP*, %struct.AV1EncoderConfig*, i1 zeroext) local_unnamed_addr #2 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %8 = load %struct.SequenceHeader*, %struct.SequenceHeader** %7, align 16
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %10 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %9, align 16
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1
  %14 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %10, i64 0, i32 8
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %24, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %19 = load i8, i8* %18, align 8
  %20 = icmp eq i8 %19, 1
  br i1 %20, label %21, label %24

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 10, i32 0
  %23 = load i32, i32* %22, align 16
  br label %24

24:                                               ; preds = %3, %21, %17
  %25 = phi i32 [ %23, %21 ], [ -1, %17 ], [ -1, %3 ]
  tail call void @av1_update_film_grain_parameters(%struct.AV1_COMP* %0, %struct.AV1EncoderConfig* %1) #12
  %26 = bitcast %struct.AV1EncoderConfig* %12 to i8*
  %27 = bitcast %struct.AV1EncoderConfig* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %26, i8* align 8 %27, i64 1112, i1 false)
  %28 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 7, i32 4
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 4
  %31 = select i1 %30, i32 0, i32 %29
  %32 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 80
  store i32 %31, i32* %32, align 16
  %33 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %8, i64 0, i32 25
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 40
  store i32 %34, i32* %35, align 16
  %36 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 34, i64 0
  %37 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 46
  store %struct.WarpedMotionParams* %36, %struct.WarpedMotionParams** %37, align 8
  %38 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %10, i64 0, i32 9, i32 0, i64 0
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 31, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 16 %39, i64 32, i1 false)
  %40 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %10, i64 0, i32 9, i32 1
  store i32 0, i32* %40, align 8
  %41 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  br label %45

42:                                               ; preds = %64
  %43 = load i8, i8* %38, align 8
  %44 = icmp ult i8 %43, 24
  br i1 %44, label %67, label %138

45:                                               ; preds = %64, %24
  %46 = phi i64 [ 0, %24 ], [ %65, %64 ]
  %47 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %10, i64 0, i32 9, i32 0, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = icmp ult i8 %48, 25
  br i1 %49, label %50, label %64

50:                                               ; preds = %45
  %51 = trunc i64 %46 to i32
  %52 = shl i32 1, %51
  %53 = load i32, i32* %40, align 8
  %54 = or i32 %53, %52
  store i32 %54, i32* %40, align 8
  %55 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %10, i64 0, i32 9, i32 2, i64 %46
  %56 = load %struct.AV1LevelInfo*, %struct.AV1LevelInfo** %55, align 8
  %57 = icmp eq %struct.AV1LevelInfo* %56, null
  br i1 %57, label %58, label %64

58:                                               ; preds = %50
  %59 = tail call i8* @aom_calloc(i64 1, i64 59664) #12
  %60 = bitcast %struct.AV1LevelInfo** %55 to i8**
  store i8* %59, i8** %60, align 8
  %61 = icmp eq i8* %59, null
  br i1 %61, label %62, label %64

62:                                               ; preds = %58
  %63 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %41, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %63, i32 2, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0)) #12
  br label %64

64:                                               ; preds = %58, %50, %45, %62
  %65 = add nuw nsw i64 %46, 1
  %66 = icmp eq i64 %65, 32
  br i1 %66, label %42, label %45

67:                                               ; preds = %42
  %68 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %8, i64 0, i32 45, i64 0
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = load %struct.SequenceHeader*, %struct.SequenceHeader** %7, align 16
  %72 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %71, i64 0, i32 24
  %73 = load i8, i8* %72, align 1
  %74 = tail call double @av1_get_max_bitrate_for_level(i8 zeroext %43, i32 %70, i8 signext %73) #12
  %75 = fmul double %74, 0x3FE6666666666666
  %76 = fptosi double %75 to i64
  %77 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 3
  %78 = load i64, i64* %77, align 8
  %79 = icmp slt i64 %78, %76
  %80 = select i1 %79, i64 %78, i64 %76
  store i64 %80, i64* %77, align 8
  %81 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %9, align 16
  %82 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %81, i64 0, i32 12, i32 4
  %83 = load %struct.STATS_BUFFER_CTX*, %struct.STATS_BUFFER_CTX** %82, align 8
  %84 = getelementptr inbounds %struct.STATS_BUFFER_CTX, %struct.STATS_BUFFER_CTX* %83, i64 0, i32 3
  %85 = load %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS** %84, align 8
  %86 = icmp eq %struct.FIRSTPASS_STATS* %85, null
  br i1 %86, label %95, label %87

87:                                               ; preds = %67
  %88 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %85, i64 0, i32 23
  %89 = load double, double* %88, align 8
  %90 = sitofp i64 %80 to double
  %91 = fmul double %89, %90
  %92 = fdiv double %91, 1.000000e+07
  %93 = fptosi double %92 to i64
  %94 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %81, i64 0, i32 12, i32 6
  store i64 %93, i64* %94, align 8
  br label %95

95:                                               ; preds = %87, %67
  %96 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 11
  store i32 0, i32* %96, align 4
  %97 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 12
  store i32 255, i32* %97, align 8
  %98 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %98) #12
  store i32 -1431655766, i32* %4, align 4
  %99 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %99) #12
  store i32 -1431655766, i32* %5, align 4
  call void @av1_get_max_tiles_for_level(i8 zeroext %43, i32* nonnull %4, i32* nonnull %5) #12
  %100 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 11, i32 2
  %101 = load i32, i32* %100, align 4
  %102 = icmp sgt i32 %101, 0
  br i1 %102, label %103, label %112

103:                                              ; preds = %95
  %104 = load i32, i32* %5, align 4
  br label %105

105:                                              ; preds = %109, %103
  %106 = phi i32 [ %101, %103 ], [ %110, %109 ]
  %107 = shl i32 1, %106
  %108 = icmp sgt i32 %107, %104
  br i1 %108, label %109, label %112

109:                                              ; preds = %105
  %110 = add nsw i32 %106, -1
  store i32 %110, i32* %100, align 4
  %111 = icmp sgt i32 %110, 0
  br i1 %111, label %105, label %112

112:                                              ; preds = %109, %105, %95
  %113 = phi i32 [ %101, %95 ], [ %106, %105 ], [ %110, %109 ]
  %114 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 11, i32 3
  %115 = load i32, i32* %114, align 4
  %116 = icmp sgt i32 %115, 0
  br i1 %116, label %117, label %127

117:                                              ; preds = %112
  %118 = load i32, i32* %4, align 4
  br label %119

119:                                              ; preds = %124, %117
  %120 = phi i32 [ %115, %117 ], [ %125, %124 ]
  %121 = shl i32 1, %120
  %122 = shl i32 %121, %113
  %123 = icmp sgt i32 %122, %118
  br i1 %123, label %124, label %127

124:                                              ; preds = %119
  %125 = add nsw i32 %120, -1
  store i32 %125, i32* %114, align 4
  %126 = icmp sgt i32 %125, 0
  br i1 %126, label %119, label %127

127:                                              ; preds = %119, %124, %112
  %128 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %71, i64 0, i32 12
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = call double @av1_get_min_cr_for_level(i8 zeroext %43, i32 %70, i32 %130) #12
  %132 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 8
  %133 = load i32, i32* %132, align 8
  %134 = fmul double %131, 1.000000e+02
  %135 = fptoui double %134 to i32
  %136 = icmp ugt i32 %133, %135
  %137 = select i1 %136, i32 %133, i32 %135
  store i32 %137, i32* %132, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %99) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %98) #12
  br label %138

138:                                              ; preds = %127, %42
  %139 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %140 = load i32, i32* %139, align 4
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %151

142:                                              ; preds = %138
  %143 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %9, align 16
  %144 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %143, i64 0, i32 8
  %145 = load i32, i32* %144, align 8
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %151

147:                                              ; preds = %142
  %148 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 4, i32 15
  %149 = load i32, i32* %148, align 4
  %150 = icmp eq i32 %149, 3
  br i1 %150, label %152, label %151

151:                                              ; preds = %142, %138, %147
  br label %152

152:                                              ; preds = %147, %151
  %153 = phi i32 [ 18, %151 ], [ 16, %147 ]
  %154 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %10, i64 0, i32 13, i32 9
  store i32 %153, i32* %154, align 8
  %155 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 25, i32 0
  store i8 0, i8* %155, align 1
  %156 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 25, i32 1
  store i8 0, i8* %156, align 1
  %157 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 9, i32 7
  %158 = load i8, i8* %157, align 1, !range !2
  %159 = xor i8 %158, 1
  %160 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 16
  store i8 %159, i8* %160, align 4
  %161 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 11, i32 8
  %162 = load i8, i8* %161, align 8, !range !2
  %163 = icmp eq i8 %162, 0
  %164 = select i1 %163, i8 %159, i8 0
  store i8 %164, i8* %160, align 4
  %165 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 10
  %166 = load %struct.PALETTE_BUFFER*, %struct.PALETTE_BUFFER** %165, align 16
  %167 = icmp eq %struct.PALETTE_BUFFER* %166, null
  br i1 %167, label %168, label %174

168:                                              ; preds = %152
  %169 = call i8* @aom_memalign(i64 16, i64 36864) #12
  %170 = bitcast %struct.PALETTE_BUFFER** %165 to i8**
  store i8* %169, i8** %170, align 16
  %171 = icmp eq i8* %169, null
  br i1 %171, label %172, label %174

172:                                              ; preds = %168
  %173 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %41, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %173, i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0)) #12
  br label %174

174:                                              ; preds = %168, %172, %152
  %175 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 11, i32 0
  %176 = load i8*, i8** %175, align 8
  %177 = icmp eq i8* %176, null
  br i1 %177, label %178, label %209

178:                                              ; preds = %174
  %179 = call i8* @aom_memalign(i64 16, i64 32768) #12
  store i8* %179, i8** %175, align 8
  %180 = icmp eq i8* %179, null
  br i1 %180, label %181, label %183

181:                                              ; preds = %178
  %182 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %41, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %182, i32 2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.21, i64 0, i64 0)) #12
  br label %183

183:                                              ; preds = %181, %178
  %184 = call i8* @aom_memalign(i64 16, i64 32768) #12
  %185 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 11, i32 1
  store i8* %184, i8** %185, align 8
  %186 = icmp eq i8* %184, null
  br i1 %186, label %187, label %189

187:                                              ; preds = %183
  %188 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %41, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %188, i32 2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.22, i64 0, i64 0)) #12
  br label %189

189:                                              ; preds = %187, %183
  %190 = call i8* @aom_memalign(i64 32, i64 32768) #12
  %191 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 11, i32 2
  %192 = bitcast i16** %191 to i8**
  store i8* %190, i8** %192, align 8
  %193 = icmp eq i8* %190, null
  br i1 %193, label %194, label %196

194:                                              ; preds = %189
  %195 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %41, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %195, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.23, i64 0, i64 0)) #12
  br label %196

196:                                              ; preds = %194, %189
  %197 = call i8* @aom_memalign(i64 32, i64 32768) #12
  %198 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 11, i32 3
  %199 = bitcast i16** %198 to i8**
  store i8* %197, i8** %199, align 8
  %200 = icmp eq i8* %197, null
  br i1 %200, label %201, label %203

201:                                              ; preds = %196
  %202 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %41, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %202, i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.24, i64 0, i64 0)) #12
  br label %203

203:                                              ; preds = %201, %196
  %204 = call i8* @aom_malloc(i64 32768) #12
  %205 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 11, i32 4
  store i8* %204, i8** %205, align 8
  %206 = icmp eq i8* %204, null
  br i1 %206, label %207, label %209

207:                                              ; preds = %203
  %208 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %41, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %208, i32 2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.25, i64 0, i64 0)) #12
  br label %209

209:                                              ; preds = %207, %203, %174
  %210 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 12
  %211 = load i16*, i16** %210, align 16
  %212 = icmp eq i16* %211, null
  br i1 %212, label %213, label %227

213:                                              ; preds = %209
  %214 = call i8* @aom_memalign(i64 32, i64 32768) #12
  %215 = bitcast i16** %210 to i8**
  store i8* %214, i8** %215, align 16
  %216 = icmp eq i8* %214, null
  br i1 %216, label %219, label %217

217:                                              ; preds = %213
  %218 = ptrtoint i8* %214 to i64
  br label %223

219:                                              ; preds = %213
  %220 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %41, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %220, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0)) #12
  %221 = bitcast i16** %210 to i64*
  %222 = load i64, i64* %221, align 16
  br label %223

223:                                              ; preds = %217, %219
  %224 = phi i64 [ %218, %217 ], [ %222, %219 ]
  %225 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 53
  %226 = bitcast i16** %225 to i64*
  store i64 %224, i64* %226, align 16
  br label %227

227:                                              ; preds = %223, %209
  %228 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 14, i64 0
  %229 = load i8*, i8** %228, align 8
  %230 = icmp eq i8* %229, null
  br i1 %230, label %231, label %244

231:                                              ; preds = %227
  %232 = call i8* @aom_memalign(i64 32, i64 98304) #12
  store i8* %232, i8** %228, align 8
  %233 = icmp eq i8* %232, null
  br i1 %233, label %236, label %234

234:                                              ; preds = %231
  %235 = ptrtoint i8* %232 to i64
  br label %240

236:                                              ; preds = %231
  %237 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %41, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %237, i32 2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0)) #12
  %238 = bitcast i8** %228 to i64*
  %239 = load i64, i64* %238, align 8
  br label %240

240:                                              ; preds = %234, %236
  %241 = phi i64 [ %235, %234 ], [ %239, %236 ]
  %242 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 54, i64 0
  %243 = bitcast i8** %242 to i64*
  store i64 %241, i64* %243, align 8
  br label %244

244:                                              ; preds = %227, %240
  %245 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 14, i64 1
  %246 = load i8*, i8** %245, align 8
  %247 = icmp eq i8* %246, null
  br i1 %247, label %436, label %449

248:                                              ; preds = %449
  %249 = load %struct.SequenceHeader*, %struct.SequenceHeader** %7, align 16
  %250 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %249, i64 0, i32 27
  %251 = load i8, i8* %250, align 1
  %252 = zext i8 %251 to i32
  %253 = lshr i32 2, %252
  %254 = sext i32 %253 to i64
  %255 = shl nsw i64 %254, 16
  %256 = call i8* @aom_malloc(i64 %255) #12
  %257 = bitcast %struct.PixelLevelGradientInfo** %450 to i8**
  store i8* %256, i8** %257, align 8
  %258 = icmp eq i8* %256, null
  br i1 %258, label %259, label %261

259:                                              ; preds = %248
  %260 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %41, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %260, i32 2, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #12
  br label %261

261:                                              ; preds = %259, %248, %449
  call void @av1_reset_segment_features(%struct.AV1Common* %6) #12
  %262 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 21
  %263 = load %struct.MvCosts*, %struct.MvCosts** %262, align 16
  %264 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 1
  store i8 1, i8* %264, align 1
  %265 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %263, i64 0, i32 1, i64 0, i64 16383
  %266 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %263, i64 0, i32 3, i64 0
  store i32* %265, i32** %266, align 8
  %267 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %263, i64 0, i32 1, i64 1, i64 16383
  %268 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %263, i64 0, i32 3, i64 1
  store i32* %267, i32** %268, align 8
  %269 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %263, i64 0, i32 2, i64 0, i64 16383
  %270 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %263, i64 0, i32 4, i64 0
  store i32* %269, i32** %270, align 8
  %271 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %263, i64 0, i32 2, i64 1, i64 16383
  %272 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %263, i64 0, i32 4, i64 1
  store i32* %271, i32** %272, align 8
  %273 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %263, i64 0, i32 5
  store i32** %270, i32*** %273, align 8
  %274 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %9, align 16
  %275 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 3
  %276 = load i64, i64* %275, align 8
  %277 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 0
  %278 = load i64, i64* %277, align 8
  %279 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 1
  %280 = load i64, i64* %279, align 8
  %281 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 2
  %282 = load i64, i64* %281, align 8
  %283 = mul nsw i64 %278, %276
  %284 = sdiv i64 %283, 1000
  %285 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %274, i64 0, i32 13, i32 13
  store i64 %284, i64* %285, align 8
  %286 = icmp eq i64 %280, 0
  br i1 %286, label %287, label %289

287:                                              ; preds = %261
  %288 = sdiv i64 %276, 8
  br label %292

289:                                              ; preds = %261
  %290 = mul nsw i64 %280, %276
  %291 = sdiv i64 %290, 1000
  br label %292

292:                                              ; preds = %289, %287
  %293 = phi i64 [ %288, %287 ], [ %291, %289 ]
  %294 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %274, i64 0, i32 13, i32 14
  store i64 %293, i64* %294, align 8
  %295 = icmp eq i64 %282, 0
  br i1 %295, label %296, label %298

296:                                              ; preds = %292
  %297 = sdiv i64 %276, 8
  br label %301

298:                                              ; preds = %292
  %299 = mul nsw i64 %282, %276
  %300 = sdiv i64 %299, 1000
  br label %301

301:                                              ; preds = %296, %298
  %302 = phi i64 [ %297, %296 ], [ %300, %298 ]
  %303 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %274, i64 0, i32 13, i32 15
  store i64 %302, i64* %303, align 8
  %304 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 32
  %305 = load i64, i64* %304, align 8
  %306 = icmp slt i64 %305, %302
  %307 = select i1 %306, i64 %305, i64 %302
  store i64 %307, i64* %304, align 8
  %308 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 31
  %309 = load i64, i64* %308, align 8
  %310 = load i64, i64* %303, align 8
  %311 = icmp slt i64 %309, %310
  %312 = select i1 %311, i64 %309, i64 %310
  store i64 %312, i64* %308, align 8
  %313 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %10, i64 0, i32 13, i32 15
  %314 = load i64, i64* %313, align 8
  %315 = icmp slt i64 %307, %314
  %316 = select i1 %315, i64 %307, i64 %314
  store i64 %316, i64* %304, align 8
  %317 = load i64, i64* %313, align 8
  %318 = icmp slt i64 %312, %317
  %319 = select i1 %318, i64 %312, i64 %317
  store i64 %319, i64* %308, align 8
  %320 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 37
  %321 = load double, double* %320, align 16
  %322 = fcmp olt double %321, 1.000000e-01
  %323 = select i1 %322, double 3.000000e+01, double %321
  store double %323, double* %320, align 16
  %324 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %325 = load i32, i32* %324, align 16
  %326 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %327 = load i32, i32* %326, align 4
  call void @av1_rc_update_framerate(%struct.AV1_COMP* %0, i32 %325, i32 %327) #12
  %328 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 4, i32 12
  %329 = load i32, i32* %328, align 8
  %330 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 42
  store i32 %329, i32* %330, align 8
  %331 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 4, i32 13
  %332 = load i32, i32* %331, align 4
  %333 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 43
  store i32 %332, i32* %333, align 4
  %334 = load i8, i8* %161, align 8, !range !2
  %335 = icmp eq i8 %334, 0
  %336 = select i1 %335, i8 4, i8 0
  %337 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 13
  store i8 %336, i8* %337, align 1
  %338 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 11
  store i8 1, i8* %338, align 1
  %339 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1, i32 4
  %340 = load i32, i32* %339, align 4
  %341 = icmp sgt i32 %340, 0
  br i1 %341, label %342, label %353

342:                                              ; preds = %301
  %343 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1, i32 5
  %344 = load i32, i32* %343, align 4
  %345 = icmp sgt i32 %344, 0
  br i1 %345, label %346, label %353

346:                                              ; preds = %342
  %347 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 4
  store i32 %340, i32* %347, align 8
  %348 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 5
  store i32 %344, i32* %348, align 4
  %349 = getelementptr inbounds %struct.FrameDimensionCfg, %struct.FrameDimensionCfg* %13, i64 0, i32 0
  %350 = load i32, i32* %349, align 4
  %351 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1, i32 1
  %352 = load i32, i32* %351, align 4
  br label %360

353:                                              ; preds = %342, %301
  %354 = getelementptr inbounds %struct.FrameDimensionCfg, %struct.FrameDimensionCfg* %13, i64 0, i32 0
  %355 = load i32, i32* %354, align 4
  %356 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 4
  store i32 %355, i32* %356, align 8
  %357 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1, i32 1
  %358 = load i32, i32* %357, align 4
  %359 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 5
  store i32 %358, i32* %359, align 4
  br label %360

360:                                              ; preds = %353, %346
  %361 = phi i32 [ %358, %353 ], [ %352, %346 ]
  %362 = phi i32 [ %355, %353 ], [ %350, %346 ]
  store i32 %362, i32* %324, align 16
  store i32 %361, i32* %326, align 4
  %363 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 52, i32 0
  %364 = load i32, i32* %363, align 4
  %365 = icmp ne i32 %364, 0
  %366 = or i1 %365, %2
  br i1 %366, label %367, label %384

367:                                              ; preds = %360
  %368 = icmp sgt i32 %362, %364
  br i1 %368, label %374, label %369

369:                                              ; preds = %367
  %370 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 52, i32 1
  %371 = load i32, i32* %370, align 4
  %372 = icmp sgt i32 %361, %371
  %373 = or i1 %372, %2
  br i1 %373, label %374, label %384

374:                                              ; preds = %369, %367
  call void @av1_free_context_buffers(%struct.AV1Common* %6) #12
  %375 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 3
  call void @av1_free_shared_coeff_buffer(%struct.PC_TREE_SHARED_BUFFERS* %375) #12
  call void @av1_free_sms_tree(%struct.ThreadData* %11) #12
  %376 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 21
  %377 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %376, align 16
  %378 = load %struct.SequenceHeader*, %struct.SequenceHeader** %7, align 16
  %379 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %378, i64 0, i32 27
  %380 = load i8, i8* %379, align 1
  %381 = icmp eq i8 %380, 0
  %382 = select i1 %381, i32 3, i32 1
  call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %377, i32 %382) #12
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %376, align 16
  call fastcc void @alloc_compressor_data(%struct.AV1_COMP* %0)
  call fastcc void @realloc_segmentation_maps(%struct.AV1_COMP* %0)
  %383 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 52, i32 1
  store i32 0, i32* %383, align 4
  store i32 0, i32* %363, align 4
  br label %384

384:                                              ; preds = %369, %360, %374
  call void @av1_update_frame_size(%struct.AV1_COMP* %0)
  %385 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 16
  store i32 0, i32* %385, align 8
  %386 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 11
  call fastcc void @set_tile_info(%struct.AV1Common* %6, %struct.TileConfig* %386)
  %387 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 4
  %388 = load i32, i32* %387, align 16
  %389 = icmp eq i32 %388, 0
  br i1 %389, label %390, label %392

390:                                              ; preds = %384
  %391 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 5
  store i8 0, i8* %391, align 1
  br label %392

392:                                              ; preds = %384, %390
  %393 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 3
  store i8 0, i8* %393, align 1
  %394 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %9, align 16
  %395 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %394, i64 0, i32 16
  %396 = load i32, i32* %395, align 8
  %397 = icmp eq i32 %396, 0
  br i1 %397, label %402, label %398

398:                                              ; preds = %392
  %399 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 4, i32 3
  %400 = load i64, i64* %399, align 8
  call void @av1_update_layer_context_change_config(%struct.AV1_COMP* %0, i64 %400) #12
  %401 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %9, align 16
  br label %402

402:                                              ; preds = %392, %398
  %403 = phi %struct.AV1_PRIMARY* [ %394, %392 ], [ %401, %398 ]
  %404 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 4
  %405 = load i32, i32* %404, align 4
  %406 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %407 = load i32, i32* %406, align 8
  %408 = icmp ugt i32 %405, %407
  br i1 %408, label %409, label %431

409:                                              ; preds = %402
  %410 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %403, i64 0, i32 16
  %411 = load i32, i32* %410, align 8
  %412 = icmp eq i32 %411, 0
  br i1 %412, label %414, label %413

413:                                              ; preds = %409
  call void @av1_svc_check_reset_layer_rc_flag(%struct.AV1_COMP* %0) #12
  br label %431

414:                                              ; preds = %409
  %415 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 21
  %416 = load i32, i32* %415, align 8
  %417 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 24
  %418 = load i32, i32* %417, align 4
  %419 = mul nsw i32 %418, 3
  %420 = ashr i32 %419, 1
  %421 = icmp sgt i32 %416, %420
  %422 = ashr i32 %418, 1
  %423 = icmp slt i32 %416, %422
  %424 = or i1 %423, %421
  br i1 %424, label %425, label %431

425:                                              ; preds = %414
  %426 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 44
  store i32 0, i32* %426, align 8
  %427 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 45
  store i32 0, i32* %427, align 4
  %428 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %403, i64 0, i32 13, i32 14
  %429 = load i64, i64* %428, align 8
  store i64 %429, i64* %304, align 8
  %430 = load i64, i64* %428, align 8
  store i64 %430, i64* %308, align 8
  br label %431

431:                                              ; preds = %402, %413, %414, %425
  %432 = icmp eq i32 %25, -1
  br i1 %432, label %435, label %433

433:                                              ; preds = %431
  %434 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 10, i32 0
  store i32 %25, i32* %434, align 16
  br label %435

435:                                              ; preds = %431, %433
  ret void

436:                                              ; preds = %244
  %437 = call i8* @aom_memalign(i64 32, i64 98304) #12
  store i8* %437, i8** %245, align 8
  %438 = icmp eq i8* %437, null
  br i1 %438, label %441, label %439

439:                                              ; preds = %436
  %440 = ptrtoint i8* %437 to i64
  br label %445

441:                                              ; preds = %436
  %442 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %41, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %442, i32 2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0)) #12
  %443 = bitcast i8** %245 to i64*
  %444 = load i64, i64* %443, align 8
  br label %445

445:                                              ; preds = %439, %441
  %446 = phi i64 [ %444, %441 ], [ %440, %439 ]
  %447 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 54, i64 1
  %448 = bitcast i8** %447 to i64*
  store i64 %446, i64* %448, align 8
  br label %449

449:                                              ; preds = %445, %244
  %450 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 53
  %451 = load %struct.PixelLevelGradientInfo*, %struct.PixelLevelGradientInfo** %450, align 8
  %452 = icmp eq %struct.PixelLevelGradientInfo* %451, null
  br i1 %452, label %248, label %261
}

declare void @av1_update_film_grain_parameters(%struct.AV1_COMP*, %struct.AV1EncoderConfig*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i8* @aom_calloc(i64, i64) local_unnamed_addr #3

declare i8* @aom_memalign(i64, i64) local_unnamed_addr #3

declare i8* @aom_malloc(i64) local_unnamed_addr #3

declare void @av1_reset_segment_features(%struct.AV1Common*) local_unnamed_addr #3

declare void @av1_free_context_buffers(%struct.AV1Common*) local_unnamed_addr #3

declare void @av1_free_shared_coeff_buffer(%struct.PC_TREE_SHARED_BUFFERS*) local_unnamed_addr #3

declare void @av1_free_sms_tree(%struct.ThreadData*) local_unnamed_addr #3

declare void @av1_free_pmc(%struct.PICK_MODE_CONTEXT*, i32) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @alloc_compressor_data(%struct.AV1_COMP*) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 57
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %5 = load i32, i32* %4, align 16
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = tail call i32 @av1_alloc_context_buffers(%struct.AV1Common* %2, i32 %5, i32 %7) #12
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %12 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %11, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %12, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0)) #12
  br label %13

13:                                               ; preds = %1, %10
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %59, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %19 = load i8, i8* %18, align 8
  %20 = icmp eq i8 %19, 1
  br i1 %20, label %59, label %21

21:                                               ; preds = %17
  tail call void @av1_alloc_txb_buf(%struct.AV1_COMP* %0) #12
  %22 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 8
  %24 = load i8, i8* %23, align 8
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = add nsw i32 %28, -1
  %32 = add i32 %31, %30
  %33 = sdiv i32 %32, %28
  %34 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %35 = load i32, i32* %34, align 8
  %36 = add i32 %35, %31
  %37 = sdiv i32 %36, %28
  %38 = mul nsw i32 %37, %33
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 1
  %40 = load i32, i32* %39, align 8
  %41 = icmp sgt i32 %38, %40
  br i1 %41, label %42, label %57

42:                                               ; preds = %21
  %43 = getelementptr inbounds %struct.MBMIExtFrameBufferInfo, %struct.MBMIExtFrameBufferInfo* %22, i64 0, i32 0
  %44 = load %struct.MB_MODE_INFO_EXT_FRAME*, %struct.MB_MODE_INFO_EXT_FRAME** %43, align 8
  %45 = icmp eq %struct.MB_MODE_INFO_EXT_FRAME* %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %42
  %47 = bitcast %struct.MB_MODE_INFO_EXT_FRAME* %44 to i8*
  tail call void @aom_free(i8* nonnull %47) #12
  store %struct.MB_MODE_INFO_EXT_FRAME* null, %struct.MB_MODE_INFO_EXT_FRAME** %43, align 8
  store i32 0, i32* %39, align 8
  br label %48

48:                                               ; preds = %46, %42
  %49 = sext i32 %38 to i64
  %50 = tail call i8* @aom_calloc(i64 %49, i64 84) #12
  %51 = bitcast %struct.MBMIExtFrameBufferInfo* %22 to i8**
  store i8* %50, i8** %51, align 8
  %52 = icmp eq i8* %50, null
  br i1 %52, label %53, label %56

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %55 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %54, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %55, i32 2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.19, i64 0, i64 0)) #12
  br label %56

56:                                               ; preds = %53, %48
  store i32 %38, i32* %39, align 8
  br label %57

57:                                               ; preds = %21, %56
  %58 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 2
  store i32 %37, i32* %58, align 4
  br label %59

59:                                               ; preds = %17, %13, %57
  %60 = getelementptr inbounds %struct.TokenInfo, %struct.TokenInfo* %3, i64 0, i32 0, i64 0, i64 0
  %61 = bitcast %struct.TokenInfo* %3 to i8**
  %62 = load i8*, i8** %61, align 8
  tail call void @aom_free(i8* %62) #12
  store %struct.TokenExtra* null, %struct.TokenExtra** %60, align 8
  %63 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 57, i32 1, i64 0, i64 0
  %64 = bitcast %struct.TokenList** %63 to i8**
  %65 = load i8*, i8** %64, align 8
  tail call void @aom_free(i8* %65) #12
  store %struct.TokenList* null, %struct.TokenList** %63, align 8
  %66 = load i32, i32* %14, align 4
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %112, label %68

68:                                               ; preds = %59
  %69 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %70 = load i8, i8* %69, align 8
  %71 = icmp eq i8 %70, 1
  br i1 %71, label %112, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %76 = load %struct.SequenceHeader*, %struct.SequenceHeader** %75, align 16
  %77 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %76, i64 0, i32 9
  %78 = load i32, i32* %77, align 4
  %79 = shl nsw i32 -1, %78
  %80 = xor i32 %79, -1
  %81 = add nsw i32 %74, %80
  %82 = and i32 %81, %79
  %83 = ashr i32 %82, %78
  %84 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %76, i64 0, i32 27
  %85 = load i8, i8* %84, align 1
  %86 = icmp eq i8 %85, 0
  %87 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 0
  %88 = load i32, i32* %87, align 16
  %89 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 1
  %90 = load i32, i32* %89, align 4
  %91 = add nsw i32 %88, 7
  %92 = lshr i32 %91, 3
  %93 = add nsw i32 %90, 7
  %94 = ashr i32 %93, 3
  %95 = select i1 %86, i32 32768, i32 16384
  %96 = mul i32 %92, %95
  %97 = mul i32 %96, %94
  %98 = zext i32 %97 to i64
  %99 = tail call i8* @aom_calloc(i64 %98, i64 1) #12
  store i8* %99, i8** %61, align 8
  %100 = icmp eq i8* %99, null
  br i1 %100, label %101, label %104

101:                                              ; preds = %72
  %102 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %103 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %102, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %103, i32 2, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.28, i64 0, i64 0)) #12
  br label %104

104:                                              ; preds = %101, %72
  %105 = shl nsw i32 %83, 12
  %106 = sext i32 %105 to i64
  %107 = tail call i8* @aom_calloc(i64 %106, i64 16) #12
  store i8* %107, i8** %64, align 8
  %108 = icmp eq i8* %107, null
  br i1 %108, label %109, label %112

109:                                              ; preds = %104
  %110 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %111 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %110, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %111, i32 2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.29, i64 0, i64 0)) #12
  br label %112

112:                                              ; preds = %68, %59, %109, %104
  %113 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3
  %114 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 21
  %115 = load %struct.MvCosts*, %struct.MvCosts** %114, align 16
  %116 = icmp eq %struct.MvCosts* %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %112
  %118 = bitcast %struct.MvCosts* %115 to i8*
  tail call void @aom_free(i8* nonnull %118) #12
  store %struct.MvCosts* null, %struct.MvCosts** %114, align 16
  br label %119

119:                                              ; preds = %112, %117
  %120 = tail call i8* @aom_calloc(i64 1, i64 524328) #12
  %121 = bitcast %struct.MvCosts** %114 to i8**
  store i8* %120, i8** %121, align 16
  %122 = icmp eq i8* %120, null
  br i1 %122, label %123, label %126

123:                                              ; preds = %119
  %124 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %125 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %124, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %125, i32 2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.26, i64 0, i64 0)) #12
  br label %126

126:                                              ; preds = %119, %123
  %127 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 22
  %128 = load %struct.IntraBCMVCosts*, %struct.IntraBCMVCosts** %127, align 8
  %129 = icmp eq %struct.IntraBCMVCosts* %128, null
  br i1 %129, label %132, label %130

130:                                              ; preds = %126
  %131 = bitcast %struct.IntraBCMVCosts* %128 to i8*
  tail call void @aom_free(i8* nonnull %131) #12
  store %struct.IntraBCMVCosts* null, %struct.IntraBCMVCosts** %127, align 8
  br label %132

132:                                              ; preds = %126, %130
  %133 = tail call i8* @aom_malloc(i64 262168) #12
  %134 = bitcast %struct.IntraBCMVCosts** %127 to i8**
  store i8* %133, i8** %134, align 8
  %135 = icmp eq i8* %133, null
  br i1 %135, label %136, label %139

136:                                              ; preds = %132
  %137 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %138 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %137, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %138, i32 2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.27, i64 0, i64 0)) #12
  br label %139

139:                                              ; preds = %132, %136
  %140 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 3
  tail call void @av1_setup_shared_coeff_buffer(%struct.AV1Common* %2, %struct.PC_TREE_SHARED_BUFFERS* %140) #12
  tail call void @av1_setup_sms_tree(%struct.AV1_COMP* %0, %struct.ThreadData* %113) #12
  %141 = tail call %struct.PICK_MODE_CONTEXT* @av1_alloc_pmc(%struct.AV1_COMP* %0, i8 zeroext 6, %struct.PC_TREE_SHARED_BUFFERS* %140) #12
  %142 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 21
  store %struct.PICK_MODE_CONTEXT* %141, %struct.PICK_MODE_CONTEXT** %142, align 16
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @realloc_segmentation_maps(%struct.AV1_COMP* nocapture) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 43, i32 0
  %3 = load i8*, i8** %2, align 8
  tail call void @aom_free(i8* %3) #12
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = mul nsw i32 %7, %5
  %9 = sext i32 %8 to i64
  %10 = tail call i8* @aom_calloc(i64 %9, i64 1) #12
  store i8* %10, i8** %2, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %12, label %15

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %14 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %13, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %14, i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i64 0, i64 0)) #12
  br label %15

15:                                               ; preds = %1, %12
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 44
  %17 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %16, align 8
  %18 = icmp eq %struct.CYCLIC_REFRESH* %17, null
  br i1 %18, label %20, label %19

19:                                               ; preds = %15
  tail call void @av1_cyclic_refresh_free(%struct.CYCLIC_REFRESH* nonnull %17) #12
  br label %20

20:                                               ; preds = %15, %19
  %21 = load i32, i32* %4, align 4
  %22 = load i32, i32* %6, align 8
  %23 = tail call %struct.CYCLIC_REFRESH* @av1_cyclic_refresh_alloc(i32 %21, i32 %22) #12
  store %struct.CYCLIC_REFRESH* %23, %struct.CYCLIC_REFRESH** %16, align 8
  %24 = icmp eq %struct.CYCLIC_REFRESH* %23, null
  br i1 %24, label %25, label %28

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %27 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %26, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %27, i32 2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.31, i64 0, i64 0)) #12
  br label %28

28:                                               ; preds = %20, %25
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 45, i32 2
  %30 = load i8*, i8** %29, align 8
  tail call void @aom_free(i8* %30) #12
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %6, align 8
  %33 = mul nsw i32 %32, %31
  %34 = sext i32 %33 to i64
  %35 = tail call i8* @aom_calloc(i64 %34, i64 1) #12
  store i8* %35, i8** %29, align 8
  %36 = icmp eq i8* %35, null
  br i1 %36, label %37, label %40

37:                                               ; preds = %28
  %38 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %39 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %38, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %39, i32 2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.32, i64 0, i64 0)) #12
  br label %40

40:                                               ; preds = %28, %37
  ret void
}

declare void @av1_update_layer_context_change_config(%struct.AV1_COMP*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %struct.AV1_PRIMARY* @av1_create_primary_compressor(%struct.aom_codec_pkt_list*, i32, %struct.AV1EncoderConfig*) local_unnamed_addr #2 {
  %4 = alloca %struct.AV1_PRIMARY*, align 8
  %5 = bitcast %struct.AV1_PRIMARY** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5)
  store volatile %struct.AV1_PRIMARY* inttoptr (i64 -6148914691236517206 to %struct.AV1_PRIMARY*), %struct.AV1_PRIMARY** %4, align 8
  %6 = call i8* @aom_memalign(i64 32, i64 358704) #12
  %7 = bitcast i8* %6 to %struct.AV1_PRIMARY*
  store volatile %struct.AV1_PRIMARY* %7, %struct.AV1_PRIMARY** %4, align 8
  %8 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %9 = icmp eq %struct.AV1_PRIMARY* %8, null
  br i1 %9, label %877, label %10

10:                                               ; preds = %3
  %11 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %12 = bitcast %struct.AV1_PRIMARY* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 358704, i1 false)
  %13 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %14 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %13, i64 0, i32 20, i32 4, i64 0
  %15 = call i32 @_setjmp(%struct.__jmp_buf_tag* %14) #13
  %16 = icmp eq i32 %15, 0
  %17 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %18 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %17, i64 0, i32 20, i32 3
  br i1 %16, label %21, label %19

19:                                               ; preds = %10
  store i32 0, i32* %18, align 8
  %20 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  call void @av1_remove_primary_compressor(%struct.AV1_PRIMARY* %20)
  br label %877

21:                                               ; preds = %10
  store i32 1, i32* %18, align 8
  %22 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %23 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %22, i64 0, i32 3
  store i32 0, i32* %23, align 8
  %24 = icmp sgt i32 %1, 0
  %25 = zext i1 %24 to i32
  %26 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %27 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %26, i64 0, i32 8
  store i32 %25, i32* %27, align 8
  %28 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %29 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %28, i64 0, i32 4
  store %struct.aom_codec_pkt_list* %0, %struct.aom_codec_pkt_list** %29, align 8
  %30 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %31 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %30, i64 0, i32 10
  store i32 0, i32* %31, align 8
  %32 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 0, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %35 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %34, i64 0, i32 11
  store i32 %33, i32* %35, align 4
  %36 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %37 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 16
  store i32 0, i32* %37, align 8
  %38 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 19
  store i32 1, i32* %38, align 4
  %39 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 18
  store i32 1, i32* %39, align 8
  %40 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 32
  %41 = load i8, i8* %40, align 8
  %42 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 24
  store i8 %41, i8* %42, align 1
  %43 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 9, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 25
  store i32 %44, i32* %45, align 8
  %46 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 36
  %47 = load i8, i8* %46, align 2, !range !2
  %48 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 26
  store i8 %47, i8* %48, align 4
  %49 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 13, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 28
  store i32 %50, i32* %51, align 8
  %52 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 13, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 29
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 13, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 30
  store i32 %56, i32* %57, align 8
  %58 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 9, i32 8
  %59 = load i8, i8* %58, align 2, !range !2
  %60 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 27
  store i8 %59, i8* %60, align 1
  %61 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 13, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 34
  store i32 %62, i32* %63, align 8
  %64 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 13, i32 4
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 31
  store i32 %65, i32* %66, align 4
  %67 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 14, i32 4
  %68 = load i8, i8* %67, align 2, !range !2
  %69 = zext i8 %68 to i32
  %70 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 39
  store i32 %69, i32* %70, align 4
  %71 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 14, i32 0, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 40, i32 0
  store i32 %72, i32* %73, align 8
  %74 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 14, i32 0, i32 1
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 40, i32 1
  store i32 %75, i32* %76, align 4
  %77 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 14, i32 0, i32 2
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 40, i32 2
  store i32 %78, i32* %79, align 8
  %80 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 14, i32 0, i32 3
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 40, i32 3
  store i32 %81, i32* %82, align 4
  %83 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 14, i32 3
  %84 = load i8, i8* %83, align 1, !range !2
  %85 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 43
  store i8 %84, i8* %85, align 4
  %86 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 14, i32 2
  %87 = load i8, i8* %86, align 4, !range !2
  %88 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 41
  store i8 %87, i8* %88, align 8
  %89 = load i8, i8* %86, align 4, !range !2
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %98, label %91

91:                                               ; preds = %21
  %92 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 14, i32 1
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 42
  %95 = getelementptr inbounds %struct.aom_dec_model_info, %struct.aom_dec_model_info* %94, i64 0, i32 0
  store i32 %93, i32* %95, align 4
  %96 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 17
  store i8 1, i8* %96, align 4
  call void @av1_set_aom_dec_model_info(%struct.aom_dec_model_info* %94) #12
  %97 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 46, i64 0
  call void @av1_set_dec_model_op_parameters(%struct.aom_dec_model_op_parameters* %97) #12
  br label %108

98:                                               ; preds = %21
  %99 = icmp ne i8 %87, 0
  %100 = icmp eq i8 %68, 0
  %101 = icmp eq i32 %78, 0
  %102 = or i1 %101, %99
  %103 = or i1 %100, %102
  br i1 %103, label %106, label %104

104:                                              ; preds = %98
  %105 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 46, i64 0
  call void @av1_set_resource_availability_parameters(%struct.aom_dec_model_op_parameters* %105) #12
  br label %108

106:                                              ; preds = %98
  %107 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 46, i64 0, i32 7
  store i32 10, i32* %107, align 8
  br label %108

108:                                              ; preds = %106, %104, %91
  %109 = load i8, i8* %60, align 1
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %113, label %111

111:                                              ; preds = %108
  %112 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 32
  store i32 1, i32* %112, align 8
  br label %141

113:                                              ; preds = %108
  %114 = load i32, i32* %51, align 8
  %115 = icmp eq i32 %114, 1
  br i1 %115, label %116, label %124

116:                                              ; preds = %113
  %117 = load i32, i32* %54, align 4
  %118 = icmp eq i32 %117, 13
  br i1 %118, label %119, label %124

119:                                              ; preds = %116
  %120 = load i32, i32* %57, align 8
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %124

122:                                              ; preds = %119
  %123 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 32
  store i32 0, i32* %123, align 8
  br label %141

124:                                              ; preds = %119, %116, %113
  %125 = load i8, i8* %42, align 1
  switch i8 %125, label %130 [
    i8 0, label %126
    i8 1, label %128
  ]

126:                                              ; preds = %124
  %127 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 32
  store i32 1, i32* %127, align 8
  br label %141

128:                                              ; preds = %124
  %129 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 32
  store i32 0, i32* %129, align 8
  br label %141

130:                                              ; preds = %124
  %131 = load i32, i32* %45, align 8
  %132 = icmp eq i32 %131, 12
  br i1 %132, label %133, label %139

133:                                              ; preds = %130
  %134 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 0, i32 3
  %135 = load i32, i32* %134, align 8
  %136 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 32
  store i32 %135, i32* %136, align 8
  %137 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 0, i32 4
  %138 = load i32, i32* %137, align 4
  br label %141

139:                                              ; preds = %130
  %140 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 32
  store i32 1, i32* %140, align 8
  br label %141

141:                                              ; preds = %111, %122, %126, %128, %133, %139
  %142 = phi i32 [ 1, %111 ], [ 0, %122 ], [ 1, %126 ], [ 0, %128 ], [ %138, %133 ], [ 0, %139 ]
  %143 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %36, i64 0, i32 15, i32 33
  store i32 %142, i32* %143, align 4
  call void @av1_change_config_seq(%struct.AV1_PRIMARY* %36, %struct.AV1EncoderConfig* %2, i8* null) #12
  %144 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %145 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %144, i64 0, i32 13
  call void @av1_primary_rc_init(%struct.AV1EncoderConfig* %2, %struct.PRIMARY_RATE_CONTROL* %145) #12
  %146 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %147 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %146, i64 0, i32 13, i32 23
  store i32 2, i32* %147, align 4
  %148 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %149 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %148, i64 0, i32 8
  %150 = load i32, i32* %149, align 8
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %163, label %152

152:                                              ; preds = %141
  %153 = add i32 %1, -19
  %154 = icmp ult i32 %153, 14
  br i1 %154, label %155, label %158

155:                                              ; preds = %152
  %156 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %157 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %156, i64 0, i32 13, i32 23
  store i32 1, i32* %157, align 4
  br label %163

158:                                              ; preds = %152
  %159 = icmp slt i32 %1, 19
  br i1 %159, label %160, label %163

160:                                              ; preds = %158
  %161 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %162 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %161, i64 0, i32 13, i32 23
  store i32 0, i32* %162, align 4
  br label %163

163:                                              ; preds = %141, %155, %160, %158
  %164 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad128x128 to i64*), align 8
  %165 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %166 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %165, i64 0, i32 21, i64 15
  %167 = bitcast %struct.aom_variance_vtable* %166 to i64*
  store i64 %164, i64* %167, align 8
  %168 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*)** @aom_sad128x128_avg to i64*), align 8
  %169 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %170 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %169, i64 0, i32 21, i64 15, i32 2
  %171 = bitcast i32 (i8*, i32, i8*, i32, i8*)** %170 to i64*
  store i64 %168, i64* %171, align 8
  %172 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i32*)** @aom_variance128x128 to i64*), align 8
  %173 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %174 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %173, i64 0, i32 21, i64 15, i32 3
  %175 = bitcast i32 (i8*, i32, i8*, i32, i32*)** %174 to i64*
  store i64 %172, i64* %175, align 8
  %176 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance128x128 to i64*), align 8
  %177 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %178 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %177, i64 0, i32 21, i64 15, i32 4
  %179 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %178 to i64*
  store i64 %176, i64* %179, align 8
  %180 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance128x128 to i64*), align 8
  %181 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %182 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %181, i64 0, i32 21, i64 15, i32 5
  %183 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %182 to i64*
  store i64 %180, i64* %183, align 8
  %184 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad128x128x4d to i64*), align 8
  %185 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %186 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %185, i64 0, i32 21, i64 15, i32 6
  %187 = bitcast void (i8*, i32, i8**, i32, i32*)** %186 to i64*
  store i64 %184, i64* %187, align 8
  %188 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad128x128_avg to i64*), align 8
  %189 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %190 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %189, i64 0, i32 21, i64 15, i32 13
  %191 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %190 to i64*
  store i64 %188, i64* %191, align 8
  %192 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance128x128 to i64*), align 8
  %193 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %194 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %193, i64 0, i32 21, i64 15, i32 14
  %195 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %194 to i64*
  store i64 %192, i64* %195, align 8
  %196 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad128x64 to i64*), align 8
  %197 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %198 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %197, i64 0, i32 21, i64 14
  %199 = bitcast %struct.aom_variance_vtable* %198 to i64*
  store i64 %196, i64* %199, align 8
  %200 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*)** @aom_sad128x64_avg to i64*), align 8
  %201 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %202 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %201, i64 0, i32 21, i64 14, i32 2
  %203 = bitcast i32 (i8*, i32, i8*, i32, i8*)** %202 to i64*
  store i64 %200, i64* %203, align 8
  %204 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i32*)** @aom_variance128x64 to i64*), align 8
  %205 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %206 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %205, i64 0, i32 21, i64 14, i32 3
  %207 = bitcast i32 (i8*, i32, i8*, i32, i32*)** %206 to i64*
  store i64 %204, i64* %207, align 8
  %208 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance128x64 to i64*), align 8
  %209 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %210 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %209, i64 0, i32 21, i64 14, i32 4
  %211 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %210 to i64*
  store i64 %208, i64* %211, align 8
  %212 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance128x64 to i64*), align 8
  %213 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %214 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %213, i64 0, i32 21, i64 14, i32 5
  %215 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %214 to i64*
  store i64 %212, i64* %215, align 8
  %216 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad128x64x4d to i64*), align 8
  %217 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %218 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %217, i64 0, i32 21, i64 14, i32 6
  %219 = bitcast void (i8*, i32, i8**, i32, i32*)** %218 to i64*
  store i64 %216, i64* %219, align 8
  %220 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad128x64_avg to i64*), align 8
  %221 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %222 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %221, i64 0, i32 21, i64 14, i32 13
  %223 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %222 to i64*
  store i64 %220, i64* %223, align 8
  %224 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance128x64 to i64*), align 8
  %225 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %226 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %225, i64 0, i32 21, i64 14, i32 14
  %227 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %226 to i64*
  store i64 %224, i64* %227, align 8
  %228 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad64x128 to i64*), align 8
  %229 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %230 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %229, i64 0, i32 21, i64 13
  %231 = bitcast %struct.aom_variance_vtable* %230 to i64*
  store i64 %228, i64* %231, align 8
  %232 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*)** @aom_sad64x128_avg to i64*), align 8
  %233 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %234 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %233, i64 0, i32 21, i64 13, i32 2
  %235 = bitcast i32 (i8*, i32, i8*, i32, i8*)** %234 to i64*
  store i64 %232, i64* %235, align 8
  %236 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i32*)** @aom_variance64x128 to i64*), align 8
  %237 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %238 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %237, i64 0, i32 21, i64 13, i32 3
  %239 = bitcast i32 (i8*, i32, i8*, i32, i32*)** %238 to i64*
  store i64 %236, i64* %239, align 8
  %240 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance64x128 to i64*), align 8
  %241 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %242 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %241, i64 0, i32 21, i64 13, i32 4
  %243 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %242 to i64*
  store i64 %240, i64* %243, align 8
  %244 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance64x128 to i64*), align 8
  %245 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %246 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %245, i64 0, i32 21, i64 13, i32 5
  %247 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %246 to i64*
  store i64 %244, i64* %247, align 8
  %248 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad64x128x4d to i64*), align 8
  %249 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %250 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %249, i64 0, i32 21, i64 13, i32 6
  %251 = bitcast void (i8*, i32, i8**, i32, i32*)** %250 to i64*
  store i64 %248, i64* %251, align 8
  %252 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad64x128_avg to i64*), align 8
  %253 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %254 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %253, i64 0, i32 21, i64 13, i32 13
  %255 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %254 to i64*
  store i64 %252, i64* %255, align 8
  %256 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance64x128 to i64*), align 8
  %257 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %258 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %257, i64 0, i32 21, i64 13, i32 14
  %259 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %258 to i64*
  store i64 %256, i64* %259, align 8
  %260 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad32x16 to i64*), align 8
  %261 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %262 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %261, i64 0, i32 21, i64 8
  %263 = bitcast %struct.aom_variance_vtable* %262 to i64*
  store i64 %260, i64* %263, align 8
  %264 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*)** @aom_sad32x16_avg to i64*), align 8
  %265 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %266 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %265, i64 0, i32 21, i64 8, i32 2
  %267 = bitcast i32 (i8*, i32, i8*, i32, i8*)** %266 to i64*
  store i64 %264, i64* %267, align 8
  %268 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i32*)** @aom_variance32x16 to i64*), align 8
  %269 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %270 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %269, i64 0, i32 21, i64 8, i32 3
  %271 = bitcast i32 (i8*, i32, i8*, i32, i32*)** %270 to i64*
  store i64 %268, i64* %271, align 8
  %272 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance32x16 to i64*), align 8
  %273 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %274 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %273, i64 0, i32 21, i64 8, i32 4
  %275 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %274 to i64*
  store i64 %272, i64* %275, align 8
  %276 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance32x16 to i64*), align 8
  %277 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %278 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %277, i64 0, i32 21, i64 8, i32 5
  %279 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %278 to i64*
  store i64 %276, i64* %279, align 8
  %280 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad32x16x4d to i64*), align 8
  %281 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %282 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %281, i64 0, i32 21, i64 8, i32 6
  %283 = bitcast void (i8*, i32, i8**, i32, i32*)** %282 to i64*
  store i64 %280, i64* %283, align 8
  %284 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad32x16_avg to i64*), align 8
  %285 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %286 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %285, i64 0, i32 21, i64 8, i32 13
  %287 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %286 to i64*
  store i64 %284, i64* %287, align 8
  %288 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance32x16 to i64*), align 8
  %289 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %290 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %289, i64 0, i32 21, i64 8, i32 14
  %291 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %290 to i64*
  store i64 %288, i64* %291, align 8
  %292 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %293 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %292, i64 0, i32 21, i64 7, i32 0
  store i32 (i8*, i32, i8*, i32)* @aom_sad16x32_sse2, i32 (i8*, i32, i8*, i32)** %293, align 8
  %294 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %295 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %294, i64 0, i32 21, i64 7, i32 2
  store i32 (i8*, i32, i8*, i32, i8*)* @aom_sad16x32_avg_sse2, i32 (i8*, i32, i8*, i32, i8*)** %295, align 8
  %296 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i32*)** @aom_variance16x32 to i64*), align 8
  %297 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %298 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %297, i64 0, i32 21, i64 7, i32 3
  %299 = bitcast i32 (i8*, i32, i8*, i32, i32*)** %298 to i64*
  store i64 %296, i64* %299, align 8
  %300 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance16x32 to i64*), align 8
  %301 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %302 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %301, i64 0, i32 21, i64 7, i32 4
  %303 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %302 to i64*
  store i64 %300, i64* %303, align 8
  %304 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance16x32 to i64*), align 8
  %305 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %306 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %305, i64 0, i32 21, i64 7, i32 5
  %307 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %306 to i64*
  store i64 %304, i64* %307, align 8
  %308 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %309 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %308, i64 0, i32 21, i64 7, i32 6
  store void (i8*, i32, i8**, i32, i32*)* @aom_sad16x32x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %309, align 8
  %310 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad16x32_avg to i64*), align 8
  %311 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %312 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %311, i64 0, i32 21, i64 7, i32 13
  %313 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %312 to i64*
  store i64 %310, i64* %313, align 8
  %314 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance16x32 to i64*), align 8
  %315 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %316 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %315, i64 0, i32 21, i64 7, i32 14
  %317 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %316 to i64*
  store i64 %314, i64* %317, align 8
  %318 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad64x32 to i64*), align 8
  %319 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %320 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %319, i64 0, i32 21, i64 11
  %321 = bitcast %struct.aom_variance_vtable* %320 to i64*
  store i64 %318, i64* %321, align 8
  %322 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*)** @aom_sad64x32_avg to i64*), align 8
  %323 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %324 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %323, i64 0, i32 21, i64 11, i32 2
  %325 = bitcast i32 (i8*, i32, i8*, i32, i8*)** %324 to i64*
  store i64 %322, i64* %325, align 8
  %326 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i32*)** @aom_variance64x32 to i64*), align 8
  %327 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %328 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %327, i64 0, i32 21, i64 11, i32 3
  %329 = bitcast i32 (i8*, i32, i8*, i32, i32*)** %328 to i64*
  store i64 %326, i64* %329, align 8
  %330 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance64x32 to i64*), align 8
  %331 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %332 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %331, i64 0, i32 21, i64 11, i32 4
  %333 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %332 to i64*
  store i64 %330, i64* %333, align 8
  %334 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance64x32 to i64*), align 8
  %335 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %336 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %335, i64 0, i32 21, i64 11, i32 5
  %337 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %336 to i64*
  store i64 %334, i64* %337, align 8
  %338 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad64x32x4d to i64*), align 8
  %339 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %340 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %339, i64 0, i32 21, i64 11, i32 6
  %341 = bitcast void (i8*, i32, i8**, i32, i32*)** %340 to i64*
  store i64 %338, i64* %341, align 8
  %342 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad64x32_avg to i64*), align 8
  %343 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %344 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %343, i64 0, i32 21, i64 11, i32 13
  %345 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %344 to i64*
  store i64 %342, i64* %345, align 8
  %346 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance64x32 to i64*), align 8
  %347 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %348 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %347, i64 0, i32 21, i64 11, i32 14
  %349 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %348 to i64*
  store i64 %346, i64* %349, align 8
  %350 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad32x64 to i64*), align 8
  %351 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %352 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %351, i64 0, i32 21, i64 10
  %353 = bitcast %struct.aom_variance_vtable* %352 to i64*
  store i64 %350, i64* %353, align 8
  %354 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*)** @aom_sad32x64_avg to i64*), align 8
  %355 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %356 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %355, i64 0, i32 21, i64 10, i32 2
  %357 = bitcast i32 (i8*, i32, i8*, i32, i8*)** %356 to i64*
  store i64 %354, i64* %357, align 8
  %358 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i32*)** @aom_variance32x64 to i64*), align 8
  %359 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %360 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %359, i64 0, i32 21, i64 10, i32 3
  %361 = bitcast i32 (i8*, i32, i8*, i32, i32*)** %360 to i64*
  store i64 %358, i64* %361, align 8
  %362 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance32x64 to i64*), align 8
  %363 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %364 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %363, i64 0, i32 21, i64 10, i32 4
  %365 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %364 to i64*
  store i64 %362, i64* %365, align 8
  %366 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance32x64 to i64*), align 8
  %367 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %368 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %367, i64 0, i32 21, i64 10, i32 5
  %369 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %368 to i64*
  store i64 %366, i64* %369, align 8
  %370 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad32x64x4d to i64*), align 8
  %371 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %372 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %371, i64 0, i32 21, i64 10, i32 6
  %373 = bitcast void (i8*, i32, i8**, i32, i32*)** %372 to i64*
  store i64 %370, i64* %373, align 8
  %374 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad32x64_avg to i64*), align 8
  %375 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %376 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %375, i64 0, i32 21, i64 10, i32 13
  %377 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %376 to i64*
  store i64 %374, i64* %377, align 8
  %378 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance32x64 to i64*), align 8
  %379 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %380 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %379, i64 0, i32 21, i64 10, i32 14
  %381 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %380 to i64*
  store i64 %378, i64* %381, align 8
  %382 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad32x32 to i64*), align 8
  %383 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %384 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %383, i64 0, i32 21, i64 9
  %385 = bitcast %struct.aom_variance_vtable* %384 to i64*
  store i64 %382, i64* %385, align 8
  %386 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*)** @aom_sad32x32_avg to i64*), align 8
  %387 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %388 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %387, i64 0, i32 21, i64 9, i32 2
  %389 = bitcast i32 (i8*, i32, i8*, i32, i8*)** %388 to i64*
  store i64 %386, i64* %389, align 8
  %390 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i32*)** @aom_variance32x32 to i64*), align 8
  %391 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %392 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %391, i64 0, i32 21, i64 9, i32 3
  %393 = bitcast i32 (i8*, i32, i8*, i32, i32*)** %392 to i64*
  store i64 %390, i64* %393, align 8
  %394 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance32x32 to i64*), align 8
  %395 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %396 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %395, i64 0, i32 21, i64 9, i32 4
  %397 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %396 to i64*
  store i64 %394, i64* %397, align 8
  %398 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance32x32 to i64*), align 8
  %399 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %400 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %399, i64 0, i32 21, i64 9, i32 5
  %401 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %400 to i64*
  store i64 %398, i64* %401, align 8
  %402 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad32x32x4d to i64*), align 8
  %403 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %404 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %403, i64 0, i32 21, i64 9, i32 6
  %405 = bitcast void (i8*, i32, i8**, i32, i32*)** %404 to i64*
  store i64 %402, i64* %405, align 8
  %406 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad32x32_avg to i64*), align 8
  %407 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %408 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %407, i64 0, i32 21, i64 9, i32 13
  %409 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %408 to i64*
  store i64 %406, i64* %409, align 8
  %410 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance32x32 to i64*), align 8
  %411 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %412 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %411, i64 0, i32 21, i64 9, i32 14
  %413 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %412 to i64*
  store i64 %410, i64* %413, align 8
  %414 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad64x64 to i64*), align 8
  %415 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %416 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %415, i64 0, i32 21, i64 12
  %417 = bitcast %struct.aom_variance_vtable* %416 to i64*
  store i64 %414, i64* %417, align 8
  %418 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*)** @aom_sad64x64_avg to i64*), align 8
  %419 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %420 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %419, i64 0, i32 21, i64 12, i32 2
  %421 = bitcast i32 (i8*, i32, i8*, i32, i8*)** %420 to i64*
  store i64 %418, i64* %421, align 8
  %422 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i32*)** @aom_variance64x64 to i64*), align 8
  %423 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %424 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %423, i64 0, i32 21, i64 12, i32 3
  %425 = bitcast i32 (i8*, i32, i8*, i32, i32*)** %424 to i64*
  store i64 %422, i64* %425, align 8
  %426 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance64x64 to i64*), align 8
  %427 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %428 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %427, i64 0, i32 21, i64 12, i32 4
  %429 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %428 to i64*
  store i64 %426, i64* %429, align 8
  %430 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance64x64 to i64*), align 8
  %431 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %432 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %431, i64 0, i32 21, i64 12, i32 5
  %433 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %432 to i64*
  store i64 %430, i64* %433, align 8
  %434 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad64x64x4d to i64*), align 8
  %435 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %436 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %435, i64 0, i32 21, i64 12, i32 6
  %437 = bitcast void (i8*, i32, i8**, i32, i32*)** %436 to i64*
  store i64 %434, i64* %437, align 8
  %438 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad64x64_avg to i64*), align 8
  %439 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %440 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %439, i64 0, i32 21, i64 12, i32 13
  %441 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %440 to i64*
  store i64 %438, i64* %441, align 8
  %442 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance64x64 to i64*), align 8
  %443 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %444 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %443, i64 0, i32 21, i64 12, i32 14
  %445 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %444 to i64*
  store i64 %442, i64* %445, align 8
  %446 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %447 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %446, i64 0, i32 21, i64 6, i32 0
  store i32 (i8*, i32, i8*, i32)* @aom_sad16x16_sse2, i32 (i8*, i32, i8*, i32)** %447, align 8
  %448 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %449 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %448, i64 0, i32 21, i64 6, i32 2
  store i32 (i8*, i32, i8*, i32, i8*)* @aom_sad16x16_avg_sse2, i32 (i8*, i32, i8*, i32, i8*)** %449, align 8
  %450 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i32*)** @aom_variance16x16 to i64*), align 8
  %451 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %452 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %451, i64 0, i32 21, i64 6, i32 3
  %453 = bitcast i32 (i8*, i32, i8*, i32, i32*)** %452 to i64*
  store i64 %450, i64* %453, align 8
  %454 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance16x16 to i64*), align 8
  %455 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %456 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %455, i64 0, i32 21, i64 6, i32 4
  %457 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %456 to i64*
  store i64 %454, i64* %457, align 8
  %458 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance16x16 to i64*), align 8
  %459 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %460 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %459, i64 0, i32 21, i64 6, i32 5
  %461 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %460 to i64*
  store i64 %458, i64* %461, align 8
  %462 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %463 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %462, i64 0, i32 21, i64 6, i32 6
  store void (i8*, i32, i8**, i32, i32*)* @aom_sad16x16x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %463, align 8
  %464 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad16x16_avg to i64*), align 8
  %465 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %466 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %465, i64 0, i32 21, i64 6, i32 13
  %467 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %466 to i64*
  store i64 %464, i64* %467, align 8
  %468 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance16x16 to i64*), align 8
  %469 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %470 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %469, i64 0, i32 21, i64 6, i32 14
  %471 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %470 to i64*
  store i64 %468, i64* %471, align 8
  %472 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %473 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %472, i64 0, i32 21, i64 5, i32 0
  store i32 (i8*, i32, i8*, i32)* @aom_sad16x8_sse2, i32 (i8*, i32, i8*, i32)** %473, align 8
  %474 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %475 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %474, i64 0, i32 21, i64 5, i32 2
  store i32 (i8*, i32, i8*, i32, i8*)* @aom_sad16x8_avg_sse2, i32 (i8*, i32, i8*, i32, i8*)** %475, align 8
  %476 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i32*)** @aom_variance16x8 to i64*), align 8
  %477 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %478 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %477, i64 0, i32 21, i64 5, i32 3
  %479 = bitcast i32 (i8*, i32, i8*, i32, i32*)** %478 to i64*
  store i64 %476, i64* %479, align 8
  %480 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance16x8 to i64*), align 8
  %481 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %482 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %481, i64 0, i32 21, i64 5, i32 4
  %483 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %482 to i64*
  store i64 %480, i64* %483, align 8
  %484 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance16x8 to i64*), align 8
  %485 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %486 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %485, i64 0, i32 21, i64 5, i32 5
  %487 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %486 to i64*
  store i64 %484, i64* %487, align 8
  %488 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %489 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %488, i64 0, i32 21, i64 5, i32 6
  store void (i8*, i32, i8**, i32, i32*)* @aom_sad16x8x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %489, align 8
  %490 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad16x8_avg to i64*), align 8
  %491 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %492 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %491, i64 0, i32 21, i64 5, i32 13
  %493 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %492 to i64*
  store i64 %490, i64* %493, align 8
  %494 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance16x8 to i64*), align 8
  %495 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %496 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %495, i64 0, i32 21, i64 5, i32 14
  %497 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %496 to i64*
  store i64 %494, i64* %497, align 8
  %498 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %499 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %498, i64 0, i32 21, i64 4, i32 0
  store i32 (i8*, i32, i8*, i32)* @aom_sad8x16_sse2, i32 (i8*, i32, i8*, i32)** %499, align 8
  %500 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %501 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %500, i64 0, i32 21, i64 4, i32 2
  store i32 (i8*, i32, i8*, i32, i8*)* @aom_sad8x16_avg_sse2, i32 (i8*, i32, i8*, i32, i8*)** %501, align 8
  %502 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %503 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %502, i64 0, i32 21, i64 4, i32 3
  store i32 (i8*, i32, i8*, i32, i32*)* @aom_variance8x16_sse2, i32 (i8*, i32, i8*, i32, i32*)** %503, align 8
  %504 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance8x16 to i64*), align 8
  %505 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %506 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %505, i64 0, i32 21, i64 4, i32 4
  %507 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %506 to i64*
  store i64 %504, i64* %507, align 8
  %508 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance8x16 to i64*), align 8
  %509 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %510 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %509, i64 0, i32 21, i64 4, i32 5
  %511 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %510 to i64*
  store i64 %508, i64* %511, align 8
  %512 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %513 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %512, i64 0, i32 21, i64 4, i32 6
  store void (i8*, i32, i8**, i32, i32*)* @aom_sad8x16x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %513, align 8
  %514 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad8x16_avg to i64*), align 8
  %515 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %516 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %515, i64 0, i32 21, i64 4, i32 13
  %517 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %516 to i64*
  store i64 %514, i64* %517, align 8
  %518 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance8x16 to i64*), align 8
  %519 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %520 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %519, i64 0, i32 21, i64 4, i32 14
  %521 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %520 to i64*
  store i64 %518, i64* %521, align 8
  %522 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %523 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %522, i64 0, i32 21, i64 3, i32 0
  store i32 (i8*, i32, i8*, i32)* @aom_sad8x8_sse2, i32 (i8*, i32, i8*, i32)** %523, align 8
  %524 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %525 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %524, i64 0, i32 21, i64 3, i32 2
  store i32 (i8*, i32, i8*, i32, i8*)* @aom_sad8x8_avg_sse2, i32 (i8*, i32, i8*, i32, i8*)** %525, align 8
  %526 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %527 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %526, i64 0, i32 21, i64 3, i32 3
  store i32 (i8*, i32, i8*, i32, i32*)* @aom_variance8x8_sse2, i32 (i8*, i32, i8*, i32, i32*)** %527, align 8
  %528 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance8x8 to i64*), align 8
  %529 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %530 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %529, i64 0, i32 21, i64 3, i32 4
  %531 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %530 to i64*
  store i64 %528, i64* %531, align 8
  %532 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance8x8 to i64*), align 8
  %533 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %534 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %533, i64 0, i32 21, i64 3, i32 5
  %535 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %534 to i64*
  store i64 %532, i64* %535, align 8
  %536 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %537 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %536, i64 0, i32 21, i64 3, i32 6
  store void (i8*, i32, i8**, i32, i32*)* @aom_sad8x8x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %537, align 8
  %538 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad8x8_avg to i64*), align 8
  %539 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %540 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %539, i64 0, i32 21, i64 3, i32 13
  %541 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %540 to i64*
  store i64 %538, i64* %541, align 8
  %542 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance8x8 to i64*), align 8
  %543 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %544 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %543, i64 0, i32 21, i64 3, i32 14
  %545 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %544 to i64*
  store i64 %542, i64* %545, align 8
  %546 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %547 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %546, i64 0, i32 21, i64 2, i32 0
  store i32 (i8*, i32, i8*, i32)* @aom_sad8x4_sse2, i32 (i8*, i32, i8*, i32)** %547, align 8
  %548 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %549 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %548, i64 0, i32 21, i64 2, i32 2
  store i32 (i8*, i32, i8*, i32, i8*)* @aom_sad8x4_avg_sse2, i32 (i8*, i32, i8*, i32, i8*)** %549, align 8
  %550 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %551 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %550, i64 0, i32 21, i64 2, i32 3
  store i32 (i8*, i32, i8*, i32, i32*)* @aom_variance8x4_sse2, i32 (i8*, i32, i8*, i32, i32*)** %551, align 8
  %552 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance8x4 to i64*), align 8
  %553 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %554 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %553, i64 0, i32 21, i64 2, i32 4
  %555 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %554 to i64*
  store i64 %552, i64* %555, align 8
  %556 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance8x4 to i64*), align 8
  %557 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %558 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %557, i64 0, i32 21, i64 2, i32 5
  %559 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %558 to i64*
  store i64 %556, i64* %559, align 8
  %560 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %561 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %560, i64 0, i32 21, i64 2, i32 6
  store void (i8*, i32, i8**, i32, i32*)* @aom_sad8x4x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %561, align 8
  %562 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad8x4_avg to i64*), align 8
  %563 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %564 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %563, i64 0, i32 21, i64 2, i32 13
  %565 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %564 to i64*
  store i64 %562, i64* %565, align 8
  %566 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance8x4 to i64*), align 8
  %567 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %568 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %567, i64 0, i32 21, i64 2, i32 14
  %569 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %568 to i64*
  store i64 %566, i64* %569, align 8
  %570 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %571 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %570, i64 0, i32 21, i64 1, i32 0
  store i32 (i8*, i32, i8*, i32)* @aom_sad4x8_sse2, i32 (i8*, i32, i8*, i32)** %571, align 8
  %572 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %573 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %572, i64 0, i32 21, i64 1, i32 2
  store i32 (i8*, i32, i8*, i32, i8*)* @aom_sad4x8_avg_sse2, i32 (i8*, i32, i8*, i32, i8*)** %573, align 8
  %574 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %575 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %574, i64 0, i32 21, i64 1, i32 3
  store i32 (i8*, i32, i8*, i32, i32*)* @aom_variance4x8_sse2, i32 (i8*, i32, i8*, i32, i32*)** %575, align 8
  %576 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance4x8 to i64*), align 8
  %577 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %578 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %577, i64 0, i32 21, i64 1, i32 4
  %579 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %578 to i64*
  store i64 %576, i64* %579, align 8
  %580 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance4x8 to i64*), align 8
  %581 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %582 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %581, i64 0, i32 21, i64 1, i32 5
  %583 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %582 to i64*
  store i64 %580, i64* %583, align 8
  %584 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %585 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %584, i64 0, i32 21, i64 1, i32 6
  store void (i8*, i32, i8**, i32, i32*)* @aom_sad4x8x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %585, align 8
  %586 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad4x8_avg to i64*), align 8
  %587 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %588 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %587, i64 0, i32 21, i64 1, i32 13
  %589 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %588 to i64*
  store i64 %586, i64* %589, align 8
  %590 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance4x8 to i64*), align 8
  %591 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %592 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %591, i64 0, i32 21, i64 1, i32 14
  %593 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %592 to i64*
  store i64 %590, i64* %593, align 8
  %594 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %595 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %594, i64 0, i32 21, i64 0, i32 0
  store i32 (i8*, i32, i8*, i32)* @aom_sad4x4_sse2, i32 (i8*, i32, i8*, i32)** %595, align 8
  %596 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %597 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %596, i64 0, i32 21, i64 0, i32 2
  store i32 (i8*, i32, i8*, i32, i8*)* @aom_sad4x4_avg_sse2, i32 (i8*, i32, i8*, i32, i8*)** %597, align 8
  %598 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %599 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %598, i64 0, i32 21, i64 0, i32 3
  store i32 (i8*, i32, i8*, i32, i32*)* @aom_variance4x4_sse2, i32 (i8*, i32, i8*, i32, i32*)** %599, align 8
  %600 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @aom_sub_pixel_variance4x4 to i64*), align 8
  %601 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %602 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %601, i64 0, i32 21, i64 0, i32 4
  %603 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %602 to i64*
  store i64 %600, i64* %603, align 8
  %604 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** @aom_sub_pixel_avg_variance4x4 to i64*), align 8
  %605 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %606 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %605, i64 0, i32 21, i64 0, i32 5
  %607 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)** %606 to i64*
  store i64 %604, i64* %607, align 8
  %608 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %609 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %608, i64 0, i32 21, i64 0, i32 6
  store void (i8*, i32, i8**, i32, i32*)* @aom_sad4x4x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %609, align 8
  %610 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sad4x4_avg to i64*), align 8
  %611 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %612 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %611, i64 0, i32 21, i64 0, i32 13
  %613 = bitcast i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)** %612 to i64*
  store i64 %610, i64* %613, align 8
  %614 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** @aom_dist_wtd_sub_pixel_avg_variance4x4 to i64*), align 8
  %615 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %616 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %615, i64 0, i32 21, i64 0, i32 14
  %617 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)** %616 to i64*
  store i64 %614, i64* %617, align 8
  %618 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad128x128 to i64*), align 8
  %619 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %620 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %619, i64 0, i32 21, i64 15, i32 8
  %621 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %620 to i64*
  store i64 %618, i64* %621, align 8
  %622 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance128x128 to i64*), align 8
  %623 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %624 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %623, i64 0, i32 21, i64 15, i32 9
  %625 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %624 to i64*
  store i64 %622, i64* %625, align 8
  %626 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad128x64 to i64*), align 8
  %627 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %628 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %627, i64 0, i32 21, i64 14, i32 8
  %629 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %628 to i64*
  store i64 %626, i64* %629, align 8
  %630 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance128x64 to i64*), align 8
  %631 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %632 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %631, i64 0, i32 21, i64 14, i32 9
  %633 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %632 to i64*
  store i64 %630, i64* %633, align 8
  %634 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad64x128 to i64*), align 8
  %635 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %636 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %635, i64 0, i32 21, i64 13, i32 8
  %637 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %636 to i64*
  store i64 %634, i64* %637, align 8
  %638 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance64x128 to i64*), align 8
  %639 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %640 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %639, i64 0, i32 21, i64 13, i32 9
  %641 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %640 to i64*
  store i64 %638, i64* %641, align 8
  %642 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad64x64 to i64*), align 8
  %643 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %644 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %643, i64 0, i32 21, i64 12, i32 8
  %645 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %644 to i64*
  store i64 %642, i64* %645, align 8
  %646 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance64x64 to i64*), align 8
  %647 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %648 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %647, i64 0, i32 21, i64 12, i32 9
  %649 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %648 to i64*
  store i64 %646, i64* %649, align 8
  %650 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad64x32 to i64*), align 8
  %651 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %652 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %651, i64 0, i32 21, i64 11, i32 8
  %653 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %652 to i64*
  store i64 %650, i64* %653, align 8
  %654 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance64x32 to i64*), align 8
  %655 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %656 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %655, i64 0, i32 21, i64 11, i32 9
  %657 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %656 to i64*
  store i64 %654, i64* %657, align 8
  %658 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad32x64 to i64*), align 8
  %659 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %660 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %659, i64 0, i32 21, i64 10, i32 8
  %661 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %660 to i64*
  store i64 %658, i64* %661, align 8
  %662 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance32x64 to i64*), align 8
  %663 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %664 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %663, i64 0, i32 21, i64 10, i32 9
  %665 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %664 to i64*
  store i64 %662, i64* %665, align 8
  %666 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad32x32 to i64*), align 8
  %667 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %668 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %667, i64 0, i32 21, i64 9, i32 8
  %669 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %668 to i64*
  store i64 %666, i64* %669, align 8
  %670 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance32x32 to i64*), align 8
  %671 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %672 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %671, i64 0, i32 21, i64 9, i32 9
  %673 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %672 to i64*
  store i64 %670, i64* %673, align 8
  %674 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad32x16 to i64*), align 8
  %675 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %676 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %675, i64 0, i32 21, i64 8, i32 8
  %677 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %676 to i64*
  store i64 %674, i64* %677, align 8
  %678 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance32x16 to i64*), align 8
  %679 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %680 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %679, i64 0, i32 21, i64 8, i32 9
  %681 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %680 to i64*
  store i64 %678, i64* %681, align 8
  %682 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad16x32 to i64*), align 8
  %683 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %684 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %683, i64 0, i32 21, i64 7, i32 8
  %685 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %684 to i64*
  store i64 %682, i64* %685, align 8
  %686 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance16x32 to i64*), align 8
  %687 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %688 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %687, i64 0, i32 21, i64 7, i32 9
  %689 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %688 to i64*
  store i64 %686, i64* %689, align 8
  %690 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad16x16 to i64*), align 8
  %691 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %692 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %691, i64 0, i32 21, i64 6, i32 8
  %693 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %692 to i64*
  store i64 %690, i64* %693, align 8
  %694 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance16x16 to i64*), align 8
  %695 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %696 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %695, i64 0, i32 21, i64 6, i32 9
  %697 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %696 to i64*
  store i64 %694, i64* %697, align 8
  %698 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad16x8 to i64*), align 8
  %699 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %700 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %699, i64 0, i32 21, i64 5, i32 8
  %701 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %700 to i64*
  store i64 %698, i64* %701, align 8
  %702 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance16x8 to i64*), align 8
  %703 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %704 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %703, i64 0, i32 21, i64 5, i32 9
  %705 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %704 to i64*
  store i64 %702, i64* %705, align 8
  %706 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad8x16 to i64*), align 8
  %707 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %708 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %707, i64 0, i32 21, i64 4, i32 8
  %709 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %708 to i64*
  store i64 %706, i64* %709, align 8
  %710 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance8x16 to i64*), align 8
  %711 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %712 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %711, i64 0, i32 21, i64 4, i32 9
  %713 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %712 to i64*
  store i64 %710, i64* %713, align 8
  %714 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad8x8 to i64*), align 8
  %715 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %716 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %715, i64 0, i32 21, i64 3, i32 8
  %717 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %716 to i64*
  store i64 %714, i64* %717, align 8
  %718 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance8x8 to i64*), align 8
  %719 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %720 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %719, i64 0, i32 21, i64 3, i32 9
  %721 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %720 to i64*
  store i64 %718, i64* %721, align 8
  %722 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad4x8 to i64*), align 8
  %723 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %724 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %723, i64 0, i32 21, i64 1, i32 8
  %725 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %724 to i64*
  store i64 %722, i64* %725, align 8
  %726 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance4x8 to i64*), align 8
  %727 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %728 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %727, i64 0, i32 21, i64 1, i32 9
  %729 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %728 to i64*
  store i64 %726, i64* %729, align 8
  %730 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad8x4 to i64*), align 8
  %731 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %732 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %731, i64 0, i32 21, i64 2, i32 8
  %733 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %732 to i64*
  store i64 %730, i64* %733, align 8
  %734 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance8x4 to i64*), align 8
  %735 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %736 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %735, i64 0, i32 21, i64 2, i32 9
  %737 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %736 to i64*
  store i64 %734, i64* %737, align 8
  %738 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** @aom_masked_sad4x4 to i64*), align 8
  %739 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %740 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %739, i64 0, i32 21, i64 0, i32 8
  %741 = bitcast i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)** %740 to i64*
  store i64 %738, i64* %741, align 8
  %742 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** @aom_masked_sub_pixel_variance4x4 to i64*), align 8
  %743 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %744 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %743, i64 0, i32 21, i64 0, i32 9
  %745 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)** %744 to i64*
  store i64 %742, i64* %745, align 8
  %746 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad_skip_128x128 to i64*), align 8
  %747 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %748 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %747, i64 0, i32 21, i64 15, i32 1
  %749 = bitcast i32 (i8*, i32, i8*, i32)** %748 to i64*
  store i64 %746, i64* %749, align 8
  %750 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad_skip_128x128x4d to i64*), align 8
  %751 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %752 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %751, i64 0, i32 21, i64 15, i32 7
  %753 = bitcast void (i8*, i32, i8**, i32, i32*)** %752 to i64*
  store i64 %750, i64* %753, align 8
  %754 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad_skip_128x64 to i64*), align 8
  %755 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %756 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %755, i64 0, i32 21, i64 14, i32 1
  %757 = bitcast i32 (i8*, i32, i8*, i32)** %756 to i64*
  store i64 %754, i64* %757, align 8
  %758 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad_skip_128x64x4d to i64*), align 8
  %759 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %760 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %759, i64 0, i32 21, i64 14, i32 7
  %761 = bitcast void (i8*, i32, i8**, i32, i32*)** %760 to i64*
  store i64 %758, i64* %761, align 8
  %762 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad_skip_64x128 to i64*), align 8
  %763 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %764 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %763, i64 0, i32 21, i64 13, i32 1
  %765 = bitcast i32 (i8*, i32, i8*, i32)** %764 to i64*
  store i64 %762, i64* %765, align 8
  %766 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad_skip_64x128x4d to i64*), align 8
  %767 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %768 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %767, i64 0, i32 21, i64 13, i32 7
  %769 = bitcast void (i8*, i32, i8**, i32, i32*)** %768 to i64*
  store i64 %766, i64* %769, align 8
  %770 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad_skip_64x64 to i64*), align 8
  %771 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %772 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %771, i64 0, i32 21, i64 12, i32 1
  %773 = bitcast i32 (i8*, i32, i8*, i32)** %772 to i64*
  store i64 %770, i64* %773, align 8
  %774 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad_skip_64x64x4d to i64*), align 8
  %775 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %776 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %775, i64 0, i32 21, i64 12, i32 7
  %777 = bitcast void (i8*, i32, i8**, i32, i32*)** %776 to i64*
  store i64 %774, i64* %777, align 8
  %778 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad_skip_64x32 to i64*), align 8
  %779 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %780 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %779, i64 0, i32 21, i64 11, i32 1
  %781 = bitcast i32 (i8*, i32, i8*, i32)** %780 to i64*
  store i64 %778, i64* %781, align 8
  %782 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad_skip_64x32x4d to i64*), align 8
  %783 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %784 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %783, i64 0, i32 21, i64 11, i32 7
  %785 = bitcast void (i8*, i32, i8**, i32, i32*)** %784 to i64*
  store i64 %782, i64* %785, align 8
  %786 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad_skip_32x64 to i64*), align 8
  %787 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %788 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %787, i64 0, i32 21, i64 10, i32 1
  %789 = bitcast i32 (i8*, i32, i8*, i32)** %788 to i64*
  store i64 %786, i64* %789, align 8
  %790 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad_skip_32x64x4d to i64*), align 8
  %791 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %792 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %791, i64 0, i32 21, i64 10, i32 7
  %793 = bitcast void (i8*, i32, i8**, i32, i32*)** %792 to i64*
  store i64 %790, i64* %793, align 8
  %794 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad_skip_32x32 to i64*), align 8
  %795 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %796 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %795, i64 0, i32 21, i64 9, i32 1
  %797 = bitcast i32 (i8*, i32, i8*, i32)** %796 to i64*
  store i64 %794, i64* %797, align 8
  %798 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad_skip_32x32x4d to i64*), align 8
  %799 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %800 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %799, i64 0, i32 21, i64 9, i32 7
  %801 = bitcast void (i8*, i32, i8**, i32, i32*)** %800 to i64*
  store i64 %798, i64* %801, align 8
  %802 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32)** @aom_sad_skip_32x16 to i64*), align 8
  %803 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %804 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %803, i64 0, i32 21, i64 8, i32 1
  %805 = bitcast i32 (i8*, i32, i8*, i32)** %804 to i64*
  store i64 %802, i64* %805, align 8
  %806 = load i64, i64* bitcast (void (i8*, i32, i8**, i32, i32*)** @aom_sad_skip_32x16x4d to i64*), align 8
  %807 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %808 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %807, i64 0, i32 21, i64 8, i32 7
  %809 = bitcast void (i8*, i32, i8**, i32, i32*)** %808 to i64*
  store i64 %806, i64* %809, align 8
  %810 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %811 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %810, i64 0, i32 21, i64 7, i32 1
  store i32 (i8*, i32, i8*, i32)* @aom_sad_skip_16x32_sse2, i32 (i8*, i32, i8*, i32)** %811, align 8
  %812 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %813 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %812, i64 0, i32 21, i64 7, i32 7
  store void (i8*, i32, i8**, i32, i32*)* @aom_sad_skip_16x32x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %813, align 8
  %814 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %815 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %814, i64 0, i32 21, i64 6, i32 1
  store i32 (i8*, i32, i8*, i32)* @aom_sad_skip_16x16_sse2, i32 (i8*, i32, i8*, i32)** %815, align 8
  %816 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %817 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %816, i64 0, i32 21, i64 6, i32 7
  store void (i8*, i32, i8**, i32, i32*)* @aom_sad_skip_16x16x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %817, align 8
  %818 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %819 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %818, i64 0, i32 21, i64 5, i32 1
  store i32 (i8*, i32, i8*, i32)* @aom_sad_skip_16x8_sse2, i32 (i8*, i32, i8*, i32)** %819, align 8
  %820 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %821 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %820, i64 0, i32 21, i64 5, i32 7
  store void (i8*, i32, i8**, i32, i32*)* @aom_sad_skip_16x8x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %821, align 8
  %822 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %823 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %822, i64 0, i32 21, i64 4, i32 1
  store i32 (i8*, i32, i8*, i32)* @aom_sad_skip_8x16_sse2, i32 (i8*, i32, i8*, i32)** %823, align 8
  %824 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %825 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %824, i64 0, i32 21, i64 4, i32 7
  store void (i8*, i32, i8**, i32, i32*)* @aom_sad_skip_8x16x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %825, align 8
  %826 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %827 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %826, i64 0, i32 21, i64 3, i32 1
  store i32 (i8*, i32, i8*, i32)* @aom_sad_skip_8x8_sse2, i32 (i8*, i32, i8*, i32)** %827, align 8
  %828 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %829 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %828, i64 0, i32 21, i64 3, i32 7
  store void (i8*, i32, i8**, i32, i32*)* @aom_sad_skip_8x8x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %829, align 8
  %830 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %831 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %830, i64 0, i32 21, i64 1, i32 1
  store i32 (i8*, i32, i8*, i32)* @aom_sad_skip_4x8_sse2, i32 (i8*, i32, i8*, i32)** %831, align 8
  %832 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %833 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %832, i64 0, i32 21, i64 1, i32 7
  store void (i8*, i32, i8**, i32, i32*)* @aom_sad_skip_4x8x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %833, align 8
  %834 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 1, i32 0
  %835 = load i32, i32* %834, align 8
  %836 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %2, i64 0, i32 1, i32 1
  %837 = load i32, i32* %836, align 4
  %838 = add nsw i32 %835, 7
  %839 = add nsw i32 %837, 7
  %840 = ashr i32 %838, 2
  %841 = and i32 %840, -2
  %842 = ashr i32 %839, 2
  %843 = and i32 %842, -2
  %844 = add nsw i32 %841, 3
  %845 = sdiv i32 %844, 4
  %846 = add nsw i32 %843, 3
  %847 = sdiv i32 %846, 4
  %848 = mul nsw i32 %847, %845
  %849 = sext i32 %848 to i64
  %850 = call i8* @aom_calloc(i64 %849, i64 8) #12
  %851 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %852 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %851, i64 0, i32 22
  %853 = bitcast double** %852 to i8**
  store i8* %850, i8** %853, align 8
  %854 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %855 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %854, i64 0, i32 22
  %856 = load double*, double** %855, align 8
  %857 = icmp eq double* %856, null
  br i1 %857, label %858, label %861

858:                                              ; preds = %163
  %859 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %860 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %859, i64 0, i32 20
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %860, i32 2, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.6, i64 0, i64 0)) #12
  br label %861

861:                                              ; preds = %163, %858
  %862 = call i8* @aom_calloc(i64 %849, i64 8) #12
  %863 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %864 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %863, i64 0, i32 23
  %865 = bitcast double** %864 to i8**
  store i8* %862, i8** %865, align 8
  %866 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %867 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %866, i64 0, i32 23
  %868 = load double*, double** %867, align 8
  %869 = icmp eq double* %868, null
  br i1 %869, label %870, label %873

870:                                              ; preds = %861
  %871 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %872 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %871, i64 0, i32 20
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %872, i32 2, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.7, i64 0, i64 0)) #12
  br label %873

873:                                              ; preds = %861, %870
  %874 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  %875 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %874, i64 0, i32 20, i32 3
  store i32 0, i32* %875, align 8
  %876 = load volatile %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %4, align 8
  br label %877

877:                                              ; preds = %3, %873, %19
  %878 = phi %struct.AV1_PRIMARY* [ null, %19 ], [ %876, %873 ], [ null, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5)
  ret %struct.AV1_PRIMARY* %878
}

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_remove_primary_compressor(%struct.AV1_PRIMARY*) local_unnamed_addr #2 {
  %2 = icmp eq %struct.AV1_PRIMARY* %0, null
  br i1 %2, label %121, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 14
  %5 = tail call i32 @aom_free_frame_buffer(%struct.yv12_buffer_config* %4) #12
  %6 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 0
  %7 = bitcast %struct.AV1LevelInfo** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @aom_free(i8* %8) #12
  %9 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 1
  %10 = bitcast %struct.AV1LevelInfo** %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @aom_free(i8* %11) #12
  %12 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 2
  %13 = bitcast %struct.AV1LevelInfo** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void @aom_free(i8* %14) #12
  %15 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 3
  %16 = bitcast %struct.AV1LevelInfo** %15 to i8**
  %17 = load i8*, i8** %16, align 8
  tail call void @aom_free(i8* %17) #12
  %18 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 4
  %19 = bitcast %struct.AV1LevelInfo** %18 to i8**
  %20 = load i8*, i8** %19, align 8
  tail call void @aom_free(i8* %20) #12
  %21 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 5
  %22 = bitcast %struct.AV1LevelInfo** %21 to i8**
  %23 = load i8*, i8** %22, align 8
  tail call void @aom_free(i8* %23) #12
  %24 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 6
  %25 = bitcast %struct.AV1LevelInfo** %24 to i8**
  %26 = load i8*, i8** %25, align 8
  tail call void @aom_free(i8* %26) #12
  %27 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 7
  %28 = bitcast %struct.AV1LevelInfo** %27 to i8**
  %29 = load i8*, i8** %28, align 8
  tail call void @aom_free(i8* %29) #12
  %30 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 8
  %31 = bitcast %struct.AV1LevelInfo** %30 to i8**
  %32 = load i8*, i8** %31, align 8
  tail call void @aom_free(i8* %32) #12
  %33 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 9
  %34 = bitcast %struct.AV1LevelInfo** %33 to i8**
  %35 = load i8*, i8** %34, align 8
  tail call void @aom_free(i8* %35) #12
  %36 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 10
  %37 = bitcast %struct.AV1LevelInfo** %36 to i8**
  %38 = load i8*, i8** %37, align 8
  tail call void @aom_free(i8* %38) #12
  %39 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 11
  %40 = bitcast %struct.AV1LevelInfo** %39 to i8**
  %41 = load i8*, i8** %40, align 8
  tail call void @aom_free(i8* %41) #12
  %42 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 12
  %43 = bitcast %struct.AV1LevelInfo** %42 to i8**
  %44 = load i8*, i8** %43, align 8
  tail call void @aom_free(i8* %44) #12
  %45 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 13
  %46 = bitcast %struct.AV1LevelInfo** %45 to i8**
  %47 = load i8*, i8** %46, align 8
  tail call void @aom_free(i8* %47) #12
  %48 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 14
  %49 = bitcast %struct.AV1LevelInfo** %48 to i8**
  %50 = load i8*, i8** %49, align 8
  tail call void @aom_free(i8* %50) #12
  %51 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 15
  %52 = bitcast %struct.AV1LevelInfo** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  tail call void @aom_free(i8* %53) #12
  %54 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 16
  %55 = bitcast %struct.AV1LevelInfo** %54 to i8**
  %56 = load i8*, i8** %55, align 8
  tail call void @aom_free(i8* %56) #12
  %57 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 17
  %58 = bitcast %struct.AV1LevelInfo** %57 to i8**
  %59 = load i8*, i8** %58, align 8
  tail call void @aom_free(i8* %59) #12
  %60 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 18
  %61 = bitcast %struct.AV1LevelInfo** %60 to i8**
  %62 = load i8*, i8** %61, align 8
  tail call void @aom_free(i8* %62) #12
  %63 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 19
  %64 = bitcast %struct.AV1LevelInfo** %63 to i8**
  %65 = load i8*, i8** %64, align 8
  tail call void @aom_free(i8* %65) #12
  %66 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 20
  %67 = bitcast %struct.AV1LevelInfo** %66 to i8**
  %68 = load i8*, i8** %67, align 8
  tail call void @aom_free(i8* %68) #12
  %69 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 21
  %70 = bitcast %struct.AV1LevelInfo** %69 to i8**
  %71 = load i8*, i8** %70, align 8
  tail call void @aom_free(i8* %71) #12
  %72 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 22
  %73 = bitcast %struct.AV1LevelInfo** %72 to i8**
  %74 = load i8*, i8** %73, align 8
  tail call void @aom_free(i8* %74) #12
  %75 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 23
  %76 = bitcast %struct.AV1LevelInfo** %75 to i8**
  %77 = load i8*, i8** %76, align 8
  tail call void @aom_free(i8* %77) #12
  %78 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 24
  %79 = bitcast %struct.AV1LevelInfo** %78 to i8**
  %80 = load i8*, i8** %79, align 8
  tail call void @aom_free(i8* %80) #12
  %81 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 25
  %82 = bitcast %struct.AV1LevelInfo** %81 to i8**
  %83 = load i8*, i8** %82, align 8
  tail call void @aom_free(i8* %83) #12
  %84 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 26
  %85 = bitcast %struct.AV1LevelInfo** %84 to i8**
  %86 = load i8*, i8** %85, align 8
  tail call void @aom_free(i8* %86) #12
  %87 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 27
  %88 = bitcast %struct.AV1LevelInfo** %87 to i8**
  %89 = load i8*, i8** %88, align 8
  tail call void @aom_free(i8* %89) #12
  %90 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 28
  %91 = bitcast %struct.AV1LevelInfo** %90 to i8**
  %92 = load i8*, i8** %91, align 8
  tail call void @aom_free(i8* %92) #12
  %93 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 29
  %94 = bitcast %struct.AV1LevelInfo** %93 to i8**
  %95 = load i8*, i8** %94, align 8
  tail call void @aom_free(i8* %95) #12
  %96 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 30
  %97 = bitcast %struct.AV1LevelInfo** %96 to i8**
  %98 = load i8*, i8** %97, align 8
  tail call void @aom_free(i8* %98) #12
  %99 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9, i32 2, i64 31
  %100 = bitcast %struct.AV1LevelInfo** %99 to i8**
  %101 = load i8*, i8** %100, align 8
  tail call void @aom_free(i8* %101) #12
  %102 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 2
  %103 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %102, align 8
  tail call void @av1_lookahead_destroy(%struct.lookahead_ctx* %103) #12
  %104 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 22
  %105 = bitcast double** %104 to i8**
  %106 = load i8*, i8** %105, align 8
  tail call void @aom_free(i8* %106) #12
  store double* null, double** %104, align 8
  %107 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 23
  %108 = bitcast double** %107 to i8**
  %109 = load i8*, i8** %108, align 8
  tail call void @aom_free(i8* %109) #12
  store double* null, double** %107, align 8
  br label %112

110:                                              ; preds = %112
  %111 = bitcast %struct.AV1_PRIMARY* %0 to i8*
  tail call void @aom_free(i8* nonnull %111) #12
  br label %121

112:                                              ; preds = %112, %3
  %113 = phi i64 [ 0, %3 ], [ %119, %112 ]
  %114 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 24, i32 3, i64 %113
  %115 = bitcast %struct.TplDepStats** %114 to i8**
  %116 = load i8*, i8** %115, align 8
  tail call void @aom_free(i8* %116) #12
  %117 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 24, i32 4, i64 %113
  %118 = tail call i32 @aom_free_frame_buffer(%struct.yv12_buffer_config* %117) #12
  %119 = add nuw nsw i64 %113, 1
  %120 = icmp eq i64 %119, 35
  br i1 %120, label %110, label %112

121:                                              ; preds = %1, %110
  ret void
}

declare void @av1_primary_rc_init(%struct.AV1EncoderConfig*, %struct.PRIMARY_RATE_CONTROL*) local_unnamed_addr #3

declare i32 @aom_sad16x32_sse2(i8*, i32, i8*, i32) #3

declare i32 @aom_sad16x32_avg_sse2(i8*, i32, i8*, i32, i8*) #3

declare void @aom_sad16x32x4d_sse2(i8*, i32, i8**, i32, i32*) #3

declare i32 @aom_sad16x16_sse2(i8*, i32, i8*, i32) #3

declare i32 @aom_sad16x16_avg_sse2(i8*, i32, i8*, i32, i8*) #3

declare void @aom_sad16x16x4d_sse2(i8*, i32, i8**, i32, i32*) #3

declare i32 @aom_sad16x8_sse2(i8*, i32, i8*, i32) #3

declare i32 @aom_sad16x8_avg_sse2(i8*, i32, i8*, i32, i8*) #3

declare void @aom_sad16x8x4d_sse2(i8*, i32, i8**, i32, i32*) #3

declare i32 @aom_sad8x16_sse2(i8*, i32, i8*, i32) #3

declare i32 @aom_sad8x16_avg_sse2(i8*, i32, i8*, i32, i8*) #3

declare i32 @aom_variance8x16_sse2(i8*, i32, i8*, i32, i32*) #3

declare void @aom_sad8x16x4d_sse2(i8*, i32, i8**, i32, i32*) #3

declare i32 @aom_sad8x8_sse2(i8*, i32, i8*, i32) #3

declare i32 @aom_sad8x8_avg_sse2(i8*, i32, i8*, i32, i8*) #3

declare i32 @aom_variance8x8_sse2(i8*, i32, i8*, i32, i32*) #3

declare void @aom_sad8x8x4d_sse2(i8*, i32, i8**, i32, i32*) #3

declare i32 @aom_sad8x4_sse2(i8*, i32, i8*, i32) #3

declare i32 @aom_sad8x4_avg_sse2(i8*, i32, i8*, i32, i8*) #3

declare i32 @aom_variance8x4_sse2(i8*, i32, i8*, i32, i32*) #3

declare void @aom_sad8x4x4d_sse2(i8*, i32, i8**, i32, i32*) #3

declare i32 @aom_sad4x8_sse2(i8*, i32, i8*, i32) #3

declare i32 @aom_sad4x8_avg_sse2(i8*, i32, i8*, i32, i8*) #3

declare i32 @aom_variance4x8_sse2(i8*, i32, i8*, i32, i32*) #3

declare void @aom_sad4x8x4d_sse2(i8*, i32, i8**, i32, i32*) #3

declare i32 @aom_sad4x4_sse2(i8*, i32, i8*, i32) #3

declare i32 @aom_sad4x4_avg_sse2(i8*, i32, i8*, i32, i8*) #3

declare i32 @aom_variance4x4_sse2(i8*, i32, i8*, i32, i32*) #3

declare void @aom_sad4x4x4d_sse2(i8*, i32, i8**, i32, i32*) #3

declare i32 @aom_sad_skip_16x32_sse2(i8*, i32, i8*, i32) #3

declare void @aom_sad_skip_16x32x4d_sse2(i8*, i32, i8**, i32, i32*) #3

declare i32 @aom_sad_skip_16x16_sse2(i8*, i32, i8*, i32) #3

declare void @aom_sad_skip_16x16x4d_sse2(i8*, i32, i8**, i32, i32*) #3

declare i32 @aom_sad_skip_16x8_sse2(i8*, i32, i8*, i32) #3

declare void @aom_sad_skip_16x8x4d_sse2(i8*, i32, i8**, i32, i32*) #3

declare i32 @aom_sad_skip_8x16_sse2(i8*, i32, i8*, i32) #3

declare void @aom_sad_skip_8x16x4d_sse2(i8*, i32, i8**, i32, i32*) #3

declare i32 @aom_sad_skip_8x8_sse2(i8*, i32, i8*, i32) #3

declare void @aom_sad_skip_8x8x4d_sse2(i8*, i32, i8**, i32, i32*) #3

declare i32 @aom_sad_skip_4x8_sse2(i8*, i32, i8*, i32) #3

declare void @aom_sad_skip_4x8x4d_sse2(i8*, i32, i8**, i32, i32*) #3

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @enc_set_mb_mi(%struct.CommonModeInfoParams* nocapture, i32, i32) #7 {
  %4 = icmp slt i32 %1, %2
  %5 = select i1 %4, i32 %1, i32 %2
  %6 = icmp sgt i32 %5, 2159
  %7 = select i1 %6, i8 3, i8 0
  %8 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 8
  store i8 %7, i8* %8, align 8
  %9 = add nsw i32 %1, 7
  %10 = add nsw i32 %2, 7
  %11 = ashr i32 %9, 2
  %12 = and i32 %11, -2
  %13 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 4
  store i32 %12, i32* %13, align 8
  %14 = ashr i32 %10, 2
  %15 = and i32 %14, -2
  %16 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 3
  store i32 %15, i32* %16, align 4
  %17 = add nsw i32 %12, 31
  %18 = and i32 %17, -32
  %19 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 11
  store i32 %18, i32* %19, align 4
  %20 = add nsw i32 %12, 2
  %21 = ashr i32 %20, 2
  %22 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 1
  store i32 %21, i32* %22, align 4
  %23 = add nsw i32 %15, 2
  %24 = ashr i32 %23, 2
  %25 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 0
  store i32 %24, i32* %25, align 8
  %26 = mul nsw i32 %24, %21
  %27 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 2
  store i32 %26, i32* %27, align 8
  %28 = zext i8 %7 to i64
  %29 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = add nsw i32 %18, -1
  %33 = add i32 %32, %31
  %34 = sdiv i32 %33, %31
  %35 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 7
  store i32 %34, i32* %35, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.AV1_COMP* @av1_create_compressor(%struct.AV1_PRIMARY*, %struct.AV1EncoderConfig*, %struct.BufferPool*, i8 zeroext, i32) local_unnamed_addr #2 {
  %6 = alloca %struct.AV1_COMP*, align 8
  %7 = alloca %struct.AV1Common*, align 8
  %8 = bitcast %struct.AV1_COMP** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8)
  store volatile %struct.AV1_COMP* inttoptr (i64 -6148914691236517206 to %struct.AV1_COMP*), %struct.AV1_COMP** %6, align 8
  %9 = call i8* @aom_memalign(i64 32, i64 836160) #12
  %10 = bitcast i8* %9 to %struct.AV1_COMP*
  store volatile %struct.AV1_COMP* %10, %struct.AV1_COMP** %6, align 8
  %11 = bitcast %struct.AV1Common** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  store volatile %struct.AV1Common* inttoptr (i64 -6148914691236517206 to %struct.AV1Common*), %struct.AV1Common** %7, align 8
  %12 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %13 = icmp eq %struct.AV1_COMP* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %5
  %15 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %15, i64 0, i32 8
  br label %17

17:                                               ; preds = %5, %14
  %18 = phi %struct.AV1Common* [ %16, %14 ], [ null, %5 ]
  store volatile %struct.AV1Common* %18, %struct.AV1Common** %7, align 8
  %19 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %20 = icmp eq %struct.AV1Common* %19, null
  br i1 %20, label %325, label %21

21:                                               ; preds = %17
  %22 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %23 = bitcast %struct.AV1_COMP* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %23, i8 0, i64 836160, i1 false)
  %24 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %24, i64 0, i32 0
  store %struct.AV1_PRIMARY* %0, %struct.AV1_PRIMARY** %25, align 16
  %26 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15
  %27 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %28 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %27, i64 0, i32 35
  store %struct.SequenceHeader* %26, %struct.SequenceHeader** %28, align 16
  %29 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 20
  %30 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %31 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %30, i64 0, i32 1
  store %struct.aom_internal_error_info* %29, %struct.aom_internal_error_info** %31, align 8
  %32 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %33 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %32, i64 0, i32 1
  %34 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %33, align 8
  %35 = getelementptr inbounds %struct.aom_internal_error_info, %struct.aom_internal_error_info* %34, i64 0, i32 4, i64 0
  %36 = call i32 @_setjmp(%struct.__jmp_buf_tag* %35) #13
  %37 = icmp eq i32 %36, 0
  %38 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %39 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %38, i64 0, i32 1
  %40 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %39, align 8
  %41 = getelementptr inbounds %struct.aom_internal_error_info, %struct.aom_internal_error_info* %40, i64 0, i32 3
  br i1 %37, label %44, label %42

42:                                               ; preds = %21
  store i32 0, i32* %41, align 8
  %43 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  call void @av1_remove_compressor(%struct.AV1_COMP* %43)
  br label %325

44:                                               ; preds = %21
  store i32 1, i32* %41, align 8
  %45 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %46 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %45, i64 0, i32 76
  store i8 %3, i8* %46, align 8
  %47 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %48 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %47, i64 0, i32 21, i32 13
  %49 = bitcast void (%struct.CommonModeInfoParams*)** %48 to <2 x void (%struct.CommonModeInfoParams*)*>*
  store <2 x void (%struct.CommonModeInfoParams*)*> <void (%struct.CommonModeInfoParams*)* @enc_free_mi, void (%struct.CommonModeInfoParams*)* @enc_setup_mi>, <2 x void (%struct.CommonModeInfoParams*)*>* %49, align 8
  %50 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 33
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %59, label %53

53:                                               ; preds = %44
  %54 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %55 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %54, i64 0, i32 76
  %56 = load i8, i8* %55, align 8
  %57 = icmp eq i8 %56, 1
  %58 = select i1 %57, void (%struct.CommonModeInfoParams*, i32, i32)* @stat_stage_set_mb_mi, void (%struct.CommonModeInfoParams*, i32, i32)* @enc_set_mb_mi
  br label %59

59:                                               ; preds = %53, %44
  %60 = phi void (%struct.CommonModeInfoParams*, i32, i32)* [ @stat_stage_set_mb_mi, %44 ], [ %58, %53 ]
  %61 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %47, i64 0, i32 21, i32 15
  store void (%struct.CommonModeInfoParams*, i32, i32)* %60, void (%struct.CommonModeInfoParams*, i32, i32)** %61, align 8
  %62 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %47, i64 0, i32 21, i32 8
  store i8 0, i8* %62, align 8
  %63 = call i8* @aom_memalign(i64 32, i64 21264) #12
  %64 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %65 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %64, i64 0, i32 36
  %66 = bitcast %struct.frame_contexts** %65 to i8**
  store i8* %63, i8** %66, align 8
  %67 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %68 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %67, i64 0, i32 36
  %69 = load %struct.frame_contexts*, %struct.frame_contexts** %68, align 8
  %70 = icmp eq %struct.frame_contexts* %69, null
  br i1 %70, label %71, label %75

71:                                               ; preds = %59
  %72 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %73 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %72, i64 0, i32 1
  %74 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %73, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %74, i32 2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8, i64 0, i64 0)) #12
  br label %75

75:                                               ; preds = %59, %71
  %76 = call i8* @aom_memalign(i64 32, i64 21264) #12
  %77 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %78 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %77, i64 0, i32 37
  %79 = bitcast %struct.frame_contexts** %78 to i8**
  store i8* %76, i8** %79, align 16
  %80 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %81 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %80, i64 0, i32 37
  %82 = load %struct.frame_contexts*, %struct.frame_contexts** %81, align 16
  %83 = icmp eq %struct.frame_contexts* %82, null
  br i1 %83, label %84, label %88

84:                                               ; preds = %75
  %85 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %86 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %85, i64 0, i32 1
  %87 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %86, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %87, i32 2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.9, i64 0, i64 0)) #12
  br label %88

88:                                               ; preds = %75, %84
  %89 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %90 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %89, i64 0, i32 36
  %91 = bitcast %struct.frame_contexts** %90 to i8**
  %92 = load i8*, i8** %91, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %92, i8 0, i64 21264, i1 false)
  %93 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %94 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %93, i64 0, i32 37
  %95 = bitcast %struct.frame_contexts** %94 to i8**
  %96 = load i8*, i8** %95, align 16
  call void @llvm.memset.p0i8.i64(i8* align 4 %96, i8 0, i64 21264, i1 false)
  %97 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %98 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %97, i64 0, i32 8, i32 39
  store %struct.BufferPool* %2, %struct.BufferPool** %98, align 8
  %99 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %100 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 9
  %101 = bitcast %struct.AV1EncoderConfig* %100 to i8*
  %102 = bitcast %struct.AV1EncoderConfig* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %101, i8* align 8 %102, i64 1112, i1 false) #12
  %103 = bitcast %struct.AV1EncoderConfig* %1 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 37
  %106 = bitcast double* %105 to i64*
  store i64 %104, i64* %106, align 16
  %107 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 1, i32 0
  %108 = load i32, i32* %107, align 8
  %109 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 8, i32 2
  store i32 %108, i32* %109, align 16
  %110 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 1, i32 1
  %111 = load i32, i32* %110, align 4
  %112 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 8, i32 3
  store i32 %111, i32* %112, align 4
  call fastcc void @alloc_compressor_data(%struct.AV1_COMP* %99) #12
  call void @av1_update_film_grain_parameters(%struct.AV1_COMP* %99, %struct.AV1EncoderConfig* %1) #12
  %113 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 4
  %114 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 3, i32 2
  store %struct.FRAME_COUNTS* %113, %struct.FRAME_COUNTS** %114, align 8
  %115 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 75, i32 2
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 0, i32 0>, <4 x i32>* %116, align 8
  %117 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 8, i32 48
  store i32 0, i32* %117, align 8
  %118 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 8, i32 47
  store i32 0, i32* %118, align 4
  call void @av1_change_config(%struct.AV1_COMP* %99, %struct.AV1EncoderConfig* %1, i1 zeroext true) #12
  %119 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 38
  store i32 0, i32* %119, align 8
  %120 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 54, i32 0
  store i32 0, i32* %120, align 4
  %121 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 54, i32 1
  store i32 0, i32* %121, align 4
  %122 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 8, i32 13, i64 0
  store i32 0, i32* %122, align 4
  %123 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 8, i32 13, i64 1
  store i32 1, i32* %123, align 4
  %124 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 8, i32 13, i64 2
  store i32 2, i32* %124, align 4
  %125 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 8, i32 13, i64 3
  %126 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> <i32 3, i32 4, i32 5, i32 6>, <4 x i32>* %126, align 4
  %127 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 8, i32 13, i64 7
  store i32 7, i32* %127, align 4
  %128 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 22, i32 1
  store i32 0, i32* %128, align 8
  %129 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 22, i32 2
  store i32 0, i32* %129, align 4
  %130 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %99, i64 0, i32 82
  %131 = load i32, i32* %109, align 16
  %132 = load i32, i32* %112, align 4
  call void @av1_noise_estimate_init(%struct.noise_estimate* %130, i32 %131, i32 %132) #12
  %133 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %134 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %133, i64 0, i32 76
  %135 = load i8, i8* %134, align 8
  %136 = icmp eq i8 %135, 1
  br i1 %136, label %137, label %140

137:                                              ; preds = %88
  %138 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %139 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %138, i64 0, i32 9, i32 10, i32 0
  store i32 %4, i32* %139, align 16
  br label %140

140:                                              ; preds = %137, %88
  %141 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %142 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %141, i64 0, i32 9
  %143 = load i32, i32* %50, align 4
  %144 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %145 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %144, i64 0, i32 36
  %146 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %147 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %146, i64 0, i32 0
  %148 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %147, align 16
  %149 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %148, i64 0, i32 13
  call void @av1_rc_init(%struct.AV1EncoderConfig* %142, i32 %143, %struct.RATE_CONTROL* %145, %struct.PRIMARY_RATE_CONTROL* %149) #12
  %150 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %151 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %152 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %151, i64 0, i32 35
  %153 = load %struct.SequenceHeader*, %struct.SequenceHeader** %152, align 16
  %154 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %151, i64 0, i32 2
  %155 = load i32, i32* %154, align 16
  %156 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %150, i64 0, i32 50, i32 0
  store i32 %155, i32* %156, align 4
  %157 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %151, i64 0, i32 3
  %158 = load i32, i32* %157, align 4
  %159 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %150, i64 0, i32 50, i32 1
  store i32 %158, i32* %159, align 4
  %160 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %151, i64 0, i32 21, i32 4
  %161 = load i32, i32* %160, align 8
  %162 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %150, i64 0, i32 50, i32 3
  store i32 %161, i32* %162, align 4
  %163 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %151, i64 0, i32 21, i32 3
  %164 = load i32, i32* %163, align 4
  %165 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %150, i64 0, i32 50, i32 2
  store i32 %164, i32* %165, align 4
  %166 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %151, i64 0, i32 21, i32 1
  %167 = load i32, i32* %166, align 4
  %168 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %150, i64 0, i32 50, i32 5
  store i32 %167, i32* %168, align 4
  %169 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %151, i64 0, i32 21, i32 0
  %170 = load i32, i32* %169, align 8
  %171 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %150, i64 0, i32 50, i32 4
  store i32 %170, i32* %171, align 4
  %172 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %151, i64 0, i32 21, i32 2
  %173 = load i32, i32* %172, align 8
  %174 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %150, i64 0, i32 50, i32 6
  store i32 %173, i32* %174, align 4
  %175 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %153, i64 0, i32 25
  %176 = load i32, i32* %175, align 8
  %177 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %150, i64 0, i32 50, i32 7
  store i32 %176, i32* %177, align 4
  %178 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %153, i64 0, i32 32
  %179 = load i32, i32* %178, align 8
  %180 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %150, i64 0, i32 50, i32 8
  store i32 %179, i32* %180, align 4
  %181 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %153, i64 0, i32 33
  %182 = load i32, i32* %181, align 4
  %183 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %150, i64 0, i32 50, i32 9
  store i32 %182, i32* %183, align 4
  %184 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %185 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %184, i64 0, i32 51, i32 0
  store i32 0, i32* %185, align 4
  %186 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %187 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %186, i64 0, i32 0, i32 4
  store i32 0, i32* %187, align 4
  %188 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %189 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %188, i64 0, i32 41
  store i32 -1, i32* %189, align 8
  %190 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %191 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %190, i64 0, i32 21
  store i32 0, i32* %191, align 16
  %192 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %193 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %192, i64 0, i32 55
  store %struct.TileDataEnc* null, %struct.TileDataEnc** %193, align 8
  %194 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %195 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %194, i64 0, i32 24
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %195, align 8
  %196 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  call fastcc void @realloc_segmentation_maps(%struct.AV1_COMP* %196)
  %197 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %198 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %197, i64 0, i32 25, i32 2
  store i8 0, i8* %198, align 2
  %199 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %200 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %199, i64 0, i32 35, i32 2
  store i64 9223372036854775807, i64* %200, align 8
  %201 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %202 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %201, i64 0, i32 3, i32 0, i32 9
  %203 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %204 = call i8* @aom_memalign(i64 16, i64 65536) #12
  %205 = bitcast %struct.OBMCBuffer* %202 to i8**
  store i8* %204, i8** %205, align 8
  %206 = icmp eq i8* %204, null
  br i1 %206, label %207, label %210

207:                                              ; preds = %140
  %208 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %203, i64 0, i32 1
  %209 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %208, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %209, i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.33, i64 0, i64 0)) #12
  br label %210

210:                                              ; preds = %207, %140
  %211 = call i8* @aom_memalign(i64 16, i64 65536) #12
  %212 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %201, i64 0, i32 3, i32 0, i32 9, i32 1
  %213 = bitcast i32** %212 to i8**
  store i8* %211, i8** %213, align 8
  %214 = icmp eq i8* %211, null
  br i1 %214, label %215, label %218

215:                                              ; preds = %210
  %216 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %203, i64 0, i32 1
  %217 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %216, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %217, i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.34, i64 0, i64 0)) #12
  br label %218

218:                                              ; preds = %215, %210
  %219 = call i8* @aom_memalign(i64 16, i64 49152) #12
  %220 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %201, i64 0, i32 3, i32 0, i32 9, i32 2
  store i8* %219, i8** %220, align 8
  %221 = icmp eq i8* %219, null
  br i1 %221, label %222, label %225

222:                                              ; preds = %218
  %223 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %203, i64 0, i32 1
  %224 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %223, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %224, i32 2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.35, i64 0, i64 0)) #12
  br label %225

225:                                              ; preds = %222, %218
  %226 = call i8* @aom_memalign(i64 16, i64 49152) #12
  %227 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %201, i64 0, i32 3, i32 0, i32 9, i32 3
  store i8* %226, i8** %227, align 8
  %228 = icmp eq i8* %226, null
  br i1 %228, label %229, label %232

229:                                              ; preds = %225
  %230 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %203, i64 0, i32 1
  %231 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %230, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %231, i32 2, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.36, i64 0, i64 0)) #12
  br label %232

232:                                              ; preds = %225, %229
  %233 = call i8* @aom_malloc(i64 348168) #12
  %234 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %235 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %234, i64 0, i32 3, i32 0, i32 45
  %236 = bitcast %struct.inter_modes_info** %235 to i8**
  store i8* %233, i8** %236, align 16
  %237 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %238 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %237, i64 0, i32 3, i32 0, i32 45
  %239 = load %struct.inter_modes_info*, %struct.inter_modes_info** %238, align 16
  %240 = icmp eq %struct.inter_modes_info* %239, null
  br i1 %240, label %241, label %245

241:                                              ; preds = %232
  %242 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %243 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %242, i64 0, i32 1
  %244 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %243, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %244, i32 2, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.10, i64 0, i64 0)) #12
  br label %245

245:                                              ; preds = %232, %241
  %246 = call i8* @aom_malloc(i64 16384) #12
  %247 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %248 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %247, i64 0, i32 3, i32 0, i32 50, i32 0, i64 0, i64 0
  %249 = bitcast i32** %248 to i8**
  store i8* %246, i8** %249, align 8
  %250 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %251 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %250, i64 0, i32 3, i32 0, i32 50, i32 0, i64 0, i64 0
  %252 = load i32*, i32** %251, align 8
  %253 = icmp eq i32* %252, null
  br i1 %253, label %254, label %258

254:                                              ; preds = %245
  %255 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %256 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %255, i64 0, i32 1
  %257 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %256, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %257, i32 2, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.11, i64 0, i64 0)) #12
  br label %258

258:                                              ; preds = %245, %254
  %259 = call i8* @aom_malloc(i64 16384) #12
  %260 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %261 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %260, i64 0, i32 3, i32 0, i32 50, i32 0, i64 0, i64 1
  %262 = bitcast i32** %261 to i8**
  store i8* %259, i8** %262, align 8
  %263 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %264 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %263, i64 0, i32 3, i32 0, i32 50, i32 0, i64 0, i64 1
  %265 = load i32*, i32** %264, align 8
  %266 = icmp eq i32* %265, null
  br i1 %266, label %327, label %331

267:                                              ; preds = %357
  %268 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %269 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %268, i64 0, i32 1
  %270 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %269, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %270, i32 2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.12, i64 0, i64 0)) #12
  br label %271

271:                                              ; preds = %357, %267
  %272 = load i32, i32* %367, align 8
  %273 = add nsw i32 %272, 3
  %274 = sdiv i32 %273, 4
  %275 = load i32, i32* %365, align 4
  %276 = add nsw i32 %275, 3
  %277 = sdiv i32 %276, 4
  %278 = mul nsw i32 %277, %274
  %279 = sext i32 %278 to i64
  %280 = call i8* @aom_calloc(i64 %279, i64 8) #12
  %281 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %282 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %281, i64 0, i32 74
  %283 = bitcast double** %282 to i8**
  store i8* %280, i8** %283, align 8
  %284 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %285 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %284, i64 0, i32 74
  %286 = load double*, double** %285, align 8
  %287 = icmp eq double* %286, null
  br i1 %287, label %288, label %292

288:                                              ; preds = %271
  %289 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %290 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %289, i64 0, i32 1
  %291 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %290, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %291, i32 2, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.13, i64 0, i64 0)) #12
  br label %292

292:                                              ; preds = %271, %288
  %293 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %294 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %293, i64 0, i32 2
  %295 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %296 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %295, i64 0, i32 22
  %297 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %298 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %297, i64 0, i32 35
  %299 = load %struct.SequenceHeader*, %struct.SequenceHeader** %298, align 16
  %300 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %299, i64 0, i32 25
  %301 = load i32, i32* %300, align 8
  call void @av1_init_quantizer(%struct.EncQuantDequantParams* %294, %struct.CommonQuantParams* %296, i32 %301) #12
  %302 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %303 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %302, i64 0, i32 22
  %304 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %305 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %304, i64 0, i32 35
  %306 = load %struct.SequenceHeader*, %struct.SequenceHeader** %305, align 16
  %307 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %306, i64 0, i32 27
  %308 = load i8, i8* %307, align 1
  %309 = icmp eq i8 %308, 0
  %310 = select i1 %309, i32 3, i32 1
  call void @av1_qm_init(%struct.CommonQuantParams* %303, i32 %310) #12
  %311 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  call void @av1_loop_filter_init(%struct.AV1Common* %311) #12
  %312 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %313 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %312, i64 0, i32 8
  store i8 8, i8* %313, align 8
  %314 = load i32, i32* %107, align 8
  %315 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %316 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %315, i64 0, i32 6
  store i32 %314, i32* %316, align 16
  %317 = load i32, i32* %110, align 4
  %318 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %319 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %318, i64 0, i32 7
  store i32 %317, i32* %319, align 4
  %320 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %321 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %320, i64 0, i32 1
  %322 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %321, align 8
  %323 = getelementptr inbounds %struct.aom_internal_error_info, %struct.aom_internal_error_info* %322, i64 0, i32 3
  store i32 0, i32* %323, align 8
  %324 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  br label %325

325:                                              ; preds = %17, %292, %42
  %326 = phi %struct.AV1_COMP* [ null, %42 ], [ %324, %292 ], [ null, %17 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8)
  ret %struct.AV1_COMP* %326

327:                                              ; preds = %258
  %328 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %329 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %328, i64 0, i32 1
  %330 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %329, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %330, i32 2, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.11, i64 0, i64 0)) #12
  br label %331

331:                                              ; preds = %327, %258
  %332 = call i8* @aom_malloc(i64 16384) #12
  %333 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %334 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %333, i64 0, i32 3, i32 0, i32 50, i32 0, i64 1, i64 0
  %335 = bitcast i32** %334 to i8**
  store i8* %332, i8** %335, align 8
  %336 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %337 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %336, i64 0, i32 3, i32 0, i32 50, i32 0, i64 1, i64 0
  %338 = load i32*, i32** %337, align 8
  %339 = icmp eq i32* %338, null
  br i1 %339, label %340, label %344

340:                                              ; preds = %331
  %341 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %342 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %341, i64 0, i32 1
  %343 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %342, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %343, i32 2, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.11, i64 0, i64 0)) #12
  br label %344

344:                                              ; preds = %340, %331
  %345 = call i8* @aom_malloc(i64 16384) #12
  %346 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %347 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %346, i64 0, i32 3, i32 0, i32 50, i32 0, i64 1, i64 1
  %348 = bitcast i32** %347 to i8**
  store i8* %345, i8** %348, align 8
  %349 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %350 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %349, i64 0, i32 3, i32 0, i32 50, i32 0, i64 1, i64 1
  %351 = load i32*, i32** %350, align 8
  %352 = icmp eq i32* %351, null
  br i1 %352, label %353, label %357

353:                                              ; preds = %344
  %354 = load volatile %struct.AV1Common*, %struct.AV1Common** %7, align 8
  %355 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %354, i64 0, i32 1
  %356 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %355, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %356, i32 2, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.11, i64 0, i64 0)) #12
  br label %357

357:                                              ; preds = %353, %344
  %358 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %359 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %358, i64 0, i32 3, i32 0, i32 50, i32 4
  store i32 0, i32* %359, align 8
  %360 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %361 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 30
  %362 = load i32, i32* %361, align 4
  call void @av1_set_speed_features_framesize_independent(%struct.AV1_COMP* %360, i32 %362) #12
  %363 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %364 = load i32, i32* %361, align 4
  call void @av1_set_speed_features_framesize_dependent(%struct.AV1_COMP* %363, i32 %364) #12
  %365 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %47, i64 0, i32 21, i32 3
  %366 = load i32, i32* %365, align 4
  %367 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %47, i64 0, i32 21, i32 4
  %368 = load i32, i32* %367, align 8
  %369 = mul nsw i32 %368, %366
  %370 = ashr i32 %369, 2
  %371 = sext i32 %370 to i64
  %372 = call i8* @aom_calloc(i64 %371, i64 1) #12
  %373 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %374 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %373, i64 0, i32 84
  store i8* %372, i8** %374, align 16
  %375 = load volatile %struct.AV1_COMP*, %struct.AV1_COMP** %6, align 8
  %376 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %375, i64 0, i32 84
  %377 = load i8*, i8** %376, align 16
  %378 = icmp eq i8* %377, null
  br i1 %378, label %267, label %271
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_remove_compressor(%struct.AV1_COMP*) local_unnamed_addr #2 {
  %2 = icmp eq %struct.AV1_COMP* %0, null
  br i1 %2, label %334, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83
  tail call void @av1_denoiser_free(%struct.av1_denoiser* %5) #12
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %7 = load i8, i8* %6, align 8
  %8 = icmp eq i8 %7, 1
  br i1 %8, label %142, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %142

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 4
  %15 = sext i32 %11 to i64
  br label %16

16:                                               ; preds = %16, %13
  %17 = phi i64 [ %15, %13 ], [ %18, %16 ]
  %18 = add nsw i64 %17, -1
  %19 = load %struct.AVxWorker*, %struct.AVxWorker** %14, align 8
  %20 = getelementptr inbounds %struct.AVxWorker, %struct.AVxWorker* %19, i64 %18
  %21 = tail call %struct.AVxWorkerInterface* @aom_get_worker_interface() #12
  %22 = getelementptr inbounds %struct.AVxWorkerInterface, %struct.AVxWorkerInterface* %21, i64 0, i32 5
  %23 = load void (%struct.AVxWorker*)*, void (%struct.AVxWorker*)** %22, align 8
  tail call void %23(%struct.AVxWorker* %20) #12
  %24 = icmp sgt i64 %18, 0
  br i1 %24, label %16, label %25

25:                                               ; preds = %16
  %26 = load i32, i32* %10, align 8
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %142

28:                                               ; preds = %25
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 5
  %30 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  br label %31

31:                                               ; preds = %137, %28
  %32 = phi i64 [ 0, %28 ], [ %138, %137 ]
  %33 = load %struct.EncWorkerData*, %struct.EncWorkerData** %29, align 8
  %34 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %33, i64 %32, i32 1
  %35 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %36 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %35, i64 0, i32 18
  %37 = bitcast %struct.frame_contexts** %36 to i8**
  %38 = load i8*, i8** %37, align 8
  tail call void @aom_free(i8* %38) #12
  %39 = icmp eq i64 %32, 0
  br i1 %39, label %137, label %40

40:                                               ; preds = %31
  %41 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %42 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %41, i64 0, i32 9
  %43 = bitcast %struct.PALETTE_BUFFER** %42 to i8**
  %44 = load i8*, i8** %43, align 16
  tail call void @aom_free(i8* %44) #12
  %45 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %46 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %45, i64 0, i32 11
  %47 = bitcast i16** %46 to i8**
  %48 = load i8*, i8** %47, align 16
  tail call void @aom_free(i8* %48) #12
  %49 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %50 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %49, i64 0, i32 10
  %51 = getelementptr inbounds %struct.CompoundTypeRdBuffers, %struct.CompoundTypeRdBuffers* %50, i64 0, i32 0
  %52 = load i8*, i8** %51, align 8
  tail call void @aom_free(i8* %52) #12
  %53 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %49, i64 0, i32 10, i32 1
  %54 = load i8*, i8** %53, align 8
  tail call void @aom_free(i8* %54) #12
  %55 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %49, i64 0, i32 10, i32 2
  %56 = bitcast i16** %55 to i8**
  %57 = load i8*, i8** %56, align 8
  tail call void @aom_free(i8* %57) #12
  %58 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %49, i64 0, i32 10, i32 3
  %59 = bitcast i16** %58 to i8**
  %60 = load i8*, i8** %59, align 8
  tail call void @aom_free(i8* %60) #12
  %61 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %49, i64 0, i32 10, i32 4
  %62 = load i8*, i8** %61, align 8
  tail call void @aom_free(i8* %62) #12
  %63 = bitcast %struct.CompoundTypeRdBuffers* %50 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 40, i1 false) #12
  %64 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %65 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %64, i64 0, i32 12, i64 0
  %66 = load i8*, i8** %65, align 8
  tail call void @aom_free(i8* %66) #12
  %67 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %68 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %67, i64 0, i32 12, i64 1
  %69 = load i8*, i8** %68, align 8
  tail call void @aom_free(i8* %69) #12
  %70 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %71 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %70, i64 0, i32 24
  %72 = bitcast %struct.PixelLevelGradientInfo** %71 to i8**
  %73 = load i8*, i8** %72, align 16
  tail call void @aom_free(i8* %73) #12
  %74 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %75 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %74, i64 0, i32 8
  %76 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %74, i64 0, i32 8, i32 1
  %77 = bitcast i32** %76 to i8**
  %78 = load i8*, i8** %77, align 8
  tail call void @aom_free(i8* %78) #12
  %79 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %74, i64 0, i32 8, i32 2
  %80 = load i8*, i8** %79, align 8
  tail call void @aom_free(i8* %80) #12
  %81 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %74, i64 0, i32 8, i32 3
  %82 = load i8*, i8** %81, align 8
  tail call void @aom_free(i8* %82) #12
  %83 = bitcast %struct.OBMCBuffer* %75 to i8**
  %84 = load i8*, i8** %83, align 8
  tail call void @aom_free(i8* %84) #12
  %85 = bitcast %struct.OBMCBuffer* %75 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 32, i1 false) #12
  %86 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %87 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %86, i64 0, i32 19
  %88 = bitcast %struct.VP64x64** %87 to i8**
  %89 = load i8*, i8** %88, align 16
  tail call void @aom_free(i8* %89) #12
  %90 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %91 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %90, i64 0, i32 6
  %92 = bitcast %struct.inter_modes_info** %91 to i8**
  %93 = load i8*, i8** %92, align 8
  tail call void @aom_free(i8* %93) #12
  %94 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %95 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %94, i64 0, i32 7, i64 0, i64 0
  %96 = bitcast i32** %95 to i8**
  %97 = load i8*, i8** %96, align 8
  tail call void @aom_free(i8* %97) #12
  %98 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %99 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %98, i64 0, i32 7, i64 0, i64 0
  store i32* null, i32** %99, align 8
  %100 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %101 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %100, i64 0, i32 7, i64 0, i64 1
  %102 = bitcast i32** %101 to i8**
  %103 = load i8*, i8** %102, align 8
  tail call void @aom_free(i8* %103) #12
  %104 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %105 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %104, i64 0, i32 7, i64 0, i64 1
  store i32* null, i32** %105, align 8
  %106 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %107 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %106, i64 0, i32 7, i64 1, i64 0
  %108 = bitcast i32** %107 to i8**
  %109 = load i8*, i8** %108, align 8
  tail call void @aom_free(i8* %109) #12
  %110 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %111 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %110, i64 0, i32 7, i64 1, i64 0
  store i32* null, i32** %111, align 8
  %112 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %113 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %112, i64 0, i32 7, i64 1, i64 1
  %114 = bitcast i32** %113 to i8**
  %115 = load i8*, i8** %114, align 8
  tail call void @aom_free(i8* %115) #12
  %116 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %117 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %116, i64 0, i32 7, i64 1, i64 1
  store i32* null, i32** %117, align 8
  %118 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %119 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %118, i64 0, i32 2
  %120 = bitcast %struct.FRAME_COUNTS** %119 to i8**
  %121 = load i8*, i8** %120, align 8
  tail call void @aom_free(i8* %121) #12
  %122 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %123 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %122, i64 0, i32 21
  %124 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %123, align 16
  %125 = load %struct.SequenceHeader*, %struct.SequenceHeader** %30, align 16
  %126 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %125, i64 0, i32 27
  %127 = load i8, i8* %126, align 1
  %128 = icmp eq i8 %127, 0
  %129 = select i1 %128, i32 3, i32 1
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %124, i32 %129) #12
  %130 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %131 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %130, i64 0, i32 21
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %131, align 16
  %132 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  %133 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %132, i64 0, i32 3
  tail call void @av1_free_shared_coeff_buffer(%struct.PC_TREE_SHARED_BUFFERS* %133) #12
  %134 = load %struct.ThreadData*, %struct.ThreadData** %34, align 8
  tail call void @av1_free_sms_tree(%struct.ThreadData* %134) #12
  %135 = bitcast %struct.ThreadData** %34 to i8**
  %136 = load i8*, i8** %135, align 8
  tail call void @aom_free(i8* %136) #12
  br label %137

137:                                              ; preds = %40, %31
  %138 = add nuw nsw i64 %32, 1
  %139 = load i32, i32* %10, align 8
  %140 = sext i32 %139 to i64
  %141 = icmp slt i64 %138, %140
  br i1 %141, label %31, label %142

142:                                              ; preds = %137, %9, %25, %3
  %143 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 7, i32 5
  %144 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %143, align 8
  %145 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 12, i32 2
  %146 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %145, align 8
  %147 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 11, i32 0
  %148 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %147, align 8
  %149 = icmp eq %union.pthread_mutex_t* %144, null
  br i1 %149, label %153, label %150

150:                                              ; preds = %142
  %151 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* nonnull %144) #12
  %152 = bitcast %union.pthread_mutex_t* %144 to i8*
  tail call void @aom_free(i8* nonnull %152) #12
  br label %153

153:                                              ; preds = %142, %150
  %154 = icmp eq %union.pthread_mutex_t* %146, null
  br i1 %154, label %158, label %155

155:                                              ; preds = %153
  %156 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* nonnull %146) #12
  %157 = bitcast %union.pthread_mutex_t* %146 to i8*
  tail call void @aom_free(i8* nonnull %157) #12
  br label %158

158:                                              ; preds = %153, %155
  %159 = icmp eq %union.pthread_mutex_t* %148, null
  br i1 %159, label %163, label %160

160:                                              ; preds = %158
  %161 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* nonnull %148) #12
  %162 = bitcast %union.pthread_mutex_t* %148 to i8*
  tail call void @aom_free(i8* nonnull %162) #12
  br label %163

163:                                              ; preds = %158, %160
  tail call void @av1_row_mt_mem_dealloc(%struct.AV1_COMP* nonnull %0) #12
  %164 = load i8, i8* %6, align 8
  %165 = icmp eq i8 %164, 1
  br i1 %165, label %173, label %166

166:                                              ; preds = %163
  %167 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 5
  %168 = bitcast %struct.EncWorkerData** %167 to i8**
  %169 = load i8*, i8** %168, align 8
  tail call void @aom_free(i8* %169) #12
  %170 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 4
  %171 = bitcast %struct.AVxWorker** %170 to i8**
  %172 = load i8*, i8** %171, align 8
  tail call void @aom_free(i8* %172) #12
  br label %173

173:                                              ; preds = %163, %166
  %174 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 0
  %175 = load i32, i32* %174, align 8
  %176 = icmp sgt i32 %175, 1
  br i1 %176, label %177, label %180

177:                                              ; preds = %173
  %178 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 9
  tail call void @av1_loop_filter_dealloc(%struct.AV1LfSyncData* %178) #12
  %179 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 14
  tail call void @av1_cdef_mt_dealloc(%struct.AV1CdefSyncData* %179) #12
  br label %180

180:                                              ; preds = %177, %173
  %181 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 57
  %182 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 0
  %183 = load %struct.MB_MODE_INFO_EXT_FRAME*, %struct.MB_MODE_INFO_EXT_FRAME** %182, align 8
  %184 = icmp eq %struct.MB_MODE_INFO_EXT_FRAME* %183, null
  br i1 %184, label %188, label %185

185:                                              ; preds = %180
  %186 = bitcast %struct.MB_MODE_INFO_EXT_FRAME* %183 to i8*
  tail call void @aom_free(i8* nonnull %186) #12
  store %struct.MB_MODE_INFO_EXT_FRAME* null, %struct.MB_MODE_INFO_EXT_FRAME** %182, align 8
  %187 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 5, i32 1
  store i32 0, i32* %187, align 8
  br label %188

188:                                              ; preds = %185, %180
  %189 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 55
  %190 = bitcast %struct.TileDataEnc** %189 to i8**
  %191 = load i8*, i8** %190, align 8
  tail call void @aom_free(i8* %191) #12
  store %struct.TileDataEnc* null, %struct.TileDataEnc** %189, align 8
  %192 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 43, i32 0
  %193 = load i8*, i8** %192, align 8
  tail call void @aom_free(i8* %193) #12
  store i8* null, i8** %192, align 8
  %194 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 44
  %195 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %194, align 8
  tail call void @av1_cyclic_refresh_free(%struct.CYCLIC_REFRESH* %195) #12
  store %struct.CYCLIC_REFRESH* null, %struct.CYCLIC_REFRESH** %194, align 8
  %196 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 45, i32 2
  %197 = load i8*, i8** %196, align 8
  tail call void @aom_free(i8* %197) #12
  store i8* null, i8** %196, align 8
  %198 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 74
  %199 = bitcast double** %198 to i8**
  %200 = load i8*, i8** %199, align 8
  tail call void @aom_free(i8* %200) #12
  store double* null, double** %198, align 8
  %201 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3
  %202 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 9
  %203 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 9, i32 1
  %204 = bitcast i32** %203 to i8**
  %205 = load i8*, i8** %204, align 8
  tail call void @aom_free(i8* %205) #12
  %206 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 9, i32 2
  %207 = load i8*, i8** %206, align 8
  tail call void @aom_free(i8* %207) #12
  %208 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 9, i32 3
  %209 = load i8*, i8** %208, align 8
  tail call void @aom_free(i8* %209) #12
  %210 = bitcast %struct.OBMCBuffer* %202 to i8**
  %211 = load i8*, i8** %210, align 8
  tail call void @aom_free(i8* %211) #12
  %212 = bitcast %struct.OBMCBuffer* %202 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %212, i8 0, i64 32, i1 false) #12
  %213 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 21
  %214 = load %struct.MvCosts*, %struct.MvCosts** %213, align 16
  %215 = icmp eq %struct.MvCosts* %214, null
  br i1 %215, label %218, label %216

216:                                              ; preds = %188
  %217 = bitcast %struct.MvCosts* %214 to i8*
  tail call void @aom_free(i8* nonnull %217) #12
  store %struct.MvCosts* null, %struct.MvCosts** %213, align 16
  br label %218

218:                                              ; preds = %216, %188
  %219 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 22
  %220 = load %struct.IntraBCMVCosts*, %struct.IntraBCMVCosts** %219, align 8
  %221 = icmp eq %struct.IntraBCMVCosts* %220, null
  br i1 %221, label %224, label %222

222:                                              ; preds = %218
  %223 = bitcast %struct.IntraBCMVCosts* %220 to i8*
  tail call void @aom_free(i8* nonnull %223) #12
  store %struct.IntraBCMVCosts* null, %struct.IntraBCMVCosts** %219, align 8
  br label %224

224:                                              ; preds = %222, %218
  %225 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 45
  %226 = bitcast %struct.inter_modes_info** %225 to i8**
  %227 = load i8*, i8** %226, align 16
  tail call void @aom_free(i8* %227) #12
  store %struct.inter_modes_info* null, %struct.inter_modes_info** %225, align 16
  %228 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 50, i32 0, i64 0, i64 0
  %229 = bitcast i32** %228 to i8**
  %230 = load i8*, i8** %229, align 8
  tail call void @aom_free(i8* %230) #12
  store i32* null, i32** %228, align 8
  %231 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 50, i32 0, i64 0, i64 1
  %232 = bitcast i32** %231 to i8**
  %233 = load i8*, i8** %232, align 8
  tail call void @aom_free(i8* %233) #12
  store i32* null, i32** %231, align 8
  %234 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 50, i32 0, i64 1, i64 0
  %235 = bitcast i32** %234 to i8**
  %236 = load i8*, i8** %235, align 8
  tail call void @aom_free(i8* %236) #12
  store i32* null, i32** %234, align 8
  %237 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 50, i32 0, i64 1, i64 1
  %238 = bitcast i32** %237 to i8**
  %239 = load i8*, i8** %238, align 8
  tail call void @aom_free(i8* %239) #12
  store i32* null, i32** %237, align 8
  %240 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 43
  %241 = bitcast %struct.TPL_MV_REF** %240 to i8**
  %242 = load i8*, i8** %241, align 16
  tail call void @aom_free(i8* %242) #12
  store %struct.TPL_MV_REF* null, %struct.TPL_MV_REF** %240, align 16
  %243 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 19
  %244 = load %struct.VP64x64*, %struct.VP64x64** %243, align 16
  %245 = icmp eq %struct.VP64x64* %244, null
  br i1 %245, label %248, label %246

246:                                              ; preds = %224
  %247 = bitcast %struct.VP64x64* %244 to i8*
  tail call void @aom_free(i8* nonnull %247) #12
  store %struct.VP64x64* null, %struct.VP64x64** %243, align 16
  br label %248

248:                                              ; preds = %246, %224
  %249 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 21
  %250 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %249, align 16
  %251 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %252 = load %struct.SequenceHeader*, %struct.SequenceHeader** %251, align 16
  %253 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %252, i64 0, i32 27
  %254 = load i8, i8* %253, align 1
  %255 = icmp eq i8 %254, 0
  %256 = select i1 %255, i32 3, i32 1
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %250, i32 %256) #12
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %249, align 16
  tail call void @av1_free_txb_buf(%struct.AV1_COMP* %0) #12
  tail call void @av1_free_context_buffers(%struct.AV1Common* %4) #12
  %257 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 28
  %258 = tail call i32 @aom_free_frame_buffer(%struct.yv12_buffer_config* %257) #12
  %259 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %260 = load i32, i32* %259, align 4
  %261 = icmp eq i32 %260, 1
  br i1 %261, label %270, label %262

262:                                              ; preds = %248
  %263 = load i8, i8* %6, align 8
  %264 = icmp eq i8 %263, 1
  br i1 %264, label %270, label %265

265:                                              ; preds = %262
  %266 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 15
  %267 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 14
  %268 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 7
  %269 = load i32, i32* %268, align 4
  tail call void @av1_free_cdef_buffers(%struct.AV1Common* %4, %struct.AV1CdefWorker** %266, %struct.AV1CdefSyncData* %267, i32 %269) #12
  br label %270

270:                                              ; preds = %265, %262, %248
  %271 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 29
  %272 = tail call i32 @aom_free_frame_buffer(%struct.yv12_buffer_config* %271) #12
  %273 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 15
  %274 = tail call i32 @aom_free_frame_buffer(%struct.yv12_buffer_config* %273) #12
  %275 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 17
  %276 = tail call i32 @aom_free_frame_buffer(%struct.yv12_buffer_config* %275) #12
  %277 = getelementptr inbounds %struct.TokenInfo, %struct.TokenInfo* %181, i64 0, i32 0, i64 0, i64 0
  %278 = bitcast %struct.TokenInfo* %181 to i8**
  %279 = load i8*, i8** %278, align 8
  tail call void @aom_free(i8* %279) #12
  store %struct.TokenExtra* null, %struct.TokenExtra** %277, align 8
  %280 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 57, i32 1, i64 0, i64 0
  %281 = bitcast %struct.TokenList** %280 to i8**
  %282 = load i8*, i8** %281, align 8
  tail call void @aom_free(i8* %282) #12
  store %struct.TokenList* null, %struct.TokenList** %280, align 8
  %283 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 3
  tail call void @av1_free_shared_coeff_buffer(%struct.PC_TREE_SHARED_BUFFERS* %283) #12
  tail call void @av1_free_sms_tree(%struct.ThreadData* %201) #12
  %284 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 10
  %285 = bitcast %struct.PALETTE_BUFFER** %284 to i8**
  %286 = load i8*, i8** %285, align 16
  tail call void @aom_free(i8* %286) #12
  %287 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 11
  %288 = getelementptr inbounds %struct.CompoundTypeRdBuffers, %struct.CompoundTypeRdBuffers* %287, i64 0, i32 0
  %289 = load i8*, i8** %288, align 8
  tail call void @aom_free(i8* %289) #12
  %290 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 11, i32 1
  %291 = load i8*, i8** %290, align 8
  tail call void @aom_free(i8* %291) #12
  %292 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 11, i32 2
  %293 = bitcast i16** %292 to i8**
  %294 = load i8*, i8** %293, align 8
  tail call void @aom_free(i8* %294) #12
  %295 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 11, i32 3
  %296 = bitcast i16** %295 to i8**
  %297 = load i8*, i8** %296, align 8
  tail call void @aom_free(i8* %297) #12
  %298 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 11, i32 4
  %299 = load i8*, i8** %298, align 8
  tail call void @aom_free(i8* %299) #12
  %300 = bitcast %struct.CompoundTypeRdBuffers* %287 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %300, i8 0, i64 40, i1 false) #12
  %301 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 12
  %302 = bitcast i16** %301 to i8**
  %303 = load i8*, i8** %302, align 16
  tail call void @aom_free(i8* %303) #12
  %304 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 14, i64 0
  %305 = load i8*, i8** %304, align 8
  tail call void @aom_free(i8* %305) #12
  %306 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 14, i64 1
  %307 = load i8*, i8** %306, align 8
  tail call void @aom_free(i8* %307) #12
  %308 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 53
  %309 = bitcast %struct.PixelLevelGradientInfo** %308 to i8**
  %310 = load i8*, i8** %309, align 8
  tail call void @aom_free(i8* %310) #12
  %311 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 67
  %312 = load %struct.aom_denoise_and_model_t*, %struct.aom_denoise_and_model_t** %311, align 8
  %313 = icmp eq %struct.aom_denoise_and_model_t* %312, null
  br i1 %313, label %315, label %314

314:                                              ; preds = %270
  tail call void @aom_denoise_and_model_free(%struct.aom_denoise_and_model_t* nonnull %312) #12
  store %struct.aom_denoise_and_model_t* null, %struct.aom_denoise_and_model_t** %311, align 8
  br label %315

315:                                              ; preds = %314, %270
  %316 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 66
  %317 = load %struct.aom_film_grain_table_t*, %struct.aom_film_grain_table_t** %316, align 16
  %318 = icmp eq %struct.aom_film_grain_table_t* %317, null
  br i1 %318, label %320, label %319

319:                                              ; preds = %315
  tail call void @aom_film_grain_table_free(%struct.aom_film_grain_table_t* nonnull %317) #12
  store %struct.aom_film_grain_table_t* null, %struct.aom_film_grain_table_t** %316, align 16
  br label %320

320:                                              ; preds = %319, %315
  %321 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %322 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %321, align 16
  %323 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %322, i64 0, i32 16
  %324 = load i32, i32* %323, align 8
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %327, label %326

326:                                              ; preds = %320
  tail call void @av1_free_svc_cyclic_refresh(%struct.AV1_COMP* %0) #12
  br label %327

327:                                              ; preds = %326, %320
  %328 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 84
  %329 = load i8*, i8** %328, align 16
  %330 = icmp eq i8* %329, null
  br i1 %330, label %332, label %331

331:                                              ; preds = %327
  tail call void @aom_free(i8* nonnull %329) #12
  store i8* null, i8** %328, align 16
  br label %332

332:                                              ; preds = %327, %331
  tail call void @av1_remove_common(%struct.AV1Common* %4) #12
  %333 = bitcast %struct.AV1_COMP* %0 to i8*
  tail call void @aom_free(i8* nonnull %333) #12
  br label %334

334:                                              ; preds = %1, %332
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @enc_free_mi(%struct.CommonModeInfoParams* nocapture) #5 {
  %2 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 5
  %3 = bitcast %struct.MB_MODE_INFO** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  tail call void @aom_free(i8* %4) #12
  store %struct.MB_MODE_INFO* null, %struct.MB_MODE_INFO** %2, align 8
  %5 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 9
  %6 = bitcast %struct.MB_MODE_INFO*** %5 to i8**
  %7 = load i8*, i8** %6, align 8
  tail call void @aom_free(i8* %7) #12
  store %struct.MB_MODE_INFO** null, %struct.MB_MODE_INFO*** %5, align 8
  %8 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 6
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 12
  %10 = load i8*, i8** %9, align 8
  tail call void @aom_free(i8* %10) #12
  store i8* null, i8** %9, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @enc_setup_mi(%struct.CommonModeInfoParams* nocapture readonly) #5 {
  %2 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 11
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = add nsw i32 %5, 31
  %7 = and i32 %6, -32
  %8 = mul nsw i32 %7, %3
  %9 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 5
  %10 = bitcast %struct.MB_MODE_INFO** %9 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 6
  %13 = load i32, i32* %12, align 8
  %14 = sext i32 %13 to i64
  %15 = mul nsw i64 %14, 184
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %15, i1 false)
  %16 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 9
  %17 = bitcast %struct.MB_MODE_INFO*** %16 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = sext i32 %8 to i64
  %20 = shl nsw i64 %19, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 %20, i1 false)
  %21 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 12
  %22 = load i8*, i8** %21, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 0, i64 %19, i1 false)
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal void @stat_stage_set_mb_mi(%struct.CommonModeInfoParams* nocapture, i32, i32) #7 {
  %4 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 8
  store i8 6, i8* %4, align 8
  %5 = add nsw i32 %1, 7
  %6 = add nsw i32 %2, 7
  %7 = ashr i32 %5, 2
  %8 = and i32 %7, -2
  %9 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 4
  store i32 %8, i32* %9, align 8
  %10 = ashr i32 %6, 2
  %11 = and i32 %10, -2
  %12 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 3
  store i32 %11, i32* %12, align 4
  %13 = add nsw i32 %8, 31
  %14 = and i32 %13, -32
  %15 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 11
  store i32 %14, i32* %15, align 4
  %16 = add nsw i32 %8, 2
  %17 = ashr i32 %16, 2
  %18 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = add nsw i32 %11, 2
  %20 = ashr i32 %19, 2
  %21 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 0
  store i32 %20, i32* %21, align 8
  %22 = mul nsw i32 %20, %17
  %23 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 2
  store i32 %22, i32* %23, align 8
  %24 = or i32 %14, 3
  %25 = sdiv i32 %24, 4
  %26 = getelementptr inbounds %struct.CommonModeInfoParams, %struct.CommonModeInfoParams* %0, i64 0, i32 7
  store i32 %25, i32* %26, align 4
  ret void
}

declare void @av1_rc_init(%struct.AV1EncoderConfig*, i32, %struct.RATE_CONTROL*, %struct.PRIMARY_RATE_CONTROL*) local_unnamed_addr #3

declare void @av1_set_speed_features_framesize_independent(%struct.AV1_COMP*, i32) local_unnamed_addr #3

declare void @av1_set_speed_features_framesize_dependent(%struct.AV1_COMP*, i32) local_unnamed_addr #3

declare void @av1_init_quantizer(%struct.EncQuantDequantParams*, %struct.CommonQuantParams*, i32) local_unnamed_addr #3

declare void @av1_qm_init(%struct.CommonQuantParams*, i32) local_unnamed_addr #3

declare void @av1_loop_filter_init(%struct.AV1Common*) local_unnamed_addr #3

declare i32 @aom_free_frame_buffer(%struct.yv12_buffer_config*) local_unnamed_addr #3

declare void @aom_free(i8*) local_unnamed_addr #3

declare void @av1_lookahead_destroy(%struct.lookahead_ctx*) local_unnamed_addr #3

declare void @av1_denoiser_free(%struct.av1_denoiser*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #8

declare void @av1_row_mt_mem_dealloc(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_loop_filter_dealloc(%struct.AV1LfSyncData*) local_unnamed_addr #3

declare void @av1_cdef_mt_dealloc(%struct.AV1CdefSyncData*) local_unnamed_addr #3

declare void @av1_remove_common(%struct.AV1Common*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @av1_use_as_reference(i32* nocapture, i32) local_unnamed_addr #9 {
  %3 = icmp sgt i32 %1, 127
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  store i32 %1, i32* %0, align 4
  br label %5

5:                                                ; preds = %2, %4
  %6 = phi i32 [ 0, %4 ], [ -1, %2 ]
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_copy_reference_enc(%struct.AV1_COMP* nocapture readonly, i32, %struct.yv12_buffer_config*) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %5 = load %struct.SequenceHeader*, %struct.SequenceHeader** %4, align 16
  %6 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %5, i64 0, i32 27
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = select i1 %8, i32 3, i32 1
  %10 = icmp ugt i32 %1, 7
  br i1 %10, label %20, label %11

11:                                               ; preds = %3
  %12 = sext i32 %1 to i64
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %12
  %14 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %13, align 8
  %15 = icmp eq %struct.RefCntBuffer* %14, null
  %16 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %14, i64 0, i32 17
  %17 = icmp eq %struct.yv12_buffer_config* %16, null
  %18 = or i1 %15, %17
  br i1 %18, label %20, label %19

19:                                               ; preds = %11
  tail call void @aom_yv12_copy_frame_c(%struct.yv12_buffer_config* nonnull %16, %struct.yv12_buffer_config* %2, i32 %9) #12
  br label %20

20:                                               ; preds = %11, %3, %19
  %21 = phi i32 [ 0, %19 ], [ -1, %3 ], [ -1, %11 ]
  ret i32 %21
}

declare void @aom_yv12_copy_frame_c(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_set_reference_enc(%struct.AV1_COMP* nocapture readonly, i32, %struct.yv12_buffer_config*) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %5 = load %struct.SequenceHeader*, %struct.SequenceHeader** %4, align 16
  %6 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %5, i64 0, i32 27
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = select i1 %8, i32 3, i32 1
  %10 = icmp ugt i32 %1, 7
  br i1 %10, label %20, label %11

11:                                               ; preds = %3
  %12 = sext i32 %1 to i64
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %12
  %14 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %13, align 8
  %15 = icmp eq %struct.RefCntBuffer* %14, null
  %16 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %14, i64 0, i32 17
  %17 = icmp eq %struct.yv12_buffer_config* %16, null
  %18 = or i1 %15, %17
  br i1 %18, label %20, label %19

19:                                               ; preds = %11
  tail call void @aom_yv12_copy_frame_c(%struct.yv12_buffer_config* %2, %struct.yv12_buffer_config* nonnull %16, i32 %9) #12
  br label %20

20:                                               ; preds = %11, %3, %19
  %21 = phi i32 [ 0, %19 ], [ -1, %3 ], [ -1, %11 ]
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_set_screen_content_options(%struct.AV1_COMP*, %struct.FeatureFlags* nocapture) local_unnamed_addr #2 {
  %3 = alloca [256 x i32], align 16
  %4 = alloca i32, align 4
  %5 = alloca %struct.buf_2d, align 8
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %7 = load %struct.SequenceHeader*, %struct.SequenceHeader** %6, align 16
  %8 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %7, i64 0, i32 11
  %9 = load i8, i8* %8, align 8
  %10 = icmp eq i8 %9, 2
  br i1 %10, label %16, label %11

11:                                               ; preds = %2
  %12 = icmp ne i8 %9, 0
  %13 = getelementptr inbounds %struct.FeatureFlags, %struct.FeatureFlags* %1, i64 0, i32 4
  %14 = zext i1 %12 to i8
  store i8 %14, i8* %13, align 4
  %15 = getelementptr inbounds %struct.FeatureFlags, %struct.FeatureFlags* %1, i64 0, i32 3
  store i8 %14, i8* %15, align 1
  br label %133

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 34
  %18 = load i8, i8* %17, align 8
  %19 = icmp eq i8 %18, 1
  br i1 %19, label %20, label %23

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.FeatureFlags, %struct.FeatureFlags* %1, i64 0, i32 4
  store i8 0, i8* %21, align 4
  %22 = getelementptr inbounds %struct.FeatureFlags, %struct.FeatureFlags* %1, i64 0, i32 3
  store i8 0, i8* %22, align 1
  br label %133

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 12, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %30

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.FeatureFlags, %struct.FeatureFlags* %1, i64 0, i32 4
  store i8 1, i8* %28, align 4
  %29 = getelementptr inbounds %struct.FeatureFlags, %struct.FeatureFlags* %1, i64 0, i32 3
  store i8 1, i8* %29, align 1
  br label %133

30:                                               ; preds = %23
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 18
  %32 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %31, align 8
  %33 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %32, i64 0, i32 5, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %32, i64 0, i32 4, i32 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %32, i64 0, i32 0, i32 0, i32 0
  %38 = load i32, i32* %37, align 8
  %39 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %32, i64 0, i32 1, i32 0, i32 0
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %7, i64 0, i32 25
  %42 = load i32, i32* %41, align 8
  %43 = icmp slt i32 %40, 16
  br i1 %43, label %74, label %44

44:                                               ; preds = %30
  %45 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %32, i64 0, i32 26
  %46 = load i32, i32* %45, align 8
  %47 = and i32 %46, 8
  %48 = icmp slt i32 %38, 16
  %49 = bitcast [256 x i32]* %3 to i8*
  %50 = bitcast i32* %4 to i8*
  %51 = icmp ne i32 %47, 0
  %52 = getelementptr inbounds [256 x i32], [256 x i32]* %3, i64 0, i64 0
  %53 = bitcast %struct.buf_2d* %5 to i8*
  %54 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %5, i64 0, i32 4
  %55 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %5, i64 0, i32 0
  %56 = sext i32 %40 to i64
  %57 = sext i32 %36 to i64
  %58 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %5, i64 0, i32 1
  %59 = bitcast i8** %58 to i8*
  br label %66

60:                                               ; preds = %105, %66
  %61 = phi i32 [ %70, %66 ], [ %106, %105 ]
  %62 = phi i32 [ %69, %66 ], [ %107, %105 ]
  %63 = add nuw i64 %68, 16
  %64 = icmp sgt i64 %63, %56
  %65 = add nuw nsw i64 %67, 16
  br i1 %64, label %74, label %66

66:                                               ; preds = %44, %60
  %67 = phi i64 [ 0, %44 ], [ %65, %60 ]
  %68 = phi i64 [ 16, %44 ], [ %63, %60 ]
  %69 = phi i32 [ 0, %44 ], [ %62, %60 ]
  %70 = phi i32 [ 0, %44 ], [ %61, %60 ]
  br i1 %48, label %60, label %71

71:                                               ; preds = %66
  %72 = mul nsw i64 %67, %57
  %73 = getelementptr inbounds i8, i8* %34, i64 %72
  br label %82

74:                                               ; preds = %60, %30
  %75 = phi i32 [ 0, %30 ], [ %61, %60 ]
  %76 = phi i32 [ 0, %30 ], [ %62, %60 ]
  %77 = mul nsw i32 %75, 2560
  %78 = mul nsw i32 %40, %38
  %79 = icmp sgt i32 %77, %78
  %80 = getelementptr inbounds %struct.FeatureFlags, %struct.FeatureFlags* %1, i64 0, i32 3
  %81 = zext i1 %79 to i8
  store i8 %81, i8* %80, align 1
  br i1 %79, label %112, label %116

82:                                               ; preds = %71, %105
  %83 = phi i64 [ 0, %71 ], [ %111, %105 ]
  %84 = phi i64 [ 16, %71 ], [ %108, %105 ]
  %85 = phi i32 [ %69, %71 ], [ %107, %105 ]
  %86 = phi i32 [ %70, %71 ], [ %106, %105 ]
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %49) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %49, i8 -86, i64 1024, i1 false)
  %87 = getelementptr inbounds i8, i8* %73, i64 %83
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %50) #12
  store i32 -1431655766, i32* %4, align 4
  br i1 %51, label %88, label %89

88:                                               ; preds = %82
  call void @av1_count_colors_highbd(i8* %87, i32 %36, i32 16, i32 16, i32 %42, i32* null, i32* nonnull %52, i32* nonnull %4, i32* null) #12
  br label %90

89:                                               ; preds = %82
  call void @av1_count_colors(i8* %87, i32 %36, i32 16, i32 16, i32* nonnull %52, i32* nonnull %4) #12
  br label %90

90:                                               ; preds = %89, %88
  %91 = load i32, i32* %4, align 4
  %92 = add i32 %91, -2
  %93 = icmp ult i32 %92, 3
  br i1 %93, label %94, label %105

94:                                               ; preds = %90
  %95 = add nsw i32 %86, 1
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %53) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 -86, i64 24, i1 false)
  store i32 %36, i32* %54, align 8
  store i8* %87, i8** %55, align 8
  br i1 %51, label %96, label %98

96:                                               ; preds = %94
  %97 = call i32 @av1_high_get_sby_perpixel_variance(%struct.AV1_COMP* %0, %struct.buf_2d* nonnull %5, i8 zeroext 6, i32 %42) #12
  br label %100

98:                                               ; preds = %94
  %99 = call i32 @av1_get_sby_perpixel_variance(%struct.AV1_COMP* %0, %struct.buf_2d* nonnull %5, i8 zeroext 6) #12
  br label %100

100:                                              ; preds = %98, %96
  %101 = phi i32 [ %97, %96 ], [ %99, %98 ]
  %102 = icmp ne i32 %101, 0
  %103 = zext i1 %102 to i32
  %104 = add nsw i32 %85, %103
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %53) #12
  br label %105

105:                                              ; preds = %100, %90
  %106 = phi i32 [ %95, %100 ], [ %86, %90 ]
  %107 = phi i32 [ %104, %100 ], [ %85, %90 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %50) #12
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %49) #12
  %108 = add nuw i64 %84, 16
  %109 = trunc i64 %108 to i32
  %110 = icmp slt i32 %38, %109
  %111 = add nuw nsw i64 %83, 16
  br i1 %110, label %60, label %82

112:                                              ; preds = %74
  %113 = mul nsw i32 %76, 3072
  %114 = icmp sgt i32 %113, %78
  %115 = zext i1 %114 to i8
  br label %116

116:                                              ; preds = %112, %74
  %117 = phi i8 [ 0, %74 ], [ %115, %112 ]
  %118 = getelementptr inbounds %struct.FeatureFlags, %struct.FeatureFlags* %1, i64 0, i32 4
  store i8 %117, i8* %118, align 4
  %119 = zext i1 %79 to i32
  %120 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 69
  store i32 %119, i32* %120, align 8
  %121 = load i8, i8* %118, align 4, !range !2
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %123, label %130

123:                                              ; preds = %116
  %124 = shl nsw i32 %78, 2
  %125 = icmp sgt i32 %77, %124
  br i1 %125, label %126, label %130

126:                                              ; preds = %123
  %127 = mul nsw i32 %76, 7680
  %128 = icmp sgt i32 %127, %78
  %129 = zext i1 %128 to i32
  br label %130

130:                                              ; preds = %116, %123, %126
  %131 = phi i32 [ 1, %116 ], [ 0, %123 ], [ %129, %126 ]
  %132 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 70
  store i32 %131, i32* %132, align 4
  br label %133

133:                                              ; preds = %130, %27, %20, %11
  ret void
}

declare void @av1_count_colors_highbd(i8*, i32, i32, i32, i32, i32*, i32*, i32*, i32*) local_unnamed_addr #3

declare void @av1_count_colors(i8*, i32, i32, i32, i32*, i32*) local_unnamed_addr #3

declare i32 @av1_high_get_sby_perpixel_variance(%struct.AV1_COMP*, %struct.buf_2d*, i8 zeroext, i32) local_unnamed_addr #3

declare i32 @av1_get_sby_perpixel_variance(%struct.AV1_COMP*, %struct.buf_2d*, i8 zeroext) local_unnamed_addr #3

declare void @av1_init_dsmotion_compensation(%struct.search_site_config*, i32, i32) #3

declare void @av1_init_motion_compensation_nstep(%struct.search_site_config*, i32, i32) #3

declare void @av1_init_motion_compensation_hex(%struct.search_site_config*, i32, i32) #3

declare void @av1_init_motion_compensation_bigdia(%struct.search_site_config*, i32, i32) #3

declare void @av1_init_motion_compensation_square(%struct.search_site_config*, i32, i32) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_check_initial_width(%struct.AV1_COMP*, i32, i32, i32) local_unnamed_addr #2 {
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %6 = load %struct.SequenceHeader*, %struct.SequenceHeader** %5, align 16
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 52, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %23, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 26
  %12 = load i8, i8* %11, align 4
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, %1
  br i1 %14, label %15, label %23

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 32
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, %2
  br i1 %18, label %19, label %23

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 33
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, %3
  br i1 %22, label %101, label %23

23:                                               ; preds = %19, %15, %10, %4
  %24 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 32
  store i32 %2, i32* %24, align 8
  %25 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 33
  store i32 %3, i32* %25, align 4
  %26 = trunc i32 %1 to i8
  %27 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 26
  store i8 %26, i8* %27, align 4
  %28 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 30
  %29 = load i32, i32* %28, align 4
  tail call void @av1_set_speed_features_framesize_independent(%struct.AV1_COMP* %0, i32 %29) #12
  %30 = load i32, i32* %28, align 4
  tail call void @av1_set_speed_features_framesize_dependent(%struct.AV1_COMP* %0, i32 %30) #12
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %71, label %34

34:                                               ; preds = %23
  %35 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %36 = load i8, i8* %35, align 8
  %37 = icmp eq i8 %36, 1
  br i1 %37, label %71, label %38

38:                                               ; preds = %34
  %39 = load %struct.SequenceHeader*, %struct.SequenceHeader** %5, align 16
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 10, i32 0
  %41 = load i32, i32* %40, align 8
  %42 = icmp slt i32 %41, 2
  br i1 %42, label %70, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %45 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %44, align 16
  %46 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %45, i64 0, i32 14
  %47 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1, i32 0
  %48 = load i32, i32* %47, align 8
  %49 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %39, i64 0, i32 32
  %52 = load i32, i32* %51, align 8
  %53 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %39, i64 0, i32 33
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %39, i64 0, i32 26
  %56 = load i8, i8* %55, align 4
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 28
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 15
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 9, i32 15
  %63 = load i8, i8* %62, align 1, !range !2
  %64 = zext i8 %63 to i32
  %65 = tail call i32 @aom_realloc_frame_buffer(%struct.yv12_buffer_config* %46, i32 %48, i32 %50, i32 %52, i32 %54, i32 %57, i32 %59, i32 %61, %struct.aom_codec_frame_buffer* null, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)* null, i8* null, i32 %64) #12
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %70, label %67

67:                                               ; preds = %43
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %69 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %68, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %69, i32 2, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.37, i64 0, i64 0)) #12
  br label %70

70:                                               ; preds = %38, %43, %67
  tail call fastcc void @alloc_util_frame_buffers(%struct.AV1_COMP* %0)
  br label %71

71:                                               ; preds = %34, %23, %70
  %72 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 39
  %73 = load %struct.BufferPool*, %struct.BufferPool** %72, align 8
  %74 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 12
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %74, align 16
  %75 = getelementptr %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 0
  %76 = bitcast %struct.RefCntBuffer** %75 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %76, i8 0, i64 64, i1 false) #12
  %77 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 0, i32 0
  store i32 0, i32* %77, align 8
  %78 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 1, i32 0
  store i32 0, i32* %78, align 8
  %79 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 2, i32 0
  store i32 0, i32* %79, align 8
  %80 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 3, i32 0
  store i32 0, i32* %80, align 8
  %81 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 4, i32 0
  store i32 0, i32* %81, align 8
  %82 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 5, i32 0
  store i32 0, i32* %82, align 8
  %83 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 6, i32 0
  store i32 0, i32* %83, align 8
  %84 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 7, i32 0
  store i32 0, i32* %84, align 8
  %85 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 8, i32 0
  store i32 0, i32* %85, align 8
  %86 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 9, i32 0
  store i32 0, i32* %86, align 8
  %87 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 10, i32 0
  store i32 0, i32* %87, align 8
  %88 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 11, i32 0
  store i32 0, i32* %88, align 8
  %89 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 12, i32 0
  store i32 0, i32* %89, align 8
  %90 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 13, i32 0
  store i32 0, i32* %90, align 8
  %91 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 14, i32 0
  store i32 0, i32* %91, align 8
  %92 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %73, i64 0, i32 4, i64 15, i32 0
  store i32 0, i32* %92, align 8
  tail call fastcc void @init_motion_estimation(%struct.AV1_COMP* %0)
  %93 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %94 = load i32, i32* %93, align 16
  store i32 %94, i32* %7, align 4
  %95 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 52, i32 1
  store i32 %96, i32* %97, align 4
  %98 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 2
  %99 = load i32, i32* %98, align 8
  %100 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 53
  store i32 %99, i32* %100, align 4
  br label %101

101:                                              ; preds = %19, %71
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @alloc_util_frame_buffers(%struct.AV1_COMP*) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %3 = load %struct.SequenceHeader*, %struct.SequenceHeader** %2, align 16
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 15
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 28
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %8 = load i32, i32* %7, align 16
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %3, i64 0, i32 32
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %3, i64 0, i32 33
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %3, i64 0, i32 26
  %16 = load i8, i8* %15, align 4
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 28
  %19 = load i32, i32* %18, align 4
  %20 = tail call i32 @aom_realloc_frame_buffer(%struct.yv12_buffer_config* %6, i32 %8, i32 %10, i32 %12, i32 %14, i32 %17, i32 %19, i32 %5, %struct.aom_codec_frame_buffer* null, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)* null, i8* null, i32 0) #12
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %25, label %22

22:                                               ; preds = %1
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %24 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %23, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %24, i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.38, i64 0, i64 0)) #12
  br label %25

25:                                               ; preds = %1, %22
  %26 = load %struct.SequenceHeader*, %struct.SequenceHeader** %2, align 16
  %27 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %26, i64 0, i32 23
  %28 = load i8, i8* %27, align 4
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %53, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 8
  %32 = load i8, i8* %31, align 4, !range !2
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %53

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 17
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %53

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 29
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 6
  %41 = load i32, i32* %40, align 16
  %42 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 7
  %43 = load i32, i32* %42, align 4
  %44 = load i32, i32* %11, align 8
  %45 = load i32, i32* %13, align 4
  %46 = load i8, i8* %15, align 4
  %47 = zext i8 %46 to i32
  %48 = tail call i32 @aom_realloc_frame_buffer(%struct.yv12_buffer_config* %39, i32 %41, i32 %43, i32 %44, i32 %45, i32 %47, i32 32, i32 %5, %struct.aom_codec_frame_buffer* null, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)* null, i8* null, i32 0) #12
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %53, label %50

50:                                               ; preds = %38
  %51 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %52 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %51, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %52, i32 2, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.39, i64 0, i64 0)) #12
  br label %53

53:                                               ; preds = %25, %30, %38, %50, %34
  %54 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 15
  %55 = load i32, i32* %7, align 16
  %56 = load i32, i32* %9, align 4
  %57 = load i32, i32* %11, align 8
  %58 = load i32, i32* %13, align 4
  %59 = load i8, i8* %15, align 4
  %60 = zext i8 %59 to i32
  %61 = load i32, i32* %18, align 4
  %62 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 9, i32 15
  %63 = load i8, i8* %62, align 1, !range !2
  %64 = zext i8 %63 to i32
  %65 = tail call i32 @aom_realloc_frame_buffer(%struct.yv12_buffer_config* %54, i32 %55, i32 %56, i32 %57, i32 %58, i32 %60, i32 %61, i32 %5, %struct.aom_codec_frame_buffer* null, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)* null, i8* null, i32 %64) #12
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %70, label %67

67:                                               ; preds = %53
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %69 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %68, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %69, i32 2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.40, i64 0, i64 0)) #12
  br label %70

70:                                               ; preds = %53, %67
  %71 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 3, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = icmp sgt i32 %72, 0
  br i1 %73, label %74, label %90

74:                                               ; preds = %70
  %75 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 17
  %76 = load i32, i32* %7, align 16
  %77 = load i32, i32* %9, align 4
  %78 = load i32, i32* %11, align 8
  %79 = load i32, i32* %13, align 4
  %80 = load i8, i8* %15, align 4
  %81 = zext i8 %80 to i32
  %82 = load i32, i32* %18, align 4
  %83 = load i8, i8* %62, align 1, !range !2
  %84 = zext i8 %83 to i32
  %85 = tail call i32 @aom_realloc_frame_buffer(%struct.yv12_buffer_config* %75, i32 %76, i32 %77, i32 %78, i32 %79, i32 %81, i32 %82, i32 %5, %struct.aom_codec_frame_buffer* null, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)* null, i8* null, i32 %84) #12
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %90, label %87

87:                                               ; preds = %74
  %88 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %89 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %88, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %89, i32 2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.41, i64 0, i64 0)) #12
  br label %90

90:                                               ; preds = %74, %87, %70
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @init_motion_estimation(%struct.AV1_COMP*) unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 15, i32 4, i32 0, i32 0
  %3 = load i32, i32* %2, align 16
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %7 = load i32, i32* %6, align 16
  %8 = icmp eq i32 %5, %7
  br i1 %8, label %9, label %28

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %28

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 6
  %17 = load i32, i32* %16, align 16
  %18 = icmp eq i32 %5, %17
  br i1 %18, label %19, label %28

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %21 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %20, align 16
  %22 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %21, i64 0, i32 2
  %23 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %22, align 8
  %24 = getelementptr inbounds %struct.lookahead_ctx, %struct.lookahead_ctx* %23, i64 0, i32 3
  %25 = load %struct.lookahead_entry*, %struct.lookahead_entry** %24, align 8
  %26 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %25, i64 0, i32 0, i32 4, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  br label %28

28:                                               ; preds = %1, %9, %15, %19
  %29 = phi i32 [ %27, %19 ], [ %3, %15 ], [ %3, %9 ], [ %3, %1 ]
  %30 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 12
  %31 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %30, align 16
  %32 = icmp eq %struct.RefCntBuffer* %31, null
  %33 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %31, i64 0, i32 17, i32 4, i32 0, i32 0
  %34 = select i1 %32, i32* %2, i32* %33
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 0, i64 0, i32 4
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %45, label %39

39:                                               ; preds = %28
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 1, i64 0, i32 4
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  %43 = icmp ne i32 %3, %37
  %44 = or i1 %43, %42
  br i1 %44, label %45, label %89

45:                                               ; preds = %28, %39
  %46 = load void (%struct.search_site_config*, i32, i32)*, void (%struct.search_site_config*, i32, i32)** getelementptr inbounds ([7 x void (%struct.search_site_config*, i32, i32)*], [7 x void (%struct.search_site_config*, i32, i32)*]* @av1_init_motion_compensation, i64 0, i64 0), align 16
  %47 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 0, i64 0
  tail call void %46(%struct.search_site_config* %47, i32 %3, i32 0) #12
  %48 = load void (%struct.search_site_config*, i32, i32)*, void (%struct.search_site_config*, i32, i32)** getelementptr inbounds ([7 x void (%struct.search_site_config*, i32, i32)*], [7 x void (%struct.search_site_config*, i32, i32)*]* @av1_init_motion_compensation, i64 0, i64 0), align 16
  %49 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 1, i64 0
  tail call void %48(%struct.search_site_config* %49, i32 %29, i32 0) #12
  %50 = load void (%struct.search_site_config*, i32, i32)*, void (%struct.search_site_config*, i32, i32)** getelementptr inbounds ([7 x void (%struct.search_site_config*, i32, i32)*], [7 x void (%struct.search_site_config*, i32, i32)*]* @av1_init_motion_compensation, i64 0, i64 1), align 8
  %51 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 0, i64 1
  tail call void %50(%struct.search_site_config* %51, i32 %3, i32 0) #12
  %52 = load void (%struct.search_site_config*, i32, i32)*, void (%struct.search_site_config*, i32, i32)** getelementptr inbounds ([7 x void (%struct.search_site_config*, i32, i32)*], [7 x void (%struct.search_site_config*, i32, i32)*]* @av1_init_motion_compensation, i64 0, i64 1), align 8
  %53 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 1, i64 1
  tail call void %52(%struct.search_site_config* %53, i32 %29, i32 0) #12
  %54 = load void (%struct.search_site_config*, i32, i32)*, void (%struct.search_site_config*, i32, i32)** getelementptr inbounds ([7 x void (%struct.search_site_config*, i32, i32)*], [7 x void (%struct.search_site_config*, i32, i32)*]* @av1_init_motion_compensation, i64 0, i64 2), align 16
  %55 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 0, i64 2
  tail call void %54(%struct.search_site_config* %55, i32 %3, i32 1) #12
  %56 = load void (%struct.search_site_config*, i32, i32)*, void (%struct.search_site_config*, i32, i32)** getelementptr inbounds ([7 x void (%struct.search_site_config*, i32, i32)*], [7 x void (%struct.search_site_config*, i32, i32)*]* @av1_init_motion_compensation, i64 0, i64 2), align 16
  %57 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 1, i64 2
  tail call void %56(%struct.search_site_config* %57, i32 %29, i32 1) #12
  %58 = load void (%struct.search_site_config*, i32, i32)*, void (%struct.search_site_config*, i32, i32)** getelementptr inbounds ([7 x void (%struct.search_site_config*, i32, i32)*], [7 x void (%struct.search_site_config*, i32, i32)*]* @av1_init_motion_compensation, i64 0, i64 3), align 8
  %59 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 0, i64 3
  tail call void %58(%struct.search_site_config* %59, i32 %3, i32 1) #12
  %60 = load void (%struct.search_site_config*, i32, i32)*, void (%struct.search_site_config*, i32, i32)** getelementptr inbounds ([7 x void (%struct.search_site_config*, i32, i32)*], [7 x void (%struct.search_site_config*, i32, i32)*]* @av1_init_motion_compensation, i64 0, i64 3), align 8
  %61 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 1, i64 3
  tail call void %60(%struct.search_site_config* %61, i32 %29, i32 1) #12
  %62 = load void (%struct.search_site_config*, i32, i32)*, void (%struct.search_site_config*, i32, i32)** getelementptr inbounds ([7 x void (%struct.search_site_config*, i32, i32)*], [7 x void (%struct.search_site_config*, i32, i32)*]* @av1_init_motion_compensation, i64 0, i64 4), align 16
  %63 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 0, i64 4
  tail call void %62(%struct.search_site_config* %63, i32 %3, i32 0) #12
  %64 = load void (%struct.search_site_config*, i32, i32)*, void (%struct.search_site_config*, i32, i32)** getelementptr inbounds ([7 x void (%struct.search_site_config*, i32, i32)*], [7 x void (%struct.search_site_config*, i32, i32)*]* @av1_init_motion_compensation, i64 0, i64 4), align 16
  %65 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 1, i64 4
  tail call void %64(%struct.search_site_config* %65, i32 %29, i32 0) #12
  %66 = load void (%struct.search_site_config*, i32, i32)*, void (%struct.search_site_config*, i32, i32)** getelementptr inbounds ([7 x void (%struct.search_site_config*, i32, i32)*], [7 x void (%struct.search_site_config*, i32, i32)*]* @av1_init_motion_compensation, i64 0, i64 5), align 8
  %67 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 0, i64 5
  tail call void %66(%struct.search_site_config* %67, i32 %3, i32 0) #12
  %68 = load void (%struct.search_site_config*, i32, i32)*, void (%struct.search_site_config*, i32, i32)** getelementptr inbounds ([7 x void (%struct.search_site_config*, i32, i32)*], [7 x void (%struct.search_site_config*, i32, i32)*]* @av1_init_motion_compensation, i64 0, i64 5), align 8
  %69 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 1, i64 5
  tail call void %68(%struct.search_site_config* %69, i32 %29, i32 0) #12
  %70 = load void (%struct.search_site_config*, i32, i32)*, void (%struct.search_site_config*, i32, i32)** getelementptr inbounds ([7 x void (%struct.search_site_config*, i32, i32)*], [7 x void (%struct.search_site_config*, i32, i32)*]* @av1_init_motion_compensation, i64 0, i64 6), align 16
  %71 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 0, i64 6
  tail call void %70(%struct.search_site_config* %71, i32 %3, i32 0) #12
  %72 = load void (%struct.search_site_config*, i32, i32)*, void (%struct.search_site_config*, i32, i32)** getelementptr inbounds ([7 x void (%struct.search_site_config*, i32, i32)*], [7 x void (%struct.search_site_config*, i32, i32)*]* @av1_init_motion_compensation, i64 0, i64 6), align 16
  %73 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 1, i64 6
  tail call void %72(%struct.search_site_config* %73, i32 %29, i32 0) #12
  %74 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 2
  %75 = getelementptr inbounds [7 x %struct.search_site_config], [7 x %struct.search_site_config]* %74, i64 0, i64 0
  tail call void @av1_init_motion_fpf(%struct.search_site_config* %75, i32 %35) #12
  %76 = bitcast [7 x %struct.search_site_config]* %74 to i8*
  %77 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 2, i64 1
  %78 = bitcast %struct.search_site_config* %77 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %76, i64 3176, i1 false)
  %79 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 2, i64 2
  %80 = bitcast %struct.search_site_config* %79 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %76, i64 3176, i1 false)
  %81 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 2, i64 3
  %82 = bitcast %struct.search_site_config* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %76, i64 3176, i1 false)
  %83 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 2, i64 4
  %84 = bitcast %struct.search_site_config* %83 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %76, i64 3176, i1 false)
  %85 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 2, i64 5
  %86 = bitcast %struct.search_site_config* %85 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %76, i64 3176, i1 false)
  %87 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 2, i64 6
  %88 = bitcast %struct.search_site_config* %87 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %76, i64 3176, i1 false)
  br label %89

89:                                               ; preds = %45, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_set_size_literal(%struct.AV1_COMP*, i32, i32) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %6 = load %struct.SequenceHeader*, %struct.SequenceHeader** %5, align 16
  %7 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 26
  %8 = load i8, i8* %7, align 4
  %9 = zext i8 %8 to i32
  %10 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 32
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 33
  %13 = load i32, i32* %12, align 4
  tail call void @av1_check_initial_width(%struct.AV1_COMP* %0, i32 %9, i32 %11, i32 %13)
  %14 = icmp slt i32 %1, 1
  %15 = icmp slt i32 %2, 1
  %16 = or i1 %14, %15
  br i1 %16, label %72, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  store i32 %1, i32* %18, align 16
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  store i32 %2, i32* %19, align 4
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 26
  %21 = load i32, i32* %20, align 4
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %47

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 3
  %25 = load i32, i32* %24, align 16
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %47

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75
  %30 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %31 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %30, align 16
  %32 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %31, i64 0, i32 16
  %33 = load i32, i32* %32, align 8
  %34 = load %struct.SequenceHeader*, %struct.SequenceHeader** %5, align 16
  %35 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %34, i64 0, i32 32
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %34, i64 0, i32 33
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %34, i64 0, i32 26
  %40 = load i8, i8* %39, align 4
  %41 = zext i8 %40 to i32
  %42 = tail call i32 @av1_denoiser_alloc(%struct.AV1Common* %4, %struct.SVC* %29, %struct.av1_denoiser* %28, i32 %33, i32 %21, i32 %1, i32 %2, i32 %36, i32 %38, i32 %41, i32 288) #12
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %27
  %45 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %46 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %45, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %46, i32 2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.42, i64 0, i64 0)) #12
  br label %47

47:                                               ; preds = %17, %23, %27, %44
  %48 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 52, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %71, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 52, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %71, label %55

55:                                               ; preds = %51
  %56 = load i32, i32* %18, align 16
  %57 = icmp sgt i32 %56, %49
  br i1 %57, label %61, label %58

58:                                               ; preds = %55
  %59 = load i32, i32* %19, align 4
  %60 = icmp sgt i32 %59, %53
  br i1 %60, label %61, label %71

61:                                               ; preds = %58, %55
  tail call void @av1_free_context_buffers(%struct.AV1Common* %4) #12
  %62 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3
  %63 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 3
  tail call void @av1_free_shared_coeff_buffer(%struct.PC_TREE_SHARED_BUFFERS* %63) #12
  tail call void @av1_free_sms_tree(%struct.ThreadData* %62) #12
  %64 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 21
  %65 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %64, align 16
  %66 = load %struct.SequenceHeader*, %struct.SequenceHeader** %5, align 16
  %67 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %66, i64 0, i32 27
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, 0
  %70 = select i1 %69, i32 3, i32 1
  tail call void @av1_free_pmc(%struct.PICK_MODE_CONTEXT* %65, i32 %70) #12
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %64, align 16
  tail call fastcc void @alloc_compressor_data(%struct.AV1_COMP* %0)
  tail call fastcc void @realloc_segmentation_maps(%struct.AV1_COMP* %0)
  store i32 0, i32* %52, align 4
  store i32 0, i32* %48, align 4
  br label %71

71:                                               ; preds = %51, %47, %61, %58
  tail call void @av1_update_frame_size(%struct.AV1_COMP* %0)
  br label %72

72:                                               ; preds = %3, %71
  %73 = phi i32 [ 0, %71 ], [ 1, %3 ]
  ret i32 %73
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_set_frame_size(%struct.AV1_COMP*, i32, i32) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %6 = load %struct.SequenceHeader*, %struct.SequenceHeader** %5, align 16
  %7 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 27
  %8 = load i8, i8* %7, align 1
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, i32 3, i32 1
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %12 = load i32, i32* %11, align 16
  %13 = icmp eq i32 %12, %1
  br i1 %13, label %14, label %18

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, %2
  br i1 %17, label %67, label %18

18:                                               ; preds = %14, %3
  %19 = tail call i32 @av1_set_size_literal(%struct.AV1_COMP* %0, i32 %1, i32 %2)
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 7
  %21 = load i8, i8* %20, align 1, !range !2
  %22 = icmp eq i8 %21, 0
  %23 = load i32, i32* %11, align 16
  br i1 %22, label %29, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 6
  %26 = load i32, i32* %25, align 16
  %27 = icmp eq i32 %23, %26
  %28 = zext i1 %27 to i8
  br label %29

29:                                               ; preds = %18, %24
  %30 = phi i8 [ %28, %24 ], [ 0, %18 ]
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 8
  store i8 %30, i8* %31, align 4
  %32 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82
  %33 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %34 = load i32, i32* %33, align 4
  tail call void @av1_noise_estimate_init(%struct.noise_estimate* %32, i32 %23, i32 %34) #12
  %35 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 26
  %36 = load i32, i32* %35, align 4
  %37 = icmp sgt i32 %36, 0
  br i1 %37, label %38, label %67

38:                                               ; preds = %29
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83
  tail call void @av1_denoiser_free(%struct.av1_denoiser* %39) #12
  %40 = load i32, i32* %35, align 4
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %67

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 3
  %44 = load i32, i32* %43, align 16
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %67

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75
  %48 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %49 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %48, align 16
  %50 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %49, i64 0, i32 16
  %51 = load i32, i32* %50, align 8
  %52 = load i32, i32* %11, align 16
  %53 = load i32, i32* %33, align 4
  %54 = load %struct.SequenceHeader*, %struct.SequenceHeader** %5, align 16
  %55 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %54, i64 0, i32 32
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %54, i64 0, i32 33
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %54, i64 0, i32 26
  %60 = load i8, i8* %59, align 4
  %61 = zext i8 %60 to i32
  %62 = tail call i32 @av1_denoiser_alloc(%struct.AV1Common* %4, %struct.SVC* %47, %struct.av1_denoiser* %39, i32 %51, i32 %40, i32 %52, i32 %53, i32 %56, i32 %58, i32 %61, i32 288) #12
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %67, label %64

64:                                               ; preds = %46
  %65 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %66 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %65, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %66, i32 2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.42, i64 0, i64 0)) #12
  br label %67

67:                                               ; preds = %64, %46, %42, %38, %14, %29
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41
  %69 = load i32, i32* %11, align 16
  %70 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %71 = load i32, i32* %70, align 4
  %72 = icmp sgt i32 %69, %71
  %73 = select i1 %72, i32 %69, i32 %71
  %74 = tail call i32 @av1_init_search_range(i32 %73) #12
  %75 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 1
  store i32 %74, i32* %75, align 4
  %76 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 5, i32 2
  %77 = load i32, i32* %76, align 8
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %100, label %79

79:                                               ; preds = %67
  %80 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %81 = load i8, i8* %80, align 16
  %82 = and i8 %81, -3
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %97, label %84

84:                                               ; preds = %79
  %85 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 17
  %86 = load i32, i32* %85, align 8
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %97, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds %struct.MotionVectorSearchParams, %struct.MotionVectorSearchParams* %68, i64 0, i32 0
  %90 = load i32, i32* %89, align 8
  %91 = icmp eq i32 %90, -1
  br i1 %91, label %97, label %92

92:                                               ; preds = %88
  %93 = shl nsw i32 %90, 1
  %94 = icmp slt i32 %73, %93
  %95 = select i1 %94, i32 %73, i32 %93
  %96 = tail call i32 @av1_init_search_range(i32 %95) #12
  store i32 %96, i32* %75, align 4
  br label %97

97:                                               ; preds = %84, %88, %92, %79
  %98 = phi i32 [ %73, %79 ], [ -1, %92 ], [ -1, %88 ], [ -1, %84 ]
  %99 = getelementptr inbounds %struct.MotionVectorSearchParams, %struct.MotionVectorSearchParams* %68, i64 0, i32 0
  store i32 %98, i32* %99, align 8
  br label %100

100:                                              ; preds = %97, %67
  %101 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %102 = load i32, i32* %101, align 4
  switch i32 %102, label %116 [
    i32 2, label %113
    i32 0, label %103
  ]

103:                                              ; preds = %100
  %104 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %105 = load i8, i8* %104, align 8
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %107, label %116

107:                                              ; preds = %103
  %108 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %109 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %108, align 16
  %110 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %109, i64 0, i32 8
  %111 = load i32, i32* %110, align 8
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %116, label %113

113:                                              ; preds = %100, %107
  %114 = load i32, i32* %11, align 16
  %115 = load i32, i32* %70, align 4
  tail call void @av1_set_target_rate(%struct.AV1_COMP* %0, i32 %114, i32 %115) #12
  br label %116

116:                                              ; preds = %100, %103, %107, %113
  %117 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 12
  %118 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %117, align 16
  %119 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %118, i64 0, i32 8
  %120 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %118, i64 0, i32 9
  %121 = load i32, i32* %120, align 8
  %122 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %118, i64 0, i32 5
  %123 = load %struct.MV_REF*, %struct.MV_REF** %122, align 8
  %124 = icmp eq %struct.MV_REF* %123, null
  %125 = bitcast %struct.MV_REF* %123 to i8*
  br i1 %124, label %135, label %126

126:                                              ; preds = %116
  %127 = load i32, i32* %119, align 4
  %128 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %127, %129
  br i1 %130, label %131, label %135

131:                                              ; preds = %126
  %132 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %133 = load i32, i32* %132, align 8
  %134 = icmp eq i32 %121, %133
  br i1 %134, label %166, label %135

135:                                              ; preds = %131, %126, %116
  %136 = bitcast %struct.MV_REF** %122 to i8**
  tail call void @aom_free(i8* %125) #12
  %137 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %138 = load i32, i32* %137, align 4
  store i32 %138, i32* %119, align 4
  %139 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %140 = load i32, i32* %139, align 8
  store i32 %140, i32* %120, align 8
  %141 = load i32, i32* %137, align 4
  %142 = add nsw i32 %141, 1
  %143 = ashr i32 %142, 1
  %144 = load i32, i32* %139, align 8
  %145 = add nsw i32 %144, 1
  %146 = ashr i32 %145, 1
  %147 = mul nsw i32 %146, %143
  %148 = sext i32 %147 to i64
  %149 = tail call i8* @aom_calloc(i64 %148, i64 8) #12
  store i8* %149, i8** %136, align 8
  %150 = icmp eq i8* %149, null
  br i1 %150, label %151, label %154

151:                                              ; preds = %135
  %152 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %153 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %152, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %153, i32 2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.43, i64 0, i64 0)) #12
  br label %154

154:                                              ; preds = %151, %135
  %155 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %118, i64 0, i32 6
  %156 = load i8*, i8** %155, align 8
  tail call void @aom_free(i8* %156) #12
  %157 = load i32, i32* %137, align 4
  %158 = load i32, i32* %139, align 8
  %159 = mul nsw i32 %158, %157
  %160 = sext i32 %159 to i64
  %161 = tail call i8* @aom_calloc(i64 %160, i64 1) #12
  store i8* %161, i8** %155, align 8
  %162 = icmp eq i8* %161, null
  br i1 %162, label %163, label %166

163:                                              ; preds = %154
  %164 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %165 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %164, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %165, i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.44, i64 0, i64 0)) #12
  br label %166

166:                                              ; preds = %163, %154, %131
  %167 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %168 = load i32, i32* %167, align 4
  %169 = add nsw i32 %168, 32
  %170 = ashr i32 %169, 1
  %171 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 11
  %172 = load i32, i32* %171, align 4
  %173 = ashr i32 %172, 1
  %174 = mul nsw i32 %170, %173
  %175 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 43
  %176 = load %struct.TPL_MV_REF*, %struct.TPL_MV_REF** %175, align 16
  %177 = icmp eq %struct.TPL_MV_REF* %176, null
  %178 = bitcast %struct.TPL_MV_REF* %176 to i8*
  br i1 %177, label %183, label %179

179:                                              ; preds = %166
  %180 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 44
  %181 = load i32, i32* %180, align 8
  %182 = icmp slt i32 %181, %174
  br i1 %182, label %183, label %193

183:                                              ; preds = %179, %166
  %184 = bitcast %struct.TPL_MV_REF** %175 to i8**
  tail call void @aom_free(i8* %178) #12
  %185 = sext i32 %174 to i64
  %186 = tail call i8* @aom_calloc(i64 %185, i64 8) #12
  store i8* %186, i8** %184, align 16
  %187 = icmp eq i8* %186, null
  br i1 %187, label %188, label %191

188:                                              ; preds = %183
  %189 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %190 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %189, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %190, i32 2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.45, i64 0, i64 0)) #12
  br label %191

191:                                              ; preds = %188, %183
  %192 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 44
  store i32 %174, i32* %192, align 8
  br label %193

193:                                              ; preds = %179, %191
  %194 = load i32, i32* %11, align 16
  %195 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %118, i64 0, i32 10
  store i32 %194, i32* %195, align 4
  %196 = load i32, i32* %70, align 4
  %197 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %118, i64 0, i32 11
  store i32 %196, i32* %197, align 8
  %198 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 40
  %199 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 40, i32 3
  %200 = load i32, i32* %199, align 8
  %201 = load %struct.SequenceHeader*, %struct.SequenceHeader** %5, align 16
  %202 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %201, i64 0, i32 27
  %203 = load i8, i8* %202, align 1
  %204 = icmp eq i8 %203, 0
  %205 = select i1 %204, i32 3, i32 1
  %206 = icmp slt i32 %200, %205
  br i1 %206, label %219, label %207

207:                                              ; preds = %193
  %208 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 40, i32 5
  %209 = load i32, i32* %208, align 8
  %210 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %211 = load i32, i32* %210, align 16
  %212 = icmp slt i32 %209, %211
  br i1 %212, label %219, label %213

213:                                              ; preds = %207
  %214 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 40, i32 4
  %215 = load i32, i32* %214, align 4
  %216 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %217 = load i32, i32* %216, align 4
  %218 = icmp slt i32 %215, %217
  br i1 %218, label %219, label %234

219:                                              ; preds = %213, %207, %193
  tail call void @av1_free_above_context_buffers(%struct.CommonContexts* %198) #12
  %220 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %221 = load i32, i32* %220, align 4
  %222 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %223 = load i32, i32* %222, align 16
  %224 = load %struct.SequenceHeader*, %struct.SequenceHeader** %5, align 16
  %225 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %224, i64 0, i32 27
  %226 = load i8, i8* %225, align 1
  %227 = icmp eq i8 %226, 0
  %228 = select i1 %227, i32 3, i32 1
  %229 = tail call i32 @av1_alloc_above_context_buffers(%struct.CommonContexts* %198, i32 %221, i32 %223, i32 %228) #12
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %234, label %231

231:                                              ; preds = %219
  %232 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %233 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %232, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %233, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0)) #12
  br label %234

234:                                              ; preds = %219, %231, %213
  %235 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %117, align 16
  %236 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %235, i64 0, i32 17
  %237 = load i32, i32* %11, align 16
  %238 = load i32, i32* %70, align 4
  %239 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 32
  %240 = load i32, i32* %239, align 8
  %241 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 33
  %242 = load i32, i32* %241, align 4
  %243 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 26
  %244 = load i8, i8* %243, align 4
  %245 = zext i8 %244 to i32
  %246 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 28
  %247 = load i32, i32* %246, align 4
  %248 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 15
  %249 = load i32, i32* %248, align 4
  %250 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 9, i32 15
  %251 = load i8, i8* %250, align 1, !range !2
  %252 = zext i8 %251 to i32
  %253 = tail call i32 @aom_realloc_frame_buffer(%struct.yv12_buffer_config* %236, i32 %237, i32 %238, i32 %240, i32 %242, i32 %245, i32 %247, i32 %249, %struct.aom_codec_frame_buffer* null, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)* null, i8* null, i32 %252) #12
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %258, label %255

255:                                              ; preds = %234
  %256 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %257 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %256, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %257, i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.14, i64 0, i64 0)) #12
  br label %258

258:                                              ; preds = %234, %255
  %259 = load i32, i32* %101, align 4
  %260 = icmp eq i32 %259, 1
  br i1 %260, label %276, label %261

261:                                              ; preds = %258
  %262 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %263 = load i8, i8* %262, align 8
  %264 = icmp eq i8 %263, 1
  br i1 %264, label %276, label %265

265:                                              ; preds = %261
  %266 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 15
  %267 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 14
  %268 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 7
  %269 = load i32, i32* %268, align 4
  tail call void @av1_alloc_cdef_buffers(%struct.AV1Common* %4, %struct.AV1CdefWorker** %266, %struct.AV1CdefSyncData* %267, i32 %269) #12
  %270 = load i32, i32* %101, align 4
  %271 = icmp eq i32 %270, 1
  br i1 %271, label %276, label %272

272:                                              ; preds = %265
  %273 = load i8, i8* %262, align 8
  %274 = icmp eq i8 %273, 1
  br i1 %274, label %276, label %275

275:                                              ; preds = %272
  tail call fastcc void @alloc_util_frame_buffers(%struct.AV1_COMP* %0)
  br label %276

276:                                              ; preds = %261, %272, %258, %265, %275
  tail call fastcc void @init_motion_estimation(%struct.AV1_COMP* %0)
  br label %277

277:                                              ; preds = %314, %276
  %278 = phi i32 [ 1, %276 ], [ %315, %314 ]
  %279 = trunc i32 %278 to i8
  %280 = add nsw i8 %279, -1
  %281 = icmp ult i8 %280, 8
  br i1 %281, label %282, label %314

282:                                              ; preds = %277
  %283 = sext i8 %279 to i64
  %284 = add nsw i64 %283, -1
  %285 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 %284
  %286 = load i32, i32* %285, align 4
  %287 = icmp eq i32 %286, -1
  br i1 %287, label %314, label %288

288:                                              ; preds = %282
  %289 = sext i32 %286 to i64
  %290 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %289
  %291 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %290, align 8
  %292 = icmp eq %struct.RefCntBuffer* %291, null
  br i1 %292, label %314, label %293

293:                                              ; preds = %288
  %294 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %289
  %295 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %291, i64 0, i32 17, i32 2, i32 0, i32 0
  %296 = load i32, i32* %295, align 8
  %297 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %291, i64 0, i32 17, i32 3, i32 0, i32 0
  %298 = load i32, i32* %297, align 8
  %299 = load i32, i32* %11, align 16
  %300 = load i32, i32* %70, align 4
  tail call void @av1_setup_scale_factors_for_frame(%struct.scale_factors* %294, i32 %296, i32 %298, i32 %299, i32 %300) #12
  %301 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %294, i64 0, i32 0
  %302 = load i32, i32* %301, align 8
  %303 = icmp eq i32 %302, -1
  br i1 %303, label %314, label %304

304:                                              ; preds = %293
  %305 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %289, i32 1
  %306 = load i32, i32* %305, align 4
  %307 = icmp eq i32 %306, -1
  br i1 %307, label %314, label %308

308:                                              ; preds = %304
  %309 = icmp eq i32 %302, 16384
  %310 = icmp eq i32 %306, 16384
  %311 = and i1 %309, %310
  br i1 %311, label %314, label %312

312:                                              ; preds = %308
  %313 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %291, i64 0, i32 17
  tail call void @aom_extend_frame_borders_c(%struct.yv12_buffer_config* %313, i32 %10) #12
  br label %314

314:                                              ; preds = %308, %293, %304, %277, %282, %312, %288
  %315 = add nuw nsw i32 %278, 1
  %316 = icmp eq i32 %315, 8
  br i1 %316, label %317, label %277

317:                                              ; preds = %314
  %318 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 14
  %319 = load i32, i32* %11, align 16
  %320 = load i32, i32* %70, align 4
  tail call void @av1_setup_scale_factors_for_frame(%struct.scale_factors* %318, i32 %319, i32 %320, i32 %319, i32 %320) #12
  %321 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 0
  %322 = load i32, i32* %321, align 4
  %323 = icmp eq i32 %322, -1
  %324 = sext i32 %322 to i64
  %325 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %324
  %326 = select i1 %323, %struct.scale_factors* null, %struct.scale_factors* %325
  %327 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 21, i64 0
  store %struct.scale_factors* %326, %struct.scale_factors** %327, align 8
  %328 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 21, i64 1
  store %struct.scale_factors* %326, %struct.scale_factors** %328, align 8
  ret void
}

declare void @av1_noise_estimate_init(%struct.noise_estimate*, i32, i32) local_unnamed_addr #3

declare void @av1_set_target_rate(%struct.AV1_COMP*, i32, i32) local_unnamed_addr #3

declare void @av1_free_above_context_buffers(%struct.CommonContexts*) local_unnamed_addr #3

declare i32 @av1_alloc_above_context_buffers(%struct.CommonContexts*, i32, i32, i32) local_unnamed_addr #3

declare i32 @aom_realloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.aom_codec_frame_buffer*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i8*, i32) local_unnamed_addr #3

declare void @av1_alloc_cdef_buffers(%struct.AV1Common*, %struct.AV1CdefWorker**, %struct.AV1CdefSyncData*, i32) local_unnamed_addr #3

declare void @av1_setup_scale_factors_for_frame(%struct.scale_factors*, i32, i32, i32, i32) local_unnamed_addr #3

declare void @aom_extend_frame_borders_c(%struct.yv12_buffer_config*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_encode(%struct.AV1_COMP*, i8*, %struct.EncodeFrameInput* nocapture readonly, %struct.EncodeFrameParams* nocapture readonly, %struct.EncodeFrameResults*) local_unnamed_addr #2 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca [8 x i64], align 16
  %13 = alloca [8 x i64], align 16
  %14 = alloca [8 x i32], align 16
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca [20 x i8], align 16
  %22 = bitcast %struct.EncodeFrameInput* %2 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 14
  %25 = bitcast %struct.yv12_buffer_config** %24 to i64*
  store i64 %23, i64* %25, align 8
  %26 = load i64, i64* %22, align 8
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 12
  %28 = bitcast %struct.yv12_buffer_config** %27 to i64*
  store i64 %26, i64* %28, align 8
  %29 = getelementptr inbounds %struct.EncodeFrameInput, %struct.EncodeFrameInput* %2, i64 0, i32 1
  %30 = bitcast %struct.yv12_buffer_config** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 16
  %33 = bitcast %struct.yv12_buffer_config** %32 to i64*
  store i64 %31, i64* %33, align 16
  %34 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %3, i64 0, i32 5
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 6
  store i32 %35, i32* %36, align 4
  %37 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %3, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp ne i32 %38, 0
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 10
  %41 = zext i1 %39 to i8
  store i8 %41, i8* %40, align 2
  %42 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %3, i64 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 14
  store i32 %43, i32* %44, align 4
  %45 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %3, i64 0, i32 1
  %46 = load i8, i8* %45, align 4
  %47 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  store i8 %46, i8* %47, align 16
  %48 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %3, i64 0, i32 4
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 17
  store i32 %49, i32* %50, align 8
  %51 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %3, i64 0, i32 8
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 38
  store i32 %52, i32* %53, align 8
  %54 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %3, i64 0, i32 11
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 39
  store i32 %55, i32* %56, align 4
  %57 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %3, i64 0, i32 6
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 19
  store i32 %58, i32* %59, align 16
  %60 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %3, i64 0, i32 7
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 62
  store i32 %61, i32* %62, align 16
  %63 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 0
  %64 = bitcast i32* %63 to i8*
  %65 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %3, i64 0, i32 9, i64 0
  %66 = bitcast i32* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 4 %66, i64 32, i1 false)
  %67 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 25, i32 0
  %68 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %3, i64 0, i32 10, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %67, i8* align 4 %68, i64 3, i1 false)
  %69 = icmp eq i8 %46, 0
  br i1 %69, label %70, label %76

70:                                               ; preds = %5
  %71 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 10
  %72 = load i32, i32* %71, align 8
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %70
  %75 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 4
  store i32 0, i32* %75, align 4
  br label %76

76:                                               ; preds = %70, %74, %5
  %77 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 4
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %3, i64 0, i32 3
  %80 = load i32, i32* %79, align 4
  %81 = add i32 %80, %78
  %82 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 2
  store i32 %81, i32* %82, align 4
  %83 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 3
  store i32 %81, i32* %83, align 4
  %84 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %85 = load %struct.SequenceHeader*, %struct.SequenceHeader** %84, align 16
  %86 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %85, i64 0, i32 10, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = add nsw i32 %87, 1
  %89 = shl nsw i32 -1, %88
  %90 = xor i32 %89, -1
  %91 = and i32 %81, %90
  store i32 %91, i32* %82, align 4
  %92 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %93 = load i32, i32* %92, align 4
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %1446, label %95

95:                                               ; preds = %76
  %96 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %97 = load i8, i8* %96, align 8
  %98 = icmp eq i8 %97, 1
  br i1 %98, label %1446, label %99

99:                                               ; preds = %95
  switch i32 %93, label %1446 [
    i32 0, label %100
    i32 2, label %100
  ]

100:                                              ; preds = %99, %99
  %101 = getelementptr inbounds %struct.EncodeFrameResults, %struct.EncodeFrameResults* %4, i64 0, i32 0
  %102 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %103 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23
  %104 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20
  %105 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %102, i64 0, i32 0, i32 0
  %106 = and i8 %46, -3
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %108, label %110

108:                                              ; preds = %100
  tail call void @av1_set_screen_content_options(%struct.AV1_COMP* %0, %struct.FeatureFlags* %104) #12
  %109 = load i8, i8* %105, align 4
  br label %110

110:                                              ; preds = %108, %100
  %111 = phi i8 [ %46, %100 ], [ %109, %108 ]
  %112 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 12
  %113 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %112, align 16
  %114 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %113, i64 0, i32 18
  store i8 %111, i8* %114, align 8
  %115 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 11, i32 8
  %116 = load i8, i8* %115, align 4, !range !2
  %117 = zext i8 %116 to i32
  %118 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 17
  store i32 %117, i32* %118, align 4
  %119 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 11, i32 9
  %120 = load i8, i8* %119, align 1, !range !2
  %121 = zext i8 %120 to i32
  %122 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 18
  store i32 %121, i32* %122, align 8
  %123 = load i8, i8* %40, align 2, !range !2
  %124 = icmp eq i8 %123, 0
  br i1 %124, label %125, label %139

125:                                              ; preds = %110
  %126 = load %struct.SequenceHeader*, %struct.SequenceHeader** %84, align 16
  %127 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %126, i64 0, i32 10, i32 3
  %128 = load i32, i32* %127, align 4
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %139, label %130

130:                                              ; preds = %125
  %131 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %126, i64 0, i32 10, i32 0
  %132 = load i32, i32* %131, align 8
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %139, label %134

134:                                              ; preds = %130
  %135 = load i8, i8* %105, align 16
  %136 = and i8 %135, -3
  %137 = icmp ne i8 %136, 0
  %138 = zext i1 %137 to i8
  br label %139

139:                                              ; preds = %134, %130, %125, %110
  %140 = phi i8 [ 0, %130 ], [ 0, %125 ], [ 0, %110 ], [ %138, %134 ]
  %141 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 6
  %142 = load i8, i8* %141, align 2, !range !2
  %143 = xor i8 %116, 1
  %144 = and i8 %140, %143
  %145 = and i8 %144, %142
  store i8 %145, i8* %141, align 2
  %146 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 17, i32 1
  %147 = load i8, i8* %146, align 1, !range !2
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %163, label %149

149:                                              ; preds = %139
  br i1 %124, label %150, label %160

150:                                              ; preds = %149
  %151 = load i8, i8* %105, align 16
  %152 = and i8 %151, -3
  %153 = icmp eq i8 %152, 0
  br i1 %153, label %160, label %154

154:                                              ; preds = %150
  %155 = load %struct.SequenceHeader*, %struct.SequenceHeader** %84, align 16
  %156 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %155, i64 0, i32 20
  %157 = load i8, i8* %156, align 1
  %158 = icmp ne i8 %157, 0
  %159 = zext i1 %158 to i32
  br label %160

160:                                              ; preds = %154, %150, %149
  %161 = phi i32 [ 0, %150 ], [ 0, %149 ], [ %159, %154 ]
  %162 = icmp ne i32 %161, 0
  br label %163

163:                                              ; preds = %160, %139
  %164 = phi i1 [ false, %139 ], [ %162, %160 ]
  %165 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 5
  %166 = zext i1 %164 to i8
  store i8 %166, i8* %165, align 1
  %167 = load i8, i8* %105, align 4
  %168 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 78
  store i8 %167, i8* %168, align 8
  %169 = icmp eq i8 %167, 3
  br i1 %169, label %170, label %177

170:                                              ; preds = %163
  %171 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %172 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %171, align 16
  %173 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %172, i64 0, i32 6, i32 12
  %174 = load i32, i32* %173, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %172, i64 0, i32 6, i32 0, i64 %175
  store i8 2, i8* %176, align 1
  br label %177

177:                                              ; preds = %170, %163
  %178 = load i32, i32* %59, align 16
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %296, label %180

180:                                              ; preds = %177
  %181 = load i8, i8* %40, align 2, !range !2
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %186, label %183

183:                                              ; preds = %180
  %184 = load i8, i8* %105, align 16
  %185 = icmp eq i8 %184, 0
  br i1 %185, label %186, label %296

186:                                              ; preds = %183, %180
  tail call void @av1_finalize_encoded_frame(%struct.AV1_COMP* %0) #12
  %187 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %187) #12
  store i32 0, i32* %19, align 4
  %188 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 3
  store i32 0, i32* %188, align 4
  %189 = call i32 @av1_pack_bitstream(%struct.AV1_COMP* %0, i8* %1, i64* %101, i32* nonnull %19) #12
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %191, label %1445

191:                                              ; preds = %186
  %192 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %85, i64 0, i32 4
  %193 = load i8, i8* %192, align 8
  %194 = icmp eq i8 %193, 0
  br i1 %194, label %209, label %195

195:                                              ; preds = %191
  %196 = load i8, i8* %105, align 4
  %197 = icmp eq i8 %196, 0
  br i1 %197, label %198, label %209

198:                                              ; preds = %195
  %199 = load i32, i32* %62, align 16
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 42, i64 %200
  %202 = load i32, i32* %201, align 4
  %203 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 42, i64 0
  %204 = insertelement <4 x i32> undef, i32 %202, i32 0
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> zeroinitializer
  %206 = bitcast i32* %203 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %206, align 4
  %207 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 42, i64 4
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %208, align 4
  br label %209

209:                                              ; preds = %198, %195, %191
  %210 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %211 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %210, align 16
  %212 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %211, i64 0, i32 3
  store i32 1, i32* %212, align 8
  %213 = load i32, i32* %50, align 8
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %220, label %215

215:                                              ; preds = %209
  %216 = bitcast %struct.RefCntBuffer** %112 to i64*
  %217 = load i64, i64* %216, align 16
  %218 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 24
  %219 = bitcast %struct.RefCntBuffer** %218 to i64*
  store i64 %217, i64* %219, align 8
  br label %220

220:                                              ; preds = %215, %209
  call void @av1_denoiser_update_ref_frame(%struct.AV1_COMP* %0) #12
  call fastcc void @refresh_reference_frames(%struct.AV1_COMP* %0) #12
  %221 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %222 = load i32, i32* %221, align 16
  %223 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %224 = load i32, i32* %223, align 4
  call void @av1_set_target_rate(%struct.AV1_COMP* %0, i32 %222, i32 %224) #12
  %225 = load i64, i64* %101, align 8
  call void @av1_rc_postencode_update(%struct.AV1_COMP* %0, i64 %225) #12
  %226 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %210, align 16
  %227 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %226, i64 0, i32 10
  %228 = load i32, i32* %227, align 8
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %287, label %230

230:                                              ; preds = %220
  %231 = load i32, i32* %92, align 4
  %232 = icmp eq i32 %231, 1
  br i1 %232, label %287, label %233

233:                                              ; preds = %230
  %234 = load i8, i8* %96, align 8
  %235 = icmp eq i8 %234, 1
  br i1 %235, label %287, label %236

236:                                              ; preds = %233
  %237 = load i32, i32* %50, align 8
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %239, label %242

239:                                              ; preds = %236
  %240 = load i32, i32* %77, align 4
  %241 = add i32 %240, 1
  store i32 %241, i32* %77, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %187) #12
  br label %1446

242:                                              ; preds = %236
  %243 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %112, align 16
  %244 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %243, i64 0, i32 17, i32 2, i32 0, i32 0
  %245 = load i32, i32* %244, align 8
  %246 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %243, i64 0, i32 17, i32 3, i32 0, i32 0
  %247 = load i32, i32* %246, align 8
  %248 = load %struct.SequenceHeader*, %struct.SequenceHeader** %84, align 16
  %249 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %248, i64 0, i32 27
  %250 = load i8, i8* %249, align 1
  %251 = icmp eq i8 %250, 0
  %252 = select i1 %251, i32 3, i32 1
  %253 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %24, align 8
  %254 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %253, i64 0, i32 2, i32 0, i32 0
  %255 = load i32, i32* %254, align 8
  %256 = icmp eq i32 %255, %245
  br i1 %256, label %257, label %261

257:                                              ; preds = %242
  %258 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %253, i64 0, i32 3, i32 0, i32 0
  %259 = load i32, i32* %258, align 8
  %260 = icmp eq i32 %259, %247
  br i1 %260, label %285, label %261

261:                                              ; preds = %257, %242
  %262 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 15
  %263 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %248, i64 0, i32 32
  %264 = load i32, i32* %263, align 8
  %265 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %248, i64 0, i32 33
  %266 = load i32, i32* %265, align 4
  %267 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %248, i64 0, i32 26
  %268 = load i8, i8* %267, align 4
  %269 = zext i8 %268 to i32
  %270 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 15
  %271 = load i32, i32* %270, align 4
  %272 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 9, i32 15
  %273 = load i8, i8* %272, align 1, !range !2
  %274 = zext i8 %273 to i32
  %275 = call i32 @aom_realloc_frame_buffer(%struct.yv12_buffer_config* %262, i32 %245, i32 %247, i32 %264, i32 %266, i32 %269, i32 288, i32 %271, %struct.aom_codec_frame_buffer* null, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)* null, i8* null, i32 %274) #12
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %280, label %277

277:                                              ; preds = %261
  %278 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %279 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %278, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %279, i32 2, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.46, i64 0, i64 0)) #12
  br label %280

280:                                              ; preds = %277, %261
  %281 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %24, align 8
  %282 = load %struct.SequenceHeader*, %struct.SequenceHeader** %84, align 16
  %283 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %282, i64 0, i32 25
  %284 = load i32, i32* %283, align 8
  call void @av1_resize_and_extend_frame_nonnormative(%struct.yv12_buffer_config* %281, %struct.yv12_buffer_config* %262, i32 %284, i32 %252) #12
  br label %285

285:                                              ; preds = %280, %257
  %286 = phi %struct.yv12_buffer_config* [ %262, %280 ], [ %253, %257 ]
  store %struct.yv12_buffer_config* %286, %struct.yv12_buffer_config** %27, align 8
  br label %287

287:                                              ; preds = %285, %233, %230, %220
  %288 = load i32, i32* %50, align 8
  %289 = icmp eq i32 %288, 0
  %290 = load i32, i32* %77, align 4
  %291 = add i32 %290, 1
  store i32 %291, i32* %77, align 4
  br i1 %289, label %1443, label %292

292:                                              ; preds = %287
  %293 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 51, i32 0
  %294 = load i32, i32* %293, align 4
  %295 = add nsw i32 %294, 1
  store i32 %295, i32* %293, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %187) #12
  br label %1446

296:                                              ; preds = %183, %177
  %297 = load i32, i32* %92, align 4
  %298 = icmp eq i32 %297, 1
  br i1 %298, label %331, label %299

299:                                              ; preds = %296
  %300 = load i8, i8* %96, align 8
  %301 = icmp eq i8 %300, 1
  br i1 %301, label %331, label %302

302:                                              ; preds = %299
  %303 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 3
  %304 = load i8, i8* %303, align 1, !range !2
  %305 = icmp eq i8 %304, 0
  br i1 %305, label %331, label %306

306:                                              ; preds = %302
  %307 = load i8, i8* %105, align 16
  %308 = and i8 %307, -3
  %309 = icmp eq i8 %308, 0
  br i1 %309, label %331, label %310

310:                                              ; preds = %306
  %311 = load %struct.SequenceHeader*, %struct.SequenceHeader** %84, align 16
  %312 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %311, i64 0, i32 14
  %313 = load i8, i8* %312, align 1
  %314 = icmp eq i8 %313, 2
  br i1 %314, label %315, label %327

315:                                              ; preds = %310
  %316 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %32, align 16
  %317 = icmp eq %struct.yv12_buffer_config* %316, null
  br i1 %317, label %325, label %318

318:                                              ; preds = %315
  %319 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %27, align 8
  %320 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 22
  %321 = tail call i32 @av1_is_integer_mv(%struct.yv12_buffer_config* %319, %struct.yv12_buffer_config* nonnull %316, %struct.ForceIntegerMVInfo* %320) #12
  %322 = icmp ne i32 %321, 0
  %323 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 2
  %324 = zext i1 %322 to i8
  store i8 %324, i8* %323, align 2
  br label %333

325:                                              ; preds = %315
  %326 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 2
  store i8 0, i8* %326, align 2
  br label %333

327:                                              ; preds = %310
  %328 = icmp ne i8 %313, 0
  %329 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 2
  %330 = zext i1 %328 to i8
  store i8 %330, i8* %329, align 2
  br label %333

331:                                              ; preds = %306, %302, %299, %296
  %332 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 2
  store i8 0, i8* %332, align 2
  br label %333

333:                                              ; preds = %331, %327, %325, %318
  %334 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 26, i32 5
  store i8 0, i8* %334, align 1
  %335 = load i8, i8* %105, align 16
  switch i8 %335, label %343 [
    i8 3, label %336
    i8 2, label %336
    i8 0, label %336
  ]

336:                                              ; preds = %333, %333, %333
  tail call void @av1_reset_segment_features(%struct.AV1Common* %102) #12
  %337 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %103, i64 0, i32 0
  %338 = load i8, i8* %337, align 4
  %339 = icmp eq i8 %338, 0
  br i1 %339, label %343, label %340

340:                                              ; preds = %336
  %341 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 1
  store i8 1, i8* %341, align 1
  %342 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 2
  store i8 1, i8* %342, align 2
  br label %343

343:                                              ; preds = %340, %336, %333
  %344 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 11, i32 1
  %345 = load i32, i32* %344, align 4
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %347, label %350

347:                                              ; preds = %343
  %348 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 11, i32 0
  %349 = load i32, i32* %348, align 4
  br label %350

350:                                              ; preds = %347, %343
  %351 = phi i32 [ %349, %347 ], [ 1, %343 ]
  %352 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 79
  store i32 %351, i32* %352, align 4
  %353 = load i32, i32* %92, align 4
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %355, label %427

355:                                              ; preds = %350
  %356 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %357 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %356, align 16
  %358 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %357, i64 0, i32 8
  %359 = load i32, i32* %358, align 8
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %361, label %427

361:                                              ; preds = %355
  %362 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 15
  %363 = load i32, i32* %362, align 4
  %364 = icmp eq i32 %363, 1
  br i1 %364, label %365, label %427

365:                                              ; preds = %361
  %366 = load i8, i8* %105, align 4
  %367 = icmp eq i8 %366, 0
  br i1 %367, label %427, label %368

368:                                              ; preds = %365
  %369 = tail call i32 @av1_rc_drop_frame(%struct.AV1_COMP* %0) #12
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %427, label %371

371:                                              ; preds = %368
  tail call void @av1_setup_frame_size(%struct.AV1_COMP* %0) #12
  tail call void @av1_rc_postencode_update_drop_frame(%struct.AV1_COMP* %0) #12
  %372 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 0
  %373 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %372, align 8
  %374 = icmp eq %struct.RefCntBuffer* %373, null
  br i1 %374, label %379, label %375

375:                                              ; preds = %371
  %376 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %373, i64 0, i32 0
  %377 = load i32, i32* %376, align 8
  %378 = add nsw i32 %377, -1
  store i32 %378, i32* %376, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %372, align 8
  br label %379

379:                                              ; preds = %375, %371
  %380 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 1
  %381 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %380, align 8
  %382 = icmp eq %struct.RefCntBuffer* %381, null
  br i1 %382, label %387, label %383

383:                                              ; preds = %379
  %384 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %381, i64 0, i32 0
  %385 = load i32, i32* %384, align 8
  %386 = add nsw i32 %385, -1
  store i32 %386, i32* %384, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %380, align 8
  br label %387

387:                                              ; preds = %383, %379
  %388 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 2
  %389 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %388, align 8
  %390 = icmp eq %struct.RefCntBuffer* %389, null
  br i1 %390, label %395, label %391

391:                                              ; preds = %387
  %392 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %389, i64 0, i32 0
  %393 = load i32, i32* %392, align 8
  %394 = add nsw i32 %393, -1
  store i32 %394, i32* %392, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %388, align 8
  br label %395

395:                                              ; preds = %391, %387
  %396 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 3
  %397 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %396, align 8
  %398 = icmp eq %struct.RefCntBuffer* %397, null
  br i1 %398, label %403, label %399

399:                                              ; preds = %395
  %400 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %397, i64 0, i32 0
  %401 = load i32, i32* %400, align 8
  %402 = add nsw i32 %401, -1
  store i32 %402, i32* %400, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %396, align 8
  br label %403

403:                                              ; preds = %399, %395
  %404 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 4
  %405 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %404, align 8
  %406 = icmp eq %struct.RefCntBuffer* %405, null
  br i1 %406, label %411, label %407

407:                                              ; preds = %403
  %408 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %405, i64 0, i32 0
  %409 = load i32, i32* %408, align 8
  %410 = add nsw i32 %409, -1
  store i32 %410, i32* %408, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %404, align 8
  br label %411

411:                                              ; preds = %407, %403
  %412 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 5
  %413 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %412, align 8
  %414 = icmp eq %struct.RefCntBuffer* %413, null
  br i1 %414, label %419, label %415

415:                                              ; preds = %411
  %416 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %413, i64 0, i32 0
  %417 = load i32, i32* %416, align 8
  %418 = add nsw i32 %417, -1
  store i32 %418, i32* %416, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %412, align 8
  br label %419

419:                                              ; preds = %415, %411
  %420 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 6
  %421 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %420, align 8
  %422 = icmp eq %struct.RefCntBuffer* %421, null
  br i1 %422, label %1446, label %423

423:                                              ; preds = %419
  %424 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %421, i64 0, i32 0
  %425 = load i32, i32* %424, align 8
  %426 = add nsw i32 %425, -1
  store i32 %426, i32* %424, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %420, align 8
  br label %1446

427:                                              ; preds = %368, %365, %361, %355, %350
  %428 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 12, i32 2
  %429 = load i32, i32* %428, align 8
  %430 = icmp eq i32 %429, 1
  br i1 %430, label %431, label %432

431:                                              ; preds = %427
  tail call void @av1_set_mb_ssim_rdmult_scaling(%struct.AV1_COMP* %0) #12
  br label %432

432:                                              ; preds = %431, %427
  %433 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %85, i64 0, i32 4
  %434 = load i8, i8* %433, align 8
  %435 = icmp eq i8 %434, 0
  br i1 %435, label %482, label %436

436:                                              ; preds = %432
  %437 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 41
  %438 = load i32, i32* %437, align 8
  %439 = icmp eq i32 %438, -1
  br i1 %439, label %440, label %473

440:                                              ; preds = %436
  %441 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %27, align 8
  %442 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %441, i64 0, i32 26
  %443 = load i32, i32* %442, align 8
  %444 = and i32 %443, 8
  %445 = icmp eq i32 %444, 0
  %446 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %441, i64 0, i32 5, i32 0, i32 0
  %447 = load i8*, i8** %446, align 8
  br i1 %445, label %455, label %448

448:                                              ; preds = %440
  %449 = ptrtoint i8* %447 to i64
  %450 = shl i64 %449, 1
  %451 = inttoptr i64 %450 to <2 x i16>*
  %452 = load <2 x i16>, <2 x i16>* %451, align 2
  %453 = and <2 x i16> %452, <i16 255, i16 255>
  %454 = zext <2 x i16> %453 to <2 x i32>
  br label %459

455:                                              ; preds = %440
  %456 = bitcast i8* %447 to <2 x i8>*
  %457 = load <2 x i8>, <2 x i8>* %456, align 1
  %458 = zext <2 x i8> %457 to <2 x i32>
  br label %459

459:                                              ; preds = %455, %448
  %460 = phi <2 x i32> [ %454, %448 ], [ %458, %455 ]
  %461 = extractelement <2 x i32> %460, i32 1
  %462 = shl nuw nsw i32 %461, 8
  %463 = extractelement <2 x i32> %460, i32 0
  %464 = or i32 %462, %463
  %465 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %85, i64 0, i32 5
  %466 = load i32, i32* %465, align 4
  %467 = shl nuw i32 1, %466
  %468 = srem i32 %464, %467
  %469 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 3, i32 3
  %470 = load i32, i32* %469, align 4
  %471 = icmp eq i32 %470, 0
  %472 = select i1 %471, i32 %468, i32 55
  br label %480

473:                                              ; preds = %436
  %474 = add nuw nsw i32 %438, 1
  %475 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %85, i64 0, i32 5
  %476 = load i32, i32* %475, align 4
  %477 = shl i32 1, %476
  %478 = add nsw i32 %474, %477
  %479 = srem i32 %478, %477
  br label %480

480:                                              ; preds = %459, %473
  %481 = phi i32 [ %479, %473 ], [ %472, %459 ]
  store i32 %481, i32* %437, align 8
  br label %482

482:                                              ; preds = %480, %432
  %483 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 2, i32 4
  %484 = load i8, i8* %483, align 8
  switch i8 %484, label %526 [
    i8 0, label %485
    i8 1, label %487
    i8 2, label %489
  ]

485:                                              ; preds = %482
  %486 = getelementptr inbounds %struct.FeatureFlags, %struct.FeatureFlags* %104, i64 0, i32 0
  store i8 1, i8* %486, align 4
  br label %526

487:                                              ; preds = %482
  %488 = getelementptr inbounds %struct.FeatureFlags, %struct.FeatureFlags* %104, i64 0, i32 0
  store i8 0, i8* %488, align 4
  br label %526

489:                                              ; preds = %482
  %490 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 34
  %491 = load i8, i8* %490, align 8
  switch i8 %491, label %504 [
    i8 0, label %492
    i8 2, label %492
  ]

492:                                              ; preds = %489, %489
  %493 = load i8, i8* %105, align 16
  %494 = and i8 %493, -3
  %495 = icmp eq i8 %494, 0
  br i1 %495, label %499, label %496

496:                                              ; preds = %492
  %497 = load i32, i32* %50, align 8
  %498 = icmp eq i32 %497, 0
  br label %499

499:                                              ; preds = %496, %492
  %500 = phi i1 [ true, %492 ], [ %498, %496 ]
  %501 = xor i1 %500, true
  %502 = getelementptr inbounds %struct.FeatureFlags, %struct.FeatureFlags* %104, i64 0, i32 0
  %503 = zext i1 %501 to i8
  store i8 %503, i8* %502, align 4
  br label %526

504:                                              ; preds = %489
  %505 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %506 = load i32, i32* %505, align 8
  %507 = icmp eq i32 %506, 1
  %508 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  %509 = load i32, i32* %508, align 4
  %510 = icmp eq i32 %509, 1
  %511 = and i1 %507, %510
  br i1 %511, label %512, label %517

512:                                              ; preds = %504
  %513 = load i32, i32* %77, align 4
  %514 = getelementptr inbounds %struct.FeatureFlags, %struct.FeatureFlags* %104, i64 0, i32 0
  %515 = trunc i32 %513 to i8
  %516 = and i8 %515, 1
  store i8 %516, i8* %514, align 4
  br label %526

517:                                              ; preds = %504
  %518 = icmp sgt i32 %509, 1
  br i1 %518, label %519, label %526

519:                                              ; preds = %517
  %520 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 1
  %521 = load i32, i32* %520, align 4
  %522 = add nsw i32 %509, -1
  %523 = icmp eq i32 %521, %522
  %524 = getelementptr inbounds %struct.FeatureFlags, %struct.FeatureFlags* %104, i64 0, i32 0
  %525 = zext i1 %523 to i8
  store i8 %525, i8* %524, align 4
  br label %526

526:                                              ; preds = %519, %517, %512, %499, %487, %485, %482
  %527 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %85, i64 0, i32 13
  %528 = load i8, i8* %527, align 2
  %529 = icmp eq i8 %528, 0
  %530 = zext i1 %529 to i32
  %531 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %85, i64 0, i32 39
  %532 = load i32, i32* %531, align 4
  %533 = and i32 %532, %530
  store i32 %533, i32* %531, align 4
  %534 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %534) #12
  store i32 0, i32* %20, align 4
  %535 = tail call i32 @av1_superres_in_recode_allowed(%struct.AV1_COMP* %0) #12
  %536 = icmp eq i32 %535, 0
  br i1 %536, label %1157, label %537

537:                                              ; preds = %526
  tail call void @av1_save_all_coding_context(%struct.AV1_COMP* %0) #12
  %538 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %538) #12
  store i64 9223372036854775807, i64* %6, align 8
  %539 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %539) #12
  store i64 9223372036854775807, i64* %7, align 8
  %540 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %540) #12
  store i32 0, i32* %8, align 4
  %541 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %541) #12
  store i64 9223372036854775807, i64* %9, align 8
  %542 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %542) #12
  store i64 9223372036854775807, i64* %10, align 8
  %543 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %543) #12
  store i32 -1431655766, i32* %11, align 4
  %544 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 0, i32 5
  %545 = load i8, i8* %544, align 4
  %546 = icmp eq i8 %545, 0
  br i1 %546, label %547, label %839

547:                                              ; preds = %537
  %548 = bitcast [8 x i64]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %548) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %548, i8 -86, i64 64, i1 false) #12
  %549 = bitcast [8 x i64]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %549) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %549, i8 -86, i64 64, i1 false) #12
  %550 = bitcast [8 x i32]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %550) #12
  %551 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 0
  %552 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 1
  %553 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 2
  %554 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 3
  %555 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 4
  %556 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 5
  %557 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 6
  %558 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 7
  %559 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %550, i8 -86, i64 32, i1 false) #12
  %560 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %559, align 16
  %561 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 46
  %562 = load i8, i8* %561, align 16
  %563 = zext i8 %562 to i64
  %564 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %560, i64 0, i32 6, i32 0, i64 %563
  %565 = load i8, i8* %564, align 1
  %566 = and i8 %565, -2
  %567 = icmp eq i8 %566, 4
  br i1 %567, label %568, label %583

568:                                              ; preds = %547
  %569 = bitcast [8 x i64]* %12 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %569, align 16
  %570 = bitcast [8 x i64]* %13 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %570, align 16
  %571 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 2
  %572 = getelementptr inbounds [8 x i64], [8 x i64]* %13, i64 0, i64 2
  %573 = bitcast i64* %571 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %573, align 16
  %574 = bitcast i64* %572 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %574, align 16
  %575 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 4
  %576 = getelementptr inbounds [8 x i64], [8 x i64]* %13, i64 0, i64 4
  %577 = bitcast i64* %575 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %577, align 16
  %578 = bitcast i64* %576 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %578, align 16
  %579 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 6
  %580 = getelementptr inbounds [8 x i64], [8 x i64]* %13, i64 0, i64 6
  %581 = bitcast i64* %579 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %581, align 16
  %582 = bitcast i64* %580 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %582, align 16
  br label %691

583:                                              ; preds = %547
  %584 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 7, i32 2
  %585 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 7, i32 3
  %586 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 80
  %587 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32
  %588 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 26
  %589 = bitcast %struct.loopfilter* %588 to i8*
  %590 = bitcast %struct.CODING_CONTEXT* %587 to i8*
  %591 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1, i32 10
  %592 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 10
  %593 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1, i32 6
  %594 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 6
  %595 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 8, i64 0
  %596 = bitcast i32* %595 to i8*
  %597 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1, i32 8, i64 0
  %598 = bitcast i32* %597 to i8*
  %599 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 9, i64 0
  %600 = bitcast i32* %599 to i8*
  %601 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1, i32 9, i64 0
  %602 = bitcast i32* %601 to i8*
  %603 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1, i32 7
  %604 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 7
  %605 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36
  %606 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 3
  %607 = bitcast %struct.RATE_CONTROL* %605 to i8*
  %608 = bitcast %struct.RATE_CONTROL* %606 to i8*
  %609 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 77
  %610 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 4
  %611 = bitcast %struct.MV_STATS* %609 to i8*
  %612 = bitcast %struct.MV_STATS* %610 to i8*
  %613 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 0
  %614 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 1
  %615 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 2
  %616 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 3
  %617 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 4
  %618 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 5
  %619 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 6
  br label %620

620:                                              ; preds = %686, %583
  %621 = phi i64 [ 9, %583 ], [ %687, %686 ]
  %622 = phi i32 [ 9, %583 ], [ %688, %686 ]
  %623 = trunc i32 %622 to i8
  store i8 %623, i8* %584, align 4
  store i8 %623, i8* %585, align 1
  %624 = add nsw i64 %621, -9
  store i32 4, i32* %586, align 16
  %625 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 %624
  %626 = getelementptr inbounds [8 x i64], [8 x i64]* %13, i64 0, i64 %624
  %627 = getelementptr inbounds [8 x i32], [8 x i32]* %14, i64 0, i64 %624
  %628 = call fastcc i32 @encode_with_recode_loop_and_filter(%struct.AV1_COMP* %0, i64* %101, i8* %1, i64* %625, i64* %626, i32* %627) #12
  store i32 0, i32* %586, align 16
  %629 = icmp eq i32 %628, 0
  br i1 %629, label %630, label %837

630:                                              ; preds = %620
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %589, i8* align 8 %590, i64 36, i1 false) #12
  %631 = load i32, i32* %591, align 8
  store i32 %631, i32* %592, align 8
  %632 = load i32, i32* %593, align 8
  store i32 %632, i32* %594, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %596, i8* align 8 %598, i64 64, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %600, i8* align 8 %602, i64 64, i1 false) #12
  %633 = load i32, i32* %603, align 4
  store i32 %633, i32* %604, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %607, i8* align 8 %608, i64 352, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %611, i8* align 8 %612, i64 76, i1 false) #12
  %634 = load i8, i8* %47, align 16
  %635 = and i8 %634, -3
  %636 = icmp eq i8 %635, 0
  br i1 %636, label %686, label %637

637:                                              ; preds = %630
  %638 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %613, align 8
  %639 = icmp eq %struct.RefCntBuffer* %638, null
  br i1 %639, label %644, label %640

640:                                              ; preds = %637
  %641 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %638, i64 0, i32 0
  %642 = load i32, i32* %641, align 8
  %643 = add nsw i32 %642, -1
  store i32 %643, i32* %641, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %613, align 8
  br label %644

644:                                              ; preds = %640, %637
  %645 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %614, align 8
  %646 = icmp eq %struct.RefCntBuffer* %645, null
  br i1 %646, label %651, label %647

647:                                              ; preds = %644
  %648 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %645, i64 0, i32 0
  %649 = load i32, i32* %648, align 8
  %650 = add nsw i32 %649, -1
  store i32 %650, i32* %648, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %614, align 8
  br label %651

651:                                              ; preds = %647, %644
  %652 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %615, align 8
  %653 = icmp eq %struct.RefCntBuffer* %652, null
  br i1 %653, label %658, label %654

654:                                              ; preds = %651
  %655 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %652, i64 0, i32 0
  %656 = load i32, i32* %655, align 8
  %657 = add nsw i32 %656, -1
  store i32 %657, i32* %655, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %615, align 8
  br label %658

658:                                              ; preds = %654, %651
  %659 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %616, align 8
  %660 = icmp eq %struct.RefCntBuffer* %659, null
  br i1 %660, label %665, label %661

661:                                              ; preds = %658
  %662 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %659, i64 0, i32 0
  %663 = load i32, i32* %662, align 8
  %664 = add nsw i32 %663, -1
  store i32 %664, i32* %662, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %616, align 8
  br label %665

665:                                              ; preds = %661, %658
  %666 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %617, align 8
  %667 = icmp eq %struct.RefCntBuffer* %666, null
  br i1 %667, label %672, label %668

668:                                              ; preds = %665
  %669 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %666, i64 0, i32 0
  %670 = load i32, i32* %669, align 8
  %671 = add nsw i32 %670, -1
  store i32 %671, i32* %669, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %617, align 8
  br label %672

672:                                              ; preds = %668, %665
  %673 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %618, align 8
  %674 = icmp eq %struct.RefCntBuffer* %673, null
  br i1 %674, label %679, label %675

675:                                              ; preds = %672
  %676 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %673, i64 0, i32 0
  %677 = load i32, i32* %676, align 8
  %678 = add nsw i32 %677, -1
  store i32 %678, i32* %676, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %618, align 8
  br label %679

679:                                              ; preds = %675, %672
  %680 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %619, align 8
  %681 = icmp eq %struct.RefCntBuffer* %680, null
  br i1 %681, label %686, label %682

682:                                              ; preds = %679
  %683 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %680, i64 0, i32 0
  %684 = load i32, i32* %683, align 8
  %685 = add nsw i32 %684, -1
  store i32 %685, i32* %683, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %619, align 8
  br label %686

686:                                              ; preds = %682, %679, %630
  %687 = add nuw nsw i64 %621, 1
  %688 = add nuw nsw i32 %622, 1
  %689 = icmp eq i64 %687, 17
  br i1 %689, label %690, label %620

690:                                              ; preds = %686
  store i8 8, i8* %584, align 4
  store i8 8, i8* %585, align 1
  br label %691

691:                                              ; preds = %690, %568
  %692 = call fastcc i32 @encode_with_recode_loop_and_filter(%struct.AV1_COMP* %0, i64* %101, i8* %1, i64* nonnull %9, i64* nonnull %10, i32* nonnull %11) #12
  %693 = icmp eq i32 %692, 0
  br i1 %693, label %694, label %837

694:                                              ; preds = %691
  %695 = load %struct.SequenceHeader*, %struct.SequenceHeader** %84, align 16
  %696 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %695, i64 0, i32 25
  %697 = load i32, i32* %696, align 8
  %698 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 0
  %699 = load i32, i32* %698, align 16
  %700 = call i32 @av1_compute_rd_mult_based_on_qindex(i32 %697, i32 %699) #12
  %701 = sitofp i32 %700 to double
  %702 = load %struct.SequenceHeader*, %struct.SequenceHeader** %84, align 16
  %703 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %702, i64 0, i32 25
  %704 = load i32, i32* %703, align 8
  %705 = shl i32 %704, 1
  %706 = add i32 %705, -16
  %707 = zext i32 %706 to i64
  %708 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 0
  %709 = load i64, i64* %708, align 16
  %710 = getelementptr inbounds [8 x i64], [8 x i64]* %13, i64 0, i64 0
  %711 = load i64, i64* %710, align 16
  %712 = sitofp i64 %711 to double
  %713 = fmul double %701, %712
  %714 = fmul double %713, 0x3F60000000000000
  %715 = ashr i64 %709, %707
  %716 = sitofp i64 %715 to double
  %717 = fmul double %716, 1.280000e+02
  %718 = fadd double %714, %717
  %719 = fcmp olt double %718, 0x7FEFFFFFFFFFFFFF
  br i1 %719, label %720, label %722

720:                                              ; preds = %694
  %721 = load i32, i32* %551, align 16
  store i64 %709, i64* %6, align 8
  store i64 %711, i64* %7, align 8
  store i32 %721, i32* %8, align 4
  br label %722

722:                                              ; preds = %720, %694
  %723 = phi i8 [ 9, %720 ], [ -1, %694 ]
  %724 = phi double [ %718, %720 ], [ 0x7FEFFFFFFFFFFFFF, %694 ]
  %725 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 1
  %726 = load i64, i64* %725, align 8
  %727 = getelementptr inbounds [8 x i64], [8 x i64]* %13, i64 0, i64 1
  %728 = load i64, i64* %727, align 8
  %729 = sitofp i64 %728 to double
  %730 = fmul double %701, %729
  %731 = fmul double %730, 0x3F60000000000000
  %732 = ashr i64 %726, %707
  %733 = sitofp i64 %732 to double
  %734 = fmul double %733, 1.280000e+02
  %735 = fadd double %734, %731
  %736 = fcmp olt double %735, %724
  br i1 %736, label %1037, label %1039

737:                                              ; preds = %1141
  %738 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32
  %739 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 26
  %740 = bitcast %struct.loopfilter* %739 to i8*
  %741 = bitcast %struct.CODING_CONTEXT* %738 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %740, i8* align 8 %741, i64 36, i1 false) #12
  %742 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1, i32 10
  %743 = load i32, i32* %742, align 8
  %744 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 10
  store i32 %743, i32* %744, align 8
  %745 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1, i32 6
  %746 = load i32, i32* %745, align 8
  %747 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 6
  store i32 %746, i32* %747, align 8
  %748 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 8, i64 0
  %749 = bitcast i32* %748 to i8*
  %750 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1, i32 8, i64 0
  %751 = bitcast i32* %750 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %749, i8* align 8 %751, i64 64, i1 false) #12
  %752 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 9, i64 0
  %753 = bitcast i32* %752 to i8*
  %754 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1, i32 9, i64 0
  %755 = bitcast i32* %754 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %753, i8* align 8 %755, i64 64, i1 false) #12
  %756 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1, i32 7
  %757 = load i32, i32* %756, align 4
  %758 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 7
  store i32 %757, i32* %758, align 4
  %759 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36
  %760 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 3
  %761 = bitcast %struct.RATE_CONTROL* %759 to i8*
  %762 = bitcast %struct.RATE_CONTROL* %760 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %761, i8* align 8 %762, i64 352, i1 false) #12
  %763 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 77
  %764 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 4
  %765 = bitcast %struct.MV_STATS* %763 to i8*
  %766 = bitcast %struct.MV_STATS* %764 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %765, i8* align 8 %766, i64 76, i1 false) #12
  %767 = load i8, i8* %47, align 16
  %768 = and i8 %767, -3
  %769 = icmp eq i8 %768, 0
  br i1 %769, label %826, label %770

770:                                              ; preds = %737
  %771 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 0
  %772 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %771, align 8
  %773 = icmp eq %struct.RefCntBuffer* %772, null
  br i1 %773, label %778, label %774

774:                                              ; preds = %770
  %775 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %772, i64 0, i32 0
  %776 = load i32, i32* %775, align 8
  %777 = add nsw i32 %776, -1
  store i32 %777, i32* %775, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %771, align 8
  br label %778

778:                                              ; preds = %774, %770
  %779 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 1
  %780 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %779, align 8
  %781 = icmp eq %struct.RefCntBuffer* %780, null
  br i1 %781, label %786, label %782

782:                                              ; preds = %778
  %783 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %780, i64 0, i32 0
  %784 = load i32, i32* %783, align 8
  %785 = add nsw i32 %784, -1
  store i32 %785, i32* %783, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %779, align 8
  br label %786

786:                                              ; preds = %782, %778
  %787 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 2
  %788 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %787, align 8
  %789 = icmp eq %struct.RefCntBuffer* %788, null
  br i1 %789, label %794, label %790

790:                                              ; preds = %786
  %791 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %788, i64 0, i32 0
  %792 = load i32, i32* %791, align 8
  %793 = add nsw i32 %792, -1
  store i32 %793, i32* %791, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %787, align 8
  br label %794

794:                                              ; preds = %790, %786
  %795 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 3
  %796 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %795, align 8
  %797 = icmp eq %struct.RefCntBuffer* %796, null
  br i1 %797, label %802, label %798

798:                                              ; preds = %794
  %799 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %796, i64 0, i32 0
  %800 = load i32, i32* %799, align 8
  %801 = add nsw i32 %800, -1
  store i32 %801, i32* %799, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %795, align 8
  br label %802

802:                                              ; preds = %798, %794
  %803 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 4
  %804 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %803, align 8
  %805 = icmp eq %struct.RefCntBuffer* %804, null
  br i1 %805, label %810, label %806

806:                                              ; preds = %802
  %807 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %804, i64 0, i32 0
  %808 = load i32, i32* %807, align 8
  %809 = add nsw i32 %808, -1
  store i32 %809, i32* %807, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %803, align 8
  br label %810

810:                                              ; preds = %806, %802
  %811 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 5
  %812 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %811, align 8
  %813 = icmp eq %struct.RefCntBuffer* %812, null
  br i1 %813, label %818, label %814

814:                                              ; preds = %810
  %815 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %812, i64 0, i32 0
  %816 = load i32, i32* %815, align 8
  %817 = add nsw i32 %816, -1
  store i32 %817, i32* %815, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %811, align 8
  br label %818

818:                                              ; preds = %814, %810
  %819 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 6
  %820 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %819, align 8
  %821 = icmp eq %struct.RefCntBuffer* %820, null
  br i1 %821, label %826, label %822

822:                                              ; preds = %818
  %823 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %820, i64 0, i32 0
  %824 = load i32, i32* %823, align 8
  %825 = add nsw i32 %824, -1
  store i32 %825, i32* %823, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %819, align 8
  br label %826

826:                                              ; preds = %822, %818, %737
  %827 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 7, i32 2
  store i8 %1142, i8* %827, align 4
  %828 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 7, i32 3
  store i8 %1142, i8* %828, align 1
  %829 = bitcast i64* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %829) #12
  store i64 9223372036854775807, i64* %15, align 8
  %830 = bitcast i64* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %830) #12
  store i64 9223372036854775807, i64* %16, align 8
  %831 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 80
  store i32 4, i32* %831, align 16
  %832 = call fastcc i32 @encode_with_recode_loop_and_filter(%struct.AV1_COMP* %0, i64* %101, i8* %1, i64* nonnull %15, i64* nonnull %16, i32* nonnull %20) #12
  store i32 0, i32* %831, align 16
  store i8 8, i8* %827, align 4
  store i8 8, i8* %828, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %830) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %829) #12
  br label %835

833:                                              ; preds = %1141
  %834 = load i32, i32* %11, align 4
  store i32 %834, i32* %20, align 4
  br label %835

835:                                              ; preds = %833, %826
  %836 = phi i32 [ %832, %826 ], [ 0, %833 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %550) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %549) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %548) #12
  br label %1154

837:                                              ; preds = %620, %691
  %838 = phi i32 [ %692, %691 ], [ %628, %620 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %550) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %549) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %548) #12
  br label %1154

839:                                              ; preds = %537
  %840 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 80
  store i32 4, i32* %840, align 16
  %841 = call fastcc i32 @encode_with_recode_loop_and_filter(%struct.AV1_COMP* %0, i64* %101, i8* %1, i64* nonnull %6, i64* nonnull %7, i32* nonnull %8) #12
  store i32 0, i32* %840, align 16
  %842 = icmp eq i32 %841, 0
  br i1 %842, label %843, label %1154

843:                                              ; preds = %839
  %844 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32
  %845 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 26
  %846 = bitcast %struct.loopfilter* %845 to i8*
  %847 = bitcast %struct.CODING_CONTEXT* %844 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %846, i8* align 8 %847, i64 36, i1 false) #12
  %848 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1, i32 10
  %849 = load i32, i32* %848, align 8
  %850 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 10
  store i32 %849, i32* %850, align 8
  %851 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1, i32 6
  %852 = load i32, i32* %851, align 8
  %853 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 6
  store i32 %852, i32* %853, align 8
  %854 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 8, i64 0
  %855 = bitcast i32* %854 to i8*
  %856 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1, i32 8, i64 0
  %857 = bitcast i32* %856 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %855, i8* align 8 %857, i64 64, i1 false) #12
  %858 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 9, i64 0
  %859 = bitcast i32* %858 to i8*
  %860 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1, i32 9, i64 0
  %861 = bitcast i32* %860 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %859, i8* align 8 %861, i64 64, i1 false) #12
  %862 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1, i32 7
  %863 = load i32, i32* %862, align 4
  %864 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 7
  store i32 %863, i32* %864, align 4
  %865 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36
  %866 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 3
  %867 = bitcast %struct.RATE_CONTROL* %865 to i8*
  %868 = bitcast %struct.RATE_CONTROL* %866 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %867, i8* align 8 %868, i64 352, i1 false) #12
  %869 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 77
  %870 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 4
  %871 = bitcast %struct.MV_STATS* %869 to i8*
  %872 = bitcast %struct.MV_STATS* %870 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %871, i8* align 8 %872, i64 76, i1 false) #12
  %873 = load i8, i8* %47, align 16
  %874 = and i8 %873, -3
  %875 = icmp eq i8 %874, 0
  br i1 %875, label %932, label %876

876:                                              ; preds = %843
  %877 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 0
  %878 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %877, align 8
  %879 = icmp eq %struct.RefCntBuffer* %878, null
  br i1 %879, label %884, label %880

880:                                              ; preds = %876
  %881 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %878, i64 0, i32 0
  %882 = load i32, i32* %881, align 8
  %883 = add nsw i32 %882, -1
  store i32 %883, i32* %881, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %877, align 8
  br label %884

884:                                              ; preds = %880, %876
  %885 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 1
  %886 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %885, align 8
  %887 = icmp eq %struct.RefCntBuffer* %886, null
  br i1 %887, label %892, label %888

888:                                              ; preds = %884
  %889 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %886, i64 0, i32 0
  %890 = load i32, i32* %889, align 8
  %891 = add nsw i32 %890, -1
  store i32 %891, i32* %889, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %885, align 8
  br label %892

892:                                              ; preds = %888, %884
  %893 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 2
  %894 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %893, align 8
  %895 = icmp eq %struct.RefCntBuffer* %894, null
  br i1 %895, label %900, label %896

896:                                              ; preds = %892
  %897 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %894, i64 0, i32 0
  %898 = load i32, i32* %897, align 8
  %899 = add nsw i32 %898, -1
  store i32 %899, i32* %897, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %893, align 8
  br label %900

900:                                              ; preds = %896, %892
  %901 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 3
  %902 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %901, align 8
  %903 = icmp eq %struct.RefCntBuffer* %902, null
  br i1 %903, label %908, label %904

904:                                              ; preds = %900
  %905 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %902, i64 0, i32 0
  %906 = load i32, i32* %905, align 8
  %907 = add nsw i32 %906, -1
  store i32 %907, i32* %905, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %901, align 8
  br label %908

908:                                              ; preds = %904, %900
  %909 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 4
  %910 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %909, align 8
  %911 = icmp eq %struct.RefCntBuffer* %910, null
  br i1 %911, label %916, label %912

912:                                              ; preds = %908
  %913 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %910, i64 0, i32 0
  %914 = load i32, i32* %913, align 8
  %915 = add nsw i32 %914, -1
  store i32 %915, i32* %913, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %909, align 8
  br label %916

916:                                              ; preds = %912, %908
  %917 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 5
  %918 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %917, align 8
  %919 = icmp eq %struct.RefCntBuffer* %918, null
  br i1 %919, label %924, label %920

920:                                              ; preds = %916
  %921 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %918, i64 0, i32 0
  %922 = load i32, i32* %921, align 8
  %923 = add nsw i32 %922, -1
  store i32 %923, i32* %921, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %917, align 8
  br label %924

924:                                              ; preds = %920, %916
  %925 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 6
  %926 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %925, align 8
  %927 = icmp eq %struct.RefCntBuffer* %926, null
  br i1 %927, label %932, label %928

928:                                              ; preds = %924
  %929 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %926, i64 0, i32 0
  %930 = load i32, i32* %929, align 8
  %931 = add nsw i32 %930, -1
  store i32 %931, i32* %929, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %925, align 8
  br label %932

932:                                              ; preds = %928, %924, %843
  %933 = call fastcc i32 @encode_with_recode_loop_and_filter(%struct.AV1_COMP* %0, i64* %101, i8* %1, i64* nonnull %9, i64* nonnull %10, i32* nonnull %11) #12
  %934 = icmp eq i32 %933, 0
  br i1 %934, label %935, label %1154

935:                                              ; preds = %932
  %936 = load %struct.SequenceHeader*, %struct.SequenceHeader** %84, align 16
  %937 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %936, i64 0, i32 25
  %938 = load i32, i32* %937, align 8
  %939 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 0
  %940 = load i32, i32* %939, align 16
  %941 = call i32 @av1_compute_rd_mult_based_on_qindex(i32 %938, i32 %940) #12
  %942 = load i64, i64* %7, align 8
  %943 = sitofp i64 %942 to double
  %944 = sitofp i32 %941 to double
  %945 = fmul double %944, %943
  %946 = fmul double %945, 0x3F60000000000000
  %947 = load i64, i64* %6, align 8
  %948 = load %struct.SequenceHeader*, %struct.SequenceHeader** %84, align 16
  %949 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %948, i64 0, i32 25
  %950 = load i32, i32* %949, align 8
  %951 = shl i32 %950, 1
  %952 = add i32 %951, -16
  %953 = zext i32 %952 to i64
  %954 = ashr i64 %947, %953
  %955 = sitofp i64 %954 to double
  %956 = fmul double %955, 1.280000e+02
  %957 = fadd double %946, %956
  %958 = load i64, i64* %10, align 8
  %959 = sitofp i64 %958 to double
  %960 = fmul double %944, %959
  %961 = fmul double %960, 0x3F60000000000000
  %962 = load i64, i64* %9, align 8
  %963 = ashr i64 %962, %953
  %964 = sitofp i64 %963 to double
  %965 = fmul double %964, 1.280000e+02
  %966 = fadd double %961, %965
  %967 = fcmp olt double %957, %966
  br i1 %967, label %968, label %1035

968:                                              ; preds = %935
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %846, i8* align 8 %847, i64 36, i1 false) #12
  %969 = load i32, i32* %848, align 8
  store i32 %969, i32* %850, align 8
  %970 = load i32, i32* %851, align 8
  store i32 %970, i32* %853, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %855, i8* align 8 %857, i64 64, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %859, i8* align 8 %861, i64 64, i1 false) #12
  %971 = load i32, i32* %862, align 4
  store i32 %971, i32* %864, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %867, i8* align 8 %868, i64 352, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %871, i8* align 8 %872, i64 76, i1 false) #12
  %972 = load i8, i8* %47, align 16
  %973 = and i8 %972, -3
  %974 = icmp eq i8 %973, 0
  br i1 %974, label %1031, label %975

975:                                              ; preds = %968
  %976 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 0
  %977 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %976, align 8
  %978 = icmp eq %struct.RefCntBuffer* %977, null
  br i1 %978, label %983, label %979

979:                                              ; preds = %975
  %980 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %977, i64 0, i32 0
  %981 = load i32, i32* %980, align 8
  %982 = add nsw i32 %981, -1
  store i32 %982, i32* %980, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %976, align 8
  br label %983

983:                                              ; preds = %979, %975
  %984 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 1
  %985 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %984, align 8
  %986 = icmp eq %struct.RefCntBuffer* %985, null
  br i1 %986, label %991, label %987

987:                                              ; preds = %983
  %988 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %985, i64 0, i32 0
  %989 = load i32, i32* %988, align 8
  %990 = add nsw i32 %989, -1
  store i32 %990, i32* %988, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %984, align 8
  br label %991

991:                                              ; preds = %987, %983
  %992 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 2
  %993 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %992, align 8
  %994 = icmp eq %struct.RefCntBuffer* %993, null
  br i1 %994, label %999, label %995

995:                                              ; preds = %991
  %996 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %993, i64 0, i32 0
  %997 = load i32, i32* %996, align 8
  %998 = add nsw i32 %997, -1
  store i32 %998, i32* %996, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %992, align 8
  br label %999

999:                                              ; preds = %995, %991
  %1000 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 3
  %1001 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1000, align 8
  %1002 = icmp eq %struct.RefCntBuffer* %1001, null
  br i1 %1002, label %1007, label %1003

1003:                                             ; preds = %999
  %1004 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1001, i64 0, i32 0
  %1005 = load i32, i32* %1004, align 8
  %1006 = add nsw i32 %1005, -1
  store i32 %1006, i32* %1004, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %1000, align 8
  br label %1007

1007:                                             ; preds = %1003, %999
  %1008 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 4
  %1009 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1008, align 8
  %1010 = icmp eq %struct.RefCntBuffer* %1009, null
  br i1 %1010, label %1015, label %1011

1011:                                             ; preds = %1007
  %1012 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1009, i64 0, i32 0
  %1013 = load i32, i32* %1012, align 8
  %1014 = add nsw i32 %1013, -1
  store i32 %1014, i32* %1012, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %1008, align 8
  br label %1015

1015:                                             ; preds = %1011, %1007
  %1016 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 5
  %1017 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1016, align 8
  %1018 = icmp eq %struct.RefCntBuffer* %1017, null
  br i1 %1018, label %1023, label %1019

1019:                                             ; preds = %1015
  %1020 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1017, i64 0, i32 0
  %1021 = load i32, i32* %1020, align 8
  %1022 = add nsw i32 %1021, -1
  store i32 %1022, i32* %1020, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %1016, align 8
  br label %1023

1023:                                             ; preds = %1019, %1015
  %1024 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 6
  %1025 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1024, align 8
  %1026 = icmp eq %struct.RefCntBuffer* %1025, null
  br i1 %1026, label %1031, label %1027

1027:                                             ; preds = %1023
  %1028 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1025, i64 0, i32 0
  %1029 = load i32, i32* %1028, align 8
  %1030 = add nsw i32 %1029, -1
  store i32 %1030, i32* %1028, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %1024, align 8
  br label %1031

1031:                                             ; preds = %1027, %1023, %968
  %1032 = bitcast i64* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1032) #12
  store i64 9223372036854775807, i64* %17, align 8
  %1033 = bitcast i64* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1033) #12
  store i64 9223372036854775807, i64* %18, align 8
  store i32 4, i32* %840, align 16
  %1034 = call fastcc i32 @encode_with_recode_loop_and_filter(%struct.AV1_COMP* %0, i64* %101, i8* %1, i64* nonnull %17, i64* nonnull %18, i32* nonnull %20) #12
  store i32 0, i32* %840, align 16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1033) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1032) #12
  br label %1154

1035:                                             ; preds = %935
  %1036 = load i32, i32* %11, align 4
  store i32 %1036, i32* %20, align 4
  br label %1154

1037:                                             ; preds = %722
  %1038 = load i32, i32* %552, align 4
  store i64 %726, i64* %6, align 8
  store i64 %728, i64* %7, align 8
  store i32 %1038, i32* %8, align 4
  br label %1039

1039:                                             ; preds = %1037, %722
  %1040 = phi i8 [ 10, %1037 ], [ %723, %722 ]
  %1041 = phi double [ %735, %1037 ], [ %724, %722 ]
  %1042 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 2
  %1043 = load i64, i64* %1042, align 16
  %1044 = getelementptr inbounds [8 x i64], [8 x i64]* %13, i64 0, i64 2
  %1045 = load i64, i64* %1044, align 16
  %1046 = sitofp i64 %1045 to double
  %1047 = fmul double %701, %1046
  %1048 = fmul double %1047, 0x3F60000000000000
  %1049 = ashr i64 %1043, %707
  %1050 = sitofp i64 %1049 to double
  %1051 = fmul double %1050, 1.280000e+02
  %1052 = fadd double %1051, %1048
  %1053 = fcmp olt double %1052, %1041
  br i1 %1053, label %1054, label %1056

1054:                                             ; preds = %1039
  %1055 = load i32, i32* %553, align 8
  store i64 %1043, i64* %6, align 8
  store i64 %1045, i64* %7, align 8
  store i32 %1055, i32* %8, align 4
  br label %1056

1056:                                             ; preds = %1054, %1039
  %1057 = phi i8 [ 11, %1054 ], [ %1040, %1039 ]
  %1058 = phi double [ %1052, %1054 ], [ %1041, %1039 ]
  %1059 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 3
  %1060 = load i64, i64* %1059, align 8
  %1061 = getelementptr inbounds [8 x i64], [8 x i64]* %13, i64 0, i64 3
  %1062 = load i64, i64* %1061, align 8
  %1063 = sitofp i64 %1062 to double
  %1064 = fmul double %701, %1063
  %1065 = fmul double %1064, 0x3F60000000000000
  %1066 = ashr i64 %1060, %707
  %1067 = sitofp i64 %1066 to double
  %1068 = fmul double %1067, 1.280000e+02
  %1069 = fadd double %1068, %1065
  %1070 = fcmp olt double %1069, %1058
  br i1 %1070, label %1071, label %1073

1071:                                             ; preds = %1056
  %1072 = load i32, i32* %554, align 4
  store i64 %1060, i64* %6, align 8
  store i64 %1062, i64* %7, align 8
  store i32 %1072, i32* %8, align 4
  br label %1073

1073:                                             ; preds = %1071, %1056
  %1074 = phi i8 [ 12, %1071 ], [ %1057, %1056 ]
  %1075 = phi double [ %1069, %1071 ], [ %1058, %1056 ]
  %1076 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 4
  %1077 = load i64, i64* %1076, align 16
  %1078 = getelementptr inbounds [8 x i64], [8 x i64]* %13, i64 0, i64 4
  %1079 = load i64, i64* %1078, align 16
  %1080 = sitofp i64 %1079 to double
  %1081 = fmul double %701, %1080
  %1082 = fmul double %1081, 0x3F60000000000000
  %1083 = ashr i64 %1077, %707
  %1084 = sitofp i64 %1083 to double
  %1085 = fmul double %1084, 1.280000e+02
  %1086 = fadd double %1085, %1082
  %1087 = fcmp olt double %1086, %1075
  br i1 %1087, label %1088, label %1090

1088:                                             ; preds = %1073
  %1089 = load i32, i32* %555, align 16
  store i64 %1077, i64* %6, align 8
  store i64 %1079, i64* %7, align 8
  store i32 %1089, i32* %8, align 4
  br label %1090

1090:                                             ; preds = %1088, %1073
  %1091 = phi i8 [ 13, %1088 ], [ %1074, %1073 ]
  %1092 = phi double [ %1086, %1088 ], [ %1075, %1073 ]
  %1093 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 5
  %1094 = load i64, i64* %1093, align 8
  %1095 = getelementptr inbounds [8 x i64], [8 x i64]* %13, i64 0, i64 5
  %1096 = load i64, i64* %1095, align 8
  %1097 = sitofp i64 %1096 to double
  %1098 = fmul double %701, %1097
  %1099 = fmul double %1098, 0x3F60000000000000
  %1100 = ashr i64 %1094, %707
  %1101 = sitofp i64 %1100 to double
  %1102 = fmul double %1101, 1.280000e+02
  %1103 = fadd double %1102, %1099
  %1104 = fcmp olt double %1103, %1092
  br i1 %1104, label %1105, label %1107

1105:                                             ; preds = %1090
  %1106 = load i32, i32* %556, align 4
  store i64 %1094, i64* %6, align 8
  store i64 %1096, i64* %7, align 8
  store i32 %1106, i32* %8, align 4
  br label %1107

1107:                                             ; preds = %1105, %1090
  %1108 = phi i8 [ 14, %1105 ], [ %1091, %1090 ]
  %1109 = phi double [ %1103, %1105 ], [ %1092, %1090 ]
  %1110 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 6
  %1111 = load i64, i64* %1110, align 16
  %1112 = getelementptr inbounds [8 x i64], [8 x i64]* %13, i64 0, i64 6
  %1113 = load i64, i64* %1112, align 16
  %1114 = sitofp i64 %1113 to double
  %1115 = fmul double %701, %1114
  %1116 = fmul double %1115, 0x3F60000000000000
  %1117 = ashr i64 %1111, %707
  %1118 = sitofp i64 %1117 to double
  %1119 = fmul double %1118, 1.280000e+02
  %1120 = fadd double %1119, %1116
  %1121 = fcmp olt double %1120, %1109
  br i1 %1121, label %1122, label %1124

1122:                                             ; preds = %1107
  %1123 = load i32, i32* %557, align 8
  store i64 %1111, i64* %6, align 8
  store i64 %1113, i64* %7, align 8
  store i32 %1123, i32* %8, align 4
  br label %1124

1124:                                             ; preds = %1122, %1107
  %1125 = phi i8 [ 15, %1122 ], [ %1108, %1107 ]
  %1126 = phi double [ %1120, %1122 ], [ %1109, %1107 ]
  %1127 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 7
  %1128 = load i64, i64* %1127, align 8
  %1129 = getelementptr inbounds [8 x i64], [8 x i64]* %13, i64 0, i64 7
  %1130 = load i64, i64* %1129, align 8
  %1131 = sitofp i64 %1130 to double
  %1132 = fmul double %701, %1131
  %1133 = fmul double %1132, 0x3F60000000000000
  %1134 = ashr i64 %1128, %707
  %1135 = sitofp i64 %1134 to double
  %1136 = fmul double %1135, 1.280000e+02
  %1137 = fadd double %1136, %1133
  %1138 = fcmp olt double %1137, %1126
  br i1 %1138, label %1139, label %1141

1139:                                             ; preds = %1124
  %1140 = load i32, i32* %558, align 4
  store i64 %1128, i64* %6, align 8
  store i64 %1130, i64* %7, align 8
  store i32 %1140, i32* %8, align 4
  br label %1141

1141:                                             ; preds = %1139, %1124
  %1142 = phi i8 [ 16, %1139 ], [ %1125, %1124 ]
  %1143 = phi double [ %1137, %1139 ], [ %1126, %1124 ]
  %1144 = load i64, i64* %10, align 8
  %1145 = sitofp i64 %1144 to double
  %1146 = fmul double %701, %1145
  %1147 = fmul double %1146, 0x3F60000000000000
  %1148 = load i64, i64* %9, align 8
  %1149 = ashr i64 %1148, %707
  %1150 = sitofp i64 %1149 to double
  %1151 = fmul double %1150, 1.280000e+02
  %1152 = fadd double %1147, %1151
  %1153 = fcmp olt double %1143, %1152
  br i1 %1153, label %737, label %833

1154:                                             ; preds = %1035, %1031, %932, %839, %837, %835
  %1155 = phi i32 [ %838, %837 ], [ %841, %839 ], [ %933, %932 ], [ %1034, %1031 ], [ 0, %1035 ], [ %836, %835 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %543) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %542) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %541) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %540) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %539) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %538) #12
  %1156 = icmp eq i32 %1155, 0
  br i1 %1156, label %1165, label %1442

1157:                                             ; preds = %526
  %1158 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 80
  %1159 = load i32, i32* %1158, align 16
  %1160 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 7, i32 4
  %1161 = load i32, i32* %1160, align 4
  store i32 %1161, i32* %1158, align 16
  %1162 = call fastcc i32 @encode_with_recode_loop_and_filter(%struct.AV1_COMP* %0, i64* %101, i8* %1, i64* null, i64* null, i32* nonnull %20) #12
  %1163 = icmp eq i32 %1162, 0
  br i1 %1163, label %1164, label %1442

1164:                                             ; preds = %1157
  store i32 %1159, i32* %1158, align 16
  br label %1165

1165:                                             ; preds = %1164, %1154
  %1166 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %1167 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %1166, align 16
  %1168 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %1167, i64 0, i32 3
  store i32 1, i32* %1168, align 8
  %1169 = load i8, i8* %433, align 8
  %1170 = icmp eq i8 %1169, 0
  br i1 %1170, label %1182, label %1171

1171:                                             ; preds = %1165
  %1172 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 41
  %1173 = load i32, i32* %36, align 4
  %1174 = and i32 %1173, 1
  %1175 = icmp eq i32 %1174, 0
  br i1 %1175, label %1179, label %1176

1176:                                             ; preds = %1171
  %1177 = load i32, i32* %1172, align 8
  %1178 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 42, i64 0
  store i32 %1177, i32* %1178, align 4
  br label %1179

1179:                                             ; preds = %1176, %1171
  %1180 = and i32 %1173, 2
  %1181 = icmp eq i32 %1180, 0
  br i1 %1181, label %1406, label %1403

1182:                                             ; preds = %1439, %1436, %1165
  %1183 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %1184 = load i32, i32* %1183, align 16
  %1185 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %1186 = load i32, i32* %1185, align 8
  %1187 = add nsw i32 %1186, -1
  %1188 = icmp eq i32 %1184, %1187
  br i1 %1188, label %1189, label %1193

1189:                                             ; preds = %1182
  %1190 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 19
  %1191 = load i32, i32* %1190, align 4
  %1192 = add nsw i32 %1191, 1
  store i32 %1192, i32* %1190, align 4
  br label %1193

1193:                                             ; preds = %1189, %1182
  %1194 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %103, i64 0, i32 0
  %1195 = load i8, i8* %1194, align 8
  %1196 = icmp eq i8 %1195, 0
  br i1 %1196, label %1261, label %1197

1197:                                             ; preds = %1193
  %1198 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 1
  %1199 = load i8, i8* %1198, align 1
  %1200 = icmp eq i8 %1199, 0
  br i1 %1200, label %1247, label %1201

1201:                                             ; preds = %1197
  %1202 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %1203 = load i32, i32* %1202, align 4
  %1204 = icmp sgt i32 %1203, 0
  br i1 %1204, label %1205, label %1261

1205:                                             ; preds = %1201
  %1206 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %112, align 16
  %1207 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1206, i64 0, i32 6
  %1208 = load i8*, i8** %1207, align 8
  %1209 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 9
  %1210 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %1209, align 8
  %1211 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %1212 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 11
  %1213 = load i32, i32* %1211, align 8
  br label %1214

1214:                                             ; preds = %1223, %1205
  %1215 = phi i32 [ %1203, %1205 ], [ %1224, %1223 ]
  %1216 = phi i32 [ %1213, %1205 ], [ %1225, %1223 ]
  %1217 = phi i32 [ 0, %1205 ], [ %1231, %1223 ]
  %1218 = phi i8* [ %1208, %1205 ], [ %1230, %1223 ]
  %1219 = phi %struct.MB_MODE_INFO** [ %1210, %1205 ], [ %1228, %1223 ]
  %1220 = icmp sgt i32 %1216, 0
  br i1 %1220, label %1233, label %1223

1221:                                             ; preds = %1233
  %1222 = load i32, i32* %1202, align 4
  br label %1223

1223:                                             ; preds = %1221, %1214
  %1224 = phi i32 [ %1215, %1214 ], [ %1222, %1221 ]
  %1225 = phi i32 [ %1216, %1214 ], [ %1245, %1221 ]
  %1226 = load i32, i32* %1212, align 4
  %1227 = sext i32 %1226 to i64
  %1228 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1219, i64 %1227
  %1229 = sext i32 %1225 to i64
  %1230 = getelementptr inbounds i8, i8* %1218, i64 %1229
  %1231 = add nuw nsw i32 %1217, 1
  %1232 = icmp slt i32 %1231, %1224
  br i1 %1232, label %1214, label %1261

1233:                                             ; preds = %1214, %1233
  %1234 = phi i32 [ %1242, %1233 ], [ 0, %1214 ]
  %1235 = phi i8* [ %1244, %1233 ], [ %1218, %1214 ]
  %1236 = phi %struct.MB_MODE_INFO** [ %1243, %1233 ], [ %1219, %1214 ]
  %1237 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1236, align 8
  %1238 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1237, i64 0, i32 28
  %1239 = load i16, i16* %1238, align 1
  %1240 = trunc i16 %1239 to i8
  %1241 = and i8 %1240, 7
  store i8 %1241, i8* %1235, align 1
  %1242 = add nuw nsw i32 %1234, 1
  %1243 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1236, i64 1
  %1244 = getelementptr inbounds i8, i8* %1235, i64 1
  %1245 = load i32, i32* %1211, align 8
  %1246 = icmp slt i32 %1242, %1245
  br i1 %1246, label %1233, label %1221

1247:                                             ; preds = %1197
  %1248 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 24
  %1249 = load i8*, i8** %1248, align 8
  %1250 = icmp eq i8* %1249, null
  br i1 %1250, label %1261, label %1251

1251:                                             ; preds = %1247
  %1252 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %112, align 16
  %1253 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1252, i64 0, i32 6
  %1254 = load i8*, i8** %1253, align 8
  %1255 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1252, i64 0, i32 9
  %1256 = load i32, i32* %1255, align 8
  %1257 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1252, i64 0, i32 8
  %1258 = load i32, i32* %1257, align 4
  %1259 = mul nsw i32 %1258, %1256
  %1260 = sext i32 %1259 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1254, i8* nonnull align 1 %1249, i64 %1260, i1 false) #12
  br label %1261

1261:                                             ; preds = %1223, %1251, %1247, %1201, %1193
  %1262 = load i8, i8* %105, align 16
  %1263 = and i8 %1262, -3
  %1264 = icmp eq i8 %1263, 0
  br i1 %1264, label %1321, label %1265

1265:                                             ; preds = %1261
  %1266 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 0
  %1267 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1266, align 8
  %1268 = icmp eq %struct.RefCntBuffer* %1267, null
  br i1 %1268, label %1273, label %1269

1269:                                             ; preds = %1265
  %1270 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1267, i64 0, i32 0
  %1271 = load i32, i32* %1270, align 8
  %1272 = add nsw i32 %1271, -1
  store i32 %1272, i32* %1270, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %1266, align 8
  br label %1273

1273:                                             ; preds = %1269, %1265
  %1274 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 1
  %1275 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1274, align 8
  %1276 = icmp eq %struct.RefCntBuffer* %1275, null
  br i1 %1276, label %1281, label %1277

1277:                                             ; preds = %1273
  %1278 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1275, i64 0, i32 0
  %1279 = load i32, i32* %1278, align 8
  %1280 = add nsw i32 %1279, -1
  store i32 %1280, i32* %1278, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %1274, align 8
  br label %1281

1281:                                             ; preds = %1277, %1273
  %1282 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 2
  %1283 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1282, align 8
  %1284 = icmp eq %struct.RefCntBuffer* %1283, null
  br i1 %1284, label %1289, label %1285

1285:                                             ; preds = %1281
  %1286 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1283, i64 0, i32 0
  %1287 = load i32, i32* %1286, align 8
  %1288 = add nsw i32 %1287, -1
  store i32 %1288, i32* %1286, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %1282, align 8
  br label %1289

1289:                                             ; preds = %1285, %1281
  %1290 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 3
  %1291 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1290, align 8
  %1292 = icmp eq %struct.RefCntBuffer* %1291, null
  br i1 %1292, label %1297, label %1293

1293:                                             ; preds = %1289
  %1294 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1291, i64 0, i32 0
  %1295 = load i32, i32* %1294, align 8
  %1296 = add nsw i32 %1295, -1
  store i32 %1296, i32* %1294, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %1290, align 8
  br label %1297

1297:                                             ; preds = %1293, %1289
  %1298 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 4
  %1299 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1298, align 8
  %1300 = icmp eq %struct.RefCntBuffer* %1299, null
  br i1 %1300, label %1305, label %1301

1301:                                             ; preds = %1297
  %1302 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1299, i64 0, i32 0
  %1303 = load i32, i32* %1302, align 8
  %1304 = add nsw i32 %1303, -1
  store i32 %1304, i32* %1302, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %1298, align 8
  br label %1305

1305:                                             ; preds = %1301, %1297
  %1306 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 5
  %1307 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1306, align 8
  %1308 = icmp eq %struct.RefCntBuffer* %1307, null
  br i1 %1308, label %1313, label %1309

1309:                                             ; preds = %1305
  %1310 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1307, i64 0, i32 0
  %1311 = load i32, i32* %1310, align 8
  %1312 = add nsw i32 %1311, -1
  store i32 %1312, i32* %1310, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %1306, align 8
  br label %1313

1313:                                             ; preds = %1309, %1305
  %1314 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 6
  %1315 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1314, align 8
  %1316 = icmp eq %struct.RefCntBuffer* %1315, null
  br i1 %1316, label %1321, label %1317

1317:                                             ; preds = %1313
  %1318 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1315, i64 0, i32 0
  %1319 = load i32, i32* %1318, align 8
  %1320 = add nsw i32 %1319, -1
  store i32 %1320, i32* %1318, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %1314, align 8
  br label %1321

1321:                                             ; preds = %1317, %1313, %1261
  call void @av1_denoiser_update_ref_frame(%struct.AV1_COMP* %0) #12
  %1322 = load i32, i32* %50, align 8
  %1323 = icmp eq i32 %1322, 0
  br i1 %1323, label %1329, label %1324

1324:                                             ; preds = %1321
  %1325 = bitcast %struct.RefCntBuffer** %112 to i64*
  %1326 = load i64, i64* %1325, align 16
  %1327 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 24
  %1328 = bitcast %struct.RefCntBuffer** %1327 to i64*
  store i64 %1326, i64* %1328, align 8
  br label %1329

1329:                                             ; preds = %1324, %1321
  call fastcc void @refresh_reference_frames(%struct.AV1_COMP* %0) #12
  %1330 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 16
  %1331 = load i8, i8* %1330, align 4
  %1332 = icmp eq i8 %1331, 1
  br i1 %1332, label %1333, label %1344

1333:                                             ; preds = %1329
  %1334 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 36
  %1335 = bitcast %struct.frame_contexts** %1334 to i8**
  %1336 = load i8*, i8** %1335, align 8
  %1337 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 55
  %1338 = load %struct.TileDataEnc*, %struct.TileDataEnc** %1337, align 8
  %1339 = load i32, i32* %20, align 4
  %1340 = sext i32 %1339 to i64
  %1341 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %1338, i64 %1340, i32 2
  %1342 = bitcast %struct.frame_contexts* %1341 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1336, i8* align 16 %1342, i64 21264, i1 false) #12
  %1343 = load %struct.frame_contexts*, %struct.frame_contexts** %1334, align 8
  call void @av1_reset_cdf_symbol_counters(%struct.frame_contexts* %1343) #12
  br label %1344

1344:                                             ; preds = %1333, %1329
  %1345 = load i32, i32* %118, align 4
  %1346 = icmp eq i32 %1345, 0
  br i1 %1346, label %1347, label %1354

1347:                                             ; preds = %1344
  %1348 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %112, align 16
  %1349 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1348, i64 0, i32 22
  %1350 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 36
  %1351 = bitcast %struct.frame_contexts** %1350 to i8**
  %1352 = load i8*, i8** %1351, align 8
  %1353 = bitcast %struct.frame_contexts* %1349 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1353, i8* align 4 %1352, i64 21264, i1 false) #12
  br label %1354

1354:                                             ; preds = %1347, %1344
  %1355 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 11, i32 10
  %1356 = load i8, i8* %1355, align 2, !range !2
  %1357 = icmp eq i8 %1356, 0
  br i1 %1357, label %1390, label %1358

1358:                                             ; preds = %1354
  %1359 = load i32, i32* %118, align 4
  %1360 = icmp eq i32 %1359, 0
  br i1 %1360, label %1390, label %1361

1361:                                             ; preds = %1358
  %1362 = load i32, i32* %92, align 4
  switch i32 %1362, label %1390 [
    i32 2, label %1371
    i32 0, label %1363
  ]

1363:                                             ; preds = %1361
  %1364 = load i8, i8* %96, align 8
  %1365 = icmp eq i8 %1364, 0
  br i1 %1365, label %1366, label %1390

1366:                                             ; preds = %1363
  %1367 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %1166, align 16
  %1368 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %1367, i64 0, i32 8
  %1369 = load i32, i32* %1368, align 8
  %1370 = icmp eq i32 %1369, 0
  br i1 %1370, label %1390, label %1371

1371:                                             ; preds = %1366, %1361
  %1372 = getelementptr inbounds [20 x i8], [20 x i8]* %21, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %1372) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %1372, i8* align 16 getelementptr inbounds ([20 x i8], [20 x i8]* @__const.encode_frame_to_data_rate.fn, i64 0, i64 0), i64 20, i1 false) #12
  %1373 = load i32, i32* %77, align 4
  %1374 = udiv i32 %1373, 100
  %1375 = trunc i32 %1374 to i8
  %1376 = add i8 %1375, 48
  %1377 = getelementptr inbounds [20 x i8], [20 x i8]* %21, i64 0, i64 4
  store i8 %1376, i8* %1377, align 4
  %1378 = urem i32 %1373, 100
  %1379 = trunc i32 %1378 to i8
  %1380 = udiv i8 %1379, 10
  %1381 = or i8 %1380, 48
  %1382 = getelementptr inbounds [20 x i8], [20 x i8]* %21, i64 0, i64 5
  store i8 %1381, i8* %1382, align 1
  %1383 = urem i32 %1373, 10
  %1384 = trunc i32 %1383 to i8
  %1385 = or i8 %1384, 48
  %1386 = getelementptr inbounds [20 x i8], [20 x i8]* %21, i64 0, i64 6
  store i8 %1385, i8* %1386, align 2
  %1387 = getelementptr inbounds [20 x i8], [20 x i8]* %21, i64 0, i64 7
  store i8 0, i8* %1387, align 1
  %1388 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 36
  %1389 = load %struct.frame_contexts*, %struct.frame_contexts** %1388, align 8
  call void @av1_print_frame_contexts(%struct.frame_contexts* %1389, i8* nonnull %1372) #12
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %1372) #12
  br label %1390

1390:                                             ; preds = %1371, %1366, %1363, %1361, %1358, %1354
  %1391 = load i8, i8* %105, align 4
  store i8 %1391, i8* %168, align 8
  %1392 = load i64, i64* %101, align 8
  call void @av1_rc_postencode_update(%struct.AV1_COMP* %0, i64 %1392) #12
  %1393 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 1
  store i8 0, i8* %1393, align 1
  %1394 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 2
  store i8 0, i8* %1394, align 2
  store i8 0, i8* %334, align 1
  %1395 = load i32, i32* %50, align 8
  %1396 = icmp eq i32 %1395, 0
  br i1 %1396, label %1444, label %1397

1397:                                             ; preds = %1390
  %1398 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 51, i32 0
  %1399 = load i32, i32* %1398, align 4
  %1400 = add nsw i32 %1399, 1
  store i32 %1400, i32* %1398, align 4
  %1401 = load i32, i32* %77, align 4
  %1402 = add i32 %1401, 1
  store i32 %1402, i32* %77, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %534) #12
  br label %1446

1403:                                             ; preds = %1179
  %1404 = load i32, i32* %1172, align 8
  %1405 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 42, i64 1
  store i32 %1404, i32* %1405, align 4
  br label %1406

1406:                                             ; preds = %1403, %1179
  %1407 = and i32 %1173, 4
  %1408 = icmp eq i32 %1407, 0
  br i1 %1408, label %1412, label %1409

1409:                                             ; preds = %1406
  %1410 = load i32, i32* %1172, align 8
  %1411 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 42, i64 2
  store i32 %1410, i32* %1411, align 4
  br label %1412

1412:                                             ; preds = %1409, %1406
  %1413 = and i32 %1173, 8
  %1414 = icmp eq i32 %1413, 0
  br i1 %1414, label %1418, label %1415

1415:                                             ; preds = %1412
  %1416 = load i32, i32* %1172, align 8
  %1417 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 42, i64 3
  store i32 %1416, i32* %1417, align 4
  br label %1418

1418:                                             ; preds = %1415, %1412
  %1419 = and i32 %1173, 16
  %1420 = icmp eq i32 %1419, 0
  br i1 %1420, label %1424, label %1421

1421:                                             ; preds = %1418
  %1422 = load i32, i32* %1172, align 8
  %1423 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 42, i64 4
  store i32 %1422, i32* %1423, align 4
  br label %1424

1424:                                             ; preds = %1421, %1418
  %1425 = and i32 %1173, 32
  %1426 = icmp eq i32 %1425, 0
  br i1 %1426, label %1430, label %1427

1427:                                             ; preds = %1424
  %1428 = load i32, i32* %1172, align 8
  %1429 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 42, i64 5
  store i32 %1428, i32* %1429, align 4
  br label %1430

1430:                                             ; preds = %1427, %1424
  %1431 = and i32 %1173, 64
  %1432 = icmp eq i32 %1431, 0
  br i1 %1432, label %1436, label %1433

1433:                                             ; preds = %1430
  %1434 = load i32, i32* %1172, align 8
  %1435 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 42, i64 6
  store i32 %1434, i32* %1435, align 4
  br label %1436

1436:                                             ; preds = %1433, %1430
  %1437 = trunc i32 %1173 to i8
  %1438 = icmp sgt i8 %1437, -1
  br i1 %1438, label %1182, label %1439

1439:                                             ; preds = %1436
  %1440 = load i32, i32* %1172, align 8
  %1441 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 42, i64 7
  store i32 %1440, i32* %1441, align 4
  br label %1182

1442:                                             ; preds = %1154, %1157
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %534) #12
  br label %1446

1443:                                             ; preds = %287
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %187) #12
  br label %1446

1444:                                             ; preds = %1390
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %534) #12
  br label %1446

1445:                                             ; preds = %186
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %187) #12
  br label %1446

1446:                                             ; preds = %76, %419, %423, %95, %292, %1443, %239, %1397, %1444, %1442, %1445, %99
  %1447 = phi i32 [ 1, %1442 ], [ 1, %99 ], [ 1, %1445 ], [ 0, %1444 ], [ 0, %1397 ], [ 0, %239 ], [ 0, %1443 ], [ 0, %292 ], [ 0, %95 ], [ 0, %423 ], [ 0, %419 ], [ 0, %76 ]
  ret i32 %1447
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_receive_raw_frame(%struct.AV1_COMP*, i64, %struct.yv12_buffer_config*, i64, i64) local_unnamed_addr #2 {
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %7 = load %struct.SequenceHeader*, %struct.SequenceHeader** %6, align 16
  %8 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 14
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 15
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 26
  %13 = load i32, i32* %12, align 8
  %14 = lshr i32 %13, 3
  %15 = and i32 %14, 1
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 26
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %47

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 3
  %22 = load i32, i32* %21, align 16
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %47

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83
  %26 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %28 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %27, align 16
  %29 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %28, i64 0, i32 16
  %30 = load i32, i32* %29, align 8
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %32 = load i32, i32* %31, align 16
  %33 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %7, i64 0, i32 32
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %7, i64 0, i32 33
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %7, i64 0, i32 26
  %40 = load i8, i8* %39, align 4
  %41 = zext i8 %40 to i32
  %42 = tail call i32 @av1_denoiser_alloc(%struct.AV1Common* %16, %struct.SVC* %26, %struct.av1_denoiser* %25, i32 %30, i32 %18, i32 %32, i32 %34, i32 %36, i32 %38, i32 %41, i32 288) #12
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %24
  %45 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %46 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %45, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %46, i32 2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.42, i64 0, i64 0)) #12
  br label %47

47:                                               ; preds = %5, %20, %24, %44
  %48 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 23
  %49 = load float, float* %48, align 16
  %50 = fcmp ogt float %49, 0.000000e+00
  br i1 %50, label %51, label %101

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %53, 1
  br i1 %54, label %55, label %59

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 25
  %57 = load i32, i32* %56, align 8
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %101, label %59

59:                                               ; preds = %55, %51
  %60 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 67
  %61 = load %struct.aom_denoise_and_model_t*, %struct.aom_denoise_and_model_t** %60, align 8
  %62 = icmp eq %struct.aom_denoise_and_model_t* %61, null
  br i1 %62, label %63, label %74

63:                                               ; preds = %59
  %64 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 24
  %65 = load i32, i32* %64, align 4
  %66 = load %struct.SequenceHeader*, %struct.SequenceHeader** %6, align 16
  %67 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %66, i64 0, i32 25
  %68 = load i32, i32* %67, align 8
  %69 = tail call %struct.aom_denoise_and_model_t* @aom_denoise_and_model_alloc(i32 %68, i32 %65, float %49) #12
  store %struct.aom_denoise_and_model_t* %69, %struct.aom_denoise_and_model_t** %60, align 8
  %70 = icmp eq %struct.aom_denoise_and_model_t* %69, null
  br i1 %70, label %71, label %74

71:                                               ; preds = %63
  %72 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %73 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %72, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %73, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.48, i64 0, i64 0)) #12
  br label %101

74:                                               ; preds = %63, %59
  %75 = phi %struct.aom_denoise_and_model_t* [ %69, %63 ], [ %61, %59 ]
  %76 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 66
  %77 = load %struct.aom_film_grain_table_t*, %struct.aom_film_grain_table_t** %76, align 16
  %78 = icmp eq %struct.aom_film_grain_table_t* %77, null
  br i1 %78, label %79, label %88

79:                                               ; preds = %74
  %80 = tail call i8* @aom_malloc(i64 16) #12
  %81 = bitcast %struct.aom_film_grain_table_t** %76 to i8**
  store i8* %80, i8** %81, align 16
  %82 = icmp eq i8* %80, null
  br i1 %82, label %83, label %86

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %85 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %84, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %85, i32 2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.49, i64 0, i64 0)) #12
  br label %101

86:                                               ; preds = %79
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %80, i8 0, i64 16, i1 false) #12
  %87 = load %struct.aom_denoise_and_model_t*, %struct.aom_denoise_and_model_t** %60, align 8
  br label %88

88:                                               ; preds = %86, %74
  %89 = phi %struct.aom_denoise_and_model_t* [ %75, %74 ], [ %87, %86 ]
  %90 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32
  %91 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 25
  %92 = load i32, i32* %91, align 8
  %93 = tail call i32 @aom_denoise_and_model_run(%struct.aom_denoise_and_model_t* %89, %struct.yv12_buffer_config* %2, %struct.aom_film_grain_t* %90, i32 %92) #12
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %101, label %95

95:                                               ; preds = %88
  %96 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %90, i64 0, i32 0
  %97 = load i32, i32* %96, align 16
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %101, label %99

99:                                               ; preds = %95
  %100 = load %struct.aom_film_grain_table_t*, %struct.aom_film_grain_table_t** %76, align 16
  tail call void @aom_film_grain_table_append(%struct.aom_film_grain_table_t* %100, i64 %3, i64 %4, %struct.aom_film_grain_t* %90) #12
  br label %101

101:                                              ; preds = %99, %88, %95, %83, %71, %55, %47
  %102 = phi i32 [ 0, %55 ], [ 0, %47 ], [ -1, %83 ], [ -1, %71 ], [ 0, %95 ], [ 0, %88 ], [ 0, %99 ]
  %103 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %104 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %103, align 16
  %105 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %104, i64 0, i32 2
  %106 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %105, align 8
  %107 = tail call i32 @av1_lookahead_push(%struct.lookahead_ctx* %106, %struct.yv12_buffer_config* %2, i64 %3, i64 %4, i32 %15, i64 %1) #12
  %108 = icmp eq i32 %107, 0
  %109 = select i1 %108, i32 %102, i32 -1
  %110 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %7, i64 0, i32 24
  %111 = load i8, i8* %110, align 1
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %113, label %125

113:                                              ; preds = %101
  %114 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %7, i64 0, i32 27
  %115 = load i8, i8* %114, align 1
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %117, label %151

117:                                              ; preds = %113
  %118 = icmp ne i32 %9, 1
  %119 = icmp ne i32 %11, 1
  %120 = or i1 %118, %119
  br i1 %120, label %121, label %151

121:                                              ; preds = %117
  %122 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %123 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %122, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %123, i32 8, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.15, i64 0, i64 0)) #12
  %124 = load i8, i8* %110, align 1
  br label %125

125:                                              ; preds = %121, %101
  %126 = phi i8 [ %124, %121 ], [ %111, %101 ]
  %127 = phi i32 [ -1, %121 ], [ %109, %101 ]
  %128 = icmp ne i8 %126, 1
  %129 = or i32 %11, %9
  %130 = icmp eq i32 %129, 0
  %131 = or i1 %130, %128
  br i1 %131, label %136, label %132

132:                                              ; preds = %125
  %133 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %134 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %133, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %134, i32 8, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.16, i64 0, i64 0)) #12
  %135 = load i8, i8* %110, align 1
  br label %136

136:                                              ; preds = %125, %132
  %137 = phi i8 [ %126, %125 ], [ %135, %132 ]
  %138 = phi i32 [ %127, %125 ], [ -1, %132 ]
  %139 = icmp eq i8 %137, 2
  br i1 %139, label %140, label %151

140:                                              ; preds = %136
  %141 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %7, i64 0, i32 25
  %142 = load i32, i32* %141, align 8
  %143 = icmp ult i32 %142, 11
  br i1 %143, label %144, label %151

144:                                              ; preds = %140
  %145 = icmp eq i32 %9, 1
  %146 = icmp eq i32 %11, 0
  %147 = and i1 %145, %146
  br i1 %147, label %151, label %148

148:                                              ; preds = %144
  %149 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %150 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %149, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %150, i32 8, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.17, i64 0, i64 0)) #12
  br label %151

151:                                              ; preds = %113, %117, %144, %148, %140, %136
  %152 = phi i32 [ %138, %144 ], [ -1, %148 ], [ %138, %140 ], [ %138, %136 ], [ %109, %117 ], [ %109, %113 ]
  ret i32 %152
}

declare i32 @av1_lookahead_push(%struct.lookahead_ctx*, %struct.yv12_buffer_config*, i64, i64, i32, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_get_compressed_data(%struct.AV1_COMP*, i32*, i64*, i64, i8*, i64*, i64*, i32, %struct.aom_rational64*) local_unnamed_addr #2 {
  %10 = alloca %struct.aom_codec_cx_pkt, align 8
  %11 = alloca %struct.PSNR_STATS, align 8
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %13 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %12, align 16
  %14 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %13, i64 0, i32 16
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %22, label %17

17:                                               ; preds = %9
  %18 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %13, i64 0, i32 19
  %19 = load i32, i32* %18, align 4
  %20 = icmp ugt i32 %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  tail call void @av1_one_pass_cbr_svc_start_layer(%struct.AV1_COMP* %0) #12
  br label %22

22:                                               ; preds = %9, %21, %17
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 18
  store i32 0, i32* %23, align 4
  store i64 0, i64* %2, align 8
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 87
  store i64 %3, i64* %24, align 16
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 21
  %26 = load %struct.MvCosts*, %struct.MvCosts** %25, align 16
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 1
  store i8 1, i8* %27, align 1
  %28 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %26, i64 0, i32 1, i64 0, i64 16383
  %29 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %26, i64 0, i32 3, i64 0
  store i32* %28, i32** %29, align 8
  %30 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %26, i64 0, i32 1, i64 1, i64 16383
  %31 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %26, i64 0, i32 3, i64 1
  store i32* %30, i32** %31, align 8
  %32 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %26, i64 0, i32 2, i64 0, i64 16383
  %33 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %26, i64 0, i32 4, i64 0
  store i32* %32, i32** %33, align 8
  %34 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %26, i64 0, i32 2, i64 1, i64 16383
  %35 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %26, i64 0, i32 4, i64 1
  store i32* %34, i32** %35, align 8
  %36 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %26, i64 0, i32 5
  store i32** %33, i32*** %36, align 8
  %37 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 9, i32 7
  %38 = load i8, i8* %37, align 1, !range !2
  %39 = xor i8 %38, 1
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 16
  %41 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 11, i32 8
  %42 = load i8, i8* %41, align 8, !range !2
  %43 = icmp eq i8 %42, 0
  %44 = select i1 %43, i8 %39, i8 0
  store i8 %44, i8* %40, align 4
  %45 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 10
  store i32 0, i32* %45, align 8
  %46 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 12
  %47 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %46, align 16
  %48 = icmp eq %struct.RefCntBuffer* %47, null
  br i1 %48, label %53, label %49

49:                                               ; preds = %22
  %50 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %47, i64 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = add nsw i32 %51, -1
  store i32 %52, i32* %50, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %46, align 16
  br label %53

53:                                               ; preds = %49, %22
  %54 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 39
  %55 = load %struct.BufferPool*, %struct.BufferPool** %54, align 8
  %56 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 0
  %57 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %56) #12
  %58 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %65, label %61

61:                                               ; preds = %53
  %62 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 1, i32 0
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %84

65:                                               ; preds = %136, %132, %128, %124, %120, %116, %112, %108, %104, %100, %96, %92, %88, %84, %61, %53
  %66 = phi i32 [ 0, %53 ], [ 1, %61 ], [ 2, %84 ], [ 3, %88 ], [ 4, %92 ], [ 5, %96 ], [ 6, %100 ], [ 7, %104 ], [ 8, %108 ], [ 9, %112 ], [ 10, %116 ], [ 11, %120 ], [ 12, %124 ], [ 13, %128 ], [ 14, %132 ], [ 15, %136 ]
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 %67, i32 17, i32 6
  %69 = load i32, i32* %68, align 8
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %82, label %71

71:                                               ; preds = %65
  %72 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 %67, i32 17, i32 7
  %73 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 %67, i32 17, i32 5
  %74 = bitcast [3 x i8*]* %72 to <2 x i64>*
  %75 = load <2 x i64>, <2 x i64>* %74, align 8
  %76 = bitcast %union.anon.8* %73 to <2 x i64>*
  store <2 x i64> %75, <2 x i64>* %76, align 8
  %77 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 %67, i32 17, i32 7, i64 2
  %78 = bitcast i8** %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 %67, i32 17, i32 5, i32 0, i32 2
  %81 = bitcast i8** %80 to i64*
  store i64 %79, i64* %81, align 8
  store i32 0, i32* %68, align 8
  br label %82

82:                                               ; preds = %71, %65
  %83 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 %67, i32 0
  store i32 1, i32* %83, align 8
  br label %140

84:                                               ; preds = %61
  %85 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 2, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %65, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 3, i32 0
  %90 = load i32, i32* %89, align 8
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %65, label %92

92:                                               ; preds = %88
  %93 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 4, i32 0
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %65, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 5, i32 0
  %98 = load i32, i32* %97, align 8
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %65, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 6, i32 0
  %102 = load i32, i32* %101, align 8
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %65, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 7, i32 0
  %106 = load i32, i32* %105, align 8
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %65, label %108

108:                                              ; preds = %104
  %109 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 8, i32 0
  %110 = load i32, i32* %109, align 8
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %65, label %112

112:                                              ; preds = %108
  %113 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 9, i32 0
  %114 = load i32, i32* %113, align 8
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %65, label %116

116:                                              ; preds = %112
  %117 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 10, i32 0
  %118 = load i32, i32* %117, align 8
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %65, label %120

120:                                              ; preds = %116
  %121 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 11, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %65, label %124

124:                                              ; preds = %120
  %125 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 12, i32 0
  %126 = load i32, i32* %125, align 8
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %65, label %128

128:                                              ; preds = %124
  %129 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 13, i32 0
  %130 = load i32, i32* %129, align 8
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %65, label %132

132:                                              ; preds = %128
  %133 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 14, i32 0
  %134 = load i32, i32* %133, align 8
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %65, label %136

136:                                              ; preds = %132
  %137 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %55, i64 0, i32 4, i64 15, i32 0
  %138 = load i32, i32* %137, align 8
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %65, label %140

140:                                              ; preds = %136, %82
  %141 = phi i32 [ %66, %82 ], [ -1, %136 ]
  %142 = load %struct.BufferPool*, %struct.BufferPool** %54, align 8
  %143 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %142, i64 0, i32 0
  %144 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %143) #12
  %145 = icmp eq i32 %141, -1
  br i1 %145, label %231, label %146

146:                                              ; preds = %140
  %147 = load %struct.BufferPool*, %struct.BufferPool** %54, align 8
  %148 = sext i32 %141 to i64
  %149 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %147, i64 0, i32 4, i64 %148
  store %struct.RefCntBuffer* %149, %struct.RefCntBuffer** %46, align 16
  %150 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %147, i64 0, i32 4, i64 %148, i32 17, i32 9
  store i32 0, i32* %150, align 8
  %151 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %46, align 16
  %152 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %151, i64 0, i32 19
  %153 = bitcast [4 x i32]* %152 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %153, i8 0, i64 16, i1 false) #12
  %154 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %46, align 16
  %155 = icmp eq %struct.RefCntBuffer* %154, null
  br i1 %155, label %231, label %156

156:                                              ; preds = %146
  %157 = tail call i32 @av1_encode_strategy(%struct.AV1_COMP* %0, i64* %2, i8* %4, i32* %1, i64* %5, i64* %6, %struct.aom_rational64* %8, i32 %7) #12
  switch i32 %157, label %158 [
    i32 -1, label %231
    i32 0, label %159
  ]

158:                                              ; preds = %156
  br label %231

159:                                              ; preds = %156
  %160 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %12, align 16
  %161 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %160, i64 0, i32 10
  %162 = load i32, i32* %161, align 8
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %206, label %164

164:                                              ; preds = %159
  %165 = load i64, i64* %2, align 8
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %206, label %167

167:                                              ; preds = %164
  %168 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 19
  %169 = load i32, i32* %168, align 16
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %183

171:                                              ; preds = %167
  %172 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %173 = load i32, i32* %172, align 4
  %174 = icmp eq i32 %173, 1
  br i1 %174, label %206, label %175

175:                                              ; preds = %171
  %176 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %177 = load i8, i8* %176, align 8
  %178 = icmp eq i8 %177, 1
  br i1 %178, label %206, label %179

179:                                              ; preds = %175
  %180 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 17
  %181 = load i32, i32* %180, align 8
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %206, label %183

183:                                              ; preds = %179, %167
  %184 = bitcast %struct.PSNR_STATS* %11 to i8*
  %185 = bitcast %struct.aom_codec_cx_pkt* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %185) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %185, i8* align 8 bitcast ({ i32, [4 x i8], %union.anon.10 }* @__const.generate_psnr_packet.pkt to i8*), i64 168, i1 false) #12
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %184) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %184, i8* align 8 bitcast (%struct.PSNR_STATS* @__const.generate_psnr_packet.psnr to i8*), i64 160, i1 false) #12
  %186 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 12
  %187 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %186, align 8
  %188 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %46, align 16
  %189 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %188, i64 0, i32 17
  call void @aom_calc_psnr(%struct.yv12_buffer_config* %187, %struct.yv12_buffer_config* %189, %struct.PSNR_STATS* nonnull %11) #12
  %190 = getelementptr inbounds %struct.aom_codec_cx_pkt, %struct.aom_codec_cx_pkt* %10, i64 0, i32 1, i32 0, i32 0, i64 0
  %191 = bitcast i32* %190 to i8*
  %192 = getelementptr inbounds %struct.PSNR_STATS, %struct.PSNR_STATS* %11, i64 0, i32 2, i64 0
  %193 = bitcast i32* %192 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %191, i8* align 8 %193, i64 16, i1 false) #12
  %194 = getelementptr inbounds %struct.aom_codec_cx_pkt, %struct.aom_codec_cx_pkt* %10, i64 0, i32 1, i32 0, i32 1, i64 0
  %195 = bitcast i64* %194 to i8*
  %196 = getelementptr inbounds %struct.PSNR_STATS, %struct.PSNR_STATS* %11, i64 0, i32 1, i64 0
  %197 = bitcast i64* %196 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %195, i8* align 8 %197, i64 32, i1 false) #12
  %198 = getelementptr inbounds %struct.aom_codec_cx_pkt, %struct.aom_codec_cx_pkt* %10, i64 0, i32 1, i32 0, i32 2, i64 0
  %199 = bitcast double* %198 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %199, i8* nonnull align 8 %184, i64 32, i1 false) #12
  %200 = getelementptr inbounds %struct.aom_codec_cx_pkt, %struct.aom_codec_cx_pkt* %10, i64 0, i32 0
  store i32 3, i32* %200, align 8
  %201 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %12, align 16
  %202 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %201, i64 0, i32 4
  %203 = load %struct.aom_codec_pkt_list*, %struct.aom_codec_pkt_list** %202, align 8
  %204 = call i32 @aom_codec_pkt_list_add(%struct.aom_codec_pkt_list* %203, %struct.aom_codec_cx_pkt* nonnull %10) #12
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %184) #12
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %185) #12
  %205 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %12, align 16
  br label %206

206:                                              ; preds = %175, %171, %179, %164, %159, %183
  %207 = phi %struct.AV1_PRIMARY* [ %160, %175 ], [ %160, %171 ], [ %160, %179 ], [ %160, %164 ], [ %160, %159 ], [ %205, %183 ]
  %208 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %207, i64 0, i32 9, i32 1
  %209 = load i32, i32* %208, align 8
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %231, label %211

211:                                              ; preds = %206
  %212 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %213 = load i32, i32* %212, align 4
  %214 = icmp eq i32 %213, 1
  br i1 %214, label %231, label %215

215:                                              ; preds = %211
  %216 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %217 = load i8, i8* %216, align 8
  %218 = icmp eq i8 %217, 1
  br i1 %218, label %231, label %219

219:                                              ; preds = %215
  %220 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %221 = load i8, i8* %220, align 16
  %222 = icmp eq i8 %221, 0
  br i1 %222, label %223, label %227

223:                                              ; preds = %219
  %224 = load i32, i32* %45, align 8
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %226, label %227

226:                                              ; preds = %223
  call void @av1_init_level_info(%struct.AV1_COMP* %0) #12
  br label %227

227:                                              ; preds = %223, %226, %219
  %228 = load i64, i64* %2, align 8
  %229 = load i64, i64* %5, align 8
  %230 = load i64, i64* %6, align 8
  call void @av1_update_level_info(%struct.AV1_COMP* %0, i64 %228, i64 %229, i64 %230) #12
  br label %231

231:                                              ; preds = %215, %211, %140, %158, %156, %206, %227, %146
  %232 = phi i32 [ 1, %146 ], [ 1, %158 ], [ %157, %156 ], [ 0, %215 ], [ 0, %206 ], [ 0, %227 ], [ 1, %140 ], [ 0, %211 ]
  ret i32 %232
}

declare void @av1_one_pass_cbr_svc_start_layer(%struct.AV1_COMP*) local_unnamed_addr #3

declare i32 @av1_encode_strategy(%struct.AV1_COMP*, i64*, i8*, i32*, i64*, i64*, %struct.aom_rational64*, i32) local_unnamed_addr #3

declare void @av1_init_level_info(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_update_level_info(%struct.AV1_COMP*, i64, i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_get_preview_raw_frame(%struct.AV1_COMP* nocapture readonly, %struct.yv12_buffer_config* nocapture) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 17
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %33, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 12
  %8 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %7, align 16
  %9 = icmp eq %struct.RefCntBuffer* %8, null
  br i1 %9, label %33, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %8, i64 0, i32 17
  %12 = bitcast %struct.yv12_buffer_config* %1 to i8*
  %13 = bitcast %struct.yv12_buffer_config* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 208, i1 false)
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %15 = load i32, i32* %14, align 16
  %16 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0, i32 0, i32 0
  store i32 %15, i32* %16, align 8
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1, i32 0, i32 0
  store i32 %18, i32* %19, align 8
  %20 = load i32, i32* %14, align 16
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %22 = load %struct.SequenceHeader*, %struct.SequenceHeader** %21, align 16
  %23 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %22, i64 0, i32 32
  %24 = load i32, i32* %23, align 8
  %25 = ashr i32 %20, %24
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0, i32 0, i32 1
  store i32 %25, i32* %26, align 4
  %27 = load i32, i32* %17, align 4
  %28 = load %struct.SequenceHeader*, %struct.SequenceHeader** %21, align 16
  %29 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %28, i64 0, i32 33
  %30 = load i32, i32* %29, align 4
  %31 = ashr i32 %27, %30
  %32 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1, i32 0, i32 1
  store i32 %31, i32* %32, align 4
  br label %33

33:                                               ; preds = %10, %6, %2
  %34 = phi i32 [ -1, %2 ], [ 0, %10 ], [ -1, %6 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_get_last_show_frame(%struct.AV1_COMP* nocapture readonly, %struct.yv12_buffer_config* nocapture) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 24
  %4 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %3, align 8
  %5 = icmp eq %struct.RefCntBuffer* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %4, i64 0, i32 17
  %8 = bitcast %struct.yv12_buffer_config* %1 to i8*
  %9 = bitcast %struct.yv12_buffer_config* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 208, i1 false)
  br label %10

10:                                               ; preds = %2, %6
  %11 = phi i32 [ 0, %6 ], [ -1, %2 ]
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_copy_new_frame_enc(%struct.AV1Common* nocapture readonly, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %5 = load %struct.SequenceHeader*, %struct.SequenceHeader** %4, align 16
  %6 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %5, i64 0, i32 27
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = select i1 %8, i32 3, i32 1
  %10 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 1, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %59

15:                                               ; preds = %3
  %16 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 0, i32 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %17, %19
  br i1 %20, label %21, label %59

21:                                               ; preds = %15
  %22 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 1, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %23, %25
  br i1 %26, label %27, label %59

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %29, %31
  br i1 %32, label %33, label %59

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4, i32 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 4, i32 0, i32 0
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %35, %37
  br i1 %38, label %39, label %59

39:                                               ; preds = %33
  %40 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 4, i32 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %41, %43
  br i1 %44, label %45, label %59

45:                                               ; preds = %39
  %46 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 12
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 12
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %47, %49
  br i1 %50, label %51, label %59

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 26
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 26
  %55 = load i32, i32* %54, align 8
  %56 = xor i32 %55, %53
  %57 = and i32 %56, 8
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %62, label %59

59:                                               ; preds = %51, %3, %15, %21, %27, %33, %39, %45
  %60 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 1
  %61 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %60, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %61, i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.18, i64 0, i64 0)) #12
  br label %63

62:                                               ; preds = %51
  tail call void @aom_yv12_copy_frame_c(%struct.yv12_buffer_config* %1, %struct.yv12_buffer_config* %2, i32 %9) #12
  br label %63

63:                                               ; preds = %62, %59
  %64 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 1
  %65 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %64, align 8
  %66 = getelementptr inbounds %struct.aom_internal_error_info, %struct.aom_internal_error_info* %65, i64 0, i32 0
  %67 = load i32, i32* %66, align 8
  ret i32 %67
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_set_internal_size(%struct.AV1EncoderConfig* nocapture, %struct.ResizePendingParams* nocapture, i8 zeroext, i8 zeroext) local_unnamed_addr #2 {
  %5 = icmp ugt i8 %2, 6
  %6 = icmp ugt i8 %3, 6
  %7 = or i1 %5, %6
  br i1 %7, label %52, label %8

8:                                                ; preds = %4
  %9 = add i8 %2, -1
  %10 = icmp ult i8 %9, 6
  br i1 %10, label %11, label %18

11:                                               ; preds = %8
  %12 = sext i8 %9 to i64
  %13 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table.av1_set_internal_size.51, i64 0, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = sext i8 %9 to i64
  %16 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table.av1_set_internal_size.52, i64 0, i64 %15
  %17 = load i32, i32* %16, align 4
  br label %18

18:                                               ; preds = %11, %8
  %19 = phi i32 [ 1, %8 ], [ %14, %11 ]
  %20 = phi i32 [ 1, %8 ], [ %17, %11 ]
  %21 = add i8 %3, -1
  %22 = icmp ult i8 %21, 6
  br i1 %22, label %23, label %30

23:                                               ; preds = %18
  %24 = sext i8 %21 to i64
  %25 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table.av1_set_internal_size.51, i64 0, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = sext i8 %21 to i64
  %28 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table.av1_set_internal_size.52, i64 0, i64 %27
  %29 = load i32, i32* %28, align 4
  br label %30

30:                                               ; preds = %23, %18
  %31 = phi i32 [ 1, %18 ], [ %26, %23 ]
  %32 = phi i32 [ 1, %18 ], [ %29, %23 ]
  %33 = add nsw i32 %20, -1
  %34 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %0, i64 0, i32 1, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = mul nsw i32 %35, %19
  %37 = add nsw i32 %33, %36
  %38 = sdiv i32 %37, %20
  %39 = getelementptr inbounds %struct.ResizePendingParams, %struct.ResizePendingParams* %1, i64 0, i32 0
  store i32 %38, i32* %39, align 4
  %40 = add nsw i32 %32, -1
  %41 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %0, i64 0, i32 1, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = mul nsw i32 %42, %31
  %44 = add nsw i32 %40, %43
  %45 = sdiv i32 %44, %32
  %46 = getelementptr inbounds %struct.ResizePendingParams, %struct.ResizePendingParams* %1, i64 0, i32 1
  store i32 %45, i32* %46, align 4
  %47 = or i8 %3, %2
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %52, label %49

49:                                               ; preds = %30
  %50 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %0, i64 0, i32 6, i32 0
  store i8 1, i8* %50, align 8
  %51 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %51, align 1
  br label %52

52:                                               ; preds = %49, %30, %4
  %53 = phi i32 [ -1, %4 ], [ 0, %30 ], [ 0, %49 ]
  ret i32 %53
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @av1_get_quantizer(%struct.AV1_COMP* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 0
  %3 = load i32, i32* %2, align 16
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_convert_sect5obus_to_annexb(i8*, i64* nocapture) local_unnamed_addr #2 {
  %3 = alloca i16, align 2
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = load i64, i64* %1, align 8
  %8 = bitcast i16* %3 to i8*
  %9 = getelementptr inbounds i8, i8* %8, i64 1
  %10 = bitcast i64* %4 to i8*
  %11 = bitcast i64* %5 to i8*
  %12 = bitcast i64* %6 to i8*
  %13 = icmp eq i64 %7, 0
  br i1 %13, label %65, label %14

14:                                               ; preds = %2, %62
  %15 = phi i8* [ %59, %62 ], [ %0, %2 ]
  %16 = phi i64 [ %58, %62 ], [ %7, %2 ]
  %17 = phi i64 [ %57, %62 ], [ 0, %2 ]
  %18 = phi i64 [ %56, %62 ], [ 0, %2 ]
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %8)
  store i8 -86, i8* %8, align 2
  store i8 -86, i8* %9, align 1
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #12
  store i64 -6148914691236517206, i64* %4, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #12
  store i64 -6148914691236517206, i64* %5, align 8
  %19 = load i8, i8* %15, align 1
  %20 = and i8 %19, 4
  %21 = icmp eq i8 %20, 0
  %22 = select i1 %21, i64 1, i64 2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 2 %8, i8* align 1 %15, i64 %22, i1 false)
  %23 = load i8, i8* %8, align 2
  %24 = and i8 %23, -3
  store i8 %24, i8* %8, align 2
  %25 = getelementptr inbounds i8, i8* %15, i64 %22
  %26 = call i32 @aom_uleb_decode(i8* %25, i64 %16, i64* nonnull %4, i64* nonnull %5) #12
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %55

28:                                               ; preds = %14
  %29 = load i64, i64* %5, align 8
  %30 = add i64 %29, %22
  %31 = load i64, i64* %4, align 8
  %32 = add i64 %31, %22
  %33 = call i64 @aom_uleb_size_in_bytes(i64 %32) #12
  %34 = getelementptr inbounds i8, i8* %15, i64 %33
  %35 = getelementptr inbounds i8, i8* %34, i64 %22
  %36 = getelementptr inbounds i8, i8* %15, i64 %30
  %37 = sub i64 %16, %30
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 %36, i64 %37, i1 false)
  %38 = load i64, i64* %4, align 8
  %39 = add i64 %38, %30
  %40 = add i64 %38, %22
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #12
  store i64 -6148914691236517206, i64* %6, align 8
  %41 = call i32 @aom_uleb_encode(i64 %40, i64 8, i8* %15, i64* nonnull %6) #12
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %49

43:                                               ; preds = %28
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %34, i8* nonnull align 2 %8, i64 %22, i1 false)
  %44 = add i64 %39, %17
  %45 = sub i64 %16, %39
  %46 = add i64 %40, %33
  %47 = getelementptr inbounds i8, i8* %15, i64 %46
  %48 = add i64 %46, %18
  br label %49

49:                                               ; preds = %28, %43
  %50 = phi i64 [ %48, %43 ], [ %18, %28 ]
  %51 = phi i64 [ %44, %43 ], [ %17, %28 ]
  %52 = phi i64 [ %45, %43 ], [ %16, %28 ]
  %53 = phi i8* [ %47, %43 ], [ %15, %28 ]
  %54 = phi i32 [ 0, %43 ], [ 1, %28 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #12
  br label %55

55:                                               ; preds = %14, %49
  %56 = phi i64 [ %50, %49 ], [ %18, %14 ]
  %57 = phi i64 [ %51, %49 ], [ %17, %14 ]
  %58 = phi i64 [ %52, %49 ], [ %16, %14 ]
  %59 = phi i8* [ %53, %49 ], [ %15, %14 ]
  %60 = phi i32 [ %54, %49 ], [ 1, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #12
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %8)
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %67

62:                                               ; preds = %55
  %63 = load i64, i64* %1, align 8
  %64 = icmp ult i64 %57, %63
  br i1 %64, label %14, label %65

65:                                               ; preds = %62, %2
  %66 = phi i64 [ 0, %2 ], [ %56, %62 ]
  store i64 %66, i64* %1, align 8
  br label %67

67:                                               ; preds = %55, %65
  %68 = phi i32 [ 0, %65 ], [ 1, %55 ]
  ret i32 %68
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @aom_uleb_decode(i8*, i64, i64*, i64*) local_unnamed_addr #3

declare i64 @aom_uleb_size_in_bytes(i64) local_unnamed_addr #3

declare i32 @aom_uleb_encode(i64, i64, i8*, i64*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_apply_encoding_flags(%struct.AV1_COMP*, i64) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 0
  store i32 127, i32* %4, align 4
  %5 = and i64 %1, 8323072
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %40, label %7

7:                                                ; preds = %2
  %8 = and i64 %1, 65536
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %9, i32 127, i32 126
  %11 = and i64 %1, 131072
  %12 = icmp eq i64 %11, 0
  %13 = and i32 %10, 125
  %14 = select i1 %12, i32 %10, i32 %13
  %15 = and i64 %1, 262144
  %16 = icmp eq i64 %15, 0
  %17 = and i32 %14, 123
  %18 = select i1 %16, i32 %14, i32 %17
  %19 = and i64 %1, 524288
  %20 = icmp eq i64 %19, 0
  %21 = and i32 %18, 119
  %22 = select i1 %20, i32 %18, i32 %21
  %23 = and i64 %1, 1048576
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %7
  %26 = xor i32 %22, 112
  br label %36

27:                                               ; preds = %7
  %28 = and i64 %1, 2097152
  %29 = icmp eq i64 %28, 0
  %30 = xor i32 %22, 16
  %31 = select i1 %29, i32 %22, i32 %30
  %32 = and i64 %1, 4194304
  %33 = icmp eq i64 %32, 0
  %34 = xor i32 %31, 32
  %35 = select i1 %33, i32 %31, i32 %34
  br label %36

36:                                               ; preds = %27, %25
  %37 = phi i32 [ %26, %25 ], [ %35, %27 ]
  %38 = icmp sgt i32 %37, 127
  br i1 %38, label %82, label %39

39:                                               ; preds = %36
  store i32 %37, i32* %4, align 4
  br label %82

40:                                               ; preds = %2
  %41 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 4
  %42 = load i32, i32* %41, align 16
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %82, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 8, i64 0
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  %48 = zext i1 %47 to i32
  %49 = xor i32 %48, 127
  %50 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 8, i64 1
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i32 2, i32 0
  %54 = xor i32 %49, %53
  %55 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 8, i64 2
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 0
  %58 = select i1 %57, i32 4, i32 0
  %59 = xor i32 %54, %58
  %60 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 8, i64 3
  %61 = load i32, i32* %60, align 4
  %62 = icmp eq i32 %61, 0
  %63 = select i1 %62, i32 8, i32 0
  %64 = xor i32 %59, %63
  %65 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 8, i64 4
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  %68 = select i1 %67, i32 16, i32 0
  %69 = xor i32 %64, %68
  %70 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 8, i64 5
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, 0
  %73 = select i1 %72, i32 32, i32 0
  %74 = xor i32 %69, %73
  %75 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 8, i64 6
  %76 = load i32, i32* %75, align 4
  %77 = icmp eq i32 %76, 0
  %78 = select i1 %77, i32 64, i32 0
  %79 = xor i32 %74, %78
  %80 = icmp sgt i32 %79, 127
  br i1 %80, label %82, label %81

81:                                               ; preds = %44
  store i32 %79, i32* %4, align 4
  br label %82

82:                                               ; preds = %81, %44, %39, %36, %40
  %83 = and i64 %1, 58720256
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %116, label %85

85:                                               ; preds = %82
  %86 = and i64 %1, 8388608
  %87 = icmp eq i64 %86, 0
  %88 = select i1 %87, i32 127, i32 126
  %89 = and i64 %1, 16777216
  %90 = icmp eq i64 %89, 0
  %91 = and i32 %88, 119
  %92 = select i1 %90, i32 %88, i32 %91
  %93 = and i64 %1, 33554432
  %94 = icmp eq i64 %93, 0
  %95 = and i32 %92, 15
  %96 = select i1 %94, i32 %92, i32 %95
  %97 = getelementptr inbounds %struct.ExtRefreshFrameFlagsInfo, %struct.ExtRefreshFrameFlagsInfo* %3, i64 0, i32 0
  %98 = trunc i32 %96 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %97, align 1
  %100 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 1
  %101 = lshr i32 %96, 3
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  store i8 %103, i8* %100, align 1
  %104 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 4
  %105 = lshr i32 %96, 6
  %106 = trunc i32 %105 to i8
  store i8 %106, i8* %104, align 1
  %107 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 2
  %108 = lshr i32 %96, 4
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  store i8 %110, i8* %107, align 1
  %111 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 3
  %112 = lshr i32 %96, 5
  %113 = trunc i32 %112 to i8
  %114 = and i8 %113, 1
  store i8 %114, i8* %111, align 1
  %115 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 5
  store i8 1, i8* %115, align 1
  br label %196

116:                                              ; preds = %82
  %117 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 4
  %118 = load i32, i32* %117, align 16
  %119 = icmp eq i32 %118, 0
  %120 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 5
  br i1 %119, label %195, label %121

121:                                              ; preds = %116
  store i8 1, i8* %120, align 1
  %122 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 0
  %123 = load i32, i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = icmp ne i32 %126, 0
  %128 = getelementptr inbounds %struct.ExtRefreshFrameFlagsInfo, %struct.ExtRefreshFrameFlagsInfo* %3, i64 0, i32 0
  %129 = zext i1 %127 to i8
  store i8 %129, i8* %128, align 1
  %130 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 3
  %131 = load i32, i32* %130, align 4
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %132
  %134 = load i32, i32* %133, align 4
  %135 = icmp ne i32 %134, 0
  %136 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 1
  %137 = zext i1 %135 to i8
  store i8 %137, i8* %136, align 1
  %138 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 4
  %139 = load i32, i32* %138, align 4
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %140
  %142 = load i32, i32* %141, align 4
  %143 = icmp ne i32 %142, 0
  %144 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 2
  %145 = zext i1 %143 to i8
  store i8 %145, i8* %144, align 1
  %146 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 5
  %147 = load i32, i32* %146, align 4
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = icmp ne i32 %150, 0
  %152 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 3
  %153 = zext i1 %151 to i8
  store i8 %153, i8* %152, align 1
  %154 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 6
  %155 = load i32, i32* %154, align 4
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %156
  %158 = load i32, i32* %157, align 4
  %159 = icmp ne i32 %158, 0
  %160 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 4
  %161 = zext i1 %159 to i8
  store i8 %161, i8* %160, align 1
  %162 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 5
  store i32 1, i32* %162, align 4
  %163 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 0
  %164 = load i32, i32* %163, align 4
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %170, label %166

166:                                              ; preds = %121
  %167 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 1
  %168 = load i32, i32* %167, align 4
  %169 = icmp eq i32 %168, 1
  br i1 %169, label %170, label %171

170:                                              ; preds = %191, %187, %183, %179, %175, %171, %166, %121
  store i32 0, i32* %162, align 4
  br label %196

171:                                              ; preds = %166
  %172 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 2
  %173 = load i32, i32* %172, align 4
  %174 = icmp eq i32 %173, 1
  br i1 %174, label %170, label %175

175:                                              ; preds = %171
  %176 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 3
  %177 = load i32, i32* %176, align 4
  %178 = icmp eq i32 %177, 1
  br i1 %178, label %170, label %179

179:                                              ; preds = %175
  %180 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 4
  %181 = load i32, i32* %180, align 4
  %182 = icmp eq i32 %181, 1
  br i1 %182, label %170, label %183

183:                                              ; preds = %179
  %184 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 5
  %185 = load i32, i32* %184, align 4
  %186 = icmp eq i32 %185, 1
  br i1 %186, label %170, label %187

187:                                              ; preds = %183
  %188 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 6
  %189 = load i32, i32* %188, align 4
  %190 = icmp eq i32 %189, 1
  br i1 %190, label %170, label %191

191:                                              ; preds = %187
  %192 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 7
  %193 = load i32, i32* %192, align 4
  %194 = icmp eq i32 %193, 1
  br i1 %194, label %170, label %196

195:                                              ; preds = %116
  store i8 0, i8* %120, align 1
  br label %196

196:                                              ; preds = %191, %170, %195, %85
  %197 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 9, i32 13
  %198 = load i8, i8* %197, align 1, !range !2
  %199 = lshr i64 %1, 27
  %200 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 4
  %201 = trunc i64 %199 to i8
  %202 = xor i8 %201, 1
  %203 = and i8 %198, %202
  store i8 %203, i8* %200, align 4
  %204 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 9, i32 6
  %205 = load i8, i8* %204, align 4, !range !2
  %206 = lshr i64 %1, 28
  %207 = trunc i64 %206 to i8
  %208 = and i8 %207, 1
  %209 = or i8 %205, %208
  %210 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 5
  store i8 %209, i8* %210, align 1
  %211 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 3, i32 7
  %212 = load i8, i8* %211, align 2, !range !2
  %213 = lshr i64 %1, 29
  %214 = trunc i64 %213 to i8
  %215 = and i8 %214, 1
  %216 = or i8 %212, %215
  %217 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 6
  store i8 %216, i8* %217, align 2
  %218 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 7
  %219 = lshr i64 %1, 30
  %220 = trunc i64 %219 to i8
  %221 = and i8 %220, 1
  store i8 %221, i8* %218, align 1
  %222 = and i64 %1, 67108864
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %227, label %224

224:                                              ; preds = %196
  %225 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 2
  %226 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 3
  store i8 0, i8* %225, align 1
  store i8 1, i8* %226, align 1
  br label %227

227:                                              ; preds = %196, %224
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias %struct.aom_fixed_buf* @av1_get_global_headers(%struct.AV1_PRIMARY*) local_unnamed_addr #2 {
  %2 = alloca [512 x i8], align 16
  %3 = alloca i64, align 8
  %4 = icmp eq %struct.AV1_PRIMARY* %0, null
  br i1 %4, label %45, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %6) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 0, i64 512, i1 false)
  %7 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15
  %8 = call i32 @av1_write_sequence_header_obu(%struct.SequenceHeader* %7, i8* nonnull %6) #12
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %43, label %10

10:                                               ; preds = %5
  %11 = zext i32 %8 to i64
  %12 = call i64 @aom_uleb_size_in_bytes(i64 %11) #12
  %13 = add i64 %12, 1
  %14 = add i64 %13, %11
  %15 = icmp ugt i64 %14, 512
  br i1 %15, label %43, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %13
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %17, i8* nonnull align 16 %6, i64 %11, i1 false)
  %18 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 9
  %19 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 0
  %20 = load %struct.AV1_COMP*, %struct.AV1_COMP** %19, align 8
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %20, i64 0, i32 71
  %22 = call i32 @av1_write_obu_header(%struct.AV1LevelParams* %18, i32* %21, i8 zeroext 1, i32 0, i8* nonnull %6) #12
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %43

24:                                               ; preds = %16
  %25 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #12
  store i64 0, i64* %3, align 8
  %26 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 1
  %27 = call i32 @aom_uleb_encode(i64 %11, i64 %12, i8* %26, i64* nonnull %3) #12
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %41

29:                                               ; preds = %24
  %30 = call noalias i8* @malloc(i64 16) #12
  %31 = bitcast i8* %30 to %struct.aom_fixed_buf*
  %32 = icmp eq i8* %30, null
  br i1 %32, label %41, label %33

33:                                               ; preds = %29
  %34 = call noalias i8* @malloc(i64 %14) #12
  %35 = bitcast i8* %30 to i8**
  store i8* %34, i8** %35, align 8
  %36 = icmp eq i8* %34, null
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  call void @free(i8* nonnull %30) #12
  br label %41

38:                                               ; preds = %33
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %34, i8* nonnull align 16 %6, i64 %14, i1 false)
  %39 = getelementptr inbounds i8, i8* %30, i64 8
  %40 = bitcast i8* %39 to i64*
  store i64 %14, i64* %40, align 8
  br label %41

41:                                               ; preds = %29, %38, %37, %24
  %42 = phi %struct.aom_fixed_buf* [ null, %24 ], [ null, %29 ], [ %31, %38 ], [ null, %37 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #12
  br label %43

43:                                               ; preds = %41, %10, %16, %5
  %44 = phi %struct.aom_fixed_buf* [ null, %5 ], [ %42, %41 ], [ null, %10 ], [ null, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %6) #12
  br label %45

45:                                               ; preds = %1, %43
  %46 = phi %struct.aom_fixed_buf* [ %44, %43 ], [ null, %1 ]
  ret %struct.aom_fixed_buf* %46
}

declare i32 @av1_write_sequence_header_obu(%struct.SequenceHeader*, i8*) local_unnamed_addr #3

declare i32 @av1_write_obu_header(%struct.AV1LevelParams*, i32*, i8 zeroext, i32, i8*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #10

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #8

declare void @cfl_init(%struct.cfl_ctx*, %struct.SequenceHeader*) local_unnamed_addr #3

declare void @av1_get_tile_limits(%struct.AV1Common*) local_unnamed_addr #3

declare void @av1_calculate_tile_cols(%struct.SequenceHeader*, i32, i32, %struct.CommonTileParams*) local_unnamed_addr #3

declare void @av1_calculate_tile_rows(%struct.SequenceHeader*, i32, %struct.CommonTileParams*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #11

declare i64 @av1_max_level_bitrate(i8 signext, i32, i32) local_unnamed_addr #3

declare double @av1_get_max_bitrate_for_level(i8 zeroext, i32, i8 signext) local_unnamed_addr #3

declare void @av1_get_max_tiles_for_level(i8 zeroext, i32*, i32*) local_unnamed_addr #3

declare double @av1_get_min_cr_for_level(i8 zeroext, i32, i32) local_unnamed_addr #3

declare void @av1_alloc_txb_buf(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_setup_shared_coeff_buffer(%struct.AV1Common*, %struct.PC_TREE_SHARED_BUFFERS*) local_unnamed_addr #3

declare void @av1_setup_sms_tree(%struct.AV1_COMP*, %struct.ThreadData*) local_unnamed_addr #3

declare %struct.PICK_MODE_CONTEXT* @av1_alloc_pmc(%struct.AV1_COMP*, i8 zeroext, %struct.PC_TREE_SHARED_BUFFERS*) local_unnamed_addr #3

declare void @av1_cyclic_refresh_free(%struct.CYCLIC_REFRESH*) local_unnamed_addr #3

declare %struct.CYCLIC_REFRESH* @av1_cyclic_refresh_alloc(i32, i32) local_unnamed_addr #3

declare void @av1_svc_check_reset_layer_rc_flag(%struct.AV1_COMP*) local_unnamed_addr #3

declare %struct.AVxWorkerInterface* @aom_get_worker_interface() local_unnamed_addr #3

declare void @av1_free_txb_buf(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_free_cdef_buffers(%struct.AV1Common*, %struct.AV1CdefWorker**, %struct.AV1CdefSyncData*, i32) local_unnamed_addr #3

declare void @aom_denoise_and_model_free(%struct.aom_denoise_and_model_t*) local_unnamed_addr #3

declare void @aom_film_grain_table_free(%struct.aom_film_grain_table_t*) local_unnamed_addr #3

declare void @av1_free_svc_cyclic_refresh(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_init_motion_fpf(%struct.search_site_config*, i32) local_unnamed_addr #3

declare i32 @av1_denoiser_alloc(%struct.AV1Common*, %struct.SVC*, %struct.av1_denoiser*, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3

declare i32 @av1_init_search_range(i32) local_unnamed_addr #3

declare void @av1_finalize_encoded_frame(%struct.AV1_COMP*) local_unnamed_addr #3

declare i32 @av1_pack_bitstream(%struct.AV1_COMP*, i8*, i64*, i32*) local_unnamed_addr #3

declare void @av1_denoiser_update_ref_frame(%struct.AV1_COMP*) local_unnamed_addr #3

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @refresh_reference_frames(%struct.AV1_COMP* nocapture) unnamed_addr #7 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 6
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 12
  %4 = load i32, i32* %2, align 16
  %5 = and i32 %4, 1
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %21, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 0
  %9 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %3, align 16
  %10 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %8, align 8
  %11 = icmp eq %struct.RefCntBuffer* %10, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %10, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = add nsw i32 %14, -1
  store i32 %15, i32* %13, align 8
  br label %16

16:                                               ; preds = %7, %12
  store %struct.RefCntBuffer* %9, %struct.RefCntBuffer** %8, align 8
  %17 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %9, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %17, align 8
  %20 = load i32, i32* %2, align 16
  br label %21

21:                                               ; preds = %1, %16
  %22 = phi i32 [ %4, %1 ], [ %20, %16 ]
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %39, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 1
  %27 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %3, align 16
  %28 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %26, align 8
  %29 = icmp eq %struct.RefCntBuffer* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %28, i64 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = add nsw i32 %32, -1
  store i32 %33, i32* %31, align 8
  br label %34

34:                                               ; preds = %30, %25
  store %struct.RefCntBuffer* %27, %struct.RefCntBuffer** %26, align 8
  %35 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %27, i64 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %35, align 8
  %38 = load i32, i32* %2, align 16
  br label %39

39:                                               ; preds = %34, %21
  %40 = phi i32 [ %38, %34 ], [ %22, %21 ]
  %41 = and i32 %40, 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %57, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 2
  %45 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %3, align 16
  %46 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %44, align 8
  %47 = icmp eq %struct.RefCntBuffer* %46, null
  br i1 %47, label %52, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %46, i64 0, i32 0
  %50 = load i32, i32* %49, align 8
  %51 = add nsw i32 %50, -1
  store i32 %51, i32* %49, align 8
  br label %52

52:                                               ; preds = %48, %43
  store %struct.RefCntBuffer* %45, %struct.RefCntBuffer** %44, align 8
  %53 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %45, i64 0, i32 0
  %54 = load i32, i32* %53, align 8
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %53, align 8
  %56 = load i32, i32* %2, align 16
  br label %57

57:                                               ; preds = %52, %39
  %58 = phi i32 [ %56, %52 ], [ %40, %39 ]
  %59 = and i32 %58, 8
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %75, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 3
  %63 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %3, align 16
  %64 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %62, align 8
  %65 = icmp eq %struct.RefCntBuffer* %64, null
  br i1 %65, label %70, label %66

66:                                               ; preds = %61
  %67 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %64, i64 0, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = add nsw i32 %68, -1
  store i32 %69, i32* %67, align 8
  br label %70

70:                                               ; preds = %66, %61
  store %struct.RefCntBuffer* %63, %struct.RefCntBuffer** %62, align 8
  %71 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %63, i64 0, i32 0
  %72 = load i32, i32* %71, align 8
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %71, align 8
  %74 = load i32, i32* %2, align 16
  br label %75

75:                                               ; preds = %70, %57
  %76 = phi i32 [ %74, %70 ], [ %58, %57 ]
  %77 = and i32 %76, 16
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %93, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 4
  %81 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %3, align 16
  %82 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %80, align 8
  %83 = icmp eq %struct.RefCntBuffer* %82, null
  br i1 %83, label %88, label %84

84:                                               ; preds = %79
  %85 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %82, i64 0, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = add nsw i32 %86, -1
  store i32 %87, i32* %85, align 8
  br label %88

88:                                               ; preds = %84, %79
  store %struct.RefCntBuffer* %81, %struct.RefCntBuffer** %80, align 8
  %89 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %81, i64 0, i32 0
  %90 = load i32, i32* %89, align 8
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %89, align 8
  %92 = load i32, i32* %2, align 16
  br label %93

93:                                               ; preds = %88, %75
  %94 = phi i32 [ %92, %88 ], [ %76, %75 ]
  %95 = and i32 %94, 32
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %111, label %97

97:                                               ; preds = %93
  %98 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 5
  %99 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %3, align 16
  %100 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %98, align 8
  %101 = icmp eq %struct.RefCntBuffer* %100, null
  br i1 %101, label %106, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %100, i64 0, i32 0
  %104 = load i32, i32* %103, align 8
  %105 = add nsw i32 %104, -1
  store i32 %105, i32* %103, align 8
  br label %106

106:                                              ; preds = %102, %97
  store %struct.RefCntBuffer* %99, %struct.RefCntBuffer** %98, align 8
  %107 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %99, i64 0, i32 0
  %108 = load i32, i32* %107, align 8
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %107, align 8
  %110 = load i32, i32* %2, align 16
  br label %111

111:                                              ; preds = %106, %93
  %112 = phi i32 [ %110, %106 ], [ %94, %93 ]
  %113 = and i32 %112, 64
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %129, label %115

115:                                              ; preds = %111
  %116 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 6
  %117 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %3, align 16
  %118 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %116, align 8
  %119 = icmp eq %struct.RefCntBuffer* %118, null
  br i1 %119, label %124, label %120

120:                                              ; preds = %115
  %121 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %118, i64 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = add nsw i32 %122, -1
  store i32 %123, i32* %121, align 8
  br label %124

124:                                              ; preds = %120, %115
  store %struct.RefCntBuffer* %117, %struct.RefCntBuffer** %116, align 8
  %125 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %117, i64 0, i32 0
  %126 = load i32, i32* %125, align 8
  %127 = add nsw i32 %126, 1
  store i32 %127, i32* %125, align 8
  %128 = load i32, i32* %2, align 16
  br label %129

129:                                              ; preds = %124, %111
  %130 = phi i32 [ %128, %124 ], [ %112, %111 ]
  %131 = trunc i32 %130 to i8
  %132 = icmp sgt i8 %131, -1
  br i1 %132, label %146, label %133

133:                                              ; preds = %129
  %134 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 7
  %135 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %3, align 16
  %136 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %134, align 8
  %137 = icmp eq %struct.RefCntBuffer* %136, null
  br i1 %137, label %142, label %138

138:                                              ; preds = %133
  %139 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %136, i64 0, i32 0
  %140 = load i32, i32* %139, align 8
  %141 = add nsw i32 %140, -1
  store i32 %141, i32* %139, align 8
  br label %142

142:                                              ; preds = %138, %133
  store %struct.RefCntBuffer* %135, %struct.RefCntBuffer** %134, align 8
  %143 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %135, i64 0, i32 0
  %144 = load i32, i32* %143, align 8
  %145 = add nsw i32 %144, 1
  store i32 %145, i32* %143, align 8
  br label %146

146:                                              ; preds = %142, %129
  ret void
}

declare void @av1_rc_postencode_update(%struct.AV1_COMP*, i64) local_unnamed_addr #3

declare i32 @av1_is_integer_mv(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.ForceIntegerMVInfo*) local_unnamed_addr #3

declare i32 @av1_rc_drop_frame(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_setup_frame_size(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_rc_postencode_update_drop_frame(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_set_mb_ssim_rdmult_scaling(%struct.AV1_COMP*) local_unnamed_addr #3

declare i32 @av1_superres_in_recode_allowed(%struct.AV1_COMP*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @encode_with_recode_loop_and_filter(%struct.AV1_COMP*, i64*, i8*, i64*, i64*, i32*) unnamed_addr #2 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 54, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %26, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 54, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %26, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %20 = load i32, i32* %19, align 16
  %21 = icmp eq i32 %20, %12
  br i1 %21, label %22, label %26

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %24 = load i32, i32* %23, align 4
  %25 = icmp ne i32 %24, %16
  br label %26

26:                                               ; preds = %22, %18, %14, %6
  %27 = phi i1 [ false, %14 ], [ false, %6 ], [ true, %18 ], [ %25, %22 ]
  %28 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #12
  store i32 0, i32* %7, align 4
  %29 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #12
  store i32 0, i32* %8, align 4
  %30 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #12
  store i32 0, i32* %9, align 4
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 14
  %32 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %31, align 8
  %33 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %34 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %33, align 16
  %35 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %34, i64 0, i32 16
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %26
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %40 = load i32, i32* %39, align 8
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 22, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 23, i64 %41
  %45 = load i32, i32* %44, align 4
  br label %46

46:                                               ; preds = %38, %26
  %47 = phi i8 [ %43, %38 ], [ 1, %26 ]
  %48 = phi i32 [ %45, %38 ], [ 0, %26 ]
  %49 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 34, i64 1
  %50 = bitcast %struct.WarpedMotionParams* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %50, i8* align 4 bitcast (%struct.WarpedMotionParams* @default_warp_params to i8*), i64 44, i1 false) #12
  %51 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 34, i64 2
  %52 = bitcast %struct.WarpedMotionParams* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %52, i8* align 4 bitcast (%struct.WarpedMotionParams* @default_warp_params to i8*), i64 44, i1 false) #12
  %53 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 34, i64 3
  %54 = bitcast %struct.WarpedMotionParams* %53 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %54, i8* align 4 bitcast (%struct.WarpedMotionParams* @default_warp_params to i8*), i64 44, i1 false) #12
  %55 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 34, i64 4
  %56 = bitcast %struct.WarpedMotionParams* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %56, i8* align 4 bitcast (%struct.WarpedMotionParams* @default_warp_params to i8*), i64 44, i1 false) #12
  %57 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 34, i64 5
  %58 = bitcast %struct.WarpedMotionParams* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %58, i8* align 4 bitcast (%struct.WarpedMotionParams* @default_warp_params to i8*), i64 44, i1 false) #12
  %59 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 34, i64 6
  %60 = bitcast %struct.WarpedMotionParams* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %60, i8* align 4 bitcast (%struct.WarpedMotionParams* @default_warp_params to i8*), i64 44, i1 false) #12
  %61 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 34, i64 7
  %62 = bitcast %struct.WarpedMotionParams* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %62, i8* align 4 bitcast (%struct.WarpedMotionParams* @default_warp_params to i8*), i64 44, i1 false) #12
  %63 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 33, i32 0
  store i8 0, i8* %63, align 16
  %64 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 39
  %65 = load i32, i32* %64, align 4
  tail call void @av1_set_speed_features_framesize_independent(%struct.AV1_COMP* %0, i32 %65) #12
  tail call void @av1_set_rd_speed_thresholds(%struct.AV1_COMP* %0) #12
  %66 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 13
  store i8 4, i8* %66, align 1
  %67 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 11
  store i8 1, i8* %67, align 1
  tail call void @av1_setup_frame_size(%struct.AV1_COMP* %0) #12
  call void @av1_set_size_dependent_vars(%struct.AV1_COMP* %0, i32* nonnull %9, i32* nonnull %8, i32* nonnull %7) #12
  %68 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %33, align 16
  %69 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %68, i64 0, i32 16
  %70 = load i32, i32* %69, align 8
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %112

72:                                               ; preds = %46
  %73 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %74 = load i32, i32* %73, align 16
  %75 = shl i32 %74, 1
  %76 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %32, i64 0, i32 2, i32 0, i32 0
  %77 = load i32, i32* %76, align 8
  %78 = icmp eq i32 %75, %77
  br i1 %78, label %79, label %90

79:                                               ; preds = %72
  %80 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %81 = load i32, i32* %80, align 4
  %82 = shl i32 %81, 1
  %83 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %32, i64 0, i32 3, i32 0, i32 0
  %84 = load i32, i32* %83, align 8
  %85 = icmp eq i32 %82, %84
  br i1 %85, label %86, label %90

86:                                               ; preds = %79
  %87 = mul nsw i32 %81, %74
  %88 = icmp slt i32 %87, 57601
  %89 = select i1 %88, i8 1, i8 3
  br label %112

90:                                               ; preds = %79, %72
  %91 = shl i32 %74, 2
  %92 = icmp eq i32 %91, %77
  br i1 %92, label %93, label %100

93:                                               ; preds = %90
  %94 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %95 = load i32, i32* %94, align 4
  %96 = shl i32 %95, 2
  %97 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %32, i64 0, i32 3, i32 0, i32 0
  %98 = load i32, i32* %97, align 8
  %99 = icmp eq i32 %96, %98
  br i1 %99, label %112, label %100

100:                                              ; preds = %93, %90
  %101 = mul nsw i32 %77, 3
  %102 = icmp eq i32 %91, %101
  br i1 %102, label %103, label %112

103:                                              ; preds = %100
  %104 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %105 = load i32, i32* %104, align 4
  %106 = shl i32 %105, 2
  %107 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %32, i64 0, i32 3, i32 0, i32 0
  %108 = load i32, i32* %107, align 8
  %109 = mul nsw i32 %108, 3
  %110 = icmp eq i32 %106, %109
  %111 = select i1 %110, i8 0, i8 %47
  br label %112

112:                                              ; preds = %103, %100, %93, %86, %46
  %113 = phi i8 [ %47, %46 ], [ %47, %100 ], [ %89, %86 ], [ 1, %93 ], [ %111, %103 ]
  %114 = phi i32 [ %48, %46 ], [ 8, %100 ], [ 8, %86 ], [ 8, %93 ], [ 8, %103 ]
  %115 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 4, i32 0
  %116 = load i8, i8* %115, align 16
  %117 = icmp eq i8 %116, 2
  br i1 %117, label %118, label %145

118:                                              ; preds = %112
  %119 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %120 = load %struct.SequenceHeader*, %struct.SequenceHeader** %119, align 16
  %121 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %120, i64 0, i32 7
  %122 = load i8, i8* %121, align 4
  %123 = icmp eq i8 %122, 12
  %124 = select i1 %123, i32 1, i32 4
  %125 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 19
  %126 = load %struct.VP64x64*, %struct.VP64x64** %125, align 16
  %127 = icmp eq %struct.VP64x64* %126, null
  br i1 %127, label %134, label %128

128:                                              ; preds = %118
  %129 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 20
  %130 = load i32, i32* %129, align 8
  %131 = icmp eq i32 %124, %130
  br i1 %131, label %145, label %132

132:                                              ; preds = %128
  %133 = bitcast %struct.VP64x64* %126 to i8*
  call void @aom_free(i8* nonnull %133) #12
  store %struct.VP64x64* null, %struct.VP64x64** %125, align 16
  br label %134

134:                                              ; preds = %132, %118
  %135 = mul nuw nsw i32 %124, 43664
  %136 = zext i32 %135 to i64
  %137 = call i8* @aom_malloc(i64 %136) #12
  %138 = bitcast %struct.VP64x64** %125 to i8**
  store i8* %137, i8** %138, align 16
  %139 = icmp eq i8* %137, null
  br i1 %139, label %140, label %143

140:                                              ; preds = %134
  %141 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %142 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %141, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %142, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.47, i64 0, i64 0)) #12
  br label %143

143:                                              ; preds = %140, %134
  %144 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 20
  store i32 %124, i32* %144, align 8
  br label %145

145:                                              ; preds = %143, %128, %112
  %146 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %10, i64 0, i32 0, i32 0
  %147 = load i8, i8* %146, align 16
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %149, label %179

149:                                              ; preds = %145
  %150 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 60
  %151 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 7
  %152 = load i32, i32* %151, align 4
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %157, label %154

154:                                              ; preds = %149
  %155 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 60, i32 2, i64 0
  %156 = bitcast [19 x [16 x i32]]* %155 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %156, i8* align 16 bitcast ([7 x [19 x [16 x i32]]]* @default_tx_type_probs to i8*), i64 8512, i1 false) #12
  br label %157

157:                                              ; preds = %154, %149
  %158 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 23
  %159 = load i32, i32* %158, align 4
  %160 = icmp slt i32 %159, 1
  %161 = icmp eq i32 %159, 2147483647
  %162 = or i1 %160, %161
  br i1 %162, label %165, label %163

163:                                              ; preds = %157
  %164 = bitcast %struct.FrameProbInfo* %150 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %164, i8* align 16 bitcast ([7 x [22 x i32]]* @default_obmc_probs to i8*), i64 616, i1 false) #12
  br label %165

165:                                              ; preds = %163, %157
  %166 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 24
  %167 = load i32, i32* %166, align 4
  %168 = icmp sgt i32 %167, 0
  br i1 %168, label %169, label %172

169:                                              ; preds = %165
  %170 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 60, i32 1, i64 0
  %171 = bitcast i32* %170 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %171, i8* align 16 bitcast ([7 x i32]* @default_warped_probs to i8*), i64 28, i1 false) #12
  br label %172

172:                                              ; preds = %169, %165
  %173 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 7, i32 5
  %174 = load i32, i32* %173, align 4
  %175 = icmp eq i32 %174, 2
  br i1 %175, label %176, label %179

176:                                              ; preds = %172
  %177 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 60, i32 3, i64 0
  %178 = bitcast [16 x [3 x i32]]* %177 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %178, i8* align 16 bitcast ([7 x [16 x [3 x i32]]]* @default_switchable_interp_probs to i8*), i64 1344, i1 false) #12
  br label %179

179:                                              ; preds = %176, %172, %145
  %180 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 15
  %181 = call %struct.yv12_buffer_config* @av1_scale_if_required(%struct.AV1Common* %10, %struct.yv12_buffer_config* %32, %struct.yv12_buffer_config* %180, i8 zeroext %113, i32 %114, i1 zeroext true, i1 zeroext false) #12
  %182 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 12
  store %struct.yv12_buffer_config* %181, %struct.yv12_buffer_config** %182, align 8
  %183 = load i8, i8* %146, align 16
  %184 = and i8 %183, -3
  %185 = icmp eq i8 %184, 0
  %186 = or i1 %27, %185
  br i1 %186, label %187, label %197

187:                                              ; preds = %179
  %188 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 84
  %189 = load i8*, i8** %188, align 16
  %190 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %191 = load i32, i32* %190, align 4
  %192 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %193 = load i32, i32* %192, align 16
  %194 = mul nsw i32 %193, %191
  %195 = ashr i32 %194, 2
  %196 = sext i32 %195 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %189, i8 0, i64 %196, i1 false) #12
  br label %197

197:                                              ; preds = %187, %179
  %198 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 16
  %199 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %198, align 16
  %200 = icmp eq %struct.yv12_buffer_config* %199, null
  br i1 %200, label %205, label %201

201:                                              ; preds = %197
  %202 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 17
  %203 = call %struct.yv12_buffer_config* @av1_scale_if_required(%struct.AV1Common* %10, %struct.yv12_buffer_config* nonnull %199, %struct.yv12_buffer_config* %202, i8 zeroext %113, i32 %114, i1 zeroext true, i1 zeroext false) #12
  %204 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 13
  store %struct.yv12_buffer_config* %203, %struct.yv12_buffer_config** %204, align 16
  br label %205

205:                                              ; preds = %201, %197
  %206 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 24
  %207 = load i32, i32* %206, align 8
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %210, label %209

209:                                              ; preds = %205
  call void @av1_update_noise_estimate(%struct.AV1_COMP* %0) #12
  br label %210

210:                                              ; preds = %209, %205
  %211 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 26
  %212 = load i32, i32* %211, align 4
  %213 = icmp sgt i32 %212, 0
  br i1 %213, label %214, label %220

214:                                              ; preds = %210
  %215 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %33, align 16
  %216 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %215, i64 0, i32 16
  %217 = load i32, i32* %216, align 8
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %220, label %219

219:                                              ; preds = %214
  call void @av1_denoiser_reset_on_first_frame(%struct.AV1_COMP* %0) #12
  br label %220

220:                                              ; preds = %219, %214, %210
  %221 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %222 = load i32, i32* %221, align 8
  %223 = icmp eq i32 %222, 1
  br i1 %223, label %224, label %285

224:                                              ; preds = %220
  %225 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 38
  %226 = load i32, i32* %225, align 8
  %227 = and i32 %226, 8
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %255, label %229

229:                                              ; preds = %224
  %230 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 3
  %231 = load i32, i32* %230, align 4
  %232 = icmp eq i32 %231, -1
  br i1 %232, label %237, label %233

233:                                              ; preds = %229
  %234 = sext i32 %231 to i64
  %235 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %234
  %236 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %235, align 8
  br label %237

237:                                              ; preds = %233, %229
  %238 = phi %struct.RefCntBuffer* [ %236, %233 ], [ null, %229 ]
  %239 = icmp eq %struct.RefCntBuffer* %238, null
  %240 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %238, i64 0, i32 17
  %241 = select i1 %239, %struct.yv12_buffer_config* null, %struct.yv12_buffer_config* %240
  %242 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %241, i64 0, i32 2, i32 0, i32 0
  %243 = load i32, i32* %242, align 8
  %244 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %245 = load i32, i32* %244, align 16
  %246 = icmp eq i32 %243, %245
  br i1 %246, label %247, label %253

247:                                              ; preds = %237
  %248 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %241, i64 0, i32 3, i32 0, i32 0
  %249 = load i32, i32* %248, align 8
  %250 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %251 = load i32, i32* %250, align 4
  %252 = icmp eq i32 %249, %251
  br i1 %252, label %255, label %253

253:                                              ; preds = %247, %237
  %254 = xor i32 %226, 8
  store i32 %254, i32* %225, align 8
  br label %255

255:                                              ; preds = %253, %247, %224
  %256 = phi i32 [ %254, %253 ], [ %226, %247 ], [ %226, %224 ]
  %257 = and i32 %256, 64
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %285, label %259

259:                                              ; preds = %255
  %260 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 6
  %261 = load i32, i32* %260, align 4
  %262 = icmp eq i32 %261, -1
  br i1 %262, label %267, label %263

263:                                              ; preds = %259
  %264 = sext i32 %261 to i64
  %265 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %264
  %266 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %265, align 8
  br label %267

267:                                              ; preds = %263, %259
  %268 = phi %struct.RefCntBuffer* [ %266, %263 ], [ null, %259 ]
  %269 = icmp eq %struct.RefCntBuffer* %268, null
  %270 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %268, i64 0, i32 17
  %271 = select i1 %269, %struct.yv12_buffer_config* null, %struct.yv12_buffer_config* %270
  %272 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %271, i64 0, i32 2, i32 0, i32 0
  %273 = load i32, i32* %272, align 8
  %274 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %275 = load i32, i32* %274, align 16
  %276 = icmp eq i32 %273, %275
  br i1 %276, label %277, label %283

277:                                              ; preds = %267
  %278 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %271, i64 0, i32 3, i32 0, i32 0
  %279 = load i32, i32* %278, align 8
  %280 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %281 = load i32, i32* %280, align 4
  %282 = icmp eq i32 %279, %281
  br i1 %282, label %285, label %283

283:                                              ; preds = %277, %267
  %284 = xor i32 %256, 64
  store i32 %284, i32* %225, align 8
  br label %285

285:                                              ; preds = %283, %277, %255, %220
  %286 = load i8, i8* %146, align 16
  %287 = and i8 %286, -3
  %288 = icmp eq i8 %287, 0
  br i1 %288, label %299, label %289

289:                                              ; preds = %285
  %290 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %33, align 16
  %291 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %290, i64 0, i32 16
  %292 = load i32, i32* %291, align 8
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %298, label %294

294:                                              ; preds = %289
  %295 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 24
  %296 = load i32, i32* %295, align 4
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %299

298:                                              ; preds = %294, %289
  call void @av1_scale_references(%struct.AV1_COMP* %0, i8 zeroext %113, i32 %114, i32 1) #12
  br label %299

299:                                              ; preds = %298, %294, %285
  %300 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 2
  %301 = load i32, i32* %300, align 4
  %302 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 3
  %303 = load i32, i32* %302, align 8
  %304 = load i32, i32* %9, align 4
  %305 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 7
  %306 = load i8, i8* %305, align 2, !range !2
  %307 = zext i8 %306 to i32
  call void @av1_set_quantizer(%struct.AV1Common* %10, i32 %301, i32 %303, i32 %304, i32 %307) #12
  %308 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 30
  %309 = load i32, i32* %308, align 4
  call void @av1_set_speed_features_qindex_dependent(%struct.AV1_COMP* %0, i32 %309) #12
  %310 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 6
  %311 = load i8, i8* %310, align 1
  %312 = icmp eq i8 %311, 0
  br i1 %312, label %313, label %316

313:                                              ; preds = %299
  %314 = load i8, i8* %305, align 2, !range !2
  %315 = icmp eq i8 %314, 0
  br i1 %315, label %323, label %316

316:                                              ; preds = %313, %299
  %317 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2
  %318 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22
  %319 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %320 = load %struct.SequenceHeader*, %struct.SequenceHeader** %319, align 16
  %321 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %320, i64 0, i32 25
  %322 = load i32, i32* %321, align 8
  call void @av1_init_quantizer(%struct.EncQuantDequantParams* %317, %struct.CommonQuantParams* %318, i32 %322) #12
  br label %323

323:                                              ; preds = %316, %313
  %324 = load i32, i32* %9, align 4
  call void @av1_set_variance_partition_thresholds(%struct.AV1_COMP* %0, i32 %324, i32 0) #12
  call void @av1_setup_frame(%struct.AV1_COMP* %0) #12
  %325 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 21
  %326 = load i8, i8* %325, align 4
  %327 = icmp eq i8 %326, 1
  br i1 %327, label %328, label %364

328:                                              ; preds = %323
  %329 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 18
  %330 = load i32, i32* %329, align 16
  %331 = icmp eq i32 %330, 0
  br i1 %331, label %364, label %332

332:                                              ; preds = %328
  %333 = call i32 @av1_encodedframe_overshoot_cbr(%struct.AV1_COMP* %0, i32* nonnull %9) #12
  %334 = icmp eq i32 %333, 0
  br i1 %334, label %364, label %335

335:                                              ; preds = %332
  %336 = load i32, i32* %300, align 4
  %337 = load i32, i32* %302, align 8
  %338 = load i32, i32* %9, align 4
  %339 = load i8, i8* %305, align 2, !range !2
  %340 = zext i8 %339 to i32
  call void @av1_set_quantizer(%struct.AV1Common* %10, i32 %336, i32 %337, i32 %338, i32 %340) #12
  %341 = load i32, i32* %308, align 4
  call void @av1_set_speed_features_qindex_dependent(%struct.AV1_COMP* %0, i32 %341) #12
  %342 = load i8, i8* %310, align 1
  %343 = icmp eq i8 %342, 0
  br i1 %343, label %344, label %347

344:                                              ; preds = %335
  %345 = load i8, i8* %305, align 2, !range !2
  %346 = icmp eq i8 %345, 0
  br i1 %346, label %354, label %347

347:                                              ; preds = %344, %335
  %348 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2
  %349 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22
  %350 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %351 = load %struct.SequenceHeader*, %struct.SequenceHeader** %350, align 16
  %352 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %351, i64 0, i32 25
  %353 = load i32, i32* %352, align 8
  call void @av1_init_quantizer(%struct.EncQuantDequantParams* %348, %struct.CommonQuantParams* %349, i32 %353) #12
  br label %354

354:                                              ; preds = %347, %344
  %355 = load i32, i32* %9, align 4
  call void @av1_set_variance_partition_thresholds(%struct.AV1_COMP* %0, i32 %355, i32 0) #12
  %356 = load i8, i8* %146, align 16
  %357 = and i8 %356, -3
  %358 = icmp eq i8 %357, 0
  br i1 %358, label %363, label %359

359:                                              ; preds = %354
  %360 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 10
  %361 = load i8, i8* %360, align 2, !range !2
  %362 = icmp eq i8 %361, 0
  br i1 %362, label %364, label %363

363:                                              ; preds = %359, %354
  call void @av1_setup_frame(%struct.AV1_COMP* %0) #12
  br label %364

364:                                              ; preds = %363, %359, %332, %328, %323
  %365 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 5
  %366 = load i8, i8* %365, align 8
  %367 = icmp eq i8 %366, 3
  br i1 %367, label %368, label %403

368:                                              ; preds = %364
  %369 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 43, i32 0
  %370 = load i8*, i8** %369, align 8
  %371 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 45, i32 0
  %372 = load i32, i32* %371, align 16
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %374, label %378

374:                                              ; preds = %368
  %375 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 45, i32 1
  %376 = load i32, i32* %375, align 4
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %402, label %378

378:                                              ; preds = %374, %368
  %379 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %380 = load i32, i32* %379, align 4
  %381 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %382 = load i32, i32* %381, align 16
  %383 = mul nsw i32 %382, %380
  %384 = icmp sgt i32 %383, 0
  br i1 %384, label %385, label %402

385:                                              ; preds = %378, %395
  %386 = phi i32 [ %396, %395 ], [ %382, %378 ]
  %387 = phi i32 [ %397, %395 ], [ %380, %378 ]
  %388 = phi i64 [ %398, %395 ], [ 0, %378 ]
  %389 = getelementptr inbounds i8, i8* %370, i64 %388
  %390 = load i8, i8* %389, align 1
  %391 = icmp eq i8 %390, 7
  br i1 %391, label %392, label %395

392:                                              ; preds = %385
  store i8 0, i8* %389, align 1
  %393 = load i32, i32* %379, align 4
  %394 = load i32, i32* %381, align 16
  br label %395

395:                                              ; preds = %392, %385
  %396 = phi i32 [ %386, %385 ], [ %394, %392 ]
  %397 = phi i32 [ %387, %385 ], [ %393, %392 ]
  %398 = add nuw nsw i64 %388, 1
  %399 = mul nsw i32 %397, %396
  %400 = sext i32 %399 to i64
  %401 = icmp slt i64 %398, %400
  br i1 %401, label %385, label %402

402:                                              ; preds = %395, %378, %374
  call void @av1_cyclic_refresh_setup(%struct.AV1_COMP* %0) #12
  call void @av1_apply_active_map(%struct.AV1_COMP* %0) #12
  br label %403

403:                                              ; preds = %402, %364
  %404 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23
  %405 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %404, i64 0, i32 0
  %406 = load i8, i8* %405, align 8
  %407 = icmp eq i8 %406, 0
  br i1 %407, label %457, label %408

408:                                              ; preds = %403
  %409 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 2
  %410 = load i8, i8* %409, align 2
  %411 = icmp eq i8 %410, 0
  br i1 %411, label %412, label %456

412:                                              ; preds = %408
  %413 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 11
  %414 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %413, align 8
  %415 = icmp eq %struct.RefCntBuffer* %414, null
  br i1 %415, label %456, label %416

416:                                              ; preds = %412, %416
  %417 = phi i64 [ %445, %416 ], [ 0, %412 ]
  %418 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %414, i64 0, i32 7, i32 5, i64 %417
  %419 = load i32, i32* %418, align 4
  %420 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 5, i64 %417
  store i32 %419, i32* %420, align 4
  %421 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %414, i64 0, i32 7, i32 4, i64 %417, i64 0
  %422 = load i16, i16* %421, align 2
  %423 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %417, i64 0
  store i16 %422, i16* %423, align 2
  %424 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %414, i64 0, i32 7, i32 4, i64 %417, i64 1
  %425 = load i16, i16* %424, align 2
  %426 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %417, i64 1
  store i16 %425, i16* %426, align 2
  %427 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %414, i64 0, i32 7, i32 4, i64 %417, i64 2
  %428 = load i16, i16* %427, align 2
  %429 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %417, i64 2
  store i16 %428, i16* %429, align 2
  %430 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %414, i64 0, i32 7, i32 4, i64 %417, i64 3
  %431 = load i16, i16* %430, align 2
  %432 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %417, i64 3
  store i16 %431, i16* %432, align 2
  %433 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %414, i64 0, i32 7, i32 4, i64 %417, i64 4
  %434 = load i16, i16* %433, align 2
  %435 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %417, i64 4
  store i16 %434, i16* %435, align 2
  %436 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %414, i64 0, i32 7, i32 4, i64 %417, i64 5
  %437 = load i16, i16* %436, align 2
  %438 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %417, i64 5
  store i16 %437, i16* %438, align 2
  %439 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %414, i64 0, i32 7, i32 4, i64 %417, i64 6
  %440 = load i16, i16* %439, align 2
  %441 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %417, i64 6
  store i16 %440, i16* %441, align 2
  %442 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %414, i64 0, i32 7, i32 4, i64 %417, i64 7
  %443 = load i16, i16* %442, align 2
  %444 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %417, i64 7
  store i16 %443, i16* %444, align 2
  %445 = add nuw nsw i64 %417, 1
  %446 = icmp eq i64 %445, 8
  br i1 %446, label %447, label %416

447:                                              ; preds = %416
  %448 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %414, i64 0, i32 7, i32 7
  %449 = load i8, i8* %448, align 4
  %450 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 7
  store i8 %449, i8* %450, align 4
  %451 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %414, i64 0, i32 7, i32 6
  %452 = load i32, i32* %451, align 4
  %453 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 6
  store i32 %452, i32* %453, align 4
  %454 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %414, i64 0, i32 7, i32 0
  %455 = load i8, i8* %454, align 8
  store i8 %455, i8* %405, align 8
  br label %458

456:                                              ; preds = %412, %408
  call void @av1_calculate_segdata(%struct.segmentation* %404) #12
  br label %458

457:                                              ; preds = %403
  call void @llvm.memset.p0i8.i64(i8* align 8 %405, i8 0, i64 172, i1 false) #12
  br label %458

458:                                              ; preds = %457, %456, %447
  %459 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 12
  %460 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  br label %461

461:                                              ; preds = %461, %458
  %462 = phi i64 [ 0, %458 ], [ %490, %461 ]
  %463 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 5, i64 %462
  %464 = load i32, i32* %463, align 4
  %465 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %460, i64 0, i32 7, i32 5, i64 %462
  store i32 %464, i32* %465, align 4
  %466 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %462, i64 0
  %467 = load i16, i16* %466, align 2
  %468 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %460, i64 0, i32 7, i32 4, i64 %462, i64 0
  store i16 %467, i16* %468, align 2
  %469 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %462, i64 1
  %470 = load i16, i16* %469, align 2
  %471 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %460, i64 0, i32 7, i32 4, i64 %462, i64 1
  store i16 %470, i16* %471, align 2
  %472 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %462, i64 2
  %473 = load i16, i16* %472, align 2
  %474 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %460, i64 0, i32 7, i32 4, i64 %462, i64 2
  store i16 %473, i16* %474, align 2
  %475 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %462, i64 3
  %476 = load i16, i16* %475, align 2
  %477 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %460, i64 0, i32 7, i32 4, i64 %462, i64 3
  store i16 %476, i16* %477, align 2
  %478 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %462, i64 4
  %479 = load i16, i16* %478, align 2
  %480 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %460, i64 0, i32 7, i32 4, i64 %462, i64 4
  store i16 %479, i16* %480, align 2
  %481 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %462, i64 5
  %482 = load i16, i16* %481, align 2
  %483 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %460, i64 0, i32 7, i32 4, i64 %462, i64 5
  store i16 %482, i16* %483, align 2
  %484 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %462, i64 6
  %485 = load i16, i16* %484, align 2
  %486 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %460, i64 0, i32 7, i32 4, i64 %462, i64 6
  store i16 %485, i16* %486, align 2
  %487 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %462, i64 7
  %488 = load i16, i16* %487, align 2
  %489 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %460, i64 0, i32 7, i32 4, i64 %462, i64 7
  store i16 %488, i16* %489, align 2
  %490 = add nuw nsw i64 %462, 1
  %491 = icmp eq i64 %490, 8
  br i1 %491, label %492, label %461

492:                                              ; preds = %461
  %493 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 7
  %494 = load i8, i8* %493, align 4
  %495 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %460, i64 0, i32 7, i32 7
  store i8 %494, i8* %495, align 4
  %496 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 6
  %497 = load i32, i32* %496, align 4
  %498 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %460, i64 0, i32 7, i32 6
  store i32 %497, i32* %498, align 4
  %499 = load i8, i8* %405, align 8
  %500 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  %501 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %500, i64 0, i32 7, i32 0
  store i8 %499, i8* %501, align 8
  %502 = load i8, i8* %146, align 16
  %503 = and i8 %502, -3
  %504 = icmp eq i8 %503, 0
  br i1 %504, label %507, label %505

505:                                              ; preds = %492
  %506 = load i32, i32* %9, align 4
  call void @av1_pick_and_set_high_precision_mv(%struct.AV1_COMP* %0, i32 %506) #12
  br label %507

507:                                              ; preds = %505, %492
  call void @av1_encode_frame(%struct.AV1_COMP* %0) #12
  %508 = load i8, i8* %365, align 8
  %509 = icmp eq i8 %508, 3
  br i1 %509, label %510, label %515

510:                                              ; preds = %507
  %511 = load i8, i8* %146, align 16
  %512 = and i8 %511, -3
  %513 = icmp eq i8 %512, 0
  br i1 %513, label %515, label %514

514:                                              ; preds = %510
  call void @av1_cyclic_refresh_postencode(%struct.AV1_COMP* %0) #12
  br label %515

515:                                              ; preds = %507, %510, %514
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #12
  %516 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %517 = load %struct.SequenceHeader*, %struct.SequenceHeader** %516, align 16
  %518 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %33, align 16
  %519 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %518, i64 0, i32 13, i32 12
  %520 = load i32, i32* %519, align 4
  %521 = icmp eq i32 %520, 0
  br i1 %521, label %532, label %522

522:                                              ; preds = %515
  %523 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 14
  %524 = load i32, i32* %523, align 16
  %525 = icmp eq i32 %524, 1
  br i1 %525, label %526, label %532

526:                                              ; preds = %522
  %527 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %182, align 8
  %528 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  %529 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %528, i64 0, i32 17
  %530 = call i64 @aom_get_y_sse(%struct.yv12_buffer_config* %527, %struct.yv12_buffer_config* %529) #12
  %531 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 30
  store i64 %530, i64* %531, align 8
  br label %532

532:                                              ; preds = %515, %526, %522
  %533 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %517, i64 0, i32 28
  %534 = load i32, i32* %533, align 8
  %535 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  %536 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %535, i64 0, i32 17, i32 17
  store i32 %534, i32* %536, align 4
  %537 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %517, i64 0, i32 29
  %538 = load i32, i32* %537, align 4
  %539 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  %540 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %539, i64 0, i32 17, i32 18
  store i32 %538, i32* %540, align 8
  %541 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %517, i64 0, i32 30
  %542 = load i32, i32* %541, align 8
  %543 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  %544 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %543, i64 0, i32 17, i32 19
  store i32 %542, i32* %544, align 4
  %545 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %517, i64 0, i32 27
  %546 = load i8, i8* %545, align 1
  %547 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  %548 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %547, i64 0, i32 17, i32 20
  store i8 %546, i8* %548, align 8
  %549 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %517, i64 0, i32 34
  %550 = load i32, i32* %549, align 8
  %551 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  %552 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %551, i64 0, i32 17, i32 21
  store i32 %550, i32* %552, align 4
  %553 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %517, i64 0, i32 31
  %554 = load i32, i32* %553, align 4
  %555 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  %556 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %555, i64 0, i32 17, i32 22
  store i32 %554, i32* %556, align 8
  %557 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 4
  %558 = load i32, i32* %557, align 8
  %559 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  %560 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %559, i64 0, i32 17, i32 23
  store i32 %558, i32* %560, align 4
  %561 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 5
  %562 = load i32, i32* %561, align 4
  %563 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  %564 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %563, i64 0, i32 17, i32 24
  store i32 %562, i32* %564, align 8
  %565 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 4
  %566 = load i8, i8* %565, align 4, !range !2
  %567 = icmp eq i8 %566, 0
  br i1 %567, label %568, label %646

568:                                              ; preds = %532
  %569 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 5
  %570 = load i32, i32* %569, align 4
  %571 = load %struct.SequenceHeader*, %struct.SequenceHeader** %516, align 16
  %572 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %571, i64 0, i32 27
  %573 = load i8, i8* %572, align 1
  %574 = icmp eq i8 %573, 0
  %575 = select i1 %574, i32 3, i32 1
  %576 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2
  %577 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 7
  %578 = load i8, i8* %577, align 1, !range !2
  %579 = icmp eq i8 %578, 0
  br i1 %579, label %580, label %587

580:                                              ; preds = %568
  %581 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 17
  %582 = load i32, i32* %581, align 4
  %583 = icmp eq i32 %582, 0
  %584 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %571, i64 0, i32 22
  %585 = load i8, i8* %584, align 1
  %586 = icmp eq i8 %585, 0
  br i1 %583, label %590, label %587

587:                                              ; preds = %580, %568
  %588 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 26, i32 0, i64 0
  store i32 0, i32* %588, align 4
  %589 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 26, i32 0, i64 1
  store i32 0, i32* %589, align 4
  br label %640

590:                                              ; preds = %580
  %591 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %182, align 8
  %592 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 12, i32 0
  %593 = load i8, i8* %592, align 16
  call void @av1_pick_filter_level(%struct.yv12_buffer_config* %591, %struct.AV1_COMP* %0, i8 zeroext %593) #12
  %594 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 26, i32 0, i64 0
  %595 = load i32, i32* %594, align 4
  %596 = icmp eq i32 %595, 0
  br i1 %596, label %597, label %601

597:                                              ; preds = %590
  %598 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 26, i32 0, i64 1
  %599 = load i32, i32* %598, align 4
  %600 = icmp eq i32 %599, 0
  br i1 %600, label %614, label %601

601:                                              ; preds = %597, %590
  %602 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 26
  %603 = load i32, i32* %602, align 8
  %604 = icmp eq i32 %603, 0
  br i1 %604, label %605, label %614

605:                                              ; preds = %601
  %606 = icmp sgt i32 %570, 1
  %607 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  %608 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %607, i64 0, i32 17
  br i1 %606, label %609, label %613

609:                                              ; preds = %605
  %610 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 4
  %611 = load %struct.AVxWorker*, %struct.AVxWorker** %610, align 8
  %612 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 9
  call void @av1_loop_filter_frame_mt(%struct.yv12_buffer_config* %608, %struct.AV1Common* %10, %struct.macroblockd* %576, i32 0, i32 %575, i32 0, %struct.AVxWorker* %611, i32 %570, %struct.AV1LfSyncData* %612) #12
  br label %614

613:                                              ; preds = %605
  call void @av1_loop_filter_frame(%struct.yv12_buffer_config* %608, %struct.AV1Common* %10, %struct.macroblockd* %576, i32 0, i32 %575, i32 0) #12
  br label %614

614:                                              ; preds = %613, %609, %601, %597
  br i1 %586, label %640, label %615

615:                                              ; preds = %614
  %616 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61
  %617 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 1, i64 7
  %618 = load i32, i32* %617, align 4
  %619 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  %620 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %619, i64 0, i32 17
  %621 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %182, align 8
  %622 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 12, i32 2
  %623 = load i32, i32* %622, align 8
  %624 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 17
  %625 = load i32, i32* %624, align 8
  call void @av1_cdef_search(%struct.MultiThreadInfo* %616, %struct.yv12_buffer_config* %620, %struct.yv12_buffer_config* %621, %struct.AV1Common* %10, %struct.macroblockd* %576, i32 %623, i32 %625) #12
  %626 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 26
  %627 = load i32, i32* %626, align 8
  %628 = icmp eq i32 %627, 0
  br i1 %628, label %629, label %645

629:                                              ; preds = %615
  %630 = icmp sgt i32 %618, 1
  br i1 %630, label %631, label %637

631:                                              ; preds = %629
  %632 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 15
  %633 = load %struct.AV1CdefWorker*, %struct.AV1CdefWorker** %632, align 8
  %634 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 4
  %635 = load %struct.AVxWorker*, %struct.AVxWorker** %634, align 8
  %636 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 61, i32 14
  call void @av1_cdef_frame_mt(%struct.AV1Common* %10, %struct.macroblockd* %576, %struct.AV1CdefWorker* %633, %struct.AVxWorker* %635, %struct.AV1CdefSyncData* %636, i32 %618, void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* nonnull @av1_cdef_init_fb_row_mt) #12
  br label %645

637:                                              ; preds = %629
  %638 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  %639 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %638, i64 0, i32 17
  call void @av1_cdef_frame(%struct.yv12_buffer_config* %639, %struct.AV1Common* %10, %struct.macroblockd* %576, void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* nonnull @av1_cdef_init_fb_row) #12
  br label %645

640:                                              ; preds = %587, %614
  %641 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 10
  store i32 0, i32* %641, align 8
  %642 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 8, i64 0
  store i32 0, i32* %642, align 8
  %643 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 7
  store i32 1, i32* %643, align 4
  %644 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 9, i64 0
  store i32 0, i32* %644, align 8
  br label %645

645:                                              ; preds = %615, %631, %637, %640
  call void @av1_superres_post_encode(%struct.AV1_COMP* %0) #12
  br label %656

646:                                              ; preds = %532
  %647 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 26, i32 0, i64 0
  store i32 0, i32* %647, align 16
  %648 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 26, i32 0, i64 1
  store i32 0, i32* %648, align 4
  %649 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 10
  store i32 0, i32* %649, align 8
  %650 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 8, i64 0
  store i32 0, i32* %650, align 8
  %651 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 7
  store i32 1, i32* %651, align 4
  %652 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31, i32 9, i64 0
  store i32 0, i32* %652, align 8
  %653 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 27, i64 0, i32 0
  store i32 0, i32* %653, align 8
  %654 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 27, i64 1, i32 0
  store i32 0, i32* %654, align 8
  %655 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 27, i64 2, i32 0
  store i32 0, i32* %655, align 8
  br label %656

656:                                              ; preds = %646, %645
  %657 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  %658 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %657, i64 0, i32 17
  %659 = load %struct.SequenceHeader*, %struct.SequenceHeader** %516, align 16
  %660 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %659, i64 0, i32 27
  %661 = load i8, i8* %660, align 1
  %662 = icmp eq i8 %661, 0
  %663 = select i1 %662, i32 3, i32 1
  call void @aom_extend_frame_borders_c(%struct.yv12_buffer_config* %658, i32 %663) #12
  %664 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 12, i32 3
  %665 = load i32, i32* %664, align 4
  %666 = icmp eq i32 %665, 2
  br i1 %666, label %667, label %688

667:                                              ; preds = %656
  %668 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 0
  store i32 1, i32* %668, align 4
  %669 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 1
  store i32 1, i32* %669, align 4
  %670 = call i32 @rand() #12
  %671 = trunc i32 %670 to i16
  %672 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 25
  store i16 %671, i16* %672, align 4
  %673 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 3
  store i32 1, i32* %673, align 4
  %674 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 2, i64 0, i64 0
  store i32 128, i32* %674, align 4
  %675 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 2, i64 0, i64 1
  store i32 100, i32* %675, align 4
  %676 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 5
  store i32 1, i32* %676, align 4
  %677 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 4, i64 0, i64 0
  store i32 128, i32* %677, align 4
  %678 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 4, i64 0, i64 1
  store i32 100, i32* %678, align 4
  %679 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 7
  store i32 1, i32* %679, align 4
  %680 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 6, i64 0, i64 0
  store i32 128, i32* %680, align 4
  %681 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 6, i64 0, i64 1
  store i32 100, i32* %681, align 4
  %682 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 23
  store i32 0, i32* %682, align 4
  %683 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 8
  store i32 1, i32* %683, align 4
  %684 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 9
  store i32 0, i32* %684, align 4
  %685 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 13
  store i32 1, i32* %685, align 4
  %686 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 20
  store i32 1, i32* %686, align 4
  %687 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 24
  store i32 0, i32* %687, align 4
  br label %688

688:                                              ; preds = %667, %656
  call void @av1_finalize_encoded_frame(%struct.AV1_COMP* %0) #12
  %689 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 3
  store i32 0, i32* %689, align 4
  %690 = call i32 @av1_pack_bitstream(%struct.AV1_COMP* %0, i8* %2, i64* %1, i32* %5) #12
  %691 = icmp eq i32 %690, 0
  br i1 %691, label %692, label %704

692:                                              ; preds = %688
  %693 = icmp eq i64* %3, null
  br i1 %693, label %699, label %694

694:                                              ; preds = %692
  %695 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %182, align 8
  %696 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %459, align 16
  %697 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %696, i64 0, i32 17
  %698 = call i64 @aom_get_y_sse(%struct.yv12_buffer_config* %695, %struct.yv12_buffer_config* %697) #12
  store i64 %698, i64* %3, align 8
  br label %699

699:                                              ; preds = %692, %694
  %700 = icmp eq i64* %4, null
  br i1 %700, label %704, label %701

701:                                              ; preds = %699
  %702 = load i64, i64* %1, align 8
  %703 = shl i64 %702, 8
  store i64 %703, i64* %4, align 8
  br label %704

704:                                              ; preds = %688, %699, %701
  %705 = phi i32 [ 1, %688 ], [ 0, %699 ], [ 0, %701 ]
  ret i32 %705
}

declare void @av1_reset_cdf_symbol_counters(%struct.frame_contexts*) local_unnamed_addr #3

declare void @av1_print_frame_contexts(%struct.frame_contexts*, i8*) local_unnamed_addr #3

declare void @av1_resize_and_extend_frame_nonnormative(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i32, i32) local_unnamed_addr #3

declare void @av1_save_all_coding_context(%struct.AV1_COMP*) local_unnamed_addr #3

declare i32 @av1_compute_rd_mult_based_on_qindex(i32, i32) local_unnamed_addr #3

declare i64 @aom_get_y_sse(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*) local_unnamed_addr #3

declare void @av1_set_size_dependent_vars(%struct.AV1_COMP*, i32*, i32*, i32*) local_unnamed_addr #3

declare %struct.yv12_buffer_config* @av1_scale_if_required(%struct.AV1Common*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8 zeroext, i32, i1 zeroext, i1 zeroext) local_unnamed_addr #3

declare void @av1_update_noise_estimate(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_denoiser_reset_on_first_frame(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_scale_references(%struct.AV1_COMP*, i8 zeroext, i32, i32) local_unnamed_addr #3

declare void @av1_set_quantizer(%struct.AV1Common*, i32, i32, i32, i32) local_unnamed_addr #3

declare void @av1_set_speed_features_qindex_dependent(%struct.AV1_COMP*, i32) local_unnamed_addr #3

declare void @av1_set_variance_partition_thresholds(%struct.AV1_COMP*, i32, i32) local_unnamed_addr #3

declare void @av1_setup_frame(%struct.AV1_COMP*) local_unnamed_addr #3

declare i32 @av1_encodedframe_overshoot_cbr(%struct.AV1_COMP*, i32*) local_unnamed_addr #3

declare void @av1_cyclic_refresh_setup(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_apply_active_map(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_calculate_segdata(%struct.segmentation*) local_unnamed_addr #3

declare void @av1_pick_and_set_high_precision_mv(%struct.AV1_COMP*, i32) local_unnamed_addr #3

declare void @av1_encode_frame(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_cyclic_refresh_postencode(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_set_rd_speed_thresholds(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_pick_filter_level(%struct.yv12_buffer_config*, %struct.AV1_COMP*, i8 zeroext) local_unnamed_addr #3

declare void @av1_loop_filter_frame_mt(%struct.yv12_buffer_config*, %struct.AV1Common*, %struct.macroblockd*, i32, i32, i32, %struct.AVxWorker*, i32, %struct.AV1LfSyncData*) local_unnamed_addr #3

declare void @av1_loop_filter_frame(%struct.yv12_buffer_config*, %struct.AV1Common*, %struct.macroblockd*, i32, i32, i32) local_unnamed_addr #3

declare void @av1_cdef_search(%struct.MultiThreadInfo*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.AV1Common*, %struct.macroblockd*, i32, i32) local_unnamed_addr #3

declare void @av1_cdef_frame_mt(%struct.AV1Common*, %struct.macroblockd*, %struct.AV1CdefWorker*, %struct.AVxWorker*, %struct.AV1CdefSyncData*, i32, void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)*) local_unnamed_addr #3

declare void @av1_cdef_init_fb_row_mt(%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32) #3

declare void @av1_cdef_frame(%struct.yv12_buffer_config*, %struct.AV1Common*, %struct.macroblockd*, void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)*) local_unnamed_addr #3

declare void @av1_cdef_init_fb_row(%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32) #3

declare void @av1_superres_post_encode(%struct.AV1_COMP*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @rand() local_unnamed_addr #8

declare %struct.aom_denoise_and_model_t* @aom_denoise_and_model_alloc(i32, i32, float) local_unnamed_addr #3

declare i32 @aom_denoise_and_model_run(%struct.aom_denoise_and_model_t*, %struct.yv12_buffer_config*, %struct.aom_film_grain_t*, i32) local_unnamed_addr #3

declare void @aom_film_grain_table_append(%struct.aom_film_grain_table_t*, i64, i64, %struct.aom_film_grain_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #8

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #8

declare void @aom_calc_psnr(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.PSNR_STATS*) local_unnamed_addr #3

declare i32 @aom_codec_pkt_list_add(%struct.aom_codec_pkt_list*, %struct.aom_codec_cx_pkt*) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone speculatable }
attributes #12 = { nounwind }
attributes #13 = { nounwind returns_twice }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{i32 0, i32 33}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
