; ModuleID = '../../third_party/ffmpeg/libavcodec/opus_parser.c'
source_filename = "../../third_party/ffmpeg/libavcodec/opus_parser.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVCodecHWConfigInternal = type opaque
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVRational = type { i32, i32 }
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVCodecParser = type { [5 x i32], i32, {}*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.OpusParseContext = type { %struct.ParseContext, %struct.OpusContext, %struct.OpusPacket, i32, i32 }
%struct.ParseContext = type { i8*, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.OpusContext = type { %struct.AVClass*, %struct.OpusStreamContext*, i32, i32, i32, %struct.AVFloatDSPContext*, i16, float, %struct.ChannelMap* }
%struct.OpusStreamContext = type { %struct.AVCodecContext*, i32, i32, [2 x float*], i32, %struct.AVAudioFifo*, %struct.OpusRangeCoder, %struct.OpusRangeCoder, %struct.SilkContext*, %struct.CeltFrame*, %struct.AVFloatDSPContext*, [2 x [960 x float]], [2 x float*], [24 x i8], [2 x [960 x float]], [2 x float*], [16 x i8], [2 x [960 x float]], [2 x float*], [2 x float*], i32, float*, i32, %struct.SwrContext*, %struct.AVAudioFifo*, i32, i32, %struct.OpusPacket, i32 }
%struct.OpusRangeCoder = type { %struct.GetBitContext, %struct.RawBitsContext, i32, i32, i32, [1287 x i8], i8*, i32, i32, i32 }
%struct.GetBitContext = type { i8*, i8*, i32, i32, i32 }
%struct.RawBitsContext = type { i8*, i32, i32, i32 }
%struct.SilkContext = type opaque
%struct.CeltFrame = type opaque
%struct.SwrContext = type opaque
%struct.AVAudioFifo = type opaque
%struct.AVFloatDSPContext = type { void (float*, float*, float*, i32)*, void (float*, float*, float, i32)*, void (double*, double*, double, i32)*, void (float*, float*, float, i32)*, void (double*, double*, double, i32)*, void (float*, float*, float*, float*, i32)*, void (float*, float*, float*, float*, i32)*, void (float*, float*, float*, i32)*, void (float*, float*, i32)*, float (float*, float*, i32)*, void (double*, double*, double*, i32)* }
%struct.ChannelMap = type { i32, i32, i32, i32, i32 }
%struct.OpusPacket = type { i32, i32, i32, i32, i32, i32, i32, [48 x i32], [48 x i32], i32, i32, i32 }

@ff_opus_parser = hidden local_unnamed_addr global { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* } { [5 x i32] [i32 86076, i32 0, i32 0, i32 0, i32 0], i32 536, i32 (%struct.AVCodecParserContext*)* null, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)* @opus_parse, void (%struct.AVCodecParserContext*)* @ff_parse_close, i32 (%struct.AVCodecContext*, i8*, i32)* null, %struct.AVCodecParser* null }, align 8
@.str = private unnamed_addr constant [30 x i8] c"Error parsing Ogg TS header.\0A\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"Error parsing Ogg extradata.\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"Error parsing Opus packet header.\0A\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"buf_size >= 0\00", align 1
@.str.5 = private unnamed_addr constant [49 x i8] c"../../third_party/ffmpeg/libavcodec/bytestream.h\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal i32 @opus_parse(%struct.AVCodecParserContext* nocapture, %struct.AVCodecContext*, i8** nocapture, i32* nocapture, i8*, i32) #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  store i8* %4, i8** %7, align 8
  store i32 %5, i32* %8, align 4
  %9 = bitcast %struct.AVCodecParserContext* %0 to %struct.OpusParseContext**
  %10 = load %struct.OpusParseContext*, %struct.OpusParseContext** %9, align 8
  %11 = icmp eq i32 %5, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.OpusParseContext, %struct.OpusParseContext* %10, i64 0, i32 4
  %14 = load i32, i32* %13, align 4
  br label %218

15:                                               ; preds = %6
  %16 = getelementptr inbounds %struct.OpusParseContext, %struct.OpusParseContext* %10, i64 0, i32 0, i32 5
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.OpusParseContext, %struct.OpusParseContext* %10, i64 0, i32 0, i32 4
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.OpusParseContext, %struct.OpusParseContext* %10, i64 0, i32 4
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  %23 = icmp sgt i32 %5, 2
  %24 = and i1 %23, %22
  br i1 %24, label %25, label %31

25:                                               ; preds = %15
  %26 = bitcast i8* %4 to i16*
  %27 = load i16, i16* %26, align 1
  %28 = and i16 %27, -7937
  %29 = icmp eq i16 %28, -8065
  br i1 %29, label %30, label %156

30:                                               ; preds = %25
  store i32 1, i32* %20, align 4
  br label %31

31:                                               ; preds = %30, %15
  %32 = phi i32 [ 1, %30 ], [ %21, %15 ]
  %33 = icmp eq i32 %32, 0
  %34 = icmp ne i32 %17, 0
  %35 = or i1 %34, %33
  br i1 %35, label %150, label %36

36:                                               ; preds = %31
  %37 = add i32 %5, -2
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %161

39:                                               ; preds = %36
  %40 = zext i32 %37 to i64
  br label %41

41:                                               ; preds = %147, %39
  %42 = phi i64 [ 0, %39 ], [ %148, %147 ]
  %43 = phi i32 [ %19, %39 ], [ %48, %147 ]
  %44 = shl i32 %43, 8
  %45 = getelementptr inbounds i8, i8* %4, i64 %42
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = or i32 %44, %47
  %49 = and i32 %48, 65504
  %50 = icmp eq i32 %49, 32736
  br i1 %50, label %51, label %147

51:                                               ; preds = %41
  %52 = trunc i64 %42 to i32
  %53 = sub nsw i32 %5, %52
  %54 = getelementptr inbounds i8, i8* %4, i64 1
  %55 = icmp sgt i32 %53, -1
  br i1 %55, label %57, label %56

56:                                               ; preds = %51
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.5, i64 0, i64 0), i32 141) #3
  tail call void @abort() #4
  unreachable

57:                                               ; preds = %51
  %58 = ptrtoint i8* %54 to i64
  %59 = sext i32 %53 to i64
  %60 = getelementptr inbounds i8, i8* %54, i64 %59
  %61 = ptrtoint i8* %60 to i64
  %62 = icmp eq i32 %53, 0
  br i1 %62, label %68, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds i8, i8* %4, i64 2
  %65 = ptrtoint i8* %64 to i64
  %66 = load i8, i8* %54, align 1
  %67 = zext i8 %66 to i32
  br label %68

68:                                               ; preds = %63, %57
  %69 = phi i64 [ %65, %63 ], [ %61, %57 ]
  %70 = phi i32 [ %67, %63 ], [ 0, %57 ]
  %71 = and i32 %70, 16
  %72 = and i32 %70, 8
  %73 = and i32 %70, 4
  br label %74

74:                                               ; preds = %79, %68
  %75 = phi i64 [ %69, %68 ], [ %84, %79 ]
  %76 = phi i64 [ 0, %68 ], [ %86, %79 ]
  %77 = sub i64 %61, %75
  %78 = icmp slt i64 %77, 1
  br i1 %78, label %89, label %79

79:                                               ; preds = %74
  %80 = inttoptr i64 %75 to i8*
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, -1
  %83 = getelementptr inbounds i8, i8* %80, i64 1
  %84 = ptrtoint i8* %83 to i64
  %85 = zext i8 %81 to i64
  %86 = add i64 %76, %85
  br i1 %82, label %74, label %87

87:                                               ; preds = %79
  %88 = ptrtoint i8* %83 to i64
  br label %89

89:                                               ; preds = %74, %87
  %90 = phi i64 [ %86, %87 ], [ %76, %74 ]
  %91 = phi i64 [ %88, %87 ], [ %61, %74 ]
  %92 = icmp eq i32 %71, 0
  br i1 %92, label %100, label %93

93:                                               ; preds = %89
  %94 = sub i64 %61, %91
  %95 = icmp slt i64 %94, 2
  %96 = select i1 %95, i64 %94, i64 2
  %97 = inttoptr i64 %91 to i8*
  %98 = getelementptr inbounds i8, i8* %97, i64 %96
  %99 = ptrtoint i8* %98 to i64
  br label %100

100:                                              ; preds = %93, %89
  %101 = phi i64 [ %91, %89 ], [ %99, %93 ]
  %102 = icmp eq i32 %72, 0
  br i1 %102, label %110, label %103

103:                                              ; preds = %100
  %104 = sub i64 %61, %101
  %105 = icmp slt i64 %104, 2
  %106 = select i1 %105, i64 %104, i64 2
  %107 = inttoptr i64 %101 to i8*
  %108 = getelementptr inbounds i8, i8* %107, i64 %106
  %109 = ptrtoint i8* %108 to i64
  br label %110

110:                                              ; preds = %103, %100
  %111 = phi i64 [ %101, %100 ], [ %109, %103 ]
  %112 = icmp eq i32 %73, 0
  br i1 %112, label %131, label %113

113:                                              ; preds = %110
  %114 = sub i64 %61, %111
  %115 = icmp slt i64 %114, 1
  %116 = inttoptr i64 %111 to i8*
  br i1 %115, label %122, label %117

117:                                              ; preds = %113
  %118 = getelementptr inbounds i8, i8* %116, i64 1
  %119 = ptrtoint i8* %118 to i64
  %120 = load i8, i8* %116, align 1
  %121 = zext i8 %120 to i64
  br label %122

122:                                              ; preds = %117, %113
  %123 = phi i64 [ %119, %117 ], [ %61, %113 ]
  %124 = phi i64 [ %121, %117 ], [ 0, %113 ]
  %125 = sub i64 %61, %123
  %126 = icmp sgt i64 %125, %124
  %127 = select i1 %126, i64 %124, i64 %125
  %128 = inttoptr i64 %123 to i8*
  %129 = getelementptr inbounds i8, i8* %128, i64 %127
  %130 = ptrtoint i8* %129 to i64
  br label %131

131:                                              ; preds = %122, %110
  %132 = phi i64 [ %111, %110 ], [ %130, %122 ]
  %133 = sub i64 %132, %58
  %134 = shl i64 %133, 32
  %135 = ashr exact i64 %134, 32
  %136 = add i64 %135, %90
  %137 = icmp ugt i64 %136, %59
  br i1 %137, label %145, label %138

138:                                              ; preds = %131
  %139 = getelementptr inbounds i8, i8* %54, i64 %135
  %140 = trunc i64 %90 to i32
  %141 = ptrtoint i8* %139 to i64
  %142 = ptrtoint i8* %4 to i64
  %143 = sub i64 %141, %142
  %144 = trunc i64 %143 to i32
  br label %150

145:                                              ; preds = %131
  %146 = bitcast %struct.AVCodecContext* %1 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %146, i32 16, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)) #3
  br label %238

147:                                              ; preds = %41
  %148 = add nuw nsw i64 %42, 1
  %149 = icmp eq i64 %148, %40
  br i1 %149, label %150, label %41

150:                                              ; preds = %147, %138, %31
  %151 = phi i32 [ 0, %31 ], [ %144, %138 ], [ 0, %147 ]
  %152 = phi i32 [ 0, %31 ], [ %140, %138 ], [ 0, %147 ]
  %153 = phi i32 [ %17, %31 ], [ 1, %138 ], [ 0, %147 ]
  %154 = phi i8* [ %4, %31 ], [ %139, %138 ], [ %4, %147 ]
  %155 = phi i32 [ %19, %31 ], [ %48, %138 ], [ %48, %147 ]
  br i1 %33, label %156, label %161

156:                                              ; preds = %150, %25
  %157 = phi i32 [ %151, %150 ], [ 0, %25 ]
  %158 = phi i32 [ %155, %150 ], [ %19, %25 ]
  %159 = phi i8* [ %154, %150 ], [ %4, %25 ]
  %160 = phi i32 [ %153, %150 ], [ %17, %25 ]
  br label %161

161:                                              ; preds = %156, %150, %36
  %162 = phi i32 [ %157, %156 ], [ %151, %150 ], [ 0, %36 ]
  %163 = phi i32 [ %158, %156 ], [ %155, %150 ], [ %19, %36 ]
  %164 = phi i8* [ %159, %156 ], [ %154, %150 ], [ %4, %36 ]
  %165 = phi i32 [ %160, %156 ], [ %153, %150 ], [ 0, %36 ]
  %166 = phi i32 [ %5, %156 ], [ %152, %150 ], [ 0, %36 ]
  %167 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1, i64 0, i32 15
  %168 = load i8*, i8** %167, align 8
  %169 = icmp eq i8* %168, null
  br i1 %169, label %183, label %170

170:                                              ; preds = %161
  %171 = getelementptr inbounds %struct.OpusParseContext, %struct.OpusParseContext* %10, i64 0, i32 3
  %172 = load i32, i32* %171, align 8
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %183

174:                                              ; preds = %170
  %175 = getelementptr inbounds %struct.OpusParseContext, %struct.OpusParseContext* %10, i64 0, i32 1
  %176 = tail call i32 @ff_opus_parse_extradata(%struct.AVCodecContext* %1, %struct.OpusContext* %175) #3
  %177 = icmp slt i32 %176, 0
  br i1 %177, label %178, label %180

178:                                              ; preds = %174
  %179 = bitcast %struct.AVCodecContext* %1 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %179, i32 16, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)) #3
  br label %238

180:                                              ; preds = %174
  %181 = getelementptr inbounds %struct.OpusParseContext, %struct.OpusParseContext* %10, i64 0, i32 1, i32 8
  %182 = bitcast %struct.ChannelMap** %181 to i8*
  tail call void @av_freep(i8* %182) #3
  store i32 1, i32* %171, align 8
  br label %183

183:                                              ; preds = %180, %170, %161
  %184 = icmp sgt i32 %166, %5
  br i1 %184, label %207, label %185

185:                                              ; preds = %183
  %186 = load i32, i32* %20, align 4
  %187 = icmp eq i32 %186, 0
  %188 = icmp ne i32 %165, 0
  %189 = or i1 %188, %187
  br i1 %189, label %190, label %216

190:                                              ; preds = %185
  %191 = getelementptr inbounds %struct.OpusParseContext, %struct.OpusParseContext* %10, i64 0, i32 2
  %192 = getelementptr inbounds %struct.OpusParseContext, %struct.OpusParseContext* %10, i64 0, i32 1, i32 3
  %193 = load i32, i32* %192, align 4
  %194 = icmp sgt i32 %193, 1
  %195 = zext i1 %194 to i32
  %196 = tail call i32 @ff_opus_parse_packet(%struct.OpusPacket* %191, i8* %164, i32 %166, i32 %195) #3
  %197 = icmp slt i32 %196, 0
  br i1 %197, label %198, label %200

198:                                              ; preds = %190
  %199 = bitcast %struct.AVCodecContext* %1 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %199, i32 16, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0)) #3
  store i32 0, i32* %16, align 8
  br label %238

200:                                              ; preds = %190
  %201 = getelementptr inbounds %struct.OpusParseContext, %struct.OpusParseContext* %10, i64 0, i32 2, i32 6
  %202 = load i32, i32* %201, align 8
  %203 = getelementptr inbounds %struct.OpusParseContext, %struct.OpusParseContext* %10, i64 0, i32 2, i32 9
  %204 = load i32, i32* %203, align 4
  %205 = mul nsw i32 %204, %202
  %206 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 27
  store i32 %205, i32* %206, align 8
  br label %207

207:                                              ; preds = %200, %183
  %208 = load i32, i32* %20, align 4
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %234, label %210

210:                                              ; preds = %207
  %211 = icmp eq i32 %165, 0
  br i1 %211, label %216, label %212

212:                                              ; preds = %210
  %213 = add nsw i32 %166, %162
  %214 = icmp sgt i32 %213, %5
  br i1 %214, label %216, label %215

215:                                              ; preds = %212
  store i32 0, i32* %16, align 8
  store i32 -1, i32* %18, align 4
  br label %218

216:                                              ; preds = %212, %210, %185
  %217 = phi i32 [ %208, %212 ], [ %208, %210 ], [ %186, %185 ]
  store i32 %165, i32* %16, align 8
  store i32 %163, i32* %18, align 4
  br label %218

218:                                              ; preds = %12, %215, %216
  %219 = phi i32 [ %14, %12 ], [ %217, %216 ], [ %208, %215 ]
  %220 = phi i32 [ 0, %12 ], [ %162, %216 ], [ %162, %215 ]
  %221 = phi i32 [ 0, %12 ], [ -100, %216 ], [ %213, %215 ]
  %222 = icmp ne i32 %219, 0
  %223 = icmp ne i32 %221, -1094995529
  %224 = and i1 %223, %222
  br i1 %224, label %225, label %234

225:                                              ; preds = %218
  %226 = getelementptr inbounds %struct.OpusParseContext, %struct.OpusParseContext* %10, i64 0, i32 0
  %227 = call i32 @ff_combine_frame(%struct.ParseContext* %226, i32 %221, i8** nonnull %7, i32* nonnull %8) #3
  %228 = icmp slt i32 %227, 0
  br i1 %228, label %232, label %229

229:                                              ; preds = %225
  %230 = load i8*, i8** %7, align 8
  %231 = load i32, i32* %8, align 4
  br label %239

232:                                              ; preds = %225
  store i8* null, i8** %2, align 8
  store i32 0, i32* %3, align 4
  %233 = load i32, i32* %8, align 4
  br label %247

234:                                              ; preds = %207, %218
  %235 = phi i32 [ %221, %218 ], [ %5, %207 ]
  %236 = phi i32 [ %220, %218 ], [ %162, %207 ]
  %237 = icmp eq i32 %235, -1094995529
  br i1 %237, label %238, label %239

238:                                              ; preds = %198, %178, %145, %234
  store i8* null, i8** %2, align 8
  store i32 0, i32* %3, align 4
  br label %247

239:                                              ; preds = %229, %234
  %240 = phi i32 [ %221, %229 ], [ %235, %234 ]
  %241 = phi i32 [ %220, %229 ], [ %236, %234 ]
  %242 = phi i32 [ %231, %229 ], [ %5, %234 ]
  %243 = phi i8* [ %230, %229 ], [ %4, %234 ]
  %244 = sext i32 %241 to i64
  %245 = getelementptr inbounds i8, i8* %243, i64 %244
  store i8* %245, i8** %2, align 8
  %246 = sub nsw i32 %242, %241
  store i32 %246, i32* %3, align 4
  br label %247

247:                                              ; preds = %239, %238, %232
  %248 = phi i32 [ %233, %232 ], [ %5, %238 ], [ %240, %239 ]
  ret i32 %248
}

declare void @ff_parse_close(%struct.AVCodecParserContext*) #1

declare i32 @ff_combine_frame(%struct.ParseContext*, i32, i8**, i32*) local_unnamed_addr #1

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #1

declare i32 @ff_opus_parse_extradata(%struct.AVCodecContext*, %struct.OpusContext*) local_unnamed_addr #1

declare void @av_freep(i8*) local_unnamed_addr #1

declare i32 @ff_opus_parse_packet(%struct.OpusPacket*, i8*, i32, i32) local_unnamed_addr #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
