; ModuleID = '../../third_party/ots/src/src/fpgm.cc'
source_filename = "../../third_party/ots/src/src/fpgm.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.ots::OpenTypeFPGM" = type <{ %"class.ots::Table.base", [7 x i8], i8*, i32, [4 x i8] }>
%"class.ots::Table.base" = type <{ i32 (...)**, i32, i32, %"struct.ots::Font"*, i8 }>
%"struct.ots::Font" = type { %"struct.ots::FontFile"*, i32, i16, i16, i16, i16, %"class.std::__1::map.15" }
%"struct.ots::FontFile" = type { %"class.ots::OTSContext"*, %"class.std::__1::map", %"class.std::__1::map.4" }
%"class.ots::OTSContext" = type { i32 (...)** }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::map.4" = type { %"class.std::__1::__tree.5" }
%"class.std::__1::__tree.5" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::map.15" = type { %"class.std::__1::__tree.16" }
%"class.std::__1::__tree.16" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.17", %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.ots::Table" = type <{ i32 (...)**, i32, i32, %"struct.ots::Font"*, i8, [7 x i8] }>
%"class.ots::OTSStream" = type <{ i32 (...)**, i32, [4 x i8] }>

$_ZN3ots5TableD2Ev = comdat any

$_ZN3ots12OpenTypeFPGMD0Ev = comdat any

@.str = private unnamed_addr constant [19 x i8] c"length (%ld) > 120\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"Failed to write fpgm table\00", align 1
@_ZTVN3ots12OpenTypeFPGME = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.ots::Table"*)* @_ZN3ots5TableD2Ev to i8*), i8* bitcast (void (%"class.ots::OpenTypeFPGM"*)* @_ZN3ots12OpenTypeFPGMD0Ev to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeFPGM"*, i8*, i64)* @_ZN3ots12OpenTypeFPGM5ParseEPKhm to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeFPGM"*, %"class.ots::OTSStream"*)* @_ZN3ots12OpenTypeFPGM9SerializeEPNS_9OTSStreamE to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeFPGM"*)* @_ZN3ots12OpenTypeFPGM15ShouldSerializeEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeFPGM5ParseEPKhm(%"class.ots::OpenTypeFPGM"*, i8*, i64) unnamed_addr #0 align 2 {
  %4 = icmp ugt i64 %2, 131071
  br i1 %4, label %5, label %8

5:                                                ; preds = %3
  %6 = bitcast %"class.ots::OpenTypeFPGM"* %0 to %"class.ots::Table"*
  %7 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i64 %2) #6
  br label %12

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.ots::OpenTypeFPGM", %"class.ots::OpenTypeFPGM"* %0, i64 0, i32 2
  store i8* %1, i8** %9, align 8
  %10 = trunc i64 %2 to i32
  %11 = getelementptr inbounds %"class.ots::OpenTypeFPGM", %"class.ots::OpenTypeFPGM"* %0, i64 0, i32 3
  store i32 %10, i32* %11, align 8
  br label %12

12:                                               ; preds = %8, %5
  %13 = phi i1 [ %7, %5 ], [ true, %8 ]
  ret i1 %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"*, i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeFPGM9SerializeEPNS_9OTSStreamE(%"class.ots::OpenTypeFPGM"*, %"class.ots::OTSStream"*) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.ots::OpenTypeFPGM", %"class.ots::OpenTypeFPGM"* %0, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.ots::OpenTypeFPGM", %"class.ots::OpenTypeFPGM"* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = zext i32 %8 to i64
  %10 = icmp eq i32 %8, 0
  br i1 %10, label %114, label %11

11:                                               ; preds = %2
  %12 = bitcast %"class.ots::OTSStream"* %1 to i64 (%"class.ots::OTSStream"*)***
  %13 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %12, align 8
  %14 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %13, i64 4
  %15 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %14, align 8
  %16 = tail call i64 %15(%"class.ots::OTSStream"* %1) #6
  %17 = and i64 %16, 3
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %31, label %19

19:                                               ; preds = %11
  %20 = sub nuw nsw i64 4, %17
  %21 = icmp ult i64 %20, %9
  %22 = select i1 %21, i64 %20, i64 %9
  %23 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #6
  store i32 0, i32* %3, align 4
  %24 = getelementptr inbounds i8, i8* %23, i64 %17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 1 %6, i64 %22, i1 false) #6
  %25 = load i32, i32* %3, align 4
  %26 = tail call i32 @llvm.bswap.i32(i32 %25) #6
  %27 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = add i32 %28, %26
  store i32 %29, i32* %27, align 8
  %30 = sub nsw i64 %9, %22
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #6
  br label %31

31:                                               ; preds = %19, %11
  %32 = phi i64 [ %9, %11 ], [ %30, %19 ]
  %33 = phi i64 [ 0, %11 ], [ %22, %19 ]
  %34 = icmp ugt i64 %32, 3
  br i1 %34, label %35, label %96

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = add nsw i64 %32, -4
  %39 = lshr i64 %38, 2
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 3
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %57, label %43

43:                                               ; preds = %35, %43
  %44 = phi i32 [ %52, %43 ], [ %37, %35 ]
  %45 = phi i64 [ %54, %43 ], [ %33, %35 ]
  %46 = phi i64 [ %53, %43 ], [ %32, %35 ]
  %47 = phi i64 [ %55, %43 ], [ %41, %35 ]
  %48 = getelementptr inbounds i8, i8* %6, i64 %45
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = tail call i32 @llvm.bswap.i32(i32 %50) #6
  %52 = add i32 %51, %44
  store i32 %52, i32* %36, align 8
  %53 = add i64 %46, -4
  %54 = add i64 %45, 4
  %55 = add i64 %47, -1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %43, !llvm.loop !2

57:                                               ; preds = %43, %35
  %58 = phi i32 [ %37, %35 ], [ %52, %43 ]
  %59 = phi i64 [ %33, %35 ], [ %54, %43 ]
  %60 = phi i64 [ %32, %35 ], [ %53, %43 ]
  %61 = phi i64 [ undef, %35 ], [ %54, %43 ]
  %62 = icmp ult i64 %38, 12
  br i1 %62, label %93, label %63

63:                                               ; preds = %57, %63
  %64 = phi i32 [ %89, %63 ], [ %58, %57 ]
  %65 = phi i64 [ %91, %63 ], [ %59, %57 ]
  %66 = phi i64 [ %90, %63 ], [ %60, %57 ]
  %67 = getelementptr inbounds i8, i8* %6, i64 %65
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = tail call i32 @llvm.bswap.i32(i32 %69) #6
  %71 = add i32 %70, %64
  store i32 %71, i32* %36, align 8
  %72 = add i64 %65, 4
  %73 = getelementptr inbounds i8, i8* %6, i64 %72
  %74 = bitcast i8* %73 to i32*
  %75 = load i32, i32* %74, align 1
  %76 = tail call i32 @llvm.bswap.i32(i32 %75) #6
  %77 = add i32 %76, %71
  store i32 %77, i32* %36, align 8
  %78 = add i64 %65, 8
  %79 = getelementptr inbounds i8, i8* %6, i64 %78
  %80 = bitcast i8* %79 to i32*
  %81 = load i32, i32* %80, align 1
  %82 = tail call i32 @llvm.bswap.i32(i32 %81) #6
  %83 = add i32 %82, %77
  store i32 %83, i32* %36, align 8
  %84 = add i64 %65, 12
  %85 = getelementptr inbounds i8, i8* %6, i64 %84
  %86 = bitcast i8* %85 to i32*
  %87 = load i32, i32* %86, align 1
  %88 = tail call i32 @llvm.bswap.i32(i32 %87) #6
  %89 = add i32 %88, %83
  store i32 %89, i32* %36, align 8
  %90 = add i64 %66, -16
  %91 = add i64 %65, 16
  %92 = icmp ugt i64 %90, 3
  br i1 %92, label %63, label %93

93:                                               ; preds = %63, %57
  %94 = phi i64 [ %61, %57 ], [ %91, %63 ]
  %95 = and i64 %32, 3
  br label %96

96:                                               ; preds = %93, %31
  %97 = phi i64 [ %32, %31 ], [ %95, %93 ]
  %98 = phi i64 [ %33, %31 ], [ %94, %93 ]
  %99 = icmp eq i64 %97, 0
  br i1 %99, label %108, label %100

100:                                              ; preds = %96
  %101 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %101)
  store i32 0, i32* %4, align 4
  %102 = getelementptr inbounds i8, i8* %6, i64 %98
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %101, i8* align 1 %102, i64 %97, i1 false) #6
  %103 = load i32, i32* %4, align 4
  %104 = tail call i32 @llvm.bswap.i32(i32 %103) #6
  %105 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %106 = load i32, i32* %105, align 8
  %107 = add i32 %106, %104
  store i32 %107, i32* %105, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %101)
  br label %108

108:                                              ; preds = %96, %100
  %109 = bitcast %"class.ots::OTSStream"* %1 to i1 (%"class.ots::OTSStream"*, i8*, i64)***
  %110 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %109, align 8
  %111 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %110, i64 2
  %112 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %111, align 8
  %113 = tail call zeroext i1 %112(%"class.ots::OTSStream"* %1, i8* %6, i64 %9) #6
  br i1 %113, label %117, label %114

114:                                              ; preds = %2, %108
  %115 = bitcast %"class.ots::OpenTypeFPGM"* %0 to %"class.ots::Table"*
  %116 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %115, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0)) #6
  br label %117

117:                                              ; preds = %108, %114
  %118 = phi i1 [ %116, %114 ], [ true, %108 ]
  ret i1 %118
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeFPGM15ShouldSerializeEv(%"class.ots::OpenTypeFPGM"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.ots::OpenTypeFPGM"* %0 to %"class.ots::Table"*
  %3 = tail call zeroext i1 @_ZN3ots5Table15ShouldSerializeEv(%"class.ots::Table"* %2) #6
  br i1 %3, label %4, label %9

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.ots::OpenTypeFPGM", %"class.ots::OpenTypeFPGM"* %0, i64 0, i32 0, i32 3
  %6 = load %"struct.ots::Font"*, %"struct.ots::Font"** %5, align 8
  %7 = tail call %"class.ots::Table"* @_ZNK3ots4Font8GetTableEj(%"struct.ots::Font"* %6, i32 1735162214) #6
  %8 = icmp ne %"class.ots::Table"* %7, null
  br label %9

9:                                                ; preds = %4, %1
  %10 = phi i1 [ false, %1 ], [ %8, %4 ]
  ret i1 %10
}

declare zeroext i1 @_ZN3ots5Table15ShouldSerializeEv(%"class.ots::Table"*) unnamed_addr #2

declare %"class.ots::Table"* @_ZNK3ots4Font8GetTableEj(%"struct.ots::Font"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3ots5TableD2Ev(%"class.ots::Table"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3ots12OpenTypeFPGMD0Ev(%"class.ots::OpenTypeFPGM"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.ots::OpenTypeFPGM"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
