; ModuleID = '../../third_party/pdfium/fxbarcode/datamatrix/BC_Base256Encoder.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/datamatrix/BC_Base256Encoder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CBC_Base256Encoder = type { %class.CBC_Encoder }
%class.CBC_Encoder = type { i32 (...)** }
%class.CBC_EncoderContext = type { %"class.fxcrt::WideString", %"class.fxcrt::WideString", i64, i8, %"class.fxcrt::UnownedPtr", i8, i8, i64 }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%"class.fxcrt::UnownedPtr" = type { %class.CBC_SymbolInfo* }
%class.CBC_SymbolInfo = type { i32 (...)**, %"struct.CBC_SymbolInfo::Data"* }
%"struct.CBC_SymbolInfo::Data" = type { i16, i16, i16, i8, i8, i8, i8 }

@_ZTV18CBC_Base256Encoder = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CBC_Base256Encoder*)* @_ZN18CBC_Base256EncoderD2Ev to i8*), i8* bitcast (void (%class.CBC_Base256Encoder*)* @_ZN18CBC_Base256EncoderD0Ev to i8*), i8* bitcast (i8 (%class.CBC_Base256Encoder*)* @_ZN18CBC_Base256Encoder15GetEncodingModeEv to i8*), i8* bitcast (i1 (%class.CBC_Base256Encoder*, %class.CBC_EncoderContext*)* @_ZN18CBC_Base256Encoder6EncodeEP18CBC_EncoderContext to i8*)] }, align 8

@_ZN18CBC_Base256EncoderC1Ev = hidden unnamed_addr alias void (%class.CBC_Base256Encoder*), void (%class.CBC_Base256Encoder*)* @_ZN18CBC_Base256EncoderC2Ev
@_ZN18CBC_Base256EncoderD1Ev = hidden unnamed_addr alias void (%class.CBC_Base256Encoder*), void (%class.CBC_Base256Encoder*)* @_ZN18CBC_Base256EncoderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CBC_Base256EncoderC2Ev(%class.CBC_Base256Encoder*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_Base256Encoder, %class.CBC_Base256Encoder* %0, i64 0, i32 0
  tail call void @_ZN11CBC_EncoderC2Ev(%class.CBC_Encoder* %2) #6
  %3 = getelementptr inbounds %class.CBC_Base256Encoder, %class.CBC_Base256Encoder* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV18CBC_Base256Encoder, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

declare void @_ZN11CBC_EncoderC2Ev(%class.CBC_Encoder*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN11CBC_EncoderD2Ev(%class.CBC_Encoder*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CBC_Base256EncoderD2Ev(%class.CBC_Base256Encoder*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_Base256Encoder, %class.CBC_Base256Encoder* %0, i64 0, i32 0
  tail call void @_ZN11CBC_EncoderD2Ev(%class.CBC_Encoder* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CBC_Base256EncoderD0Ev(%class.CBC_Base256Encoder*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_Base256Encoder, %class.CBC_Base256Encoder* %0, i64 0, i32 0
  tail call void @_ZN11CBC_EncoderD2Ev(%class.CBC_Encoder* %2) #6
  %3 = bitcast %class.CBC_Base256Encoder* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden signext i8 @_ZN18CBC_Base256Encoder15GetEncodingModeEv(%class.CBC_Base256Encoder* nocapture readnone) unnamed_addr #4 align 2 {
  ret i8 5
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18CBC_Base256Encoder6EncodeEP18CBC_EncoderContext(%class.CBC_Base256Encoder* nocapture readnone, %class.CBC_EncoderContext*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.fxcrt::WideString", align 8
  %4 = alloca [128 x i8], align 16
  %5 = bitcast %"class.fxcrt::WideString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %6, align 8
  call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* nonnull %3) #6
  %7 = call i64 @_ZN18CBC_EncoderContext22getRemainingCharactersEv(%class.CBC_EncoderContext* %1) #6
  %8 = add i64 %7, 1
  call void @_ZN5fxcrt10WideString7ReserveEm(%"class.fxcrt::WideString"* nonnull %3, i64 %8) #6
  %9 = call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* nonnull %3, i32 signext 0) #6
  %10 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %1, i64 0, i32 2
  %11 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %1, i64 0, i32 0
  br label %12

12:                                               ; preds = %14, %2
  %13 = call zeroext i1 @_ZN18CBC_EncoderContext17hasMoreCharactersEv(%class.CBC_EncoderContext* %1) #6
  br i1 %13, label %14, label %22

14:                                               ; preds = %12
  %15 = call signext i32 @_ZN18CBC_EncoderContext14getCurrentCharEv(%class.CBC_EncoderContext* %1) #6
  %16 = call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* nonnull %3, i32 signext %15) #6
  %17 = load i64, i64* %10, align 8
  %18 = add i64 %17, 1
  store i64 %18, i64* %10, align 8
  %19 = call signext i8 @_ZN20CBC_HighLevelEncoder13LookAheadTestERKN5fxcrt10WideStringEmNS_8EncodingE(%"class.fxcrt::WideString"* dereferenceable(8) %11, i64 %18, i8 signext 5) #6
  %20 = icmp eq i8 %19, 5
  br i1 %20, label %12, label %21

21:                                               ; preds = %14
  call void @_ZN18CBC_EncoderContext19SignalEncoderChangeEN20CBC_HighLevelEncoder8EncodingE(%class.CBC_EncoderContext* %1, i8 signext %19) #6
  br label %22

22:                                               ; preds = %12, %21
  %23 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %6, align 8
  %24 = icmp eq %"class.fxcrt::StringDataTemplate"* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %23, i64 0, i32 1
  %27 = load i64, i64* %26, align 8
  br label %28

28:                                               ; preds = %22, %25
  %29 = phi i64 [ %27, %25 ], [ 0, %22 ]
  %30 = add i64 %29, -1
  %31 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %31) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 -86, i64 128, i1 false)
  %32 = trunc i64 %30 to i32
  %33 = call i8* @FXSYS_itoa(i32 %32, i8* nonnull %31, i32 10) #6
  %34 = load i8, i8* %31, align 16
  %35 = sext i8 %34 to i32
  %36 = add nsw i32 %35, -48
  call void @_ZN5fxcrt10WideString5SetAtEmw(%"class.fxcrt::WideString"* nonnull %3, i64 0, i32 signext %36) #6
  %37 = call i64 @_ZN18CBC_EncoderContext16getCodewordCountEv(%class.CBC_EncoderContext* %1) #6
  %38 = add i64 %37, %29
  %39 = shl i64 %38, 32
  %40 = ashr exact i64 %39, 32
  %41 = call zeroext i1 @_ZN18CBC_EncoderContext16UpdateSymbolInfoEm(%class.CBC_EncoderContext* %1, i64 %40) #6
  br i1 %41, label %42, label %94

42:                                               ; preds = %28
  %43 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %1, i64 0, i32 4, i32 0
  %44 = load %class.CBC_SymbolInfo*, %class.CBC_SymbolInfo** %43, align 8
  %45 = getelementptr inbounds %class.CBC_SymbolInfo, %class.CBC_SymbolInfo* %44, i64 0, i32 1
  %46 = load %"struct.CBC_SymbolInfo::Data"*, %"struct.CBC_SymbolInfo::Data"** %45, align 8
  %47 = getelementptr inbounds %"struct.CBC_SymbolInfo::Data", %"struct.CBC_SymbolInfo::Data"* %46, i64 0, i32 0
  %48 = load i16, i16* %47, align 2
  %49 = sext i16 %48 to i64
  %50 = call zeroext i1 @_ZN18CBC_EncoderContext17hasMoreCharactersEv(%class.CBC_EncoderContext* %1) #6
  %51 = xor i1 %50, true
  %52 = icmp eq i64 %40, %49
  %53 = and i1 %52, %51
  br i1 %53, label %67, label %54

54:                                               ; preds = %42
  %55 = icmp ult i64 %30, 250
  br i1 %55, label %56, label %57

56:                                               ; preds = %54
  call void @_ZN5fxcrt10WideString5SetAtEmw(%"class.fxcrt::WideString"* nonnull %3, i64 0, i32 signext %32) #6
  br label %67

57:                                               ; preds = %54
  %58 = icmp ult i64 %30, 1556
  br i1 %58, label %59, label %94

59:                                               ; preds = %57
  %60 = trunc i64 %30 to i16
  %61 = udiv i16 %60, 250
  %62 = add nuw nsw i16 %61, 249
  %63 = zext i16 %62 to i32
  call void @_ZN5fxcrt10WideString5SetAtEmw(%"class.fxcrt::WideString"* nonnull %3, i64 0, i32 signext %63) #6
  %64 = urem i16 %60, 250
  %65 = zext i16 %64 to i32
  %66 = call i64 @_ZN5fxcrt10WideString6InsertEmw(%"class.fxcrt::WideString"* nonnull %3, i64 1, i32 signext %65) #6
  br label %67

67:                                               ; preds = %42, %56, %59
  %68 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %6, align 8
  %69 = icmp eq %"class.fxcrt::StringDataTemplate"* %68, null
  %70 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %68, i64 0, i32 3, i64 0
  %71 = select i1 %69, i32* null, i32* %70
  br i1 %69, label %76, label %72

72:                                               ; preds = %67
  %73 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %68, i64 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %68, i64 0, i32 3, i64 %74
  br label %76

76:                                               ; preds = %67, %72
  %77 = phi i32* [ %75, %72 ], [ null, %67 ]
  %78 = icmp eq i32* %71, %77
  br i1 %78, label %94, label %79

79:                                               ; preds = %76, %79
  %80 = phi i32* [ %92, %79 ], [ %71, %76 ]
  %81 = load i32, i32* %80, align 4
  %82 = call i64 @_ZN18CBC_EncoderContext16getCodewordCountEv(%class.CBC_EncoderContext* %1) #6
  %83 = trunc i64 %82 to i32
  %84 = mul i32 %83, 149
  %85 = add i32 %84, 149
  %86 = srem i32 %85, 255
  %87 = add i32 %81, 1
  %88 = add i32 %87, %86
  %89 = icmp slt i32 %88, 256
  %90 = add nsw i32 %88, -256
  %91 = select i1 %89, i32 %88, i32 %90
  call void @_ZN18CBC_EncoderContext13writeCodewordEw(%class.CBC_EncoderContext* %1, i32 signext %91) #6
  %92 = getelementptr inbounds i32, i32* %80, i64 1
  %93 = icmp eq i32* %92, %77
  br i1 %93, label %94, label %79

94:                                               ; preds = %79, %76, %57, %28
  %95 = phi i1 [ false, %28 ], [ false, %57 ], [ true, %76 ], [ true, %79 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %31) #6
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  ret i1 %95
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

declare void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"*) unnamed_addr #1

declare void @_ZN5fxcrt10WideString7ReserveEm(%"class.fxcrt::WideString"*, i64) local_unnamed_addr #1

declare i64 @_ZN18CBC_EncoderContext22getRemainingCharactersEv(%class.CBC_EncoderContext*) local_unnamed_addr #1

declare dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"*, i32 signext) local_unnamed_addr #1

declare zeroext i1 @_ZN18CBC_EncoderContext17hasMoreCharactersEv(%class.CBC_EncoderContext*) local_unnamed_addr #1

declare signext i32 @_ZN18CBC_EncoderContext14getCurrentCharEv(%class.CBC_EncoderContext*) local_unnamed_addr #1

declare signext i8 @_ZN20CBC_HighLevelEncoder13LookAheadTestERKN5fxcrt10WideStringEmNS_8EncodingE(%"class.fxcrt::WideString"* dereferenceable(8), i64, i8 signext) local_unnamed_addr #1

declare void @_ZN18CBC_EncoderContext19SignalEncoderChangeEN20CBC_HighLevelEncoder8EncodingE(%class.CBC_EncoderContext*, i8 signext) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

declare i8* @FXSYS_itoa(i32, i8*, i32) local_unnamed_addr #1

declare void @_ZN5fxcrt10WideString5SetAtEmw(%"class.fxcrt::WideString"*, i64, i32 signext) local_unnamed_addr #1

declare i64 @_ZN18CBC_EncoderContext16getCodewordCountEv(%class.CBC_EncoderContext*) local_unnamed_addr #1

declare zeroext i1 @_ZN18CBC_EncoderContext16UpdateSymbolInfoEm(%class.CBC_EncoderContext*, i64) local_unnamed_addr #1

declare i64 @_ZN5fxcrt10WideString6InsertEmw(%"class.fxcrt::WideString"*, i64, i32 signext) local_unnamed_addr #1

declare void @_ZN18CBC_EncoderContext13writeCodewordEw(%class.CBC_EncoderContext*, i32 signext) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"*) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
