; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/ransac.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/ransac.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.RANSAC_MOTION = type { i32, double, i32* }

@switch.table.av1_get_ransac_type = private unnamed_addr constant [3 x i32 (i32*, i32, i32*, %struct.MotionModel*, i32)*] [i32 (i32*, i32, i32*, %struct.MotionModel*, i32)* @ransac_translation, i32 (i32*, i32, i32*, %struct.MotionModel*, i32)* @ransac_rotzoom, i32 (i32*, i32, i32*, %struct.MotionModel*, i32)* @ransac_affine], align 8
@switch.table.av1_get_ransac_double_prec_type = private unnamed_addr constant [3 x i32 (double*, i32, i32*, %struct.MotionModel*, i32)*] [i32 (double*, i32, i32*, %struct.MotionModel*, i32)* @ransac_translation_double_prec, i32 (double*, i32, i32*, %struct.MotionModel*, i32)* @ransac_rotzoom_double_prec, i32 (double*, i32, i32*, %struct.MotionModel*, i32)* @ransac_affine_double_prec], align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 (i32*, i32, i32*, %struct.MotionModel*, i32)* @av1_get_ransac_type(i8 zeroext) local_unnamed_addr #0 {
  %2 = add i8 %0, -1
  %3 = icmp ult i8 %2, 3
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = sext i8 %2 to i64
  %6 = getelementptr inbounds [3 x i32 (i32*, i32, i32*, %struct.MotionModel*, i32)*], [3 x i32 (i32*, i32, i32*, %struct.MotionModel*, i32)*]* @switch.table.av1_get_ransac_type, i64 0, i64 %5
  %7 = load i32 (i32*, i32, i32*, %struct.MotionModel*, i32)*, i32 (i32*, i32, i32*, %struct.MotionModel*, i32)** %6, align 8
  ret i32 (i32*, i32, i32*, %struct.MotionModel*, i32)* %7

8:                                                ; preds = %1
  ret i32 (i32*, i32, i32*, %struct.MotionModel*, i32)* null
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ransac_affine(i32* nocapture readonly, i32, i32* nocapture, %struct.MotionModel*, i32) #1 {
  %6 = tail call fastcc i32 @ransac(i32* %0, i32 %1, i32* %2, %struct.MotionModel* %3, i32 %4, i32 (double*)* nonnull @is_degenerate_affine, i32 (i32, double*, double*, double*)* nonnull @find_affine, void (double*, double*, double*, i32, i32, i32)* nonnull @project_points_double_affine)
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ransac_rotzoom(i32* nocapture readonly, i32, i32* nocapture, %struct.MotionModel*, i32) #1 {
  %6 = tail call fastcc i32 @ransac(i32* %0, i32 %1, i32* %2, %struct.MotionModel* %3, i32 %4, i32 (double*)* nonnull @is_degenerate_affine, i32 (i32, double*, double*, double*)* nonnull @find_rotzoom, void (double*, double*, double*, i32, i32, i32)* nonnull @project_points_double_rotzoom)
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ransac_translation(i32* nocapture readonly, i32, i32* nocapture, %struct.MotionModel*, i32) #1 {
  %6 = tail call fastcc i32 @ransac(i32* %0, i32 %1, i32* %2, %struct.MotionModel* %3, i32 %4, i32 (double*)* nonnull @is_degenerate_translation, i32 (i32, double*, double*, double*)* nonnull @find_translation, void (double*, double*, double*, i32, i32, i32)* nonnull @project_points_double_translation)
  ret i32 %6
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 (double*, i32, i32*, %struct.MotionModel*, i32)* @av1_get_ransac_double_prec_type(i8 zeroext) local_unnamed_addr #0 {
  %2 = add i8 %0, -1
  %3 = icmp ult i8 %2, 3
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = sext i8 %2 to i64
  %6 = getelementptr inbounds [3 x i32 (double*, i32, i32*, %struct.MotionModel*, i32)*], [3 x i32 (double*, i32, i32*, %struct.MotionModel*, i32)*]* @switch.table.av1_get_ransac_double_prec_type, i64 0, i64 %5
  %7 = load i32 (double*, i32, i32*, %struct.MotionModel*, i32)*, i32 (double*, i32, i32*, %struct.MotionModel*, i32)** %6, align 8
  ret i32 (double*, i32, i32*, %struct.MotionModel*, i32)* %7

8:                                                ; preds = %1
  ret i32 (double*, i32, i32*, %struct.MotionModel*, i32)* null
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ransac_affine_double_prec(double* nocapture readonly, i32, i32* nocapture, %struct.MotionModel*, i32) #1 {
  %6 = tail call fastcc i32 @ransac_double_prec(double* %0, i32 %1, i32* %2, %struct.MotionModel* %3, i32 %4, i32 (double*)* nonnull @is_degenerate_affine, i32 (i32, double*, double*, double*)* nonnull @find_affine, void (double*, double*, double*, i32, i32, i32)* nonnull @project_points_double_affine)
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ransac_rotzoom_double_prec(double* nocapture readonly, i32, i32* nocapture, %struct.MotionModel*, i32) #1 {
  %6 = tail call fastcc i32 @ransac_double_prec(double* %0, i32 %1, i32* %2, %struct.MotionModel* %3, i32 %4, i32 (double*)* nonnull @is_degenerate_affine, i32 (i32, double*, double*, double*)* nonnull @find_rotzoom, void (double*, double*, double*, i32, i32, i32)* nonnull @project_points_double_rotzoom)
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ransac_translation_double_prec(double* nocapture readonly, i32, i32* nocapture, %struct.MotionModel*, i32) #1 {
  %6 = tail call fastcc i32 @ransac_double_prec(double* %0, i32 %1, i32* %2, %struct.MotionModel* %3, i32 %4, i32 (double*)* nonnull @is_degenerate_translation, i32 (i32, double*, double*, double*)* nonnull @find_translation, void (double*, double*, double*, i32, i32, i32)* nonnull @project_points_double_translation)
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @ransac(i32* nocapture readonly, i32, i32* nocapture, %struct.MotionModel*, i32, i32 (double*)* nocapture, i32 (i32, double*, double*, double*)* nocapture, void (double*, double*, double*, i32, i32, i32)* nocapture) unnamed_addr #1 {
  %9 = alloca [9 x double], align 16
  %10 = bitcast [9 x double]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %10) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 72, i1 false)
  %11 = icmp sgt i32 %4, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %8
  %13 = bitcast i32* %2 to i8*
  %14 = zext i32 %4 to i64
  %15 = shl nuw nsw i64 %14, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 0, i64 %15, i1 false)
  br label %16

16:                                               ; preds = %12, %8
  %17 = icmp slt i32 %1, 15
  br i1 %17, label %538, label %18

18:                                               ; preds = %16
  %19 = sext i32 %1 to i64
  %20 = shl nsw i64 %19, 4
  %21 = tail call i8* @aom_malloc(i64 %20) #11
  %22 = bitcast i8* %21 to double*
  %23 = tail call i8* @aom_malloc(i64 %20) #11
  %24 = bitcast i8* %23 to double*
  %25 = tail call i8* @aom_malloc(i64 %20) #11
  %26 = bitcast i8* %25 to double*
  %27 = tail call i8* @aom_malloc(i64 %20) #11
  %28 = bitcast i8* %27 to double*
  %29 = tail call i8* @aom_malloc(i64 %20) #11
  %30 = bitcast i8* %29 to double*
  %31 = sext i32 %4 to i64
  %32 = mul nsw i64 %31, 24
  %33 = tail call i8* @aom_malloc(i64 %32) #11
  %34 = bitcast i8* %33 to %struct.RANSAC_MOTION*
  %35 = shl nsw i64 %19, 2
  %36 = tail call i8* @aom_malloc(i64 %35) #11
  br i1 %11, label %37, label %49

37:                                               ; preds = %18
  %38 = zext i32 %4 to i64
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i64 [ 0, %37 ], [ %46, %39 ]
  %41 = phi i8* [ %36, %37 ], [ %47, %39 ]
  %42 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %40, i32 2
  %43 = bitcast i32** %42 to i8**
  store i8* %41, i8** %43, align 8
  %44 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %40, i32 0
  store i32 0, i32* %44, align 8
  %45 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %40, i32 1
  store double 1.000000e+12, double* %45, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %41, i8 0, i64 %35, i1 false) #11
  %46 = add nuw nsw i64 %40, 1
  %47 = tail call i8* @aom_malloc(i64 %35) #11
  %48 = icmp eq i64 %46, %38
  br i1 %48, label %49, label %39

49:                                               ; preds = %39, %18
  %50 = phi i8* [ %36, %18 ], [ %47, %39 ]
  %51 = bitcast i8* %50 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %50, i8 0, i64 %35, i1 false) #11
  %52 = icmp ne i8* %21, null
  %53 = icmp ne i8* %23, null
  %54 = and i1 %52, %53
  %55 = icmp ne i8* %25, null
  %56 = and i1 %54, %55
  %57 = icmp ne i8* %27, null
  %58 = and i1 %56, %57
  %59 = icmp ne i8* %29, null
  %60 = and i1 %58, %59
  %61 = icmp ne i8* %33, null
  %62 = and i1 %60, %61
  %63 = xor i1 %62, true
  %64 = icmp eq i8* %50, null
  %65 = or i1 %64, %63
  br i1 %65, label %526, label %66

66:                                               ; preds = %49
  %67 = icmp sgt i32 %1, 0
  br i1 %67, label %68, label %92

68:                                               ; preds = %66
  %69 = and i32 %1, 1
  %70 = icmp eq i32 %1, 1
  br i1 %70, label %73, label %71

71:                                               ; preds = %68
  %72 = sub i32 %1, %69
  br label %120

73:                                               ; preds = %120, %68
  %74 = phi i32* [ %0, %68 ], [ %153, %120 ]
  %75 = phi double* [ %28, %68 ], [ %156, %120 ]
  %76 = phi double* [ %26, %68 ], [ %148, %120 ]
  %77 = icmp eq i32 %69, 0
  br i1 %77, label %92, label %78

78:                                               ; preds = %73
  %79 = getelementptr inbounds i32, i32* %74, i64 1
  %80 = load i32, i32* %74, align 4
  %81 = sitofp i32 %80 to double
  %82 = getelementptr inbounds double, double* %76, i64 1
  store double %81, double* %76, align 8
  %83 = getelementptr inbounds i32, i32* %74, i64 2
  %84 = load i32, i32* %79, align 4
  %85 = sitofp i32 %84 to double
  store double %85, double* %82, align 8
  %86 = getelementptr inbounds i32, i32* %74, i64 3
  %87 = load i32, i32* %83, align 4
  %88 = sitofp i32 %87 to double
  %89 = getelementptr inbounds double, double* %75, i64 1
  store double %88, double* %75, align 8
  %90 = load i32, i32* %86, align 4
  %91 = sitofp i32 %90 to double
  store double %91, double* %89, align 8
  br label %92

92:                                               ; preds = %78, %73, %66
  %93 = icmp slt i32 %1, 3
  %94 = add nsw i32 %1, -1
  %95 = getelementptr inbounds [9 x double], [9 x double]* %9, i64 0, i64 0
  %96 = bitcast i8* %21 to i64*
  %97 = getelementptr inbounds i8, i8* %21, i64 8
  %98 = bitcast i8* %97 to i64*
  %99 = getelementptr inbounds i8, i8* %21, i64 16
  %100 = bitcast i8* %99 to i64*
  %101 = getelementptr inbounds i8, i8* %21, i64 24
  %102 = bitcast i8* %101 to i64*
  %103 = getelementptr inbounds i8, i8* %21, i64 32
  %104 = bitcast i8* %103 to i64*
  %105 = getelementptr inbounds i8, i8* %21, i64 40
  %106 = bitcast i8* %105 to i64*
  %107 = bitcast i8* %23 to i64*
  %108 = getelementptr inbounds i8, i8* %23, i64 8
  %109 = bitcast i8* %108 to i64*
  %110 = getelementptr inbounds i8, i8* %23, i64 16
  %111 = bitcast i8* %110 to i64*
  %112 = getelementptr inbounds i8, i8* %23, i64 24
  %113 = bitcast i8* %112 to i64*
  %114 = getelementptr inbounds i8, i8* %23, i64 32
  %115 = bitcast i8* %114 to i64*
  %116 = getelementptr inbounds i8, i8* %23, i64 40
  %117 = bitcast i8* %116 to i64*
  %118 = zext i32 %1 to i64
  %119 = zext i32 %4 to i64
  br label %159

120:                                              ; preds = %120, %71
  %121 = phi i32* [ %0, %71 ], [ %153, %120 ]
  %122 = phi double* [ %28, %71 ], [ %156, %120 ]
  %123 = phi double* [ %26, %71 ], [ %148, %120 ]
  %124 = phi i32 [ %72, %71 ], [ %157, %120 ]
  %125 = getelementptr inbounds i32, i32* %121, i64 1
  %126 = load i32, i32* %121, align 4
  %127 = sitofp i32 %126 to double
  %128 = getelementptr inbounds double, double* %123, i64 1
  store double %127, double* %123, align 8
  %129 = getelementptr inbounds i32, i32* %121, i64 2
  %130 = load i32, i32* %125, align 4
  %131 = sitofp i32 %130 to double
  %132 = getelementptr inbounds double, double* %123, i64 2
  store double %131, double* %128, align 8
  %133 = getelementptr inbounds i32, i32* %121, i64 3
  %134 = load i32, i32* %129, align 4
  %135 = sitofp i32 %134 to double
  %136 = getelementptr inbounds double, double* %122, i64 1
  store double %135, double* %122, align 8
  %137 = getelementptr inbounds i32, i32* %121, i64 4
  %138 = load i32, i32* %133, align 4
  %139 = sitofp i32 %138 to double
  %140 = getelementptr inbounds double, double* %122, i64 2
  store double %139, double* %136, align 8
  %141 = getelementptr inbounds i32, i32* %121, i64 5
  %142 = load i32, i32* %137, align 4
  %143 = sitofp i32 %142 to double
  %144 = getelementptr inbounds double, double* %123, i64 3
  store double %143, double* %132, align 8
  %145 = getelementptr inbounds i32, i32* %121, i64 6
  %146 = load i32, i32* %141, align 4
  %147 = sitofp i32 %146 to double
  %148 = getelementptr inbounds double, double* %123, i64 4
  store double %147, double* %144, align 8
  %149 = getelementptr inbounds i32, i32* %121, i64 7
  %150 = load i32, i32* %145, align 4
  %151 = sitofp i32 %150 to double
  %152 = getelementptr inbounds double, double* %122, i64 3
  store double %151, double* %140, align 8
  %153 = getelementptr inbounds i32, i32* %121, i64 8
  %154 = load i32, i32* %149, align 4
  %155 = sitofp i32 %154 to double
  %156 = getelementptr inbounds double, double* %122, i64 4
  store double %155, double* %152, align 8
  %157 = add i32 %124, -2
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %73, label %120

159:                                              ; preds = %351, %92
  %160 = phi i32 [ 0, %92 ], [ %353, %351 ]
  %161 = phi %struct.RANSAC_MOTION* [ %34, %92 ], [ %352, %351 ]
  %162 = phi i32 [ %1, %92 ], [ %164, %351 ]
  call void @llvm.memset.p0i8.i64(i8* align 4 %50, i8 0, i64 %35, i1 false) #11
  br label %163

163:                                              ; preds = %214, %159
  %164 = phi i32 [ %162, %159 ], [ %197, %214 ]
  %165 = phi i32 [ 1, %159 ], [ %265, %214 ]
  %166 = phi i32 [ 0, %159 ], [ %264, %214 ]
  %167 = icmp eq i32 %165, 0
  br i1 %167, label %267, label %168

168:                                              ; preds = %163
  %169 = mul i32 %164, 1103515245
  %170 = add i32 %169, 12345
  %171 = lshr i32 %170, 16
  %172 = and i32 %171, 32767
  %173 = urem i32 %172, %1
  br i1 %93, label %526, label %174

174:                                              ; preds = %168
  %175 = icmp eq i32 %173, %94
  %176 = add nuw nsw i32 %173, 1
  %177 = select i1 %175, i32 0, i32 %176
  %178 = mul i32 %170, 1103515245
  %179 = add i32 %178, 12345
  %180 = lshr i32 %179, 16
  %181 = and i32 %180, 32767
  %182 = urem i32 %181, %1
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %194, label %184

184:                                              ; preds = %174, %184
  %185 = phi i32 [ %192, %184 ], [ %182, %174 ]
  %186 = phi i32 [ %189, %184 ], [ %177, %174 ]
  %187 = icmp eq i32 %186, %94
  %188 = add nsw i32 %186, 1
  %189 = select i1 %187, i32 0, i32 %188
  %190 = icmp ne i32 %173, %189
  %191 = zext i1 %190 to i32
  %192 = sub nuw i32 %185, %191
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %194, label %184

194:                                              ; preds = %184, %174
  %195 = phi i32 [ %177, %174 ], [ %189, %184 ]
  %196 = mul i32 %179, 1103515245
  %197 = add i32 %196, 12345
  %198 = lshr i32 %197, 16
  %199 = and i32 %198, 32767
  %200 = urem i32 %199, %1
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %214, label %202

202:                                              ; preds = %194, %202
  %203 = phi i32 [ %212, %202 ], [ %200, %194 ]
  %204 = phi i32 [ %207, %202 ], [ %195, %194 ]
  %205 = icmp eq i32 %204, %94
  %206 = add nsw i32 %204, 1
  %207 = select i1 %205, i32 0, i32 %206
  %208 = icmp ne i32 %173, %207
  %209 = icmp ne i32 %195, %207
  %210 = and i1 %209, %208
  %211 = zext i1 %210 to i32
  %212 = sub nuw i32 %203, %211
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %214, label %202

214:                                              ; preds = %202, %194
  %215 = phi i32 [ %195, %194 ], [ %207, %202 ]
  %216 = shl nuw nsw i32 %173, 1
  %217 = zext i32 %216 to i64
  %218 = getelementptr inbounds double, double* %26, i64 %217
  %219 = bitcast double* %218 to i64*
  %220 = load i64, i64* %219, align 8
  store i64 %220, i64* %96, align 8
  %221 = or i32 %216, 1
  %222 = zext i32 %221 to i64
  %223 = getelementptr inbounds double, double* %26, i64 %222
  %224 = bitcast double* %223 to i64*
  %225 = load i64, i64* %224, align 8
  store i64 %225, i64* %98, align 8
  %226 = shl nsw i32 %195, 1
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds double, double* %26, i64 %227
  %229 = bitcast double* %228 to i64*
  %230 = load i64, i64* %229, align 8
  store i64 %230, i64* %100, align 8
  %231 = or i32 %226, 1
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds double, double* %26, i64 %232
  %234 = bitcast double* %233 to i64*
  %235 = load i64, i64* %234, align 8
  store i64 %235, i64* %102, align 8
  %236 = shl nsw i32 %215, 1
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds double, double* %26, i64 %237
  %239 = bitcast double* %238 to i64*
  %240 = load i64, i64* %239, align 8
  store i64 %240, i64* %104, align 8
  %241 = or i32 %236, 1
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds double, double* %26, i64 %242
  %244 = bitcast double* %243 to i64*
  %245 = load i64, i64* %244, align 8
  store i64 %245, i64* %106, align 8
  %246 = getelementptr inbounds double, double* %28, i64 %217
  %247 = bitcast double* %246 to i64*
  %248 = load i64, i64* %247, align 8
  store i64 %248, i64* %107, align 8
  %249 = getelementptr inbounds double, double* %28, i64 %222
  %250 = bitcast double* %249 to i64*
  %251 = load i64, i64* %250, align 8
  store i64 %251, i64* %109, align 8
  %252 = getelementptr inbounds double, double* %28, i64 %227
  %253 = bitcast double* %252 to i64*
  %254 = load i64, i64* %253, align 8
  store i64 %254, i64* %111, align 8
  %255 = getelementptr inbounds double, double* %28, i64 %232
  %256 = bitcast double* %255 to i64*
  %257 = load i64, i64* %256, align 8
  store i64 %257, i64* %113, align 8
  %258 = getelementptr inbounds double, double* %28, i64 %237
  %259 = bitcast double* %258 to i64*
  %260 = load i64, i64* %259, align 8
  store i64 %260, i64* %115, align 8
  %261 = getelementptr inbounds double, double* %28, i64 %242
  %262 = bitcast double* %261 to i64*
  %263 = load i64, i64* %262, align 8
  store i64 %263, i64* %117, align 8
  %264 = add nuw nsw i32 %166, 1
  %265 = call i32 %5(double* nonnull %22) #11, !callees !2
  %266 = icmp eq i32 %264, 11
  br i1 %266, label %526, label %163

267:                                              ; preds = %163
  %268 = call i32 %6(i32 3, double* nonnull %22, double* nonnull %24, double* nonnull %95) #11, !callees !3
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %270, label %351

270:                                              ; preds = %267
  call void %7(double* nonnull %95, double* nonnull %26, double* nonnull %30, i32 %1, i32 2, i32 2) #11, !callees !4
  br i1 %67, label %271, label %351

271:                                              ; preds = %270, %298
  %272 = phi i64 [ %302, %298 ], [ 0, %270 ]
  %273 = phi double [ %301, %298 ], [ 0.000000e+00, %270 ]
  %274 = phi double [ %300, %298 ], [ 0.000000e+00, %270 ]
  %275 = phi i32 [ %299, %298 ], [ 0, %270 ]
  %276 = shl nuw nsw i64 %272, 1
  %277 = getelementptr inbounds double, double* %30, i64 %276
  %278 = getelementptr inbounds double, double* %28, i64 %276
  %279 = bitcast double* %277 to <2 x double>*
  %280 = load <2 x double>, <2 x double>* %279, align 8
  %281 = bitcast double* %278 to <2 x double>*
  %282 = load <2 x double>, <2 x double>* %281, align 8
  %283 = fsub <2 x double> %280, %282
  %284 = fmul <2 x double> %283, %283
  %285 = extractelement <2 x double> %284, i32 0
  %286 = extractelement <2 x double> %284, i32 1
  %287 = fadd double %285, %286
  %288 = call double @sqrt(double %287) #11
  %289 = fcmp olt double %288, 1.250000e+00
  br i1 %289, label %290, label %298

290:                                              ; preds = %271
  %291 = add nsw i32 %275, 1
  %292 = sext i32 %275 to i64
  %293 = getelementptr inbounds i32, i32* %51, i64 %292
  %294 = trunc i64 %272 to i32
  store i32 %294, i32* %293, align 4
  %295 = fadd double %274, %288
  %296 = fmul double %288, %288
  %297 = fadd double %273, %296
  br label %298

298:                                              ; preds = %290, %271
  %299 = phi i32 [ %291, %290 ], [ %275, %271 ]
  %300 = phi double [ %295, %290 ], [ %274, %271 ]
  %301 = phi double [ %297, %290 ], [ %273, %271 ]
  %302 = add nuw nsw i64 %272, 1
  %303 = icmp eq i64 %302, %118
  br i1 %303, label %304, label %271

304:                                              ; preds = %298
  %305 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %161, i64 0, i32 0
  %306 = load i32, i32* %305, align 8
  %307 = icmp sge i32 %299, %306
  %308 = icmp sgt i32 %299, 1
  %309 = and i1 %308, %307
  br i1 %309, label %310, label %351

310:                                              ; preds = %304
  %311 = sitofp i32 %299 to double
  %312 = fdiv double %300, %311
  %313 = fadd double %311, -1.000000e+00
  %314 = fdiv double %301, %313
  %315 = fmul double %312, %312
  %316 = fmul double %315, %311
  %317 = fdiv double %316, %313
  %318 = fsub double %314, %317
  %319 = icmp sgt i32 %299, %306
  br i1 %319, label %324, label %320

320:                                              ; preds = %310
  %321 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %161, i64 0, i32 1
  %322 = load double, double* %321, align 8
  %323 = fcmp olt double %318, %322
  br i1 %323, label %324, label %351

324:                                              ; preds = %310, %320
  store i32 %299, i32* %305, align 8
  %325 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %161, i64 0, i32 1
  store double %318, double* %325, align 8
  %326 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %161, i64 0, i32 2
  %327 = bitcast i32** %326 to i8**
  %328 = load i8*, i8** %327, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %328, i8* align 4 %50, i64 %35, i1 false)
  br i1 %11, label %329, label %351

329:                                              ; preds = %324, %347
  %330 = phi i64 [ %349, %347 ], [ 0, %324 ]
  %331 = phi %struct.RANSAC_MOTION* [ %348, %347 ], [ %161, %324 ]
  %332 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %330
  %333 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %331, i64 0, i32 0
  %334 = load i32, i32* %333, align 8
  %335 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %332, i64 0, i32 0
  %336 = load i32, i32* %335, align 8
  %337 = icmp sgt i32 %334, %336
  br i1 %337, label %347, label %338

338:                                              ; preds = %329
  %339 = icmp slt i32 %334, %336
  br i1 %339, label %347, label %340

340:                                              ; preds = %338
  %341 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %331, i64 0, i32 1
  %342 = load double, double* %341, align 8
  %343 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %330, i32 1
  %344 = load double, double* %343, align 8
  %345 = fcmp olt double %342, %344
  br i1 %345, label %347, label %346

346:                                              ; preds = %340
  br label %347

347:                                              ; preds = %346, %338, %340, %329
  %348 = phi %struct.RANSAC_MOTION* [ %332, %329 ], [ %332, %340 ], [ %331, %338 ], [ %331, %346 ]
  %349 = add nuw nsw i64 %330, 1
  %350 = icmp eq i64 %349, %119
  br i1 %350, label %351, label %329

351:                                              ; preds = %347, %270, %324, %304, %320, %267
  %352 = phi %struct.RANSAC_MOTION* [ %161, %267 ], [ %161, %304 ], [ %161, %320 ], [ %161, %324 ], [ %161, %270 ], [ %348, %347 ]
  %353 = add nuw nsw i32 %160, 1
  %354 = icmp eq i32 %353, 20
  br i1 %354, label %355, label %159

355:                                              ; preds = %351
  call void @qsort(i8* nonnull %33, i64 %31, i64 24, i32 (i8*, i8*)* nonnull @compare_motions) #11
  br i1 %11, label %356, label %526

356:                                              ; preds = %355
  %357 = zext i32 %4 to i64
  br label %358

358:                                              ; preds = %523, %356
  %359 = phi i64 [ 0, %356 ], [ %524, %523 ]
  %360 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %359, i32 0
  %361 = load i32, i32* %360, align 8
  %362 = icmp sgt i32 %361, 2
  br i1 %362, label %363, label %523

363:                                              ; preds = %358
  %364 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %359, i32 2
  %365 = load i32*, i32** %364, align 8
  %366 = zext i32 %361 to i64
  %367 = and i64 %366, 1
  %368 = sub nsw i64 %366, %367
  br label %369

369:                                              ; preds = %369, %363
  %370 = phi i64 [ 0, %363 ], [ %409, %369 ]
  %371 = phi i64 [ %368, %363 ], [ %410, %369 ]
  %372 = getelementptr inbounds i32, i32* %365, i64 %370
  %373 = load i32, i32* %372, align 4
  %374 = shl nsw i32 %373, 1
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds double, double* %26, i64 %375
  %377 = bitcast double* %376 to i64*
  %378 = load i64, i64* %377, align 8
  %379 = shl nuw nsw i64 %370, 1
  %380 = getelementptr inbounds double, double* %22, i64 %379
  %381 = bitcast double* %380 to i64*
  store i64 %378, i64* %381, align 8
  %382 = or i32 %374, 1
  %383 = sext i32 %382 to i64
  %384 = getelementptr inbounds double, double* %26, i64 %383
  %385 = bitcast double* %384 to i64*
  %386 = load i64, i64* %385, align 8
  %387 = or i64 %379, 1
  %388 = getelementptr inbounds double, double* %22, i64 %387
  %389 = bitcast double* %388 to i64*
  store i64 %386, i64* %389, align 8
  %390 = or i64 %370, 1
  %391 = getelementptr inbounds i32, i32* %365, i64 %390
  %392 = load i32, i32* %391, align 4
  %393 = shl nsw i32 %392, 1
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds double, double* %26, i64 %394
  %396 = bitcast double* %395 to i64*
  %397 = load i64, i64* %396, align 8
  %398 = shl nuw nsw i64 %390, 1
  %399 = getelementptr inbounds double, double* %22, i64 %398
  %400 = bitcast double* %399 to i64*
  store i64 %397, i64* %400, align 8
  %401 = or i32 %393, 1
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds double, double* %26, i64 %402
  %404 = bitcast double* %403 to i64*
  %405 = load i64, i64* %404, align 8
  %406 = or i64 %398, 1
  %407 = getelementptr inbounds double, double* %22, i64 %406
  %408 = bitcast double* %407 to i64*
  store i64 %405, i64* %408, align 8
  %409 = add nuw nsw i64 %370, 2
  %410 = add i64 %371, -2
  %411 = icmp eq i64 %410, 0
  br i1 %411, label %412, label %369

412:                                              ; preds = %369
  %413 = icmp eq i64 %367, 0
  br i1 %413, label %433, label %414

414:                                              ; preds = %412
  %415 = getelementptr inbounds i32, i32* %365, i64 %409
  %416 = load i32, i32* %415, align 4
  %417 = shl nsw i32 %416, 1
  %418 = sext i32 %417 to i64
  %419 = getelementptr inbounds double, double* %26, i64 %418
  %420 = bitcast double* %419 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = shl nuw nsw i64 %409, 1
  %423 = getelementptr inbounds double, double* %22, i64 %422
  %424 = bitcast double* %423 to i64*
  store i64 %421, i64* %424, align 8
  %425 = or i32 %417, 1
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds double, double* %26, i64 %426
  %428 = bitcast double* %427 to i64*
  %429 = load i64, i64* %428, align 8
  %430 = or i64 %422, 1
  %431 = getelementptr inbounds double, double* %22, i64 %430
  %432 = bitcast double* %431 to i64*
  store i64 %429, i64* %432, align 8
  br label %433

433:                                              ; preds = %412, %414
  %434 = load i32*, i32** %364, align 8
  %435 = load i32, i32* %360, align 8
  %436 = icmp sgt i32 %435, 0
  br i1 %436, label %437, label %510

437:                                              ; preds = %433
  %438 = zext i32 %435 to i64
  %439 = and i64 %438, 1
  %440 = icmp eq i32 %435, 1
  br i1 %440, label %486, label %441

441:                                              ; preds = %437
  %442 = sub nsw i64 %438, %439
  br label %443

443:                                              ; preds = %443, %441
  %444 = phi i64 [ 0, %441 ], [ %483, %443 ]
  %445 = phi i64 [ %442, %441 ], [ %484, %443 ]
  %446 = getelementptr inbounds i32, i32* %434, i64 %444
  %447 = load i32, i32* %446, align 4
  %448 = shl nsw i32 %447, 1
  %449 = sext i32 %448 to i64
  %450 = getelementptr inbounds double, double* %28, i64 %449
  %451 = bitcast double* %450 to i64*
  %452 = load i64, i64* %451, align 8
  %453 = shl nuw nsw i64 %444, 1
  %454 = getelementptr inbounds double, double* %24, i64 %453
  %455 = bitcast double* %454 to i64*
  store i64 %452, i64* %455, align 8
  %456 = or i32 %448, 1
  %457 = sext i32 %456 to i64
  %458 = getelementptr inbounds double, double* %28, i64 %457
  %459 = bitcast double* %458 to i64*
  %460 = load i64, i64* %459, align 8
  %461 = or i64 %453, 1
  %462 = getelementptr inbounds double, double* %24, i64 %461
  %463 = bitcast double* %462 to i64*
  store i64 %460, i64* %463, align 8
  %464 = or i64 %444, 1
  %465 = getelementptr inbounds i32, i32* %434, i64 %464
  %466 = load i32, i32* %465, align 4
  %467 = shl nsw i32 %466, 1
  %468 = sext i32 %467 to i64
  %469 = getelementptr inbounds double, double* %28, i64 %468
  %470 = bitcast double* %469 to i64*
  %471 = load i64, i64* %470, align 8
  %472 = shl nuw nsw i64 %464, 1
  %473 = getelementptr inbounds double, double* %24, i64 %472
  %474 = bitcast double* %473 to i64*
  store i64 %471, i64* %474, align 8
  %475 = or i32 %467, 1
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds double, double* %28, i64 %476
  %478 = bitcast double* %477 to i64*
  %479 = load i64, i64* %478, align 8
  %480 = or i64 %472, 1
  %481 = getelementptr inbounds double, double* %24, i64 %480
  %482 = bitcast double* %481 to i64*
  store i64 %479, i64* %482, align 8
  %483 = add nuw nsw i64 %444, 2
  %484 = add i64 %445, -2
  %485 = icmp eq i64 %484, 0
  br i1 %485, label %486, label %443

486:                                              ; preds = %443, %437
  %487 = phi i64 [ 0, %437 ], [ %483, %443 ]
  %488 = icmp eq i64 %439, 0
  br i1 %488, label %508, label %489

489:                                              ; preds = %486
  %490 = getelementptr inbounds i32, i32* %434, i64 %487
  %491 = load i32, i32* %490, align 4
  %492 = shl nsw i32 %491, 1
  %493 = sext i32 %492 to i64
  %494 = getelementptr inbounds double, double* %28, i64 %493
  %495 = bitcast double* %494 to i64*
  %496 = load i64, i64* %495, align 8
  %497 = shl nuw nsw i64 %487, 1
  %498 = getelementptr inbounds double, double* %24, i64 %497
  %499 = bitcast double* %498 to i64*
  store i64 %496, i64* %499, align 8
  %500 = or i32 %492, 1
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds double, double* %28, i64 %501
  %503 = bitcast double* %502 to i64*
  %504 = load i64, i64* %503, align 8
  %505 = or i64 %497, 1
  %506 = getelementptr inbounds double, double* %24, i64 %505
  %507 = bitcast double* %506 to i64*
  store i64 %504, i64* %507, align 8
  br label %508

508:                                              ; preds = %486, %489
  %509 = load i32, i32* %360, align 8
  br label %510

510:                                              ; preds = %508, %433
  %511 = phi i32 [ %509, %508 ], [ %435, %433 ]
  %512 = getelementptr inbounds %struct.MotionModel, %struct.MotionModel* %3, i64 %359, i32 0, i64 0
  %513 = call i32 %6(i32 %511, double* nonnull %22, double* nonnull %24, double* %512) #11, !callees !3
  %514 = load i32, i32* %360, align 8
  %515 = getelementptr inbounds %struct.MotionModel, %struct.MotionModel* %3, i64 %359, i32 2
  store i32 %514, i32* %515, align 8
  %516 = getelementptr inbounds %struct.MotionModel, %struct.MotionModel* %3, i64 %359, i32 1
  %517 = bitcast i32** %516 to i8**
  %518 = load i8*, i8** %517, align 8
  %519 = bitcast i32** %364 to i8**
  %520 = load i8*, i8** %519, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %518, i8* align 4 %520, i64 %35, i1 false)
  %521 = load i32, i32* %360, align 8
  %522 = getelementptr inbounds i32, i32* %2, i64 %359
  store i32 %521, i32* %522, align 4
  br label %523

523:                                              ; preds = %358, %510
  %524 = add nuw nsw i64 %359, 1
  %525 = icmp eq i64 %524, %357
  br i1 %525, label %526, label %358

526:                                              ; preds = %168, %214, %523, %355, %49
  %527 = phi i32 [ 1, %49 ], [ 0, %355 ], [ 0, %523 ], [ 1, %214 ], [ 1, %168 ]
  call void @aom_free(i8* %21) #11
  call void @aom_free(i8* %23) #11
  call void @aom_free(i8* %25) #11
  call void @aom_free(i8* %27) #11
  call void @aom_free(i8* %29) #11
  call void @aom_free(i8* %50) #11
  br i1 %11, label %528, label %537

528:                                              ; preds = %526
  %529 = zext i32 %4 to i64
  br label %530

530:                                              ; preds = %530, %528
  %531 = phi i64 [ 0, %528 ], [ %535, %530 ]
  %532 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %531, i32 2
  %533 = bitcast i32** %532 to i8**
  %534 = load i8*, i8** %533, align 8
  call void @aom_free(i8* %534) #11
  %535 = add nuw nsw i64 %531, 1
  %536 = icmp eq i64 %535, %529
  br i1 %536, label %537, label %530

537:                                              ; preds = %530, %526
  call void @aom_free(i8* %33) #11
  br label %538

538:                                              ; preds = %16, %537
  %539 = phi i32 [ %527, %537 ], [ 1, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %10) #11
  ret i32 %539
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @is_degenerate_affine(double* nocapture readonly) #2 {
  %2 = getelementptr inbounds double, double* %0, i64 2
  %3 = getelementptr inbounds double, double* %0, i64 4
  %4 = bitcast double* %0 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 8
  %6 = bitcast double* %2 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = fsub <2 x double> %7, %5
  %9 = bitcast double* %3 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = fsub <2 x double> %10, %5
  %12 = shufflevector <2 x double> %11, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %13 = fmul <2 x double> %8, %12
  %14 = extractelement <2 x double> %13, i32 0
  %15 = extractelement <2 x double> %13, i32 1
  %16 = fsub double %14, %15
  %17 = tail call double @llvm.fabs.f64(double %16) #11
  %18 = fcmp olt double %17, 1.000000e-03
  %19 = zext i1 %18 to i32
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @find_affine(i32, double* nocapture, double* nocapture, double* nocapture) #1 {
  %5 = shl nsw i32 %0, 1
  %6 = mul nsw i32 %0, 14
  %7 = add nsw i32 %6, 42
  %8 = sext i32 %7 to i64
  %9 = shl nsw i64 %8, 3
  %10 = tail call i8* @aom_malloc(i64 %9) #11
  %11 = bitcast i8* %10 to double*
  %12 = icmp eq i8* %10, null
  br i1 %12, label %599, label %13

13:                                               ; preds = %4
  %14 = mul nsw i32 %0, 12
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds double, double* %11, i64 %15
  %17 = sext i32 %5 to i64
  %18 = getelementptr inbounds double, double* %16, i64 %17
  %19 = icmp sgt i32 %0, 0
  br i1 %19, label %20, label %26

20:                                               ; preds = %13
  %21 = add i32 %0, -1
  %22 = and i32 %0, 3
  %23 = icmp ult i32 %21, 3
  br i1 %23, label %57, label %24

24:                                               ; preds = %20
  %25 = sub i32 %0, %22
  br label %31

26:                                               ; preds = %13
  %27 = sitofp i32 %0 to double
  %28 = fdiv double 0.000000e+00, %27
  %29 = insertelement <2 x double> undef, double %28, i32 0
  %30 = shufflevector <2 x double> %29, <2 x double> undef, <2 x i32> zeroinitializer
  br label %130

31:                                               ; preds = %31, %24
  %32 = phi double* [ %1, %24 ], [ %54, %31 ]
  %33 = phi <2 x double> [ zeroinitializer, %24 ], [ %53, %31 ]
  %34 = phi i32 [ %25, %24 ], [ %55, %31 ]
  %35 = bitcast double* %32 to <2 x double>*
  %36 = load <2 x double>, <2 x double>* %35, align 8
  %37 = shufflevector <2 x double> %36, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %38 = fadd <2 x double> %33, %37
  %39 = getelementptr inbounds double, double* %32, i64 2
  %40 = bitcast double* %39 to <2 x double>*
  %41 = load <2 x double>, <2 x double>* %40, align 8
  %42 = shufflevector <2 x double> %41, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %43 = fadd <2 x double> %38, %42
  %44 = getelementptr inbounds double, double* %32, i64 4
  %45 = bitcast double* %44 to <2 x double>*
  %46 = load <2 x double>, <2 x double>* %45, align 8
  %47 = shufflevector <2 x double> %46, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %48 = fadd <2 x double> %43, %47
  %49 = getelementptr inbounds double, double* %32, i64 6
  %50 = bitcast double* %49 to <2 x double>*
  %51 = load <2 x double>, <2 x double>* %50, align 8
  %52 = shufflevector <2 x double> %51, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %53 = fadd <2 x double> %48, %52
  %54 = getelementptr inbounds double, double* %32, i64 8
  %55 = add i32 %34, -4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %31

57:                                               ; preds = %31, %20
  %58 = phi <2 x double> [ undef, %20 ], [ %53, %31 ]
  %59 = phi double* [ %1, %20 ], [ %54, %31 ]
  %60 = phi <2 x double> [ zeroinitializer, %20 ], [ %53, %31 ]
  %61 = icmp eq i32 %22, 0
  br i1 %61, label %73, label %62

62:                                               ; preds = %57, %62
  %63 = phi double* [ %70, %62 ], [ %59, %57 ]
  %64 = phi <2 x double> [ %69, %62 ], [ %60, %57 ]
  %65 = phi i32 [ %71, %62 ], [ %22, %57 ]
  %66 = bitcast double* %63 to <2 x double>*
  %67 = load <2 x double>, <2 x double>* %66, align 8
  %68 = shufflevector <2 x double> %67, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %69 = fadd <2 x double> %64, %68
  %70 = getelementptr inbounds double, double* %63, i64 2
  %71 = add i32 %65, -1
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %62, !llvm.loop !5

73:                                               ; preds = %62, %57
  %74 = phi <2 x double> [ %58, %57 ], [ %69, %62 ]
  %75 = sitofp i32 %0 to double
  %76 = insertelement <2 x double> undef, double %75, i32 0
  %77 = shufflevector <2 x double> %76, <2 x double> undef, <2 x i32> zeroinitializer
  %78 = fdiv <2 x double> %74, %77
  %79 = and i32 %0, 1
  %80 = icmp eq i32 %0, 1
  br i1 %80, label %113, label %81

81:                                               ; preds = %73
  %82 = sub i32 %0, %79
  %83 = shufflevector <2 x double> %78, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %84 = shufflevector <2 x double> %78, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  br label %85

85:                                               ; preds = %85, %81
  %86 = phi double [ 0.000000e+00, %81 ], [ %109, %85 ]
  %87 = phi double* [ %1, %81 ], [ %110, %85 ]
  %88 = phi i32 [ %82, %81 ], [ %111, %85 ]
  %89 = bitcast double* %87 to <2 x double>*
  %90 = load <2 x double>, <2 x double>* %89, align 8
  %91 = fsub <2 x double> %90, %83
  %92 = bitcast double* %87 to <2 x double>*
  store <2 x double> %91, <2 x double>* %92, align 8
  %93 = fmul <2 x double> %91, %91
  %94 = extractelement <2 x double> %93, i32 0
  %95 = extractelement <2 x double> %93, i32 1
  %96 = fadd double %94, %95
  %97 = tail call double @sqrt(double %96) #11
  %98 = fadd double %86, %97
  %99 = getelementptr inbounds double, double* %87, i64 2
  %100 = bitcast double* %99 to <2 x double>*
  %101 = load <2 x double>, <2 x double>* %100, align 8
  %102 = fsub <2 x double> %101, %84
  %103 = bitcast double* %99 to <2 x double>*
  store <2 x double> %102, <2 x double>* %103, align 8
  %104 = fmul <2 x double> %102, %102
  %105 = extractelement <2 x double> %104, i32 0
  %106 = extractelement <2 x double> %104, i32 1
  %107 = fadd double %105, %106
  %108 = tail call double @sqrt(double %107) #11
  %109 = fadd double %98, %108
  %110 = getelementptr inbounds double, double* %87, i64 4
  %111 = add i32 %88, -2
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %85

113:                                              ; preds = %85, %73
  %114 = phi double [ undef, %73 ], [ %109, %85 ]
  %115 = phi double [ 0.000000e+00, %73 ], [ %109, %85 ]
  %116 = phi double* [ %1, %73 ], [ %110, %85 ]
  %117 = icmp eq i32 %79, 0
  br i1 %117, label %130, label %118

118:                                              ; preds = %113
  %119 = bitcast double* %116 to <2 x double>*
  %120 = load <2 x double>, <2 x double>* %119, align 8
  %121 = shufflevector <2 x double> %78, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %122 = fsub <2 x double> %120, %121
  %123 = bitcast double* %116 to <2 x double>*
  store <2 x double> %122, <2 x double>* %123, align 8
  %124 = fmul <2 x double> %122, %122
  %125 = extractelement <2 x double> %124, i32 0
  %126 = extractelement <2 x double> %124, i32 1
  %127 = fadd double %125, %126
  %128 = tail call double @sqrt(double %127) #11
  %129 = fadd double %115, %128
  br label %130

130:                                              ; preds = %118, %113, %26
  %131 = phi double [ %27, %26 ], [ %75, %113 ], [ %75, %118 ]
  %132 = phi double [ 0.000000e+00, %26 ], [ %114, %113 ], [ %129, %118 ]
  %133 = phi <2 x double> [ %30, %26 ], [ %78, %113 ], [ %78, %118 ]
  %134 = fdiv double %132, %131
  %135 = fcmp oeq double %134, 0.000000e+00
  %136 = fdiv double 0x3FF6A09E667F3BCD, %134
  %137 = select i1 %135, double 1.000000e+00, double %136
  %138 = fsub double -0.000000e+00, %137
  %139 = extractelement <2 x double> %133, i32 1
  %140 = fmul double %139, %138
  %141 = extractelement <2 x double> %133, i32 0
  %142 = fmul double %141, %138
  br i1 %19, label %143, label %232

143:                                              ; preds = %130
  %144 = add i32 %0, -1
  %145 = zext i32 %144 to i64
  %146 = add nuw nsw i64 %145, 1
  %147 = icmp ult i64 %146, 2
  br i1 %147, label %148, label %153

148:                                              ; preds = %214, %143
  %149 = phi i32 [ 0, %143 ], [ %155, %214 ]
  %150 = phi double* [ %1, %143 ], [ %157, %214 ]
  %151 = insertelement <2 x double> undef, double %137, i32 0
  %152 = shufflevector <2 x double> %151, <2 x double> undef, <2 x i32> zeroinitializer
  br label %222

153:                                              ; preds = %143
  %154 = and i64 %146, 8589934590
  %155 = trunc i64 %154 to i32
  %156 = shl nuw nsw i64 %154, 1
  %157 = getelementptr double, double* %1, i64 %156
  %158 = insertelement <2 x double> undef, double %137, i32 0
  %159 = shufflevector <2 x double> %158, <2 x double> undef, <2 x i32> zeroinitializer
  %160 = add nsw i64 %154, -2
  %161 = lshr exact i64 %160, 1
  %162 = add nuw i64 %161, 1
  %163 = and i64 %162, 1
  %164 = icmp eq i64 %160, 0
  br i1 %164, label %198, label %165

165:                                              ; preds = %153
  %166 = sub nuw i64 %162, %163
  br label %167

167:                                              ; preds = %167, %165
  %168 = phi i64 [ 0, %165 ], [ %195, %167 ]
  %169 = phi i64 [ %166, %165 ], [ %196, %167 ]
  %170 = shl i64 %168, 1
  %171 = getelementptr double, double* %1, i64 %170
  %172 = bitcast double* %171 to <4 x double>*
  %173 = load <4 x double>, <4 x double>* %172, align 8
  %174 = shufflevector <4 x double> %173, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %175 = shufflevector <4 x double> %173, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %176 = fmul <2 x double> %159, %174
  %177 = getelementptr inbounds double, double* %171, i64 1
  %178 = fmul <2 x double> %159, %175
  %179 = getelementptr inbounds double, double* %177, i64 -1
  %180 = bitcast double* %179 to <4 x double>*
  %181 = shufflevector <2 x double> %176, <2 x double> %178, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %181, <4 x double>* %180, align 8
  %182 = shl i64 %168, 1
  %183 = or i64 %182, 4
  %184 = getelementptr double, double* %1, i64 %183
  %185 = bitcast double* %184 to <4 x double>*
  %186 = load <4 x double>, <4 x double>* %185, align 8
  %187 = shufflevector <4 x double> %186, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %188 = shufflevector <4 x double> %186, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %189 = fmul <2 x double> %159, %187
  %190 = getelementptr inbounds double, double* %184, i64 1
  %191 = fmul <2 x double> %159, %188
  %192 = getelementptr inbounds double, double* %190, i64 -1
  %193 = bitcast double* %192 to <4 x double>*
  %194 = shufflevector <2 x double> %189, <2 x double> %191, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %194, <4 x double>* %193, align 8
  %195 = add i64 %168, 4
  %196 = add i64 %169, -2
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %198, label %167, !llvm.loop !7

198:                                              ; preds = %167, %153
  %199 = phi i64 [ 0, %153 ], [ %195, %167 ]
  %200 = icmp eq i64 %163, 0
  br i1 %200, label %214, label %201

201:                                              ; preds = %198
  %202 = shl i64 %199, 1
  %203 = getelementptr double, double* %1, i64 %202
  %204 = bitcast double* %203 to <4 x double>*
  %205 = load <4 x double>, <4 x double>* %204, align 8
  %206 = shufflevector <4 x double> %205, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %207 = shufflevector <4 x double> %205, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %208 = fmul <2 x double> %159, %206
  %209 = getelementptr inbounds double, double* %203, i64 1
  %210 = fmul <2 x double> %159, %207
  %211 = getelementptr inbounds double, double* %209, i64 -1
  %212 = bitcast double* %211 to <4 x double>*
  %213 = shufflevector <2 x double> %208, <2 x double> %210, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %213, <4 x double>* %212, align 8
  br label %214

214:                                              ; preds = %198, %201
  %215 = icmp eq i64 %146, %154
  br i1 %215, label %216, label %148

216:                                              ; preds = %222, %214
  %217 = add i32 %0, -1
  %218 = and i32 %0, 7
  %219 = icmp ult i32 %217, 7
  br i1 %219, label %275, label %220

220:                                              ; preds = %216
  %221 = sub i32 %0, %218
  br label %237

222:                                              ; preds = %148, %222
  %223 = phi i32 [ %229, %222 ], [ %149, %148 ]
  %224 = phi double* [ %230, %222 ], [ %150, %148 ]
  %225 = bitcast double* %224 to <2 x double>*
  %226 = load <2 x double>, <2 x double>* %225, align 8
  %227 = fmul <2 x double> %152, %226
  %228 = bitcast double* %224 to <2 x double>*
  store <2 x double> %227, <2 x double>* %228, align 8
  %229 = add nuw nsw i32 %223, 1
  %230 = getelementptr inbounds double, double* %224, i64 2
  %231 = icmp eq i32 %229, %0
  br i1 %231, label %216, label %222, !llvm.loop !9

232:                                              ; preds = %130
  %233 = sitofp i32 %0 to double
  %234 = fdiv double 0.000000e+00, %233
  %235 = insertelement <2 x double> undef, double %234, i32 0
  %236 = shufflevector <2 x double> %235, <2 x double> undef, <2 x i32> zeroinitializer
  br label %344

237:                                              ; preds = %237, %220
  %238 = phi double* [ %2, %220 ], [ %272, %237 ]
  %239 = phi <2 x double> [ zeroinitializer, %220 ], [ %271, %237 ]
  %240 = phi i32 [ %221, %220 ], [ %273, %237 ]
  %241 = bitcast double* %238 to <2 x double>*
  %242 = load <2 x double>, <2 x double>* %241, align 8
  %243 = fadd <2 x double> %239, %242
  %244 = getelementptr inbounds double, double* %238, i64 2
  %245 = bitcast double* %244 to <2 x double>*
  %246 = load <2 x double>, <2 x double>* %245, align 8
  %247 = fadd <2 x double> %243, %246
  %248 = getelementptr inbounds double, double* %238, i64 4
  %249 = bitcast double* %248 to <2 x double>*
  %250 = load <2 x double>, <2 x double>* %249, align 8
  %251 = fadd <2 x double> %247, %250
  %252 = getelementptr inbounds double, double* %238, i64 6
  %253 = bitcast double* %252 to <2 x double>*
  %254 = load <2 x double>, <2 x double>* %253, align 8
  %255 = fadd <2 x double> %251, %254
  %256 = getelementptr inbounds double, double* %238, i64 8
  %257 = bitcast double* %256 to <2 x double>*
  %258 = load <2 x double>, <2 x double>* %257, align 8
  %259 = fadd <2 x double> %255, %258
  %260 = getelementptr inbounds double, double* %238, i64 10
  %261 = bitcast double* %260 to <2 x double>*
  %262 = load <2 x double>, <2 x double>* %261, align 8
  %263 = fadd <2 x double> %259, %262
  %264 = getelementptr inbounds double, double* %238, i64 12
  %265 = bitcast double* %264 to <2 x double>*
  %266 = load <2 x double>, <2 x double>* %265, align 8
  %267 = fadd <2 x double> %263, %266
  %268 = getelementptr inbounds double, double* %238, i64 14
  %269 = bitcast double* %268 to <2 x double>*
  %270 = load <2 x double>, <2 x double>* %269, align 8
  %271 = fadd <2 x double> %267, %270
  %272 = getelementptr inbounds double, double* %238, i64 16
  %273 = add i32 %240, -8
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %237

275:                                              ; preds = %237, %216
  %276 = phi <2 x double> [ undef, %216 ], [ %271, %237 ]
  %277 = phi double* [ %2, %216 ], [ %272, %237 ]
  %278 = phi <2 x double> [ zeroinitializer, %216 ], [ %271, %237 ]
  %279 = icmp eq i32 %218, 0
  br i1 %279, label %290, label %280

280:                                              ; preds = %275, %280
  %281 = phi double* [ %287, %280 ], [ %277, %275 ]
  %282 = phi <2 x double> [ %286, %280 ], [ %278, %275 ]
  %283 = phi i32 [ %288, %280 ], [ %218, %275 ]
  %284 = bitcast double* %281 to <2 x double>*
  %285 = load <2 x double>, <2 x double>* %284, align 8
  %286 = fadd <2 x double> %282, %285
  %287 = getelementptr inbounds double, double* %281, i64 2
  %288 = add i32 %283, -1
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %290, label %280, !llvm.loop !11

290:                                              ; preds = %280, %275
  %291 = phi <2 x double> [ %276, %275 ], [ %286, %280 ]
  %292 = sitofp i32 %0 to double
  %293 = insertelement <2 x double> undef, double %292, i32 0
  %294 = shufflevector <2 x double> %293, <2 x double> undef, <2 x i32> zeroinitializer
  %295 = fdiv <2 x double> %291, %294
  %296 = and i32 %0, 1
  %297 = icmp eq i32 %0, 1
  br i1 %297, label %328, label %298

298:                                              ; preds = %290
  %299 = sub i32 %0, %296
  br label %300

300:                                              ; preds = %300, %298
  %301 = phi double [ 0.000000e+00, %298 ], [ %324, %300 ]
  %302 = phi double* [ %2, %298 ], [ %325, %300 ]
  %303 = phi i32 [ %299, %298 ], [ %326, %300 ]
  %304 = bitcast double* %302 to <2 x double>*
  %305 = load <2 x double>, <2 x double>* %304, align 8
  %306 = fsub <2 x double> %305, %295
  %307 = bitcast double* %302 to <2 x double>*
  store <2 x double> %306, <2 x double>* %307, align 8
  %308 = fmul <2 x double> %306, %306
  %309 = extractelement <2 x double> %308, i32 0
  %310 = extractelement <2 x double> %308, i32 1
  %311 = fadd double %309, %310
  %312 = tail call double @sqrt(double %311) #11
  %313 = fadd double %301, %312
  %314 = getelementptr inbounds double, double* %302, i64 2
  %315 = bitcast double* %314 to <2 x double>*
  %316 = load <2 x double>, <2 x double>* %315, align 8
  %317 = fsub <2 x double> %316, %295
  %318 = bitcast double* %314 to <2 x double>*
  store <2 x double> %317, <2 x double>* %318, align 8
  %319 = fmul <2 x double> %317, %317
  %320 = extractelement <2 x double> %319, i32 0
  %321 = extractelement <2 x double> %319, i32 1
  %322 = fadd double %320, %321
  %323 = tail call double @sqrt(double %322) #11
  %324 = fadd double %313, %323
  %325 = getelementptr inbounds double, double* %302, i64 4
  %326 = add i32 %303, -2
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %328, label %300

328:                                              ; preds = %300, %290
  %329 = phi double [ undef, %290 ], [ %324, %300 ]
  %330 = phi double [ 0.000000e+00, %290 ], [ %324, %300 ]
  %331 = phi double* [ %2, %290 ], [ %325, %300 ]
  %332 = icmp eq i32 %296, 0
  br i1 %332, label %344, label %333

333:                                              ; preds = %328
  %334 = bitcast double* %331 to <2 x double>*
  %335 = load <2 x double>, <2 x double>* %334, align 8
  %336 = fsub <2 x double> %335, %295
  %337 = bitcast double* %331 to <2 x double>*
  store <2 x double> %336, <2 x double>* %337, align 8
  %338 = fmul <2 x double> %336, %336
  %339 = extractelement <2 x double> %338, i32 0
  %340 = extractelement <2 x double> %338, i32 1
  %341 = fadd double %339, %340
  %342 = tail call double @sqrt(double %341) #11
  %343 = fadd double %330, %342
  br label %344

344:                                              ; preds = %333, %328, %232
  %345 = phi double [ %233, %232 ], [ %292, %328 ], [ %292, %333 ]
  %346 = phi double [ 0.000000e+00, %232 ], [ %329, %328 ], [ %343, %333 ]
  %347 = phi <2 x double> [ %236, %232 ], [ %295, %328 ], [ %295, %333 ]
  %348 = fdiv double %346, %345
  %349 = fcmp oeq double %348, 0.000000e+00
  %350 = fdiv double 0x3FF6A09E667F3BCD, %348
  %351 = select i1 %349, double 1.000000e+00, double %350
  %352 = fsub double -0.000000e+00, %351
  %353 = insertelement <2 x double> undef, double %352, i32 0
  %354 = shufflevector <2 x double> %353, <2 x double> undef, <2 x i32> zeroinitializer
  %355 = fmul <2 x double> %347, %354
  br i1 %19, label %356, label %496

356:                                              ; preds = %344
  %357 = add i32 %0, -1
  %358 = zext i32 %357 to i64
  %359 = add nuw nsw i64 %358, 1
  %360 = icmp ult i64 %359, 2
  br i1 %360, label %425, label %361

361:                                              ; preds = %356
  %362 = and i64 %359, 8589934590
  %363 = trunc i64 %362 to i32
  %364 = shl nuw nsw i64 %362, 1
  %365 = getelementptr double, double* %2, i64 %364
  %366 = insertelement <2 x double> undef, double %351, i32 0
  %367 = shufflevector <2 x double> %366, <2 x double> undef, <2 x i32> zeroinitializer
  %368 = add nsw i64 %362, -2
  %369 = lshr exact i64 %368, 1
  %370 = add nuw i64 %369, 1
  %371 = and i64 %370, 1
  %372 = icmp eq i64 %368, 0
  br i1 %372, label %408, label %373

373:                                              ; preds = %361
  %374 = sub nuw i64 %370, %371
  br label %375

375:                                              ; preds = %375, %373
  %376 = phi i64 [ 0, %373 ], [ %403, %375 ]
  %377 = phi i64 [ %374, %373 ], [ %404, %375 ]
  %378 = shl i64 %376, 1
  %379 = getelementptr double, double* %2, i64 %378
  %380 = bitcast double* %379 to <4 x double>*
  %381 = load <4 x double>, <4 x double>* %380, align 8
  %382 = shufflevector <4 x double> %381, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %383 = shufflevector <4 x double> %381, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %384 = fmul <2 x double> %367, %382
  %385 = getelementptr inbounds double, double* %379, i64 1
  %386 = fmul <2 x double> %367, %383
  %387 = getelementptr inbounds double, double* %385, i64 -1
  %388 = bitcast double* %387 to <4 x double>*
  %389 = shufflevector <2 x double> %384, <2 x double> %386, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %389, <4 x double>* %388, align 8
  %390 = shl i64 %376, 1
  %391 = or i64 %390, 4
  %392 = getelementptr double, double* %2, i64 %391
  %393 = bitcast double* %392 to <4 x double>*
  %394 = load <4 x double>, <4 x double>* %393, align 8
  %395 = shufflevector <4 x double> %394, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %396 = shufflevector <4 x double> %394, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %397 = fmul <2 x double> %367, %395
  %398 = getelementptr inbounds double, double* %392, i64 1
  %399 = fmul <2 x double> %367, %396
  %400 = getelementptr inbounds double, double* %398, i64 -1
  %401 = bitcast double* %400 to <4 x double>*
  %402 = shufflevector <2 x double> %397, <2 x double> %399, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %402, <4 x double>* %401, align 8
  %403 = add i64 %376, 4
  %404 = add i64 %377, -2
  %405 = icmp eq i64 %404, 0
  br i1 %405, label %406, label %375, !llvm.loop !12

406:                                              ; preds = %375
  %407 = shl i64 %403, 1
  br label %408

408:                                              ; preds = %406, %361
  %409 = phi i64 [ 0, %361 ], [ %407, %406 ]
  %410 = icmp eq i64 %371, 0
  br i1 %410, label %423, label %411

411:                                              ; preds = %408
  %412 = getelementptr double, double* %2, i64 %409
  %413 = bitcast double* %412 to <4 x double>*
  %414 = load <4 x double>, <4 x double>* %413, align 8
  %415 = shufflevector <4 x double> %414, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %416 = shufflevector <4 x double> %414, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %417 = fmul <2 x double> %367, %415
  %418 = getelementptr inbounds double, double* %412, i64 1
  %419 = fmul <2 x double> %367, %416
  %420 = getelementptr inbounds double, double* %418, i64 -1
  %421 = bitcast double* %420 to <4 x double>*
  %422 = shufflevector <2 x double> %417, <2 x double> %419, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %422, <4 x double>* %421, align 8
  br label %423

423:                                              ; preds = %408, %411
  %424 = icmp eq i64 %359, %362
  br i1 %424, label %440, label %425

425:                                              ; preds = %423, %356
  %426 = phi i32 [ 0, %356 ], [ %363, %423 ]
  %427 = phi double* [ %2, %356 ], [ %365, %423 ]
  %428 = insertelement <2 x double> undef, double %351, i32 0
  %429 = shufflevector <2 x double> %428, <2 x double> undef, <2 x i32> zeroinitializer
  br label %430

430:                                              ; preds = %425, %430
  %431 = phi i32 [ %437, %430 ], [ %426, %425 ]
  %432 = phi double* [ %438, %430 ], [ %427, %425 ]
  %433 = bitcast double* %432 to <2 x double>*
  %434 = load <2 x double>, <2 x double>* %433, align 8
  %435 = fmul <2 x double> %429, %434
  %436 = bitcast double* %432 to <2 x double>*
  store <2 x double> %435, <2 x double>* %436, align 8
  %437 = add nuw nsw i32 %431, 1
  %438 = getelementptr inbounds double, double* %432, i64 2
  %439 = icmp eq i32 %437, %0
  br i1 %439, label %440, label %430, !llvm.loop !13

440:                                              ; preds = %430, %423
  br i1 %19, label %441, label %496

441:                                              ; preds = %440
  %442 = zext i32 %0 to i64
  br label %443

443:                                              ; preds = %443, %441
  %444 = phi i64 [ 0, %441 ], [ %494, %443 ]
  %445 = phi double* [ %2, %441 ], [ %447, %443 ]
  %446 = phi double* [ %1, %441 ], [ %453, %443 ]
  %447 = getelementptr inbounds double, double* %445, i64 2
  %448 = bitcast double* %445 to <2 x i64>*
  %449 = load <2 x i64>, <2 x i64>* %448, align 8
  %450 = getelementptr inbounds double, double* %446, i64 1
  %451 = bitcast double* %446 to i64*
  %452 = load i64, i64* %451, align 8
  %453 = getelementptr inbounds double, double* %446, i64 2
  %454 = bitcast double* %450 to i64*
  %455 = load i64, i64* %454, align 8
  %456 = shl nuw nsw i64 %444, 1
  %457 = trunc i64 %444 to i32
  %458 = mul nsw i32 %457, 12
  %459 = zext i32 %458 to i64
  %460 = getelementptr inbounds double, double* %11, i64 %459
  %461 = bitcast double* %460 to i64*
  store i64 %452, i64* %461, align 8
  %462 = or i32 %458, 1
  %463 = zext i32 %462 to i64
  %464 = getelementptr inbounds double, double* %11, i64 %463
  %465 = bitcast double* %464 to i64*
  store i64 %455, i64* %465, align 8
  %466 = or i32 %458, 2
  %467 = zext i32 %466 to i64
  %468 = getelementptr inbounds double, double* %11, i64 %467
  %469 = bitcast double* %468 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %469, align 8
  %470 = add nuw nsw i32 %458, 4
  %471 = zext i32 %470 to i64
  %472 = getelementptr inbounds double, double* %11, i64 %471
  %473 = bitcast double* %472 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 0.000000e+00>, <2 x double>* %473, align 8
  %474 = trunc i64 %456 to i32
  %475 = or i32 %474, 1
  %476 = mul nsw i32 %475, 6
  %477 = zext i32 %476 to i64
  %478 = getelementptr inbounds double, double* %11, i64 %477
  %479 = bitcast double* %478 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %479, align 8
  %480 = add nuw nsw i32 %476, 2
  %481 = zext i32 %480 to i64
  %482 = getelementptr inbounds double, double* %11, i64 %481
  %483 = bitcast double* %482 to i64*
  store i64 %452, i64* %483, align 8
  %484 = add nuw nsw i32 %476, 3
  %485 = zext i32 %484 to i64
  %486 = getelementptr inbounds double, double* %11, i64 %485
  %487 = bitcast double* %486 to i64*
  store i64 %455, i64* %487, align 8
  %488 = add nuw nsw i32 %476, 4
  %489 = zext i32 %488 to i64
  %490 = getelementptr inbounds double, double* %11, i64 %489
  %491 = bitcast double* %490 to <2 x double>*
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, <2 x double>* %491, align 8
  %492 = getelementptr inbounds double, double* %16, i64 %456
  %493 = bitcast double* %492 to <2 x i64>*
  store <2 x i64> %449, <2 x i64>* %493, align 8
  %494 = add nuw nsw i64 %444, 1
  %495 = icmp eq i64 %494, %442
  br i1 %495, label %496, label %443

496:                                              ; preds = %443, %344, %440
  %497 = tail call fastcc i32 @least_squares(i32 6, double* nonnull %11, i32 %5, i32 6, double* %16, double* %18, double* %3)
  %498 = icmp eq i32 %497, 0
  br i1 %498, label %597, label %499

499:                                              ; preds = %496
  %500 = load double, double* %3, align 8
  %501 = getelementptr inbounds double, double* %3, i64 1
  %502 = load double, double* %501, align 8
  %503 = getelementptr inbounds double, double* %3, i64 4
  %504 = load double, double* %503, align 8
  %505 = getelementptr inbounds double, double* %3, i64 2
  %506 = load double, double* %505, align 8
  %507 = getelementptr inbounds double, double* %3, i64 3
  %508 = load double, double* %507, align 8
  %509 = getelementptr inbounds double, double* %3, i64 5
  %510 = load double, double* %509, align 8
  %511 = fdiv double 1.000000e+00, %351
  %512 = insertelement <2 x double> undef, double %511, i32 0
  %513 = shufflevector <2 x double> %512, <2 x double> undef, <2 x i32> zeroinitializer
  %514 = fmul <2 x double> %355, %513
  %515 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %514
  %516 = fmul double %504, 0.000000e+00
  %517 = insertelement <2 x double> undef, double %137, i32 0
  %518 = insertelement <2 x double> %517, double %500, i32 1
  %519 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %500, i32 0
  %520 = fmul <2 x double> %518, %519
  %521 = fadd <2 x double> %520, zeroinitializer
  %522 = insertelement <2 x double> undef, double %502, i32 0
  %523 = insertelement <2 x double> %522, double %137, i32 1
  %524 = insertelement <2 x double> <double 0.000000e+00, double undef>, double %502, i32 1
  %525 = fmul <2 x double> %523, %524
  %526 = fadd <2 x double> %521, %525
  %527 = insertelement <2 x double> undef, double %516, i32 0
  %528 = shufflevector <2 x double> %527, <2 x double> undef, <2 x i32> zeroinitializer
  %529 = fadd <2 x double> %526, %528
  %530 = fmul double %140, %500
  %531 = fadd double %530, 0.000000e+00
  %532 = fmul double %142, %502
  %533 = fadd double %531, %532
  %534 = fadd double %504, %533
  %535 = fmul double %510, 0.000000e+00
  %536 = insertelement <2 x double> %517, double %506, i32 1
  %537 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %506, i32 0
  %538 = fmul <2 x double> %536, %537
  %539 = fadd <2 x double> %538, zeroinitializer
  %540 = insertelement <2 x double> undef, double %508, i32 0
  %541 = insertelement <2 x double> %540, double %137, i32 1
  %542 = insertelement <2 x double> <double 0.000000e+00, double undef>, double %508, i32 1
  %543 = fmul <2 x double> %541, %542
  %544 = fadd <2 x double> %539, %543
  %545 = insertelement <2 x double> undef, double %535, i32 0
  %546 = shufflevector <2 x double> %545, <2 x double> undef, <2 x i32> zeroinitializer
  %547 = fadd <2 x double> %544, %546
  %548 = fmul double %140, %506
  %549 = fadd double %548, 0.000000e+00
  %550 = fmul double %142, %508
  %551 = fadd double %549, %550
  %552 = fadd double %510, %551
  %553 = fmul double %137, 0.000000e+00
  %554 = fadd double %553, 0.000000e+00
  %555 = fmul double %140, 0.000000e+00
  %556 = fadd double %555, 0.000000e+00
  %557 = fmul double %142, 0.000000e+00
  %558 = fadd double %557, %556
  %559 = fadd double %558, 1.000000e+00
  %560 = extractelement <2 x double> %515, i32 0
  %561 = fmul double %554, %560
  %562 = fmul <2 x double> %513, %529
  %563 = fadd <2 x double> %562, zeroinitializer
  %564 = fmul <2 x double> %547, zeroinitializer
  %565 = fadd <2 x double> %563, %564
  %566 = insertelement <2 x double> undef, double %561, i32 0
  %567 = shufflevector <2 x double> %566, <2 x double> undef, <2 x i32> zeroinitializer
  %568 = fadd <2 x double> %567, %565
  %569 = extractelement <2 x double> %515, i32 1
  %570 = fmul double %554, %569
  %571 = fmul <2 x double> %529, zeroinitializer
  %572 = fadd <2 x double> %571, zeroinitializer
  %573 = fmul <2 x double> %513, %547
  %574 = fadd <2 x double> %572, %573
  %575 = insertelement <2 x double> undef, double %570, i32 0
  %576 = shufflevector <2 x double> %575, <2 x double> undef, <2 x i32> zeroinitializer
  %577 = fadd <2 x double> %576, %574
  %578 = insertelement <2 x double> %512, double 0.000000e+00, i32 1
  %579 = insertelement <2 x double> undef, double %534, i32 0
  %580 = shufflevector <2 x double> %579, <2 x double> undef, <2 x i32> zeroinitializer
  %581 = fmul <2 x double> %578, %580
  %582 = fadd <2 x double> %581, zeroinitializer
  %583 = insertelement <2 x double> undef, double %552, i32 0
  %584 = shufflevector <2 x double> %583, <2 x double> undef, <2 x i32> zeroinitializer
  %585 = insertelement <2 x double> <double 0.000000e+00, double undef>, double %511, i32 1
  %586 = fmul <2 x double> %584, %585
  %587 = fadd <2 x double> %582, %586
  %588 = insertelement <2 x double> undef, double %559, i32 0
  %589 = shufflevector <2 x double> %588, <2 x double> undef, <2 x i32> zeroinitializer
  %590 = fmul <2 x double> %589, %515
  %591 = fadd <2 x double> %590, %587
  %592 = bitcast double* %3 to <2 x double>*
  store <2 x double> %591, <2 x double>* %592, align 8
  %593 = bitcast double* %505 to <2 x double>*
  store <2 x double> %568, <2 x double>* %593, align 8
  %594 = bitcast double* %503 to <2 x double>*
  store <2 x double> %577, <2 x double>* %594, align 8
  %595 = getelementptr inbounds double, double* %3, i64 6
  %596 = bitcast double* %595 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %596, i8 0, i64 16, i1 false) #11
  br label %597

597:                                              ; preds = %496, %499
  %598 = phi i32 [ 0, %499 ], [ 1, %496 ]
  tail call void @aom_free(i8* nonnull %10) #11
  br label %599

599:                                              ; preds = %597, %4
  %600 = phi i32 [ 1, %4 ], [ %598, %597 ]
  ret i32 %600
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @project_points_double_affine(double* nocapture readonly, double* nocapture readonly, double* nocapture, i32, i32, i32) #3 {
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %46

8:                                                ; preds = %6
  %9 = getelementptr inbounds double, double* %0, i64 2
  %10 = getelementptr inbounds double, double* %0, i64 3
  %11 = getelementptr inbounds double, double* %0, i64 4
  %12 = getelementptr inbounds double, double* %0, i64 5
  %13 = getelementptr inbounds double, double* %0, i64 1
  %14 = add nsw i32 %4, -2
  %15 = sext i32 %14 to i64
  %16 = add nsw i32 %5, -2
  %17 = sext i32 %16 to i64
  br label %18

18:                                               ; preds = %18, %8
  %19 = phi double* [ %1, %8 ], [ %42, %18 ]
  %20 = phi double* [ %2, %8 ], [ %43, %18 ]
  %21 = phi i32 [ 0, %8 ], [ %44, %18 ]
  %22 = getelementptr inbounds double, double* %19, i64 1
  %23 = load double, double* %19, align 8
  %24 = getelementptr inbounds double, double* %19, i64 2
  %25 = load double, double* %22, align 8
  %26 = load double, double* %9, align 8
  %27 = fmul double %23, %26
  %28 = load double, double* %10, align 8
  %29 = fmul double %25, %28
  %30 = fadd double %27, %29
  %31 = load double, double* %0, align 8
  %32 = fadd double %31, %30
  %33 = getelementptr inbounds double, double* %20, i64 1
  store double %32, double* %20, align 8
  %34 = load double, double* %11, align 8
  %35 = fmul double %23, %34
  %36 = load double, double* %12, align 8
  %37 = fmul double %25, %36
  %38 = fadd double %35, %37
  %39 = load double, double* %13, align 8
  %40 = fadd double %39, %38
  %41 = getelementptr inbounds double, double* %20, i64 2
  store double %40, double* %33, align 8
  %42 = getelementptr inbounds double, double* %24, i64 %15
  %43 = getelementptr inbounds double, double* %41, i64 %17
  %44 = add nuw nsw i32 %21, 1
  %45 = icmp eq i32 %44, %3
  br i1 %45, label %46, label %18

46:                                               ; preds = %18, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare i8* @aom_malloc(i64) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nofree
declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) local_unnamed_addr #7

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @compare_motions(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = bitcast i8* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast i8* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %4, %6
  br i1 %7, label %21, label %8

8:                                                ; preds = %2
  %9 = icmp slt i32 %4, %6
  br i1 %9, label %21, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to double*
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds i8, i8* %1, i64 8
  %15 = bitcast i8* %14 to double*
  %16 = load double, double* %15, align 8
  %17 = fcmp olt double %13, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %10
  %19 = fcmp ogt double %13, %16
  %20 = zext i1 %19 to i32
  br label %21

21:                                               ; preds = %18, %10, %8, %2
  %22 = phi i32 [ -1, %2 ], [ 1, %8 ], [ -1, %10 ], [ %20, %18 ]
  ret i32 %22
}

declare void @aom_free(i8*) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #9

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc i32 @least_squares(i32, double* nocapture readonly, i32, i32, double* nocapture readonly, double*, double* nocapture) unnamed_addr #10 {
  %8 = icmp eq double* %5, null
  br i1 %8, label %9, label %17

9:                                                ; preds = %7
  %10 = sext i32 %0 to i64
  %11 = shl nsw i64 %10, 3
  %12 = add nsw i32 %0, 1
  %13 = sext i32 %12 to i64
  %14 = mul i64 %11, %13
  %15 = tail call i8* @aom_malloc(i64 %14) #11
  %16 = bitcast i8* %15 to double*
  br label %17

17:                                               ; preds = %7, %9
  %18 = phi double* [ %5, %7 ], [ %16, %9 ]
  %19 = phi i8* [ null, %7 ], [ %15, %9 ]
  %20 = phi double* [ null, %7 ], [ %16, %9 ]
  %21 = mul nsw i32 %0, %0
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds double, double* %18, i64 %22
  %24 = icmp sgt i32 %0, 0
  br i1 %24, label %25, label %141

25:                                               ; preds = %17
  %26 = icmp sgt i32 %2, 0
  %27 = sext i32 %3 to i64
  %28 = sext i32 %0 to i64
  %29 = zext i32 %0 to i64
  %30 = zext i32 %2 to i64
  %31 = add nsw i64 %30, -1
  %32 = and i64 %30, 1
  %33 = icmp eq i64 %31, 0
  %34 = sub nsw i64 %30, %32
  %35 = icmp eq i64 %32, 0
  %36 = and i64 %30, 1
  %37 = icmp eq i64 %31, 0
  %38 = sub nsw i64 %30, %36
  %39 = icmp eq i64 %36, 0
  br label %40

40:                                               ; preds = %25, %138
  %41 = phi i64 [ 0, %25 ], [ %139, %138 ]
  %42 = mul nsw i64 %41, %28
  br label %43

43:                                               ; preds = %91, %40
  %44 = phi i64 [ %41, %40 ], [ %97, %91 ]
  %45 = add nsw i64 %44, %42
  %46 = getelementptr inbounds double, double* %18, i64 %45
  store double 0.000000e+00, double* %46, align 8
  br i1 %26, label %47, label %91

47:                                               ; preds = %43
  br i1 %33, label %74, label %48

48:                                               ; preds = %47, %48
  %49 = phi double [ %70, %48 ], [ 0.000000e+00, %47 ]
  %50 = phi i64 [ %71, %48 ], [ 0, %47 ]
  %51 = phi i64 [ %72, %48 ], [ %34, %47 ]
  %52 = mul nsw i64 %50, %27
  %53 = add nsw i64 %52, %41
  %54 = getelementptr inbounds double, double* %1, i64 %53
  %55 = load double, double* %54, align 8
  %56 = add nsw i64 %52, %44
  %57 = getelementptr inbounds double, double* %1, i64 %56
  %58 = load double, double* %57, align 8
  %59 = fmul double %55, %58
  %60 = fadd double %49, %59
  store double %60, double* %46, align 8
  %61 = or i64 %50, 1
  %62 = mul nsw i64 %61, %27
  %63 = add nsw i64 %62, %41
  %64 = getelementptr inbounds double, double* %1, i64 %63
  %65 = load double, double* %64, align 8
  %66 = add nsw i64 %62, %44
  %67 = getelementptr inbounds double, double* %1, i64 %66
  %68 = load double, double* %67, align 8
  %69 = fmul double %65, %68
  %70 = fadd double %60, %69
  store double %70, double* %46, align 8
  %71 = add nuw nsw i64 %50, 2
  %72 = add i64 %51, -2
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %48

74:                                               ; preds = %48, %47
  %75 = phi double [ undef, %47 ], [ %70, %48 ]
  %76 = phi double [ 0.000000e+00, %47 ], [ %70, %48 ]
  %77 = phi i64 [ 0, %47 ], [ %71, %48 ]
  br i1 %35, label %88, label %78

78:                                               ; preds = %74
  %79 = mul nsw i64 %77, %27
  %80 = add nsw i64 %79, %41
  %81 = getelementptr inbounds double, double* %1, i64 %80
  %82 = load double, double* %81, align 8
  %83 = add nsw i64 %79, %44
  %84 = getelementptr inbounds double, double* %1, i64 %83
  %85 = load double, double* %84, align 8
  %86 = fmul double %82, %85
  %87 = fadd double %76, %86
  store double %87, double* %46, align 8
  br label %88

88:                                               ; preds = %74, %78
  %89 = phi double [ %75, %74 ], [ %87, %78 ]
  %90 = bitcast double %89 to i64
  br label %91

91:                                               ; preds = %88, %43
  %92 = phi i64 [ %90, %88 ], [ 0, %43 ]
  %93 = mul nsw i64 %44, %28
  %94 = add nsw i64 %93, %41
  %95 = getelementptr inbounds double, double* %18, i64 %94
  %96 = bitcast double* %95 to i64*
  store i64 %92, i64* %96, align 8
  %97 = add nuw nsw i64 %44, 1
  %98 = icmp eq i64 %97, %29
  br i1 %98, label %99, label %43

99:                                               ; preds = %91
  %100 = getelementptr inbounds double, double* %23, i64 %41
  store double 0.000000e+00, double* %100, align 8
  br i1 %26, label %101, label %138

101:                                              ; preds = %99
  br i1 %37, label %126, label %102

102:                                              ; preds = %101, %102
  %103 = phi double [ %122, %102 ], [ 0.000000e+00, %101 ]
  %104 = phi i64 [ %123, %102 ], [ 0, %101 ]
  %105 = phi i64 [ %124, %102 ], [ %38, %101 ]
  %106 = mul nsw i64 %104, %27
  %107 = add nsw i64 %106, %41
  %108 = getelementptr inbounds double, double* %1, i64 %107
  %109 = load double, double* %108, align 8
  %110 = getelementptr inbounds double, double* %4, i64 %104
  %111 = load double, double* %110, align 8
  %112 = fmul double %109, %111
  %113 = fadd double %103, %112
  store double %113, double* %100, align 8
  %114 = or i64 %104, 1
  %115 = mul nsw i64 %114, %27
  %116 = add nsw i64 %115, %41
  %117 = getelementptr inbounds double, double* %1, i64 %116
  %118 = load double, double* %117, align 8
  %119 = getelementptr inbounds double, double* %4, i64 %114
  %120 = load double, double* %119, align 8
  %121 = fmul double %118, %120
  %122 = fadd double %113, %121
  store double %122, double* %100, align 8
  %123 = add nuw nsw i64 %104, 2
  %124 = add i64 %105, -2
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %102

126:                                              ; preds = %102, %101
  %127 = phi double [ 0.000000e+00, %101 ], [ %122, %102 ]
  %128 = phi i64 [ 0, %101 ], [ %123, %102 ]
  br i1 %39, label %138, label %129

129:                                              ; preds = %126
  %130 = mul nsw i64 %128, %27
  %131 = add nsw i64 %130, %41
  %132 = getelementptr inbounds double, double* %1, i64 %131
  %133 = load double, double* %132, align 8
  %134 = getelementptr inbounds double, double* %4, i64 %128
  %135 = load double, double* %134, align 8
  %136 = fmul double %133, %135
  %137 = fadd double %127, %136
  store double %137, double* %100, align 8
  br label %138

138:                                              ; preds = %129, %126, %99
  %139 = add nuw nsw i64 %41, 1
  %140 = icmp eq i64 %139, %29
  br i1 %140, label %141, label %40

141:                                              ; preds = %138, %17
  %142 = add i32 %0, -1
  %143 = icmp sgt i32 %142, 0
  br i1 %143, label %144, label %190

144:                                              ; preds = %141
  %145 = sext i32 %142 to i64
  %146 = sext i32 %0 to i64
  %147 = zext i32 %142 to i64
  %148 = zext i32 %0 to i64
  %149 = getelementptr double, double* %18, i64 %148
  %150 = mul nsw i64 %146, %145
  %151 = add i64 %150, %148
  %152 = add nsw i64 %145, -1
  %153 = mul i64 %152, %146
  %154 = add i64 %153, %148
  %155 = and i64 %148, 4294967292
  %156 = add nsw i64 %155, -4
  %157 = lshr exact i64 %156, 2
  %158 = add nuw nsw i64 %157, 1
  %159 = icmp ult i32 %0, 4
  %160 = and i64 %148, 4294967292
  %161 = and i64 %158, 1
  %162 = icmp eq i64 %156, 0
  %163 = sub nuw nsw i64 %158, %161
  %164 = icmp eq i64 %161, 0
  %165 = icmp eq i64 %160, %148
  %166 = and i64 %148, 1
  %167 = icmp eq i64 %166, 0
  %168 = sub nsw i64 0, %148
  %169 = icmp ult i32 %0, 4
  %170 = and i64 %148, 4294967292
  %171 = and i64 %158, 1
  %172 = icmp eq i64 %156, 0
  %173 = sub nuw nsw i64 %158, %171
  %174 = icmp eq i64 %171, 0
  %175 = icmp eq i64 %170, %148
  %176 = and i64 %148, 1
  %177 = icmp eq i64 %176, 0
  %178 = sub nsw i64 0, %148
  br label %179

179:                                              ; preds = %494, %144
  %180 = phi i64 [ 0, %144 ], [ %495, %494 ]
  %181 = phi i32 [ %142, %144 ], [ %496, %494 ]
  %182 = trunc i64 %180 to i32
  %183 = mul i32 %182, %0
  %184 = add i32 %183, %0
  %185 = mul i64 %180, %146
  %186 = getelementptr double, double* %18, i64 %185
  %187 = add i64 %185, %148
  %188 = getelementptr double, double* %18, i64 %187
  %189 = zext i32 %181 to i64
  br label %205

190:                                              ; preds = %494, %141
  br i1 %24, label %191, label %579

191:                                              ; preds = %190
  %192 = sext i32 %0 to i64
  %193 = sext i32 %142 to i64
  %194 = add nsw i64 %193, 1
  %195 = sub nsw i64 %194, %192
  %196 = sub nsw i64 %193, %192
  br label %498

197:                                              ; preds = %344
  %198 = mul nsw i64 %180, %146
  %199 = trunc i64 %180 to i32
  %200 = shl i64 %180, 32
  %201 = ashr exact i64 %200, 32
  %202 = add nsw i64 %198, %201
  %203 = getelementptr inbounds double, double* %18, i64 %202
  %204 = getelementptr inbounds double, double* %23, i64 %180
  br label %347

205:                                              ; preds = %344, %179
  %206 = phi i64 [ %145, %179 ], [ %217, %344 ]
  %207 = phi i64 [ 0, %179 ], [ %345, %344 ]
  %208 = mul i64 %207, %146
  %209 = sub i64 %150, %208
  %210 = getelementptr double, double* %18, i64 %209
  %211 = sub i64 %151, %208
  %212 = getelementptr double, double* %18, i64 %211
  %213 = sub i64 %153, %208
  %214 = getelementptr double, double* %18, i64 %213
  %215 = sub i64 %154, %208
  %216 = getelementptr double, double* %18, i64 %215
  %217 = add nsw i64 %206, -1
  %218 = mul nsw i64 %217, %146
  %219 = add nsw i64 %218, %180
  %220 = getelementptr inbounds double, double* %18, i64 %219
  %221 = load double, double* %220, align 8
  %222 = tail call double @llvm.fabs.f64(double %221) #11
  %223 = mul nsw i64 %206, %146
  %224 = add nsw i64 %223, %180
  %225 = getelementptr inbounds double, double* %18, i64 %224
  %226 = load double, double* %225, align 8
  %227 = tail call double @llvm.fabs.f64(double %226) #11
  %228 = fcmp olt double %222, %227
  br i1 %228, label %229, label %344

229:                                              ; preds = %205
  br i1 %24, label %230, label %338

230:                                              ; preds = %229
  br i1 %159, label %301, label %231

231:                                              ; preds = %230
  %232 = icmp ult double* %210, %216
  %233 = icmp ult double* %214, %212
  %234 = and i1 %232, %233
  br i1 %234, label %301, label %235

235:                                              ; preds = %231
  br i1 %162, label %279, label %236

236:                                              ; preds = %235, %236
  %237 = phi i64 [ %276, %236 ], [ 0, %235 ]
  %238 = phi i64 [ %277, %236 ], [ %163, %235 ]
  %239 = add nsw i64 %237, %223
  %240 = getelementptr inbounds double, double* %18, i64 %239
  %241 = bitcast double* %240 to <2 x i64>*
  %242 = load <2 x i64>, <2 x i64>* %241, align 8, !alias.scope !14, !noalias !17
  %243 = getelementptr inbounds double, double* %240, i64 2
  %244 = bitcast double* %243 to <2 x i64>*
  %245 = load <2 x i64>, <2 x i64>* %244, align 8, !alias.scope !14, !noalias !17
  %246 = add nsw i64 %237, %218
  %247 = getelementptr inbounds double, double* %18, i64 %246
  %248 = bitcast double* %247 to <2 x i64>*
  %249 = load <2 x i64>, <2 x i64>* %248, align 8, !alias.scope !17
  %250 = getelementptr inbounds double, double* %247, i64 2
  %251 = bitcast double* %250 to <2 x i64>*
  %252 = load <2 x i64>, <2 x i64>* %251, align 8, !alias.scope !17
  %253 = bitcast double* %240 to <2 x i64>*
  store <2 x i64> %249, <2 x i64>* %253, align 8, !alias.scope !14, !noalias !17
  %254 = bitcast double* %243 to <2 x i64>*
  store <2 x i64> %252, <2 x i64>* %254, align 8, !alias.scope !14, !noalias !17
  %255 = bitcast double* %247 to <2 x i64>*
  store <2 x i64> %242, <2 x i64>* %255, align 8, !alias.scope !17
  %256 = bitcast double* %250 to <2 x i64>*
  store <2 x i64> %245, <2 x i64>* %256, align 8, !alias.scope !17
  %257 = or i64 %237, 4
  %258 = add nsw i64 %257, %223
  %259 = getelementptr inbounds double, double* %18, i64 %258
  %260 = bitcast double* %259 to <2 x i64>*
  %261 = load <2 x i64>, <2 x i64>* %260, align 8, !alias.scope !14, !noalias !17
  %262 = getelementptr inbounds double, double* %259, i64 2
  %263 = bitcast double* %262 to <2 x i64>*
  %264 = load <2 x i64>, <2 x i64>* %263, align 8, !alias.scope !14, !noalias !17
  %265 = add nsw i64 %257, %218
  %266 = getelementptr inbounds double, double* %18, i64 %265
  %267 = bitcast double* %266 to <2 x i64>*
  %268 = load <2 x i64>, <2 x i64>* %267, align 8, !alias.scope !17
  %269 = getelementptr inbounds double, double* %266, i64 2
  %270 = bitcast double* %269 to <2 x i64>*
  %271 = load <2 x i64>, <2 x i64>* %270, align 8, !alias.scope !17
  %272 = bitcast double* %259 to <2 x i64>*
  store <2 x i64> %268, <2 x i64>* %272, align 8, !alias.scope !14, !noalias !17
  %273 = bitcast double* %262 to <2 x i64>*
  store <2 x i64> %271, <2 x i64>* %273, align 8, !alias.scope !14, !noalias !17
  %274 = bitcast double* %266 to <2 x i64>*
  store <2 x i64> %261, <2 x i64>* %274, align 8, !alias.scope !17
  %275 = bitcast double* %269 to <2 x i64>*
  store <2 x i64> %264, <2 x i64>* %275, align 8, !alias.scope !17
  %276 = add i64 %237, 8
  %277 = add i64 %238, -2
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %236, !llvm.loop !19

279:                                              ; preds = %236, %235
  %280 = phi i64 [ 0, %235 ], [ %276, %236 ]
  br i1 %164, label %300, label %281

281:                                              ; preds = %279
  %282 = add nsw i64 %280, %223
  %283 = getelementptr inbounds double, double* %18, i64 %282
  %284 = bitcast double* %283 to <2 x i64>*
  %285 = load <2 x i64>, <2 x i64>* %284, align 8, !alias.scope !14, !noalias !17
  %286 = getelementptr inbounds double, double* %283, i64 2
  %287 = bitcast double* %286 to <2 x i64>*
  %288 = load <2 x i64>, <2 x i64>* %287, align 8, !alias.scope !14, !noalias !17
  %289 = add nsw i64 %280, %218
  %290 = getelementptr inbounds double, double* %18, i64 %289
  %291 = bitcast double* %290 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 8, !alias.scope !17
  %293 = getelementptr inbounds double, double* %290, i64 2
  %294 = bitcast double* %293 to <2 x i64>*
  %295 = load <2 x i64>, <2 x i64>* %294, align 8, !alias.scope !17
  %296 = bitcast double* %283 to <2 x i64>*
  store <2 x i64> %292, <2 x i64>* %296, align 8, !alias.scope !14, !noalias !17
  %297 = bitcast double* %286 to <2 x i64>*
  store <2 x i64> %295, <2 x i64>* %297, align 8, !alias.scope !14, !noalias !17
  %298 = bitcast double* %290 to <2 x i64>*
  store <2 x i64> %285, <2 x i64>* %298, align 8, !alias.scope !17
  %299 = bitcast double* %293 to <2 x i64>*
  store <2 x i64> %288, <2 x i64>* %299, align 8, !alias.scope !17
  br label %300

300:                                              ; preds = %279, %281
  br i1 %165, label %338, label %301

301:                                              ; preds = %300, %231, %230
  %302 = phi i64 [ 0, %231 ], [ 0, %230 ], [ %160, %300 ]
  %303 = xor i64 %302, -1
  br i1 %167, label %314, label %304

304:                                              ; preds = %301
  %305 = add nsw i64 %302, %223
  %306 = getelementptr inbounds double, double* %18, i64 %305
  %307 = bitcast double* %306 to i64*
  %308 = load i64, i64* %307, align 8
  %309 = add nsw i64 %302, %218
  %310 = getelementptr inbounds double, double* %18, i64 %309
  %311 = bitcast double* %310 to i64*
  %312 = load i64, i64* %311, align 8
  store i64 %312, i64* %307, align 8
  store i64 %308, i64* %311, align 8
  %313 = or i64 %302, 1
  br label %314

314:                                              ; preds = %304, %301
  %315 = phi i64 [ %313, %304 ], [ %302, %301 ]
  %316 = icmp eq i64 %303, %168
  br i1 %316, label %338, label %317

317:                                              ; preds = %314, %317
  %318 = phi i64 [ %336, %317 ], [ %315, %314 ]
  %319 = add nsw i64 %318, %223
  %320 = getelementptr inbounds double, double* %18, i64 %319
  %321 = bitcast double* %320 to i64*
  %322 = load i64, i64* %321, align 8
  %323 = add nsw i64 %318, %218
  %324 = getelementptr inbounds double, double* %18, i64 %323
  %325 = bitcast double* %324 to i64*
  %326 = load i64, i64* %325, align 8
  store i64 %326, i64* %321, align 8
  store i64 %322, i64* %325, align 8
  %327 = add nuw nsw i64 %318, 1
  %328 = add nsw i64 %327, %223
  %329 = getelementptr inbounds double, double* %18, i64 %328
  %330 = bitcast double* %329 to i64*
  %331 = load i64, i64* %330, align 8
  %332 = add nsw i64 %327, %218
  %333 = getelementptr inbounds double, double* %18, i64 %332
  %334 = bitcast double* %333 to i64*
  %335 = load i64, i64* %334, align 8
  store i64 %335, i64* %330, align 8
  store i64 %331, i64* %334, align 8
  %336 = add nuw nsw i64 %318, 2
  %337 = icmp eq i64 %336, %148
  br i1 %337, label %338, label %317, !llvm.loop !20

338:                                              ; preds = %314, %317, %300, %229
  %339 = getelementptr inbounds double, double* %23, i64 %217
  %340 = bitcast double* %339 to <2 x i64>*
  %341 = load <2 x i64>, <2 x i64>* %340, align 8
  %342 = shufflevector <2 x i64> %341, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %343 = bitcast double* %339 to <2 x i64>*
  store <2 x i64> %342, <2 x i64>* %343, align 8
  br label %344

344:                                              ; preds = %338, %205
  %345 = add nuw nsw i64 %207, 1
  %346 = icmp eq i64 %345, %189
  br i1 %346, label %197, label %205

347:                                              ; preds = %486, %197
  %348 = phi i32 [ %493, %486 ], [ 0, %197 ]
  %349 = phi i64 [ %359, %486 ], [ %180, %197 ]
  %350 = mul i32 %348, %0
  %351 = add i32 %184, %350
  %352 = sext i32 %351 to i64
  %353 = getelementptr double, double* %18, i64 %352
  %354 = getelementptr double, double* %149, i64 %352
  %355 = load double, double* %203, align 8
  %356 = tail call double @llvm.fabs.f64(double %355) #11
  %357 = fcmp olt double %356, 0x3C9CD2B297D889BC
  br i1 %357, label %579, label %358

358:                                              ; preds = %347
  %359 = add nuw nsw i64 %349, 1
  %360 = trunc i64 %359 to i32
  %361 = mul nsw i32 %360, %0
  %362 = add nsw i32 %361, %199
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds double, double* %18, i64 %363
  %365 = load double, double* %364, align 8
  %366 = fdiv double %365, %355
  br i1 %24, label %367, label %486

367:                                              ; preds = %358
  %368 = sext i32 %361 to i64
  br i1 %169, label %449, label %369

369:                                              ; preds = %367
  %370 = icmp ult double* %353, %188
  %371 = icmp ult double* %186, %354
  %372 = and i1 %370, %371
  br i1 %372, label %449, label %373

373:                                              ; preds = %369
  %374 = insertelement <2 x double> undef, double %366, i32 0
  %375 = shufflevector <2 x double> %374, <2 x double> undef, <2 x i32> zeroinitializer
  %376 = insertelement <2 x double> undef, double %366, i32 0
  %377 = shufflevector <2 x double> %376, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %172, label %425, label %378

378:                                              ; preds = %373, %378
  %379 = phi i64 [ %422, %378 ], [ 0, %373 ]
  %380 = phi i64 [ %423, %378 ], [ %173, %373 ]
  %381 = add nsw i64 %379, %198
  %382 = getelementptr inbounds double, double* %18, i64 %381
  %383 = bitcast double* %382 to <2 x double>*
  %384 = load <2 x double>, <2 x double>* %383, align 8, !alias.scope !21
  %385 = getelementptr inbounds double, double* %382, i64 2
  %386 = bitcast double* %385 to <2 x double>*
  %387 = load <2 x double>, <2 x double>* %386, align 8, !alias.scope !21
  %388 = fmul <2 x double> %375, %384
  %389 = fmul <2 x double> %377, %387
  %390 = add nsw i64 %379, %368
  %391 = getelementptr inbounds double, double* %18, i64 %390
  %392 = bitcast double* %391 to <2 x double>*
  %393 = load <2 x double>, <2 x double>* %392, align 8, !alias.scope !24, !noalias !21
  %394 = getelementptr inbounds double, double* %391, i64 2
  %395 = bitcast double* %394 to <2 x double>*
  %396 = load <2 x double>, <2 x double>* %395, align 8, !alias.scope !24, !noalias !21
  %397 = fsub <2 x double> %393, %388
  %398 = fsub <2 x double> %396, %389
  %399 = bitcast double* %391 to <2 x double>*
  store <2 x double> %397, <2 x double>* %399, align 8, !alias.scope !24, !noalias !21
  %400 = bitcast double* %394 to <2 x double>*
  store <2 x double> %398, <2 x double>* %400, align 8, !alias.scope !24, !noalias !21
  %401 = or i64 %379, 4
  %402 = add nsw i64 %401, %198
  %403 = getelementptr inbounds double, double* %18, i64 %402
  %404 = bitcast double* %403 to <2 x double>*
  %405 = load <2 x double>, <2 x double>* %404, align 8, !alias.scope !21
  %406 = getelementptr inbounds double, double* %403, i64 2
  %407 = bitcast double* %406 to <2 x double>*
  %408 = load <2 x double>, <2 x double>* %407, align 8, !alias.scope !21
  %409 = fmul <2 x double> %375, %405
  %410 = fmul <2 x double> %377, %408
  %411 = add nsw i64 %401, %368
  %412 = getelementptr inbounds double, double* %18, i64 %411
  %413 = bitcast double* %412 to <2 x double>*
  %414 = load <2 x double>, <2 x double>* %413, align 8, !alias.scope !24, !noalias !21
  %415 = getelementptr inbounds double, double* %412, i64 2
  %416 = bitcast double* %415 to <2 x double>*
  %417 = load <2 x double>, <2 x double>* %416, align 8, !alias.scope !24, !noalias !21
  %418 = fsub <2 x double> %414, %409
  %419 = fsub <2 x double> %417, %410
  %420 = bitcast double* %412 to <2 x double>*
  store <2 x double> %418, <2 x double>* %420, align 8, !alias.scope !24, !noalias !21
  %421 = bitcast double* %415 to <2 x double>*
  store <2 x double> %419, <2 x double>* %421, align 8, !alias.scope !24, !noalias !21
  %422 = add i64 %379, 8
  %423 = add i64 %380, -2
  %424 = icmp eq i64 %423, 0
  br i1 %424, label %425, label %378, !llvm.loop !26

425:                                              ; preds = %378, %373
  %426 = phi i64 [ 0, %373 ], [ %422, %378 ]
  br i1 %174, label %448, label %427

427:                                              ; preds = %425
  %428 = add nsw i64 %426, %198
  %429 = getelementptr inbounds double, double* %18, i64 %428
  %430 = bitcast double* %429 to <2 x double>*
  %431 = load <2 x double>, <2 x double>* %430, align 8, !alias.scope !21
  %432 = getelementptr inbounds double, double* %429, i64 2
  %433 = bitcast double* %432 to <2 x double>*
  %434 = load <2 x double>, <2 x double>* %433, align 8, !alias.scope !21
  %435 = fmul <2 x double> %375, %431
  %436 = fmul <2 x double> %377, %434
  %437 = add nsw i64 %426, %368
  %438 = getelementptr inbounds double, double* %18, i64 %437
  %439 = bitcast double* %438 to <2 x double>*
  %440 = load <2 x double>, <2 x double>* %439, align 8, !alias.scope !24, !noalias !21
  %441 = getelementptr inbounds double, double* %438, i64 2
  %442 = bitcast double* %441 to <2 x double>*
  %443 = load <2 x double>, <2 x double>* %442, align 8, !alias.scope !24, !noalias !21
  %444 = fsub <2 x double> %440, %435
  %445 = fsub <2 x double> %443, %436
  %446 = bitcast double* %438 to <2 x double>*
  store <2 x double> %444, <2 x double>* %446, align 8, !alias.scope !24, !noalias !21
  %447 = bitcast double* %441 to <2 x double>*
  store <2 x double> %445, <2 x double>* %447, align 8, !alias.scope !24, !noalias !21
  br label %448

448:                                              ; preds = %425, %427
  br i1 %175, label %486, label %449

449:                                              ; preds = %448, %369, %367
  %450 = phi i64 [ 0, %369 ], [ 0, %367 ], [ %170, %448 ]
  %451 = xor i64 %450, -1
  br i1 %177, label %462, label %452

452:                                              ; preds = %449
  %453 = add nsw i64 %450, %198
  %454 = getelementptr inbounds double, double* %18, i64 %453
  %455 = load double, double* %454, align 8
  %456 = fmul double %366, %455
  %457 = add nsw i64 %450, %368
  %458 = getelementptr inbounds double, double* %18, i64 %457
  %459 = load double, double* %458, align 8
  %460 = fsub double %459, %456
  store double %460, double* %458, align 8
  %461 = or i64 %450, 1
  br label %462

462:                                              ; preds = %452, %449
  %463 = phi i64 [ %461, %452 ], [ %450, %449 ]
  %464 = icmp eq i64 %451, %178
  br i1 %464, label %486, label %465

465:                                              ; preds = %462, %465
  %466 = phi i64 [ %484, %465 ], [ %463, %462 ]
  %467 = add nsw i64 %466, %198
  %468 = getelementptr inbounds double, double* %18, i64 %467
  %469 = load double, double* %468, align 8
  %470 = fmul double %366, %469
  %471 = add nsw i64 %466, %368
  %472 = getelementptr inbounds double, double* %18, i64 %471
  %473 = load double, double* %472, align 8
  %474 = fsub double %473, %470
  store double %474, double* %472, align 8
  %475 = add nuw nsw i64 %466, 1
  %476 = add nsw i64 %475, %198
  %477 = getelementptr inbounds double, double* %18, i64 %476
  %478 = load double, double* %477, align 8
  %479 = fmul double %366, %478
  %480 = add nsw i64 %475, %368
  %481 = getelementptr inbounds double, double* %18, i64 %480
  %482 = load double, double* %481, align 8
  %483 = fsub double %482, %479
  store double %483, double* %481, align 8
  %484 = add nuw nsw i64 %466, 2
  %485 = icmp eq i64 %484, %148
  br i1 %485, label %486, label %465, !llvm.loop !27

486:                                              ; preds = %462, %465, %448, %358
  %487 = load double, double* %204, align 8
  %488 = fmul double %366, %487
  %489 = getelementptr inbounds double, double* %23, i64 %359
  %490 = load double, double* %489, align 8
  %491 = fsub double %490, %488
  store double %491, double* %489, align 8
  %492 = icmp eq i64 %359, %147
  %493 = add i32 %348, 1
  br i1 %492, label %494, label %347

494:                                              ; preds = %486
  %495 = add nuw nsw i64 %180, 1
  %496 = add i32 %181, -1
  %497 = icmp eq i64 %495, %147
  br i1 %497, label %190, label %179

498:                                              ; preds = %570, %191
  %499 = phi i64 [ %578, %570 ], [ 0, %191 ]
  %500 = phi i64 [ %503, %570 ], [ %192, %191 ]
  %501 = add i64 %195, %499
  %502 = add i64 %196, %499
  %503 = add nsw i64 %500, -1
  %504 = mul nsw i64 %503, %192
  %505 = add nsw i64 %504, %503
  %506 = getelementptr inbounds double, double* %18, i64 %505
  %507 = load double, double* %506, align 8
  %508 = tail call double @llvm.fabs.f64(double %507) #11
  %509 = fcmp olt double %508, 0x3C9CD2B297D889BC
  br i1 %509, label %579, label %510

510:                                              ; preds = %498
  %511 = icmp sgt i64 %500, %193
  br i1 %511, label %570, label %512

512:                                              ; preds = %510
  %513 = and i64 %501, 3
  %514 = icmp eq i64 %513, 0
  br i1 %514, label %529, label %515

515:                                              ; preds = %512, %515
  %516 = phi i64 [ %519, %515 ], [ %503, %512 ]
  %517 = phi double [ %526, %515 ], [ 0.000000e+00, %512 ]
  %518 = phi i64 [ %527, %515 ], [ %513, %512 ]
  %519 = add nsw i64 %516, 1
  %520 = add nsw i64 %519, %504
  %521 = getelementptr inbounds double, double* %18, i64 %520
  %522 = load double, double* %521, align 8
  %523 = getelementptr inbounds double, double* %6, i64 %519
  %524 = load double, double* %523, align 8
  %525 = fmul double %522, %524
  %526 = fadd double %517, %525
  %527 = add i64 %518, -1
  %528 = icmp eq i64 %527, 0
  br i1 %528, label %529, label %515, !llvm.loop !28

529:                                              ; preds = %515, %512
  %530 = phi double [ undef, %512 ], [ %526, %515 ]
  %531 = phi i64 [ %503, %512 ], [ %519, %515 ]
  %532 = phi double [ 0.000000e+00, %512 ], [ %526, %515 ]
  %533 = icmp ult i64 %502, 3
  br i1 %533, label %570, label %534

534:                                              ; preds = %529, %534
  %535 = phi i64 [ %561, %534 ], [ %531, %529 ]
  %536 = phi double [ %568, %534 ], [ %532, %529 ]
  %537 = add nsw i64 %535, 1
  %538 = add nsw i64 %537, %504
  %539 = getelementptr inbounds double, double* %18, i64 %538
  %540 = load double, double* %539, align 8
  %541 = getelementptr inbounds double, double* %6, i64 %537
  %542 = load double, double* %541, align 8
  %543 = fmul double %540, %542
  %544 = fadd double %536, %543
  %545 = add nsw i64 %535, 2
  %546 = add nsw i64 %545, %504
  %547 = getelementptr inbounds double, double* %18, i64 %546
  %548 = load double, double* %547, align 8
  %549 = getelementptr inbounds double, double* %6, i64 %545
  %550 = load double, double* %549, align 8
  %551 = fmul double %548, %550
  %552 = fadd double %544, %551
  %553 = add nsw i64 %535, 3
  %554 = add nsw i64 %553, %504
  %555 = getelementptr inbounds double, double* %18, i64 %554
  %556 = load double, double* %555, align 8
  %557 = getelementptr inbounds double, double* %6, i64 %553
  %558 = load double, double* %557, align 8
  %559 = fmul double %556, %558
  %560 = fadd double %552, %559
  %561 = add nsw i64 %535, 4
  %562 = add nsw i64 %561, %504
  %563 = getelementptr inbounds double, double* %18, i64 %562
  %564 = load double, double* %563, align 8
  %565 = getelementptr inbounds double, double* %6, i64 %561
  %566 = load double, double* %565, align 8
  %567 = fmul double %564, %566
  %568 = fadd double %560, %567
  %569 = icmp eq i64 %561, %193
  br i1 %569, label %570, label %534

570:                                              ; preds = %529, %534, %510
  %571 = phi double [ 0.000000e+00, %510 ], [ %530, %529 ], [ %568, %534 ]
  %572 = getelementptr inbounds double, double* %23, i64 %503
  %573 = load double, double* %572, align 8
  %574 = fsub double %573, %571
  %575 = fdiv double %574, %507
  %576 = getelementptr inbounds double, double* %6, i64 %503
  store double %575, double* %576, align 8
  %577 = icmp sgt i64 %503, 0
  %578 = add i64 %499, 1
  br i1 %577, label %498, label %579

579:                                              ; preds = %347, %498, %570, %190
  %580 = phi i32 [ 1, %190 ], [ 1, %570 ], [ 0, %498 ], [ 0, %347 ]
  %581 = icmp eq double* %20, null
  br i1 %581, label %583, label %582

582:                                              ; preds = %579
  tail call void @aom_free(i8* %19) #11
  br label %583

583:                                              ; preds = %579, %582
  ret i32 %580
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @find_rotzoom(i32, double* nocapture, double* nocapture, double* nocapture) #1 {
  %5 = shl nsw i32 %0, 1
  %6 = mul nsw i32 %0, 10
  %7 = add nsw i32 %6, 20
  %8 = sext i32 %7 to i64
  %9 = shl nsw i64 %8, 3
  %10 = tail call i8* @aom_malloc(i64 %9) #11
  %11 = bitcast i8* %10 to double*
  %12 = shl nsw i32 %0, 3
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds double, double* %11, i64 %13
  %15 = sext i32 %5 to i64
  %16 = getelementptr inbounds double, double* %14, i64 %15
  %17 = icmp sgt i32 %0, 0
  br i1 %17, label %18, label %24

18:                                               ; preds = %4
  %19 = add i32 %0, -1
  %20 = and i32 %0, 3
  %21 = icmp ult i32 %19, 3
  br i1 %21, label %55, label %22

22:                                               ; preds = %18
  %23 = sub i32 %0, %20
  br label %29

24:                                               ; preds = %4
  %25 = sitofp i32 %0 to double
  %26 = fdiv double 0.000000e+00, %25
  %27 = insertelement <2 x double> undef, double %26, i32 0
  %28 = shufflevector <2 x double> %27, <2 x double> undef, <2 x i32> zeroinitializer
  br label %128

29:                                               ; preds = %29, %22
  %30 = phi double* [ %1, %22 ], [ %52, %29 ]
  %31 = phi <2 x double> [ zeroinitializer, %22 ], [ %51, %29 ]
  %32 = phi i32 [ %23, %22 ], [ %53, %29 ]
  %33 = bitcast double* %30 to <2 x double>*
  %34 = load <2 x double>, <2 x double>* %33, align 8
  %35 = shufflevector <2 x double> %34, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %36 = fadd <2 x double> %31, %35
  %37 = getelementptr inbounds double, double* %30, i64 2
  %38 = bitcast double* %37 to <2 x double>*
  %39 = load <2 x double>, <2 x double>* %38, align 8
  %40 = shufflevector <2 x double> %39, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %41 = fadd <2 x double> %36, %40
  %42 = getelementptr inbounds double, double* %30, i64 4
  %43 = bitcast double* %42 to <2 x double>*
  %44 = load <2 x double>, <2 x double>* %43, align 8
  %45 = shufflevector <2 x double> %44, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %46 = fadd <2 x double> %41, %45
  %47 = getelementptr inbounds double, double* %30, i64 6
  %48 = bitcast double* %47 to <2 x double>*
  %49 = load <2 x double>, <2 x double>* %48, align 8
  %50 = shufflevector <2 x double> %49, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %51 = fadd <2 x double> %46, %50
  %52 = getelementptr inbounds double, double* %30, i64 8
  %53 = add i32 %32, -4
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %29

55:                                               ; preds = %29, %18
  %56 = phi <2 x double> [ undef, %18 ], [ %51, %29 ]
  %57 = phi double* [ %1, %18 ], [ %52, %29 ]
  %58 = phi <2 x double> [ zeroinitializer, %18 ], [ %51, %29 ]
  %59 = icmp eq i32 %20, 0
  br i1 %59, label %71, label %60

60:                                               ; preds = %55, %60
  %61 = phi double* [ %68, %60 ], [ %57, %55 ]
  %62 = phi <2 x double> [ %67, %60 ], [ %58, %55 ]
  %63 = phi i32 [ %69, %60 ], [ %20, %55 ]
  %64 = bitcast double* %61 to <2 x double>*
  %65 = load <2 x double>, <2 x double>* %64, align 8
  %66 = shufflevector <2 x double> %65, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %67 = fadd <2 x double> %62, %66
  %68 = getelementptr inbounds double, double* %61, i64 2
  %69 = add i32 %63, -1
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %60, !llvm.loop !29

71:                                               ; preds = %60, %55
  %72 = phi <2 x double> [ %56, %55 ], [ %67, %60 ]
  %73 = sitofp i32 %0 to double
  %74 = insertelement <2 x double> undef, double %73, i32 0
  %75 = shufflevector <2 x double> %74, <2 x double> undef, <2 x i32> zeroinitializer
  %76 = fdiv <2 x double> %72, %75
  %77 = and i32 %0, 1
  %78 = icmp eq i32 %0, 1
  br i1 %78, label %111, label %79

79:                                               ; preds = %71
  %80 = sub i32 %0, %77
  %81 = shufflevector <2 x double> %76, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %82 = shufflevector <2 x double> %76, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  br label %83

83:                                               ; preds = %83, %79
  %84 = phi double [ 0.000000e+00, %79 ], [ %107, %83 ]
  %85 = phi double* [ %1, %79 ], [ %108, %83 ]
  %86 = phi i32 [ %80, %79 ], [ %109, %83 ]
  %87 = bitcast double* %85 to <2 x double>*
  %88 = load <2 x double>, <2 x double>* %87, align 8
  %89 = fsub <2 x double> %88, %81
  %90 = bitcast double* %85 to <2 x double>*
  store <2 x double> %89, <2 x double>* %90, align 8
  %91 = fmul <2 x double> %89, %89
  %92 = extractelement <2 x double> %91, i32 0
  %93 = extractelement <2 x double> %91, i32 1
  %94 = fadd double %92, %93
  %95 = tail call double @sqrt(double %94) #11
  %96 = fadd double %84, %95
  %97 = getelementptr inbounds double, double* %85, i64 2
  %98 = bitcast double* %97 to <2 x double>*
  %99 = load <2 x double>, <2 x double>* %98, align 8
  %100 = fsub <2 x double> %99, %82
  %101 = bitcast double* %97 to <2 x double>*
  store <2 x double> %100, <2 x double>* %101, align 8
  %102 = fmul <2 x double> %100, %100
  %103 = extractelement <2 x double> %102, i32 0
  %104 = extractelement <2 x double> %102, i32 1
  %105 = fadd double %103, %104
  %106 = tail call double @sqrt(double %105) #11
  %107 = fadd double %96, %106
  %108 = getelementptr inbounds double, double* %85, i64 4
  %109 = add i32 %86, -2
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %83

111:                                              ; preds = %83, %71
  %112 = phi double [ undef, %71 ], [ %107, %83 ]
  %113 = phi double [ 0.000000e+00, %71 ], [ %107, %83 ]
  %114 = phi double* [ %1, %71 ], [ %108, %83 ]
  %115 = icmp eq i32 %77, 0
  br i1 %115, label %128, label %116

116:                                              ; preds = %111
  %117 = bitcast double* %114 to <2 x double>*
  %118 = load <2 x double>, <2 x double>* %117, align 8
  %119 = shufflevector <2 x double> %76, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %120 = fsub <2 x double> %118, %119
  %121 = bitcast double* %114 to <2 x double>*
  store <2 x double> %120, <2 x double>* %121, align 8
  %122 = fmul <2 x double> %120, %120
  %123 = extractelement <2 x double> %122, i32 0
  %124 = extractelement <2 x double> %122, i32 1
  %125 = fadd double %123, %124
  %126 = tail call double @sqrt(double %125) #11
  %127 = fadd double %113, %126
  br label %128

128:                                              ; preds = %116, %111, %24
  %129 = phi double [ %25, %24 ], [ %73, %111 ], [ %73, %116 ]
  %130 = phi double [ 0.000000e+00, %24 ], [ %112, %111 ], [ %127, %116 ]
  %131 = phi <2 x double> [ %28, %24 ], [ %76, %111 ], [ %76, %116 ]
  %132 = fdiv double %130, %129
  %133 = fcmp oeq double %132, 0.000000e+00
  %134 = fdiv double 0x3FF6A09E667F3BCD, %132
  %135 = select i1 %133, double 1.000000e+00, double %134
  %136 = fsub double -0.000000e+00, %135
  %137 = extractelement <2 x double> %131, i32 1
  %138 = fmul double %137, %136
  %139 = extractelement <2 x double> %131, i32 0
  %140 = fmul double %139, %136
  br i1 %17, label %141, label %230

141:                                              ; preds = %128
  %142 = add i32 %0, -1
  %143 = zext i32 %142 to i64
  %144 = add nuw nsw i64 %143, 1
  %145 = icmp ult i64 %144, 2
  br i1 %145, label %146, label %151

146:                                              ; preds = %212, %141
  %147 = phi i32 [ 0, %141 ], [ %153, %212 ]
  %148 = phi double* [ %1, %141 ], [ %155, %212 ]
  %149 = insertelement <2 x double> undef, double %135, i32 0
  %150 = shufflevector <2 x double> %149, <2 x double> undef, <2 x i32> zeroinitializer
  br label %220

151:                                              ; preds = %141
  %152 = and i64 %144, 8589934590
  %153 = trunc i64 %152 to i32
  %154 = shl nuw nsw i64 %152, 1
  %155 = getelementptr double, double* %1, i64 %154
  %156 = insertelement <2 x double> undef, double %135, i32 0
  %157 = shufflevector <2 x double> %156, <2 x double> undef, <2 x i32> zeroinitializer
  %158 = add nsw i64 %152, -2
  %159 = lshr exact i64 %158, 1
  %160 = add nuw i64 %159, 1
  %161 = and i64 %160, 1
  %162 = icmp eq i64 %158, 0
  br i1 %162, label %196, label %163

163:                                              ; preds = %151
  %164 = sub nuw i64 %160, %161
  br label %165

165:                                              ; preds = %165, %163
  %166 = phi i64 [ 0, %163 ], [ %193, %165 ]
  %167 = phi i64 [ %164, %163 ], [ %194, %165 ]
  %168 = shl i64 %166, 1
  %169 = getelementptr double, double* %1, i64 %168
  %170 = bitcast double* %169 to <4 x double>*
  %171 = load <4 x double>, <4 x double>* %170, align 8
  %172 = shufflevector <4 x double> %171, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %173 = shufflevector <4 x double> %171, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %174 = fmul <2 x double> %157, %172
  %175 = getelementptr inbounds double, double* %169, i64 1
  %176 = fmul <2 x double> %157, %173
  %177 = getelementptr inbounds double, double* %175, i64 -1
  %178 = bitcast double* %177 to <4 x double>*
  %179 = shufflevector <2 x double> %174, <2 x double> %176, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %179, <4 x double>* %178, align 8
  %180 = shl i64 %166, 1
  %181 = or i64 %180, 4
  %182 = getelementptr double, double* %1, i64 %181
  %183 = bitcast double* %182 to <4 x double>*
  %184 = load <4 x double>, <4 x double>* %183, align 8
  %185 = shufflevector <4 x double> %184, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %186 = shufflevector <4 x double> %184, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %187 = fmul <2 x double> %157, %185
  %188 = getelementptr inbounds double, double* %182, i64 1
  %189 = fmul <2 x double> %157, %186
  %190 = getelementptr inbounds double, double* %188, i64 -1
  %191 = bitcast double* %190 to <4 x double>*
  %192 = shufflevector <2 x double> %187, <2 x double> %189, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %192, <4 x double>* %191, align 8
  %193 = add i64 %166, 4
  %194 = add i64 %167, -2
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %196, label %165, !llvm.loop !30

196:                                              ; preds = %165, %151
  %197 = phi i64 [ 0, %151 ], [ %193, %165 ]
  %198 = icmp eq i64 %161, 0
  br i1 %198, label %212, label %199

199:                                              ; preds = %196
  %200 = shl i64 %197, 1
  %201 = getelementptr double, double* %1, i64 %200
  %202 = bitcast double* %201 to <4 x double>*
  %203 = load <4 x double>, <4 x double>* %202, align 8
  %204 = shufflevector <4 x double> %203, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %205 = shufflevector <4 x double> %203, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %206 = fmul <2 x double> %157, %204
  %207 = getelementptr inbounds double, double* %201, i64 1
  %208 = fmul <2 x double> %157, %205
  %209 = getelementptr inbounds double, double* %207, i64 -1
  %210 = bitcast double* %209 to <4 x double>*
  %211 = shufflevector <2 x double> %206, <2 x double> %208, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %211, <4 x double>* %210, align 8
  br label %212

212:                                              ; preds = %196, %199
  %213 = icmp eq i64 %144, %152
  br i1 %213, label %214, label %146

214:                                              ; preds = %220, %212
  %215 = add i32 %0, -1
  %216 = and i32 %0, 3
  %217 = icmp ult i32 %215, 3
  br i1 %217, label %261, label %218

218:                                              ; preds = %214
  %219 = sub i32 %0, %216
  br label %235

220:                                              ; preds = %146, %220
  %221 = phi i32 [ %227, %220 ], [ %147, %146 ]
  %222 = phi double* [ %228, %220 ], [ %148, %146 ]
  %223 = bitcast double* %222 to <2 x double>*
  %224 = load <2 x double>, <2 x double>* %223, align 8
  %225 = fmul <2 x double> %150, %224
  %226 = bitcast double* %222 to <2 x double>*
  store <2 x double> %225, <2 x double>* %226, align 8
  %227 = add nuw nsw i32 %221, 1
  %228 = getelementptr inbounds double, double* %222, i64 2
  %229 = icmp eq i32 %227, %0
  br i1 %229, label %214, label %220, !llvm.loop !31

230:                                              ; preds = %128
  %231 = sitofp i32 %0 to double
  %232 = fdiv double 0.000000e+00, %231
  %233 = insertelement <2 x double> undef, double %232, i32 0
  %234 = shufflevector <2 x double> %233, <2 x double> undef, <2 x i32> zeroinitializer
  br label %334

235:                                              ; preds = %235, %218
  %236 = phi double* [ %2, %218 ], [ %258, %235 ]
  %237 = phi <2 x double> [ zeroinitializer, %218 ], [ %257, %235 ]
  %238 = phi i32 [ %219, %218 ], [ %259, %235 ]
  %239 = bitcast double* %236 to <2 x double>*
  %240 = load <2 x double>, <2 x double>* %239, align 8
  %241 = shufflevector <2 x double> %240, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %242 = fadd <2 x double> %237, %241
  %243 = getelementptr inbounds double, double* %236, i64 2
  %244 = bitcast double* %243 to <2 x double>*
  %245 = load <2 x double>, <2 x double>* %244, align 8
  %246 = shufflevector <2 x double> %245, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %247 = fadd <2 x double> %242, %246
  %248 = getelementptr inbounds double, double* %236, i64 4
  %249 = bitcast double* %248 to <2 x double>*
  %250 = load <2 x double>, <2 x double>* %249, align 8
  %251 = shufflevector <2 x double> %250, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %252 = fadd <2 x double> %247, %251
  %253 = getelementptr inbounds double, double* %236, i64 6
  %254 = bitcast double* %253 to <2 x double>*
  %255 = load <2 x double>, <2 x double>* %254, align 8
  %256 = shufflevector <2 x double> %255, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %257 = fadd <2 x double> %252, %256
  %258 = getelementptr inbounds double, double* %236, i64 8
  %259 = add i32 %238, -4
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %235

261:                                              ; preds = %235, %214
  %262 = phi <2 x double> [ undef, %214 ], [ %257, %235 ]
  %263 = phi double* [ %2, %214 ], [ %258, %235 ]
  %264 = phi <2 x double> [ zeroinitializer, %214 ], [ %257, %235 ]
  %265 = icmp eq i32 %216, 0
  br i1 %265, label %277, label %266

266:                                              ; preds = %261, %266
  %267 = phi double* [ %274, %266 ], [ %263, %261 ]
  %268 = phi <2 x double> [ %273, %266 ], [ %264, %261 ]
  %269 = phi i32 [ %275, %266 ], [ %216, %261 ]
  %270 = bitcast double* %267 to <2 x double>*
  %271 = load <2 x double>, <2 x double>* %270, align 8
  %272 = shufflevector <2 x double> %271, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %273 = fadd <2 x double> %268, %272
  %274 = getelementptr inbounds double, double* %267, i64 2
  %275 = add i32 %269, -1
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %277, label %266, !llvm.loop !32

277:                                              ; preds = %266, %261
  %278 = phi <2 x double> [ %262, %261 ], [ %273, %266 ]
  %279 = sitofp i32 %0 to double
  %280 = insertelement <2 x double> undef, double %279, i32 0
  %281 = shufflevector <2 x double> %280, <2 x double> undef, <2 x i32> zeroinitializer
  %282 = fdiv <2 x double> %278, %281
  %283 = and i32 %0, 1
  %284 = icmp eq i32 %0, 1
  br i1 %284, label %317, label %285

285:                                              ; preds = %277
  %286 = sub i32 %0, %283
  %287 = shufflevector <2 x double> %282, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %288 = shufflevector <2 x double> %282, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  br label %289

289:                                              ; preds = %289, %285
  %290 = phi double [ 0.000000e+00, %285 ], [ %313, %289 ]
  %291 = phi double* [ %2, %285 ], [ %314, %289 ]
  %292 = phi i32 [ %286, %285 ], [ %315, %289 ]
  %293 = bitcast double* %291 to <2 x double>*
  %294 = load <2 x double>, <2 x double>* %293, align 8
  %295 = fsub <2 x double> %294, %287
  %296 = bitcast double* %291 to <2 x double>*
  store <2 x double> %295, <2 x double>* %296, align 8
  %297 = fmul <2 x double> %295, %295
  %298 = extractelement <2 x double> %297, i32 0
  %299 = extractelement <2 x double> %297, i32 1
  %300 = fadd double %298, %299
  %301 = tail call double @sqrt(double %300) #11
  %302 = fadd double %290, %301
  %303 = getelementptr inbounds double, double* %291, i64 2
  %304 = bitcast double* %303 to <2 x double>*
  %305 = load <2 x double>, <2 x double>* %304, align 8
  %306 = fsub <2 x double> %305, %288
  %307 = bitcast double* %303 to <2 x double>*
  store <2 x double> %306, <2 x double>* %307, align 8
  %308 = fmul <2 x double> %306, %306
  %309 = extractelement <2 x double> %308, i32 0
  %310 = extractelement <2 x double> %308, i32 1
  %311 = fadd double %309, %310
  %312 = tail call double @sqrt(double %311) #11
  %313 = fadd double %302, %312
  %314 = getelementptr inbounds double, double* %291, i64 4
  %315 = add i32 %292, -2
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %317, label %289

317:                                              ; preds = %289, %277
  %318 = phi double [ undef, %277 ], [ %313, %289 ]
  %319 = phi double [ 0.000000e+00, %277 ], [ %313, %289 ]
  %320 = phi double* [ %2, %277 ], [ %314, %289 ]
  %321 = icmp eq i32 %283, 0
  br i1 %321, label %334, label %322

322:                                              ; preds = %317
  %323 = bitcast double* %320 to <2 x double>*
  %324 = load <2 x double>, <2 x double>* %323, align 8
  %325 = shufflevector <2 x double> %282, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %326 = fsub <2 x double> %324, %325
  %327 = bitcast double* %320 to <2 x double>*
  store <2 x double> %326, <2 x double>* %327, align 8
  %328 = fmul <2 x double> %326, %326
  %329 = extractelement <2 x double> %328, i32 0
  %330 = extractelement <2 x double> %328, i32 1
  %331 = fadd double %329, %330
  %332 = tail call double @sqrt(double %331) #11
  %333 = fadd double %319, %332
  br label %334

334:                                              ; preds = %322, %317, %230
  %335 = phi double [ %231, %230 ], [ %279, %317 ], [ %279, %322 ]
  %336 = phi double [ 0.000000e+00, %230 ], [ %318, %317 ], [ %333, %322 ]
  %337 = phi <2 x double> [ %234, %230 ], [ %282, %317 ], [ %282, %322 ]
  %338 = fdiv double %336, %335
  %339 = fcmp oeq double %338, 0.000000e+00
  %340 = fdiv double 0x3FF6A09E667F3BCD, %338
  %341 = select i1 %339, double 1.000000e+00, double %340
  %342 = fsub double -0.000000e+00, %341
  %343 = extractelement <2 x double> %337, i32 1
  %344 = fmul double %343, %342
  %345 = extractelement <2 x double> %337, i32 0
  %346 = fmul double %345, %342
  br i1 %17, label %347, label %477

347:                                              ; preds = %334
  %348 = add i32 %0, -1
  %349 = zext i32 %348 to i64
  %350 = add nuw nsw i64 %349, 1
  %351 = icmp ult i64 %350, 2
  br i1 %351, label %416, label %352

352:                                              ; preds = %347
  %353 = and i64 %350, 8589934590
  %354 = trunc i64 %353 to i32
  %355 = shl nuw nsw i64 %353, 1
  %356 = getelementptr double, double* %2, i64 %355
  %357 = insertelement <2 x double> undef, double %341, i32 0
  %358 = shufflevector <2 x double> %357, <2 x double> undef, <2 x i32> zeroinitializer
  %359 = add nsw i64 %353, -2
  %360 = lshr exact i64 %359, 1
  %361 = add nuw i64 %360, 1
  %362 = and i64 %361, 1
  %363 = icmp eq i64 %359, 0
  br i1 %363, label %399, label %364

364:                                              ; preds = %352
  %365 = sub nuw i64 %361, %362
  br label %366

366:                                              ; preds = %366, %364
  %367 = phi i64 [ 0, %364 ], [ %394, %366 ]
  %368 = phi i64 [ %365, %364 ], [ %395, %366 ]
  %369 = shl i64 %367, 1
  %370 = getelementptr double, double* %2, i64 %369
  %371 = bitcast double* %370 to <4 x double>*
  %372 = load <4 x double>, <4 x double>* %371, align 8
  %373 = shufflevector <4 x double> %372, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %374 = shufflevector <4 x double> %372, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %375 = fmul <2 x double> %358, %373
  %376 = getelementptr inbounds double, double* %370, i64 1
  %377 = fmul <2 x double> %358, %374
  %378 = getelementptr inbounds double, double* %376, i64 -1
  %379 = bitcast double* %378 to <4 x double>*
  %380 = shufflevector <2 x double> %375, <2 x double> %377, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %380, <4 x double>* %379, align 8
  %381 = shl i64 %367, 1
  %382 = or i64 %381, 4
  %383 = getelementptr double, double* %2, i64 %382
  %384 = bitcast double* %383 to <4 x double>*
  %385 = load <4 x double>, <4 x double>* %384, align 8
  %386 = shufflevector <4 x double> %385, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %387 = shufflevector <4 x double> %385, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %388 = fmul <2 x double> %358, %386
  %389 = getelementptr inbounds double, double* %383, i64 1
  %390 = fmul <2 x double> %358, %387
  %391 = getelementptr inbounds double, double* %389, i64 -1
  %392 = bitcast double* %391 to <4 x double>*
  %393 = shufflevector <2 x double> %388, <2 x double> %390, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %393, <4 x double>* %392, align 8
  %394 = add i64 %367, 4
  %395 = add i64 %368, -2
  %396 = icmp eq i64 %395, 0
  br i1 %396, label %397, label %366, !llvm.loop !33

397:                                              ; preds = %366
  %398 = shl i64 %394, 1
  br label %399

399:                                              ; preds = %397, %352
  %400 = phi i64 [ 0, %352 ], [ %398, %397 ]
  %401 = icmp eq i64 %362, 0
  br i1 %401, label %414, label %402

402:                                              ; preds = %399
  %403 = getelementptr double, double* %2, i64 %400
  %404 = bitcast double* %403 to <4 x double>*
  %405 = load <4 x double>, <4 x double>* %404, align 8
  %406 = shufflevector <4 x double> %405, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %407 = shufflevector <4 x double> %405, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %408 = fmul <2 x double> %358, %406
  %409 = getelementptr inbounds double, double* %403, i64 1
  %410 = fmul <2 x double> %358, %407
  %411 = getelementptr inbounds double, double* %409, i64 -1
  %412 = bitcast double* %411 to <4 x double>*
  %413 = shufflevector <2 x double> %408, <2 x double> %410, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %413, <4 x double>* %412, align 8
  br label %414

414:                                              ; preds = %399, %402
  %415 = icmp eq i64 %350, %353
  br i1 %415, label %431, label %416

416:                                              ; preds = %414, %347
  %417 = phi i32 [ 0, %347 ], [ %354, %414 ]
  %418 = phi double* [ %2, %347 ], [ %356, %414 ]
  %419 = insertelement <2 x double> undef, double %341, i32 0
  %420 = shufflevector <2 x double> %419, <2 x double> undef, <2 x i32> zeroinitializer
  br label %421

421:                                              ; preds = %416, %421
  %422 = phi i32 [ %428, %421 ], [ %417, %416 ]
  %423 = phi double* [ %429, %421 ], [ %418, %416 ]
  %424 = bitcast double* %423 to <2 x double>*
  %425 = load <2 x double>, <2 x double>* %424, align 8
  %426 = fmul <2 x double> %420, %425
  %427 = bitcast double* %423 to <2 x double>*
  store <2 x double> %426, <2 x double>* %427, align 8
  %428 = add nuw nsw i32 %422, 1
  %429 = getelementptr inbounds double, double* %423, i64 2
  %430 = icmp eq i32 %428, %0
  br i1 %430, label %431, label %421, !llvm.loop !34

431:                                              ; preds = %421, %414
  br i1 %17, label %432, label %477

432:                                              ; preds = %431
  %433 = zext i32 %0 to i64
  br label %434

434:                                              ; preds = %434, %432
  %435 = phi i64 [ 0, %432 ], [ %475, %434 ]
  %436 = phi double* [ %2, %432 ], [ %438, %434 ]
  %437 = phi double* [ %1, %432 ], [ %443, %434 ]
  %438 = getelementptr inbounds double, double* %436, i64 2
  %439 = bitcast double* %436 to <2 x i64>*
  %440 = load <2 x i64>, <2 x i64>* %439, align 8
  %441 = getelementptr inbounds double, double* %437, i64 1
  %442 = load double, double* %437, align 8
  %443 = getelementptr inbounds double, double* %437, i64 2
  %444 = bitcast double* %441 to i64*
  %445 = load i64, i64* %444, align 8
  %446 = shl nuw nsw i64 %435, 1
  %447 = trunc i64 %435 to i32
  %448 = shl nsw i32 %447, 3
  %449 = zext i32 %448 to i64
  %450 = getelementptr inbounds double, double* %11, i64 %449
  store double %442, double* %450, align 8
  %451 = or i32 %448, 1
  %452 = zext i32 %451 to i64
  %453 = getelementptr inbounds double, double* %11, i64 %452
  %454 = bitcast double* %453 to i64*
  store i64 %445, i64* %454, align 8
  %455 = or i32 %448, 2
  %456 = zext i32 %455 to i64
  %457 = getelementptr inbounds double, double* %11, i64 %456
  %458 = bitcast double* %457 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 0.000000e+00>, <2 x double>* %458, align 8
  %459 = trunc i64 %435 to i32
  %460 = shl i32 %459, 3
  %461 = or i32 %460, 4
  %462 = zext i32 %461 to i64
  %463 = getelementptr inbounds double, double* %11, i64 %462
  %464 = bitcast double* %463 to i64*
  store i64 %445, i64* %464, align 8
  %465 = fsub double -0.000000e+00, %442
  %466 = or i32 %460, 5
  %467 = zext i32 %466 to i64
  %468 = getelementptr inbounds double, double* %11, i64 %467
  store double %465, double* %468, align 8
  %469 = or i32 %460, 6
  %470 = zext i32 %469 to i64
  %471 = getelementptr inbounds double, double* %11, i64 %470
  %472 = bitcast double* %471 to <2 x double>*
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, <2 x double>* %472, align 8
  %473 = getelementptr inbounds double, double* %14, i64 %446
  %474 = bitcast double* %473 to <2 x i64>*
  store <2 x i64> %440, <2 x i64>* %474, align 8
  %475 = add nuw nsw i64 %435, 1
  %476 = icmp eq i64 %475, %433
  br i1 %476, label %477, label %434

477:                                              ; preds = %434, %334, %431
  %478 = tail call fastcc i32 @least_squares(i32 4, double* %11, i32 %5, i32 4, double* %14, double* %16, double* %3)
  %479 = icmp eq i32 %478, 0
  br i1 %479, label %577, label %480

480:                                              ; preds = %477
  %481 = load double, double* %3, align 8
  %482 = getelementptr inbounds double, double* %3, i64 1
  %483 = load double, double* %482, align 8
  %484 = getelementptr inbounds double, double* %3, i64 2
  %485 = load double, double* %484, align 8
  %486 = fsub double -0.000000e+00, %483
  %487 = getelementptr inbounds double, double* %3, i64 3
  %488 = load double, double* %487, align 8
  %489 = fdiv double 1.000000e+00, %341
  %490 = fmul double %344, %489
  %491 = insertelement <2 x double> <double -0.000000e+00, double undef>, double %489, i32 1
  %492 = insertelement <2 x double> undef, double %490, i32 0
  %493 = insertelement <2 x double> %492, double %346, i32 1
  %494 = fsub <2 x double> %491, %493
  %495 = fmul <2 x double> %491, %493
  %496 = shufflevector <2 x double> %494, <2 x double> %495, <2 x i32> <i32 0, i32 3>
  %497 = fmul double %485, 0.000000e+00
  %498 = insertelement <2 x double> undef, double %481, i32 0
  %499 = insertelement <2 x double> %498, double %135, i32 1
  %500 = insertelement <2 x double> <double 0.000000e+00, double undef>, double %481, i32 1
  %501 = fmul <2 x double> %499, %500
  %502 = fadd <2 x double> %501, zeroinitializer
  %503 = shufflevector <2 x double> %502, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %504 = fmul double %135, %483
  %505 = insertelement <2 x double> undef, double %135, i32 0
  %506 = insertelement <2 x double> %505, double %483, i32 1
  %507 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %486, i32 0
  %508 = fmul <2 x double> %506, %507
  %509 = extractelement <2 x double> %508, i32 1
  %510 = insertelement <2 x double> undef, double %509, i32 0
  %511 = insertelement <2 x double> %510, double %504, i32 1
  %512 = fadd <2 x double> %503, %511
  %513 = insertelement <2 x double> undef, double %497, i32 0
  %514 = shufflevector <2 x double> %513, <2 x double> undef, <2 x i32> zeroinitializer
  %515 = fadd <2 x double> %512, %514
  %516 = fmul double %138, %481
  %517 = fadd double %516, 0.000000e+00
  %518 = fmul double %140, %483
  %519 = fadd double %517, %518
  %520 = fadd double %485, %519
  %521 = fmul double %488, 0.000000e+00
  %522 = fadd <2 x double> %508, <double 0.000000e+00, double undef>
  %523 = fsub <2 x double> <double undef, double 0.000000e+00>, %508
  %524 = shufflevector <2 x double> %522, <2 x double> %523, <2 x i32> <i32 0, i32 3>
  %525 = fadd <2 x double> %501, %524
  %526 = insertelement <2 x double> undef, double %521, i32 0
  %527 = shufflevector <2 x double> %526, <2 x double> undef, <2 x i32> zeroinitializer
  %528 = fadd <2 x double> %525, %527
  %529 = fmul double %138, %486
  %530 = fadd double %529, 0.000000e+00
  %531 = fmul double %140, %481
  %532 = fadd double %531, %530
  %533 = fadd double %488, %532
  %534 = fmul double %135, 0.000000e+00
  %535 = fadd double %534, 0.000000e+00
  %536 = fmul double %138, 0.000000e+00
  %537 = fadd double %536, 0.000000e+00
  %538 = fmul double %140, 0.000000e+00
  %539 = fadd double %538, %537
  %540 = fadd double %539, 1.000000e+00
  %541 = extractelement <2 x double> %494, i32 0
  %542 = fmul double %535, %541
  %543 = insertelement <2 x double> undef, double %489, i32 0
  %544 = shufflevector <2 x double> %543, <2 x double> undef, <2 x i32> zeroinitializer
  %545 = fmul <2 x double> %544, %515
  %546 = fadd <2 x double> %545, zeroinitializer
  %547 = fmul <2 x double> %528, zeroinitializer
  %548 = fadd <2 x double> %547, %546
  %549 = insertelement <2 x double> undef, double %542, i32 0
  %550 = shufflevector <2 x double> %549, <2 x double> undef, <2 x i32> zeroinitializer
  %551 = fadd <2 x double> %550, %548
  %552 = insertelement <2 x double> %543, double 0.000000e+00, i32 1
  %553 = insertelement <2 x double> undef, double %520, i32 0
  %554 = shufflevector <2 x double> %553, <2 x double> undef, <2 x i32> zeroinitializer
  %555 = fmul <2 x double> %552, %554
  %556 = fadd <2 x double> %555, zeroinitializer
  %557 = insertelement <2 x double> undef, double %533, i32 0
  %558 = shufflevector <2 x double> %557, <2 x double> undef, <2 x i32> zeroinitializer
  %559 = insertelement <2 x double> <double 0.000000e+00, double undef>, double %489, i32 1
  %560 = fmul <2 x double> %558, %559
  %561 = fadd <2 x double> %560, %556
  %562 = insertelement <2 x double> undef, double %540, i32 0
  %563 = shufflevector <2 x double> %562, <2 x double> undef, <2 x i32> zeroinitializer
  %564 = fmul <2 x double> %563, %496
  %565 = fadd <2 x double> %561, %564
  %566 = fsub <2 x double> %561, %564
  %567 = shufflevector <2 x double> %565, <2 x double> %566, <2 x i32> <i32 0, i32 3>
  %568 = bitcast double* %3 to <2 x double>*
  store <2 x double> %567, <2 x double>* %568, align 8
  %569 = bitcast double* %484 to <2 x double>*
  store <2 x double> %551, <2 x double>* %569, align 8
  %570 = extractelement <2 x double> %551, i32 1
  %571 = fsub double -0.000000e+00, %570
  %572 = getelementptr inbounds double, double* %3, i64 4
  store double %571, double* %572, align 8
  %573 = getelementptr inbounds double, double* %3, i64 5
  %574 = extractelement <2 x double> %551, i32 0
  store double %574, double* %573, align 8
  %575 = getelementptr inbounds double, double* %3, i64 6
  %576 = bitcast double* %575 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %576, i8 0, i64 16, i1 false) #11
  br label %577

577:                                              ; preds = %477, %480
  %578 = phi i32 [ 0, %480 ], [ 1, %477 ]
  tail call void @aom_free(i8* %10) #11
  ret i32 %578
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @project_points_double_rotzoom(double* nocapture readonly, double* nocapture readonly, double* nocapture, i32, i32, i32) #3 {
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %44

8:                                                ; preds = %6
  %9 = getelementptr inbounds double, double* %0, i64 2
  %10 = getelementptr inbounds double, double* %0, i64 3
  %11 = getelementptr inbounds double, double* %0, i64 1
  %12 = add nsw i32 %4, -2
  %13 = sext i32 %12 to i64
  %14 = add nsw i32 %5, -2
  %15 = sext i32 %14 to i64
  br label %16

16:                                               ; preds = %16, %8
  %17 = phi double* [ %1, %8 ], [ %40, %16 ]
  %18 = phi double* [ %2, %8 ], [ %41, %16 ]
  %19 = phi i32 [ 0, %8 ], [ %42, %16 ]
  %20 = getelementptr inbounds double, double* %17, i64 1
  %21 = load double, double* %17, align 8
  %22 = getelementptr inbounds double, double* %17, i64 2
  %23 = load double, double* %20, align 8
  %24 = load double, double* %9, align 8
  %25 = fmul double %21, %24
  %26 = load double, double* %10, align 8
  %27 = fmul double %23, %26
  %28 = fadd double %25, %27
  %29 = load double, double* %0, align 8
  %30 = fadd double %29, %28
  %31 = getelementptr inbounds double, double* %18, i64 1
  store double %30, double* %18, align 8
  %32 = load double, double* %10, align 8
  %33 = fmul double %21, %32
  %34 = load double, double* %9, align 8
  %35 = fmul double %23, %34
  %36 = fsub double %35, %33
  %37 = load double, double* %11, align 8
  %38 = fadd double %37, %36
  %39 = getelementptr inbounds double, double* %18, i64 2
  store double %38, double* %31, align 8
  %40 = getelementptr inbounds double, double* %22, i64 %13
  %41 = getelementptr inbounds double, double* %39, i64 %15
  %42 = add nuw nsw i32 %19, 1
  %43 = icmp eq i32 %42, %3
  br i1 %43, label %44, label %16

44:                                               ; preds = %16, %6
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @is_degenerate_translation(double* nocapture readonly) #8 {
  %2 = getelementptr inbounds double, double* %0, i64 2
  %3 = bitcast double* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = bitcast double* %2 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = fsub <2 x double> %4, %6
  %8 = fmul <2 x double> %7, %7
  %9 = extractelement <2 x double> %8, i32 0
  %10 = extractelement <2 x double> %8, i32 1
  %11 = fadd double %9, %10
  %12 = fcmp ole double %11, 2.000000e+00
  %13 = zext i1 %12 to i32
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @find_translation(i32, double* nocapture, double* nocapture, double* nocapture) #1 {
  %5 = icmp sgt i32 %0, 0
  br i1 %5, label %6, label %12

6:                                                ; preds = %4
  %7 = add i32 %0, -1
  %8 = and i32 %0, 3
  %9 = icmp ult i32 %7, 3
  br i1 %9, label %43, label %10

10:                                               ; preds = %6
  %11 = sub i32 %0, %8
  br label %17

12:                                               ; preds = %4
  %13 = sitofp i32 %0 to double
  %14 = fdiv double 0.000000e+00, %13
  %15 = insertelement <2 x double> undef, double %14, i32 0
  %16 = shufflevector <2 x double> %15, <2 x double> undef, <2 x i32> zeroinitializer
  br label %116

17:                                               ; preds = %17, %10
  %18 = phi double* [ %1, %10 ], [ %40, %17 ]
  %19 = phi <2 x double> [ zeroinitializer, %10 ], [ %39, %17 ]
  %20 = phi i32 [ %11, %10 ], [ %41, %17 ]
  %21 = bitcast double* %18 to <2 x double>*
  %22 = load <2 x double>, <2 x double>* %21, align 8
  %23 = shufflevector <2 x double> %22, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %24 = fadd <2 x double> %19, %23
  %25 = getelementptr inbounds double, double* %18, i64 2
  %26 = bitcast double* %25 to <2 x double>*
  %27 = load <2 x double>, <2 x double>* %26, align 8
  %28 = shufflevector <2 x double> %27, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %29 = fadd <2 x double> %24, %28
  %30 = getelementptr inbounds double, double* %18, i64 4
  %31 = bitcast double* %30 to <2 x double>*
  %32 = load <2 x double>, <2 x double>* %31, align 8
  %33 = shufflevector <2 x double> %32, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %34 = fadd <2 x double> %29, %33
  %35 = getelementptr inbounds double, double* %18, i64 6
  %36 = bitcast double* %35 to <2 x double>*
  %37 = load <2 x double>, <2 x double>* %36, align 8
  %38 = shufflevector <2 x double> %37, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %39 = fadd <2 x double> %34, %38
  %40 = getelementptr inbounds double, double* %18, i64 8
  %41 = add i32 %20, -4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %17

43:                                               ; preds = %17, %6
  %44 = phi <2 x double> [ undef, %6 ], [ %39, %17 ]
  %45 = phi double* [ %1, %6 ], [ %40, %17 ]
  %46 = phi <2 x double> [ zeroinitializer, %6 ], [ %39, %17 ]
  %47 = icmp eq i32 %8, 0
  br i1 %47, label %59, label %48

48:                                               ; preds = %43, %48
  %49 = phi double* [ %56, %48 ], [ %45, %43 ]
  %50 = phi <2 x double> [ %55, %48 ], [ %46, %43 ]
  %51 = phi i32 [ %57, %48 ], [ %8, %43 ]
  %52 = bitcast double* %49 to <2 x double>*
  %53 = load <2 x double>, <2 x double>* %52, align 8
  %54 = shufflevector <2 x double> %53, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %55 = fadd <2 x double> %50, %54
  %56 = getelementptr inbounds double, double* %49, i64 2
  %57 = add i32 %51, -1
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %48, !llvm.loop !35

59:                                               ; preds = %48, %43
  %60 = phi <2 x double> [ %44, %43 ], [ %55, %48 ]
  %61 = sitofp i32 %0 to double
  %62 = insertelement <2 x double> undef, double %61, i32 0
  %63 = shufflevector <2 x double> %62, <2 x double> undef, <2 x i32> zeroinitializer
  %64 = fdiv <2 x double> %60, %63
  %65 = and i32 %0, 1
  %66 = icmp eq i32 %0, 1
  br i1 %66, label %99, label %67

67:                                               ; preds = %59
  %68 = sub i32 %0, %65
  %69 = shufflevector <2 x double> %64, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %70 = shufflevector <2 x double> %64, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  br label %71

71:                                               ; preds = %71, %67
  %72 = phi double [ 0.000000e+00, %67 ], [ %95, %71 ]
  %73 = phi double* [ %1, %67 ], [ %96, %71 ]
  %74 = phi i32 [ %68, %67 ], [ %97, %71 ]
  %75 = bitcast double* %73 to <2 x double>*
  %76 = load <2 x double>, <2 x double>* %75, align 8
  %77 = fsub <2 x double> %76, %69
  %78 = bitcast double* %73 to <2 x double>*
  store <2 x double> %77, <2 x double>* %78, align 8
  %79 = fmul <2 x double> %77, %77
  %80 = extractelement <2 x double> %79, i32 0
  %81 = extractelement <2 x double> %79, i32 1
  %82 = fadd double %80, %81
  %83 = tail call double @sqrt(double %82) #11
  %84 = fadd double %72, %83
  %85 = getelementptr inbounds double, double* %73, i64 2
  %86 = bitcast double* %85 to <2 x double>*
  %87 = load <2 x double>, <2 x double>* %86, align 8
  %88 = fsub <2 x double> %87, %70
  %89 = bitcast double* %85 to <2 x double>*
  store <2 x double> %88, <2 x double>* %89, align 8
  %90 = fmul <2 x double> %88, %88
  %91 = extractelement <2 x double> %90, i32 0
  %92 = extractelement <2 x double> %90, i32 1
  %93 = fadd double %91, %92
  %94 = tail call double @sqrt(double %93) #11
  %95 = fadd double %84, %94
  %96 = getelementptr inbounds double, double* %73, i64 4
  %97 = add i32 %74, -2
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %71

99:                                               ; preds = %71, %59
  %100 = phi double [ undef, %59 ], [ %95, %71 ]
  %101 = phi double [ 0.000000e+00, %59 ], [ %95, %71 ]
  %102 = phi double* [ %1, %59 ], [ %96, %71 ]
  %103 = icmp eq i32 %65, 0
  br i1 %103, label %116, label %104

104:                                              ; preds = %99
  %105 = bitcast double* %102 to <2 x double>*
  %106 = load <2 x double>, <2 x double>* %105, align 8
  %107 = shufflevector <2 x double> %64, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %108 = fsub <2 x double> %106, %107
  %109 = bitcast double* %102 to <2 x double>*
  store <2 x double> %108, <2 x double>* %109, align 8
  %110 = fmul <2 x double> %108, %108
  %111 = extractelement <2 x double> %110, i32 0
  %112 = extractelement <2 x double> %110, i32 1
  %113 = fadd double %111, %112
  %114 = tail call double @sqrt(double %113) #11
  %115 = fadd double %101, %114
  br label %116

116:                                              ; preds = %104, %99, %12
  %117 = phi double [ %13, %12 ], [ %61, %99 ], [ %61, %104 ]
  %118 = phi double [ 0.000000e+00, %12 ], [ %100, %99 ], [ %115, %104 ]
  %119 = phi <2 x double> [ %16, %12 ], [ %64, %99 ], [ %64, %104 ]
  %120 = fdiv double %118, %117
  %121 = fcmp oeq double %120, 0.000000e+00
  %122 = fdiv double 0x3FF6A09E667F3BCD, %120
  %123 = select i1 %121, double 1.000000e+00, double %122
  %124 = fsub double -0.000000e+00, %123
  %125 = extractelement <2 x double> %119, i32 1
  %126 = fmul double %125, %124
  %127 = extractelement <2 x double> %119, i32 0
  %128 = fmul double %127, %124
  br i1 %5, label %129, label %218

129:                                              ; preds = %116
  %130 = add i32 %0, -1
  %131 = zext i32 %130 to i64
  %132 = add nuw nsw i64 %131, 1
  %133 = icmp ult i64 %132, 2
  br i1 %133, label %134, label %139

134:                                              ; preds = %200, %129
  %135 = phi i32 [ 0, %129 ], [ %141, %200 ]
  %136 = phi double* [ %1, %129 ], [ %143, %200 ]
  %137 = insertelement <2 x double> undef, double %123, i32 0
  %138 = shufflevector <2 x double> %137, <2 x double> undef, <2 x i32> zeroinitializer
  br label %208

139:                                              ; preds = %129
  %140 = and i64 %132, 8589934590
  %141 = trunc i64 %140 to i32
  %142 = shl nuw nsw i64 %140, 1
  %143 = getelementptr double, double* %1, i64 %142
  %144 = insertelement <2 x double> undef, double %123, i32 0
  %145 = shufflevector <2 x double> %144, <2 x double> undef, <2 x i32> zeroinitializer
  %146 = add nsw i64 %140, -2
  %147 = lshr exact i64 %146, 1
  %148 = add nuw i64 %147, 1
  %149 = and i64 %148, 1
  %150 = icmp eq i64 %146, 0
  br i1 %150, label %184, label %151

151:                                              ; preds = %139
  %152 = sub nuw i64 %148, %149
  br label %153

153:                                              ; preds = %153, %151
  %154 = phi i64 [ 0, %151 ], [ %181, %153 ]
  %155 = phi i64 [ %152, %151 ], [ %182, %153 ]
  %156 = shl i64 %154, 1
  %157 = getelementptr double, double* %1, i64 %156
  %158 = bitcast double* %157 to <4 x double>*
  %159 = load <4 x double>, <4 x double>* %158, align 8
  %160 = shufflevector <4 x double> %159, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %161 = shufflevector <4 x double> %159, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %162 = fmul <2 x double> %145, %160
  %163 = getelementptr inbounds double, double* %157, i64 1
  %164 = fmul <2 x double> %145, %161
  %165 = getelementptr inbounds double, double* %163, i64 -1
  %166 = bitcast double* %165 to <4 x double>*
  %167 = shufflevector <2 x double> %162, <2 x double> %164, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %167, <4 x double>* %166, align 8
  %168 = shl i64 %154, 1
  %169 = or i64 %168, 4
  %170 = getelementptr double, double* %1, i64 %169
  %171 = bitcast double* %170 to <4 x double>*
  %172 = load <4 x double>, <4 x double>* %171, align 8
  %173 = shufflevector <4 x double> %172, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %174 = shufflevector <4 x double> %172, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %175 = fmul <2 x double> %145, %173
  %176 = getelementptr inbounds double, double* %170, i64 1
  %177 = fmul <2 x double> %145, %174
  %178 = getelementptr inbounds double, double* %176, i64 -1
  %179 = bitcast double* %178 to <4 x double>*
  %180 = shufflevector <2 x double> %175, <2 x double> %177, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %180, <4 x double>* %179, align 8
  %181 = add i64 %154, 4
  %182 = add i64 %155, -2
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %153, !llvm.loop !36

184:                                              ; preds = %153, %139
  %185 = phi i64 [ 0, %139 ], [ %181, %153 ]
  %186 = icmp eq i64 %149, 0
  br i1 %186, label %200, label %187

187:                                              ; preds = %184
  %188 = shl i64 %185, 1
  %189 = getelementptr double, double* %1, i64 %188
  %190 = bitcast double* %189 to <4 x double>*
  %191 = load <4 x double>, <4 x double>* %190, align 8
  %192 = shufflevector <4 x double> %191, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %193 = shufflevector <4 x double> %191, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %194 = fmul <2 x double> %145, %192
  %195 = getelementptr inbounds double, double* %189, i64 1
  %196 = fmul <2 x double> %145, %193
  %197 = getelementptr inbounds double, double* %195, i64 -1
  %198 = bitcast double* %197 to <4 x double>*
  %199 = shufflevector <2 x double> %194, <2 x double> %196, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %199, <4 x double>* %198, align 8
  br label %200

200:                                              ; preds = %184, %187
  %201 = icmp eq i64 %132, %140
  br i1 %201, label %202, label %134

202:                                              ; preds = %208, %200
  %203 = add i32 %0, -1
  %204 = and i32 %0, 7
  %205 = icmp ult i32 %203, 7
  br i1 %205, label %261, label %206

206:                                              ; preds = %202
  %207 = sub i32 %0, %204
  br label %223

208:                                              ; preds = %134, %208
  %209 = phi i32 [ %215, %208 ], [ %135, %134 ]
  %210 = phi double* [ %216, %208 ], [ %136, %134 ]
  %211 = bitcast double* %210 to <2 x double>*
  %212 = load <2 x double>, <2 x double>* %211, align 8
  %213 = fmul <2 x double> %138, %212
  %214 = bitcast double* %210 to <2 x double>*
  store <2 x double> %213, <2 x double>* %214, align 8
  %215 = add nuw nsw i32 %209, 1
  %216 = getelementptr inbounds double, double* %210, i64 2
  %217 = icmp eq i32 %215, %0
  br i1 %217, label %202, label %208, !llvm.loop !37

218:                                              ; preds = %116
  %219 = sitofp i32 %0 to double
  %220 = fdiv double 0.000000e+00, %219
  %221 = insertelement <2 x double> undef, double %220, i32 0
  %222 = shufflevector <2 x double> %221, <2 x double> undef, <2 x i32> zeroinitializer
  br label %330

223:                                              ; preds = %223, %206
  %224 = phi double* [ %2, %206 ], [ %258, %223 ]
  %225 = phi <2 x double> [ zeroinitializer, %206 ], [ %257, %223 ]
  %226 = phi i32 [ %207, %206 ], [ %259, %223 ]
  %227 = bitcast double* %224 to <2 x double>*
  %228 = load <2 x double>, <2 x double>* %227, align 8
  %229 = fadd <2 x double> %225, %228
  %230 = getelementptr inbounds double, double* %224, i64 2
  %231 = bitcast double* %230 to <2 x double>*
  %232 = load <2 x double>, <2 x double>* %231, align 8
  %233 = fadd <2 x double> %229, %232
  %234 = getelementptr inbounds double, double* %224, i64 4
  %235 = bitcast double* %234 to <2 x double>*
  %236 = load <2 x double>, <2 x double>* %235, align 8
  %237 = fadd <2 x double> %233, %236
  %238 = getelementptr inbounds double, double* %224, i64 6
  %239 = bitcast double* %238 to <2 x double>*
  %240 = load <2 x double>, <2 x double>* %239, align 8
  %241 = fadd <2 x double> %237, %240
  %242 = getelementptr inbounds double, double* %224, i64 8
  %243 = bitcast double* %242 to <2 x double>*
  %244 = load <2 x double>, <2 x double>* %243, align 8
  %245 = fadd <2 x double> %241, %244
  %246 = getelementptr inbounds double, double* %224, i64 10
  %247 = bitcast double* %246 to <2 x double>*
  %248 = load <2 x double>, <2 x double>* %247, align 8
  %249 = fadd <2 x double> %245, %248
  %250 = getelementptr inbounds double, double* %224, i64 12
  %251 = bitcast double* %250 to <2 x double>*
  %252 = load <2 x double>, <2 x double>* %251, align 8
  %253 = fadd <2 x double> %249, %252
  %254 = getelementptr inbounds double, double* %224, i64 14
  %255 = bitcast double* %254 to <2 x double>*
  %256 = load <2 x double>, <2 x double>* %255, align 8
  %257 = fadd <2 x double> %253, %256
  %258 = getelementptr inbounds double, double* %224, i64 16
  %259 = add i32 %226, -8
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %223

261:                                              ; preds = %223, %202
  %262 = phi <2 x double> [ undef, %202 ], [ %257, %223 ]
  %263 = phi double* [ %2, %202 ], [ %258, %223 ]
  %264 = phi <2 x double> [ zeroinitializer, %202 ], [ %257, %223 ]
  %265 = icmp eq i32 %204, 0
  br i1 %265, label %276, label %266

266:                                              ; preds = %261, %266
  %267 = phi double* [ %273, %266 ], [ %263, %261 ]
  %268 = phi <2 x double> [ %272, %266 ], [ %264, %261 ]
  %269 = phi i32 [ %274, %266 ], [ %204, %261 ]
  %270 = bitcast double* %267 to <2 x double>*
  %271 = load <2 x double>, <2 x double>* %270, align 8
  %272 = fadd <2 x double> %268, %271
  %273 = getelementptr inbounds double, double* %267, i64 2
  %274 = add i32 %269, -1
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %276, label %266, !llvm.loop !38

276:                                              ; preds = %266, %261
  %277 = phi <2 x double> [ %262, %261 ], [ %272, %266 ]
  %278 = sitofp i32 %0 to double
  %279 = insertelement <2 x double> undef, double %278, i32 0
  %280 = shufflevector <2 x double> %279, <2 x double> undef, <2 x i32> zeroinitializer
  %281 = fdiv <2 x double> %277, %280
  %282 = and i32 %0, 1
  %283 = icmp eq i32 %0, 1
  br i1 %283, label %314, label %284

284:                                              ; preds = %276
  %285 = sub i32 %0, %282
  br label %286

286:                                              ; preds = %286, %284
  %287 = phi double [ 0.000000e+00, %284 ], [ %310, %286 ]
  %288 = phi double* [ %2, %284 ], [ %311, %286 ]
  %289 = phi i32 [ %285, %284 ], [ %312, %286 ]
  %290 = bitcast double* %288 to <2 x double>*
  %291 = load <2 x double>, <2 x double>* %290, align 8
  %292 = fsub <2 x double> %291, %281
  %293 = bitcast double* %288 to <2 x double>*
  store <2 x double> %292, <2 x double>* %293, align 8
  %294 = fmul <2 x double> %292, %292
  %295 = extractelement <2 x double> %294, i32 0
  %296 = extractelement <2 x double> %294, i32 1
  %297 = fadd double %295, %296
  %298 = tail call double @sqrt(double %297) #11
  %299 = fadd double %287, %298
  %300 = getelementptr inbounds double, double* %288, i64 2
  %301 = bitcast double* %300 to <2 x double>*
  %302 = load <2 x double>, <2 x double>* %301, align 8
  %303 = fsub <2 x double> %302, %281
  %304 = bitcast double* %300 to <2 x double>*
  store <2 x double> %303, <2 x double>* %304, align 8
  %305 = fmul <2 x double> %303, %303
  %306 = extractelement <2 x double> %305, i32 0
  %307 = extractelement <2 x double> %305, i32 1
  %308 = fadd double %306, %307
  %309 = tail call double @sqrt(double %308) #11
  %310 = fadd double %299, %309
  %311 = getelementptr inbounds double, double* %288, i64 4
  %312 = add i32 %289, -2
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %314, label %286

314:                                              ; preds = %286, %276
  %315 = phi double [ undef, %276 ], [ %310, %286 ]
  %316 = phi double [ 0.000000e+00, %276 ], [ %310, %286 ]
  %317 = phi double* [ %2, %276 ], [ %311, %286 ]
  %318 = icmp eq i32 %282, 0
  br i1 %318, label %330, label %319

319:                                              ; preds = %314
  %320 = bitcast double* %317 to <2 x double>*
  %321 = load <2 x double>, <2 x double>* %320, align 8
  %322 = fsub <2 x double> %321, %281
  %323 = bitcast double* %317 to <2 x double>*
  store <2 x double> %322, <2 x double>* %323, align 8
  %324 = fmul <2 x double> %322, %322
  %325 = extractelement <2 x double> %324, i32 0
  %326 = extractelement <2 x double> %324, i32 1
  %327 = fadd double %325, %326
  %328 = tail call double @sqrt(double %327) #11
  %329 = fadd double %316, %328
  br label %330

330:                                              ; preds = %319, %314, %218
  %331 = phi double [ %219, %218 ], [ %278, %314 ], [ %278, %319 ]
  %332 = phi double [ 0.000000e+00, %218 ], [ %315, %314 ], [ %329, %319 ]
  %333 = phi <2 x double> [ %222, %218 ], [ %281, %314 ], [ %281, %319 ]
  %334 = fdiv double %332, %331
  %335 = fcmp oeq double %334, 0.000000e+00
  %336 = fdiv double 0x3FF6A09E667F3BCD, %334
  %337 = select i1 %335, double 1.000000e+00, double %336
  %338 = fsub double -0.000000e+00, %337
  %339 = insertelement <2 x double> undef, double %338, i32 0
  %340 = shufflevector <2 x double> %339, <2 x double> undef, <2 x i32> zeroinitializer
  %341 = fmul <2 x double> %333, %340
  br i1 %5, label %342, label %493

342:                                              ; preds = %330
  %343 = add i32 %0, -1
  %344 = zext i32 %343 to i64
  %345 = add nuw nsw i64 %344, 1
  %346 = icmp ult i64 %345, 2
  br i1 %346, label %411, label %347

347:                                              ; preds = %342
  %348 = and i64 %345, 8589934590
  %349 = trunc i64 %348 to i32
  %350 = shl nuw nsw i64 %348, 1
  %351 = getelementptr double, double* %2, i64 %350
  %352 = insertelement <2 x double> undef, double %337, i32 0
  %353 = shufflevector <2 x double> %352, <2 x double> undef, <2 x i32> zeroinitializer
  %354 = add nsw i64 %348, -2
  %355 = lshr exact i64 %354, 1
  %356 = add nuw i64 %355, 1
  %357 = and i64 %356, 1
  %358 = icmp eq i64 %354, 0
  br i1 %358, label %394, label %359

359:                                              ; preds = %347
  %360 = sub nuw i64 %356, %357
  br label %361

361:                                              ; preds = %361, %359
  %362 = phi i64 [ 0, %359 ], [ %389, %361 ]
  %363 = phi i64 [ %360, %359 ], [ %390, %361 ]
  %364 = shl i64 %362, 1
  %365 = getelementptr double, double* %2, i64 %364
  %366 = bitcast double* %365 to <4 x double>*
  %367 = load <4 x double>, <4 x double>* %366, align 8
  %368 = shufflevector <4 x double> %367, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %369 = shufflevector <4 x double> %367, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %370 = fmul <2 x double> %353, %368
  %371 = getelementptr inbounds double, double* %365, i64 1
  %372 = fmul <2 x double> %353, %369
  %373 = getelementptr inbounds double, double* %371, i64 -1
  %374 = bitcast double* %373 to <4 x double>*
  %375 = shufflevector <2 x double> %370, <2 x double> %372, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %375, <4 x double>* %374, align 8
  %376 = shl i64 %362, 1
  %377 = or i64 %376, 4
  %378 = getelementptr double, double* %2, i64 %377
  %379 = bitcast double* %378 to <4 x double>*
  %380 = load <4 x double>, <4 x double>* %379, align 8
  %381 = shufflevector <4 x double> %380, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %382 = shufflevector <4 x double> %380, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %383 = fmul <2 x double> %353, %381
  %384 = getelementptr inbounds double, double* %378, i64 1
  %385 = fmul <2 x double> %353, %382
  %386 = getelementptr inbounds double, double* %384, i64 -1
  %387 = bitcast double* %386 to <4 x double>*
  %388 = shufflevector <2 x double> %383, <2 x double> %385, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %388, <4 x double>* %387, align 8
  %389 = add i64 %362, 4
  %390 = add i64 %363, -2
  %391 = icmp eq i64 %390, 0
  br i1 %391, label %392, label %361, !llvm.loop !39

392:                                              ; preds = %361
  %393 = shl i64 %389, 1
  br label %394

394:                                              ; preds = %392, %347
  %395 = phi i64 [ 0, %347 ], [ %393, %392 ]
  %396 = icmp eq i64 %357, 0
  br i1 %396, label %409, label %397

397:                                              ; preds = %394
  %398 = getelementptr double, double* %2, i64 %395
  %399 = bitcast double* %398 to <4 x double>*
  %400 = load <4 x double>, <4 x double>* %399, align 8
  %401 = shufflevector <4 x double> %400, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %402 = shufflevector <4 x double> %400, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %403 = fmul <2 x double> %353, %401
  %404 = getelementptr inbounds double, double* %398, i64 1
  %405 = fmul <2 x double> %353, %402
  %406 = getelementptr inbounds double, double* %404, i64 -1
  %407 = bitcast double* %406 to <4 x double>*
  %408 = shufflevector <2 x double> %403, <2 x double> %405, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %408, <4 x double>* %407, align 8
  br label %409

409:                                              ; preds = %394, %397
  %410 = icmp eq i64 %345, %348
  br i1 %410, label %426, label %411

411:                                              ; preds = %409, %342
  %412 = phi i32 [ 0, %342 ], [ %349, %409 ]
  %413 = phi double* [ %2, %342 ], [ %351, %409 ]
  %414 = insertelement <2 x double> undef, double %337, i32 0
  %415 = shufflevector <2 x double> %414, <2 x double> undef, <2 x i32> zeroinitializer
  br label %416

416:                                              ; preds = %411, %416
  %417 = phi i32 [ %423, %416 ], [ %412, %411 ]
  %418 = phi double* [ %424, %416 ], [ %413, %411 ]
  %419 = bitcast double* %418 to <2 x double>*
  %420 = load <2 x double>, <2 x double>* %419, align 8
  %421 = fmul <2 x double> %415, %420
  %422 = bitcast double* %418 to <2 x double>*
  store <2 x double> %421, <2 x double>* %422, align 8
  %423 = add nuw nsw i32 %417, 1
  %424 = getelementptr inbounds double, double* %418, i64 2
  %425 = icmp eq i32 %423, %0
  br i1 %425, label %426, label %416, !llvm.loop !40

426:                                              ; preds = %416, %409
  br i1 %5, label %427, label %493

427:                                              ; preds = %426
  %428 = add i32 %0, -1
  %429 = and i32 %0, 3
  %430 = icmp ult i32 %428, 3
  br i1 %430, label %472, label %431

431:                                              ; preds = %427
  %432 = sub i32 %0, %429
  br label %433

433:                                              ; preds = %433, %431
  %434 = phi double* [ %1, %431 ], [ %465, %433 ]
  %435 = phi double* [ %2, %431 ], [ %462, %433 ]
  %436 = phi <2 x double> [ zeroinitializer, %431 ], [ %469, %433 ]
  %437 = phi i32 [ %432, %431 ], [ %470, %433 ]
  %438 = getelementptr inbounds double, double* %435, i64 2
  %439 = bitcast double* %435 to <2 x double>*
  %440 = load <2 x double>, <2 x double>* %439, align 8
  %441 = getelementptr inbounds double, double* %434, i64 2
  %442 = bitcast double* %434 to <2 x double>*
  %443 = load <2 x double>, <2 x double>* %442, align 8
  %444 = fsub <2 x double> %440, %443
  %445 = fadd <2 x double> %436, %444
  %446 = getelementptr inbounds double, double* %435, i64 4
  %447 = bitcast double* %438 to <2 x double>*
  %448 = load <2 x double>, <2 x double>* %447, align 8
  %449 = getelementptr inbounds double, double* %434, i64 4
  %450 = bitcast double* %441 to <2 x double>*
  %451 = load <2 x double>, <2 x double>* %450, align 8
  %452 = fsub <2 x double> %448, %451
  %453 = fadd <2 x double> %445, %452
  %454 = getelementptr inbounds double, double* %435, i64 6
  %455 = bitcast double* %446 to <2 x double>*
  %456 = load <2 x double>, <2 x double>* %455, align 8
  %457 = getelementptr inbounds double, double* %434, i64 6
  %458 = bitcast double* %449 to <2 x double>*
  %459 = load <2 x double>, <2 x double>* %458, align 8
  %460 = fsub <2 x double> %456, %459
  %461 = fadd <2 x double> %453, %460
  %462 = getelementptr inbounds double, double* %435, i64 8
  %463 = bitcast double* %454 to <2 x double>*
  %464 = load <2 x double>, <2 x double>* %463, align 8
  %465 = getelementptr inbounds double, double* %434, i64 8
  %466 = bitcast double* %457 to <2 x double>*
  %467 = load <2 x double>, <2 x double>* %466, align 8
  %468 = fsub <2 x double> %464, %467
  %469 = fadd <2 x double> %461, %468
  %470 = add i32 %437, -4
  %471 = icmp eq i32 %470, 0
  br i1 %471, label %472, label %433

472:                                              ; preds = %433, %427
  %473 = phi <2 x double> [ undef, %427 ], [ %469, %433 ]
  %474 = phi double* [ %1, %427 ], [ %465, %433 ]
  %475 = phi double* [ %2, %427 ], [ %462, %433 ]
  %476 = phi <2 x double> [ zeroinitializer, %427 ], [ %469, %433 ]
  %477 = icmp eq i32 %429, 0
  br i1 %477, label %493, label %478

478:                                              ; preds = %472, %478
  %479 = phi double* [ %486, %478 ], [ %474, %472 ]
  %480 = phi double* [ %483, %478 ], [ %475, %472 ]
  %481 = phi <2 x double> [ %490, %478 ], [ %476, %472 ]
  %482 = phi i32 [ %491, %478 ], [ %429, %472 ]
  %483 = getelementptr inbounds double, double* %480, i64 2
  %484 = bitcast double* %480 to <2 x double>*
  %485 = load <2 x double>, <2 x double>* %484, align 8
  %486 = getelementptr inbounds double, double* %479, i64 2
  %487 = bitcast double* %479 to <2 x double>*
  %488 = load <2 x double>, <2 x double>* %487, align 8
  %489 = fsub <2 x double> %485, %488
  %490 = fadd <2 x double> %481, %489
  %491 = add i32 %482, -1
  %492 = icmp eq i32 %491, 0
  br i1 %492, label %493, label %478, !llvm.loop !41

493:                                              ; preds = %472, %478, %330, %426
  %494 = phi <2 x double> [ zeroinitializer, %426 ], [ zeroinitializer, %330 ], [ %473, %472 ], [ %490, %478 ]
  %495 = sitofp i32 %0 to double
  %496 = extractelement <2 x double> %494, i32 0
  %497 = fdiv double %496, %495
  %498 = extractelement <2 x double> %494, i32 1
  %499 = fdiv double %498, %495
  %500 = fdiv double 1.000000e+00, %337
  %501 = insertelement <2 x double> undef, double %500, i32 0
  %502 = shufflevector <2 x double> %501, <2 x double> undef, <2 x i32> zeroinitializer
  %503 = fmul <2 x double> %341, %502
  %504 = fadd double %126, 0.000000e+00
  %505 = fmul double %128, 0.000000e+00
  %506 = fadd double %504, %505
  %507 = fadd double %506, %497
  %508 = fmul double %126, 0.000000e+00
  %509 = fadd double %508, 0.000000e+00
  %510 = fadd double %128, %509
  %511 = fadd double %510, %499
  %512 = fadd double %505, %509
  %513 = fadd double %512, 1.000000e+00
  %514 = insertelement <2 x double> %501, double 0.000000e+00, i32 1
  %515 = insertelement <2 x double> undef, double %507, i32 0
  %516 = shufflevector <2 x double> %515, <2 x double> undef, <2 x i32> zeroinitializer
  %517 = fmul <2 x double> %514, %516
  %518 = fadd <2 x double> %517, zeroinitializer
  %519 = insertelement <2 x double> undef, double %511, i32 0
  %520 = shufflevector <2 x double> %519, <2 x double> undef, <2 x i32> zeroinitializer
  %521 = insertelement <2 x double> <double 0.000000e+00, double undef>, double %500, i32 1
  %522 = fmul <2 x double> %520, %521
  %523 = fadd <2 x double> %522, %518
  %524 = insertelement <2 x double> undef, double %513, i32 0
  %525 = shufflevector <2 x double> %524, <2 x double> undef, <2 x i32> zeroinitializer
  %526 = fmul <2 x double> %525, %503
  %527 = fsub <2 x double> %523, %526
  %528 = bitcast double* %3 to <2 x double>*
  store <2 x double> %527, <2 x double>* %528, align 8
  %529 = getelementptr inbounds double, double* %3, i64 5
  store double 1.000000e+00, double* %529, align 8
  %530 = getelementptr inbounds double, double* %3, i64 2
  store double 1.000000e+00, double* %530, align 8
  %531 = getelementptr inbounds double, double* %3, i64 3
  %532 = getelementptr inbounds double, double* %3, i64 6
  %533 = bitcast double* %531 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %533, i8 0, i64 16, i1 false) #11
  %534 = bitcast double* %532 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %534, i8 0, i64 16, i1 false) #11
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @project_points_double_translation(double* nocapture readonly, double* nocapture readonly, double* nocapture, i32, i32, i32) #3 {
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %61

8:                                                ; preds = %6
  %9 = getelementptr inbounds double, double* %0, i64 1
  %10 = add nsw i32 %4, -2
  %11 = sext i32 %10 to i64
  %12 = add nsw i32 %5, -2
  %13 = sext i32 %12 to i64
  %14 = and i32 %3, 1
  %15 = icmp eq i32 %3, 1
  br i1 %15, label %48, label %16

16:                                               ; preds = %8
  %17 = sub i32 %3, %14
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi double* [ %1, %16 ], [ %44, %18 ]
  %20 = phi double* [ %2, %16 ], [ %45, %18 ]
  %21 = phi i32 [ %17, %16 ], [ %46, %18 ]
  %22 = getelementptr inbounds double, double* %19, i64 1
  %23 = load double, double* %19, align 8
  %24 = getelementptr inbounds double, double* %19, i64 2
  %25 = load double, double* %22, align 8
  %26 = load double, double* %0, align 8
  %27 = fadd double %23, %26
  %28 = getelementptr inbounds double, double* %20, i64 1
  store double %27, double* %20, align 8
  %29 = load double, double* %9, align 8
  %30 = fadd double %25, %29
  %31 = getelementptr inbounds double, double* %20, i64 2
  store double %30, double* %28, align 8
  %32 = getelementptr inbounds double, double* %24, i64 %11
  %33 = getelementptr inbounds double, double* %31, i64 %13
  %34 = getelementptr inbounds double, double* %32, i64 1
  %35 = load double, double* %32, align 8
  %36 = getelementptr inbounds double, double* %32, i64 2
  %37 = load double, double* %34, align 8
  %38 = load double, double* %0, align 8
  %39 = fadd double %35, %38
  %40 = getelementptr inbounds double, double* %33, i64 1
  store double %39, double* %33, align 8
  %41 = load double, double* %9, align 8
  %42 = fadd double %37, %41
  %43 = getelementptr inbounds double, double* %33, i64 2
  store double %42, double* %40, align 8
  %44 = getelementptr inbounds double, double* %36, i64 %11
  %45 = getelementptr inbounds double, double* %43, i64 %13
  %46 = add i32 %21, -2
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %18

48:                                               ; preds = %18, %8
  %49 = phi double* [ %1, %8 ], [ %44, %18 ]
  %50 = phi double* [ %2, %8 ], [ %45, %18 ]
  %51 = icmp eq i32 %14, 0
  br i1 %51, label %61, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds double, double* %49, i64 1
  %54 = load double, double* %49, align 8
  %55 = load double, double* %53, align 8
  %56 = load double, double* %0, align 8
  %57 = fadd double %54, %56
  %58 = getelementptr inbounds double, double* %50, i64 1
  store double %57, double* %50, align 8
  %59 = load double, double* %9, align 8
  %60 = fadd double %55, %59
  store double %60, double* %58, align 8
  br label %61

61:                                               ; preds = %52, %48, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @ransac_double_prec(double* nocapture readonly, i32, i32* nocapture, %struct.MotionModel*, i32, i32 (double*)* nocapture, i32 (i32, double*, double*, double*)* nocapture, void (double*, double*, double*, i32, i32, i32)* nocapture) unnamed_addr #1 {
  %9 = alloca [9 x double], align 16
  %10 = bitcast [9 x double]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %10) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 72, i1 false)
  %11 = icmp sgt i32 %4, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %8
  %13 = bitcast i32* %2 to i8*
  %14 = zext i32 %4 to i64
  %15 = shl nuw nsw i64 %14, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 0, i64 %15, i1 false)
  br label %16

16:                                               ; preds = %12, %8
  %17 = icmp slt i32 %1, 15
  br i1 %17, label %549, label %18

18:                                               ; preds = %16
  %19 = sext i32 %1 to i64
  %20 = shl nsw i64 %19, 4
  %21 = tail call i8* @aom_malloc(i64 %20) #11
  %22 = bitcast i8* %21 to double*
  %23 = tail call i8* @aom_malloc(i64 %20) #11
  %24 = bitcast i8* %23 to double*
  %25 = tail call i8* @aom_malloc(i64 %20) #11
  %26 = bitcast i8* %25 to double*
  %27 = tail call i8* @aom_malloc(i64 %20) #11
  %28 = bitcast i8* %27 to double*
  %29 = tail call i8* @aom_malloc(i64 %20) #11
  %30 = bitcast i8* %29 to double*
  %31 = sext i32 %4 to i64
  %32 = mul nsw i64 %31, 24
  %33 = tail call i8* @aom_malloc(i64 %32) #11
  %34 = bitcast i8* %33 to %struct.RANSAC_MOTION*
  %35 = shl nsw i64 %19, 2
  %36 = tail call i8* @aom_malloc(i64 %35) #11
  br i1 %11, label %37, label %49

37:                                               ; preds = %18
  %38 = zext i32 %4 to i64
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i64 [ 0, %37 ], [ %46, %39 ]
  %41 = phi i8* [ %36, %37 ], [ %47, %39 ]
  %42 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %40, i32 2
  %43 = bitcast i32** %42 to i8**
  store i8* %41, i8** %43, align 8
  %44 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %40, i32 0
  store i32 0, i32* %44, align 8
  %45 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %40, i32 1
  store double 1.000000e+12, double* %45, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %41, i8 0, i64 %35, i1 false) #11
  %46 = add nuw nsw i64 %40, 1
  %47 = tail call i8* @aom_malloc(i64 %35) #11
  %48 = icmp eq i64 %46, %38
  br i1 %48, label %49, label %39

49:                                               ; preds = %39, %18
  %50 = phi i8* [ %36, %18 ], [ %47, %39 ]
  %51 = bitcast i8* %50 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %50, i8 0, i64 %35, i1 false) #11
  %52 = icmp ne i8* %21, null
  %53 = icmp ne i8* %23, null
  %54 = and i1 %52, %53
  %55 = icmp ne i8* %25, null
  %56 = and i1 %54, %55
  %57 = icmp ne i8* %27, null
  %58 = and i1 %56, %57
  %59 = icmp ne i8* %29, null
  %60 = and i1 %58, %59
  %61 = icmp ne i8* %33, null
  %62 = and i1 %60, %61
  %63 = xor i1 %62, true
  %64 = icmp eq i8* %50, null
  %65 = or i1 %64, %63
  br i1 %65, label %537, label %66

66:                                               ; preds = %49
  %67 = icmp sgt i32 %1, 0
  br i1 %67, label %68, label %96

68:                                               ; preds = %66
  %69 = and i32 %1, 1
  %70 = icmp eq i32 %1, 1
  br i1 %70, label %73, label %71

71:                                               ; preds = %68
  %72 = sub i32 %1, %69
  br label %124

73:                                               ; preds = %124, %68
  %74 = phi double* [ %0, %68 ], [ %164, %124 ]
  %75 = phi double* [ %28, %68 ], [ %167, %124 ]
  %76 = phi double* [ %26, %68 ], [ %157, %124 ]
  %77 = icmp eq i32 %69, 0
  br i1 %77, label %96, label %78

78:                                               ; preds = %73
  %79 = getelementptr inbounds double, double* %74, i64 1
  %80 = bitcast double* %74 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = getelementptr inbounds double, double* %76, i64 1
  %83 = bitcast double* %76 to i64*
  store i64 %81, i64* %83, align 8
  %84 = getelementptr inbounds double, double* %74, i64 2
  %85 = bitcast double* %79 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast double* %82 to i64*
  store i64 %86, i64* %87, align 8
  %88 = getelementptr inbounds double, double* %74, i64 3
  %89 = bitcast double* %84 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds double, double* %75, i64 1
  %92 = bitcast double* %75 to i64*
  store i64 %90, i64* %92, align 8
  %93 = bitcast double* %88 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = bitcast double* %91 to i64*
  store i64 %94, i64* %95, align 8
  br label %96

96:                                               ; preds = %78, %73, %66
  %97 = icmp slt i32 %1, 3
  %98 = add nsw i32 %1, -1
  %99 = getelementptr inbounds [9 x double], [9 x double]* %9, i64 0, i64 0
  %100 = bitcast i8* %21 to i64*
  %101 = getelementptr inbounds i8, i8* %21, i64 8
  %102 = bitcast i8* %101 to i64*
  %103 = getelementptr inbounds i8, i8* %21, i64 16
  %104 = bitcast i8* %103 to i64*
  %105 = getelementptr inbounds i8, i8* %21, i64 24
  %106 = bitcast i8* %105 to i64*
  %107 = getelementptr inbounds i8, i8* %21, i64 32
  %108 = bitcast i8* %107 to i64*
  %109 = getelementptr inbounds i8, i8* %21, i64 40
  %110 = bitcast i8* %109 to i64*
  %111 = bitcast i8* %23 to i64*
  %112 = getelementptr inbounds i8, i8* %23, i64 8
  %113 = bitcast i8* %112 to i64*
  %114 = getelementptr inbounds i8, i8* %23, i64 16
  %115 = bitcast i8* %114 to i64*
  %116 = getelementptr inbounds i8, i8* %23, i64 24
  %117 = bitcast i8* %116 to i64*
  %118 = getelementptr inbounds i8, i8* %23, i64 32
  %119 = bitcast i8* %118 to i64*
  %120 = getelementptr inbounds i8, i8* %23, i64 40
  %121 = bitcast i8* %120 to i64*
  %122 = zext i32 %1 to i64
  %123 = zext i32 %4 to i64
  br label %171

124:                                              ; preds = %124, %71
  %125 = phi double* [ %0, %71 ], [ %164, %124 ]
  %126 = phi double* [ %28, %71 ], [ %167, %124 ]
  %127 = phi double* [ %26, %71 ], [ %157, %124 ]
  %128 = phi i32 [ %72, %71 ], [ %169, %124 ]
  %129 = getelementptr inbounds double, double* %125, i64 1
  %130 = bitcast double* %125 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = getelementptr inbounds double, double* %127, i64 1
  %133 = bitcast double* %127 to i64*
  store i64 %131, i64* %133, align 8
  %134 = getelementptr inbounds double, double* %125, i64 2
  %135 = bitcast double* %129 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = getelementptr inbounds double, double* %127, i64 2
  %138 = bitcast double* %132 to i64*
  store i64 %136, i64* %138, align 8
  %139 = getelementptr inbounds double, double* %125, i64 3
  %140 = bitcast double* %134 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = getelementptr inbounds double, double* %126, i64 1
  %143 = bitcast double* %126 to i64*
  store i64 %141, i64* %143, align 8
  %144 = getelementptr inbounds double, double* %125, i64 4
  %145 = bitcast double* %139 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = getelementptr inbounds double, double* %126, i64 2
  %148 = bitcast double* %142 to i64*
  store i64 %146, i64* %148, align 8
  %149 = getelementptr inbounds double, double* %125, i64 5
  %150 = bitcast double* %144 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = getelementptr inbounds double, double* %127, i64 3
  %153 = bitcast double* %137 to i64*
  store i64 %151, i64* %153, align 8
  %154 = getelementptr inbounds double, double* %125, i64 6
  %155 = bitcast double* %149 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = getelementptr inbounds double, double* %127, i64 4
  %158 = bitcast double* %152 to i64*
  store i64 %156, i64* %158, align 8
  %159 = getelementptr inbounds double, double* %125, i64 7
  %160 = bitcast double* %154 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = getelementptr inbounds double, double* %126, i64 3
  %163 = bitcast double* %147 to i64*
  store i64 %161, i64* %163, align 8
  %164 = getelementptr inbounds double, double* %125, i64 8
  %165 = bitcast double* %159 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds double, double* %126, i64 4
  %168 = bitcast double* %162 to i64*
  store i64 %166, i64* %168, align 8
  %169 = add i32 %128, -2
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %73, label %124

171:                                              ; preds = %363, %96
  %172 = phi i32 [ 0, %96 ], [ %365, %363 ]
  %173 = phi %struct.RANSAC_MOTION* [ %34, %96 ], [ %364, %363 ]
  %174 = phi i32 [ %1, %96 ], [ %176, %363 ]
  call void @llvm.memset.p0i8.i64(i8* align 4 %50, i8 0, i64 %35, i1 false) #11
  br label %175

175:                                              ; preds = %226, %171
  %176 = phi i32 [ %174, %171 ], [ %209, %226 ]
  %177 = phi i32 [ 1, %171 ], [ %277, %226 ]
  %178 = phi i32 [ 0, %171 ], [ %276, %226 ]
  %179 = icmp eq i32 %177, 0
  br i1 %179, label %279, label %180

180:                                              ; preds = %175
  %181 = mul i32 %176, 1103515245
  %182 = add i32 %181, 12345
  %183 = lshr i32 %182, 16
  %184 = and i32 %183, 32767
  %185 = urem i32 %184, %1
  br i1 %97, label %537, label %186

186:                                              ; preds = %180
  %187 = icmp eq i32 %185, %98
  %188 = add nuw nsw i32 %185, 1
  %189 = select i1 %187, i32 0, i32 %188
  %190 = mul i32 %182, 1103515245
  %191 = add i32 %190, 12345
  %192 = lshr i32 %191, 16
  %193 = and i32 %192, 32767
  %194 = urem i32 %193, %1
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %206, label %196

196:                                              ; preds = %186, %196
  %197 = phi i32 [ %204, %196 ], [ %194, %186 ]
  %198 = phi i32 [ %201, %196 ], [ %189, %186 ]
  %199 = icmp eq i32 %198, %98
  %200 = add nsw i32 %198, 1
  %201 = select i1 %199, i32 0, i32 %200
  %202 = icmp ne i32 %185, %201
  %203 = zext i1 %202 to i32
  %204 = sub nuw i32 %197, %203
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %196

206:                                              ; preds = %196, %186
  %207 = phi i32 [ %189, %186 ], [ %201, %196 ]
  %208 = mul i32 %191, 1103515245
  %209 = add i32 %208, 12345
  %210 = lshr i32 %209, 16
  %211 = and i32 %210, 32767
  %212 = urem i32 %211, %1
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %226, label %214

214:                                              ; preds = %206, %214
  %215 = phi i32 [ %224, %214 ], [ %212, %206 ]
  %216 = phi i32 [ %219, %214 ], [ %207, %206 ]
  %217 = icmp eq i32 %216, %98
  %218 = add nsw i32 %216, 1
  %219 = select i1 %217, i32 0, i32 %218
  %220 = icmp ne i32 %185, %219
  %221 = icmp ne i32 %207, %219
  %222 = and i1 %221, %220
  %223 = zext i1 %222 to i32
  %224 = sub nuw i32 %215, %223
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %226, label %214

226:                                              ; preds = %214, %206
  %227 = phi i32 [ %207, %206 ], [ %219, %214 ]
  %228 = shl nuw nsw i32 %185, 1
  %229 = zext i32 %228 to i64
  %230 = getelementptr inbounds double, double* %26, i64 %229
  %231 = bitcast double* %230 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %100, align 8
  %233 = or i32 %228, 1
  %234 = zext i32 %233 to i64
  %235 = getelementptr inbounds double, double* %26, i64 %234
  %236 = bitcast double* %235 to i64*
  %237 = load i64, i64* %236, align 8
  store i64 %237, i64* %102, align 8
  %238 = shl nsw i32 %207, 1
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds double, double* %26, i64 %239
  %241 = bitcast double* %240 to i64*
  %242 = load i64, i64* %241, align 8
  store i64 %242, i64* %104, align 8
  %243 = or i32 %238, 1
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds double, double* %26, i64 %244
  %246 = bitcast double* %245 to i64*
  %247 = load i64, i64* %246, align 8
  store i64 %247, i64* %106, align 8
  %248 = shl nsw i32 %227, 1
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds double, double* %26, i64 %249
  %251 = bitcast double* %250 to i64*
  %252 = load i64, i64* %251, align 8
  store i64 %252, i64* %108, align 8
  %253 = or i32 %248, 1
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds double, double* %26, i64 %254
  %256 = bitcast double* %255 to i64*
  %257 = load i64, i64* %256, align 8
  store i64 %257, i64* %110, align 8
  %258 = getelementptr inbounds double, double* %28, i64 %229
  %259 = bitcast double* %258 to i64*
  %260 = load i64, i64* %259, align 8
  store i64 %260, i64* %111, align 8
  %261 = getelementptr inbounds double, double* %28, i64 %234
  %262 = bitcast double* %261 to i64*
  %263 = load i64, i64* %262, align 8
  store i64 %263, i64* %113, align 8
  %264 = getelementptr inbounds double, double* %28, i64 %239
  %265 = bitcast double* %264 to i64*
  %266 = load i64, i64* %265, align 8
  store i64 %266, i64* %115, align 8
  %267 = getelementptr inbounds double, double* %28, i64 %244
  %268 = bitcast double* %267 to i64*
  %269 = load i64, i64* %268, align 8
  store i64 %269, i64* %117, align 8
  %270 = getelementptr inbounds double, double* %28, i64 %249
  %271 = bitcast double* %270 to i64*
  %272 = load i64, i64* %271, align 8
  store i64 %272, i64* %119, align 8
  %273 = getelementptr inbounds double, double* %28, i64 %254
  %274 = bitcast double* %273 to i64*
  %275 = load i64, i64* %274, align 8
  store i64 %275, i64* %121, align 8
  %276 = add nuw nsw i32 %178, 1
  %277 = call i32 %5(double* nonnull %22) #11, !callees !2
  %278 = icmp eq i32 %276, 11
  br i1 %278, label %537, label %175

279:                                              ; preds = %175
  %280 = call i32 %6(i32 3, double* nonnull %22, double* nonnull %24, double* nonnull %99) #11, !callees !3
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %282, label %363

282:                                              ; preds = %279
  call void %7(double* nonnull %99, double* nonnull %26, double* nonnull %30, i32 %1, i32 2, i32 2) #11, !callees !4
  br i1 %67, label %283, label %363

283:                                              ; preds = %282, %310
  %284 = phi i64 [ %314, %310 ], [ 0, %282 ]
  %285 = phi double [ %313, %310 ], [ 0.000000e+00, %282 ]
  %286 = phi double [ %312, %310 ], [ 0.000000e+00, %282 ]
  %287 = phi i32 [ %311, %310 ], [ 0, %282 ]
  %288 = shl nuw nsw i64 %284, 1
  %289 = getelementptr inbounds double, double* %30, i64 %288
  %290 = getelementptr inbounds double, double* %28, i64 %288
  %291 = bitcast double* %289 to <2 x double>*
  %292 = load <2 x double>, <2 x double>* %291, align 8
  %293 = bitcast double* %290 to <2 x double>*
  %294 = load <2 x double>, <2 x double>* %293, align 8
  %295 = fsub <2 x double> %292, %294
  %296 = fmul <2 x double> %295, %295
  %297 = extractelement <2 x double> %296, i32 0
  %298 = extractelement <2 x double> %296, i32 1
  %299 = fadd double %297, %298
  %300 = call double @sqrt(double %299) #11
  %301 = fcmp olt double %300, 1.250000e+00
  br i1 %301, label %302, label %310

302:                                              ; preds = %283
  %303 = add nsw i32 %287, 1
  %304 = sext i32 %287 to i64
  %305 = getelementptr inbounds i32, i32* %51, i64 %304
  %306 = trunc i64 %284 to i32
  store i32 %306, i32* %305, align 4
  %307 = fadd double %286, %300
  %308 = fmul double %300, %300
  %309 = fadd double %285, %308
  br label %310

310:                                              ; preds = %302, %283
  %311 = phi i32 [ %303, %302 ], [ %287, %283 ]
  %312 = phi double [ %307, %302 ], [ %286, %283 ]
  %313 = phi double [ %309, %302 ], [ %285, %283 ]
  %314 = add nuw nsw i64 %284, 1
  %315 = icmp eq i64 %314, %122
  br i1 %315, label %316, label %283

316:                                              ; preds = %310
  %317 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %173, i64 0, i32 0
  %318 = load i32, i32* %317, align 8
  %319 = icmp sge i32 %311, %318
  %320 = icmp sgt i32 %311, 1
  %321 = and i1 %320, %319
  br i1 %321, label %322, label %363

322:                                              ; preds = %316
  %323 = sitofp i32 %311 to double
  %324 = fdiv double %312, %323
  %325 = fadd double %323, -1.000000e+00
  %326 = fdiv double %313, %325
  %327 = fmul double %324, %324
  %328 = fmul double %327, %323
  %329 = fdiv double %328, %325
  %330 = fsub double %326, %329
  %331 = icmp sgt i32 %311, %318
  br i1 %331, label %336, label %332

332:                                              ; preds = %322
  %333 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %173, i64 0, i32 1
  %334 = load double, double* %333, align 8
  %335 = fcmp olt double %330, %334
  br i1 %335, label %336, label %363

336:                                              ; preds = %322, %332
  store i32 %311, i32* %317, align 8
  %337 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %173, i64 0, i32 1
  store double %330, double* %337, align 8
  %338 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %173, i64 0, i32 2
  %339 = bitcast i32** %338 to i8**
  %340 = load i8*, i8** %339, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %340, i8* align 4 %50, i64 %35, i1 false)
  br i1 %11, label %341, label %363

341:                                              ; preds = %336, %359
  %342 = phi i64 [ %361, %359 ], [ 0, %336 ]
  %343 = phi %struct.RANSAC_MOTION* [ %360, %359 ], [ %173, %336 ]
  %344 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %342
  %345 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %343, i64 0, i32 0
  %346 = load i32, i32* %345, align 8
  %347 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %344, i64 0, i32 0
  %348 = load i32, i32* %347, align 8
  %349 = icmp sgt i32 %346, %348
  br i1 %349, label %359, label %350

350:                                              ; preds = %341
  %351 = icmp slt i32 %346, %348
  br i1 %351, label %359, label %352

352:                                              ; preds = %350
  %353 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %343, i64 0, i32 1
  %354 = load double, double* %353, align 8
  %355 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %342, i32 1
  %356 = load double, double* %355, align 8
  %357 = fcmp olt double %354, %356
  br i1 %357, label %359, label %358

358:                                              ; preds = %352
  br label %359

359:                                              ; preds = %358, %350, %352, %341
  %360 = phi %struct.RANSAC_MOTION* [ %344, %341 ], [ %344, %352 ], [ %343, %350 ], [ %343, %358 ]
  %361 = add nuw nsw i64 %342, 1
  %362 = icmp eq i64 %361, %123
  br i1 %362, label %363, label %341

363:                                              ; preds = %359, %282, %336, %316, %332, %279
  %364 = phi %struct.RANSAC_MOTION* [ %173, %279 ], [ %173, %316 ], [ %173, %332 ], [ %173, %336 ], [ %173, %282 ], [ %360, %359 ]
  %365 = add nuw nsw i32 %172, 1
  %366 = icmp eq i32 %365, 20
  br i1 %366, label %367, label %171

367:                                              ; preds = %363
  call void @qsort(i8* nonnull %33, i64 %31, i64 24, i32 (i8*, i8*)* nonnull @compare_motions) #11
  br i1 %11, label %368, label %537

368:                                              ; preds = %367
  %369 = zext i32 %4 to i64
  br label %370

370:                                              ; preds = %532, %368
  %371 = phi i64 [ 0, %368 ], [ %535, %532 ]
  %372 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %371, i32 0
  %373 = load i32, i32* %372, align 8
  %374 = icmp sgt i32 %373, 2
  br i1 %374, label %375, label %532

375:                                              ; preds = %370
  %376 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %371, i32 2
  %377 = load i32*, i32** %376, align 8
  %378 = zext i32 %373 to i64
  %379 = and i64 %378, 1
  %380 = sub nsw i64 %378, %379
  br label %381

381:                                              ; preds = %381, %375
  %382 = phi i64 [ 0, %375 ], [ %421, %381 ]
  %383 = phi i64 [ %380, %375 ], [ %422, %381 ]
  %384 = getelementptr inbounds i32, i32* %377, i64 %382
  %385 = load i32, i32* %384, align 4
  %386 = shl nsw i32 %385, 1
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds double, double* %26, i64 %387
  %389 = bitcast double* %388 to i64*
  %390 = load i64, i64* %389, align 8
  %391 = shl nuw nsw i64 %382, 1
  %392 = getelementptr inbounds double, double* %22, i64 %391
  %393 = bitcast double* %392 to i64*
  store i64 %390, i64* %393, align 8
  %394 = or i32 %386, 1
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds double, double* %26, i64 %395
  %397 = bitcast double* %396 to i64*
  %398 = load i64, i64* %397, align 8
  %399 = or i64 %391, 1
  %400 = getelementptr inbounds double, double* %22, i64 %399
  %401 = bitcast double* %400 to i64*
  store i64 %398, i64* %401, align 8
  %402 = or i64 %382, 1
  %403 = getelementptr inbounds i32, i32* %377, i64 %402
  %404 = load i32, i32* %403, align 4
  %405 = shl nsw i32 %404, 1
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds double, double* %26, i64 %406
  %408 = bitcast double* %407 to i64*
  %409 = load i64, i64* %408, align 8
  %410 = shl nuw nsw i64 %402, 1
  %411 = getelementptr inbounds double, double* %22, i64 %410
  %412 = bitcast double* %411 to i64*
  store i64 %409, i64* %412, align 8
  %413 = or i32 %405, 1
  %414 = sext i32 %413 to i64
  %415 = getelementptr inbounds double, double* %26, i64 %414
  %416 = bitcast double* %415 to i64*
  %417 = load i64, i64* %416, align 8
  %418 = or i64 %410, 1
  %419 = getelementptr inbounds double, double* %22, i64 %418
  %420 = bitcast double* %419 to i64*
  store i64 %417, i64* %420, align 8
  %421 = add nuw nsw i64 %382, 2
  %422 = add i64 %383, -2
  %423 = icmp eq i64 %422, 0
  br i1 %423, label %424, label %381

424:                                              ; preds = %381
  %425 = icmp eq i64 %379, 0
  br i1 %425, label %445, label %426

426:                                              ; preds = %424
  %427 = getelementptr inbounds i32, i32* %377, i64 %421
  %428 = load i32, i32* %427, align 4
  %429 = shl nsw i32 %428, 1
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds double, double* %26, i64 %430
  %432 = bitcast double* %431 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = shl nuw nsw i64 %421, 1
  %435 = getelementptr inbounds double, double* %22, i64 %434
  %436 = bitcast double* %435 to i64*
  store i64 %433, i64* %436, align 8
  %437 = or i32 %429, 1
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds double, double* %26, i64 %438
  %440 = bitcast double* %439 to i64*
  %441 = load i64, i64* %440, align 8
  %442 = or i64 %434, 1
  %443 = getelementptr inbounds double, double* %22, i64 %442
  %444 = bitcast double* %443 to i64*
  store i64 %441, i64* %444, align 8
  br label %445

445:                                              ; preds = %424, %426
  %446 = load i32*, i32** %376, align 8
  %447 = load i32, i32* %372, align 8
  %448 = icmp sgt i32 %447, 0
  br i1 %448, label %449, label %522

449:                                              ; preds = %445
  %450 = zext i32 %447 to i64
  %451 = and i64 %450, 1
  %452 = icmp eq i32 %447, 1
  br i1 %452, label %498, label %453

453:                                              ; preds = %449
  %454 = sub nsw i64 %450, %451
  br label %455

455:                                              ; preds = %455, %453
  %456 = phi i64 [ 0, %453 ], [ %495, %455 ]
  %457 = phi i64 [ %454, %453 ], [ %496, %455 ]
  %458 = getelementptr inbounds i32, i32* %446, i64 %456
  %459 = load i32, i32* %458, align 4
  %460 = shl nsw i32 %459, 1
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds double, double* %28, i64 %461
  %463 = bitcast double* %462 to i64*
  %464 = load i64, i64* %463, align 8
  %465 = shl nuw nsw i64 %456, 1
  %466 = getelementptr inbounds double, double* %24, i64 %465
  %467 = bitcast double* %466 to i64*
  store i64 %464, i64* %467, align 8
  %468 = or i32 %460, 1
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds double, double* %28, i64 %469
  %471 = bitcast double* %470 to i64*
  %472 = load i64, i64* %471, align 8
  %473 = or i64 %465, 1
  %474 = getelementptr inbounds double, double* %24, i64 %473
  %475 = bitcast double* %474 to i64*
  store i64 %472, i64* %475, align 8
  %476 = or i64 %456, 1
  %477 = getelementptr inbounds i32, i32* %446, i64 %476
  %478 = load i32, i32* %477, align 4
  %479 = shl nsw i32 %478, 1
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds double, double* %28, i64 %480
  %482 = bitcast double* %481 to i64*
  %483 = load i64, i64* %482, align 8
  %484 = shl nuw nsw i64 %476, 1
  %485 = getelementptr inbounds double, double* %24, i64 %484
  %486 = bitcast double* %485 to i64*
  store i64 %483, i64* %486, align 8
  %487 = or i32 %479, 1
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds double, double* %28, i64 %488
  %490 = bitcast double* %489 to i64*
  %491 = load i64, i64* %490, align 8
  %492 = or i64 %484, 1
  %493 = getelementptr inbounds double, double* %24, i64 %492
  %494 = bitcast double* %493 to i64*
  store i64 %491, i64* %494, align 8
  %495 = add nuw nsw i64 %456, 2
  %496 = add i64 %457, -2
  %497 = icmp eq i64 %496, 0
  br i1 %497, label %498, label %455

498:                                              ; preds = %455, %449
  %499 = phi i64 [ 0, %449 ], [ %495, %455 ]
  %500 = icmp eq i64 %451, 0
  br i1 %500, label %520, label %501

501:                                              ; preds = %498
  %502 = getelementptr inbounds i32, i32* %446, i64 %499
  %503 = load i32, i32* %502, align 4
  %504 = shl nsw i32 %503, 1
  %505 = sext i32 %504 to i64
  %506 = getelementptr inbounds double, double* %28, i64 %505
  %507 = bitcast double* %506 to i64*
  %508 = load i64, i64* %507, align 8
  %509 = shl nuw nsw i64 %499, 1
  %510 = getelementptr inbounds double, double* %24, i64 %509
  %511 = bitcast double* %510 to i64*
  store i64 %508, i64* %511, align 8
  %512 = or i32 %504, 1
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds double, double* %28, i64 %513
  %515 = bitcast double* %514 to i64*
  %516 = load i64, i64* %515, align 8
  %517 = or i64 %509, 1
  %518 = getelementptr inbounds double, double* %24, i64 %517
  %519 = bitcast double* %518 to i64*
  store i64 %516, i64* %519, align 8
  br label %520

520:                                              ; preds = %498, %501
  %521 = load i32, i32* %372, align 8
  br label %522

522:                                              ; preds = %520, %445
  %523 = phi i32 [ %521, %520 ], [ %447, %445 ]
  %524 = getelementptr inbounds %struct.MotionModel, %struct.MotionModel* %3, i64 %371, i32 0, i64 0
  %525 = call i32 %6(i32 %523, double* nonnull %22, double* nonnull %24, double* %524) #11, !callees !3
  %526 = getelementptr inbounds %struct.MotionModel, %struct.MotionModel* %3, i64 %371, i32 1
  %527 = bitcast i32** %526 to i8**
  %528 = load i8*, i8** %527, align 8
  %529 = bitcast i32** %376 to i8**
  %530 = load i8*, i8** %529, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %528, i8* align 4 %530, i64 %35, i1 false)
  %531 = load i32, i32* %372, align 8
  br label %532

532:                                              ; preds = %522, %370
  %533 = phi i32 [ %531, %522 ], [ %373, %370 ]
  %534 = getelementptr inbounds i32, i32* %2, i64 %371
  store i32 %533, i32* %534, align 4
  %535 = add nuw nsw i64 %371, 1
  %536 = icmp eq i64 %535, %369
  br i1 %536, label %537, label %370

537:                                              ; preds = %180, %226, %532, %367, %49
  %538 = phi i32 [ 1, %49 ], [ 0, %367 ], [ 0, %532 ], [ 1, %226 ], [ 1, %180 ]
  call void @aom_free(i8* %21) #11
  call void @aom_free(i8* %23) #11
  call void @aom_free(i8* %25) #11
  call void @aom_free(i8* %27) #11
  call void @aom_free(i8* %29) #11
  call void @aom_free(i8* %50) #11
  br i1 %11, label %539, label %548

539:                                              ; preds = %537
  %540 = zext i32 %4 to i64
  br label %541

541:                                              ; preds = %541, %539
  %542 = phi i64 [ 0, %539 ], [ %546, %541 ]
  %543 = getelementptr inbounds %struct.RANSAC_MOTION, %struct.RANSAC_MOTION* %34, i64 %542, i32 2
  %544 = bitcast i32** %543 to i8**
  %545 = load i8*, i8** %544, align 8
  call void @aom_free(i8* %545) #11
  %546 = add nuw nsw i64 %542, 1
  %547 = icmp eq i64 %546, %540
  br i1 %547, label %548, label %541

548:                                              ; preds = %541, %537
  call void @aom_free(i8* %33) #11
  br label %549

549:                                              ; preds = %16, %548
  %550 = phi i32 [ %538, %548 ], [ 1, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %10) #11
  ret i32 %550
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 (double*)* @is_degenerate_affine, i32 (double*)* @is_degenerate_translation}
!3 = !{i32 (i32, double*, double*, double*)* @find_affine, i32 (i32, double*, double*, double*)* @find_rotzoom, i32 (i32, double*, double*, double*)* @find_translation}
!4 = !{void (double*, double*, double*, i32, i32, i32)* @project_points_double_affine, void (double*, double*, double*, i32, i32, i32)* @project_points_double_rotzoom, void (double*, double*, double*, i32, i32, i32)* @project_points_double_translation}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10, !8}
!10 = !{!"llvm.loop.unroll.runtime.disable"}
!11 = distinct !{!11, !6}
!12 = distinct !{!12, !8}
!13 = distinct !{!13, !10, !8}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !8}
!20 = distinct !{!20, !8}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !6}
!29 = distinct !{!29, !6}
!30 = distinct !{!30, !8}
!31 = distinct !{!31, !10, !8}
!32 = distinct !{!32, !6}
!33 = distinct !{!33, !8}
!34 = distinct !{!34, !10, !8}
!35 = distinct !{!35, !6}
!36 = distinct !{!36, !8}
!37 = distinct !{!37, !10, !8}
!38 = distinct !{!38, !6}
!39 = distinct !{!39, !8}
!40 = distinct !{!40, !10, !8}
!41 = distinct !{!41, !6}
