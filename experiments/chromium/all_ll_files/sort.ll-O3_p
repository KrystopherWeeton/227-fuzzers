; ModuleID = '../../third_party/opus/src/silk/sort.c'
source_filename = "../../third_party/opus/src/silk/sort.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@.str = private unnamed_addr constant [24 x i8] c"assertion failed: K > 0\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"../../third_party/opus/src/silk/sort.c\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"assertion failed: L > 0\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"assertion failed: L >= K\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_insertion_sort_increasing(i32* nocapture, i32* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %4
  tail call void @celt_fatal(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0), i32 51) #2
  unreachable

7:                                                ; preds = %4
  %8 = icmp sgt i32 %2, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %7
  tail call void @celt_fatal(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0), i32 52) #2
  unreachable

10:                                               ; preds = %7
  %11 = icmp slt i32 %2, %3
  br i1 %11, label %79, label %12

12:                                               ; preds = %10
  %13 = zext i32 %3 to i64
  %14 = icmp ult i32 %3, 8
  br i1 %14, label %15, label %17

15:                                               ; preds = %77, %12
  %16 = phi i64 [ 0, %12 ], [ %18, %77 ]
  br label %84

17:                                               ; preds = %12
  %18 = and i64 %13, 4294967288
  %19 = add nsw i64 %18, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %22 = and i64 %21, 3
  %23 = icmp ult i64 %19, 24
  br i1 %23, label %60, label %24

24:                                               ; preds = %17
  %25 = sub nsw i64 %21, %22
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i64 [ 0, %24 ], [ %56, %26 ]
  %28 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %24 ], [ %57, %26 ]
  %29 = phi i64 [ %25, %24 ], [ %58, %26 ]
  %30 = getelementptr inbounds i32, i32* %1, i64 %27
  %31 = add <4 x i32> %28, <i32 4, i32 4, i32 4, i32 4>
  %32 = bitcast i32* %30 to <4 x i32>*
  store <4 x i32> %28, <4 x i32>* %32, align 4
  %33 = getelementptr inbounds i32, i32* %30, i64 4
  %34 = bitcast i32* %33 to <4 x i32>*
  store <4 x i32> %31, <4 x i32>* %34, align 4
  %35 = or i64 %27, 8
  %36 = add <4 x i32> %28, <i32 8, i32 8, i32 8, i32 8>
  %37 = getelementptr inbounds i32, i32* %1, i64 %35
  %38 = add <4 x i32> %28, <i32 12, i32 12, i32 12, i32 12>
  %39 = bitcast i32* %37 to <4 x i32>*
  store <4 x i32> %36, <4 x i32>* %39, align 4
  %40 = getelementptr inbounds i32, i32* %37, i64 4
  %41 = bitcast i32* %40 to <4 x i32>*
  store <4 x i32> %38, <4 x i32>* %41, align 4
  %42 = or i64 %27, 16
  %43 = add <4 x i32> %28, <i32 16, i32 16, i32 16, i32 16>
  %44 = getelementptr inbounds i32, i32* %1, i64 %42
  %45 = add <4 x i32> %28, <i32 20, i32 20, i32 20, i32 20>
  %46 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> %43, <4 x i32>* %46, align 4
  %47 = getelementptr inbounds i32, i32* %44, i64 4
  %48 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> %45, <4 x i32>* %48, align 4
  %49 = or i64 %27, 24
  %50 = add <4 x i32> %28, <i32 24, i32 24, i32 24, i32 24>
  %51 = getelementptr inbounds i32, i32* %1, i64 %49
  %52 = add <4 x i32> %28, <i32 28, i32 28, i32 28, i32 28>
  %53 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %53, align 4
  %54 = getelementptr inbounds i32, i32* %51, i64 4
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %55, align 4
  %56 = add i64 %27, 32
  %57 = add <4 x i32> %28, <i32 32, i32 32, i32 32, i32 32>
  %58 = add i64 %29, -4
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %26, !llvm.loop !2

60:                                               ; preds = %26, %17
  %61 = phi i64 [ 0, %17 ], [ %56, %26 ]
  %62 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %17 ], [ %57, %26 ]
  %63 = icmp eq i64 %22, 0
  br i1 %63, label %77, label %64

64:                                               ; preds = %60, %64
  %65 = phi i64 [ %73, %64 ], [ %61, %60 ]
  %66 = phi <4 x i32> [ %74, %64 ], [ %62, %60 ]
  %67 = phi i64 [ %75, %64 ], [ %22, %60 ]
  %68 = getelementptr inbounds i32, i32* %1, i64 %65
  %69 = add <4 x i32> %66, <i32 4, i32 4, i32 4, i32 4>
  %70 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %66, <4 x i32>* %70, align 4
  %71 = getelementptr inbounds i32, i32* %68, i64 4
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %72, align 4
  %73 = add i64 %65, 8
  %74 = add <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %75 = add i64 %67, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %64, !llvm.loop !4

77:                                               ; preds = %64, %60
  %78 = icmp eq i64 %18, %13
  br i1 %78, label %80, label %15

79:                                               ; preds = %10
  tail call void @celt_fatal(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0), i32 53) #2
  unreachable

80:                                               ; preds = %84, %77
  %81 = icmp sgt i32 %3, 1
  br i1 %81, label %82, label %90

82:                                               ; preds = %80
  %83 = zext i32 %3 to i64
  br label %155

84:                                               ; preds = %15, %84
  %85 = phi i64 [ %88, %84 ], [ %16, %15 ]
  %86 = getelementptr inbounds i32, i32* %1, i64 %85
  %87 = trunc i64 %85 to i32
  store i32 %87, i32* %86, align 4
  %88 = add nuw nsw i64 %85, 1
  %89 = icmp eq i64 %88, %13
  br i1 %89, label %80, label %84, !llvm.loop !6

90:                                               ; preds = %171, %80
  %91 = icmp slt i32 %3, %2
  br i1 %91, label %92, label %194

92:                                               ; preds = %90
  %93 = add nsw i32 %3, -1
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i32, i32* %0, i64 %94
  %96 = add i32 %3, -2
  %97 = icmp sgt i32 %96, -1
  br i1 %97, label %118, label %98

98:                                               ; preds = %92
  %99 = sext i32 %3 to i64
  %100 = sext i32 %2 to i64
  %101 = getelementptr inbounds i32, i32* %1, i64 %94
  %102 = sub nsw i64 %100, %99
  %103 = xor i64 %99, -1
  %104 = and i64 %102, 1
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %114, label %106

106:                                              ; preds = %98
  %107 = getelementptr inbounds i32, i32* %0, i64 %99
  %108 = load i32, i32* %107, align 4
  %109 = load i32, i32* %95, align 4
  %110 = icmp slt i32 %108, %109
  br i1 %110, label %111, label %112

111:                                              ; preds = %106
  store i32 %108, i32* %95, align 4
  store i32 %3, i32* %101, align 4
  br label %112

112:                                              ; preds = %111, %106
  %113 = add nsw i64 %99, 1
  br label %114

114:                                              ; preds = %98, %112
  %115 = phi i64 [ %99, %98 ], [ %113, %112 ]
  %116 = sub nsw i64 0, %100
  %117 = icmp eq i64 %103, %116
  br i1 %117, label %194, label %180

118:                                              ; preds = %92
  %119 = sext i32 %96 to i64
  %120 = sext i32 %3 to i64
  %121 = sext i32 %2 to i64
  br label %122

122:                                              ; preds = %143, %118
  %123 = phi i64 [ %120, %118 ], [ %144, %143 ]
  %124 = getelementptr inbounds i32, i32* %0, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = load i32, i32* %95, align 4
  %127 = icmp slt i32 %125, %126
  br i1 %127, label %128, label %143

128:                                              ; preds = %122, %146
  %129 = phi i64 [ %152, %146 ], [ %119, %122 ]
  %130 = phi i32 [ %153, %146 ], [ %96, %122 ]
  %131 = getelementptr inbounds i32, i32* %0, i64 %129
  %132 = load i32, i32* %131, align 4
  %133 = icmp slt i32 %125, %132
  br i1 %133, label %146, label %134

134:                                              ; preds = %128
  %135 = trunc i64 %129 to i32
  br label %136

136:                                              ; preds = %146, %134
  %137 = phi i32 [ %135, %134 ], [ %153, %146 ]
  %138 = add nsw i32 %137, 1
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i32, i32* %0, i64 %139
  store i32 %125, i32* %140, align 4
  %141 = getelementptr inbounds i32, i32* %1, i64 %139
  %142 = trunc i64 %123 to i32
  store i32 %142, i32* %141, align 4
  br label %143

143:                                              ; preds = %136, %122
  %144 = add nsw i64 %123, 1
  %145 = icmp eq i64 %144, %121
  br i1 %145, label %194, label %122

146:                                              ; preds = %128
  %147 = add nuw nsw i64 %129, 1
  %148 = getelementptr inbounds i32, i32* %0, i64 %147
  store i32 %132, i32* %148, align 4
  %149 = getelementptr inbounds i32, i32* %1, i64 %129
  %150 = load i32, i32* %149, align 4
  %151 = getelementptr inbounds i32, i32* %1, i64 %147
  store i32 %150, i32* %151, align 4
  %152 = add nsw i64 %129, -1
  %153 = add nsw i32 %130, -1
  %154 = icmp sgt i64 %129, 0
  br i1 %154, label %128, label %136

155:                                              ; preds = %171, %82
  %156 = phi i64 [ 1, %82 ], [ %178, %171 ]
  %157 = getelementptr inbounds i32, i32* %0, i64 %156
  %158 = load i32, i32* %157, align 4
  br label %159

159:                                              ; preds = %155, %165
  %160 = phi i64 [ %156, %155 ], [ %161, %165 ]
  %161 = add nsw i64 %160, -1
  %162 = getelementptr inbounds i32, i32* %0, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = icmp slt i32 %158, %163
  br i1 %164, label %165, label %171

165:                                              ; preds = %159
  %166 = getelementptr inbounds i32, i32* %0, i64 %160
  store i32 %163, i32* %166, align 4
  %167 = getelementptr inbounds i32, i32* %1, i64 %161
  %168 = load i32, i32* %167, align 4
  %169 = getelementptr inbounds i32, i32* %1, i64 %160
  store i32 %168, i32* %169, align 4
  %170 = icmp sgt i64 %161, 0
  br i1 %170, label %159, label %171

171:                                              ; preds = %165, %159
  %172 = phi i64 [ %161, %165 ], [ %160, %159 ]
  %173 = shl i64 %172, 32
  %174 = ashr exact i64 %173, 32
  %175 = getelementptr inbounds i32, i32* %0, i64 %174
  store i32 %158, i32* %175, align 4
  %176 = getelementptr inbounds i32, i32* %1, i64 %174
  %177 = trunc i64 %156 to i32
  store i32 %177, i32* %176, align 4
  %178 = add nuw nsw i64 %156, 1
  %179 = icmp eq i64 %178, %83
  br i1 %179, label %90, label %155

180:                                              ; preds = %114, %197
  %181 = phi i64 [ %198, %197 ], [ %115, %114 ]
  %182 = getelementptr inbounds i32, i32* %0, i64 %181
  %183 = load i32, i32* %182, align 4
  %184 = load i32, i32* %95, align 4
  %185 = icmp slt i32 %183, %184
  br i1 %185, label %186, label %188

186:                                              ; preds = %180
  store i32 %183, i32* %95, align 4
  %187 = trunc i64 %181 to i32
  store i32 %187, i32* %101, align 4
  br label %188

188:                                              ; preds = %180, %186
  %189 = add nsw i64 %181, 1
  %190 = getelementptr inbounds i32, i32* %0, i64 %189
  %191 = load i32, i32* %190, align 4
  %192 = load i32, i32* %95, align 4
  %193 = icmp slt i32 %191, %192
  br i1 %193, label %195, label %197

194:                                              ; preds = %114, %197, %143, %90
  ret void

195:                                              ; preds = %188
  store i32 %191, i32* %95, align 4
  %196 = trunc i64 %189 to i32
  store i32 %196, i32* %101, align 4
  br label %197

197:                                              ; preds = %195, %188
  %198 = add nsw i64 %181, 2
  %199 = icmp eq i64 %198, %100
  br i1 %199, label %194, label %180
}

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_insertion_sort_increasing_all_values_int16(i16* nocapture, i32) local_unnamed_addr #0 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %8

4:                                                ; preds = %2
  %5 = icmp eq i32 %1, 1
  br i1 %5, label %29, label %6

6:                                                ; preds = %4
  %7 = zext i32 %1 to i64
  br label %9

8:                                                ; preds = %2
  tail call void @celt_fatal(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0), i32 144) #2
  unreachable

9:                                                ; preds = %22, %6
  %10 = phi i64 [ 1, %6 ], [ %27, %22 ]
  %11 = getelementptr inbounds i16, i16* %0, i64 %10
  %12 = load i16, i16* %11, align 2
  br label %13

13:                                               ; preds = %9, %19
  %14 = phi i64 [ %10, %9 ], [ %15, %19 ]
  %15 = add nsw i64 %14, -1
  %16 = getelementptr inbounds i16, i16* %0, i64 %15
  %17 = load i16, i16* %16, align 2
  %18 = icmp slt i16 %12, %17
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = getelementptr inbounds i16, i16* %0, i64 %14
  store i16 %17, i16* %20, align 2
  %21 = icmp sgt i64 %15, 0
  br i1 %21, label %13, label %22

22:                                               ; preds = %19, %13
  %23 = phi i64 [ %15, %19 ], [ %14, %13 ]
  %24 = shl i64 %23, 32
  %25 = ashr exact i64 %24, 32
  %26 = getelementptr inbounds i16, i16* %0, i64 %25
  store i16 %12, i16* %26, align 2
  %27 = add nuw nsw i64 %10, 1
  %28 = icmp eq i64 %27, %7
  br i1 %28, label %29, label %9

29:                                               ; preds = %22, %4
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
