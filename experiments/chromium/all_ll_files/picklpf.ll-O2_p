; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/picklpf.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/picklpf.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VP8_COMP = type { [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], %struct.macroblock, %struct.VP8Common, [9 x %struct.BOOL_CODER], %struct.VP8_CONFIG, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.TOKENEXTRA*, i32, i32, i32, i32, i32, i32, [20 x i32], [20 x i32], i32, i32, %struct.CODING_CONTEXT, i64, i64, i32, i32, [2 x i32], double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, [5 x i32], i32, i32, i32, i32, double, i64, i64, i64, i32, i32, i32, i32, i64, i32, double, double, i64, i64, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x [2 x i32]]]]], i32, i32, i32, i32, %struct.vpx_codec_pkt_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [4 x i32], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i8*, i8*, [2 x [4 x i8]], [4 x i32], i8*, i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_atomic_int*, i32, %struct.vpx_atomic_int, i32, i32, i64*, i64, %struct.MB_ROW_COMP*, %struct.ENCODETHREAD_DATA*, %struct.LPFTHREAD_DATA, %union.sem_t*, %union.sem_t*, %union.sem_t, %union.sem_t, %struct.TOKENLIST*, [9 x i32], [9 x i8*], [9 x i8*], i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, [5 x %struct.variance_vtable], i64, i64, i64, i64, [128 x i32], %struct.frame_contexts, %struct.frame_contexts, %struct.frame_contexts, %struct.twopass_rc, i32, i32, i32*, i8*, i32, i32, %union.int_mv*, i32*, i32*, i32, i32, i32, i32, %struct.vp8_denoiser, i32, [5 x %struct.LAYER_CONTEXT], [5 x i64], [5 x i64], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], i32, i8, [4 x i32], i32, %struct.rd_costs_struct, i32, i32, [12 x i8] }
%struct.macroblock = type { [400 x i16], [400 x i16], [256 x i8], i8*, [25 x %struct.block], %struct.yv12_buffer_config, %struct.macroblockd, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, [4 x i32], %struct.search_site*, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32, i32, [2 x i32*], [2 x i32*], [10 x i32]*, [10 x i32]*, [10 x [10 x i32]]*, i32*, [8 x [3 x [12 x i32]]]*, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.mv_context*, i32, i32, i32, i32, i32, i32, %union.int_mv, i32, i32, i8, i32, [4 x [8 x [3 x [12 x i32]]]], [2 x [2047 x i32]], [5 x i32], [4 x i32], i64, i64, [4 x i32], [20 x i32], [20 x i32], i32, [20 x i32], i32, i32, i32, i32, i32, [1024 x i32], void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (%struct.block*, %struct.blockd*)*, i32, i32, [8 x i8] }
%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.PARTITION_INFO = type { i32, [16 x %struct.anon] }
%struct.anon = type { i32, %union.int_mv }
%struct.search_site = type { %struct.MV, i32 }
%struct.MV = type { i16, i16 }
%struct.mv_context = type { [19 x i8] }
%union.int_mv = type { i32 }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_CODER = type { i32, i32, i32, i32, i8*, i8*, %struct.vpx_internal_error_info* }
%struct.VP8_CONFIG = type { i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_codec_pkt_list*, i32, i32, [16 x i32], [16 x i32], i32, [16 x i32], i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_rational = type { i32, i32 }
%struct.lookahead_ctx = type opaque
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32 }
%struct.TOKENEXTRA = type { i8*, i16, i8, i8 }
%struct.CODING_CONTEXT = type { i32, i32, i32, i32, i32, [4 x i32], [2 x %struct.mv_context], [2 x [2048 x i32]], [4 x i8], [3 x i8], [4 x i8], [3 x i8], [5 x i32], [4 x i32], [4 x i32], i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon }
%union.anon = type { %struct.anon.0, [40 x i8] }
%struct.anon.0 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, i32, i32 }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_COMP = type { %struct.macroblock, [4 x i32], i32, [12 x i8] }
%struct.ENCODETHREAD_DATA = type { i32, i8*, i8* }
%struct.LPFTHREAD_DATA = type { i32, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA* }
%struct.variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32)* }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.twopass_rc = type { i32, double, i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS, i32, i64, i64, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, double }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.vp8_denoiser = type { [4 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, %struct.yv12_buffer_config, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.denoise_params }
%struct.denoise_params = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { double, i32, i64, i64, i64, i64, i64, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, i32, i32, i64, i32, i32, i32, i32, [4 x i32], [2 x i32] }
%struct.rd_costs_struct = type { [2 x [2048 x i32]], [2 x [512 x i32]], [2 x [10 x i32]], [2 x [10 x i32]], [10 x [10 x [10 x i32]]], [14 x i32], [4 x [8 x [3 x [12 x i32]]]] }

@vpx_mse16x16 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8cx_pick_filter_level_fast(%struct.yv12_buffer_config* nocapture readonly, %struct.VP8_COMP*) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 34
  %8 = load i32, i32* %7, align 16
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 32
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %22, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 50
  %14 = load i32, i32* %13, align 16
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %22, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 51
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %8, 7
  %21 = or i1 %20, %19
  br i1 %21, label %28, label %24

22:                                               ; preds = %12, %2
  %23 = icmp slt i32 %8, 7
  br i1 %23, label %28, label %24

24:                                               ; preds = %22, %16
  %25 = icmp slt i32 %8, 17
  %26 = lshr i32 %8, 3
  %27 = select i1 %25, i32 1, i32 %26
  br label %28

28:                                               ; preds = %16, %22, %24
  %29 = phi i32 [ %27, %24 ], [ 0, %22 ], [ 0, %16 ]
  %30 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 186, i32 0
  %31 = load i32, i32* %30, align 16
  %32 = icmp ugt i32 %31, 8
  %33 = select i1 %32, i32 47, i32 63
  %34 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 10
  %35 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %34, align 8
  %36 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 37
  store %struct.yv12_buffer_config* %36, %struct.yv12_buffer_config** %34, align 8
  %37 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 23
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %28
  %41 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 21, i32 6
  %42 = load i32, i32* %41, align 4
  br label %43

43:                                               ; preds = %28, %40
  %44 = phi i32 [ %42, %40 ], [ 0, %28 ]
  %45 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 48
  store i32 %44, i32* %45, align 8
  %46 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 47
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %44, %47
  br i1 %48, label %52, label %49

49:                                               ; preds = %43
  %50 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 45
  tail call void @vp8_loop_filter_update_sharpness(%struct.loop_filter_info_n* %50, i32 %44) #4
  %51 = load i32, i32* %45, align 8
  store i32 %51, i32* %46, align 4
  br label %52

52:                                               ; preds = %43, %49
  %53 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 46
  %54 = load i32, i32* %53, align 16
  %55 = icmp slt i32 %54, %29
  br i1 %55, label %58, label %56

56:                                               ; preds = %52
  %57 = icmp sgt i32 %54, %33
  br i1 %57, label %58, label %60

58:                                               ; preds = %56, %52
  %59 = phi i32 [ %29, %52 ], [ %33, %56 ]
  store i32 %59, i32* %53, align 16
  br label %60

60:                                               ; preds = %58, %56
  %61 = phi i32 [ %54, %56 ], [ %59, %58 ]
  %62 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %34, align 8
  %63 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %35, i64 0, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %35, i64 0, i32 4
  %66 = load i32, i32* %65, align 8
  %67 = ashr i32 %64, 4
  %68 = sdiv i32 %67, 8
  %69 = add nsw i32 %67, 7
  %70 = icmp ugt i32 %69, 14
  %71 = shl nsw i32 %68, 4
  %72 = or i32 %71, 4
  %73 = select i1 %70, i32 %72, i32 20
  %74 = ashr i32 %64, 5
  %75 = shl nsw i32 %74, 4
  %76 = add nsw i32 %75, -4
  %77 = mul nsw i32 %76, %66
  %78 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %35, i64 0, i32 13
  %79 = load i8*, i8** %78, align 8
  %80 = sext i32 %77 to i64
  %81 = getelementptr inbounds i8, i8* %79, i64 %80
  %82 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %62, i64 0, i32 13
  %83 = load i8*, i8** %82, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 %80
  %85 = mul nsw i32 %73, %66
  %86 = sext i32 %85 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 %81, i64 %86, i1 false) #4
  %87 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 18, i32 6
  tail call void @vp8_loop_filter_partial_frame(%struct.VP8Common* %6, %struct.macroblockd* %87, i32 %61) #4
  %88 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %34, align 8
  %89 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1
  %90 = load i32, i32* %89, align 4
  %91 = ashr i32 %90, 4
  %92 = sdiv i32 %91, 8
  %93 = add nsw i32 %91, 7
  %94 = icmp ugt i32 %93, 14
  %95 = shl nsw i32 %92, 4
  %96 = select i1 %94, i32 %95, i32 16
  %97 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %98 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %88, i64 0, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = ashr i32 %99, 5
  %101 = shl nsw i32 %100, 4
  %102 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %88, i64 0, i32 4
  %103 = icmp sgt i32 %96, 0
  br i1 %103, label %104, label %158

104:                                              ; preds = %60
  %105 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %88, i64 0, i32 13
  %106 = load i8*, i8** %105, align 8
  %107 = load i32, i32* %102, align 8
  %108 = mul nsw i32 %107, %101
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8, i8* %106, i64 %109
  %111 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %112 = load i8*, i8** %111, align 8
  %113 = load i32, i32* %97, align 8
  %114 = mul nsw i32 %113, %101
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %112, i64 %115
  %117 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %118 = bitcast i32* %3 to i8*
  %119 = load i32, i32* %117, align 8
  br label %120

120:                                              ; preds = %145, %104
  %121 = phi i32 [ %107, %104 ], [ %146, %145 ]
  %122 = phi i32 [ %113, %104 ], [ %147, %145 ]
  %123 = phi i32 [ %119, %104 ], [ %148, %145 ]
  %124 = phi i8* [ %110, %104 ], [ %155, %145 ]
  %125 = phi i8* [ %116, %104 ], [ %152, %145 ]
  %126 = phi i32 [ 0, %104 ], [ %156, %145 ]
  %127 = phi i32 [ 0, %104 ], [ %149, %145 ]
  %128 = icmp sgt i32 %123, 0
  br i1 %128, label %129, label %145

129:                                              ; preds = %120, %129
  %130 = phi i32 [ %144, %129 ], [ %121, %120 ]
  %131 = phi i32 [ %143, %129 ], [ %122, %120 ]
  %132 = phi i64 [ %139, %129 ], [ 0, %120 ]
  %133 = phi i32 [ %138, %129 ], [ %127, %120 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %118) #4
  store i32 -1431655766, i32* %3, align 4
  %134 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_mse16x16, align 8
  %135 = getelementptr inbounds i8, i8* %125, i64 %132
  %136 = getelementptr inbounds i8, i8* %124, i64 %132
  %137 = call i32 %134(i8* %135, i32 %131, i8* %136, i32 %130, i32* nonnull %3) #4
  %138 = add i32 %137, %133
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %118) #4
  %139 = add nuw i64 %132, 16
  %140 = load i32, i32* %117, align 8
  %141 = trunc i64 %139 to i32
  %142 = icmp sgt i32 %140, %141
  %143 = load i32, i32* %97, align 8
  %144 = load i32, i32* %102, align 8
  br i1 %142, label %129, label %145

145:                                              ; preds = %129, %120
  %146 = phi i32 [ %121, %120 ], [ %144, %129 ]
  %147 = phi i32 [ %122, %120 ], [ %143, %129 ]
  %148 = phi i32 [ %123, %120 ], [ %140, %129 ]
  %149 = phi i32 [ %127, %120 ], [ %138, %129 ]
  %150 = shl nsw i32 %147, 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %125, i64 %151
  %153 = shl nsw i32 %146, 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i8, i8* %124, i64 %154
  %156 = add nuw nsw i32 %126, 16
  %157 = icmp slt i32 %156, %96
  br i1 %157, label %120, label %158

158:                                              ; preds = %145, %60
  %159 = phi i32 [ 0, %60 ], [ %149, %145 ]
  %160 = icmp sgt i32 %61, 10
  %161 = select i1 %160, i32 2, i32 1
  %162 = sub nsw i32 %61, %161
  %163 = icmp slt i32 %162, %29
  br i1 %163, label %267, label %164

164:                                              ; preds = %158
  %165 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %166 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %167 = bitcast i32* %4 to i8*
  br label %168

168:                                              ; preds = %164, %262
  %169 = phi i32 [ %61, %164 ], [ %170, %262 ]
  %170 = phi i32 [ %162, %164 ], [ %265, %262 ]
  %171 = phi i32 [ %159, %164 ], [ %260, %262 ]
  %172 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %34, align 8
  %173 = load i32, i32* %63, align 4
  %174 = load i32, i32* %65, align 8
  %175 = ashr i32 %173, 4
  %176 = sdiv i32 %175, 8
  %177 = add nsw i32 %175, 7
  %178 = icmp ugt i32 %177, 14
  %179 = shl nsw i32 %176, 4
  %180 = or i32 %179, 4
  %181 = select i1 %178, i32 %180, i32 20
  %182 = ashr i32 %173, 5
  %183 = shl nsw i32 %182, 4
  %184 = add nsw i32 %183, -4
  %185 = mul nsw i32 %184, %174
  %186 = load i8*, i8** %78, align 8
  %187 = sext i32 %185 to i64
  %188 = getelementptr inbounds i8, i8* %186, i64 %187
  %189 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %172, i64 0, i32 13
  %190 = load i8*, i8** %189, align 8
  %191 = getelementptr inbounds i8, i8* %190, i64 %187
  %192 = mul nsw i32 %181, %174
  %193 = sext i32 %192 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %191, i8* align 1 %188, i64 %193, i1 false) #4
  call void @vp8_loop_filter_partial_frame(%struct.VP8Common* %6, %struct.macroblockd* %87, i32 %170) #4
  %194 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %34, align 8
  %195 = load i32, i32* %89, align 4
  %196 = ashr i32 %195, 4
  %197 = sdiv i32 %196, 8
  %198 = add nsw i32 %196, 7
  %199 = icmp ugt i32 %198, 14
  %200 = shl nsw i32 %197, 4
  %201 = select i1 %199, i32 %200, i32 16
  %202 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %194, i64 0, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = ashr i32 %203, 5
  %205 = shl nsw i32 %204, 4
  %206 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %194, i64 0, i32 4
  %207 = icmp sgt i32 %201, 0
  br i1 %207, label %208, label %259

208:                                              ; preds = %168
  %209 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %194, i64 0, i32 13
  %210 = load i8*, i8** %209, align 8
  %211 = load i32, i32* %206, align 8
  %212 = mul nsw i32 %211, %205
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i8, i8* %210, i64 %213
  %215 = load i8*, i8** %165, align 8
  %216 = load i32, i32* %97, align 8
  %217 = mul nsw i32 %216, %205
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds i8, i8* %215, i64 %218
  %220 = load i32, i32* %166, align 8
  br label %221

221:                                              ; preds = %246, %208
  %222 = phi i32 [ %211, %208 ], [ %247, %246 ]
  %223 = phi i32 [ %216, %208 ], [ %248, %246 ]
  %224 = phi i32 [ %220, %208 ], [ %249, %246 ]
  %225 = phi i8* [ %214, %208 ], [ %256, %246 ]
  %226 = phi i8* [ %219, %208 ], [ %253, %246 ]
  %227 = phi i32 [ 0, %208 ], [ %257, %246 ]
  %228 = phi i32 [ 0, %208 ], [ %250, %246 ]
  %229 = icmp sgt i32 %224, 0
  br i1 %229, label %230, label %246

230:                                              ; preds = %221, %230
  %231 = phi i32 [ %245, %230 ], [ %222, %221 ]
  %232 = phi i32 [ %244, %230 ], [ %223, %221 ]
  %233 = phi i64 [ %240, %230 ], [ 0, %221 ]
  %234 = phi i32 [ %239, %230 ], [ %228, %221 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %167) #4
  store i32 -1431655766, i32* %4, align 4
  %235 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_mse16x16, align 8
  %236 = getelementptr inbounds i8, i8* %226, i64 %233
  %237 = getelementptr inbounds i8, i8* %225, i64 %233
  %238 = call i32 %235(i8* %236, i32 %232, i8* %237, i32 %231, i32* nonnull %4) #4
  %239 = add i32 %238, %234
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %167) #4
  %240 = add nuw i64 %233, 16
  %241 = load i32, i32* %166, align 8
  %242 = trunc i64 %240 to i32
  %243 = icmp sgt i32 %241, %242
  %244 = load i32, i32* %97, align 8
  %245 = load i32, i32* %206, align 8
  br i1 %243, label %230, label %246

246:                                              ; preds = %230, %221
  %247 = phi i32 [ %222, %221 ], [ %245, %230 ]
  %248 = phi i32 [ %223, %221 ], [ %244, %230 ]
  %249 = phi i32 [ %224, %221 ], [ %241, %230 ]
  %250 = phi i32 [ %228, %221 ], [ %239, %230 ]
  %251 = shl nsw i32 %248, 4
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds i8, i8* %226, i64 %252
  %254 = shl nsw i32 %247, 4
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds i8, i8* %225, i64 %255
  %257 = add nuw nsw i32 %227, 16
  %258 = icmp slt i32 %257, %201
  br i1 %258, label %221, label %259

259:                                              ; preds = %246, %168
  %260 = phi i32 [ 0, %168 ], [ %250, %246 ]
  %261 = icmp slt i32 %260, %171
  br i1 %261, label %262, label %267

262:                                              ; preds = %259
  %263 = icmp sgt i32 %170, 10
  %264 = select i1 %263, i32 2, i32 1
  %265 = sub nsw i32 %170, %264
  %266 = icmp slt i32 %265, %29
  br i1 %266, label %267, label %168

267:                                              ; preds = %259, %262, %158
  %268 = phi i32 [ %159, %158 ], [ %260, %262 ], [ %171, %259 ]
  %269 = phi i32 [ %162, %158 ], [ %265, %262 ], [ %170, %259 ]
  %270 = phi i32 [ %61, %158 ], [ %170, %262 ], [ %169, %259 ]
  %271 = load i32, i32* %53, align 16
  %272 = icmp eq i32 %270, %271
  br i1 %272, label %273, label %385

273:                                              ; preds = %267
  %274 = icmp sgt i32 %269, 10
  %275 = select i1 %274, i32 2, i32 1
  %276 = add i32 %275, %270
  %277 = icmp slt i32 %276, %33
  br i1 %277, label %278, label %385

278:                                              ; preds = %273
  %279 = ashr i32 %268, 10
  %280 = sub nsw i32 %268, %279
  %281 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %282 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %283 = bitcast i32* %5 to i8*
  br label %284

284:                                              ; preds = %278, %378
  %285 = phi i32 [ %270, %278 ], [ %286, %378 ]
  %286 = phi i32 [ %276, %278 ], [ %383, %378 ]
  %287 = phi i32 [ %280, %278 ], [ %380, %378 ]
  %288 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %34, align 8
  %289 = load i32, i32* %63, align 4
  %290 = load i32, i32* %65, align 8
  %291 = ashr i32 %289, 4
  %292 = sdiv i32 %291, 8
  %293 = add nsw i32 %291, 7
  %294 = icmp ugt i32 %293, 14
  %295 = shl nsw i32 %292, 4
  %296 = or i32 %295, 4
  %297 = select i1 %294, i32 %296, i32 20
  %298 = ashr i32 %289, 5
  %299 = shl nsw i32 %298, 4
  %300 = add nsw i32 %299, -4
  %301 = mul nsw i32 %300, %290
  %302 = load i8*, i8** %78, align 8
  %303 = sext i32 %301 to i64
  %304 = getelementptr inbounds i8, i8* %302, i64 %303
  %305 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %288, i64 0, i32 13
  %306 = load i8*, i8** %305, align 8
  %307 = getelementptr inbounds i8, i8* %306, i64 %303
  %308 = mul nsw i32 %297, %290
  %309 = sext i32 %308 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %307, i8* align 1 %304, i64 %309, i1 false) #4
  call void @vp8_loop_filter_partial_frame(%struct.VP8Common* %6, %struct.macroblockd* %87, i32 %286) #4
  %310 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %34, align 8
  %311 = load i32, i32* %89, align 4
  %312 = ashr i32 %311, 4
  %313 = sdiv i32 %312, 8
  %314 = add nsw i32 %312, 7
  %315 = icmp ugt i32 %314, 14
  %316 = shl nsw i32 %313, 4
  %317 = select i1 %315, i32 %316, i32 16
  %318 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %310, i64 0, i32 1
  %319 = load i32, i32* %318, align 4
  %320 = ashr i32 %319, 5
  %321 = shl nsw i32 %320, 4
  %322 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %310, i64 0, i32 4
  %323 = icmp sgt i32 %317, 0
  br i1 %323, label %324, label %375

324:                                              ; preds = %284
  %325 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %310, i64 0, i32 13
  %326 = load i8*, i8** %325, align 8
  %327 = load i32, i32* %322, align 8
  %328 = mul nsw i32 %327, %321
  %329 = sext i32 %328 to i64
  %330 = getelementptr inbounds i8, i8* %326, i64 %329
  %331 = load i8*, i8** %281, align 8
  %332 = load i32, i32* %97, align 8
  %333 = mul nsw i32 %332, %321
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds i8, i8* %331, i64 %334
  %336 = load i32, i32* %282, align 8
  br label %337

337:                                              ; preds = %362, %324
  %338 = phi i32 [ %327, %324 ], [ %363, %362 ]
  %339 = phi i32 [ %332, %324 ], [ %364, %362 ]
  %340 = phi i32 [ %336, %324 ], [ %365, %362 ]
  %341 = phi i8* [ %330, %324 ], [ %372, %362 ]
  %342 = phi i8* [ %335, %324 ], [ %369, %362 ]
  %343 = phi i32 [ 0, %324 ], [ %373, %362 ]
  %344 = phi i32 [ 0, %324 ], [ %366, %362 ]
  %345 = icmp sgt i32 %340, 0
  br i1 %345, label %346, label %362

346:                                              ; preds = %337, %346
  %347 = phi i32 [ %361, %346 ], [ %338, %337 ]
  %348 = phi i32 [ %360, %346 ], [ %339, %337 ]
  %349 = phi i64 [ %356, %346 ], [ 0, %337 ]
  %350 = phi i32 [ %355, %346 ], [ %344, %337 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %283) #4
  store i32 -1431655766, i32* %5, align 4
  %351 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_mse16x16, align 8
  %352 = getelementptr inbounds i8, i8* %342, i64 %349
  %353 = getelementptr inbounds i8, i8* %341, i64 %349
  %354 = call i32 %351(i8* %352, i32 %348, i8* %353, i32 %347, i32* nonnull %5) #4
  %355 = add i32 %354, %350
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %283) #4
  %356 = add nuw i64 %349, 16
  %357 = load i32, i32* %282, align 8
  %358 = trunc i64 %356 to i32
  %359 = icmp sgt i32 %357, %358
  %360 = load i32, i32* %97, align 8
  %361 = load i32, i32* %322, align 8
  br i1 %359, label %346, label %362

362:                                              ; preds = %346, %337
  %363 = phi i32 [ %338, %337 ], [ %361, %346 ]
  %364 = phi i32 [ %339, %337 ], [ %360, %346 ]
  %365 = phi i32 [ %340, %337 ], [ %357, %346 ]
  %366 = phi i32 [ %344, %337 ], [ %355, %346 ]
  %367 = shl nsw i32 %364, 4
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds i8, i8* %342, i64 %368
  %370 = shl nsw i32 %363, 4
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds i8, i8* %341, i64 %371
  %373 = add nuw nsw i32 %343, 16
  %374 = icmp slt i32 %373, %317
  br i1 %374, label %337, label %375

375:                                              ; preds = %362, %284
  %376 = phi i32 [ 0, %284 ], [ %366, %362 ]
  %377 = icmp slt i32 %376, %287
  br i1 %377, label %378, label %385

378:                                              ; preds = %375
  %379 = ashr i32 %376, 10
  %380 = sub nsw i32 %376, %379
  %381 = icmp sgt i32 %286, 10
  %382 = select i1 %381, i32 2, i32 1
  %383 = add nsw i32 %382, %286
  %384 = icmp slt i32 %383, %33
  br i1 %384, label %284, label %385

385:                                              ; preds = %375, %378, %273, %267
  %386 = phi i32 [ %270, %267 ], [ %270, %273 ], [ %285, %375 ], [ %286, %378 ]
  %387 = icmp slt i32 %386, %29
  %388 = select i1 %387, i32 %29, i32 %386
  %389 = icmp sgt i32 %388, %33
  %390 = select i1 %389, i32 %33, i32 %388
  store i32 %390, i32* %53, align 16
  store %struct.yv12_buffer_config* %35, %struct.yv12_buffer_config** %34, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @vp8_loop_filter_update_sharpness(%struct.loop_filter_info_n*, i32) local_unnamed_addr #2

declare void @vp8_loop_filter_partial_frame(%struct.VP8Common*, %struct.macroblockd*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8cx_set_alt_lf_level(%struct.VP8_COMP* nocapture, i32) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 135, i64 1, i64 0
  %4 = load i8, i8* %3, align 4
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 28, i64 1, i64 0
  store i8 %4, i8* %5, align 1
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 135, i64 1, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 28, i64 1, i64 1
  store i8 %7, i8* %8, align 1
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 135, i64 1, i64 2
  %10 = load i8, i8* %9, align 2
  %11 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 28, i64 1, i64 2
  store i8 %10, i8* %11, align 1
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 135, i64 1, i64 3
  %13 = load i8, i8* %12, align 1
  %14 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 28, i64 1, i64 3
  store i8 %13, i8* %14, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8cx_pick_filter_level(%struct.yv12_buffer_config*, %struct.VP8_COMP*) local_unnamed_addr #0 {
  %3 = alloca [64 x i32], align 16
  %4 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 34
  %6 = load i32, i32* %5, align 16
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 32
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %20, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 50
  %12 = load i32, i32* %11, align 16
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 51
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %6, 7
  %19 = or i1 %18, %17
  br i1 %19, label %26, label %22

20:                                               ; preds = %10, %2
  %21 = icmp slt i32 %6, 7
  br i1 %21, label %26, label %22

22:                                               ; preds = %20, %14
  %23 = icmp slt i32 %6, 17
  %24 = lshr i32 %6, 3
  %25 = select i1 %23, i32 1, i32 %24
  br label %26

26:                                               ; preds = %14, %20, %22
  %27 = phi i32 [ %25, %22 ], [ 0, %20 ], [ 0, %14 ]
  %28 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 186, i32 0
  %29 = load i32, i32* %28, align 16
  %30 = icmp ugt i32 %29, 8
  %31 = select i1 %30, i32 47, i32 63
  %32 = bitcast [64 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %32) #4
  %33 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 10
  %34 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %33, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %32, i8 0, i64 256, i1 false)
  %35 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 37
  store %struct.yv12_buffer_config* %35, %struct.yv12_buffer_config** %33, align 8
  %36 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 23
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %26
  %40 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 21, i32 6
  %41 = load i32, i32* %40, align 4
  br label %42

42:                                               ; preds = %26, %39
  %43 = phi i32 [ %41, %39 ], [ 0, %26 ]
  %44 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 48
  store i32 %43, i32* %44, align 8
  %45 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 19, i32 46
  %46 = load i32, i32* %45, align 16
  %47 = icmp slt i32 %46, %27
  %48 = icmp sgt i32 %46, %31
  %49 = select i1 %48, i32 %31, i32 %46
  %50 = select i1 %47, i32 %27, i32 %49
  %51 = icmp slt i32 %50, 16
  %52 = sdiv i32 %50, 4
  tail call void @vpx_yv12_copy_y_c(%struct.yv12_buffer_config* %34, %struct.yv12_buffer_config* %35) #4
  %53 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 135, i64 1, i64 0
  %54 = load i8, i8* %53, align 4
  %55 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 18, i32 6, i32 28, i64 1, i64 0
  store i8 %54, i8* %55, align 1
  %56 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 135, i64 1, i64 1
  %57 = load i8, i8* %56, align 1
  %58 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 18, i32 6, i32 28, i64 1, i64 1
  store i8 %57, i8* %58, align 1
  %59 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 135, i64 1, i64 2
  %60 = load i8, i8* %59, align 2
  %61 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 18, i32 6, i32 28, i64 1, i64 2
  store i8 %60, i8* %61, align 1
  %62 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 135, i64 1, i64 3
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 18, i32 6, i32 28, i64 1, i64 3
  store i8 %63, i8* %64, align 1
  %65 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %1, i64 0, i32 18, i32 6
  tail call void @vp8_loop_filter_frame_yonly(%struct.VP8Common* %4, %struct.macroblockd* %65, i32 %50) #4
  %66 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %33, align 8
  %67 = tail call i32 @vp8_calc_ss_err(%struct.yv12_buffer_config* %0, %struct.yv12_buffer_config* %66) #4
  %68 = sext i32 %50 to i64
  %69 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %68
  store i32 %67, i32* %69, align 4
  %70 = select i1 %51, i32 4, i32 %52
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %72, label %152

72:                                               ; preds = %42, %142
  %73 = phi i32 [ %150, %142 ], [ 0, %42 ]
  %74 = phi i32 [ %144, %142 ], [ %50, %42 ]
  %75 = phi i32 [ %149, %142 ], [ %70, %42 ]
  %76 = phi i32 [ %143, %142 ], [ %67, %42 ]
  %77 = sdiv i32 %74, 8
  %78 = sub nsw i32 15, %77
  %79 = ashr i32 %76, %78
  %80 = mul nsw i32 %79, %75
  %81 = load i32, i32* %28, align 16
  %82 = icmp ult i32 %81, 20
  br i1 %82, label %83, label %86

83:                                               ; preds = %72
  %84 = mul i32 %81, %80
  %85 = udiv i32 %84, 20
  br label %86

86:                                               ; preds = %83, %72
  %87 = phi i32 [ %85, %83 ], [ %80, %72 ]
  %88 = add nsw i32 %74, %75
  %89 = icmp sgt i32 %88, %31
  %90 = select i1 %89, i32 %31, i32 %88
  %91 = sub nsw i32 %74, %75
  %92 = icmp slt i32 %91, %27
  %93 = select i1 %92, i32 %27, i32 %91
  %94 = icmp sgt i32 %73, 0
  %95 = icmp eq i32 %93, %74
  %96 = or i1 %94, %95
  br i1 %96, label %117, label %97

97:                                               ; preds = %86
  %98 = sext i32 %93 to i64
  %99 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %110

102:                                              ; preds = %97
  %103 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %33, align 8
  tail call void @vpx_yv12_copy_y_c(%struct.yv12_buffer_config* %34, %struct.yv12_buffer_config* %103) #4
  %104 = load i8, i8* %53, align 4
  store i8 %104, i8* %55, align 1
  %105 = load i8, i8* %56, align 1
  store i8 %105, i8* %58, align 1
  %106 = load i8, i8* %59, align 2
  store i8 %106, i8* %61, align 1
  %107 = load i8, i8* %62, align 1
  store i8 %107, i8* %64, align 1
  tail call void @vp8_loop_filter_frame_yonly(%struct.VP8Common* %4, %struct.macroblockd* %65, i32 %93) #4
  %108 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %33, align 8
  %109 = tail call i32 @vp8_calc_ss_err(%struct.yv12_buffer_config* %0, %struct.yv12_buffer_config* %108) #4
  store i32 %109, i32* %99, align 4
  br label %110

110:                                              ; preds = %97, %102
  %111 = phi i32 [ %109, %102 ], [ %100, %97 ]
  %112 = sub nsw i32 %111, %87
  %113 = icmp slt i32 %112, %76
  br i1 %113, label %114, label %117

114:                                              ; preds = %110
  %115 = icmp slt i32 %111, %76
  %116 = select i1 %115, i32 %111, i32 %76
  br label %117

117:                                              ; preds = %86, %110, %114
  %118 = phi i32 [ %116, %114 ], [ %76, %110 ], [ %76, %86 ]
  %119 = phi i32 [ %93, %114 ], [ %74, %110 ], [ %74, %86 ]
  %120 = icmp slt i32 %73, 0
  %121 = icmp eq i32 %90, %74
  %122 = or i1 %120, %121
  br i1 %122, label %142, label %123

123:                                              ; preds = %117
  %124 = sext i32 %90 to i64
  %125 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %136

128:                                              ; preds = %123
  %129 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %33, align 8
  tail call void @vpx_yv12_copy_y_c(%struct.yv12_buffer_config* %34, %struct.yv12_buffer_config* %129) #4
  %130 = load i8, i8* %53, align 4
  store i8 %130, i8* %55, align 1
  %131 = load i8, i8* %56, align 1
  store i8 %131, i8* %58, align 1
  %132 = load i8, i8* %59, align 2
  store i8 %132, i8* %61, align 1
  %133 = load i8, i8* %62, align 1
  store i8 %133, i8* %64, align 1
  tail call void @vp8_loop_filter_frame_yonly(%struct.VP8Common* %4, %struct.macroblockd* %65, i32 %90) #4
  %134 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %33, align 8
  %135 = tail call i32 @vp8_calc_ss_err(%struct.yv12_buffer_config* %0, %struct.yv12_buffer_config* %134) #4
  store i32 %135, i32* %125, align 4
  br label %136

136:                                              ; preds = %123, %128
  %137 = phi i32 [ %135, %128 ], [ %126, %123 ]
  %138 = sub nsw i32 %118, %87
  %139 = icmp slt i32 %137, %138
  %140 = select i1 %139, i32 %137, i32 %118
  %141 = select i1 %139, i32 %90, i32 %119
  br label %142

142:                                              ; preds = %136, %117
  %143 = phi i32 [ %118, %117 ], [ %140, %136 ]
  %144 = phi i32 [ %119, %117 ], [ %141, %136 ]
  %145 = icmp eq i32 %144, %74
  %146 = icmp slt i32 %144, %74
  %147 = select i1 %146, i32 -1, i32 1
  %148 = zext i1 %145 to i32
  %149 = lshr i32 %75, %148
  %150 = select i1 %145, i32 0, i32 %147
  %151 = icmp sgt i32 %149, 0
  br i1 %151, label %72, label %152

152:                                              ; preds = %142, %42
  %153 = phi i32 [ %50, %42 ], [ %144, %142 ]
  store i32 %153, i32* %45, align 16
  store %struct.yv12_buffer_config* %34, %struct.yv12_buffer_config** %33, align 8
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %32) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @vpx_yv12_copy_y_c(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*) local_unnamed_addr #2

declare void @vp8_loop_filter_frame_yonly(%struct.VP8Common*, %struct.macroblockd*, i32) local_unnamed_addr #2

declare i32 @vp8_calc_ss_err(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
