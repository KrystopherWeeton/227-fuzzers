; ModuleID = '../../base/task/thread_pool/task_source.cc'
source_filename = "../../base/task/thread_pool/task_source.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::internal::TaskSource::Transaction" = type { %"class.base::internal::TaskSource"* }
%"class.base::internal::TaskSource" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", %"class.base::TaskTraits", %"struct.std::__1::atomic.1", [4 x i8], %"class.base::internal::CheckedLock", %"class.base::HeapHandle", %"class.base::TaskRunner"*, i32, [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::TaskTraits" = type { %"struct.base::TaskTraitsExtensionStorage", i8, i8, i8, i8, i8, i8 }
%"struct.base::TaskTraitsExtensionStorage" = type { i8, %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl.3" }
%"struct.std::__1::__cxx_atomic_impl.3" = type { %"struct.std::__1::__cxx_atomic_base_impl.4" }
%"struct.std::__1::__cxx_atomic_base_impl.4" = type { i8 }
%"class.base::internal::CheckedLock" = type { %"class.base::Lock" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::HeapHandle" = type { i64 }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.5", [4 x i8] }>
%"class.base::RefCountedThreadSafe.5" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::internal::RegisteredTaskSource" = type { %class.scoped_refptr, %"class.base::internal::TaskTracker"* }
%class.scoped_refptr = type { %"class.base::internal::TaskSource"* }
%"class.base::internal::TaskTracker" = type { i32 (...)**, %"class.base::TaskAnnotator", %"class.std::__1::basic_string", i8, %"class.std::__1::unique_ptr", %"struct.std::__1::atomic", %"struct.std::__1::atomic.10", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr.14", %"class.base::OnceCallback", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr.26", %"class.base::internal::TrackedRefFactory" }
%"class.base::TaskAnnotator" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.base::internal::TaskTracker::State"* }
%"class.base::internal::TaskTracker::State" = type opaque
%"struct.std::__1::atomic.10" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__cxx_atomic_impl.12" }
%"struct.std::__1::__cxx_atomic_impl.12" = type { %"struct.std::__1::__cxx_atomic_base_impl.13" }
%"struct.std::__1::__cxx_atomic_base_impl.13" = type { i32 }
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.base::ConditionVariable"* }
%"class.base::ConditionVariable" = type <{ %union.pthread_cond_t, %union.pthread_mutex_t*, i8, [7 x i8] }>
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.17, %union.anon.19, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.17 = type { i64 }
%union.anon.19 = type { i64 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.24 }
%class.scoped_refptr.24 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.25", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.25" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.base::WaitableEvent"* }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.29, i8, [7 x i8] }>
%class.scoped_refptr.29 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.30", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.30" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.31" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { i64 }
%"class.base::internal::TrackedRefFactory" = type { %"class.base::internal::TaskTracker"*, %"class.base::AtomicRefCount", [4 x i8], %"class.absl::optional", %"class.absl::optional.40" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [7 x i8], %union.anon.39 }
%union.anon.39 = type { %"class.base::WaitableEvent" }
%"class.absl::optional.40" = type { %"class.absl::optional_internal::optional_data.41" }
%"class.absl::optional_internal::optional_data.41" = type { %"class.absl::optional_internal::optional_data_base.42" }
%"class.absl::optional_internal::optional_data_base.42" = type { %"class.absl::optional_internal::optional_data_dtor_base.43" }
%"class.absl::optional_internal::optional_data_dtor_base.43" = type { i8, %union.anon.44 }
%union.anon.44 = type { %"class.base::internal::TrackedRef" }
%"class.base::internal::TrackedRef" = type { %"class.base::internal::TaskTracker"*, %"class.base::internal::TrackedRefFactory"* }
%"struct.base::internal::TransactionWithRegisteredTaskSource" = type { %"class.base::internal::RegisteredTaskSource", %"class.base::internal::TaskSource::Transaction" }
%"struct.base::internal::Task" = type { %"struct.base::PendingTask.base", [3 x i8] }
%"struct.base::PendingTask.base" = type <{ %"class.base::OnceCallback", %"class.base::Location", %"class.base::TimeTicks", %"class.base::TimeTicks", %"struct.std::__1::array.47", i32, [4 x i8], i8*, i32, i8 }>
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"struct.std::__1::array.47" = type { [4 x i8*] }

@_ZTVN4base8internal10TaskSourceE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.base::internal::TaskSource"*)* @_ZN4base8internal10TaskSourceD2Ev to i8*), i8* bitcast (void (%"class.base::internal::TaskSource"*)* @_ZN4base8internal10TaskSourceD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN4base8internal10TaskSource11TransactionC1EPS1_ = hidden unnamed_addr alias void (%"class.base::internal::TaskSource::Transaction"*, %"class.base::internal::TaskSource"*), void (%"class.base::internal::TaskSource::Transaction"*, %"class.base::internal::TaskSource"*)* @_ZN4base8internal10TaskSource11TransactionC2EPS1_
@_ZN4base8internal10TaskSource11TransactionC1EOS2_ = hidden unnamed_addr alias void (%"class.base::internal::TaskSource::Transaction"*, %"class.base::internal::TaskSource::Transaction"*), void (%"class.base::internal::TaskSource::Transaction"*, %"class.base::internal::TaskSource::Transaction"*)* @_ZN4base8internal10TaskSource11TransactionC2EOS2_
@_ZN4base8internal10TaskSource11TransactionD1Ev = hidden unnamed_addr alias void (%"class.base::internal::TaskSource::Transaction"*), void (%"class.base::internal::TaskSource::Transaction"*)* @_ZN4base8internal10TaskSource11TransactionD2Ev
@_ZN4base8internal10TaskSourceD1Ev = hidden unnamed_addr alias void (%"class.base::internal::TaskSource"*), void (%"class.base::internal::TaskSource"*)* @_ZN4base8internal10TaskSourceD2Ev
@_ZN4base8internal20RegisteredTaskSourceC1Ev = hidden unnamed_addr alias void (%"class.base::internal::RegisteredTaskSource"*), void (%"class.base::internal::RegisteredTaskSource"*)* @_ZN4base8internal20RegisteredTaskSourceC2Ev
@_ZN4base8internal20RegisteredTaskSourceC1EDn = hidden unnamed_addr alias void (%"class.base::internal::RegisteredTaskSource"*, i8*), void (%"class.base::internal::RegisteredTaskSource"*, i8*)* @_ZN4base8internal20RegisteredTaskSourceC2EDn
@_ZN4base8internal20RegisteredTaskSourceC1EOS1_ = hidden unnamed_addr alias void (%"class.base::internal::RegisteredTaskSource"*, %"class.base::internal::RegisteredTaskSource"*), void (%"class.base::internal::RegisteredTaskSource"*, %"class.base::internal::RegisteredTaskSource"*)* @_ZN4base8internal20RegisteredTaskSourceC2EOS1_
@_ZN4base8internal20RegisteredTaskSourceD1Ev = hidden unnamed_addr alias void (%"class.base::internal::RegisteredTaskSource"*), void (%"class.base::internal::RegisteredTaskSource"*)* @_ZN4base8internal20RegisteredTaskSourceD2Ev
@_ZN4base8internal20RegisteredTaskSourceC1E13scoped_refptrINS0_10TaskSourceEEPNS0_11TaskTrackerE = hidden unnamed_addr alias void (%"class.base::internal::RegisteredTaskSource"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskTracker"*), void (%"class.base::internal::RegisteredTaskSource"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskTracker"*)* @_ZN4base8internal20RegisteredTaskSourceC2E13scoped_refptrINS0_10TaskSourceEEPNS0_11TaskTrackerE
@_ZN4base8internal35TransactionWithRegisteredTaskSourceC1ENS0_20RegisteredTaskSourceENS0_10TaskSource11TransactionE = hidden unnamed_addr alias void (%"struct.base::internal::TransactionWithRegisteredTaskSource"*, %"class.base::internal::RegisteredTaskSource"*, %"class.base::internal::TaskSource::Transaction"*), void (%"struct.base::internal::TransactionWithRegisteredTaskSource"*, %"class.base::internal::RegisteredTaskSource"*, %"class.base::internal::TaskSource::Transaction"*)* @_ZN4base8internal35TransactionWithRegisteredTaskSourceC2ENS0_20RegisteredTaskSourceENS0_10TaskSource11TransactionE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal10TaskSource11TransactionC2EPS1_(%"class.base::internal::TaskSource::Transaction"* nocapture, %"class.base::internal::TaskSource"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::TaskSource::Transaction", %"class.base::internal::TaskSource::Transaction"* %0, i64 0, i32 0
  store %"class.base::internal::TaskSource"* %1, %"class.base::internal::TaskSource"** %3, align 8
  %4 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %1, i64 0, i32 5, i32 0
  %5 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %4, i64 0, i32 0, i32 0
  %6 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %5) #9
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8, !prof !2

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %4, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %9) #9
  br label %10

10:                                               ; preds = %2, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base8internal10TaskSource11TransactionC2EOS2_(%"class.base::internal::TaskSource::Transaction"* nocapture, %"class.base::internal::TaskSource::Transaction"* nocapture dereferenceable(8)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::TaskSource::Transaction", %"class.base::internal::TaskSource::Transaction"* %1, i64 0, i32 0
  %4 = bitcast %"class.base::internal::TaskSource::Transaction"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.base::internal::TaskSource::Transaction"* %0 to i64*
  store i64 %5, i64* %6, align 8
  store %"class.base::internal::TaskSource"* null, %"class.base::internal::TaskSource"** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal10TaskSource11TransactionD2Ev(%"class.base::internal::TaskSource::Transaction"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::TaskSource::Transaction", %"class.base::internal::TaskSource::Transaction"* %0, i64 0, i32 0
  %3 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %2, align 8
  %4 = icmp eq %"class.base::internal::TaskSource"* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %3, i64 0, i32 5, i32 0, i32 0, i32 0
  %7 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %6) #9
  br label %8

8:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base8internal10TaskSource11Transaction14UpdatePriorityENS_12TaskPriorityE(%"class.base::internal::TaskSource::Transaction"* nocapture readonly, i8 zeroext) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::TaskSource::Transaction", %"class.base::internal::TaskSource::Transaction"* %0, i64 0, i32 0
  %4 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %4, i64 0, i32 2, i32 1
  store i8 %1, i8* %5, align 1
  %6 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %3, align 8
  %7 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %6, i64 0, i32 2, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %6, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  store atomic i8 %8, i8* %9 monotonic, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base8internal10TaskSource13SetHeapHandleERKNS_10HeapHandleE(%"class.base::internal::TaskSource"* nocapture, %"class.base::HeapHandle"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::HeapHandle", %"class.base::HeapHandle"* %1, i64 0, i32 0
  %4 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %0, i64 0, i32 6, i32 0
  %5 = load i64, i64* %3, align 8
  store i64 %5, i64* %4, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN4base8internal10TaskSource15ClearHeapHandleEv(%"class.base::internal::TaskSource"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %0, i64 0, i32 6, i32 0
  store i64 -1, i64* %2, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal10TaskSourceC2ERKNS_10TaskTraitsEPNS_10TaskRunnerENS0_23TaskSourceExecutionModeE(%"class.base::internal::TaskSource"*, %"class.base::TaskTraits"* nocapture readonly dereferenceable(15), %"class.base::TaskRunner"*, i32) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN4base8internal10TaskSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %0, i64 0, i32 2, i32 0, i32 0
  %8 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %8, i64 9, i1 false) #9
  %9 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %0, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %10, i64 6, i1 false) #9
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %0, i64 0, i32 5, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %13) #9
  %14 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %0, i64 0, i32 6, i32 0
  store i64 -1, i64* %14, align 8
  %15 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %0, i64 0, i32 7
  store %"class.base::TaskRunner"* %2, %"class.base::TaskRunner"** %15, align 8
  %16 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %0, i64 0, i32 8
  store i32 %3, i32* %16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal10TaskSourceD2Ev(%"class.base::internal::TaskSource"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN4base8internal10TaskSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %0, i64 0, i32 5, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %3) #9
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN4base8internal10TaskSourceD0Ev(%"class.base::internal::TaskSource"* nocapture readnone) unnamed_addr #4 align 2 {
  tail call void @llvm.trap() #10
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal10TaskSource16BeginTransactionEv(%"class.base::internal::TaskSource::Transaction"* noalias nocapture sret, %"class.base::internal::TaskSource"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::TaskSource::Transaction", %"class.base::internal::TaskSource::Transaction"* %0, i64 0, i32 0
  store %"class.base::internal::TaskSource"* %1, %"class.base::internal::TaskSource"** %3, align 8
  %4 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %1, i64 0, i32 5, i32 0
  %5 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %4, i64 0, i32 0, i32 0
  %6 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %5) #9
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8, !prof !2

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %4, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %9) #9
  br label %10

10:                                               ; preds = %2, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base8internal20RegisteredTaskSourceC2Ev(%"class.base::internal::RegisteredTaskSource"* nocapture) unnamed_addr #6 align 2 {
  %2 = bitcast %"class.base::internal::RegisteredTaskSource"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal20RegisteredTaskSourceC2EDn(%"class.base::internal::RegisteredTaskSource"* nocapture, i8* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.base::internal::RegisteredTaskSource"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal20RegisteredTaskSourceC2EOS1_(%"class.base::internal::RegisteredTaskSource"* nocapture, %"class.base::internal::RegisteredTaskSource"* nocapture dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %1, i64 0, i32 0, i32 0
  %4 = bitcast %"class.base::internal::RegisteredTaskSource"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.base::internal::RegisteredTaskSource"* %0 to i64*
  store i64 %5, i64* %6, align 8
  store %"class.base::internal::TaskSource"* null, %"class.base::internal::TaskSource"** %3, align 8
  %7 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %1, i64 0, i32 1
  %9 = bitcast %"class.base::internal::TaskTracker"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  store %"class.base::internal::TaskTracker"* null, %"class.base::internal::TaskTracker"** %8, align 8
  %11 = bitcast %"class.base::internal::TaskTracker"** %7 to i64*
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal20RegisteredTaskSourceD2Ev(%"class.base::internal::RegisteredTaskSource"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %2, align 8
  %4 = icmp eq %"class.base::internal::TaskSource"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %0, i64 0, i32 1
  %7 = load %"class.base::internal::TaskTracker"*, %"class.base::internal::TaskTracker"** %6, align 8
  %8 = icmp eq %"class.base::internal::TaskTracker"* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  store %"class.base::internal::TaskSource"* null, %"class.base::internal::TaskSource"** %2, align 8
  %10 = tail call %"class.base::internal::TaskSource"* @_ZN4base8internal11TaskTracker20UnregisterTaskSourceE13scoped_refptrINS0_10TaskSourceEE(%"class.base::internal::TaskTracker"* nonnull %7, %"class.base::internal::TaskSource"* nonnull %3) #9
  br label %12

11:                                               ; preds = %5, %1
  store %"class.base::internal::TaskSource"* null, %"class.base::internal::TaskSource"** %2, align 8
  br label %12

12:                                               ; preds = %9, %11
  %13 = phi %"class.base::internal::TaskSource"* [ %3, %11 ], [ %10, %9 ]
  %14 = icmp eq %"class.base::internal::TaskSource"* %13, null
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %13, i64 0, i32 1
  %17 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw sub i32* %17, i32 1 acq_rel
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %27

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %16, i64 -2
  %22 = bitcast %"class.base::RefCountedThreadSafe"* %21 to %"class.base::internal::TaskSource"*
  %23 = bitcast %"class.base::RefCountedThreadSafe"* %21 to void (%"class.base::internal::TaskSource"*)***
  %24 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %24, i64 4
  %26 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %25, align 8
  tail call void %26(%"class.base::internal::TaskSource"* nonnull %22) #9
  br label %27

27:                                               ; preds = %12, %15, %20
  %28 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %2, align 8
  %29 = icmp eq %"class.base::internal::TaskSource"* %28, null
  br i1 %29, label %42, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %28, i64 0, i32 1
  %32 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = atomicrmw sub i32* %32, i32 1 acq_rel
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %35, label %42

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %31, i64 -2
  %37 = bitcast %"class.base::RefCountedThreadSafe"* %36 to %"class.base::internal::TaskSource"*
  %38 = bitcast %"class.base::RefCountedThreadSafe"* %36 to void (%"class.base::internal::TaskSource"*)***
  %39 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %38, align 8
  %40 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %39, i64 4
  %41 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %40, align 8
  tail call void %41(%"class.base::internal::TaskSource"* nonnull %37) #9
  br label %42

42:                                               ; preds = %27, %30, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::internal::TaskSource"* @_ZN4base8internal20RegisteredTaskSource10UnregisterEv(%"class.base::internal::RegisteredTaskSource"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %2, align 8
  %4 = icmp eq %"class.base::internal::TaskSource"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %0, i64 0, i32 1
  %7 = load %"class.base::internal::TaskTracker"*, %"class.base::internal::TaskTracker"** %6, align 8
  %8 = icmp eq %"class.base::internal::TaskTracker"* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  store %"class.base::internal::TaskSource"* null, %"class.base::internal::TaskSource"** %2, align 8
  %10 = tail call %"class.base::internal::TaskSource"* @_ZN4base8internal11TaskTracker20UnregisterTaskSourceE13scoped_refptrINS0_10TaskSourceEE(%"class.base::internal::TaskTracker"* nonnull %7, %"class.base::internal::TaskSource"* nonnull %3) #9
  br label %12

11:                                               ; preds = %1, %5
  store %"class.base::internal::TaskSource"* null, %"class.base::internal::TaskSource"** %2, align 8
  br label %12

12:                                               ; preds = %11, %9
  %13 = phi %"class.base::internal::TaskSource"* [ %3, %11 ], [ %10, %9 ]
  ret %"class.base::internal::TaskSource"* %13
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal20RegisteredTaskSource16CreateForTestingE13scoped_refptrINS0_10TaskSourceEEPNS0_11TaskTrackerE(%"class.base::internal::RegisteredTaskSource"* noalias nocapture sret, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskTracker"*) local_unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.base::internal::TaskSource"* %1 to i64
  %5 = bitcast %"class.base::internal::RegisteredTaskSource"* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %0, i64 0, i32 1
  store %"class.base::internal::TaskTracker"* %2, %"class.base::internal::TaskTracker"** %6, align 8
  ret void
}

declare %"class.base::internal::TaskSource"* @_ZN4base8internal11TaskTracker20UnregisterTaskSourceE13scoped_refptrINS0_10TaskSourceEE(%"class.base::internal::TaskTracker"*, %"class.base::internal::TaskSource"*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.base::internal::RegisteredTaskSource"* @_ZN4base8internal20RegisteredTaskSourceaSEOS1_(%"class.base::internal::RegisteredTaskSource"* returned, %"class.base::internal::RegisteredTaskSource"* nocapture dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %3, align 8
  %5 = icmp eq %"class.base::internal::TaskSource"* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %0, i64 0, i32 1
  %8 = load %"class.base::internal::TaskTracker"*, %"class.base::internal::TaskTracker"** %7, align 8
  %9 = icmp eq %"class.base::internal::TaskTracker"* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  store %"class.base::internal::TaskSource"* null, %"class.base::internal::TaskSource"** %3, align 8
  %11 = tail call %"class.base::internal::TaskSource"* @_ZN4base8internal11TaskTracker20UnregisterTaskSourceE13scoped_refptrINS0_10TaskSourceEE(%"class.base::internal::TaskTracker"* nonnull %8, %"class.base::internal::TaskSource"* nonnull %4) #9
  br label %13

12:                                               ; preds = %6, %2
  store %"class.base::internal::TaskSource"* null, %"class.base::internal::TaskSource"** %3, align 8
  br label %13

13:                                               ; preds = %10, %12
  %14 = phi %"class.base::internal::TaskSource"* [ %4, %12 ], [ %11, %10 ]
  %15 = icmp eq %"class.base::internal::TaskSource"* %14, null
  br i1 %15, label %28, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %14, i64 0, i32 1
  %18 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw sub i32* %18, i32 1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %28

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %17, i64 -2
  %23 = bitcast %"class.base::RefCountedThreadSafe"* %22 to %"class.base::internal::TaskSource"*
  %24 = bitcast %"class.base::RefCountedThreadSafe"* %22 to void (%"class.base::internal::TaskSource"*)***
  %25 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %25, i64 4
  %27 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %26, align 8
  tail call void %27(%"class.base::internal::TaskSource"* nonnull %23) #9
  br label %28

28:                                               ; preds = %13, %16, %21
  %29 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %1, i64 0, i32 0, i32 0
  %30 = bitcast %"class.base::internal::RegisteredTaskSource"* %1 to i64*
  %31 = load i64, i64* %30, align 8
  store %"class.base::internal::TaskSource"* null, %"class.base::internal::TaskSource"** %29, align 8
  %32 = bitcast %"class.base::internal::RegisteredTaskSource"* %0 to i64*
  %33 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %3, align 8
  store i64 %31, i64* %32, align 8
  %34 = icmp eq %"class.base::internal::TaskSource"* %33, null
  br i1 %34, label %47, label %35

35:                                               ; preds = %28
  %36 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %33, i64 0, i32 1
  %37 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = atomicrmw sub i32* %37, i32 1 acq_rel
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %47

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %36, i64 -2
  %42 = bitcast %"class.base::RefCountedThreadSafe"* %41 to %"class.base::internal::TaskSource"*
  %43 = bitcast %"class.base::RefCountedThreadSafe"* %41 to void (%"class.base::internal::TaskSource"*)***
  %44 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %44, i64 4
  %46 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %45, align 8
  tail call void %46(%"class.base::internal::TaskSource"* nonnull %42) #9
  br label %47

47:                                               ; preds = %28, %35, %40
  %48 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %1, i64 0, i32 1
  %49 = bitcast %"class.base::internal::TaskTracker"** %48 to i64*
  %50 = load i64, i64* %49, align 8
  store %"class.base::internal::TaskTracker"* null, %"class.base::internal::TaskTracker"** %48, align 8
  %51 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %0, i64 0, i32 1
  %52 = bitcast %"class.base::internal::TaskTracker"** %51 to i64*
  store i64 %50, i64* %52, align 8
  ret %"class.base::internal::RegisteredTaskSource"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4base8internal20RegisteredTaskSource11WillRunTaskEv(%"class.base::internal::RegisteredTaskSource"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %2, align 8
  %4 = bitcast %"class.base::internal::TaskSource"* %3 to i32 (%"class.base::internal::TaskSource"*)***
  %5 = load i32 (%"class.base::internal::TaskSource"*)**, i32 (%"class.base::internal::TaskSource"*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"class.base::internal::TaskSource"*)*, i32 (%"class.base::internal::TaskSource"*)** %5, i64 5
  %7 = load i32 (%"class.base::internal::TaskSource"*)*, i32 (%"class.base::internal::TaskSource"*)** %6, align 8
  %8 = tail call i32 %7(%"class.base::internal::TaskSource"* %3) #9
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal20RegisteredTaskSource8TakeTaskEPNS0_10TaskSource11TransactionE(%"struct.base::internal::Task"* noalias sret, %"class.base::internal::RegisteredTaskSource"* nocapture readonly, %"class.base::internal::TaskSource::Transaction"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %1, i64 0, i32 0, i32 0
  %5 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %4, align 8
  %6 = bitcast %"class.base::internal::TaskSource"* %5 to void (%"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)***
  %7 = load void (%"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)**, void (%"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)*, void (%"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)** %7, i64 6
  %9 = load void (%"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)*, void (%"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)** %8, align 8
  tail call void %9(%"struct.base::internal::Task"* sret %0, %"class.base::internal::TaskSource"* %5, %"class.base::internal::TaskSource::Transaction"* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal20RegisteredTaskSource5ClearEPNS0_10TaskSource11TransactionE(%"struct.base::internal::Task"* noalias sret, %"class.base::internal::RegisteredTaskSource"* nocapture readonly, %"class.base::internal::TaskSource::Transaction"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %1, i64 0, i32 0, i32 0
  %5 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %4, align 8
  %6 = bitcast %"class.base::internal::TaskSource"* %5 to void (%"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)***
  %7 = load void (%"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)**, void (%"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)*, void (%"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)** %7, i64 8
  %9 = load void (%"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)*, void (%"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)** %8, align 8
  tail call void %9(%"struct.base::internal::Task"* sret %0, %"class.base::internal::TaskSource"* %5, %"class.base::internal::TaskSource::Transaction"* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base8internal20RegisteredTaskSource14DidProcessTaskEPNS0_10TaskSource11TransactionE(%"class.base::internal::RegisteredTaskSource"* nocapture readonly, %"class.base::internal::TaskSource::Transaction"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %3, align 8
  %5 = bitcast %"class.base::internal::TaskSource"* %4 to i1 (%"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)***
  %6 = load i1 (%"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)**, i1 (%"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)*** %5, align 8
  %7 = getelementptr inbounds i1 (%"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)*, i1 (%"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)** %6, i64 7
  %8 = load i1 (%"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)*, i1 (%"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource::Transaction"*)** %7, align 8
  %9 = tail call zeroext i1 %8(%"class.base::internal::TaskSource"* %4, %"class.base::internal::TaskSource::Transaction"* %1) #9
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal20RegisteredTaskSourceC2E13scoped_refptrINS0_10TaskSourceEEPNS0_11TaskTrackerE(%"class.base::internal::RegisteredTaskSource"* nocapture, %"class.base::internal::TaskSource"*, %"class.base::internal::TaskTracker"*) unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.base::internal::TaskSource"* %1 to i64
  %5 = bitcast %"class.base::internal::RegisteredTaskSource"* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %0, i64 0, i32 1
  store %"class.base::internal::TaskTracker"* %2, %"class.base::internal::TaskTracker"** %6, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base8internal35TransactionWithRegisteredTaskSourceC2ENS0_20RegisteredTaskSourceENS0_10TaskSource11TransactionE(%"struct.base::internal::TransactionWithRegisteredTaskSource"* nocapture, %"class.base::internal::RegisteredTaskSource"* nocapture, %"class.base::internal::TaskSource::Transaction"* nocapture) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %1, i64 0, i32 0, i32 0
  %5 = bitcast %"class.base::internal::RegisteredTaskSource"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"struct.base::internal::TransactionWithRegisteredTaskSource"* %0 to i64*
  store i64 %6, i64* %7, align 8
  store %"class.base::internal::TaskSource"* null, %"class.base::internal::TaskSource"** %4, align 8
  %8 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %0, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %1, i64 0, i32 1
  %10 = bitcast %"class.base::internal::TaskTracker"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  store %"class.base::internal::TaskTracker"* null, %"class.base::internal::TaskTracker"** %9, align 8
  %12 = bitcast %"class.base::internal::TaskTracker"** %8 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %0, i64 0, i32 1
  %14 = getelementptr inbounds %"class.base::internal::TaskSource::Transaction", %"class.base::internal::TaskSource::Transaction"* %2, i64 0, i32 0
  %15 = bitcast %"class.base::internal::TaskSource::Transaction"* %2 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.base::internal::TaskSource::Transaction"* %13 to i64*
  store i64 %16, i64* %17, align 8
  store %"class.base::internal::TaskSource"* null, %"class.base::internal::TaskSource"** %14, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal35TransactionWithRegisteredTaskSource14FromTaskSourceENS0_20RegisteredTaskSourceE(%"struct.base::internal::TransactionWithRegisteredTaskSource"* noalias nocapture sret, %"class.base::internal::RegisteredTaskSource"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %3, align 8
  %5 = ptrtoint %"class.base::internal::TaskSource"* %4 to i64
  %6 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %4, i64 0, i32 5, i32 0
  %7 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %6, i64 0, i32 0, i32 0
  %8 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %7) #9, !noalias !3
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10, !prof !2

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %6, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %11) #9, !noalias !3
  br label %12

12:                                               ; preds = %2, %10
  %13 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %1, i64 0, i32 1
  %14 = bitcast %"class.base::internal::RegisteredTaskSource"* %1 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 8
  store %"class.base::internal::TaskSource"* null, %"class.base::internal::TaskSource"** %3, align 8
  store %"class.base::internal::TaskTracker"* null, %"class.base::internal::TaskTracker"** %13, align 8
  %16 = bitcast %"struct.base::internal::TransactionWithRegisteredTaskSource"* %0 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8
  %17 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %0, i64 0, i32 1
  %18 = bitcast %"class.base::internal::TaskSource::Transaction"* %17 to i64*
  store i64 %5, i64* %18, align 8
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

declare void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"*) local_unnamed_addr #7

; Function Attrs: nounwind
declare i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) local_unnamed_addr #8

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #8

declare void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN4base8internal10TaskSource16BeginTransactionEv: argument 0"}
!5 = distinct !{!5, !"_ZN4base8internal10TaskSource16BeginTransactionEv"}
