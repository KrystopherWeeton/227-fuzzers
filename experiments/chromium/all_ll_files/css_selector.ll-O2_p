; ModuleID = '../../third_party/blink/renderer/core/css/css_selector.cc'
source_filename = "../../third_party/blink/renderer/core/css/css_selector.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::NameToPseudoStruct" = type { i8*, i8 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.1 }
%class.scoped_refptr.1 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"struct.blink::CSSSelector::RareData" = type { %"class.WTF::RefCounted.3", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %union.anon, %"class.blink::QualifiedName", %"class.WTF::AtomicString", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.6" }
%"class.WTF::RefCounted.3" = type { %"class.base::RefCounted.4" }
%"class.base::RefCounted.4" = type { %"class.base::subtle::RefCountedBase" }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::CSSSelectorList"* }
%"class.blink::CSSSelectorList" = type { %"class.blink::CSSSelector"* }
%"class.blink::CSSSelector" = type { i24, %"union.blink::CSSSelector::DataUnion" }
%"union.blink::CSSSelector::DataUnion" = type { %"class.WTF::AtomicString" }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.WTF::Vector"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.blink::CSSParserContext" = type <{ %"class.blink::KURL", %class.scoped_refptr.18, i8, i8, i8, [5 x i8], %"struct.blink::Referrer", i8, i8, i8, i8, i32, %"class.WTF::TextEncoding", %"class.blink::WeakMember", i32, [4 x i8] }>
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.12" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.blink::KURL"* }
%class.scoped_refptr.18 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.19", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted.19" = type { %"class.base::RefCounted.20" }
%"class.base::RefCounted.20" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type opaque
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.21", i32, [4 x i8], %"class.std::__1::unique_ptr.157", %"class.std::__1::unique_ptr.157", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.167", %"class.std::__1::unique_ptr.173", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.185", %"class.std::__1::unique_ptr.191", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.198", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.24", %"class.std::__1::unique_ptr.30", %"class.std::__1::unique_ptr.36", %"class.std::__1::unique_ptr.42", %"class.std::__1::unique_ptr.48", %"class.std::__1::unique_ptr.54", %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.93", %"class.std::__1::unique_ptr.93", %"class.std::__1::unique_ptr.100", %"class.std::__1::unique_ptr.107", %"class.std::__1::unique_ptr.114", %"class.std::__1::unique_ptr.137", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.57" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.57" = type { %"struct.std::__1::__atomic_base.58" }
%"struct.std::__1::__atomic_base.58" = type { %"struct.std::__1::__atomic_base.59" }
%"struct.std::__1::__atomic_base.59" = type { %"struct.std::__1::__cxx_atomic_impl.60" }
%"struct.std::__1::__cxx_atomic_impl.60" = type { %"struct.std::__1::__cxx_atomic_base_impl.61" }
%"struct.std::__1::__cxx_atomic_base_impl.61" = type { i64 }
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.blink::Worklist.68"* }
%"class.blink::Worklist.68" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.57" }
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.blink::Worklist.75"* }
%"class.blink::Worklist.75" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.57" }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::Worklist.82"* }
%"class.blink::Worklist.82" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.57" }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.blink::Worklist.89"* }
%"class.blink::Worklist.89" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.57" }
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.blink::Worklist.96"* }
%"class.blink::Worklist.96" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.57" }
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.blink::Worklist.103"* }
%"class.blink::Worklist.103" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.57" }
%"class.std::__1::unique_ptr.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"class.blink::Worklist.110"* }
%"class.blink::Worklist.110" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.57" }
%"class.std::__1::unique_ptr.114" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.117", %"class.std::__1::__compressed_pair.124", %"class.std::__1::__compressed_pair.129", %"class.std::__1::__compressed_pair.131", [4 x i8] }>
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119", %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { i64 }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { float }
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.140", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.140" = type { %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.149" }
%"class.WTF::Vector.149" = type { %"class.WTF::VectorBuffer.150" }
%"class.WTF::VectorBuffer.150" = type { %"class.WTF::VectorBufferBase.151" }
%"class.WTF::VectorBufferBase.151" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.157" = type { %"class.std::__1::__compressed_pair.158" }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.165" }
%"class.WTF::VectorBuffer.165" = type { %"class.WTF::VectorBufferBase.166" }
%"class.WTF::VectorBufferBase.166" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.167" = type { %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.173" = type { %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.179" }
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.68"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.75"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.82"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.89"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.96"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.612" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.612" = type { %"struct.std::__1::__compressed_pair_elem.613" }
%"struct.std::__1::__compressed_pair_elem.613" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.185" = type { %"class.std::__1::__compressed_pair.186" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.191" = type { %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.197 }
%class.scoped_refptr.197 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.198" = type { %"struct.std::__1::__atomic_base.199" }
%"struct.std::__1::__atomic_base.199" = type { %"struct.std::__1::__cxx_atomic_impl.200" }
%"struct.std::__1::__cxx_atomic_impl.200" = type { %"struct.std::__1::__cxx_atomic_base_impl.201" }
%"struct.std::__1::__cxx_atomic_base_impl.201" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"struct.blink::Referrer" = type <{ %"class.WTF::AtomicString", i32, [4 x i8] }>
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.276", %"class.WTF::Vector.276", i8, i32, %"class.blink::Member.287", %"class.blink::Member.289", %"class.blink::Member.291", %"class.blink::Member.293", %"class.blink::Member.295", %"class.blink::Member.297", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.299", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.305", %"class.blink::Member.307", %"class.blink::Member.266", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.310", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector", %"class.blink::Member.226", %"class.blink::Member.325", %"class.blink::Member.226", %"class.blink::Member.226", %"class.blink::Member.226", %"class.blink::UserActionElementSet", %"class.blink::Member.334", double, double, i64, i64, %"class.blink::HeapHashSet", %"class.blink::HeapHashSet.341", i16, i8, %"class.blink::Member.348", %"class.blink::Member.350", %"class.blink::Member.352", %"class.blink::Member.354", %"class.blink::TextLinkColors", %"class.blink::Member.356", i8, [7 x i8], %"class.blink::HeapHashMap.358", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.226", %"class.WTF::Vector.365", %"class.blink::Member.370", %"class.blink::Member.372", i8, %"class.blink::Member.226", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.374", %"class.blink::HeapVector.376", %"class.std::__1::unique_ptr.384", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.390", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.403", %"class.WTF::Vector.405", i8, i8, %"class.std::__1::unique_ptr.410", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector", %"class.blink::HeapVector.416", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.424", i8, i32, %"class.blink::Member.426", %"class.blink::Member.428", %"class.blink::Member.430", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.432", %"class.WTF::HashMap.434", %"class.blink::Member.439", %"class.blink::Member.441", %"class.blink::Member.443", %"class.blink::Member.445", %"class.blink::Member.213", %"class.blink::Member.213", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.447", i8, i32, %"class.blink::Member.454", %"class.blink::Member.456", i32, %"class.blink::Member.458", %"class.blink::Member.460", %"class.blink::Member.462", %"class.std::__1::unique_ptr.464", i64, %"class.std::__1::unique_ptr.470", i32, i32, %"class.blink::Member.476", %"class.blink::Member.478", %"class.blink::Member.480", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.482", %"class.WTF::Vector.484", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.489", %"class.blink::Member.496", %"class.std::__1::unique_ptr.498", %"class.blink::Member.504", i8, i8, %"class.WTF::String", %"class.blink::Member.506", i8, [7 x i8], %"class.blink::HeapHashMap.508", %"class.blink::HeapObserverSet", %"class.blink::Member.522", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.524", i32, i8, i8, %"class.blink::WeakMember.526", %"class.blink::Member.527" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member", %"class.blink::Member" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member", %"class.blink::Member.205", %"class.blink::Member", %"class.blink::Member", %"class.blink::Member.207" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.205" = type { %"class.blink::MemberBase.206" }
%"class.blink::MemberBase.206" = type { %"class.blink::TreeScope"* }
%"class.blink::Member.207" = type { %"class.blink::MemberBase.208" }
%"class.blink::MemberBase.208" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member" = type { %"class.blink::MemberBase.204" }
%"class.blink::MemberBase.204" = type { %"class.blink::Node"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.211", %"class.blink::Member.213", %"class.blink::Member.205", %"class.blink::Member.215", %"class.blink::Member.215", %"class.blink::Member.249", %"class.blink::Member.251", %"class.blink::Member.253", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.258", %"class.blink::HeapVector.260" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.211" = type { %"class.blink::MemberBase.212" }
%"class.blink::MemberBase.212" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.215" = type { %"class.blink::MemberBase.216" }
%"class.blink::MemberBase.216" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %"class.blink::Member.222" }
%"class.blink::Member.222" = type { %"class.blink::MemberBase.223" }
%"class.blink::MemberBase.223" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.226", i32, %"class.blink::HeapVector" }
%"class.blink::Member.249" = type { %"class.blink::MemberBase.250" }
%"class.blink::MemberBase.250" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.251" = type { %"class.blink::MemberBase.252" }
%"class.blink::MemberBase.252" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.253" = type { %"class.blink::MemberBase.254" }
%"class.blink::MemberBase.254" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.255" }
%"class.blink::Member.255" = type { %"class.blink::MemberBase.256" }
%"class.blink::MemberBase.256" = type { %"class.blink::HeapHashMap.257"* }
%"class.blink::HeapHashMap.257" = type opaque
%"class.blink::Member.258" = type { %"class.blink::MemberBase.259" }
%"class.blink::MemberBase.259" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.260" = type { %"class.WTF::Vector.263" }
%"class.WTF::Vector.263" = type { %"class.WTF::VectorBuffer.264" }
%"class.WTF::VectorBuffer.264" = type { %"class.WTF::VectorBufferBase.265" }
%"class.WTF::VectorBufferBase.265" = type { %"class.blink::Member.266"*, i32, i32 }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.269" }
%"class.blink::HeapHashMap.269" = type { %"class.WTF::HashMap.272" }
%"class.WTF::HashMap.272" = type { %"class.WTF::HashTable.273" }
%"class.WTF::HashTable.273" = type <{ %"struct.WTF::KeyValuePair.275"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.275" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.276" = type { %"class.WTF::VectorBuffer.277" }
%"class.WTF::VectorBuffer.277" = type { %"class.WTF::VectorBufferBase.278" }
%"class.WTF::VectorBufferBase.278" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.279 }
%class.scoped_refptr.279 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.280" }
%"struct.std::__1::atomic.280" = type { %"struct.std::__1::__atomic_base.281" }
%"struct.std::__1::__atomic_base.281" = type { %"struct.std::__1::__atomic_base.282" }
%"struct.std::__1::__atomic_base.282" = type { %"struct.std::__1::__cxx_atomic_impl.283" }
%"struct.std::__1::__cxx_atomic_impl.283" = type { %"struct.std::__1::__cxx_atomic_base_impl.284" }
%"struct.std::__1::__cxx_atomic_base_impl.284" = type { i32 }
%"class.blink::Member.287" = type { %"class.blink::MemberBase.288" }
%"class.blink::MemberBase.288" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.289" = type { %"class.blink::MemberBase.290" }
%"class.blink::MemberBase.290" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable.540", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.581", i32, i8, [3 x i8], %"class.blink::HeapVector.583", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.591", %"class.blink::Member.593", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.602", %"class.blink::Member.608", %"class.blink::Member.610", i8, [7 x i8] }>
%"class.blink::Supplementable.540" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.541" }
%"class.blink::HeapHashMap.541" = type { %"class.WTF::HashMap.544" }
%"class.WTF::HashMap.544" = type { %"class.WTF::HashTable.545" }
%"class.WTF::HashTable.545" = type <{ %"struct.WTF::KeyValuePair.547"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.547" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.556" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet.548" }
%"class.blink::HeapObserverSet.548" = type { i32, [4 x i8], %"class.blink::HeapHashSet.549" }
%"class.blink::HeapHashSet.549" = type { %"class.WTF::HashSet.552" }
%"class.WTF::HashSet.552" = type { %"class.WTF::HashTable.553" }
%"class.WTF::HashTable.553" = type <{ %"class.blink::WeakMember.555"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.555" = type opaque
%"class.blink::Supplementable.556" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.557" }
%"class.blink::HeapHashMap.557" = type { %"class.WTF::HashMap.560" }
%"class.WTF::HashMap.560" = type { %"class.WTF::HashTable.561" }
%"class.WTF::HashTable.561" = type <{ %"struct.WTF::KeyValuePair.563"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.563" = type { i8*, %"class.blink::Member.632" }
%"class.blink::Member.632" = type { %"class.blink::MemberBase.633" }
%"class.blink::MemberBase.633" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.634" }
%"class.blink::Member.634" = type { %"class.blink::MemberBase.635" }
%"class.blink::MemberBase.635" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.564, %"class.std::__1::unique_ptr.565", %"class.std::__1::unique_ptr.565", %"class.std::__1::unique_ptr.571", %"class.std::__1::unique_ptr.571", %"class.blink::Member.289", i32, [4 x i8], %"class.WTF::HashSet.577", i32, i32 }
%class.scoped_refptr.564 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type opaque
%"class.std::__1::unique_ptr.565" = type { %"class.std::__1::__compressed_pair.566" }
%"class.std::__1::__compressed_pair.566" = type { %"struct.std::__1::__compressed_pair_elem.567" }
%"struct.std::__1::__compressed_pair_elem.567" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.571" = type { %"class.std::__1::__compressed_pair.572" }
%"class.std::__1::__compressed_pair.572" = type { %"struct.std::__1::__compressed_pair_elem.573" }
%"struct.std::__1::__compressed_pair_elem.573" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.WTF::HashSet.577" = type { %"class.WTF::HashTable.578" }
%"class.WTF::HashTable.578" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.581" = type { %"class.blink::MemberBase.582" }
%"class.blink::MemberBase.582" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.583" = type { %"class.WTF::Vector.586" }
%"class.WTF::Vector.586" = type { %"class.WTF::VectorBuffer.587" }
%"class.WTF::VectorBuffer.587" = type { %"class.WTF::VectorBufferBase.588" }
%"class.WTF::VectorBufferBase.588" = type { %"class.blink::Member.589"*, i32, i32 }
%"class.blink::Member.589" = type opaque
%"class.blink::Member.591" = type { %"class.blink::MemberBase.592" }
%"class.blink::MemberBase.592" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.593" = type { %"class.blink::MemberBase.594" }
%"class.blink::MemberBase.594" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.595", i32, i32 }
%"class.blink::HeapHashMap.595" = type { %"class.WTF::HashMap.598" }
%"class.WTF::HashMap.598" = type { %"class.WTF::HashTable.599" }
%"class.WTF::HashTable.599" = type <{ %"struct.WTF::KeyValuePair.601"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.601" = type opaque
%"class.std::__1::unique_ptr.602" = type { %"class.std::__1::__compressed_pair.603" }
%"class.std::__1::__compressed_pair.603" = type { %"struct.std::__1::__compressed_pair_elem.604" }
%"struct.std::__1::__compressed_pair_elem.604" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.608" = type { %"class.blink::MemberBase.609" }
%"class.blink::MemberBase.609" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.610" = type { %"class.blink::MemberBase.611" }
%"class.blink::MemberBase.611" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.291" = type { %"class.blink::MemberBase.292" }
%"class.blink::MemberBase.292" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.293" = type { %"class.blink::MemberBase.294" }
%"class.blink::MemberBase.294" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.295" = type { %"class.blink::MemberBase.296" }
%"class.blink::MemberBase.296" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.297" = type { %"class.blink::MemberBase.298" }
%"class.blink::MemberBase.298" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.299" = type { %"class.std::__1::__compressed_pair.300" }
%"class.std::__1::__compressed_pair.300" = type { %"struct.std::__1::__compressed_pair_elem.301" }
%"struct.std::__1::__compressed_pair_elem.301" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::Member.305" = type { %"class.blink::MemberBase.306" }
%"class.blink::MemberBase.306" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.307" = type { %"class.blink::MemberBase.308" }
%"class.blink::MemberBase.308" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.266" = type { %"class.blink::MemberBase.267" }
%"class.blink::MemberBase.267" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type opaque
%"class.blink::TaskHandle" = type { %class.scoped_refptr.309 }
%class.scoped_refptr.309 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.310" = type { %"class.WTF::VectorBuffer.311" }
%"class.WTF::VectorBuffer.311" = type { %"class.WTF::VectorBufferBase.312" }
%"class.WTF::VectorBufferBase.312" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.18 }
%"class.blink::Member.325" = type { %"class.blink::MemberBase.326" }
%"class.blink::MemberBase.326" = type { %"class.blink::Range"* }
%"class.blink::Range" = type opaque
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.327" }
%"class.blink::HeapHashMap.327" = type { %"class.WTF::HashMap.330" }
%"class.WTF::HashMap.330" = type { %"class.WTF::HashTable.331" }
%"class.WTF::HashTable.331" = type <{ %"struct.WTF::KeyValuePair.333"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.333" = type opaque
%"class.blink::Member.334" = type { %"class.blink::MemberBase.335" }
%"class.blink::MemberBase.335" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.338" }
%"class.WTF::HashTable.338" = type <{ %"class.blink::WeakMember.340"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.340" = type opaque
%"class.blink::HeapHashSet.341" = type { %"class.WTF::HashSet.344" }
%"class.WTF::HashSet.344" = type { %"class.WTF::HashTable.345" }
%"class.WTF::HashTable.345" = type <{ %"class.blink::WeakMember.347"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.347" = type opaque
%"class.blink::Member.348" = type { %"class.blink::MemberBase.349" }
%"class.blink::MemberBase.349" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.350" = type { %"class.blink::MemberBase.351" }
%"class.blink::MemberBase.351" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type opaque
%"class.blink::Member.352" = type { %"class.blink::MemberBase.353" }
%"class.blink::MemberBase.353" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type opaque
%"class.blink::Member.354" = type { %"class.blink::MemberBase.355" }
%"class.blink::MemberBase.355" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Color" = type { i32 }
%"class.blink::Member.356" = type { %"class.blink::MemberBase.357" }
%"class.blink::MemberBase.357" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.358" = type { %"class.WTF::HashMap.361" }
%"class.WTF::HashMap.361" = type { %"class.WTF::HashTable.362" }
%"class.WTF::HashTable.362" = type <{ %"struct.WTF::KeyValuePair.364"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.364" = type opaque
%"class.WTF::Vector.365" = type { %"class.WTF::VectorBuffer.366" }
%"class.WTF::VectorBuffer.366" = type { %"class.WTF::VectorBufferBase.367" }
%"class.WTF::VectorBufferBase.367" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.370" = type { %"class.blink::MemberBase.371" }
%"class.blink::MemberBase.371" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.372" = type { %"class.blink::MemberBase.373" }
%"class.blink::MemberBase.373" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.blink::Member.226" = type { %"class.blink::MemberBase.227" }
%"class.blink::MemberBase.227" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.228" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::Member.228" = type { %"class.blink::MemberBase.229" }
%"class.blink::MemberBase.229" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.232", %"class.blink::Member.234", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.232" = type { %"class.WTF::SingleThreadedBitField.233" }
%"class.WTF::SingleThreadedBitField.233" = type { i32 }
%"class.blink::Member.234" = type { %"class.blink::MemberBase.235" }
%"class.blink::MemberBase.235" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type opaque
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.236 }
%class.scoped_refptr.236 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.237", %"class.WTF::AtomicString", %"class.WTF::Vector.239" }
%"class.WTF::RefCounted.237" = type { %"class.base::RefCounted.238" }
%"class.base::RefCounted.238" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.239" = type { %"class.WTF::VectorBuffer.240" }
%"class.WTF::VectorBuffer.240" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.374" = type { %"class.blink::MemberBase.375" }
%"class.blink::MemberBase.375" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.376" = type { %"class.WTF::Vector.379" }
%"class.WTF::Vector.379" = type { %"class.WTF::VectorBuffer.380" }
%"class.WTF::VectorBuffer.380" = type { %"class.WTF::VectorBufferBase.381" }
%"class.WTF::VectorBufferBase.381" = type { %"class.blink::Member.382"*, i32, i32 }
%"class.blink::Member.382" = type opaque
%"class.std::__1::unique_ptr.384" = type { %"class.std::__1::__compressed_pair.385" }
%"class.std::__1::__compressed_pair.385" = type { %"struct.std::__1::__compressed_pair_elem.386" }
%"struct.std::__1::__compressed_pair_elem.386" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.blink::HeapHashSet.390" = type { %"class.WTF::HashSet.393" }
%"class.WTF::HashSet.393" = type { %"class.WTF::HashTable.394" }
%"class.WTF::HashTable.394" = type <{ %"class.blink::WeakMember.396"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.396" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.397", i32, [4 x i8] }>
%"class.WTF::Vector.397" = type { %"class.WTF::VectorBuffer.398" }
%"class.WTF::VectorBuffer.398" = type { %"class.WTF::VectorBufferBase.399" }
%"class.WTF::VectorBufferBase.399" = type { %"struct.std::__1::pair.400"*, i32, i32 }
%"struct.std::__1::pair.400" = type opaque
%"class.blink::Member.403" = type { %"class.blink::MemberBase.404" }
%"class.blink::MemberBase.404" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.405" = type { %"class.WTF::VectorBuffer.406" }
%"class.WTF::VectorBuffer.406" = type { %"class.WTF::VectorBufferBase.407" }
%"class.WTF::VectorBufferBase.407" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type opaque
%"class.std::__1::unique_ptr.410" = type { %"class.std::__1::__compressed_pair.411" }
%"class.std::__1::__compressed_pair.411" = type { %"struct.std::__1::__compressed_pair_elem.412" }
%"struct.std::__1::__compressed_pair_elem.412" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector" = type { %"class.WTF::Vector.245" }
%"class.WTF::Vector.245" = type { %"class.WTF::VectorBuffer.246" }
%"class.WTF::VectorBuffer.246" = type { %"class.WTF::VectorBufferBase.247" }
%"class.WTF::VectorBufferBase.247" = type { %"class.blink::Member.226"*, i32, i32 }
%"class.blink::HeapVector.416" = type { %"class.WTF::Vector.419" }
%"class.WTF::Vector.419" = type { %"class.WTF::VectorBuffer.420" }
%"class.WTF::VectorBuffer.420" = type { %"class.WTF::VectorBufferBase.421" }
%"class.WTF::VectorBufferBase.421" = type { %"class.blink::Member.422"*, i32, i32 }
%"class.blink::Member.422" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.213" }
%"class.blink::Member.424" = type { %"class.blink::MemberBase.425" }
%"class.blink::MemberBase.425" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.426" = type { %"class.blink::MemberBase.427" }
%"class.blink::MemberBase.427" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.428" = type { %"class.blink::MemberBase.429" }
%"class.blink::MemberBase.429" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.430" = type { %"class.blink::MemberBase.431" }
%"class.blink::MemberBase.431" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.432" = type { %"class.blink::MemberBase.433" }
%"class.blink::MemberBase.433" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.434" = type { %"class.WTF::HashTable.435" }
%"class.WTF::HashTable.435" = type <{ %"struct.WTF::KeyValuePair.438"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.438" = type opaque
%"class.blink::Member.439" = type { %"class.blink::MemberBase.440" }
%"class.blink::MemberBase.440" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.441" = type { %"class.blink::MemberBase.442" }
%"class.blink::MemberBase.442" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.443" = type { %"class.blink::MemberBase.444" }
%"class.blink::MemberBase.444" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.445" = type { %"class.blink::MemberBase.446" }
%"class.blink::MemberBase.446" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::Member.213" = type { %"class.blink::MemberBase.214" }
%"class.blink::MemberBase.214" = type { %"class.blink::Document"* }
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.324", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.315, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.315 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.316" }>
%"class.base::RefCountedThreadSafe.316" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.317 }
%class.scoped_refptr.317 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.318", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.318" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.319" }
%"struct.std::__1::atomic.319" = type { %"struct.std::__1::__atomic_base.320" }
%"struct.std::__1::__atomic_base.320" = type { %"struct.std::__1::__atomic_base.321" }
%"struct.std::__1::__atomic_base.321" = type { %"struct.std::__1::__cxx_atomic_impl.322" }
%"struct.std::__1::__cxx_atomic_impl.322" = type { %"struct.std::__1::__cxx_atomic_base_impl.323" }
%"struct.std::__1::__cxx_atomic_base_impl.323" = type { i8 }
%"class.blink::WeakMember.324" = type { %"class.blink::MemberBase.214" }
%"class.blink::HeapHashSet.447" = type { %"class.WTF::HashSet.450" }
%"class.WTF::HashSet.450" = type { %"class.WTF::HashTable.451" }
%"class.WTF::HashTable.451" = type <{ %"class.blink::Member.453"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.453" = type opaque
%"class.blink::Member.454" = type { %"class.blink::MemberBase.455" }
%"class.blink::MemberBase.455" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.456" = type { %"class.blink::MemberBase.457" }
%"class.blink::MemberBase.457" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.458" = type { %"class.blink::MemberBase.459" }
%"class.blink::MemberBase.459" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.460" = type { %"class.blink::MemberBase.461" }
%"class.blink::MemberBase.461" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.462" = type { %"class.blink::MemberBase.463" }
%"class.blink::MemberBase.463" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.464" = type { %"class.std::__1::__compressed_pair.465" }
%"class.std::__1::__compressed_pair.465" = type { %"struct.std::__1::__compressed_pair_elem.466" }
%"struct.std::__1::__compressed_pair_elem.466" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.470" = type { %"class.std::__1::__compressed_pair.471" }
%"class.std::__1::__compressed_pair.471" = type { %"struct.std::__1::__compressed_pair_elem.472" }
%"struct.std::__1::__compressed_pair_elem.472" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::Member.476" = type { %"class.blink::MemberBase.477" }
%"class.blink::MemberBase.477" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.478" = type { %"class.blink::MemberBase.479" }
%"class.blink::MemberBase.479" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.480" = type { %"class.blink::MemberBase.481" }
%"class.blink::MemberBase.481" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.482" = type { %"class.blink::MemberBase.483" }
%"class.blink::MemberBase.483" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.484" = type { %"class.WTF::VectorBuffer.485" }
%"class.WTF::VectorBuffer.485" = type { %"class.WTF::VectorBufferBase.486" }
%"class.WTF::VectorBufferBase.486" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.489" = type { %"class.WTF::HashMap.492" }
%"class.WTF::HashMap.492" = type { %"class.WTF::HashTable.493" }
%"class.WTF::HashTable.493" = type <{ %"struct.WTF::KeyValuePair.495"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.495" = type opaque
%"class.blink::Member.496" = type { %"class.blink::MemberBase.497" }
%"class.blink::MemberBase.497" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.498" = type { %"class.std::__1::__compressed_pair.499" }
%"class.std::__1::__compressed_pair.499" = type { %"struct.std::__1::__compressed_pair_elem.500" }
%"struct.std::__1::__compressed_pair_elem.500" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.504" = type { %"class.blink::MemberBase.505" }
%"class.blink::MemberBase.505" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.506" = type { %"class.blink::MemberBase.507" }
%"class.blink::MemberBase.507" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.508" = type { %"class.WTF::HashMap.511" }
%"class.WTF::HashMap.511" = type { %"class.WTF::HashTable.512" }
%"class.WTF::HashTable.512" = type <{ %"struct.WTF::KeyValuePair.514"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.514" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.515" }
%"class.blink::HeapHashSet.515" = type { %"class.WTF::HashSet.518" }
%"class.WTF::HashSet.518" = type { %"class.WTF::HashTable.519" }
%"class.WTF::HashTable.519" = type <{ %"class.blink::WeakMember.521"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.521" = type opaque
%"class.blink::Member.522" = type { %"class.blink::MemberBase.523" }
%"class.blink::MemberBase.523" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.524" = type { %"class.blink::MemberBase.525" }
%"class.blink::MemberBase.525" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.213", %"class.blink::HeapHashSet.531", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.538", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.531" = type { %"class.WTF::HashSet.534" }
%"class.WTF::HashSet.534" = type { %"class.WTF::HashTable.535" }
%"class.WTF::HashTable.535" = type <{ %"class.blink::Member.537"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.537" = type opaque
%"class.blink::HeapTaskRunnerTimer.538" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.539", { i64, i64 } }
%"class.blink::WeakMember.539" = type { %"class.blink::MemberBase.525" }
%"class.blink::WeakMember.526" = type { %"class.blink::MemberBase.204" }
%"class.blink::Member.527" = type { %"class.blink::MemberBase.528" }
%"class.blink::MemberBase.528" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon.617, i32, i8, i8, [2 x i8] }>
%union.anon.617 = type { %"class.WTF::Vector.618" }
%"class.WTF::Vector.618" = type { %"class.WTF::VectorBuffer.619" }
%"class.WTF::VectorBuffer.619" = type { %"class.WTF::VectorBufferBase.620", [16 x i8] }
%"class.WTF::VectorBufferBase.620" = type { i8*, i32, i32 }
%"class.WTF::IntegerToStringConverter" = type <{ [13 x i8], [3 x i8], i8*, i32, [4 x i8] }>
%"class.WTF::StringAppend" = type { %"class.WTF::String", %"class.WTF::String" }
%"class.WTF::StringAppend.628" = type { %"class.WTF::StringAppend.629", %"class.WTF::String" }
%"class.WTF::StringAppend.629" = type { i8*, %"class.WTF::String" }
%"class.WTF::StringTypeAdapter" = type { %"class.WTF::StringTypeAdapter.651" }
%"class.WTF::StringTypeAdapter.651" = type { %"class.WTF::StringView" }
%"class.WTF::StringTypeAdapter.653" = type <{ i8*, i32, [4 x i8] }>
%"class.WTF::Vector.623" = type { %"class.WTF::VectorBuffer.624" }
%"class.WTF::VectorBuffer.624" = type { %"class.WTF::VectorBufferBase.625", [16 x i8] }
%"class.WTF::VectorBufferBase.625" = type { i16*, i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.636" }
%"class.std::__1::__compressed_pair.636" = type { %"struct.std::__1::__compressed_pair_elem.637" }
%"struct.std::__1::__compressed_pair_elem.637" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.638 }
%union.anon.638 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZNK5blink11CSSSelector25SpecificityForOneSelectorEv = comdat any

$_ZN5blink11CSSSelector8SetValueERKN3WTF12AtomicStringEb = comdat any

$_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE = comdat any

$_ZN3WTFplINS_6StringEEENS_12StringAppendIS1_T_EERKS1_S3_ = comdat any

$_ZNK3WTF12StringAppendINS_6StringES1_EcvS1_Ev = comdat any

$_ZN3WTFplIPKcNS_6StringES3_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_ = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_EcvS3_Ev = comdat any

$_ZN3WTF13StringBuilder6AppendEh = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_ = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm = comdat any

$_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_ = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh = comdat any

$_ZN3WTF12StringAppendINS_6StringES1_EC2ES1_S1_ = comdat any

$_ZNK3WTF12StringAppendINS_6StringES1_E6lengthEv = comdat any

$_ZN3WTF12StringAppendINS0_IPKcNS_6StringEEES3_EC2ES4_S3_ = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv = comdat any

@_ZN5blinkL27kPseudoTypeWithArgumentsMapE = internal constant [16 x %"struct.blink::NameToPseudoStruct"] [%"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i32 0, i32 0), i8 18 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8 90 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i32 0, i32 0), i8 108 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), i8 109 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i8 95 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i32 0, i32 0), i8 96 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0), i8 19 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i32 0, i32 0), i8 51 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i32 0, i32 0), i8 52 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i32 0, i32 0), i8 10 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.27, i32 0, i32 0), i8 12 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.28, i32 0, i32 0), i8 13 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i32 0, i32 0), i8 11 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0), i8 14 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.31, i32 0, i32 0), i8 104 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.32, i32 0, i32 0), i8 20 }], align 16
@_ZN5blinkL30kPseudoTypeWithoutArgumentsMapE = internal constant [95 x %"struct.blink::NameToPseudoStruct"] [%"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.33, i32 0, i32 0), i8 24 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.34, i32 0, i32 0), i8 25 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35, i32 0, i32 0), i8 94 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.36, i32 0, i32 0), i8 99 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.37, i32 0, i32 0), i8 100 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.38, i32 0, i32 0), i8 88 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.39, i32 0, i32 0), i8 49 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.40, i32 0, i32 0), i8 101 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.41, i32 0, i32 0), i8 103 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.42, i32 0, i32 0), i8 102 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.43, i32 0, i32 0), i8 97 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.44, i32 0, i32 0), i8 98 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.45, i32 0, i32 0), i8 105 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.46, i32 0, i32 0), i8 106 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.47, i32 0, i32 0), i8 22 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.48, i32 0, i32 0), i8 23 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.49, i32 0, i32 0), i8 27 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.50, i32 0, i32 0), i8 34 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.51, i32 0, i32 0), i8 79 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.52, i32 0, i32 0), i8 80 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.53, i32 0, i32 0), i8 55 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i32 0, i32 0), i8 58 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.55, i32 0, i32 0), i8 59 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.56, i32 0, i32 0), i8 60 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.57, i32 0, i32 0), i8 61 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.58, i32 0, i32 0), i8 62 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.59, i32 0, i32 0), i8 63 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i32 0, i32 0), i8 31 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.61, i32 0, i32 0), i8 47 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.62, i32 0, i32 0), i8 21 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.63, i32 0, i32 0), i8 50 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.64, i32 0, i32 0), i8 46 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65, i32 0, i32 0), i8 32 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.66, i32 0, i32 0), i8 65 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8 88 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.67, i32 0, i32 0), i8 66 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68, i32 0, i32 0), i8 35 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.69, i32 0, i32 0), i8 93 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.70, i32 0, i32 0), i8 36 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.71, i32 0, i32 0), i8 72 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i32 0, i32 0), i8 1 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.73, i32 0, i32 0), i8 33 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i32 0, i32 0), i8 71 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.75, i32 0, i32 0), i8 54 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.76, i32 0, i32 0), i8 78 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.77, i32 0, i32 0), i8 2 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.78, i32 0, i32 0), i8 9 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.79, i32 0, i32 0), i8 8 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.80, i32 0, i32 0), i8 3 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.81, i32 0, i32 0), i8 28 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.82, i32 0, i32 0), i8 29 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.83, i32 0, i32 0), i8 30 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.84, i32 0, i32 0), i8 81 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.85, i32 0, i32 0), i8 91 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.86, i32 0, i32 0), i8 111 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.87, i32 0, i32 0), i8 68 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i8 95 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.88, i32 0, i32 0), i8 26 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.89, i32 0, i32 0), i8 85 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.90, i32 0, i32 0), i8 67 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.91, i32 0, i32 0), i8 44 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.92, i32 0, i32 0), i8 43 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.93, i32 0, i32 0), i8 4 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.94, i32 0, i32 0), i8 5 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.95, i32 0, i32 0), i8 76 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.96, i32 0, i32 0), i8 16 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0), i8 48 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.98, i32 0, i32 0), i8 74 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.99, i32 0, i32 0), i8 6 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.100, i32 0, i32 0), i8 7 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.101, i32 0, i32 0), i8 37 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.102, i32 0, i32 0), i8 86 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.103, i32 0, i32 0), i8 92 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.104, i32 0, i32 0), i8 82 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.105, i32 0, i32 0), i8 83 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.106, i32 0, i32 0), i8 53 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.107, i32 0, i32 0), i8 38 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108, i32 0, i32 0), i8 84 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.109, i32 0, i32 0), i8 40 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.110, i32 0, i32 0), i8 41 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.111, i32 0, i32 0), i8 39 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.112, i32 0, i32 0), i8 77 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.113, i32 0, i32 0), i8 56 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114, i32 0, i32 0), i8 57 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.115, i32 0, i32 0), i8 75 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.116, i32 0, i32 0), i8 73 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.117, i32 0, i32 0), i8 110 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8 70 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.119, i32 0, i32 0), i8 45 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.120, i32 0, i32 0), i8 107 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.121, i32 0, i32 0), i8 42 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.122, i32 0, i32 0), i8 69 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.123, i32 0, i32 0), i8 17 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.124, i32 0, i32 0), i8 64 }, %"struct.blink::NameToPseudoStruct" { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.125, i32 0, i32 0), i8 87 }], align 16
@_ZN3WTF11g_star_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str = private unnamed_addr constant [3 x i8] c"-n\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%dn\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"+%d\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"::\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"~=\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"|=\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"^=\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"$=\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"*=\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c" i\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c" s\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c" > \00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c" + \00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c" ~ \00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"pseudo-\00", align 1
@_ZN3WTF11g_null_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str.17 = private unnamed_addr constant [12 x i8] c"-webkit-any\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"cue\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"dir\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"highlight\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"host\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"host-context\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"lang\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"not\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"nth-child\00", align 1
@.str.27 = private unnamed_addr constant [15 x i8] c"nth-last-child\00", align 1
@.str.28 = private unnamed_addr constant [17 x i8] c"nth-last-of-type\00", align 1
@.str.29 = private unnamed_addr constant [12 x i8] c"nth-of-type\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"part\00", align 1
@.str.31 = private unnamed_addr constant [8 x i8] c"slotted\00", align 1
@.str.32 = private unnamed_addr constant [6 x i8] c"where\00", align 1
@.str.33 = private unnamed_addr constant [29 x i8] c"-internal-autofill-previewed\00", align 1
@.str.34 = private unnamed_addr constant [28 x i8] c"-internal-autofill-selected\00", align 1
@.str.35 = private unnamed_addr constant [23 x i8] c"-internal-has-datalist\00", align 1
@.str.36 = private unnamed_addr constant [18 x i8] c"-internal-is-html\00", align 1
@.str.37 = private unnamed_addr constant [19 x i8] c"-internal-list-box\00", align 1
@.str.38 = private unnamed_addr constant [45 x i8] c"-internal-media-controls-overlay-cast-button\00", align 1
@.str.39 = private unnamed_addr constant [16 x i8] c"-internal-modal\00", align 1
@.str.40 = private unnamed_addr constant [29 x i8] c"-internal-multi-select-focus\00", align 1
@.str.41 = private unnamed_addr constant [21 x i8] c"-internal-popup-open\00", align 1
@.str.42 = private unnamed_addr constant [37 x i8] c"-internal-shadow-host-has-appearance\00", align 1
@.str.43 = private unnamed_addr constant [35 x i8] c"-internal-spatial-navigation-focus\00", align 1
@.str.44 = private unnamed_addr constant [38 x i8] c"-internal-spatial-navigation-interest\00", align 1
@.str.45 = private unnamed_addr constant [27 x i8] c"-internal-video-persistent\00", align 1
@.str.46 = private unnamed_addr constant [36 x i8] c"-internal-video-persistent-ancestor\00", align 1
@.str.47 = private unnamed_addr constant [17 x i8] c"-webkit-any-link\00", align 1
@.str.48 = private unnamed_addr constant [17 x i8] c"-webkit-autofill\00", align 1
@.str.49 = private unnamed_addr constant [13 x i8] c"-webkit-drag\00", align 1
@.str.50 = private unnamed_addr constant [24 x i8] c"-webkit-full-page-media\00", align 1
@.str.51 = private unnamed_addr constant [20 x i8] c"-webkit-full-screen\00", align 1
@.str.52 = private unnamed_addr constant [29 x i8] c"-webkit-full-screen-ancestor\00", align 1
@.str.53 = private unnamed_addr constant [16 x i8] c"-webkit-resizer\00", align 1
@.str.54 = private unnamed_addr constant [18 x i8] c"-webkit-scrollbar\00", align 1
@.str.55 = private unnamed_addr constant [25 x i8] c"-webkit-scrollbar-button\00", align 1
@.str.56 = private unnamed_addr constant [25 x i8] c"-webkit-scrollbar-corner\00", align 1
@.str.57 = private unnamed_addr constant [24 x i8] c"-webkit-scrollbar-thumb\00", align 1
@.str.58 = private unnamed_addr constant [24 x i8] c"-webkit-scrollbar-track\00", align 1
@.str.59 = private unnamed_addr constant [30 x i8] c"-webkit-scrollbar-track-piece\00", align 1
@.str.60 = private unnamed_addr constant [7 x i8] c"active\00", align 1
@.str.61 = private unnamed_addr constant [6 x i8] c"after\00", align 1
@.str.62 = private unnamed_addr constant [9 x i8] c"any-link\00", align 1
@.str.63 = private unnamed_addr constant [9 x i8] c"backdrop\00", align 1
@.str.64 = private unnamed_addr constant [7 x i8] c"before\00", align 1
@.str.65 = private unnamed_addr constant [8 x i8] c"checked\00", align 1
@.str.66 = private unnamed_addr constant [15 x i8] c"corner-present\00", align 1
@.str.67 = private unnamed_addr constant [10 x i8] c"decrement\00", align 1
@.str.68 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@.str.69 = private unnamed_addr constant [8 x i8] c"defined\00", align 1
@.str.70 = private unnamed_addr constant [9 x i8] c"disabled\00", align 1
@.str.71 = private unnamed_addr constant [14 x i8] c"double-button\00", align 1
@.str.72 = private unnamed_addr constant [6 x i8] c"empty\00", align 1
@.str.73 = private unnamed_addr constant [8 x i8] c"enabled\00", align 1
@.str.74 = private unnamed_addr constant [4 x i8] c"end\00", align 1
@.str.75 = private unnamed_addr constant [21 x i8] c"file-selector-button\00", align 1
@.str.76 = private unnamed_addr constant [6 x i8] c"first\00", align 1
@.str.77 = private unnamed_addr constant [12 x i8] c"first-child\00", align 1
@.str.78 = private unnamed_addr constant [13 x i8] c"first-letter\00", align 1
@.str.79 = private unnamed_addr constant [11 x i8] c"first-line\00", align 1
@.str.80 = private unnamed_addr constant [14 x i8] c"first-of-type\00", align 1
@.str.81 = private unnamed_addr constant [6 x i8] c"focus\00", align 1
@.str.82 = private unnamed_addr constant [14 x i8] c"focus-visible\00", align 1
@.str.83 = private unnamed_addr constant [13 x i8] c"focus-within\00", align 1
@.str.84 = private unnamed_addr constant [11 x i8] c"fullscreen\00", align 1
@.str.85 = private unnamed_addr constant [7 x i8] c"future\00", align 1
@.str.86 = private unnamed_addr constant [14 x i8] c"grammar-error\00", align 1
@.str.87 = private unnamed_addr constant [11 x i8] c"horizontal\00", align 1
@.str.88 = private unnamed_addr constant [6 x i8] c"hover\00", align 1
@.str.89 = private unnamed_addr constant [9 x i8] c"in-range\00", align 1
@.str.90 = private unnamed_addr constant [10 x i8] c"increment\00", align 1
@.str.91 = private unnamed_addr constant [14 x i8] c"indeterminate\00", align 1
@.str.92 = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.93 = private unnamed_addr constant [11 x i8] c"last-child\00", align 1
@.str.94 = private unnamed_addr constant [13 x i8] c"last-of-type\00", align 1
@.str.95 = private unnamed_addr constant [5 x i8] c"left\00", align 1
@.str.96 = private unnamed_addr constant [5 x i8] c"link\00", align 1
@.str.97 = private unnamed_addr constant [7 x i8] c"marker\00", align 1
@.str.98 = private unnamed_addr constant [10 x i8] c"no-button\00", align 1
@.str.99 = private unnamed_addr constant [11 x i8] c"only-child\00", align 1
@.str.100 = private unnamed_addr constant [13 x i8] c"only-of-type\00", align 1
@.str.101 = private unnamed_addr constant [9 x i8] c"optional\00", align 1
@.str.102 = private unnamed_addr constant [13 x i8] c"out-of-range\00", align 1
@.str.103 = private unnamed_addr constant [5 x i8] c"past\00", align 1
@.str.104 = private unnamed_addr constant [7 x i8] c"paused\00", align 1
@.str.105 = private unnamed_addr constant [19 x i8] c"picture-in-picture\00", align 1
@.str.106 = private unnamed_addr constant [12 x i8] c"placeholder\00", align 1
@.str.107 = private unnamed_addr constant [18 x i8] c"placeholder-shown\00", align 1
@.str.108 = private unnamed_addr constant [8 x i8] c"playing\00", align 1
@.str.109 = private unnamed_addr constant [10 x i8] c"read-only\00", align 1
@.str.110 = private unnamed_addr constant [11 x i8] c"read-write\00", align 1
@.str.111 = private unnamed_addr constant [9 x i8] c"required\00", align 1
@.str.112 = private unnamed_addr constant [6 x i8] c"right\00", align 1
@.str.113 = private unnamed_addr constant [5 x i8] c"root\00", align 1
@.str.114 = private unnamed_addr constant [6 x i8] c"scope\00", align 1
@.str.115 = private unnamed_addr constant [10 x i8] c"selection\00", align 1
@.str.116 = private unnamed_addr constant [14 x i8] c"single-button\00", align 1
@.str.117 = private unnamed_addr constant [15 x i8] c"spelling-error\00", align 1
@.str.118 = private unnamed_addr constant [6 x i8] c"start\00", align 1
@.str.119 = private unnamed_addr constant [7 x i8] c"target\00", align 1
@.str.120 = private unnamed_addr constant [12 x i8] c"target-text\00", align 1
@.str.121 = private unnamed_addr constant [6 x i8] c"valid\00", align 1
@.str.122 = private unnamed_addr constant [9 x i8] c"vertical\00", align 1
@.str.123 = private unnamed_addr constant [8 x i8] c"visited\00", align 1
@.str.124 = private unnamed_addr constant [16 x i8] c"window-inactive\00", align 1
@.str.125 = private unnamed_addr constant [11 x i8] c"xr-overlay\00", align 1
@_ZN5blink26RuntimeEnabledFeaturesBase26is_css_pseudo_dir_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase29is_css_focus_visible_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase37is_css_pseudo_playing_paused_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase34is_css_picture_in_picture_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase34is_picture_in_picture_api_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase42is_css_target_text_pseudo_element_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase25is_highlight_api_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase39is_css_spelling_grammar_errors_enabled_E = external local_unnamed_addr global i8, align 1
@.str.126 = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.127 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.129 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.130 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = char16_t]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN5blink10g_any_nameE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@.str.131 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.132 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.133 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1
@switch.table._ZN5blink11CSSSelector11GetPseudoIdENS0_10PseudoTypeE = private unnamed_addr constant [112 x i8] c"\00\00\00\00\00\00\00\00\01\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\04\05\00\06\00\00\00\00\13\00\00\08\0F\12\0E\10\11\00\00\00\00\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\09\00\0A\0B\0C", align 1

@_ZN5blink11CSSSelector8RareDataC1ERKN3WTF12AtomicStringE = hidden unnamed_addr alias void (%"struct.blink::CSSSelector::RareData"*, %"class.WTF::AtomicString"*), void (%"struct.blink::CSSSelector::RareData"*, %"class.WTF::AtomicString"*)* @_ZN5blink11CSSSelector8RareDataC2ERKN3WTF12AtomicStringE
@_ZN5blink11CSSSelector8RareDataD1Ev = hidden unnamed_addr alias void (%"struct.blink::CSSSelector::RareData"*), void (%"struct.blink::CSSSelector::RareData"*)* @_ZN5blink11CSSSelector8RareDataD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11CSSSelector14CreateRareDataEv(%"class.blink::CSSSelector"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 262144
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %32

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %7, i64 0, i32 0
  %9 = tail call noalias i8* @malloc(i64 64) #14
  %10 = bitcast i8* %9 to %"struct.blink::CSSSelector::RareData"*
  tail call void @_ZN5blink11CSSSelector8RareDataC2ERKN3WTF12AtomicStringE(%"struct.blink::CSSSelector::RareData"* %10, %"class.WTF::AtomicString"* dereferenceable(8) %8) #14
  %11 = ptrtoint i8* %9 to i64
  %12 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  br i1 %14, label %28, label %15

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  br i1 %19, label %22, label %24

22:                                               ; preds = %15
  %23 = add i32 %21, -1
  store i32 %23, i32* %20, align 4
  br label %24

24:                                               ; preds = %22, %15
  %25 = phi i32 [ %23, %22 ], [ %21, %15 ]
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %24
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %13) #14
  br label %28

28:                                               ; preds = %27, %24, %6
  %29 = bitcast %"union.blink::CSSSelector::DataUnion"* %7 to i64*
  store i64 %11, i64* %29, align 8
  %30 = load i32, i32* %2, align 8
  %31 = or i32 %30, 262144
  store i32 %31, i32* %2, align 8
  br label %32

32:                                               ; preds = %1, %28
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink11CSSSelector11SpecificityEv(%"class.blink::CSSSelector"*) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 524288
  %5 = icmp eq i32 %4, 0
  %6 = icmp eq %"class.blink::CSSSelector"* %0, null
  br i1 %5, label %7, label %8

7:                                                ; preds = %1
  br i1 %6, label %77, label %46

8:                                                ; preds = %1
  br i1 %6, label %43, label %9

9:                                                ; preds = %8
  %10 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  %11 = bitcast %"union.blink::CSSSelector::DataUnion"* %10 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %12 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %13 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %12, i64 0, i32 0, i32 0, i32 0
  br label %14

14:                                               ; preds = %40, %9
  %15 = phi i32 [ %3, %9 ], [ %42, %40 ]
  %16 = phi %"class.blink::CSSSelector"* [ %0, %9 ], [ %39, %40 ]
  %17 = phi i32 [ 0, %9 ], [ %36, %40 ]
  %18 = lshr i32 %15, 4
  %19 = and i32 %18, 15
  switch i32 %19, label %35 [
    i32 1, label %20
    i32 6, label %28
  ]

20:                                               ; preds = %14
  %21 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %11, align 8
  %22 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %21, i64 0, i32 3, i32 0, i32 0, i32 0
  %23 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %23, %24
  %26 = select i1 %25, i32 0, i32 4
  %27 = add i32 %26, %17
  br label %35

28:                                               ; preds = %14
  %29 = lshr i32 %15, 8
  %30 = trunc i32 %29 to i8
  switch i8 %30, label %35 [
    i8 78, label %31
    i8 76, label %33
    i8 77, label %33
  ]

31:                                               ; preds = %28
  %32 = add i32 %17, 2
  br label %35

33:                                               ; preds = %28, %28
  %34 = add i32 %17, 1
  br label %35

35:                                               ; preds = %33, %31, %28, %20, %14
  %36 = phi i32 [ %17, %14 ], [ %17, %28 ], [ %34, %33 ], [ %32, %31 ], [ %27, %20 ]
  %37 = and i32 %15, 131072
  %38 = icmp eq i32 %37, 0
  %39 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %16, i64 1
  br i1 %38, label %40, label %43

40:                                               ; preds = %35
  %41 = bitcast %"class.blink::CSSSelector"* %39 to i32*
  %42 = load i32, i32* %41, align 8
  br label %14

43:                                               ; preds = %35, %8
  %44 = phi i32 [ 0, %8 ], [ %36, %35 ]
  %45 = and i32 %44, 16777215
  br label %77

46:                                               ; preds = %7, %68
  %47 = phi %"class.blink::CSSSelector"* [ %74, %68 ], [ %0, %7 ]
  %48 = phi i32 [ %69, %68 ], [ 0, %7 ]
  %49 = tail call i32 @_ZNK5blink11CSSSelector25SpecificityForOneSelectorEv(%"class.blink::CSSSelector"* nonnull %47)
  %50 = add i32 %49, %48
  %51 = and i32 %50, 16711680
  %52 = and i32 %48, 16711680
  %53 = icmp ult i32 %51, %52
  br i1 %53, label %54, label %56

54:                                               ; preds = %46
  %55 = or i32 %48, 16711680
  br label %68

56:                                               ; preds = %46
  %57 = and i32 %50, 65280
  %58 = and i32 %48, 65280
  %59 = icmp ult i32 %57, %58
  br i1 %59, label %60, label %62

60:                                               ; preds = %56
  %61 = or i32 %48, 65280
  br label %68

62:                                               ; preds = %56
  %63 = and i32 %50, 255
  %64 = and i32 %48, 255
  %65 = icmp ult i32 %63, %64
  %66 = or i32 %48, 255
  %67 = select i1 %65, i32 %66, i32 %50
  br label %68

68:                                               ; preds = %62, %54, %60
  %69 = phi i32 [ %55, %54 ], [ %61, %60 ], [ %67, %62 ]
  %70 = bitcast %"class.blink::CSSSelector"* %47 to i32*
  %71 = load i32, i32* %70, align 8
  %72 = and i32 %71, 131072
  %73 = icmp ne i32 %72, 0
  %74 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %47, i64 1
  %75 = icmp eq %"class.blink::CSSSelector"* %74, null
  %76 = or i1 %75, %73
  br i1 %76, label %77, label %46

77:                                               ; preds = %68, %7, %43
  %78 = phi i32 [ %45, %43 ], [ 0, %7 ], [ %69, %68 ]
  ret i32 %78
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink11CSSSelector18SpecificityForPageEv(%"class.blink::CSSSelector"* readonly) local_unnamed_addr #2 align 2 {
  %2 = icmp eq %"class.blink::CSSSelector"* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  %5 = bitcast %"union.blink::CSSSelector::DataUnion"* %4 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %6 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %7 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %6, i64 0, i32 0, i32 0, i32 0
  br label %10

8:                                                ; preds = %32, %1
  %9 = phi i32 [ 0, %1 ], [ %33, %32 ]
  ret i32 %9

10:                                               ; preds = %3, %32
  %11 = phi %"class.blink::CSSSelector"* [ %0, %3 ], [ %36, %32 ]
  %12 = phi i32 [ 0, %3 ], [ %33, %32 ]
  %13 = bitcast %"class.blink::CSSSelector"* %11 to i32*
  %14 = load i32, i32* %13, align 8
  %15 = lshr i32 %14, 4
  %16 = and i32 %15, 15
  switch i32 %16, label %32 [
    i32 1, label %17
    i32 6, label %25
  ]

17:                                               ; preds = %10
  %18 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %5, align 8
  %19 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %18, i64 0, i32 3, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %22 = icmp eq %"class.WTF::StringImpl"* %20, %21
  %23 = select i1 %22, i32 0, i32 4
  %24 = add i32 %23, %12
  br label %32

25:                                               ; preds = %10
  %26 = lshr i32 %14, 8
  %27 = trunc i32 %26 to i8
  switch i8 %27, label %32 [
    i8 78, label %28
    i8 76, label %30
    i8 77, label %30
  ]

28:                                               ; preds = %25
  %29 = add i32 %12, 2
  br label %32

30:                                               ; preds = %25, %25
  %31 = add i32 %12, 1
  br label %32

32:                                               ; preds = %17, %25, %30, %28, %10
  %33 = phi i32 [ %12, %10 ], [ %12, %25 ], [ %31, %30 ], [ %29, %28 ], [ %24, %17 ]
  %34 = and i32 %14, 131072
  %35 = icmp ne i32 %34, 0
  %36 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %11, i64 1
  %37 = icmp eq %"class.blink::CSSSelector"* %36, null
  %38 = or i1 %37, %35
  br i1 %38, label %8, label %10
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink11CSSSelector25SpecificityForOneSelectorEv(%"class.blink::CSSSelector"*) local_unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %3 = load i32, i32* %2, align 8
  %4 = lshr i32 %3, 4
  %5 = and i32 %4, 15
  switch i32 %5, label %98 [
    i32 2, label %99
    i32 4, label %6
    i32 5, label %67
    i32 3, label %85
    i32 7, label %85
    i32 8, label %85
    i32 10, label %85
    i32 9, label %85
    i32 11, label %85
    i32 12, label %85
    i32 13, label %85
    i32 1, label %86
    i32 0, label %97
  ]

6:                                                ; preds = %1
  %7 = lshr i32 %3, 8
  %8 = trunc i32 %7 to i8
  switch i8 %8, label %66 [
    i8 20, label %99
    i8 95, label %9
    i8 96, label %19
    i8 52, label %34
    i8 19, label %34
  ]

9:                                                ; preds = %6
  %10 = and i32 %3, 262144
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %99, label %12

12:                                               ; preds = %9
  %13 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  %14 = bitcast %"union.blink::CSSSelector::DataUnion"* %13 to %"struct.blink::CSSSelector::RareData"**
  %15 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %14, align 8
  %16 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %15, i64 0, i32 6, i32 0, i32 0, i32 0
  %17 = load %"class.blink::CSSSelectorList"*, %"class.blink::CSSSelectorList"** %16, align 8
  %18 = icmp eq %"class.blink::CSSSelectorList"* %17, null
  br i1 %18, label %99, label %22

19:                                               ; preds = %6
  %20 = and i32 %3, 262144
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %28, label %22

22:                                               ; preds = %12, %19
  %23 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  %24 = bitcast %"union.blink::CSSSelector::DataUnion"* %23 to %"struct.blink::CSSSelector::RareData"**
  %25 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %24, align 8
  %26 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %25, i64 0, i32 6, i32 0, i32 0, i32 0
  %27 = load %"class.blink::CSSSelectorList"*, %"class.blink::CSSSelectorList"** %26, align 8
  br label %28

28:                                               ; preds = %19, %22
  %29 = phi %"class.blink::CSSSelectorList"* [ %27, %22 ], [ null, %19 ]
  %30 = getelementptr inbounds %"class.blink::CSSSelectorList", %"class.blink::CSSSelectorList"* %29, i64 0, i32 0
  %31 = load %"class.blink::CSSSelector"*, %"class.blink::CSSSelector"** %30, align 8
  %32 = tail call i32 @_ZNK5blink11CSSSelector11SpecificityEv(%"class.blink::CSSSelector"* %31)
  %33 = add i32 %32, 256
  br label %99

34:                                               ; preds = %6, %6
  %35 = and i32 %3, 262144
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %99, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  %39 = bitcast %"union.blink::CSSSelector::DataUnion"* %38 to %"struct.blink::CSSSelector::RareData"**
  %40 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %39, align 8
  %41 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %40, i64 0, i32 6, i32 0, i32 0, i32 0
  %42 = load %"class.blink::CSSSelectorList"*, %"class.blink::CSSSelectorList"** %41, align 8
  %43 = icmp eq %"class.blink::CSSSelectorList"* %42, null
  br i1 %43, label %99, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.blink::CSSSelectorList", %"class.blink::CSSSelectorList"* %42, i64 0, i32 0
  %46 = load %"class.blink::CSSSelector"*, %"class.blink::CSSSelector"** %45, align 8
  %47 = icmp eq %"class.blink::CSSSelector"* %46, null
  br i1 %47, label %99, label %48

48:                                               ; preds = %44, %60
  %49 = phi %"class.blink::CSSSelector"* [ %59, %60 ], [ %46, %44 ]
  %50 = phi i32 [ %61, %60 ], [ 0, %44 ]
  %51 = tail call i32 @_ZNK5blink11CSSSelector11SpecificityEv(%"class.blink::CSSSelector"* nonnull %49) #14
  %52 = icmp ult i32 %50, %51
  br label %53

53:                                               ; preds = %53, %48
  %54 = phi %"class.blink::CSSSelector"* [ %49, %48 ], [ %59, %53 ]
  %55 = bitcast %"class.blink::CSSSelector"* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = and i32 %56, 131072
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %54, i64 1
  br i1 %58, label %53, label %60

60:                                               ; preds = %53
  %61 = select i1 %52, i32 %51, i32 %50
  %62 = and i32 %56, 2097152
  %63 = icmp ne i32 %62, 0
  %64 = icmp eq %"class.blink::CSSSelector"* %59, null
  %65 = or i1 %64, %63
  br i1 %65, label %99, label %48

66:                                               ; preds = %6
  br label %99

67:                                               ; preds = %1
  %68 = and i32 %3, 65280
  %69 = icmp eq i32 %68, 26624
  br i1 %69, label %70, label %99

70:                                               ; preds = %67
  %71 = and i32 %3, 262144
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %79, label %73

73:                                               ; preds = %70
  %74 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  %75 = bitcast %"union.blink::CSSSelector::DataUnion"* %74 to %"struct.blink::CSSSelector::RareData"**
  %76 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %75, align 8
  %77 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %76, i64 0, i32 6, i32 0, i32 0, i32 0
  %78 = load %"class.blink::CSSSelectorList"*, %"class.blink::CSSSelectorList"** %77, align 8
  br label %79

79:                                               ; preds = %70, %73
  %80 = phi %"class.blink::CSSSelectorList"* [ %78, %73 ], [ null, %70 ]
  %81 = getelementptr inbounds %"class.blink::CSSSelectorList", %"class.blink::CSSSelectorList"* %80, i64 0, i32 0
  %82 = load %"class.blink::CSSSelector"*, %"class.blink::CSSSelector"** %81, align 8
  %83 = tail call i32 @_ZNK5blink11CSSSelector11SpecificityEv(%"class.blink::CSSSelector"* %82)
  %84 = add i32 %83, 256
  br label %99

85:                                               ; preds = %1, %1, %1, %1, %1, %1, %1, %1
  br label %99

86:                                               ; preds = %1
  %87 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  %88 = bitcast %"union.blink::CSSSelector::DataUnion"* %87 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %89 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %88, align 8
  %90 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %91 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %89, i64 0, i32 3, i32 0, i32 0, i32 0
  %92 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %91, align 8
  %93 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %90, i64 0, i32 0, i32 0, i32 0
  %94 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %93, align 8
  %95 = icmp ne %"class.WTF::StringImpl"* %92, %94
  %96 = zext i1 %95 to i32
  br label %99

97:                                               ; preds = %1
  br label %99

98:                                               ; preds = %1
  br label %99

99:                                               ; preds = %60, %44, %34, %9, %37, %86, %67, %12, %6, %1, %98, %97, %85, %79, %66, %28
  %100 = phi i32 [ 0, %98 ], [ 0, %97 ], [ 256, %85 ], [ %84, %79 ], [ 256, %66 ], [ %33, %28 ], [ 65536, %1 ], [ 0, %6 ], [ 256, %12 ], [ 256, %67 ], [ %96, %86 ], [ 0, %37 ], [ 256, %9 ], [ 0, %34 ], [ 0, %44 ], [ %61, %60 ]
  ret i32 %100
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN5blink11CSSSelector11GetPseudoIdENS0_10PseudoTypeE(i32) local_unnamed_addr #4 align 2 {
  %2 = icmp ult i32 %0, 112
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [112 x i8], [112 x i8]* @switch.table._ZN5blink11CSSSelector11GetPseudoIdENS0_10PseudoTypeE, i64 0, i64 %4
  %6 = load i8, i8* %5, align 1
  ret i8 %6

7:                                                ; preds = %1
  ret i8 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink11CSSSelector16NameToPseudoTypeERKN3WTF12AtomicStringEb(%"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %106, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %106, label %13

13:                                               ; preds = %8
  %14 = select i1 %1, %"struct.blink::NameToPseudoStruct"* getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 0), %"struct.blink::NameToPseudoStruct"* getelementptr inbounds ([95 x %"struct.blink::NameToPseudoStruct"], [95 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL30kPseudoTypeWithoutArgumentsMapE, i64 0, i64 0)
  %15 = select i1 %1, %"struct.blink::NameToPseudoStruct"* getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 1, i64 0), %"struct.blink::NameToPseudoStruct"* getelementptr inbounds ([95 x %"struct.blink::NameToPseudoStruct"], [95 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL30kPseudoTypeWithoutArgumentsMapE, i64 1, i64 0)
  %16 = ptrtoint %"struct.blink::NameToPseudoStruct"* %15 to i64
  %17 = ptrtoint %"struct.blink::NameToPseudoStruct"* %14 to i64
  %18 = sub i64 %16, %17
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %42, label %20

20:                                               ; preds = %13
  %21 = ashr exact i64 %18, 4
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %23 = bitcast %"class.WTF::StringImpl"* %22 to i8*
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  br label %27

27:                                               ; preds = %27, %20
  %28 = phi i64 [ %21, %20 ], [ %40, %27 ]
  %29 = phi %"struct.blink::NameToPseudoStruct"* [ %14, %20 ], [ %39, %27 ]
  %30 = lshr i64 %28, 1
  %31 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %29, i64 %30
  %32 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %31, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = tail call i32 @strncmp(i8* %33, i8* %23, i64 %26) #15
  %35 = icmp slt i32 %34, 0
  %36 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %31, i64 1
  %37 = xor i64 %30, -1
  %38 = add i64 %28, %37
  %39 = select i1 %35, %"struct.blink::NameToPseudoStruct"* %36, %"struct.blink::NameToPseudoStruct"* %29
  %40 = select i1 %35, i64 %38, i64 %30
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %27

42:                                               ; preds = %27, %13
  %43 = phi %"struct.blink::NameToPseudoStruct"* [ %14, %13 ], [ %39, %27 ]
  %44 = icmp eq %"struct.blink::NameToPseudoStruct"* %43, %15
  br i1 %44, label %106, label %45

45:                                               ; preds = %42
  %46 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %43, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = bitcast %"class.WTF::StringView"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %48) #14
  %49 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  store %"class.WTF::StringImpl"* %6, %"class.WTF::StringImpl"** %49, align 8
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %53 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %54 = bitcast i8** %53 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %52, %"class.WTF::StringImpl"** %54, align 8
  %55 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  store i32 %51, i32* %55, align 8
  %56 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56) #14
  %57 = icmp eq i8* %47, null
  br i1 %57, label %64, label %58

58:                                               ; preds = %45
  %59 = tail call i64 @strlen(i8* nonnull %47) #15
  %60 = icmp ult i64 %59, 4294967296
  br i1 %60, label %62, label %61, !prof !2

61:                                               ; preds = %58
  tail call void @llvm.trap() #14
  unreachable

62:                                               ; preds = %58
  %63 = trunc i64 %59 to i32
  br label %64

64:                                               ; preds = %45, %62
  %65 = phi i32 [ %63, %62 ], [ 0, %45 ]
  %66 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %67 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %66, i64* %67, align 8
  %68 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  store i8* %47, i8** %68, align 8
  %69 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 %65, i32* %69, align 8
  %70 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %4) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %56) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %48) #14
  br i1 %70, label %71, label %106

71:                                               ; preds = %64
  %72 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %43, i64 0, i32 1
  %73 = load i8, i8* %72, align 8
  switch i8 %73, label %98 [
    i8 108, label %74
    i8 29, label %77
    i8 82, label %80
    i8 83, label %83
    i8 84, label %89
    i8 107, label %92
    i8 109, label %95
  ]

74:                                               ; preds = %71
  %75 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase26is_css_pseudo_dir_enabled_E, align 1, !range !3
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %106, label %104

77:                                               ; preds = %71
  %78 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase29is_css_focus_visible_enabled_E, align 1, !range !3
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %106, label %104

80:                                               ; preds = %71
  %81 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase37is_css_pseudo_playing_paused_enabled_E, align 1, !range !3
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %106, label %104

83:                                               ; preds = %71
  %84 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase34is_picture_in_picture_api_enabled_E, align 1, !range !3
  %85 = icmp ne i8 %84, 0
  %86 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase34is_css_picture_in_picture_enabled_E, align 1
  %87 = icmp ne i8 %86, 0
  %88 = and i1 %85, %87
  br i1 %88, label %104, label %106

89:                                               ; preds = %71
  %90 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase37is_css_pseudo_playing_paused_enabled_E, align 1, !range !3
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %106, label %104

92:                                               ; preds = %71
  %93 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase42is_css_target_text_pseudo_element_enabled_E, align 1, !range !3
  %94 = icmp eq i8 %93, 0
  br i1 %94, label %106, label %104

95:                                               ; preds = %71
  %96 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase25is_highlight_api_enabled_E, align 1, !range !3
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %106, label %104

98:                                               ; preds = %71
  %99 = and i8 %73, -2
  %100 = icmp ne i8 %99, 110
  %101 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase39is_css_spelling_grammar_errors_enabled_E, align 1
  %102 = icmp ne i8 %101, 0
  %103 = or i1 %100, %102
  br i1 %103, label %104, label %106

104:                                              ; preds = %74, %77, %80, %89, %92, %95, %98, %83
  %105 = zext i8 %73 to i32
  br label %106

106:                                              ; preds = %74, %77, %80, %89, %92, %95, %64, %8, %98, %104, %42, %83, %2
  %107 = phi i32 [ 0, %8 ], [ 0, %2 ], [ %105, %104 ], [ 0, %64 ], [ 0, %42 ], [ 0, %74 ], [ 0, %77 ], [ 0, %80 ], [ 0, %83 ], [ 0, %89 ], [ 0, %92 ], [ 0, %95 ], [ 0, %98 ]
  ret i32 %107
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11CSSSelector16UpdatePseudoPageERKN3WTF12AtomicStringE(%"class.blink::CSSSelector"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  tail call void @_ZN5blink11CSSSelector8SetValueERKN3WTF12AtomicStringEb(%"class.blink::CSSSelector"* %0, %"class.WTF::AtomicString"* dereferenceable(8) %1, i1 zeroext false)
  %3 = tail call i32 @_ZN5blink17CSSSelectorParser15ParsePseudoTypeERKN3WTF12AtomicStringEb(%"class.WTF::AtomicString"* dereferenceable(8) %1, i1 zeroext false) #14
  %4 = add i32 %3, -76
  %5 = icmp ult i32 %4, 3
  %6 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %3, 8
  %9 = and i32 %8, 65280
  %10 = select i1 %5, i32 %9, i32 0
  %11 = and i32 %7, -65281
  %12 = or i32 %10, %11
  store i32 %12, i32* %6, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink11CSSSelector8SetValueERKN3WTF12AtomicStringEb(%"class.blink::CSSSelector"*, %"class.WTF::AtomicString"* dereferenceable(8), i1 zeroext) local_unnamed_addr #3 comdat align 2 {
  %4 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 262144
  %7 = icmp eq i32 %6, 0
  %8 = and i1 %7, %2
  br i1 %8, label %9, label %74

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 1
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %16 = bitcast %"class.WTF::StringImpl"* %15 to i8*
  %17 = bitcast %"class.WTF::StringImpl"* %15 to i16*
  br label %18

18:                                               ; preds = %46, %9
  %19 = phi i64 [ %47, %46 ], [ 0, %9 ]
  br i1 %12, label %22, label %20

20:                                               ; preds = %18
  %21 = load i32, i32* %13, align 4
  br label %22

22:                                               ; preds = %20, %18
  %23 = phi i32 [ %21, %20 ], [ 0, %18 ]
  %24 = zext i32 %23 to i64
  %25 = icmp ult i64 %19, %24
  br i1 %25, label %26, label %74

26:                                               ; preds = %22
  br i1 %12, label %46, label %27

27:                                               ; preds = %26
  %28 = load i32, i32* %13, align 4
  %29 = zext i32 %28 to i64
  %30 = icmp ult i64 %19, %29
  br i1 %30, label %31, label %46

31:                                               ; preds = %27
  %32 = load atomic i32, i32* %14 monotonic, align 4
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds i8, i8* %16, i64 %19
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i16
  br label %42

39:                                               ; preds = %31
  %40 = getelementptr inbounds i16, i16* %17, i64 %19
  %41 = load i16, i16* %40, align 2
  br label %42

42:                                               ; preds = %39, %35
  %43 = phi i16 [ %38, %35 ], [ %41, %39 ]
  %44 = add i16 %43, -65
  %45 = icmp ult i16 %44, 26
  br i1 %45, label %48, label %46

46:                                               ; preds = %42, %27, %26
  %47 = add nuw nsw i64 %19, 1
  br label %18

48:                                               ; preds = %42
  %49 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  %50 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %49, i64 0, i32 0
  %51 = tail call noalias i8* @malloc(i64 64) #14
  %52 = bitcast i8* %51 to %"struct.blink::CSSSelector::RareData"*
  tail call void @_ZN5blink11CSSSelector8RareDataC2ERKN3WTF12AtomicStringE(%"struct.blink::CSSSelector::RareData"* %52, %"class.WTF::AtomicString"* dereferenceable(8) %50) #14
  %53 = ptrtoint i8* %51 to i64
  %54 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %49, i64 0, i32 0, i32 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %70, label %57

57:                                               ; preds = %48
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %55) #14
  br label %70

70:                                               ; preds = %48, %66, %69
  %71 = bitcast %"union.blink::CSSSelector::DataUnion"* %49 to i64*
  store i64 %53, i64* %71, align 8
  %72 = load i32, i32* %4, align 8
  %73 = or i32 %72, 262144
  store i32 %73, i32* %4, align 8
  br label %74

74:                                               ; preds = %22, %3, %70
  %75 = phi i32 [ %73, %70 ], [ %5, %3 ], [ %5, %22 ]
  %76 = and i32 %75, 262144
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %119

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1, i32 0
  %80 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %100, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = load atomic i32, i32* %84 monotonic, align 4
  %86 = and i32 %85, 2
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %100

88:                                               ; preds = %83
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 0
  %90 = load i32, i32* %89, align 4
  %91 = zext i32 %90 to i33
  %92 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %91, i33 1) #14
  %93 = extractvalue { i33, i1 } %92, 1
  %94 = extractvalue { i33, i1 } %92, 0
  %95 = icmp slt i33 %94, 0
  %96 = or i1 %93, %95
  br i1 %96, label %97, label %98, !prof !4

97:                                               ; preds = %88
  tail call void @llvm.trap() #14
  unreachable

98:                                               ; preds = %88
  %99 = trunc i33 %94 to i32
  store i32 %99, i32* %89, align 4
  br label %100

100:                                              ; preds = %98, %83, %78
  %101 = ptrtoint %"class.WTF::StringImpl"* %81 to i64
  %102 = bitcast %"class.WTF::AtomicString"* %79 to i64*
  %103 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %79, i64 0, i32 0, i32 0, i32 0
  %104 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %103, align 8
  store i64 %101, i64* %102, align 8
  %105 = icmp eq %"class.WTF::StringImpl"* %104, null
  br i1 %105, label %257, label %106

106:                                              ; preds = %100
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %108 = load atomic i32, i32* %107 monotonic, align 4
  %109 = and i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 0
  %112 = load i32, i32* %111, align 4
  br i1 %110, label %113, label %115

113:                                              ; preds = %106
  %114 = add i32 %112, -1
  store i32 %114, i32* %111, align 4
  br label %115

115:                                              ; preds = %113, %106
  %116 = phi i32 [ %114, %113 ], [ %112, %106 ]
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %257

118:                                              ; preds = %115
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %104) #14
  br label %257

119:                                              ; preds = %74
  br i1 %2, label %151, label %120

120:                                              ; preds = %119
  %121 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %122 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %121, align 8
  %123 = icmp eq %"class.WTF::StringImpl"* %122, null
  br i1 %123, label %124, label %129

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  %126 = bitcast %"union.blink::CSSSelector::DataUnion"* %125 to %"struct.blink::CSSSelector::RareData"**
  %127 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %126, align 8
  %128 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %127, i64 0, i32 1
  br label %178

129:                                              ; preds = %120
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %146

134:                                              ; preds = %129
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 0
  %136 = load i32, i32* %135, align 4
  %137 = zext i32 %136 to i33
  %138 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %137, i33 1) #14
  %139 = extractvalue { i33, i1 } %138, 1
  %140 = extractvalue { i33, i1 } %138, 0
  %141 = icmp slt i33 %140, 0
  %142 = or i1 %139, %141
  br i1 %142, label %143, label %144, !prof !4

143:                                              ; preds = %134
  tail call void @llvm.trap() #14
  unreachable

144:                                              ; preds = %134
  %145 = trunc i33 %140 to i32
  store i32 %145, i32* %135, align 4
  br label %146

146:                                              ; preds = %129, %144
  %147 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  %148 = bitcast %"union.blink::CSSSelector::DataUnion"* %147 to %"struct.blink::CSSSelector::RareData"**
  %149 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %148, align 8
  %150 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %149, i64 0, i32 1
  br label %158

151:                                              ; preds = %119
  %152 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF12AtomicString10LowerASCIIEv(%"class.WTF::AtomicString"* %1) #14
  %153 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  %154 = bitcast %"union.blink::CSSSelector::DataUnion"* %153 to %"struct.blink::CSSSelector::RareData"**
  %155 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %154, align 8
  %156 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %155, i64 0, i32 1
  %157 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %157, label %178, label %158

158:                                              ; preds = %146, %151
  %159 = phi %"class.WTF::AtomicString"* [ %150, %146 ], [ %156, %151 ]
  %160 = phi %"struct.blink::CSSSelector::RareData"** [ %148, %146 ], [ %154, %151 ]
  %161 = phi %"class.WTF::StringImpl"* [ %122, %146 ], [ %152, %151 ]
  %162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %163 = load atomic i32, i32* %162 monotonic, align 4
  %164 = and i32 %163, 2
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %178

166:                                              ; preds = %158
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 0
  %168 = load i32, i32* %167, align 4
  %169 = zext i32 %168 to i33
  %170 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %169, i33 1) #14
  %171 = extractvalue { i33, i1 } %170, 1
  %172 = extractvalue { i33, i1 } %170, 0
  %173 = icmp slt i33 %172, 0
  %174 = or i1 %171, %173
  br i1 %174, label %175, label %176, !prof !4

175:                                              ; preds = %166
  tail call void @llvm.trap() #14
  unreachable

176:                                              ; preds = %166
  %177 = trunc i33 %172 to i32
  store i32 %177, i32* %167, align 4
  br label %178

178:                                              ; preds = %124, %176, %158, %151
  %179 = phi i1 [ false, %176 ], [ false, %158 ], [ true, %151 ], [ true, %124 ]
  %180 = phi %"class.WTF::AtomicString"* [ %159, %176 ], [ %159, %158 ], [ %156, %151 ], [ %128, %124 ]
  %181 = phi %"struct.blink::CSSSelector::RareData"** [ %160, %176 ], [ %160, %158 ], [ %154, %151 ], [ %126, %124 ]
  %182 = phi %"class.WTF::StringImpl"* [ %161, %176 ], [ %161, %158 ], [ null, %151 ], [ null, %124 ]
  %183 = ptrtoint %"class.WTF::StringImpl"* %182 to i64
  %184 = bitcast %"class.WTF::AtomicString"* %180 to i64*
  %185 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %180, i64 0, i32 0, i32 0, i32 0
  %186 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %185, align 8
  store i64 %183, i64* %184, align 8
  %187 = icmp eq %"class.WTF::StringImpl"* %186, null
  br i1 %187, label %201, label %188

188:                                              ; preds = %178
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %186, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %190 = load atomic i32, i32* %189 monotonic, align 4
  %191 = and i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %186, i64 0, i32 0
  %194 = load i32, i32* %193, align 4
  br i1 %192, label %195, label %197

195:                                              ; preds = %188
  %196 = add i32 %194, -1
  store i32 %196, i32* %193, align 4
  br label %197

197:                                              ; preds = %195, %188
  %198 = phi i32 [ %196, %195 ], [ %194, %188 ]
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %201

200:                                              ; preds = %197
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %186) #14
  br label %201

201:                                              ; preds = %178, %197, %200
  br i1 %179, label %215, label %202

202:                                              ; preds = %201
  %203 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %182, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %204 = load atomic i32, i32* %203 monotonic, align 4
  %205 = and i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %182, i64 0, i32 0
  %208 = load i32, i32* %207, align 4
  br i1 %206, label %209, label %211

209:                                              ; preds = %202
  %210 = add i32 %208, -1
  store i32 %210, i32* %207, align 4
  br label %211

211:                                              ; preds = %209, %202
  %212 = phi i32 [ %210, %209 ], [ %208, %202 ]
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %214, label %215

214:                                              ; preds = %211
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %182) #14
  br label %215

215:                                              ; preds = %201, %211, %214
  %216 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %181, align 8
  %217 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %216, i64 0, i32 2
  %218 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %219 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %218, align 8
  %220 = icmp eq %"class.WTF::StringImpl"* %219, null
  br i1 %220, label %238, label %221

221:                                              ; preds = %215
  %222 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %219, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %223 = load atomic i32, i32* %222 monotonic, align 4
  %224 = and i32 %223, 2
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %226, label %238

226:                                              ; preds = %221
  %227 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %219, i64 0, i32 0
  %228 = load i32, i32* %227, align 4
  %229 = zext i32 %228 to i33
  %230 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %229, i33 1) #14
  %231 = extractvalue { i33, i1 } %230, 1
  %232 = extractvalue { i33, i1 } %230, 0
  %233 = icmp slt i33 %232, 0
  %234 = or i1 %231, %233
  br i1 %234, label %235, label %236, !prof !4

235:                                              ; preds = %226
  tail call void @llvm.trap() #14
  unreachable

236:                                              ; preds = %226
  %237 = trunc i33 %232 to i32
  store i32 %237, i32* %227, align 4
  br label %238

238:                                              ; preds = %236, %221, %215
  %239 = ptrtoint %"class.WTF::StringImpl"* %219 to i64
  %240 = bitcast %"class.WTF::AtomicString"* %217 to i64*
  %241 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %217, i64 0, i32 0, i32 0, i32 0
  %242 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %241, align 8
  store i64 %239, i64* %240, align 8
  %243 = icmp eq %"class.WTF::StringImpl"* %242, null
  br i1 %243, label %257, label %244

244:                                              ; preds = %238
  %245 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %242, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %246 = load atomic i32, i32* %245 monotonic, align 4
  %247 = and i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %242, i64 0, i32 0
  %250 = load i32, i32* %249, align 4
  br i1 %248, label %251, label %253

251:                                              ; preds = %244
  %252 = add i32 %250, -1
  store i32 %252, i32* %249, align 4
  br label %253

253:                                              ; preds = %251, %244
  %254 = phi i32 [ %252, %251 ], [ %250, %244 ]
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %256, label %257

256:                                              ; preds = %253
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %242) #14
  br label %257

257:                                              ; preds = %256, %253, %238, %118, %115, %100
  ret void
}

declare i32 @_ZN5blink17CSSSelectorParser15ParsePseudoTypeERKN3WTF12AtomicStringEb(%"class.WTF::AtomicString"* dereferenceable(8), i1 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11CSSSelector16UpdatePseudoTypeERKN3WTF12AtomicStringERKNS_16CSSParserContextEbNS_13CSSParserModeE(%"class.blink::CSSSelector"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::CSSParserContext"* nocapture readnone dereferenceable(176), i1 zeroext, i8 zeroext) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.WTF::AtomicString", align 8
  %7 = bitcast %"class.WTF::AtomicString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #14
  %8 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %6, i64 0, i32 0, i32 0, i32 0
  %9 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF12AtomicString10LowerASCIIEv(%"class.WTF::AtomicString"* %1) #14
  store %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"** %8, align 8
  %10 = call i32 @_ZN5blink17CSSSelectorParser15ParsePseudoTypeERKN3WTF12AtomicStringEb(%"class.WTF::AtomicString"* nonnull dereferenceable(8) %6, i1 zeroext %3) #14
  %11 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %12 = load i32, i32* %11, align 8
  %13 = shl i32 %10, 8
  %14 = and i32 %13, 65280
  %15 = and i32 %12, -65281
  %16 = or i32 %15, %14
  store i32 %16, i32* %11, align 8
  %17 = icmp eq i32 %10, 15
  %18 = select i1 %17, %"class.WTF::AtomicString"* %1, %"class.WTF::AtomicString"* %6
  call void @_ZN5blink11CSSSelector8SetValueERKN3WTF12AtomicStringEb(%"class.blink::CSSSelector"* %0, %"class.WTF::AtomicString"* dereferenceable(8) %18, i1 zeroext false)
  %19 = load i32, i32* %11, align 8
  %20 = lshr i32 %19, 8
  %21 = trunc i32 %20 to i8
  switch i8 %21, label %52 [
    i8 47, label %22
    i8 46, label %22
    i8 9, label %22
    i8 8, label %22
    i8 50, label %28
    i8 90, label %28
    i8 48, label %28
    i8 14, label %28
    i8 53, label %28
    i8 54, label %28
    i8 55, label %28
    i8 58, label %28
    i8 60, label %28
    i8 59, label %28
    i8 61, label %28
    i8 62, label %28
    i8 63, label %28
    i8 75, label %28
    i8 88, label %28
    i8 104, label %28
    i8 107, label %28
    i8 109, label %28
    i8 110, label %28
    i8 111, label %28
    i8 89, label %34
    i8 94, label %41
    i8 102, label %41
    i8 99, label %41
    i8 100, label %41
    i8 49, label %41
    i8 101, label %41
    i8 103, label %41
    i8 97, label %41
    i8 98, label %41
    i8 105, label %41
    i8 106, label %41
    i8 31, label %45
    i8 18, label %45
    i8 21, label %45
    i8 23, label %45
    i8 24, label %45
    i8 25, label %45
    i8 32, label %45
    i8 65, label %45
    i8 66, label %45
    i8 35, label %45
    i8 93, label %45
    i8 36, label %45
    i8 108, label %45
    i8 72, label %45
    i8 27, label %45
    i8 1, label %45
    i8 33, label %45
    i8 71, label %45
    i8 2, label %45
    i8 3, label %45
    i8 28, label %45
    i8 29, label %45
    i8 30, label %45
    i8 34, label %45
    i8 79, label %45
    i8 80, label %45
    i8 81, label %45
    i8 91, label %45
    i8 68, label %45
    i8 95, label %45
    i8 96, label %45
    i8 26, label %45
    i8 85, label %45
    i8 67, label %45
    i8 44, label %45
    i8 43, label %45
    i8 20, label %45
    i8 51, label %45
    i8 4, label %45
    i8 5, label %45
    i8 16, label %45
    i8 19, label %45
    i8 74, label %45
    i8 52, label %45
    i8 10, label %45
    i8 12, label %45
    i8 13, label %45
    i8 11, label %45
    i8 6, label %45
    i8 7, label %45
    i8 37, label %45
    i8 82, label %45
    i8 83, label %45
    i8 84, label %45
    i8 38, label %45
    i8 86, label %45
    i8 92, label %45
    i8 40, label %45
    i8 41, label %45
    i8 39, label %45
    i8 56, label %45
    i8 57, label %45
    i8 73, label %45
    i8 70, label %45
    i8 15, label %45
    i8 45, label %45
    i8 0, label %45
    i8 42, label %45
    i8 69, label %45
    i8 17, label %45
    i8 22, label %45
    i8 64, label %45
    i8 87, label %45
    i8 78, label %50
    i8 76, label %50
    i8 77, label %50
  ]

22:                                               ; preds = %5, %5, %5, %5
  %23 = and i32 %19, 240
  %24 = icmp eq i32 %23, 64
  br i1 %24, label %25, label %28

25:                                               ; preds = %22
  %26 = and i32 %19, -241
  %27 = or i32 %26, 80
  store i32 %27, i32* %11, align 8
  br label %28

28:                                               ; preds = %22, %25, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5
  %29 = phi i32 [ %19, %22 ], [ %27, %25 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ], [ %19, %5 ]
  %30 = and i32 %29, 240
  %31 = icmp eq i32 %30, 80
  br i1 %31, label %52, label %32

32:                                               ; preds = %28
  %33 = and i32 %29, -65281
  store i32 %33, i32* %11, align 8
  br label %52

34:                                               ; preds = %5
  %35 = and i32 %19, 240
  %36 = icmp eq i32 %35, 80
  %37 = icmp eq i8 %4, 5
  %38 = and i1 %37, %36
  br i1 %38, label %52, label %39

39:                                               ; preds = %34
  %40 = and i32 %19, -65281
  store i32 %40, i32* %11, align 8
  br label %52

41:                                               ; preds = %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5
  %42 = icmp eq i8 %4, 5
  br i1 %42, label %45, label %43

43:                                               ; preds = %41
  %44 = and i32 %19, -65281
  store i32 %44, i32* %11, align 8
  br label %52

45:                                               ; preds = %41, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5
  %46 = and i32 %19, 240
  %47 = icmp eq i32 %46, 64
  br i1 %47, label %52, label %48

48:                                               ; preds = %45
  %49 = and i32 %19, -65281
  store i32 %49, i32* %11, align 8
  br label %52

50:                                               ; preds = %5, %5, %5
  %51 = and i32 %19, -65281
  store i32 %51, i32* %11, align 8
  br label %52

52:                                               ; preds = %34, %28, %45, %48, %39, %32, %5, %50, %43
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %54 = icmp eq %"class.WTF::StringImpl"* %53, null
  br i1 %54, label %68, label %55

55:                                               ; preds = %52
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load atomic i32, i32* %56 monotonic, align 4
  %58 = and i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 0
  %61 = load i32, i32* %60, align 4
  br i1 %59, label %62, label %64

62:                                               ; preds = %55
  %63 = add i32 %61, -1
  store i32 %63, i32* %60, align 4
  br label %64

64:                                               ; preds = %62, %55
  %65 = phi i32 [ %63, %62 ], [ %61, %55 ]
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %68

67:                                               ; preds = %64
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %53) #14
  br label %68

68:                                               ; preds = %52, %64, %67
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #14
  ret void
}

declare %"class.WTF::StringImpl"* @_ZNK3WTF12AtomicString10LowerASCIIEv(%"class.WTF::AtomicString"*) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink11CSSSelectoreqERKS0_(%"class.blink::CSSSelector"* readonly, %"class.blink::CSSSelector"* readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = icmp ne %"class.blink::CSSSelector"* %0, null
  %4 = icmp ne %"class.blink::CSSSelector"* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %76

6:                                                ; preds = %2
  %7 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %8

8:                                                ; preds = %6, %64
  %9 = phi %"class.blink::CSSSelector"* [ %1, %6 ], [ %70, %64 ]
  %10 = phi %"class.blink::CSSSelector"* [ %0, %6 ], [ %67, %64 ]
  %11 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %10, i64 0, i32 1
  %12 = bitcast %"union.blink::CSSSelector::DataUnion"* %11 to %"struct.blink::CSSSelector::RareData"**
  %13 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %9, i64 0, i32 1
  %15 = bitcast %"union.blink::CSSSelector::DataUnion"* %14 to %"struct.blink::CSSSelector::RareData"**
  %16 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %15, align 8
  %17 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %13, i64 0, i32 4, i32 0, i32 0
  %18 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %17, align 8
  %19 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %16, i64 0, i32 4, i32 0, i32 0
  %20 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %19, align 8
  %21 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %18, %20
  br i1 %21, label %22, label %81

22:                                               ; preds = %8
  %23 = bitcast %"class.blink::CSSSelector"* %10 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = bitcast %"class.blink::CSSSelector"* %9 to i32*
  %26 = load i32, i32* %25, align 8
  %27 = xor i32 %26, %24
  %28 = and i32 %27, 255
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %81

30:                                               ; preds = %22
  %31 = and i32 %24, 262144
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %13, i64 0, i32 1
  %34 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %11, i64 0, i32 0
  %35 = select i1 %32, %"class.WTF::AtomicString"* %34, %"class.WTF::AtomicString"* %33
  %36 = and i32 %26, 262144
  %37 = icmp eq i32 %36, 0
  %38 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %16, i64 0, i32 1
  %39 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %14, i64 0, i32 0
  %40 = select i1 %37, %"class.WTF::AtomicString"* %39, %"class.WTF::AtomicString"* %38
  %41 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %35, i64 0, i32 0, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %40, i64 0, i32 0, i32 0, i32 0
  %44 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %43, align 8
  %45 = icmp eq %"class.WTF::StringImpl"* %42, %44
  %46 = and i32 %27, 65280
  %47 = icmp eq i32 %46, 0
  %48 = and i1 %45, %47
  br i1 %48, label %49, label %81

49:                                               ; preds = %30
  %50 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %13, i64 0, i32 5
  %51 = select i1 %32, %"class.WTF::AtomicString"* %7, %"class.WTF::AtomicString"* %50
  %52 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %16, i64 0, i32 5
  %53 = select i1 %37, %"class.WTF::AtomicString"* %7, %"class.WTF::AtomicString"* %52
  %54 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %51, i64 0, i32 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %53, i64 0, i32 0, i32 0, i32 0
  %57 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %56, align 8
  %58 = icmp eq %"class.WTF::StringImpl"* %55, %57
  br i1 %58, label %59, label %81

59:                                               ; preds = %49
  %60 = and i32 %24, 240
  %61 = icmp ne i32 %60, 16
  %62 = icmp eq %"struct.blink::CSSSelector::RareData"* %13, %16
  %63 = or i1 %61, %62
  br i1 %63, label %64, label %81

64:                                               ; preds = %59
  %65 = and i32 %24, 131072
  %66 = icmp eq i32 %65, 0
  %67 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %10, i64 1
  %68 = and i32 %26, 131072
  %69 = icmp eq i32 %68, 0
  %70 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %9, i64 1
  %71 = icmp ne %"class.blink::CSSSelector"* %67, null
  %72 = and i1 %66, %71
  %73 = icmp ne %"class.blink::CSSSelector"* %70, null
  %74 = and i1 %69, %73
  %75 = and i1 %72, %74
  br i1 %75, label %8, label %76

76:                                               ; preds = %64, %2
  %77 = phi i1 [ %3, %2 ], [ %72, %64 ]
  %78 = phi i1 [ %4, %2 ], [ %74, %64 ]
  %79 = or i1 %77, %78
  %80 = xor i1 %79, true
  br label %81

81:                                               ; preds = %49, %30, %8, %22, %59, %76
  %82 = phi i1 [ %80, %76 ], [ false, %59 ], [ false, %22 ], [ false, %8 ], [ false, %30 ], [ false, %49 ]
  ret i1 %82
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSSelector"* @_ZNK5blink11CSSSelector17SerializeCompoundERN3WTF13StringBuilderE(%"class.blink::CSSSelector"*, %"class.WTF::StringBuilder"* dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %5 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca %"class.WTF::StringView", align 8
  %13 = alloca %"class.WTF::AtomicString", align 8
  %14 = alloca %"class.WTF::StringView", align 8
  %15 = alloca %"class.WTF::StringView", align 8
  %16 = alloca %"class.WTF::StringView", align 8
  %17 = alloca %"class.WTF::StringView", align 8
  %18 = alloca %"class.WTF::StringView", align 8
  %19 = alloca %"class.WTF::StringView", align 8
  %20 = alloca %"class.WTF::StringView", align 8
  %21 = alloca %"class.WTF::StringView", align 8
  %22 = alloca %"class.WTF::StringView", align 8
  %23 = alloca %"class.WTF::StringView", align 8
  %24 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = and i32 %25, 1048816
  %27 = icmp eq i32 %26, 16
  br i1 %27, label %28, label %84

28:                                               ; preds = %2
  %29 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  %30 = bitcast %"union.blink::CSSSelector::DataUnion"* %29 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %31 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 2
  %33 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_star_atomE, align 8
  %34 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %32, i64 0, i32 0, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %36, label %54, label %37

37:                                               ; preds = %28
  %38 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %33, i64 0, i32 0, i32 0, i32 0
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %40 = icmp eq %"class.WTF::StringImpl"* %35, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %32, i64 0, i32 0
  tail call void @_ZN5blink19SerializeIdentifierERKN3WTF6StringERNS0_13StringBuilderEb(%"class.WTF::String"* dereferenceable(8) %42, %"class.WTF::StringBuilder"* dereferenceable(48) %1, i1 zeroext false) #14
  br label %52

43:                                               ; preds = %37
  %44 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %44) #14
  %45 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %35, %"class.WTF::StringImpl"** %45, align 8
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 1
  %49 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %50 = bitcast i8** %49 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %48, %"class.WTF::StringImpl"** %50, align 8
  %51 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %47, i32* %51, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %7) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %44) #14
  br label %52

52:                                               ; preds = %43, %41
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 124) #14
  %53 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %30, align 8
  br label %54

54:                                               ; preds = %28, %52
  %55 = phi %"class.blink::QualifiedName::QualifiedNameImpl"* [ %31, %28 ], [ %53, %52 ]
  %56 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %55, i64 0, i32 3
  %57 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %58 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %56, i64 0, i32 0, i32 0, i32 0
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %60 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %57, i64 0, i32 0, i32 0, i32 0
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %59, %61
  br i1 %62, label %65, label %63

63:                                               ; preds = %54
  %64 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %56, i64 0, i32 0
  call void @_ZN5blink19SerializeIdentifierERKN3WTF6StringERNS0_13StringBuilderEb(%"class.WTF::String"* dereferenceable(8) %64, %"class.WTF::StringBuilder"* dereferenceable(48) %1, i1 zeroext false) #14
  br label %84

65:                                               ; preds = %54
  %66 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %66) #14
  %67 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %33, i64 0, i32 0, i32 0, i32 0
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %67, align 8
  %69 = icmp eq %"class.WTF::StringImpl"* %68, null
  br i1 %69, label %70, label %74

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  store i8* null, i8** %71, align 8
  %72 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %73 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %72, i64* %73, align 8
  br label %81

74:                                               ; preds = %65
  %75 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %68, %"class.WTF::StringImpl"** %75, align 8
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 1
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 1
  %79 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %80 = bitcast i8** %79 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %78, %"class.WTF::StringImpl"** %80, align 8
  br label %81

81:                                               ; preds = %74, %70
  %82 = phi i32 [ %77, %74 ], [ 0, %70 ]
  %83 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %82, i32* %83, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %6) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %66) #14
  br label %84

84:                                               ; preds = %81, %63, %2
  %85 = icmp eq %"class.blink::CSSSelector"* %0, null
  br i1 %85, label %657, label %86

86:                                               ; preds = %84
  %87 = bitcast %"class.WTF::StringView"* %12 to i8*
  %88 = bitcast %"class.WTF::StringView"* %12 to i64*
  %89 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 1
  %90 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 2
  %91 = bitcast %"class.WTF::StringView"* %14 to i8*
  %92 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %93 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 0
  %94 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 1
  %95 = bitcast i8** %94 to %"class.WTF::StringImpl"**
  %96 = bitcast %"class.WTF::StringView"* %14 to i64*
  %97 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 2
  %98 = bitcast %"class.WTF::AtomicString"* %13 to i8*
  %99 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %13, i64 0, i32 0, i32 0, i32 0
  %100 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %13, i64 0, i32 0
  %101 = bitcast %"class.WTF::StringView"* %8 to i8*
  %102 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  %103 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %104 = bitcast i8** %103 to %"class.WTF::StringImpl"**
  %105 = bitcast %"class.WTF::StringView"* %8 to i64*
  %106 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  %107 = bitcast %"class.WTF::StringView"* %10 to i8*
  %108 = bitcast %"class.WTF::StringView"* %10 to i64*
  %109 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %110 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  %111 = bitcast %"class.WTF::StringView"* %9 to i8*
  %112 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 0
  %113 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 12
  %114 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 2
  %115 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 3
  %116 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 13
  %117 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 11
  %118 = bitcast i8** %114 to i64*
  %119 = ptrtoint i8* %116 to i64
  %120 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  %121 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %122 = bitcast i8** %121 to %"class.WTF::StringImpl"**
  %123 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  %124 = bitcast %"class.WTF::StringView"* %9 to i64*
  %125 = bitcast %"class.WTF::StringView"* %11 to i8*
  %126 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 0
  %127 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 12
  %128 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 2
  %129 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 3
  %130 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 13
  %131 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 11
  %132 = bitcast i8** %128 to i64*
  %133 = ptrtoint i8* %130 to i64
  %134 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 0
  %135 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %136 = bitcast i8** %135 to %"class.WTF::StringImpl"**
  %137 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  %138 = bitcast %"class.WTF::StringView"* %11 to i64*
  %139 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_star_atomE, align 8
  %140 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %139, i64 0, i32 0, i32 0, i32 0
  %141 = bitcast %"class.WTF::StringView"* %3 to i8*
  %142 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  %143 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %144 = bitcast i8** %143 to %"class.WTF::StringImpl"**
  %145 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  %146 = bitcast %"class.WTF::StringView"* %19 to i8*
  %147 = bitcast %"class.WTF::StringView"* %19 to i64*
  %148 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %19, i64 0, i32 1
  %149 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %19, i64 0, i32 2
  %150 = bitcast %"class.WTF::StringView"* %18 to i8*
  %151 = bitcast %"class.WTF::StringView"* %18 to i64*
  %152 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %18, i64 0, i32 1
  %153 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %18, i64 0, i32 2
  %154 = bitcast %"class.WTF::StringView"* %17 to i8*
  %155 = bitcast %"class.WTF::StringView"* %17 to i64*
  %156 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %17, i64 0, i32 1
  %157 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %17, i64 0, i32 2
  %158 = bitcast %"class.WTF::StringView"* %16 to i8*
  %159 = bitcast %"class.WTF::StringView"* %16 to i64*
  %160 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %16, i64 0, i32 1
  %161 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %16, i64 0, i32 2
  %162 = bitcast %"class.WTF::StringView"* %15 to i8*
  %163 = bitcast %"class.WTF::StringView"* %15 to i64*
  %164 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %15, i64 0, i32 1
  %165 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %15, i64 0, i32 2
  %166 = bitcast %"class.WTF::StringView"* %21 to i8*
  %167 = bitcast %"class.WTF::StringView"* %21 to i64*
  %168 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %21, i64 0, i32 1
  %169 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %21, i64 0, i32 2
  %170 = bitcast %"class.WTF::StringView"* %20 to i8*
  %171 = bitcast %"class.WTF::StringView"* %20 to i64*
  %172 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %20, i64 0, i32 1
  %173 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %20, i64 0, i32 2
  %174 = bitcast %"class.WTF::StringView"* %22 to i8*
  %175 = bitcast %"class.WTF::StringView"* %22 to i64*
  %176 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %22, i64 0, i32 1
  %177 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %22, i64 0, i32 2
  %178 = bitcast %"class.WTF::StringView"* %23 to i8*
  %179 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %23, i64 0, i32 0
  %180 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %23, i64 0, i32 1
  %181 = bitcast i8** %180 to %"class.WTF::StringImpl"**
  %182 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %23, i64 0, i32 2
  %183 = bitcast %"class.WTF::StringView"* %23 to i64*
  %184 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 10
  br label %185

185:                                              ; preds = %86, %651
  %186 = phi %"class.blink::CSSSelector"* [ %0, %86 ], [ %654, %651 ]
  %187 = bitcast %"class.blink::CSSSelector"* %186 to i32*
  %188 = load i32, i32* %187, align 8
  %189 = lshr i32 %188, 4
  %190 = and i32 %189, 15
  switch i32 %190, label %505 [
    i32 2, label %191
    i32 3, label %205
    i32 4, label %219
    i32 6, label %219
    i32 5, label %404
  ]

191:                                              ; preds = %185
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 35) #14
  %192 = load i32, i32* %187, align 8
  %193 = and i32 %192, 262144
  %194 = icmp eq i32 %193, 0
  %195 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %186, i64 0, i32 1
  br i1 %194, label %200, label %196

196:                                              ; preds = %191
  %197 = bitcast %"union.blink::CSSSelector::DataUnion"* %195 to %"struct.blink::CSSSelector::RareData"**
  %198 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %197, align 8
  %199 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %198, i64 0, i32 2
  br label %202

200:                                              ; preds = %191
  %201 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %195, i64 0, i32 0
  br label %202

202:                                              ; preds = %196, %200
  %203 = phi %"class.WTF::AtomicString"* [ %199, %196 ], [ %201, %200 ]
  %204 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %203, i64 0, i32 0
  call void @_ZN5blink19SerializeIdentifierERKN3WTF6StringERNS0_13StringBuilderEb(%"class.WTF::String"* dereferenceable(8) %204, %"class.WTF::StringBuilder"* dereferenceable(48) %1, i1 zeroext false) #14
  br label %583

205:                                              ; preds = %185
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 46) #14
  %206 = load i32, i32* %187, align 8
  %207 = and i32 %206, 262144
  %208 = icmp eq i32 %207, 0
  %209 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %186, i64 0, i32 1
  br i1 %208, label %214, label %210

210:                                              ; preds = %205
  %211 = bitcast %"union.blink::CSSSelector::DataUnion"* %209 to %"struct.blink::CSSSelector::RareData"**
  %212 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %211, align 8
  %213 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %212, i64 0, i32 2
  br label %216

214:                                              ; preds = %205
  %215 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %209, i64 0, i32 0
  br label %216

216:                                              ; preds = %210, %214
  %217 = phi %"class.WTF::AtomicString"* [ %213, %210 ], [ %215, %214 ]
  %218 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %217, i64 0, i32 0
  call void @_ZN5blink19SerializeIdentifierERKN3WTF6StringERNS0_13StringBuilderEb(%"class.WTF::String"* dereferenceable(8) %218, %"class.WTF::StringBuilder"* dereferenceable(48) %1, i1 zeroext false) #14
  br label %583

219:                                              ; preds = %185, %185
  %220 = and i32 %188, 65280
  %221 = icmp eq i32 %220, 3840
  br i1 %221, label %247, label %222

222:                                              ; preds = %219
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 58) #14
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %101) #14
  %223 = load i32, i32* %187, align 8
  %224 = and i32 %223, 262144
  %225 = icmp eq i32 %224, 0
  %226 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %186, i64 0, i32 1
  br i1 %225, label %231, label %227

227:                                              ; preds = %222
  %228 = bitcast %"union.blink::CSSSelector::DataUnion"* %226 to %"struct.blink::CSSSelector::RareData"**
  %229 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %228, align 8
  %230 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %229, i64 0, i32 2
  br label %233

231:                                              ; preds = %222
  %232 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %226, i64 0, i32 0
  br label %233

233:                                              ; preds = %227, %231
  %234 = phi %"class.WTF::AtomicString"* [ %230, %227 ], [ %232, %231 ]
  %235 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %234, i64 0, i32 0, i32 0, i32 0
  %236 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %235, align 8
  %237 = icmp eq %"class.WTF::StringImpl"* %236, null
  br i1 %237, label %238, label %240

238:                                              ; preds = %233
  store i8* null, i8** %103, align 8
  %239 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %239, i64* %105, align 8
  br label %244

240:                                              ; preds = %233
  store %"class.WTF::StringImpl"* %236, %"class.WTF::StringImpl"** %102, align 8
  %241 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %236, i64 0, i32 1
  %242 = load i32, i32* %241, align 4
  %243 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %236, i64 1
  store %"class.WTF::StringImpl"* %243, %"class.WTF::StringImpl"** %104, align 8
  br label %244

244:                                              ; preds = %238, %240
  %245 = phi i32 [ %242, %240 ], [ 0, %238 ]
  store i32 %245, i32* %106, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %8)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %101) #14
  %246 = load i32, i32* %187, align 8
  br label %247

247:                                              ; preds = %219, %244
  %248 = phi i32 [ %188, %219 ], [ %246, %244 ]
  %249 = lshr i32 %248, 8
  %250 = trunc i32 %249 to i8
  switch i8 %250, label %583 [
    i8 10, label %251
    i8 12, label %251
    i8 11, label %251
    i8 13, label %251
    i8 108, label %378
    i8 51, label %378
    i8 15, label %390
  ]

251:                                              ; preds = %247, %247, %247, %247
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 40) #14
  %252 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %186, i64 0, i32 1
  %253 = bitcast %"union.blink::CSSSelector::DataUnion"* %252 to %"struct.blink::CSSSelector::RareData"**
  %254 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %253, align 8
  %255 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %254, i64 0, i32 3, i32 0, i32 0
  %256 = load i32, i32* %255, align 8
  %257 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %254, i64 0, i32 3, i32 0, i32 1
  %258 = load i32, i32* %257, align 4
  switch i32 %256, label %321 [
    i32 0, label %259
    i32 1, label %318
    i32 -1, label %319
  ]

259:                                              ; preds = %251
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %111) #14
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %112) #14
  %260 = icmp slt i32 %258, 0
  %261 = sub i32 0, %258
  %262 = select i1 %260, i32 %261, i32 %258
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %112, i8 -86, i64 32, i1 false) #14
  store i8* %113, i8** %114, align 8
  %263 = urem i32 %262, 10
  %264 = udiv i32 %262, 10
  %265 = trunc i32 %263 to i8
  %266 = or i8 %265, 48
  store i8 %266, i8* %113, align 4
  %267 = icmp ugt i32 %262, 9
  br i1 %267, label %268, label %288

268:                                              ; preds = %259
  store i8* %117, i8** %114, align 8
  %269 = urem i32 %264, 10
  %270 = trunc i32 %269 to i8
  %271 = or i8 %270, 48
  store i8 %271, i8* %117, align 1
  %272 = icmp ugt i32 %262, 99
  br i1 %272, label %273, label %288

273:                                              ; preds = %268
  %274 = udiv i32 %262, 100
  store i8* %184, i8** %114, align 8
  %275 = urem i32 %274, 10
  %276 = trunc i32 %275 to i8
  %277 = or i8 %276, 48
  store i8 %277, i8* %184, align 2
  %278 = icmp ugt i32 %262, 999
  br i1 %278, label %279, label %288

279:                                              ; preds = %273, %279
  %280 = phi i32 [ %282, %279 ], [ %274, %273 ]
  %281 = load i8*, i8** %114, align 8
  %282 = udiv i32 %280, 10
  %283 = getelementptr inbounds i8, i8* %281, i64 -1
  store i8* %283, i8** %114, align 8
  %284 = urem i32 %282, 10
  %285 = trunc i32 %284 to i8
  %286 = or i8 %285, 48
  store i8 %286, i8* %283, align 1
  %287 = icmp ugt i32 %280, 99
  br i1 %287, label %279, label %288

288:                                              ; preds = %279, %273, %268, %259
  br i1 %260, label %289, label %292

289:                                              ; preds = %288
  %290 = load i8*, i8** %114, align 8
  %291 = getelementptr inbounds i8, i8* %290, i64 -1
  store i8* %291, i8** %114, align 8
  store i8 45, i8* %291, align 1
  br label %292

292:                                              ; preds = %288, %289
  %293 = load i64, i64* %118, align 8
  %294 = sub i64 %119, %293
  %295 = trunc i64 %294 to i32
  store i32 %295, i32* %115, align 8
  %296 = inttoptr i64 %293 to i8*
  %297 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %296, i32 %295) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %112) #14
  %298 = icmp eq %"class.WTF::StringImpl"* %297, null
  br i1 %298, label %299, label %301

299:                                              ; preds = %292
  store i8* null, i8** %121, align 8
  %300 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %300, i64* %124, align 8
  store i32 0, i32* %123, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %9)
  br label %317

301:                                              ; preds = %292
  store %"class.WTF::StringImpl"* %297, %"class.WTF::StringImpl"** %120, align 8
  %302 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %297, i64 0, i32 1
  %303 = load i32, i32* %302, align 4
  %304 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %297, i64 1
  store %"class.WTF::StringImpl"* %304, %"class.WTF::StringImpl"** %122, align 8
  store i32 %303, i32* %123, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %9)
  %305 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %297, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %306 = load atomic i32, i32* %305 monotonic, align 4
  %307 = and i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %297, i64 0, i32 0
  %310 = load i32, i32* %309, align 4
  br i1 %308, label %311, label %313

311:                                              ; preds = %301
  %312 = add i32 %310, -1
  store i32 %312, i32* %309, align 4
  br label %313

313:                                              ; preds = %311, %301
  %314 = phi i32 [ %312, %311 ], [ %310, %301 ]
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %316, label %317

316:                                              ; preds = %313
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %297) #14
  br label %317

317:                                              ; preds = %299, %313, %316
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %111) #14
  br label %377

318:                                              ; preds = %251
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 110) #14
  br label %322

319:                                              ; preds = %251
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %107) #14
  %320 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %320, i64* %108, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8** %109, align 8
  store i32 2, i32* %110, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %10)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %107) #14
  br label %322

321:                                              ; preds = %251
  call void (%"class.WTF::StringBuilder"*, i8*, ...) @_ZN3WTF13StringBuilder12AppendFormatEPKcz(%"class.WTF::StringBuilder"* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %256) #14
  br label %322

322:                                              ; preds = %319, %321, %318
  %323 = icmp slt i32 %258, 0
  br i1 %323, label %324, label %374

324:                                              ; preds = %322
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %125) #14
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %126) #14
  %325 = sub i32 0, %258
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %126, i8 -86, i64 32, i1 false) #14
  store i8* %127, i8** %128, align 8
  %326 = urem i32 %325, 10
  %327 = udiv i32 %325, 10
  %328 = trunc i32 %326 to i8
  %329 = or i8 %328, 48
  store i8 %329, i8* %127, align 4
  %330 = icmp ugt i32 %325, 9
  br i1 %330, label %331, label %346

331:                                              ; preds = %324
  store i8* %131, i8** %128, align 8
  %332 = urem i32 %327, 10
  %333 = trunc i32 %332 to i8
  %334 = or i8 %333, 48
  store i8 %334, i8* %131, align 1
  %335 = icmp ugt i32 %325, 99
  br i1 %335, label %336, label %346

336:                                              ; preds = %331, %336
  %337 = phi i8* [ %345, %336 ], [ %131, %331 ]
  %338 = phi i32 [ %339, %336 ], [ %327, %331 ]
  %339 = udiv i32 %338, 10
  %340 = getelementptr inbounds i8, i8* %337, i64 -1
  store i8* %340, i8** %128, align 8
  %341 = urem i32 %339, 10
  %342 = trunc i32 %341 to i8
  %343 = or i8 %342, 48
  store i8 %343, i8* %340, align 1
  %344 = icmp ugt i32 %338, 99
  %345 = load i8*, i8** %128, align 8
  br i1 %344, label %336, label %346

346:                                              ; preds = %336, %331, %324
  %347 = phi i8* [ %131, %331 ], [ %127, %324 ], [ %345, %336 ]
  %348 = getelementptr inbounds i8, i8* %347, i64 -1
  store i8* %348, i8** %128, align 8
  store i8 45, i8* %348, align 1
  %349 = load i64, i64* %132, align 8
  %350 = sub i64 %133, %349
  %351 = trunc i64 %350 to i32
  store i32 %351, i32* %129, align 8
  %352 = inttoptr i64 %349 to i8*
  %353 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %352, i32 %351) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %126) #14
  %354 = icmp eq %"class.WTF::StringImpl"* %353, null
  br i1 %354, label %355, label %357

355:                                              ; preds = %346
  store i8* null, i8** %135, align 8
  %356 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %356, i64* %138, align 8
  store i32 0, i32* %137, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %11)
  br label %373

357:                                              ; preds = %346
  store %"class.WTF::StringImpl"* %353, %"class.WTF::StringImpl"** %134, align 8
  %358 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %353, i64 0, i32 1
  %359 = load i32, i32* %358, align 4
  %360 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %353, i64 1
  store %"class.WTF::StringImpl"* %360, %"class.WTF::StringImpl"** %136, align 8
  store i32 %359, i32* %137, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %11)
  %361 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %353, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %362 = load atomic i32, i32* %361 monotonic, align 4
  %363 = and i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %353, i64 0, i32 0
  %366 = load i32, i32* %365, align 4
  br i1 %364, label %367, label %369

367:                                              ; preds = %357
  %368 = add i32 %366, -1
  store i32 %368, i32* %365, align 4
  br label %369

369:                                              ; preds = %367, %357
  %370 = phi i32 [ %368, %367 ], [ %366, %357 ]
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %372, label %373

372:                                              ; preds = %369
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %353) #14
  br label %373

373:                                              ; preds = %355, %369, %372
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %125) #14
  br label %377

374:                                              ; preds = %322
  %375 = icmp eq i32 %258, 0
  br i1 %375, label %377, label %376

376:                                              ; preds = %374
  call void (%"class.WTF::StringBuilder"*, i8*, ...) @_ZN3WTF13StringBuilder12AppendFormatEPKcz(%"class.WTF::StringBuilder"* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %258) #14
  br label %377

377:                                              ; preds = %374, %373, %376, %317
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 41) #14
  br label %583

378:                                              ; preds = %247, %247
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 40) #14
  %379 = load i32, i32* %187, align 8
  %380 = and i32 %379, 262144
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %387, label %382

382:                                              ; preds = %378
  %383 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %186, i64 0, i32 1
  %384 = bitcast %"union.blink::CSSSelector::DataUnion"* %383 to %"struct.blink::CSSSelector::RareData"**
  %385 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %384, align 8
  %386 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %385, i64 0, i32 5
  br label %387

387:                                              ; preds = %378, %382
  %388 = phi %"class.WTF::AtomicString"* [ %386, %382 ], [ %92, %378 ]
  %389 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %388, i64 0, i32 0
  call void @_ZN5blink19SerializeIdentifierERKN3WTF6StringERNS0_13StringBuilderEb(%"class.WTF::String"* dereferenceable(8) %389, %"class.WTF::StringBuilder"* dereferenceable(48) %1, i1 zeroext false) #14
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 41) #14
  br label %583

390:                                              ; preds = %247
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 58) #14
  %391 = load i32, i32* %187, align 8
  %392 = and i32 %391, 262144
  %393 = icmp eq i32 %392, 0
  %394 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %186, i64 0, i32 1
  br i1 %393, label %399, label %395

395:                                              ; preds = %390
  %396 = bitcast %"union.blink::CSSSelector::DataUnion"* %394 to %"struct.blink::CSSSelector::RareData"**
  %397 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %396, align 8
  %398 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %397, i64 0, i32 2
  br label %401

399:                                              ; preds = %390
  %400 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %394, i64 0, i32 0
  br label %401

401:                                              ; preds = %395, %399
  %402 = phi %"class.WTF::AtomicString"* [ %398, %395 ], [ %400, %399 ]
  %403 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %402, i64 0, i32 0
  call void @_ZN5blink19SerializeIdentifierERKN3WTF6StringERNS0_13StringBuilderEb(%"class.WTF::String"* dereferenceable(8) %403, %"class.WTF::StringBuilder"* dereferenceable(48) %1, i1 zeroext false) #14
  br label %583

404:                                              ; preds = %185
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %87) #14
  %405 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %405, i64* %88, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8** %89, align 8
  store i32 2, i32* %90, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %12)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %87) #14
  %406 = load i32, i32* %187, align 8
  %407 = and i32 %406, 262144
  %408 = icmp eq i32 %407, 0
  %409 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %186, i64 0, i32 1
  br i1 %408, label %414, label %410

410:                                              ; preds = %404
  %411 = bitcast %"union.blink::CSSSelector::DataUnion"* %409 to %"struct.blink::CSSSelector::RareData"**
  %412 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %411, align 8
  %413 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %412, i64 0, i32 2
  br label %416

414:                                              ; preds = %404
  %415 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %409, i64 0, i32 0
  br label %416

416:                                              ; preds = %410, %414
  %417 = phi %"class.WTF::AtomicString"* [ %413, %410 ], [ %415, %414 ]
  %418 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %417, i64 0, i32 0
  call void @_ZN5blink19SerializeIdentifierERKN3WTF6StringERNS0_13StringBuilderEb(%"class.WTF::String"* dereferenceable(8) %418, %"class.WTF::StringBuilder"* dereferenceable(48) %1, i1 zeroext false) #14
  %419 = load i32, i32* %187, align 8
  %420 = lshr i32 %419, 8
  %421 = trunc i32 %420 to i8
  switch i8 %421, label %583 [
    i8 14, label %422
    i8 109, label %484
  ]

422:                                              ; preds = %416
  %423 = and i32 %419, 262144
  %424 = icmp eq i32 %423, 0
  br i1 %424, label %430, label %425

425:                                              ; preds = %422
  %426 = bitcast %"union.blink::CSSSelector::DataUnion"* %409 to %"struct.blink::CSSSelector::RareData"**
  %427 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %426, align 8
  %428 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %427, i64 0, i32 7, i32 0, i32 0, i32 0
  %429 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %428, align 8
  br label %430

430:                                              ; preds = %422, %425
  %431 = phi %"class.WTF::Vector"* [ %429, %425 ], [ null, %422 ]
  %432 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %431, i64 0, i32 0, i32 0, i32 0
  %433 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %432, align 8
  %434 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %431, i64 0, i32 0, i32 0, i32 2
  %435 = load i32, i32* %434, align 4
  %436 = zext i32 %435 to i64
  %437 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %433, i64 %436
  %438 = icmp eq i32 %435, 0
  br i1 %438, label %439, label %440

439:                                              ; preds = %481, %430
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 41) #14
  br label %583

440:                                              ; preds = %430, %481
  %441 = phi %"class.WTF::AtomicString"* [ %482, %481 ], [ %433, %430 ]
  %442 = phi i8 [ %465, %481 ], [ 40, %430 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %98) #14
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %99, align 8
  %443 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %441, i64 0, i32 0, i32 0, i32 0
  %444 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %443, align 8
  store %"class.WTF::StringImpl"* %444, %"class.WTF::StringImpl"** %99, align 8
  %445 = icmp eq %"class.WTF::StringImpl"* %444, null
  br i1 %445, label %463, label %446

446:                                              ; preds = %440
  %447 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %444, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %448 = load atomic i32, i32* %447 monotonic, align 4
  %449 = and i32 %448, 2
  %450 = icmp eq i32 %449, 0
  br i1 %450, label %451, label %463

451:                                              ; preds = %446
  %452 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %444, i64 0, i32 0
  %453 = load i32, i32* %452, align 4
  %454 = zext i32 %453 to i33
  %455 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %454, i33 1) #14
  %456 = extractvalue { i33, i1 } %455, 1
  %457 = extractvalue { i33, i1 } %455, 0
  %458 = icmp slt i33 %457, 0
  %459 = or i1 %456, %458
  br i1 %459, label %460, label %461, !prof !4

460:                                              ; preds = %451
  call void @llvm.trap() #14
  unreachable

461:                                              ; preds = %451
  %462 = trunc i33 %457 to i32
  store i32 %462, i32* %452, align 4
  br label %463

463:                                              ; preds = %440, %446, %461
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext %442) #14
  %464 = icmp eq i8 %442, 40
  %465 = select i1 %464, i8 32, i8 %442
  call void @_ZN5blink19SerializeIdentifierERKN3WTF6StringERNS0_13StringBuilderEb(%"class.WTF::String"* nonnull dereferenceable(8) %100, %"class.WTF::StringBuilder"* dereferenceable(48) %1, i1 zeroext false) #14
  %466 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %99, align 8
  %467 = icmp eq %"class.WTF::StringImpl"* %466, null
  br i1 %467, label %481, label %468

468:                                              ; preds = %463
  %469 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %466, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %470 = load atomic i32, i32* %469 monotonic, align 4
  %471 = and i32 %470, 2
  %472 = icmp eq i32 %471, 0
  %473 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %466, i64 0, i32 0
  %474 = load i32, i32* %473, align 4
  br i1 %472, label %475, label %477

475:                                              ; preds = %468
  %476 = add i32 %474, -1
  store i32 %476, i32* %473, align 4
  br label %477

477:                                              ; preds = %475, %468
  %478 = phi i32 [ %476, %475 ], [ %474, %468 ]
  %479 = icmp eq i32 %478, 0
  br i1 %479, label %480, label %481

480:                                              ; preds = %477
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %466) #14
  br label %481

481:                                              ; preds = %463, %477, %480
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %98) #14
  %482 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %441, i64 1
  %483 = icmp eq %"class.WTF::AtomicString"* %482, %437
  br i1 %483, label %439, label %440

484:                                              ; preds = %416
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 40) #14
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %91) #14
  %485 = load i32, i32* %187, align 8
  %486 = and i32 %485, 262144
  %487 = icmp eq i32 %486, 0
  br i1 %487, label %492, label %488

488:                                              ; preds = %484
  %489 = bitcast %"union.blink::CSSSelector::DataUnion"* %409 to %"struct.blink::CSSSelector::RareData"**
  %490 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %489, align 8
  %491 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %490, i64 0, i32 5
  br label %492

492:                                              ; preds = %484, %488
  %493 = phi %"class.WTF::AtomicString"* [ %491, %488 ], [ %92, %484 ]
  %494 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %493, i64 0, i32 0, i32 0, i32 0
  %495 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %494, align 8
  %496 = icmp eq %"class.WTF::StringImpl"* %495, null
  br i1 %496, label %497, label %499

497:                                              ; preds = %492
  store i8* null, i8** %94, align 8
  %498 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %498, i64* %96, align 8
  br label %503

499:                                              ; preds = %492
  store %"class.WTF::StringImpl"* %495, %"class.WTF::StringImpl"** %93, align 8
  %500 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %495, i64 0, i32 1
  %501 = load i32, i32* %500, align 4
  %502 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %495, i64 1
  store %"class.WTF::StringImpl"* %502, %"class.WTF::StringImpl"** %95, align 8
  br label %503

503:                                              ; preds = %497, %499
  %504 = phi i32 [ %501, %499 ], [ 0, %497 ]
  store i32 %504, i32* %97, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %14)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %91) #14
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 41) #14
  br label %583

505:                                              ; preds = %185
  %506 = and i32 %188, 240
  %507 = icmp ugt i32 %506, 96
  br i1 %507, label %508, label %583

508:                                              ; preds = %505
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 91) #14
  %509 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %186, i64 0, i32 1
  %510 = bitcast %"union.blink::CSSSelector::DataUnion"* %509 to %"struct.blink::CSSSelector::RareData"**
  %511 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %510, align 8
  %512 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %511, i64 0, i32 4, i32 0, i32 0
  %513 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %512, align 8
  %514 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %513, i64 0, i32 2
  %515 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %514, i64 0, i32 0, i32 0, i32 0
  %516 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %515, align 8
  %517 = icmp eq %"class.WTF::StringImpl"* %516, null
  br i1 %517, label %538, label %518

518:                                              ; preds = %508
  %519 = load i32, i32* %187, align 8
  %520 = and i32 %519, 240
  %521 = icmp ult i32 %520, 97
  %522 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %516, i64 0, i32 1
  %523 = load i32, i32* %522, align 4
  %524 = icmp ne i32 %523, 0
  %525 = or i1 %524, %521
  br i1 %525, label %526, label %538

526:                                              ; preds = %518
  %527 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %140, align 8
  %528 = icmp eq %"class.WTF::StringImpl"* %516, %527
  br i1 %528, label %531, label %529

529:                                              ; preds = %526
  %530 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %514, i64 0, i32 0
  call void @_ZN5blink19SerializeIdentifierERKN3WTF6StringERNS0_13StringBuilderEb(%"class.WTF::String"* dereferenceable(8) %530, %"class.WTF::StringBuilder"* dereferenceable(48) %1, i1 zeroext false) #14
  br label %534

531:                                              ; preds = %526
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %141) #14
  store %"class.WTF::StringImpl"* %516, %"class.WTF::StringImpl"** %142, align 8
  %532 = load i32, i32* %522, align 4
  %533 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %516, i64 1
  store %"class.WTF::StringImpl"* %533, %"class.WTF::StringImpl"** %144, align 8
  store i32 %532, i32* %145, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %3) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %141) #14
  br label %534

534:                                              ; preds = %531, %529
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 124) #14
  %535 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %510, align 8
  %536 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %535, i64 0, i32 4, i32 0, i32 0
  %537 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %536, align 8
  br label %538

538:                                              ; preds = %508, %518, %534
  %539 = phi %"class.blink::QualifiedName::QualifiedNameImpl"* [ %513, %508 ], [ %513, %518 ], [ %537, %534 ]
  %540 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %539, i64 0, i32 3, i32 0
  call void @_ZN5blink19SerializeIdentifierERKN3WTF6StringERNS0_13StringBuilderEb(%"class.WTF::String"* dereferenceable(8) %540, %"class.WTF::StringBuilder"* dereferenceable(48) %1, i1 zeroext false) #14
  %541 = load i32, i32* %187, align 8
  %542 = lshr i32 %541, 4
  %543 = and i32 %542, 15
  switch i32 %543, label %556 [
    i32 7, label %544
    i32 8, label %545
    i32 10, label %546
    i32 9, label %548
    i32 12, label %550
    i32 13, label %552
    i32 11, label %554
  ]

544:                                              ; preds = %538
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 61) #14
  br label %556

545:                                              ; preds = %538
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 93) #14
  br label %556

546:                                              ; preds = %538
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %162) #14
  %547 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %547, i64* %163, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8** %164, align 8
  store i32 2, i32* %165, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %15)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %162) #14
  br label %556

548:                                              ; preds = %538
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %158) #14
  %549 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %549, i64* %159, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8** %160, align 8
  store i32 2, i32* %161, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %16)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %158) #14
  br label %556

550:                                              ; preds = %538
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %154) #14
  %551 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %551, i64* %155, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8** %156, align 8
  store i32 2, i32* %157, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %17)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %154) #14
  br label %556

552:                                              ; preds = %538
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %150) #14
  %553 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %553, i64* %151, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8** %152, align 8
  store i32 2, i32* %153, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %18)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %150) #14
  br label %556

554:                                              ; preds = %538
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %146) #14
  %555 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %555, i64* %147, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8** %148, align 8
  store i32 2, i32* %149, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %19)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %146) #14
  br label %556

556:                                              ; preds = %538, %554, %552, %550, %548, %546, %545, %544
  %557 = load i32, i32* %187, align 8
  %558 = and i32 %557, 240
  %559 = icmp eq i32 %558, 128
  br i1 %559, label %583, label %560

560:                                              ; preds = %556
  %561 = and i32 %557, 262144
  %562 = icmp eq i32 %561, 0
  br i1 %562, label %566, label %563

563:                                              ; preds = %560
  %564 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %510, align 8
  %565 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %564, i64 0, i32 2
  br label %568

566:                                              ; preds = %560
  %567 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %509, i64 0, i32 0
  br label %568

568:                                              ; preds = %563, %566
  %569 = phi %"class.WTF::AtomicString"* [ %565, %563 ], [ %567, %566 ]
  %570 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %569, i64 0, i32 0
  call void @_ZN5blink15SerializeStringERKN3WTF6StringERNS0_13StringBuilderE(%"class.WTF::String"* dereferenceable(8) %570, %"class.WTF::StringBuilder"* dereferenceable(48) %1) #14
  %571 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %510, align 8
  %572 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %571, i64 0, i32 3, i32 0, i32 0
  %573 = load i32, i32* %572, align 8
  switch i32 %573, label %582 [
    i32 1, label %574
    i32 2, label %576
  ]

574:                                              ; preds = %568
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %170) #14
  %575 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %575, i64* %171, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i8** %172, align 8
  br label %578

576:                                              ; preds = %568
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %166) #14
  %577 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %577, i64* %167, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i8** %168, align 8
  br label %578

578:                                              ; preds = %574, %576
  %579 = phi i32* [ %169, %576 ], [ %173, %574 ]
  %580 = phi %"class.WTF::StringView"* [ %21, %576 ], [ %20, %574 ]
  %581 = phi i8* [ %166, %576 ], [ %170, %574 ]
  store i32 2, i32* %579, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %580)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %581) #14
  br label %582

582:                                              ; preds = %578, %568
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 93) #14
  br label %583

583:                                              ; preds = %556, %216, %416, %503, %439, %582, %505, %377, %387, %401, %247, %202
  %584 = load i32, i32* %187, align 8
  %585 = and i32 %584, 262144
  %586 = icmp eq i32 %585, 0
  br i1 %586, label %647, label %587

587:                                              ; preds = %583
  %588 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %186, i64 0, i32 1
  %589 = bitcast %"union.blink::CSSSelector::DataUnion"* %588 to %"struct.blink::CSSSelector::RareData"**
  %590 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %589, align 8
  %591 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %590, i64 0, i32 6, i32 0, i32 0, i32 0
  %592 = load %"class.blink::CSSSelectorList"*, %"class.blink::CSSSelectorList"** %591, align 8
  %593 = icmp eq %"class.blink::CSSSelectorList"* %592, null
  br i1 %593, label %647, label %594

594:                                              ; preds = %587
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 40) #14
  %595 = load i32, i32* %187, align 8
  %596 = and i32 %595, 262144
  %597 = icmp eq i32 %596, 0
  br i1 %597, label %602, label %598

598:                                              ; preds = %594
  %599 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %589, align 8
  %600 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %599, i64 0, i32 6, i32 0, i32 0, i32 0
  %601 = load %"class.blink::CSSSelectorList"*, %"class.blink::CSSSelectorList"** %600, align 8
  br label %602

602:                                              ; preds = %594, %598
  %603 = phi %"class.blink::CSSSelectorList"* [ %601, %598 ], [ null, %594 ]
  %604 = call %"class.blink::CSSSelector"* @_ZNK5blink15CSSSelectorList13FirstForCSSOMEv(%"class.blink::CSSSelectorList"* %603) #14
  %605 = icmp eq %"class.blink::CSSSelector"* %604, null
  br i1 %605, label %606, label %608

606:                                              ; preds = %642, %602
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* %1, i8 zeroext 41) #14
  %607 = load i32, i32* %187, align 8
  br label %647

608:                                              ; preds = %602, %642
  %609 = phi %"class.blink::CSSSelector"* [ %641, %642 ], [ %604, %602 ]
  %610 = icmp eq %"class.blink::CSSSelector"* %609, %604
  br i1 %610, label %613, label %611

611:                                              ; preds = %608
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %174) #14
  %612 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %612, i64* %175, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i8** %176, align 8
  store i32 2, i32* %177, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %22)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %174) #14
  br label %613

613:                                              ; preds = %608, %611
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %178) #14
  %614 = call %"class.WTF::StringImpl"* @_ZNK5blink11CSSSelector12SelectorTextEv(%"class.blink::CSSSelector"* nonnull %609)
  %615 = icmp eq %"class.WTF::StringImpl"* %614, null
  br i1 %615, label %616, label %618

616:                                              ; preds = %613
  store i8* null, i8** %180, align 8
  %617 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %617, i64* %183, align 8
  store i32 0, i32* %182, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %23)
  br label %634

618:                                              ; preds = %613
  store %"class.WTF::StringImpl"* %614, %"class.WTF::StringImpl"** %179, align 8
  %619 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %614, i64 0, i32 1
  %620 = load i32, i32* %619, align 4
  %621 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %614, i64 1
  store %"class.WTF::StringImpl"* %621, %"class.WTF::StringImpl"** %181, align 8
  store i32 %620, i32* %182, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %23)
  %622 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %614, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %623 = load atomic i32, i32* %622 monotonic, align 4
  %624 = and i32 %623, 2
  %625 = icmp eq i32 %624, 0
  %626 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %614, i64 0, i32 0
  %627 = load i32, i32* %626, align 4
  br i1 %625, label %628, label %630

628:                                              ; preds = %618
  %629 = add i32 %627, -1
  store i32 %629, i32* %626, align 4
  br label %630

630:                                              ; preds = %628, %618
  %631 = phi i32 [ %629, %628 ], [ %627, %618 ]
  %632 = icmp eq i32 %631, 0
  br i1 %632, label %633, label %634

633:                                              ; preds = %630
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %614) #14
  br label %634

634:                                              ; preds = %616, %630, %633
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %178) #14
  br label %635

635:                                              ; preds = %635, %634
  %636 = phi %"class.blink::CSSSelector"* [ %609, %634 ], [ %641, %635 ]
  %637 = bitcast %"class.blink::CSSSelector"* %636 to i32*
  %638 = load i32, i32* %637, align 8
  %639 = and i32 %638, 131072
  %640 = icmp eq i32 %639, 0
  %641 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %636, i64 1
  br i1 %640, label %635, label %642

642:                                              ; preds = %635
  %643 = and i32 %638, 2097152
  %644 = icmp ne i32 %643, 0
  %645 = icmp eq %"class.blink::CSSSelector"* %641, null
  %646 = or i1 %645, %644
  br i1 %646, label %606, label %608

647:                                              ; preds = %583, %587, %606
  %648 = phi i32 [ %584, %583 ], [ %584, %587 ], [ %607, %606 ]
  %649 = and i32 %648, 15
  %650 = icmp eq i32 %649, 0
  br i1 %650, label %651, label %657

651:                                              ; preds = %647
  %652 = and i32 %648, 131072
  %653 = icmp ne i32 %652, 0
  %654 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %186, i64 1
  %655 = icmp eq %"class.blink::CSSSelector"* %654, null
  %656 = or i1 %655, %653
  br i1 %656, label %657, label %185

657:                                              ; preds = %647, %651, %84
  %658 = phi %"class.blink::CSSSelector"* [ null, %84 ], [ null, %651 ], [ %186, %647 ]
  ret %"class.blink::CSSSelector"* %658
}

declare void @_ZN5blink19SerializeIdentifierERKN3WTF6StringERNS0_13StringBuilderEb(%"class.WTF::String"* dereferenceable(8), %"class.WTF::StringBuilder"* dereferenceable(48), i1 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %81, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  %10 = bitcast %"class.WTF::StringImpl"* %9 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, %10
  %14 = bitcast i8* %12 to i16*
  br i1 %13, label %15, label %20

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %4, %17
  %19 = select i1 %18, %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"* null
  br label %20

20:                                               ; preds = %6, %15
  %21 = phi %"class.WTF::StringImpl"* [ %19, %15 ], [ null, %6 ]
  %22 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %74

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %27 = load i8, i8* %26, align 1, !range !3
  %28 = icmp eq i8 %27, 0
  %29 = icmp ne %"class.WTF::StringImpl"* %21, null
  %30 = and i1 %29, %28
  br i1 %30, label %31, label %74

31:                                               ; preds = %25
  %32 = ptrtoint %"class.WTF::StringImpl"* %21 to i64
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %49

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i33
  %41 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %40, i33 1) #14
  %42 = extractvalue { i33, i1 } %41, 1
  %43 = extractvalue { i33, i1 } %41, 0
  %44 = icmp slt i33 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %46, label %47, !prof !4

46:                                               ; preds = %37
  tail call void @llvm.trap() #14
  unreachable

47:                                               ; preds = %37
  %48 = trunc i33 %43 to i32
  store i32 %48, i32* %38, align 4
  br label %49

49:                                               ; preds = %31, %47
  %50 = bitcast %"class.WTF::StringBuilder"* %0 to i64*
  %51 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 0, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  store i64 %32, i64* %50, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %67, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %52) #14
  br label %67

67:                                               ; preds = %66, %63, %49
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  store i32 %69, i32* %22, align 8
  %70 = load atomic i32, i32* %33 monotonic, align 4
  %71 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %72 = trunc i32 %70 to i8
  %73 = and i8 %72, 1
  store i8 %73, i8* %71, align 4
  br label %81

74:                                               ; preds = %20, %25
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %80, label %79

79:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* %0, i8* %12, i32 %4) #14
  br label %81

80:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"* %0, i16* %14, i32 %4) #14
  br label %81

81:                                               ; preds = %67, %80, %79, %2
  ret void
}

declare void @_ZN3WTF13StringBuilder12AppendFormatEPKcz(%"class.WTF::StringBuilder"*, i8*, ...) local_unnamed_addr #5

declare void @_ZN5blink15SerializeStringERKN3WTF6StringERNS0_13StringBuilderE(%"class.WTF::String"* dereferenceable(8), %"class.WTF::StringBuilder"* dereferenceable(48)) local_unnamed_addr #5

declare %"class.blink::CSSSelector"* @_ZNK5blink15CSSSelectorList13FirstForCSSOMEv(%"class.blink::CSSSelectorList"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink11CSSSelector12SelectorTextEv(%"class.blink::CSSSelector"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::StringBuilder", align 8
  %3 = alloca %"class.WTF::StringAppend", align 8
  %4 = alloca %"class.WTF::String", align 8
  %5 = alloca %"class.WTF::StringAppend.628", align 8
  %6 = alloca %"class.WTF::StringAppend.629", align 8
  %7 = alloca %"class.WTF::StringAppend.628", align 8
  %8 = alloca %"class.WTF::StringAppend.629", align 8
  %9 = alloca %"class.WTF::StringAppend.628", align 8
  %10 = alloca %"class.WTF::StringAppend.629", align 8
  %11 = alloca %"class.WTF::StringAppend.628", align 8
  %12 = alloca %"class.WTF::StringAppend.629", align 8
  %13 = alloca %"class.WTF::StringAppend", align 8
  %14 = alloca %"class.WTF::String", align 8
  %15 = icmp eq %"class.blink::CSSSelector"* %0, null
  br i1 %15, label %858, label %16

16:                                               ; preds = %1
  %17 = bitcast %"class.WTF::StringBuilder"* %2 to i8*
  %18 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 1
  %20 = bitcast %union.anon.617* %19 to i8*
  %21 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 2
  %22 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 3
  %23 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 4
  %24 = bitcast %"class.WTF::StringAppend"* %13 to i8*
  %25 = bitcast %"class.WTF::String"* %14 to i8*
  %26 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %14, i64 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %13, i64 0, i32 1, i32 0, i32 0
  %29 = bitcast %"class.WTF::StringAppend.628"* %11 to i8*
  %30 = bitcast %"class.WTF::StringAppend.629"* %12 to i8*
  %31 = getelementptr inbounds %"class.WTF::StringAppend.629", %"class.WTF::StringAppend.629"* %12, i64 0, i32 0
  %32 = getelementptr inbounds %"class.WTF::StringAppend.629", %"class.WTF::StringAppend.629"* %12, i64 0, i32 1, i32 0, i32 0
  %33 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %11, i64 0, i32 1, i32 0, i32 0
  %34 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %11, i64 0, i32 0, i32 1, i32 0, i32 0
  %35 = bitcast %"class.WTF::StringAppend.628"* %9 to i8*
  %36 = bitcast %"class.WTF::StringAppend.629"* %10 to i8*
  %37 = getelementptr inbounds %"class.WTF::StringAppend.629", %"class.WTF::StringAppend.629"* %10, i64 0, i32 0
  %38 = getelementptr inbounds %"class.WTF::StringAppend.629", %"class.WTF::StringAppend.629"* %10, i64 0, i32 1, i32 0, i32 0
  %39 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %9, i64 0, i32 1, i32 0, i32 0
  %40 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  %41 = bitcast %"class.WTF::StringAppend.628"* %7 to i8*
  %42 = bitcast %"class.WTF::StringAppend.629"* %8 to i8*
  %43 = getelementptr inbounds %"class.WTF::StringAppend.629", %"class.WTF::StringAppend.629"* %8, i64 0, i32 0
  %44 = getelementptr inbounds %"class.WTF::StringAppend.629", %"class.WTF::StringAppend.629"* %8, i64 0, i32 1, i32 0, i32 0
  %45 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %7, i64 0, i32 1, i32 0, i32 0
  %46 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %7, i64 0, i32 0, i32 1, i32 0, i32 0
  %47 = bitcast %"class.WTF::StringAppend.628"* %5 to i8*
  %48 = bitcast %"class.WTF::StringAppend.629"* %6 to i8*
  %49 = getelementptr inbounds %"class.WTF::StringAppend.629", %"class.WTF::StringAppend.629"* %6, i64 0, i32 0
  %50 = getelementptr inbounds %"class.WTF::StringAppend.629", %"class.WTF::StringAppend.629"* %6, i64 0, i32 1, i32 0, i32 0
  %51 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %5, i64 0, i32 1, i32 0, i32 0
  %52 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  %53 = bitcast %"class.WTF::StringAppend"* %3 to i8*
  %54 = bitcast %"class.WTF::String"* %4 to i8*
  %55 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %56 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %3, i64 0, i32 0, i32 0, i32 0
  %57 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %3, i64 0, i32 1, i32 0, i32 0
  br label %58

58:                                               ; preds = %16, %833
  %59 = phi %"class.blink::CSSSelector"* [ %0, %16 ], [ %838, %833 ]
  %60 = phi i64 [ undef, %16 ], [ %814, %833 ]
  %61 = phi i64 [ 0, %16 ], [ %813, %833 ]
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %17) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 48, i1 false)
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %18, align 8
  store i8 0, i8* %20, align 8
  store i32 0, i32* %21, align 8
  store i8 1, i8* %22, align 4
  store i8 0, i8* %23, align 1
  %62 = call %"class.blink::CSSSelector"* @_ZNK5blink11CSSSelector17SerializeCompoundERN3WTF13StringBuilderE(%"class.blink::CSSSelector"* nonnull %59, %"class.WTF::StringBuilder"* nonnull dereferenceable(48) %2)
  %63 = icmp eq %"class.blink::CSSSelector"* %62, null
  br i1 %63, label %64, label %139

64:                                               ; preds = %58
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53) #14
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %54) #14
  %65 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %2) #14
  store %"class.WTF::StringImpl"* %65, %"class.WTF::StringImpl"** %55, align 8
  %66 = inttoptr i64 %61 to %"class.WTF::StringImpl"*
  %67 = icmp eq i64 %61, 0
  br i1 %67, label %85, label %68

68:                                               ; preds = %64
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = and i32 %70, 2
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %85

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 0
  %75 = load i32, i32* %74, align 4
  %76 = zext i32 %75 to i33
  %77 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %76, i33 1) #14
  %78 = extractvalue { i33, i1 } %77, 1
  %79 = extractvalue { i33, i1 } %77, 0
  %80 = icmp slt i33 %79, 0
  %81 = or i1 %78, %80
  br i1 %81, label %82, label %83, !prof !4

82:                                               ; preds = %73
  call void @llvm.trap() #14
  unreachable

83:                                               ; preds = %73
  %84 = trunc i33 %79 to i32
  store i32 %84, i32* %74, align 4
  br label %85

85:                                               ; preds = %64, %68, %83
  %86 = call { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } @_ZN3WTFplINS_6StringEEENS_12StringAppendIS1_T_EERKS1_S3_(%"class.WTF::String"* nonnull dereferenceable(8) %4, %"class.WTF::StringImpl"* %66)
  %87 = extractvalue { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } %86, 0
  store %"class.WTF::StringImpl"* %87, %"class.WTF::StringImpl"** %56, align 8
  %88 = extractvalue { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } %86, 1
  store %"class.WTF::StringImpl"* %88, %"class.WTF::StringImpl"** %57, align 8
  %89 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS_6StringES1_EcvS1_Ev(%"class.WTF::StringAppend"* nonnull %3)
  %90 = ptrtoint %"class.WTF::StringImpl"* %89 to i64
  %91 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  %92 = icmp eq %"class.WTF::StringImpl"* %91, null
  br i1 %92, label %106, label %93

93:                                               ; preds = %85
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %95 = load atomic i32, i32* %94 monotonic, align 4
  %96 = and i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 0
  %99 = load i32, i32* %98, align 4
  br i1 %97, label %100, label %102

100:                                              ; preds = %93
  %101 = add i32 %99, -1
  store i32 %101, i32* %98, align 4
  br label %102

102:                                              ; preds = %100, %93
  %103 = phi i32 [ %101, %100 ], [ %99, %93 ]
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %102
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %91) #14
  br label %106

106:                                              ; preds = %105, %102, %85
  %107 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %56, align 8
  %108 = icmp eq %"class.WTF::StringImpl"* %107, null
  br i1 %108, label %122, label %109

109:                                              ; preds = %106
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = load atomic i32, i32* %110 monotonic, align 4
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  br i1 %113, label %116, label %118

116:                                              ; preds = %109
  %117 = add i32 %115, -1
  store i32 %117, i32* %114, align 4
  br label %118

118:                                              ; preds = %116, %109
  %119 = phi i32 [ %117, %116 ], [ %115, %109 ]
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %122

121:                                              ; preds = %118
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %107) #14
  br label %122

122:                                              ; preds = %106, %118, %121
  %123 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %124 = icmp eq %"class.WTF::StringImpl"* %123, null
  br i1 %124, label %138, label %125

125:                                              ; preds = %122
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = and i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 0
  %131 = load i32, i32* %130, align 4
  br i1 %129, label %132, label %134

132:                                              ; preds = %125
  %133 = add i32 %131, -1
  store i32 %133, i32* %130, align 4
  br label %134

134:                                              ; preds = %132, %125
  %135 = phi i32 [ %133, %132 ], [ %131, %125 ]
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %138

137:                                              ; preds = %134
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %123) #14
  br label %138

138:                                              ; preds = %122, %134, %137
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %54) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #14
  br label %812

139:                                              ; preds = %58
  %140 = bitcast %"class.blink::CSSSelector"* %62 to i32*
  %141 = load i32, i32* %140, align 8
  %142 = and i32 %141, 15
  switch i32 %142, label %812 [
    i32 1, label %143
    i32 2, label %288
    i32 3, label %433
    i32 4, label %578
    i32 6, label %723
    i32 7, label %723
    i32 5, label %723
  ]

143:                                              ; preds = %139
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %47) #14
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %48) #14
  %144 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %2) #14
  %145 = icmp eq %"class.WTF::StringImpl"* %144, null
  br i1 %145, label %189, label %146

146:                                              ; preds = %143
  %147 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = load atomic i32, i32* %147 monotonic, align 4
  %149 = and i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 0
  %152 = load i32, i32* %151, align 4
  br i1 %150, label %153, label %163

153:                                              ; preds = %146
  %154 = zext i32 %152 to i33
  %155 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %154, i33 1) #14
  %156 = extractvalue { i33, i1 } %155, 1
  %157 = extractvalue { i33, i1 } %155, 0
  %158 = icmp slt i33 %157, 0
  %159 = or i1 %156, %158
  br i1 %159, label %160, label %161, !prof !4

160:                                              ; preds = %153
  call void @llvm.trap() #14
  unreachable

161:                                              ; preds = %153
  %162 = trunc i33 %157 to i32
  store i32 %162, i32* %151, align 4
  br label %163

163:                                              ; preds = %161, %146
  %164 = phi i32 [ %162, %161 ], [ %152, %146 ]
  %165 = load atomic i32, i32* %147 monotonic, align 4
  %166 = and i32 %165, 2
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %178

168:                                              ; preds = %163
  %169 = zext i32 %164 to i33
  %170 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %169, i33 1) #14
  %171 = extractvalue { i33, i1 } %170, 1
  %172 = extractvalue { i33, i1 } %170, 0
  %173 = icmp slt i33 %172, 0
  %174 = or i1 %171, %173
  br i1 %174, label %175, label %176, !prof !4

175:                                              ; preds = %168
  call void @llvm.trap() #14
  unreachable

176:                                              ; preds = %168
  %177 = trunc i33 %172 to i32
  store i32 %177, i32* %151, align 4
  br label %178

178:                                              ; preds = %176, %163
  %179 = phi i32 [ %177, %176 ], [ %164, %163 ]
  %180 = load atomic i32, i32* %147 monotonic, align 4
  %181 = and i32 %180, 2
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %185

183:                                              ; preds = %178
  %184 = add i32 %179, -1
  store i32 %184, i32* %151, align 4
  br label %185

185:                                              ; preds = %183, %178
  %186 = phi i32 [ %184, %183 ], [ %179, %178 ]
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %189

188:                                              ; preds = %185
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %144) #14
  br label %189

189:                                              ; preds = %143, %185, %188
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0), i8** %49, align 8
  store %"class.WTF::StringImpl"* %144, %"class.WTF::StringImpl"** %50, align 8
  %190 = inttoptr i64 %61 to %"class.WTF::StringImpl"*
  %191 = icmp eq i64 %61, 0
  br i1 %191, label %209, label %192

192:                                              ; preds = %189
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %190, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %194 = load atomic i32, i32* %193 monotonic, align 4
  %195 = and i32 %194, 2
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %209

197:                                              ; preds = %192
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %190, i64 0, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = zext i32 %199 to i33
  %201 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %200, i33 1) #14
  %202 = extractvalue { i33, i1 } %201, 1
  %203 = extractvalue { i33, i1 } %201, 0
  %204 = icmp slt i33 %203, 0
  %205 = or i1 %202, %204
  br i1 %205, label %206, label %207, !prof !4

206:                                              ; preds = %197
  call void @llvm.trap() #14
  unreachable

207:                                              ; preds = %197
  %208 = trunc i33 %203 to i32
  store i32 %208, i32* %198, align 4
  br label %209

209:                                              ; preds = %189, %192, %207
  call void @_ZN3WTFplIPKcNS_6StringES3_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_(%"class.WTF::StringAppend.628"* nonnull sret %5, %"class.WTF::StringAppend.629"* nonnull dereferenceable(16) %6, %"class.WTF::StringImpl"* %190)
  %210 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_EcvS3_Ev(%"class.WTF::StringAppend.628"* nonnull %5)
  %211 = ptrtoint %"class.WTF::StringImpl"* %210 to i64
  br i1 %191, label %225, label %212

212:                                              ; preds = %209
  %213 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %190, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %214 = load atomic i32, i32* %213 monotonic, align 4
  %215 = and i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %190, i64 0, i32 0
  %218 = load i32, i32* %217, align 4
  br i1 %216, label %219, label %221

219:                                              ; preds = %212
  %220 = add i32 %218, -1
  store i32 %220, i32* %217, align 4
  br label %221

221:                                              ; preds = %219, %212
  %222 = phi i32 [ %220, %219 ], [ %218, %212 ]
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %224, label %225

224:                                              ; preds = %221
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %190) #14
  br label %225

225:                                              ; preds = %224, %221, %209
  %226 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  %227 = icmp eq %"class.WTF::StringImpl"* %226, null
  br i1 %227, label %241, label %228

228:                                              ; preds = %225
  %229 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %226, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %230 = load atomic i32, i32* %229 monotonic, align 4
  %231 = and i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %226, i64 0, i32 0
  %234 = load i32, i32* %233, align 4
  br i1 %232, label %235, label %237

235:                                              ; preds = %228
  %236 = add i32 %234, -1
  store i32 %236, i32* %233, align 4
  br label %237

237:                                              ; preds = %235, %228
  %238 = phi i32 [ %236, %235 ], [ %234, %228 ]
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %241

240:                                              ; preds = %237
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %226) #14
  br label %241

241:                                              ; preds = %240, %237, %225
  %242 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %52, align 8
  %243 = icmp eq %"class.WTF::StringImpl"* %242, null
  br i1 %243, label %257, label %244

244:                                              ; preds = %241
  %245 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %242, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %246 = load atomic i32, i32* %245 monotonic, align 4
  %247 = and i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %242, i64 0, i32 0
  %250 = load i32, i32* %249, align 4
  br i1 %248, label %251, label %253

251:                                              ; preds = %244
  %252 = add i32 %250, -1
  store i32 %252, i32* %249, align 4
  br label %253

253:                                              ; preds = %251, %244
  %254 = phi i32 [ %252, %251 ], [ %250, %244 ]
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %256, label %257

256:                                              ; preds = %253
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %242) #14
  br label %257

257:                                              ; preds = %241, %253, %256
  %258 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  %259 = icmp eq %"class.WTF::StringImpl"* %258, null
  br i1 %259, label %273, label %260

260:                                              ; preds = %257
  %261 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %258, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %262 = load atomic i32, i32* %261 monotonic, align 4
  %263 = and i32 %262, 2
  %264 = icmp eq i32 %263, 0
  %265 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %258, i64 0, i32 0
  %266 = load i32, i32* %265, align 4
  br i1 %264, label %267, label %269

267:                                              ; preds = %260
  %268 = add i32 %266, -1
  store i32 %268, i32* %265, align 4
  br label %269

269:                                              ; preds = %267, %260
  %270 = phi i32 [ %268, %267 ], [ %266, %260 ]
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %272, label %273

272:                                              ; preds = %269
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %258) #14
  br label %273

273:                                              ; preds = %257, %269, %272
  br i1 %145, label %287, label %274

274:                                              ; preds = %273
  %275 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %276 = load atomic i32, i32* %275 monotonic, align 4
  %277 = and i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 0
  %280 = load i32, i32* %279, align 4
  br i1 %278, label %281, label %283

281:                                              ; preds = %274
  %282 = add i32 %280, -1
  store i32 %282, i32* %279, align 4
  br label %283

283:                                              ; preds = %281, %274
  %284 = phi i32 [ %282, %281 ], [ %280, %274 ]
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %286, label %287

286:                                              ; preds = %283
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %144) #14
  br label %287

287:                                              ; preds = %273, %283, %286
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %48) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %47) #14
  br label %812

288:                                              ; preds = %139
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %41) #14
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %42) #14
  %289 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %2) #14
  %290 = icmp eq %"class.WTF::StringImpl"* %289, null
  br i1 %290, label %334, label %291

291:                                              ; preds = %288
  %292 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %289, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %293 = load atomic i32, i32* %292 monotonic, align 4
  %294 = and i32 %293, 2
  %295 = icmp eq i32 %294, 0
  %296 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %289, i64 0, i32 0
  %297 = load i32, i32* %296, align 4
  br i1 %295, label %298, label %308

298:                                              ; preds = %291
  %299 = zext i32 %297 to i33
  %300 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %299, i33 1) #14
  %301 = extractvalue { i33, i1 } %300, 1
  %302 = extractvalue { i33, i1 } %300, 0
  %303 = icmp slt i33 %302, 0
  %304 = or i1 %301, %303
  br i1 %304, label %305, label %306, !prof !4

305:                                              ; preds = %298
  call void @llvm.trap() #14
  unreachable

306:                                              ; preds = %298
  %307 = trunc i33 %302 to i32
  store i32 %307, i32* %296, align 4
  br label %308

308:                                              ; preds = %306, %291
  %309 = phi i32 [ %307, %306 ], [ %297, %291 ]
  %310 = load atomic i32, i32* %292 monotonic, align 4
  %311 = and i32 %310, 2
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %313, label %323

313:                                              ; preds = %308
  %314 = zext i32 %309 to i33
  %315 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %314, i33 1) #14
  %316 = extractvalue { i33, i1 } %315, 1
  %317 = extractvalue { i33, i1 } %315, 0
  %318 = icmp slt i33 %317, 0
  %319 = or i1 %316, %318
  br i1 %319, label %320, label %321, !prof !4

320:                                              ; preds = %313
  call void @llvm.trap() #14
  unreachable

321:                                              ; preds = %313
  %322 = trunc i33 %317 to i32
  store i32 %322, i32* %296, align 4
  br label %323

323:                                              ; preds = %321, %308
  %324 = phi i32 [ %322, %321 ], [ %309, %308 ]
  %325 = load atomic i32, i32* %292 monotonic, align 4
  %326 = and i32 %325, 2
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %328, label %330

328:                                              ; preds = %323
  %329 = add i32 %324, -1
  store i32 %329, i32* %296, align 4
  br label %330

330:                                              ; preds = %328, %323
  %331 = phi i32 [ %329, %328 ], [ %324, %323 ]
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %333, label %334

333:                                              ; preds = %330
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %289) #14
  br label %334

334:                                              ; preds = %288, %330, %333
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i8** %43, align 8
  store %"class.WTF::StringImpl"* %289, %"class.WTF::StringImpl"** %44, align 8
  %335 = inttoptr i64 %61 to %"class.WTF::StringImpl"*
  %336 = icmp eq i64 %61, 0
  br i1 %336, label %354, label %337

337:                                              ; preds = %334
  %338 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %335, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %339 = load atomic i32, i32* %338 monotonic, align 4
  %340 = and i32 %339, 2
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %342, label %354

342:                                              ; preds = %337
  %343 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %335, i64 0, i32 0
  %344 = load i32, i32* %343, align 4
  %345 = zext i32 %344 to i33
  %346 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %345, i33 1) #14
  %347 = extractvalue { i33, i1 } %346, 1
  %348 = extractvalue { i33, i1 } %346, 0
  %349 = icmp slt i33 %348, 0
  %350 = or i1 %347, %349
  br i1 %350, label %351, label %352, !prof !4

351:                                              ; preds = %342
  call void @llvm.trap() #14
  unreachable

352:                                              ; preds = %342
  %353 = trunc i33 %348 to i32
  store i32 %353, i32* %343, align 4
  br label %354

354:                                              ; preds = %334, %337, %352
  call void @_ZN3WTFplIPKcNS_6StringES3_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_(%"class.WTF::StringAppend.628"* nonnull sret %7, %"class.WTF::StringAppend.629"* nonnull dereferenceable(16) %8, %"class.WTF::StringImpl"* %335)
  %355 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_EcvS3_Ev(%"class.WTF::StringAppend.628"* nonnull %7)
  %356 = ptrtoint %"class.WTF::StringImpl"* %355 to i64
  br i1 %336, label %370, label %357

357:                                              ; preds = %354
  %358 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %335, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %359 = load atomic i32, i32* %358 monotonic, align 4
  %360 = and i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %335, i64 0, i32 0
  %363 = load i32, i32* %362, align 4
  br i1 %361, label %364, label %366

364:                                              ; preds = %357
  %365 = add i32 %363, -1
  store i32 %365, i32* %362, align 4
  br label %366

366:                                              ; preds = %364, %357
  %367 = phi i32 [ %365, %364 ], [ %363, %357 ]
  %368 = icmp eq i32 %367, 0
  br i1 %368, label %369, label %370

369:                                              ; preds = %366
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %335) #14
  br label %370

370:                                              ; preds = %369, %366, %354
  %371 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %372 = icmp eq %"class.WTF::StringImpl"* %371, null
  br i1 %372, label %386, label %373

373:                                              ; preds = %370
  %374 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %371, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %375 = load atomic i32, i32* %374 monotonic, align 4
  %376 = and i32 %375, 2
  %377 = icmp eq i32 %376, 0
  %378 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %371, i64 0, i32 0
  %379 = load i32, i32* %378, align 4
  br i1 %377, label %380, label %382

380:                                              ; preds = %373
  %381 = add i32 %379, -1
  store i32 %381, i32* %378, align 4
  br label %382

382:                                              ; preds = %380, %373
  %383 = phi i32 [ %381, %380 ], [ %379, %373 ]
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %385, label %386

385:                                              ; preds = %382
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %371) #14
  br label %386

386:                                              ; preds = %385, %382, %370
  %387 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  %388 = icmp eq %"class.WTF::StringImpl"* %387, null
  br i1 %388, label %402, label %389

389:                                              ; preds = %386
  %390 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %387, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %391 = load atomic i32, i32* %390 monotonic, align 4
  %392 = and i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %387, i64 0, i32 0
  %395 = load i32, i32* %394, align 4
  br i1 %393, label %396, label %398

396:                                              ; preds = %389
  %397 = add i32 %395, -1
  store i32 %397, i32* %394, align 4
  br label %398

398:                                              ; preds = %396, %389
  %399 = phi i32 [ %397, %396 ], [ %395, %389 ]
  %400 = icmp eq i32 %399, 0
  br i1 %400, label %401, label %402

401:                                              ; preds = %398
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %387) #14
  br label %402

402:                                              ; preds = %386, %398, %401
  %403 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8
  %404 = icmp eq %"class.WTF::StringImpl"* %403, null
  br i1 %404, label %418, label %405

405:                                              ; preds = %402
  %406 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %403, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %407 = load atomic i32, i32* %406 monotonic, align 4
  %408 = and i32 %407, 2
  %409 = icmp eq i32 %408, 0
  %410 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %403, i64 0, i32 0
  %411 = load i32, i32* %410, align 4
  br i1 %409, label %412, label %414

412:                                              ; preds = %405
  %413 = add i32 %411, -1
  store i32 %413, i32* %410, align 4
  br label %414

414:                                              ; preds = %412, %405
  %415 = phi i32 [ %413, %412 ], [ %411, %405 ]
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %417, label %418

417:                                              ; preds = %414
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %403) #14
  br label %418

418:                                              ; preds = %402, %414, %417
  br i1 %290, label %432, label %419

419:                                              ; preds = %418
  %420 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %289, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %421 = load atomic i32, i32* %420 monotonic, align 4
  %422 = and i32 %421, 2
  %423 = icmp eq i32 %422, 0
  %424 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %289, i64 0, i32 0
  %425 = load i32, i32* %424, align 4
  br i1 %423, label %426, label %428

426:                                              ; preds = %419
  %427 = add i32 %425, -1
  store i32 %427, i32* %424, align 4
  br label %428

428:                                              ; preds = %426, %419
  %429 = phi i32 [ %427, %426 ], [ %425, %419 ]
  %430 = icmp eq i32 %429, 0
  br i1 %430, label %431, label %432

431:                                              ; preds = %428
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %289) #14
  br label %432

432:                                              ; preds = %418, %428, %431
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %42) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %41) #14
  br label %812

433:                                              ; preds = %139
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #14
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %36) #14
  %434 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %2) #14
  %435 = icmp eq %"class.WTF::StringImpl"* %434, null
  br i1 %435, label %479, label %436

436:                                              ; preds = %433
  %437 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %434, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %438 = load atomic i32, i32* %437 monotonic, align 4
  %439 = and i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %434, i64 0, i32 0
  %442 = load i32, i32* %441, align 4
  br i1 %440, label %443, label %453

443:                                              ; preds = %436
  %444 = zext i32 %442 to i33
  %445 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %444, i33 1) #14
  %446 = extractvalue { i33, i1 } %445, 1
  %447 = extractvalue { i33, i1 } %445, 0
  %448 = icmp slt i33 %447, 0
  %449 = or i1 %446, %448
  br i1 %449, label %450, label %451, !prof !4

450:                                              ; preds = %443
  call void @llvm.trap() #14
  unreachable

451:                                              ; preds = %443
  %452 = trunc i33 %447 to i32
  store i32 %452, i32* %441, align 4
  br label %453

453:                                              ; preds = %451, %436
  %454 = phi i32 [ %452, %451 ], [ %442, %436 ]
  %455 = load atomic i32, i32* %437 monotonic, align 4
  %456 = and i32 %455, 2
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %458, label %468

458:                                              ; preds = %453
  %459 = zext i32 %454 to i33
  %460 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %459, i33 1) #14
  %461 = extractvalue { i33, i1 } %460, 1
  %462 = extractvalue { i33, i1 } %460, 0
  %463 = icmp slt i33 %462, 0
  %464 = or i1 %461, %463
  br i1 %464, label %465, label %466, !prof !4

465:                                              ; preds = %458
  call void @llvm.trap() #14
  unreachable

466:                                              ; preds = %458
  %467 = trunc i33 %462 to i32
  store i32 %467, i32* %441, align 4
  br label %468

468:                                              ; preds = %466, %453
  %469 = phi i32 [ %467, %466 ], [ %454, %453 ]
  %470 = load atomic i32, i32* %437 monotonic, align 4
  %471 = and i32 %470, 2
  %472 = icmp eq i32 %471, 0
  br i1 %472, label %473, label %475

473:                                              ; preds = %468
  %474 = add i32 %469, -1
  store i32 %474, i32* %441, align 4
  br label %475

475:                                              ; preds = %473, %468
  %476 = phi i32 [ %474, %473 ], [ %469, %468 ]
  %477 = icmp eq i32 %476, 0
  br i1 %477, label %478, label %479

478:                                              ; preds = %475
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %434) #14
  br label %479

479:                                              ; preds = %433, %475, %478
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0), i8** %37, align 8
  store %"class.WTF::StringImpl"* %434, %"class.WTF::StringImpl"** %38, align 8
  %480 = inttoptr i64 %61 to %"class.WTF::StringImpl"*
  %481 = icmp eq i64 %61, 0
  br i1 %481, label %499, label %482

482:                                              ; preds = %479
  %483 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %480, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %484 = load atomic i32, i32* %483 monotonic, align 4
  %485 = and i32 %484, 2
  %486 = icmp eq i32 %485, 0
  br i1 %486, label %487, label %499

487:                                              ; preds = %482
  %488 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %480, i64 0, i32 0
  %489 = load i32, i32* %488, align 4
  %490 = zext i32 %489 to i33
  %491 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %490, i33 1) #14
  %492 = extractvalue { i33, i1 } %491, 1
  %493 = extractvalue { i33, i1 } %491, 0
  %494 = icmp slt i33 %493, 0
  %495 = or i1 %492, %494
  br i1 %495, label %496, label %497, !prof !4

496:                                              ; preds = %487
  call void @llvm.trap() #14
  unreachable

497:                                              ; preds = %487
  %498 = trunc i33 %493 to i32
  store i32 %498, i32* %488, align 4
  br label %499

499:                                              ; preds = %479, %482, %497
  call void @_ZN3WTFplIPKcNS_6StringES3_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_(%"class.WTF::StringAppend.628"* nonnull sret %9, %"class.WTF::StringAppend.629"* nonnull dereferenceable(16) %10, %"class.WTF::StringImpl"* %480)
  %500 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_EcvS3_Ev(%"class.WTF::StringAppend.628"* nonnull %9)
  %501 = ptrtoint %"class.WTF::StringImpl"* %500 to i64
  br i1 %481, label %515, label %502

502:                                              ; preds = %499
  %503 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %480, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %504 = load atomic i32, i32* %503 monotonic, align 4
  %505 = and i32 %504, 2
  %506 = icmp eq i32 %505, 0
  %507 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %480, i64 0, i32 0
  %508 = load i32, i32* %507, align 4
  br i1 %506, label %509, label %511

509:                                              ; preds = %502
  %510 = add i32 %508, -1
  store i32 %510, i32* %507, align 4
  br label %511

511:                                              ; preds = %509, %502
  %512 = phi i32 [ %510, %509 ], [ %508, %502 ]
  %513 = icmp eq i32 %512, 0
  br i1 %513, label %514, label %515

514:                                              ; preds = %511
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %480) #14
  br label %515

515:                                              ; preds = %514, %511, %499
  %516 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %517 = icmp eq %"class.WTF::StringImpl"* %516, null
  br i1 %517, label %531, label %518

518:                                              ; preds = %515
  %519 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %516, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %520 = load atomic i32, i32* %519 monotonic, align 4
  %521 = and i32 %520, 2
  %522 = icmp eq i32 %521, 0
  %523 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %516, i64 0, i32 0
  %524 = load i32, i32* %523, align 4
  br i1 %522, label %525, label %527

525:                                              ; preds = %518
  %526 = add i32 %524, -1
  store i32 %526, i32* %523, align 4
  br label %527

527:                                              ; preds = %525, %518
  %528 = phi i32 [ %526, %525 ], [ %524, %518 ]
  %529 = icmp eq i32 %528, 0
  br i1 %529, label %530, label %531

530:                                              ; preds = %527
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %516) #14
  br label %531

531:                                              ; preds = %530, %527, %515
  %532 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %533 = icmp eq %"class.WTF::StringImpl"* %532, null
  br i1 %533, label %547, label %534

534:                                              ; preds = %531
  %535 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %532, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %536 = load atomic i32, i32* %535 monotonic, align 4
  %537 = and i32 %536, 2
  %538 = icmp eq i32 %537, 0
  %539 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %532, i64 0, i32 0
  %540 = load i32, i32* %539, align 4
  br i1 %538, label %541, label %543

541:                                              ; preds = %534
  %542 = add i32 %540, -1
  store i32 %542, i32* %539, align 4
  br label %543

543:                                              ; preds = %541, %534
  %544 = phi i32 [ %542, %541 ], [ %540, %534 ]
  %545 = icmp eq i32 %544, 0
  br i1 %545, label %546, label %547

546:                                              ; preds = %543
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %532) #14
  br label %547

547:                                              ; preds = %531, %543, %546
  %548 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %549 = icmp eq %"class.WTF::StringImpl"* %548, null
  br i1 %549, label %563, label %550

550:                                              ; preds = %547
  %551 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %548, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %552 = load atomic i32, i32* %551 monotonic, align 4
  %553 = and i32 %552, 2
  %554 = icmp eq i32 %553, 0
  %555 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %548, i64 0, i32 0
  %556 = load i32, i32* %555, align 4
  br i1 %554, label %557, label %559

557:                                              ; preds = %550
  %558 = add i32 %556, -1
  store i32 %558, i32* %555, align 4
  br label %559

559:                                              ; preds = %557, %550
  %560 = phi i32 [ %558, %557 ], [ %556, %550 ]
  %561 = icmp eq i32 %560, 0
  br i1 %561, label %562, label %563

562:                                              ; preds = %559
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %548) #14
  br label %563

563:                                              ; preds = %547, %559, %562
  br i1 %435, label %577, label %564

564:                                              ; preds = %563
  %565 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %434, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %566 = load atomic i32, i32* %565 monotonic, align 4
  %567 = and i32 %566, 2
  %568 = icmp eq i32 %567, 0
  %569 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %434, i64 0, i32 0
  %570 = load i32, i32* %569, align 4
  br i1 %568, label %571, label %573

571:                                              ; preds = %564
  %572 = add i32 %570, -1
  store i32 %572, i32* %569, align 4
  br label %573

573:                                              ; preds = %571, %564
  %574 = phi i32 [ %572, %571 ], [ %570, %564 ]
  %575 = icmp eq i32 %574, 0
  br i1 %575, label %576, label %577

576:                                              ; preds = %573
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %434) #14
  br label %577

577:                                              ; preds = %563, %573, %576
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %36) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #14
  br label %812

578:                                              ; preds = %139
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %29) #14
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #14
  %579 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %2) #14
  %580 = icmp eq %"class.WTF::StringImpl"* %579, null
  br i1 %580, label %624, label %581

581:                                              ; preds = %578
  %582 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %579, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %583 = load atomic i32, i32* %582 monotonic, align 4
  %584 = and i32 %583, 2
  %585 = icmp eq i32 %584, 0
  %586 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %579, i64 0, i32 0
  %587 = load i32, i32* %586, align 4
  br i1 %585, label %588, label %598

588:                                              ; preds = %581
  %589 = zext i32 %587 to i33
  %590 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %589, i33 1) #14
  %591 = extractvalue { i33, i1 } %590, 1
  %592 = extractvalue { i33, i1 } %590, 0
  %593 = icmp slt i33 %592, 0
  %594 = or i1 %591, %593
  br i1 %594, label %595, label %596, !prof !4

595:                                              ; preds = %588
  call void @llvm.trap() #14
  unreachable

596:                                              ; preds = %588
  %597 = trunc i33 %592 to i32
  store i32 %597, i32* %586, align 4
  br label %598

598:                                              ; preds = %596, %581
  %599 = phi i32 [ %597, %596 ], [ %587, %581 ]
  %600 = load atomic i32, i32* %582 monotonic, align 4
  %601 = and i32 %600, 2
  %602 = icmp eq i32 %601, 0
  br i1 %602, label %603, label %613

603:                                              ; preds = %598
  %604 = zext i32 %599 to i33
  %605 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %604, i33 1) #14
  %606 = extractvalue { i33, i1 } %605, 1
  %607 = extractvalue { i33, i1 } %605, 0
  %608 = icmp slt i33 %607, 0
  %609 = or i1 %606, %608
  br i1 %609, label %610, label %611, !prof !4

610:                                              ; preds = %603
  call void @llvm.trap() #14
  unreachable

611:                                              ; preds = %603
  %612 = trunc i33 %607 to i32
  store i32 %612, i32* %586, align 4
  br label %613

613:                                              ; preds = %611, %598
  %614 = phi i32 [ %612, %611 ], [ %599, %598 ]
  %615 = load atomic i32, i32* %582 monotonic, align 4
  %616 = and i32 %615, 2
  %617 = icmp eq i32 %616, 0
  br i1 %617, label %618, label %620

618:                                              ; preds = %613
  %619 = add i32 %614, -1
  store i32 %619, i32* %586, align 4
  br label %620

620:                                              ; preds = %618, %613
  %621 = phi i32 [ %619, %618 ], [ %614, %613 ]
  %622 = icmp eq i32 %621, 0
  br i1 %622, label %623, label %624

623:                                              ; preds = %620
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %579) #14
  br label %624

624:                                              ; preds = %578, %620, %623
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i64 0, i64 0), i8** %31, align 8
  store %"class.WTF::StringImpl"* %579, %"class.WTF::StringImpl"** %32, align 8
  %625 = inttoptr i64 %61 to %"class.WTF::StringImpl"*
  %626 = icmp eq i64 %61, 0
  br i1 %626, label %644, label %627

627:                                              ; preds = %624
  %628 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %625, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %629 = load atomic i32, i32* %628 monotonic, align 4
  %630 = and i32 %629, 2
  %631 = icmp eq i32 %630, 0
  br i1 %631, label %632, label %644

632:                                              ; preds = %627
  %633 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %625, i64 0, i32 0
  %634 = load i32, i32* %633, align 4
  %635 = zext i32 %634 to i33
  %636 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %635, i33 1) #14
  %637 = extractvalue { i33, i1 } %636, 1
  %638 = extractvalue { i33, i1 } %636, 0
  %639 = icmp slt i33 %638, 0
  %640 = or i1 %637, %639
  br i1 %640, label %641, label %642, !prof !4

641:                                              ; preds = %632
  call void @llvm.trap() #14
  unreachable

642:                                              ; preds = %632
  %643 = trunc i33 %638 to i32
  store i32 %643, i32* %633, align 4
  br label %644

644:                                              ; preds = %624, %627, %642
  call void @_ZN3WTFplIPKcNS_6StringES3_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_(%"class.WTF::StringAppend.628"* nonnull sret %11, %"class.WTF::StringAppend.629"* nonnull dereferenceable(16) %12, %"class.WTF::StringImpl"* %625)
  %645 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_EcvS3_Ev(%"class.WTF::StringAppend.628"* nonnull %11)
  %646 = ptrtoint %"class.WTF::StringImpl"* %645 to i64
  br i1 %626, label %660, label %647

647:                                              ; preds = %644
  %648 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %625, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %649 = load atomic i32, i32* %648 monotonic, align 4
  %650 = and i32 %649, 2
  %651 = icmp eq i32 %650, 0
  %652 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %625, i64 0, i32 0
  %653 = load i32, i32* %652, align 4
  br i1 %651, label %654, label %656

654:                                              ; preds = %647
  %655 = add i32 %653, -1
  store i32 %655, i32* %652, align 4
  br label %656

656:                                              ; preds = %654, %647
  %657 = phi i32 [ %655, %654 ], [ %653, %647 ]
  %658 = icmp eq i32 %657, 0
  br i1 %658, label %659, label %660

659:                                              ; preds = %656
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %625) #14
  br label %660

660:                                              ; preds = %659, %656, %644
  %661 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %662 = icmp eq %"class.WTF::StringImpl"* %661, null
  br i1 %662, label %676, label %663

663:                                              ; preds = %660
  %664 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %661, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %665 = load atomic i32, i32* %664 monotonic, align 4
  %666 = and i32 %665, 2
  %667 = icmp eq i32 %666, 0
  %668 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %661, i64 0, i32 0
  %669 = load i32, i32* %668, align 4
  br i1 %667, label %670, label %672

670:                                              ; preds = %663
  %671 = add i32 %669, -1
  store i32 %671, i32* %668, align 4
  br label %672

672:                                              ; preds = %670, %663
  %673 = phi i32 [ %671, %670 ], [ %669, %663 ]
  %674 = icmp eq i32 %673, 0
  br i1 %674, label %675, label %676

675:                                              ; preds = %672
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %661) #14
  br label %676

676:                                              ; preds = %675, %672, %660
  %677 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %678 = icmp eq %"class.WTF::StringImpl"* %677, null
  br i1 %678, label %692, label %679

679:                                              ; preds = %676
  %680 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %677, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %681 = load atomic i32, i32* %680 monotonic, align 4
  %682 = and i32 %681, 2
  %683 = icmp eq i32 %682, 0
  %684 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %677, i64 0, i32 0
  %685 = load i32, i32* %684, align 4
  br i1 %683, label %686, label %688

686:                                              ; preds = %679
  %687 = add i32 %685, -1
  store i32 %687, i32* %684, align 4
  br label %688

688:                                              ; preds = %686, %679
  %689 = phi i32 [ %687, %686 ], [ %685, %679 ]
  %690 = icmp eq i32 %689, 0
  br i1 %690, label %691, label %692

691:                                              ; preds = %688
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %677) #14
  br label %692

692:                                              ; preds = %676, %688, %691
  %693 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %694 = icmp eq %"class.WTF::StringImpl"* %693, null
  br i1 %694, label %708, label %695

695:                                              ; preds = %692
  %696 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %693, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %697 = load atomic i32, i32* %696 monotonic, align 4
  %698 = and i32 %697, 2
  %699 = icmp eq i32 %698, 0
  %700 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %693, i64 0, i32 0
  %701 = load i32, i32* %700, align 4
  br i1 %699, label %702, label %704

702:                                              ; preds = %695
  %703 = add i32 %701, -1
  store i32 %703, i32* %700, align 4
  br label %704

704:                                              ; preds = %702, %695
  %705 = phi i32 [ %703, %702 ], [ %701, %695 ]
  %706 = icmp eq i32 %705, 0
  br i1 %706, label %707, label %708

707:                                              ; preds = %704
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %693) #14
  br label %708

708:                                              ; preds = %692, %704, %707
  br i1 %580, label %722, label %709

709:                                              ; preds = %708
  %710 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %579, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %711 = load atomic i32, i32* %710 monotonic, align 4
  %712 = and i32 %711, 2
  %713 = icmp eq i32 %712, 0
  %714 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %579, i64 0, i32 0
  %715 = load i32, i32* %714, align 4
  br i1 %713, label %716, label %718

716:                                              ; preds = %709
  %717 = add i32 %715, -1
  store i32 %717, i32* %714, align 4
  br label %718

718:                                              ; preds = %716, %709
  %719 = phi i32 [ %717, %716 ], [ %715, %709 ]
  %720 = icmp eq i32 %719, 0
  br i1 %720, label %721, label %722

721:                                              ; preds = %718
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %579) #14
  br label %722

722:                                              ; preds = %708, %718, %721
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %29) #14
  br label %812

723:                                              ; preds = %139, %139, %139
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #14
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #14
  %724 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %2) #14
  store %"class.WTF::StringImpl"* %724, %"class.WTF::StringImpl"** %26, align 8
  %725 = inttoptr i64 %61 to %"class.WTF::StringImpl"*
  %726 = icmp eq i64 %61, 0
  br i1 %726, label %744, label %727

727:                                              ; preds = %723
  %728 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %725, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %729 = load atomic i32, i32* %728 monotonic, align 4
  %730 = and i32 %729, 2
  %731 = icmp eq i32 %730, 0
  br i1 %731, label %732, label %744

732:                                              ; preds = %727
  %733 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %725, i64 0, i32 0
  %734 = load i32, i32* %733, align 4
  %735 = zext i32 %734 to i33
  %736 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %735, i33 1) #14
  %737 = extractvalue { i33, i1 } %736, 1
  %738 = extractvalue { i33, i1 } %736, 0
  %739 = icmp slt i33 %738, 0
  %740 = or i1 %737, %739
  br i1 %740, label %741, label %742, !prof !4

741:                                              ; preds = %732
  call void @llvm.trap() #14
  unreachable

742:                                              ; preds = %732
  %743 = trunc i33 %738 to i32
  store i32 %743, i32* %733, align 4
  br label %744

744:                                              ; preds = %723, %727, %742
  %745 = call { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } @_ZN3WTFplINS_6StringEEENS_12StringAppendIS1_T_EERKS1_S3_(%"class.WTF::String"* nonnull dereferenceable(8) %14, %"class.WTF::StringImpl"* %725)
  %746 = extractvalue { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } %745, 0
  store %"class.WTF::StringImpl"* %746, %"class.WTF::StringImpl"** %27, align 8
  %747 = extractvalue { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } %745, 1
  store %"class.WTF::StringImpl"* %747, %"class.WTF::StringImpl"** %28, align 8
  %748 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS_6StringES1_EcvS1_Ev(%"class.WTF::StringAppend"* nonnull %13)
  %749 = ptrtoint %"class.WTF::StringImpl"* %748 to i64
  br i1 %726, label %763, label %750

750:                                              ; preds = %744
  %751 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %725, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %752 = load atomic i32, i32* %751 monotonic, align 4
  %753 = and i32 %752, 2
  %754 = icmp eq i32 %753, 0
  %755 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %725, i64 0, i32 0
  %756 = load i32, i32* %755, align 4
  br i1 %754, label %757, label %759

757:                                              ; preds = %750
  %758 = add i32 %756, -1
  store i32 %758, i32* %755, align 4
  br label %759

759:                                              ; preds = %757, %750
  %760 = phi i32 [ %758, %757 ], [ %756, %750 ]
  %761 = icmp eq i32 %760, 0
  br i1 %761, label %762, label %763

762:                                              ; preds = %759
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %725) #14
  br label %763

763:                                              ; preds = %762, %759, %744
  %764 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  %765 = icmp eq %"class.WTF::StringImpl"* %764, null
  br i1 %765, label %779, label %766

766:                                              ; preds = %763
  %767 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %764, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %768 = load atomic i32, i32* %767 monotonic, align 4
  %769 = and i32 %768, 2
  %770 = icmp eq i32 %769, 0
  %771 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %764, i64 0, i32 0
  %772 = load i32, i32* %771, align 4
  br i1 %770, label %773, label %775

773:                                              ; preds = %766
  %774 = add i32 %772, -1
  store i32 %774, i32* %771, align 4
  br label %775

775:                                              ; preds = %773, %766
  %776 = phi i32 [ %774, %773 ], [ %772, %766 ]
  %777 = icmp eq i32 %776, 0
  br i1 %777, label %778, label %779

778:                                              ; preds = %775
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %764) #14
  br label %779

779:                                              ; preds = %778, %775, %763
  %780 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %781 = icmp eq %"class.WTF::StringImpl"* %780, null
  br i1 %781, label %795, label %782

782:                                              ; preds = %779
  %783 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %780, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %784 = load atomic i32, i32* %783 monotonic, align 4
  %785 = and i32 %784, 2
  %786 = icmp eq i32 %785, 0
  %787 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %780, i64 0, i32 0
  %788 = load i32, i32* %787, align 4
  br i1 %786, label %789, label %791

789:                                              ; preds = %782
  %790 = add i32 %788, -1
  store i32 %790, i32* %787, align 4
  br label %791

791:                                              ; preds = %789, %782
  %792 = phi i32 [ %790, %789 ], [ %788, %782 ]
  %793 = icmp eq i32 %792, 0
  br i1 %793, label %794, label %795

794:                                              ; preds = %791
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %780) #14
  br label %795

795:                                              ; preds = %779, %791, %794
  %796 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  %797 = icmp eq %"class.WTF::StringImpl"* %796, null
  br i1 %797, label %811, label %798

798:                                              ; preds = %795
  %799 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %796, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %800 = load atomic i32, i32* %799 monotonic, align 4
  %801 = and i32 %800, 2
  %802 = icmp eq i32 %801, 0
  %803 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %796, i64 0, i32 0
  %804 = load i32, i32* %803, align 4
  br i1 %802, label %805, label %807

805:                                              ; preds = %798
  %806 = add i32 %804, -1
  store i32 %806, i32* %803, align 4
  br label %807

807:                                              ; preds = %805, %798
  %808 = phi i32 [ %806, %805 ], [ %804, %798 ]
  %809 = icmp eq i32 %808, 0
  br i1 %809, label %810, label %811

810:                                              ; preds = %807
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %796) #14
  br label %811

811:                                              ; preds = %795, %807, %810
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #14
  br label %812

812:                                              ; preds = %287, %432, %577, %722, %811, %139, %138
  %813 = phi i64 [ %61, %138 ], [ %61, %139 ], [ %749, %811 ], [ %646, %722 ], [ %501, %577 ], [ %356, %432 ], [ %211, %287 ]
  %814 = phi i64 [ %90, %138 ], [ %60, %139 ], [ %60, %811 ], [ %60, %722 ], [ %60, %577 ], [ %60, %432 ], [ %60, %287 ]
  %815 = phi i32 [ 1, %138 ], [ 0, %139 ], [ 0, %811 ], [ 0, %722 ], [ 0, %577 ], [ 0, %432 ], [ 0, %287 ]
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %2) #14
  %816 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %817 = icmp eq %"class.WTF::StringImpl"* %816, null
  br i1 %817, label %831, label %818

818:                                              ; preds = %812
  %819 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %816, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %820 = load atomic i32, i32* %819 monotonic, align 4
  %821 = and i32 %820, 2
  %822 = icmp eq i32 %821, 0
  %823 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %816, i64 0, i32 0
  %824 = load i32, i32* %823, align 4
  br i1 %822, label %825, label %827

825:                                              ; preds = %818
  %826 = add i32 %824, -1
  store i32 %826, i32* %823, align 4
  br label %827

827:                                              ; preds = %825, %818
  %828 = phi i32 [ %826, %825 ], [ %824, %818 ]
  %829 = icmp eq i32 %828, 0
  br i1 %829, label %830, label %831

830:                                              ; preds = %827
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %816) #14
  br label %831

831:                                              ; preds = %812, %827, %830
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %17) #14
  %832 = icmp eq i32 %815, 0
  br i1 %832, label %833, label %841

833:                                              ; preds = %831
  %834 = bitcast %"class.blink::CSSSelector"* %62 to i32*
  %835 = load i32, i32* %834, align 8
  %836 = and i32 %835, 131072
  %837 = icmp ne i32 %836, 0
  %838 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %62, i64 1
  %839 = icmp eq %"class.blink::CSSSelector"* %838, null
  %840 = or i1 %839, %837
  br i1 %840, label %841, label %58

841:                                              ; preds = %831, %833
  %842 = phi i64 [ %814, %831 ], [ 0, %833 ]
  %843 = inttoptr i64 %813 to %"class.WTF::StringImpl"*
  %844 = icmp eq i64 %813, 0
  br i1 %844, label %858, label %845

845:                                              ; preds = %841
  %846 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %843, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %847 = load atomic i32, i32* %846 monotonic, align 4
  %848 = and i32 %847, 2
  %849 = icmp eq i32 %848, 0
  %850 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %843, i64 0, i32 0
  %851 = load i32, i32* %850, align 4
  br i1 %849, label %852, label %854

852:                                              ; preds = %845
  %853 = add i32 %851, -1
  store i32 %853, i32* %850, align 4
  br label %854

854:                                              ; preds = %852, %845
  %855 = phi i32 [ %853, %852 ], [ %851, %845 ]
  %856 = icmp eq i32 %855, 0
  br i1 %856, label %857, label %858

857:                                              ; preds = %854
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %843) #14
  br label %858

858:                                              ; preds = %1, %841, %854, %857
  %859 = phi i64 [ %842, %841 ], [ %842, %854 ], [ %842, %857 ], [ 0, %1 ]
  %860 = inttoptr i64 %859 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %860
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } @_ZN3WTFplINS_6StringEEENS_12StringAppendIS1_T_EERKS1_S3_(%"class.WTF::String"* dereferenceable(8), %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat {
  %3 = alloca %"class.WTF::StringAppend", align 8
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #14
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !4

21:                                               ; preds = %12
  tail call void @llvm.trap() #14
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %2, %7, %22
  %25 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %25, label %43, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 2
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %44

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = zext i32 %33 to i33
  %35 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %34, i33 1) #14
  %36 = extractvalue { i33, i1 } %35, 1
  %37 = extractvalue { i33, i1 } %35, 0
  %38 = icmp slt i33 %37, 0
  %39 = or i1 %36, %38
  br i1 %39, label %40, label %41, !prof !4

40:                                               ; preds = %31
  tail call void @llvm.trap() #14
  unreachable

41:                                               ; preds = %31
  %42 = trunc i33 %37 to i32
  store i32 %42, i32* %32, align 4
  br label %44

43:                                               ; preds = %24
  call void @_ZN3WTF12StringAppendINS_6StringES1_EC2ES1_S1_(%"class.WTF::StringAppend"* nonnull %3, %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"* null)
  br label %56

44:                                               ; preds = %26, %41
  call void @_ZN3WTF12StringAppendINS_6StringES1_EC2ES1_S1_(%"class.WTF::StringAppend"* nonnull %3, %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"* nonnull %1)
  %45 = load atomic i32, i32* %27 monotonic, align 4
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  br i1 %47, label %50, label %52

50:                                               ; preds = %44
  %51 = add i32 %49, -1
  store i32 %51, i32* %48, align 4
  br label %52

52:                                               ; preds = %50, %44
  %53 = phi i32 [ %51, %50 ], [ %49, %44 ]
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #14
  br label %56

56:                                               ; preds = %43, %52, %55
  %57 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %3, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  %59 = insertvalue { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } undef, %"class.WTF::StringImpl"* %58, 0
  %60 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %3, i64 0, i32 1, i32 0, i32 0
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %62 = insertvalue { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } %59, %"class.WTF::StringImpl"* %61, 1
  ret { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } %62
}

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS_6StringES1_EcvS1_Ev(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter", align 8
  %6 = alloca i8*, align 8
  %7 = alloca i16*, align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %12 = select i1 %10, %"class.WTF::StringImpl"* %11, %"class.WTF::StringImpl"* %9
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %103, label %19

19:                                               ; preds = %1
  %20 = icmp eq %"class.WTF::StringImpl"* %14, null
  %21 = select i1 %20, %"class.WTF::StringImpl"* %11, %"class.WTF::StringImpl"* %14
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %103, label %26

26:                                               ; preds = %19
  %27 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #14
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %28 = tail call i32 @_ZNK3WTF12StringAppendINS_6StringES1_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %29 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %28, i8** nonnull dereferenceable(8) %6) #14
  %30 = load i8*, i8** %6, align 8
  %31 = bitcast %"class.WTF::StringTypeAdapter"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #14
  %32 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0, i32 0, i32 1
  %33 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 24, i1 false) #14
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %26
  %37 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %44

38:                                               ; preds = %26
  %39 = ptrtoint %"class.WTF::StringImpl"* %34 to i64
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 1
  %43 = bitcast %"class.WTF::StringImpl"* %42 to i8*
  br label %44

44:                                               ; preds = %38, %36
  %45 = phi i8* [ null, %36 ], [ %43, %38 ]
  %46 = phi i64 [ %37, %36 ], [ %39, %38 ]
  %47 = phi i32 [ 0, %36 ], [ %41, %38 ]
  %48 = bitcast %"class.WTF::StringTypeAdapter"* %4 to i64*
  store i64 %46, i64* %48, align 8
  store i8* %45, i8** %32, align 8
  store i32 %47, i32* %33, align 8
  %49 = bitcast %"class.WTF::StringTypeAdapter"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %49) #14
  %50 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %5, i64 0, i32 0, i32 0, i32 1
  %51 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 -86, i64 24, i1 false) #14
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %54, label %56

54:                                               ; preds = %44
  %55 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %62

56:                                               ; preds = %44
  %57 = ptrtoint %"class.WTF::StringImpl"* %52 to i64
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 1
  %61 = bitcast %"class.WTF::StringImpl"* %60 to i8*
  br label %62

62:                                               ; preds = %54, %56
  %63 = phi i8* [ null, %54 ], [ %61, %56 ]
  %64 = phi i64 [ %55, %54 ], [ %57, %56 ]
  %65 = phi i32 [ 0, %54 ], [ %59, %56 ]
  %66 = bitcast %"class.WTF::StringTypeAdapter"* %5 to i64*
  store i64 %64, i64* %66, align 8
  store i8* %63, i8** %50, align 8
  store i32 %65, i32* %51, align 8
  %67 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.651"* nonnull %67, i8* %30) #14
  %68 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %5, i64 0, i32 0
  %69 = load i32, i32* %33, align 8
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %30, i64 %70
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.651"* nonnull %68, i8* %71) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %49) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #14
  %72 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %72, label %180, label %73

73:                                               ; preds = %62
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %79 = load i32, i32* %78, align 4
  br i1 %77, label %80, label %90

80:                                               ; preds = %73
  %81 = zext i32 %79 to i33
  %82 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %81, i33 1) #14
  %83 = extractvalue { i33, i1 } %82, 1
  %84 = extractvalue { i33, i1 } %82, 0
  %85 = icmp slt i33 %84, 0
  %86 = or i1 %83, %85
  br i1 %86, label %87, label %88, !prof !4

87:                                               ; preds = %80
  call void @llvm.trap() #14
  unreachable

88:                                               ; preds = %80
  %89 = trunc i33 %84 to i32
  store i32 %89, i32* %78, align 4
  br label %90

90:                                               ; preds = %73, %88
  %91 = phi i32 [ %89, %88 ], [ %79, %73 ]
  %92 = ptrtoint %"class.WTF::StringImpl"* %29 to i64
  %93 = load atomic i32, i32* %74 monotonic, align 4
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %99

96:                                               ; preds = %90
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %98 = add i32 %91, -1
  store i32 %98, i32* %97, align 4
  br label %99

99:                                               ; preds = %96, %90
  %100 = phi i32 [ %98, %96 ], [ %91, %90 ]
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %180

102:                                              ; preds = %99
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %29) #14
  br label %180

103:                                              ; preds = %19, %1
  %104 = bitcast i16** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %104) #14
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %7, align 8
  %105 = tail call i32 @_ZNK3WTF12StringAppendINS_6StringES1_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %106 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %105, i16** nonnull dereferenceable(8) %7) #14
  %107 = load i16*, i16** %7, align 8
  %108 = bitcast %"class.WTF::StringTypeAdapter"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %108) #14
  %109 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %2, i64 0, i32 0, i32 0, i32 1
  %110 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %2, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %108, i8 -86, i64 24, i1 false) #14
  %111 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %112 = icmp eq %"class.WTF::StringImpl"* %111, null
  br i1 %112, label %113, label %115

113:                                              ; preds = %103
  %114 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %121

115:                                              ; preds = %103
  %116 = ptrtoint %"class.WTF::StringImpl"* %111 to i64
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 1
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 1
  %120 = bitcast %"class.WTF::StringImpl"* %119 to i8*
  br label %121

121:                                              ; preds = %115, %113
  %122 = phi i8* [ null, %113 ], [ %120, %115 ]
  %123 = phi i64 [ %114, %113 ], [ %116, %115 ]
  %124 = phi i32 [ 0, %113 ], [ %118, %115 ]
  %125 = bitcast %"class.WTF::StringTypeAdapter"* %2 to i64*
  store i64 %123, i64* %125, align 8
  store i8* %122, i8** %109, align 8
  store i32 %124, i32* %110, align 8
  %126 = bitcast %"class.WTF::StringTypeAdapter"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %126) #14
  %127 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %3, i64 0, i32 0, i32 0, i32 1
  %128 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %3, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %126, i8 -86, i64 24, i1 false) #14
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %131, label %133

131:                                              ; preds = %121
  %132 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %139

133:                                              ; preds = %121
  %134 = ptrtoint %"class.WTF::StringImpl"* %129 to i64
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 1
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 1
  %138 = bitcast %"class.WTF::StringImpl"* %137 to i8*
  br label %139

139:                                              ; preds = %131, %133
  %140 = phi i8* [ null, %131 ], [ %138, %133 ]
  %141 = phi i64 [ %132, %131 ], [ %134, %133 ]
  %142 = phi i32 [ 0, %131 ], [ %136, %133 ]
  %143 = bitcast %"class.WTF::StringTypeAdapter"* %3 to i64*
  store i64 %141, i64* %143, align 8
  store i8* %140, i8** %127, align 8
  store i32 %142, i32* %128, align 8
  %144 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %2, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.651"* nonnull %144, i16* %107) #14
  %145 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %3, i64 0, i32 0
  %146 = load i32, i32* %110, align 8
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds i16, i16* %107, i64 %147
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.651"* nonnull %145, i16* %148) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %126) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %108) #14
  %149 = icmp eq %"class.WTF::StringImpl"* %106, null
  br i1 %149, label %180, label %150

150:                                              ; preds = %139
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %152 = load atomic i32, i32* %151 monotonic, align 4
  %153 = and i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 0
  %156 = load i32, i32* %155, align 4
  br i1 %154, label %157, label %167

157:                                              ; preds = %150
  %158 = zext i32 %156 to i33
  %159 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %158, i33 1) #14
  %160 = extractvalue { i33, i1 } %159, 1
  %161 = extractvalue { i33, i1 } %159, 0
  %162 = icmp slt i33 %161, 0
  %163 = or i1 %160, %162
  br i1 %163, label %164, label %165, !prof !4

164:                                              ; preds = %157
  call void @llvm.trap() #14
  unreachable

165:                                              ; preds = %157
  %166 = trunc i33 %161 to i32
  store i32 %166, i32* %155, align 4
  br label %167

167:                                              ; preds = %150, %165
  %168 = phi i32 [ %166, %165 ], [ %156, %150 ]
  %169 = ptrtoint %"class.WTF::StringImpl"* %106 to i64
  %170 = load atomic i32, i32* %151 monotonic, align 4
  %171 = and i32 %170, 2
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %176

173:                                              ; preds = %167
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 0
  %175 = add i32 %168, -1
  store i32 %175, i32* %174, align 4
  br label %176

176:                                              ; preds = %173, %167
  %177 = phi i32 [ %175, %173 ], [ %168, %167 ]
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %180

179:                                              ; preds = %176
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %106) #14
  br label %180

180:                                              ; preds = %179, %176, %139, %102, %99, %62
  %181 = phi i8* [ %27, %62 ], [ %27, %99 ], [ %27, %102 ], [ %104, %139 ], [ %104, %176 ], [ %104, %179 ]
  %182 = phi i64 [ 0, %62 ], [ %92, %99 ], [ %92, %102 ], [ 0, %139 ], [ %169, %176 ], [ %169, %179 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %181) #14
  %183 = inttoptr i64 %182 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %183
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTFplIPKcNS_6StringES3_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_(%"class.WTF::StringAppend.628"* noalias sret, %"class.WTF::StringAppend.629"* dereferenceable(16), %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat {
  %4 = bitcast %"class.WTF::StringAppend.629"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend.629", %"class.WTF::StringAppend.629"* %1, i64 0, i32 1, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %26, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %26

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #14
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !4

23:                                               ; preds = %14
  tail call void @llvm.trap() #14
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %26

26:                                               ; preds = %3, %9, %24
  %27 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %27, label %45, label %28

28:                                               ; preds = %26
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %47

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i33
  %37 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %36, i33 1) #14
  %38 = extractvalue { i33, i1 } %37, 1
  %39 = extractvalue { i33, i1 } %37, 0
  %40 = icmp slt i33 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %42, label %43, !prof !4

42:                                               ; preds = %33
  tail call void @llvm.trap() #14
  unreachable

43:                                               ; preds = %33
  %44 = trunc i33 %39 to i32
  store i32 %44, i32* %34, align 4
  br label %47

45:                                               ; preds = %26
  %46 = inttoptr i64 %5 to i8*
  tail call void @_ZN3WTF12StringAppendINS0_IPKcNS_6StringEEES3_EC2ES4_S3_(%"class.WTF::StringAppend.628"* %0, i8* %46, %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"* null)
  br label %60

47:                                               ; preds = %28, %43
  %48 = inttoptr i64 %5 to i8*
  tail call void @_ZN3WTF12StringAppendINS0_IPKcNS_6StringEEES3_EC2ES4_S3_(%"class.WTF::StringAppend.628"* %0, i8* %48, %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"* nonnull %2)
  %49 = load atomic i32, i32* %29 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %53 = load i32, i32* %52, align 4
  br i1 %51, label %54, label %56

54:                                               ; preds = %47
  %55 = add i32 %53, -1
  store i32 %55, i32* %52, align 4
  br label %56

56:                                               ; preds = %54, %47
  %57 = phi i32 [ %55, %54 ], [ %53, %47 ]
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %56
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #14
  br label %60

60:                                               ; preds = %45, %56, %59
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_EcvS3_Ev(%"class.WTF::StringAppend.628"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.653", align 8
  %3 = alloca i8*, align 8
  %4 = alloca i16*, align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %0, i64 0, i32 1, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %8 = bitcast %"class.WTF::StringTypeAdapter.653"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #14
  %9 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false) #14
  %10 = load i8*, i8** %9, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.653"* nonnull %2, i8* %10) #14
  %11 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %15 = select i1 %13, %"class.WTF::StringImpl"* %14, %"class.WTF::StringImpl"* %12
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #14
  br i1 %19, label %63, label %20

20:                                               ; preds = %1
  %21 = icmp eq %"class.WTF::StringImpl"* %6, null
  %22 = select i1 %21, %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"* %6
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %22, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %63, label %27

27:                                               ; preds = %20
  %28 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #14
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %29 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_E6lengthEv(%"class.WTF::StringAppend.628"* %0)
  %30 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %29, i8** nonnull dereferenceable(8) %3) #14
  %31 = load i8*, i8** %3, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_E7WriteToEPh(%"class.WTF::StringAppend.628"* %0, i8* %31)
  %32 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %32, label %99, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = and i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  br i1 %37, label %40, label %50

40:                                               ; preds = %33
  %41 = zext i32 %39 to i33
  %42 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %41, i33 1) #14
  %43 = extractvalue { i33, i1 } %42, 1
  %44 = extractvalue { i33, i1 } %42, 0
  %45 = icmp slt i33 %44, 0
  %46 = or i1 %43, %45
  br i1 %46, label %47, label %48, !prof !4

47:                                               ; preds = %40
  call void @llvm.trap() #14
  unreachable

48:                                               ; preds = %40
  %49 = trunc i33 %44 to i32
  store i32 %49, i32* %38, align 4
  br label %50

50:                                               ; preds = %33, %48
  %51 = phi i32 [ %49, %48 ], [ %39, %33 ]
  %52 = ptrtoint %"class.WTF::StringImpl"* %30 to i64
  %53 = load atomic i32, i32* %34 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %50
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %58 = add i32 %51, -1
  store i32 %58, i32* %57, align 4
  br label %59

59:                                               ; preds = %56, %50
  %60 = phi i32 [ %58, %56 ], [ %51, %50 ]
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %99

62:                                               ; preds = %59
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %30) #14
  br label %99

63:                                               ; preds = %20, %1
  %64 = bitcast i16** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %64) #14
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %4, align 8
  %65 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_E6lengthEv(%"class.WTF::StringAppend.628"* %0)
  %66 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %65, i16** nonnull dereferenceable(8) %4) #14
  %67 = load i16*, i16** %4, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_E7WriteToEPDs(%"class.WTF::StringAppend.628"* %0, i16* %67)
  %68 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %68, label %99, label %69

69:                                               ; preds = %63
  %70 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = load atomic i32, i32* %70 monotonic, align 4
  %72 = and i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 0
  %75 = load i32, i32* %74, align 4
  br i1 %73, label %76, label %86

76:                                               ; preds = %69
  %77 = zext i32 %75 to i33
  %78 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %77, i33 1) #14
  %79 = extractvalue { i33, i1 } %78, 1
  %80 = extractvalue { i33, i1 } %78, 0
  %81 = icmp slt i33 %80, 0
  %82 = or i1 %79, %81
  br i1 %82, label %83, label %84, !prof !4

83:                                               ; preds = %76
  call void @llvm.trap() #14
  unreachable

84:                                               ; preds = %76
  %85 = trunc i33 %80 to i32
  store i32 %85, i32* %74, align 4
  br label %86

86:                                               ; preds = %69, %84
  %87 = phi i32 [ %85, %84 ], [ %75, %69 ]
  %88 = ptrtoint %"class.WTF::StringImpl"* %66 to i64
  %89 = load atomic i32, i32* %70 monotonic, align 4
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %95

92:                                               ; preds = %86
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 0
  %94 = add i32 %87, -1
  store i32 %94, i32* %93, align 4
  br label %95

95:                                               ; preds = %92, %86
  %96 = phi i32 [ %94, %92 ], [ %87, %86 ]
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %66) #14
  br label %99

99:                                               ; preds = %98, %95, %63, %62, %59, %27
  %100 = phi i8* [ %28, %27 ], [ %28, %59 ], [ %28, %62 ], [ %64, %63 ], [ %64, %95 ], [ %64, %98 ]
  %101 = phi i64 [ 0, %27 ], [ %52, %59 ], [ %52, %62 ], [ 0, %63 ], [ %88, %95 ], [ %88, %98 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %100) #14
  %102 = inttoptr i64 %101 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %102
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11CSSSelector12SetAttributeERKNS_13QualifiedNameENS0_18AttributeMatchTypeE(%"class.blink::CSSSelector"* nocapture, %"class.blink::QualifiedName"* nocapture readonly dereferenceable(8), i32) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 262144
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  br i1 %7, label %12, label %9

9:                                                ; preds = %3
  %10 = bitcast %"union.blink::CSSSelector::DataUnion"* %8 to %"struct.blink::CSSSelector::RareData"**
  %11 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %10, align 8
  br label %39

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %8, i64 0, i32 0
  %14 = tail call noalias i8* @malloc(i64 64) #14
  %15 = bitcast i8* %14 to %"struct.blink::CSSSelector::RareData"*
  tail call void @_ZN5blink11CSSSelector8RareDataC2ERKN3WTF12AtomicStringE(%"struct.blink::CSSSelector::RareData"* %15, %"class.WTF::AtomicString"* dereferenceable(8) %13) #14
  %16 = ptrtoint i8* %14 to i64
  %17 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  br i1 %24, label %27, label %29

27:                                               ; preds = %20
  %28 = add i32 %26, -1
  store i32 %28, i32* %25, align 4
  br label %29

29:                                               ; preds = %27, %20
  %30 = phi i32 [ %28, %27 ], [ %26, %20 ]
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #14
  br label %33

33:                                               ; preds = %32, %29, %12
  %34 = bitcast %"union.blink::CSSSelector::DataUnion"* %8 to i64*
  store i64 %16, i64* %34, align 8
  %35 = load i32, i32* %4, align 8
  %36 = or i32 %35, 262144
  store i32 %36, i32* %4, align 8
  %37 = bitcast i8* %14 to %"struct.blink::CSSSelector::RareData"*
  %38 = bitcast %"union.blink::CSSSelector::DataUnion"* %8 to %"struct.blink::CSSSelector::RareData"**
  br label %39

39:                                               ; preds = %9, %33
  %40 = phi %"struct.blink::CSSSelector::RareData"** [ %10, %9 ], [ %38, %33 ]
  %41 = phi %"struct.blink::CSSSelector::RareData"* [ %11, %9 ], [ %37, %33 ]
  %42 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %41, i64 0, i32 4
  %43 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %1, i64 0, i32 0, i32 0
  %44 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %43, align 8
  %45 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %44, null
  br i1 %45, label %53, label %46

46:                                               ; preds = %39
  %47 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %44, i64 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = and i32 %48, 16777216
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %46
  %52 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %44, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %52) #14
  br label %53

53:                                               ; preds = %51, %46, %39
  %54 = ptrtoint %"class.blink::QualifiedName::QualifiedNameImpl"* %44 to i64
  %55 = bitcast %"class.blink::QualifiedName"* %42 to i64*
  %56 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %42, i64 0, i32 0, i32 0
  %57 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %56, align 8
  store i64 %54, i64* %55, align 8
  %58 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %57, null
  br i1 %58, label %71, label %59

59:                                               ; preds = %53
  %60 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %57, i64 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = and i32 %61, 16777216
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %71

64:                                               ; preds = %59
  %65 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %57, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %65) #14
  %66 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %57, i64 0, i32 0, i32 0, i32 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %71

69:                                               ; preds = %64
  tail call void @_ZN5blink13QualifiedName17QualifiedNameImplD1Ev(%"class.blink::QualifiedName::QualifiedNameImpl"* nonnull %57) #14
  %70 = bitcast %"class.blink::QualifiedName::QualifiedNameImpl"* %57 to i8*
  tail call void @free(i8* %70) #14
  br label %71

71:                                               ; preds = %53, %59, %64, %69
  %72 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %40, align 8
  %73 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %72, i64 0, i32 3, i32 0, i32 0
  store i32 %2, i32* %73, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11CSSSelector11SetArgumentERKN3WTF12AtomicStringE(%"class.blink::CSSSelector"* nocapture, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 262144
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  br i1 %6, label %11, label %8

8:                                                ; preds = %2
  %9 = bitcast %"union.blink::CSSSelector::DataUnion"* %7 to %"struct.blink::CSSSelector::RareData"**
  %10 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %9, align 8
  br label %37

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %7, i64 0, i32 0
  %13 = tail call noalias i8* @malloc(i64 64) #14
  %14 = bitcast i8* %13 to %"struct.blink::CSSSelector::RareData"*
  tail call void @_ZN5blink11CSSSelector8RareDataC2ERKN3WTF12AtomicStringE(%"struct.blink::CSSSelector::RareData"* %14, %"class.WTF::AtomicString"* dereferenceable(8) %12) #14
  %15 = ptrtoint i8* %13 to i64
  %16 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %18, label %32, label %19

19:                                               ; preds = %11
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = and i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  br i1 %23, label %26, label %28

26:                                               ; preds = %19
  %27 = add i32 %25, -1
  store i32 %27, i32* %24, align 4
  br label %28

28:                                               ; preds = %26, %19
  %29 = phi i32 [ %27, %26 ], [ %25, %19 ]
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %32

31:                                               ; preds = %28
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %17) #14
  br label %32

32:                                               ; preds = %31, %28, %11
  %33 = bitcast %"union.blink::CSSSelector::DataUnion"* %7 to i64*
  store i64 %15, i64* %33, align 8
  %34 = load i32, i32* %3, align 8
  %35 = or i32 %34, 262144
  store i32 %35, i32* %3, align 8
  %36 = bitcast i8* %13 to %"struct.blink::CSSSelector::RareData"*
  br label %37

37:                                               ; preds = %8, %32
  %38 = phi %"struct.blink::CSSSelector::RareData"* [ %10, %8 ], [ %36, %32 ]
  %39 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %38, i64 0, i32 5
  %40 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %42, label %60, label %43

43:                                               ; preds = %37
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load atomic i32, i32* %44 monotonic, align 4
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %60

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = zext i32 %50 to i33
  %52 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %51, i33 1) #14
  %53 = extractvalue { i33, i1 } %52, 1
  %54 = extractvalue { i33, i1 } %52, 0
  %55 = icmp slt i33 %54, 0
  %56 = or i1 %53, %55
  br i1 %56, label %57, label %58, !prof !4

57:                                               ; preds = %48
  tail call void @llvm.trap() #14
  unreachable

58:                                               ; preds = %48
  %59 = trunc i33 %54 to i32
  store i32 %59, i32* %49, align 4
  br label %60

60:                                               ; preds = %58, %43, %37
  %61 = ptrtoint %"class.WTF::StringImpl"* %41 to i64
  %62 = bitcast %"class.WTF::AtomicString"* %39 to i64*
  %63 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %39, i64 0, i32 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  store i64 %61, i64* %62, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %79, label %66

66:                                               ; preds = %60
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  br i1 %70, label %73, label %75

73:                                               ; preds = %66
  %74 = add i32 %72, -1
  store i32 %74, i32* %71, align 4
  br label %75

75:                                               ; preds = %73, %66
  %76 = phi i32 [ %74, %73 ], [ %72, %66 ]
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %64) #14
  br label %79

79:                                               ; preds = %60, %75, %78
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11CSSSelector15SetSelectorListENSt3__110unique_ptrINS_15CSSSelectorListENS1_14default_deleteIS3_EEEE(%"class.blink::CSSSelector"* nocapture, %"class.blink::CSSSelectorList"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.blink::CSSSelectorList"* %1 to i64
  %4 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 262144
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  br i1 %7, label %12, label %9

9:                                                ; preds = %2
  %10 = bitcast %"union.blink::CSSSelector::DataUnion"* %8 to %"struct.blink::CSSSelector::RareData"**
  %11 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %10, align 8
  br label %38

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %8, i64 0, i32 0
  %14 = tail call noalias i8* @malloc(i64 64) #14
  %15 = bitcast i8* %14 to %"struct.blink::CSSSelector::RareData"*
  tail call void @_ZN5blink11CSSSelector8RareDataC2ERKN3WTF12AtomicStringE(%"struct.blink::CSSSelector::RareData"* %15, %"class.WTF::AtomicString"* dereferenceable(8) %13) #14
  %16 = ptrtoint i8* %14 to i64
  %17 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  br i1 %24, label %27, label %29

27:                                               ; preds = %20
  %28 = add i32 %26, -1
  store i32 %28, i32* %25, align 4
  br label %29

29:                                               ; preds = %27, %20
  %30 = phi i32 [ %28, %27 ], [ %26, %20 ]
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #14
  br label %33

33:                                               ; preds = %32, %29, %12
  %34 = bitcast %"union.blink::CSSSelector::DataUnion"* %8 to i64*
  store i64 %16, i64* %34, align 8
  %35 = load i32, i32* %4, align 8
  %36 = or i32 %35, 262144
  store i32 %36, i32* %4, align 8
  %37 = bitcast i8* %14 to %"struct.blink::CSSSelector::RareData"*
  br label %38

38:                                               ; preds = %9, %33
  %39 = phi %"struct.blink::CSSSelector::RareData"* [ %11, %9 ], [ %37, %33 ]
  %40 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %39, i64 0, i32 6
  %41 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = load %"class.blink::CSSSelectorList"*, %"class.blink::CSSSelectorList"** %41, align 8
  %43 = bitcast %"class.std::__1::unique_ptr"* %40 to i64*
  store i64 %3, i64* %43, align 8
  %44 = icmp eq %"class.blink::CSSSelectorList"* %42, null
  br i1 %44, label %52, label %45

45:                                               ; preds = %38
  %46 = getelementptr inbounds %"class.blink::CSSSelectorList", %"class.blink::CSSSelectorList"* %42, i64 0, i32 0
  %47 = load %"class.blink::CSSSelector"*, %"class.blink::CSSSelector"** %46, align 8
  %48 = icmp eq %"class.blink::CSSSelector"* %47, null
  br i1 %48, label %50, label %49

49:                                               ; preds = %45
  tail call void @_ZN5blink15CSSSelectorList15DeleteSelectorsEv(%"class.blink::CSSSelectorList"* nonnull %42) #14
  br label %50

50:                                               ; preds = %49, %45
  %51 = bitcast %"class.blink::CSSSelectorList"* %42 to i8*
  tail call void @free(i8* %51) #14
  br label %52

52:                                               ; preds = %50, %38
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink11CSSSelector10IsCompoundEv(%"class.blink::CSSSelector"* readonly) local_unnamed_addr #2 align 2 {
  %2 = tail call fastcc zeroext i1 @_ZN5blinkL19ValidateSubSelectorEPKNS_11CSSSelectorE(%"class.blink::CSSSelector"* %0)
  br i1 %2, label %3, label %26

3:                                                ; preds = %1
  %4 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 131072
  %7 = icmp ne i32 %6, 0
  %8 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 1
  %9 = icmp eq %"class.blink::CSSSelector"* %8, null
  %10 = or i1 %9, %7
  br i1 %10, label %26, label %11

11:                                               ; preds = %3, %18
  %12 = phi i32 [ %20, %18 ], [ %5, %3 ]
  %13 = phi %"class.blink::CSSSelector"* [ %23, %18 ], [ %8, %3 ]
  %14 = and i32 %12, 15
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %26

16:                                               ; preds = %11
  %17 = tail call fastcc zeroext i1 @_ZN5blinkL19ValidateSubSelectorEPKNS_11CSSSelectorE(%"class.blink::CSSSelector"* nonnull %13)
  br i1 %17, label %18, label %26

18:                                               ; preds = %16
  %19 = bitcast %"class.blink::CSSSelector"* %13 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = and i32 %20, 131072
  %22 = icmp ne i32 %21, 0
  %23 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %13, i64 1
  %24 = icmp eq %"class.blink::CSSSelector"* %23, null
  %25 = or i1 %24, %22
  br i1 %25, label %26, label %11

26:                                               ; preds = %18, %16, %11, %3, %1
  %27 = phi i1 [ false, %1 ], [ true, %3 ], [ true, %18 ], [ false, %16 ], [ false, %11 ]
  ret i1 %27
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc zeroext i1 @_ZN5blinkL19ValidateSubSelectorEPKNS_11CSSSelectorE(%"class.blink::CSSSelector"* nocapture readonly) unnamed_addr #2 {
  %2 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %3 = load i32, i32* %2, align 8
  %4 = lshr i32 %3, 4
  %5 = and i32 %4, 15
  %6 = icmp ult i32 %5, 14
  br i1 %6, label %11, label %7

7:                                                ; preds = %11, %1
  %8 = lshr i32 %3, 8
  %9 = trunc i32 %8 to i8
  switch i8 %9, label %10 [
    i8 1, label %21
    i8 16, label %21
    i8 17, label %21
    i8 45, label %21
    i8 33, label %21
    i8 36, label %21
    i8 32, label %21
    i8 44, label %21
    i8 10, label %21
    i8 12, label %21
    i8 11, label %21
    i8 13, label %21
    i8 2, label %21
    i8 4, label %21
    i8 3, label %21
    i8 5, label %21
    i8 7, label %21
    i8 95, label %21
    i8 96, label %21
    i8 52, label %21
    i8 97, label %21
    i8 98, label %21
    i8 94, label %21
    i8 99, label %21
    i8 100, label %21
    i8 102, label %21
  ]

10:                                               ; preds = %7
  br label %21

11:                                               ; preds = %1
  %12 = trunc i32 %5 to i16
  %13 = lshr i16 16303, %12
  %14 = and i16 %13, 1
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %7, label %16

16:                                               ; preds = %11
  %17 = trunc i32 %5 to i14
  %18 = lshr i14 -34, %17
  %19 = and i14 %18, 1
  %20 = icmp ne i14 %19, 0
  ret i1 %20

21:                                               ; preds = %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %10
  %22 = phi i1 [ false, %10 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ], [ true, %7 ]
  ret i1 %22
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink11CSSSelector16HasLinkOrVisitedEv(%"class.blink::CSSSelector"* readonly) local_unnamed_addr #6 align 2 {
  %2 = icmp eq %"class.blink::CSSSelector"* %0, null
  br i1 %2, label %46, label %3

3:                                                ; preds = %1, %40
  %4 = phi %"class.blink::CSSSelector"* [ %43, %40 ], [ %0, %1 ]
  %5 = bitcast %"class.blink::CSSSelector"* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = lshr i32 %6, 8
  %8 = and i32 %7, 254
  %9 = or i32 %8, 1
  %10 = icmp eq i32 %9, 17
  br i1 %10, label %46, label %11

11:                                               ; preds = %3
  %12 = and i32 %6, 262144
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %40, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %4, i64 0, i32 1
  %16 = bitcast %"union.blink::CSSSelector::DataUnion"* %15 to %"struct.blink::CSSSelector::RareData"**
  %17 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %16, align 8
  %18 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %17, i64 0, i32 6, i32 0, i32 0, i32 0
  %19 = load %"class.blink::CSSSelectorList"*, %"class.blink::CSSSelectorList"** %18, align 8
  %20 = icmp eq %"class.blink::CSSSelectorList"* %19, null
  br i1 %20, label %40, label %21

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.blink::CSSSelectorList", %"class.blink::CSSSelectorList"* %19, i64 0, i32 0
  %23 = load %"class.blink::CSSSelector"*, %"class.blink::CSSSelector"** %22, align 8
  %24 = icmp eq %"class.blink::CSSSelector"* %23, null
  br i1 %24, label %40, label %25

25:                                               ; preds = %21, %35
  %26 = phi %"class.blink::CSSSelector"* [ %34, %35 ], [ %23, %21 ]
  %27 = tail call zeroext i1 @_ZNK5blink11CSSSelector16HasLinkOrVisitedEv(%"class.blink::CSSSelector"* nonnull %26)
  br i1 %27, label %46, label %28

28:                                               ; preds = %25, %28
  %29 = phi %"class.blink::CSSSelector"* [ %34, %28 ], [ %26, %25 ]
  %30 = bitcast %"class.blink::CSSSelector"* %29 to i32*
  %31 = load i32, i32* %30, align 8
  %32 = and i32 %31, 131072
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %29, i64 1
  br i1 %33, label %28, label %35

35:                                               ; preds = %28
  %36 = and i32 %31, 2097152
  %37 = icmp ne i32 %36, 0
  %38 = icmp eq %"class.blink::CSSSelector"* %34, null
  %39 = or i1 %38, %37
  br i1 %39, label %40, label %25

40:                                               ; preds = %35, %21, %11, %14
  %41 = and i32 %6, 131072
  %42 = icmp ne i32 %41, 0
  %43 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %4, i64 1
  %44 = icmp eq %"class.blink::CSSSelector"* %43, null
  %45 = or i1 %44, %42
  br i1 %45, label %46, label %3

46:                                               ; preds = %40, %3, %25, %1
  %47 = phi i1 [ false, %1 ], [ true, %25 ], [ false, %40 ], [ true, %3 ]
  ret i1 %47
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11CSSSelector6SetNthEii(%"class.blink::CSSSelector"* nocapture, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 262144
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  br i1 %7, label %12, label %9

9:                                                ; preds = %3
  %10 = bitcast %"union.blink::CSSSelector::DataUnion"* %8 to %"struct.blink::CSSSelector::RareData"**
  %11 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %10, align 8
  br label %39

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %8, i64 0, i32 0
  %14 = tail call noalias i8* @malloc(i64 64) #14
  %15 = bitcast i8* %14 to %"struct.blink::CSSSelector::RareData"*
  tail call void @_ZN5blink11CSSSelector8RareDataC2ERKN3WTF12AtomicStringE(%"struct.blink::CSSSelector::RareData"* %15, %"class.WTF::AtomicString"* dereferenceable(8) %13) #14
  %16 = ptrtoint i8* %14 to i64
  %17 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  br i1 %24, label %27, label %29

27:                                               ; preds = %20
  %28 = add i32 %26, -1
  store i32 %28, i32* %25, align 4
  br label %29

29:                                               ; preds = %27, %20
  %30 = phi i32 [ %28, %27 ], [ %26, %20 ]
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #14
  br label %33

33:                                               ; preds = %32, %29, %12
  %34 = bitcast %"union.blink::CSSSelector::DataUnion"* %8 to i64*
  store i64 %16, i64* %34, align 8
  %35 = load i32, i32* %4, align 8
  %36 = or i32 %35, 262144
  store i32 %36, i32* %4, align 8
  %37 = bitcast i8* %14 to %"struct.blink::CSSSelector::RareData"*
  %38 = bitcast %"union.blink::CSSSelector::DataUnion"* %8 to %"struct.blink::CSSSelector::RareData"**
  br label %39

39:                                               ; preds = %9, %33
  %40 = phi %"struct.blink::CSSSelector::RareData"** [ %10, %9 ], [ %38, %33 ]
  %41 = phi %"struct.blink::CSSSelector::RareData"* [ %11, %9 ], [ %37, %33 ]
  %42 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %41, i64 0, i32 3, i32 0, i32 0
  store i32 %1, i32* %42, align 8
  %43 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %40, align 8
  %44 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %43, i64 0, i32 3, i32 0, i32 1
  store i32 %2, i32* %44, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink11CSSSelector8MatchNthEj(%"class.blink::CSSSelector"* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  %4 = bitcast %"union.blink::CSSSelector::DataUnion"* %3 to %"struct.blink::CSSSelector::RareData"**
  %5 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %4, align 8
  %6 = icmp ugt i32 %1, 1073741823
  br i1 %6, label %36, label %7, !prof !4

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %5, i64 0, i32 3, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, 1073741824
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %36, label %12, !prof !5

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %5, i64 0, i32 3, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = add i32 %14, 1073741824
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %36, label %17, !prof !5

17:                                               ; preds = %12
  %18 = icmp eq i32 %9, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = icmp eq i32 %14, %1
  br label %36

21:                                               ; preds = %17
  %22 = icmp sgt i32 %9, 0
  br i1 %22, label %23, label %29

23:                                               ; preds = %21
  %24 = icmp sgt i32 %14, %1
  br i1 %24, label %36, label %25

25:                                               ; preds = %23
  %26 = sub nsw i32 %1, %14
  %27 = srem i32 %26, %9
  %28 = icmp eq i32 %27, 0
  br label %36

29:                                               ; preds = %21
  %30 = icmp slt i32 %14, %1
  br i1 %30, label %36, label %31

31:                                               ; preds = %29
  %32 = sub nsw i32 %14, %1
  %33 = sub nsw i32 0, %9
  %34 = srem i32 %32, %33
  %35 = icmp eq i32 %34, 0
  br label %36

36:                                               ; preds = %2, %7, %12, %19, %23, %25, %29, %31
  %37 = phi i1 [ %28, %25 ], [ %35, %31 ], [ %20, %19 ], [ false, %23 ], [ false, %29 ], [ false, %12 ], [ false, %7 ], [ false, %2 ]
  ret i1 %37
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink11CSSSelector8RareData8MatchNthEj(%"struct.blink::CSSSelector::RareData"* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %3 = icmp ugt i32 %1, 1073741823
  br i1 %3, label %33, label %4, !prof !4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, 1073741824
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %33, label %9, !prof !5

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %0, i64 0, i32 3, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, 1073741824
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %33, label %14, !prof !5

14:                                               ; preds = %9
  %15 = icmp eq i32 %6, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %14
  %17 = icmp eq i32 %11, %1
  br label %33

18:                                               ; preds = %14
  %19 = icmp sgt i32 %6, 0
  br i1 %19, label %20, label %26

20:                                               ; preds = %18
  %21 = icmp sgt i32 %11, %1
  br i1 %21, label %33, label %22

22:                                               ; preds = %20
  %23 = sub nsw i32 %1, %11
  %24 = srem i32 %23, %6
  %25 = icmp eq i32 %24, 0
  br label %33

26:                                               ; preds = %18
  %27 = icmp slt i32 %11, %1
  br i1 %27, label %33, label %28

28:                                               ; preds = %26
  %29 = sub nsw i32 %11, %1
  %30 = sub nsw i32 0, %6
  %31 = srem i32 %29, %30
  %32 = icmp eq i32 %31, 0
  br label %33

33:                                               ; preds = %2, %4, %9, %16, %22, %28, %20, %26
  %34 = phi i1 [ %25, %22 ], [ %32, %28 ], [ %17, %16 ], [ false, %20 ], [ false, %26 ], [ false, %9 ], [ false, %4 ], [ false, %2 ]
  ret i1 %34
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink11CSSSelector20MatchesPseudoElementEv(%"class.blink::CSSSelector"* readonly) local_unnamed_addr #2 align 2 {
  %2 = icmp eq %"class.blink::CSSSelector"* %0, null
  br i1 %2, label %18, label %3

3:                                                ; preds = %1, %12
  %4 = phi %"class.blink::CSSSelector"* [ %15, %12 ], [ %0, %1 ]
  %5 = bitcast %"class.blink::CSSSelector"* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, 240
  %8 = icmp eq i32 %7, 80
  br i1 %8, label %18, label %9

9:                                                ; preds = %3
  %10 = and i32 %6, 15
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %9
  %13 = and i32 %6, 131072
  %14 = icmp ne i32 %13, 0
  %15 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %4, i64 1
  %16 = icmp eq %"class.blink::CSSSelector"* %15, null
  %17 = or i1 %16, %14
  br i1 %17, label %18, label %3

18:                                               ; preds = %12, %3, %9, %1
  %19 = phi i1 [ false, %1 ], [ false, %9 ], [ true, %3 ], [ false, %12 ]
  ret i1 %19
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink11CSSSelector26IsTreeAbidingPseudoElementEv(%"class.blink::CSSSelector"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 240
  %5 = icmp eq i32 %4, 80
  br i1 %5, label %6, label %16

6:                                                ; preds = %1
  %7 = lshr i32 %3, 8
  %8 = trunc i32 %7 to i8
  %9 = add i8 %8, -46
  %10 = icmp ult i8 %9, 9
  br i1 %10, label %11, label %16

11:                                               ; preds = %6
  %12 = zext i8 %9 to i9
  %13 = lshr i9 -121, %12
  %14 = and i9 %13, 1
  %15 = icmp ne i9 %14, 0
  ret i1 %15

16:                                               ; preds = %6, %1
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink11CSSSelector18IsAllowedAfterPartEv(%"class.blink::CSSSelector"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 240
  %5 = icmp eq i32 %4, 80
  br i1 %5, label %6, label %10

6:                                                ; preds = %1
  %7 = lshr i32 %3, 8
  %8 = trunc i32 %7 to i8
  switch i8 %8, label %9 [
    i8 46, label %10
    i8 47, label %10
    i8 53, label %10
    i8 54, label %10
    i8 8, label %10
    i8 9, label %10
    i8 75, label %10
    i8 107, label %10
    i8 109, label %10
    i8 110, label %10
    i8 111, label %10
  ]

9:                                                ; preds = %6
  br label %10

10:                                               ; preds = %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %1, %9
  %11 = phi i1 [ false, %9 ], [ false, %1 ], [ true, %6 ], [ true, %6 ], [ true, %6 ], [ true, %6 ], [ true, %6 ], [ true, %6 ], [ true, %6 ], [ true, %6 ], [ true, %6 ], [ true, %6 ], [ true, %6 ]
  ret i1 %11
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink11CSSSelector16HasSlottedPseudoEv(%"class.blink::CSSSelector"* readonly) local_unnamed_addr #6 align 2 {
  %2 = tail call fastcc zeroext i1 @"_ZN5blinkL18ForAnyInTagHistoryIZNKS_11CSSSelector16HasSlottedPseudoEvE3$_1EEbRKT_RKS1_"(%"class.blink::CSSSelector"* dereferenceable(16) %0)
  ret i1 %2
}

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc zeroext i1 @"_ZN5blinkL18ForAnyInTagHistoryIZNKS_11CSSSelector16HasSlottedPseudoEvE3$_1EEbRKT_RKS1_"(%"class.blink::CSSSelector"* readonly dereferenceable(16)) unnamed_addr #6 {
  %2 = icmp eq %"class.blink::CSSSelector"* %0, null
  br i1 %2, label %44, label %3

3:                                                ; preds = %1, %38
  %4 = phi %"class.blink::CSSSelector"* [ %41, %38 ], [ %0, %1 ]
  %5 = bitcast %"class.blink::CSSSelector"* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, 65280
  %8 = icmp eq i32 %7, 26624
  br i1 %8, label %44, label %9

9:                                                ; preds = %3
  %10 = and i32 %6, 262144
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %38, label %12

12:                                               ; preds = %9
  %13 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %4, i64 0, i32 1
  %14 = bitcast %"union.blink::CSSSelector::DataUnion"* %13 to %"struct.blink::CSSSelector::RareData"**
  %15 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %14, align 8
  %16 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %15, i64 0, i32 6, i32 0, i32 0, i32 0
  %17 = load %"class.blink::CSSSelectorList"*, %"class.blink::CSSSelectorList"** %16, align 8
  %18 = icmp eq %"class.blink::CSSSelectorList"* %17, null
  br i1 %18, label %38, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.blink::CSSSelectorList", %"class.blink::CSSSelectorList"* %17, i64 0, i32 0
  %21 = load %"class.blink::CSSSelector"*, %"class.blink::CSSSelector"** %20, align 8
  %22 = icmp eq %"class.blink::CSSSelector"* %21, null
  br i1 %22, label %38, label %23

23:                                               ; preds = %19, %33
  %24 = phi %"class.blink::CSSSelector"* [ %32, %33 ], [ %21, %19 ]
  %25 = tail call fastcc zeroext i1 @"_ZN5blinkL18ForAnyInTagHistoryIZNKS_11CSSSelector16HasSlottedPseudoEvE3$_1EEbRKT_RKS1_"(%"class.blink::CSSSelector"* nonnull dereferenceable(16) %24)
  br i1 %25, label %44, label %26

26:                                               ; preds = %23, %26
  %27 = phi %"class.blink::CSSSelector"* [ %32, %26 ], [ %24, %23 ]
  %28 = bitcast %"class.blink::CSSSelector"* %27 to i32*
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, 131072
  %31 = icmp eq i32 %30, 0
  %32 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %27, i64 1
  br i1 %31, label %26, label %33

33:                                               ; preds = %26
  %34 = and i32 %29, 2097152
  %35 = icmp ne i32 %34, 0
  %36 = icmp eq %"class.blink::CSSSelector"* %32, null
  %37 = or i1 %36, %35
  br i1 %37, label %38, label %23

38:                                               ; preds = %33, %19, %9, %12
  %39 = and i32 %6, 131072
  %40 = icmp ne i32 %39, 0
  %41 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %4, i64 1
  %42 = icmp eq %"class.blink::CSSSelector"* %41, null
  %43 = or i1 %42, %40
  br i1 %43, label %44, label %3

44:                                               ; preds = %38, %3, %23, %1
  %45 = phi i1 [ false, %1 ], [ true, %23 ], [ false, %38 ], [ true, %3 ]
  ret i1 %45
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink11CSSSelector11FollowsPartEv(%"class.blink::CSSSelector"* readonly) local_unnamed_addr #2 align 2 {
  %2 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 131072
  %5 = icmp ne i32 %4, 0
  %6 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 1
  %7 = icmp eq %"class.blink::CSSSelector"* %6, null
  %8 = or i1 %7, %5
  br i1 %8, label %14, label %9

9:                                                ; preds = %1
  %10 = bitcast %"class.blink::CSSSelector"* %6 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 65280
  %13 = icmp eq i32 %12, 3584
  br label %14

14:                                               ; preds = %1, %9
  %15 = phi i1 [ %13, %9 ], [ false, %1 ]
  ret i1 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink11CSSSelector28FormatPseudoTypeForDebuggingENS0_10PseudoTypeE(i32) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.WTF::StringBuilder", align 8
  %5 = alloca %"class.WTF::StringView", align 8
  br label %6

6:                                                ; preds = %154, %1
  %7 = phi %"struct.blink::NameToPseudoStruct"* [ getelementptr inbounds ([95 x %"struct.blink::NameToPseudoStruct"], [95 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL30kPseudoTypeWithoutArgumentsMapE, i64 0, i64 0), %1 ], [ %155, %154 ]
  %8 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %7, i64 0, i32 1
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = icmp eq i32 %10, %0
  br i1 %11, label %20, label %29

12:                                               ; preds = %149
  %13 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %7, i64 4
  br label %20

14:                                               ; preds = %144
  %15 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %7, i64 3
  br label %20

16:                                               ; preds = %139
  %17 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %7, i64 2
  br label %20

18:                                               ; preds = %29
  %19 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %7, i64 1
  br label %20

20:                                               ; preds = %6, %18, %16, %14, %12
  %21 = phi %"struct.blink::NameToPseudoStruct"* [ %13, %12 ], [ %15, %14 ], [ %17, %16 ], [ %19, %18 ], [ %7, %6 ]
  %22 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %21, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = tail call i64 @strlen(i8* nonnull %23) #15
  br label %27

27:                                               ; preds = %20, %25
  %28 = phi i64 [ %26, %25 ], [ 0, %20 ]
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* %23, i64 %28) #14
  br label %110

29:                                               ; preds = %6
  %30 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %7, i64 1, i32 1
  %31 = load i8, i8* %30, align 8
  %32 = zext i8 %31 to i32
  %33 = icmp eq i32 %32, %0
  br i1 %33, label %18, label %139

34:                                               ; preds = %154
  switch i32 %0, label %113 [
    i32 18, label %50
    i32 90, label %35
    i32 108, label %36
    i32 109, label %37
    i32 95, label %38
    i32 96, label %39
    i32 19, label %40
    i32 51, label %41
    i32 52, label %42
    i32 10, label %43
    i32 12, label %44
    i32 13, label %45
    i32 11, label %46
    i32 14, label %47
    i32 104, label %48
    i32 20, label %49
  ]

35:                                               ; preds = %34
  br label %50

36:                                               ; preds = %34
  br label %50

37:                                               ; preds = %34
  br label %50

38:                                               ; preds = %34
  br label %50

39:                                               ; preds = %34
  br label %50

40:                                               ; preds = %34
  br label %50

41:                                               ; preds = %34
  br label %50

42:                                               ; preds = %34
  br label %50

43:                                               ; preds = %34
  br label %50

44:                                               ; preds = %34
  br label %50

45:                                               ; preds = %34
  br label %50

46:                                               ; preds = %34
  br label %50

47:                                               ; preds = %34
  br label %50

48:                                               ; preds = %34
  br label %50

49:                                               ; preds = %34
  br label %50

50:                                               ; preds = %34, %49, %48, %47, %46, %45, %44, %43, %42, %41, %40, %39, %38, %37, %36, %35
  %51 = phi %"struct.blink::NameToPseudoStruct"* [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 0), %34 ], [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 1), %35 ], [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 2), %36 ], [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 3), %37 ], [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 4), %38 ], [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 5), %39 ], [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 6), %40 ], [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 7), %41 ], [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 8), %42 ], [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 9), %43 ], [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 10), %44 ], [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 11), %45 ], [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 12), %46 ], [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 13), %47 ], [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 14), %48 ], [ getelementptr inbounds ([16 x %"struct.blink::NameToPseudoStruct"], [16 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL27kPseudoTypeWithArgumentsMapE, i64 0, i64 15), %49 ]
  %52 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %51, i64 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq i8* %53, null
  br i1 %54, label %57, label %55

55:                                               ; preds = %50
  %56 = tail call i64 @strlen(i8* nonnull %53) #15
  br label %57

57:                                               ; preds = %50, %55
  %58 = phi i64 [ %56, %55 ], [ 0, %50 ]
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* %53, i64 %58) #14
  br label %110

59:                                               ; preds = %113
  %60 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 11
  store i8* %60, i8** %128, align 8
  %61 = urem i32 %135, 10
  %62 = trunc i32 %61 to i8
  %63 = or i8 %62, 48
  store i8 %63, i8* %60, align 1
  %64 = icmp ugt i32 %133, 99
  br i1 %64, label %65, label %81

65:                                               ; preds = %59
  %66 = udiv i32 %133, 100
  %67 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 10
  store i8* %67, i8** %128, align 8
  %68 = urem i32 %66, 10
  %69 = trunc i32 %68 to i8
  %70 = or i8 %69, 48
  store i8 %70, i8* %67, align 2
  %71 = icmp ugt i32 %133, 999
  br i1 %71, label %72, label %81

72:                                               ; preds = %65, %72
  %73 = phi i32 [ %75, %72 ], [ %66, %65 ]
  %74 = load i8*, i8** %128, align 8
  %75 = udiv i32 %73, 10
  %76 = getelementptr inbounds i8, i8* %74, i64 -1
  store i8* %76, i8** %128, align 8
  %77 = urem i32 %75, 10
  %78 = trunc i32 %77 to i8
  %79 = or i8 %78, 48
  store i8 %79, i8* %76, align 1
  %80 = icmp ugt i32 %73, 99
  br i1 %80, label %72, label %81

81:                                               ; preds = %72, %65, %59, %113
  br i1 %131, label %82, label %85

82:                                               ; preds = %81
  %83 = load i8*, i8** %128, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 -1
  store i8* %84, i8** %128, align 8
  store i8 45, i8* %84, align 1
  br label %85

85:                                               ; preds = %81, %82
  %86 = bitcast i8** %128 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = ptrtoint i8* %130 to i64
  %89 = sub i64 %88, %87
  %90 = trunc i64 %89 to i32
  store i32 %90, i32* %129, align 8
  %91 = inttoptr i64 %87 to i8*
  call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* nonnull %4, i8* %91, i32 %90) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %126) #14
  %92 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %4) #14
  %93 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %92, %"class.WTF::StringImpl"** %93, align 8
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %4) #14
  %94 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %115, align 8
  %95 = icmp eq %"class.WTF::StringImpl"* %94, null
  br i1 %95, label %109, label %96

96:                                               ; preds = %85
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %94, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = load atomic i32, i32* %97 monotonic, align 4
  %99 = and i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %94, i64 0, i32 0
  %102 = load i32, i32* %101, align 4
  br i1 %100, label %103, label %105

103:                                              ; preds = %96
  %104 = add i32 %102, -1
  store i32 %104, i32* %101, align 4
  br label %105

105:                                              ; preds = %103, %96
  %106 = phi i32 [ %104, %103 ], [ %102, %96 ]
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %105
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %94) #14
  br label %109

109:                                              ; preds = %85, %105, %108
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %114) #14
  br label %110

110:                                              ; preds = %57, %27, %109
  %111 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %112 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %111, align 8
  ret %"class.WTF::StringImpl"* %112

113:                                              ; preds = %34
  %114 = bitcast %"class.WTF::StringBuilder"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %114) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %114, i8 -86, i64 48, i1 false)
  %115 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %115, align 8
  %116 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %4, i64 0, i32 1
  %117 = bitcast %union.anon.617* %116 to i8*
  store i8 0, i8* %117, align 8
  %118 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %4, i64 0, i32 2
  store i32 0, i32* %118, align 8
  %119 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %4, i64 0, i32 3
  store i8 1, i8* %119, align 4
  %120 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %4, i64 0, i32 4
  store i8 0, i8* %120, align 1
  %121 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %121) #14
  %122 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %123 = bitcast %"class.WTF::StringView"* %5 to i64*
  store i64 %122, i64* %123, align 8
  %124 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i8** %124, align 8
  %125 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 7, i32* %125, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %4, %"class.WTF::StringView"* nonnull dereferenceable(24) %5)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %121) #14
  %126 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %126) #14
  %127 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 12
  %128 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 2
  %129 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 3
  %130 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 13
  %131 = icmp slt i32 %0, 0
  %132 = sub i32 0, %0
  %133 = select i1 %131, i32 %132, i32 %0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %126, i8 -86, i64 32, i1 false) #14
  store i8* %127, i8** %128, align 8
  %134 = urem i32 %133, 10
  %135 = udiv i32 %133, 10
  %136 = trunc i32 %134 to i8
  %137 = or i8 %136, 48
  store i8 %137, i8* %127, align 4
  %138 = icmp ugt i32 %133, 9
  br i1 %138, label %59, label %81

139:                                              ; preds = %29
  %140 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %7, i64 2, i32 1
  %141 = load i8, i8* %140, align 8
  %142 = zext i8 %141 to i32
  %143 = icmp eq i32 %142, %0
  br i1 %143, label %16, label %144

144:                                              ; preds = %139
  %145 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %7, i64 3, i32 1
  %146 = load i8, i8* %145, align 8
  %147 = zext i8 %146 to i32
  %148 = icmp eq i32 %147, %0
  br i1 %148, label %14, label %149

149:                                              ; preds = %144
  %150 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %7, i64 4, i32 1
  %151 = load i8, i8* %150, align 8
  %152 = zext i8 %151 to i32
  %153 = icmp eq i32 %152, %0
  br i1 %153, label %12, label %154

154:                                              ; preds = %149
  %155 = getelementptr inbounds %"struct.blink::NameToPseudoStruct", %"struct.blink::NameToPseudoStruct"* %7, i64 5
  %156 = icmp eq %"struct.blink::NameToPseudoStruct"* %155, getelementptr inbounds ([95 x %"struct.blink::NameToPseudoStruct"], [95 x %"struct.blink::NameToPseudoStruct"]* @_ZN5blinkL30kPseudoTypeWithoutArgumentsMapE, i64 1, i64 0)
  br i1 %156, label %34, label %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11CSSSelector8RareDataC2ERKN3WTF12AtomicStringE(%"struct.blink::CSSSelector::RareData"* nocapture, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #14
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !4

22:                                               ; preds = %13
  tail call void @llvm.trap() #14
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %25

25:                                               ; preds = %2, %8, %23
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %27 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %26, %"class.WTF::StringImpl"** %27, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %28, label %46, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %46

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i33
  %38 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %37, i33 1) #14
  %39 = extractvalue { i33, i1 } %38, 1
  %40 = extractvalue { i33, i1 } %38, 0
  %41 = icmp slt i33 %40, 0
  %42 = or i1 %39, %41
  br i1 %42, label %43, label %44, !prof !4

43:                                               ; preds = %34
  tail call void @llvm.trap() #14
  unreachable

44:                                               ; preds = %34
  %45 = trunc i33 %40 to i32
  store i32 %45, i32* %35, align 4
  br label %46

46:                                               ; preds = %25, %29, %44
  %47 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %0, i64 0, i32 3
  %48 = bitcast %union.anon* %47 to i64*
  store i64 0, i64* %48, align 8
  %49 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10g_any_nameE, align 8
  %50 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %49, i64 0, i32 0, i32 0
  %51 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %50, align 8
  %52 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %0, i64 0, i32 4, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %51, %"class.blink::QualifiedName::QualifiedNameImpl"** %52, align 8
  %53 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %51, null
  br i1 %53, label %61, label %54

54:                                               ; preds = %46
  %55 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %51, i64 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = and i32 %56, 16777216
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %54
  %60 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %51, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %60) #14
  br label %61

61:                                               ; preds = %46, %54, %59
  %62 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %63 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %64, %"class.WTF::StringImpl"** %65, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %66, label %84, label %67

67:                                               ; preds = %61
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %67
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = zext i32 %74 to i33
  %76 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %75, i33 1) #14
  %77 = extractvalue { i33, i1 } %76, 1
  %78 = extractvalue { i33, i1 } %76, 0
  %79 = icmp slt i33 %78, 0
  %80 = or i1 %77, %79
  br i1 %80, label %81, label %82, !prof !4

81:                                               ; preds = %72
  tail call void @llvm.trap() #14
  unreachable

82:                                               ; preds = %72
  %83 = trunc i33 %78 to i32
  store i32 %83, i32* %73, align 4
  br label %84

84:                                               ; preds = %61, %67, %82
  %85 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %0, i64 0, i32 6
  %86 = bitcast %"class.std::__1::unique_ptr"* %85 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11CSSSelector8RareDataD2Ev(%"struct.blink::CSSSelector::RareData"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %0, i64 0, i32 7, i32 0, i32 0, i32 0
  %3 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %2, align 8
  store %"class.WTF::Vector"* null, %"class.WTF::Vector"** %2, align 8
  %4 = icmp eq %"class.WTF::Vector"* %3, null
  br i1 %4, label %45, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %6, align 8
  %8 = icmp eq %"class.WTF::AtomicString"* %7, null
  br i1 %8, label %43, label %9, !prof !2

9:                                                ; preds = %5
  %10 = bitcast %"class.WTF::AtomicString"* %7 to i8*
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %41, label %14, !prof !4

14:                                               ; preds = %9
  %15 = zext i32 %12 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %7, i64 %15
  br label %17

17:                                               ; preds = %35, %14
  %18 = phi %"class.WTF::AtomicString"* [ %36, %35 ], [ %7, %14 ]
  %19 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %18, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %31

29:                                               ; preds = %22
  %30 = add i32 %28, -1
  store i32 %30, i32* %27, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ %28, %22 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %20) #14
  br label %35

35:                                               ; preds = %34, %31, %17
  %36 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %18, i64 1
  %37 = icmp eq %"class.WTF::AtomicString"* %36, %16
  br i1 %37, label %38, label %17

38:                                               ; preds = %35
  store i32 0, i32* %11, align 4
  %39 = bitcast %"class.WTF::Vector"* %3 to i8**
  %40 = load i8*, i8** %39, align 8
  br label %41

41:                                               ; preds = %38, %9
  %42 = phi i8* [ %40, %38 ], [ %10, %9 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %42) #14
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %6, align 8
  br label %43

43:                                               ; preds = %41, %5
  %44 = bitcast %"class.WTF::Vector"* %3 to i8*
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %44) #14
  br label %45

45:                                               ; preds = %1, %43
  %46 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %47 = load %"class.blink::CSSSelectorList"*, %"class.blink::CSSSelectorList"** %46, align 8
  store %"class.blink::CSSSelectorList"* null, %"class.blink::CSSSelectorList"** %46, align 8
  %48 = icmp eq %"class.blink::CSSSelectorList"* %47, null
  br i1 %48, label %56, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.blink::CSSSelectorList", %"class.blink::CSSSelectorList"* %47, i64 0, i32 0
  %51 = load %"class.blink::CSSSelector"*, %"class.blink::CSSSelector"** %50, align 8
  %52 = icmp eq %"class.blink::CSSSelector"* %51, null
  br i1 %52, label %54, label %53

53:                                               ; preds = %49
  tail call void @_ZN5blink15CSSSelectorList15DeleteSelectorsEv(%"class.blink::CSSSelectorList"* nonnull %47) #14
  br label %54

54:                                               ; preds = %53, %49
  %55 = bitcast %"class.blink::CSSSelectorList"* %47 to i8*
  tail call void @free(i8* %55) #14
  br label %56

56:                                               ; preds = %45, %54
  %57 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %58 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  %59 = icmp eq %"class.WTF::StringImpl"* %58, null
  br i1 %59, label %73, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  br i1 %64, label %67, label %69

67:                                               ; preds = %60
  %68 = add i32 %66, -1
  store i32 %68, i32* %65, align 4
  br label %69

69:                                               ; preds = %67, %60
  %70 = phi i32 [ %68, %67 ], [ %66, %60 ]
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %69
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %58) #14
  br label %73

73:                                               ; preds = %56, %69, %72
  %74 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %0, i64 0, i32 4
  tail call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %74) #14
  %75 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %76 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %75, align 8
  %77 = icmp eq %"class.WTF::StringImpl"* %76, null
  br i1 %77, label %91, label %78

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load atomic i32, i32* %79 monotonic, align 4
  %81 = and i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  br i1 %82, label %85, label %87

85:                                               ; preds = %78
  %86 = add i32 %84, -1
  store i32 %86, i32* %83, align 4
  br label %87

87:                                               ; preds = %85, %78
  %88 = phi i32 [ %86, %85 ], [ %84, %78 ]
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %87
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %76) #14
  br label %91

91:                                               ; preds = %73, %87, %90
  %92 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %93 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %92, align 8
  %94 = icmp eq %"class.WTF::StringImpl"* %93, null
  br i1 %94, label %108, label %95

95:                                               ; preds = %91
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %93, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %97 = load atomic i32, i32* %96 monotonic, align 4
  %98 = and i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %93, i64 0, i32 0
  %101 = load i32, i32* %100, align 4
  br i1 %99, label %102, label %104

102:                                              ; preds = %95
  %103 = add i32 %101, -1
  store i32 %103, i32* %100, align 4
  br label %104

104:                                              ; preds = %102, %95
  %105 = phi i32 [ %103, %102 ], [ %101, %95 ]
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %108

107:                                              ; preds = %104
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %93) #14
  br label %108

108:                                              ; preds = %91, %104, %107
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"*) unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11CSSSelector12SetPartNamesENSt3__110unique_ptrIN3WTF6VectorINS3_12AtomicStringELj0ENS3_18PartitionAllocatorEEENS1_14default_deleteIS7_EEEE(%"class.blink::CSSSelector"* nocapture, %"class.WTF::Vector"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.WTF::Vector"* %1 to i64
  %4 = bitcast %"class.blink::CSSSelector"* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 262144
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.blink::CSSSelector", %"class.blink::CSSSelector"* %0, i64 0, i32 1
  br i1 %7, label %12, label %9

9:                                                ; preds = %2
  %10 = bitcast %"union.blink::CSSSelector::DataUnion"* %8 to %"struct.blink::CSSSelector::RareData"**
  %11 = load %"struct.blink::CSSSelector::RareData"*, %"struct.blink::CSSSelector::RareData"** %10, align 8
  br label %38

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %8, i64 0, i32 0
  %14 = tail call noalias i8* @malloc(i64 64) #14
  %15 = bitcast i8* %14 to %"struct.blink::CSSSelector::RareData"*
  tail call void @_ZN5blink11CSSSelector8RareDataC2ERKN3WTF12AtomicStringE(%"struct.blink::CSSSelector::RareData"* %15, %"class.WTF::AtomicString"* dereferenceable(8) %13) #14
  %16 = ptrtoint i8* %14 to i64
  %17 = getelementptr inbounds %"union.blink::CSSSelector::DataUnion", %"union.blink::CSSSelector::DataUnion"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  br i1 %24, label %27, label %29

27:                                               ; preds = %20
  %28 = add i32 %26, -1
  store i32 %28, i32* %25, align 4
  br label %29

29:                                               ; preds = %27, %20
  %30 = phi i32 [ %28, %27 ], [ %26, %20 ]
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #14
  br label %33

33:                                               ; preds = %32, %29, %12
  %34 = bitcast %"union.blink::CSSSelector::DataUnion"* %8 to i64*
  store i64 %16, i64* %34, align 8
  %35 = load i32, i32* %4, align 8
  %36 = or i32 %35, 262144
  store i32 %36, i32* %4, align 8
  %37 = bitcast i8* %14 to %"struct.blink::CSSSelector::RareData"*
  br label %38

38:                                               ; preds = %9, %33
  %39 = phi %"struct.blink::CSSSelector::RareData"* [ %11, %9 ], [ %37, %33 ]
  %40 = getelementptr inbounds %"struct.blink::CSSSelector::RareData", %"struct.blink::CSSSelector::RareData"* %39, i64 0, i32 7
  %41 = getelementptr inbounds %"class.std::__1::unique_ptr.6", %"class.std::__1::unique_ptr.6"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %41, align 8
  %43 = bitcast %"class.std::__1::unique_ptr.6"* %40 to i64*
  store i64 %3, i64* %43, align 8
  %44 = icmp eq %"class.WTF::Vector"* %42, null
  br i1 %44, label %85, label %45

45:                                               ; preds = %38
  %46 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %42, i64 0, i32 0, i32 0, i32 0
  %47 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %46, align 8
  %48 = icmp eq %"class.WTF::AtomicString"* %47, null
  br i1 %48, label %83, label %49, !prof !2

49:                                               ; preds = %45
  %50 = bitcast %"class.WTF::AtomicString"* %47 to i8*
  %51 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %42, i64 0, i32 0, i32 0, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %81, label %54, !prof !4

54:                                               ; preds = %49
  %55 = zext i32 %52 to i64
  %56 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %47, i64 %55
  br label %57

57:                                               ; preds = %75, %54
  %58 = phi %"class.WTF::AtomicString"* [ %76, %75 ], [ %47, %54 ]
  %59 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %58, i64 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %75, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  br i1 %66, label %69, label %71

69:                                               ; preds = %62
  %70 = add i32 %68, -1
  store i32 %70, i32* %67, align 4
  br label %71

71:                                               ; preds = %69, %62
  %72 = phi i32 [ %70, %69 ], [ %68, %62 ]
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #14
  br label %75

75:                                               ; preds = %74, %71, %57
  %76 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %58, i64 1
  %77 = icmp eq %"class.WTF::AtomicString"* %76, %56
  br i1 %77, label %78, label %57

78:                                               ; preds = %75
  store i32 0, i32* %51, align 4
  %79 = bitcast %"class.WTF::Vector"* %42 to i8**
  %80 = load i8*, i8** %79, align 8
  br label %81

81:                                               ; preds = %78, %49
  %82 = phi i8* [ %80, %78 ], [ %50, %49 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %82) #14
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %46, align 8
  br label %83

83:                                               ; preds = %81, %45
  %84 = bitcast %"class.WTF::Vector"* %42 to i8*
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %84) #14
  br label %85

85:                                               ; preds = %83, %38
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #8

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"*, i8 zeroext) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca i16, align 2
  %4 = alloca i8, align 1
  store i8 %1, i8* %4, align 1
  %5 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 4, !range !3
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %35

8:                                                ; preds = %2
  %9 = zext i8 %1 to i16
  %10 = bitcast i16* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %10)
  store i16 %9, i16* %3, align 2
  %11 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %12 = load i8, i8* %11, align 1, !range !3
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %8
  tail call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* %0, i32 1) #14
  br label %15

15:                                               ; preds = %14, %8
  %16 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %18, %20
  br i1 %21, label %29, label %22, !prof !4

22:                                               ; preds = %15
  %23 = bitcast %union.anon.617* %16 to i16**
  %24 = load i16*, i16** %23, align 8
  %25 = zext i32 %18 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  store i16 %9, i16* %26, align 2
  %27 = load i32, i32* %17, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %17, align 4
  br label %31

29:                                               ; preds = %15
  %30 = bitcast %union.anon.617* %16 to %"class.WTF::Vector.623"*
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.623"* %30, i16* nonnull dereferenceable(2) %3) #14
  br label %31

31:                                               ; preds = %22, %29
  %32 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, 1
  store i32 %34, i32* %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %10)
  br label %59

35:                                               ; preds = %2
  %36 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %37 = load i8, i8* %36, align 1, !range !3
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %35
  tail call void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"* %0, i32 1) #14
  br label %40

40:                                               ; preds = %35, %39
  %41 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0
  %42 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %43, %45
  br i1 %46, label %54, label %47, !prof !4

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %41, i64 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = zext i32 %43 to i64
  %51 = getelementptr inbounds i8, i8* %49, i64 %50
  store i8 %1, i8* %51, align 1
  %52 = load i32, i32* %42, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %42, align 4
  br label %55

54:                                               ; preds = %40
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector.618"* %41, i8* nonnull dereferenceable(1) %4) #14
  br label %55

55:                                               ; preds = %47, %54
  %56 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %57 = load i32, i32* %56, align 8
  %58 = add i32 %57, 1
  store i32 %58, i32* %56, align 8
  br label %59

59:                                               ; preds = %55, %31
  ret void
}

declare void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #5

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.623"*, i16* dereferenceable(2)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = icmp ugt i16* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i16, i16* %7, i64 %10
  %12 = icmp ugt i16* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.623"* %0, i32 %5) #14
  %14 = load i16*, i16** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint i16* %1 to i64
  %17 = ptrtoint i16* %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 1
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.623"* %0, i32 %5) #14
  %20 = load i16*, i16** %6, align 8
  %21 = getelementptr inbounds i16, i16* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi i16* [ %14, %13 ], [ %20, %15 ]
  %24 = phi i16* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i16, i16* %23, i64 %26
  %28 = load i16, i16* %24, align 2
  store i16 %28, i16* %27, align 2
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.623"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #14
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #14
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.126, i64 0, i64 0), i8* %15, i8* %16) #14
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.127, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #14
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #14
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #14
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !2

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = icmp eq i16* %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 8
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %37) #14
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #14
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.623"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 1
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector.623"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 8, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.623"* %0, i32 %27) #14
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #5

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #5

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.623"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 9
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = icmp eq i16* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to i16*
  %10 = icmp eq i16* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.623"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector.623"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !4

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast i16* %6 to i8*
  %27 = shl nuw nsw i64 %25, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %8, i8* nonnull align 2 %26, i64 %27, i1 false) #14
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.624"* %19, i16* nonnull %6) #14
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %30) #14
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #14
  %33 = lshr i64 %31, 1
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load i16*, i16** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne i16* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !2

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast i16* %36 to i8*
  %45 = shl nuw nsw i64 %43, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %32, i8* nonnull align 2 %44, i64 %45, i1 false) #14
  %46 = load i16*, i16** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi i16* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to i16*
  %51 = icmp eq i16* %48, %50
  br i1 %51, label %54, label %52, !prof !2

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.624"* %53, i16* %48) #14
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector.623"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector.623", %"class.WTF::Vector.623"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #14
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #14
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.129, i64 0, i64 0), i8* %11, i8* %12) #14
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.130, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #14
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #14
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #14
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #14
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #5

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.624"*, i16*) local_unnamed_addr #9 comdat align 2 {
  %3 = bitcast i16* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #14
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #5

declare void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #5

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector.618"*, i8* dereferenceable(1)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = icmp ugt i8* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.618"* %0, i32 %5) #14
  %14 = load i8*, i8** %6, align 8
  br label %21

15:                                               ; preds = %9
  %16 = ptrtoint i8* %1 to i64
  %17 = ptrtoint i8* %7 to i64
  %18 = sub i64 %16, %17
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.618"* %0, i32 %5) #14
  %19 = load i8*, i8** %6, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 %18
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ %14, %13 ], [ %19, %15 ]
  %23 = phi i8* [ %1, %13 ], [ %20, %15 ]
  %24 = load i32, i32* %3, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %22, i64 %25
  %27 = load i8, i8* %23, align 1
  store i8 %27, i8* %26, align 1
  %28 = load i32, i32* %3, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.618"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #14
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #14
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.126, i64 0, i64 0), i8* %15, i8* %16) #14
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.127, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #14
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #14
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #14
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %50, !prof !2

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %49

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 16
  br i1 %35, label %36, label %43

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %37) #14
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #14
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.618"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = trunc i64 %38 to i32
  br label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0, i32 1, i64 0
  %45 = ptrtoint i8* %44 to i64
  %46 = bitcast %"class.WTF::Vector.618"* %0 to i64*
  store atomic i64 %45, i64* %46 monotonic, align 8
  br label %47

47:                                               ; preds = %43, %36
  %48 = phi i32 [ 16, %43 ], [ %42, %36 ]
  store i32 %48, i32* %6, align 8
  br label %50

49:                                               ; preds = %30
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.618"* %0, i32 %27) #14
  br label %50

50:                                               ; preds = %23, %47, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.618"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 17
  br i1 %3, label %4, label %26

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = icmp eq i8* %8, %6
  %10 = or i1 %7, %9
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = ptrtoint i8* %8 to i64
  %13 = bitcast %"class.WTF::Vector.618"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %14, align 8
  br label %51

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0
  %19 = ptrtoint i8* %8 to i64
  %20 = bitcast %"class.WTF::Vector.618"* %0 to i64*
  store atomic i64 %19, i64* %20 monotonic, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %21, align 8
  %22 = icmp eq i8* %8, null
  br i1 %22, label %25, label %23, !prof !4

23:                                               ; preds = %15
  %24 = zext i32 %17 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %8, i8* nonnull align 1 %6, i64 %24, i1 false) #14
  br label %25

25:                                               ; preds = %23, %15
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.619"* %18, i8* nonnull %6) #14
  br label %51

26:                                               ; preds = %2
  %27 = zext i32 %1 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %27) #14
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #14
  %30 = ptrtoint i8* %29 to i64
  %31 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ne i8* %29, null
  %34 = icmp ne i8* %32, null
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %41, !prof !2

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %29, i8* nonnull align 1 %32, i64 %39, i1 false) #14
  %40 = load i8*, i8** %31, align 8
  br label %41

41:                                               ; preds = %26, %36
  %42 = phi i8* [ %32, %26 ], [ %40, %36 ]
  %43 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0, i32 1, i64 0
  %44 = icmp eq i8* %43, %42
  br i1 %44, label %47, label %45, !prof !2

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.619"* %46, i8* %42) #14
  br label %47

47:                                               ; preds = %41, %45
  %48 = bitcast %"class.WTF::Vector.618"* %0 to i64*
  store atomic i64 %30, i64* %48 monotonic, align 8
  %49 = trunc i64 %28 to i32
  %50 = getelementptr inbounds %"class.WTF::Vector.618", %"class.WTF::Vector.618"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %49, i32* %50, align 8
  br label %51

51:                                               ; preds = %25, %47, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #14
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #14
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.129, i64 0, i64 0), i8* %11, i8* %12) #14
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.130, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #14
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #14
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #14
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #14
  ret i64 %20
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.619"*, i8*) local_unnamed_addr #9 comdat align 2 {
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %1) #14
  ret void
}

declare void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"*, i8*, i32) local_unnamed_addr #5

declare void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"*, i16*, i32) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #10

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #11

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #5

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #12

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #5

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #5

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN5blink13QualifiedName17QualifiedNameImplD1Ev(%"class.blink::QualifiedName::QualifiedNameImpl"*) unnamed_addr #7

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #7

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #5

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #5

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #13

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8*, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS_6StringES1_EC2ES1_S1_(%"class.WTF::StringAppend"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1, %"class.WTF::StringImpl"** %4, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %23

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i33
  %15 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %14, i33 1) #14
  %16 = extractvalue { i33, i1 } %15, 1
  %17 = extractvalue { i33, i1 } %15, 0
  %18 = icmp slt i33 %17, 0
  %19 = or i1 %16, %18
  br i1 %19, label %20, label %21, !prof !4

20:                                               ; preds = %11
  tail call void @llvm.trap() #14
  unreachable

21:                                               ; preds = %11
  %22 = trunc i33 %17 to i32
  store i32 %22, i32* %12, align 4
  br label %23

23:                                               ; preds = %3, %6, %21
  %24 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %24, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %25, label %55, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %32 = load i32, i32* %31, align 4
  br i1 %30, label %33, label %43

33:                                               ; preds = %26
  %34 = zext i32 %32 to i33
  %35 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %34, i33 1) #14
  %36 = extractvalue { i33, i1 } %35, 1
  %37 = extractvalue { i33, i1 } %35, 0
  %38 = icmp slt i33 %37, 0
  %39 = or i1 %36, %38
  br i1 %39, label %40, label %41, !prof !4

40:                                               ; preds = %33
  tail call void @llvm.trap() #14
  unreachable

41:                                               ; preds = %33
  %42 = trunc i33 %37 to i32
  store i32 %42, i32* %31, align 4
  br label %43

43:                                               ; preds = %26, %41
  %44 = phi i32 [ %42, %41 ], [ %32, %26 ]
  %45 = load atomic i32, i32* %27 monotonic, align 4
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %51

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %50 = add i32 %44, -1
  store i32 %50, i32* %49, align 4
  br label %51

51:                                               ; preds = %48, %43
  %52 = phi i32 [ %50, %48 ], [ %44, %43 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #14
  br label %55

55:                                               ; preds = %23, %51, %54
  br i1 %5, label %69, label %56

56:                                               ; preds = %55
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %62 = load i32, i32* %61, align 4
  br i1 %60, label %63, label %65

63:                                               ; preds = %56
  %64 = add i32 %62, -1
  store i32 %64, i32* %61, align 4
  br label %65

65:                                               ; preds = %63, %56
  %66 = phi i32 [ %64, %63 ], [ %62, %56 ]
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %65
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #14
  br label %69

69:                                               ; preds = %55, %65, %68
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS_6StringES1_E6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  br label %14

14:                                               ; preds = %1, %11
  %15 = phi i32 [ %13, %11 ], [ 0, %1 ]
  %16 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  br label %22

22:                                               ; preds = %14, %19
  %23 = phi i32 [ %21, %19 ], [ 0, %14 ]
  %24 = add i32 %23, %15
  %25 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #14
  %26 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %26, align 8
  %27 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27)
  %28 = icmp ult i32 %24, %15
  br i1 %28, label %30, label %29

29:                                               ; preds = %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* null, i8** %26, align 8
  br label %39

30:                                               ; preds = %22
  %31 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %24) #14
  %32 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %15) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.131, i64 0, i64 0), i8* %31, i8* %32) #14
  %33 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* %34, i8** %26, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %30
  %37 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.132, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #14
  %38 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #14
  br label %39

39:                                               ; preds = %29, %30, %36
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #14
  %40 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #14
  %41 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %41, align 8
  %42 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42)
  %43 = icmp ult i32 %24, %23
  br i1 %43, label %45, label %44

44:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* null, i8** %41, align 8
  br label %54

45:                                               ; preds = %39
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %24) #14
  %47 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.133, i64 0, i64 0), i8* %46, i8* %47) #14
  %48 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* %49, i8** %41, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %45
  %52 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.132, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #14
  %53 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #14
  br label %54

54:                                               ; preds = %44, %45, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #14
  ret i32 %24
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #5

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.651"*, i8*) local_unnamed_addr #5

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.651"*, i16*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_IPKcNS_6StringEEES3_EC2ES4_S3_(%"class.WTF::StringAppend.628"*, i8*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = bitcast %"class.WTF::StringAppend.628"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %7, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %8, label %26, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %26

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #14
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !4

23:                                               ; preds = %14
  tail call void @llvm.trap() #14
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %26

26:                                               ; preds = %4, %9, %24
  %27 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %3, %"class.WTF::StringImpl"** %27, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %28, label %58, label %29

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %46

36:                                               ; preds = %29
  %37 = zext i32 %35 to i33
  %38 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %37, i33 1) #14
  %39 = extractvalue { i33, i1 } %38, 1
  %40 = extractvalue { i33, i1 } %38, 0
  %41 = icmp slt i33 %40, 0
  %42 = or i1 %39, %41
  br i1 %42, label %43, label %44, !prof !4

43:                                               ; preds = %36
  tail call void @llvm.trap() #14
  unreachable

44:                                               ; preds = %36
  %45 = trunc i33 %40 to i32
  store i32 %45, i32* %34, align 4
  br label %46

46:                                               ; preds = %29, %44
  %47 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %48 = load atomic i32, i32* %30 monotonic, align 4
  %49 = and i32 %48, 2
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %46
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %53 = add i32 %47, -1
  store i32 %53, i32* %52, align 4
  br label %54

54:                                               ; preds = %51, %46
  %55 = phi i32 [ %53, %51 ], [ %47, %46 ]
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #14
  br label %58

58:                                               ; preds = %26, %54, %57
  br i1 %8, label %72, label %59

59:                                               ; preds = %58
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = and i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %65 = load i32, i32* %64, align 4
  br i1 %63, label %66, label %68

66:                                               ; preds = %59
  %67 = add i32 %65, -1
  store i32 %67, i32* %64, align 4
  br label %68

68:                                               ; preds = %66, %59
  %69 = phi i32 [ %67, %66 ], [ %65, %59 ]
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %68
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #14
  br label %72

72:                                               ; preds = %58, %68, %71
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_E6lengthEv(%"class.WTF::StringAppend.628"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = tail call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.629"* %8) #14
  %18 = add i32 %17, %16
  %19 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #14
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = tail call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.629"* %8) #14
  %22 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp ult i32 %18, %21
  br i1 %23, label %25, label %24

24:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %20, align 8
  br label %34

25:                                               ; preds = %15
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #14
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.131, i64 0, i64 0), i8* %26, i8* %27) #14
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %20, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.132, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #14
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #14
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #14
  %35 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #14
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %36, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %18, %16
  br i1 %38, label %40, label %39

39:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %36, align 8
  br label %49

40:                                               ; preds = %34
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #14
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.133, i64 0, i64 0), i8* %41, i8* %42) #14
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %36, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.132, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #14
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #14
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #14
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_E7WriteToEPh(%"class.WTF::StringAppend.628"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.653", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #14
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %5, i64 0, i32 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %0, i64 0, i32 1, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %22

16:                                               ; preds = %2
  %17 = ptrtoint %"class.WTF::StringImpl"* %12 to i64
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  %21 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  br label %22

22:                                               ; preds = %14, %16
  %23 = phi i8* [ null, %14 ], [ %21, %16 ]
  %24 = phi i64 [ %15, %14 ], [ %17, %16 ]
  %25 = phi i32 [ 0, %14 ], [ %19, %16 ]
  %26 = bitcast %"class.WTF::StringTypeAdapter"* %5 to i64*
  store i64 %24, i64* %26, align 8
  store i8* %23, i8** %8, align 8
  store i32 %25, i32* %9, align 8
  %27 = bitcast %"class.WTF::StringTypeAdapter.653"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #14
  %28 = getelementptr inbounds %"class.WTF::StringTypeAdapter.653", %"class.WTF::StringTypeAdapter.653"* %3, i64 0, i32 1
  %29 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 16, i1 false) #14
  %30 = load i8*, i8** %29, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.653"* nonnull %3, i8* %30) #14
  %31 = bitcast %"class.WTF::StringTypeAdapter"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #14
  %32 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0, i32 0, i32 1
  %33 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0, i32 0, i32 2
  %34 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 24, i1 false) #14
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %36, label %37, label %39

37:                                               ; preds = %22
  %38 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %45

39:                                               ; preds = %22
  %40 = ptrtoint %"class.WTF::StringImpl"* %35 to i64
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 1
  %44 = bitcast %"class.WTF::StringImpl"* %43 to i8*
  br label %45

45:                                               ; preds = %37, %39
  %46 = phi i8* [ null, %37 ], [ %44, %39 ]
  %47 = phi i64 [ %38, %37 ], [ %40, %39 ]
  %48 = phi i32 [ 0, %37 ], [ %42, %39 ]
  %49 = bitcast %"class.WTF::StringTypeAdapter"* %4 to i64*
  store i64 %47, i64* %49, align 8
  store i8* %46, i8** %32, align 8
  store i32 %48, i32* %33, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.653"* nonnull %3, i8* %1) #14
  %50 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0
  %51 = load i32, i32* %28, align 8
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %1, i64 %52
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.651"* nonnull %50, i8* %53) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #14
  %54 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %5, i64 0, i32 0
  %55 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.629"* %6) #14
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %1, i64 %56
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.651"* nonnull %54, i8* %57) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES3_E7WriteToEPDs(%"class.WTF::StringAppend.628"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.653", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #14
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %5, i64 0, i32 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %0, i64 0, i32 1, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %22

16:                                               ; preds = %2
  %17 = ptrtoint %"class.WTF::StringImpl"* %12 to i64
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  %21 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  br label %22

22:                                               ; preds = %14, %16
  %23 = phi i8* [ null, %14 ], [ %21, %16 ]
  %24 = phi i64 [ %15, %14 ], [ %17, %16 ]
  %25 = phi i32 [ 0, %14 ], [ %19, %16 ]
  %26 = bitcast %"class.WTF::StringTypeAdapter"* %5 to i64*
  store i64 %24, i64* %26, align 8
  store i8* %23, i8** %8, align 8
  store i32 %25, i32* %9, align 8
  %27 = bitcast %"class.WTF::StringTypeAdapter.653"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #14
  %28 = getelementptr inbounds %"class.WTF::StringTypeAdapter.653", %"class.WTF::StringTypeAdapter.653"* %3, i64 0, i32 1
  %29 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 16, i1 false) #14
  %30 = load i8*, i8** %29, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.653"* nonnull %3, i8* %30) #14
  %31 = bitcast %"class.WTF::StringTypeAdapter"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #14
  %32 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0, i32 0, i32 1
  %33 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0, i32 0, i32 2
  %34 = getelementptr inbounds %"class.WTF::StringAppend.628", %"class.WTF::StringAppend.628"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 24, i1 false) #14
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %36, label %37, label %39

37:                                               ; preds = %22
  %38 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %45

39:                                               ; preds = %22
  %40 = ptrtoint %"class.WTF::StringImpl"* %35 to i64
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 1
  %44 = bitcast %"class.WTF::StringImpl"* %43 to i8*
  br label %45

45:                                               ; preds = %37, %39
  %46 = phi i8* [ null, %37 ], [ %44, %39 ]
  %47 = phi i64 [ %38, %37 ], [ %40, %39 ]
  %48 = phi i32 [ 0, %37 ], [ %42, %39 ]
  %49 = bitcast %"class.WTF::StringTypeAdapter"* %4 to i64*
  store i64 %47, i64* %49, align 8
  store i8* %46, i8** %32, align 8
  store i32 %48, i32* %33, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.653"* nonnull %3, i16* %1) #14
  %50 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0
  %51 = load i32, i32* %28, align 8
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds i16, i16* %1, i64 %52
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.651"* nonnull %50, i16* %53) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #14
  %54 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %5, i64 0, i32 0
  %55 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.629"* %6) #14
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds i16, i16* %1, i64 %56
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.651"* nonnull %54, i16* %57) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #14
  ret void
}

declare void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.653"*, i8*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.629"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.653", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.WTF::StringTypeAdapter.653"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #14
  %10 = getelementptr inbounds %"class.WTF::StringTypeAdapter.653", %"class.WTF::StringTypeAdapter.653"* %4, i64 0, i32 1
  %11 = getelementptr inbounds %"class.WTF::StringAppend.629", %"class.WTF::StringAppend.629"* %0, i64 0, i32 0
  %12 = bitcast %"class.WTF::StringTypeAdapter.653"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false)
  %13 = load i8*, i8** %11, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.653"* nonnull %4, i8* %13) #14
  %14 = getelementptr inbounds %"class.WTF::StringAppend.629", %"class.WTF::StringAppend.629"* %0, i64 0, i32 1, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  br label %20

20:                                               ; preds = %1, %17
  %21 = phi i32 [ %19, %17 ], [ 0, %1 ]
  %22 = load i32, i32* %10, align 8
  %23 = add i32 %22, %21
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #14
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %22
  br i1 %27, label %29, label %28

28:                                               ; preds = %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %20
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #14
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %22) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.131, i64 0, i64 0), i8* %30, i8* %31) #14
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.132, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #14
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #14
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #14
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #14
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41)
  %42 = icmp ult i32 %23, %21
  br i1 %42, label %44, label %43

43:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* null, i8** %40, align 8
  br label %53

44:                                               ; preds = %38
  %45 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #14
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.133, i64 0, i64 0), i8* %45, i8* %46) #14
  %47 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* %48, i8** %40, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %44
  %51 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.132, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #14
  %52 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #14
  br label %53

53:                                               ; preds = %43, %44, %50
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #14
  ret i32 %23
}

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.653"*, i8*) local_unnamed_addr #5

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.653"*, i16*) local_unnamed_addr #5

declare void @_ZN5blink15CSSSelectorList15DeleteSelectorsEv(%"class.blink::CSSSelectorList"*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { cold noreturn nounwind }
attributes #12 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 1, i32 2000}
!5 = !{!"branch_weights", i32 4001, i32 4000000}
