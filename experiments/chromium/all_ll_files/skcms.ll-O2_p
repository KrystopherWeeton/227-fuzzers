; ModuleID = '../../third_party/skia/third_party/skcms/skcms.cc'
source_filename = "../../third_party/skia/third_party/skcms/skcms.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.anon = type { i32, %struct.skcms_TransferFunction }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.skcms_A2B = type { i32, [4 x %union.skcms_Curve], [4 x i8], i8*, i8*, i32, [3 x %union.skcms_Curve], %struct.skcms_Matrix3x4, i32, [3 x %union.skcms_Curve] }
%union.skcms_Curve = type { %struct.anon.0, [8 x i8] }
%struct.anon.0 = type { i32, i8*, i8* }
%struct.skcms_Matrix3x4 = type { [3 x [4 x float]] }
%struct.skcms_B2A = type { i32, [3 x %union.skcms_Curve], i32, %struct.skcms_Matrix3x4, [3 x %union.skcms_Curve], i32, [4 x i8], i8*, i8*, [4 x %union.skcms_Curve] }
%struct.anon.1 = type { i32, i32, i32, i32, i32 }
%struct.skcms_ICCProfile = type { i8*, i32, i32, i32, i32, i8, [3 x %union.skcms_Curve], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }
%struct.tag_Layout = type { [4 x i8], [4 x i8], [4 x i8] }
%struct.skcms_ICCTag = type { i32, i32, i32, i8* }
%struct.mft1_Layout = type { [1 x %struct.mft_CommonLayout], [1 x i8] }
%struct.mft_CommonLayout = type { [4 x i8], [4 x i8], [1 x i8], [1 x i8], [1 x i8], [1 x i8], [36 x i8] }
%struct.mft2_Layout = type { [1 x %struct.mft_CommonLayout], [2 x i8], [2 x i8], [1 x i8] }

@_ZL21runtime_cpu_detection = internal unnamed_addr global i1 false, align 1
@_ZZ18skcms_sRGB_profileE12sRGB_profile = internal constant { i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A } { i8* null, i32 0, i32 1380401696, i32 1482250784, i32 0, i8 1, [7 x i8] undef, [3 x { %struct.anon }] [{ %struct.anon } { %struct.anon { i32 0, %struct.skcms_TransferFunction { float 0x4003333340000000, float 0x3FEE54EDC0000000, float 0x3FAAB12320000000, float 0x3FB3D07220000000, float 0x3FA4B5DCC0000000, float 0.000000e+00, float 0.000000e+00 } } }, { %struct.anon } { %struct.anon { i32 0, %struct.skcms_TransferFunction { float 0x4003333340000000, float 0x3FEE54EDC0000000, float 0x3FAAB12320000000, float 0x3FB3D07220000000, float 0x3FA4B5DCC0000000, float 0.000000e+00, float 0.000000e+00 } } }, { %struct.anon } { %struct.anon { i32 0, %struct.skcms_TransferFunction { float 0x4003333340000000, float 0x3FEE54EDC0000000, float 0x3FAAB12320000000, float 0x3FB3D07220000000, float 0x3FA4B5DCC0000000, float 0.000000e+00, float 0.000000e+00 } } }], i8 1, %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 0x3FDBE88000000000, float 0x3FD8A64000000000, float 0x3FC2500000000000], [3 x float] [float 0x3FCC7A8000000000, float 0x3FE6F0A000000000, float 0x3FAF080000000000], [3 x float] [float 0x3F8C800000000000, float 0x3FB8DA0000000000, float 0x3FE6D9E000000000]] }, i8 0, %struct.skcms_A2B zeroinitializer, i8 0, %struct.skcms_B2A zeroinitializer }, align 8
@_ZZ20skcms_XYZD50_profileE14XYZD50_profile = internal constant { i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A } { i8* null, i32 0, i32 1380401696, i32 1482250784, i32 0, i8 1, [7 x i8] undef, [3 x { %struct.anon }] [{ %struct.anon } { %struct.anon { i32 0, %struct.skcms_TransferFunction { float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00 } } }, { %struct.anon } { %struct.anon { i32 0, %struct.skcms_TransferFunction { float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00 } } }, { %struct.anon } { %struct.anon { i32 0, %struct.skcms_TransferFunction { float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00 } } }], i8 1, %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [3 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [3 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]] }, i8 0, %struct.skcms_A2B zeroinitializer, i8 0, %struct.skcms_B2A zeroinitializer }, align 8
@_ZZ35skcms_sRGB_Inverse_TransferFunctionE8sRGB_inv = internal constant %struct.skcms_TransferFunction { float 0x3FDAAAAAA0000000, float 0x3FF2325000000000, float -0.000000e+00, float 0x4029D70A40000000, float 0x3F69A5C620000000, float 0xBFAC250000000000, float -0.000000e+00 }, align 4
@_ZZ31skcms_Identity_TransferFunctionE8identity = internal constant %struct.skcms_TransferFunction { float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00 }, align 4
@skcms_252_random_bytes = hidden constant [252 x i8] c"\08\B3\80\CC\FD&\86\B8Df \8Ac'\A9\D7w\1A\03\DF_\EF4\84rJQ\EAat\F4\CD\1E\9A\AD\0C3\9Fz\99=\E2\EC\B2\E57\B5\DC\BF\C2\A0~\A8R\83\12\B4\F5\A3\16\F6E\EB\FC9l\0E\06\98\F0\FF\AB\F2\14\E3\B1\EE`U\10\D3F\C8\95\9B\92\7F\91d\97m\13\A5\D0\C3\A4\89\FE\B6\F8@\C9-\D1\05\93\CF\D2q\A2S\E1\09\1F\0F\E7s%:5\181\C58x\AC0\15\D6\81o\0B2\BB\C4\22<gG\90/\CBMP\E8\8C\DE\FA\CE\A6\F7\8B\F9\DDHj\1B\C7u6\DB\87v(O)\FB.]\D4\5C\E9\94\1Cy?{\9Ei;\1D*\8F\17\00k\B0Wh\B7\9C\C1\BDZ\BCA\BE\11\C6\07\BA\A1\01|N}\AA\85\AE\DAC\9DKeY\D9>!\8D\E4\19#[\E6\04\02\0DIV\A7\EDT\F3,\B9B\82n\96\8E\D8Xp$\E0\88\CAL^b\AF\D5", align 16
@_ZZ22skcms_ApproximateCurveE11kTolerances = internal unnamed_addr constant [2 x float] [float 0x3EF8001800000000, float 0x3F60000000000000], align 4
@__const.skcms_TransformWithPalette.gray_dst_profile = private unnamed_addr constant { i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } } { i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i8 -86, [3 x i8] c"\AA\AA\AA", %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], [4 x i8] c"\AA\AA\AA\AA", [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], %struct.skcms_Matrix3x4 { [3 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }] }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i32 -1431655766, %struct.skcms_Matrix3x4 { [3 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }] } }, align 8
@_ZZ26skcms_TransformWithPaletteE1I = internal constant %struct.skcms_Matrix3x4 { [3 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00]] }, align 4
@_ZZ26skcms_TransformWithPaletteE1I_0 = internal constant %struct.skcms_Matrix3x4 { [3 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00]] }, align 4
@_ZZ26skcms_TransformWithPaletteE1I_1 = internal constant %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [3 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [3 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]] }, align 4
@_ZZL15read_curve_paraPKhjP11skcms_CurvePjE11curve_bytes = internal unnamed_addr constant [5 x i32] [i32 4, i32 12, i32 16, i32 20, i32 28], align 16
@_ZZL15select_curve_opPK11skcms_CurveiE3ops = internal unnamed_addr constant [4 x %struct.anon.1] [%struct.anon.1 { i32 26, i32 30, i32 34, i32 38, i32 42 }, %struct.anon.1 { i32 27, i32 31, i32 35, i32 39, i32 43 }, %struct.anon.1 { i32 28, i32 32, i32 36, i32 40, i32 44 }, %struct.anon.1 { i32 29, i32 33, i32 37, i32 41, i32 45 }], align 16
@_ZZL8cpu_typevE4type = internal global i32 0, align 4
@_ZGVZL8cpu_typevE4type = internal global i64 0, align 8
@switch.table.skcms_TransformWithPalette.9 = private unnamed_addr constant [19 x i64] [i64 1, i64 1, i64 1, i64 2, i64 2, i64 3, i64 4, i64 4, i64 4, i64 6, i64 8, i64 6, i64 8, i64 6, i64 8, i64 6, i64 8, i64 12, i64 16], align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @skcms_DisableRuntimeCPUDetection() local_unnamed_addr #0 {
  store i1 true, i1* @_ZL21runtime_cpu_detection, align 1
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden float @powf_(float, float) local_unnamed_addr #1 {
  %3 = fcmp oeq float %0, 0.000000e+00
  %4 = fcmp oeq float %0, 1.000000e+00
  %5 = or i1 %3, %4
  br i1 %5, label %39, label %6

6:                                                ; preds = %2
  %7 = bitcast float %0 to i32
  %8 = sitofp i32 %7 to float
  %9 = fmul float %8, 0x3E80000000000000
  %10 = and i32 %7, 8388607
  %11 = or i32 %10, 1056964608
  %12 = bitcast i32 %11 to float
  %13 = fadd float %9, 0xC05F0E6EE0000000
  %14 = fmul float %12, 0x3FF7F7EEA0000000
  %15 = fsub float %13, %14
  %16 = fadd float %12, 0x3FD6889F20000000
  %17 = fdiv float 0x3FFB9D3460000000, %16
  %18 = fsub float %15, %17
  %19 = fmul float %18, %1
  %20 = fptosi float %19 to i32
  %21 = sitofp i32 %20 to float
  %22 = fcmp olt float %19, %21
  %23 = fadd float %21, -1.000000e+00
  %24 = select i1 %22, float %23, float %21
  %25 = fsub float %19, %24
  %26 = fadd float %19, 0x405E518A20000000
  %27 = fmul float %25, 0x3FF7D791A0000000
  %28 = fsub float %26, %27
  %29 = fsub float 0x40135EBF00000000, %25
  %30 = fdiv float 0x403BBA5FC0000000, %29
  %31 = fadd float %28, %30
  %32 = fmul float %31, 0x4160000000000000
  %33 = fcmp ult float %32, 0x41E0000000000000
  br i1 %33, label %34, label %39

34:                                               ; preds = %6
  %35 = fcmp olt float %32, 0.000000e+00
  br i1 %35, label %39, label %36

36:                                               ; preds = %34
  %37 = fptosi float %32 to i32
  %38 = bitcast i32 %37 to float
  br label %39

39:                                               ; preds = %36, %34, %6, %2
  %40 = phi float [ %0, %2 ], [ %38, %36 ], [ 0x7FF0000000000000, %6 ], [ 0.000000e+00, %34 ]
  ret float %40
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @skcms_TransferFunction_isSRGBish(%struct.skcms_TransferFunction* nocapture readonly) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = fcmp olt float %3, 0.000000e+00
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = fptosi float %3 to i32
  %7 = sitofp i32 %6 to float
  %8 = fcmp oeq float %3, %7
  br i1 %8, label %43, label %9

9:                                                ; preds = %5, %1
  %10 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 2
  %13 = load float, float* %12, align 4
  %14 = fadd float %11, %13
  %15 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 3
  %16 = load float, float* %15, align 4
  %17 = fadd float %14, %16
  %18 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 4
  %19 = load float, float* %18, align 4
  %20 = fadd float %17, %19
  %21 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 5
  %22 = load float, float* %21, align 4
  %23 = fadd float %20, %22
  %24 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 6
  %25 = load float, float* %24, align 4
  %26 = fadd float %23, %25
  %27 = fadd float %3, %26
  %28 = fmul float %27, 0.000000e+00
  %29 = fcmp oeq float %28, 0.000000e+00
  br i1 %29, label %30, label %42

30:                                               ; preds = %9
  %31 = fcmp ult float %11, 0.000000e+00
  %32 = fcmp ult float %16, 0.000000e+00
  %33 = or i1 %31, %32
  br i1 %33, label %42, label %34

34:                                               ; preds = %30
  %35 = fcmp ult float %19, 0.000000e+00
  %36 = fcmp ult float %3, 0.000000e+00
  %37 = or i1 %36, %35
  br i1 %37, label %42, label %38

38:                                               ; preds = %34
  %39 = fmul float %11, %19
  %40 = fadd float %13, %39
  %41 = fcmp ult float %40, 0.000000e+00
  br i1 %41, label %42, label %43

42:                                               ; preds = %38, %34, %30, %9
  br label %43

43:                                               ; preds = %5, %38, %42
  %44 = phi i1 [ false, %42 ], [ true, %38 ], [ false, %5 ]
  ret i1 %44
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @skcms_TransferFunction_isPQish(%struct.skcms_TransferFunction* nocapture readonly) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = fcmp olt float %3, 0.000000e+00
  br i1 %4, label %5, label %11

5:                                                ; preds = %1
  %6 = fptosi float %3 to i32
  %7 = sitofp i32 %6 to float
  %8 = fcmp oeq float %3, %7
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = icmp eq i32 %6, -2
  ret i1 %10

11:                                               ; preds = %5, %1
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @skcms_TransferFunction_isHLGish(%struct.skcms_TransferFunction* nocapture readonly) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = fcmp olt float %3, 0.000000e+00
  br i1 %4, label %5, label %11

5:                                                ; preds = %1
  %6 = fptosi float %3 to i32
  %7 = sitofp i32 %6 to float
  %8 = fcmp oeq float %3, %7
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = icmp eq i32 %6, -3
  ret i1 %10

11:                                               ; preds = %5, %1
  ret i1 false
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden zeroext i1 @skcms_TransferFunction_makePQish(%struct.skcms_TransferFunction* nocapture, float, float, float, float, float, float) local_unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 0
  store float -2.000000e+00, float* %8, align 4
  %9 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 1
  store float %1, float* %9, align 4
  %10 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 2
  store float %2, float* %10, align 4
  %11 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 3
  store float %3, float* %11, align 4
  %12 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 4
  store float %4, float* %12, align 4
  %13 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 5
  store float %5, float* %13, align 4
  %14 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 6
  store float %6, float* %14, align 4
  ret i1 true
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden zeroext i1 @skcms_TransferFunction_makeScaledHLGish(%struct.skcms_TransferFunction* nocapture, float, float, float, float, float, float) local_unnamed_addr #0 {
  %8 = fadd float %1, -1.000000e+00
  %9 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 0
  store float -3.000000e+00, float* %9, align 4
  %10 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 1
  store float %2, float* %10, align 4
  %11 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 2
  store float %3, float* %11, align 4
  %12 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 3
  store float %4, float* %12, align 4
  %13 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 4
  store float %5, float* %13, align 4
  %14 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 5
  store float %6, float* %14, align 4
  %15 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 6
  store float %8, float* %15, align 4
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden float @skcms_TransferFunction_eval(%struct.skcms_TransferFunction* nocapture readonly, float) local_unnamed_addr #4 {
  %3 = fcmp olt float %1, 0.000000e+00
  %4 = select i1 %3, float -1.000000e+00, float 1.000000e+00
  %5 = fmul float %4, %1
  %6 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = fcmp olt float %7, 0.000000e+00
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = fptosi float %7 to i32
  %11 = sitofp i32 %10 to float
  %12 = fcmp oeq float %7, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %9
  switch i32 %10, label %368 [
    i32 -2, label %256
    i32 -3, label %47
    i32 -4, label %130
  ]

14:                                               ; preds = %9, %2
  %15 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 1
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 2
  %18 = load float, float* %17, align 4
  %19 = fadd float %16, %18
  %20 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 3
  %21 = load float, float* %20, align 4
  %22 = fadd float %19, %21
  %23 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 4
  %24 = load float, float* %23, align 4
  %25 = fadd float %22, %24
  %26 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 5
  %27 = load float, float* %26, align 4
  %28 = fadd float %25, %27
  %29 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 6
  %30 = load float, float* %29, align 4
  %31 = fadd float %28, %30
  %32 = fadd float %7, %31
  %33 = fmul float %32, 0.000000e+00
  %34 = fcmp oeq float %33, 0.000000e+00
  br i1 %34, label %35, label %368

35:                                               ; preds = %14
  %36 = fcmp ult float %16, 0.000000e+00
  %37 = fcmp ult float %21, 0.000000e+00
  %38 = or i1 %36, %37
  br i1 %38, label %368, label %39

39:                                               ; preds = %35
  %40 = fcmp ult float %24, 0.000000e+00
  %41 = fcmp ult float %7, 0.000000e+00
  %42 = or i1 %41, %40
  br i1 %42, label %368, label %43

43:                                               ; preds = %39
  %44 = fmul float %16, %24
  %45 = fadd float %18, %44
  %46 = fcmp ult float %45, 0.000000e+00
  br i1 %46, label %368, label %206

47:                                               ; preds = %13
  %48 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 1
  %49 = load float, float* %48, align 4
  %50 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 2
  %51 = load float, float* %50, align 4
  %52 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 4
  %53 = load float, float* %52, align 4
  %54 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 6
  %55 = load float, float* %54, align 4
  %56 = fadd float %55, 1.000000e+00
  %57 = fmul float %4, %56
  %58 = fmul float %5, %49
  %59 = fcmp ugt float %58, 1.000000e+00
  br i1 %59, label %97, label %60

60:                                               ; preds = %47
  %61 = fcmp oeq float %58, 0.000000e+00
  %62 = fcmp oeq float %58, 1.000000e+00
  %63 = or i1 %61, %62
  br i1 %63, label %127, label %64

64:                                               ; preds = %60
  %65 = bitcast float %58 to i32
  %66 = sitofp i32 %65 to float
  %67 = fmul float %66, 0x3E80000000000000
  %68 = and i32 %65, 8388607
  %69 = or i32 %68, 1056964608
  %70 = bitcast i32 %69 to float
  %71 = fadd float %67, 0xC05F0E6EE0000000
  %72 = fmul float %70, 0x3FF7F7EEA0000000
  %73 = fsub float %71, %72
  %74 = fadd float %70, 0x3FD6889F20000000
  %75 = fdiv float 0x3FFB9D3460000000, %74
  %76 = fsub float %73, %75
  %77 = fmul float %51, %76
  %78 = fptosi float %77 to i32
  %79 = sitofp i32 %78 to float
  %80 = fcmp olt float %77, %79
  %81 = fadd float %79, -1.000000e+00
  %82 = select i1 %80, float %81, float %79
  %83 = fsub float %77, %82
  %84 = fadd float %77, 0x405E518A20000000
  %85 = fmul float %83, 0x3FF7D791A0000000
  %86 = fsub float %84, %85
  %87 = fsub float 0x40135EBF00000000, %83
  %88 = fdiv float 0x403BBA5FC0000000, %87
  %89 = fadd float %86, %88
  %90 = fmul float %89, 0x4160000000000000
  %91 = fcmp ult float %90, 0x41E0000000000000
  br i1 %91, label %92, label %127

92:                                               ; preds = %64
  %93 = fcmp olt float %90, 0.000000e+00
  br i1 %93, label %127, label %94

94:                                               ; preds = %92
  %95 = fptosi float %90 to i32
  %96 = bitcast i32 %95 to float
  br label %127

97:                                               ; preds = %47
  %98 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 5
  %99 = load float, float* %98, align 4
  %100 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 3
  %101 = load float, float* %100, align 4
  %102 = fsub float %5, %99
  %103 = fmul float %102, %101
  %104 = fmul float %103, 0x3FF7154760000000
  %105 = fptosi float %104 to i32
  %106 = sitofp i32 %105 to float
  %107 = fcmp olt float %104, %106
  %108 = fadd float %106, -1.000000e+00
  %109 = select i1 %107, float %108, float %106
  %110 = fsub float %104, %109
  %111 = fadd float %104, 0x405E518A20000000
  %112 = fmul float %110, 0x3FF7D791A0000000
  %113 = fsub float %111, %112
  %114 = fsub float 0x40135EBF00000000, %110
  %115 = fdiv float 0x403BBA5FC0000000, %114
  %116 = fadd float %113, %115
  %117 = fmul float %116, 0x4160000000000000
  %118 = fcmp ult float %117, 0x41E0000000000000
  br i1 %118, label %119, label %124

119:                                              ; preds = %97
  %120 = fcmp olt float %117, 0.000000e+00
  br i1 %120, label %124, label %121

121:                                              ; preds = %119
  %122 = fptosi float %117 to i32
  %123 = bitcast i32 %122 to float
  br label %124

124:                                              ; preds = %97, %119, %121
  %125 = phi float [ %123, %121 ], [ 0x7FF0000000000000, %97 ], [ 0.000000e+00, %119 ]
  %126 = fadd float %53, %125
  br label %127

127:                                              ; preds = %94, %92, %64, %60, %124
  %128 = phi float [ %126, %124 ], [ %58, %60 ], [ %96, %94 ], [ 0x7FF0000000000000, %64 ], [ 0.000000e+00, %92 ]
  %129 = fmul float %57, %128
  br label %368

130:                                              ; preds = %13
  %131 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 1
  %132 = load float, float* %131, align 4
  %133 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 2
  %134 = load float, float* %133, align 4
  %135 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 6
  %136 = load float, float* %135, align 4
  %137 = fadd float %136, 1.000000e+00
  %138 = fdiv float %5, %137
  %139 = fcmp ugt float %138, 1.000000e+00
  br i1 %139, label %180, label %140

140:                                              ; preds = %130
  %141 = fcmp oeq float %138, 0.000000e+00
  %142 = fcmp oeq float %138, 1.000000e+00
  %143 = or i1 %141, %142
  br i1 %143, label %177, label %144

144:                                              ; preds = %140
  %145 = bitcast float %138 to i32
  %146 = sitofp i32 %145 to float
  %147 = fmul float %146, 0x3E80000000000000
  %148 = and i32 %145, 8388607
  %149 = or i32 %148, 1056964608
  %150 = bitcast i32 %149 to float
  %151 = fadd float %147, 0xC05F0E6EE0000000
  %152 = fmul float %150, 0x3FF7F7EEA0000000
  %153 = fsub float %151, %152
  %154 = fadd float %150, 0x3FD6889F20000000
  %155 = fdiv float 0x3FFB9D3460000000, %154
  %156 = fsub float %153, %155
  %157 = fmul float %134, %156
  %158 = fptosi float %157 to i32
  %159 = sitofp i32 %158 to float
  %160 = fcmp olt float %157, %159
  %161 = fadd float %159, -1.000000e+00
  %162 = select i1 %160, float %161, float %159
  %163 = fsub float %157, %162
  %164 = fadd float %157, 0x405E518A20000000
  %165 = fmul float %163, 0x3FF7D791A0000000
  %166 = fsub float %164, %165
  %167 = fsub float 0x40135EBF00000000, %163
  %168 = fdiv float 0x403BBA5FC0000000, %167
  %169 = fadd float %166, %168
  %170 = fmul float %169, 0x4160000000000000
  %171 = fcmp ult float %170, 0x41E0000000000000
  br i1 %171, label %172, label %177

172:                                              ; preds = %144
  %173 = fcmp olt float %170, 0.000000e+00
  br i1 %173, label %177, label %174

174:                                              ; preds = %172
  %175 = fptosi float %170 to i32
  %176 = bitcast i32 %175 to float
  br label %177

177:                                              ; preds = %140, %144, %172, %174
  %178 = phi float [ %138, %140 ], [ %176, %174 ], [ 0x7FF0000000000000, %144 ], [ 0.000000e+00, %172 ]
  %179 = fmul float %132, %178
  br label %203

180:                                              ; preds = %130
  %181 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 5
  %182 = load float, float* %181, align 4
  %183 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 4
  %184 = load float, float* %183, align 4
  %185 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 3
  %186 = load float, float* %185, align 4
  %187 = fsub float %138, %184
  %188 = bitcast float %187 to i32
  %189 = sitofp i32 %188 to float
  %190 = fmul float %189, 0x3E80000000000000
  %191 = and i32 %188, 8388607
  %192 = or i32 %191, 1056964608
  %193 = bitcast i32 %192 to float
  %194 = fadd float %190, 0xC05F0E6EE0000000
  %195 = fmul float %193, 0x3FF7F7EEA0000000
  %196 = fsub float %194, %195
  %197 = fadd float %193, 0x3FD6889F20000000
  %198 = fdiv float 0x3FFB9D3460000000, %197
  %199 = fsub float %196, %198
  %200 = fmul float %199, 0x3FE62E4300000000
  %201 = fmul float %186, %200
  %202 = fadd float %182, %201
  br label %203

203:                                              ; preds = %180, %177
  %204 = phi float [ %179, %177 ], [ %202, %180 ]
  %205 = fmul float %4, %204
  br label %368

206:                                              ; preds = %43
  %207 = fcmp olt float %5, %24
  br i1 %207, label %208, label %211

208:                                              ; preds = %206
  %209 = fmul float %5, %21
  %210 = fadd float %209, %30
  br label %253

211:                                              ; preds = %206
  %212 = fmul float %5, %16
  %213 = fadd float %212, %18
  %214 = fcmp oeq float %213, 0.000000e+00
  %215 = fcmp oeq float %213, 1.000000e+00
  %216 = or i1 %214, %215
  br i1 %216, label %250, label %217

217:                                              ; preds = %211
  %218 = bitcast float %213 to i32
  %219 = sitofp i32 %218 to float
  %220 = fmul float %219, 0x3E80000000000000
  %221 = and i32 %218, 8388607
  %222 = or i32 %221, 1056964608
  %223 = bitcast i32 %222 to float
  %224 = fadd float %220, 0xC05F0E6EE0000000
  %225 = fmul float %223, 0x3FF7F7EEA0000000
  %226 = fsub float %224, %225
  %227 = fadd float %223, 0x3FD6889F20000000
  %228 = fdiv float 0x3FFB9D3460000000, %227
  %229 = fsub float %226, %228
  %230 = fmul float %7, %229
  %231 = fptosi float %230 to i32
  %232 = sitofp i32 %231 to float
  %233 = fcmp olt float %230, %232
  %234 = fadd float %232, -1.000000e+00
  %235 = select i1 %233, float %234, float %232
  %236 = fsub float %230, %235
  %237 = fadd float %230, 0x405E518A20000000
  %238 = fmul float %236, 0x3FF7D791A0000000
  %239 = fsub float %237, %238
  %240 = fsub float 0x40135EBF00000000, %236
  %241 = fdiv float 0x403BBA5FC0000000, %240
  %242 = fadd float %239, %241
  %243 = fmul float %242, 0x4160000000000000
  %244 = fcmp ult float %243, 0x41E0000000000000
  br i1 %244, label %245, label %250

245:                                              ; preds = %217
  %246 = fcmp olt float %243, 0.000000e+00
  br i1 %246, label %250, label %247

247:                                              ; preds = %245
  %248 = fptosi float %243 to i32
  %249 = bitcast i32 %248 to float
  br label %250

250:                                              ; preds = %211, %217, %245, %247
  %251 = phi float [ %213, %211 ], [ %249, %247 ], [ 0x7FF0000000000000, %217 ], [ 0.000000e+00, %245 ]
  %252 = fadd float %251, %27
  br label %253

253:                                              ; preds = %250, %208
  %254 = phi float [ %210, %208 ], [ %252, %250 ]
  %255 = fmul float %4, %254
  br label %368

256:                                              ; preds = %13
  %257 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 1
  %258 = load float, float* %257, align 4
  %259 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 2
  %260 = load float, float* %259, align 4
  %261 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 4
  %262 = load float, float* %261, align 4
  %263 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 5
  %264 = load float, float* %263, align 4
  %265 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 6
  %266 = load float, float* %265, align 4
  %267 = fcmp oeq float %5, 0.000000e+00
  %268 = fcmp oeq float %5, 1.000000e+00
  %269 = or i1 %267, %268
  br i1 %269, label %310, label %270

270:                                              ; preds = %256
  %271 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 3
  %272 = load float, float* %271, align 4
  %273 = bitcast float %5 to i32
  %274 = sitofp i32 %273 to float
  %275 = fmul float %274, 0x3E80000000000000
  %276 = and i32 %273, 8388607
  %277 = or i32 %276, 1056964608
  %278 = bitcast i32 %277 to float
  %279 = fadd float %275, 0xC05F0E6EE0000000
  %280 = fmul float %278, 0x3FF7F7EEA0000000
  %281 = fsub float %279, %280
  %282 = fadd float %278, 0x3FD6889F20000000
  %283 = fdiv float 0x3FFB9D3460000000, %282
  %284 = fsub float %281, %283
  %285 = fmul float %284, %272
  %286 = fptosi float %285 to i32
  %287 = sitofp i32 %286 to float
  %288 = fcmp olt float %285, %287
  %289 = fadd float %287, -1.000000e+00
  %290 = select i1 %288, float %289, float %287
  %291 = fsub float %285, %290
  %292 = fadd float %285, 0x405E518A20000000
  %293 = fmul float %291, 0x3FF7D791A0000000
  %294 = fsub float %292, %293
  %295 = fsub float 0x40135EBF00000000, %291
  %296 = fdiv float 0x403BBA5FC0000000, %295
  %297 = fadd float %294, %296
  %298 = fmul float %297, 0x4160000000000000
  %299 = fcmp ult float %298, 0x41E0000000000000
  br i1 %299, label %300, label %315

300:                                              ; preds = %270
  %301 = fcmp olt float %298, 0.000000e+00
  %302 = fptosi float %298 to i32
  %303 = bitcast i32 %302 to float
  %304 = select i1 %301, float 0.000000e+00, float %303
  %305 = fmul float %260, %304
  %306 = fadd float %258, %305
  %307 = fcmp ogt float %306, 0.000000e+00
  %308 = select i1 %307, float %306, float 0.000000e+00
  %309 = fcmp olt float %298, 0.000000e+00
  br i1 %309, label %323, label %320

310:                                              ; preds = %256
  %311 = fmul float %5, %260
  %312 = fadd float %258, %311
  %313 = fcmp ogt float %312, 0.000000e+00
  %314 = select i1 %313, float %312, float 0.000000e+00
  br label %323

315:                                              ; preds = %270
  %316 = fmul float %260, 0x7FF0000000000000
  %317 = fadd float %258, %316
  %318 = fcmp ogt float %317, 0.000000e+00
  %319 = select i1 %318, float %317, float 0.000000e+00
  br label %323

320:                                              ; preds = %300
  %321 = fptosi float %298 to i32
  %322 = bitcast i32 %321 to float
  br label %323

323:                                              ; preds = %315, %310, %300, %320
  %324 = phi float [ %314, %310 ], [ %308, %320 ], [ %319, %315 ], [ %308, %300 ]
  %325 = phi float [ %5, %310 ], [ %322, %320 ], [ 0x7FF0000000000000, %315 ], [ 0.000000e+00, %300 ]
  %326 = fmul float %264, %325
  %327 = fadd float %262, %326
  %328 = fdiv float %324, %327
  %329 = fcmp oeq float %328, 0.000000e+00
  %330 = fcmp oeq float %328, 1.000000e+00
  %331 = or i1 %329, %330
  br i1 %331, label %365, label %332

332:                                              ; preds = %323
  %333 = bitcast float %328 to i32
  %334 = sitofp i32 %333 to float
  %335 = fmul float %334, 0x3E80000000000000
  %336 = and i32 %333, 8388607
  %337 = or i32 %336, 1056964608
  %338 = bitcast i32 %337 to float
  %339 = fadd float %335, 0xC05F0E6EE0000000
  %340 = fmul float %338, 0x3FF7F7EEA0000000
  %341 = fsub float %339, %340
  %342 = fadd float %338, 0x3FD6889F20000000
  %343 = fdiv float 0x3FFB9D3460000000, %342
  %344 = fsub float %341, %343
  %345 = fmul float %266, %344
  %346 = fptosi float %345 to i32
  %347 = sitofp i32 %346 to float
  %348 = fcmp olt float %345, %347
  %349 = fadd float %347, -1.000000e+00
  %350 = select i1 %348, float %349, float %347
  %351 = fsub float %345, %350
  %352 = fadd float %345, 0x405E518A20000000
  %353 = fmul float %351, 0x3FF7D791A0000000
  %354 = fsub float %352, %353
  %355 = fsub float 0x40135EBF00000000, %351
  %356 = fdiv float 0x403BBA5FC0000000, %355
  %357 = fadd float %354, %356
  %358 = fmul float %357, 0x4160000000000000
  %359 = fcmp ult float %358, 0x41E0000000000000
  br i1 %359, label %360, label %365

360:                                              ; preds = %332
  %361 = fcmp olt float %358, 0.000000e+00
  br i1 %361, label %365, label %362

362:                                              ; preds = %360
  %363 = fptosi float %358 to i32
  %364 = bitcast i32 %363 to float
  br label %365

365:                                              ; preds = %323, %332, %360, %362
  %366 = phi float [ %328, %323 ], [ %364, %362 ], [ 0x7FF0000000000000, %332 ], [ 0.000000e+00, %360 ]
  %367 = fmul float %4, %366
  br label %368

368:                                              ; preds = %14, %35, %39, %43, %13, %365, %253, %203, %127
  %369 = phi float [ %255, %253 ], [ %205, %203 ], [ %129, %127 ], [ %367, %365 ], [ 0.000000e+00, %13 ], [ 0.000000e+00, %43 ], [ 0.000000e+00, %39 ], [ 0.000000e+00, %35 ], [ 0.000000e+00, %14 ]
  ret float %369
}

; Function Attrs: nounwind ssp uwtable
define hidden float @skcms_MaxRoundtripError(%union.skcms_Curve* nocapture readonly, %struct.skcms_TransferFunction* nocapture readonly) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ugt i32 %4, 256
  %6 = select i1 %5, i32 %4, i32 256
  %7 = add i32 %6, -1
  %8 = uitofp i32 %7 to float
  %9 = fdiv float 1.000000e+00, %8
  %10 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 2
  %12 = bitcast %union.skcms_Curve* %0 to %struct.anon*
  %13 = getelementptr inbounds %struct.anon, %struct.anon* %12, i64 0, i32 1
  br label %15

14:                                               ; preds = %75
  ret float %83

15:                                               ; preds = %86, %2
  %16 = phi i32 [ %4, %2 ], [ %87, %86 ]
  %17 = phi i32 [ 0, %2 ], [ %84, %86 ]
  %18 = phi float [ 0.000000e+00, %2 ], [ %83, %86 ]
  %19 = uitofp i32 %17 to float
  %20 = fmul float %9, %19
  %21 = icmp eq i32 %16, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %15
  %23 = tail call float @skcms_TransferFunction_eval(%struct.skcms_TransferFunction* %13, float %20) #17
  br label %75

24:                                               ; preds = %15
  %25 = fcmp olt float %20, 1.000000e+00
  %26 = select i1 %25, float %20, float 1.000000e+00
  %27 = add i32 %16, -1
  %28 = uitofp i32 %27 to float
  %29 = fmul float %26, %28
  %30 = fptosi float %29 to i32
  %31 = fadd float %29, 1.000000e+00
  %32 = bitcast float %31 to i32
  %33 = add nsw i32 %32, -1
  %34 = bitcast i32 %33 to float
  %35 = fptosi float %34 to i32
  %36 = sitofp i32 %30 to float
  %37 = fsub float %29, %36
  %38 = load i8*, i8** %10, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %51, label %40

40:                                               ; preds = %24
  %41 = sext i32 %30 to i64
  %42 = getelementptr inbounds i8, i8* %38, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = uitofp i8 %43 to float
  %45 = fmul float %44, 0x3F70101020000000
  %46 = sext i32 %35 to i64
  %47 = getelementptr inbounds i8, i8* %38, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = uitofp i8 %48 to float
  %50 = fmul float %49, 0x3F70101020000000
  br label %69

51:                                               ; preds = %24
  %52 = load i8*, i8** %11, align 8
  %53 = shl nsw i32 %30, 1
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %52, i64 %54
  %56 = bitcast i8* %55 to i16*
  %57 = load i16, i16* %56, align 1
  %58 = shl nsw i32 %35, 1
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %52, i64 %59
  %61 = bitcast i8* %60 to i16*
  %62 = load i16, i16* %61, align 1
  %63 = tail call i16 @llvm.bswap.i16(i16 %57) #17
  %64 = tail call i16 @llvm.bswap.i16(i16 %62) #17
  %65 = uitofp i16 %63 to float
  %66 = fmul float %65, 0x3EF0001000000000
  %67 = uitofp i16 %64 to float
  %68 = fmul float %67, 0x3EF0001000000000
  br label %69

69:                                               ; preds = %51, %40
  %70 = phi float [ %45, %40 ], [ %66, %51 ]
  %71 = phi float [ %50, %40 ], [ %68, %51 ]
  %72 = fsub float %71, %70
  %73 = fmul float %37, %72
  %74 = fadd float %70, %73
  br label %75

75:                                               ; preds = %22, %69
  %76 = phi float [ %23, %22 ], [ %74, %69 ]
  %77 = tail call float @skcms_TransferFunction_eval(%struct.skcms_TransferFunction* %1, float %76)
  %78 = fsub float %20, %77
  %79 = fcmp olt float %78, 0.000000e+00
  %80 = fsub float -0.000000e+00, %78
  %81 = select i1 %79, float %80, float %78
  %82 = fcmp ogt float %18, %81
  %83 = select i1 %82, float %18, float %81
  %84 = add nuw i32 %17, 1
  %85 = icmp ult i32 %84, %6
  br i1 %85, label %86, label %14

86:                                               ; preds = %75
  %87 = load i32, i32* %3, align 8
  br label %15
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @skcms_AreApproximateInverses(%union.skcms_Curve* nocapture readonly, %struct.skcms_TransferFunction* nocapture readonly) local_unnamed_addr #4 {
  %3 = tail call float @skcms_MaxRoundtripError(%union.skcms_Curve* %0, %struct.skcms_TransferFunction* %1)
  %4 = fcmp olt float %3, 0x3F60000000000000
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @skcms_GetCHAD(%struct.skcms_ICCProfile* readonly, %struct.skcms_Matrix3x3* nocapture) local_unnamed_addr #4 {
  %3 = icmp eq %struct.skcms_ICCProfile* %0, null
  br i1 %3, label %106, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %106, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %6, i64 132
  %10 = bitcast i8* %9 to %struct.tag_Layout*
  %11 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %106, label %14

14:                                               ; preds = %8
  %15 = zext i32 %12 to i64
  br label %18

16:                                               ; preds = %18
  %17 = icmp eq i64 %24, %15
  br i1 %17, label %106, label %18

18:                                               ; preds = %16, %14
  %19 = phi i64 [ 0, %14 ], [ %24, %16 ]
  %20 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %10, i64 %19, i32 0, i64 0
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = icmp eq i32 %22, 1684105315
  %24 = add nuw nsw i64 %19, 1
  br i1 %23, label %25, label %16

25:                                               ; preds = %18
  %26 = and i64 %19, 4294967295
  %27 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %10, i64 %26, i32 2, i64 0
  %28 = bitcast i8* %27 to i32*
  %29 = load i32, i32* %28, align 1
  %30 = tail call i32 @llvm.bswap.i32(i32 %29) #17
  %31 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %10, i64 %26, i32 1, i64 0
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = tail call i32 @llvm.bswap.i32(i32 %33) #17
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %6, i64 %35
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = icmp ne i32 %38, 842229363
  %40 = icmp ult i32 %30, 44
  %41 = or i1 %40, %39
  br i1 %41, label %106, label %42

42:                                               ; preds = %25
  %43 = getelementptr inbounds i8, i8* %36, i64 8
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = tail call i32 @llvm.bswap.i32(i32 %45) #17
  %47 = sitofp i32 %46 to float
  %48 = fmul float %47, 0x3EF0000000000000
  %49 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 0, i64 0
  store float %48, float* %49, align 4
  %50 = getelementptr inbounds i8, i8* %43, i64 4
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = tail call i32 @llvm.bswap.i32(i32 %52) #17
  %54 = sitofp i32 %53 to float
  %55 = fmul float %54, 0x3EF0000000000000
  %56 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 0, i64 1
  store float %55, float* %56, align 4
  %57 = getelementptr inbounds i8, i8* %50, i64 4
  %58 = bitcast i8* %57 to i32*
  %59 = load i32, i32* %58, align 1
  %60 = tail call i32 @llvm.bswap.i32(i32 %59) #17
  %61 = sitofp i32 %60 to float
  %62 = fmul float %61, 0x3EF0000000000000
  %63 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 0, i64 2
  store float %62, float* %63, align 4
  %64 = getelementptr inbounds i8, i8* %57, i64 4
  %65 = bitcast i8* %64 to i32*
  %66 = load i32, i32* %65, align 1
  %67 = tail call i32 @llvm.bswap.i32(i32 %66) #17
  %68 = sitofp i32 %67 to float
  %69 = fmul float %68, 0x3EF0000000000000
  %70 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 1, i64 0
  store float %69, float* %70, align 4
  %71 = getelementptr inbounds i8, i8* %64, i64 4
  %72 = bitcast i8* %71 to i32*
  %73 = load i32, i32* %72, align 1
  %74 = tail call i32 @llvm.bswap.i32(i32 %73) #17
  %75 = sitofp i32 %74 to float
  %76 = fmul float %75, 0x3EF0000000000000
  %77 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 1, i64 1
  store float %76, float* %77, align 4
  %78 = getelementptr inbounds i8, i8* %71, i64 4
  %79 = bitcast i8* %78 to i32*
  %80 = load i32, i32* %79, align 1
  %81 = tail call i32 @llvm.bswap.i32(i32 %80) #17
  %82 = sitofp i32 %81 to float
  %83 = fmul float %82, 0x3EF0000000000000
  %84 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 1, i64 2
  store float %83, float* %84, align 4
  %85 = getelementptr inbounds i8, i8* %78, i64 4
  %86 = bitcast i8* %85 to i32*
  %87 = load i32, i32* %86, align 1
  %88 = tail call i32 @llvm.bswap.i32(i32 %87) #17
  %89 = sitofp i32 %88 to float
  %90 = fmul float %89, 0x3EF0000000000000
  %91 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 2, i64 0
  store float %90, float* %91, align 4
  %92 = getelementptr inbounds i8, i8* %85, i64 4
  %93 = bitcast i8* %92 to i32*
  %94 = load i32, i32* %93, align 1
  %95 = tail call i32 @llvm.bswap.i32(i32 %94) #17
  %96 = sitofp i32 %95 to float
  %97 = fmul float %96, 0x3EF0000000000000
  %98 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 2, i64 1
  store float %97, float* %98, align 4
  %99 = getelementptr inbounds i8, i8* %92, i64 4
  %100 = bitcast i8* %99 to i32*
  %101 = load i32, i32* %100, align 1
  %102 = tail call i32 @llvm.bswap.i32(i32 %101) #17
  %103 = sitofp i32 %102 to float
  %104 = fmul float %103, 0x3EF0000000000000
  %105 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 2, i64 2
  store float %104, float* %105, align 4
  br label %106

106:                                              ; preds = %16, %42, %4, %25, %8, %2
  %107 = phi i1 [ false, %25 ], [ false, %2 ], [ false, %4 ], [ false, %8 ], [ true, %42 ], [ false, %16 ]
  ret i1 %107
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @skcms_GetTagBySignature(%struct.skcms_ICCProfile* readonly, i32, %struct.skcms_ICCTag*) local_unnamed_addr #5 {
  %4 = icmp eq %struct.skcms_ICCProfile* %0, null
  br i1 %4, label %49, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ne i8* %7, null
  %9 = icmp ne %struct.skcms_ICCTag* %2, null
  %10 = and i1 %9, %8
  br i1 %10, label %11, label %49

11:                                               ; preds = %5
  %12 = getelementptr inbounds i8, i8* %7, i64 132
  %13 = bitcast i8* %12 to %struct.tag_Layout*
  %14 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %49, label %17

17:                                               ; preds = %11
  %18 = zext i32 %15 to i64
  br label %21

19:                                               ; preds = %21
  %20 = icmp ult i64 %28, %18
  br i1 %20, label %21, label %49

21:                                               ; preds = %17, %19
  %22 = phi i64 [ 0, %17 ], [ %28, %19 ]
  %23 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %13, i64 %22, i32 0, i64 0
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = tail call i32 @llvm.bswap.i32(i32 %25) #17
  %27 = icmp eq i32 %26, %1
  %28 = add nuw nsw i64 %22, 1
  br i1 %27, label %29, label %19

29:                                               ; preds = %21
  %30 = and i64 %22, 4294967295
  %31 = getelementptr inbounds %struct.skcms_ICCTag, %struct.skcms_ICCTag* %2, i64 0, i32 0
  store i32 %1, i32* %31, align 8
  %32 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %13, i64 %30, i32 2, i64 0
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = tail call i32 @llvm.bswap.i32(i32 %34) #17
  %36 = getelementptr inbounds %struct.skcms_ICCTag, %struct.skcms_ICCTag* %2, i64 0, i32 2
  store i32 %35, i32* %36, align 8
  %37 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %13, i64 %30, i32 1, i64 0
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = tail call i32 @llvm.bswap.i32(i32 %39) #17
  %41 = load i8*, i8** %6, align 8
  %42 = zext i32 %40 to i64
  %43 = getelementptr inbounds i8, i8* %41, i64 %42
  %44 = getelementptr inbounds %struct.skcms_ICCTag, %struct.skcms_ICCTag* %2, i64 0, i32 3
  store i8* %43, i8** %44, align 8
  %45 = bitcast i8* %43 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = tail call i32 @llvm.bswap.i32(i32 %46) #17
  %48 = getelementptr inbounds %struct.skcms_ICCTag, %struct.skcms_ICCTag* %2, i64 0, i32 1
  store i32 %47, i32* %48, align 4
  br label %49

49:                                               ; preds = %19, %11, %29, %5, %3
  %50 = phi i1 [ false, %3 ], [ false, %5 ], [ true, %29 ], [ false, %11 ], [ false, %19 ]
  ret i1 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @skcms_GetWTPT(%struct.skcms_ICCProfile* readonly, float* nocapture) local_unnamed_addr #4 {
  %3 = icmp eq %struct.skcms_ICCProfile* %0, null
  br i1 %3, label %63, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %63, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %6, i64 132
  %10 = bitcast i8* %9 to %struct.tag_Layout*
  %11 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %63, label %14

14:                                               ; preds = %8
  %15 = zext i32 %12 to i64
  br label %18

16:                                               ; preds = %18
  %17 = icmp eq i64 %24, %15
  br i1 %17, label %63, label %18

18:                                               ; preds = %16, %14
  %19 = phi i64 [ 0, %14 ], [ %24, %16 ]
  %20 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %10, i64 %19, i32 0, i64 0
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = icmp eq i32 %22, 1953526903
  %24 = add nuw nsw i64 %19, 1
  br i1 %23, label %25, label %16

25:                                               ; preds = %18
  %26 = and i64 %19, 4294967295
  %27 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %10, i64 %26, i32 2, i64 0
  %28 = bitcast i8* %27 to i32*
  %29 = load i32, i32* %28, align 1
  %30 = tail call i32 @llvm.bswap.i32(i32 %29) #17
  %31 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %10, i64 %26, i32 1, i64 0
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = tail call i32 @llvm.bswap.i32(i32 %33) #17
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %6, i64 %35
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = icmp ne i32 %38, 542792024
  %40 = icmp ult i32 %30, 20
  %41 = or i1 %40, %39
  br i1 %41, label %63, label %42

42:                                               ; preds = %25
  %43 = getelementptr inbounds float, float* %1, i64 2
  %44 = getelementptr inbounds float, float* %1, i64 1
  %45 = getelementptr inbounds i8, i8* %36, i64 8
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = tail call i32 @llvm.bswap.i32(i32 %47) #17
  %49 = sitofp i32 %48 to float
  %50 = fmul float %49, 0x3EF0000000000000
  store float %50, float* %1, align 4
  %51 = getelementptr inbounds i8, i8* %36, i64 12
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = tail call i32 @llvm.bswap.i32(i32 %53) #17
  %55 = sitofp i32 %54 to float
  %56 = fmul float %55, 0x3EF0000000000000
  store float %56, float* %44, align 4
  %57 = getelementptr inbounds i8, i8* %36, i64 16
  %58 = bitcast i8* %57 to i32*
  %59 = load i32, i32* %58, align 1
  %60 = tail call i32 @llvm.bswap.i32(i32 %59) #17
  %61 = sitofp i32 %60 to float
  %62 = fmul float %61, 0x3EF0000000000000
  store float %62, float* %43, align 4
  br label %63

63:                                               ; preds = %16, %4, %25, %8, %2, %42
  %64 = phi i1 [ true, %42 ], [ false, %25 ], [ false, %2 ], [ false, %4 ], [ false, %8 ], [ false, %16 ]
  ret i1 %64
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @skcms_GetTagByIndex(%struct.skcms_ICCProfile* readonly, i32, %struct.skcms_ICCTag*) local_unnamed_addr #5 {
  %4 = icmp eq %struct.skcms_ICCProfile* %0, null
  br i1 %4, label %41, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ne i8* %7, null
  %9 = icmp ne %struct.skcms_ICCTag* %2, null
  %10 = and i1 %9, %8
  br i1 %10, label %11, label %41

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 4
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %13, %1
  br i1 %14, label %41, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds i8, i8* %7, i64 132
  %17 = bitcast i8* %16 to %struct.tag_Layout*
  %18 = zext i32 %1 to i64
  %19 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %17, i64 %18, i32 0, i64 0
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 1
  %22 = tail call i32 @llvm.bswap.i32(i32 %21) #17
  %23 = getelementptr inbounds %struct.skcms_ICCTag, %struct.skcms_ICCTag* %2, i64 0, i32 0
  store i32 %22, i32* %23, align 8
  %24 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %17, i64 %18, i32 2, i64 0
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = tail call i32 @llvm.bswap.i32(i32 %26) #17
  %28 = getelementptr inbounds %struct.skcms_ICCTag, %struct.skcms_ICCTag* %2, i64 0, i32 2
  store i32 %27, i32* %28, align 8
  %29 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %17, i64 %18, i32 1, i64 0
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = tail call i32 @llvm.bswap.i32(i32 %31) #17
  %33 = load i8*, i8** %6, align 8
  %34 = zext i32 %32 to i64
  %35 = getelementptr inbounds i8, i8* %33, i64 %34
  %36 = getelementptr inbounds %struct.skcms_ICCTag, %struct.skcms_ICCTag* %2, i64 0, i32 3
  store i8* %35, i8** %36, align 8
  %37 = bitcast i8* %35 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = tail call i32 @llvm.bswap.i32(i32 %38) #17
  %40 = getelementptr inbounds %struct.skcms_ICCTag, %struct.skcms_ICCTag* %2, i64 0, i32 1
  store i32 %39, i32* %40, align 4
  br label %41

41:                                               ; preds = %3, %11, %5, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @skcms_ParseWithA2BPriority(i8*, i64, i32* nocapture readonly, i32, %struct.skcms_ICCProfile*) local_unnamed_addr #4 {
  %6 = bitcast %struct.skcms_ICCProfile* %4 to i8*
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca float, align 4
  %20 = alloca float, align 4
  %21 = alloca float, align 4
  %22 = alloca float, align 4
  %23 = alloca float, align 4
  %24 = alloca float, align 4
  %25 = alloca float, align 4
  %26 = alloca float, align 4
  %27 = alloca float, align 4
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  %30 = alloca float, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca float, align 4
  %35 = alloca float, align 4
  %36 = alloca float, align 4
  %37 = alloca float, align 4
  %38 = alloca float, align 4
  %39 = alloca float, align 4
  %40 = alloca float, align 4
  %41 = alloca float, align 4
  %42 = alloca float, align 4
  %43 = alloca float, align 4
  %44 = alloca float, align 4
  %45 = alloca float, align 4
  %46 = alloca float, align 4
  %47 = alloca float, align 4
  %48 = alloca float, align 4
  %49 = alloca float, align 4
  %50 = alloca float, align 4
  %51 = alloca float, align 4
  %52 = alloca float, align 4
  %53 = alloca float, align 4
  %54 = alloca float, align 4
  %55 = alloca float, align 4
  %56 = alloca float, align 4
  %57 = alloca float, align 4
  %58 = alloca float, align 4
  %59 = alloca float, align 4
  %60 = alloca float, align 4
  %61 = alloca float, align 4
  %62 = alloca float, align 4
  %63 = alloca float, align 4
  %64 = alloca i32, align 4
  %65 = alloca i32, align 4
  %66 = alloca i32, align 4
  %67 = alloca float, align 4
  %68 = alloca float, align 4
  %69 = alloca float, align 4
  %70 = alloca float, align 4
  %71 = alloca float, align 4
  %72 = alloca float, align 4
  %73 = icmp eq %struct.skcms_ICCProfile* %4, null
  br i1 %73, label %2690, label %74

74:                                               ; preds = %5
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 1008, i1 false)
  %75 = icmp ult i64 %1, 132
  br i1 %75, label %2690, label %76

76:                                               ; preds = %74
  %77 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 0
  store i8* %0, i8** %77, align 8
  %78 = bitcast i8* %0 to i32*
  %79 = load i32, i32* %78, align 1
  %80 = tail call i32 @llvm.bswap.i32(i32 %79) #17
  %81 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 1
  store i32 %80, i32* %81, align 8
  %82 = getelementptr inbounds i8, i8* %0, i64 8
  %83 = bitcast i8* %82 to i32*
  %84 = load i32, i32* %83, align 1
  %85 = getelementptr inbounds i8, i8* %0, i64 16
  %86 = bitcast i8* %85 to i32*
  %87 = load i32, i32* %86, align 1
  %88 = tail call i32 @llvm.bswap.i32(i32 %87) #17
  %89 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 2
  store i32 %88, i32* %89, align 4
  %90 = getelementptr inbounds i8, i8* %0, i64 20
  %91 = bitcast i8* %90 to i32*
  %92 = load i32, i32* %91, align 1
  %93 = tail call i32 @llvm.bswap.i32(i32 %92) #17
  %94 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 3
  store i32 %93, i32* %94, align 8
  %95 = getelementptr inbounds i8, i8* %0, i64 36
  %96 = bitcast i8* %95 to i32*
  %97 = load i32, i32* %96, align 1
  %98 = getelementptr inbounds i8, i8* %0, i64 68
  %99 = bitcast i8* %98 to i32*
  %100 = load i32, i32* %99, align 1
  %101 = tail call i32 @llvm.bswap.i32(i32 %100) #17
  %102 = sitofp i32 %101 to float
  %103 = fmul float %102, 0x3EF0000000000000
  %104 = getelementptr inbounds i8, i8* %0, i64 72
  %105 = bitcast i8* %104 to i32*
  %106 = load i32, i32* %105, align 1
  %107 = tail call i32 @llvm.bswap.i32(i32 %106) #17
  %108 = sitofp i32 %107 to float
  %109 = fmul float %108, 0x3EF0000000000000
  %110 = getelementptr inbounds i8, i8* %0, i64 76
  %111 = bitcast i8* %110 to i32*
  %112 = load i32, i32* %111, align 1
  %113 = tail call i32 @llvm.bswap.i32(i32 %112) #17
  %114 = sitofp i32 %113 to float
  %115 = fmul float %114, 0x3EF0000000000000
  %116 = getelementptr inbounds i8, i8* %0, i64 128
  %117 = bitcast i8* %116 to i32*
  %118 = load i32, i32* %117, align 1
  %119 = tail call i32 @llvm.bswap.i32(i32 %118) #17
  %120 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 4
  store i32 %119, i32* %120, align 4
  %121 = zext i32 %119 to i64
  %122 = icmp eq i32 %97, 1886610273
  br i1 %122, label %123, label %2690

123:                                              ; preds = %76
  %124 = mul nuw nsw i64 %121, 12
  %125 = shl i32 %84, 24
  %126 = zext i32 %80 to i64
  %127 = icmp ugt i64 %126, %1
  %128 = add nuw nsw i64 %124, 132
  %129 = icmp ugt i64 %128, %126
  %130 = or i1 %127, %129
  %131 = icmp ugt i32 %125, 83886079
  %132 = or i1 %131, %130
  br i1 %132, label %2690, label %133

133:                                              ; preds = %123
  %134 = fadd float %103, 0xBFEEDABA00000000
  %135 = fcmp olt float %134, 0.000000e+00
  %136 = fsub float -0.000000e+00, %134
  %137 = select i1 %135, float %136, float %134
  %138 = fcmp ogt float %137, 0x3F847AE140000000
  br i1 %138, label %2690, label %139

139:                                              ; preds = %133
  %140 = fadd float %109, -1.000000e+00
  %141 = fcmp olt float %140, 0.000000e+00
  %142 = fsub float -0.000000e+00, %140
  %143 = select i1 %141, float %142, float %140
  %144 = fcmp ogt float %143, 0x3F847AE140000000
  br i1 %144, label %2690, label %145

145:                                              ; preds = %139
  %146 = fadd float %115, 0xBFEA6594A0000000
  %147 = fcmp olt float %146, 0.000000e+00
  %148 = fsub float -0.000000e+00, %146
  %149 = select i1 %147, float %148, float %146
  %150 = fcmp ogt float %149, 0x3F847AE140000000
  br i1 %150, label %2690, label %151

151:                                              ; preds = %145
  %152 = getelementptr inbounds i8, i8* %0, i64 132
  %153 = bitcast i8* %152 to %struct.tag_Layout*
  %154 = icmp eq i32 %118, 0
  br i1 %154, label %174, label %157

155:                                              ; preds = %164
  %156 = icmp ult i64 %173, %121
  br i1 %156, label %157, label %174

157:                                              ; preds = %151, %155
  %158 = phi i64 [ %173, %155 ], [ 0, %151 ]
  %159 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %153, i64 %158, i32 2, i64 0
  %160 = bitcast i8* %159 to i32*
  %161 = load i32, i32* %160, align 1
  %162 = tail call i32 @llvm.bswap.i32(i32 %161) #17
  %163 = icmp ult i32 %162, 4
  br i1 %163, label %2690, label %164

164:                                              ; preds = %157
  %165 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %153, i64 %158, i32 1, i64 0
  %166 = bitcast i8* %165 to i32*
  %167 = load i32, i32* %166, align 1
  %168 = tail call i32 @llvm.bswap.i32(i32 %167) #17
  %169 = zext i32 %168 to i64
  %170 = zext i32 %162 to i64
  %171 = add nuw nsw i64 %169, %170
  %172 = icmp ugt i64 %171, %126
  %173 = add nuw nsw i64 %158, 1
  br i1 %172, label %2690, label %155

174:                                              ; preds = %155, %151
  switch i32 %93, label %2690 [
    i32 1482250784, label %175
    i32 1281450528, label %175
  ]

175:                                              ; preds = %174, %174
  %176 = icmp eq i32 %92, 542792024
  %177 = icmp eq i32 %87, 1497453127
  br i1 %177, label %178, label %217

178:                                              ; preds = %175
  %179 = icmp eq i8* %0, null
  %180 = or i1 %179, %154
  br i1 %180, label %294, label %183

181:                                              ; preds = %183
  %182 = icmp ult i64 %189, %121
  br i1 %182, label %183, label %217

183:                                              ; preds = %178, %181
  %184 = phi i64 [ %189, %181 ], [ 0, %178 ]
  %185 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %153, i64 %184, i32 0, i64 0
  %186 = bitcast i8* %185 to i32*
  %187 = load i32, i32* %186, align 1
  %188 = icmp eq i32 %187, 1129469035
  %189 = add nuw nsw i64 %184, 1
  br i1 %188, label %190, label %181

190:                                              ; preds = %183
  %191 = and i64 %184, 4294967295
  %192 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %153, i64 %191, i32 2, i64 0
  %193 = bitcast i8* %192 to i32*
  %194 = load i32, i32* %193, align 1
  %195 = tail call i32 @llvm.bswap.i32(i32 %194) #17
  %196 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %153, i64 %191, i32 1, i64 0
  %197 = bitcast i8* %196 to i32*
  %198 = load i32, i32* %197, align 1
  %199 = tail call i32 @llvm.bswap.i32(i32 %198) #17
  %200 = zext i32 %199 to i64
  %201 = getelementptr inbounds i8, i8* %0, i64 %200
  %202 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 6
  %203 = getelementptr inbounds [3 x %union.skcms_Curve], [3 x %union.skcms_Curve]* %202, i64 0, i64 0
  %204 = tail call fastcc zeroext i1 @_ZL10read_curvePKhjP11skcms_CurvePj(i8* %201, i32 %195, %union.skcms_Curve* %203, i32* null)
  br i1 %204, label %205, label %2690

205:                                              ; preds = %190
  %206 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 6, i64 1
  %207 = bitcast %union.skcms_Curve* %206 to i8*
  %208 = bitcast [3 x %union.skcms_Curve]* %202 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %207, i8* align 8 %208, i64 32, i1 false)
  %209 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 6, i64 2
  %210 = bitcast %union.skcms_Curve* %209 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %210, i8* align 8 %208, i64 32, i1 false)
  %211 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 5
  store i8 1, i8* %211, align 8
  br i1 %176, label %212, label %449

212:                                              ; preds = %205
  %213 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 8, i32 0, i64 0, i64 0
  store float %103, float* %213, align 4
  %214 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 8, i32 0, i64 1, i64 1
  store float %109, float* %214, align 4
  %215 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 8, i32 0, i64 2, i64 2
  store float %115, float* %215, align 4
  %216 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 7
  store i8 1, i8* %216, align 8
  br label %449

217:                                              ; preds = %181, %175
  %218 = icmp eq i8* %0, null
  %219 = or i1 %218, %154
  br i1 %219, label %294, label %222

220:                                              ; preds = %222
  %221 = icmp ult i64 %228, %121
  br i1 %221, label %222, label %294

222:                                              ; preds = %217, %220
  %223 = phi i64 [ %228, %220 ], [ 0, %217 ]
  %224 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %153, i64 %223, i32 0, i64 0
  %225 = bitcast i8* %224 to i32*
  %226 = load i32, i32* %225, align 1
  %227 = icmp eq i32 %226, 1129469042
  %228 = add nuw nsw i64 %223, 1
  br i1 %227, label %229, label %220

229:                                              ; preds = %222
  %230 = and i64 %223, 4294967295
  %231 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %153, i64 %230, i32 2, i64 0
  %232 = bitcast i8* %231 to i32*
  %233 = load i32, i32* %232, align 1
  %234 = tail call i32 @llvm.bswap.i32(i32 %233) #17
  %235 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %153, i64 %230, i32 1, i64 0
  %236 = bitcast i8* %235 to i32*
  %237 = load i32, i32* %236, align 1
  %238 = tail call i32 @llvm.bswap.i32(i32 %237) #17
  %239 = zext i32 %238 to i64
  %240 = getelementptr inbounds i8, i8* %0, i64 %239
  br label %243

241:                                              ; preds = %243
  %242 = icmp ult i64 %249, %121
  br i1 %242, label %243, label %294

243:                                              ; preds = %229, %241
  %244 = phi i64 [ %249, %241 ], [ 0, %229 ]
  %245 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %153, i64 %244, i32 0, i64 0
  %246 = bitcast i8* %245 to i32*
  %247 = load i32, i32* %246, align 1
  %248 = icmp eq i32 %247, 1129469031
  %249 = add nuw nsw i64 %244, 1
  br i1 %248, label %250, label %241

250:                                              ; preds = %243
  %251 = and i64 %244, 4294967295
  %252 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %153, i64 %251, i32 2, i64 0
  %253 = bitcast i8* %252 to i32*
  %254 = load i32, i32* %253, align 1
  %255 = tail call i32 @llvm.bswap.i32(i32 %254) #17
  %256 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %153, i64 %251, i32 1, i64 0
  %257 = bitcast i8* %256 to i32*
  %258 = load i32, i32* %257, align 1
  %259 = tail call i32 @llvm.bswap.i32(i32 %258) #17
  %260 = zext i32 %259 to i64
  %261 = getelementptr inbounds i8, i8* %0, i64 %260
  br label %264

262:                                              ; preds = %264
  %263 = icmp ult i64 %270, %121
  br i1 %263, label %264, label %294

264:                                              ; preds = %250, %262
  %265 = phi i64 [ %270, %262 ], [ 0, %250 ]
  %266 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %153, i64 %265, i32 0, i64 0
  %267 = bitcast i8* %266 to i32*
  %268 = load i32, i32* %267, align 1
  %269 = icmp eq i32 %268, 1129469026
  %270 = add nuw nsw i64 %265, 1
  br i1 %269, label %271, label %262

271:                                              ; preds = %264
  %272 = and i64 %265, 4294967295
  %273 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %153, i64 %272, i32 2, i64 0
  %274 = bitcast i8* %273 to i32*
  %275 = load i32, i32* %274, align 1
  %276 = tail call i32 @llvm.bswap.i32(i32 %275) #17
  %277 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %153, i64 %272, i32 1, i64 0
  %278 = bitcast i8* %277 to i32*
  %279 = load i32, i32* %278, align 1
  %280 = tail call i32 @llvm.bswap.i32(i32 %279) #17
  %281 = zext i32 %280 to i64
  %282 = getelementptr inbounds i8, i8* %0, i64 %281
  %283 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 6, i64 0
  %284 = tail call fastcc zeroext i1 @_ZL10read_curvePKhjP11skcms_CurvePj(i8* %240, i32 %234, %union.skcms_Curve* %283, i32* null)
  br i1 %284, label %285, label %2690

285:                                              ; preds = %271
  %286 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 6, i64 1
  %287 = tail call fastcc zeroext i1 @_ZL10read_curvePKhjP11skcms_CurvePj(i8* %261, i32 %255, %union.skcms_Curve* %286, i32* null)
  br i1 %287, label %288, label %2690

288:                                              ; preds = %285
  %289 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 6, i64 2
  %290 = tail call fastcc zeroext i1 @_ZL10read_curvePKhjP11skcms_CurvePj(i8* %282, i32 %276, %union.skcms_Curve* %289, i32* null)
  br i1 %290, label %291, label %2690

291:                                              ; preds = %288
  %292 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 5
  store i8 1, i8* %292, align 8
  %293 = load i8*, i8** %77, align 8
  br label %294

294:                                              ; preds = %220, %241, %262, %217, %178, %291
  %295 = phi i8* [ %0, %217 ], [ %0, %178 ], [ %293, %291 ], [ %0, %262 ], [ %0, %241 ], [ %0, %220 ]
  %296 = icmp eq i8* %295, null
  br i1 %296, label %449, label %297

297:                                              ; preds = %294
  %298 = getelementptr inbounds i8, i8* %295, i64 132
  %299 = bitcast i8* %298 to %struct.tag_Layout*
  %300 = load i32, i32* %120, align 4
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %449, label %302

302:                                              ; preds = %297
  %303 = zext i32 %300 to i64
  br label %306

304:                                              ; preds = %306
  %305 = icmp eq i64 %312, %303
  br i1 %305, label %449, label %306

306:                                              ; preds = %304, %302
  %307 = phi i64 [ 0, %302 ], [ %312, %304 ]
  %308 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %299, i64 %307, i32 0, i64 0
  %309 = bitcast i8* %308 to i32*
  %310 = load i32, i32* %309, align 1
  %311 = icmp eq i32 %310, 1515804786
  %312 = add nuw nsw i64 %307, 1
  br i1 %311, label %313, label %304

313:                                              ; preds = %306
  %314 = and i64 %307, 4294967295
  %315 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %299, i64 %314, i32 2, i64 0
  %316 = bitcast i8* %315 to i32*
  %317 = load i32, i32* %316, align 1
  %318 = tail call i32 @llvm.bswap.i32(i32 %317) #17
  %319 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %299, i64 %314, i32 1, i64 0
  %320 = bitcast i8* %319 to i32*
  %321 = load i32, i32* %320, align 1
  %322 = tail call i32 @llvm.bswap.i32(i32 %321) #17
  %323 = zext i32 %322 to i64
  %324 = getelementptr inbounds i8, i8* %295, i64 %323
  %325 = bitcast i8* %324 to i32*
  %326 = load i32, i32* %325, align 1
  br label %329

327:                                              ; preds = %329
  %328 = icmp eq i64 %335, %303
  br i1 %328, label %449, label %329

329:                                              ; preds = %327, %313
  %330 = phi i64 [ 0, %313 ], [ %335, %327 ]
  %331 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %299, i64 %330, i32 0, i64 0
  %332 = bitcast i8* %331 to i32*
  %333 = load i32, i32* %332, align 1
  %334 = icmp eq i32 %333, 1515804775
  %335 = add nuw nsw i64 %330, 1
  br i1 %334, label %336, label %327

336:                                              ; preds = %329
  %337 = and i64 %330, 4294967295
  %338 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %299, i64 %337, i32 2, i64 0
  %339 = bitcast i8* %338 to i32*
  %340 = load i32, i32* %339, align 1
  %341 = tail call i32 @llvm.bswap.i32(i32 %340) #17
  %342 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %299, i64 %337, i32 1, i64 0
  %343 = bitcast i8* %342 to i32*
  %344 = load i32, i32* %343, align 1
  %345 = tail call i32 @llvm.bswap.i32(i32 %344) #17
  %346 = zext i32 %345 to i64
  %347 = getelementptr inbounds i8, i8* %295, i64 %346
  %348 = bitcast i8* %347 to i32*
  %349 = load i32, i32* %348, align 1
  br label %352

350:                                              ; preds = %352
  %351 = icmp eq i64 %358, %303
  br i1 %351, label %449, label %352

352:                                              ; preds = %350, %336
  %353 = phi i64 [ 0, %336 ], [ %358, %350 ]
  %354 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %299, i64 %353, i32 0, i64 0
  %355 = bitcast i8* %354 to i32*
  %356 = load i32, i32* %355, align 1
  %357 = icmp eq i32 %356, 1515804770
  %358 = add nuw nsw i64 %353, 1
  br i1 %357, label %359, label %350

359:                                              ; preds = %352
  %360 = and i64 %353, 4294967295
  %361 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %299, i64 %360, i32 2, i64 0
  %362 = bitcast i8* %361 to i32*
  %363 = load i32, i32* %362, align 1
  %364 = tail call i32 @llvm.bswap.i32(i32 %363) #17
  %365 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %299, i64 %360, i32 1, i64 0
  %366 = bitcast i8* %365 to i32*
  %367 = load i32, i32* %366, align 1
  %368 = tail call i32 @llvm.bswap.i32(i32 %367) #17
  %369 = zext i32 %368 to i64
  %370 = getelementptr inbounds i8, i8* %295, i64 %369
  %371 = bitcast i8* %370 to i32*
  %372 = load i32, i32* %371, align 1
  %373 = icmp ne i32 %326, 542792024
  %374 = icmp ult i32 %318, 20
  %375 = or i1 %374, %373
  br i1 %375, label %2690, label %376

376:                                              ; preds = %359
  %377 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 8, i32 0, i64 2, i64 0
  %378 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 8, i32 0, i64 1, i64 0
  %379 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 8, i32 0, i64 0, i64 0
  %380 = getelementptr inbounds i8, i8* %324, i64 8
  %381 = bitcast i8* %380 to i32*
  %382 = load i32, i32* %381, align 1
  %383 = tail call i32 @llvm.bswap.i32(i32 %382) #17
  %384 = sitofp i32 %383 to float
  %385 = fmul float %384, 0x3EF0000000000000
  store float %385, float* %379, align 4
  %386 = getelementptr inbounds i8, i8* %324, i64 12
  %387 = bitcast i8* %386 to i32*
  %388 = load i32, i32* %387, align 1
  %389 = tail call i32 @llvm.bswap.i32(i32 %388) #17
  %390 = sitofp i32 %389 to float
  %391 = fmul float %390, 0x3EF0000000000000
  store float %391, float* %378, align 4
  %392 = getelementptr inbounds i8, i8* %324, i64 16
  %393 = bitcast i8* %392 to i32*
  %394 = load i32, i32* %393, align 1
  %395 = tail call i32 @llvm.bswap.i32(i32 %394) #17
  %396 = sitofp i32 %395 to float
  %397 = fmul float %396, 0x3EF0000000000000
  store float %397, float* %377, align 4
  %398 = icmp ne i32 %349, 542792024
  %399 = icmp ult i32 %341, 20
  %400 = or i1 %399, %398
  br i1 %400, label %2690, label %401

401:                                              ; preds = %376
  %402 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 8, i32 0, i64 2, i64 1
  %403 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 8, i32 0, i64 1, i64 1
  %404 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 8, i32 0, i64 0, i64 1
  %405 = getelementptr inbounds i8, i8* %347, i64 8
  %406 = bitcast i8* %405 to i32*
  %407 = load i32, i32* %406, align 1
  %408 = tail call i32 @llvm.bswap.i32(i32 %407) #17
  %409 = sitofp i32 %408 to float
  %410 = fmul float %409, 0x3EF0000000000000
  store float %410, float* %404, align 4
  %411 = getelementptr inbounds i8, i8* %347, i64 12
  %412 = bitcast i8* %411 to i32*
  %413 = load i32, i32* %412, align 1
  %414 = tail call i32 @llvm.bswap.i32(i32 %413) #17
  %415 = sitofp i32 %414 to float
  %416 = fmul float %415, 0x3EF0000000000000
  store float %416, float* %403, align 4
  %417 = getelementptr inbounds i8, i8* %347, i64 16
  %418 = bitcast i8* %417 to i32*
  %419 = load i32, i32* %418, align 1
  %420 = tail call i32 @llvm.bswap.i32(i32 %419) #17
  %421 = sitofp i32 %420 to float
  %422 = fmul float %421, 0x3EF0000000000000
  store float %422, float* %402, align 4
  %423 = icmp ne i32 %372, 542792024
  %424 = icmp ult i32 %364, 20
  %425 = or i1 %424, %423
  br i1 %425, label %2690, label %426

426:                                              ; preds = %401
  %427 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 8, i32 0, i64 2, i64 2
  %428 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 8, i32 0, i64 1, i64 2
  %429 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 8, i32 0, i64 0, i64 2
  %430 = getelementptr inbounds i8, i8* %370, i64 8
  %431 = bitcast i8* %430 to i32*
  %432 = load i32, i32* %431, align 1
  %433 = tail call i32 @llvm.bswap.i32(i32 %432) #17
  %434 = sitofp i32 %433 to float
  %435 = fmul float %434, 0x3EF0000000000000
  store float %435, float* %429, align 4
  %436 = getelementptr inbounds i8, i8* %370, i64 12
  %437 = bitcast i8* %436 to i32*
  %438 = load i32, i32* %437, align 1
  %439 = tail call i32 @llvm.bswap.i32(i32 %438) #17
  %440 = sitofp i32 %439 to float
  %441 = fmul float %440, 0x3EF0000000000000
  store float %441, float* %428, align 4
  %442 = getelementptr inbounds i8, i8* %370, i64 16
  %443 = bitcast i8* %442 to i32*
  %444 = load i32, i32* %443, align 1
  %445 = tail call i32 @llvm.bswap.i32(i32 %444) #17
  %446 = sitofp i32 %445 to float
  %447 = fmul float %446, 0x3EF0000000000000
  store float %447, float* %427, align 4
  %448 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 7
  store i8 1, i8* %448, align 8
  br label %449

449:                                              ; preds = %304, %327, %350, %294, %297, %426, %205, %212
  %450 = icmp sgt i32 %3, 0
  br i1 %450, label %451, label %2678

451:                                              ; preds = %449
  %452 = zext i32 %3 to i64
  br label %453

453:                                              ; preds = %1749, %451
  %454 = phi i64 [ 0, %451 ], [ %1750, %1749 ]
  %455 = getelementptr inbounds i32, i32* %2, i64 %454
  %456 = load i32, i32* %455, align 4
  %457 = icmp ugt i32 %456, 2
  br i1 %457, label %2690, label %458

458:                                              ; preds = %453
  %459 = add nuw nsw i32 %456, 1093812784
  %460 = load i8*, i8** %77, align 8
  %461 = icmp eq i8* %460, null
  br i1 %461, label %1749, label %462

462:                                              ; preds = %458
  %463 = getelementptr inbounds i8, i8* %460, i64 132
  %464 = bitcast i8* %463 to %struct.tag_Layout*
  %465 = load i32, i32* %120, align 4
  %466 = icmp eq i32 %465, 0
  br i1 %466, label %1749, label %467

467:                                              ; preds = %462
  %468 = zext i32 %465 to i64
  br label %471

469:                                              ; preds = %471
  %470 = icmp eq i64 %478, %468
  br i1 %470, label %1749, label %471

471:                                              ; preds = %469, %467
  %472 = phi i64 [ 0, %467 ], [ %478, %469 ]
  %473 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %464, i64 %472, i32 0, i64 0
  %474 = bitcast i8* %473 to i32*
  %475 = load i32, i32* %474, align 1
  %476 = tail call i32 @llvm.bswap.i32(i32 %475) #17
  %477 = icmp eq i32 %476, %459
  %478 = add nuw nsw i64 %472, 1
  br i1 %477, label %479, label %469

479:                                              ; preds = %471
  %480 = bitcast i8* %463 to %struct.tag_Layout*
  %481 = and i64 %472, 4294967295
  %482 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %480, i64 %481, i32 2, i64 0
  %483 = bitcast i8* %482 to i32*
  %484 = load i32, i32* %483, align 1
  %485 = tail call i32 @llvm.bswap.i32(i32 %484) #17
  %486 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %480, i64 %481, i32 1, i64 0
  %487 = bitcast i8* %486 to i32*
  %488 = load i32, i32* %487, align 1
  %489 = tail call i32 @llvm.bswap.i32(i32 %488) #17
  %490 = zext i32 %489 to i64
  %491 = getelementptr inbounds i8, i8* %460, i64 %490
  %492 = bitcast i8* %491 to i32*
  %493 = load i32, i32* %492, align 1
  %494 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10
  %495 = icmp eq i32 %493, 829711981
  br i1 %495, label %496, label %775

496:                                              ; preds = %479
  %497 = icmp ult i32 %485, 48
  br i1 %497, label %2690, label %498

498:                                              ; preds = %496
  %499 = bitcast i8* %491 to %struct.mft1_Layout*
  %500 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 5
  store i32 0, i32* %500, align 8
  %501 = getelementptr inbounds i8, i8* %491, i64 8
  %502 = load i8, i8* %501, align 1
  %503 = zext i8 %502 to i32
  %504 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %494, i64 0, i32 0
  store i32 %503, i32* %504, align 8
  %505 = getelementptr inbounds i8, i8* %491, i64 9
  %506 = load i8, i8* %505, align 1
  %507 = zext i8 %506 to i32
  %508 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 8
  store i32 %507, i32* %508, align 8
  %509 = icmp ne i8 %506, 3
  %510 = add i8 %502, -1
  %511 = icmp ugt i8 %510, 3
  %512 = or i1 %511, %509
  br i1 %512, label %2690, label %513

513:                                              ; preds = %498
  %514 = getelementptr inbounds i8, i8* %491, i64 10
  %515 = zext i8 %502 to i64
  %516 = icmp ult i8 %502, 32
  br i1 %516, label %575, label %517

517:                                              ; preds = %513
  %518 = getelementptr %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 0
  %519 = add nuw nsw i64 %515, 312
  %520 = getelementptr i8, i8* %6, i64 %519
  %521 = add nuw nsw i64 %490, 11
  %522 = getelementptr i8, i8* %460, i64 %521
  %523 = icmp ult i8* %518, %522
  %524 = icmp ult i8* %514, %520
  %525 = and i1 %523, %524
  br i1 %525, label %575, label %526

526:                                              ; preds = %517
  %527 = and i64 %515, 224
  %528 = add nsw i64 %527, -32
  %529 = lshr exact i64 %528, 5
  %530 = add nuw nsw i64 %529, 1
  %531 = and i64 %530, 1
  %532 = icmp eq i64 %528, 0
  br i1 %532, label %560, label %533

533:                                              ; preds = %526
  %534 = sub nuw nsw i64 %530, %531
  %535 = load i8, i8* %514, align 1, !alias.scope !2
  %536 = insertelement <16 x i8> undef, i8 %535, i32 0
  %537 = shufflevector <16 x i8> %536, <16 x i8> undef, <16 x i32> zeroinitializer
  %538 = insertelement <16 x i8> undef, i8 %535, i32 0
  %539 = shufflevector <16 x i8> %538, <16 x i8> undef, <16 x i32> zeroinitializer
  %540 = load i8, i8* %514, align 1, !alias.scope !2
  %541 = insertelement <16 x i8> undef, i8 %540, i32 0
  %542 = shufflevector <16 x i8> %541, <16 x i8> undef, <16 x i32> zeroinitializer
  %543 = insertelement <16 x i8> undef, i8 %540, i32 0
  %544 = shufflevector <16 x i8> %543, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %545

545:                                              ; preds = %545, %533
  %546 = phi i64 [ 0, %533 ], [ %557, %545 ]
  %547 = phi i64 [ %534, %533 ], [ %558, %545 ]
  %548 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %546
  %549 = bitcast i8* %548 to <16 x i8>*
  store <16 x i8> %537, <16 x i8>* %549, align 1, !alias.scope !5, !noalias !2
  %550 = getelementptr inbounds i8, i8* %548, i64 16
  %551 = bitcast i8* %550 to <16 x i8>*
  store <16 x i8> %539, <16 x i8>* %551, align 1, !alias.scope !5, !noalias !2
  %552 = or i64 %546, 32
  %553 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %552
  %554 = bitcast i8* %553 to <16 x i8>*
  store <16 x i8> %542, <16 x i8>* %554, align 1, !alias.scope !5, !noalias !2
  %555 = getelementptr inbounds i8, i8* %553, i64 16
  %556 = bitcast i8* %555 to <16 x i8>*
  store <16 x i8> %544, <16 x i8>* %556, align 1, !alias.scope !5, !noalias !2
  %557 = add i64 %546, 64
  %558 = add i64 %547, -2
  %559 = icmp eq i64 %558, 0
  br i1 %559, label %560, label %545, !llvm.loop !7

560:                                              ; preds = %545, %526
  %561 = phi i64 [ 0, %526 ], [ %557, %545 ]
  %562 = icmp eq i64 %531, 0
  br i1 %562, label %573, label %563

563:                                              ; preds = %560
  %564 = load i8, i8* %514, align 1, !alias.scope !2
  %565 = insertelement <16 x i8> undef, i8 %564, i32 0
  %566 = shufflevector <16 x i8> %565, <16 x i8> undef, <16 x i32> zeroinitializer
  %567 = insertelement <16 x i8> undef, i8 %564, i32 0
  %568 = shufflevector <16 x i8> %567, <16 x i8> undef, <16 x i32> zeroinitializer
  %569 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %561
  %570 = bitcast i8* %569 to <16 x i8>*
  store <16 x i8> %566, <16 x i8>* %570, align 1, !alias.scope !5, !noalias !2
  %571 = getelementptr inbounds i8, i8* %569, i64 16
  %572 = bitcast i8* %571 to <16 x i8>*
  store <16 x i8> %568, <16 x i8>* %572, align 1, !alias.scope !5, !noalias !2
  br label %573

573:                                              ; preds = %560, %563
  %574 = icmp eq i64 %527, %515
  br i1 %574, label %607, label %575

575:                                              ; preds = %573, %517, %513
  %576 = phi i64 [ 0, %517 ], [ 0, %513 ], [ %527, %573 ]
  %577 = xor i64 %576, -1
  %578 = add nsw i64 %577, %515
  %579 = and i64 %515, 3
  %580 = icmp eq i64 %579, 0
  br i1 %580, label %589, label %581

581:                                              ; preds = %575, %581
  %582 = phi i64 [ %586, %581 ], [ %576, %575 ]
  %583 = phi i64 [ %587, %581 ], [ %579, %575 ]
  %584 = load i8, i8* %514, align 1
  %585 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %582
  store i8 %584, i8* %585, align 1
  %586 = add nuw nsw i64 %582, 1
  %587 = add i64 %583, -1
  %588 = icmp eq i64 %587, 0
  br i1 %588, label %589, label %581, !llvm.loop !9

589:                                              ; preds = %581, %575
  %590 = phi i64 [ %576, %575 ], [ %586, %581 ]
  %591 = icmp ult i64 %578, 3
  br i1 %591, label %607, label %592

592:                                              ; preds = %589, %592
  %593 = phi i64 [ %605, %592 ], [ %590, %589 ]
  %594 = load i8, i8* %514, align 1
  %595 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %593
  store i8 %594, i8* %595, align 1
  %596 = add nuw nsw i64 %593, 1
  %597 = load i8, i8* %514, align 1
  %598 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %596
  store i8 %597, i8* %598, align 1
  %599 = add nuw nsw i64 %593, 2
  %600 = load i8, i8* %514, align 1
  %601 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %599
  store i8 %600, i8* %601, align 1
  %602 = add nuw nsw i64 %593, 3
  %603 = load i8, i8* %514, align 1
  %604 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %602
  store i8 %603, i8* %604, align 1
  %605 = add nuw nsw i64 %593, 4
  %606 = icmp eq i64 %605, %515
  br i1 %606, label %607, label %592, !llvm.loop !11

607:                                              ; preds = %589, %592, %573
  %608 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 0
  %609 = load i8, i8* %608, align 8
  %610 = icmp ugt i8 %609, 1
  br i1 %610, label %611, label %775

611:                                              ; preds = %607
  %612 = zext i32 %485 to i64
  %613 = add nsw i64 %612, -48
  %614 = shl nuw nsw i32 %503, 8
  %615 = load i32, i32* %508, align 8
  %616 = shl i32 %615, 8
  %617 = zext i32 %615 to i64
  %618 = icmp eq i8 %502, 0
  br i1 %618, label %646, label %619

619:                                              ; preds = %611
  %620 = zext i8 %609 to i64
  %621 = mul nuw nsw i64 %617, %620
  %622 = icmp eq i8 %502, 1
  br i1 %622, label %646, label %623

623:                                              ; preds = %619
  %624 = add nsw i64 %515, -1
  %625 = add nsw i64 %515, -2
  %626 = and i64 %624, 7
  %627 = icmp ult i64 %625, 7
  br i1 %627, label %630, label %628

628:                                              ; preds = %623
  %629 = sub nsw i64 %624, %626
  br label %659

630:                                              ; preds = %659, %623
  %631 = phi i64 [ undef, %623 ], [ %701, %659 ]
  %632 = phi i64 [ 1, %623 ], [ %702, %659 ]
  %633 = phi i64 [ %621, %623 ], [ %701, %659 ]
  %634 = icmp eq i64 %626, 0
  br i1 %634, label %646, label %635

635:                                              ; preds = %630, %635
  %636 = phi i64 [ %643, %635 ], [ %632, %630 ]
  %637 = phi i64 [ %642, %635 ], [ %633, %630 ]
  %638 = phi i64 [ %644, %635 ], [ %626, %630 ]
  %639 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %636
  %640 = load i8, i8* %639, align 1
  %641 = zext i8 %640 to i64
  %642 = mul i64 %637, %641
  %643 = add nuw nsw i64 %636, 1
  %644 = add i64 %638, -1
  %645 = icmp eq i64 %644, 0
  br i1 %645, label %646, label %635, !llvm.loop !12

646:                                              ; preds = %630, %635, %619, %611
  %647 = phi i64 [ %617, %611 ], [ %621, %619 ], [ %631, %630 ], [ %642, %635 ]
  %648 = zext i32 %614 to i64
  %649 = zext i32 %616 to i64
  %650 = add nuw nsw i64 %649, %648
  %651 = add i64 %650, %647
  %652 = icmp ugt i64 %651, %613
  br i1 %652, label %775, label %653

653:                                              ; preds = %646
  br i1 %618, label %716, label %654

654:                                              ; preds = %653
  %655 = and i64 %515, 1
  %656 = icmp eq i8 %502, 1
  br i1 %656, label %705, label %657

657:                                              ; preds = %654
  %658 = sub nsw i64 %515, %655
  br label %723

659:                                              ; preds = %659, %628
  %660 = phi i64 [ 1, %628 ], [ %702, %659 ]
  %661 = phi i64 [ %621, %628 ], [ %701, %659 ]
  %662 = phi i64 [ %629, %628 ], [ %703, %659 ]
  %663 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %660
  %664 = load i8, i8* %663, align 1
  %665 = zext i8 %664 to i64
  %666 = mul i64 %661, %665
  %667 = add nuw nsw i64 %660, 1
  %668 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %667
  %669 = load i8, i8* %668, align 1
  %670 = zext i8 %669 to i64
  %671 = mul i64 %666, %670
  %672 = add nuw nsw i64 %660, 2
  %673 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %672
  %674 = load i8, i8* %673, align 1
  %675 = zext i8 %674 to i64
  %676 = mul i64 %671, %675
  %677 = add nuw nsw i64 %660, 3
  %678 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %677
  %679 = load i8, i8* %678, align 1
  %680 = zext i8 %679 to i64
  %681 = mul i64 %676, %680
  %682 = add nuw nsw i64 %660, 4
  %683 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %682
  %684 = load i8, i8* %683, align 1
  %685 = zext i8 %684 to i64
  %686 = mul i64 %681, %685
  %687 = add nuw nsw i64 %660, 5
  %688 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %687
  %689 = load i8, i8* %688, align 1
  %690 = zext i8 %689 to i64
  %691 = mul i64 %686, %690
  %692 = add nuw nsw i64 %660, 6
  %693 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %692
  %694 = load i8, i8* %693, align 1
  %695 = zext i8 %694 to i64
  %696 = mul i64 %691, %695
  %697 = add nuw nsw i64 %660, 7
  %698 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %697
  %699 = load i8, i8* %698, align 1
  %700 = zext i8 %699 to i64
  %701 = mul i64 %696, %700
  %702 = add nuw nsw i64 %660, 8
  %703 = add i64 %662, -8
  %704 = icmp eq i64 %703, 0
  br i1 %704, label %630, label %659

705:                                              ; preds = %723, %654
  %706 = phi i64 [ 0, %654 ], [ %737, %723 ]
  %707 = icmp eq i64 %655, 0
  br i1 %707, label %714, label %708

708:                                              ; preds = %705
  %709 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %706, i32 0, i32 0
  store i32 256, i32* %709, align 8
  %710 = shl i64 %706, 8
  %711 = getelementptr inbounds %struct.mft1_Layout, %struct.mft1_Layout* %499, i64 0, i32 1, i64 %710
  %712 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %706, i32 0, i32 1
  store i8* %711, i8** %712, align 8
  %713 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %706, i32 0, i32 2
  store i8* null, i8** %713, align 8
  br label %714

714:                                              ; preds = %705, %708
  %715 = load i32, i32* %508, align 8
  br label %716

716:                                              ; preds = %714, %653
  %717 = phi i32 [ %715, %714 ], [ %615, %653 ]
  %718 = getelementptr inbounds %struct.mft1_Layout, %struct.mft1_Layout* %499, i64 0, i32 1, i64 %648
  %719 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 3
  store i8* %718, i8** %719, align 8
  %720 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 4
  store i8* null, i8** %720, align 8
  %721 = getelementptr inbounds i8, i8* %718, i64 %647
  %722 = icmp eq i32 %717, 0
  br i1 %722, label %775, label %740

723:                                              ; preds = %723, %657
  %724 = phi i64 [ 0, %657 ], [ %737, %723 ]
  %725 = phi i64 [ %658, %657 ], [ %738, %723 ]
  %726 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %724, i32 0, i32 0
  store i32 256, i32* %726, align 8
  %727 = shl i64 %724, 8
  %728 = getelementptr inbounds %struct.mft1_Layout, %struct.mft1_Layout* %499, i64 0, i32 1, i64 %727
  %729 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %724, i32 0, i32 1
  store i8* %728, i8** %729, align 8
  %730 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %724, i32 0, i32 2
  store i8* null, i8** %730, align 8
  %731 = or i64 %724, 1
  %732 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %731, i32 0, i32 0
  store i32 256, i32* %732, align 8
  %733 = shl i64 %731, 8
  %734 = getelementptr inbounds %struct.mft1_Layout, %struct.mft1_Layout* %499, i64 0, i32 1, i64 %733
  %735 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %731, i32 0, i32 1
  store i8* %734, i8** %735, align 8
  %736 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %731, i32 0, i32 2
  store i8* null, i8** %736, align 8
  %737 = add nuw nsw i64 %724, 2
  %738 = add i64 %725, -2
  %739 = icmp eq i64 %738, 0
  br i1 %739, label %705, label %723

740:                                              ; preds = %716
  %741 = zext i32 %717 to i64
  %742 = and i64 %741, 1
  %743 = icmp eq i32 %717, 1
  br i1 %743, label %765, label %744

744:                                              ; preds = %740
  %745 = sub nsw i64 %741, %742
  br label %746

746:                                              ; preds = %746, %744
  %747 = phi i64 [ 0, %744 ], [ %762, %746 ]
  %748 = phi i64 [ %745, %744 ], [ %763, %746 ]
  %749 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %747, i32 0, i32 0
  store i32 256, i32* %749, align 8
  %750 = shl i64 %747, 8
  %751 = and i64 %750, 4294966784
  %752 = getelementptr inbounds i8, i8* %721, i64 %751
  %753 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %747, i32 0, i32 1
  store i8* %752, i8** %753, align 8
  %754 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %747, i32 0, i32 2
  store i8* null, i8** %754, align 8
  %755 = or i64 %747, 1
  %756 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %755, i32 0, i32 0
  store i32 256, i32* %756, align 8
  %757 = shl i64 %755, 8
  %758 = and i64 %757, 4294967040
  %759 = getelementptr inbounds i8, i8* %721, i64 %758
  %760 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %755, i32 0, i32 1
  store i8* %759, i8** %760, align 8
  %761 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %755, i32 0, i32 2
  store i8* null, i8** %761, align 8
  %762 = add nuw nsw i64 %747, 2
  %763 = add i64 %748, -2
  %764 = icmp eq i64 %763, 0
  br i1 %764, label %765, label %746

765:                                              ; preds = %746, %740
  %766 = phi i64 [ 0, %740 ], [ %762, %746 ]
  %767 = icmp eq i64 %742, 0
  br i1 %767, label %775, label %768

768:                                              ; preds = %765
  %769 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %766, i32 0, i32 0
  store i32 256, i32* %769, align 8
  %770 = shl i64 %766, 8
  %771 = and i64 %770, 4294967040
  %772 = getelementptr inbounds i8, i8* %721, i64 %771
  %773 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %766, i32 0, i32 1
  store i8* %772, i8** %773, align 8
  %774 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %766, i32 0, i32 2
  store i8* null, i8** %774, align 8
  br label %775

775:                                              ; preds = %768, %765, %607, %646, %716, %479
  %776 = phi i1 [ false, %479 ], [ true, %716 ], [ false, %646 ], [ false, %607 ], [ true, %765 ], [ true, %768 ]
  %777 = icmp eq i32 %493, 846489197
  br i1 %777, label %778, label %1085

778:                                              ; preds = %775
  %779 = icmp ult i32 %485, 52
  br i1 %779, label %2690, label %780

780:                                              ; preds = %778
  %781 = bitcast i8* %491 to %struct.mft2_Layout*
  %782 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 5
  store i32 0, i32* %782, align 8
  %783 = getelementptr inbounds i8, i8* %491, i64 8
  %784 = load i8, i8* %783, align 1
  %785 = zext i8 %784 to i32
  %786 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %494, i64 0, i32 0
  store i32 %785, i32* %786, align 8
  %787 = getelementptr inbounds i8, i8* %491, i64 9
  %788 = load i8, i8* %787, align 1
  %789 = zext i8 %788 to i32
  %790 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 8
  store i32 %789, i32* %790, align 8
  %791 = icmp ne i8 %788, 3
  %792 = add i8 %784, -1
  %793 = icmp ugt i8 %792, 3
  %794 = or i1 %793, %791
  br i1 %794, label %2690, label %795

795:                                              ; preds = %780
  %796 = getelementptr inbounds i8, i8* %491, i64 10
  %797 = zext i8 %784 to i64
  %798 = icmp ult i8 %784, 32
  br i1 %798, label %857, label %799

799:                                              ; preds = %795
  %800 = getelementptr %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 0
  %801 = add nuw nsw i64 %797, 312
  %802 = getelementptr i8, i8* %6, i64 %801
  %803 = add nuw nsw i64 %490, 11
  %804 = getelementptr i8, i8* %460, i64 %803
  %805 = icmp ult i8* %800, %804
  %806 = icmp ult i8* %796, %802
  %807 = and i1 %805, %806
  br i1 %807, label %857, label %808

808:                                              ; preds = %799
  %809 = and i64 %797, 224
  %810 = add nsw i64 %809, -32
  %811 = lshr exact i64 %810, 5
  %812 = add nuw nsw i64 %811, 1
  %813 = and i64 %812, 1
  %814 = icmp eq i64 %810, 0
  br i1 %814, label %842, label %815

815:                                              ; preds = %808
  %816 = sub nuw nsw i64 %812, %813
  %817 = load i8, i8* %796, align 1, !alias.scope !13
  %818 = insertelement <16 x i8> undef, i8 %817, i32 0
  %819 = shufflevector <16 x i8> %818, <16 x i8> undef, <16 x i32> zeroinitializer
  %820 = insertelement <16 x i8> undef, i8 %817, i32 0
  %821 = shufflevector <16 x i8> %820, <16 x i8> undef, <16 x i32> zeroinitializer
  %822 = load i8, i8* %796, align 1, !alias.scope !13
  %823 = insertelement <16 x i8> undef, i8 %822, i32 0
  %824 = shufflevector <16 x i8> %823, <16 x i8> undef, <16 x i32> zeroinitializer
  %825 = insertelement <16 x i8> undef, i8 %822, i32 0
  %826 = shufflevector <16 x i8> %825, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %827

827:                                              ; preds = %827, %815
  %828 = phi i64 [ 0, %815 ], [ %839, %827 ]
  %829 = phi i64 [ %816, %815 ], [ %840, %827 ]
  %830 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %828
  %831 = bitcast i8* %830 to <16 x i8>*
  store <16 x i8> %819, <16 x i8>* %831, align 1, !alias.scope !16, !noalias !13
  %832 = getelementptr inbounds i8, i8* %830, i64 16
  %833 = bitcast i8* %832 to <16 x i8>*
  store <16 x i8> %821, <16 x i8>* %833, align 1, !alias.scope !16, !noalias !13
  %834 = or i64 %828, 32
  %835 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %834
  %836 = bitcast i8* %835 to <16 x i8>*
  store <16 x i8> %824, <16 x i8>* %836, align 1, !alias.scope !16, !noalias !13
  %837 = getelementptr inbounds i8, i8* %835, i64 16
  %838 = bitcast i8* %837 to <16 x i8>*
  store <16 x i8> %826, <16 x i8>* %838, align 1, !alias.scope !16, !noalias !13
  %839 = add i64 %828, 64
  %840 = add i64 %829, -2
  %841 = icmp eq i64 %840, 0
  br i1 %841, label %842, label %827, !llvm.loop !18

842:                                              ; preds = %827, %808
  %843 = phi i64 [ 0, %808 ], [ %839, %827 ]
  %844 = icmp eq i64 %813, 0
  br i1 %844, label %855, label %845

845:                                              ; preds = %842
  %846 = load i8, i8* %796, align 1, !alias.scope !13
  %847 = insertelement <16 x i8> undef, i8 %846, i32 0
  %848 = shufflevector <16 x i8> %847, <16 x i8> undef, <16 x i32> zeroinitializer
  %849 = insertelement <16 x i8> undef, i8 %846, i32 0
  %850 = shufflevector <16 x i8> %849, <16 x i8> undef, <16 x i32> zeroinitializer
  %851 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %843
  %852 = bitcast i8* %851 to <16 x i8>*
  store <16 x i8> %848, <16 x i8>* %852, align 1, !alias.scope !16, !noalias !13
  %853 = getelementptr inbounds i8, i8* %851, i64 16
  %854 = bitcast i8* %853 to <16 x i8>*
  store <16 x i8> %850, <16 x i8>* %854, align 1, !alias.scope !16, !noalias !13
  br label %855

855:                                              ; preds = %842, %845
  %856 = icmp eq i64 %809, %797
  br i1 %856, label %889, label %857

857:                                              ; preds = %855, %799, %795
  %858 = phi i64 [ 0, %799 ], [ 0, %795 ], [ %809, %855 ]
  %859 = xor i64 %858, -1
  %860 = add nsw i64 %859, %797
  %861 = and i64 %797, 3
  %862 = icmp eq i64 %861, 0
  br i1 %862, label %871, label %863

863:                                              ; preds = %857, %863
  %864 = phi i64 [ %868, %863 ], [ %858, %857 ]
  %865 = phi i64 [ %869, %863 ], [ %861, %857 ]
  %866 = load i8, i8* %796, align 1
  %867 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %864
  store i8 %866, i8* %867, align 1
  %868 = add nuw nsw i64 %864, 1
  %869 = add i64 %865, -1
  %870 = icmp eq i64 %869, 0
  br i1 %870, label %871, label %863, !llvm.loop !19

871:                                              ; preds = %863, %857
  %872 = phi i64 [ %858, %857 ], [ %868, %863 ]
  %873 = icmp ult i64 %860, 3
  br i1 %873, label %889, label %874

874:                                              ; preds = %871, %874
  %875 = phi i64 [ %887, %874 ], [ %872, %871 ]
  %876 = load i8, i8* %796, align 1
  %877 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %875
  store i8 %876, i8* %877, align 1
  %878 = add nuw nsw i64 %875, 1
  %879 = load i8, i8* %796, align 1
  %880 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %878
  store i8 %879, i8* %880, align 1
  %881 = add nuw nsw i64 %875, 2
  %882 = load i8, i8* %796, align 1
  %883 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %881
  store i8 %882, i8* %883, align 1
  %884 = add nuw nsw i64 %875, 3
  %885 = load i8, i8* %796, align 1
  %886 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %884
  store i8 %885, i8* %886, align 1
  %887 = add nuw nsw i64 %875, 4
  %888 = icmp eq i64 %887, %797
  br i1 %888, label %889, label %874, !llvm.loop !20

889:                                              ; preds = %871, %874, %855
  %890 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 0
  %891 = load i8, i8* %890, align 8
  %892 = icmp ugt i8 %891, 1
  br i1 %892, label %893, label %1085

893:                                              ; preds = %889
  %894 = getelementptr inbounds i8, i8* %491, i64 48
  %895 = bitcast i8* %894 to i16*
  %896 = load i16, i16* %895, align 1
  %897 = tail call i16 @llvm.bswap.i16(i16 %896) #17
  %898 = getelementptr inbounds i8, i8* %491, i64 50
  %899 = bitcast i8* %898 to i16*
  %900 = load i16, i16* %899, align 1
  %901 = tail call i16 @llvm.bswap.i16(i16 %900) #17
  %902 = add i16 %897, -2
  %903 = icmp ugt i16 %902, 4094
  %904 = add i16 %901, -2
  %905 = icmp ugt i16 %904, 4094
  %906 = or i1 %903, %905
  br i1 %906, label %1085, label %907

907:                                              ; preds = %893
  %908 = zext i16 %901 to i32
  %909 = zext i16 %897 to i32
  %910 = zext i32 %485 to i64
  %911 = add nsw i64 %910, -52
  %912 = shl nuw nsw i32 %909, 1
  %913 = shl nuw nsw i32 %908, 1
  %914 = mul nuw nsw i32 %912, %785
  %915 = load i32, i32* %790, align 8
  %916 = mul i32 %915, %913
  %917 = shl i32 %915, 1
  %918 = zext i32 %917 to i64
  %919 = icmp eq i8 %784, 0
  br i1 %919, label %947, label %920

920:                                              ; preds = %907
  %921 = zext i8 %891 to i64
  %922 = mul nuw nsw i64 %918, %921
  %923 = icmp eq i8 %784, 1
  br i1 %923, label %947, label %924

924:                                              ; preds = %920
  %925 = add nsw i64 %797, -1
  %926 = add nsw i64 %797, -2
  %927 = and i64 %925, 7
  %928 = icmp ult i64 %926, 7
  br i1 %928, label %931, label %929

929:                                              ; preds = %924
  %930 = sub nsw i64 %925, %927
  br label %960

931:                                              ; preds = %960, %924
  %932 = phi i64 [ undef, %924 ], [ %1002, %960 ]
  %933 = phi i64 [ 1, %924 ], [ %1003, %960 ]
  %934 = phi i64 [ %922, %924 ], [ %1002, %960 ]
  %935 = icmp eq i64 %927, 0
  br i1 %935, label %947, label %936

936:                                              ; preds = %931, %936
  %937 = phi i64 [ %944, %936 ], [ %933, %931 ]
  %938 = phi i64 [ %943, %936 ], [ %934, %931 ]
  %939 = phi i64 [ %945, %936 ], [ %927, %931 ]
  %940 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %937
  %941 = load i8, i8* %940, align 1
  %942 = zext i8 %941 to i64
  %943 = mul i64 %938, %942
  %944 = add nuw nsw i64 %937, 1
  %945 = add i64 %939, -1
  %946 = icmp eq i64 %945, 0
  br i1 %946, label %947, label %936, !llvm.loop !21

947:                                              ; preds = %931, %936, %920, %907
  %948 = phi i64 [ %918, %907 ], [ %922, %920 ], [ %932, %931 ], [ %943, %936 ]
  %949 = zext i32 %914 to i64
  %950 = zext i32 %916 to i64
  %951 = add nuw nsw i64 %950, %949
  %952 = add i64 %951, %948
  %953 = icmp ugt i64 %952, %911
  br i1 %953, label %1085, label %954

954:                                              ; preds = %947
  br i1 %919, label %1019, label %955

955:                                              ; preds = %954
  %956 = and i64 %797, 1
  %957 = icmp eq i8 %784, 1
  br i1 %957, label %1006, label %958

958:                                              ; preds = %955
  %959 = sub nsw i64 %797, %956
  br label %1026

960:                                              ; preds = %960, %929
  %961 = phi i64 [ 1, %929 ], [ %1003, %960 ]
  %962 = phi i64 [ %922, %929 ], [ %1002, %960 ]
  %963 = phi i64 [ %930, %929 ], [ %1004, %960 ]
  %964 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %961
  %965 = load i8, i8* %964, align 1
  %966 = zext i8 %965 to i64
  %967 = mul i64 %962, %966
  %968 = add nuw nsw i64 %961, 1
  %969 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %968
  %970 = load i8, i8* %969, align 1
  %971 = zext i8 %970 to i64
  %972 = mul i64 %967, %971
  %973 = add nuw nsw i64 %961, 2
  %974 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %973
  %975 = load i8, i8* %974, align 1
  %976 = zext i8 %975 to i64
  %977 = mul i64 %972, %976
  %978 = add nuw nsw i64 %961, 3
  %979 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %978
  %980 = load i8, i8* %979, align 1
  %981 = zext i8 %980 to i64
  %982 = mul i64 %977, %981
  %983 = add nuw nsw i64 %961, 4
  %984 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %983
  %985 = load i8, i8* %984, align 1
  %986 = zext i8 %985 to i64
  %987 = mul i64 %982, %986
  %988 = add nuw nsw i64 %961, 5
  %989 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %988
  %990 = load i8, i8* %989, align 1
  %991 = zext i8 %990 to i64
  %992 = mul i64 %987, %991
  %993 = add nuw nsw i64 %961, 6
  %994 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %993
  %995 = load i8, i8* %994, align 1
  %996 = zext i8 %995 to i64
  %997 = mul i64 %992, %996
  %998 = add nuw nsw i64 %961, 7
  %999 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %998
  %1000 = load i8, i8* %999, align 1
  %1001 = zext i8 %1000 to i64
  %1002 = mul i64 %997, %1001
  %1003 = add nuw nsw i64 %961, 8
  %1004 = add i64 %963, -8
  %1005 = icmp eq i64 %1004, 0
  br i1 %1005, label %931, label %960

1006:                                             ; preds = %1026, %955
  %1007 = phi i64 [ 0, %955 ], [ %1044, %1026 ]
  %1008 = icmp eq i64 %956, 0
  br i1 %1008, label %1017, label %1009

1009:                                             ; preds = %1006
  %1010 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %1007, i32 0, i32 0
  store i32 %909, i32* %1010, align 8
  %1011 = trunc i64 %1007 to i32
  %1012 = mul i32 %912, %1011
  %1013 = zext i32 %1012 to i64
  %1014 = getelementptr inbounds %struct.mft2_Layout, %struct.mft2_Layout* %781, i64 0, i32 3, i64 %1013
  %1015 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %1007, i32 0, i32 1
  store i8* null, i8** %1015, align 8
  %1016 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %1007, i32 0, i32 2
  store i8* %1014, i8** %1016, align 8
  br label %1017

1017:                                             ; preds = %1006, %1009
  %1018 = load i32, i32* %790, align 8
  br label %1019

1019:                                             ; preds = %1017, %954
  %1020 = phi i32 [ %1018, %1017 ], [ %915, %954 ]
  %1021 = getelementptr inbounds %struct.mft2_Layout, %struct.mft2_Layout* %781, i64 0, i32 3, i64 %949
  %1022 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 3
  store i8* null, i8** %1022, align 8
  %1023 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 4
  store i8* %1021, i8** %1023, align 8
  %1024 = getelementptr inbounds i8, i8* %1021, i64 %948
  %1025 = icmp eq i32 %1020, 0
  br i1 %1025, label %1085, label %1047

1026:                                             ; preds = %1026, %958
  %1027 = phi i64 [ 0, %958 ], [ %1044, %1026 ]
  %1028 = phi i64 [ %959, %958 ], [ %1045, %1026 ]
  %1029 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %1027, i32 0, i32 0
  store i32 %909, i32* %1029, align 8
  %1030 = trunc i64 %1027 to i32
  %1031 = mul i32 %912, %1030
  %1032 = zext i32 %1031 to i64
  %1033 = getelementptr inbounds %struct.mft2_Layout, %struct.mft2_Layout* %781, i64 0, i32 3, i64 %1032
  %1034 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %1027, i32 0, i32 1
  store i8* null, i8** %1034, align 8
  %1035 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %1027, i32 0, i32 2
  store i8* %1033, i8** %1035, align 8
  %1036 = or i64 %1027, 1
  %1037 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %1036, i32 0, i32 0
  store i32 %909, i32* %1037, align 8
  %1038 = trunc i64 %1036 to i32
  %1039 = mul i32 %912, %1038
  %1040 = zext i32 %1039 to i64
  %1041 = getelementptr inbounds %struct.mft2_Layout, %struct.mft2_Layout* %781, i64 0, i32 3, i64 %1040
  %1042 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %1036, i32 0, i32 1
  store i8* null, i8** %1042, align 8
  %1043 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %1036, i32 0, i32 2
  store i8* %1041, i8** %1043, align 8
  %1044 = add nuw nsw i64 %1027, 2
  %1045 = add i64 %1028, -2
  %1046 = icmp eq i64 %1045, 0
  br i1 %1046, label %1006, label %1026

1047:                                             ; preds = %1019
  %1048 = zext i32 %1020 to i64
  %1049 = and i64 %1048, 1
  %1050 = icmp eq i32 %1020, 1
  br i1 %1050, label %1074, label %1051

1051:                                             ; preds = %1047
  %1052 = sub nsw i64 %1048, %1049
  br label %1053

1053:                                             ; preds = %1053, %1051
  %1054 = phi i64 [ 0, %1051 ], [ %1071, %1053 ]
  %1055 = phi i64 [ %1052, %1051 ], [ %1072, %1053 ]
  %1056 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %1054, i32 0, i32 0
  store i32 %908, i32* %1056, align 8
  %1057 = trunc i64 %1054 to i32
  %1058 = mul i32 %913, %1057
  %1059 = zext i32 %1058 to i64
  %1060 = getelementptr inbounds i8, i8* %1024, i64 %1059
  %1061 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %1054, i32 0, i32 1
  store i8* null, i8** %1061, align 8
  %1062 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %1054, i32 0, i32 2
  store i8* %1060, i8** %1062, align 8
  %1063 = or i64 %1054, 1
  %1064 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %1063, i32 0, i32 0
  store i32 %908, i32* %1064, align 8
  %1065 = trunc i64 %1063 to i32
  %1066 = mul i32 %913, %1065
  %1067 = zext i32 %1066 to i64
  %1068 = getelementptr inbounds i8, i8* %1024, i64 %1067
  %1069 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %1063, i32 0, i32 1
  store i8* null, i8** %1069, align 8
  %1070 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %1063, i32 0, i32 2
  store i8* %1068, i8** %1070, align 8
  %1071 = add nuw nsw i64 %1054, 2
  %1072 = add i64 %1055, -2
  %1073 = icmp eq i64 %1072, 0
  br i1 %1073, label %1074, label %1053

1074:                                             ; preds = %1053, %1047
  %1075 = phi i64 [ 0, %1047 ], [ %1071, %1053 ]
  %1076 = icmp eq i64 %1049, 0
  br i1 %1076, label %1085, label %1077

1077:                                             ; preds = %1074
  %1078 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %1075, i32 0, i32 0
  store i32 %908, i32* %1078, align 8
  %1079 = trunc i64 %1075 to i32
  %1080 = mul i32 %913, %1079
  %1081 = zext i32 %1080 to i64
  %1082 = getelementptr inbounds i8, i8* %1024, i64 %1081
  %1083 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %1075, i32 0, i32 1
  store i8* null, i8** %1083, align 8
  %1084 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 %1075, i32 0, i32 2
  store i8* %1082, i8** %1084, align 8
  br label %1085

1085:                                             ; preds = %1077, %1074, %1019, %947, %893, %889, %775
  %1086 = phi i1 [ %776, %775 ], [ false, %889 ], [ false, %893 ], [ false, %947 ], [ true, %1019 ], [ true, %1074 ], [ true, %1077 ]
  %1087 = icmp eq i32 %493, 541213037
  br i1 %1087, label %1088, label %1367

1088:                                             ; preds = %1085
  %1089 = icmp ult i32 %485, 32
  br i1 %1089, label %2690, label %1090

1090:                                             ; preds = %1088
  %1091 = getelementptr inbounds i8, i8* %491, i64 8
  %1092 = load i8, i8* %1091, align 1
  %1093 = zext i8 %1092 to i32
  %1094 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %494, i64 0, i32 0
  store i32 %1093, i32* %1094, align 8
  %1095 = getelementptr inbounds i8, i8* %491, i64 9
  %1096 = load i8, i8* %1095, align 1
  %1097 = zext i8 %1096 to i32
  %1098 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 8
  store i32 %1097, i32* %1098, align 8
  %1099 = icmp ne i8 %1096, 3
  %1100 = icmp ugt i8 %1092, 4
  %1101 = or i1 %1100, %1099
  br i1 %1101, label %2690, label %1102

1102:                                             ; preds = %1090
  %1103 = getelementptr inbounds i8, i8* %491, i64 12
  %1104 = bitcast i8* %1103 to i32*
  %1105 = load i32, i32* %1104, align 1
  %1106 = getelementptr inbounds i8, i8* %491, i64 16
  %1107 = bitcast i8* %1106 to i32*
  %1108 = load i32, i32* %1107, align 1
  %1109 = tail call i32 @llvm.bswap.i32(i32 %1108) #17
  %1110 = getelementptr inbounds i8, i8* %491, i64 20
  %1111 = bitcast i8* %1110 to i32*
  %1112 = load i32, i32* %1111, align 1
  %1113 = tail call i32 @llvm.bswap.i32(i32 %1112) #17
  %1114 = getelementptr inbounds i8, i8* %491, i64 24
  %1115 = bitcast i8* %1114 to i32*
  %1116 = load i32, i32* %1115, align 1
  %1117 = tail call i32 @llvm.bswap.i32(i32 %1116) #17
  %1118 = getelementptr inbounds i8, i8* %491, i64 28
  %1119 = bitcast i8* %1118 to i32*
  %1120 = load i32, i32* %1119, align 1
  %1121 = tail call i32 @llvm.bswap.i32(i32 %1120) #17
  %1122 = icmp eq i32 %1105, 0
  br i1 %1122, label %2690, label %1123

1123:                                             ; preds = %1102
  %1124 = tail call i32 @llvm.bswap.i32(i32 %1105) #17
  %1125 = bitcast i32* %31 to i8*
  %1126 = icmp ult i32 %485, %1124
  br i1 %1126, label %2690, label %1127

1127:                                             ; preds = %1123
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1125) #17
  store i32 -1431655766, i32* %31, align 4
  %1128 = zext i32 %1124 to i64
  %1129 = getelementptr inbounds i8, i8* %491, i64 %1128
  %1130 = sub i32 %485, %1124
  %1131 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 0
  %1132 = call fastcc zeroext i1 @_ZL10read_curvePKhjP11skcms_CurvePj(i8* %1129, i32 %1130, %union.skcms_Curve* %1131, i32* nonnull %31) #17
  br i1 %1132, label %1133, label %1142

1133:                                             ; preds = %1127
  %1134 = load i32, i32* %31, align 4
  %1135 = icmp ugt i32 %1134, -4
  br i1 %1135, label %1142, label %1136

1136:                                             ; preds = %1133
  %1137 = add nuw i32 %1134, 3
  %1138 = and i32 %1137, -4
  store i32 %1138, i32* %31, align 4
  %1139 = zext i32 %1138 to i64
  %1140 = add nuw nsw i64 %1139, %1128
  %1141 = icmp ugt i64 %1140, 4294967295
  br i1 %1141, label %1142, label %1143

1142:                                             ; preds = %1738, %1735, %1729, %1720, %1717, %1711, %1136, %1133, %1127
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1125) #17
  br label %2690

1143:                                             ; preds = %1136
  %1144 = trunc i64 %1140 to i32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1125) #17
  %1145 = icmp ult i32 %485, %1144
  br i1 %1145, label %2690, label %1711

1146:                                             ; preds = %1744
  br i1 %1746, label %2690, label %1147

1147:                                             ; preds = %1146
  %1148 = load i32, i32* %1098, align 8
  %1149 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 5
  store i32 %1148, i32* %1149, align 8
  %1150 = icmp eq i32 %1148, 0
  br i1 %1150, label %1178, label %1151

1151:                                             ; preds = %1147
  %1152 = bitcast i32* %32 to i8*
  %1153 = zext i32 %1148 to i64
  br label %1154

1154:                                             ; preds = %1174, %1151
  %1155 = phi i64 [ 0, %1151 ], [ %1176, %1174 ]
  %1156 = phi i32 [ %1113, %1151 ], [ %1175, %1174 ]
  %1157 = icmp ult i32 %485, %1156
  br i1 %1157, label %2690, label %1158

1158:                                             ; preds = %1154
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1152) #17
  store i32 -1431655766, i32* %32, align 4
  %1159 = zext i32 %1156 to i64
  %1160 = getelementptr inbounds i8, i8* %491, i64 %1159
  %1161 = sub i32 %485, %1156
  %1162 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 6, i64 %1155
  %1163 = call fastcc zeroext i1 @_ZL10read_curvePKhjP11skcms_CurvePj(i8* %1160, i32 %1161, %union.skcms_Curve* %1162, i32* nonnull %32) #17
  br i1 %1163, label %1164, label %1173

1164:                                             ; preds = %1158
  %1165 = load i32, i32* %32, align 4
  %1166 = icmp ugt i32 %1165, -4
  br i1 %1166, label %1173, label %1167

1167:                                             ; preds = %1164
  %1168 = add nuw i32 %1165, 3
  %1169 = and i32 %1168, -4
  store i32 %1169, i32* %32, align 4
  %1170 = zext i32 %1169 to i64
  %1171 = add nuw nsw i64 %1170, %1159
  %1172 = icmp ugt i64 %1171, 4294967295
  br i1 %1172, label %1173, label %1174

1173:                                             ; preds = %1167, %1164, %1158
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1152) #17
  br label %2690

1174:                                             ; preds = %1167
  %1175 = trunc i64 %1171 to i32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1152) #17
  %1176 = add nuw nsw i64 %1155, 1
  %1177 = icmp eq i64 %1176, %1153
  br i1 %1177, label %1178, label %1154

1178:                                             ; preds = %1174, %1147
  %1179 = zext i32 %485 to i64
  %1180 = zext i32 %1109 to i64
  %1181 = add nuw nsw i64 %1180, 48
  %1182 = icmp ugt i64 %1181, %1179
  br i1 %1182, label %2690, label %1183

1183:                                             ; preds = %1178
  %1184 = select i1 %176, float 0x3FFFFFE000000000, float 1.000000e+00
  %1185 = getelementptr inbounds i8, i8* %491, i64 %1180
  %1186 = bitcast i8* %1185 to i32*
  %1187 = load i32, i32* %1186, align 1
  %1188 = call i32 @llvm.bswap.i32(i32 %1187) #17
  %1189 = sitofp i32 %1188 to float
  %1190 = fmul float %1189, 0x3EF0000000000000
  %1191 = fmul float %1184, %1190
  %1192 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 7, i32 0, i64 0, i64 0
  store float %1191, float* %1192, align 8
  %1193 = getelementptr inbounds i8, i8* %1185, i64 4
  %1194 = bitcast i8* %1193 to i32*
  %1195 = load i32, i32* %1194, align 1
  %1196 = call i32 @llvm.bswap.i32(i32 %1195) #17
  %1197 = sitofp i32 %1196 to float
  %1198 = fmul float %1197, 0x3EF0000000000000
  %1199 = fmul float %1184, %1198
  %1200 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 7, i32 0, i64 0, i64 1
  store float %1199, float* %1200, align 4
  %1201 = getelementptr inbounds i8, i8* %1185, i64 8
  %1202 = bitcast i8* %1201 to i32*
  %1203 = load i32, i32* %1202, align 1
  %1204 = call i32 @llvm.bswap.i32(i32 %1203) #17
  %1205 = sitofp i32 %1204 to float
  %1206 = fmul float %1205, 0x3EF0000000000000
  %1207 = fmul float %1184, %1206
  %1208 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 7, i32 0, i64 0, i64 2
  store float %1207, float* %1208, align 8
  %1209 = getelementptr inbounds i8, i8* %1185, i64 12
  %1210 = bitcast i8* %1209 to i32*
  %1211 = load i32, i32* %1210, align 1
  %1212 = call i32 @llvm.bswap.i32(i32 %1211) #17
  %1213 = sitofp i32 %1212 to float
  %1214 = fmul float %1213, 0x3EF0000000000000
  %1215 = fmul float %1184, %1214
  %1216 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 7, i32 0, i64 1, i64 0
  store float %1215, float* %1216, align 8
  %1217 = getelementptr inbounds i8, i8* %1185, i64 16
  %1218 = bitcast i8* %1217 to i32*
  %1219 = load i32, i32* %1218, align 1
  %1220 = call i32 @llvm.bswap.i32(i32 %1219) #17
  %1221 = sitofp i32 %1220 to float
  %1222 = fmul float %1221, 0x3EF0000000000000
  %1223 = fmul float %1184, %1222
  %1224 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 7, i32 0, i64 1, i64 1
  store float %1223, float* %1224, align 4
  %1225 = getelementptr inbounds i8, i8* %1185, i64 20
  %1226 = bitcast i8* %1225 to i32*
  %1227 = load i32, i32* %1226, align 1
  %1228 = call i32 @llvm.bswap.i32(i32 %1227) #17
  %1229 = sitofp i32 %1228 to float
  %1230 = fmul float %1229, 0x3EF0000000000000
  %1231 = fmul float %1184, %1230
  %1232 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 7, i32 0, i64 1, i64 2
  store float %1231, float* %1232, align 8
  %1233 = getelementptr inbounds i8, i8* %1185, i64 24
  %1234 = bitcast i8* %1233 to i32*
  %1235 = load i32, i32* %1234, align 1
  %1236 = call i32 @llvm.bswap.i32(i32 %1235) #17
  %1237 = sitofp i32 %1236 to float
  %1238 = fmul float %1237, 0x3EF0000000000000
  %1239 = fmul float %1184, %1238
  %1240 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 7, i32 0, i64 2, i64 0
  store float %1239, float* %1240, align 8
  %1241 = getelementptr inbounds i8, i8* %1185, i64 28
  %1242 = bitcast i8* %1241 to i32*
  %1243 = load i32, i32* %1242, align 1
  %1244 = call i32 @llvm.bswap.i32(i32 %1243) #17
  %1245 = sitofp i32 %1244 to float
  %1246 = fmul float %1245, 0x3EF0000000000000
  %1247 = fmul float %1184, %1246
  %1248 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 7, i32 0, i64 2, i64 1
  store float %1247, float* %1248, align 4
  %1249 = getelementptr inbounds i8, i8* %1185, i64 32
  %1250 = bitcast i8* %1249 to i32*
  %1251 = load i32, i32* %1250, align 1
  %1252 = call i32 @llvm.bswap.i32(i32 %1251) #17
  %1253 = sitofp i32 %1252 to float
  %1254 = fmul float %1253, 0x3EF0000000000000
  %1255 = fmul float %1184, %1254
  %1256 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 7, i32 0, i64 2, i64 2
  store float %1255, float* %1256, align 8
  %1257 = getelementptr inbounds i8, i8* %1185, i64 36
  %1258 = bitcast i8* %1257 to i32*
  %1259 = load i32, i32* %1258, align 1
  %1260 = call i32 @llvm.bswap.i32(i32 %1259) #17
  %1261 = sitofp i32 %1260 to float
  %1262 = fmul float %1261, 0x3EF0000000000000
  %1263 = fmul float %1184, %1262
  %1264 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 7, i32 0, i64 0, i64 3
  store float %1263, float* %1264, align 4
  %1265 = getelementptr inbounds i8, i8* %1185, i64 40
  %1266 = bitcast i8* %1265 to i32*
  %1267 = load i32, i32* %1266, align 1
  %1268 = call i32 @llvm.bswap.i32(i32 %1267) #17
  %1269 = sitofp i32 %1268 to float
  %1270 = fmul float %1269, 0x3EF0000000000000
  %1271 = fmul float %1184, %1270
  %1272 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 7, i32 0, i64 1, i64 3
  store float %1271, float* %1272, align 4
  %1273 = getelementptr inbounds i8, i8* %1185, i64 44
  %1274 = bitcast i8* %1273 to i32*
  %1275 = load i32, i32* %1274, align 1
  %1276 = call i32 @llvm.bswap.i32(i32 %1275) #17
  %1277 = sitofp i32 %1276 to float
  %1278 = fmul float %1277, 0x3EF0000000000000
  %1279 = fmul float %1184, %1278
  %1280 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 7, i32 0, i64 2, i64 3
  store float %1279, float* %1280, align 4
  br label %1284

1281:                                             ; preds = %1744
  br i1 %1746, label %1282, label %2690

1282:                                             ; preds = %1281
  %1283 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 5
  store i32 0, i32* %1283, align 8
  br label %1284

1284:                                             ; preds = %1282, %1183
  %1285 = icmp eq i32 %1120, 0
  %1286 = icmp eq i32 %1116, 0
  br i1 %1285, label %1361, label %1287

1287:                                             ; preds = %1284
  br i1 %1286, label %2690, label %1288

1288:                                             ; preds = %1287
  %1289 = load i32, i32* %1094, align 8
  %1290 = icmp eq i32 %1289, 0
  br i1 %1290, label %1318, label %1291

1291:                                             ; preds = %1288
  %1292 = bitcast i32* %33 to i8*
  %1293 = zext i32 %1289 to i64
  br label %1294

1294:                                             ; preds = %1314, %1291
  %1295 = phi i64 [ 0, %1291 ], [ %1316, %1314 ]
  %1296 = phi i32 [ %1121, %1291 ], [ %1315, %1314 ]
  %1297 = icmp ult i32 %485, %1296
  br i1 %1297, label %2690, label %1298

1298:                                             ; preds = %1294
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1292) #17
  store i32 -1431655766, i32* %33, align 4
  %1299 = zext i32 %1296 to i64
  %1300 = getelementptr inbounds i8, i8* %491, i64 %1299
  %1301 = sub i32 %485, %1296
  %1302 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 %1295
  %1303 = call fastcc zeroext i1 @_ZL10read_curvePKhjP11skcms_CurvePj(i8* %1300, i32 %1301, %union.skcms_Curve* %1302, i32* nonnull %33) #17
  br i1 %1303, label %1304, label %1313

1304:                                             ; preds = %1298
  %1305 = load i32, i32* %33, align 4
  %1306 = icmp ugt i32 %1305, -4
  br i1 %1306, label %1313, label %1307

1307:                                             ; preds = %1304
  %1308 = add nuw i32 %1305, 3
  %1309 = and i32 %1308, -4
  store i32 %1309, i32* %33, align 4
  %1310 = zext i32 %1309 to i64
  %1311 = add nuw nsw i64 %1310, %1299
  %1312 = icmp ugt i64 %1311, 4294967295
  br i1 %1312, label %1313, label %1314

1313:                                             ; preds = %1307, %1304, %1298
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1292) #17
  br label %2690

1314:                                             ; preds = %1307
  %1315 = trunc i64 %1311 to i32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1292) #17
  %1316 = add nuw nsw i64 %1295, 1
  %1317 = icmp eq i64 %1316, %1293
  br i1 %1317, label %1318, label %1294

1318:                                             ; preds = %1314, %1288
  %1319 = zext i32 %485 to i64
  %1320 = zext i32 %1117 to i64
  %1321 = add nuw nsw i64 %1320, 20
  %1322 = icmp ugt i64 %1321, %1319
  br i1 %1322, label %2690, label %1323

1323:                                             ; preds = %1318
  %1324 = getelementptr inbounds i8, i8* %491, i64 %1320
  %1325 = getelementptr inbounds i8, i8* %1324, i64 16
  %1326 = load i8, i8* %1325, align 1
  switch i8 %1326, label %2690 [
    i8 1, label %1327
    i8 2, label %1330
  ]

1327:                                             ; preds = %1323
  %1328 = getelementptr inbounds i8, i8* %1324, i64 20
  %1329 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 3
  store i8* %1328, i8** %1329, align 8
  br label %1333

1330:                                             ; preds = %1323
  %1331 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 3
  store i8* null, i8** %1331, align 8
  %1332 = getelementptr inbounds i8, i8* %1324, i64 20
  br label %1333

1333:                                             ; preds = %1330, %1327
  %1334 = phi i8* [ %1332, %1330 ], [ null, %1327 ]
  %1335 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 4
  store i8* %1334, i8** %1335, align 8
  %1336 = load i32, i32* %1098, align 8
  %1337 = load i8, i8* %1325, align 1
  %1338 = zext i8 %1337 to i32
  %1339 = mul i32 %1336, %1338
  %1340 = zext i32 %1339 to i64
  %1341 = load i32, i32* %1094, align 8
  %1342 = icmp eq i32 %1341, 0
  br i1 %1342, label %1357, label %1343

1343:                                             ; preds = %1333
  %1344 = zext i32 %1341 to i64
  br label %1345

1345:                                             ; preds = %1352, %1343
  %1346 = phi i64 [ 0, %1343 ], [ %1355, %1352 ]
  %1347 = phi i64 [ %1340, %1343 ], [ %1354, %1352 ]
  %1348 = getelementptr inbounds i8, i8* %1324, i64 %1346
  %1349 = load i8, i8* %1348, align 1
  %1350 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 2, i64 %1346
  store i8 %1349, i8* %1350, align 1
  %1351 = icmp ult i8 %1349, 2
  br i1 %1351, label %2690, label %1352

1352:                                             ; preds = %1345
  %1353 = zext i8 %1349 to i64
  %1354 = mul i64 %1347, %1353
  %1355 = add nuw nsw i64 %1346, 1
  %1356 = icmp eq i64 %1355, %1344
  br i1 %1356, label %1357, label %1345

1357:                                             ; preds = %1352, %1333
  %1358 = phi i64 [ %1340, %1333 ], [ %1354, %1352 ]
  %1359 = add i64 %1358, %1321
  %1360 = icmp ugt i64 %1359, %1319
  br i1 %1360, label %2690, label %1371

1361:                                             ; preds = %1284
  br i1 %1286, label %1362, label %2690

1362:                                             ; preds = %1361
  %1363 = load i32, i32* %1094, align 8
  %1364 = load i32, i32* %1098, align 8
  %1365 = icmp eq i32 %1363, %1364
  br i1 %1365, label %1366, label %2690

1366:                                             ; preds = %1362
  store i32 0, i32* %1094, align 8
  br label %1507

1367:                                             ; preds = %1085
  br i1 %1086, label %1368, label %2690

1368:                                             ; preds = %1367
  %1369 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %494, i64 0, i32 0
  %1370 = load i32, i32* %1369, align 8
  br label %1371

1371:                                             ; preds = %1368, %1357
  %1372 = phi i32 [ %1370, %1368 ], [ %1341, %1357 ]
  %1373 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %494, i64 0, i32 0
  %1374 = icmp eq i32 %1372, 0
  br i1 %1374, label %1507, label %1375

1375:                                             ; preds = %1371
  %1376 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 0
  %1377 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %1376, i64 0, i32 0, i32 0
  %1378 = load i32, i32* %1377, align 8
  %1379 = icmp sgt i32 %1378, 0
  br i1 %1379, label %1380, label %1406

1380:                                             ; preds = %1375
  %1381 = bitcast float* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1381) #17
  store float 0.000000e+00, float* %28, align 4
  %1382 = bitcast float* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1382) #17
  store float 0.000000e+00, float* %29, align 4
  %1383 = bitcast float* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1383) #17
  store float 0.000000e+00, float* %30, align 4
  %1384 = shl nsw i32 %1378, 1
  %1385 = sitofp i32 %1384 to float
  %1386 = fdiv float 1.000000e+00, %1385
  %1387 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %1376, i32 %1378, float %1386, float* nonnull %28, float* nonnull %29, float* nonnull %30) #17
  %1388 = icmp eq i32 %1378, %1387
  %1389 = load float, float* %28, align 4
  %1390 = fcmp oeq float %1389, 1.000000e+00
  %1391 = and i1 %1388, %1390
  %1392 = load float, float* %30, align 4
  %1393 = fcmp oeq float %1392, 0.000000e+00
  %1394 = and i1 %1391, %1393
  br i1 %1394, label %1395, label %1404

1395:                                             ; preds = %1380
  store i32 0, i32* %1377, align 8
  %1396 = bitcast %union.skcms_Curve* %1376 to %struct.anon*
  %1397 = getelementptr inbounds %struct.anon, %struct.anon* %1396, i64 0, i32 1, i32 0
  %1398 = bitcast float* %1397 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %1398, align 4
  %1399 = getelementptr inbounds %struct.anon, %struct.anon* %1396, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %1399, align 4
  %1400 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 0, i32 1
  %1401 = bitcast [8 x i8]* %1400 to float*
  store float 0.000000e+00, float* %1401, align 4
  %1402 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 0, i32 1, i64 4
  %1403 = bitcast i8* %1402 to float*
  store float 0.000000e+00, float* %1403, align 4
  br label %1404

1404:                                             ; preds = %1395, %1380
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1383) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1382) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1381) #17
  %1405 = load i32, i32* %1373, align 8
  br label %1406

1406:                                             ; preds = %1404, %1375
  %1407 = phi i32 [ %1405, %1404 ], [ %1372, %1375 ]
  %1408 = icmp ugt i32 %1407, 1
  br i1 %1408, label %1409, label %1507

1409:                                             ; preds = %1406
  %1410 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 1
  %1411 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %1410, i64 0, i32 0, i32 0
  %1412 = load i32, i32* %1411, align 8
  %1413 = icmp sgt i32 %1412, 0
  br i1 %1413, label %1414, label %1440

1414:                                             ; preds = %1409
  %1415 = bitcast float* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1415) #17
  store float 0.000000e+00, float* %25, align 4
  %1416 = bitcast float* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1416) #17
  store float 0.000000e+00, float* %26, align 4
  %1417 = bitcast float* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1417) #17
  store float 0.000000e+00, float* %27, align 4
  %1418 = shl nsw i32 %1412, 1
  %1419 = sitofp i32 %1418 to float
  %1420 = fdiv float 1.000000e+00, %1419
  %1421 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %1410, i32 %1412, float %1420, float* nonnull %25, float* nonnull %26, float* nonnull %27) #17
  %1422 = icmp eq i32 %1412, %1421
  %1423 = load float, float* %25, align 4
  %1424 = fcmp oeq float %1423, 1.000000e+00
  %1425 = and i1 %1422, %1424
  %1426 = load float, float* %27, align 4
  %1427 = fcmp oeq float %1426, 0.000000e+00
  %1428 = and i1 %1425, %1427
  br i1 %1428, label %1429, label %1438

1429:                                             ; preds = %1414
  store i32 0, i32* %1411, align 8
  %1430 = bitcast %union.skcms_Curve* %1410 to %struct.anon*
  %1431 = getelementptr inbounds %struct.anon, %struct.anon* %1430, i64 0, i32 1, i32 0
  %1432 = bitcast float* %1431 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %1432, align 4
  %1433 = getelementptr inbounds %struct.anon, %struct.anon* %1430, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %1433, align 4
  %1434 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 1, i32 1
  %1435 = bitcast [8 x i8]* %1434 to float*
  store float 0.000000e+00, float* %1435, align 4
  %1436 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 1, i32 1, i64 4
  %1437 = bitcast i8* %1436 to float*
  store float 0.000000e+00, float* %1437, align 4
  br label %1438

1438:                                             ; preds = %1429, %1414
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1417) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1416) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1415) #17
  %1439 = load i32, i32* %1373, align 8
  br label %1440

1440:                                             ; preds = %1438, %1409
  %1441 = phi i32 [ %1439, %1438 ], [ %1407, %1409 ]
  %1442 = icmp ugt i32 %1441, 2
  br i1 %1442, label %1443, label %1507

1443:                                             ; preds = %1440
  %1444 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 2
  %1445 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %1444, i64 0, i32 0, i32 0
  %1446 = load i32, i32* %1445, align 8
  %1447 = icmp sgt i32 %1446, 0
  br i1 %1447, label %1448, label %1474

1448:                                             ; preds = %1443
  %1449 = bitcast float* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1449) #17
  store float 0.000000e+00, float* %22, align 4
  %1450 = bitcast float* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1450) #17
  store float 0.000000e+00, float* %23, align 4
  %1451 = bitcast float* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1451) #17
  store float 0.000000e+00, float* %24, align 4
  %1452 = shl nsw i32 %1446, 1
  %1453 = sitofp i32 %1452 to float
  %1454 = fdiv float 1.000000e+00, %1453
  %1455 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %1444, i32 %1446, float %1454, float* nonnull %22, float* nonnull %23, float* nonnull %24) #17
  %1456 = icmp eq i32 %1446, %1455
  %1457 = load float, float* %22, align 4
  %1458 = fcmp oeq float %1457, 1.000000e+00
  %1459 = and i1 %1456, %1458
  %1460 = load float, float* %24, align 4
  %1461 = fcmp oeq float %1460, 0.000000e+00
  %1462 = and i1 %1459, %1461
  br i1 %1462, label %1463, label %1472

1463:                                             ; preds = %1448
  store i32 0, i32* %1445, align 8
  %1464 = bitcast %union.skcms_Curve* %1444 to %struct.anon*
  %1465 = getelementptr inbounds %struct.anon, %struct.anon* %1464, i64 0, i32 1, i32 0
  %1466 = bitcast float* %1465 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %1466, align 4
  %1467 = getelementptr inbounds %struct.anon, %struct.anon* %1464, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %1467, align 4
  %1468 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 2, i32 1
  %1469 = bitcast [8 x i8]* %1468 to float*
  store float 0.000000e+00, float* %1469, align 4
  %1470 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 2, i32 1, i64 4
  %1471 = bitcast i8* %1470 to float*
  store float 0.000000e+00, float* %1471, align 4
  br label %1472

1472:                                             ; preds = %1463, %1448
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1451) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1450) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1449) #17
  %1473 = load i32, i32* %1373, align 8
  br label %1474

1474:                                             ; preds = %1472, %1443
  %1475 = phi i32 [ %1473, %1472 ], [ %1441, %1443 ]
  %1476 = icmp ugt i32 %1475, 3
  br i1 %1476, label %1477, label %1507

1477:                                             ; preds = %1474
  %1478 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 3
  %1479 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %1478, i64 0, i32 0, i32 0
  %1480 = load i32, i32* %1479, align 8
  %1481 = icmp sgt i32 %1480, 0
  br i1 %1481, label %1482, label %1507

1482:                                             ; preds = %1477
  %1483 = bitcast float* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1483) #17
  store float 0.000000e+00, float* %19, align 4
  %1484 = bitcast float* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1484) #17
  store float 0.000000e+00, float* %20, align 4
  %1485 = bitcast float* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1485) #17
  store float 0.000000e+00, float* %21, align 4
  %1486 = shl nsw i32 %1480, 1
  %1487 = sitofp i32 %1486 to float
  %1488 = fdiv float 1.000000e+00, %1487
  %1489 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %1478, i32 %1480, float %1488, float* nonnull %19, float* nonnull %20, float* nonnull %21) #17
  %1490 = icmp eq i32 %1480, %1489
  %1491 = load float, float* %19, align 4
  %1492 = fcmp oeq float %1491, 1.000000e+00
  %1493 = and i1 %1490, %1492
  %1494 = load float, float* %21, align 4
  %1495 = fcmp oeq float %1494, 0.000000e+00
  %1496 = and i1 %1493, %1495
  br i1 %1496, label %1497, label %1506

1497:                                             ; preds = %1482
  store i32 0, i32* %1479, align 8
  %1498 = bitcast %union.skcms_Curve* %1478 to %struct.anon*
  %1499 = getelementptr inbounds %struct.anon, %struct.anon* %1498, i64 0, i32 1, i32 0
  %1500 = bitcast float* %1499 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %1500, align 4
  %1501 = getelementptr inbounds %struct.anon, %struct.anon* %1498, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %1501, align 4
  %1502 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 3, i32 1
  %1503 = bitcast [8 x i8]* %1502 to float*
  store float 0.000000e+00, float* %1503, align 4
  %1504 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 1, i64 3, i32 1, i64 4
  %1505 = bitcast i8* %1504 to float*
  store float 0.000000e+00, float* %1505, align 4
  br label %1506

1506:                                             ; preds = %1497, %1482
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1485) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1484) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1483) #17
  br label %1507

1507:                                             ; preds = %1506, %1477, %1474, %1440, %1406, %1371, %1366
  %1508 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 5
  %1509 = load i32, i32* %1508, align 8
  %1510 = icmp eq i32 %1509, 0
  br i1 %1510, label %1609, label %1511

1511:                                             ; preds = %1507
  %1512 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 6, i64 0
  %1513 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %1512, i64 0, i32 0, i32 0
  %1514 = load i32, i32* %1513, align 8
  %1515 = icmp sgt i32 %1514, 0
  br i1 %1515, label %1516, label %1542

1516:                                             ; preds = %1511
  %1517 = bitcast float* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1517) #17
  store float 0.000000e+00, float* %16, align 4
  %1518 = bitcast float* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1518) #17
  store float 0.000000e+00, float* %17, align 4
  %1519 = bitcast float* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1519) #17
  store float 0.000000e+00, float* %18, align 4
  %1520 = shl nsw i32 %1514, 1
  %1521 = sitofp i32 %1520 to float
  %1522 = fdiv float 1.000000e+00, %1521
  %1523 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %1512, i32 %1514, float %1522, float* nonnull %16, float* nonnull %17, float* nonnull %18) #17
  %1524 = icmp eq i32 %1514, %1523
  %1525 = load float, float* %16, align 4
  %1526 = fcmp oeq float %1525, 1.000000e+00
  %1527 = and i1 %1524, %1526
  %1528 = load float, float* %18, align 4
  %1529 = fcmp oeq float %1528, 0.000000e+00
  %1530 = and i1 %1527, %1529
  br i1 %1530, label %1531, label %1540

1531:                                             ; preds = %1516
  store i32 0, i32* %1513, align 8
  %1532 = bitcast %union.skcms_Curve* %1512 to %struct.anon*
  %1533 = getelementptr inbounds %struct.anon, %struct.anon* %1532, i64 0, i32 1, i32 0
  %1534 = bitcast float* %1533 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %1534, align 4
  %1535 = getelementptr inbounds %struct.anon, %struct.anon* %1532, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %1535, align 4
  %1536 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 6, i64 0, i32 1
  %1537 = bitcast [8 x i8]* %1536 to float*
  store float 0.000000e+00, float* %1537, align 4
  %1538 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 6, i64 0, i32 1, i64 4
  %1539 = bitcast i8* %1538 to float*
  store float 0.000000e+00, float* %1539, align 4
  br label %1540

1540:                                             ; preds = %1531, %1516
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1519) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1518) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1517) #17
  %1541 = load i32, i32* %1508, align 8
  br label %1542

1542:                                             ; preds = %1540, %1511
  %1543 = phi i32 [ %1541, %1540 ], [ %1509, %1511 ]
  %1544 = icmp ugt i32 %1543, 1
  br i1 %1544, label %1545, label %1609

1545:                                             ; preds = %1542
  %1546 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 6, i64 1
  %1547 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %1546, i64 0, i32 0, i32 0
  %1548 = load i32, i32* %1547, align 8
  %1549 = icmp sgt i32 %1548, 0
  br i1 %1549, label %1550, label %1576

1550:                                             ; preds = %1545
  %1551 = bitcast float* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1551) #17
  store float 0.000000e+00, float* %13, align 4
  %1552 = bitcast float* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1552) #17
  store float 0.000000e+00, float* %14, align 4
  %1553 = bitcast float* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1553) #17
  store float 0.000000e+00, float* %15, align 4
  %1554 = shl nsw i32 %1548, 1
  %1555 = sitofp i32 %1554 to float
  %1556 = fdiv float 1.000000e+00, %1555
  %1557 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %1546, i32 %1548, float %1556, float* nonnull %13, float* nonnull %14, float* nonnull %15) #17
  %1558 = icmp eq i32 %1548, %1557
  %1559 = load float, float* %13, align 4
  %1560 = fcmp oeq float %1559, 1.000000e+00
  %1561 = and i1 %1558, %1560
  %1562 = load float, float* %15, align 4
  %1563 = fcmp oeq float %1562, 0.000000e+00
  %1564 = and i1 %1561, %1563
  br i1 %1564, label %1565, label %1574

1565:                                             ; preds = %1550
  store i32 0, i32* %1547, align 8
  %1566 = bitcast %union.skcms_Curve* %1546 to %struct.anon*
  %1567 = getelementptr inbounds %struct.anon, %struct.anon* %1566, i64 0, i32 1, i32 0
  %1568 = bitcast float* %1567 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %1568, align 4
  %1569 = getelementptr inbounds %struct.anon, %struct.anon* %1566, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %1569, align 4
  %1570 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 6, i64 1, i32 1
  %1571 = bitcast [8 x i8]* %1570 to float*
  store float 0.000000e+00, float* %1571, align 4
  %1572 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 6, i64 1, i32 1, i64 4
  %1573 = bitcast i8* %1572 to float*
  store float 0.000000e+00, float* %1573, align 4
  br label %1574

1574:                                             ; preds = %1565, %1550
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1553) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1552) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1551) #17
  %1575 = load i32, i32* %1508, align 8
  br label %1576

1576:                                             ; preds = %1574, %1545
  %1577 = phi i32 [ %1575, %1574 ], [ %1543, %1545 ]
  %1578 = icmp ugt i32 %1577, 2
  br i1 %1578, label %1579, label %1609

1579:                                             ; preds = %1576
  %1580 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 6, i64 2
  %1581 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %1580, i64 0, i32 0, i32 0
  %1582 = load i32, i32* %1581, align 8
  %1583 = icmp sgt i32 %1582, 0
  br i1 %1583, label %1584, label %1609

1584:                                             ; preds = %1579
  %1585 = bitcast float* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1585) #17
  store float 0.000000e+00, float* %10, align 4
  %1586 = bitcast float* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1586) #17
  store float 0.000000e+00, float* %11, align 4
  %1587 = bitcast float* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1587) #17
  store float 0.000000e+00, float* %12, align 4
  %1588 = shl nsw i32 %1582, 1
  %1589 = sitofp i32 %1588 to float
  %1590 = fdiv float 1.000000e+00, %1589
  %1591 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %1580, i32 %1582, float %1590, float* nonnull %10, float* nonnull %11, float* nonnull %12) #17
  %1592 = icmp eq i32 %1582, %1591
  %1593 = load float, float* %10, align 4
  %1594 = fcmp oeq float %1593, 1.000000e+00
  %1595 = and i1 %1592, %1594
  %1596 = load float, float* %12, align 4
  %1597 = fcmp oeq float %1596, 0.000000e+00
  %1598 = and i1 %1595, %1597
  br i1 %1598, label %1599, label %1608

1599:                                             ; preds = %1584
  store i32 0, i32* %1581, align 8
  %1600 = bitcast %union.skcms_Curve* %1580 to %struct.anon*
  %1601 = getelementptr inbounds %struct.anon, %struct.anon* %1600, i64 0, i32 1, i32 0
  %1602 = bitcast float* %1601 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %1602, align 4
  %1603 = getelementptr inbounds %struct.anon, %struct.anon* %1600, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %1603, align 4
  %1604 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 6, i64 2, i32 1
  %1605 = bitcast [8 x i8]* %1604 to float*
  store float 0.000000e+00, float* %1605, align 4
  %1606 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 6, i64 2, i32 1, i64 4
  %1607 = bitcast i8* %1606 to float*
  store float 0.000000e+00, float* %1607, align 4
  br label %1608

1608:                                             ; preds = %1599, %1584
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1587) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1586) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1585) #17
  br label %1609

1609:                                             ; preds = %1608, %1579, %1576, %1542, %1507
  %1610 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 8
  %1611 = load i32, i32* %1610, align 8
  %1612 = icmp eq i32 %1611, 0
  br i1 %1612, label %1747, label %1613

1613:                                             ; preds = %1609
  %1614 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 0
  %1615 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %1614, i64 0, i32 0, i32 0
  %1616 = load i32, i32* %1615, align 8
  %1617 = icmp sgt i32 %1616, 0
  br i1 %1617, label %1618, label %1644

1618:                                             ; preds = %1613
  %1619 = bitcast float* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1619) #17
  store float 0.000000e+00, float* %7, align 4
  %1620 = bitcast float* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1620) #17
  store float 0.000000e+00, float* %8, align 4
  %1621 = bitcast float* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1621) #17
  store float 0.000000e+00, float* %9, align 4
  %1622 = shl nsw i32 %1616, 1
  %1623 = sitofp i32 %1622 to float
  %1624 = fdiv float 1.000000e+00, %1623
  %1625 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %1614, i32 %1616, float %1624, float* nonnull %7, float* nonnull %8, float* nonnull %9) #17
  %1626 = icmp eq i32 %1616, %1625
  %1627 = load float, float* %7, align 4
  %1628 = fcmp oeq float %1627, 1.000000e+00
  %1629 = and i1 %1626, %1628
  %1630 = load float, float* %9, align 4
  %1631 = fcmp oeq float %1630, 0.000000e+00
  %1632 = and i1 %1629, %1631
  br i1 %1632, label %1633, label %1642

1633:                                             ; preds = %1618
  store i32 0, i32* %1615, align 8
  %1634 = bitcast %union.skcms_Curve* %1614 to %struct.anon*
  %1635 = getelementptr inbounds %struct.anon, %struct.anon* %1634, i64 0, i32 1, i32 0
  %1636 = bitcast float* %1635 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %1636, align 4
  %1637 = getelementptr inbounds %struct.anon, %struct.anon* %1634, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %1637, align 4
  %1638 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 0, i32 1
  %1639 = bitcast [8 x i8]* %1638 to float*
  store float 0.000000e+00, float* %1639, align 4
  %1640 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 0, i32 1, i64 4
  %1641 = bitcast i8* %1640 to float*
  store float 0.000000e+00, float* %1641, align 4
  br label %1642

1642:                                             ; preds = %1633, %1618
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1621) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1620) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1619) #17
  %1643 = load i32, i32* %1610, align 8
  br label %1644

1644:                                             ; preds = %1642, %1613
  %1645 = phi i32 [ %1643, %1642 ], [ %1611, %1613 ]
  %1646 = icmp ugt i32 %1645, 1
  br i1 %1646, label %1647, label %1747

1647:                                             ; preds = %1644
  %1648 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 1
  %1649 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %1648, i64 0, i32 0, i32 0
  %1650 = load i32, i32* %1649, align 8
  %1651 = icmp sgt i32 %1650, 0
  br i1 %1651, label %1652, label %1678

1652:                                             ; preds = %1647
  %1653 = bitcast float* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1653) #17
  store float 0.000000e+00, float* %34, align 4
  %1654 = bitcast float* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1654) #17
  store float 0.000000e+00, float* %35, align 4
  %1655 = bitcast float* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1655) #17
  store float 0.000000e+00, float* %36, align 4
  %1656 = shl nsw i32 %1650, 1
  %1657 = sitofp i32 %1656 to float
  %1658 = fdiv float 1.000000e+00, %1657
  %1659 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %1648, i32 %1650, float %1658, float* nonnull %34, float* nonnull %35, float* nonnull %36) #17
  %1660 = icmp eq i32 %1650, %1659
  %1661 = load float, float* %34, align 4
  %1662 = fcmp oeq float %1661, 1.000000e+00
  %1663 = and i1 %1660, %1662
  %1664 = load float, float* %36, align 4
  %1665 = fcmp oeq float %1664, 0.000000e+00
  %1666 = and i1 %1663, %1665
  br i1 %1666, label %1667, label %1676

1667:                                             ; preds = %1652
  store i32 0, i32* %1649, align 8
  %1668 = bitcast %union.skcms_Curve* %1648 to %struct.anon*
  %1669 = getelementptr inbounds %struct.anon, %struct.anon* %1668, i64 0, i32 1, i32 0
  %1670 = bitcast float* %1669 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %1670, align 4
  %1671 = getelementptr inbounds %struct.anon, %struct.anon* %1668, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %1671, align 4
  %1672 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 1, i32 1
  %1673 = bitcast [8 x i8]* %1672 to float*
  store float 0.000000e+00, float* %1673, align 4
  %1674 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 1, i32 1, i64 4
  %1675 = bitcast i8* %1674 to float*
  store float 0.000000e+00, float* %1675, align 4
  br label %1676

1676:                                             ; preds = %1667, %1652
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1655) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1654) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1653) #17
  %1677 = load i32, i32* %1610, align 8
  br label %1678

1678:                                             ; preds = %1676, %1647
  %1679 = phi i32 [ %1677, %1676 ], [ %1645, %1647 ]
  %1680 = icmp ugt i32 %1679, 2
  br i1 %1680, label %1681, label %1747

1681:                                             ; preds = %1678
  %1682 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 2
  %1683 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %1682, i64 0, i32 0, i32 0
  %1684 = load i32, i32* %1683, align 8
  %1685 = icmp sgt i32 %1684, 0
  br i1 %1685, label %1686, label %1747

1686:                                             ; preds = %1681
  %1687 = bitcast float* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1687) #17
  store float 0.000000e+00, float* %37, align 4
  %1688 = bitcast float* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1688) #17
  store float 0.000000e+00, float* %38, align 4
  %1689 = bitcast float* %39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1689) #17
  store float 0.000000e+00, float* %39, align 4
  %1690 = shl nsw i32 %1684, 1
  %1691 = sitofp i32 %1690 to float
  %1692 = fdiv float 1.000000e+00, %1691
  %1693 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %1682, i32 %1684, float %1692, float* nonnull %37, float* nonnull %38, float* nonnull %39) #17
  %1694 = icmp eq i32 %1684, %1693
  %1695 = load float, float* %37, align 4
  %1696 = fcmp oeq float %1695, 1.000000e+00
  %1697 = and i1 %1694, %1696
  %1698 = load float, float* %39, align 4
  %1699 = fcmp oeq float %1698, 0.000000e+00
  %1700 = and i1 %1697, %1699
  br i1 %1700, label %1701, label %1710

1701:                                             ; preds = %1686
  store i32 0, i32* %1683, align 8
  %1702 = bitcast %union.skcms_Curve* %1682 to %struct.anon*
  %1703 = getelementptr inbounds %struct.anon, %struct.anon* %1702, i64 0, i32 1, i32 0
  %1704 = bitcast float* %1703 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %1704, align 4
  %1705 = getelementptr inbounds %struct.anon, %struct.anon* %1702, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %1705, align 4
  %1706 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 2, i32 1
  %1707 = bitcast [8 x i8]* %1706 to float*
  store float 0.000000e+00, float* %1707, align 4
  %1708 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 2, i32 1, i64 4
  %1709 = bitcast i8* %1708 to float*
  store float 0.000000e+00, float* %1709, align 4
  br label %1710

1710:                                             ; preds = %1701, %1686
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1689) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1688) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1687) #17
  br label %1747

1711:                                             ; preds = %1143
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1125) #17
  store i32 -1431655766, i32* %31, align 4
  %1712 = and i64 %1140, 4294967295
  %1713 = getelementptr inbounds i8, i8* %491, i64 %1712
  %1714 = sub i32 %485, %1144
  %1715 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 1
  %1716 = call fastcc zeroext i1 @_ZL10read_curvePKhjP11skcms_CurvePj(i8* %1713, i32 %1714, %union.skcms_Curve* %1715, i32* nonnull %31) #17
  br i1 %1716, label %1717, label %1142

1717:                                             ; preds = %1711
  %1718 = load i32, i32* %31, align 4
  %1719 = icmp ugt i32 %1718, -4
  br i1 %1719, label %1142, label %1720

1720:                                             ; preds = %1717
  %1721 = add nuw i32 %1718, 3
  %1722 = and i32 %1721, -4
  store i32 %1722, i32* %31, align 4
  %1723 = zext i32 %1722 to i64
  %1724 = add nuw nsw i64 %1712, %1723
  %1725 = icmp ugt i64 %1724, 4294967295
  br i1 %1725, label %1142, label %1726

1726:                                             ; preds = %1720
  %1727 = trunc i64 %1724 to i32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1125) #17
  %1728 = icmp ult i32 %485, %1727
  br i1 %1728, label %2690, label %1729

1729:                                             ; preds = %1726
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1125) #17
  store i32 -1431655766, i32* %31, align 4
  %1730 = and i64 %1724, 4294967295
  %1731 = getelementptr inbounds i8, i8* %491, i64 %1730
  %1732 = sub i32 %485, %1727
  %1733 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 10, i32 9, i64 2
  %1734 = call fastcc zeroext i1 @_ZL10read_curvePKhjP11skcms_CurvePj(i8* %1731, i32 %1732, %union.skcms_Curve* %1733, i32* nonnull %31) #17
  br i1 %1734, label %1735, label %1142

1735:                                             ; preds = %1729
  %1736 = load i32, i32* %31, align 4
  %1737 = icmp ugt i32 %1736, -4
  br i1 %1737, label %1142, label %1738

1738:                                             ; preds = %1735
  %1739 = add nuw i32 %1736, 3
  %1740 = and i32 %1739, -4
  store i32 %1740, i32* %31, align 4
  %1741 = zext i32 %1740 to i64
  %1742 = add nuw nsw i64 %1730, %1741
  %1743 = icmp ugt i64 %1742, 4294967295
  br i1 %1743, label %1142, label %1744

1744:                                             ; preds = %1738
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1125) #17
  %1745 = icmp eq i32 %1112, 0
  %1746 = icmp eq i32 %1108, 0
  br i1 %1745, label %1281, label %1146

1747:                                             ; preds = %1710, %1681, %1678, %1644, %1609
  %1748 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 9
  store i8 1, i8* %1748, align 8
  br label %1752

1749:                                             ; preds = %469, %458, %462
  %1750 = add nuw nsw i64 %454, 1
  %1751 = icmp eq i64 %1750, %452
  br i1 %1751, label %1752, label %453

1752:                                             ; preds = %1749, %1747
  br i1 %450, label %1753, label %2678

1753:                                             ; preds = %1752
  %1754 = zext i32 %3 to i64
  br label %1755

1755:                                             ; preds = %2675, %1753
  %1756 = phi i64 [ 0, %1753 ], [ %2676, %2675 ]
  %1757 = getelementptr inbounds i32, i32* %2, i64 %1756
  %1758 = load i32, i32* %1757, align 4
  %1759 = icmp ugt i32 %1758, 2
  br i1 %1759, label %2690, label %1760

1760:                                             ; preds = %1755
  %1761 = add nuw nsw i32 %1758, 1110589744
  %1762 = load i8*, i8** %77, align 8
  %1763 = icmp eq i8* %1762, null
  br i1 %1763, label %2675, label %1764

1764:                                             ; preds = %1760
  %1765 = getelementptr inbounds i8, i8* %1762, i64 132
  %1766 = bitcast i8* %1765 to %struct.tag_Layout*
  %1767 = load i32, i32* %120, align 4
  %1768 = icmp eq i32 %1767, 0
  br i1 %1768, label %2675, label %1769

1769:                                             ; preds = %1764
  %1770 = zext i32 %1767 to i64
  br label %1773

1771:                                             ; preds = %1773
  %1772 = icmp eq i64 %1780, %1770
  br i1 %1772, label %2675, label %1773

1773:                                             ; preds = %1771, %1769
  %1774 = phi i64 [ 0, %1769 ], [ %1780, %1771 ]
  %1775 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %1766, i64 %1774, i32 0, i64 0
  %1776 = bitcast i8* %1775 to i32*
  %1777 = load i32, i32* %1776, align 1
  %1778 = call i32 @llvm.bswap.i32(i32 %1777) #17
  %1779 = icmp eq i32 %1778, %1761
  %1780 = add nuw nsw i64 %1774, 1
  br i1 %1779, label %1781, label %1771

1781:                                             ; preds = %1773
  %1782 = bitcast i8* %1765 to %struct.tag_Layout*
  %1783 = and i64 %1774, 4294967295
  %1784 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %1782, i64 %1783, i32 2, i64 0
  %1785 = bitcast i8* %1784 to i32*
  %1786 = load i32, i32* %1785, align 1
  %1787 = call i32 @llvm.bswap.i32(i32 %1786) #17
  %1788 = getelementptr inbounds %struct.tag_Layout, %struct.tag_Layout* %1782, i64 %1783, i32 1, i64 0
  %1789 = bitcast i8* %1788 to i32*
  %1790 = load i32, i32* %1789, align 1
  %1791 = call i32 @llvm.bswap.i32(i32 %1790) #17
  %1792 = zext i32 %1791 to i64
  %1793 = getelementptr inbounds i8, i8* %1762, i64 %1792
  %1794 = bitcast i8* %1793 to i32*
  %1795 = load i32, i32* %1794, align 1
  %1796 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12
  %1797 = icmp eq i32 %1795, 829711981
  br i1 %1797, label %1798, label %1888

1798:                                             ; preds = %1781
  %1799 = icmp ult i32 %1787, 48
  br i1 %1799, label %2690, label %1800

1800:                                             ; preds = %1798
  %1801 = bitcast i8* %1793 to %struct.mft1_Layout*
  %1802 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 2
  store i32 0, i32* %1802, align 8
  %1803 = getelementptr inbounds i8, i8* %1793, i64 8
  %1804 = load i8, i8* %1803, align 1
  %1805 = zext i8 %1804 to i32
  %1806 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %1796, i64 0, i32 0
  store i32 %1805, i32* %1806, align 8
  %1807 = getelementptr inbounds i8, i8* %1793, i64 9
  %1808 = load i8, i8* %1807, align 1
  %1809 = zext i8 %1808 to i32
  %1810 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 5
  store i32 %1809, i32* %1810, align 8
  %1811 = icmp ne i8 %1804, 3
  %1812 = add i8 %1808, -3
  %1813 = icmp ugt i8 %1812, 1
  %1814 = or i1 %1811, %1813
  br i1 %1814, label %2690, label %1815

1815:                                             ; preds = %1800
  %1816 = getelementptr inbounds i8, i8* %1793, i64 10
  %1817 = load i8, i8* %1816, align 1
  %1818 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 6, i64 0
  store i8 %1817, i8* %1818, align 1
  %1819 = load i8, i8* %1816, align 1
  %1820 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 6, i64 1
  store i8 %1819, i8* %1820, align 1
  %1821 = load i8, i8* %1816, align 1
  %1822 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 6, i64 2
  store i8 %1821, i8* %1822, align 1
  %1823 = icmp ugt i8 %1817, 1
  br i1 %1823, label %1824, label %2690

1824:                                             ; preds = %1815
  %1825 = zext i32 %1787 to i64
  %1826 = shl nuw nsw i32 %1805, 8
  %1827 = zext i8 %1808 to i64
  %1828 = zext i8 %1817 to i64
  %1829 = mul nuw nsw i64 %1828, %1827
  %1830 = zext i8 %1819 to i64
  %1831 = mul nuw nsw i64 %1829, %1830
  %1832 = zext i8 %1821 to i64
  %1833 = mul nuw nsw i64 %1831, %1832
  %1834 = add nsw i64 %1825, -48
  %1835 = shl nuw nsw i32 %1809, 8
  %1836 = add nuw nsw i32 %1835, %1826
  %1837 = zext i32 %1836 to i64
  %1838 = add nuw nsw i64 %1833, %1837
  %1839 = icmp ugt i64 %1838, %1834
  br i1 %1839, label %2690, label %1840

1840:                                             ; preds = %1824
  %1841 = zext i32 %1826 to i64
  %1842 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 0, i32 0, i32 0
  store i32 256, i32* %1842, align 8
  %1843 = getelementptr inbounds i8, i8* %1793, i64 48
  %1844 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 0, i32 0, i32 1
  store i8* %1843, i8** %1844, align 8
  %1845 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 0, i32 0, i32 2
  store i8* null, i8** %1845, align 8
  %1846 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 1, i32 0, i32 0
  store i32 256, i32* %1846, align 8
  %1847 = getelementptr inbounds i8, i8* %1793, i64 304
  %1848 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 1, i32 0, i32 1
  store i8* %1847, i8** %1848, align 8
  %1849 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 1, i32 0, i32 2
  store i8* null, i8** %1849, align 8
  %1850 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 2, i32 0, i32 0
  store i32 256, i32* %1850, align 8
  %1851 = getelementptr inbounds i8, i8* %1793, i64 560
  %1852 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 2, i32 0, i32 1
  store i8* %1851, i8** %1852, align 8
  %1853 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 2, i32 0, i32 2
  store i8* null, i8** %1853, align 8
  %1854 = getelementptr inbounds %struct.mft1_Layout, %struct.mft1_Layout* %1801, i64 0, i32 1, i64 %1841
  %1855 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 7
  store i8* %1854, i8** %1855, align 8
  %1856 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 8
  store i8* null, i8** %1856, align 8
  %1857 = getelementptr inbounds i8, i8* %1854, i64 %1833
  %1858 = and i64 %1827, 1
  %1859 = icmp eq i8 %1808, 1
  br i1 %1859, label %1879, label %1860

1860:                                             ; preds = %1840
  %1861 = sub nsw i64 %1827, %1858
  br label %1862

1862:                                             ; preds = %1862, %1860
  %1863 = phi i64 [ 0, %1860 ], [ %1876, %1862 ]
  %1864 = phi i64 [ %1861, %1860 ], [ %1877, %1862 ]
  %1865 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %1863, i32 0, i32 0
  store i32 256, i32* %1865, align 8
  %1866 = shl i64 %1863, 8
  %1867 = getelementptr inbounds i8, i8* %1857, i64 %1866
  %1868 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %1863, i32 0, i32 1
  store i8* %1867, i8** %1868, align 8
  %1869 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %1863, i32 0, i32 2
  store i8* null, i8** %1869, align 8
  %1870 = or i64 %1863, 1
  %1871 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %1870, i32 0, i32 0
  store i32 256, i32* %1871, align 8
  %1872 = shl i64 %1870, 8
  %1873 = getelementptr inbounds i8, i8* %1857, i64 %1872
  %1874 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %1870, i32 0, i32 1
  store i8* %1873, i8** %1874, align 8
  %1875 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %1870, i32 0, i32 2
  store i8* null, i8** %1875, align 8
  %1876 = add nuw nsw i64 %1863, 2
  %1877 = add i64 %1864, -2
  %1878 = icmp eq i64 %1877, 0
  br i1 %1878, label %1879, label %1862

1879:                                             ; preds = %1862, %1840
  %1880 = phi i64 [ 0, %1840 ], [ %1876, %1862 ]
  %1881 = icmp eq i64 %1858, 0
  br i1 %1881, label %1888, label %1882

1882:                                             ; preds = %1879
  %1883 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %1880, i32 0, i32 0
  store i32 256, i32* %1883, align 8
  %1884 = shl i64 %1880, 8
  %1885 = getelementptr inbounds i8, i8* %1857, i64 %1884
  %1886 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %1880, i32 0, i32 1
  store i8* %1885, i8** %1886, align 8
  %1887 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %1880, i32 0, i32 2
  store i8* null, i8** %1887, align 8
  br label %1888

1888:                                             ; preds = %1882, %1879, %1781
  %1889 = phi i1 [ false, %1781 ], [ true, %1879 ], [ true, %1882 ]
  %1890 = icmp eq i32 %1795, 846489197
  br i1 %1890, label %1891, label %2010

1891:                                             ; preds = %1888
  %1892 = icmp ult i32 %1787, 52
  br i1 %1892, label %2690, label %1893

1893:                                             ; preds = %1891
  %1894 = bitcast i8* %1793 to %struct.mft2_Layout*
  %1895 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 2
  store i32 0, i32* %1895, align 8
  %1896 = getelementptr inbounds i8, i8* %1793, i64 8
  %1897 = load i8, i8* %1896, align 1
  %1898 = zext i8 %1897 to i32
  %1899 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %1796, i64 0, i32 0
  store i32 %1898, i32* %1899, align 8
  %1900 = getelementptr inbounds i8, i8* %1793, i64 9
  %1901 = load i8, i8* %1900, align 1
  %1902 = zext i8 %1901 to i32
  %1903 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 5
  store i32 %1902, i32* %1903, align 8
  %1904 = icmp ne i8 %1897, 3
  %1905 = add i8 %1901, -3
  %1906 = icmp ugt i8 %1905, 1
  %1907 = or i1 %1904, %1906
  br i1 %1907, label %2690, label %1908

1908:                                             ; preds = %1893
  %1909 = getelementptr inbounds i8, i8* %1793, i64 10
  %1910 = load i8, i8* %1909, align 1
  %1911 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 6, i64 0
  store i8 %1910, i8* %1911, align 1
  %1912 = load i8, i8* %1909, align 1
  %1913 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 6, i64 1
  store i8 %1912, i8* %1913, align 1
  %1914 = load i8, i8* %1909, align 1
  %1915 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 6, i64 2
  store i8 %1914, i8* %1915, align 1
  %1916 = icmp ugt i8 %1910, 1
  br i1 %1916, label %1917, label %2690

1917:                                             ; preds = %1908
  %1918 = getelementptr inbounds i8, i8* %1793, i64 48
  %1919 = bitcast i8* %1918 to i16*
  %1920 = load i16, i16* %1919, align 1
  %1921 = call i16 @llvm.bswap.i16(i16 %1920) #17
  %1922 = getelementptr inbounds i8, i8* %1793, i64 50
  %1923 = bitcast i8* %1922 to i16*
  %1924 = load i16, i16* %1923, align 1
  %1925 = call i16 @llvm.bswap.i16(i16 %1924) #17
  %1926 = add i16 %1921, -2
  %1927 = icmp ugt i16 %1926, 4094
  %1928 = add i16 %1925, -2
  %1929 = icmp ugt i16 %1928, 4094
  %1930 = or i1 %1927, %1929
  br i1 %1930, label %2690, label %1931

1931:                                             ; preds = %1917
  %1932 = zext i16 %1921 to i32
  %1933 = zext i32 %1787 to i64
  %1934 = shl nuw nsw i32 %1932, 1
  %1935 = mul nuw nsw i32 %1934, %1898
  %1936 = shl nuw nsw i32 %1902, 1
  %1937 = zext i32 %1936 to i64
  %1938 = zext i8 %1910 to i64
  %1939 = mul nuw nsw i64 %1938, %1937
  %1940 = zext i8 %1912 to i64
  %1941 = mul nuw nsw i64 %1939, %1940
  %1942 = zext i8 %1914 to i64
  %1943 = mul nuw nsw i64 %1941, %1942
  %1944 = zext i16 %1925 to i32
  %1945 = add nsw i64 %1933, -52
  %1946 = shl nuw nsw i32 %1944, 1
  %1947 = mul nuw nsw i32 %1946, %1902
  %1948 = add nuw nsw i32 %1947, %1935
  %1949 = zext i32 %1948 to i64
  %1950 = add nuw nsw i64 %1943, %1949
  %1951 = icmp ugt i64 %1950, %1945
  br i1 %1951, label %2690, label %1952

1952:                                             ; preds = %1931
  %1953 = zext i32 %1935 to i64
  %1954 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 0, i32 0, i32 0
  store i32 %1932, i32* %1954, align 8
  %1955 = getelementptr inbounds i8, i8* %1793, i64 52
  %1956 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 0, i32 0, i32 1
  store i8* null, i8** %1956, align 8
  %1957 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 0, i32 0, i32 2
  store i8* %1955, i8** %1957, align 8
  %1958 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 1, i32 0, i32 0
  store i32 %1932, i32* %1958, align 8
  %1959 = zext i32 %1934 to i64
  %1960 = getelementptr inbounds %struct.mft2_Layout, %struct.mft2_Layout* %1894, i64 0, i32 3, i64 %1959
  %1961 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 1, i32 0, i32 1
  store i8* null, i8** %1961, align 8
  %1962 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 1, i32 0, i32 2
  store i8* %1960, i8** %1962, align 8
  %1963 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 2, i32 0, i32 0
  store i32 %1932, i32* %1963, align 8
  %1964 = shl nuw nsw i32 %1932, 2
  %1965 = zext i32 %1964 to i64
  %1966 = getelementptr inbounds %struct.mft2_Layout, %struct.mft2_Layout* %1894, i64 0, i32 3, i64 %1965
  %1967 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 2, i32 0, i32 1
  store i8* null, i8** %1967, align 8
  %1968 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 2, i32 0, i32 2
  store i8* %1966, i8** %1968, align 8
  %1969 = getelementptr inbounds %struct.mft2_Layout, %struct.mft2_Layout* %1894, i64 0, i32 3, i64 %1953
  %1970 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 7
  store i8* null, i8** %1970, align 8
  %1971 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 8
  store i8* %1969, i8** %1971, align 8
  %1972 = getelementptr inbounds i8, i8* %1969, i64 %1943
  %1973 = zext i8 %1901 to i64
  %1974 = and i64 %1973, 1
  %1975 = icmp eq i8 %1901, 1
  br i1 %1975, label %1999, label %1976

1976:                                             ; preds = %1952
  %1977 = sub nsw i64 %1973, %1974
  br label %1978

1978:                                             ; preds = %1978, %1976
  %1979 = phi i64 [ 0, %1976 ], [ %1996, %1978 ]
  %1980 = phi i64 [ %1977, %1976 ], [ %1997, %1978 ]
  %1981 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %1979, i32 0, i32 0
  store i32 %1944, i32* %1981, align 8
  %1982 = trunc i64 %1979 to i32
  %1983 = mul i32 %1946, %1982
  %1984 = zext i32 %1983 to i64
  %1985 = getelementptr inbounds i8, i8* %1972, i64 %1984
  %1986 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %1979, i32 0, i32 1
  store i8* null, i8** %1986, align 8
  %1987 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %1979, i32 0, i32 2
  store i8* %1985, i8** %1987, align 8
  %1988 = or i64 %1979, 1
  %1989 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %1988, i32 0, i32 0
  store i32 %1944, i32* %1989, align 8
  %1990 = trunc i64 %1988 to i32
  %1991 = mul i32 %1946, %1990
  %1992 = zext i32 %1991 to i64
  %1993 = getelementptr inbounds i8, i8* %1972, i64 %1992
  %1994 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %1988, i32 0, i32 1
  store i8* null, i8** %1994, align 8
  %1995 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %1988, i32 0, i32 2
  store i8* %1993, i8** %1995, align 8
  %1996 = add nuw nsw i64 %1979, 2
  %1997 = add i64 %1980, -2
  %1998 = icmp eq i64 %1997, 0
  br i1 %1998, label %1999, label %1978

1999:                                             ; preds = %1978, %1952
  %2000 = phi i64 [ 0, %1952 ], [ %1996, %1978 ]
  %2001 = icmp eq i64 %1974, 0
  br i1 %2001, label %2010, label %2002

2002:                                             ; preds = %1999
  %2003 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %2000, i32 0, i32 0
  store i32 %1944, i32* %2003, align 8
  %2004 = trunc i64 %2000 to i32
  %2005 = mul i32 %1946, %2004
  %2006 = zext i32 %2005 to i64
  %2007 = getelementptr inbounds i8, i8* %1972, i64 %2006
  %2008 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %2000, i32 0, i32 1
  store i8* null, i8** %2008, align 8
  %2009 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %2000, i32 0, i32 2
  store i8* %2007, i8** %2009, align 8
  br label %2010

2010:                                             ; preds = %2002, %1999, %1888
  %2011 = phi i1 [ %1889, %1888 ], [ true, %1999 ], [ true, %2002 ]
  %2012 = icmp eq i32 %1795, 541147757
  br i1 %2012, label %2013, label %2293

2013:                                             ; preds = %2010
  %2014 = icmp ult i32 %1787, 32
  br i1 %2014, label %2690, label %2015

2015:                                             ; preds = %2013
  %2016 = getelementptr inbounds i8, i8* %1793, i64 8
  %2017 = load i8, i8* %2016, align 1
  %2018 = zext i8 %2017 to i32
  %2019 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %1796, i64 0, i32 0
  store i32 %2018, i32* %2019, align 8
  %2020 = getelementptr inbounds i8, i8* %1793, i64 9
  %2021 = load i8, i8* %2020, align 1
  %2022 = zext i8 %2021 to i32
  %2023 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 5
  store i32 %2022, i32* %2023, align 8
  %2024 = icmp ne i8 %2017, 3
  %2025 = add i8 %2021, -3
  %2026 = icmp ugt i8 %2025, 1
  %2027 = or i1 %2024, %2026
  br i1 %2027, label %2690, label %2028

2028:                                             ; preds = %2015
  %2029 = getelementptr inbounds i8, i8* %1793, i64 12
  %2030 = bitcast i8* %2029 to i32*
  %2031 = load i32, i32* %2030, align 1
  %2032 = getelementptr inbounds i8, i8* %1793, i64 16
  %2033 = bitcast i8* %2032 to i32*
  %2034 = load i32, i32* %2033, align 1
  %2035 = call i32 @llvm.bswap.i32(i32 %2034) #17
  %2036 = getelementptr inbounds i8, i8* %1793, i64 20
  %2037 = bitcast i8* %2036 to i32*
  %2038 = load i32, i32* %2037, align 1
  %2039 = call i32 @llvm.bswap.i32(i32 %2038) #17
  %2040 = getelementptr inbounds i8, i8* %1793, i64 24
  %2041 = bitcast i8* %2040 to i32*
  %2042 = load i32, i32* %2041, align 1
  %2043 = call i32 @llvm.bswap.i32(i32 %2042) #17
  %2044 = getelementptr inbounds i8, i8* %1793, i64 28
  %2045 = bitcast i8* %2044 to i32*
  %2046 = load i32, i32* %2045, align 1
  %2047 = call i32 @llvm.bswap.i32(i32 %2046) #17
  %2048 = icmp eq i32 %2031, 0
  br i1 %2048, label %2690, label %2049

2049:                                             ; preds = %2028
  %2050 = call i32 @llvm.bswap.i32(i32 %2031) #17
  %2051 = bitcast i32* %64 to i8*
  %2052 = icmp ult i32 %1787, %2050
  br i1 %2052, label %2690, label %2053

2053:                                             ; preds = %2049
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2051) #17
  store i32 -1431655766, i32* %64, align 4
  %2054 = zext i32 %2050 to i64
  %2055 = getelementptr inbounds i8, i8* %1793, i64 %2054
  %2056 = sub i32 %1787, %2050
  %2057 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 0
  %2058 = call fastcc zeroext i1 @_ZL10read_curvePKhjP11skcms_CurvePj(i8* %2055, i32 %2056, %union.skcms_Curve* %2057, i32* nonnull %64) #17
  br i1 %2058, label %2059, label %2068

2059:                                             ; preds = %2053
  %2060 = load i32, i32* %64, align 4
  %2061 = icmp ugt i32 %2060, -4
  br i1 %2061, label %2068, label %2062

2062:                                             ; preds = %2059
  %2063 = add nuw i32 %2060, 3
  %2064 = and i32 %2063, -4
  store i32 %2064, i32* %64, align 4
  %2065 = zext i32 %2064 to i64
  %2066 = add nuw nsw i64 %2065, %2054
  %2067 = icmp ugt i64 %2066, 4294967295
  br i1 %2067, label %2068, label %2069

2068:                                             ; preds = %2664, %2661, %2655, %2646, %2643, %2637, %2062, %2059, %2053
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2051) #17
  br label %2690

2069:                                             ; preds = %2062
  %2070 = trunc i64 %2066 to i32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2051) #17
  %2071 = icmp ult i32 %1787, %2070
  br i1 %2071, label %2690, label %2637

2072:                                             ; preds = %2670
  br i1 %2672, label %2690, label %2073

2073:                                             ; preds = %2072
  %2074 = load i32, i32* %2019, align 8
  %2075 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 2
  store i32 %2074, i32* %2075, align 8
  %2076 = icmp eq i32 %2074, 0
  br i1 %2076, label %2104, label %2077

2077:                                             ; preds = %2073
  %2078 = bitcast i32* %65 to i8*
  %2079 = zext i32 %2074 to i64
  br label %2080

2080:                                             ; preds = %2100, %2077
  %2081 = phi i64 [ 0, %2077 ], [ %2102, %2100 ]
  %2082 = phi i32 [ %2039, %2077 ], [ %2101, %2100 ]
  %2083 = icmp ult i32 %1787, %2082
  br i1 %2083, label %2690, label %2084

2084:                                             ; preds = %2080
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2078) #17
  store i32 -1431655766, i32* %65, align 4
  %2085 = zext i32 %2082 to i64
  %2086 = getelementptr inbounds i8, i8* %1793, i64 %2085
  %2087 = sub i32 %1787, %2082
  %2088 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 4, i64 %2081
  %2089 = call fastcc zeroext i1 @_ZL10read_curvePKhjP11skcms_CurvePj(i8* %2086, i32 %2087, %union.skcms_Curve* %2088, i32* nonnull %65) #17
  br i1 %2089, label %2090, label %2099

2090:                                             ; preds = %2084
  %2091 = load i32, i32* %65, align 4
  %2092 = icmp ugt i32 %2091, -4
  br i1 %2092, label %2099, label %2093

2093:                                             ; preds = %2090
  %2094 = add nuw i32 %2091, 3
  %2095 = and i32 %2094, -4
  store i32 %2095, i32* %65, align 4
  %2096 = zext i32 %2095 to i64
  %2097 = add nuw nsw i64 %2096, %2085
  %2098 = icmp ugt i64 %2097, 4294967295
  br i1 %2098, label %2099, label %2100

2099:                                             ; preds = %2093, %2090, %2084
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2078) #17
  br label %2690

2100:                                             ; preds = %2093
  %2101 = trunc i64 %2097 to i32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2078) #17
  %2102 = add nuw nsw i64 %2081, 1
  %2103 = icmp eq i64 %2102, %2079
  br i1 %2103, label %2104, label %2080

2104:                                             ; preds = %2100, %2073
  %2105 = zext i32 %1787 to i64
  %2106 = zext i32 %2035 to i64
  %2107 = add nuw nsw i64 %2106, 48
  %2108 = icmp ugt i64 %2107, %2105
  br i1 %2108, label %2690, label %2109

2109:                                             ; preds = %2104
  %2110 = select i1 %176, float 0x3FE0001000000000, float 1.000000e+00
  %2111 = getelementptr inbounds i8, i8* %1793, i64 %2106
  %2112 = bitcast i8* %2111 to i32*
  %2113 = load i32, i32* %2112, align 1
  %2114 = call i32 @llvm.bswap.i32(i32 %2113) #17
  %2115 = sitofp i32 %2114 to float
  %2116 = fmul float %2115, 0x3EF0000000000000
  %2117 = fmul float %2110, %2116
  %2118 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 3, i32 0, i64 0, i64 0
  store float %2117, float* %2118, align 4
  %2119 = getelementptr inbounds i8, i8* %2111, i64 4
  %2120 = bitcast i8* %2119 to i32*
  %2121 = load i32, i32* %2120, align 1
  %2122 = call i32 @llvm.bswap.i32(i32 %2121) #17
  %2123 = sitofp i32 %2122 to float
  %2124 = fmul float %2123, 0x3EF0000000000000
  %2125 = fmul float %2110, %2124
  %2126 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 3, i32 0, i64 0, i64 1
  store float %2125, float* %2126, align 4
  %2127 = getelementptr inbounds i8, i8* %2111, i64 8
  %2128 = bitcast i8* %2127 to i32*
  %2129 = load i32, i32* %2128, align 1
  %2130 = call i32 @llvm.bswap.i32(i32 %2129) #17
  %2131 = sitofp i32 %2130 to float
  %2132 = fmul float %2131, 0x3EF0000000000000
  %2133 = fmul float %2110, %2132
  %2134 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 3, i32 0, i64 0, i64 2
  store float %2133, float* %2134, align 4
  %2135 = getelementptr inbounds i8, i8* %2111, i64 12
  %2136 = bitcast i8* %2135 to i32*
  %2137 = load i32, i32* %2136, align 1
  %2138 = call i32 @llvm.bswap.i32(i32 %2137) #17
  %2139 = sitofp i32 %2138 to float
  %2140 = fmul float %2139, 0x3EF0000000000000
  %2141 = fmul float %2110, %2140
  %2142 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 3, i32 0, i64 1, i64 0
  store float %2141, float* %2142, align 4
  %2143 = getelementptr inbounds i8, i8* %2111, i64 16
  %2144 = bitcast i8* %2143 to i32*
  %2145 = load i32, i32* %2144, align 1
  %2146 = call i32 @llvm.bswap.i32(i32 %2145) #17
  %2147 = sitofp i32 %2146 to float
  %2148 = fmul float %2147, 0x3EF0000000000000
  %2149 = fmul float %2110, %2148
  %2150 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 3, i32 0, i64 1, i64 1
  store float %2149, float* %2150, align 4
  %2151 = getelementptr inbounds i8, i8* %2111, i64 20
  %2152 = bitcast i8* %2151 to i32*
  %2153 = load i32, i32* %2152, align 1
  %2154 = call i32 @llvm.bswap.i32(i32 %2153) #17
  %2155 = sitofp i32 %2154 to float
  %2156 = fmul float %2155, 0x3EF0000000000000
  %2157 = fmul float %2110, %2156
  %2158 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 3, i32 0, i64 1, i64 2
  store float %2157, float* %2158, align 4
  %2159 = getelementptr inbounds i8, i8* %2111, i64 24
  %2160 = bitcast i8* %2159 to i32*
  %2161 = load i32, i32* %2160, align 1
  %2162 = call i32 @llvm.bswap.i32(i32 %2161) #17
  %2163 = sitofp i32 %2162 to float
  %2164 = fmul float %2163, 0x3EF0000000000000
  %2165 = fmul float %2110, %2164
  %2166 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 3, i32 0, i64 2, i64 0
  store float %2165, float* %2166, align 4
  %2167 = getelementptr inbounds i8, i8* %2111, i64 28
  %2168 = bitcast i8* %2167 to i32*
  %2169 = load i32, i32* %2168, align 1
  %2170 = call i32 @llvm.bswap.i32(i32 %2169) #17
  %2171 = sitofp i32 %2170 to float
  %2172 = fmul float %2171, 0x3EF0000000000000
  %2173 = fmul float %2110, %2172
  %2174 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 3, i32 0, i64 2, i64 1
  store float %2173, float* %2174, align 4
  %2175 = getelementptr inbounds i8, i8* %2111, i64 32
  %2176 = bitcast i8* %2175 to i32*
  %2177 = load i32, i32* %2176, align 1
  %2178 = call i32 @llvm.bswap.i32(i32 %2177) #17
  %2179 = sitofp i32 %2178 to float
  %2180 = fmul float %2179, 0x3EF0000000000000
  %2181 = fmul float %2110, %2180
  %2182 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 3, i32 0, i64 2, i64 2
  store float %2181, float* %2182, align 4
  %2183 = getelementptr inbounds i8, i8* %2111, i64 36
  %2184 = bitcast i8* %2183 to i32*
  %2185 = load i32, i32* %2184, align 1
  %2186 = call i32 @llvm.bswap.i32(i32 %2185) #17
  %2187 = sitofp i32 %2186 to float
  %2188 = fmul float %2187, 0x3EF0000000000000
  %2189 = fmul float %2110, %2188
  %2190 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 3, i32 0, i64 0, i64 3
  store float %2189, float* %2190, align 4
  %2191 = getelementptr inbounds i8, i8* %2111, i64 40
  %2192 = bitcast i8* %2191 to i32*
  %2193 = load i32, i32* %2192, align 1
  %2194 = call i32 @llvm.bswap.i32(i32 %2193) #17
  %2195 = sitofp i32 %2194 to float
  %2196 = fmul float %2195, 0x3EF0000000000000
  %2197 = fmul float %2110, %2196
  %2198 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 3, i32 0, i64 1, i64 3
  store float %2197, float* %2198, align 4
  %2199 = getelementptr inbounds i8, i8* %2111, i64 44
  %2200 = bitcast i8* %2199 to i32*
  %2201 = load i32, i32* %2200, align 1
  %2202 = call i32 @llvm.bswap.i32(i32 %2201) #17
  %2203 = sitofp i32 %2202 to float
  %2204 = fmul float %2203, 0x3EF0000000000000
  %2205 = fmul float %2110, %2204
  %2206 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 3, i32 0, i64 2, i64 3
  store float %2205, float* %2206, align 4
  br label %2210

2207:                                             ; preds = %2670
  br i1 %2672, label %2208, label %2690

2208:                                             ; preds = %2207
  %2209 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 2
  store i32 0, i32* %2209, align 8
  br label %2210

2210:                                             ; preds = %2208, %2109
  %2211 = icmp eq i32 %2046, 0
  %2212 = icmp eq i32 %2042, 0
  br i1 %2211, label %2287, label %2213

2213:                                             ; preds = %2210
  br i1 %2212, label %2690, label %2214

2214:                                             ; preds = %2213
  %2215 = load i32, i32* %2023, align 8
  %2216 = icmp eq i32 %2215, 0
  br i1 %2216, label %2244, label %2217

2217:                                             ; preds = %2214
  %2218 = bitcast i32* %66 to i8*
  %2219 = zext i32 %2215 to i64
  br label %2220

2220:                                             ; preds = %2240, %2217
  %2221 = phi i64 [ 0, %2217 ], [ %2242, %2240 ]
  %2222 = phi i32 [ %2047, %2217 ], [ %2241, %2240 ]
  %2223 = icmp ult i32 %1787, %2222
  br i1 %2223, label %2690, label %2224

2224:                                             ; preds = %2220
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2218) #17
  store i32 -1431655766, i32* %66, align 4
  %2225 = zext i32 %2222 to i64
  %2226 = getelementptr inbounds i8, i8* %1793, i64 %2225
  %2227 = sub i32 %1787, %2222
  %2228 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 %2221
  %2229 = call fastcc zeroext i1 @_ZL10read_curvePKhjP11skcms_CurvePj(i8* %2226, i32 %2227, %union.skcms_Curve* %2228, i32* nonnull %66) #17
  br i1 %2229, label %2230, label %2239

2230:                                             ; preds = %2224
  %2231 = load i32, i32* %66, align 4
  %2232 = icmp ugt i32 %2231, -4
  br i1 %2232, label %2239, label %2233

2233:                                             ; preds = %2230
  %2234 = add nuw i32 %2231, 3
  %2235 = and i32 %2234, -4
  store i32 %2235, i32* %66, align 4
  %2236 = zext i32 %2235 to i64
  %2237 = add nuw nsw i64 %2236, %2225
  %2238 = icmp ugt i64 %2237, 4294967295
  br i1 %2238, label %2239, label %2240

2239:                                             ; preds = %2233, %2230, %2224
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2218) #17
  br label %2690

2240:                                             ; preds = %2233
  %2241 = trunc i64 %2237 to i32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2218) #17
  %2242 = add nuw nsw i64 %2221, 1
  %2243 = icmp eq i64 %2242, %2219
  br i1 %2243, label %2244, label %2220

2244:                                             ; preds = %2240, %2214
  %2245 = zext i32 %1787 to i64
  %2246 = zext i32 %2043 to i64
  %2247 = add nuw nsw i64 %2246, 20
  %2248 = icmp ugt i64 %2247, %2245
  br i1 %2248, label %2690, label %2249

2249:                                             ; preds = %2244
  %2250 = getelementptr inbounds i8, i8* %1793, i64 %2246
  %2251 = getelementptr inbounds i8, i8* %2250, i64 16
  %2252 = load i8, i8* %2251, align 1
  switch i8 %2252, label %2690 [
    i8 1, label %2253
    i8 2, label %2256
  ]

2253:                                             ; preds = %2249
  %2254 = getelementptr inbounds i8, i8* %2250, i64 20
  %2255 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 7
  store i8* %2254, i8** %2255, align 8
  br label %2259

2256:                                             ; preds = %2249
  %2257 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 7
  store i8* null, i8** %2257, align 8
  %2258 = getelementptr inbounds i8, i8* %2250, i64 20
  br label %2259

2259:                                             ; preds = %2256, %2253
  %2260 = phi i8* [ %2258, %2256 ], [ null, %2253 ]
  %2261 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 8
  store i8* %2260, i8** %2261, align 8
  %2262 = load i32, i32* %2023, align 8
  %2263 = load i8, i8* %2251, align 1
  %2264 = zext i8 %2263 to i32
  %2265 = mul i32 %2262, %2264
  %2266 = zext i32 %2265 to i64
  %2267 = load i32, i32* %2019, align 8
  %2268 = icmp eq i32 %2267, 0
  br i1 %2268, label %2283, label %2269

2269:                                             ; preds = %2259
  %2270 = zext i32 %2267 to i64
  br label %2271

2271:                                             ; preds = %2278, %2269
  %2272 = phi i64 [ 0, %2269 ], [ %2281, %2278 ]
  %2273 = phi i64 [ %2266, %2269 ], [ %2280, %2278 ]
  %2274 = getelementptr inbounds i8, i8* %2250, i64 %2272
  %2275 = load i8, i8* %2274, align 1
  %2276 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 6, i64 %2272
  store i8 %2275, i8* %2276, align 1
  %2277 = icmp ult i8 %2275, 2
  br i1 %2277, label %2690, label %2278

2278:                                             ; preds = %2271
  %2279 = zext i8 %2275 to i64
  %2280 = mul i64 %2273, %2279
  %2281 = add nuw nsw i64 %2272, 1
  %2282 = icmp eq i64 %2281, %2270
  br i1 %2282, label %2283, label %2271

2283:                                             ; preds = %2278, %2259
  %2284 = phi i64 [ %2266, %2259 ], [ %2280, %2278 ]
  %2285 = add i64 %2284, %2247
  %2286 = icmp ugt i64 %2285, %2245
  br i1 %2286, label %2690, label %2297

2287:                                             ; preds = %2210
  br i1 %2212, label %2288, label %2690

2288:                                             ; preds = %2287
  %2289 = load i32, i32* %2019, align 8
  %2290 = load i32, i32* %2023, align 8
  %2291 = icmp eq i32 %2289, %2290
  br i1 %2291, label %2292, label %2690

2292:                                             ; preds = %2288
  store i32 0, i32* %2023, align 8
  br label %2297

2293:                                             ; preds = %2010
  br i1 %2011, label %2294, label %2690

2294:                                             ; preds = %2293
  %2295 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %1796, i64 0, i32 0
  %2296 = load i32, i32* %2295, align 8
  br label %2297

2297:                                             ; preds = %2294, %2292, %2283
  %2298 = phi i32 [ %2296, %2294 ], [ %2289, %2292 ], [ %2267, %2283 ]
  %2299 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %1796, i64 0, i32 0
  %2300 = icmp eq i32 %2298, 0
  br i1 %2300, label %2399, label %2301

2301:                                             ; preds = %2297
  %2302 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 0
  %2303 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2302, i64 0, i32 0, i32 0
  %2304 = load i32, i32* %2303, align 8
  %2305 = icmp sgt i32 %2304, 0
  br i1 %2305, label %2306, label %2332

2306:                                             ; preds = %2301
  %2307 = bitcast float* %61 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2307) #17
  store float 0.000000e+00, float* %61, align 4
  %2308 = bitcast float* %62 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2308) #17
  store float 0.000000e+00, float* %62, align 4
  %2309 = bitcast float* %63 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2309) #17
  store float 0.000000e+00, float* %63, align 4
  %2310 = shl nsw i32 %2304, 1
  %2311 = sitofp i32 %2310 to float
  %2312 = fdiv float 1.000000e+00, %2311
  %2313 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %2302, i32 %2304, float %2312, float* nonnull %61, float* nonnull %62, float* nonnull %63) #17
  %2314 = icmp eq i32 %2304, %2313
  %2315 = load float, float* %61, align 4
  %2316 = fcmp oeq float %2315, 1.000000e+00
  %2317 = and i1 %2314, %2316
  %2318 = load float, float* %63, align 4
  %2319 = fcmp oeq float %2318, 0.000000e+00
  %2320 = and i1 %2317, %2319
  br i1 %2320, label %2321, label %2330

2321:                                             ; preds = %2306
  store i32 0, i32* %2303, align 8
  %2322 = bitcast %union.skcms_Curve* %2302 to %struct.anon*
  %2323 = getelementptr inbounds %struct.anon, %struct.anon* %2322, i64 0, i32 1, i32 0
  %2324 = bitcast float* %2323 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %2324, align 4
  %2325 = getelementptr inbounds %struct.anon, %struct.anon* %2322, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %2325, align 4
  %2326 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 0, i32 1
  %2327 = bitcast [8 x i8]* %2326 to float*
  store float 0.000000e+00, float* %2327, align 4
  %2328 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 0, i32 1, i64 4
  %2329 = bitcast i8* %2328 to float*
  store float 0.000000e+00, float* %2329, align 4
  br label %2330

2330:                                             ; preds = %2321, %2306
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2309) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2308) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2307) #17
  %2331 = load i32, i32* %2299, align 8
  br label %2332

2332:                                             ; preds = %2330, %2301
  %2333 = phi i32 [ %2331, %2330 ], [ %2298, %2301 ]
  %2334 = icmp ugt i32 %2333, 1
  br i1 %2334, label %2335, label %2399

2335:                                             ; preds = %2332
  %2336 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 1
  %2337 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2336, i64 0, i32 0, i32 0
  %2338 = load i32, i32* %2337, align 8
  %2339 = icmp sgt i32 %2338, 0
  br i1 %2339, label %2340, label %2366

2340:                                             ; preds = %2335
  %2341 = bitcast float* %58 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2341) #17
  store float 0.000000e+00, float* %58, align 4
  %2342 = bitcast float* %59 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2342) #17
  store float 0.000000e+00, float* %59, align 4
  %2343 = bitcast float* %60 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2343) #17
  store float 0.000000e+00, float* %60, align 4
  %2344 = shl nsw i32 %2338, 1
  %2345 = sitofp i32 %2344 to float
  %2346 = fdiv float 1.000000e+00, %2345
  %2347 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %2336, i32 %2338, float %2346, float* nonnull %58, float* nonnull %59, float* nonnull %60) #17
  %2348 = icmp eq i32 %2338, %2347
  %2349 = load float, float* %58, align 4
  %2350 = fcmp oeq float %2349, 1.000000e+00
  %2351 = and i1 %2348, %2350
  %2352 = load float, float* %60, align 4
  %2353 = fcmp oeq float %2352, 0.000000e+00
  %2354 = and i1 %2351, %2353
  br i1 %2354, label %2355, label %2364

2355:                                             ; preds = %2340
  store i32 0, i32* %2337, align 8
  %2356 = bitcast %union.skcms_Curve* %2336 to %struct.anon*
  %2357 = getelementptr inbounds %struct.anon, %struct.anon* %2356, i64 0, i32 1, i32 0
  %2358 = bitcast float* %2357 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %2358, align 4
  %2359 = getelementptr inbounds %struct.anon, %struct.anon* %2356, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %2359, align 4
  %2360 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 1, i32 1
  %2361 = bitcast [8 x i8]* %2360 to float*
  store float 0.000000e+00, float* %2361, align 4
  %2362 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 1, i32 1, i64 4
  %2363 = bitcast i8* %2362 to float*
  store float 0.000000e+00, float* %2363, align 4
  br label %2364

2364:                                             ; preds = %2355, %2340
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2343) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2342) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2341) #17
  %2365 = load i32, i32* %2299, align 8
  br label %2366

2366:                                             ; preds = %2364, %2335
  %2367 = phi i32 [ %2365, %2364 ], [ %2333, %2335 ]
  %2368 = icmp ugt i32 %2367, 2
  br i1 %2368, label %2369, label %2399

2369:                                             ; preds = %2366
  %2370 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 2
  %2371 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2370, i64 0, i32 0, i32 0
  %2372 = load i32, i32* %2371, align 8
  %2373 = icmp sgt i32 %2372, 0
  br i1 %2373, label %2374, label %2399

2374:                                             ; preds = %2369
  %2375 = bitcast float* %55 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2375) #17
  store float 0.000000e+00, float* %55, align 4
  %2376 = bitcast float* %56 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2376) #17
  store float 0.000000e+00, float* %56, align 4
  %2377 = bitcast float* %57 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2377) #17
  store float 0.000000e+00, float* %57, align 4
  %2378 = shl nsw i32 %2372, 1
  %2379 = sitofp i32 %2378 to float
  %2380 = fdiv float 1.000000e+00, %2379
  %2381 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %2370, i32 %2372, float %2380, float* nonnull %55, float* nonnull %56, float* nonnull %57) #17
  %2382 = icmp eq i32 %2372, %2381
  %2383 = load float, float* %55, align 4
  %2384 = fcmp oeq float %2383, 1.000000e+00
  %2385 = and i1 %2382, %2384
  %2386 = load float, float* %57, align 4
  %2387 = fcmp oeq float %2386, 0.000000e+00
  %2388 = and i1 %2385, %2387
  br i1 %2388, label %2389, label %2398

2389:                                             ; preds = %2374
  store i32 0, i32* %2371, align 8
  %2390 = bitcast %union.skcms_Curve* %2370 to %struct.anon*
  %2391 = getelementptr inbounds %struct.anon, %struct.anon* %2390, i64 0, i32 1, i32 0
  %2392 = bitcast float* %2391 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %2392, align 4
  %2393 = getelementptr inbounds %struct.anon, %struct.anon* %2390, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %2393, align 4
  %2394 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 2, i32 1
  %2395 = bitcast [8 x i8]* %2394 to float*
  store float 0.000000e+00, float* %2395, align 4
  %2396 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 2, i32 1, i64 4
  %2397 = bitcast i8* %2396 to float*
  store float 0.000000e+00, float* %2397, align 4
  br label %2398

2398:                                             ; preds = %2389, %2374
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2377) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2376) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2375) #17
  br label %2399

2399:                                             ; preds = %2398, %2369, %2366, %2332, %2297
  %2400 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 2
  %2401 = load i32, i32* %2400, align 8
  %2402 = icmp eq i32 %2401, 0
  br i1 %2402, label %2501, label %2403

2403:                                             ; preds = %2399
  %2404 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 4, i64 0
  %2405 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2404, i64 0, i32 0, i32 0
  %2406 = load i32, i32* %2405, align 8
  %2407 = icmp sgt i32 %2406, 0
  br i1 %2407, label %2408, label %2434

2408:                                             ; preds = %2403
  %2409 = bitcast float* %52 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2409) #17
  store float 0.000000e+00, float* %52, align 4
  %2410 = bitcast float* %53 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2410) #17
  store float 0.000000e+00, float* %53, align 4
  %2411 = bitcast float* %54 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2411) #17
  store float 0.000000e+00, float* %54, align 4
  %2412 = shl nsw i32 %2406, 1
  %2413 = sitofp i32 %2412 to float
  %2414 = fdiv float 1.000000e+00, %2413
  %2415 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %2404, i32 %2406, float %2414, float* nonnull %52, float* nonnull %53, float* nonnull %54) #17
  %2416 = icmp eq i32 %2406, %2415
  %2417 = load float, float* %52, align 4
  %2418 = fcmp oeq float %2417, 1.000000e+00
  %2419 = and i1 %2416, %2418
  %2420 = load float, float* %54, align 4
  %2421 = fcmp oeq float %2420, 0.000000e+00
  %2422 = and i1 %2419, %2421
  br i1 %2422, label %2423, label %2432

2423:                                             ; preds = %2408
  store i32 0, i32* %2405, align 8
  %2424 = bitcast %union.skcms_Curve* %2404 to %struct.anon*
  %2425 = getelementptr inbounds %struct.anon, %struct.anon* %2424, i64 0, i32 1, i32 0
  %2426 = bitcast float* %2425 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %2426, align 4
  %2427 = getelementptr inbounds %struct.anon, %struct.anon* %2424, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %2427, align 4
  %2428 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 4, i64 0, i32 1
  %2429 = bitcast [8 x i8]* %2428 to float*
  store float 0.000000e+00, float* %2429, align 4
  %2430 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 4, i64 0, i32 1, i64 4
  %2431 = bitcast i8* %2430 to float*
  store float 0.000000e+00, float* %2431, align 4
  br label %2432

2432:                                             ; preds = %2423, %2408
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2411) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2410) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2409) #17
  %2433 = load i32, i32* %2400, align 8
  br label %2434

2434:                                             ; preds = %2432, %2403
  %2435 = phi i32 [ %2433, %2432 ], [ %2401, %2403 ]
  %2436 = icmp ugt i32 %2435, 1
  br i1 %2436, label %2437, label %2501

2437:                                             ; preds = %2434
  %2438 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 4, i64 1
  %2439 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2438, i64 0, i32 0, i32 0
  %2440 = load i32, i32* %2439, align 8
  %2441 = icmp sgt i32 %2440, 0
  br i1 %2441, label %2442, label %2468

2442:                                             ; preds = %2437
  %2443 = bitcast float* %49 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2443) #17
  store float 0.000000e+00, float* %49, align 4
  %2444 = bitcast float* %50 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2444) #17
  store float 0.000000e+00, float* %50, align 4
  %2445 = bitcast float* %51 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2445) #17
  store float 0.000000e+00, float* %51, align 4
  %2446 = shl nsw i32 %2440, 1
  %2447 = sitofp i32 %2446 to float
  %2448 = fdiv float 1.000000e+00, %2447
  %2449 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %2438, i32 %2440, float %2448, float* nonnull %49, float* nonnull %50, float* nonnull %51) #17
  %2450 = icmp eq i32 %2440, %2449
  %2451 = load float, float* %49, align 4
  %2452 = fcmp oeq float %2451, 1.000000e+00
  %2453 = and i1 %2450, %2452
  %2454 = load float, float* %51, align 4
  %2455 = fcmp oeq float %2454, 0.000000e+00
  %2456 = and i1 %2453, %2455
  br i1 %2456, label %2457, label %2466

2457:                                             ; preds = %2442
  store i32 0, i32* %2439, align 8
  %2458 = bitcast %union.skcms_Curve* %2438 to %struct.anon*
  %2459 = getelementptr inbounds %struct.anon, %struct.anon* %2458, i64 0, i32 1, i32 0
  %2460 = bitcast float* %2459 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %2460, align 4
  %2461 = getelementptr inbounds %struct.anon, %struct.anon* %2458, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %2461, align 4
  %2462 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 4, i64 1, i32 1
  %2463 = bitcast [8 x i8]* %2462 to float*
  store float 0.000000e+00, float* %2463, align 4
  %2464 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 4, i64 1, i32 1, i64 4
  %2465 = bitcast i8* %2464 to float*
  store float 0.000000e+00, float* %2465, align 4
  br label %2466

2466:                                             ; preds = %2457, %2442
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2445) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2444) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2443) #17
  %2467 = load i32, i32* %2400, align 8
  br label %2468

2468:                                             ; preds = %2466, %2437
  %2469 = phi i32 [ %2467, %2466 ], [ %2435, %2437 ]
  %2470 = icmp ugt i32 %2469, 2
  br i1 %2470, label %2471, label %2501

2471:                                             ; preds = %2468
  %2472 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 4, i64 2
  %2473 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2472, i64 0, i32 0, i32 0
  %2474 = load i32, i32* %2473, align 8
  %2475 = icmp sgt i32 %2474, 0
  br i1 %2475, label %2476, label %2501

2476:                                             ; preds = %2471
  %2477 = bitcast float* %46 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2477) #17
  store float 0.000000e+00, float* %46, align 4
  %2478 = bitcast float* %47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2478) #17
  store float 0.000000e+00, float* %47, align 4
  %2479 = bitcast float* %48 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2479) #17
  store float 0.000000e+00, float* %48, align 4
  %2480 = shl nsw i32 %2474, 1
  %2481 = sitofp i32 %2480 to float
  %2482 = fdiv float 1.000000e+00, %2481
  %2483 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %2472, i32 %2474, float %2482, float* nonnull %46, float* nonnull %47, float* nonnull %48) #17
  %2484 = icmp eq i32 %2474, %2483
  %2485 = load float, float* %46, align 4
  %2486 = fcmp oeq float %2485, 1.000000e+00
  %2487 = and i1 %2484, %2486
  %2488 = load float, float* %48, align 4
  %2489 = fcmp oeq float %2488, 0.000000e+00
  %2490 = and i1 %2487, %2489
  br i1 %2490, label %2491, label %2500

2491:                                             ; preds = %2476
  store i32 0, i32* %2473, align 8
  %2492 = bitcast %union.skcms_Curve* %2472 to %struct.anon*
  %2493 = getelementptr inbounds %struct.anon, %struct.anon* %2492, i64 0, i32 1, i32 0
  %2494 = bitcast float* %2493 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %2494, align 4
  %2495 = getelementptr inbounds %struct.anon, %struct.anon* %2492, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %2495, align 4
  %2496 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 4, i64 2, i32 1
  %2497 = bitcast [8 x i8]* %2496 to float*
  store float 0.000000e+00, float* %2497, align 4
  %2498 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 4, i64 2, i32 1, i64 4
  %2499 = bitcast i8* %2498 to float*
  store float 0.000000e+00, float* %2499, align 4
  br label %2500

2500:                                             ; preds = %2491, %2476
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2479) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2478) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2477) #17
  br label %2501

2501:                                             ; preds = %2500, %2471, %2468, %2434, %2399
  %2502 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 5
  %2503 = load i32, i32* %2502, align 8
  %2504 = icmp eq i32 %2503, 0
  br i1 %2504, label %2673, label %2505

2505:                                             ; preds = %2501
  %2506 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 0
  %2507 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2506, i64 0, i32 0, i32 0
  %2508 = load i32, i32* %2507, align 8
  %2509 = icmp sgt i32 %2508, 0
  br i1 %2509, label %2510, label %2536

2510:                                             ; preds = %2505
  %2511 = bitcast float* %43 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2511) #17
  store float 0.000000e+00, float* %43, align 4
  %2512 = bitcast float* %44 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2512) #17
  store float 0.000000e+00, float* %44, align 4
  %2513 = bitcast float* %45 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2513) #17
  store float 0.000000e+00, float* %45, align 4
  %2514 = shl nsw i32 %2508, 1
  %2515 = sitofp i32 %2514 to float
  %2516 = fdiv float 1.000000e+00, %2515
  %2517 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %2506, i32 %2508, float %2516, float* nonnull %43, float* nonnull %44, float* nonnull %45) #17
  %2518 = icmp eq i32 %2508, %2517
  %2519 = load float, float* %43, align 4
  %2520 = fcmp oeq float %2519, 1.000000e+00
  %2521 = and i1 %2518, %2520
  %2522 = load float, float* %45, align 4
  %2523 = fcmp oeq float %2522, 0.000000e+00
  %2524 = and i1 %2521, %2523
  br i1 %2524, label %2525, label %2534

2525:                                             ; preds = %2510
  store i32 0, i32* %2507, align 8
  %2526 = bitcast %union.skcms_Curve* %2506 to %struct.anon*
  %2527 = getelementptr inbounds %struct.anon, %struct.anon* %2526, i64 0, i32 1, i32 0
  %2528 = bitcast float* %2527 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %2528, align 4
  %2529 = getelementptr inbounds %struct.anon, %struct.anon* %2526, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %2529, align 4
  %2530 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 0, i32 1
  %2531 = bitcast [8 x i8]* %2530 to float*
  store float 0.000000e+00, float* %2531, align 4
  %2532 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 0, i32 1, i64 4
  %2533 = bitcast i8* %2532 to float*
  store float 0.000000e+00, float* %2533, align 4
  br label %2534

2534:                                             ; preds = %2525, %2510
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2513) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2512) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2511) #17
  %2535 = load i32, i32* %2502, align 8
  br label %2536

2536:                                             ; preds = %2534, %2505
  %2537 = phi i32 [ %2535, %2534 ], [ %2503, %2505 ]
  %2538 = icmp ugt i32 %2537, 1
  br i1 %2538, label %2539, label %2673

2539:                                             ; preds = %2536
  %2540 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 1
  %2541 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2540, i64 0, i32 0, i32 0
  %2542 = load i32, i32* %2541, align 8
  %2543 = icmp sgt i32 %2542, 0
  br i1 %2543, label %2544, label %2570

2544:                                             ; preds = %2539
  %2545 = bitcast float* %40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2545) #17
  store float 0.000000e+00, float* %40, align 4
  %2546 = bitcast float* %41 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2546) #17
  store float 0.000000e+00, float* %41, align 4
  %2547 = bitcast float* %42 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2547) #17
  store float 0.000000e+00, float* %42, align 4
  %2548 = shl nsw i32 %2542, 1
  %2549 = sitofp i32 %2548 to float
  %2550 = fdiv float 1.000000e+00, %2549
  %2551 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %2540, i32 %2542, float %2550, float* nonnull %40, float* nonnull %41, float* nonnull %42) #17
  %2552 = icmp eq i32 %2542, %2551
  %2553 = load float, float* %40, align 4
  %2554 = fcmp oeq float %2553, 1.000000e+00
  %2555 = and i1 %2552, %2554
  %2556 = load float, float* %42, align 4
  %2557 = fcmp oeq float %2556, 0.000000e+00
  %2558 = and i1 %2555, %2557
  br i1 %2558, label %2559, label %2568

2559:                                             ; preds = %2544
  store i32 0, i32* %2541, align 8
  %2560 = bitcast %union.skcms_Curve* %2540 to %struct.anon*
  %2561 = getelementptr inbounds %struct.anon, %struct.anon* %2560, i64 0, i32 1, i32 0
  %2562 = bitcast float* %2561 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %2562, align 4
  %2563 = getelementptr inbounds %struct.anon, %struct.anon* %2560, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %2563, align 4
  %2564 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 1, i32 1
  %2565 = bitcast [8 x i8]* %2564 to float*
  store float 0.000000e+00, float* %2565, align 4
  %2566 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 1, i32 1, i64 4
  %2567 = bitcast i8* %2566 to float*
  store float 0.000000e+00, float* %2567, align 4
  br label %2568

2568:                                             ; preds = %2559, %2544
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2547) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2546) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2545) #17
  %2569 = load i32, i32* %2502, align 8
  br label %2570

2570:                                             ; preds = %2568, %2539
  %2571 = phi i32 [ %2569, %2568 ], [ %2537, %2539 ]
  %2572 = icmp ugt i32 %2571, 2
  br i1 %2572, label %2573, label %2673

2573:                                             ; preds = %2570
  %2574 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 2
  %2575 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2574, i64 0, i32 0, i32 0
  %2576 = load i32, i32* %2575, align 8
  %2577 = icmp sgt i32 %2576, 0
  br i1 %2577, label %2578, label %2604

2578:                                             ; preds = %2573
  %2579 = bitcast float* %67 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2579) #17
  store float 0.000000e+00, float* %67, align 4
  %2580 = bitcast float* %68 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2580) #17
  store float 0.000000e+00, float* %68, align 4
  %2581 = bitcast float* %69 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2581) #17
  store float 0.000000e+00, float* %69, align 4
  %2582 = shl nsw i32 %2576, 1
  %2583 = sitofp i32 %2582 to float
  %2584 = fdiv float 1.000000e+00, %2583
  %2585 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %2574, i32 %2576, float %2584, float* nonnull %67, float* nonnull %68, float* nonnull %69) #17
  %2586 = icmp eq i32 %2576, %2585
  %2587 = load float, float* %67, align 4
  %2588 = fcmp oeq float %2587, 1.000000e+00
  %2589 = and i1 %2586, %2588
  %2590 = load float, float* %69, align 4
  %2591 = fcmp oeq float %2590, 0.000000e+00
  %2592 = and i1 %2589, %2591
  br i1 %2592, label %2593, label %2602

2593:                                             ; preds = %2578
  store i32 0, i32* %2575, align 8
  %2594 = bitcast %union.skcms_Curve* %2574 to %struct.anon*
  %2595 = getelementptr inbounds %struct.anon, %struct.anon* %2594, i64 0, i32 1, i32 0
  %2596 = bitcast float* %2595 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %2596, align 4
  %2597 = getelementptr inbounds %struct.anon, %struct.anon* %2594, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %2597, align 4
  %2598 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 2, i32 1
  %2599 = bitcast [8 x i8]* %2598 to float*
  store float 0.000000e+00, float* %2599, align 4
  %2600 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 2, i32 1, i64 4
  %2601 = bitcast i8* %2600 to float*
  store float 0.000000e+00, float* %2601, align 4
  br label %2602

2602:                                             ; preds = %2593, %2578
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2581) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2580) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2579) #17
  %2603 = load i32, i32* %2502, align 8
  br label %2604

2604:                                             ; preds = %2602, %2573
  %2605 = phi i32 [ %2603, %2602 ], [ %2571, %2573 ]
  %2606 = icmp ugt i32 %2605, 3
  br i1 %2606, label %2607, label %2673

2607:                                             ; preds = %2604
  %2608 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 3
  %2609 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2608, i64 0, i32 0, i32 0
  %2610 = load i32, i32* %2609, align 8
  %2611 = icmp sgt i32 %2610, 0
  br i1 %2611, label %2612, label %2673

2612:                                             ; preds = %2607
  %2613 = bitcast float* %70 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2613) #17
  store float 0.000000e+00, float* %70, align 4
  %2614 = bitcast float* %71 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2614) #17
  store float 0.000000e+00, float* %71, align 4
  %2615 = bitcast float* %72 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2615) #17
  store float 0.000000e+00, float* %72, align 4
  %2616 = shl nsw i32 %2610, 1
  %2617 = sitofp i32 %2616 to float
  %2618 = fdiv float 1.000000e+00, %2617
  %2619 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* %2608, i32 %2610, float %2618, float* nonnull %70, float* nonnull %71, float* nonnull %72) #17
  %2620 = icmp eq i32 %2610, %2619
  %2621 = load float, float* %70, align 4
  %2622 = fcmp oeq float %2621, 1.000000e+00
  %2623 = and i1 %2620, %2622
  %2624 = load float, float* %72, align 4
  %2625 = fcmp oeq float %2624, 0.000000e+00
  %2626 = and i1 %2623, %2625
  br i1 %2626, label %2627, label %2636

2627:                                             ; preds = %2612
  store i32 0, i32* %2609, align 8
  %2628 = bitcast %union.skcms_Curve* %2608 to %struct.anon*
  %2629 = getelementptr inbounds %struct.anon, %struct.anon* %2628, i64 0, i32 1, i32 0
  %2630 = bitcast float* %2629 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %2630, align 4
  %2631 = getelementptr inbounds %struct.anon, %struct.anon* %2628, i64 0, i32 1, i32 4
  store float 0.000000e+00, float* %2631, align 4
  %2632 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 3, i32 1
  %2633 = bitcast [8 x i8]* %2632 to float*
  store float 0.000000e+00, float* %2633, align 4
  %2634 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 9, i64 3, i32 1, i64 4
  %2635 = bitcast i8* %2634 to float*
  store float 0.000000e+00, float* %2635, align 4
  br label %2636

2636:                                             ; preds = %2627, %2612
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2615) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2614) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2613) #17
  br label %2673

2637:                                             ; preds = %2069
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2051) #17
  store i32 -1431655766, i32* %64, align 4
  %2638 = and i64 %2066, 4294967295
  %2639 = getelementptr inbounds i8, i8* %1793, i64 %2638
  %2640 = sub i32 %1787, %2070
  %2641 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 1
  %2642 = call fastcc zeroext i1 @_ZL10read_curvePKhjP11skcms_CurvePj(i8* %2639, i32 %2640, %union.skcms_Curve* %2641, i32* nonnull %64) #17
  br i1 %2642, label %2643, label %2068

2643:                                             ; preds = %2637
  %2644 = load i32, i32* %64, align 4
  %2645 = icmp ugt i32 %2644, -4
  br i1 %2645, label %2068, label %2646

2646:                                             ; preds = %2643
  %2647 = add nuw i32 %2644, 3
  %2648 = and i32 %2647, -4
  store i32 %2648, i32* %64, align 4
  %2649 = zext i32 %2648 to i64
  %2650 = add nuw nsw i64 %2638, %2649
  %2651 = icmp ugt i64 %2650, 4294967295
  br i1 %2651, label %2068, label %2652

2652:                                             ; preds = %2646
  %2653 = trunc i64 %2650 to i32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2051) #17
  %2654 = icmp ult i32 %1787, %2653
  br i1 %2654, label %2690, label %2655

2655:                                             ; preds = %2652
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2051) #17
  store i32 -1431655766, i32* %64, align 4
  %2656 = and i64 %2650, 4294967295
  %2657 = getelementptr inbounds i8, i8* %1793, i64 %2656
  %2658 = sub i32 %1787, %2653
  %2659 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 12, i32 1, i64 2
  %2660 = call fastcc zeroext i1 @_ZL10read_curvePKhjP11skcms_CurvePj(i8* %2657, i32 %2658, %union.skcms_Curve* %2659, i32* nonnull %64) #17
  br i1 %2660, label %2661, label %2068

2661:                                             ; preds = %2655
  %2662 = load i32, i32* %64, align 4
  %2663 = icmp ugt i32 %2662, -4
  br i1 %2663, label %2068, label %2664

2664:                                             ; preds = %2661
  %2665 = add nuw i32 %2662, 3
  %2666 = and i32 %2665, -4
  store i32 %2666, i32* %64, align 4
  %2667 = zext i32 %2666 to i64
  %2668 = add nuw nsw i64 %2656, %2667
  %2669 = icmp ugt i64 %2668, 4294967295
  br i1 %2669, label %2068, label %2670

2670:                                             ; preds = %2664
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2051) #17
  %2671 = icmp eq i32 %2038, 0
  %2672 = icmp eq i32 %2034, 0
  br i1 %2671, label %2207, label %2072

2673:                                             ; preds = %2501, %2536, %2570, %2604, %2607, %2636
  %2674 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 11
  store i8 1, i8* %2674, align 8
  br label %2678

2675:                                             ; preds = %1771, %1760, %1764
  %2676 = add nuw nsw i64 %1756, 1
  %2677 = icmp eq i64 %2676, %1754
  br i1 %2677, label %2678, label %1755

2678:                                             ; preds = %2675, %449, %1752, %2673
  %2679 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 9
  %2680 = load i8, i8* %2679, align 8, !range !22
  %2681 = icmp eq i8 %2680, 0
  br i1 %2681, label %2682, label %2690

2682:                                             ; preds = %2678
  %2683 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 5
  %2684 = load i8, i8* %2683, align 8, !range !22
  %2685 = icmp eq i8 %2684, 0
  br i1 %2685, label %2690, label %2686

2686:                                             ; preds = %2682
  %2687 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 7
  %2688 = load i8, i8* %2687, align 8, !range !22
  %2689 = icmp ne i8 %2688, 0
  br label %2690

2690:                                             ; preds = %164, %157, %453, %1154, %1294, %1345, %1755, %2080, %2220, %2271, %401, %376, %359, %780, %778, %496, %498, %1123, %1143, %1726, %1323, %1357, %1142, %1313, %1173, %1362, %1361, %1318, %1287, %1281, %1178, %1146, %1102, %1090, %1088, %1367, %1931, %1917, %1908, %1893, %1891, %1798, %1800, %1815, %1824, %190, %271, %285, %288, %2293, %2013, %2015, %2028, %2072, %2104, %2207, %2213, %2244, %2287, %2288, %2099, %2239, %2068, %2283, %2249, %2652, %2069, %2049, %2678, %2682, %2686, %76, %123, %145, %139, %133, %174, %74, %5
  %2691 = phi i1 [ false, %5 ], [ false, %74 ], [ false, %76 ], [ false, %123 ], [ false, %145 ], [ false, %139 ], [ false, %133 ], [ false, %174 ], [ false, %190 ], [ false, %271 ], [ false, %285 ], [ false, %288 ], [ false, %2293 ], [ false, %2013 ], [ false, %2015 ], [ false, %2028 ], [ false, %2072 ], [ false, %2104 ], [ false, %2207 ], [ false, %2213 ], [ false, %2244 ], [ false, %2287 ], [ false, %2288 ], [ false, %2099 ], [ false, %2239 ], [ false, %2068 ], [ false, %2283 ], [ false, %2249 ], [ false, %2652 ], [ false, %2069 ], [ false, %2049 ], [ true, %2678 ], [ false, %2682 ], [ %2689, %2686 ], [ false, %401 ], [ false, %359 ], [ false, %376 ], [ false, %1824 ], [ false, %1815 ], [ false, %1800 ], [ false, %1798 ], [ false, %1891 ], [ false, %1893 ], [ false, %1908 ], [ false, %1917 ], [ false, %1931 ], [ false, %1367 ], [ false, %1088 ], [ false, %1090 ], [ false, %1102 ], [ false, %1146 ], [ false, %1178 ], [ false, %1281 ], [ false, %1287 ], [ false, %1318 ], [ false, %1361 ], [ false, %1362 ], [ false, %1173 ], [ false, %1313 ], [ false, %1142 ], [ false, %1357 ], [ false, %1323 ], [ false, %1726 ], [ false, %1143 ], [ false, %1123 ], [ false, %498 ], [ false, %496 ], [ false, %778 ], [ false, %780 ], [ false, %2271 ], [ false, %2220 ], [ false, %2080 ], [ false, %1755 ], [ false, %1345 ], [ false, %1294 ], [ false, %1154 ], [ false, %453 ], [ false, %157 ], [ false, %164 ]
  ret i1 %2691
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZL10read_curvePKhjP11skcms_CurvePj(i8*, i32, %union.skcms_Curve*, i32*) unnamed_addr #5 {
  %5 = icmp ne i8* %0, null
  %6 = icmp ugt i32 %1, 3
  %7 = and i1 %5, %6
  %8 = icmp ne %union.skcms_Curve* %2, null
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %235

10:                                               ; preds = %4
  %11 = bitcast i8* %0 to i32*
  %12 = load i32, i32* %11, align 1
  %13 = tail call i32 @llvm.bswap.i32(i32 %12) #17
  switch i32 %13, label %235 [
    i32 1885434465, label %14
    i32 1668641398, label %191
  ]

14:                                               ; preds = %10
  %15 = zext i32 %1 to i64
  %16 = icmp ult i32 %1, 12
  br i1 %16, label %235, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds i8, i8* %0, i64 8
  %19 = bitcast i8* %18 to i16*
  %20 = load i16, i16* %19, align 1
  %21 = tail call i16 @llvm.bswap.i16(i16 %20) #17
  %22 = icmp ugt i16 %21, 4
  br i1 %22, label %235, label %23

23:                                               ; preds = %17
  %24 = zext i16 %21 to i64
  %25 = getelementptr inbounds [5 x i32], [5 x i32]* @_ZZL15read_curve_paraPKhjP11skcms_CurvePjE11curve_bytes, i64 0, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = add nuw nsw i64 %27, 12
  %29 = icmp ugt i64 %28, %15
  br i1 %29, label %235, label %30

30:                                               ; preds = %23
  %31 = icmp eq i32* %3, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %30
  %33 = trunc i64 %28 to i32
  store i32 %33, i32* %3, align 4
  br label %34

34:                                               ; preds = %32, %30
  %35 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2, i64 0, i32 0, i32 0
  store i32 0, i32* %35, align 8
  %36 = bitcast %union.skcms_Curve* %2 to %struct.anon*
  %37 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2, i64 0, i32 0, i32 1
  %38 = bitcast i8** %37 to float*
  %39 = getelementptr inbounds %struct.anon, %struct.anon* %36, i64 0, i32 1, i32 2
  %40 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2, i64 0, i32 0, i32 2
  %41 = bitcast i8** %40 to float*
  %42 = getelementptr inbounds %struct.anon, %struct.anon* %36, i64 0, i32 1, i32 4
  %43 = bitcast i8** %37 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %43, align 4
  %44 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2, i64 0, i32 1
  %45 = bitcast [8 x i8]* %44 to float*
  store float 0.000000e+00, float* %45, align 4
  %46 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2, i64 0, i32 1, i64 4
  %47 = bitcast i8* %46 to float*
  store float 0.000000e+00, float* %47, align 4
  %48 = getelementptr inbounds i8, i8* %0, i64 12
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = tail call i32 @llvm.bswap.i32(i32 %50) #17
  %52 = sitofp i32 %51 to float
  %53 = fmul float %52, 0x3EF0000000000000
  %54 = getelementptr inbounds %struct.anon, %struct.anon* %36, i64 0, i32 1, i32 0
  store float %53, float* %54, align 4
  switch i16 %21, label %157 [
    i16 1, label %55
    i16 2, label %72
    i16 3, label %95
    i16 4, label %120
  ]

55:                                               ; preds = %34
  %56 = getelementptr inbounds i8, i8* %0, i64 16
  %57 = bitcast i8* %56 to i32*
  %58 = load i32, i32* %57, align 1
  %59 = tail call i32 @llvm.bswap.i32(i32 %58) #17
  %60 = sitofp i32 %59 to float
  %61 = fmul float %60, 0x3EF0000000000000
  store float %61, float* %38, align 4
  %62 = getelementptr inbounds i8, i8* %0, i64 20
  %63 = bitcast i8* %62 to i32*
  %64 = load i32, i32* %63, align 1
  %65 = tail call i32 @llvm.bswap.i32(i32 %64) #17
  %66 = sitofp i32 %65 to float
  %67 = fmul float %66, 0x3EF0000000000000
  store float %67, float* %39, align 4
  %68 = fcmp oeq float %61, 0.000000e+00
  br i1 %68, label %235, label %69

69:                                               ; preds = %55
  %70 = fsub float -0.000000e+00, %67
  %71 = fdiv float %70, %61
  store float %71, float* %42, align 4
  br label %157

72:                                               ; preds = %34
  %73 = getelementptr inbounds i8, i8* %0, i64 16
  %74 = bitcast i8* %73 to i32*
  %75 = load i32, i32* %74, align 1
  %76 = tail call i32 @llvm.bswap.i32(i32 %75) #17
  %77 = sitofp i32 %76 to float
  %78 = fmul float %77, 0x3EF0000000000000
  store float %78, float* %38, align 4
  %79 = getelementptr inbounds i8, i8* %0, i64 20
  %80 = bitcast i8* %79 to i32*
  %81 = load i32, i32* %80, align 1
  %82 = tail call i32 @llvm.bswap.i32(i32 %81) #17
  %83 = sitofp i32 %82 to float
  %84 = fmul float %83, 0x3EF0000000000000
  store float %84, float* %39, align 4
  %85 = getelementptr inbounds i8, i8* %0, i64 24
  %86 = bitcast i8* %85 to i32*
  %87 = load i32, i32* %86, align 1
  %88 = tail call i32 @llvm.bswap.i32(i32 %87) #17
  %89 = sitofp i32 %88 to float
  %90 = fmul float %89, 0x3EF0000000000000
  store float %90, float* %45, align 4
  %91 = fcmp oeq float %78, 0.000000e+00
  br i1 %91, label %235, label %92

92:                                               ; preds = %72
  %93 = fsub float -0.000000e+00, %84
  %94 = fdiv float %93, %78
  store float %94, float* %42, align 4
  store float %90, float* %47, align 4
  br label %157

95:                                               ; preds = %34
  %96 = getelementptr inbounds i8, i8* %0, i64 16
  %97 = bitcast i8* %96 to i32*
  %98 = load i32, i32* %97, align 1
  %99 = tail call i32 @llvm.bswap.i32(i32 %98) #17
  %100 = sitofp i32 %99 to float
  %101 = fmul float %100, 0x3EF0000000000000
  store float %101, float* %38, align 4
  %102 = getelementptr inbounds i8, i8* %0, i64 20
  %103 = bitcast i8* %102 to i32*
  %104 = load i32, i32* %103, align 1
  %105 = tail call i32 @llvm.bswap.i32(i32 %104) #17
  %106 = sitofp i32 %105 to float
  %107 = fmul float %106, 0x3EF0000000000000
  store float %107, float* %39, align 4
  %108 = getelementptr inbounds i8, i8* %0, i64 24
  %109 = bitcast i8* %108 to i32*
  %110 = load i32, i32* %109, align 1
  %111 = tail call i32 @llvm.bswap.i32(i32 %110) #17
  %112 = sitofp i32 %111 to float
  %113 = fmul float %112, 0x3EF0000000000000
  store float %113, float* %41, align 4
  %114 = getelementptr inbounds i8, i8* %0, i64 28
  %115 = bitcast i8* %114 to i32*
  %116 = load i32, i32* %115, align 1
  %117 = tail call i32 @llvm.bswap.i32(i32 %116) #17
  %118 = sitofp i32 %117 to float
  %119 = fmul float %118, 0x3EF0000000000000
  store float %119, float* %42, align 4
  br label %157

120:                                              ; preds = %34
  %121 = getelementptr inbounds i8, i8* %0, i64 16
  %122 = bitcast i8* %121 to i32*
  %123 = load i32, i32* %122, align 1
  %124 = tail call i32 @llvm.bswap.i32(i32 %123) #17
  %125 = sitofp i32 %124 to float
  %126 = fmul float %125, 0x3EF0000000000000
  store float %126, float* %38, align 4
  %127 = getelementptr inbounds i8, i8* %0, i64 20
  %128 = bitcast i8* %127 to i32*
  %129 = load i32, i32* %128, align 1
  %130 = tail call i32 @llvm.bswap.i32(i32 %129) #17
  %131 = sitofp i32 %130 to float
  %132 = fmul float %131, 0x3EF0000000000000
  store float %132, float* %39, align 4
  %133 = getelementptr inbounds i8, i8* %0, i64 24
  %134 = bitcast i8* %133 to i32*
  %135 = load i32, i32* %134, align 1
  %136 = tail call i32 @llvm.bswap.i32(i32 %135) #17
  %137 = sitofp i32 %136 to float
  %138 = fmul float %137, 0x3EF0000000000000
  store float %138, float* %41, align 4
  %139 = getelementptr inbounds i8, i8* %0, i64 28
  %140 = bitcast i8* %139 to i32*
  %141 = load i32, i32* %140, align 1
  %142 = tail call i32 @llvm.bswap.i32(i32 %141) #17
  %143 = sitofp i32 %142 to float
  %144 = fmul float %143, 0x3EF0000000000000
  store float %144, float* %42, align 4
  %145 = getelementptr inbounds i8, i8* %0, i64 32
  %146 = bitcast i8* %145 to i32*
  %147 = load i32, i32* %146, align 1
  %148 = tail call i32 @llvm.bswap.i32(i32 %147) #17
  %149 = sitofp i32 %148 to float
  %150 = fmul float %149, 0x3EF0000000000000
  store float %150, float* %45, align 4
  %151 = getelementptr inbounds i8, i8* %0, i64 36
  %152 = bitcast i8* %151 to i32*
  %153 = load i32, i32* %152, align 1
  %154 = tail call i32 @llvm.bswap.i32(i32 %153) #17
  %155 = sitofp i32 %154 to float
  %156 = fmul float %155, 0x3EF0000000000000
  store float %156, float* %47, align 4
  br label %157

157:                                              ; preds = %120, %95, %92, %69, %34
  %158 = phi float [ 0.000000e+00, %34 ], [ %156, %120 ], [ 0.000000e+00, %95 ], [ %90, %92 ], [ 0.000000e+00, %69 ]
  %159 = phi float [ 0.000000e+00, %34 ], [ %150, %120 ], [ 0.000000e+00, %95 ], [ %90, %92 ], [ 0.000000e+00, %69 ]
  %160 = phi float [ 0.000000e+00, %34 ], [ %144, %120 ], [ %119, %95 ], [ %94, %92 ], [ %71, %69 ]
  %161 = phi float [ 0.000000e+00, %34 ], [ %138, %120 ], [ %113, %95 ], [ 0.000000e+00, %92 ], [ 0.000000e+00, %69 ]
  %162 = phi float [ 0.000000e+00, %34 ], [ %132, %120 ], [ %107, %95 ], [ %84, %92 ], [ %67, %69 ]
  %163 = phi float [ 1.000000e+00, %34 ], [ %126, %120 ], [ %101, %95 ], [ %78, %92 ], [ %61, %69 ]
  %164 = fcmp olt float %53, 0.000000e+00
  br i1 %164, label %165, label %169

165:                                              ; preds = %157
  %166 = fptosi float %53 to i32
  %167 = sitofp i32 %166 to float
  %168 = fcmp oeq float %53, %167
  br i1 %168, label %235, label %169

169:                                              ; preds = %165, %157
  %170 = fadd float %162, %163
  %171 = fadd float %161, %170
  %172 = fadd float %160, %171
  %173 = fadd float %159, %172
  %174 = fadd float %158, %173
  %175 = fadd float %53, %174
  %176 = fmul float %175, 0.000000e+00
  %177 = fcmp oeq float %176, 0.000000e+00
  br i1 %177, label %178, label %190

178:                                              ; preds = %169
  %179 = fcmp ult float %163, 0.000000e+00
  %180 = fcmp ult float %161, 0.000000e+00
  %181 = or i1 %180, %179
  br i1 %181, label %190, label %182

182:                                              ; preds = %178
  %183 = fcmp ult float %160, 0.000000e+00
  %184 = fcmp ult float %53, 0.000000e+00
  %185 = or i1 %184, %183
  br i1 %185, label %190, label %186

186:                                              ; preds = %182
  %187 = fmul float %160, %163
  %188 = fadd float %162, %187
  %189 = fcmp ult float %188, 0.000000e+00
  br i1 %189, label %190, label %235

190:                                              ; preds = %186, %182, %178, %169
  br label %235

191:                                              ; preds = %10
  %192 = icmp ult i32 %1, 12
  br i1 %192, label %235, label %193

193:                                              ; preds = %191
  %194 = zext i32 %1 to i64
  %195 = getelementptr inbounds i8, i8* %0, i64 8
  %196 = bitcast i8* %195 to i32*
  %197 = load i32, i32* %196, align 1
  %198 = tail call i32 @llvm.bswap.i32(i32 %197) #17
  %199 = zext i32 %198 to i64
  %200 = shl nuw nsw i64 %199, 1
  %201 = add nuw nsw i64 %200, 12
  %202 = icmp ugt i64 %201, %194
  br i1 %202, label %235, label %203

203:                                              ; preds = %193
  %204 = icmp eq i32* %3, null
  br i1 %204, label %207, label %205

205:                                              ; preds = %203
  %206 = trunc i64 %201 to i32
  store i32 %206, i32* %3, align 4
  br label %207

207:                                              ; preds = %205, %203
  %208 = icmp ult i32 %198, 2
  br i1 %208, label %209, label %230

209:                                              ; preds = %207
  %210 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2, i64 0, i32 0, i32 0
  store i32 0, i32* %210, align 8
  %211 = bitcast %union.skcms_Curve* %2 to %struct.anon*
  %212 = getelementptr inbounds %struct.anon, %struct.anon* %211, i64 0, i32 1
  %213 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2, i64 0, i32 0, i32 1
  %214 = bitcast i8** %213 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %214, align 4
  %215 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2, i64 0, i32 1
  %216 = bitcast [8 x i8]* %215 to float*
  store float 0.000000e+00, float* %216, align 4
  %217 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2, i64 0, i32 1, i64 4
  %218 = bitcast i8* %217 to float*
  store float 0.000000e+00, float* %218, align 4
  %219 = icmp eq i32 %197, 0
  br i1 %219, label %220, label %222

220:                                              ; preds = %209
  %221 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %212, i64 0, i32 0
  store float 1.000000e+00, float* %221, align 4
  br label %235

222:                                              ; preds = %209
  %223 = getelementptr inbounds i8, i8* %0, i64 12
  %224 = bitcast i8* %223 to i16*
  %225 = load i16, i16* %224, align 1
  %226 = tail call i16 @llvm.bswap.i16(i16 %225) #17
  %227 = uitofp i16 %226 to float
  %228 = fmul float %227, 3.906250e-03
  %229 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %212, i64 0, i32 0
  store float %228, float* %229, align 4
  br label %235

230:                                              ; preds = %207
  %231 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2, i64 0, i32 0, i32 1
  store i8* null, i8** %231, align 8
  %232 = getelementptr inbounds i8, i8* %0, i64 12
  %233 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2, i64 0, i32 0, i32 2
  store i8* %232, i8** %233, align 8
  %234 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2, i64 0, i32 0, i32 0
  store i32 %198, i32* %234, align 8
  br label %235

235:                                              ; preds = %230, %222, %220, %193, %191, %190, %186, %165, %72, %55, %23, %17, %14, %10, %4
  %236 = phi i1 [ false, %4 ], [ false, %10 ], [ false, %14 ], [ false, %17 ], [ false, %23 ], [ false, %55 ], [ false, %72 ], [ false, %190 ], [ true, %186 ], [ false, %165 ], [ false, %191 ], [ false, %193 ], [ true, %220 ], [ true, %222 ], [ true, %230 ]
  ret i1 %236
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.skcms_ICCProfile* @skcms_sRGB_profile() local_unnamed_addr #1 {
  ret %struct.skcms_ICCProfile* bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }* @_ZZ18skcms_sRGB_profileE12sRGB_profile to %struct.skcms_ICCProfile*)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.skcms_ICCProfile* @skcms_XYZD50_profile() local_unnamed_addr #1 {
  ret %struct.skcms_ICCProfile* bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }* @_ZZ20skcms_XYZD50_profileE14XYZD50_profile to %struct.skcms_ICCProfile*)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.skcms_TransferFunction* @skcms_sRGB_TransferFunction() local_unnamed_addr #1 {
  ret %struct.skcms_TransferFunction* getelementptr inbounds ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }, { i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }* @_ZZ18skcms_sRGB_profileE12sRGB_profile, i64 0, i32 7, i64 0, i32 0, i32 1)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.skcms_TransferFunction* @skcms_sRGB_Inverse_TransferFunction() local_unnamed_addr #1 {
  ret %struct.skcms_TransferFunction* @_ZZ35skcms_sRGB_Inverse_TransferFunctionE8sRGB_inv
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.skcms_TransferFunction* @skcms_Identity_TransferFunction() local_unnamed_addr #1 {
  ret %struct.skcms_TransferFunction* @_ZZ31skcms_Identity_TransferFunctionE8identity
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @skcms_ApproximatelyEqualProfiles(%struct.skcms_ICCProfile*, %struct.skcms_ICCProfile*) local_unnamed_addr #4 {
  %3 = alloca [252 x i8], align 16
  %4 = alloca [252 x i8], align 16
  %5 = icmp eq %struct.skcms_ICCProfile* %0, %1
  br i1 %5, label %56, label %6

6:                                                ; preds = %2
  %7 = bitcast %struct.skcms_ICCProfile* %0 to i8*
  %8 = bitcast %struct.skcms_ICCProfile* %1 to i8*
  %9 = tail call i32 @bcmp(i8* %7, i8* %8, i64 1008)
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %56, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 1129142603
  %15 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %1, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 1129142603
  %18 = xor i1 %14, %17
  br i1 %18, label %56, label %19

19:                                               ; preds = %11
  %20 = select i1 %14, i32 12, i32 10
  %21 = select i1 %14, i64 63, i64 84
  %22 = getelementptr inbounds [252 x i8], [252 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 252, i8* nonnull %22) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 252, i1 false)
  %23 = getelementptr inbounds [252 x i8], [252 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 252, i8* nonnull %23) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 252, i1 false)
  %24 = call zeroext i1 @skcms_TransformWithPalette(i8* getelementptr inbounds ([252 x i8], [252 x i8]* @skcms_252_random_bytes, i64 0, i64 0), i32 %20, i32 1, %struct.skcms_ICCProfile* %0, i8* nonnull %22, i32 10, i32 1, %struct.skcms_ICCProfile* bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }* @_ZZ20skcms_XYZD50_profileE14XYZD50_profile to %struct.skcms_ICCProfile*), i64 %21, i8* null) #17
  br i1 %24, label %25, label %54

25:                                               ; preds = %19
  %26 = call zeroext i1 @skcms_TransformWithPalette(i8* getelementptr inbounds ([252 x i8], [252 x i8]* @skcms_252_random_bytes, i64 0, i64 0), i32 %20, i32 1, %struct.skcms_ICCProfile* %1, i8* nonnull %23, i32 10, i32 1, %struct.skcms_ICCProfile* bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }* @_ZZ20skcms_XYZD50_profileE14XYZD50_profile to %struct.skcms_ICCProfile*), i64 %21, i8* null) #17
  br i1 %26, label %40, label %54

27:                                               ; preds = %40
  %28 = getelementptr inbounds [252 x i8], [252 x i8]* %3, i64 0, i64 %53
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = getelementptr inbounds [252 x i8], [252 x i8]* %4, i64 0, i64 %53
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = sub nsw i32 %30, %33
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = icmp sgt i32 %37, 1
  %39 = add nuw nsw i64 %41, 2
  br i1 %38, label %54, label %58

40:                                               ; preds = %25, %58
  %41 = phi i64 [ %39, %58 ], [ 0, %25 ]
  %42 = getelementptr inbounds [252 x i8], [252 x i8]* %3, i64 0, i64 %41
  %43 = load i8, i8* %42, align 2
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds [252 x i8], [252 x i8]* %4, i64 0, i64 %41
  %46 = load i8, i8* %45, align 2
  %47 = zext i8 %46 to i32
  %48 = sub nsw i32 %44, %47
  %49 = icmp slt i32 %48, 0
  %50 = sub nsw i32 0, %48
  %51 = select i1 %49, i32 %50, i32 %48
  %52 = icmp sgt i32 %51, 1
  %53 = or i64 %41, 1
  br i1 %52, label %54, label %27

54:                                               ; preds = %40, %27, %58, %25, %19
  %55 = phi i1 [ false, %19 ], [ false, %25 ], [ false, %40 ], [ false, %27 ], [ true, %58 ]
  call void @llvm.lifetime.end.p0i8(i64 252, i8* nonnull %23) #17
  call void @llvm.lifetime.end.p0i8(i64 252, i8* nonnull %22) #17
  br label %56

56:                                               ; preds = %54, %11, %2, %6
  %57 = phi i1 [ true, %6 ], [ true, %2 ], [ %55, %54 ], [ false, %11 ]
  ret i1 %57

58:                                               ; preds = %27
  %59 = icmp eq i64 %39, 252
  br i1 %59, label %54, label %40
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @skcms_Transform(i8*, i32, i32, %struct.skcms_ICCProfile*, i8*, i32, i32, %struct.skcms_ICCProfile*, i64) local_unnamed_addr #4 {
  %10 = tail call zeroext i1 @skcms_TransformWithPalette(i8* %0, i32 %1, i32 %2, %struct.skcms_ICCProfile* %3, i8* %4, i32 %5, i32 %6, %struct.skcms_ICCProfile* %7, i64 %8, i8* null)
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @skcms_TRCs_AreApproximateInverse(%struct.skcms_ICCProfile* readonly, %struct.skcms_TransferFunction* nocapture readonly) local_unnamed_addr #4 {
  %3 = icmp eq %struct.skcms_ICCProfile* %0, null
  br i1 %3, label %20, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 5
  %6 = load i8, i8* %5, align 8, !range !22
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 6, i64 0
  %10 = tail call float @skcms_MaxRoundtripError(%union.skcms_Curve* %9, %struct.skcms_TransferFunction* %1) #17
  %11 = fcmp olt float %10, 0x3F60000000000000
  br i1 %11, label %12, label %20

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 6, i64 1
  %14 = tail call float @skcms_MaxRoundtripError(%union.skcms_Curve* %13, %struct.skcms_TransferFunction* %1) #17
  %15 = fcmp olt float %14, 0x3F60000000000000
  br i1 %15, label %16, label %20

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 6, i64 2
  %18 = tail call float @skcms_MaxRoundtripError(%union.skcms_Curve* %17, %struct.skcms_TransferFunction* %1) #17
  %19 = fcmp olt float %18, 0x3F60000000000000
  br label %20

20:                                               ; preds = %8, %12, %16, %2, %4
  %21 = phi i1 [ false, %4 ], [ false, %2 ], [ false, %12 ], [ false, %8 ], [ %19, %16 ]
  ret i1 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @skcms_AdaptToXYZD50(float, float, %struct.skcms_Matrix3x3*) local_unnamed_addr #4 {
  %4 = fcmp oge float %0, 0.000000e+00
  %5 = fcmp ole float %0, 1.000000e+00
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %100

7:                                                ; preds = %3
  %8 = fcmp oge float %1, 0.000000e+00
  %9 = fcmp ole float %1, 1.000000e+00
  %10 = and i1 %8, %9
  %11 = icmp ne %struct.skcms_Matrix3x3* %2, null
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %100

13:                                               ; preds = %7
  %14 = fdiv float %0, %1
  %15 = fsub float 1.000000e+00, %0
  %16 = fsub float %15, %1
  %17 = fdiv float %16, %1
  %18 = insertelement <2 x float> undef, float %14, i32 0
  %19 = shufflevector <2 x float> %18, <2 x float> undef, <2 x i32> zeroinitializer
  %20 = fmul <2 x float> %19, <float 0x3FECA4A8C0000000, float 0x3FE801A360000000>
  %21 = fadd <2 x float> %20, <float 0x3FD10CB2A0000000, float undef>
  %22 = fsub <2 x float> <float undef, float 0x3FFB6A7F00000000>, %20
  %23 = shufflevector <2 x float> %21, <2 x float> %22, <2 x i32> <i32 0, i32 3>
  %24 = insertelement <2 x float> undef, float %17, i32 0
  %25 = shufflevector <2 x float> %24, <2 x float> undef, <2 x i32> zeroinitializer
  %26 = fmul <2 x float> %25, <float 0x3FC4A8C160000000, float 0x3FA2CA57A0000000>
  %27 = fsub <2 x float> %23, %26
  %28 = fadd <2 x float> %23, %26
  %29 = shufflevector <2 x float> %27, <2 x float> %28, <2 x i32> <i32 0, i32 3>
  %30 = fmul float %14, 0x3FA3EAB360000000
  %31 = fadd float %30, 0xBFB1893740000000
  %32 = fmul float %17, 0x3FF0793DE0000000
  %33 = fadd float %31, %32
  %34 = fdiv <2 x float> <float 0x3FEFE18FE0000000, float 0x3FF053ABC0000000>, %29
  %35 = shufflevector <2 x float> %34, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %36 = fdiv float 0x3FEA3255A0000000, %33
  %37 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 1, i64 1
  %38 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 2, i64 2
  %39 = extractelement <2 x float> %34, i32 0
  %40 = fmul float %39, 0x3FECA4A8C0000000
  %41 = fadd float %40, 0.000000e+00
  %42 = fmul <4 x float> %35, <float 0x3FD10CB2A0000000, float 0x3FC4A8C160000000, float 0x3FE801A360000000, float 0x3FFB6A7F00000000>
  %43 = fadd <4 x float> %42, <float 0.000000e+00, float undef, float undef, float 0.000000e+00>
  %44 = fsub <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float undef>, %42
  %45 = shufflevector <4 x float> %43, <4 x float> %44, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %46 = extractelement <2 x float> %34, i32 1
  %47 = fmul float %46, 0x3FA2CA57A0000000
  %48 = fadd float %47, 0.000000e+00
  %49 = fmul float %36, 0x3FA3EAB360000000
  %50 = fadd float %49, 0.000000e+00
  %51 = fmul float %36, 0x3FB1893740000000
  %52 = fsub float 0.000000e+00, %51
  %53 = fmul float %36, 0x3FF0793DE0000000
  %54 = fadd float %53, 0.000000e+00
  %55 = insertelement <4 x float> undef, float %41, i32 0
  %56 = extractelement <4 x float> %43, i32 0
  %57 = insertelement <4 x float> %55, float %56, i32 1
  %58 = extractelement <4 x float> %44, i32 1
  %59 = insertelement <4 x float> %57, float %58, i32 2
  %60 = insertelement <4 x float> %59, float %41, i32 3
  %61 = fmul <4 x float> %60, <float 0x3FEF957220000000, float 0x3FEF957220000000, float 0x3FEF957220000000, float 0x3FDBAAE3E0000000>
  %62 = extractelement <4 x float> %44, i32 2
  %63 = insertelement <4 x float> undef, float %62, i32 0
  %64 = extractelement <4 x float> %43, i32 3
  %65 = insertelement <4 x float> %63, float %64, i32 1
  %66 = insertelement <4 x float> %65, float %48, i32 2
  %67 = shufflevector <4 x float> %66, <4 x float> %44, <4 x i32> <i32 0, i32 1, i32 2, i32 6>
  %68 = fmul <4 x float> %67, <float 0x3FC2D2ACE0000000, float 0x3FC2D2ACE0000000, float 0x3FC2D2ACE0000000, float 0x3FE0966860000000>
  %69 = fsub <4 x float> %61, %68
  %70 = fadd <4 x float> %61, %68
  %71 = shufflevector <4 x float> %69, <4 x float> %70, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %72 = insertelement <4 x float> undef, float %50, i32 0
  %73 = insertelement <4 x float> %72, float %52, i32 1
  %74 = insertelement <4 x float> %73, float %54, i32 2
  %75 = insertelement <4 x float> %74, float %50, i32 3
  %76 = fmul <4 x float> %75, <float 0x3FC479A860000000, float 0x3FC479A860000000, float 0x3FC479A860000000, float 0x3FA93CB240000000>
  %77 = fadd <4 x float> %76, %71
  %78 = insertelement <4 x float> undef, float %64, i32 0
  %79 = insertelement <4 x float> %78, float %48, i32 1
  %80 = insertelement <4 x float> %79, float %41, i32 2
  %81 = shufflevector <4 x float> %80, <4 x float> %43, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %82 = fmul <4 x float> %81, <float 0x3FE0966860000000, float 0x3FE0966860000000, float 0x3F81777EC0000000, float 0x3F81777EC0000000>
  %83 = fmul <4 x float> %45, <float 0x3FDBAAE3E0000000, float 0x3FDBAAE3E0000000, float 0x3FA4807D60000000, float 0x3FA4807D60000000>
  %84 = fadd <4 x float> %83, %82
  %85 = fsub <4 x float> %83, %82
  %86 = shufflevector <4 x float> %84, <4 x float> %85, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %87 = insertelement <4 x float> undef, float %52, i32 0
  %88 = insertelement <4 x float> %87, float %54, i32 1
  %89 = insertelement <4 x float> %88, float %50, i32 2
  %90 = insertelement <4 x float> %89, float %52, i32 3
  %91 = fmul <4 x float> %90, <float 0x3FA93CB240000000, float 0x3FA93CB240000000, float 0x3FEEFDD7E0000000, float 0x3FEEFDD7E0000000>
  %92 = fadd <4 x float> %91, %86
  %93 = fmul float %58, 0x3F81777EC0000000
  %94 = fmul float %48, 0x3FA4807D60000000
  %95 = fsub float %94, %93
  %96 = fmul float %54, 0x3FEEFDD7E0000000
  %97 = fadd float %96, %95
  %98 = bitcast %struct.skcms_Matrix3x3* %2 to <4 x float>*
  store <4 x float> %77, <4 x float>* %98, align 4
  %99 = bitcast float* %37 to <4 x float>*
  store <4 x float> %92, <4 x float>* %99, align 4
  store float %97, float* %38, align 4
  br label %100

100:                                              ; preds = %3, %7, %13
  %101 = phi i1 [ true, %13 ], [ false, %7 ], [ false, %3 ]
  ret i1 %101
}

; Function Attrs: nounwind ssp uwtable
define hidden void @skcms_Matrix3x3_concat(%struct.skcms_Matrix3x3* noalias nocapture sret, %struct.skcms_Matrix3x3* nocapture readonly, %struct.skcms_Matrix3x3* nocapture readonly) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 0, i64 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 0, i64 1
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 0, i64 2
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 1, i64 0
  %11 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 2, i64 0
  %12 = bitcast %struct.skcms_Matrix3x3* %2 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = shufflevector <2 x float> %13, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %15 = shufflevector <2 x float> %13, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %16 = bitcast float* %10 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = shufflevector <2 x float> %17, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %19 = shufflevector <2 x float> %17, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %20 = bitcast float* %11 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 4
  %22 = shufflevector <2 x float> %21, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %23 = shufflevector <2 x float> %21, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %24 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 0, i64 2
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 1, i64 2
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %2, i64 0, i32 0, i64 2, i64 2
  %29 = load float, float* %28, align 4
  %30 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 1, i64 0
  %31 = load float, float* %30, align 4
  %32 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 1, i64 1
  %33 = load float, float* %32, align 4
  %34 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 1, i64 2
  %35 = load float, float* %34, align 4
  %36 = insertelement <2 x float> undef, float %5, i32 0
  %37 = insertelement <2 x float> %36, float %31, i32 1
  %38 = shufflevector <2 x float> %37, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %39 = extractelement <2 x float> %13, i32 0
  %40 = insertelement <4 x float> undef, float %39, i32 0
  %41 = extractelement <2 x float> %13, i32 1
  %42 = insertelement <4 x float> %40, float %41, i32 1
  %43 = insertelement <4 x float> %42, float %25, i32 2
  %44 = shufflevector <4 x float> %43, <4 x float> %15, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %45 = fmul <4 x float> %38, %44
  %46 = insertelement <2 x float> undef, float %7, i32 0
  %47 = insertelement <2 x float> %46, float %33, i32 1
  %48 = shufflevector <2 x float> %47, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %49 = extractelement <2 x float> %17, i32 0
  %50 = insertelement <4 x float> undef, float %49, i32 0
  %51 = extractelement <2 x float> %17, i32 1
  %52 = insertelement <4 x float> %50, float %51, i32 1
  %53 = insertelement <4 x float> %52, float %27, i32 2
  %54 = shufflevector <4 x float> %53, <4 x float> %19, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %55 = fmul <4 x float> %48, %54
  %56 = fadd <4 x float> %45, %55
  %57 = insertelement <2 x float> undef, float %9, i32 0
  %58 = insertelement <2 x float> %57, float %35, i32 1
  %59 = shufflevector <2 x float> %58, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %60 = extractelement <2 x float> %21, i32 0
  %61 = insertelement <4 x float> undef, float %60, i32 0
  %62 = extractelement <2 x float> %21, i32 1
  %63 = insertelement <4 x float> %61, float %62, i32 1
  %64 = insertelement <4 x float> %63, float %29, i32 2
  %65 = shufflevector <4 x float> %64, <4 x float> %23, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %66 = fmul <4 x float> %59, %65
  %67 = fadd <4 x float> %56, %66
  %68 = bitcast %struct.skcms_Matrix3x3* %0 to <4 x float>*
  store <4 x float> %67, <4 x float>* %68, align 4
  %69 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 1, i64 1
  %70 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 2, i64 0
  %71 = load float, float* %70, align 4
  %72 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 2, i64 1
  %73 = load float, float* %72, align 4
  %74 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 2, i64 2
  %75 = load float, float* %74, align 4
  %76 = insertelement <2 x float> undef, float %31, i32 0
  %77 = insertelement <2 x float> %76, float %71, i32 1
  %78 = shufflevector <2 x float> %77, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %79 = insertelement <4 x float> undef, float %41, i32 0
  %80 = insertelement <4 x float> %79, float %25, i32 1
  %81 = shufflevector <4 x float> %80, <4 x float> %14, <4 x i32> <i32 0, i32 1, i32 4, i32 undef>
  %82 = shufflevector <4 x float> %81, <4 x float> %15, <4 x i32> <i32 0, i32 1, i32 2, i32 5>
  %83 = fmul <4 x float> %78, %82
  %84 = insertelement <2 x float> undef, float %33, i32 0
  %85 = insertelement <2 x float> %84, float %73, i32 1
  %86 = shufflevector <2 x float> %85, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %87 = insertelement <4 x float> undef, float %51, i32 0
  %88 = insertelement <4 x float> %87, float %27, i32 1
  %89 = shufflevector <4 x float> %88, <4 x float> %18, <4 x i32> <i32 0, i32 1, i32 4, i32 undef>
  %90 = shufflevector <4 x float> %89, <4 x float> %19, <4 x i32> <i32 0, i32 1, i32 2, i32 5>
  %91 = fmul <4 x float> %86, %90
  %92 = fadd <4 x float> %83, %91
  %93 = insertelement <2 x float> undef, float %35, i32 0
  %94 = insertelement <2 x float> %93, float %75, i32 1
  %95 = shufflevector <2 x float> %94, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %96 = insertelement <4 x float> undef, float %62, i32 0
  %97 = insertelement <4 x float> %96, float %29, i32 1
  %98 = shufflevector <4 x float> %97, <4 x float> %22, <4 x i32> <i32 0, i32 1, i32 4, i32 undef>
  %99 = shufflevector <4 x float> %98, <4 x float> %23, <4 x i32> <i32 0, i32 1, i32 2, i32 5>
  %100 = fmul <4 x float> %95, %99
  %101 = fadd <4 x float> %92, %100
  %102 = bitcast float* %69 to <4 x float>*
  store <4 x float> %101, <4 x float>* %102, align 4
  %103 = fmul float %71, %25
  %104 = fmul float %73, %27
  %105 = fadd float %103, %104
  %106 = fmul float %75, %29
  %107 = fadd float %105, %106
  %108 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 2, i64 2
  store float %107, float* %108, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @skcms_PrimariesToXYZD50(float, float, float, float, float, float, float, float, %struct.skcms_Matrix3x3*) local_unnamed_addr #4 {
  %10 = alloca %struct.skcms_Matrix3x3, align 4
  %11 = alloca %struct.skcms_Matrix3x3, align 4
  %12 = alloca %struct.skcms_Matrix3x3, align 4
  %13 = fcmp oge float %0, 0.000000e+00
  %14 = fcmp ole float %0, 1.000000e+00
  %15 = and i1 %13, %14
  br i1 %15, label %16, label %242

16:                                               ; preds = %9
  %17 = fcmp oge float %1, 0.000000e+00
  %18 = fcmp ole float %1, 1.000000e+00
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %242

20:                                               ; preds = %16
  %21 = fcmp oge float %2, 0.000000e+00
  %22 = fcmp ole float %2, 1.000000e+00
  %23 = and i1 %21, %22
  br i1 %23, label %24, label %242

24:                                               ; preds = %20
  %25 = fcmp oge float %3, 0.000000e+00
  %26 = fcmp ole float %3, 1.000000e+00
  %27 = and i1 %25, %26
  br i1 %27, label %28, label %242

28:                                               ; preds = %24
  %29 = fcmp oge float %4, 0.000000e+00
  %30 = fcmp ole float %4, 1.000000e+00
  %31 = and i1 %29, %30
  br i1 %31, label %32, label %242

32:                                               ; preds = %28
  %33 = fcmp oge float %5, 0.000000e+00
  %34 = fcmp ole float %5, 1.000000e+00
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %242

36:                                               ; preds = %32
  %37 = fcmp oge float %6, 0.000000e+00
  %38 = fcmp ole float %6, 1.000000e+00
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %242

40:                                               ; preds = %36
  %41 = fcmp oge float %7, 0.000000e+00
  %42 = fcmp ole float %7, 1.000000e+00
  %43 = and i1 %41, %42
  %44 = icmp ne %struct.skcms_Matrix3x3* %8, null
  %45 = and i1 %43, %44
  br i1 %45, label %46, label %242

46:                                               ; preds = %40
  %47 = bitcast %struct.skcms_Matrix3x3* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %47) #17
  %48 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %10, i64 0, i32 0, i64 0, i64 0
  store float %0, float* %48, align 4
  %49 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %10, i64 0, i32 0, i64 0, i64 1
  store float %2, float* %49, align 4
  %50 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %10, i64 0, i32 0, i64 0, i64 2
  store float %4, float* %50, align 4
  %51 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %10, i64 0, i32 0, i64 1, i64 0
  store float %1, float* %51, align 4
  %52 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %10, i64 0, i32 0, i64 1, i64 1
  store float %3, float* %52, align 4
  %53 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %10, i64 0, i32 0, i64 1, i64 2
  store float %5, float* %53, align 4
  %54 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %10, i64 0, i32 0, i64 2, i64 0
  %55 = fsub float 1.000000e+00, %0
  %56 = fsub float %55, %1
  store float %56, float* %54, align 4
  %57 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %10, i64 0, i32 0, i64 2, i64 1
  %58 = fsub float 1.000000e+00, %2
  %59 = fsub float %58, %3
  store float %59, float* %57, align 4
  %60 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %10, i64 0, i32 0, i64 2, i64 2
  %61 = fsub float 1.000000e+00, %4
  %62 = fsub float %61, %5
  store float %62, float* %60, align 4
  %63 = bitcast %struct.skcms_Matrix3x3* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %63) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %63, i8 -1, i64 36, i1 false)
  %64 = call zeroext i1 @skcms_Matrix3x3_invert(%struct.skcms_Matrix3x3* nonnull %10, %struct.skcms_Matrix3x3* nonnull %11)
  br i1 %64, label %65, label %240

65:                                               ; preds = %46
  %66 = fdiv float %6, %7
  %67 = fsub float 1.000000e+00, %6
  %68 = fsub float %67, %7
  %69 = fdiv float %68, %7
  %70 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %11, i64 0, i32 0, i64 0, i64 0
  %71 = load float, float* %70, align 4
  %72 = fmul float %66, %71
  %73 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %11, i64 0, i32 0, i64 0, i64 1
  %74 = load float, float* %73, align 4
  %75 = fadd float %72, %74
  %76 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %11, i64 0, i32 0, i64 0, i64 2
  %77 = load float, float* %76, align 4
  %78 = fmul float %69, %77
  %79 = fadd float %75, %78
  %80 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %11, i64 0, i32 0, i64 1, i64 0
  %81 = load float, float* %80, align 4
  %82 = fmul float %66, %81
  %83 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %11, i64 0, i32 0, i64 1, i64 1
  %84 = load float, float* %83, align 4
  %85 = fadd float %82, %84
  %86 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %11, i64 0, i32 0, i64 1, i64 2
  %87 = load float, float* %86, align 4
  %88 = fmul float %69, %87
  %89 = fadd float %85, %88
  %90 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %11, i64 0, i32 0, i64 2, i64 0
  %91 = load float, float* %90, align 4
  %92 = fmul float %66, %91
  %93 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %11, i64 0, i32 0, i64 2, i64 1
  %94 = load float, float* %93, align 4
  %95 = fadd float %92, %94
  %96 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %11, i64 0, i32 0, i64 2, i64 2
  %97 = load float, float* %96, align 4
  %98 = fmul float %69, %97
  %99 = fadd float %95, %98
  %100 = fmul float %79, %0
  %101 = insertelement <2 x float> <float undef, float 0.000000e+00>, float %89, i32 0
  %102 = insertelement <2 x float> undef, float %2, i32 0
  %103 = shufflevector <2 x float> %102, <2 x float> undef, <2 x i32> zeroinitializer
  %104 = fmul <2 x float> %101, %103
  %105 = extractelement <2 x float> %104, i32 1
  %106 = fadd float %105, %100
  %107 = insertelement <2 x float> undef, float %4, i32 0
  %108 = shufflevector <2 x float> %107, <2 x float> undef, <2 x i32> zeroinitializer
  %109 = insertelement <2 x float> <float 0.000000e+00, float undef>, float %99, i32 1
  %110 = fmul <2 x float> %108, %109
  %111 = extractelement <2 x float> %110, i32 0
  %112 = fadd float %111, %106
  %113 = fmul float %0, 0.000000e+00
  %114 = insertelement <2 x float> undef, float %113, i32 0
  %115 = shufflevector <2 x float> %114, <2 x float> undef, <2 x i32> zeroinitializer
  %116 = fadd <2 x float> %115, %104
  %117 = fadd <2 x float> %110, %116
  %118 = fmul float %79, %1
  %119 = insertelement <2 x float> undef, float %3, i32 0
  %120 = shufflevector <2 x float> %119, <2 x float> undef, <2 x i32> zeroinitializer
  %121 = fmul <2 x float> %101, %120
  %122 = extractelement <2 x float> %121, i32 1
  %123 = fadd float %122, %118
  %124 = insertelement <2 x float> undef, float %5, i32 0
  %125 = shufflevector <2 x float> %124, <2 x float> undef, <2 x i32> zeroinitializer
  %126 = fmul <2 x float> %125, %109
  %127 = extractelement <2 x float> %126, i32 0
  %128 = fadd float %127, %123
  %129 = fmul float %1, 0.000000e+00
  %130 = insertelement <2 x float> undef, float %129, i32 0
  %131 = shufflevector <2 x float> %130, <2 x float> undef, <2 x i32> zeroinitializer
  %132 = fadd <2 x float> %131, %121
  %133 = fadd <2 x float> %126, %132
  %134 = fmul float %56, %79
  %135 = insertelement <2 x float> undef, float %59, i32 0
  %136 = shufflevector <2 x float> %135, <2 x float> undef, <2 x i32> zeroinitializer
  %137 = fmul <2 x float> %136, %101
  %138 = extractelement <2 x float> %137, i32 1
  %139 = fadd float %138, %134
  %140 = insertelement <2 x float> undef, float %62, i32 0
  %141 = shufflevector <2 x float> %140, <2 x float> undef, <2 x i32> zeroinitializer
  %142 = fmul <2 x float> %141, %109
  %143 = extractelement <2 x float> %142, i32 0
  %144 = fadd float %143, %139
  %145 = fmul float %56, 0.000000e+00
  %146 = insertelement <2 x float> undef, float %145, i32 0
  %147 = shufflevector <2 x float> %146, <2 x float> undef, <2 x i32> zeroinitializer
  %148 = fadd <2 x float> %147, %137
  %149 = fadd <2 x float> %142, %148
  %150 = bitcast %struct.skcms_Matrix3x3* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %150) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %150, i8 -1, i64 36, i1 false)
  %151 = call zeroext i1 @skcms_AdaptToXYZD50(float %6, float %7, %struct.skcms_Matrix3x3* nonnull %12)
  br i1 %151, label %152, label %238

152:                                              ; preds = %65
  %153 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 0, i64 0
  %154 = load float, float* %153, align 4, !noalias !23
  %155 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 0, i64 1
  %156 = load float, float* %155, align 4, !noalias !23
  %157 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 0, i64 2
  %158 = load float, float* %157, align 4, !noalias !23
  %159 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 1, i64 0
  %160 = load float, float* %159, align 4, !noalias !23
  %161 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 1, i64 1
  %162 = load float, float* %161, align 4, !noalias !23
  %163 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 1, i64 2
  %164 = load float, float* %163, align 4, !noalias !23
  %165 = insertelement <4 x float> undef, float %112, i32 0
  %166 = extractelement <2 x float> %117, i32 0
  %167 = insertelement <4 x float> %165, float %166, i32 1
  %168 = extractelement <2 x float> %117, i32 1
  %169 = insertelement <4 x float> %167, float %168, i32 2
  %170 = insertelement <4 x float> %169, float %112, i32 3
  %171 = insertelement <2 x float> undef, float %154, i32 0
  %172 = insertelement <2 x float> %171, float %160, i32 1
  %173 = shufflevector <2 x float> %172, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %174 = fmul <4 x float> %170, %173
  %175 = insertelement <4 x float> undef, float %128, i32 0
  %176 = extractelement <2 x float> %133, i32 0
  %177 = insertelement <4 x float> %175, float %176, i32 1
  %178 = extractelement <2 x float> %133, i32 1
  %179 = insertelement <4 x float> %177, float %178, i32 2
  %180 = insertelement <4 x float> %179, float %128, i32 3
  %181 = insertelement <2 x float> undef, float %156, i32 0
  %182 = insertelement <2 x float> %181, float %162, i32 1
  %183 = shufflevector <2 x float> %182, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %184 = fmul <4 x float> %180, %183
  %185 = fadd <4 x float> %174, %184
  %186 = insertelement <4 x float> undef, float %144, i32 0
  %187 = extractelement <2 x float> %149, i32 0
  %188 = insertelement <4 x float> %186, float %187, i32 1
  %189 = extractelement <2 x float> %149, i32 1
  %190 = insertelement <4 x float> %188, float %189, i32 2
  %191 = insertelement <4 x float> %190, float %144, i32 3
  %192 = insertelement <2 x float> undef, float %158, i32 0
  %193 = insertelement <2 x float> %192, float %164, i32 1
  %194 = shufflevector <2 x float> %193, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %195 = fmul <4 x float> %191, %194
  %196 = fadd <4 x float> %185, %195
  %197 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 2, i64 0
  %198 = load float, float* %197, align 4, !noalias !23
  %199 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 2, i64 1
  %200 = load float, float* %199, align 4, !noalias !23
  %201 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %12, i64 0, i32 0, i64 2, i64 2
  %202 = load float, float* %201, align 4, !noalias !23
  %203 = insertelement <4 x float> undef, float %166, i32 0
  %204 = insertelement <4 x float> %203, float %168, i32 1
  %205 = insertelement <4 x float> %204, float %112, i32 2
  %206 = insertelement <4 x float> %205, float %166, i32 3
  %207 = insertelement <2 x float> undef, float %160, i32 0
  %208 = insertelement <2 x float> %207, float %198, i32 1
  %209 = shufflevector <2 x float> %208, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %210 = fmul <4 x float> %206, %209
  %211 = insertelement <4 x float> undef, float %176, i32 0
  %212 = insertelement <4 x float> %211, float %178, i32 1
  %213 = insertelement <4 x float> %212, float %128, i32 2
  %214 = insertelement <4 x float> %213, float %176, i32 3
  %215 = insertelement <2 x float> undef, float %162, i32 0
  %216 = insertelement <2 x float> %215, float %200, i32 1
  %217 = shufflevector <2 x float> %216, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %218 = fmul <4 x float> %214, %217
  %219 = fadd <4 x float> %210, %218
  %220 = insertelement <4 x float> undef, float %187, i32 0
  %221 = insertelement <4 x float> %220, float %189, i32 1
  %222 = insertelement <4 x float> %221, float %144, i32 2
  %223 = insertelement <4 x float> %222, float %187, i32 3
  %224 = insertelement <2 x float> undef, float %164, i32 0
  %225 = insertelement <2 x float> %224, float %202, i32 1
  %226 = shufflevector <2 x float> %225, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %227 = fmul <4 x float> %223, %226
  %228 = fadd <4 x float> %219, %227
  %229 = fmul float %168, %198
  %230 = fmul float %178, %200
  %231 = fadd float %229, %230
  %232 = fmul float %189, %202
  %233 = fadd float %231, %232
  %234 = bitcast %struct.skcms_Matrix3x3* %8 to <4 x float>*
  store <4 x float> %196, <4 x float>* %234, align 4
  %235 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %8, i64 0, i32 0, i64 1, i64 1
  %236 = bitcast float* %235 to <4 x float>*
  store <4 x float> %228, <4 x float>* %236, align 4
  %237 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %8, i64 0, i32 0, i64 2, i64 2
  store float %233, float* %237, align 4
  br label %238

238:                                              ; preds = %65, %152
  %239 = phi i1 [ true, %152 ], [ false, %65 ]
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %150) #17
  br label %240

240:                                              ; preds = %46, %238
  %241 = phi i1 [ %239, %238 ], [ false, %46 ]
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %63) #17
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %47) #17
  br label %242

242:                                              ; preds = %9, %16, %20, %24, %28, %32, %36, %40, %240
  %243 = phi i1 [ %241, %240 ], [ false, %40 ], [ false, %36 ], [ false, %32 ], [ false, %28 ], [ false, %24 ], [ false, %20 ], [ false, %16 ], [ false, %9 ]
  ret i1 %243
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @skcms_Matrix3x3_invert(%struct.skcms_Matrix3x3* nocapture readonly, %struct.skcms_Matrix3x3* nocapture) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 0, i64 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 1, i64 0
  %6 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 2, i64 0
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 0, i64 1
  %9 = load float, float* %8, align 4
  %10 = bitcast float* %5 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = fpext <2 x float> %11 to <2 x double>
  %13 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 2, i64 1
  %14 = load float, float* %13, align 4
  %15 = insertelement <4 x float> undef, float %14, i32 0
  %16 = insertelement <4 x float> %15, float %9, i32 1
  %17 = insertelement <4 x float> %16, float %7, i32 2
  %18 = insertelement <4 x float> %17, float %4, i32 3
  %19 = fpext <4 x float> %18 to <4 x double>
  %20 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 0, i64 2
  %21 = load float, float* %20, align 4
  %22 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 1, i64 2
  %23 = load float, float* %22, align 4
  %24 = insertelement <2 x float> undef, float %21, i32 0
  %25 = insertelement <2 x float> %24, float %23, i32 1
  %26 = fpext <2 x float> %25 to <2 x double>
  %27 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %0, i64 0, i32 0, i64 2, i64 2
  %28 = load float, float* %27, align 4
  %29 = fpext float %28 to double
  %30 = extractelement <4 x double> %19, i32 3
  %31 = extractelement <4 x double> %19, i32 1
  %32 = extractelement <4 x double> %19, i32 0
  %33 = shufflevector <4 x double> %19, <4 x double> undef, <2 x i32> <i32 3, i32 2>
  %34 = shufflevector <4 x double> %19, <4 x double> undef, <2 x i32> <i32 0, i32 undef>
  %35 = insertelement <2 x double> %34, double %31, i32 1
  %36 = fmul <2 x double> %33, %35
  %37 = extractelement <2 x double> %36, i32 0
  %38 = extractelement <2 x double> %36, i32 1
  %39 = fsub double %37, %38
  %40 = insertelement <2 x double> %34, double %30, i32 1
  %41 = fmul <2 x double> %40, %12
  %42 = shufflevector <4 x double> %19, <4 x double> undef, <2 x i32> <i32 2, i32 1>
  %43 = extractelement <2 x double> %12, i32 1
  %44 = extractelement <2 x double> %12, i32 0
  %45 = shufflevector <2 x double> %12, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %46 = fmul <2 x double> %42, %45
  %47 = fsub <2 x double> %41, %46
  %48 = extractelement <2 x double> %26, i32 1
  %49 = fmul double %39, %48
  %50 = extractelement <2 x double> %26, i32 0
  %51 = insertelement <2 x double> undef, double %50, i32 0
  %52 = insertelement <2 x double> %51, double %29, i32 1
  %53 = fmul <2 x double> %47, %52
  %54 = extractelement <2 x double> %53, i32 1
  %55 = fsub double %54, %49
  %56 = extractelement <2 x double> %53, i32 0
  %57 = fadd double %56, %55
  %58 = fcmp oeq double %57, 0.000000e+00
  br i1 %58, label %147, label %59

59:                                               ; preds = %2
  %60 = fdiv double 1.000000e+00, %57
  %61 = fcmp ogt double %60, 0x47EFFFFFE0000000
  %62 = fcmp olt double %60, 0xC7EFFFFFE0000000
  %63 = or i1 %61, %62
  br i1 %63, label %147, label %64

64:                                               ; preds = %59
  %65 = fptrunc double %60 to float
  %66 = fmul float %65, 0.000000e+00
  %67 = fcmp oeq float %66, 0.000000e+00
  br i1 %67, label %68, label %147

68:                                               ; preds = %64
  %69 = extractelement <2 x double> %47, i32 1
  %70 = fmul double %69, %60
  %71 = fmul double %39, %60
  %72 = extractelement <2 x double> %47, i32 0
  %73 = fmul double %72, %60
  %74 = insertelement <2 x double> undef, double %60, i32 0
  %75 = shufflevector <2 x double> %74, <2 x double> undef, <2 x i32> zeroinitializer
  %76 = fmul <2 x double> %75, %26
  %77 = fmul double %60, %29
  %78 = fmul double %77, %43
  %79 = extractelement <2 x double> %76, i32 1
  %80 = fmul double %79, %32
  %81 = fsub double %78, %80
  %82 = fptrunc double %81 to float
  %83 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 0, i64 0
  store float %82, float* %83, align 4
  %84 = fptrunc double %73 to float
  %85 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 2, i64 0
  store float %84, float* %85, align 4
  %86 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 0, i64 1
  %87 = fptrunc double %71 to float
  %88 = fsub float -0.000000e+00, %87
  %89 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 2, i64 1
  store float %88, float* %89, align 4
  %90 = extractelement <2 x double> %76, i32 0
  %91 = insertelement <4 x double> undef, double %90, i32 0
  %92 = insertelement <4 x double> %91, double %79, i32 1
  %93 = insertelement <4 x double> %92, double %79, i32 2
  %94 = insertelement <4 x double> %93, double %77, i32 3
  %95 = fmul <4 x double> %94, %19
  %96 = insertelement <2 x double> undef, double %77, i32 0
  %97 = shufflevector <2 x double> %96, <2 x double> %76, <2 x i32> <i32 0, i32 2>
  %98 = shufflevector <2 x double> %97, <2 x double> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %99 = insertelement <4 x double> undef, double %31, i32 0
  %100 = insertelement <4 x double> %99, double %43, i32 1
  %101 = insertelement <4 x double> %100, double %44, i32 2
  %102 = shufflevector <4 x double> %101, <4 x double> %19, <4 x i32> <i32 0, i32 1, i32 2, i32 6>
  %103 = fmul <4 x double> %98, %102
  %104 = fsub <4 x double> %95, %103
  %105 = fptrunc <4 x double> %104 to <4 x float>
  %106 = bitcast float* %86 to <4 x float>*
  store <4 x float> %105, <4 x float>* %106, align 4
  %107 = insertelement <2 x double> undef, double %44, i32 0
  %108 = insertelement <2 x double> %107, double %30, i32 1
  %109 = fmul <2 x double> %76, %108
  %110 = extractelement <2 x double> %109, i32 0
  %111 = extractelement <2 x double> %109, i32 1
  %112 = fsub double %110, %111
  %113 = fptrunc double %112 to float
  %114 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 1, i64 2
  store float %113, float* %114, align 4
  %115 = fptrunc double %70 to float
  %116 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1, i64 0, i32 0, i64 2, i64 2
  store float %115, float* %116, align 4
  %117 = fmul float %82, 0.000000e+00
  %118 = fcmp oeq float %117, 0.000000e+00
  %119 = extractelement <4 x float> %105, i32 0
  %120 = fmul float %119, 0.000000e+00
  %121 = fcmp oeq float %120, 0.000000e+00
  %122 = and i1 %118, %121
  %123 = extractelement <4 x float> %105, i32 1
  %124 = fmul float %123, 0.000000e+00
  %125 = fcmp oeq float %124, 0.000000e+00
  %126 = and i1 %122, %125
  %127 = extractelement <4 x float> %105, i32 2
  %128 = fmul float %127, 0.000000e+00
  %129 = fcmp oeq float %128, 0.000000e+00
  %130 = and i1 %126, %129
  %131 = extractelement <4 x float> %105, i32 3
  %132 = fmul float %131, 0.000000e+00
  %133 = fcmp oeq float %132, 0.000000e+00
  %134 = and i1 %130, %133
  %135 = fmul float %113, 0.000000e+00
  %136 = fcmp oeq float %135, 0.000000e+00
  %137 = and i1 %134, %136
  %138 = fmul float %84, 0.000000e+00
  %139 = fcmp oeq float %138, 0.000000e+00
  %140 = and i1 %137, %139
  %141 = fmul float %87, -0.000000e+00
  %142 = fcmp oeq float %141, 0.000000e+00
  %143 = and i1 %140, %142
  %144 = fmul float %115, 0.000000e+00
  %145 = fcmp oeq float %144, 0.000000e+00
  %146 = and i1 %143, %145
  br label %147

147:                                              ; preds = %68, %2, %59, %64
  %148 = phi i1 [ false, %64 ], [ false, %59 ], [ false, %2 ], [ %146, %68 ]
  ret i1 %148
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @skcms_TransferFunction_invert(%struct.skcms_TransferFunction* nocapture readonly, %struct.skcms_TransferFunction*) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fcmp olt float %4, 0.000000e+00
  br i1 %5, label %6, label %11

6:                                                ; preds = %2
  %7 = fptosi float %4 to i32
  %8 = sitofp i32 %7 to float
  %9 = fcmp oeq float %4, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %6
  switch i32 %7, label %342 [
    i32 -2, label %44
    i32 -3, label %72
    i32 -4, label %101
  ]

11:                                               ; preds = %6, %2
  %12 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 1
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 2
  %15 = load float, float* %14, align 4
  %16 = fadd float %13, %15
  %17 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 3
  %18 = load float, float* %17, align 4
  %19 = fadd float %16, %18
  %20 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 4
  %21 = load float, float* %20, align 4
  %22 = fadd float %19, %21
  %23 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 5
  %24 = load float, float* %23, align 4
  %25 = fadd float %22, %24
  %26 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 6
  %27 = load float, float* %26, align 4
  %28 = fadd float %25, %27
  %29 = fadd float %4, %28
  %30 = fmul float %29, 0.000000e+00
  %31 = fcmp oeq float %30, 0.000000e+00
  br i1 %31, label %32, label %342

32:                                               ; preds = %11
  %33 = fcmp ult float %13, 0.000000e+00
  %34 = fcmp ult float %18, 0.000000e+00
  %35 = or i1 %33, %34
  br i1 %35, label %342, label %36

36:                                               ; preds = %32
  %37 = fcmp ult float %21, 0.000000e+00
  %38 = fcmp ult float %4, 0.000000e+00
  %39 = or i1 %38, %37
  br i1 %39, label %342, label %40

40:                                               ; preds = %36
  %41 = fmul float %13, %21
  %42 = fadd float %15, %41
  %43 = fcmp ult float %42, 0.000000e+00
  br i1 %43, label %342, label %130

44:                                               ; preds = %10
  %45 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 1
  %46 = load float, float* %45, align 4
  %47 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 2
  %48 = bitcast float* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 3
  %51 = load float, float* %50, align 4
  %52 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 4
  %53 = bitcast float* %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 5
  %56 = load float, float* %55, align 4
  %57 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 6
  %58 = load float, float* %57, align 4
  %59 = fsub float -0.000000e+00, %46
  %60 = fdiv float 1.000000e+00, %58
  %61 = fsub float -0.000000e+00, %56
  %62 = fdiv float 1.000000e+00, %51
  %63 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 0
  store float -2.000000e+00, float* %63, align 4
  %64 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 1
  store float %59, float* %64, align 4
  %65 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 2
  %66 = bitcast float* %65 to i32*
  store i32 %54, i32* %66, align 4
  %67 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 3
  store float %60, float* %67, align 4
  %68 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 4
  %69 = bitcast float* %68 to i32*
  store i32 %49, i32* %69, align 4
  %70 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 5
  store float %61, float* %70, align 4
  %71 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 6
  store float %62, float* %71, align 4
  br label %342

72:                                               ; preds = %10
  %73 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 1
  %74 = load float, float* %73, align 4
  %75 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 2
  %76 = load float, float* %75, align 4
  %77 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 3
  %78 = load float, float* %77, align 4
  %79 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 4
  %80 = bitcast float* %79 to i32*
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 5
  %83 = bitcast float* %82 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 6
  %86 = bitcast float* %85 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = fdiv float 1.000000e+00, %74
  %89 = fdiv float 1.000000e+00, %76
  %90 = fdiv float 1.000000e+00, %78
  %91 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 0
  store float -4.000000e+00, float* %91, align 4
  %92 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 1
  store float %88, float* %92, align 4
  %93 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 2
  store float %89, float* %93, align 4
  %94 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 3
  store float %90, float* %94, align 4
  %95 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 4
  %96 = bitcast float* %95 to i32*
  store i32 %81, i32* %96, align 4
  %97 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 5
  %98 = bitcast float* %97 to i32*
  store i32 %84, i32* %98, align 4
  %99 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 6
  %100 = bitcast float* %99 to i32*
  store i32 %87, i32* %100, align 4
  br label %342

101:                                              ; preds = %10
  %102 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 1
  %103 = load float, float* %102, align 4
  %104 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 2
  %105 = load float, float* %104, align 4
  %106 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 3
  %107 = load float, float* %106, align 4
  %108 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 4
  %109 = bitcast float* %108 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 5
  %112 = bitcast float* %111 to i32*
  %113 = load i32, i32* %112, align 4
  %114 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %0, i64 0, i32 6
  %115 = bitcast float* %114 to i32*
  %116 = load i32, i32* %115, align 4
  %117 = fdiv float 1.000000e+00, %103
  %118 = fdiv float 1.000000e+00, %105
  %119 = fdiv float 1.000000e+00, %107
  %120 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 0
  store float -3.000000e+00, float* %120, align 4
  %121 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 1
  store float %117, float* %121, align 4
  %122 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 2
  store float %118, float* %122, align 4
  %123 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 3
  store float %119, float* %123, align 4
  %124 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 4
  %125 = bitcast float* %124 to i32*
  store i32 %110, i32* %125, align 4
  %126 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 5
  %127 = bitcast float* %126 to i32*
  store i32 %113, i32* %127, align 4
  %128 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 6
  %129 = bitcast float* %128 to i32*
  store i32 %116, i32* %129, align 4
  br label %342

130:                                              ; preds = %40
  %131 = fmul float %18, %21
  %132 = fadd float %131, %27
  %133 = fcmp oeq float %42, 0.000000e+00
  %134 = fcmp oeq float %42, 1.000000e+00
  %135 = or i1 %133, %134
  br i1 %135, label %169, label %136

136:                                              ; preds = %130
  %137 = bitcast float %42 to i32
  %138 = sitofp i32 %137 to float
  %139 = fmul float %138, 0x3E80000000000000
  %140 = and i32 %137, 8388607
  %141 = or i32 %140, 1056964608
  %142 = bitcast i32 %141 to float
  %143 = fadd float %139, 0xC05F0E6EE0000000
  %144 = fmul float %142, 0x3FF7F7EEA0000000
  %145 = fsub float %143, %144
  %146 = fadd float %142, 0x3FD6889F20000000
  %147 = fdiv float 0x3FFB9D3460000000, %146
  %148 = fsub float %145, %147
  %149 = fmul float %4, %148
  %150 = fptosi float %149 to i32
  %151 = sitofp i32 %150 to float
  %152 = fcmp olt float %149, %151
  %153 = fadd float %151, -1.000000e+00
  %154 = select i1 %152, float %153, float %151
  %155 = fsub float %149, %154
  %156 = fadd float %149, 0x405E518A20000000
  %157 = fmul float %155, 0x3FF7D791A0000000
  %158 = fsub float %156, %157
  %159 = fsub float 0x40135EBF00000000, %155
  %160 = fdiv float 0x403BBA5FC0000000, %159
  %161 = fadd float %158, %160
  %162 = fmul float %161, 0x4160000000000000
  %163 = fcmp ult float %162, 0x41E0000000000000
  br i1 %163, label %164, label %169

164:                                              ; preds = %136
  %165 = fcmp olt float %162, 0.000000e+00
  br i1 %165, label %169, label %166

166:                                              ; preds = %164
  %167 = fptosi float %162 to i32
  %168 = bitcast i32 %167 to float
  br label %169

169:                                              ; preds = %130, %136, %164, %166
  %170 = phi float [ %42, %130 ], [ %168, %166 ], [ 0x7FF0000000000000, %136 ], [ 0.000000e+00, %164 ]
  %171 = fadd float %170, %24
  %172 = fsub float %132, %171
  %173 = fcmp olt float %172, 0.000000e+00
  %174 = fsub float -0.000000e+00, %172
  %175 = select i1 %173, float %174, float %172
  %176 = fcmp ogt float %175, 0x3F60000000000000
  br i1 %176, label %342, label %177

177:                                              ; preds = %169
  %178 = fcmp ogt float %132, 0.000000e+00
  br i1 %178, label %179, label %185

179:                                              ; preds = %177
  %180 = fsub float -0.000000e+00, %27
  %181 = insertelement <2 x float> <float 1.000000e+00, float undef>, float %180, i32 1
  %182 = insertelement <2 x float> undef, float %18, i32 0
  %183 = shufflevector <2 x float> %182, <2 x float> undef, <2 x i32> zeroinitializer
  %184 = fdiv <2 x float> %181, %183
  br label %185

185:                                              ; preds = %179, %177
  %186 = phi <2 x float> [ %184, %179 ], [ zeroinitializer, %177 ]
  %187 = fcmp oeq float %13, 0.000000e+00
  %188 = fcmp oeq float %13, 1.000000e+00
  %189 = or i1 %187, %188
  br i1 %189, label %224, label %190

190:                                              ; preds = %185
  %191 = bitcast float %13 to i32
  %192 = sitofp i32 %191 to float
  %193 = fmul float %192, 0x3E80000000000000
  %194 = and i32 %191, 8388607
  %195 = or i32 %194, 1056964608
  %196 = bitcast i32 %195 to float
  %197 = fadd float %193, 0xC05F0E6EE0000000
  %198 = fmul float %196, 0x3FF7F7EEA0000000
  %199 = fsub float %197, %198
  %200 = fadd float %196, 0x3FD6889F20000000
  %201 = fdiv float 0x3FFB9D3460000000, %200
  %202 = fsub float %199, %201
  %203 = fmul float %4, %202
  %204 = fsub float -0.000000e+00, %203
  %205 = fptosi float %204 to i32
  %206 = sitofp i32 %205 to float
  %207 = fcmp olt float %204, %206
  %208 = fadd float %206, -1.000000e+00
  %209 = select i1 %207, float %208, float %206
  %210 = fsub float %204, %209
  %211 = fsub float 0x405E518A20000000, %203
  %212 = fmul float %210, 0x3FF7D791A0000000
  %213 = fsub float %211, %212
  %214 = fsub float 0x40135EBF00000000, %210
  %215 = fdiv float 0x403BBA5FC0000000, %214
  %216 = fadd float %213, %215
  %217 = fmul float %216, 0x4160000000000000
  %218 = fcmp ult float %217, 0x41E0000000000000
  br i1 %218, label %219, label %227

219:                                              ; preds = %190
  %220 = fcmp olt float %217, 0.000000e+00
  br i1 %220, label %227, label %221

221:                                              ; preds = %219
  %222 = fptosi float %217 to i32
  %223 = bitcast i32 %222 to float
  br label %224

224:                                              ; preds = %185, %221
  %225 = phi float [ %13, %185 ], [ %223, %221 ]
  %226 = fcmp olt float %225, 0.000000e+00
  br i1 %226, label %342, label %227

227:                                              ; preds = %219, %190, %224
  %228 = phi float [ %225, %224 ], [ 0.000000e+00, %219 ], [ 0x7FF0000000000000, %190 ]
  %229 = fmul float %24, %228
  %230 = fsub float -0.000000e+00, %15
  %231 = fdiv float 1.000000e+00, %4
  %232 = fdiv float %230, %13
  %233 = fmul float %132, %228
  %234 = fsub float %233, %229
  %235 = fcmp olt float %234, 0.000000e+00
  %236 = select i1 %235, float %233, float %229
  %237 = fsub float -0.000000e+00, %236
  %238 = fcmp olt float %231, 0.000000e+00
  br i1 %238, label %239, label %243

239:                                              ; preds = %227
  %240 = fptosi float %231 to i32
  %241 = sitofp i32 %240 to float
  %242 = fcmp oeq float %231, %241
  br i1 %242, label %342, label %243

243:                                              ; preds = %239, %227
  %244 = fsub float %228, %236
  %245 = extractelement <2 x float> %186, i32 0
  %246 = fadd float %245, %244
  %247 = fadd float %132, %246
  %248 = fadd float %232, %247
  %249 = extractelement <2 x float> %186, i32 1
  %250 = fadd float %249, %248
  %251 = fadd float %231, %250
  %252 = fmul float %251, 0.000000e+00
  %253 = fcmp oeq float %252, 0.000000e+00
  br i1 %253, label %254, label %342

254:                                              ; preds = %243
  %255 = fcmp ult float %228, 0.000000e+00
  %256 = fcmp ult float %245, 0.000000e+00
  %257 = or i1 %256, %255
  br i1 %257, label %342, label %258

258:                                              ; preds = %254
  %259 = fcmp ult float %132, 0.000000e+00
  %260 = fcmp ult float %231, 0.000000e+00
  %261 = or i1 %260, %259
  %262 = fsub float %233, %236
  %263 = fcmp ult float %262, 0.000000e+00
  %264 = or i1 %261, %263
  br i1 %264, label %342, label %265

265:                                              ; preds = %258
  %266 = tail call float @skcms_TransferFunction_eval(%struct.skcms_TransferFunction* %0, float 1.000000e+00)
  %267 = fmul float %266, 0.000000e+00
  %268 = fcmp oeq float %267, 0.000000e+00
  br i1 %268, label %269, label %342

269:                                              ; preds = %265
  %270 = fcmp olt float %266, 0.000000e+00
  %271 = select i1 %270, float -1.000000e+00, float 1.000000e+00
  %272 = fmul float %266, %271
  %273 = fcmp olt float %272, %132
  br i1 %273, label %274, label %278

274:                                              ; preds = %269
  %275 = fmul float %245, %271
  %276 = fmul float %275, %272
  %277 = fsub float 1.000000e+00, %276
  br label %321

278:                                              ; preds = %269
  %279 = fmul float %228, %272
  %280 = fsub float %279, %236
  %281 = fcmp oeq float %280, 0.000000e+00
  %282 = fcmp oeq float %280, 1.000000e+00
  %283 = or i1 %281, %282
  br i1 %283, label %317, label %284

284:                                              ; preds = %278
  %285 = bitcast float %280 to i32
  %286 = sitofp i32 %285 to float
  %287 = fmul float %286, 0x3E80000000000000
  %288 = and i32 %285, 8388607
  %289 = or i32 %288, 1056964608
  %290 = bitcast i32 %289 to float
  %291 = fadd float %287, 0xC05F0E6EE0000000
  %292 = fmul float %290, 0x3FF7F7EEA0000000
  %293 = fsub float %291, %292
  %294 = fadd float %290, 0x3FD6889F20000000
  %295 = fdiv float 0x3FFB9D3460000000, %294
  %296 = fsub float %293, %295
  %297 = fmul float %231, %296
  %298 = fptosi float %297 to i32
  %299 = sitofp i32 %298 to float
  %300 = fcmp olt float %297, %299
  %301 = fadd float %299, -1.000000e+00
  %302 = select i1 %300, float %301, float %299
  %303 = fsub float %297, %302
  %304 = fadd float %297, 0x405E518A20000000
  %305 = fmul float %303, 0x3FF7D791A0000000
  %306 = fsub float %304, %305
  %307 = fsub float 0x40135EBF00000000, %303
  %308 = fdiv float 0x403BBA5FC0000000, %307
  %309 = fadd float %306, %308
  %310 = fmul float %309, 0x4160000000000000
  %311 = fcmp ult float %310, 0x41E0000000000000
  br i1 %311, label %312, label %317

312:                                              ; preds = %284
  %313 = fcmp olt float %310, 0.000000e+00
  br i1 %313, label %317, label %314

314:                                              ; preds = %312
  %315 = fptosi float %310 to i32
  %316 = bitcast i32 %315 to float
  br label %317

317:                                              ; preds = %278, %284, %312, %314
  %318 = phi float [ %280, %278 ], [ %316, %314 ], [ 0x7FF0000000000000, %284 ], [ 0.000000e+00, %312 ]
  %319 = fmul float %271, %318
  %320 = fsub float 1.000000e+00, %319
  br label %321

321:                                              ; preds = %317, %274
  %322 = phi float [ %232, %274 ], [ %320, %317 ]
  %323 = phi float [ %277, %274 ], [ %249, %317 ]
  %324 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 0
  store float %231, float* %324, align 4
  %325 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 1
  store float %228, float* %325, align 4
  %326 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 2
  store float %237, float* %326, align 4
  %327 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 3
  store float %245, float* %327, align 4
  %328 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 4
  store float %132, float* %328, align 4
  %329 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 5
  store float %322, float* %329, align 4
  %330 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1, i64 0, i32 6
  store float %323, float* %330, align 4
  br i1 %238, label %331, label %335

331:                                              ; preds = %321
  %332 = fptosi float %231 to i32
  %333 = sitofp i32 %332 to float
  %334 = fcmp oeq float %231, %333
  br i1 %334, label %342, label %335

335:                                              ; preds = %331, %321
  %336 = fadd float %247, %322
  %337 = fadd float %336, %323
  %338 = fadd float %231, %337
  %339 = fmul float %338, 0.000000e+00
  %340 = fcmp oeq float %339, 0.000000e+00
  br i1 %340, label %342, label %341

341:                                              ; preds = %335
  br label %342

342:                                              ; preds = %335, %331, %341, %239, %243, %254, %258, %11, %32, %36, %40, %10, %169, %265, %224, %101, %72, %44
  %343 = phi i1 [ true, %72 ], [ true, %44 ], [ true, %101 ], [ false, %169 ], [ false, %224 ], [ false, %265 ], [ false, %10 ], [ false, %40 ], [ false, %36 ], [ false, %32 ], [ false, %11 ], [ false, %258 ], [ false, %254 ], [ false, %243 ], [ false, %239 ], [ false, %341 ], [ false, %331 ], [ true, %335 ]
  ret i1 %343
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @skcms_ApproximateCurve(%union.skcms_Curve* readonly, %struct.skcms_TransferFunction*, float*) local_unnamed_addr #4 {
  %4 = alloca %struct.skcms_Matrix3x3, align 4
  %5 = alloca %struct.skcms_Matrix3x3, align 4
  %6 = alloca %struct.skcms_TransferFunction, align 4
  %7 = alloca %struct.skcms_TransferFunction, align 16
  %8 = icmp ne %union.skcms_Curve* %0, null
  %9 = icmp ne %struct.skcms_TransferFunction* %1, null
  %10 = and i1 %8, %9
  %11 = icmp ne float* %2, null
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %1066

13:                                               ; preds = %3
  %14 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = icmp ult i32 %15, 2
  %17 = icmp slt i32 %15, 0
  %18 = or i1 %16, %17
  br i1 %18, label %1066, label %19

19:                                               ; preds = %13
  %20 = add nsw i32 %15, -1
  %21 = sitofp i32 %20 to float
  %22 = fdiv float 1.000000e+00, %21
  store float 0x7FF0000000000000, float* %2, align 4
  %23 = bitcast %struct.skcms_TransferFunction* %6 to i8*
  %24 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %6, i64 0, i32 0
  %25 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %6, i64 0, i32 1
  %26 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %6, i64 0, i32 2
  %27 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %6, i64 0, i32 3
  %28 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %6, i64 0, i32 4
  %29 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %6, i64 0, i32 5
  %30 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %6, i64 0, i32 6
  %31 = bitcast %struct.skcms_TransferFunction* %7 to i8*
  %32 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %7, i64 0, i32 0
  %33 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %7, i64 0, i32 1
  %34 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %7, i64 0, i32 2
  %35 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %7, i64 0, i32 3
  %36 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %7, i64 0, i32 4
  %37 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %7, i64 0, i32 5
  %38 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %7, i64 0, i32 6
  %39 = sitofp i32 %15 to float
  %40 = fadd float %39, -1.000000e+00
  %41 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 1
  %42 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 2
  %43 = bitcast %union.skcms_Curve* %0 to %struct.anon*
  %44 = getelementptr inbounds %struct.anon, %struct.anon* %43, i64 0, i32 1
  %45 = bitcast %struct.skcms_Matrix3x3* %4 to i8*
  %46 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %4, i64 0, i32 0, i64 0, i64 0
  %47 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %4, i64 0, i32 0, i64 0, i64 1
  %48 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %4, i64 0, i32 0, i64 0, i64 2
  %49 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %4, i64 0, i32 0, i64 1, i64 0
  %50 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %4, i64 0, i32 0, i64 1, i64 1
  %51 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %4, i64 0, i32 0, i64 1, i64 2
  %52 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %4, i64 0, i32 0, i64 2, i64 0
  %53 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %4, i64 0, i32 0, i64 2, i64 1
  %54 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %4, i64 0, i32 0, i64 2, i64 2
  %55 = bitcast %struct.skcms_Matrix3x3* %5 to i8*
  %56 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %5, i64 0, i32 0, i64 0, i64 0
  %57 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %5, i64 0, i32 0, i64 0, i64 1
  %58 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %5, i64 0, i32 0, i64 0, i64 2
  %59 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %5, i64 0, i32 0, i64 1, i64 0
  %60 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %5, i64 0, i32 0, i64 1, i64 1
  %61 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %5, i64 0, i32 0, i64 1, i64 2
  %62 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %5, i64 0, i32 0, i64 2, i64 0
  %63 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %5, i64 0, i32 0, i64 2, i64 1
  %64 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %5, i64 0, i32 0, i64 2, i64 2
  %65 = fmul float %22, %21
  %66 = fcmp olt float %65, 1.000000e+00
  %67 = select i1 %66, float %65, float 1.000000e+00
  %68 = fcmp olt float %67, 0.000000e+00
  %69 = select i1 %68, float 0.000000e+00, float %67
  %70 = add nsw i32 %15, -2
  %71 = sitofp i32 %70 to float
  %72 = fmul float %22, %71
  %73 = fcmp olt float %72, 1.000000e+00
  %74 = select i1 %73, float %72, float 1.000000e+00
  %75 = fcmp olt float %74, 0.000000e+00
  %76 = select i1 %75, float 0.000000e+00, float %74
  %77 = bitcast float* %27 to i32*
  %78 = bitcast float* %25 to i32*
  %79 = bitcast float* %30 to i32*
  %80 = bitcast float* %26 to i32*
  %81 = bitcast %struct.skcms_TransferFunction* %1 to i8*
  %82 = bitcast %struct.skcms_TransferFunction* %6 to i8*
  %83 = bitcast %struct.skcms_TransferFunction* %7 to i8*
  %84 = bitcast float* %27 to i8*
  %85 = bitcast %struct.skcms_TransferFunction* %7 to <4 x float>*
  %86 = bitcast %struct.skcms_TransferFunction* %7 to <2 x float>*
  %87 = bitcast %struct.skcms_TransferFunction* %7 to <4 x float>*
  %88 = bitcast %struct.skcms_TransferFunction* %7 to <4 x float>*
  %89 = bitcast %struct.skcms_TransferFunction* %7 to <4 x float>*
  br label %94

90:                                               ; preds = %1063
  %91 = load float, float* %2, align 4
  %92 = fmul float %91, 0.000000e+00
  %93 = fcmp oeq float %92, 0.000000e+00
  br label %1066

94:                                               ; preds = %1063, %19
  %95 = phi i64 [ 0, %19 ], [ %1064, %1063 ]
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %23) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %82, i8 -1, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %31) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %83, i8 -1, i64 28, i1 false)
  store float 0.000000e+00, float* %30, align 4
  %96 = getelementptr inbounds [2 x float], [2 x float]* @_ZZ22skcms_ApproximateCurveE11kTolerances, i64 0, i64 %95
  %97 = load float, float* %96, align 4
  %98 = call fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* nonnull %0, i32 %15, float %97, float* %27, float* %28, float* null)
  %99 = icmp eq i32 %15, %98
  br i1 %99, label %100, label %103

100:                                              ; preds = %94
  store float 1.000000e+00, float* %24, align 4
  %101 = load i32, i32* %77, align 4
  store i32 %101, i32* %78, align 4
  %102 = load i32, i32* %79, align 4
  store i32 %102, i32* %80, align 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %84, i8 0, i64 16, i1 false)
  br label %1022

103:                                              ; preds = %94
  %104 = icmp eq i32 %98, %20
  br i1 %104, label %105, label %280

105:                                              ; preds = %103
  store float 1.000000e+00, float* %24, align 4
  %106 = load i32, i32* %14, align 8
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %157, label %108

108:                                              ; preds = %105
  %109 = add i32 %106, -1
  %110 = uitofp i32 %109 to float
  %111 = fmul float %69, %110
  %112 = fptosi float %111 to i32
  %113 = fadd float %111, 1.000000e+00
  %114 = bitcast float %113 to i32
  %115 = add nsw i32 %114, -1
  %116 = bitcast i32 %115 to float
  %117 = fptosi float %116 to i32
  %118 = sitofp i32 %112 to float
  %119 = fsub float %111, %118
  %120 = load i8*, i8** %41, align 8
  %121 = icmp eq i8* %120, null
  br i1 %121, label %133, label %122

122:                                              ; preds = %108
  %123 = sext i32 %112 to i64
  %124 = getelementptr inbounds i8, i8* %120, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = uitofp i8 %125 to float
  %127 = fmul float %126, 0x3F70101020000000
  %128 = sext i32 %117 to i64
  %129 = getelementptr inbounds i8, i8* %120, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = uitofp i8 %130 to float
  %132 = fmul float %131, 0x3F70101020000000
  br label %151

133:                                              ; preds = %108
  %134 = load i8*, i8** %42, align 8
  %135 = shl nsw i32 %112, 1
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %134, i64 %136
  %138 = bitcast i8* %137 to i16*
  %139 = load i16, i16* %138, align 1
  %140 = shl nsw i32 %117, 1
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %134, i64 %141
  %143 = bitcast i8* %142 to i16*
  %144 = load i16, i16* %143, align 1
  %145 = call i16 @llvm.bswap.i16(i16 %139) #17
  %146 = call i16 @llvm.bswap.i16(i16 %144) #17
  %147 = uitofp i16 %145 to float
  %148 = fmul float %147, 0x3EF0001000000000
  %149 = uitofp i16 %146 to float
  %150 = fmul float %149, 0x3EF0001000000000
  br label %151

151:                                              ; preds = %122, %133
  %152 = phi float [ %127, %122 ], [ %148, %133 ]
  %153 = phi float [ %132, %122 ], [ %150, %133 ]
  %154 = fsub float %153, %152
  %155 = fmul float %119, %154
  %156 = fadd float %152, %155
  br label %161

157:                                              ; preds = %105
  %158 = call float @skcms_TransferFunction_eval(%struct.skcms_TransferFunction* %44, float %65) #17
  %159 = load i32, i32* %14, align 8
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %214, label %161

161:                                              ; preds = %151, %157
  %162 = phi float [ %156, %151 ], [ %158, %157 ]
  %163 = phi i32 [ %106, %151 ], [ %159, %157 ]
  %164 = add i32 %163, -1
  %165 = uitofp i32 %164 to float
  %166 = fmul float %76, %165
  %167 = fptosi float %166 to i32
  %168 = fadd float %166, 1.000000e+00
  %169 = bitcast float %168 to i32
  %170 = add nsw i32 %169, -1
  %171 = bitcast i32 %170 to float
  %172 = fptosi float %171 to i32
  %173 = sitofp i32 %167 to float
  %174 = fsub float %166, %173
  %175 = load i8*, i8** %41, align 8
  %176 = icmp eq i8* %175, null
  br i1 %176, label %188, label %177

177:                                              ; preds = %161
  %178 = sext i32 %167 to i64
  %179 = getelementptr inbounds i8, i8* %175, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = uitofp i8 %180 to float
  %182 = fmul float %181, 0x3F70101020000000
  %183 = sext i32 %172 to i64
  %184 = getelementptr inbounds i8, i8* %175, i64 %183
  %185 = load i8, i8* %184, align 1
  %186 = uitofp i8 %185 to float
  %187 = fmul float %186, 0x3F70101020000000
  br label %206

188:                                              ; preds = %161
  %189 = load i8*, i8** %42, align 8
  %190 = shl nsw i32 %167, 1
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds i8, i8* %189, i64 %191
  %193 = bitcast i8* %192 to i16*
  %194 = load i16, i16* %193, align 1
  %195 = shl nsw i32 %172, 1
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds i8, i8* %189, i64 %196
  %198 = bitcast i8* %197 to i16*
  %199 = load i16, i16* %198, align 1
  %200 = call i16 @llvm.bswap.i16(i16 %194) #17
  %201 = call i16 @llvm.bswap.i16(i16 %199) #17
  %202 = uitofp i16 %200 to float
  %203 = fmul float %202, 0x3EF0001000000000
  %204 = uitofp i16 %201 to float
  %205 = fmul float %204, 0x3EF0001000000000
  br label %206

206:                                              ; preds = %177, %188
  %207 = phi float [ %182, %177 ], [ %203, %188 ]
  %208 = phi float [ %187, %177 ], [ %205, %188 ]
  %209 = fsub float %208, %207
  %210 = fmul float %174, %209
  %211 = fadd float %207, %210
  %212 = fsub float %162, %211
  %213 = fdiv float %212, %22
  store float %213, float* %25, align 4
  br label %223

214:                                              ; preds = %157
  %215 = call float @skcms_TransferFunction_eval(%struct.skcms_TransferFunction* %44, float %72) #17
  %216 = load i32, i32* %14, align 8
  %217 = fsub float %158, %215
  %218 = fdiv float %217, %22
  store float %218, float* %25, align 4
  %219 = icmp eq i32 %216, 0
  br i1 %219, label %220, label %223

220:                                              ; preds = %214
  %221 = call float @skcms_TransferFunction_eval(%struct.skcms_TransferFunction* %44, float %72) #17
  %222 = load float, float* %25, align 4
  br label %274

223:                                              ; preds = %206, %214
  %224 = phi float [ %213, %206 ], [ %218, %214 ]
  %225 = phi i32 [ %163, %206 ], [ %216, %214 ]
  %226 = add i32 %225, -1
  %227 = uitofp i32 %226 to float
  %228 = fmul float %76, %227
  %229 = fptosi float %228 to i32
  %230 = fadd float %228, 1.000000e+00
  %231 = bitcast float %230 to i32
  %232 = add nsw i32 %231, -1
  %233 = bitcast i32 %232 to float
  %234 = fptosi float %233 to i32
  %235 = sitofp i32 %229 to float
  %236 = fsub float %228, %235
  %237 = load i8*, i8** %41, align 8
  %238 = icmp eq i8* %237, null
  br i1 %238, label %250, label %239

239:                                              ; preds = %223
  %240 = sext i32 %229 to i64
  %241 = getelementptr inbounds i8, i8* %237, i64 %240
  %242 = load i8, i8* %241, align 1
  %243 = uitofp i8 %242 to float
  %244 = fmul float %243, 0x3F70101020000000
  %245 = sext i32 %234 to i64
  %246 = getelementptr inbounds i8, i8* %237, i64 %245
  %247 = load i8, i8* %246, align 1
  %248 = uitofp i8 %247 to float
  %249 = fmul float %248, 0x3F70101020000000
  br label %268

250:                                              ; preds = %223
  %251 = load i8*, i8** %42, align 8
  %252 = shl nsw i32 %229, 1
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds i8, i8* %251, i64 %253
  %255 = bitcast i8* %254 to i16*
  %256 = load i16, i16* %255, align 1
  %257 = shl nsw i32 %234, 1
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds i8, i8* %251, i64 %258
  %260 = bitcast i8* %259 to i16*
  %261 = load i16, i16* %260, align 1
  %262 = call i16 @llvm.bswap.i16(i16 %256) #17
  %263 = call i16 @llvm.bswap.i16(i16 %261) #17
  %264 = uitofp i16 %262 to float
  %265 = fmul float %264, 0x3EF0001000000000
  %266 = uitofp i16 %263 to float
  %267 = fmul float %266, 0x3EF0001000000000
  br label %268

268:                                              ; preds = %250, %239
  %269 = phi float [ %244, %239 ], [ %265, %250 ]
  %270 = phi float [ %249, %239 ], [ %267, %250 ]
  %271 = fsub float %270, %269
  %272 = fmul float %236, %271
  %273 = fadd float %269, %272
  br label %274

274:                                              ; preds = %220, %268
  %275 = phi float [ %222, %220 ], [ %224, %268 ]
  %276 = phi float [ %221, %220 ], [ %273, %268 ]
  %277 = fmul float %275, %71
  %278 = fmul float %22, %277
  %279 = fsub float %276, %278
  store float %279, float* %26, align 4
  store float 0.000000e+00, float* %29, align 4
  br label %1022

280:                                              ; preds = %103
  %281 = add nsw i32 %98, %15
  %282 = sdiv i32 %281, 2
  %283 = sitofp i32 %282 to float
  %284 = fdiv float %283, %40
  %285 = load i32, i32* %14, align 8
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %287, label %289

287:                                              ; preds = %280
  %288 = call float @skcms_TransferFunction_eval(%struct.skcms_TransferFunction* %44, float %284) #17
  br label %342

289:                                              ; preds = %280
  %290 = fcmp olt float %284, 1.000000e+00
  %291 = select i1 %290, float %284, float 1.000000e+00
  %292 = fcmp olt float %291, 0.000000e+00
  %293 = select i1 %292, float 0.000000e+00, float %291
  %294 = add i32 %285, -1
  %295 = uitofp i32 %294 to float
  %296 = fmul float %293, %295
  %297 = fptosi float %296 to i32
  %298 = fadd float %296, 1.000000e+00
  %299 = bitcast float %298 to i32
  %300 = add nsw i32 %299, -1
  %301 = bitcast i32 %300 to float
  %302 = fptosi float %301 to i32
  %303 = sitofp i32 %297 to float
  %304 = fsub float %296, %303
  %305 = load i8*, i8** %41, align 8
  %306 = icmp eq i8* %305, null
  br i1 %306, label %318, label %307

307:                                              ; preds = %289
  %308 = sext i32 %297 to i64
  %309 = getelementptr inbounds i8, i8* %305, i64 %308
  %310 = load i8, i8* %309, align 1
  %311 = uitofp i8 %310 to float
  %312 = fmul float %311, 0x3F70101020000000
  %313 = sext i32 %302 to i64
  %314 = getelementptr inbounds i8, i8* %305, i64 %313
  %315 = load i8, i8* %314, align 1
  %316 = uitofp i8 %315 to float
  %317 = fmul float %316, 0x3F70101020000000
  br label %336

318:                                              ; preds = %289
  %319 = load i8*, i8** %42, align 8
  %320 = shl nsw i32 %297, 1
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds i8, i8* %319, i64 %321
  %323 = bitcast i8* %322 to i16*
  %324 = load i16, i16* %323, align 1
  %325 = shl nsw i32 %302, 1
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds i8, i8* %319, i64 %326
  %328 = bitcast i8* %327 to i16*
  %329 = load i16, i16* %328, align 1
  %330 = call i16 @llvm.bswap.i16(i16 %324) #17
  %331 = call i16 @llvm.bswap.i16(i16 %329) #17
  %332 = uitofp i16 %330 to float
  %333 = fmul float %332, 0x3EF0001000000000
  %334 = uitofp i16 %331 to float
  %335 = fmul float %334, 0x3EF0001000000000
  br label %336

336:                                              ; preds = %318, %307
  %337 = phi float [ %312, %307 ], [ %333, %318 ]
  %338 = phi float [ %317, %307 ], [ %335, %318 ]
  %339 = fsub float %338, %337
  %340 = fmul float %304, %339
  %341 = fadd float %337, %340
  br label %342

342:                                              ; preds = %287, %336
  %343 = phi float [ %288, %287 ], [ %341, %336 ]
  %344 = bitcast float %343 to i32
  %345 = sitofp i32 %344 to float
  %346 = fmul float %345, 0x3E80000000000000
  %347 = and i32 %344, 8388607
  %348 = or i32 %347, 1056964608
  %349 = bitcast i32 %348 to float
  %350 = fadd float %346, 0xC05F0E6EE0000000
  %351 = fmul float %349, 0x3FF7F7EEA0000000
  %352 = fsub float %350, %351
  %353 = fadd float %349, 0x3FD6889F20000000
  %354 = fdiv float 0x3FFB9D3460000000, %353
  %355 = fsub float %352, %354
  %356 = bitcast float %284 to i32
  %357 = sitofp i32 %356 to float
  %358 = fmul float %357, 0x3E80000000000000
  %359 = and i32 %356, 8388607
  %360 = or i32 %359, 1056964608
  %361 = bitcast i32 %360 to float
  %362 = fadd float %358, 0xC05F0E6EE0000000
  %363 = fmul float %361, 0x3FF7F7EEA0000000
  %364 = fsub float %362, %363
  %365 = fadd float %361, 0x3FD6889F20000000
  %366 = fdiv float 0x3FFB9D3460000000, %365
  %367 = fsub float %364, %366
  %368 = fdiv float %355, %367
  store float %368, float* %24, align 4
  store float 1.000000e+00, float* %25, align 4
  store float 0.000000e+00, float* %26, align 4
  %369 = load float, float* %27, align 4
  %370 = load float, float* %28, align 4
  %371 = fmul float %369, %370
  %372 = load float, float* %30, align 4
  %373 = fadd float %371, %372
  %374 = fadd float %370, 0.000000e+00
  %375 = fcmp oeq float %374, 0.000000e+00
  %376 = fcmp oeq float %374, 1.000000e+00
  %377 = or i1 %375, %376
  br i1 %377, label %411, label %378

378:                                              ; preds = %342
  %379 = bitcast float %374 to i32
  %380 = sitofp i32 %379 to float
  %381 = fmul float %380, 0x3E80000000000000
  %382 = and i32 %379, 8388607
  %383 = or i32 %382, 1056964608
  %384 = bitcast i32 %383 to float
  %385 = fadd float %381, 0xC05F0E6EE0000000
  %386 = fmul float %384, 0x3FF7F7EEA0000000
  %387 = fsub float %385, %386
  %388 = fadd float %384, 0x3FD6889F20000000
  %389 = fdiv float 0x3FFB9D3460000000, %388
  %390 = fsub float %387, %389
  %391 = fmul float %368, %390
  %392 = fptosi float %391 to i32
  %393 = sitofp i32 %392 to float
  %394 = fcmp olt float %391, %393
  %395 = fadd float %393, -1.000000e+00
  %396 = select i1 %394, float %395, float %393
  %397 = fsub float %391, %396
  %398 = fadd float %391, 0x405E518A20000000
  %399 = fmul float %397, 0x3FF7D791A0000000
  %400 = fsub float %398, %399
  %401 = fsub float 0x40135EBF00000000, %397
  %402 = fdiv float 0x403BBA5FC0000000, %401
  %403 = fadd float %400, %402
  %404 = fmul float %403, 0x4160000000000000
  %405 = fcmp ult float %404, 0x41E0000000000000
  br i1 %405, label %406, label %411

406:                                              ; preds = %378
  %407 = fcmp olt float %404, 0.000000e+00
  br i1 %407, label %411, label %408

408:                                              ; preds = %406
  %409 = fptosi float %404 to i32
  %410 = bitcast i32 %409 to float
  br label %411

411:                                              ; preds = %342, %378, %406, %408
  %412 = phi float [ %374, %342 ], [ %410, %408 ], [ 0x7FF0000000000000, %378 ], [ 0.000000e+00, %406 ]
  %413 = fsub float %373, %412
  store float %413, float* %29, align 4
  %414 = call zeroext i1 @skcms_TransferFunction_invert(%struct.skcms_TransferFunction* nonnull %6, %struct.skcms_TransferFunction* nonnull %7)
  br i1 %414, label %415, label %1063

415:                                              ; preds = %411
  %416 = load float, float* %33, align 4
  %417 = fcmp olt float %416, 0.000000e+00
  br i1 %417, label %1063, label %418

418:                                              ; preds = %415
  %419 = load float, float* %36, align 16
  %420 = fmul float %416, %419
  %421 = load float, float* %34, align 8
  %422 = fadd float %420, %421
  %423 = fcmp olt float %422, 0.000000e+00
  br i1 %423, label %424, label %427

424:                                              ; preds = %418
  %425 = fsub float -0.000000e+00, %420
  store float %425, float* %34, align 8
  %426 = fsub float %420, %420
  br label %427

427:                                              ; preds = %424, %418
  %428 = phi float [ %425, %424 ], [ %421, %418 ]
  %429 = phi float [ %426, %424 ], [ %422, %418 ]
  %430 = load float, float* %35, align 4
  %431 = fmul float %419, %430
  %432 = load float, float* %38, align 8
  %433 = fadd float %431, %432
  %434 = fcmp oeq float %429, 0.000000e+00
  %435 = fcmp oeq float %429, 1.000000e+00
  %436 = or i1 %434, %435
  %437 = load float, float* %32, align 16
  br i1 %436, label %471, label %438

438:                                              ; preds = %427
  %439 = bitcast float %429 to i32
  %440 = sitofp i32 %439 to float
  %441 = fmul float %440, 0x3E80000000000000
  %442 = and i32 %439, 8388607
  %443 = or i32 %442, 1056964608
  %444 = bitcast i32 %443 to float
  %445 = fadd float %441, 0xC05F0E6EE0000000
  %446 = fmul float %444, 0x3FF7F7EEA0000000
  %447 = fsub float %445, %446
  %448 = fadd float %444, 0x3FD6889F20000000
  %449 = fdiv float 0x3FFB9D3460000000, %448
  %450 = fsub float %447, %449
  %451 = fmul float %437, %450
  %452 = fptosi float %451 to i32
  %453 = sitofp i32 %452 to float
  %454 = fcmp olt float %451, %453
  %455 = fadd float %453, -1.000000e+00
  %456 = select i1 %454, float %455, float %453
  %457 = fsub float %451, %456
  %458 = fadd float %451, 0x405E518A20000000
  %459 = fmul float %457, 0x3FF7D791A0000000
  %460 = fsub float %458, %459
  %461 = fsub float 0x40135EBF00000000, %457
  %462 = fdiv float 0x403BBA5FC0000000, %461
  %463 = fadd float %460, %462
  %464 = fmul float %463, 0x4160000000000000
  %465 = fcmp ult float %464, 0x41E0000000000000
  br i1 %465, label %466, label %471

466:                                              ; preds = %438
  %467 = fcmp olt float %464, 0.000000e+00
  br i1 %467, label %471, label %468

468:                                              ; preds = %466
  %469 = fptosi float %464 to i32
  %470 = bitcast i32 %469 to float
  br label %471

471:                                              ; preds = %468, %466, %438, %427
  %472 = phi float [ %470, %468 ], [ 0x7FF0000000000000, %438 ], [ 0.000000e+00, %466 ], [ %429, %427 ]
  %473 = fsub float %433, %472
  store float %473, float* %37, align 4
  %474 = call fastcc float @_ZL27max_roundtrip_error_checkedPK11skcms_CurvePK22skcms_TransferFunction(%union.skcms_Curve* nonnull %0, %struct.skcms_TransferFunction* nonnull %7) #17
  %475 = fcmp olt float %474, 0x7FF0000000000000
  %476 = insertelement <4 x float> undef, float %437, i32 0
  %477 = insertelement <4 x float> %476, float %416, i32 1
  %478 = insertelement <4 x float> %477, float %428, i32 2
  %479 = insertelement <4 x float> %478, float %430, i32 3
  br i1 %475, label %480, label %485

480:                                              ; preds = %471
  %481 = load <4 x float>, <4 x float>* %85, align 16
  %482 = load float, float* %36, align 16
  %483 = load float, float* %37, align 4
  %484 = load float, float* %38, align 8
  br label %485

485:                                              ; preds = %480, %471
  %486 = phi float [ %484, %480 ], [ %432, %471 ]
  %487 = phi float [ %483, %480 ], [ %473, %471 ]
  %488 = phi float [ %482, %480 ], [ %419, %471 ]
  %489 = phi float [ %474, %480 ], [ 0x7FF0000000000000, %471 ]
  %490 = phi <4 x float> [ %481, %480 ], [ %479, %471 ]
  %491 = sitofp i32 %98 to float
  %492 = fmul float %22, %491
  %493 = sub nsw i32 %15, %98
  %494 = icmp sgt i32 %493, 0
  br label %495

495:                                              ; preds = %1006, %485
  %496 = phi i32 [ 0, %485 ], [ %1012, %1006 ]
  %497 = phi float [ %489, %485 ], [ %1010, %1006 ]
  %498 = phi float [ %488, %485 ], [ %1009, %1006 ]
  %499 = phi float [ %487, %485 ], [ %1008, %1006 ]
  %500 = phi float [ %486, %485 ], [ %1007, %1006 ]
  %501 = phi <4 x float> [ %490, %485 ], [ %1011, %1006 ]
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %45) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %45, i8 0, i64 36, i1 false) #17
  br i1 %494, label %518, label %859

502:                                              ; preds = %826
  store float %834, float* %46, align 4
  store float %836, float* %47, align 4
  %503 = extractelement <4 x float> %854, i32 0
  store float %503, float* %48, align 4
  %504 = extractelement <4 x float> %853, i32 1
  store float %504, float* %49, align 4
  %505 = extractelement <4 x float> %853, i32 2
  store float %505, float* %50, align 4
  %506 = extractelement <4 x float> %853, i32 0
  store float %506, float* %51, align 4
  store float %848, float* %52, align 4
  %507 = extractelement <4 x float> %853, i32 3
  store float %507, float* %53, align 4
  %508 = extractelement <4 x float> %854, i32 1
  store float %508, float* %54, align 4
  %509 = fcmp oeq float %834, 0.000000e+00
  %510 = fcmp oeq float %504, 0.000000e+00
  %511 = and i1 %509, %510
  %512 = fcmp oeq float %848, 0.000000e+00
  %513 = and i1 %511, %512
  %514 = fcmp oeq float %836, 0.000000e+00
  %515 = and i1 %514, %513
  %516 = fcmp oeq float %503, 0.000000e+00
  %517 = and i1 %516, %515
  br i1 %517, label %859, label %865

518:                                              ; preds = %495, %826
  %519 = phi float [ %856, %826 ], [ 0.000000e+00, %495 ]
  %520 = phi float [ %848, %826 ], [ 0.000000e+00, %495 ]
  %521 = phi float [ %836, %826 ], [ 0.000000e+00, %495 ]
  %522 = phi float [ %834, %826 ], [ 0.000000e+00, %495 ]
  %523 = phi i32 [ %857, %826 ], [ 0, %495 ]
  %524 = phi <4 x float> [ %853, %826 ], [ zeroinitializer, %495 ]
  %525 = phi <4 x float> [ %854, %826 ], [ zeroinitializer, %495 ]
  %526 = sitofp i32 %523 to float
  %527 = fmul float %22, %526
  %528 = fadd float %492, %527
  %529 = load i32, i32* %14, align 8
  %530 = icmp eq i32 %529, 0
  br i1 %530, label %531, label %533

531:                                              ; preds = %518
  %532 = call float @skcms_TransferFunction_eval(%struct.skcms_TransferFunction* %44, float %528) #17
  br label %586

533:                                              ; preds = %518
  %534 = fcmp olt float %528, 1.000000e+00
  %535 = select i1 %534, float %528, float 1.000000e+00
  %536 = fcmp olt float %535, 0.000000e+00
  %537 = select i1 %536, float 0.000000e+00, float %535
  %538 = add i32 %529, -1
  %539 = uitofp i32 %538 to float
  %540 = fmul float %537, %539
  %541 = fptosi float %540 to i32
  %542 = fadd float %540, 1.000000e+00
  %543 = bitcast float %542 to i32
  %544 = add nsw i32 %543, -1
  %545 = bitcast i32 %544 to float
  %546 = fptosi float %545 to i32
  %547 = sitofp i32 %541 to float
  %548 = fsub float %540, %547
  %549 = load i8*, i8** %41, align 8
  %550 = icmp eq i8* %549, null
  br i1 %550, label %562, label %551

551:                                              ; preds = %533
  %552 = sext i32 %541 to i64
  %553 = getelementptr inbounds i8, i8* %549, i64 %552
  %554 = load i8, i8* %553, align 1
  %555 = uitofp i8 %554 to float
  %556 = fmul float %555, 0x3F70101020000000
  %557 = sext i32 %546 to i64
  %558 = getelementptr inbounds i8, i8* %549, i64 %557
  %559 = load i8, i8* %558, align 1
  %560 = uitofp i8 %559 to float
  %561 = fmul float %560, 0x3F70101020000000
  br label %580

562:                                              ; preds = %533
  %563 = load i8*, i8** %42, align 8
  %564 = shl nsw i32 %541, 1
  %565 = sext i32 %564 to i64
  %566 = getelementptr inbounds i8, i8* %563, i64 %565
  %567 = bitcast i8* %566 to i16*
  %568 = load i16, i16* %567, align 1
  %569 = shl nsw i32 %546, 1
  %570 = sext i32 %569 to i64
  %571 = getelementptr inbounds i8, i8* %563, i64 %570
  %572 = bitcast i8* %571 to i16*
  %573 = load i16, i16* %572, align 1
  %574 = call i16 @llvm.bswap.i16(i16 %568) #17
  %575 = call i16 @llvm.bswap.i16(i16 %573) #17
  %576 = uitofp i16 %574 to float
  %577 = fmul float %576, 0x3EF0001000000000
  %578 = uitofp i16 %575 to float
  %579 = fmul float %578, 0x3EF0001000000000
  br label %580

580:                                              ; preds = %562, %551
  %581 = phi float [ %556, %551 ], [ %577, %562 ]
  %582 = phi float [ %561, %551 ], [ %579, %562 ]
  %583 = fsub float %582, %581
  %584 = fmul float %548, %583
  %585 = fadd float %581, %584
  br label %586

586:                                              ; preds = %580, %531
  %587 = phi float [ %532, %531 ], [ %585, %580 ]
  %588 = load float, float* %32, align 16
  %589 = load float, float* %33, align 4
  %590 = load float, float* %34, align 8
  %591 = load float, float* %35, align 4
  %592 = load float, float* %36, align 16
  %593 = load float, float* %38, align 8
  %594 = fmul float %587, %589
  %595 = fadd float %594, %590
  %596 = fcmp ogt float %595, 0.000000e+00
  %597 = select i1 %596, float %595, float 0.000000e+00
  %598 = fmul float %589, %592
  %599 = fadd float %590, %598
  %600 = bitcast float %597 to i32
  %601 = sitofp i32 %600 to float
  %602 = fmul float %601, 0x3E80000000000000
  %603 = and i32 %600, 8388607
  %604 = or i32 %603, 1056964608
  %605 = bitcast i32 %604 to float
  %606 = fadd float %602, 0xC05F0E6EE0000000
  %607 = fmul float %605, 0x3FF7F7EEA0000000
  %608 = fsub float %606, %607
  %609 = fadd float %605, 0x3FD6889F20000000
  %610 = fdiv float 0x3FFB9D3460000000, %609
  %611 = fsub float %608, %610
  %612 = fmul float %611, 0x3FE62E4300000000
  %613 = fcmp oeq float %597, 0.000000e+00
  %614 = fcmp oeq float %597, 1.000000e+00
  %615 = or i1 %613, %614
  br i1 %615, label %637, label %616

616:                                              ; preds = %586
  %617 = fmul float %588, %611
  %618 = fptosi float %617 to i32
  %619 = sitofp i32 %618 to float
  %620 = fcmp olt float %617, %619
  %621 = fadd float %619, -1.000000e+00
  %622 = select i1 %620, float %621, float %619
  %623 = fsub float %617, %622
  %624 = fadd float %617, 0x405E518A20000000
  %625 = fmul float %623, 0x3FF7D791A0000000
  %626 = fsub float %624, %625
  %627 = fsub float 0x40135EBF00000000, %623
  %628 = fdiv float 0x403BBA5FC0000000, %627
  %629 = fadd float %626, %628
  %630 = fmul float %629, 0x4160000000000000
  %631 = fcmp ult float %630, 0x41E0000000000000
  br i1 %631, label %632, label %637

632:                                              ; preds = %616
  %633 = fcmp olt float %630, 0.000000e+00
  br i1 %633, label %637, label %634

634:                                              ; preds = %632
  %635 = fptosi float %630 to i32
  %636 = bitcast i32 %635 to float
  br label %637

637:                                              ; preds = %634, %632, %616, %586
  %638 = phi float [ %597, %586 ], [ %636, %634 ], [ 0x7FF0000000000000, %616 ], [ 0.000000e+00, %632 ]
  %639 = fmul float %612, %638
  %640 = bitcast float %599 to i32
  %641 = sitofp i32 %640 to float
  %642 = fmul float %641, 0x3E80000000000000
  %643 = and i32 %640, 8388607
  %644 = or i32 %643, 1056964608
  %645 = bitcast i32 %644 to float
  %646 = fadd float %642, 0xC05F0E6EE0000000
  %647 = fmul float %645, 0x3FF7F7EEA0000000
  %648 = fsub float %646, %647
  %649 = fadd float %645, 0x3FD6889F20000000
  %650 = fdiv float 0x3FFB9D3460000000, %649
  %651 = fsub float %648, %650
  %652 = fmul float %651, 0x3FE62E4300000000
  %653 = fcmp oeq float %599, 0.000000e+00
  %654 = fcmp oeq float %599, 1.000000e+00
  %655 = or i1 %653, %654
  br i1 %655, label %677, label %656

656:                                              ; preds = %637
  %657 = fmul float %588, %651
  %658 = fptosi float %657 to i32
  %659 = sitofp i32 %658 to float
  %660 = fcmp olt float %657, %659
  %661 = fadd float %659, -1.000000e+00
  %662 = select i1 %660, float %661, float %659
  %663 = fsub float %657, %662
  %664 = fadd float %657, 0x405E518A20000000
  %665 = fmul float %663, 0x3FF7D791A0000000
  %666 = fsub float %664, %665
  %667 = fsub float 0x40135EBF00000000, %663
  %668 = fdiv float 0x403BBA5FC0000000, %667
  %669 = fadd float %666, %668
  %670 = fmul float %669, 0x4160000000000000
  %671 = fcmp ult float %670, 0x41E0000000000000
  br i1 %671, label %672, label %677

672:                                              ; preds = %656
  %673 = fcmp olt float %670, 0.000000e+00
  br i1 %673, label %677, label %674

674:                                              ; preds = %672
  %675 = fptosi float %670 to i32
  %676 = bitcast i32 %675 to float
  br label %677

677:                                              ; preds = %674, %672, %656, %637
  %678 = phi float [ %599, %637 ], [ %676, %674 ], [ 0x7FF0000000000000, %656 ], [ 0.000000e+00, %672 ]
  %679 = fmul float %652, %678
  %680 = fsub float %639, %679
  %681 = fmul float %587, %588
  %682 = fadd float %588, -1.000000e+00
  br i1 %615, label %704, label %683

683:                                              ; preds = %677
  %684 = fmul float %682, %611
  %685 = fptosi float %684 to i32
  %686 = sitofp i32 %685 to float
  %687 = fcmp olt float %684, %686
  %688 = fadd float %686, -1.000000e+00
  %689 = select i1 %687, float %688, float %686
  %690 = fsub float %684, %689
  %691 = fadd float %684, 0x405E518A20000000
  %692 = fmul float %690, 0x3FF7D791A0000000
  %693 = fsub float %691, %692
  %694 = fsub float 0x40135EBF00000000, %690
  %695 = fdiv float 0x403BBA5FC0000000, %694
  %696 = fadd float %693, %695
  %697 = fmul float %696, 0x4160000000000000
  %698 = fcmp ult float %697, 0x41E0000000000000
  br i1 %698, label %699, label %704

699:                                              ; preds = %683
  %700 = fcmp olt float %697, 0.000000e+00
  br i1 %700, label %704, label %701

701:                                              ; preds = %699
  %702 = fptosi float %697 to i32
  %703 = bitcast i32 %702 to float
  br label %704

704:                                              ; preds = %701, %699, %683, %677
  %705 = phi float [ %597, %677 ], [ %703, %701 ], [ 0x7FF0000000000000, %683 ], [ 0.000000e+00, %699 ]
  %706 = fmul float %681, %705
  %707 = fmul float %588, %592
  br i1 %655, label %729, label %708

708:                                              ; preds = %704
  %709 = fmul float %682, %651
  %710 = fptosi float %709 to i32
  %711 = sitofp i32 %710 to float
  %712 = fcmp olt float %709, %711
  %713 = fadd float %711, -1.000000e+00
  %714 = select i1 %712, float %713, float %711
  %715 = fsub float %709, %714
  %716 = fadd float %709, 0x405E518A20000000
  %717 = fmul float %715, 0x3FF7D791A0000000
  %718 = fsub float %716, %717
  %719 = fsub float 0x40135EBF00000000, %715
  %720 = fdiv float 0x403BBA5FC0000000, %719
  %721 = fadd float %718, %720
  %722 = fmul float %721, 0x4160000000000000
  %723 = fcmp ult float %722, 0x41E0000000000000
  br i1 %723, label %724, label %729

724:                                              ; preds = %708
  %725 = fcmp olt float %722, 0.000000e+00
  br i1 %725, label %729, label %726

726:                                              ; preds = %724
  %727 = fptosi float %722 to i32
  %728 = bitcast i32 %727 to float
  br label %729

729:                                              ; preds = %726, %724, %708, %704
  %730 = phi float [ %599, %704 ], [ %728, %726 ], [ 0x7FF0000000000000, %708 ], [ 0.000000e+00, %724 ]
  %731 = fmul float %707, %730
  %732 = fsub float %706, %731
  br i1 %615, label %754, label %733

733:                                              ; preds = %729
  %734 = fmul float %682, %611
  %735 = fptosi float %734 to i32
  %736 = sitofp i32 %735 to float
  %737 = fcmp olt float %734, %736
  %738 = fadd float %736, -1.000000e+00
  %739 = select i1 %737, float %738, float %736
  %740 = fsub float %734, %739
  %741 = fadd float %734, 0x405E518A20000000
  %742 = fmul float %740, 0x3FF7D791A0000000
  %743 = fsub float %741, %742
  %744 = fsub float 0x40135EBF00000000, %740
  %745 = fdiv float 0x403BBA5FC0000000, %744
  %746 = fadd float %743, %745
  %747 = fmul float %746, 0x4160000000000000
  %748 = fcmp ult float %747, 0x41E0000000000000
  br i1 %748, label %749, label %754

749:                                              ; preds = %733
  %750 = fcmp olt float %747, 0.000000e+00
  br i1 %750, label %754, label %751

751:                                              ; preds = %749
  %752 = fptosi float %747 to i32
  %753 = bitcast i32 %752 to float
  br label %754

754:                                              ; preds = %751, %749, %733, %729
  %755 = phi float [ %597, %729 ], [ %753, %751 ], [ 0x7FF0000000000000, %733 ], [ 0.000000e+00, %749 ]
  %756 = fmul float %588, %755
  br i1 %655, label %778, label %757

757:                                              ; preds = %754
  %758 = fmul float %682, %651
  %759 = fptosi float %758 to i32
  %760 = sitofp i32 %759 to float
  %761 = fcmp olt float %758, %760
  %762 = fadd float %760, -1.000000e+00
  %763 = select i1 %761, float %762, float %760
  %764 = fsub float %758, %763
  %765 = fadd float %758, 0x405E518A20000000
  %766 = fmul float %764, 0x3FF7D791A0000000
  %767 = fsub float %765, %766
  %768 = fsub float 0x40135EBF00000000, %764
  %769 = fdiv float 0x403BBA5FC0000000, %768
  %770 = fadd float %767, %769
  %771 = fmul float %770, 0x4160000000000000
  %772 = fcmp ult float %771, 0x41E0000000000000
  br i1 %772, label %773, label %778

773:                                              ; preds = %757
  %774 = fcmp olt float %771, 0.000000e+00
  br i1 %774, label %778, label %775

775:                                              ; preds = %773
  %776 = fptosi float %771 to i32
  %777 = bitcast i32 %776 to float
  br label %778

778:                                              ; preds = %775, %773, %757, %754
  %779 = phi float [ %599, %754 ], [ %777, %775 ], [ 0x7FF0000000000000, %757 ], [ 0.000000e+00, %773 ]
  %780 = fmul float %588, %779
  %781 = fsub float %756, %780
  br i1 %615, label %803, label %782

782:                                              ; preds = %778
  %783 = fmul float %588, %611
  %784 = fptosi float %783 to i32
  %785 = sitofp i32 %784 to float
  %786 = fcmp olt float %783, %785
  %787 = fadd float %785, -1.000000e+00
  %788 = select i1 %786, float %787, float %785
  %789 = fsub float %783, %788
  %790 = fadd float %783, 0x405E518A20000000
  %791 = fmul float %789, 0x3FF7D791A0000000
  %792 = fsub float %790, %791
  %793 = fsub float 0x40135EBF00000000, %789
  %794 = fdiv float 0x403BBA5FC0000000, %793
  %795 = fadd float %792, %794
  %796 = fmul float %795, 0x4160000000000000
  %797 = fcmp ult float %796, 0x41E0000000000000
  br i1 %797, label %798, label %803

798:                                              ; preds = %782
  %799 = fcmp olt float %796, 0.000000e+00
  br i1 %799, label %803, label %800

800:                                              ; preds = %798
  %801 = fptosi float %796 to i32
  %802 = bitcast i32 %801 to float
  br label %803

803:                                              ; preds = %800, %798, %782, %778
  %804 = phi float [ %597, %778 ], [ %802, %800 ], [ 0x7FF0000000000000, %782 ], [ 0.000000e+00, %798 ]
  br i1 %655, label %826, label %805

805:                                              ; preds = %803
  %806 = fmul float %588, %651
  %807 = fptosi float %806 to i32
  %808 = sitofp i32 %807 to float
  %809 = fcmp olt float %806, %808
  %810 = fadd float %808, -1.000000e+00
  %811 = select i1 %809, float %810, float %808
  %812 = fsub float %806, %811
  %813 = fadd float %806, 0x405E518A20000000
  %814 = fmul float %812, 0x3FF7D791A0000000
  %815 = fsub float %813, %814
  %816 = fsub float 0x40135EBF00000000, %812
  %817 = fdiv float 0x403BBA5FC0000000, %816
  %818 = fadd float %815, %817
  %819 = fmul float %818, 0x4160000000000000
  %820 = fcmp ult float %819, 0x41E0000000000000
  br i1 %820, label %821, label %826

821:                                              ; preds = %805
  %822 = fcmp olt float %819, 0.000000e+00
  br i1 %822, label %826, label %823

823:                                              ; preds = %821
  %824 = fptosi float %819 to i32
  %825 = bitcast i32 %824 to float
  br label %826

826:                                              ; preds = %823, %821, %805, %803
  %827 = phi float [ %599, %803 ], [ %825, %823 ], [ 0x7FF0000000000000, %805 ], [ 0.000000e+00, %821 ]
  %828 = fsub float %804, %827
  %829 = fmul float %591, %592
  %830 = fadd float %829, %828
  %831 = fadd float %593, %830
  %832 = fsub float %528, %831
  %833 = fmul float %680, %680
  %834 = fadd float %522, %833
  %835 = fmul float %680, %732
  %836 = fadd float %521, %835
  %837 = fmul float %732, %732
  %838 = fmul float %732, %781
  %839 = insertelement <4 x float> undef, float %680, i32 0
  %840 = insertelement <4 x float> %839, float %781, i32 1
  %841 = insertelement <4 x float> %840, float %680, i32 2
  %842 = insertelement <4 x float> %841, float %732, i32 3
  %843 = insertelement <2 x float> undef, float %781, i32 0
  %844 = insertelement <2 x float> %843, float %832, i32 1
  %845 = shufflevector <2 x float> %844, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %846 = fmul <4 x float> %842, %845
  %847 = extractelement <4 x float> %846, i32 0
  %848 = fadd float %520, %847
  %849 = insertelement <4 x float> undef, float %838, i32 0
  %850 = insertelement <4 x float> %849, float %835, i32 1
  %851 = insertelement <4 x float> %850, float %837, i32 2
  %852 = insertelement <4 x float> %851, float %838, i32 3
  %853 = fadd <4 x float> %524, %852
  %854 = fadd <4 x float> %525, %846
  %855 = fmul float %781, %832
  %856 = fadd float %519, %855
  %857 = add nuw nsw i32 %523, 1
  %858 = icmp eq i32 %857, %493
  br i1 %858, label %502, label %518

859:                                              ; preds = %502, %495
  %860 = phi float [ %848, %502 ], [ 0.000000e+00, %495 ]
  %861 = phi float [ %836, %502 ], [ 0.000000e+00, %495 ]
  %862 = phi float [ %856, %502 ], [ 0.000000e+00, %495 ]
  %863 = phi <4 x float> [ %853, %502 ], [ zeroinitializer, %495 ]
  %864 = phi <4 x float> [ %854, %502 ], [ zeroinitializer, %495 ]
  store float 1.000000e+00, float* %46, align 4
  br label %865

865:                                              ; preds = %859, %502
  %866 = phi float [ %848, %502 ], [ %860, %859 ]
  %867 = phi float [ %836, %502 ], [ %861, %859 ]
  %868 = phi float [ %856, %502 ], [ %862, %859 ]
  %869 = phi <4 x float> [ %853, %502 ], [ %863, %859 ]
  %870 = phi <4 x float> [ %854, %502 ], [ %864, %859 ]
  %871 = fcmp oeq float %867, 0.000000e+00
  br i1 %871, label %915, label %923

872:                                              ; preds = %938
  %873 = load float, float* %56, align 4
  %874 = load float, float* %57, align 4
  %875 = load float, float* %58, align 4
  %876 = load float, float* %59, align 4
  %877 = extractelement <4 x float> %870, i32 2
  %878 = shufflevector <4 x float> %870, <4 x float> undef, <2 x i32> <i32 2, i32 2>
  %879 = insertelement <2 x float> undef, float %873, i32 0
  %880 = insertelement <2 x float> %879, float %876, i32 1
  %881 = fmul <2 x float> %878, %880
  %882 = load float, float* %60, align 4
  %883 = extractelement <4 x float> %870, i32 3
  %884 = shufflevector <4 x float> %870, <4 x float> undef, <2 x i32> <i32 3, i32 3>
  %885 = insertelement <2 x float> undef, float %874, i32 0
  %886 = insertelement <2 x float> %885, float %882, i32 1
  %887 = fmul <2 x float> %884, %886
  %888 = fadd <2 x float> %881, %887
  %889 = load float, float* %61, align 4
  %890 = insertelement <2 x float> undef, float %868, i32 0
  %891 = shufflevector <2 x float> %890, <2 x float> undef, <2 x i32> zeroinitializer
  %892 = insertelement <2 x float> undef, float %875, i32 0
  %893 = insertelement <2 x float> %892, float %889, i32 1
  %894 = fmul <2 x float> %891, %893
  %895 = fadd <2 x float> %888, %894
  %896 = load float, float* %62, align 4
  %897 = fmul float %877, %896
  %898 = load float, float* %63, align 4
  %899 = fmul float %883, %898
  %900 = fadd float %897, %899
  %901 = load float, float* %64, align 4
  %902 = fmul float %868, %901
  %903 = fadd float %900, %902
  %904 = load <2 x float>, <2 x float>* %86, align 16
  %905 = fadd <2 x float> %895, %904
  %906 = extractelement <2 x float> %905, i32 0
  store float %906, float* %32, align 16
  %907 = extractelement <2 x float> %905, i32 1
  store float %907, float* %33, align 4
  %908 = load float, float* %34, align 8
  %909 = fadd float %903, %908
  store float %909, float* %34, align 8
  %910 = fmul <2 x float> %905, zeroinitializer
  %911 = fcmp oeq <2 x float> %910, zeroinitializer
  %912 = extractelement <2 x i1> %911, i32 0
  %913 = extractelement <2 x i1> %911, i32 1
  %914 = and i1 %912, %913
  br i1 %914, label %941, label %940

915:                                              ; preds = %865
  %916 = fcmp oeq <4 x float> %869, zeroinitializer
  %917 = shufflevector <4 x i1> %916, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %918 = and <4 x i1> %916, %917
  %919 = shufflevector <4 x i1> %918, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %920 = and <4 x i1> %918, %919
  %921 = extractelement <4 x i1> %920, i32 0
  br i1 %921, label %922, label %923

922:                                              ; preds = %915
  store float 1.000000e+00, float* %50, align 4
  br label %923

923:                                              ; preds = %922, %915, %865
  %924 = extractelement <4 x float> %870, i32 0
  %925 = fcmp oeq float %924, 0.000000e+00
  %926 = extractelement <4 x float> %869, i32 0
  %927 = fcmp oeq float %926, 0.000000e+00
  %928 = and i1 %925, %927
  br i1 %928, label %929, label %938

929:                                              ; preds = %923
  %930 = extractelement <4 x float> %870, i32 1
  %931 = fcmp oeq float %930, 0.000000e+00
  %932 = fcmp oeq float %866, 0.000000e+00
  %933 = and i1 %932, %931
  %934 = extractelement <4 x float> %869, i32 3
  %935 = fcmp oeq float %934, 0.000000e+00
  %936 = and i1 %935, %933
  br i1 %936, label %937, label %938

937:                                              ; preds = %929
  store float 1.000000e+00, float* %54, align 4
  br label %938

938:                                              ; preds = %937, %929, %923
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %55) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %55, i8 -1, i64 36, i1 false) #17
  %939 = call zeroext i1 @skcms_Matrix3x3_invert(%struct.skcms_Matrix3x3* nonnull %4, %struct.skcms_Matrix3x3* nonnull %5) #17
  br i1 %939, label %872, label %940

940:                                              ; preds = %938, %872
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %55) #17
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %45) #17
  br label %1017

941:                                              ; preds = %872
  %942 = fmul float %909, 0.000000e+00
  %943 = fcmp une float %942, 0.000000e+00
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %55) #17
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %45) #17
  %944 = fcmp olt float %907, 0.000000e+00
  %945 = or i1 %944, %943
  br i1 %945, label %1017, label %946

946:                                              ; preds = %941
  %947 = load float, float* %36, align 16
  %948 = fmul float %907, %947
  %949 = fadd float %909, %948
  %950 = fcmp olt float %949, 0.000000e+00
  br i1 %950, label %951, label %954

951:                                              ; preds = %946
  %952 = fsub float -0.000000e+00, %948
  store float %952, float* %34, align 8
  %953 = fsub float %948, %948
  br label %954

954:                                              ; preds = %951, %946
  %955 = phi float [ %953, %951 ], [ %949, %946 ]
  %956 = load float, float* %35, align 4
  %957 = fmul float %947, %956
  %958 = load float, float* %38, align 8
  %959 = fadd float %957, %958
  %960 = fcmp oeq float %955, 0.000000e+00
  %961 = fcmp oeq float %955, 1.000000e+00
  %962 = or i1 %960, %961
  br i1 %962, label %996, label %963

963:                                              ; preds = %954
  %964 = bitcast float %955 to i32
  %965 = sitofp i32 %964 to float
  %966 = fmul float %965, 0x3E80000000000000
  %967 = and i32 %964, 8388607
  %968 = or i32 %967, 1056964608
  %969 = bitcast i32 %968 to float
  %970 = fadd float %966, 0xC05F0E6EE0000000
  %971 = fmul float %969, 0x3FF7F7EEA0000000
  %972 = fsub float %970, %971
  %973 = fadd float %969, 0x3FD6889F20000000
  %974 = fdiv float 0x3FFB9D3460000000, %973
  %975 = fsub float %972, %974
  %976 = fmul float %906, %975
  %977 = fptosi float %976 to i32
  %978 = sitofp i32 %977 to float
  %979 = fcmp olt float %976, %978
  %980 = fadd float %978, -1.000000e+00
  %981 = select i1 %979, float %980, float %978
  %982 = fsub float %976, %981
  %983 = fadd float %976, 0x405E518A20000000
  %984 = fmul float %982, 0x3FF7D791A0000000
  %985 = fsub float %983, %984
  %986 = fsub float 0x40135EBF00000000, %982
  %987 = fdiv float 0x403BBA5FC0000000, %986
  %988 = fadd float %985, %987
  %989 = fmul float %988, 0x4160000000000000
  %990 = fcmp ult float %989, 0x41E0000000000000
  br i1 %990, label %991, label %996

991:                                              ; preds = %963
  %992 = fcmp olt float %989, 0.000000e+00
  br i1 %992, label %996, label %993

993:                                              ; preds = %991
  %994 = fptosi float %989 to i32
  %995 = bitcast i32 %994 to float
  br label %996

996:                                              ; preds = %993, %991, %963, %954
  %997 = phi float [ %955, %954 ], [ %995, %993 ], [ 0x7FF0000000000000, %963 ], [ 0.000000e+00, %991 ]
  %998 = fsub float %959, %997
  store float %998, float* %37, align 4
  %999 = call fastcc float @_ZL27max_roundtrip_error_checkedPK11skcms_CurvePK22skcms_TransferFunction(%union.skcms_Curve* nonnull %0, %struct.skcms_TransferFunction* nonnull %7) #17
  %1000 = fcmp olt float %999, %497
  br i1 %1000, label %1001, label %1006

1001:                                             ; preds = %996
  %1002 = load <4 x float>, <4 x float>* %87, align 16
  %1003 = load float, float* %36, align 16
  %1004 = load float, float* %37, align 4
  %1005 = load float, float* %38, align 8
  br label %1006

1006:                                             ; preds = %1001, %996
  %1007 = phi float [ %1005, %1001 ], [ %500, %996 ]
  %1008 = phi float [ %1004, %1001 ], [ %499, %996 ]
  %1009 = phi float [ %1003, %1001 ], [ %498, %996 ]
  %1010 = phi float [ %999, %1001 ], [ %497, %996 ]
  %1011 = phi <4 x float> [ %1002, %1001 ], [ %501, %996 ]
  %1012 = add nuw nsw i32 %496, 1
  %1013 = icmp eq i32 %1012, 8
  br i1 %1013, label %1014, label %495

1014:                                             ; preds = %1006
  store <4 x float> %1011, <4 x float>* %88, align 16
  store float %1009, float* %36, align 16
  store float %1008, float* %37, align 4
  store float %1007, float* %38, align 8
  %1015 = fmul float %1010, 0.000000e+00
  %1016 = fcmp oeq float %1015, 0.000000e+00
  br i1 %1016, label %1020, label %1063

1017:                                             ; preds = %941, %940
  store <4 x float> %501, <4 x float>* %89, align 16
  store float %498, float* %36, align 16
  store float %499, float* %37, align 4
  store float %500, float* %38, align 8
  %1018 = fmul float %497, 0.000000e+00
  %1019 = fcmp oeq float %1018, 0.000000e+00
  br i1 %1019, label %1020, label %1063

1020:                                             ; preds = %1014, %1017
  %1021 = call zeroext i1 @skcms_TransferFunction_invert(%struct.skcms_TransferFunction* nonnull %7, %struct.skcms_TransferFunction* nonnull %6)
  br i1 %1021, label %1022, label %1063

1022:                                             ; preds = %274, %1020, %100
  %1023 = load float, float* %24, align 4
  %1024 = fcmp olt float %1023, 0.000000e+00
  br i1 %1024, label %1025, label %1029

1025:                                             ; preds = %1022
  %1026 = fptosi float %1023 to i32
  %1027 = sitofp i32 %1026 to float
  %1028 = fcmp oeq float %1023, %1027
  br i1 %1028, label %1063, label %1029

1029:                                             ; preds = %1025, %1022
  %1030 = load float, float* %25, align 4
  %1031 = load float, float* %26, align 4
  %1032 = fadd float %1030, %1031
  %1033 = load float, float* %27, align 4
  %1034 = fadd float %1032, %1033
  %1035 = load float, float* %28, align 4
  %1036 = fadd float %1034, %1035
  %1037 = load float, float* %29, align 4
  %1038 = fadd float %1036, %1037
  %1039 = load float, float* %30, align 4
  %1040 = fadd float %1038, %1039
  %1041 = fadd float %1023, %1040
  %1042 = fmul float %1041, 0.000000e+00
  %1043 = fcmp oeq float %1042, 0.000000e+00
  br i1 %1043, label %1044, label %1063

1044:                                             ; preds = %1029
  %1045 = fcmp ult float %1030, 0.000000e+00
  %1046 = fcmp ult float %1033, 0.000000e+00
  %1047 = or i1 %1045, %1046
  br i1 %1047, label %1063, label %1048

1048:                                             ; preds = %1044
  %1049 = fcmp ult float %1035, 0.000000e+00
  %1050 = fcmp ult float %1023, 0.000000e+00
  %1051 = or i1 %1050, %1049
  br i1 %1051, label %1063, label %1052

1052:                                             ; preds = %1048
  %1053 = fmul float %1030, %1035
  %1054 = fadd float %1031, %1053
  %1055 = fcmp ult float %1054, 0.000000e+00
  br i1 %1055, label %1063, label %1056

1056:                                             ; preds = %1052
  %1057 = call zeroext i1 @skcms_TransferFunction_invert(%struct.skcms_TransferFunction* nonnull %6, %struct.skcms_TransferFunction* nonnull %7)
  br i1 %1057, label %1058, label %1063

1058:                                             ; preds = %1056
  %1059 = call float @skcms_MaxRoundtripError(%union.skcms_Curve* nonnull %0, %struct.skcms_TransferFunction* nonnull %7)
  %1060 = load float, float* %2, align 4
  %1061 = fcmp ogt float %1060, %1059
  br i1 %1061, label %1062, label %1063

1062:                                             ; preds = %1058
  store float %1059, float* %2, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %81, i8* nonnull align 4 %23, i64 28, i1 false)
  br label %1063

1063:                                             ; preds = %1025, %1029, %1044, %1048, %1052, %415, %1014, %411, %1017, %1058, %1062, %1056, %1020
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %31) #17
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %23) #17
  %1064 = add nuw nsw i64 %95, 1
  %1065 = icmp eq i64 %1064, 2
  br i1 %1065, label %90, label %94

1066:                                             ; preds = %13, %3, %90
  %1067 = phi i1 [ %93, %90 ], [ false, %3 ], [ false, %13 ]
  ret i1 %1067
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZL10fit_linearPK11skcms_CurveifPfS2_S2_(%union.skcms_Curve* nocapture readonly, i32, float, float* nocapture, float* nocapture, float*) unnamed_addr #4 {
  %7 = alloca float, align 4
  %8 = add nsw i32 %1, -1
  %9 = sitofp i32 %8 to float
  %10 = fdiv float 1.000000e+00, %9
  %11 = bitcast float* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11)
  store float 0.000000e+00, float* %7, align 4
  %12 = icmp eq float* %5, null
  br i1 %12, label %74, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %21

17:                                               ; preds = %13
  %18 = bitcast %union.skcms_Curve* %0 to %struct.anon*
  %19 = getelementptr inbounds %struct.anon, %struct.anon* %18, i64 0, i32 1
  %20 = tail call float @skcms_TransferFunction_eval(%struct.skcms_TransferFunction* %19, float 0.000000e+00) #17
  br label %72

21:                                               ; preds = %13
  %22 = add i32 %15, -1
  %23 = uitofp i32 %22 to float
  %24 = fmul float %23, 0.000000e+00
  %25 = fptosi float %24 to i32
  %26 = fadd float %24, 1.000000e+00
  %27 = bitcast float %26 to i32
  %28 = add nsw i32 %27, -1
  %29 = bitcast i32 %28 to float
  %30 = fptosi float %29 to i32
  %31 = sitofp i32 %25 to float
  %32 = fsub float %24, %31
  %33 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 1
  %34 = load i8*, i8** %33, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %47, label %36

36:                                               ; preds = %21
  %37 = sext i32 %25 to i64
  %38 = getelementptr inbounds i8, i8* %34, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = uitofp i8 %39 to float
  %41 = fmul float %40, 0x3F70101020000000
  %42 = sext i32 %30 to i64
  %43 = getelementptr inbounds i8, i8* %34, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = uitofp i8 %44 to float
  %46 = fmul float %45, 0x3F70101020000000
  br label %66

47:                                               ; preds = %21
  %48 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 2
  %49 = load i8*, i8** %48, align 8
  %50 = shl nsw i32 %25, 1
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %49, i64 %51
  %53 = bitcast i8* %52 to i16*
  %54 = load i16, i16* %53, align 1
  %55 = shl nsw i32 %30, 1
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %49, i64 %56
  %58 = bitcast i8* %57 to i16*
  %59 = load i16, i16* %58, align 1
  %60 = tail call i16 @llvm.bswap.i16(i16 %54) #17
  %61 = tail call i16 @llvm.bswap.i16(i16 %59) #17
  %62 = uitofp i16 %60 to float
  %63 = fmul float %62, 0x3EF0001000000000
  %64 = uitofp i16 %61 to float
  %65 = fmul float %64, 0x3EF0001000000000
  br label %66

66:                                               ; preds = %47, %36
  %67 = phi float [ %41, %36 ], [ %63, %47 ]
  %68 = phi float [ %46, %36 ], [ %65, %47 ]
  %69 = fsub float %68, %67
  %70 = fmul float %32, %69
  %71 = fadd float %67, %70
  br label %72

72:                                               ; preds = %17, %66
  %73 = phi float [ %20, %17 ], [ %71, %66 ]
  store float %73, float* %5, align 4
  br label %74

74:                                               ; preds = %6, %72
  %75 = phi float* [ %5, %72 ], [ %7, %6 ]
  %76 = icmp sgt i32 %1, 1
  br i1 %76, label %77, label %174

77:                                               ; preds = %74
  %78 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 0
  %79 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 1
  %80 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 2
  %81 = bitcast %union.skcms_Curve* %0 to %struct.anon*
  %82 = getelementptr inbounds %struct.anon, %struct.anon* %81, i64 0, i32 1
  br label %83

83:                                               ; preds = %171, %77
  %84 = phi i32 [ 1, %77 ], [ %169, %171 ]
  %85 = phi float [ 0x7FF0000000000000, %77 ], [ %161, %171 ]
  %86 = phi float [ 0xFFF0000000000000, %77 ], [ %163, %171 ]
  %87 = phi i32 [ 1, %77 ], [ %172, %171 ]
  %88 = sitofp i32 %84 to float
  %89 = fmul float %10, %88
  %90 = load i32, i32* %78, align 8
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %94

92:                                               ; preds = %83
  %93 = tail call float @skcms_TransferFunction_eval(%struct.skcms_TransferFunction* %82, float %89) #17
  br label %147

94:                                               ; preds = %83
  %95 = fcmp olt float %89, 1.000000e+00
  %96 = select i1 %95, float %89, float 1.000000e+00
  %97 = fcmp olt float %96, 0.000000e+00
  %98 = select i1 %97, float 0.000000e+00, float %96
  %99 = add i32 %90, -1
  %100 = uitofp i32 %99 to float
  %101 = fmul float %98, %100
  %102 = fptosi float %101 to i32
  %103 = fadd float %101, 1.000000e+00
  %104 = bitcast float %103 to i32
  %105 = add nsw i32 %104, -1
  %106 = bitcast i32 %105 to float
  %107 = fptosi float %106 to i32
  %108 = sitofp i32 %102 to float
  %109 = fsub float %101, %108
  %110 = load i8*, i8** %79, align 8
  %111 = icmp eq i8* %110, null
  br i1 %111, label %123, label %112

112:                                              ; preds = %94
  %113 = sext i32 %102 to i64
  %114 = getelementptr inbounds i8, i8* %110, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = uitofp i8 %115 to float
  %117 = fmul float %116, 0x3F70101020000000
  %118 = sext i32 %107 to i64
  %119 = getelementptr inbounds i8, i8* %110, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = uitofp i8 %120 to float
  %122 = fmul float %121, 0x3F70101020000000
  br label %141

123:                                              ; preds = %94
  %124 = load i8*, i8** %80, align 8
  %125 = shl nsw i32 %102, 1
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i8, i8* %124, i64 %126
  %128 = bitcast i8* %127 to i16*
  %129 = load i16, i16* %128, align 1
  %130 = shl nsw i32 %107, 1
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %124, i64 %131
  %133 = bitcast i8* %132 to i16*
  %134 = load i16, i16* %133, align 1
  %135 = tail call i16 @llvm.bswap.i16(i16 %129) #17
  %136 = tail call i16 @llvm.bswap.i16(i16 %134) #17
  %137 = uitofp i16 %135 to float
  %138 = fmul float %137, 0x3EF0001000000000
  %139 = uitofp i16 %136 to float
  %140 = fmul float %139, 0x3EF0001000000000
  br label %141

141:                                              ; preds = %123, %112
  %142 = phi float [ %117, %112 ], [ %138, %123 ]
  %143 = phi float [ %122, %112 ], [ %140, %123 ]
  %144 = fsub float %143, %142
  %145 = fmul float %109, %144
  %146 = fadd float %142, %145
  br label %147

147:                                              ; preds = %92, %141
  %148 = phi float [ %93, %92 ], [ %146, %141 ]
  %149 = fadd float %148, %2
  %150 = load float, float* %75, align 4
  %151 = fsub float %149, %150
  %152 = fdiv float %151, %89
  %153 = fsub float %148, %2
  %154 = fsub float %153, %150
  %155 = fdiv float %154, %89
  %156 = fcmp olt float %152, %86
  %157 = fcmp olt float %85, %155
  %158 = or i1 %156, %157
  br i1 %158, label %174, label %159

159:                                              ; preds = %147
  %160 = fcmp olt float %85, %152
  %161 = select i1 %160, float %85, float %152
  %162 = fcmp ogt float %86, %155
  %163 = select i1 %162, float %86, float %155
  %164 = fsub float %148, %150
  %165 = fdiv float %164, %89
  %166 = fcmp ugt float %163, %165
  %167 = fcmp ugt float %165, %161
  %168 = or i1 %166, %167
  %169 = add nuw nsw i32 %84, 1
  br i1 %168, label %171, label %170

170:                                              ; preds = %159
  store float %165, float* %3, align 4
  br label %171

171:                                              ; preds = %159, %170
  %172 = phi i32 [ %169, %170 ], [ %87, %159 ]
  %173 = icmp eq i32 %169, %1
  br i1 %173, label %174, label %83

174:                                              ; preds = %147, %171, %74
  %175 = phi i32 [ 1, %74 ], [ %87, %147 ], [ %172, %171 ]
  %176 = add nsw i32 %175, -1
  %177 = sitofp i32 %176 to float
  %178 = fmul float %10, %177
  store float %178, float* %4, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11)
  ret i32 %175
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @skcms_TransformWithPalette(i8*, i32, i32, %struct.skcms_ICCProfile*, i8*, i32, i32, %struct.skcms_ICCProfile*, i64, i8*) local_unnamed_addr #4 {
  %11 = alloca [32 x i32], align 16
  %12 = alloca [32 x i8*], align 16
  %13 = alloca [3 x %union.skcms_Curve], align 16
  %14 = alloca %struct.skcms_Matrix3x3, align 16
  %15 = alloca %struct.skcms_ICCProfile, align 8
  %16 = ashr i32 %5, 1
  %17 = icmp ult i32 %16, 19
  br i1 %17, label %18, label %22

18:                                               ; preds = %10
  %19 = sext i32 %16 to i64
  %20 = getelementptr inbounds [19 x i64], [19 x i64]* @switch.table.skcms_TransformWithPalette.9, i64 0, i64 %19
  %21 = load i64, i64* %20, align 8
  br label %22

22:                                               ; preds = %10, %18
  %23 = phi i64 [ %21, %18 ], [ 0, %10 ]
  %24 = ashr i32 %1, 1
  %25 = icmp ult i32 %24, 19
  br i1 %25, label %26, label %30

26:                                               ; preds = %22
  %27 = sext i32 %24 to i64
  %28 = getelementptr inbounds [19 x i64], [19 x i64]* @switch.table.skcms_TransformWithPalette.9, i64 0, i64 %27
  %29 = load i64, i64* %28, align 8
  br label %30

30:                                               ; preds = %22, %26
  %31 = phi i64 [ %29, %26 ], [ 0, %22 ]
  %32 = mul i64 %23, %8
  %33 = mul i64 %31, %8
  %34 = or i64 %33, %32
  %35 = icmp ugt i64 %34, 2147483647
  br i1 %35, label %607, label %36

36:                                               ; preds = %30
  %37 = trunc i64 %8 to i32
  %38 = icmp eq %struct.skcms_ICCProfile* %3, null
  %39 = select i1 %38, %struct.skcms_ICCProfile* bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }* @_ZZ18skcms_sRGB_profileE12sRGB_profile to %struct.skcms_ICCProfile*), %struct.skcms_ICCProfile* %3
  %40 = icmp eq %struct.skcms_ICCProfile* %7, null
  %41 = select i1 %40, %struct.skcms_ICCProfile* bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }* @_ZZ18skcms_sRGB_profileE12sRGB_profile to %struct.skcms_ICCProfile*), %struct.skcms_ICCProfile* %7
  %42 = icmp ne i8* %4, %0
  %43 = icmp eq i64 %23, %31
  %44 = or i1 %42, %43
  br i1 %44, label %45, label %607

45:                                               ; preds = %36
  %46 = and i32 %1, -2
  %47 = icmp ne i32 %46, 4
  %48 = icmp ne i8* %9, null
  %49 = or i1 %47, %48
  br i1 %49, label %50, label %607

50:                                               ; preds = %45
  %51 = bitcast [32 x i32]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %51) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %51, i8 -86, i64 128, i1 false)
  %52 = bitcast [32 x i8*]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %52) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %52, i8 -86, i64 256, i1 false)
  %53 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 0
  %54 = getelementptr inbounds [32 x i8*], [32 x i8*]* %12, i64 0, i64 0
  %55 = bitcast [3 x %union.skcms_Curve]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %55) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %55, i8 -86, i64 96, i1 false)
  %56 = getelementptr inbounds [3 x %union.skcms_Curve], [3 x %union.skcms_Curve]* %13, i64 0, i64 2
  %57 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %56, i64 0, i32 0, i32 0
  store i32 0, i32* %57, align 16
  %58 = getelementptr inbounds [3 x %union.skcms_Curve], [3 x %union.skcms_Curve]* %13, i64 0, i64 1
  %59 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %58, i64 0, i32 0, i32 0
  store i32 0, i32* %59, align 16
  %60 = getelementptr inbounds [3 x %union.skcms_Curve], [3 x %union.skcms_Curve]* %13, i64 0, i64 0, i32 0, i32 0
  store i32 0, i32* %60, align 16
  %61 = bitcast %struct.skcms_Matrix3x3* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %61) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %61, i8 -1, i64 36, i1 false)
  switch i32 %24, label %605 [
    i32 0, label %62
    i32 1, label %64
    i32 4, label %66
    i32 3, label %68
    i32 5, label %70
    i32 6, label %72
    i32 8, label %74
    i32 9, label %76
    i32 10, label %78
    i32 11, label %80
    i32 12, label %82
    i32 13, label %84
    i32 14, label %86
    i32 15, label %88
    i32 16, label %90
    i32 17, label %92
    i32 18, label %94
    i32 2, label %96
    i32 7, label %99
  ]

62:                                               ; preds = %50
  %63 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 0, i32* %53, align 16
  br label %105

64:                                               ; preds = %50
  %65 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 1, i32* %53, align 16
  br label %105

66:                                               ; preds = %50
  %67 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 3, i32* %53, align 16
  br label %105

68:                                               ; preds = %50
  %69 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 4, i32* %53, align 16
  br label %105

70:                                               ; preds = %50
  %71 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 5, i32* %53, align 16
  br label %105

72:                                               ; preds = %50
  %73 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 6, i32* %53, align 16
  br label %105

74:                                               ; preds = %50
  %75 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 7, i32* %53, align 16
  br label %105

76:                                               ; preds = %50
  %77 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 8, i32* %53, align 16
  br label %105

78:                                               ; preds = %50
  %79 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 9, i32* %53, align 16
  br label %105

80:                                               ; preds = %50
  %81 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 10, i32* %53, align 16
  br label %105

82:                                               ; preds = %50
  %83 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 11, i32* %53, align 16
  br label %105

84:                                               ; preds = %50
  %85 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 12, i32* %53, align 16
  br label %105

86:                                               ; preds = %50
  %87 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 13, i32* %53, align 16
  br label %105

88:                                               ; preds = %50
  %89 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 12, i32* %53, align 16
  br label %105

90:                                               ; preds = %50
  %91 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 13, i32* %53, align 16
  br label %105

92:                                               ; preds = %50
  %93 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 14, i32* %53, align 16
  br label %105

94:                                               ; preds = %50
  %95 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 15, i32* %53, align 16
  br label %105

96:                                               ; preds = %50
  %97 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 1
  store i32 2, i32* %53, align 16
  %98 = getelementptr inbounds [32 x i8*], [32 x i8*]* %12, i64 0, i64 1
  store i8* %9, i8** %54, align 16
  br label %105

99:                                               ; preds = %50
  %100 = getelementptr inbounds [32 x i8*], [32 x i8*]* %12, i64 0, i64 2
  %101 = bitcast [32 x i8*]* %12 to <2 x i8*>*
  store <2 x i8*> <i8* bitcast (%struct.skcms_TransferFunction* getelementptr inbounds ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }, { i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }* @_ZZ18skcms_sRGB_profileE12sRGB_profile, i64 0, i32 7, i64 0, i32 0, i32 1) to i8*), i8* bitcast (%struct.skcms_TransferFunction* getelementptr inbounds ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }, { i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }* @_ZZ18skcms_sRGB_profileE12sRGB_profile, i64 0, i32 7, i64 0, i32 0, i32 1) to i8*)>, <2 x i8*>* %101, align 16
  %102 = getelementptr inbounds [32 x i32], [32 x i32]* %11, i64 0, i64 4
  %103 = bitcast [32 x i32]* %11 to <4 x i32>*
  store <4 x i32> <i32 6, i32 26, i32 27, i32 28>, <4 x i32>* %103, align 16
  %104 = getelementptr inbounds [32 x i8*], [32 x i8*]* %12, i64 0, i64 3
  store i8* bitcast (%struct.skcms_TransferFunction* getelementptr inbounds ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }, { i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }* @_ZZ18skcms_sRGB_profileE12sRGB_profile, i64 0, i32 7, i64 0, i32 0, i32 1) to i8*), i8** %100, align 16
  br label %105

105:                                              ; preds = %99, %96, %94, %92, %90, %88, %86, %84, %82, %80, %78, %76, %74, %72, %70, %68, %66, %64, %62
  %106 = phi i32* [ %102, %99 ], [ %97, %96 ], [ %95, %94 ], [ %93, %92 ], [ %91, %90 ], [ %89, %88 ], [ %87, %86 ], [ %85, %84 ], [ %83, %82 ], [ %81, %80 ], [ %79, %78 ], [ %77, %76 ], [ %75, %74 ], [ %73, %72 ], [ %71, %70 ], [ %69, %68 ], [ %67, %66 ], [ %65, %64 ], [ %63, %62 ]
  %107 = phi i8** [ %104, %99 ], [ %98, %96 ], [ %54, %94 ], [ %54, %92 ], [ %54, %90 ], [ %54, %88 ], [ %54, %86 ], [ %54, %84 ], [ %54, %82 ], [ %54, %80 ], [ %54, %78 ], [ %54, %76 ], [ %54, %74 ], [ %54, %72 ], [ %54, %70 ], [ %54, %68 ], [ %54, %66 ], [ %54, %64 ], [ %54, %62 ]
  switch i32 %1, label %110 [
    i32 28, label %108
    i32 26, label %108
  ]

108:                                              ; preds = %105, %105
  %109 = getelementptr inbounds i32, i32* %106, i64 1
  store i32 17, i32* %106, align 4
  br label %110

110:                                              ; preds = %105, %108
  %111 = phi i32* [ %109, %108 ], [ %106, %105 ]
  %112 = and i32 %1, 1
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %116, label %114

114:                                              ; preds = %110
  %115 = getelementptr inbounds i32, i32* %111, i64 1
  store i32 16, i32* %111, align 4
  br label %116

116:                                              ; preds = %110, %114
  %117 = phi i32* [ %115, %114 ], [ %111, %110 ]
  %118 = bitcast %struct.skcms_ICCProfile* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1008, i8* nonnull %118) #17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %118, i8* align 8 bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } }* @__const.skcms_TransformWithPalette.gray_dst_profile to i8*), i64 1008, i1 false)
  %119 = icmp eq i32 %16, 1
  br i1 %119, label %120, label %125

120:                                              ; preds = %116
  %121 = bitcast %struct.skcms_ICCProfile* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %118, i8* align 8 %121, i64 1008, i1 false)
  %122 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %15, i64 0, i32 7
  store i8 1, i8* %122, align 8
  %123 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %15, i64 0, i32 8
  %124 = bitcast %struct.skcms_Matrix3x3* %123 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %124, i8* align 4 bitcast (%struct.skcms_Matrix3x3* getelementptr inbounds ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }, { i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { %struct.anon }], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }* @_ZZ20skcms_XYZD50_profileE14XYZD50_profile, i64 0, i32 9) to i8*), i64 36, i1 false) #17
  br label %125

125:                                              ; preds = %120, %116
  %126 = phi %struct.skcms_ICCProfile* [ %15, %120 ], [ %41, %116 ]
  %127 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 2
  %128 = load i32, i32* %127, align 4
  %129 = icmp eq i32 %128, 1129142603
  br i1 %129, label %132, label %130

130:                                              ; preds = %125
  switch i32 %2, label %135 [
    i32 0, label %132
    i32 2, label %131
  ]

131:                                              ; preds = %130
  br label %132

132:                                              ; preds = %130, %125, %131
  %133 = phi i32 [ 21, %131 ], [ 18, %125 ], [ 19, %130 ]
  %134 = getelementptr inbounds i32, i32* %117, i64 1
  store i32 %133, i32* %117, align 4
  br label %135

135:                                              ; preds = %132, %130
  %136 = phi i32* [ %117, %130 ], [ %134, %132 ]
  %137 = icmp eq %struct.skcms_ICCProfile* %126, %39
  br i1 %137, label %547, label %138

138:                                              ; preds = %135
  %139 = bitcast [3 x %union.skcms_Curve]* %13 to %struct.anon*
  %140 = getelementptr inbounds %struct.anon, %struct.anon* %139, i64 0, i32 1
  %141 = bitcast %union.skcms_Curve* %58 to %struct.anon*
  %142 = getelementptr inbounds %struct.anon, %struct.anon* %141, i64 0, i32 1
  %143 = bitcast %union.skcms_Curve* %56 to %struct.anon*
  %144 = getelementptr inbounds %struct.anon, %struct.anon* %143, i64 0, i32 1
  %145 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 11
  %146 = load i8, i8* %145, align 8, !range !22
  %147 = icmp eq i8 %146, 0
  br i1 %147, label %148, label %186

148:                                              ; preds = %138
  %149 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 5
  %150 = load i8, i8* %149, align 8, !range !22
  %151 = icmp eq i8 %150, 0
  br i1 %151, label %603, label %152

152:                                              ; preds = %148
  %153 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 7
  %154 = load i8, i8* %153, align 8, !range !22
  %155 = icmp eq i8 %154, 0
  br i1 %155, label %603, label %156

156:                                              ; preds = %152
  %157 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 6
  %158 = getelementptr inbounds [3 x %union.skcms_Curve], [3 x %union.skcms_Curve]* %157, i64 0, i64 0, i32 0, i32 0
  %159 = load i32, i32* %158, align 8
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %603

161:                                              ; preds = %156
  %162 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 6, i64 1
  %163 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %162, i64 0, i32 0, i32 0
  %164 = load i32, i32* %163, align 8
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %603

166:                                              ; preds = %161
  %167 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 6, i64 2
  %168 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %167, i64 0, i32 0, i32 0
  %169 = load i32, i32* %168, align 8
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %603

171:                                              ; preds = %166
  %172 = bitcast [3 x %union.skcms_Curve]* %157 to %struct.anon*
  %173 = getelementptr inbounds %struct.anon, %struct.anon* %172, i64 0, i32 1
  %174 = call zeroext i1 @skcms_TransferFunction_invert(%struct.skcms_TransferFunction* %173, %struct.skcms_TransferFunction* %140) #17
  br i1 %174, label %175, label %603

175:                                              ; preds = %171
  %176 = bitcast %union.skcms_Curve* %162 to %struct.anon*
  %177 = getelementptr inbounds %struct.anon, %struct.anon* %176, i64 0, i32 1
  %178 = call zeroext i1 @skcms_TransferFunction_invert(%struct.skcms_TransferFunction* %177, %struct.skcms_TransferFunction* %142) #17
  br i1 %178, label %179, label %603

179:                                              ; preds = %175
  %180 = bitcast %union.skcms_Curve* %167 to %struct.anon*
  %181 = getelementptr inbounds %struct.anon, %struct.anon* %180, i64 0, i32 1
  %182 = call zeroext i1 @skcms_TransferFunction_invert(%struct.skcms_TransferFunction* %181, %struct.skcms_TransferFunction* %144) #17
  br i1 %182, label %183, label %603

183:                                              ; preds = %179
  %184 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 8
  %185 = call zeroext i1 @skcms_Matrix3x3_invert(%struct.skcms_Matrix3x3* %184, %struct.skcms_Matrix3x3* nonnull %14) #17
  br i1 %185, label %186, label %603

186:                                              ; preds = %138, %183
  %187 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 9
  %188 = load i8, i8* %187, align 8, !range !22
  %189 = icmp eq i8 %188, 0
  br i1 %189, label %282, label %190

190:                                              ; preds = %186
  %191 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 10
  %192 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %191, i64 0, i32 0
  %193 = load i32, i32* %192, align 8
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %226, label %195

195:                                              ; preds = %190
  %196 = icmp sgt i32 %193, 0
  br i1 %196, label %204, label %197

197:                                              ; preds = %219, %195
  %198 = phi i32* [ %136, %195 ], [ %221, %219 ]
  %199 = phi i8** [ %107, %195 ], [ %222, %219 ]
  %200 = getelementptr inbounds i32, i32* %198, i64 1
  store i32 17, i32* %198, align 4
  %201 = getelementptr inbounds i32, i32* %198, i64 2
  store i32 46, i32* %200, align 4
  %202 = getelementptr inbounds i8*, i8** %199, i64 1
  %203 = bitcast i8** %199 to %struct.skcms_A2B**
  store %struct.skcms_A2B* %191, %struct.skcms_A2B** %203, align 8
  br label %226

204:                                              ; preds = %195, %219
  %205 = phi i32 [ %220, %219 ], [ %193, %195 ]
  %206 = phi i64 [ %223, %219 ], [ 0, %195 ]
  %207 = phi i8** [ %222, %219 ], [ %107, %195 ]
  %208 = phi i32* [ %221, %219 ], [ %136, %195 ]
  %209 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 10, i32 1, i64 %206
  %210 = trunc i64 %206 to i32
  %211 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %209, i32 %210)
  %212 = extractvalue { i32, i8* } %211, 1
  %213 = icmp eq i8* %212, null
  br i1 %213, label %219, label %214

214:                                              ; preds = %204
  %215 = extractvalue { i32, i8* } %211, 0
  %216 = getelementptr inbounds i32, i32* %208, i64 1
  store i32 %215, i32* %208, align 4
  %217 = getelementptr inbounds i8*, i8** %207, i64 1
  store i8* %212, i8** %207, align 8
  %218 = load i32, i32* %192, align 8
  br label %219

219:                                              ; preds = %204, %214
  %220 = phi i32 [ %218, %214 ], [ %205, %204 ]
  %221 = phi i32* [ %216, %214 ], [ %208, %204 ]
  %222 = phi i8** [ %217, %214 ], [ %207, %204 ]
  %223 = add nuw nsw i64 %206, 1
  %224 = sext i32 %220 to i64
  %225 = icmp slt i64 %223, %224
  br i1 %225, label %204, label %197

226:                                              ; preds = %190, %197
  %227 = phi i32* [ %201, %197 ], [ %136, %190 ]
  %228 = phi i8** [ %202, %197 ], [ %107, %190 ]
  %229 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 10, i32 5
  %230 = load i32, i32* %229, align 8
  %231 = icmp eq i32 %230, 3
  br i1 %231, label %232, label %252

232:                                              ; preds = %226
  %233 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 10, i32 6, i64 0
  %234 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %233, i32 0)
  %235 = extractvalue { i32, i8* } %234, 1
  %236 = icmp eq i8* %235, null
  br i1 %236, label %241, label %237

237:                                              ; preds = %232
  %238 = extractvalue { i32, i8* } %234, 0
  %239 = getelementptr inbounds i32, i32* %227, i64 1
  store i32 %238, i32* %227, align 4
  %240 = getelementptr inbounds i8*, i8** %228, i64 1
  store i8* %235, i8** %228, align 8
  br label %241

241:                                              ; preds = %232, %237
  %242 = phi i32* [ %239, %237 ], [ %227, %232 ]
  %243 = phi i8** [ %240, %237 ], [ %228, %232 ]
  %244 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 10, i32 6, i64 1
  %245 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %244, i32 1)
  %246 = extractvalue { i32, i8* } %245, 1
  %247 = icmp eq i8* %246, null
  br i1 %247, label %687, label %683

248:                                              ; preds = %698
  %249 = getelementptr inbounds i32, i32* %699, i64 1
  store i32 23, i32* %699, align 4
  %250 = getelementptr inbounds i8*, i8** %700, i64 1
  %251 = bitcast i8** %700 to %struct.skcms_Matrix3x4**
  store %struct.skcms_Matrix3x4* %701, %struct.skcms_Matrix3x4** %251, align 8
  br label %252

252:                                              ; preds = %698, %248, %226
  %253 = phi i32* [ %249, %248 ], [ %699, %698 ], [ %227, %226 ]
  %254 = phi i8** [ %250, %248 ], [ %700, %698 ], [ %228, %226 ]
  %255 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 10, i32 8
  %256 = load i32, i32* %255, align 8
  %257 = icmp eq i32 %256, 3
  br i1 %257, label %258, label %274

258:                                              ; preds = %252
  %259 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 10, i32 9, i64 0
  %260 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %259, i32 0)
  %261 = extractvalue { i32, i8* } %260, 1
  %262 = icmp eq i8* %261, null
  br i1 %262, label %267, label %263

263:                                              ; preds = %258
  %264 = extractvalue { i32, i8* } %260, 0
  %265 = getelementptr inbounds i32, i32* %253, i64 1
  store i32 %264, i32* %253, align 4
  %266 = getelementptr inbounds i8*, i8** %254, i64 1
  store i8* %261, i8** %254, align 8
  br label %267

267:                                              ; preds = %258, %263
  %268 = phi i32* [ %265, %263 ], [ %253, %258 ]
  %269 = phi i8** [ %266, %263 ], [ %254, %258 ]
  %270 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 10, i32 9, i64 1
  %271 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %270, i32 1)
  %272 = extractvalue { i32, i8* } %271, 1
  %273 = icmp eq i8* %272, null
  br i1 %273, label %672, label %668

274:                                              ; preds = %672, %679, %252
  %275 = phi i32* [ %253, %252 ], [ %681, %679 ], [ %673, %672 ]
  %276 = phi i8** [ %254, %252 ], [ %682, %679 ], [ %674, %672 ]
  %277 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 3
  %278 = load i32, i32* %277, align 8
  %279 = icmp eq i32 %278, 1281450528
  br i1 %279, label %280, label %306

280:                                              ; preds = %274
  %281 = getelementptr inbounds i32, i32* %275, i64 1
  store i32 24, i32* %275, align 4
  br label %306

282:                                              ; preds = %186
  %283 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 5
  %284 = load i8, i8* %283, align 8, !range !22
  %285 = icmp eq i8 %284, 0
  br i1 %285, label %603, label %286

286:                                              ; preds = %282
  %287 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 7
  %288 = load i8, i8* %287, align 8, !range !22
  %289 = icmp eq i8 %288, 0
  br i1 %289, label %603, label %290

290:                                              ; preds = %286
  %291 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 6, i64 0
  %292 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %291, i32 0)
  %293 = extractvalue { i32, i8* } %292, 1
  %294 = icmp eq i8* %293, null
  br i1 %294, label %299, label %295

295:                                              ; preds = %290
  %296 = extractvalue { i32, i8* } %292, 0
  %297 = getelementptr inbounds i32, i32* %136, i64 1
  store i32 %296, i32* %136, align 4
  %298 = getelementptr inbounds i8*, i8** %107, i64 1
  store i8* %293, i8** %107, align 8
  br label %299

299:                                              ; preds = %290, %295
  %300 = phi i32* [ %297, %295 ], [ %136, %290 ]
  %301 = phi i8** [ %298, %295 ], [ %107, %290 ]
  %302 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 6, i64 1
  %303 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %302, i32 1)
  %304 = extractvalue { i32, i8* } %303, 1
  %305 = icmp eq i8* %304, null
  br i1 %305, label %657, label %653

306:                                              ; preds = %657, %664, %274, %280
  %307 = phi i32* [ %281, %280 ], [ %275, %274 ], [ %666, %664 ], [ %658, %657 ]
  %308 = phi i8** [ %276, %280 ], [ %276, %274 ], [ %667, %664 ], [ %659, %657 ]
  %309 = load i8, i8* %145, align 8, !range !22
  %310 = icmp eq i8 %309, 0
  %311 = load i8, i8* %187, align 8, !range !22
  %312 = icmp eq i8 %311, 0
  br i1 %310, label %417, label %313

313:                                              ; preds = %306
  br i1 %312, label %314, label %319

314:                                              ; preds = %313
  %315 = getelementptr inbounds i32, i32* %307, i64 1
  store i32 22, i32* %307, align 4
  %316 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 8
  %317 = getelementptr inbounds i8*, i8** %308, i64 1
  %318 = bitcast i8** %308 to %struct.skcms_Matrix3x3**
  store %struct.skcms_Matrix3x3* %316, %struct.skcms_Matrix3x3** %318, align 8
  br label %319

319:                                              ; preds = %313, %314
  %320 = phi i32* [ %307, %313 ], [ %315, %314 ]
  %321 = phi i8** [ %308, %313 ], [ %317, %314 ]
  %322 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 3
  %323 = load i32, i32* %322, align 8
  %324 = icmp eq i32 %323, 1281450528
  br i1 %324, label %325, label %327

325:                                              ; preds = %319
  %326 = getelementptr inbounds i32, i32* %320, i64 1
  store i32 25, i32* %320, align 4
  br label %327

327:                                              ; preds = %325, %319
  %328 = phi i32* [ %326, %325 ], [ %320, %319 ]
  %329 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 12
  %330 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %329, i64 0, i32 0
  %331 = load i32, i32* %330, align 8
  %332 = icmp eq i32 %331, 3
  br i1 %332, label %333, label %349

333:                                              ; preds = %327
  %334 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 12, i32 1, i64 0
  %335 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %334, i32 0)
  %336 = extractvalue { i32, i8* } %335, 1
  %337 = icmp eq i8* %336, null
  br i1 %337, label %342, label %338

338:                                              ; preds = %333
  %339 = extractvalue { i32, i8* } %335, 0
  %340 = getelementptr inbounds i32, i32* %328, i64 1
  store i32 %339, i32* %328, align 4
  %341 = getelementptr inbounds i8*, i8** %321, i64 1
  store i8* %336, i8** %321, align 8
  br label %342

342:                                              ; preds = %333, %338
  %343 = phi i32* [ %340, %338 ], [ %328, %333 ]
  %344 = phi i8** [ %341, %338 ], [ %321, %333 ]
  %345 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 12, i32 1, i64 1
  %346 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %345, i32 1)
  %347 = extractvalue { i32, i8* } %346, 1
  %348 = icmp eq i8* %347, null
  br i1 %348, label %642, label %638

349:                                              ; preds = %642, %649, %327
  %350 = phi i32* [ %328, %327 ], [ %651, %649 ], [ %643, %642 ]
  %351 = phi i8** [ %321, %327 ], [ %652, %649 ], [ %644, %642 ]
  %352 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 12, i32 2
  %353 = load i32, i32* %352, align 8
  %354 = icmp eq i32 %353, 3
  br i1 %354, label %355, label %382

355:                                              ; preds = %349
  %356 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 12, i32 3
  %357 = bitcast %struct.skcms_Matrix3x4* %356 to i8*
  %358 = call i32 @bcmp(i8* bitcast (%struct.skcms_Matrix3x4* @_ZZ26skcms_TransformWithPaletteE1I_0 to i8*), i8* %357, i64 48)
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %364, label %360

360:                                              ; preds = %355
  %361 = getelementptr inbounds i32, i32* %350, i64 1
  store i32 23, i32* %350, align 4
  %362 = getelementptr inbounds i8*, i8** %351, i64 1
  %363 = bitcast i8** %351 to %struct.skcms_Matrix3x4**
  store %struct.skcms_Matrix3x4* %356, %struct.skcms_Matrix3x4** %363, align 8
  br label %364

364:                                              ; preds = %355, %360
  %365 = phi i32* [ %361, %360 ], [ %350, %355 ]
  %366 = phi i8** [ %362, %360 ], [ %351, %355 ]
  %367 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 12, i32 4, i64 0
  %368 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %367, i32 0)
  %369 = extractvalue { i32, i8* } %368, 1
  %370 = icmp eq i8* %369, null
  br i1 %370, label %375, label %371

371:                                              ; preds = %364
  %372 = extractvalue { i32, i8* } %368, 0
  %373 = getelementptr inbounds i32, i32* %365, i64 1
  store i32 %372, i32* %365, align 4
  %374 = getelementptr inbounds i8*, i8** %366, i64 1
  store i8* %369, i8** %366, align 8
  br label %375

375:                                              ; preds = %364, %371
  %376 = phi i32* [ %373, %371 ], [ %365, %364 ]
  %377 = phi i8** [ %374, %371 ], [ %366, %364 ]
  %378 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 12, i32 4, i64 1
  %379 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %378, i32 1)
  %380 = extractvalue { i32, i8* } %379, 1
  %381 = icmp eq i8* %380, null
  br i1 %381, label %627, label %623

382:                                              ; preds = %627, %634, %349
  %383 = phi i32* [ %350, %349 ], [ %636, %634 ], [ %628, %627 ]
  %384 = phi i8** [ %351, %349 ], [ %637, %634 ], [ %629, %627 ]
  %385 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 12, i32 5
  %386 = load i32, i32* %385, align 8
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %547, label %388

388:                                              ; preds = %382
  %389 = getelementptr inbounds i32, i32* %383, i64 1
  store i32 17, i32* %383, align 4
  %390 = getelementptr inbounds i32, i32* %383, i64 2
  store i32 47, i32* %389, align 4
  %391 = getelementptr inbounds i8*, i8** %384, i64 1
  %392 = bitcast i8** %384 to %struct.skcms_B2A**
  store %struct.skcms_B2A* %329, %struct.skcms_B2A** %392, align 8
  %393 = load i32, i32* %385, align 8
  %394 = icmp sgt i32 %393, 0
  br i1 %394, label %395, label %547

395:                                              ; preds = %388, %410
  %396 = phi i32 [ %411, %410 ], [ %393, %388 ]
  %397 = phi i64 [ %414, %410 ], [ 0, %388 ]
  %398 = phi i8** [ %413, %410 ], [ %391, %388 ]
  %399 = phi i32* [ %412, %410 ], [ %390, %388 ]
  %400 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 12, i32 9, i64 %397
  %401 = trunc i64 %397 to i32
  %402 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %400, i32 %401)
  %403 = extractvalue { i32, i8* } %402, 1
  %404 = icmp eq i8* %403, null
  br i1 %404, label %410, label %405

405:                                              ; preds = %395
  %406 = extractvalue { i32, i8* } %402, 0
  %407 = getelementptr inbounds i32, i32* %399, i64 1
  store i32 %406, i32* %399, align 4
  %408 = getelementptr inbounds i8*, i8** %398, i64 1
  store i8* %403, i8** %398, align 8
  %409 = load i32, i32* %385, align 8
  br label %410

410:                                              ; preds = %395, %405
  %411 = phi i32 [ %409, %405 ], [ %396, %395 ]
  %412 = phi i32* [ %407, %405 ], [ %399, %395 ]
  %413 = phi i8** [ %408, %405 ], [ %398, %395 ]
  %414 = add nuw nsw i64 %397, 1
  %415 = sext i32 %411 to i64
  %416 = icmp slt i64 %414, %415
  br i1 %416, label %395, label %547

417:                                              ; preds = %306
  %418 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 8
  %419 = select i1 %312, %struct.skcms_Matrix3x3* %418, %struct.skcms_Matrix3x3* @_ZZ26skcms_TransformWithPaletteE1I_1
  %420 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 8
  %421 = bitcast %struct.skcms_Matrix3x3* %420 to i8*
  %422 = bitcast %struct.skcms_Matrix3x3* %419 to i8*
  %423 = call i32 @bcmp(i8* %421, i8* %422, i64 36)
  %424 = icmp eq i32 %423, 0
  br i1 %424, label %530, label %425

425:                                              ; preds = %417
  %426 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %419, i64 0, i32 0, i64 0, i64 0
  %427 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %14, i64 0, i32 0, i64 0, i64 0
  %428 = load float, float* %427, align 16, !noalias !26
  %429 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %14, i64 0, i32 0, i64 0, i64 1
  %430 = load float, float* %429, align 4, !noalias !26
  %431 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %14, i64 0, i32 0, i64 0, i64 2
  %432 = load float, float* %431, align 8, !noalias !26
  %433 = load float, float* %426, align 4, !noalias !26
  %434 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %419, i64 0, i32 0, i64 1, i64 0
  %435 = load float, float* %434, align 4, !noalias !26
  %436 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %419, i64 0, i32 0, i64 2, i64 0
  %437 = load float, float* %436, align 4, !noalias !26
  %438 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %419, i64 0, i32 0, i64 0, i64 1
  %439 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %419, i64 0, i32 0, i64 1, i64 1
  %440 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %419, i64 0, i32 0, i64 2, i64 1
  %441 = bitcast float* %438 to <2 x float>*
  %442 = load <2 x float>, <2 x float>* %441, align 4, !noalias !26
  %443 = shufflevector <2 x float> %442, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %444 = bitcast float* %439 to <2 x float>*
  %445 = load <2 x float>, <2 x float>* %444, align 4, !noalias !26
  %446 = shufflevector <2 x float> %445, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %447 = bitcast float* %440 to <2 x float>*
  %448 = load <2 x float>, <2 x float>* %447, align 4, !noalias !26
  %449 = shufflevector <2 x float> %448, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %450 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %14, i64 0, i32 0, i64 1, i64 0
  %451 = load float, float* %450, align 4, !noalias !26
  %452 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %14, i64 0, i32 0, i64 1, i64 1
  %453 = load float, float* %452, align 4, !noalias !26
  %454 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %14, i64 0, i32 0, i64 1, i64 2
  %455 = load float, float* %454, align 4, !noalias !26
  %456 = insertelement <2 x float> undef, float %428, i32 0
  %457 = insertelement <2 x float> %456, float %433, i32 1
  %458 = shufflevector <2 x float> %457, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %459 = insertelement <4 x float> undef, float %433, i32 0
  %460 = extractelement <2 x float> %442, i32 0
  %461 = insertelement <4 x float> %459, float %460, i32 1
  %462 = extractelement <2 x float> %442, i32 1
  %463 = insertelement <4 x float> %461, float %462, i32 2
  %464 = insertelement <4 x float> %463, float %451, i32 3
  %465 = fmul <4 x float> %458, %464
  %466 = insertelement <2 x float> undef, float %430, i32 0
  %467 = insertelement <2 x float> %466, float %435, i32 1
  %468 = shufflevector <2 x float> %467, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %469 = insertelement <4 x float> undef, float %435, i32 0
  %470 = extractelement <2 x float> %445, i32 0
  %471 = insertelement <4 x float> %469, float %470, i32 1
  %472 = extractelement <2 x float> %445, i32 1
  %473 = insertelement <4 x float> %471, float %472, i32 2
  %474 = insertelement <4 x float> %473, float %453, i32 3
  %475 = fmul <4 x float> %468, %474
  %476 = fadd <4 x float> %465, %475
  %477 = insertelement <2 x float> undef, float %432, i32 0
  %478 = insertelement <2 x float> %477, float %437, i32 1
  %479 = shufflevector <2 x float> %478, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %480 = insertelement <4 x float> undef, float %437, i32 0
  %481 = extractelement <2 x float> %448, i32 0
  %482 = insertelement <4 x float> %480, float %481, i32 1
  %483 = extractelement <2 x float> %448, i32 1
  %484 = insertelement <4 x float> %482, float %483, i32 2
  %485 = insertelement <4 x float> %484, float %455, i32 3
  %486 = fmul <4 x float> %479, %485
  %487 = fadd <4 x float> %476, %486
  %488 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %14, i64 0, i32 0, i64 2, i64 0
  %489 = load float, float* %488, align 8, !noalias !26
  %490 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %14, i64 0, i32 0, i64 2, i64 1
  %491 = load float, float* %490, align 4, !noalias !26
  %492 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %14, i64 0, i32 0, i64 2, i64 2
  %493 = load float, float* %492, align 8, !noalias !26
  %494 = insertelement <4 x float> undef, float %460, i32 0
  %495 = insertelement <4 x float> %494, float %462, i32 1
  %496 = insertelement <4 x float> %495, float %433, i32 2
  %497 = shufflevector <4 x float> %496, <4 x float> %443, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %498 = insertelement <2 x float> undef, float %451, i32 0
  %499 = insertelement <2 x float> %498, float %489, i32 1
  %500 = shufflevector <2 x float> %499, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %501 = fmul <4 x float> %497, %500
  %502 = insertelement <4 x float> undef, float %470, i32 0
  %503 = insertelement <4 x float> %502, float %472, i32 1
  %504 = insertelement <4 x float> %503, float %435, i32 2
  %505 = shufflevector <4 x float> %504, <4 x float> %446, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %506 = insertelement <2 x float> undef, float %453, i32 0
  %507 = insertelement <2 x float> %506, float %491, i32 1
  %508 = shufflevector <2 x float> %507, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %509 = fmul <4 x float> %505, %508
  %510 = fadd <4 x float> %501, %509
  %511 = insertelement <4 x float> undef, float %481, i32 0
  %512 = insertelement <4 x float> %511, float %483, i32 1
  %513 = insertelement <4 x float> %512, float %437, i32 2
  %514 = shufflevector <4 x float> %513, <4 x float> %449, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %515 = insertelement <2 x float> undef, float %455, i32 0
  %516 = insertelement <2 x float> %515, float %493, i32 1
  %517 = shufflevector <2 x float> %516, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %518 = fmul <4 x float> %514, %517
  %519 = fadd <4 x float> %510, %518
  %520 = fmul float %462, %489
  %521 = fmul float %472, %491
  %522 = fadd float %520, %521
  %523 = fmul float %483, %493
  %524 = fadd float %522, %523
  %525 = bitcast %struct.skcms_Matrix3x3* %14 to <4 x float>*
  store <4 x float> %487, <4 x float>* %525, align 16
  %526 = bitcast float* %452 to <4 x float>*
  store <4 x float> %519, <4 x float>* %526, align 4
  store float %524, float* %492, align 8
  %527 = getelementptr inbounds i32, i32* %307, i64 1
  store i32 22, i32* %307, align 4
  %528 = getelementptr inbounds i8*, i8** %308, i64 1
  %529 = bitcast i8** %308 to %struct.skcms_Matrix3x3**
  store %struct.skcms_Matrix3x3* %14, %struct.skcms_Matrix3x3** %529, align 8
  br label %530

530:                                              ; preds = %417, %425
  %531 = phi i32* [ %527, %425 ], [ %307, %417 ]
  %532 = phi i8** [ %528, %425 ], [ %308, %417 ]
  %533 = getelementptr inbounds [3 x %union.skcms_Curve], [3 x %union.skcms_Curve]* %13, i64 0, i64 0
  %534 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* nonnull %533, i32 0)
  %535 = extractvalue { i32, i8* } %534, 1
  %536 = icmp eq i8* %535, null
  br i1 %536, label %541, label %537

537:                                              ; preds = %530
  %538 = extractvalue { i32, i8* } %534, 0
  %539 = getelementptr inbounds i32, i32* %531, i64 1
  store i32 %538, i32* %531, align 4
  %540 = getelementptr inbounds i8*, i8** %532, i64 1
  store i8* %535, i8** %532, align 8
  br label %541

541:                                              ; preds = %530, %537
  %542 = phi i32* [ %539, %537 ], [ %531, %530 ]
  %543 = phi i8** [ %540, %537 ], [ %532, %530 ]
  %544 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %58, i32 1)
  %545 = extractvalue { i32, i8* } %544, 1
  %546 = icmp eq i8* %545, null
  br i1 %546, label %613, label %609

547:                                              ; preds = %410, %613, %619, %388, %382, %135
  %548 = phi i32* [ %383, %382 ], [ %136, %135 ], [ %390, %388 ], [ %621, %619 ], [ %614, %613 ], [ %412, %410 ]
  %549 = phi i8** [ %384, %382 ], [ %107, %135 ], [ %391, %388 ], [ %622, %619 ], [ %615, %613 ], [ %413, %410 ]
  %550 = icmp slt i32 %5, 30
  br i1 %550, label %551, label %553

551:                                              ; preds = %547
  %552 = getelementptr inbounds i32, i32* %548, i64 1
  store i32 17, i32* %548, align 4
  br label %553

553:                                              ; preds = %551, %547
  %554 = phi i32* [ %552, %551 ], [ %548, %547 ]
  %555 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 2
  %556 = load i32, i32* %555, align 4
  %557 = icmp eq i32 %556, 1129142603
  br i1 %557, label %560, label %558

558:                                              ; preds = %553
  switch i32 %6, label %563 [
    i32 0, label %560
    i32 2, label %559
  ]

559:                                              ; preds = %558
  br label %560

560:                                              ; preds = %558, %553, %559
  %561 = phi i32 [ 20, %559 ], [ 18, %553 ], [ 19, %558 ]
  %562 = getelementptr inbounds i32, i32* %554, i64 1
  store i32 %561, i32* %554, align 4
  br label %563

563:                                              ; preds = %560, %558
  %564 = phi i32* [ %554, %558 ], [ %562, %560 ]
  %565 = and i32 %5, 1
  %566 = icmp eq i32 %565, 0
  br i1 %566, label %569, label %567

567:                                              ; preds = %563
  %568 = getelementptr inbounds i32, i32* %564, i64 1
  store i32 16, i32* %564, align 4
  br label %569

569:                                              ; preds = %563, %567
  %570 = phi i32* [ %568, %567 ], [ %564, %563 ]
  switch i32 %16, label %603 [
    i32 0, label %571
    i32 1, label %572
    i32 4, label %573
    i32 3, label %574
    i32 5, label %575
    i32 6, label %576
    i32 8, label %577
    i32 9, label %578
    i32 10, label %579
    i32 11, label %580
    i32 12, label %581
    i32 13, label %582
    i32 14, label %583
    i32 15, label %584
    i32 16, label %585
    i32 17, label %586
    i32 18, label %587
    i32 7, label %588
  ]

571:                                              ; preds = %569
  store i32 48, i32* %570, align 4
  br label %594

572:                                              ; preds = %569
  store i32 49, i32* %570, align 4
  br label %594

573:                                              ; preds = %569
  store i32 50, i32* %570, align 4
  br label %594

574:                                              ; preds = %569
  store i32 51, i32* %570, align 4
  br label %594

575:                                              ; preds = %569
  store i32 52, i32* %570, align 4
  br label %594

576:                                              ; preds = %569
  store i32 53, i32* %570, align 4
  br label %594

577:                                              ; preds = %569
  store i32 54, i32* %570, align 4
  br label %594

578:                                              ; preds = %569
  store i32 55, i32* %570, align 4
  br label %594

579:                                              ; preds = %569
  store i32 56, i32* %570, align 4
  br label %594

580:                                              ; preds = %569
  store i32 57, i32* %570, align 4
  br label %594

581:                                              ; preds = %569
  store i32 58, i32* %570, align 4
  br label %594

582:                                              ; preds = %569
  store i32 59, i32* %570, align 4
  br label %594

583:                                              ; preds = %569
  store i32 60, i32* %570, align 4
  br label %594

584:                                              ; preds = %569
  store i32 59, i32* %570, align 4
  br label %594

585:                                              ; preds = %569
  store i32 60, i32* %570, align 4
  br label %594

586:                                              ; preds = %569
  store i32 61, i32* %570, align 4
  br label %594

587:                                              ; preds = %569
  store i32 62, i32* %570, align 4
  br label %594

588:                                              ; preds = %569
  %589 = getelementptr inbounds i32, i32* %570, i64 1
  store i32 26, i32* %570, align 4
  %590 = getelementptr inbounds i8*, i8** %549, i64 1
  store i8* bitcast (%struct.skcms_TransferFunction* @_ZZ35skcms_sRGB_Inverse_TransferFunctionE8sRGB_inv to i8*), i8** %549, align 8
  %591 = getelementptr inbounds i32, i32* %570, i64 2
  store i32 27, i32* %589, align 4
  %592 = getelementptr inbounds i8*, i8** %549, i64 2
  store i8* bitcast (%struct.skcms_TransferFunction* @_ZZ35skcms_sRGB_Inverse_TransferFunctionE8sRGB_inv to i8*), i8** %590, align 8
  %593 = getelementptr inbounds i32, i32* %570, i64 3
  store i32 28, i32* %591, align 4
  store i8* bitcast (%struct.skcms_TransferFunction* @_ZZ35skcms_sRGB_Inverse_TransferFunctionE8sRGB_inv to i8*), i8** %592, align 8
  store i32 53, i32* %593, align 4
  br label %594

594:                                              ; preds = %588, %587, %586, %585, %584, %583, %582, %581, %580, %579, %578, %577, %576, %575, %574, %573, %572, %571
  %595 = call fastcc i32 @_ZL8cpu_typev()
  switch i32 %595, label %598 [
    i32 2, label %597
    i32 1, label %596
  ]

596:                                              ; preds = %594
  br label %598

597:                                              ; preds = %594
  br label %598

598:                                              ; preds = %594, %597, %596
  %599 = phi void (i32*, i8**, i8*, i8*, i32, i64, i64)* [ @_ZN8baselineL11run_programEPK2OpPPKvPKcPcimm, %594 ], [ @_ZN3hswL11run_programEPK2OpPPKvPKcPcimm, %596 ], [ @_ZN3hswL11run_programEPK2OpPPKvPKcPcimm, %597 ]
  %600 = call fastcc i32 @_ZL8cpu_typev()
  %601 = icmp eq i32 %600, 2
  %602 = select i1 %601, void (i32*, i8**, i8*, i8*, i32, i64, i64)* @_ZN3skxL11run_programEPK2OpPPKvPKcPcimm, void (i32*, i8**, i8*, i8*, i32, i64, i64)* %599
  call void %602(i32* nonnull %53, i8** nonnull %54, i8* %0, i8* %4, i32 %37, i64 %31, i64 %23) #17, !callees !29
  br label %603

603:                                              ; preds = %148, %152, %156, %161, %166, %171, %175, %179, %569, %282, %286, %183, %598
  %604 = phi i1 [ true, %598 ], [ false, %183 ], [ false, %286 ], [ false, %282 ], [ false, %569 ], [ false, %179 ], [ false, %175 ], [ false, %171 ], [ false, %166 ], [ false, %161 ], [ false, %156 ], [ false, %152 ], [ false, %148 ]
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %118) #17
  br label %605

605:                                              ; preds = %50, %603
  %606 = phi i1 [ %604, %603 ], [ false, %50 ]
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %61) #17
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %55) #17
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %52) #17
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %51) #17
  br label %607

607:                                              ; preds = %605, %36, %45, %30
  %608 = phi i1 [ false, %30 ], [ %606, %605 ], [ false, %36 ], [ false, %45 ]
  ret i1 %608

609:                                              ; preds = %541
  %610 = extractvalue { i32, i8* } %544, 0
  %611 = getelementptr inbounds i32, i32* %542, i64 1
  store i32 %610, i32* %542, align 4
  %612 = getelementptr inbounds i8*, i8** %543, i64 1
  store i8* %545, i8** %543, align 8
  br label %613

613:                                              ; preds = %609, %541
  %614 = phi i32* [ %611, %609 ], [ %542, %541 ]
  %615 = phi i8** [ %612, %609 ], [ %543, %541 ]
  %616 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %56, i32 2)
  %617 = extractvalue { i32, i8* } %616, 1
  %618 = icmp eq i8* %617, null
  br i1 %618, label %547, label %619

619:                                              ; preds = %613
  %620 = extractvalue { i32, i8* } %616, 0
  %621 = getelementptr inbounds i32, i32* %614, i64 1
  store i32 %620, i32* %614, align 4
  %622 = getelementptr inbounds i8*, i8** %615, i64 1
  store i8* %617, i8** %615, align 8
  br label %547

623:                                              ; preds = %375
  %624 = extractvalue { i32, i8* } %379, 0
  %625 = getelementptr inbounds i32, i32* %376, i64 1
  store i32 %624, i32* %376, align 4
  %626 = getelementptr inbounds i8*, i8** %377, i64 1
  store i8* %380, i8** %377, align 8
  br label %627

627:                                              ; preds = %623, %375
  %628 = phi i32* [ %625, %623 ], [ %376, %375 ]
  %629 = phi i8** [ %626, %623 ], [ %377, %375 ]
  %630 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 12, i32 4, i64 2
  %631 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %630, i32 2)
  %632 = extractvalue { i32, i8* } %631, 1
  %633 = icmp eq i8* %632, null
  br i1 %633, label %382, label %634

634:                                              ; preds = %627
  %635 = extractvalue { i32, i8* } %631, 0
  %636 = getelementptr inbounds i32, i32* %628, i64 1
  store i32 %635, i32* %628, align 4
  %637 = getelementptr inbounds i8*, i8** %629, i64 1
  store i8* %632, i8** %629, align 8
  br label %382

638:                                              ; preds = %342
  %639 = extractvalue { i32, i8* } %346, 0
  %640 = getelementptr inbounds i32, i32* %343, i64 1
  store i32 %639, i32* %343, align 4
  %641 = getelementptr inbounds i8*, i8** %344, i64 1
  store i8* %347, i8** %344, align 8
  br label %642

642:                                              ; preds = %638, %342
  %643 = phi i32* [ %640, %638 ], [ %343, %342 ]
  %644 = phi i8** [ %641, %638 ], [ %344, %342 ]
  %645 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %126, i64 0, i32 12, i32 1, i64 2
  %646 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %645, i32 2)
  %647 = extractvalue { i32, i8* } %646, 1
  %648 = icmp eq i8* %647, null
  br i1 %648, label %349, label %649

649:                                              ; preds = %642
  %650 = extractvalue { i32, i8* } %646, 0
  %651 = getelementptr inbounds i32, i32* %643, i64 1
  store i32 %650, i32* %643, align 4
  %652 = getelementptr inbounds i8*, i8** %644, i64 1
  store i8* %647, i8** %644, align 8
  br label %349

653:                                              ; preds = %299
  %654 = extractvalue { i32, i8* } %303, 0
  %655 = getelementptr inbounds i32, i32* %300, i64 1
  store i32 %654, i32* %300, align 4
  %656 = getelementptr inbounds i8*, i8** %301, i64 1
  store i8* %304, i8** %301, align 8
  br label %657

657:                                              ; preds = %653, %299
  %658 = phi i32* [ %655, %653 ], [ %300, %299 ]
  %659 = phi i8** [ %656, %653 ], [ %301, %299 ]
  %660 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 6, i64 2
  %661 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %660, i32 2)
  %662 = extractvalue { i32, i8* } %661, 1
  %663 = icmp eq i8* %662, null
  br i1 %663, label %306, label %664

664:                                              ; preds = %657
  %665 = extractvalue { i32, i8* } %661, 0
  %666 = getelementptr inbounds i32, i32* %658, i64 1
  store i32 %665, i32* %658, align 4
  %667 = getelementptr inbounds i8*, i8** %659, i64 1
  store i8* %662, i8** %659, align 8
  br label %306

668:                                              ; preds = %267
  %669 = extractvalue { i32, i8* } %271, 0
  %670 = getelementptr inbounds i32, i32* %268, i64 1
  store i32 %669, i32* %268, align 4
  %671 = getelementptr inbounds i8*, i8** %269, i64 1
  store i8* %272, i8** %269, align 8
  br label %672

672:                                              ; preds = %668, %267
  %673 = phi i32* [ %670, %668 ], [ %268, %267 ]
  %674 = phi i8** [ %671, %668 ], [ %269, %267 ]
  %675 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 10, i32 9, i64 2
  %676 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %675, i32 2)
  %677 = extractvalue { i32, i8* } %676, 1
  %678 = icmp eq i8* %677, null
  br i1 %678, label %274, label %679

679:                                              ; preds = %672
  %680 = extractvalue { i32, i8* } %676, 0
  %681 = getelementptr inbounds i32, i32* %673, i64 1
  store i32 %680, i32* %673, align 4
  %682 = getelementptr inbounds i8*, i8** %674, i64 1
  store i8* %677, i8** %674, align 8
  br label %274

683:                                              ; preds = %241
  %684 = extractvalue { i32, i8* } %245, 0
  %685 = getelementptr inbounds i32, i32* %242, i64 1
  store i32 %684, i32* %242, align 4
  %686 = getelementptr inbounds i8*, i8** %243, i64 1
  store i8* %246, i8** %243, align 8
  br label %687

687:                                              ; preds = %683, %241
  %688 = phi i32* [ %685, %683 ], [ %242, %241 ]
  %689 = phi i8** [ %686, %683 ], [ %243, %241 ]
  %690 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 10, i32 6, i64 2
  %691 = call fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve* %690, i32 2)
  %692 = extractvalue { i32, i8* } %691, 1
  %693 = icmp eq i8* %692, null
  br i1 %693, label %698, label %694

694:                                              ; preds = %687
  %695 = extractvalue { i32, i8* } %691, 0
  %696 = getelementptr inbounds i32, i32* %688, i64 1
  store i32 %695, i32* %688, align 4
  %697 = getelementptr inbounds i8*, i8** %689, i64 1
  store i8* %692, i8** %689, align 8
  br label %698

698:                                              ; preds = %694, %687
  %699 = phi i32* [ %696, %694 ], [ %688, %687 ]
  %700 = phi i8** [ %697, %694 ], [ %689, %687 ]
  %701 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %39, i64 0, i32 10, i32 7
  %702 = bitcast %struct.skcms_Matrix3x4* %701 to i8*
  %703 = call i32 @bcmp(i8* bitcast (%struct.skcms_Matrix3x4* @_ZZ26skcms_TransformWithPaletteE1I to i8*), i8* %702, i64 48)
  %704 = icmp eq i32 %703, 0
  br i1 %704, label %252, label %248
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc { i32, i8* } @_ZL15select_curve_opPK11skcms_Curvei(%union.skcms_Curve*, i32) unnamed_addr #2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %101

7:                                                ; preds = %2
  %8 = bitcast %union.skcms_Curve* %0 to %struct.anon*
  %9 = getelementptr inbounds %struct.anon, %struct.anon* %8, i64 0, i32 1
  %10 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %9, i64 0, i32 0
  %11 = load float, float* %10, align 4
  %12 = fcmp oeq float %11, 1.000000e+00
  br i1 %12, label %13, label %41

13:                                               ; preds = %7
  %14 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 1
  %15 = bitcast i8** %14 to float*
  %16 = load float, float* %15, align 4
  %17 = fcmp oeq float %16, 1.000000e+00
  br i1 %17, label %18, label %41

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.anon, %struct.anon* %8, i64 0, i32 1, i32 2
  %20 = load float, float* %19, align 4
  %21 = fcmp oeq float %20, 0.000000e+00
  br i1 %21, label %22, label %41

22:                                               ; preds = %18
  %23 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 2
  %24 = bitcast i8** %23 to float*
  %25 = load float, float* %24, align 4
  %26 = fcmp oeq float %25, 0.000000e+00
  br i1 %26, label %27, label %41

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.anon, %struct.anon* %8, i64 0, i32 1, i32 4
  %29 = load float, float* %28, align 4
  %30 = fcmp oeq float %29, 0.000000e+00
  br i1 %30, label %31, label %41

31:                                               ; preds = %27
  %32 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 1
  %33 = bitcast [8 x i8]* %32 to float*
  %34 = load float, float* %33, align 4
  %35 = fcmp oeq float %34, 0.000000e+00
  br i1 %35, label %36, label %41

36:                                               ; preds = %31
  %37 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 1, i64 4
  %38 = bitcast i8* %37 to float*
  %39 = load float, float* %38, align 4
  %40 = fcmp oeq float %39, 0.000000e+00
  br i1 %40, label %105, label %41

41:                                               ; preds = %36, %31, %27, %22, %18, %13, %7
  %42 = fcmp olt float %11, 0.000000e+00
  br i1 %42, label %43, label %48

43:                                               ; preds = %41
  %44 = fptosi float %11 to i32
  %45 = sitofp i32 %44 to float
  %46 = fcmp oeq float %11, %45
  br i1 %46, label %47, label %48

47:                                               ; preds = %43
  switch i32 %44, label %105 [
    i32 -2, label %89
    i32 -3, label %93
    i32 -4, label %97
  ]

48:                                               ; preds = %43, %41
  %49 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 1
  %50 = bitcast i8** %49 to float*
  %51 = load float, float* %50, align 4
  %52 = getelementptr inbounds %struct.anon, %struct.anon* %8, i64 0, i32 1, i32 2
  %53 = load float, float* %52, align 4
  %54 = fadd float %51, %53
  %55 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 0, i32 2
  %56 = bitcast i8** %55 to float*
  %57 = load float, float* %56, align 4
  %58 = fadd float %54, %57
  %59 = getelementptr inbounds %struct.anon, %struct.anon* %8, i64 0, i32 1, i32 4
  %60 = load float, float* %59, align 4
  %61 = fadd float %58, %60
  %62 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 1
  %63 = bitcast [8 x i8]* %62 to float*
  %64 = load float, float* %63, align 4
  %65 = fadd float %61, %64
  %66 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %0, i64 0, i32 1, i64 4
  %67 = bitcast i8* %66 to float*
  %68 = load float, float* %67, align 4
  %69 = fadd float %65, %68
  %70 = fadd float %11, %69
  %71 = fmul float %70, 0.000000e+00
  %72 = fcmp oeq float %71, 0.000000e+00
  br i1 %72, label %73, label %105

73:                                               ; preds = %48
  %74 = fcmp ult float %51, 0.000000e+00
  %75 = fcmp ult float %57, 0.000000e+00
  %76 = or i1 %74, %75
  br i1 %76, label %105, label %77

77:                                               ; preds = %73
  %78 = fcmp ult float %60, 0.000000e+00
  %79 = fcmp ult float %11, 0.000000e+00
  %80 = or i1 %79, %78
  br i1 %80, label %105, label %81

81:                                               ; preds = %77
  %82 = fmul float %51, %60
  %83 = fadd float %53, %82
  %84 = fcmp ult float %83, 0.000000e+00
  br i1 %84, label %105, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* @_ZZL15select_curve_opPK11skcms_CurveiE3ops, i64 0, i64 %3, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = bitcast %struct.skcms_TransferFunction* %9 to i8*
  br label %105

89:                                               ; preds = %47
  %90 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* @_ZZL15select_curve_opPK11skcms_CurveiE3ops, i64 0, i64 %3, i32 1
  %91 = load i32, i32* %90, align 4
  %92 = bitcast %struct.skcms_TransferFunction* %9 to i8*
  br label %105

93:                                               ; preds = %47
  %94 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* @_ZZL15select_curve_opPK11skcms_CurveiE3ops, i64 0, i64 %3, i32 2
  %95 = load i32, i32* %94, align 4
  %96 = bitcast %struct.skcms_TransferFunction* %9 to i8*
  br label %105

97:                                               ; preds = %47
  %98 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* @_ZZL15select_curve_opPK11skcms_CurveiE3ops, i64 0, i64 %3, i32 3
  %99 = load i32, i32* %98, align 4
  %100 = bitcast %struct.skcms_TransferFunction* %9 to i8*
  br label %105

101:                                              ; preds = %2
  %102 = getelementptr inbounds [4 x %struct.anon.1], [4 x %struct.anon.1]* @_ZZL15select_curve_opPK11skcms_CurveiE3ops, i64 0, i64 %3, i32 4
  %103 = load i32, i32* %102, align 4
  %104 = bitcast %union.skcms_Curve* %0 to i8*
  br label %105

105:                                              ; preds = %48, %73, %77, %81, %47, %85, %89, %93, %97, %36, %101
  %106 = phi i32 [ %103, %101 ], [ %99, %97 ], [ %95, %93 ], [ %91, %89 ], [ %87, %85 ], [ 0, %36 ], [ 0, %47 ], [ 0, %81 ], [ 0, %77 ], [ 0, %73 ], [ 0, %48 ]
  %107 = phi i8* [ %104, %101 ], [ %100, %97 ], [ %96, %93 ], [ %92, %89 ], [ %88, %85 ], [ null, %36 ], [ null, %47 ], [ null, %81 ], [ null, %77 ], [ null, %73 ], [ null, %48 ]
  %108 = insertvalue { i32, i8* } undef, i32 %106, 0
  %109 = insertvalue { i32, i8* } %108, i8* %107, 1
  ret { i32, i8* } %109
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN8baselineL11run_programEPK2OpPPKvPKcPcimm(i32* nocapture readonly, i8** readonly, i8* nocapture readonly, i8* nocapture, i32, i64, i64) unnamed_addr #4 {
  %8 = alloca [64 x i8], align 16
  %9 = icmp sgt i32 %4, 3
  br i1 %9, label %10, label %19

10:                                               ; preds = %7, %10
  %11 = phi i32 [ %13, %10 ], [ 0, %7 ]
  %12 = phi i32 [ %14, %10 ], [ %4, %7 ]
  tail call fastcc void @_ZN8baselineL8exec_opsEPK2OpPPKvPKcPci(i32* %0, i8** %1, i8* %2, i8* %3, i32 %11)
  %13 = add nuw nsw i32 %11, 4
  %14 = add nsw i32 %12, -4
  %15 = icmp sgt i32 %14, 3
  br i1 %15, label %10, label %16

16:                                               ; preds = %10
  %17 = and i32 %4, 3
  %18 = zext i32 %13 to i64
  br label %19

19:                                               ; preds = %16, %7
  %20 = phi i32 [ %4, %7 ], [ %17, %16 ]
  %21 = phi i64 [ 0, %7 ], [ %18, %16 ]
  %22 = icmp sgt i32 %20, 0
  br i1 %22, label %23, label %36

23:                                               ; preds = %19
  %24 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %24) #17
  %25 = mul i64 %21, %5
  %26 = getelementptr inbounds i8, i8* %2, i64 %25
  %27 = sext i32 %20 to i64
  %28 = mul i64 %27, %5
  %29 = icmp ugt i64 %28, 63
  %30 = sub i64 64, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = getelementptr [64 x i8], [64 x i8]* %8, i64 0, i64 %28
  call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 0, i64 %31, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %24, i8* align 1 %26, i64 %28, i1 false)
  call fastcc void @_ZN8baselineL8exec_opsEPK2OpPPKvPKcPci(i32* %0, i8** %1, i8* nonnull %24, i8* nonnull %24, i32 0)
  %33 = mul i64 %21, %6
  %34 = getelementptr inbounds i8, i8* %3, i64 %33
  %35 = mul i64 %27, %6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* nonnull align 16 %24, i64 %35, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %24) #17
  br label %36

36:                                               ; preds = %23, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZL8cpu_typev() unnamed_addr #4 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZL8cpu_typevE4type to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %37, !prof !30

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZL8cpu_typevE4type) #17
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %37, label %6

6:                                                ; preds = %3
  %7 = load i1, i1* @_ZL21runtime_cpu_detection, align 1
  br i1 %7, label %34, label %8

8:                                                ; preds = %6
  %9 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid", "={ax},={bx},={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 1, i32 0) #17, !srcloc !31
  %10 = extractvalue { i32, i32, i32, i32 } %9, 2
  %11 = extractvalue { i32, i32, i32, i32 } %9, 3
  %12 = and i32 %11, 100663296
  %13 = icmp ne i32 %12, 100663296
  %14 = and i32 %10, 1008210433
  %15 = icmp ne i32 %14, 1008210433
  %16 = or i1 %15, %13
  br i1 %16, label %34, label %17

17:                                               ; preds = %8
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid", "={ax},={bx},={cx},={dx},0,2,~{dirflag},~{fpsr},~{flags}"(i32 7, i32 0) #17, !srcloc !32
  %19 = extractvalue { i32, i32, i32, i32 } %18, 1
  %20 = tail call { i32, i32 } asm sideeffect "xgetbv", "={ax},={dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 0) #17, !srcloc !33
  %21 = extractvalue { i32, i32 } %20, 0
  %22 = and i32 %21, 6
  %23 = icmp ne i32 %22, 6
  %24 = and i32 %19, 32
  %25 = icmp eq i32 %24, 0
  %26 = or i1 %25, %23
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = and i32 %21, 224
  %29 = icmp eq i32 %28, 224
  %30 = and i32 %19, -805109760
  %31 = icmp eq i32 %30, -805109760
  %32 = and i1 %31, %29
  %33 = select i1 %32, i32 2, i32 1
  br label %34

34:                                               ; preds = %6, %8, %17, %27
  %35 = phi i32 [ 0, %6 ], [ %33, %27 ], [ 0, %8 ], [ 0, %17 ]
  store i32 %35, i32* @_ZZL8cpu_typevE4type, align 4
  %36 = tail call {}* @llvm.invariant.start.p0i8(i64 4, i8* bitcast (i32* @_ZZL8cpu_typevE4type to i8*))
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZL8cpu_typevE4type) #17
  br label %37

37:                                               ; preds = %3, %34, %0
  %38 = load i32, i32* @_ZZL8cpu_typevE4type, align 4
  ret i32 %38
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11run_programEPK2OpPPKvPKcPcimm(i32* nocapture readonly, i8** readonly, i8* nocapture readonly, i8* nocapture, i32, i64, i64) unnamed_addr #7 {
  %8 = alloca [128 x i8], align 16
  %9 = icmp sgt i32 %4, 7
  br i1 %9, label %10, label %19

10:                                               ; preds = %7, %10
  %11 = phi i32 [ %13, %10 ], [ 0, %7 ]
  %12 = phi i32 [ %14, %10 ], [ %4, %7 ]
  tail call fastcc void @_ZN3hswL8exec_opsEPK2OpPPKvPKcPci(i32* %0, i8** %1, i8* %2, i8* %3, i32 %11)
  %13 = add nuw nsw i32 %11, 8
  %14 = add nsw i32 %12, -8
  %15 = icmp sgt i32 %14, 7
  br i1 %15, label %10, label %16

16:                                               ; preds = %10
  %17 = and i32 %4, 7
  %18 = zext i32 %13 to i64
  br label %19

19:                                               ; preds = %16, %7
  %20 = phi i32 [ %4, %7 ], [ %17, %16 ]
  %21 = phi i64 [ 0, %7 ], [ %18, %16 ]
  %22 = icmp sgt i32 %20, 0
  br i1 %22, label %23, label %36

23:                                               ; preds = %19
  %24 = getelementptr inbounds [128 x i8], [128 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %24) #17
  %25 = mul i64 %21, %5
  %26 = getelementptr inbounds i8, i8* %2, i64 %25
  %27 = sext i32 %20 to i64
  %28 = mul i64 %27, %5
  %29 = icmp ugt i64 %28, 127
  %30 = sub i64 128, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = getelementptr [128 x i8], [128 x i8]* %8, i64 0, i64 %28
  call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 0, i64 %31, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %24, i8* align 1 %26, i64 %28, i1 false)
  call fastcc void @_ZN3hswL8exec_opsEPK2OpPPKvPKcPci(i32* %0, i8** %1, i8* nonnull %24, i8* nonnull %24, i32 0)
  %33 = mul i64 %21, %6
  %34 = getelementptr inbounds i8, i8* %3, i64 %33
  %35 = mul i64 %27, %6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* nonnull align 16 %24, i64 %35, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %24) #17
  br label %36

36:                                               ; preds = %23, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3skxL11run_programEPK2OpPPKvPKcPcimm(i32* nocapture readonly, i8** readonly, i8* nocapture readonly, i8* nocapture, i32, i64, i64) unnamed_addr #8 {
  %8 = alloca [256 x i8], align 16
  %9 = icmp sgt i32 %4, 15
  br i1 %9, label %10, label %19

10:                                               ; preds = %7, %10
  %11 = phi i32 [ %13, %10 ], [ 0, %7 ]
  %12 = phi i32 [ %14, %10 ], [ %4, %7 ]
  tail call fastcc void @_ZN3skxL8exec_opsEPK2OpPPKvPKcPci(i32* %0, i8** %1, i8* %2, i8* %3, i32 %11)
  %13 = add nuw nsw i32 %11, 16
  %14 = add nsw i32 %12, -16
  %15 = icmp sgt i32 %14, 15
  br i1 %15, label %10, label %16

16:                                               ; preds = %10
  %17 = and i32 %4, 15
  %18 = zext i32 %13 to i64
  br label %19

19:                                               ; preds = %16, %7
  %20 = phi i32 [ %4, %7 ], [ %17, %16 ]
  %21 = phi i64 [ 0, %7 ], [ %18, %16 ]
  %22 = icmp sgt i32 %20, 0
  br i1 %22, label %23, label %36

23:                                               ; preds = %19
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %24) #17
  %25 = mul i64 %21, %5
  %26 = getelementptr inbounds i8, i8* %2, i64 %25
  %27 = sext i32 %20 to i64
  %28 = mul i64 %27, %5
  %29 = icmp ugt i64 %28, 255
  %30 = sub i64 256, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = getelementptr [256 x i8], [256 x i8]* %8, i64 0, i64 %28
  call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 0, i64 %31, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %24, i8* align 1 %26, i64 %28, i1 false)
  call fastcc void @_ZN3skxL8exec_opsEPK2OpPPKvPKcPci(i32* %0, i8** %1, i8* nonnull %24, i8* nonnull %24, i32 0)
  %33 = mul i64 %21, %6
  %34 = getelementptr inbounds i8, i8* %3, i64 %33
  %35 = mul i64 %27, %6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* nonnull align 16 %24, i64 %35, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %24) #17
  br label %36

36:                                               ; preds = %23, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @skcms_MakeUsableAsDestination(%struct.skcms_ICCProfile*) local_unnamed_addr #4 {
  %2 = alloca %struct.skcms_Matrix3x3, align 4
  %3 = alloca [3 x %struct.skcms_TransferFunction], align 16
  %4 = alloca %struct.skcms_TransferFunction, align 4
  %5 = alloca float, align 4
  %6 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 11
  %7 = load i8, i8* %6, align 8, !range !22
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %49

9:                                                ; preds = %1
  %10 = bitcast %struct.skcms_Matrix3x3* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %10) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %10, i8 -1, i64 36, i1 false)
  %11 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 5
  %12 = load i8, i8* %11, align 8, !range !22
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %47, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 7
  %16 = load i8, i8* %15, align 8, !range !22
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %47, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 8
  %20 = call zeroext i1 @skcms_Matrix3x3_invert(%struct.skcms_Matrix3x3* %19, %struct.skcms_Matrix3x3* nonnull %2)
  br i1 %20, label %21, label %47

21:                                               ; preds = %18
  %22 = bitcast [3 x %struct.skcms_TransferFunction]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 84, i8* nonnull %22) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -1, i64 84, i1 false)
  %23 = bitcast %struct.skcms_TransferFunction* %4 to i8*
  %24 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %23) #17
  %25 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 6, i64 0
  %26 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %25, i64 0, i32 0, i32 0
  %27 = bitcast %struct.skcms_TransferFunction* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %27, i8 -1, i64 28, i1 false)
  %28 = load i32, i32* %26, align 8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %37

30:                                               ; preds = %21
  %31 = bitcast %union.skcms_Curve* %25 to %struct.anon*
  %32 = getelementptr inbounds %struct.anon, %struct.anon* %31, i64 0, i32 1
  %33 = call zeroext i1 @skcms_TransferFunction_invert(%struct.skcms_TransferFunction* %32, %struct.skcms_TransferFunction* nonnull %4)
  br i1 %33, label %34, label %37

34:                                               ; preds = %30
  %35 = bitcast [3 x %struct.skcms_TransferFunction]* %3 to i8*
  %36 = bitcast %struct.skcms_TransferFunction* %32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %35, i8* align 4 %36, i64 28, i1 false)
  br label %40

37:                                               ; preds = %30, %21
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #17
  store float 0xFFFFFFFFE0000000, float* %5, align 4
  %38 = getelementptr inbounds [3 x %struct.skcms_TransferFunction], [3 x %struct.skcms_TransferFunction]* %3, i64 0, i64 0
  %39 = call zeroext i1 @skcms_ApproximateCurve(%union.skcms_Curve* %25, %struct.skcms_TransferFunction* nonnull %38, float* nonnull %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #17
  br i1 %39, label %40, label %46

40:                                               ; preds = %37, %34
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %23) #17
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %23) #17
  %41 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 6, i64 1
  %42 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %41, i64 0, i32 0, i32 0
  %43 = bitcast %struct.skcms_TransferFunction* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %43, i8 -1, i64 28, i1 false)
  %44 = load i32, i32* %42, align 8
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %51, label %55

46:                                               ; preds = %72, %55, %37
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %23) #17
  call void @llvm.lifetime.end.p0i8(i64 84, i8* nonnull %22) #17
  br label %47

47:                                               ; preds = %18, %9, %14, %46, %82
  %48 = phi i1 [ true, %82 ], [ false, %46 ], [ false, %14 ], [ false, %9 ], [ false, %18 ]
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %10) #17
  br label %49

49:                                               ; preds = %47, %1
  %50 = phi i1 [ true, %1 ], [ %48, %47 ]
  ret i1 %50

51:                                               ; preds = %40
  %52 = bitcast %union.skcms_Curve* %41 to %struct.anon*
  %53 = getelementptr inbounds %struct.anon, %struct.anon* %52, i64 0, i32 1
  %54 = call zeroext i1 @skcms_TransferFunction_invert(%struct.skcms_TransferFunction* %53, %struct.skcms_TransferFunction* nonnull %4)
  br i1 %54, label %58, label %55

55:                                               ; preds = %51, %40
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #17
  store float 0xFFFFFFFFE0000000, float* %5, align 4
  %56 = getelementptr inbounds [3 x %struct.skcms_TransferFunction], [3 x %struct.skcms_TransferFunction]* %3, i64 0, i64 1
  %57 = call zeroext i1 @skcms_ApproximateCurve(%union.skcms_Curve* %41, %struct.skcms_TransferFunction* %56, float* nonnull %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #17
  br i1 %57, label %62, label %46

58:                                               ; preds = %51
  %59 = getelementptr inbounds [3 x %struct.skcms_TransferFunction], [3 x %struct.skcms_TransferFunction]* %3, i64 0, i64 1
  %60 = bitcast %struct.skcms_TransferFunction* %59 to i8*
  %61 = bitcast %struct.skcms_TransferFunction* %53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %60, i8* align 4 %61, i64 28, i1 false)
  br label %62

62:                                               ; preds = %58, %55
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %23) #17
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %23) #17
  %63 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 6, i64 2
  %64 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %63, i64 0, i32 0, i32 0
  %65 = bitcast %struct.skcms_TransferFunction* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %65, i8 -1, i64 28, i1 false)
  %66 = load i32, i32* %64, align 8
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %72

68:                                               ; preds = %62
  %69 = bitcast %union.skcms_Curve* %63 to %struct.anon*
  %70 = getelementptr inbounds %struct.anon, %struct.anon* %69, i64 0, i32 1
  %71 = call zeroext i1 @skcms_TransferFunction_invert(%struct.skcms_TransferFunction* %70, %struct.skcms_TransferFunction* nonnull %4)
  br i1 %71, label %78, label %72

72:                                               ; preds = %68, %62
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #17
  store float 0xFFFFFFFFE0000000, float* %5, align 4
  %73 = getelementptr inbounds [3 x %struct.skcms_TransferFunction], [3 x %struct.skcms_TransferFunction]* %3, i64 0, i64 2
  %74 = call zeroext i1 @skcms_ApproximateCurve(%union.skcms_Curve* %63, %struct.skcms_TransferFunction* %73, float* nonnull %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #17
  br i1 %74, label %75, label %46

75:                                               ; preds = %72
  %76 = bitcast %union.skcms_Curve* %63 to %struct.anon*
  %77 = bitcast %struct.skcms_TransferFunction* %73 to i8*
  br label %82

78:                                               ; preds = %68
  %79 = getelementptr inbounds [3 x %struct.skcms_TransferFunction], [3 x %struct.skcms_TransferFunction]* %3, i64 0, i64 2
  %80 = bitcast %struct.skcms_TransferFunction* %79 to i8*
  %81 = bitcast %struct.skcms_TransferFunction* %70 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 4 %81, i64 28, i1 false)
  br label %82

82:                                               ; preds = %75, %78
  %83 = phi i8* [ %77, %75 ], [ %80, %78 ]
  %84 = phi %struct.anon* [ %76, %75 ], [ %69, %78 ]
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %23) #17
  store i32 0, i32* %26, align 8
  %85 = bitcast %union.skcms_Curve* %25 to %struct.anon*
  %86 = getelementptr inbounds %struct.anon, %struct.anon* %85, i64 0, i32 1
  %87 = bitcast %struct.skcms_TransferFunction* %86 to i8*
  %88 = bitcast [3 x %struct.skcms_TransferFunction]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %87, i8* nonnull align 16 %88, i64 28, i1 false)
  store i32 0, i32* %42, align 8
  %89 = getelementptr inbounds [3 x %struct.skcms_TransferFunction], [3 x %struct.skcms_TransferFunction]* %3, i64 0, i64 1
  %90 = bitcast %union.skcms_Curve* %41 to %struct.anon*
  %91 = getelementptr inbounds %struct.anon, %struct.anon* %90, i64 0, i32 1
  %92 = bitcast %struct.skcms_TransferFunction* %91 to i8*
  %93 = bitcast %struct.skcms_TransferFunction* %89 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %92, i8* align 4 %93, i64 28, i1 false)
  store i32 0, i32* %64, align 8
  %94 = getelementptr inbounds %struct.anon, %struct.anon* %84, i64 0, i32 1
  %95 = bitcast %struct.skcms_TransferFunction* %94 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %95, i8* align 4 %83, i64 28, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 84, i8* nonnull %22) #17
  br label %47
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @skcms_MakeUsableAsDestinationWithSingleCurve(%struct.skcms_ICCProfile* nocapture) local_unnamed_addr #4 {
  %2 = alloca %struct.skcms_ICCProfile, align 8
  %3 = alloca %struct.skcms_TransferFunction, align 4
  %4 = bitcast %struct.skcms_ICCProfile* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1008, i8* nonnull %4) #17
  %5 = bitcast %struct.skcms_ICCProfile* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %5, i64 1008, i1 false)
  %6 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %2, i64 0, i32 11
  store i8 0, i8* %6, align 8
  %7 = call zeroext i1 @skcms_MakeUsableAsDestination(%struct.skcms_ICCProfile* nonnull %2)
  br i1 %7, label %8, label %36

8:                                                ; preds = %1
  %9 = bitcast %struct.skcms_TransferFunction* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %9) #17
  %10 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %2, i64 0, i32 6, i64 0
  %11 = bitcast %union.skcms_Curve* %10 to %struct.anon*
  %12 = getelementptr inbounds %struct.anon, %struct.anon* %11, i64 0, i32 1
  %13 = bitcast %struct.skcms_TransferFunction* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 -1, i64 28, i1 false)
  %14 = call zeroext i1 @skcms_TransferFunction_invert(%struct.skcms_TransferFunction* %12, %struct.skcms_TransferFunction* nonnull %3)
  br i1 %14, label %15, label %35

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 6, i64 0
  %17 = call float @skcms_MaxRoundtripError(%union.skcms_Curve* %16, %struct.skcms_TransferFunction* nonnull %3)
  %18 = fcmp olt float %17, 0.000000e+00
  %19 = select i1 %18, float 0.000000e+00, float %17
  %20 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 6, i64 1
  %21 = call float @skcms_MaxRoundtripError(%union.skcms_Curve* %20, %struct.skcms_TransferFunction* nonnull %3)
  %22 = fcmp ogt float %19, %21
  %23 = select i1 %22, float %19, float %21
  %24 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %0, i64 0, i32 6, i64 2
  %25 = call float @skcms_MaxRoundtripError(%union.skcms_Curve* %24, %struct.skcms_TransferFunction* nonnull %3)
  %26 = fcmp ogt float %23, %25
  %27 = select i1 %26, float %23, float %25
  %28 = fcmp olt float %27, 0x7FF0000000000000
  %29 = select i1 %28, float %27, float 0x7FF0000000000000
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %9) #17
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %9) #17
  %30 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %2, i64 0, i32 6, i64 1
  %31 = bitcast %union.skcms_Curve* %30 to %struct.anon*
  %32 = getelementptr inbounds %struct.anon, %struct.anon* %31, i64 0, i32 1
  %33 = bitcast %struct.skcms_TransferFunction* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %33, i8 -1, i64 28, i1 false)
  %34 = call zeroext i1 @skcms_TransferFunction_invert(%struct.skcms_TransferFunction* %32, %struct.skcms_TransferFunction* nonnull %3)
  br i1 %34, label %38, label %35

35:                                               ; preds = %38, %15, %8
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %9) #17
  br label %36

36:                                               ; preds = %35, %54, %1
  %37 = phi i1 [ false, %1 ], [ true, %54 ], [ false, %35 ]
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %4) #17
  ret i1 %37

38:                                               ; preds = %15
  %39 = call float @skcms_MaxRoundtripError(%union.skcms_Curve* %16, %struct.skcms_TransferFunction* nonnull %3)
  %40 = fcmp olt float %39, 0.000000e+00
  %41 = select i1 %40, float 0.000000e+00, float %39
  %42 = call float @skcms_MaxRoundtripError(%union.skcms_Curve* %20, %struct.skcms_TransferFunction* nonnull %3)
  %43 = fcmp ogt float %41, %42
  %44 = select i1 %43, float %41, float %42
  %45 = call float @skcms_MaxRoundtripError(%union.skcms_Curve* %24, %struct.skcms_TransferFunction* nonnull %3)
  %46 = fcmp ogt float %44, %45
  %47 = select i1 %46, float %44, float %45
  %48 = fcmp ogt float %29, %47
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %9) #17
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %9) #17
  %49 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %2, i64 0, i32 6, i64 2
  %50 = bitcast %union.skcms_Curve* %49 to %struct.anon*
  %51 = getelementptr inbounds %struct.anon, %struct.anon* %50, i64 0, i32 1
  %52 = bitcast %struct.skcms_TransferFunction* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %52, i8 -1, i64 28, i1 false)
  %53 = call zeroext i1 @skcms_TransferFunction_invert(%struct.skcms_TransferFunction* %51, %struct.skcms_TransferFunction* nonnull %3)
  br i1 %53, label %54, label %35

54:                                               ; preds = %38
  %55 = select i1 %48, float %47, float %29
  %56 = call float @skcms_MaxRoundtripError(%union.skcms_Curve* %16, %struct.skcms_TransferFunction* nonnull %3)
  %57 = fcmp olt float %56, 0.000000e+00
  %58 = select i1 %57, float 0.000000e+00, float %56
  %59 = call float @skcms_MaxRoundtripError(%union.skcms_Curve* %20, %struct.skcms_TransferFunction* nonnull %3)
  %60 = fcmp ogt float %58, %59
  %61 = select i1 %60, float %58, float %59
  %62 = call float @skcms_MaxRoundtripError(%union.skcms_Curve* %24, %struct.skcms_TransferFunction* nonnull %3)
  %63 = fcmp ogt float %61, %62
  %64 = select i1 %63, float %61, float %62
  %65 = fcmp ogt float %55, %64
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %9) #17
  %66 = zext i1 %48 to i64
  %67 = select i1 %65, i64 2, i64 %66
  %68 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %2, i64 0, i32 6, i64 %67
  %69 = bitcast %union.skcms_Curve* %68 to %struct.anon*
  %70 = getelementptr inbounds %struct.anon, %struct.anon* %69, i64 0, i32 1
  %71 = bitcast %struct.skcms_TransferFunction* %70 to i8*
  %72 = bitcast %struct.skcms_TransferFunction* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %72, i8* align 4 %71, i64 28, i1 false)
  %73 = bitcast %struct.skcms_TransferFunction* %32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %71, i64 28, i1 false)
  %74 = bitcast %struct.skcms_TransferFunction* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %74, i8* align 4 %71, i64 28, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* nonnull align 8 %4, i64 1008, i1 false)
  br label %36
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #9

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #9

; Function Attrs: nounwind ssp uwtable
define internal fastcc float @_ZL27max_roundtrip_error_checkedPK11skcms_CurvePK22skcms_TransferFunction(%union.skcms_Curve* nocapture readonly, %struct.skcms_TransferFunction* nocapture readonly) unnamed_addr #4 {
  %3 = alloca %struct.skcms_TransferFunction, align 4
  %4 = alloca %struct.skcms_TransferFunction, align 4
  %5 = bitcast %struct.skcms_TransferFunction* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %5) #17
  %6 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3, i64 0, i32 1
  %7 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3, i64 0, i32 2
  %8 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3, i64 0, i32 3
  %9 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3, i64 0, i32 4
  %10 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3, i64 0, i32 5
  %11 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3, i64 0, i32 6
  %12 = bitcast %struct.skcms_TransferFunction* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %12, i8 -1, i64 28, i1 false)
  %13 = call zeroext i1 @skcms_TransferFunction_invert(%struct.skcms_TransferFunction* %1, %struct.skcms_TransferFunction* nonnull %3)
  br i1 %13, label %14, label %57

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3, i64 0, i32 0
  %16 = load float, float* %15, align 4
  %17 = fcmp olt float %16, 0.000000e+00
  br i1 %17, label %18, label %22

18:                                               ; preds = %14
  %19 = fptosi float %16 to i32
  %20 = sitofp i32 %19 to float
  %21 = fcmp oeq float %16, %20
  br i1 %21, label %57, label %22

22:                                               ; preds = %18, %14
  %23 = load float, float* %6, align 4
  %24 = load float, float* %7, align 4
  %25 = fadd float %23, %24
  %26 = load float, float* %8, align 4
  %27 = fadd float %25, %26
  %28 = load float, float* %9, align 4
  %29 = fadd float %27, %28
  %30 = load float, float* %10, align 4
  %31 = fadd float %29, %30
  %32 = load float, float* %11, align 4
  %33 = fadd float %31, %32
  %34 = fadd float %16, %33
  %35 = fmul float %34, 0.000000e+00
  %36 = fcmp oeq float %35, 0.000000e+00
  br i1 %36, label %37, label %57

37:                                               ; preds = %22
  %38 = fcmp ult float %23, 0.000000e+00
  %39 = fcmp ult float %26, 0.000000e+00
  %40 = or i1 %38, %39
  br i1 %40, label %57, label %41

41:                                               ; preds = %37
  %42 = fcmp ult float %28, 0.000000e+00
  %43 = fcmp ult float %16, 0.000000e+00
  %44 = or i1 %43, %42
  br i1 %44, label %57, label %45

45:                                               ; preds = %41
  %46 = fmul float %23, %28
  %47 = fadd float %24, %46
  %48 = fcmp ult float %47, 0.000000e+00
  br i1 %48, label %57, label %49

49:                                               ; preds = %45
  %50 = bitcast %struct.skcms_TransferFunction* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %50) #17
  %51 = bitcast %struct.skcms_TransferFunction* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %51, i8 -1, i64 28, i1 false)
  %52 = call zeroext i1 @skcms_TransferFunction_invert(%struct.skcms_TransferFunction* nonnull %3, %struct.skcms_TransferFunction* nonnull %4)
  br i1 %52, label %53, label %55

53:                                               ; preds = %49
  %54 = call float @skcms_MaxRoundtripError(%union.skcms_Curve* %0, %struct.skcms_TransferFunction* nonnull %4)
  br label %55

55:                                               ; preds = %49, %53
  %56 = phi float [ %54, %53 ], [ 0x7FF0000000000000, %49 ]
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %50) #17
  br label %57

57:                                               ; preds = %18, %22, %37, %41, %45, %2, %55
  %58 = phi float [ %56, %55 ], [ 0x7FF0000000000000, %2 ], [ 0x7FF0000000000000, %45 ], [ 0x7FF0000000000000, %41 ], [ 0x7FF0000000000000, %37 ], [ 0x7FF0000000000000, %22 ], [ 0x7FF0000000000000, %18 ]
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %5) #17
  ret float %58
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN8baselineL8exec_opsEPK2OpPPKvPKcPci(i32* nocapture readonly, i8** readonly, i8* nocapture readonly, i8* nocapture, i32) unnamed_addr #10 {
  %6 = alloca <4 x float>, align 16
  %7 = alloca <4 x float>, align 16
  %8 = alloca <4 x float>, align 16
  %9 = alloca <4 x float>, align 16
  %10 = alloca <4 x float>, align 16
  %11 = bitcast <4 x float>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #17
  store <4 x float> zeroinitializer, <4 x float>* %7, align 16
  %12 = bitcast <4 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #17
  store <4 x float> zeroinitializer, <4 x float>* %8, align 16
  %13 = bitcast <4 x float>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #17
  store <4 x float> zeroinitializer, <4 x float>* %9, align 16
  %14 = bitcast <4 x float>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #17
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %10, align 16
  %15 = bitcast <4 x float>* %6 to i8*
  %16 = bitcast <4 x float>* %10 to <4 x i32>*
  %17 = bitcast <4 x float>* %9 to <4 x i32>*
  %18 = bitcast <4 x float>* %8 to <4 x i32>*
  %19 = bitcast <4 x float>* %7 to <4 x i32>*
  %20 = shl nsw i32 %4, 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %2, i64 %21
  %23 = bitcast i8* %22 to float*
  %24 = getelementptr inbounds i8, i8* %22, i64 16
  %25 = bitcast i8* %24 to float*
  %26 = getelementptr inbounds i8, i8* %22, i64 32
  %27 = bitcast i8* %26 to float*
  %28 = getelementptr inbounds i8, i8* %22, i64 48
  %29 = bitcast i8* %28 to float*
  %30 = getelementptr inbounds i8, i8* %22, i64 4
  %31 = bitcast i8* %30 to float*
  %32 = getelementptr inbounds i8, i8* %30, i64 16
  %33 = bitcast i8* %32 to float*
  %34 = getelementptr inbounds i8, i8* %30, i64 32
  %35 = bitcast i8* %34 to float*
  %36 = getelementptr inbounds i8, i8* %30, i64 48
  %37 = bitcast i8* %36 to float*
  %38 = getelementptr inbounds i8, i8* %22, i64 8
  %39 = bitcast i8* %38 to float*
  %40 = getelementptr inbounds i8, i8* %38, i64 16
  %41 = bitcast i8* %40 to float*
  %42 = getelementptr inbounds i8, i8* %38, i64 32
  %43 = bitcast i8* %42 to float*
  %44 = getelementptr inbounds i8, i8* %38, i64 48
  %45 = bitcast i8* %44 to float*
  %46 = getelementptr inbounds i8, i8* %22, i64 12
  %47 = bitcast i8* %46 to float*
  %48 = getelementptr inbounds i8, i8* %46, i64 16
  %49 = bitcast i8* %48 to float*
  %50 = getelementptr inbounds i8, i8* %46, i64 32
  %51 = bitcast i8* %50 to float*
  %52 = getelementptr inbounds i8, i8* %46, i64 48
  %53 = bitcast i8* %52 to float*
  %54 = mul nsw i32 %4, 12
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %2, i64 %55
  %57 = bitcast i8* %56 to float*
  %58 = getelementptr inbounds i8, i8* %56, i64 12
  %59 = bitcast i8* %58 to float*
  %60 = getelementptr inbounds i8, i8* %56, i64 24
  %61 = bitcast i8* %60 to float*
  %62 = getelementptr inbounds i8, i8* %56, i64 36
  %63 = bitcast i8* %62 to float*
  %64 = getelementptr inbounds i8, i8* %56, i64 4
  %65 = bitcast i8* %64 to float*
  %66 = getelementptr inbounds i8, i8* %64, i64 12
  %67 = bitcast i8* %66 to float*
  %68 = getelementptr inbounds i8, i8* %64, i64 24
  %69 = bitcast i8* %68 to float*
  %70 = getelementptr inbounds i8, i8* %64, i64 36
  %71 = bitcast i8* %70 to float*
  %72 = getelementptr inbounds i8, i8* %56, i64 8
  %73 = bitcast i8* %72 to float*
  %74 = getelementptr inbounds i8, i8* %72, i64 12
  %75 = bitcast i8* %74 to float*
  %76 = getelementptr inbounds i8, i8* %72, i64 24
  %77 = bitcast i8* %76 to float*
  %78 = getelementptr inbounds i8, i8* %72, i64 36
  %79 = bitcast i8* %78 to float*
  %80 = shl nsw i32 %4, 3
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %2, i64 %81
  %83 = bitcast i8* %82 to <4 x i64>*
  %84 = mul nsw i32 %4, 6
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %2, i64 %85
  %87 = bitcast i8* %86 to i16*
  %88 = getelementptr inbounds i8, i8* %86, i64 6
  %89 = bitcast i8* %88 to i16*
  %90 = getelementptr inbounds i8, i8* %86, i64 12
  %91 = bitcast i8* %90 to i16*
  %92 = getelementptr inbounds i8, i8* %86, i64 18
  %93 = bitcast i8* %92 to i16*
  %94 = getelementptr inbounds i8, i8* %86, i64 2
  %95 = bitcast i8* %94 to i16*
  %96 = getelementptr inbounds i8, i8* %94, i64 6
  %97 = bitcast i8* %96 to i16*
  %98 = getelementptr inbounds i8, i8* %94, i64 12
  %99 = bitcast i8* %98 to i16*
  %100 = getelementptr inbounds i8, i8* %94, i64 18
  %101 = bitcast i8* %100 to i16*
  %102 = getelementptr inbounds i8, i8* %86, i64 4
  %103 = bitcast i8* %102 to i16*
  %104 = getelementptr inbounds i8, i8* %102, i64 6
  %105 = bitcast i8* %104 to i16*
  %106 = getelementptr inbounds i8, i8* %102, i64 12
  %107 = bitcast i8* %106 to i16*
  %108 = getelementptr inbounds i8, i8* %102, i64 18
  %109 = bitcast i8* %108 to i16*
  %110 = shl nsw i32 %4, 2
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %2, i64 %111
  %113 = bitcast i8* %112 to <4 x i32>*
  %114 = sext i32 %4 to i64
  %115 = getelementptr inbounds i8, i8* %2, i64 %114
  %116 = bitcast i8* %115 to <4 x i8>*
  %117 = mul nsw i32 %4, 3
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %2, i64 %118
  %120 = getelementptr inbounds i8, i8* %119, i64 3
  %121 = getelementptr inbounds i8, i8* %119, i64 6
  %122 = getelementptr inbounds i8, i8* %119, i64 9
  %123 = getelementptr inbounds i8, i8* %119, i64 1
  %124 = getelementptr inbounds i8, i8* %123, i64 3
  %125 = getelementptr inbounds i8, i8* %123, i64 6
  %126 = getelementptr inbounds i8, i8* %123, i64 9
  %127 = getelementptr inbounds i8, i8* %119, i64 2
  %128 = getelementptr inbounds i8, i8* %127, i64 3
  %129 = getelementptr inbounds i8, i8* %127, i64 6
  %130 = getelementptr inbounds i8, i8* %127, i64 9
  %131 = shl nsw i32 %4, 1
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i8, i8* %2, i64 %132
  %134 = bitcast i8* %133 to <4 x i16>*
  br label %135

135:                                              ; preds = %2988, %5
  %136 = phi i8** [ %1, %5 ], [ %2989, %2988 ]
  %137 = phi i32* [ %0, %5 ], [ %138, %2988 ]
  %138 = getelementptr inbounds i32, i32* %137, i64 1
  %139 = load i32, i32* %137, align 4
  switch i32 %139, label %2988 [
    i32 0, label %140
    i32 1, label %144
    i32 3, label %148
    i32 4, label %164
    i32 5, label %175
    i32 6, label %218
    i32 2, label %234
    i32 7, label %281
    i32 8, label %297
    i32 9, label %340
    i32 10, label %356
    i32 11, label %414
    i32 12, label %435
    i32 13, label %487
    i32 14, label %528
    i32 15, label %553
    i32 16, label %586
    i32 17, label %589
    i32 18, label %610
    i32 19, label %619
    i32 20, label %620
    i32 21, label %628
    i32 22, label %639
    i32 23, label %697
    i32 24, label %770
    i32 25, label %805
    i32 26, label %936
    i32 27, label %1015
    i32 28, label %1094
    i32 29, label %1173
    i32 30, label %1252
    i32 31, label %1358
    i32 32, label %1464
    i32 33, label %1570
    i32 34, label %1676
    i32 35, label %1770
    i32 36, label %1864
    i32 37, label %1958
    i32 38, label %2052
    i32 39, label %2141
    i32 40, label %2230
    i32 41, label %2319
    i32 42, label %2408
    i32 43, label %2549
    i32 44, label %2690
    i32 45, label %2831
    i32 46, label %2972
    i32 47, label %2991
    i32 48, label %3004
    i32 49, label %3012
    i32 50, label %3020
    i32 51, label %3046
    i32 52, label %3066
    i32 53, label %3106
    i32 54, label %3131
    i32 55, label %3156
    i32 56, label %3205
    i32 57, label %3234
    i32 58, label %3298
    i32 59, label %3332
    i32 60, label %3399
    i32 61, label %3449
    i32 62, label %3489
  ]

140:                                              ; preds = %135
  %141 = load <4 x i8>, <4 x i8>* %116, align 1
  %142 = uitofp <4 x i8> %141 to <4 x float>
  %143 = fmul <4 x float> %142, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <4 x float> %143, <4 x float>* %10, align 16
  br label %2988

144:                                              ; preds = %135
  %145 = load <4 x i8>, <4 x i8>* %116, align 1
  %146 = uitofp <4 x i8> %145 to <4 x float>
  %147 = fmul <4 x float> %146, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <4 x float> %147, <4 x float>* %9, align 16
  store <4 x float> %147, <4 x float>* %8, align 16
  store <4 x float> %147, <4 x float>* %7, align 16
  br label %2988

148:                                              ; preds = %135
  %149 = load <4 x i16>, <4 x i16>* %134, align 1
  %150 = lshr <4 x i16> %149, <i16 12, i16 12, i16 12, i16 12>
  %151 = uitofp <4 x i16> %150 to <4 x float>
  %152 = fmul <4 x float> %151, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  store <4 x float> %152, <4 x float>* %7, align 16
  %153 = lshr <4 x i16> %149, <i16 8, i16 8, i16 8, i16 8>
  %154 = and <4 x i16> %153, <i16 15, i16 15, i16 15, i16 15>
  %155 = uitofp <4 x i16> %154 to <4 x float>
  %156 = fmul <4 x float> %155, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  store <4 x float> %156, <4 x float>* %8, align 16
  %157 = lshr <4 x i16> %149, <i16 4, i16 4, i16 4, i16 4>
  %158 = and <4 x i16> %157, <i16 15, i16 15, i16 15, i16 15>
  %159 = uitofp <4 x i16> %158 to <4 x float>
  %160 = fmul <4 x float> %159, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  store <4 x float> %160, <4 x float>* %9, align 16
  %161 = and <4 x i16> %149, <i16 15, i16 15, i16 15, i16 15>
  %162 = uitofp <4 x i16> %161 to <4 x float>
  %163 = fmul <4 x float> %162, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  store <4 x float> %163, <4 x float>* %10, align 16
  br label %2988

164:                                              ; preds = %135
  %165 = load <4 x i16>, <4 x i16>* %134, align 1
  %166 = and <4 x i16> %165, <i16 31, i16 31, i16 31, i16 31>
  %167 = uitofp <4 x i16> %166 to <4 x float>
  %168 = fmul <4 x float> %167, <float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000>
  store <4 x float> %168, <4 x float>* %7, align 16
  %169 = and <4 x i16> %165, <i16 2016, i16 2016, i16 2016, i16 2016>
  %170 = uitofp <4 x i16> %169 to <4 x float>
  %171 = fmul <4 x float> %170, <float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000>
  store <4 x float> %171, <4 x float>* %8, align 16
  %172 = and <4 x i16> %165, <i16 -2048, i16 -2048, i16 -2048, i16 -2048>
  %173 = uitofp <4 x i16> %172 to <4 x float>
  %174 = fmul <4 x float> %173, <float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000>
  store <4 x float> %174, <4 x float>* %9, align 16
  br label %2988

175:                                              ; preds = %135
  %176 = load i8, i8* %119, align 1
  %177 = zext i8 %176 to i32
  %178 = insertelement <4 x i32> undef, i32 %177, i32 0
  %179 = load i8, i8* %120, align 1
  %180 = zext i8 %179 to i32
  %181 = insertelement <4 x i32> %178, i32 %180, i32 1
  %182 = load i8, i8* %121, align 1
  %183 = zext i8 %182 to i32
  %184 = insertelement <4 x i32> %181, i32 %183, i32 2
  %185 = load i8, i8* %122, align 1
  %186 = zext i8 %185 to i32
  %187 = insertelement <4 x i32> %184, i32 %186, i32 3
  %188 = uitofp <4 x i32> %187 to <4 x float>
  %189 = fmul <4 x float> %188, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <4 x float> %189, <4 x float>* %7, align 16
  %190 = load i8, i8* %123, align 1
  %191 = zext i8 %190 to i32
  %192 = insertelement <4 x i32> undef, i32 %191, i32 0
  %193 = load i8, i8* %124, align 1
  %194 = zext i8 %193 to i32
  %195 = insertelement <4 x i32> %192, i32 %194, i32 1
  %196 = load i8, i8* %125, align 1
  %197 = zext i8 %196 to i32
  %198 = insertelement <4 x i32> %195, i32 %197, i32 2
  %199 = load i8, i8* %126, align 1
  %200 = zext i8 %199 to i32
  %201 = insertelement <4 x i32> %198, i32 %200, i32 3
  %202 = uitofp <4 x i32> %201 to <4 x float>
  %203 = fmul <4 x float> %202, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <4 x float> %203, <4 x float>* %8, align 16
  %204 = load i8, i8* %127, align 1
  %205 = zext i8 %204 to i32
  %206 = insertelement <4 x i32> undef, i32 %205, i32 0
  %207 = load i8, i8* %128, align 1
  %208 = zext i8 %207 to i32
  %209 = insertelement <4 x i32> %206, i32 %208, i32 1
  %210 = load i8, i8* %129, align 1
  %211 = zext i8 %210 to i32
  %212 = insertelement <4 x i32> %209, i32 %211, i32 2
  %213 = load i8, i8* %130, align 1
  %214 = zext i8 %213 to i32
  %215 = insertelement <4 x i32> %212, i32 %214, i32 3
  %216 = uitofp <4 x i32> %215 to <4 x float>
  %217 = fmul <4 x float> %216, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <4 x float> %217, <4 x float>* %9, align 16
  br label %2988

218:                                              ; preds = %135
  %219 = load <4 x i32>, <4 x i32>* %113, align 1
  %220 = and <4 x i32> %219, <i32 255, i32 255, i32 255, i32 255>
  %221 = uitofp <4 x i32> %220 to <4 x float>
  %222 = fmul <4 x float> %221, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <4 x float> %222, <4 x float>* %7, align 16
  %223 = lshr <4 x i32> %219, <i32 8, i32 8, i32 8, i32 8>
  %224 = and <4 x i32> %223, <i32 255, i32 255, i32 255, i32 255>
  %225 = uitofp <4 x i32> %224 to <4 x float>
  %226 = fmul <4 x float> %225, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <4 x float> %226, <4 x float>* %8, align 16
  %227 = lshr <4 x i32> %219, <i32 16, i32 16, i32 16, i32 16>
  %228 = and <4 x i32> %227, <i32 255, i32 255, i32 255, i32 255>
  %229 = uitofp <4 x i32> %228 to <4 x float>
  %230 = fmul <4 x float> %229, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <4 x float> %230, <4 x float>* %9, align 16
  %231 = lshr <4 x i32> %219, <i32 24, i32 24, i32 24, i32 24>
  %232 = uitofp <4 x i32> %231 to <4 x float>
  %233 = fmul <4 x float> %232, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <4 x float> %233, <4 x float>* %10, align 16
  br label %2988

234:                                              ; preds = %135
  %235 = getelementptr inbounds i8*, i8** %136, i64 1
  %236 = load i8*, i8** %136, align 8
  %237 = load <4 x i8>, <4 x i8>* %116, align 1
  %238 = zext <4 x i8> %237 to <4 x i32>
  %239 = extractelement <4 x i32> %238, i32 0
  %240 = shl nuw nsw i32 %239, 2
  %241 = zext i32 %240 to i64
  %242 = getelementptr inbounds i8, i8* %236, i64 %241
  %243 = bitcast i8* %242 to i32*
  %244 = load i32, i32* %243, align 1
  %245 = insertelement <4 x i32> undef, i32 %244, i32 0
  %246 = extractelement <4 x i32> %238, i32 1
  %247 = shl nuw nsw i32 %246, 2
  %248 = zext i32 %247 to i64
  %249 = getelementptr inbounds i8, i8* %236, i64 %248
  %250 = bitcast i8* %249 to i32*
  %251 = load i32, i32* %250, align 1
  %252 = insertelement <4 x i32> %245, i32 %251, i32 1
  %253 = extractelement <4 x i32> %238, i32 2
  %254 = shl nuw nsw i32 %253, 2
  %255 = zext i32 %254 to i64
  %256 = getelementptr inbounds i8, i8* %236, i64 %255
  %257 = bitcast i8* %256 to i32*
  %258 = load i32, i32* %257, align 1
  %259 = insertelement <4 x i32> %252, i32 %258, i32 2
  %260 = extractelement <4 x i32> %238, i32 3
  %261 = shl nuw nsw i32 %260, 2
  %262 = zext i32 %261 to i64
  %263 = getelementptr inbounds i8, i8* %236, i64 %262
  %264 = bitcast i8* %263 to i32*
  %265 = load i32, i32* %264, align 1
  %266 = insertelement <4 x i32> %259, i32 %265, i32 3
  %267 = and <4 x i32> %266, <i32 255, i32 255, i32 255, i32 255>
  %268 = uitofp <4 x i32> %267 to <4 x float>
  %269 = fmul <4 x float> %268, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <4 x float> %269, <4 x float>* %7, align 16
  %270 = lshr <4 x i32> %266, <i32 8, i32 8, i32 8, i32 8>
  %271 = and <4 x i32> %270, <i32 255, i32 255, i32 255, i32 255>
  %272 = uitofp <4 x i32> %271 to <4 x float>
  %273 = fmul <4 x float> %272, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <4 x float> %273, <4 x float>* %8, align 16
  %274 = lshr <4 x i32> %266, <i32 16, i32 16, i32 16, i32 16>
  %275 = and <4 x i32> %274, <i32 255, i32 255, i32 255, i32 255>
  %276 = uitofp <4 x i32> %275 to <4 x float>
  %277 = fmul <4 x float> %276, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <4 x float> %277, <4 x float>* %9, align 16
  %278 = lshr <4 x i32> %266, <i32 24, i32 24, i32 24, i32 24>
  %279 = uitofp <4 x i32> %278 to <4 x float>
  %280 = fmul <4 x float> %279, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <4 x float> %280, <4 x float>* %10, align 16
  br label %2988

281:                                              ; preds = %135
  %282 = load <4 x i32>, <4 x i32>* %113, align 1
  %283 = and <4 x i32> %282, <i32 1023, i32 1023, i32 1023, i32 1023>
  %284 = uitofp <4 x i32> %283 to <4 x float>
  %285 = fmul <4 x float> %284, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  store <4 x float> %285, <4 x float>* %7, align 16
  %286 = lshr <4 x i32> %282, <i32 10, i32 10, i32 10, i32 10>
  %287 = and <4 x i32> %286, <i32 1023, i32 1023, i32 1023, i32 1023>
  %288 = uitofp <4 x i32> %287 to <4 x float>
  %289 = fmul <4 x float> %288, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  store <4 x float> %289, <4 x float>* %8, align 16
  %290 = lshr <4 x i32> %282, <i32 20, i32 20, i32 20, i32 20>
  %291 = and <4 x i32> %290, <i32 1023, i32 1023, i32 1023, i32 1023>
  %292 = uitofp <4 x i32> %291 to <4 x float>
  %293 = fmul <4 x float> %292, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  store <4 x float> %293, <4 x float>* %9, align 16
  %294 = lshr <4 x i32> %282, <i32 30, i32 30, i32 30, i32 30>
  %295 = uitofp <4 x i32> %294 to <4 x float>
  %296 = fmul <4 x float> %295, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  store <4 x float> %296, <4 x float>* %10, align 16
  br label %2988

297:                                              ; preds = %135
  %298 = load i16, i16* %87, align 2
  %299 = zext i16 %298 to i32
  %300 = insertelement <4 x i32> undef, i32 %299, i32 0
  %301 = load i16, i16* %89, align 2
  %302 = zext i16 %301 to i32
  %303 = insertelement <4 x i32> %300, i32 %302, i32 1
  %304 = load i16, i16* %91, align 2
  %305 = zext i16 %304 to i32
  %306 = insertelement <4 x i32> %303, i32 %305, i32 2
  %307 = load i16, i16* %93, align 2
  %308 = zext i16 %307 to i32
  %309 = insertelement <4 x i32> %306, i32 %308, i32 3
  %310 = uitofp <4 x i32> %309 to <4 x float>
  %311 = fmul <4 x float> %310, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <4 x float> %311, <4 x float>* %7, align 16
  %312 = load i16, i16* %95, align 2
  %313 = zext i16 %312 to i32
  %314 = insertelement <4 x i32> undef, i32 %313, i32 0
  %315 = load i16, i16* %97, align 2
  %316 = zext i16 %315 to i32
  %317 = insertelement <4 x i32> %314, i32 %316, i32 1
  %318 = load i16, i16* %99, align 2
  %319 = zext i16 %318 to i32
  %320 = insertelement <4 x i32> %317, i32 %319, i32 2
  %321 = load i16, i16* %101, align 2
  %322 = zext i16 %321 to i32
  %323 = insertelement <4 x i32> %320, i32 %322, i32 3
  %324 = uitofp <4 x i32> %323 to <4 x float>
  %325 = fmul <4 x float> %324, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <4 x float> %325, <4 x float>* %8, align 16
  %326 = load i16, i16* %103, align 2
  %327 = zext i16 %326 to i32
  %328 = insertelement <4 x i32> undef, i32 %327, i32 0
  %329 = load i16, i16* %105, align 2
  %330 = zext i16 %329 to i32
  %331 = insertelement <4 x i32> %328, i32 %330, i32 1
  %332 = load i16, i16* %107, align 2
  %333 = zext i16 %332 to i32
  %334 = insertelement <4 x i32> %331, i32 %333, i32 2
  %335 = load i16, i16* %109, align 2
  %336 = zext i16 %335 to i32
  %337 = insertelement <4 x i32> %334, i32 %336, i32 3
  %338 = uitofp <4 x i32> %337 to <4 x float>
  %339 = fmul <4 x float> %338, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <4 x float> %339, <4 x float>* %9, align 16
  br label %2988

340:                                              ; preds = %135
  %341 = load <4 x i64>, <4 x i64>* %83, align 2
  %342 = and <4 x i64> %341, <i64 65535, i64 65535, i64 65535, i64 65535>
  %343 = uitofp <4 x i64> %342 to <4 x float>
  %344 = fmul <4 x float> %343, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <4 x float> %344, <4 x float>* %7, align 16
  %345 = lshr <4 x i64> %341, <i64 16, i64 16, i64 16, i64 16>
  %346 = and <4 x i64> %345, <i64 65535, i64 65535, i64 65535, i64 65535>
  %347 = uitofp <4 x i64> %346 to <4 x float>
  %348 = fmul <4 x float> %347, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <4 x float> %348, <4 x float>* %8, align 16
  %349 = lshr <4 x i64> %341, <i64 32, i64 32, i64 32, i64 32>
  %350 = and <4 x i64> %349, <i64 65535, i64 65535, i64 65535, i64 65535>
  %351 = uitofp <4 x i64> %350 to <4 x float>
  %352 = fmul <4 x float> %351, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <4 x float> %352, <4 x float>* %9, align 16
  %353 = lshr <4 x i64> %341, <i64 48, i64 48, i64 48, i64 48>
  %354 = uitofp <4 x i64> %353 to <4 x float>
  %355 = fmul <4 x float> %354, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <4 x float> %355, <4 x float>* %10, align 16
  br label %2988

356:                                              ; preds = %135
  %357 = load i16, i16* %87, align 2
  %358 = zext i16 %357 to i32
  %359 = insertelement <4 x i32> undef, i32 %358, i32 0
  %360 = load i16, i16* %89, align 2
  %361 = zext i16 %360 to i32
  %362 = insertelement <4 x i32> %359, i32 %361, i32 1
  %363 = load i16, i16* %91, align 2
  %364 = zext i16 %363 to i32
  %365 = insertelement <4 x i32> %362, i32 %364, i32 2
  %366 = load i16, i16* %93, align 2
  %367 = zext i16 %366 to i32
  %368 = insertelement <4 x i32> %365, i32 %367, i32 3
  %369 = load i16, i16* %95, align 2
  %370 = zext i16 %369 to i32
  %371 = insertelement <4 x i32> undef, i32 %370, i32 0
  %372 = load i16, i16* %97, align 2
  %373 = zext i16 %372 to i32
  %374 = insertelement <4 x i32> %371, i32 %373, i32 1
  %375 = load i16, i16* %99, align 2
  %376 = zext i16 %375 to i32
  %377 = insertelement <4 x i32> %374, i32 %376, i32 2
  %378 = load i16, i16* %101, align 2
  %379 = zext i16 %378 to i32
  %380 = insertelement <4 x i32> %377, i32 %379, i32 3
  %381 = load i16, i16* %103, align 2
  %382 = zext i16 %381 to i32
  %383 = insertelement <4 x i32> undef, i32 %382, i32 0
  %384 = load i16, i16* %105, align 2
  %385 = zext i16 %384 to i32
  %386 = insertelement <4 x i32> %383, i32 %385, i32 1
  %387 = load i16, i16* %107, align 2
  %388 = zext i16 %387 to i32
  %389 = insertelement <4 x i32> %386, i32 %388, i32 2
  %390 = load i16, i16* %109, align 2
  %391 = zext i16 %390 to i32
  %392 = insertelement <4 x i32> %389, i32 %391, i32 3
  %393 = shl <4 x i32> %368, <i32 8, i32 8, i32 8, i32 8>
  %394 = and <4 x i32> %393, <i32 65280, i32 65280, i32 65280, i32 65280>
  %395 = lshr <4 x i32> %368, <i32 8, i32 8, i32 8, i32 8>
  %396 = and <4 x i32> %395, <i32 255, i32 255, i32 255, i32 255>
  %397 = or <4 x i32> %394, %396
  %398 = uitofp <4 x i32> %397 to <4 x float>
  %399 = fmul <4 x float> %398, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <4 x float> %399, <4 x float>* %7, align 16
  %400 = shl <4 x i32> %380, <i32 8, i32 8, i32 8, i32 8>
  %401 = and <4 x i32> %400, <i32 65280, i32 65280, i32 65280, i32 65280>
  %402 = lshr <4 x i32> %380, <i32 8, i32 8, i32 8, i32 8>
  %403 = and <4 x i32> %402, <i32 255, i32 255, i32 255, i32 255>
  %404 = or <4 x i32> %401, %403
  %405 = uitofp <4 x i32> %404 to <4 x float>
  %406 = fmul <4 x float> %405, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <4 x float> %406, <4 x float>* %8, align 16
  %407 = shl <4 x i32> %392, <i32 8, i32 8, i32 8, i32 8>
  %408 = and <4 x i32> %407, <i32 65280, i32 65280, i32 65280, i32 65280>
  %409 = lshr <4 x i32> %392, <i32 8, i32 8, i32 8, i32 8>
  %410 = and <4 x i32> %409, <i32 255, i32 255, i32 255, i32 255>
  %411 = or <4 x i32> %408, %410
  %412 = uitofp <4 x i32> %411 to <4 x float>
  %413 = fmul <4 x float> %412, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <4 x float> %413, <4 x float>* %9, align 16
  br label %2988

414:                                              ; preds = %135
  %415 = load <4 x i64>, <4 x i64>* %83, align 2
  %416 = shl <4 x i64> %415, <i64 8, i64 8, i64 8, i64 8>
  %417 = and <4 x i64> %416, <i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696>
  %418 = lshr <4 x i64> %415, <i64 8, i64 8, i64 8, i64 8>
  %419 = and <4 x i64> %418, <i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695>
  %420 = or <4 x i64> %417, %419
  %421 = and <4 x i64> %420, <i64 65535, i64 65535, i64 65535, i64 65535>
  %422 = uitofp <4 x i64> %421 to <4 x float>
  %423 = fmul <4 x float> %422, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <4 x float> %423, <4 x float>* %7, align 16
  %424 = lshr <4 x i64> %420, <i64 16, i64 16, i64 16, i64 16>
  %425 = and <4 x i64> %424, <i64 65535, i64 65535, i64 65535, i64 65535>
  %426 = uitofp <4 x i64> %425 to <4 x float>
  %427 = fmul <4 x float> %426, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <4 x float> %427, <4 x float>* %8, align 16
  %428 = lshr <4 x i64> %420, <i64 32, i64 32, i64 32, i64 32>
  %429 = and <4 x i64> %428, <i64 65535, i64 65535, i64 65535, i64 65535>
  %430 = uitofp <4 x i64> %429 to <4 x float>
  %431 = fmul <4 x float> %430, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <4 x float> %431, <4 x float>* %9, align 16
  %432 = lshr <4 x i64> %420, <i64 48, i64 48, i64 48, i64 48>
  %433 = uitofp <4 x i64> %432 to <4 x float>
  %434 = fmul <4 x float> %433, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <4 x float> %434, <4 x float>* %10, align 16
  br label %2988

435:                                              ; preds = %135
  %436 = load i16, i16* %87, align 2
  %437 = insertelement <4 x i16> undef, i16 %436, i32 0
  %438 = load i16, i16* %89, align 2
  %439 = insertelement <4 x i16> %437, i16 %438, i32 1
  %440 = load i16, i16* %91, align 2
  %441 = insertelement <4 x i16> %439, i16 %440, i32 2
  %442 = load i16, i16* %93, align 2
  %443 = insertelement <4 x i16> %441, i16 %442, i32 3
  %444 = load i16, i16* %95, align 2
  %445 = insertelement <4 x i16> undef, i16 %444, i32 0
  %446 = load i16, i16* %97, align 2
  %447 = insertelement <4 x i16> %445, i16 %446, i32 1
  %448 = load i16, i16* %99, align 2
  %449 = insertelement <4 x i16> %447, i16 %448, i32 2
  %450 = load i16, i16* %101, align 2
  %451 = insertelement <4 x i16> %449, i16 %450, i32 3
  %452 = load i16, i16* %103, align 2
  %453 = insertelement <4 x i16> undef, i16 %452, i32 0
  %454 = load i16, i16* %105, align 2
  %455 = insertelement <4 x i16> %453, i16 %454, i32 1
  %456 = load i16, i16* %107, align 2
  %457 = insertelement <4 x i16> %455, i16 %456, i32 2
  %458 = load i16, i16* %109, align 2
  %459 = insertelement <4 x i16> %457, i16 %458, i32 3
  %460 = zext <4 x i16> %443 to <4 x i32>
  %461 = and <4 x i32> %460, <i32 32767, i32 32767, i32 32767, i32 32767>
  %462 = shl nuw <4 x i32> %460, <i32 16, i32 16, i32 16, i32 16>
  %463 = and <4 x i32> %462, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %464 = shl nuw nsw <4 x i32> %461, <i32 13, i32 13, i32 13, i32 13>
  %465 = or <4 x i32> %463, %464
  %466 = add nuw nsw <4 x i32> %465, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %467 = icmp ugt <4 x i32> %461, <i32 1023, i32 1023, i32 1023, i32 1023>
  %468 = select <4 x i1> %467, <4 x i32> %466, <4 x i32> zeroinitializer
  store <4 x i32> %468, <4 x i32>* %19, align 16
  %469 = zext <4 x i16> %451 to <4 x i32>
  %470 = and <4 x i32> %469, <i32 32767, i32 32767, i32 32767, i32 32767>
  %471 = shl nuw <4 x i32> %469, <i32 16, i32 16, i32 16, i32 16>
  %472 = and <4 x i32> %471, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %473 = shl nuw nsw <4 x i32> %470, <i32 13, i32 13, i32 13, i32 13>
  %474 = or <4 x i32> %472, %473
  %475 = add nuw nsw <4 x i32> %474, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %476 = icmp ugt <4 x i32> %470, <i32 1023, i32 1023, i32 1023, i32 1023>
  %477 = select <4 x i1> %476, <4 x i32> %475, <4 x i32> zeroinitializer
  store <4 x i32> %477, <4 x i32>* %18, align 16
  %478 = zext <4 x i16> %459 to <4 x i32>
  %479 = and <4 x i32> %478, <i32 32767, i32 32767, i32 32767, i32 32767>
  %480 = shl nuw <4 x i32> %478, <i32 16, i32 16, i32 16, i32 16>
  %481 = and <4 x i32> %480, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %482 = shl nuw nsw <4 x i32> %479, <i32 13, i32 13, i32 13, i32 13>
  %483 = or <4 x i32> %481, %482
  %484 = add nuw nsw <4 x i32> %483, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %485 = icmp ugt <4 x i32> %479, <i32 1023, i32 1023, i32 1023, i32 1023>
  %486 = select <4 x i1> %485, <4 x i32> %484, <4 x i32> zeroinitializer
  store <4 x i32> %486, <4 x i32>* %17, align 16
  br label %2988

487:                                              ; preds = %135
  %488 = load <4 x i64>, <4 x i64>* %83, align 2
  %489 = lshr <4 x i64> %488, <i64 16, i64 16, i64 16, i64 16>
  %490 = lshr <4 x i64> %488, <i64 32, i64 32, i64 32, i64 32>
  %491 = lshr <4 x i64> %488, <i64 48, i64 48, i64 48, i64 48>
  %492 = trunc <4 x i64> %488 to <4 x i32>
  %493 = and <4 x i32> %492, <i32 32767, i32 32767, i32 32767, i32 32767>
  %494 = shl <4 x i32> %492, <i32 16, i32 16, i32 16, i32 16>
  %495 = and <4 x i32> %494, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %496 = shl nuw nsw <4 x i32> %493, <i32 13, i32 13, i32 13, i32 13>
  %497 = or <4 x i32> %495, %496
  %498 = add nuw nsw <4 x i32> %497, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %499 = icmp ugt <4 x i32> %493, <i32 1023, i32 1023, i32 1023, i32 1023>
  %500 = select <4 x i1> %499, <4 x i32> %498, <4 x i32> zeroinitializer
  store <4 x i32> %500, <4 x i32>* %19, align 16
  %501 = trunc <4 x i64> %489 to <4 x i32>
  %502 = and <4 x i32> %501, <i32 32767, i32 32767, i32 32767, i32 32767>
  %503 = shl <4 x i32> %501, <i32 16, i32 16, i32 16, i32 16>
  %504 = and <4 x i32> %503, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %505 = shl nuw nsw <4 x i32> %502, <i32 13, i32 13, i32 13, i32 13>
  %506 = or <4 x i32> %504, %505
  %507 = add nuw nsw <4 x i32> %506, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %508 = icmp ugt <4 x i32> %502, <i32 1023, i32 1023, i32 1023, i32 1023>
  %509 = select <4 x i1> %508, <4 x i32> %507, <4 x i32> zeroinitializer
  store <4 x i32> %509, <4 x i32>* %18, align 16
  %510 = trunc <4 x i64> %490 to <4 x i32>
  %511 = and <4 x i32> %510, <i32 32767, i32 32767, i32 32767, i32 32767>
  %512 = shl <4 x i32> %510, <i32 16, i32 16, i32 16, i32 16>
  %513 = and <4 x i32> %512, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %514 = shl nuw nsw <4 x i32> %511, <i32 13, i32 13, i32 13, i32 13>
  %515 = or <4 x i32> %513, %514
  %516 = add nuw nsw <4 x i32> %515, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %517 = icmp ugt <4 x i32> %511, <i32 1023, i32 1023, i32 1023, i32 1023>
  %518 = select <4 x i1> %517, <4 x i32> %516, <4 x i32> zeroinitializer
  store <4 x i32> %518, <4 x i32>* %17, align 16
  %519 = trunc <4 x i64> %491 to <4 x i32>
  %520 = and <4 x i32> %519, <i32 32767, i32 32767, i32 32767, i32 32767>
  %521 = shl nuw <4 x i32> %519, <i32 16, i32 16, i32 16, i32 16>
  %522 = and <4 x i32> %521, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %523 = shl nuw nsw <4 x i32> %520, <i32 13, i32 13, i32 13, i32 13>
  %524 = or <4 x i32> %522, %523
  %525 = add nuw nsw <4 x i32> %524, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %526 = icmp ugt <4 x i32> %520, <i32 1023, i32 1023, i32 1023, i32 1023>
  %527 = select <4 x i1> %526, <4 x i32> %525, <4 x i32> zeroinitializer
  store <4 x i32> %527, <4 x i32>* %16, align 16
  br label %2988

528:                                              ; preds = %135
  %529 = load float, float* %57, align 4
  %530 = insertelement <4 x float> undef, float %529, i32 0
  %531 = load float, float* %59, align 4
  %532 = insertelement <4 x float> %530, float %531, i32 1
  %533 = load float, float* %61, align 4
  %534 = insertelement <4 x float> %532, float %533, i32 2
  %535 = load float, float* %63, align 4
  %536 = insertelement <4 x float> %534, float %535, i32 3
  store <4 x float> %536, <4 x float>* %7, align 16
  %537 = load float, float* %65, align 4
  %538 = insertelement <4 x float> undef, float %537, i32 0
  %539 = load float, float* %67, align 4
  %540 = insertelement <4 x float> %538, float %539, i32 1
  %541 = load float, float* %69, align 4
  %542 = insertelement <4 x float> %540, float %541, i32 2
  %543 = load float, float* %71, align 4
  %544 = insertelement <4 x float> %542, float %543, i32 3
  store <4 x float> %544, <4 x float>* %8, align 16
  %545 = load float, float* %73, align 4
  %546 = insertelement <4 x float> undef, float %545, i32 0
  %547 = load float, float* %75, align 4
  %548 = insertelement <4 x float> %546, float %547, i32 1
  %549 = load float, float* %77, align 4
  %550 = insertelement <4 x float> %548, float %549, i32 2
  %551 = load float, float* %79, align 4
  %552 = insertelement <4 x float> %550, float %551, i32 3
  store <4 x float> %552, <4 x float>* %9, align 16
  br label %2988

553:                                              ; preds = %135
  %554 = load float, float* %23, align 4
  %555 = insertelement <4 x float> undef, float %554, i32 0
  %556 = load float, float* %25, align 4
  %557 = insertelement <4 x float> %555, float %556, i32 1
  %558 = load float, float* %27, align 4
  %559 = insertelement <4 x float> %557, float %558, i32 2
  %560 = load float, float* %29, align 4
  %561 = insertelement <4 x float> %559, float %560, i32 3
  store <4 x float> %561, <4 x float>* %7, align 16
  %562 = load float, float* %31, align 4
  %563 = insertelement <4 x float> undef, float %562, i32 0
  %564 = load float, float* %33, align 4
  %565 = insertelement <4 x float> %563, float %564, i32 1
  %566 = load float, float* %35, align 4
  %567 = insertelement <4 x float> %565, float %566, i32 2
  %568 = load float, float* %37, align 4
  %569 = insertelement <4 x float> %567, float %568, i32 3
  store <4 x float> %569, <4 x float>* %8, align 16
  %570 = load float, float* %39, align 4
  %571 = insertelement <4 x float> undef, float %570, i32 0
  %572 = load float, float* %41, align 4
  %573 = insertelement <4 x float> %571, float %572, i32 1
  %574 = load float, float* %43, align 4
  %575 = insertelement <4 x float> %573, float %574, i32 2
  %576 = load float, float* %45, align 4
  %577 = insertelement <4 x float> %575, float %576, i32 3
  store <4 x float> %577, <4 x float>* %9, align 16
  %578 = load float, float* %47, align 4
  %579 = insertelement <4 x float> undef, float %578, i32 0
  %580 = load float, float* %49, align 4
  %581 = insertelement <4 x float> %579, float %580, i32 1
  %582 = load float, float* %51, align 4
  %583 = insertelement <4 x float> %581, float %582, i32 2
  %584 = load float, float* %53, align 4
  %585 = insertelement <4 x float> %583, float %584, i32 3
  store <4 x float> %585, <4 x float>* %10, align 16
  br label %2988

586:                                              ; preds = %135
  %587 = load <4 x float>, <4 x float>* %7, align 16
  %588 = load <4 x float>, <4 x float>* %9, align 16
  store <4 x float> %588, <4 x float>* %7, align 16
  store <4 x float> %587, <4 x float>* %9, align 16
  br label %2988

589:                                              ; preds = %135
  %590 = load <4 x float>, <4 x float>* %7, align 16
  %591 = fcmp ogt <4 x float> %590, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %592 = select <4 x i1> %591, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %590
  %593 = fcmp ogt <4 x float> %592, zeroinitializer
  %594 = select <4 x i1> %593, <4 x float> %592, <4 x float> zeroinitializer
  store <4 x float> %594, <4 x float>* %7, align 16
  %595 = load <4 x float>, <4 x float>* %8, align 16
  %596 = fcmp ogt <4 x float> %595, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %597 = select <4 x i1> %596, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %595
  %598 = fcmp ogt <4 x float> %597, zeroinitializer
  %599 = select <4 x i1> %598, <4 x float> %597, <4 x float> zeroinitializer
  store <4 x float> %599, <4 x float>* %8, align 16
  %600 = load <4 x float>, <4 x float>* %9, align 16
  %601 = fcmp ogt <4 x float> %600, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %602 = select <4 x i1> %601, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %600
  %603 = fcmp ogt <4 x float> %602, zeroinitializer
  %604 = select <4 x i1> %603, <4 x float> %602, <4 x float> zeroinitializer
  store <4 x float> %604, <4 x float>* %9, align 16
  %605 = load <4 x float>, <4 x float>* %10, align 16
  %606 = fcmp ogt <4 x float> %605, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %607 = select <4 x i1> %606, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %605
  %608 = fcmp ogt <4 x float> %607, zeroinitializer
  %609 = select <4 x i1> %608, <4 x float> %607, <4 x float> zeroinitializer
  store <4 x float> %609, <4 x float>* %10, align 16
  br label %2988

610:                                              ; preds = %135
  %611 = load <4 x float>, <4 x float>* %7, align 16
  %612 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %611
  store <4 x float> %612, <4 x float>* %7, align 16
  %613 = load <4 x float>, <4 x float>* %8, align 16
  %614 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %613
  store <4 x float> %614, <4 x float>* %8, align 16
  %615 = load <4 x float>, <4 x float>* %9, align 16
  %616 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %615
  store <4 x float> %616, <4 x float>* %9, align 16
  %617 = load <4 x float>, <4 x float>* %10, align 16
  %618 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %617
  store <4 x float> %618, <4 x float>* %10, align 16
  br label %2988

619:                                              ; preds = %135
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %10, align 16
  br label %2988

620:                                              ; preds = %135
  %621 = load <4 x float>, <4 x float>* %10, align 16
  %622 = load <4 x float>, <4 x float>* %7, align 16
  %623 = fmul <4 x float> %621, %622
  store <4 x float> %623, <4 x float>* %7, align 16
  %624 = load <4 x float>, <4 x float>* %8, align 16
  %625 = fmul <4 x float> %621, %624
  store <4 x float> %625, <4 x float>* %8, align 16
  %626 = load <4 x float>, <4 x float>* %9, align 16
  %627 = fmul <4 x float> %621, %626
  store <4 x float> %627, <4 x float>* %9, align 16
  br label %2988

628:                                              ; preds = %135
  %629 = load <4 x float>, <4 x float>* %10, align 16
  %630 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %629
  %631 = fcmp olt <4 x float> %630, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %632 = select <4 x i1> %631, <4 x float> %630, <4 x float> zeroinitializer
  %633 = load <4 x float>, <4 x float>* %7, align 16
  %634 = fmul <4 x float> %633, %632
  store <4 x float> %634, <4 x float>* %7, align 16
  %635 = load <4 x float>, <4 x float>* %8, align 16
  %636 = fmul <4 x float> %635, %632
  store <4 x float> %636, <4 x float>* %8, align 16
  %637 = load <4 x float>, <4 x float>* %9, align 16
  %638 = fmul <4 x float> %632, %637
  store <4 x float> %638, <4 x float>* %9, align 16
  br label %2988

639:                                              ; preds = %135
  %640 = getelementptr inbounds i8*, i8** %136, i64 1
  %641 = bitcast i8** %136 to %struct.skcms_Matrix3x3**
  %642 = load %struct.skcms_Matrix3x3*, %struct.skcms_Matrix3x3** %641, align 8
  %643 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %642, i64 0, i32 0, i64 0, i64 0
  %644 = load float, float* %643, align 4
  %645 = insertelement <4 x float> undef, float %644, i32 0
  %646 = shufflevector <4 x float> %645, <4 x float> undef, <4 x i32> zeroinitializer
  %647 = load <4 x float>, <4 x float>* %7, align 16
  %648 = fmul <4 x float> %647, %646
  %649 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %642, i64 0, i32 0, i64 0, i64 1
  %650 = load float, float* %649, align 4
  %651 = insertelement <4 x float> undef, float %650, i32 0
  %652 = shufflevector <4 x float> %651, <4 x float> undef, <4 x i32> zeroinitializer
  %653 = load <4 x float>, <4 x float>* %8, align 16
  %654 = fmul <4 x float> %653, %652
  %655 = fadd <4 x float> %648, %654
  %656 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %642, i64 0, i32 0, i64 0, i64 2
  %657 = load float, float* %656, align 4
  %658 = insertelement <4 x float> undef, float %657, i32 0
  %659 = shufflevector <4 x float> %658, <4 x float> undef, <4 x i32> zeroinitializer
  %660 = load <4 x float>, <4 x float>* %9, align 16
  %661 = fmul <4 x float> %660, %659
  %662 = fadd <4 x float> %655, %661
  %663 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %642, i64 0, i32 0, i64 0, i64 3
  %664 = load float, float* %663, align 4
  %665 = insertelement <4 x float> undef, float %664, i32 0
  %666 = shufflevector <4 x float> %665, <4 x float> undef, <4 x i32> zeroinitializer
  %667 = fmul <4 x float> %647, %666
  %668 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %642, i64 0, i32 0, i64 0, i64 4
  %669 = load float, float* %668, align 4
  %670 = insertelement <4 x float> undef, float %669, i32 0
  %671 = shufflevector <4 x float> %670, <4 x float> undef, <4 x i32> zeroinitializer
  %672 = fmul <4 x float> %653, %671
  %673 = fadd <4 x float> %667, %672
  %674 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %642, i64 0, i32 0, i64 0, i64 5
  %675 = load float, float* %674, align 4
  %676 = insertelement <4 x float> undef, float %675, i32 0
  %677 = shufflevector <4 x float> %676, <4 x float> undef, <4 x i32> zeroinitializer
  %678 = fmul <4 x float> %660, %677
  %679 = fadd <4 x float> %673, %678
  %680 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %642, i64 0, i32 0, i64 0, i64 6
  %681 = load float, float* %680, align 4
  %682 = insertelement <4 x float> undef, float %681, i32 0
  %683 = shufflevector <4 x float> %682, <4 x float> undef, <4 x i32> zeroinitializer
  %684 = fmul <4 x float> %647, %683
  %685 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %642, i64 0, i32 0, i64 0, i64 7
  %686 = load float, float* %685, align 4
  %687 = insertelement <4 x float> undef, float %686, i32 0
  %688 = shufflevector <4 x float> %687, <4 x float> undef, <4 x i32> zeroinitializer
  %689 = fmul <4 x float> %653, %688
  %690 = fadd <4 x float> %684, %689
  %691 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %642, i64 0, i32 0, i64 0, i64 8
  %692 = load float, float* %691, align 4
  %693 = insertelement <4 x float> undef, float %692, i32 0
  %694 = shufflevector <4 x float> %693, <4 x float> undef, <4 x i32> zeroinitializer
  %695 = fmul <4 x float> %660, %694
  %696 = fadd <4 x float> %690, %695
  store <4 x float> %662, <4 x float>* %7, align 16
  store <4 x float> %679, <4 x float>* %8, align 16
  store <4 x float> %696, <4 x float>* %9, align 16
  br label %2988

697:                                              ; preds = %135
  %698 = getelementptr inbounds i8*, i8** %136, i64 1
  %699 = bitcast i8** %136 to %struct.skcms_Matrix3x4**
  %700 = load %struct.skcms_Matrix3x4*, %struct.skcms_Matrix3x4** %699, align 8
  %701 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %700, i64 0, i32 0, i64 0, i64 0
  %702 = load float, float* %701, align 4
  %703 = insertelement <4 x float> undef, float %702, i32 0
  %704 = shufflevector <4 x float> %703, <4 x float> undef, <4 x i32> zeroinitializer
  %705 = load <4 x float>, <4 x float>* %7, align 16
  %706 = fmul <4 x float> %705, %704
  %707 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %700, i64 0, i32 0, i64 0, i64 1
  %708 = load float, float* %707, align 4
  %709 = insertelement <4 x float> undef, float %708, i32 0
  %710 = shufflevector <4 x float> %709, <4 x float> undef, <4 x i32> zeroinitializer
  %711 = load <4 x float>, <4 x float>* %8, align 16
  %712 = fmul <4 x float> %711, %710
  %713 = fadd <4 x float> %706, %712
  %714 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %700, i64 0, i32 0, i64 0, i64 2
  %715 = load float, float* %714, align 4
  %716 = insertelement <4 x float> undef, float %715, i32 0
  %717 = shufflevector <4 x float> %716, <4 x float> undef, <4 x i32> zeroinitializer
  %718 = load <4 x float>, <4 x float>* %9, align 16
  %719 = fmul <4 x float> %718, %717
  %720 = fadd <4 x float> %713, %719
  %721 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %700, i64 0, i32 0, i64 0, i64 3
  %722 = load float, float* %721, align 4
  %723 = insertelement <4 x float> undef, float %722, i32 0
  %724 = shufflevector <4 x float> %723, <4 x float> undef, <4 x i32> zeroinitializer
  %725 = fadd <4 x float> %720, %724
  %726 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %700, i64 0, i32 0, i64 0, i64 4
  %727 = load float, float* %726, align 4
  %728 = insertelement <4 x float> undef, float %727, i32 0
  %729 = shufflevector <4 x float> %728, <4 x float> undef, <4 x i32> zeroinitializer
  %730 = fmul <4 x float> %705, %729
  %731 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %700, i64 0, i32 0, i64 0, i64 5
  %732 = load float, float* %731, align 4
  %733 = insertelement <4 x float> undef, float %732, i32 0
  %734 = shufflevector <4 x float> %733, <4 x float> undef, <4 x i32> zeroinitializer
  %735 = fmul <4 x float> %711, %734
  %736 = fadd <4 x float> %730, %735
  %737 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %700, i64 0, i32 0, i64 0, i64 6
  %738 = load float, float* %737, align 4
  %739 = insertelement <4 x float> undef, float %738, i32 0
  %740 = shufflevector <4 x float> %739, <4 x float> undef, <4 x i32> zeroinitializer
  %741 = fmul <4 x float> %718, %740
  %742 = fadd <4 x float> %736, %741
  %743 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %700, i64 0, i32 0, i64 0, i64 7
  %744 = load float, float* %743, align 4
  %745 = insertelement <4 x float> undef, float %744, i32 0
  %746 = shufflevector <4 x float> %745, <4 x float> undef, <4 x i32> zeroinitializer
  %747 = fadd <4 x float> %746, %742
  %748 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %700, i64 0, i32 0, i64 0, i64 8
  %749 = load float, float* %748, align 4
  %750 = insertelement <4 x float> undef, float %749, i32 0
  %751 = shufflevector <4 x float> %750, <4 x float> undef, <4 x i32> zeroinitializer
  %752 = fmul <4 x float> %705, %751
  %753 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %700, i64 0, i32 0, i64 0, i64 9
  %754 = load float, float* %753, align 4
  %755 = insertelement <4 x float> undef, float %754, i32 0
  %756 = shufflevector <4 x float> %755, <4 x float> undef, <4 x i32> zeroinitializer
  %757 = fmul <4 x float> %711, %756
  %758 = fadd <4 x float> %752, %757
  %759 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %700, i64 0, i32 0, i64 0, i64 10
  %760 = load float, float* %759, align 4
  %761 = insertelement <4 x float> undef, float %760, i32 0
  %762 = shufflevector <4 x float> %761, <4 x float> undef, <4 x i32> zeroinitializer
  %763 = fmul <4 x float> %718, %762
  %764 = fadd <4 x float> %758, %763
  %765 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %700, i64 0, i32 0, i64 0, i64 11
  %766 = load float, float* %765, align 4
  %767 = insertelement <4 x float> undef, float %766, i32 0
  %768 = shufflevector <4 x float> %767, <4 x float> undef, <4 x i32> zeroinitializer
  %769 = fadd <4 x float> %768, %764
  store <4 x float> %725, <4 x float>* %7, align 16
  store <4 x float> %747, <4 x float>* %8, align 16
  store <4 x float> %769, <4 x float>* %9, align 16
  br label %2988

770:                                              ; preds = %135
  %771 = load <4 x float>, <4 x float>* %7, align 16
  %772 = fmul <4 x float> %771, <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>
  %773 = load <4 x float>, <4 x float>* %8, align 16
  %774 = fmul <4 x float> %773, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %775 = fadd <4 x float> %774, <float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02>
  %776 = load <4 x float>, <4 x float>* %9, align 16
  %777 = fmul <4 x float> %776, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %778 = fadd <4 x float> %777, <float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02>
  %779 = fadd <4 x float> %772, <float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01>
  %780 = fmul <4 x float> %779, <float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000>
  %781 = fmul <4 x float> %775, <float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000>
  %782 = fadd <4 x float> %780, %781
  %783 = fmul <4 x float> %778, <float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000>
  %784 = fsub <4 x float> %780, %783
  %785 = fmul <4 x float> %782, %782
  %786 = fmul <4 x float> %782, %785
  %787 = fcmp ule <4 x float> %786, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %788 = fadd <4 x float> %782, <float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000>
  %789 = fmul <4 x float> %788, <float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000>
  %790 = select <4 x i1> %787, <4 x float> %789, <4 x float> %786
  %791 = fmul <4 x float> %780, %780
  %792 = fmul <4 x float> %780, %791
  %793 = fcmp ule <4 x float> %792, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %794 = fadd <4 x float> %780, <float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000>
  %795 = fmul <4 x float> %794, <float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000>
  %796 = select <4 x i1> %793, <4 x float> %795, <4 x float> %792
  %797 = fmul <4 x float> %784, %784
  %798 = fmul <4 x float> %784, %797
  %799 = fcmp ule <4 x float> %798, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %800 = fadd <4 x float> %784, <float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000>
  %801 = fmul <4 x float> %800, <float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000>
  %802 = select <4 x i1> %799, <4 x float> %801, <4 x float> %798
  %803 = fmul <4 x float> %790, <float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000>
  store <4 x float> %803, <4 x float>* %7, align 16
  store <4 x float> %796, <4 x float>* %8, align 16
  %804 = fmul <4 x float> %802, <float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000>
  store <4 x float> %804, <4 x float>* %9, align 16
  br label %2988

805:                                              ; preds = %135
  %806 = load <4 x float>, <4 x float>* %7, align 16
  %807 = fmul <4 x float> %806, <float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000>
  %808 = load <4 x float>, <4 x float>* %8, align 16
  %809 = load <4 x float>, <4 x float>* %9, align 16
  %810 = fmul <4 x float> %809, <float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000>
  %811 = fcmp ule <4 x float> %807, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %812 = fcmp une <4 x float> %807, zeroinitializer
  %813 = fcmp une <4 x float> %807, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %814 = bitcast <4 x float> %807 to <4 x i32>
  %815 = sitofp <4 x i32> %814 to <4 x float>
  %816 = fmul <4 x float> %815, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %817 = and <4 x i32> %814, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %818 = or <4 x i32> %817, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %819 = bitcast <4 x i32> %818 to <4 x float>
  %820 = fadd <4 x float> %816, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %821 = fmul <4 x float> %819, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %822 = fsub <4 x float> %820, %821
  %823 = fadd <4 x float> %819, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %824 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %823
  %825 = fsub <4 x float> %822, %824
  %826 = fmul <4 x float> %825, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %827 = fptosi <4 x float> %826 to <4 x i32>
  %828 = sitofp <4 x i32> %827 to <4 x float>
  %829 = fcmp olt <4 x float> %826, %828
  %830 = select <4 x i1> %829, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %831 = fsub <4 x float> %828, %830
  %832 = fsub <4 x float> %826, %831
  %833 = fadd <4 x float> %826, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %834 = fmul <4 x float> %832, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %835 = fsub <4 x float> %833, %834
  %836 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %832
  %837 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %836
  %838 = fadd <4 x float> %835, %837
  %839 = fmul <4 x float> %838, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %840 = fcmp olt <4 x float> %839, zeroinitializer
  %841 = select <4 x i1> %840, <4 x float> zeroinitializer, <4 x float> %839
  %842 = fptosi <4 x float> %841 to <4 x i32>
  %843 = and <4 x i1> %813, %812
  %844 = select <4 x i1> %843, <4 x i32> %842, <4 x i32> %814
  %845 = fmul <4 x float> %807, <float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000>
  %846 = fadd <4 x float> %845, <float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000>
  %847 = bitcast <4 x i32> %844 to <4 x float>
  %848 = select <4 x i1> %811, <4 x float> %846, <4 x float> %847
  %849 = fcmp ule <4 x float> %808, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %850 = fcmp une <4 x float> %808, zeroinitializer
  %851 = fcmp une <4 x float> %808, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %852 = bitcast <4 x float> %808 to <4 x i32>
  %853 = sitofp <4 x i32> %852 to <4 x float>
  %854 = fmul <4 x float> %853, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %855 = and <4 x i32> %852, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %856 = or <4 x i32> %855, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %857 = bitcast <4 x i32> %856 to <4 x float>
  %858 = fadd <4 x float> %854, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %859 = fmul <4 x float> %857, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %860 = fsub <4 x float> %858, %859
  %861 = fadd <4 x float> %857, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %862 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %861
  %863 = fsub <4 x float> %860, %862
  %864 = fmul <4 x float> %863, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %865 = fptosi <4 x float> %864 to <4 x i32>
  %866 = sitofp <4 x i32> %865 to <4 x float>
  %867 = fcmp olt <4 x float> %864, %866
  %868 = select <4 x i1> %867, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %869 = fsub <4 x float> %866, %868
  %870 = fsub <4 x float> %864, %869
  %871 = fadd <4 x float> %864, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %872 = fmul <4 x float> %870, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %873 = fsub <4 x float> %871, %872
  %874 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %870
  %875 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %874
  %876 = fadd <4 x float> %873, %875
  %877 = fmul <4 x float> %876, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %878 = fcmp olt <4 x float> %877, zeroinitializer
  %879 = select <4 x i1> %878, <4 x float> zeroinitializer, <4 x float> %877
  %880 = fptosi <4 x float> %879 to <4 x i32>
  %881 = and <4 x i1> %851, %850
  %882 = select <4 x i1> %881, <4 x i32> %880, <4 x i32> %852
  %883 = fmul <4 x float> %808, <float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000>
  %884 = fadd <4 x float> %883, <float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000>
  %885 = bitcast <4 x i32> %882 to <4 x float>
  %886 = select <4 x i1> %849, <4 x float> %884, <4 x float> %885
  %887 = fcmp ule <4 x float> %810, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %888 = fcmp une <4 x float> %810, zeroinitializer
  %889 = fcmp une <4 x float> %810, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %890 = bitcast <4 x float> %810 to <4 x i32>
  %891 = sitofp <4 x i32> %890 to <4 x float>
  %892 = fmul <4 x float> %891, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %893 = and <4 x i32> %890, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %894 = or <4 x i32> %893, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %895 = bitcast <4 x i32> %894 to <4 x float>
  %896 = fadd <4 x float> %892, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %897 = fmul <4 x float> %895, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %898 = fsub <4 x float> %896, %897
  %899 = fadd <4 x float> %895, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %900 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %899
  %901 = fsub <4 x float> %898, %900
  %902 = fmul <4 x float> %901, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %903 = fptosi <4 x float> %902 to <4 x i32>
  %904 = sitofp <4 x i32> %903 to <4 x float>
  %905 = fcmp olt <4 x float> %902, %904
  %906 = select <4 x i1> %905, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %907 = fsub <4 x float> %904, %906
  %908 = fsub <4 x float> %902, %907
  %909 = fadd <4 x float> %902, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %910 = fmul <4 x float> %908, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %911 = fsub <4 x float> %909, %910
  %912 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %908
  %913 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %912
  %914 = fadd <4 x float> %911, %913
  %915 = fmul <4 x float> %914, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %916 = fcmp olt <4 x float> %915, zeroinitializer
  %917 = select <4 x i1> %916, <4 x float> zeroinitializer, <4 x float> %915
  %918 = fptosi <4 x float> %917 to <4 x i32>
  %919 = and <4 x i1> %889, %888
  %920 = select <4 x i1> %919, <4 x i32> %918, <4 x i32> %890
  %921 = fmul <4 x float> %810, <float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000>
  %922 = fadd <4 x float> %921, <float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000>
  %923 = bitcast <4 x i32> %920 to <4 x float>
  %924 = select <4 x i1> %887, <4 x float> %922, <4 x float> %923
  %925 = fmul <4 x float> %886, <float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02>
  %926 = fadd <4 x float> %925, <float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01>
  %927 = fsub <4 x float> %848, %886
  %928 = fmul <4 x float> %927, <float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02>
  %929 = fsub <4 x float> %886, %924
  %930 = fmul <4 x float> %929, <float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02>
  %931 = fmul <4 x float> %926, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  store <4 x float> %931, <4 x float>* %7, align 16
  %932 = fadd <4 x float> %928, <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>
  %933 = fmul <4 x float> %932, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <4 x float> %933, <4 x float>* %8, align 16
  %934 = fadd <4 x float> %930, <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>
  %935 = fmul <4 x float> %934, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <4 x float> %935, <4 x float>* %9, align 16
  br label %2988

936:                                              ; preds = %135
  %937 = getelementptr inbounds i8*, i8** %136, i64 1
  %938 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %939 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %938, align 8
  %940 = load <4 x i32>, <4 x i32>* %19, align 16
  %941 = and <4 x i32> %940, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %942 = and <4 x i32> %940, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %943 = bitcast <4 x i32> %942 to <4 x float>
  %944 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %939, i64 0, i32 4
  %945 = load float, float* %944, align 4
  %946 = insertelement <4 x float> undef, float %945, i32 0
  %947 = shufflevector <4 x float> %946, <4 x float> undef, <4 x i32> zeroinitializer
  %948 = fcmp ule <4 x float> %947, %943
  %949 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %939, i64 0, i32 3
  %950 = load float, float* %949, align 4
  %951 = insertelement <4 x float> undef, float %950, i32 0
  %952 = shufflevector <4 x float> %951, <4 x float> undef, <4 x i32> zeroinitializer
  %953 = fmul <4 x float> %952, %943
  %954 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %939, i64 0, i32 6
  %955 = load float, float* %954, align 4
  %956 = insertelement <4 x float> undef, float %955, i32 0
  %957 = shufflevector <4 x float> %956, <4 x float> undef, <4 x i32> zeroinitializer
  %958 = fadd <4 x float> %953, %957
  %959 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %939, i64 0, i32 1
  %960 = load float, float* %959, align 4
  %961 = insertelement <4 x float> undef, float %960, i32 0
  %962 = shufflevector <4 x float> %961, <4 x float> undef, <4 x i32> zeroinitializer
  %963 = fmul <4 x float> %962, %943
  %964 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %939, i64 0, i32 2
  %965 = load float, float* %964, align 4
  %966 = insertelement <4 x float> undef, float %965, i32 0
  %967 = shufflevector <4 x float> %966, <4 x float> undef, <4 x i32> zeroinitializer
  %968 = fadd <4 x float> %963, %967
  %969 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %939, i64 0, i32 0
  %970 = load float, float* %969, align 4
  %971 = fcmp une <4 x float> %968, zeroinitializer
  %972 = fcmp une <4 x float> %968, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %973 = bitcast <4 x float> %968 to <4 x i32>
  %974 = sitofp <4 x i32> %973 to <4 x float>
  %975 = fmul <4 x float> %974, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %976 = and <4 x i32> %973, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %977 = or <4 x i32> %976, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %978 = bitcast <4 x i32> %977 to <4 x float>
  %979 = fadd <4 x float> %975, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %980 = fmul <4 x float> %978, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %981 = fsub <4 x float> %979, %980
  %982 = fadd <4 x float> %978, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %983 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %982
  %984 = fsub <4 x float> %981, %983
  %985 = insertelement <4 x float> undef, float %970, i32 0
  %986 = shufflevector <4 x float> %985, <4 x float> undef, <4 x i32> zeroinitializer
  %987 = fmul <4 x float> %986, %984
  %988 = fptosi <4 x float> %987 to <4 x i32>
  %989 = sitofp <4 x i32> %988 to <4 x float>
  %990 = fcmp olt <4 x float> %987, %989
  %991 = select <4 x i1> %990, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %992 = fsub <4 x float> %989, %991
  %993 = fsub <4 x float> %987, %992
  %994 = fadd <4 x float> %987, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %995 = fmul <4 x float> %993, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %996 = fsub <4 x float> %994, %995
  %997 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %993
  %998 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %997
  %999 = fadd <4 x float> %996, %998
  %1000 = fmul <4 x float> %999, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1001 = fcmp olt <4 x float> %1000, zeroinitializer
  %1002 = select <4 x i1> %1001, <4 x float> zeroinitializer, <4 x float> %1000
  %1003 = fptosi <4 x float> %1002 to <4 x i32>
  %1004 = and <4 x i1> %972, %971
  %1005 = select <4 x i1> %1004, <4 x i32> %1003, <4 x i32> %973
  %1006 = bitcast <4 x i32> %1005 to <4 x float>
  %1007 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %939, i64 0, i32 5
  %1008 = load float, float* %1007, align 4
  %1009 = insertelement <4 x float> undef, float %1008, i32 0
  %1010 = shufflevector <4 x float> %1009, <4 x float> undef, <4 x i32> zeroinitializer
  %1011 = fadd <4 x float> %1010, %1006
  %1012 = select <4 x i1> %948, <4 x float> %1011, <4 x float> %958
  %1013 = bitcast <4 x float> %1012 to <4 x i32>
  %1014 = or <4 x i32> %941, %1013
  store <4 x i32> %1014, <4 x i32>* %19, align 16
  br label %2988

1015:                                             ; preds = %135
  %1016 = getelementptr inbounds i8*, i8** %136, i64 1
  %1017 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %1018 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1017, align 8
  %1019 = load <4 x i32>, <4 x i32>* %18, align 16
  %1020 = and <4 x i32> %1019, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1021 = and <4 x i32> %1019, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1022 = bitcast <4 x i32> %1021 to <4 x float>
  %1023 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1018, i64 0, i32 4
  %1024 = load float, float* %1023, align 4
  %1025 = insertelement <4 x float> undef, float %1024, i32 0
  %1026 = shufflevector <4 x float> %1025, <4 x float> undef, <4 x i32> zeroinitializer
  %1027 = fcmp ule <4 x float> %1026, %1022
  %1028 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1018, i64 0, i32 3
  %1029 = load float, float* %1028, align 4
  %1030 = insertelement <4 x float> undef, float %1029, i32 0
  %1031 = shufflevector <4 x float> %1030, <4 x float> undef, <4 x i32> zeroinitializer
  %1032 = fmul <4 x float> %1031, %1022
  %1033 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1018, i64 0, i32 6
  %1034 = load float, float* %1033, align 4
  %1035 = insertelement <4 x float> undef, float %1034, i32 0
  %1036 = shufflevector <4 x float> %1035, <4 x float> undef, <4 x i32> zeroinitializer
  %1037 = fadd <4 x float> %1032, %1036
  %1038 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1018, i64 0, i32 1
  %1039 = load float, float* %1038, align 4
  %1040 = insertelement <4 x float> undef, float %1039, i32 0
  %1041 = shufflevector <4 x float> %1040, <4 x float> undef, <4 x i32> zeroinitializer
  %1042 = fmul <4 x float> %1041, %1022
  %1043 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1018, i64 0, i32 2
  %1044 = load float, float* %1043, align 4
  %1045 = insertelement <4 x float> undef, float %1044, i32 0
  %1046 = shufflevector <4 x float> %1045, <4 x float> undef, <4 x i32> zeroinitializer
  %1047 = fadd <4 x float> %1042, %1046
  %1048 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1018, i64 0, i32 0
  %1049 = load float, float* %1048, align 4
  %1050 = fcmp une <4 x float> %1047, zeroinitializer
  %1051 = fcmp une <4 x float> %1047, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1052 = bitcast <4 x float> %1047 to <4 x i32>
  %1053 = sitofp <4 x i32> %1052 to <4 x float>
  %1054 = fmul <4 x float> %1053, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1055 = and <4 x i32> %1052, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1056 = or <4 x i32> %1055, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1057 = bitcast <4 x i32> %1056 to <4 x float>
  %1058 = fadd <4 x float> %1054, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1059 = fmul <4 x float> %1057, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1060 = fsub <4 x float> %1058, %1059
  %1061 = fadd <4 x float> %1057, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1062 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1061
  %1063 = fsub <4 x float> %1060, %1062
  %1064 = insertelement <4 x float> undef, float %1049, i32 0
  %1065 = shufflevector <4 x float> %1064, <4 x float> undef, <4 x i32> zeroinitializer
  %1066 = fmul <4 x float> %1065, %1063
  %1067 = fptosi <4 x float> %1066 to <4 x i32>
  %1068 = sitofp <4 x i32> %1067 to <4 x float>
  %1069 = fcmp olt <4 x float> %1066, %1068
  %1070 = select <4 x i1> %1069, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1071 = fsub <4 x float> %1068, %1070
  %1072 = fsub <4 x float> %1066, %1071
  %1073 = fadd <4 x float> %1066, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1074 = fmul <4 x float> %1072, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1075 = fsub <4 x float> %1073, %1074
  %1076 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1072
  %1077 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1076
  %1078 = fadd <4 x float> %1075, %1077
  %1079 = fmul <4 x float> %1078, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1080 = fcmp olt <4 x float> %1079, zeroinitializer
  %1081 = select <4 x i1> %1080, <4 x float> zeroinitializer, <4 x float> %1079
  %1082 = fptosi <4 x float> %1081 to <4 x i32>
  %1083 = and <4 x i1> %1051, %1050
  %1084 = select <4 x i1> %1083, <4 x i32> %1082, <4 x i32> %1052
  %1085 = bitcast <4 x i32> %1084 to <4 x float>
  %1086 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1018, i64 0, i32 5
  %1087 = load float, float* %1086, align 4
  %1088 = insertelement <4 x float> undef, float %1087, i32 0
  %1089 = shufflevector <4 x float> %1088, <4 x float> undef, <4 x i32> zeroinitializer
  %1090 = fadd <4 x float> %1089, %1085
  %1091 = select <4 x i1> %1027, <4 x float> %1090, <4 x float> %1037
  %1092 = bitcast <4 x float> %1091 to <4 x i32>
  %1093 = or <4 x i32> %1020, %1092
  store <4 x i32> %1093, <4 x i32>* %18, align 16
  br label %2988

1094:                                             ; preds = %135
  %1095 = getelementptr inbounds i8*, i8** %136, i64 1
  %1096 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %1097 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1096, align 8
  %1098 = load <4 x i32>, <4 x i32>* %17, align 16
  %1099 = and <4 x i32> %1098, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1100 = and <4 x i32> %1098, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1101 = bitcast <4 x i32> %1100 to <4 x float>
  %1102 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1097, i64 0, i32 4
  %1103 = load float, float* %1102, align 4
  %1104 = insertelement <4 x float> undef, float %1103, i32 0
  %1105 = shufflevector <4 x float> %1104, <4 x float> undef, <4 x i32> zeroinitializer
  %1106 = fcmp ule <4 x float> %1105, %1101
  %1107 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1097, i64 0, i32 3
  %1108 = load float, float* %1107, align 4
  %1109 = insertelement <4 x float> undef, float %1108, i32 0
  %1110 = shufflevector <4 x float> %1109, <4 x float> undef, <4 x i32> zeroinitializer
  %1111 = fmul <4 x float> %1110, %1101
  %1112 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1097, i64 0, i32 6
  %1113 = load float, float* %1112, align 4
  %1114 = insertelement <4 x float> undef, float %1113, i32 0
  %1115 = shufflevector <4 x float> %1114, <4 x float> undef, <4 x i32> zeroinitializer
  %1116 = fadd <4 x float> %1111, %1115
  %1117 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1097, i64 0, i32 1
  %1118 = load float, float* %1117, align 4
  %1119 = insertelement <4 x float> undef, float %1118, i32 0
  %1120 = shufflevector <4 x float> %1119, <4 x float> undef, <4 x i32> zeroinitializer
  %1121 = fmul <4 x float> %1120, %1101
  %1122 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1097, i64 0, i32 2
  %1123 = load float, float* %1122, align 4
  %1124 = insertelement <4 x float> undef, float %1123, i32 0
  %1125 = shufflevector <4 x float> %1124, <4 x float> undef, <4 x i32> zeroinitializer
  %1126 = fadd <4 x float> %1121, %1125
  %1127 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1097, i64 0, i32 0
  %1128 = load float, float* %1127, align 4
  %1129 = fcmp une <4 x float> %1126, zeroinitializer
  %1130 = fcmp une <4 x float> %1126, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1131 = bitcast <4 x float> %1126 to <4 x i32>
  %1132 = sitofp <4 x i32> %1131 to <4 x float>
  %1133 = fmul <4 x float> %1132, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1134 = and <4 x i32> %1131, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1135 = or <4 x i32> %1134, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1136 = bitcast <4 x i32> %1135 to <4 x float>
  %1137 = fadd <4 x float> %1133, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1138 = fmul <4 x float> %1136, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1139 = fsub <4 x float> %1137, %1138
  %1140 = fadd <4 x float> %1136, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1141 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1140
  %1142 = fsub <4 x float> %1139, %1141
  %1143 = insertelement <4 x float> undef, float %1128, i32 0
  %1144 = shufflevector <4 x float> %1143, <4 x float> undef, <4 x i32> zeroinitializer
  %1145 = fmul <4 x float> %1144, %1142
  %1146 = fptosi <4 x float> %1145 to <4 x i32>
  %1147 = sitofp <4 x i32> %1146 to <4 x float>
  %1148 = fcmp olt <4 x float> %1145, %1147
  %1149 = select <4 x i1> %1148, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1150 = fsub <4 x float> %1147, %1149
  %1151 = fsub <4 x float> %1145, %1150
  %1152 = fadd <4 x float> %1145, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1153 = fmul <4 x float> %1151, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1154 = fsub <4 x float> %1152, %1153
  %1155 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1151
  %1156 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1155
  %1157 = fadd <4 x float> %1154, %1156
  %1158 = fmul <4 x float> %1157, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1159 = fcmp olt <4 x float> %1158, zeroinitializer
  %1160 = select <4 x i1> %1159, <4 x float> zeroinitializer, <4 x float> %1158
  %1161 = fptosi <4 x float> %1160 to <4 x i32>
  %1162 = and <4 x i1> %1130, %1129
  %1163 = select <4 x i1> %1162, <4 x i32> %1161, <4 x i32> %1131
  %1164 = bitcast <4 x i32> %1163 to <4 x float>
  %1165 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1097, i64 0, i32 5
  %1166 = load float, float* %1165, align 4
  %1167 = insertelement <4 x float> undef, float %1166, i32 0
  %1168 = shufflevector <4 x float> %1167, <4 x float> undef, <4 x i32> zeroinitializer
  %1169 = fadd <4 x float> %1168, %1164
  %1170 = select <4 x i1> %1106, <4 x float> %1169, <4 x float> %1116
  %1171 = bitcast <4 x float> %1170 to <4 x i32>
  %1172 = or <4 x i32> %1099, %1171
  store <4 x i32> %1172, <4 x i32>* %17, align 16
  br label %2988

1173:                                             ; preds = %135
  %1174 = getelementptr inbounds i8*, i8** %136, i64 1
  %1175 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %1176 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1175, align 8
  %1177 = load <4 x i32>, <4 x i32>* %16, align 16
  %1178 = and <4 x i32> %1177, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1179 = and <4 x i32> %1177, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1180 = bitcast <4 x i32> %1179 to <4 x float>
  %1181 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1176, i64 0, i32 4
  %1182 = load float, float* %1181, align 4
  %1183 = insertelement <4 x float> undef, float %1182, i32 0
  %1184 = shufflevector <4 x float> %1183, <4 x float> undef, <4 x i32> zeroinitializer
  %1185 = fcmp ule <4 x float> %1184, %1180
  %1186 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1176, i64 0, i32 3
  %1187 = load float, float* %1186, align 4
  %1188 = insertelement <4 x float> undef, float %1187, i32 0
  %1189 = shufflevector <4 x float> %1188, <4 x float> undef, <4 x i32> zeroinitializer
  %1190 = fmul <4 x float> %1189, %1180
  %1191 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1176, i64 0, i32 6
  %1192 = load float, float* %1191, align 4
  %1193 = insertelement <4 x float> undef, float %1192, i32 0
  %1194 = shufflevector <4 x float> %1193, <4 x float> undef, <4 x i32> zeroinitializer
  %1195 = fadd <4 x float> %1190, %1194
  %1196 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1176, i64 0, i32 1
  %1197 = load float, float* %1196, align 4
  %1198 = insertelement <4 x float> undef, float %1197, i32 0
  %1199 = shufflevector <4 x float> %1198, <4 x float> undef, <4 x i32> zeroinitializer
  %1200 = fmul <4 x float> %1199, %1180
  %1201 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1176, i64 0, i32 2
  %1202 = load float, float* %1201, align 4
  %1203 = insertelement <4 x float> undef, float %1202, i32 0
  %1204 = shufflevector <4 x float> %1203, <4 x float> undef, <4 x i32> zeroinitializer
  %1205 = fadd <4 x float> %1200, %1204
  %1206 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1176, i64 0, i32 0
  %1207 = load float, float* %1206, align 4
  %1208 = fcmp une <4 x float> %1205, zeroinitializer
  %1209 = fcmp une <4 x float> %1205, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1210 = bitcast <4 x float> %1205 to <4 x i32>
  %1211 = sitofp <4 x i32> %1210 to <4 x float>
  %1212 = fmul <4 x float> %1211, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1213 = and <4 x i32> %1210, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1214 = or <4 x i32> %1213, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1215 = bitcast <4 x i32> %1214 to <4 x float>
  %1216 = fadd <4 x float> %1212, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1217 = fmul <4 x float> %1215, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1218 = fsub <4 x float> %1216, %1217
  %1219 = fadd <4 x float> %1215, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1220 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1219
  %1221 = fsub <4 x float> %1218, %1220
  %1222 = insertelement <4 x float> undef, float %1207, i32 0
  %1223 = shufflevector <4 x float> %1222, <4 x float> undef, <4 x i32> zeroinitializer
  %1224 = fmul <4 x float> %1223, %1221
  %1225 = fptosi <4 x float> %1224 to <4 x i32>
  %1226 = sitofp <4 x i32> %1225 to <4 x float>
  %1227 = fcmp olt <4 x float> %1224, %1226
  %1228 = select <4 x i1> %1227, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1229 = fsub <4 x float> %1226, %1228
  %1230 = fsub <4 x float> %1224, %1229
  %1231 = fadd <4 x float> %1224, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1232 = fmul <4 x float> %1230, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1233 = fsub <4 x float> %1231, %1232
  %1234 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1230
  %1235 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1234
  %1236 = fadd <4 x float> %1233, %1235
  %1237 = fmul <4 x float> %1236, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1238 = fcmp olt <4 x float> %1237, zeroinitializer
  %1239 = select <4 x i1> %1238, <4 x float> zeroinitializer, <4 x float> %1237
  %1240 = fptosi <4 x float> %1239 to <4 x i32>
  %1241 = and <4 x i1> %1209, %1208
  %1242 = select <4 x i1> %1241, <4 x i32> %1240, <4 x i32> %1210
  %1243 = bitcast <4 x i32> %1242 to <4 x float>
  %1244 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1176, i64 0, i32 5
  %1245 = load float, float* %1244, align 4
  %1246 = insertelement <4 x float> undef, float %1245, i32 0
  %1247 = shufflevector <4 x float> %1246, <4 x float> undef, <4 x i32> zeroinitializer
  %1248 = fadd <4 x float> %1247, %1243
  %1249 = select <4 x i1> %1185, <4 x float> %1248, <4 x float> %1195
  %1250 = bitcast <4 x float> %1249 to <4 x i32>
  %1251 = or <4 x i32> %1178, %1250
  store <4 x i32> %1251, <4 x i32>* %16, align 16
  br label %2988

1252:                                             ; preds = %135
  %1253 = getelementptr inbounds i8*, i8** %136, i64 1
  %1254 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %1255 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1254, align 8
  %1256 = load <4 x i32>, <4 x i32>* %19, align 16
  %1257 = and <4 x i32> %1256, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1258 = and <4 x i32> %1256, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1259 = bitcast <4 x i32> %1258 to <4 x float>
  %1260 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1255, i64 0, i32 1
  %1261 = load float, float* %1260, align 4
  %1262 = insertelement <4 x float> undef, float %1261, i32 0
  %1263 = shufflevector <4 x float> %1262, <4 x float> undef, <4 x i32> zeroinitializer
  %1264 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1255, i64 0, i32 2
  %1265 = load float, float* %1264, align 4
  %1266 = insertelement <4 x float> undef, float %1265, i32 0
  %1267 = shufflevector <4 x float> %1266, <4 x float> undef, <4 x i32> zeroinitializer
  %1268 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1255, i64 0, i32 3
  %1269 = load float, float* %1268, align 4
  %1270 = fcmp une <4 x float> %1259, zeroinitializer
  %1271 = fcmp une <4 x float> %1259, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1272 = sitofp <4 x i32> %1258 to <4 x float>
  %1273 = fmul <4 x float> %1272, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1274 = and <4 x i32> %1256, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1275 = or <4 x i32> %1274, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1276 = bitcast <4 x i32> %1275 to <4 x float>
  %1277 = fadd <4 x float> %1273, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1278 = fmul <4 x float> %1276, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1279 = fsub <4 x float> %1277, %1278
  %1280 = fadd <4 x float> %1276, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1281 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1280
  %1282 = fsub <4 x float> %1279, %1281
  %1283 = insertelement <4 x float> undef, float %1269, i32 0
  %1284 = shufflevector <4 x float> %1283, <4 x float> undef, <4 x i32> zeroinitializer
  %1285 = fmul <4 x float> %1284, %1282
  %1286 = fptosi <4 x float> %1285 to <4 x i32>
  %1287 = sitofp <4 x i32> %1286 to <4 x float>
  %1288 = fcmp olt <4 x float> %1285, %1287
  %1289 = select <4 x i1> %1288, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1290 = fsub <4 x float> %1287, %1289
  %1291 = fsub <4 x float> %1285, %1290
  %1292 = fadd <4 x float> %1285, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1293 = fmul <4 x float> %1291, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1294 = fsub <4 x float> %1292, %1293
  %1295 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1291
  %1296 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1295
  %1297 = fadd <4 x float> %1294, %1296
  %1298 = fmul <4 x float> %1297, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1299 = fcmp olt <4 x float> %1298, zeroinitializer
  %1300 = select <4 x i1> %1299, <4 x float> zeroinitializer, <4 x float> %1298
  %1301 = fptosi <4 x float> %1300 to <4 x i32>
  %1302 = and <4 x i1> %1271, %1270
  %1303 = select <4 x i1> %1302, <4 x i32> %1301, <4 x i32> %1258
  %1304 = bitcast <4 x i32> %1303 to <4 x float>
  %1305 = fmul <4 x float> %1267, %1304
  %1306 = fadd <4 x float> %1263, %1305
  %1307 = fcmp olt <4 x float> %1306, zeroinitializer
  %1308 = select <4 x i1> %1307, <4 x float> zeroinitializer, <4 x float> %1306
  %1309 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1255, i64 0, i32 4
  %1310 = load float, float* %1309, align 4
  %1311 = insertelement <4 x float> undef, float %1310, i32 0
  %1312 = shufflevector <4 x float> %1311, <4 x float> undef, <4 x i32> zeroinitializer
  %1313 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1255, i64 0, i32 5
  %1314 = load float, float* %1313, align 4
  %1315 = insertelement <4 x float> undef, float %1314, i32 0
  %1316 = shufflevector <4 x float> %1315, <4 x float> undef, <4 x i32> zeroinitializer
  %1317 = fmul <4 x float> %1316, %1304
  %1318 = fadd <4 x float> %1312, %1317
  %1319 = fdiv <4 x float> %1308, %1318
  %1320 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1255, i64 0, i32 6
  %1321 = load float, float* %1320, align 4
  %1322 = fcmp une <4 x float> %1319, zeroinitializer
  %1323 = fcmp une <4 x float> %1319, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1324 = bitcast <4 x float> %1319 to <4 x i32>
  %1325 = sitofp <4 x i32> %1324 to <4 x float>
  %1326 = fmul <4 x float> %1325, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1327 = and <4 x i32> %1324, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1328 = or <4 x i32> %1327, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1329 = bitcast <4 x i32> %1328 to <4 x float>
  %1330 = fadd <4 x float> %1326, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1331 = fmul <4 x float> %1329, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1332 = fsub <4 x float> %1330, %1331
  %1333 = fadd <4 x float> %1329, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1334 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1333
  %1335 = fsub <4 x float> %1332, %1334
  %1336 = insertelement <4 x float> undef, float %1321, i32 0
  %1337 = shufflevector <4 x float> %1336, <4 x float> undef, <4 x i32> zeroinitializer
  %1338 = fmul <4 x float> %1337, %1335
  %1339 = fptosi <4 x float> %1338 to <4 x i32>
  %1340 = sitofp <4 x i32> %1339 to <4 x float>
  %1341 = fcmp olt <4 x float> %1338, %1340
  %1342 = select <4 x i1> %1341, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1343 = fsub <4 x float> %1340, %1342
  %1344 = fsub <4 x float> %1338, %1343
  %1345 = fadd <4 x float> %1338, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1346 = fmul <4 x float> %1344, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1347 = fsub <4 x float> %1345, %1346
  %1348 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1344
  %1349 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1348
  %1350 = fadd <4 x float> %1347, %1349
  %1351 = fmul <4 x float> %1350, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1352 = fcmp olt <4 x float> %1351, zeroinitializer
  %1353 = select <4 x i1> %1352, <4 x float> zeroinitializer, <4 x float> %1351
  %1354 = fptosi <4 x float> %1353 to <4 x i32>
  %1355 = and <4 x i1> %1323, %1322
  %1356 = select <4 x i1> %1355, <4 x i32> %1354, <4 x i32> %1324
  %1357 = or <4 x i32> %1356, %1257
  store <4 x i32> %1357, <4 x i32>* %19, align 16
  br label %2988

1358:                                             ; preds = %135
  %1359 = getelementptr inbounds i8*, i8** %136, i64 1
  %1360 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %1361 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1360, align 8
  %1362 = load <4 x i32>, <4 x i32>* %18, align 16
  %1363 = and <4 x i32> %1362, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1364 = and <4 x i32> %1362, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1365 = bitcast <4 x i32> %1364 to <4 x float>
  %1366 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1361, i64 0, i32 1
  %1367 = load float, float* %1366, align 4
  %1368 = insertelement <4 x float> undef, float %1367, i32 0
  %1369 = shufflevector <4 x float> %1368, <4 x float> undef, <4 x i32> zeroinitializer
  %1370 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1361, i64 0, i32 2
  %1371 = load float, float* %1370, align 4
  %1372 = insertelement <4 x float> undef, float %1371, i32 0
  %1373 = shufflevector <4 x float> %1372, <4 x float> undef, <4 x i32> zeroinitializer
  %1374 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1361, i64 0, i32 3
  %1375 = load float, float* %1374, align 4
  %1376 = fcmp une <4 x float> %1365, zeroinitializer
  %1377 = fcmp une <4 x float> %1365, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1378 = sitofp <4 x i32> %1364 to <4 x float>
  %1379 = fmul <4 x float> %1378, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1380 = and <4 x i32> %1362, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1381 = or <4 x i32> %1380, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1382 = bitcast <4 x i32> %1381 to <4 x float>
  %1383 = fadd <4 x float> %1379, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1384 = fmul <4 x float> %1382, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1385 = fsub <4 x float> %1383, %1384
  %1386 = fadd <4 x float> %1382, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1387 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1386
  %1388 = fsub <4 x float> %1385, %1387
  %1389 = insertelement <4 x float> undef, float %1375, i32 0
  %1390 = shufflevector <4 x float> %1389, <4 x float> undef, <4 x i32> zeroinitializer
  %1391 = fmul <4 x float> %1390, %1388
  %1392 = fptosi <4 x float> %1391 to <4 x i32>
  %1393 = sitofp <4 x i32> %1392 to <4 x float>
  %1394 = fcmp olt <4 x float> %1391, %1393
  %1395 = select <4 x i1> %1394, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1396 = fsub <4 x float> %1393, %1395
  %1397 = fsub <4 x float> %1391, %1396
  %1398 = fadd <4 x float> %1391, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1399 = fmul <4 x float> %1397, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1400 = fsub <4 x float> %1398, %1399
  %1401 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1397
  %1402 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1401
  %1403 = fadd <4 x float> %1400, %1402
  %1404 = fmul <4 x float> %1403, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1405 = fcmp olt <4 x float> %1404, zeroinitializer
  %1406 = select <4 x i1> %1405, <4 x float> zeroinitializer, <4 x float> %1404
  %1407 = fptosi <4 x float> %1406 to <4 x i32>
  %1408 = and <4 x i1> %1377, %1376
  %1409 = select <4 x i1> %1408, <4 x i32> %1407, <4 x i32> %1364
  %1410 = bitcast <4 x i32> %1409 to <4 x float>
  %1411 = fmul <4 x float> %1373, %1410
  %1412 = fadd <4 x float> %1369, %1411
  %1413 = fcmp olt <4 x float> %1412, zeroinitializer
  %1414 = select <4 x i1> %1413, <4 x float> zeroinitializer, <4 x float> %1412
  %1415 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1361, i64 0, i32 4
  %1416 = load float, float* %1415, align 4
  %1417 = insertelement <4 x float> undef, float %1416, i32 0
  %1418 = shufflevector <4 x float> %1417, <4 x float> undef, <4 x i32> zeroinitializer
  %1419 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1361, i64 0, i32 5
  %1420 = load float, float* %1419, align 4
  %1421 = insertelement <4 x float> undef, float %1420, i32 0
  %1422 = shufflevector <4 x float> %1421, <4 x float> undef, <4 x i32> zeroinitializer
  %1423 = fmul <4 x float> %1422, %1410
  %1424 = fadd <4 x float> %1418, %1423
  %1425 = fdiv <4 x float> %1414, %1424
  %1426 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1361, i64 0, i32 6
  %1427 = load float, float* %1426, align 4
  %1428 = fcmp une <4 x float> %1425, zeroinitializer
  %1429 = fcmp une <4 x float> %1425, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1430 = bitcast <4 x float> %1425 to <4 x i32>
  %1431 = sitofp <4 x i32> %1430 to <4 x float>
  %1432 = fmul <4 x float> %1431, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1433 = and <4 x i32> %1430, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1434 = or <4 x i32> %1433, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1435 = bitcast <4 x i32> %1434 to <4 x float>
  %1436 = fadd <4 x float> %1432, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1437 = fmul <4 x float> %1435, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1438 = fsub <4 x float> %1436, %1437
  %1439 = fadd <4 x float> %1435, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1440 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1439
  %1441 = fsub <4 x float> %1438, %1440
  %1442 = insertelement <4 x float> undef, float %1427, i32 0
  %1443 = shufflevector <4 x float> %1442, <4 x float> undef, <4 x i32> zeroinitializer
  %1444 = fmul <4 x float> %1443, %1441
  %1445 = fptosi <4 x float> %1444 to <4 x i32>
  %1446 = sitofp <4 x i32> %1445 to <4 x float>
  %1447 = fcmp olt <4 x float> %1444, %1446
  %1448 = select <4 x i1> %1447, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1449 = fsub <4 x float> %1446, %1448
  %1450 = fsub <4 x float> %1444, %1449
  %1451 = fadd <4 x float> %1444, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1452 = fmul <4 x float> %1450, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1453 = fsub <4 x float> %1451, %1452
  %1454 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1450
  %1455 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1454
  %1456 = fadd <4 x float> %1453, %1455
  %1457 = fmul <4 x float> %1456, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1458 = fcmp olt <4 x float> %1457, zeroinitializer
  %1459 = select <4 x i1> %1458, <4 x float> zeroinitializer, <4 x float> %1457
  %1460 = fptosi <4 x float> %1459 to <4 x i32>
  %1461 = and <4 x i1> %1429, %1428
  %1462 = select <4 x i1> %1461, <4 x i32> %1460, <4 x i32> %1430
  %1463 = or <4 x i32> %1462, %1363
  store <4 x i32> %1463, <4 x i32>* %18, align 16
  br label %2988

1464:                                             ; preds = %135
  %1465 = getelementptr inbounds i8*, i8** %136, i64 1
  %1466 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %1467 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1466, align 8
  %1468 = load <4 x i32>, <4 x i32>* %17, align 16
  %1469 = and <4 x i32> %1468, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1470 = and <4 x i32> %1468, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1471 = bitcast <4 x i32> %1470 to <4 x float>
  %1472 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1467, i64 0, i32 1
  %1473 = load float, float* %1472, align 4
  %1474 = insertelement <4 x float> undef, float %1473, i32 0
  %1475 = shufflevector <4 x float> %1474, <4 x float> undef, <4 x i32> zeroinitializer
  %1476 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1467, i64 0, i32 2
  %1477 = load float, float* %1476, align 4
  %1478 = insertelement <4 x float> undef, float %1477, i32 0
  %1479 = shufflevector <4 x float> %1478, <4 x float> undef, <4 x i32> zeroinitializer
  %1480 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1467, i64 0, i32 3
  %1481 = load float, float* %1480, align 4
  %1482 = fcmp une <4 x float> %1471, zeroinitializer
  %1483 = fcmp une <4 x float> %1471, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1484 = sitofp <4 x i32> %1470 to <4 x float>
  %1485 = fmul <4 x float> %1484, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1486 = and <4 x i32> %1468, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1487 = or <4 x i32> %1486, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1488 = bitcast <4 x i32> %1487 to <4 x float>
  %1489 = fadd <4 x float> %1485, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1490 = fmul <4 x float> %1488, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1491 = fsub <4 x float> %1489, %1490
  %1492 = fadd <4 x float> %1488, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1493 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1492
  %1494 = fsub <4 x float> %1491, %1493
  %1495 = insertelement <4 x float> undef, float %1481, i32 0
  %1496 = shufflevector <4 x float> %1495, <4 x float> undef, <4 x i32> zeroinitializer
  %1497 = fmul <4 x float> %1496, %1494
  %1498 = fptosi <4 x float> %1497 to <4 x i32>
  %1499 = sitofp <4 x i32> %1498 to <4 x float>
  %1500 = fcmp olt <4 x float> %1497, %1499
  %1501 = select <4 x i1> %1500, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1502 = fsub <4 x float> %1499, %1501
  %1503 = fsub <4 x float> %1497, %1502
  %1504 = fadd <4 x float> %1497, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1505 = fmul <4 x float> %1503, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1506 = fsub <4 x float> %1504, %1505
  %1507 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1503
  %1508 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1507
  %1509 = fadd <4 x float> %1506, %1508
  %1510 = fmul <4 x float> %1509, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1511 = fcmp olt <4 x float> %1510, zeroinitializer
  %1512 = select <4 x i1> %1511, <4 x float> zeroinitializer, <4 x float> %1510
  %1513 = fptosi <4 x float> %1512 to <4 x i32>
  %1514 = and <4 x i1> %1483, %1482
  %1515 = select <4 x i1> %1514, <4 x i32> %1513, <4 x i32> %1470
  %1516 = bitcast <4 x i32> %1515 to <4 x float>
  %1517 = fmul <4 x float> %1479, %1516
  %1518 = fadd <4 x float> %1475, %1517
  %1519 = fcmp olt <4 x float> %1518, zeroinitializer
  %1520 = select <4 x i1> %1519, <4 x float> zeroinitializer, <4 x float> %1518
  %1521 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1467, i64 0, i32 4
  %1522 = load float, float* %1521, align 4
  %1523 = insertelement <4 x float> undef, float %1522, i32 0
  %1524 = shufflevector <4 x float> %1523, <4 x float> undef, <4 x i32> zeroinitializer
  %1525 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1467, i64 0, i32 5
  %1526 = load float, float* %1525, align 4
  %1527 = insertelement <4 x float> undef, float %1526, i32 0
  %1528 = shufflevector <4 x float> %1527, <4 x float> undef, <4 x i32> zeroinitializer
  %1529 = fmul <4 x float> %1528, %1516
  %1530 = fadd <4 x float> %1524, %1529
  %1531 = fdiv <4 x float> %1520, %1530
  %1532 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1467, i64 0, i32 6
  %1533 = load float, float* %1532, align 4
  %1534 = fcmp une <4 x float> %1531, zeroinitializer
  %1535 = fcmp une <4 x float> %1531, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1536 = bitcast <4 x float> %1531 to <4 x i32>
  %1537 = sitofp <4 x i32> %1536 to <4 x float>
  %1538 = fmul <4 x float> %1537, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1539 = and <4 x i32> %1536, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1540 = or <4 x i32> %1539, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1541 = bitcast <4 x i32> %1540 to <4 x float>
  %1542 = fadd <4 x float> %1538, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1543 = fmul <4 x float> %1541, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1544 = fsub <4 x float> %1542, %1543
  %1545 = fadd <4 x float> %1541, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1546 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1545
  %1547 = fsub <4 x float> %1544, %1546
  %1548 = insertelement <4 x float> undef, float %1533, i32 0
  %1549 = shufflevector <4 x float> %1548, <4 x float> undef, <4 x i32> zeroinitializer
  %1550 = fmul <4 x float> %1549, %1547
  %1551 = fptosi <4 x float> %1550 to <4 x i32>
  %1552 = sitofp <4 x i32> %1551 to <4 x float>
  %1553 = fcmp olt <4 x float> %1550, %1552
  %1554 = select <4 x i1> %1553, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1555 = fsub <4 x float> %1552, %1554
  %1556 = fsub <4 x float> %1550, %1555
  %1557 = fadd <4 x float> %1550, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1558 = fmul <4 x float> %1556, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1559 = fsub <4 x float> %1557, %1558
  %1560 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1556
  %1561 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1560
  %1562 = fadd <4 x float> %1559, %1561
  %1563 = fmul <4 x float> %1562, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1564 = fcmp olt <4 x float> %1563, zeroinitializer
  %1565 = select <4 x i1> %1564, <4 x float> zeroinitializer, <4 x float> %1563
  %1566 = fptosi <4 x float> %1565 to <4 x i32>
  %1567 = and <4 x i1> %1535, %1534
  %1568 = select <4 x i1> %1567, <4 x i32> %1566, <4 x i32> %1536
  %1569 = or <4 x i32> %1568, %1469
  store <4 x i32> %1569, <4 x i32>* %17, align 16
  br label %2988

1570:                                             ; preds = %135
  %1571 = getelementptr inbounds i8*, i8** %136, i64 1
  %1572 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %1573 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1572, align 8
  %1574 = load <4 x i32>, <4 x i32>* %16, align 16
  %1575 = and <4 x i32> %1574, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1576 = and <4 x i32> %1574, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1577 = bitcast <4 x i32> %1576 to <4 x float>
  %1578 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1573, i64 0, i32 1
  %1579 = load float, float* %1578, align 4
  %1580 = insertelement <4 x float> undef, float %1579, i32 0
  %1581 = shufflevector <4 x float> %1580, <4 x float> undef, <4 x i32> zeroinitializer
  %1582 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1573, i64 0, i32 2
  %1583 = load float, float* %1582, align 4
  %1584 = insertelement <4 x float> undef, float %1583, i32 0
  %1585 = shufflevector <4 x float> %1584, <4 x float> undef, <4 x i32> zeroinitializer
  %1586 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1573, i64 0, i32 3
  %1587 = load float, float* %1586, align 4
  %1588 = fcmp une <4 x float> %1577, zeroinitializer
  %1589 = fcmp une <4 x float> %1577, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1590 = sitofp <4 x i32> %1576 to <4 x float>
  %1591 = fmul <4 x float> %1590, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1592 = and <4 x i32> %1574, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1593 = or <4 x i32> %1592, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1594 = bitcast <4 x i32> %1593 to <4 x float>
  %1595 = fadd <4 x float> %1591, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1596 = fmul <4 x float> %1594, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1597 = fsub <4 x float> %1595, %1596
  %1598 = fadd <4 x float> %1594, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1599 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1598
  %1600 = fsub <4 x float> %1597, %1599
  %1601 = insertelement <4 x float> undef, float %1587, i32 0
  %1602 = shufflevector <4 x float> %1601, <4 x float> undef, <4 x i32> zeroinitializer
  %1603 = fmul <4 x float> %1602, %1600
  %1604 = fptosi <4 x float> %1603 to <4 x i32>
  %1605 = sitofp <4 x i32> %1604 to <4 x float>
  %1606 = fcmp olt <4 x float> %1603, %1605
  %1607 = select <4 x i1> %1606, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1608 = fsub <4 x float> %1605, %1607
  %1609 = fsub <4 x float> %1603, %1608
  %1610 = fadd <4 x float> %1603, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1611 = fmul <4 x float> %1609, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1612 = fsub <4 x float> %1610, %1611
  %1613 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1609
  %1614 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1613
  %1615 = fadd <4 x float> %1612, %1614
  %1616 = fmul <4 x float> %1615, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1617 = fcmp olt <4 x float> %1616, zeroinitializer
  %1618 = select <4 x i1> %1617, <4 x float> zeroinitializer, <4 x float> %1616
  %1619 = fptosi <4 x float> %1618 to <4 x i32>
  %1620 = and <4 x i1> %1589, %1588
  %1621 = select <4 x i1> %1620, <4 x i32> %1619, <4 x i32> %1576
  %1622 = bitcast <4 x i32> %1621 to <4 x float>
  %1623 = fmul <4 x float> %1585, %1622
  %1624 = fadd <4 x float> %1581, %1623
  %1625 = fcmp olt <4 x float> %1624, zeroinitializer
  %1626 = select <4 x i1> %1625, <4 x float> zeroinitializer, <4 x float> %1624
  %1627 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1573, i64 0, i32 4
  %1628 = load float, float* %1627, align 4
  %1629 = insertelement <4 x float> undef, float %1628, i32 0
  %1630 = shufflevector <4 x float> %1629, <4 x float> undef, <4 x i32> zeroinitializer
  %1631 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1573, i64 0, i32 5
  %1632 = load float, float* %1631, align 4
  %1633 = insertelement <4 x float> undef, float %1632, i32 0
  %1634 = shufflevector <4 x float> %1633, <4 x float> undef, <4 x i32> zeroinitializer
  %1635 = fmul <4 x float> %1634, %1622
  %1636 = fadd <4 x float> %1630, %1635
  %1637 = fdiv <4 x float> %1626, %1636
  %1638 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1573, i64 0, i32 6
  %1639 = load float, float* %1638, align 4
  %1640 = fcmp une <4 x float> %1637, zeroinitializer
  %1641 = fcmp une <4 x float> %1637, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1642 = bitcast <4 x float> %1637 to <4 x i32>
  %1643 = sitofp <4 x i32> %1642 to <4 x float>
  %1644 = fmul <4 x float> %1643, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1645 = and <4 x i32> %1642, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1646 = or <4 x i32> %1645, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1647 = bitcast <4 x i32> %1646 to <4 x float>
  %1648 = fadd <4 x float> %1644, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1649 = fmul <4 x float> %1647, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1650 = fsub <4 x float> %1648, %1649
  %1651 = fadd <4 x float> %1647, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1652 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1651
  %1653 = fsub <4 x float> %1650, %1652
  %1654 = insertelement <4 x float> undef, float %1639, i32 0
  %1655 = shufflevector <4 x float> %1654, <4 x float> undef, <4 x i32> zeroinitializer
  %1656 = fmul <4 x float> %1655, %1653
  %1657 = fptosi <4 x float> %1656 to <4 x i32>
  %1658 = sitofp <4 x i32> %1657 to <4 x float>
  %1659 = fcmp olt <4 x float> %1656, %1658
  %1660 = select <4 x i1> %1659, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1661 = fsub <4 x float> %1658, %1660
  %1662 = fsub <4 x float> %1656, %1661
  %1663 = fadd <4 x float> %1656, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1664 = fmul <4 x float> %1662, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1665 = fsub <4 x float> %1663, %1664
  %1666 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1662
  %1667 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1666
  %1668 = fadd <4 x float> %1665, %1667
  %1669 = fmul <4 x float> %1668, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1670 = fcmp olt <4 x float> %1669, zeroinitializer
  %1671 = select <4 x i1> %1670, <4 x float> zeroinitializer, <4 x float> %1669
  %1672 = fptosi <4 x float> %1671 to <4 x i32>
  %1673 = and <4 x i1> %1641, %1640
  %1674 = select <4 x i1> %1673, <4 x i32> %1672, <4 x i32> %1642
  %1675 = or <4 x i32> %1674, %1575
  store <4 x i32> %1675, <4 x i32>* %16, align 16
  br label %2988

1676:                                             ; preds = %135
  %1677 = getelementptr inbounds i8*, i8** %136, i64 1
  %1678 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %1679 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1678, align 8
  %1680 = load <4 x i32>, <4 x i32>* %19, align 16
  %1681 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1679, i64 0, i32 1
  %1682 = load float, float* %1681, align 4
  %1683 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1679, i64 0, i32 2
  %1684 = load float, float* %1683, align 4
  %1685 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1679, i64 0, i32 3
  %1686 = load float, float* %1685, align 4
  %1687 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1679, i64 0, i32 4
  %1688 = load float, float* %1687, align 4
  %1689 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1679, i64 0, i32 5
  %1690 = load float, float* %1689, align 4
  %1691 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1679, i64 0, i32 6
  %1692 = load float, float* %1691, align 4
  %1693 = fadd float %1692, 1.000000e+00
  %1694 = and <4 x i32> %1680, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1695 = and <4 x i32> %1680, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1696 = bitcast <4 x i32> %1695 to <4 x float>
  %1697 = insertelement <4 x float> undef, float %1682, i32 0
  %1698 = shufflevector <4 x float> %1697, <4 x float> undef, <4 x i32> zeroinitializer
  %1699 = fmul <4 x float> %1698, %1696
  %1700 = fcmp ugt <4 x float> %1699, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1701 = fcmp une <4 x float> %1699, zeroinitializer
  %1702 = fcmp une <4 x float> %1699, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1703 = bitcast <4 x float> %1699 to <4 x i32>
  %1704 = sitofp <4 x i32> %1703 to <4 x float>
  %1705 = fmul <4 x float> %1704, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1706 = and <4 x i32> %1703, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1707 = or <4 x i32> %1706, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1708 = bitcast <4 x i32> %1707 to <4 x float>
  %1709 = fadd <4 x float> %1705, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1710 = fmul <4 x float> %1708, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1711 = fsub <4 x float> %1709, %1710
  %1712 = fadd <4 x float> %1708, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1713 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1712
  %1714 = fsub <4 x float> %1711, %1713
  %1715 = insertelement <4 x float> undef, float %1684, i32 0
  %1716 = shufflevector <4 x float> %1715, <4 x float> undef, <4 x i32> zeroinitializer
  %1717 = fmul <4 x float> %1716, %1714
  %1718 = fptosi <4 x float> %1717 to <4 x i32>
  %1719 = sitofp <4 x i32> %1718 to <4 x float>
  %1720 = fcmp olt <4 x float> %1717, %1719
  %1721 = select <4 x i1> %1720, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1722 = fsub <4 x float> %1719, %1721
  %1723 = fsub <4 x float> %1717, %1722
  %1724 = fadd <4 x float> %1717, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1725 = fmul <4 x float> %1723, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1726 = fsub <4 x float> %1724, %1725
  %1727 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1723
  %1728 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1727
  %1729 = fadd <4 x float> %1726, %1728
  %1730 = fmul <4 x float> %1729, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1731 = fcmp olt <4 x float> %1730, zeroinitializer
  %1732 = select <4 x i1> %1731, <4 x float> zeroinitializer, <4 x float> %1730
  %1733 = fptosi <4 x float> %1732 to <4 x i32>
  %1734 = and <4 x i1> %1702, %1701
  %1735 = select <4 x i1> %1734, <4 x i32> %1733, <4 x i32> %1703
  %1736 = insertelement <4 x float> undef, float %1690, i32 0
  %1737 = shufflevector <4 x float> %1736, <4 x float> undef, <4 x i32> zeroinitializer
  %1738 = fsub <4 x float> %1696, %1737
  %1739 = insertelement <4 x float> undef, float %1686, i32 0
  %1740 = shufflevector <4 x float> %1739, <4 x float> undef, <4 x i32> zeroinitializer
  %1741 = fmul <4 x float> %1740, %1738
  %1742 = fmul <4 x float> %1741, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %1743 = fptosi <4 x float> %1742 to <4 x i32>
  %1744 = sitofp <4 x i32> %1743 to <4 x float>
  %1745 = fcmp olt <4 x float> %1742, %1744
  %1746 = select <4 x i1> %1745, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1747 = fsub <4 x float> %1744, %1746
  %1748 = fsub <4 x float> %1742, %1747
  %1749 = fadd <4 x float> %1742, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1750 = fmul <4 x float> %1748, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1751 = fsub <4 x float> %1749, %1750
  %1752 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1748
  %1753 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1752
  %1754 = fadd <4 x float> %1751, %1753
  %1755 = fmul <4 x float> %1754, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1756 = fcmp olt <4 x float> %1755, zeroinitializer
  %1757 = select <4 x i1> %1756, <4 x float> zeroinitializer, <4 x float> %1755
  %1758 = fptosi <4 x float> %1757 to <4 x i32>
  %1759 = bitcast <4 x i32> %1758 to <4 x float>
  %1760 = insertelement <4 x float> undef, float %1688, i32 0
  %1761 = shufflevector <4 x float> %1760, <4 x float> undef, <4 x i32> zeroinitializer
  %1762 = fadd <4 x float> %1761, %1759
  %1763 = bitcast <4 x float> %1762 to <4 x i32>
  %1764 = select <4 x i1> %1700, <4 x i32> %1763, <4 x i32> %1735
  %1765 = insertelement <4 x float> undef, float %1693, i32 0
  %1766 = shufflevector <4 x float> %1765, <4 x float> undef, <4 x i32> zeroinitializer
  %1767 = or <4 x i32> %1764, %1694
  %1768 = bitcast <4 x i32> %1767 to <4 x float>
  %1769 = fmul <4 x float> %1766, %1768
  store <4 x float> %1769, <4 x float>* %7, align 16
  br label %2988

1770:                                             ; preds = %135
  %1771 = getelementptr inbounds i8*, i8** %136, i64 1
  %1772 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %1773 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1772, align 8
  %1774 = load <4 x i32>, <4 x i32>* %18, align 16
  %1775 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1773, i64 0, i32 1
  %1776 = load float, float* %1775, align 4
  %1777 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1773, i64 0, i32 2
  %1778 = load float, float* %1777, align 4
  %1779 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1773, i64 0, i32 3
  %1780 = load float, float* %1779, align 4
  %1781 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1773, i64 0, i32 4
  %1782 = load float, float* %1781, align 4
  %1783 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1773, i64 0, i32 5
  %1784 = load float, float* %1783, align 4
  %1785 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1773, i64 0, i32 6
  %1786 = load float, float* %1785, align 4
  %1787 = fadd float %1786, 1.000000e+00
  %1788 = and <4 x i32> %1774, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1789 = and <4 x i32> %1774, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1790 = bitcast <4 x i32> %1789 to <4 x float>
  %1791 = insertelement <4 x float> undef, float %1776, i32 0
  %1792 = shufflevector <4 x float> %1791, <4 x float> undef, <4 x i32> zeroinitializer
  %1793 = fmul <4 x float> %1792, %1790
  %1794 = fcmp ugt <4 x float> %1793, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1795 = fcmp une <4 x float> %1793, zeroinitializer
  %1796 = fcmp une <4 x float> %1793, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1797 = bitcast <4 x float> %1793 to <4 x i32>
  %1798 = sitofp <4 x i32> %1797 to <4 x float>
  %1799 = fmul <4 x float> %1798, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1800 = and <4 x i32> %1797, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1801 = or <4 x i32> %1800, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1802 = bitcast <4 x i32> %1801 to <4 x float>
  %1803 = fadd <4 x float> %1799, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1804 = fmul <4 x float> %1802, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1805 = fsub <4 x float> %1803, %1804
  %1806 = fadd <4 x float> %1802, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1807 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1806
  %1808 = fsub <4 x float> %1805, %1807
  %1809 = insertelement <4 x float> undef, float %1778, i32 0
  %1810 = shufflevector <4 x float> %1809, <4 x float> undef, <4 x i32> zeroinitializer
  %1811 = fmul <4 x float> %1810, %1808
  %1812 = fptosi <4 x float> %1811 to <4 x i32>
  %1813 = sitofp <4 x i32> %1812 to <4 x float>
  %1814 = fcmp olt <4 x float> %1811, %1813
  %1815 = select <4 x i1> %1814, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1816 = fsub <4 x float> %1813, %1815
  %1817 = fsub <4 x float> %1811, %1816
  %1818 = fadd <4 x float> %1811, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1819 = fmul <4 x float> %1817, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1820 = fsub <4 x float> %1818, %1819
  %1821 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1817
  %1822 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1821
  %1823 = fadd <4 x float> %1820, %1822
  %1824 = fmul <4 x float> %1823, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1825 = fcmp olt <4 x float> %1824, zeroinitializer
  %1826 = select <4 x i1> %1825, <4 x float> zeroinitializer, <4 x float> %1824
  %1827 = fptosi <4 x float> %1826 to <4 x i32>
  %1828 = and <4 x i1> %1796, %1795
  %1829 = select <4 x i1> %1828, <4 x i32> %1827, <4 x i32> %1797
  %1830 = insertelement <4 x float> undef, float %1784, i32 0
  %1831 = shufflevector <4 x float> %1830, <4 x float> undef, <4 x i32> zeroinitializer
  %1832 = fsub <4 x float> %1790, %1831
  %1833 = insertelement <4 x float> undef, float %1780, i32 0
  %1834 = shufflevector <4 x float> %1833, <4 x float> undef, <4 x i32> zeroinitializer
  %1835 = fmul <4 x float> %1834, %1832
  %1836 = fmul <4 x float> %1835, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %1837 = fptosi <4 x float> %1836 to <4 x i32>
  %1838 = sitofp <4 x i32> %1837 to <4 x float>
  %1839 = fcmp olt <4 x float> %1836, %1838
  %1840 = select <4 x i1> %1839, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1841 = fsub <4 x float> %1838, %1840
  %1842 = fsub <4 x float> %1836, %1841
  %1843 = fadd <4 x float> %1836, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1844 = fmul <4 x float> %1842, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1845 = fsub <4 x float> %1843, %1844
  %1846 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1842
  %1847 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1846
  %1848 = fadd <4 x float> %1845, %1847
  %1849 = fmul <4 x float> %1848, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1850 = fcmp olt <4 x float> %1849, zeroinitializer
  %1851 = select <4 x i1> %1850, <4 x float> zeroinitializer, <4 x float> %1849
  %1852 = fptosi <4 x float> %1851 to <4 x i32>
  %1853 = bitcast <4 x i32> %1852 to <4 x float>
  %1854 = insertelement <4 x float> undef, float %1782, i32 0
  %1855 = shufflevector <4 x float> %1854, <4 x float> undef, <4 x i32> zeroinitializer
  %1856 = fadd <4 x float> %1855, %1853
  %1857 = bitcast <4 x float> %1856 to <4 x i32>
  %1858 = select <4 x i1> %1794, <4 x i32> %1857, <4 x i32> %1829
  %1859 = insertelement <4 x float> undef, float %1787, i32 0
  %1860 = shufflevector <4 x float> %1859, <4 x float> undef, <4 x i32> zeroinitializer
  %1861 = or <4 x i32> %1858, %1788
  %1862 = bitcast <4 x i32> %1861 to <4 x float>
  %1863 = fmul <4 x float> %1860, %1862
  store <4 x float> %1863, <4 x float>* %8, align 16
  br label %2988

1864:                                             ; preds = %135
  %1865 = getelementptr inbounds i8*, i8** %136, i64 1
  %1866 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %1867 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1866, align 8
  %1868 = load <4 x i32>, <4 x i32>* %17, align 16
  %1869 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1867, i64 0, i32 1
  %1870 = load float, float* %1869, align 4
  %1871 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1867, i64 0, i32 2
  %1872 = load float, float* %1871, align 4
  %1873 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1867, i64 0, i32 3
  %1874 = load float, float* %1873, align 4
  %1875 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1867, i64 0, i32 4
  %1876 = load float, float* %1875, align 4
  %1877 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1867, i64 0, i32 5
  %1878 = load float, float* %1877, align 4
  %1879 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1867, i64 0, i32 6
  %1880 = load float, float* %1879, align 4
  %1881 = fadd float %1880, 1.000000e+00
  %1882 = and <4 x i32> %1868, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1883 = and <4 x i32> %1868, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1884 = bitcast <4 x i32> %1883 to <4 x float>
  %1885 = insertelement <4 x float> undef, float %1870, i32 0
  %1886 = shufflevector <4 x float> %1885, <4 x float> undef, <4 x i32> zeroinitializer
  %1887 = fmul <4 x float> %1886, %1884
  %1888 = fcmp ugt <4 x float> %1887, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1889 = fcmp une <4 x float> %1887, zeroinitializer
  %1890 = fcmp une <4 x float> %1887, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1891 = bitcast <4 x float> %1887 to <4 x i32>
  %1892 = sitofp <4 x i32> %1891 to <4 x float>
  %1893 = fmul <4 x float> %1892, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1894 = and <4 x i32> %1891, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1895 = or <4 x i32> %1894, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1896 = bitcast <4 x i32> %1895 to <4 x float>
  %1897 = fadd <4 x float> %1893, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1898 = fmul <4 x float> %1896, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1899 = fsub <4 x float> %1897, %1898
  %1900 = fadd <4 x float> %1896, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1901 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1900
  %1902 = fsub <4 x float> %1899, %1901
  %1903 = insertelement <4 x float> undef, float %1872, i32 0
  %1904 = shufflevector <4 x float> %1903, <4 x float> undef, <4 x i32> zeroinitializer
  %1905 = fmul <4 x float> %1904, %1902
  %1906 = fptosi <4 x float> %1905 to <4 x i32>
  %1907 = sitofp <4 x i32> %1906 to <4 x float>
  %1908 = fcmp olt <4 x float> %1905, %1907
  %1909 = select <4 x i1> %1908, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1910 = fsub <4 x float> %1907, %1909
  %1911 = fsub <4 x float> %1905, %1910
  %1912 = fadd <4 x float> %1905, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1913 = fmul <4 x float> %1911, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1914 = fsub <4 x float> %1912, %1913
  %1915 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1911
  %1916 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1915
  %1917 = fadd <4 x float> %1914, %1916
  %1918 = fmul <4 x float> %1917, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1919 = fcmp olt <4 x float> %1918, zeroinitializer
  %1920 = select <4 x i1> %1919, <4 x float> zeroinitializer, <4 x float> %1918
  %1921 = fptosi <4 x float> %1920 to <4 x i32>
  %1922 = and <4 x i1> %1890, %1889
  %1923 = select <4 x i1> %1922, <4 x i32> %1921, <4 x i32> %1891
  %1924 = insertelement <4 x float> undef, float %1878, i32 0
  %1925 = shufflevector <4 x float> %1924, <4 x float> undef, <4 x i32> zeroinitializer
  %1926 = fsub <4 x float> %1884, %1925
  %1927 = insertelement <4 x float> undef, float %1874, i32 0
  %1928 = shufflevector <4 x float> %1927, <4 x float> undef, <4 x i32> zeroinitializer
  %1929 = fmul <4 x float> %1928, %1926
  %1930 = fmul <4 x float> %1929, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %1931 = fptosi <4 x float> %1930 to <4 x i32>
  %1932 = sitofp <4 x i32> %1931 to <4 x float>
  %1933 = fcmp olt <4 x float> %1930, %1932
  %1934 = select <4 x i1> %1933, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1935 = fsub <4 x float> %1932, %1934
  %1936 = fsub <4 x float> %1930, %1935
  %1937 = fadd <4 x float> %1930, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1938 = fmul <4 x float> %1936, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1939 = fsub <4 x float> %1937, %1938
  %1940 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1936
  %1941 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1940
  %1942 = fadd <4 x float> %1939, %1941
  %1943 = fmul <4 x float> %1942, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1944 = fcmp olt <4 x float> %1943, zeroinitializer
  %1945 = select <4 x i1> %1944, <4 x float> zeroinitializer, <4 x float> %1943
  %1946 = fptosi <4 x float> %1945 to <4 x i32>
  %1947 = bitcast <4 x i32> %1946 to <4 x float>
  %1948 = insertelement <4 x float> undef, float %1876, i32 0
  %1949 = shufflevector <4 x float> %1948, <4 x float> undef, <4 x i32> zeroinitializer
  %1950 = fadd <4 x float> %1949, %1947
  %1951 = bitcast <4 x float> %1950 to <4 x i32>
  %1952 = select <4 x i1> %1888, <4 x i32> %1951, <4 x i32> %1923
  %1953 = insertelement <4 x float> undef, float %1881, i32 0
  %1954 = shufflevector <4 x float> %1953, <4 x float> undef, <4 x i32> zeroinitializer
  %1955 = or <4 x i32> %1952, %1882
  %1956 = bitcast <4 x i32> %1955 to <4 x float>
  %1957 = fmul <4 x float> %1954, %1956
  store <4 x float> %1957, <4 x float>* %9, align 16
  br label %2988

1958:                                             ; preds = %135
  %1959 = getelementptr inbounds i8*, i8** %136, i64 1
  %1960 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %1961 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1960, align 8
  %1962 = load <4 x i32>, <4 x i32>* %16, align 16
  %1963 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1961, i64 0, i32 1
  %1964 = load float, float* %1963, align 4
  %1965 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1961, i64 0, i32 2
  %1966 = load float, float* %1965, align 4
  %1967 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1961, i64 0, i32 3
  %1968 = load float, float* %1967, align 4
  %1969 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1961, i64 0, i32 4
  %1970 = load float, float* %1969, align 4
  %1971 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1961, i64 0, i32 5
  %1972 = load float, float* %1971, align 4
  %1973 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1961, i64 0, i32 6
  %1974 = load float, float* %1973, align 4
  %1975 = fadd float %1974, 1.000000e+00
  %1976 = and <4 x i32> %1962, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1977 = and <4 x i32> %1962, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1978 = bitcast <4 x i32> %1977 to <4 x float>
  %1979 = insertelement <4 x float> undef, float %1964, i32 0
  %1980 = shufflevector <4 x float> %1979, <4 x float> undef, <4 x i32> zeroinitializer
  %1981 = fmul <4 x float> %1980, %1978
  %1982 = fcmp ugt <4 x float> %1981, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1983 = fcmp une <4 x float> %1981, zeroinitializer
  %1984 = fcmp une <4 x float> %1981, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1985 = bitcast <4 x float> %1981 to <4 x i32>
  %1986 = sitofp <4 x i32> %1985 to <4 x float>
  %1987 = fmul <4 x float> %1986, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1988 = and <4 x i32> %1985, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1989 = or <4 x i32> %1988, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1990 = bitcast <4 x i32> %1989 to <4 x float>
  %1991 = fadd <4 x float> %1987, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1992 = fmul <4 x float> %1990, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1993 = fsub <4 x float> %1991, %1992
  %1994 = fadd <4 x float> %1990, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1995 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1994
  %1996 = fsub <4 x float> %1993, %1995
  %1997 = insertelement <4 x float> undef, float %1966, i32 0
  %1998 = shufflevector <4 x float> %1997, <4 x float> undef, <4 x i32> zeroinitializer
  %1999 = fmul <4 x float> %1998, %1996
  %2000 = fptosi <4 x float> %1999 to <4 x i32>
  %2001 = sitofp <4 x i32> %2000 to <4 x float>
  %2002 = fcmp olt <4 x float> %1999, %2001
  %2003 = select <4 x i1> %2002, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2004 = fsub <4 x float> %2001, %2003
  %2005 = fsub <4 x float> %1999, %2004
  %2006 = fadd <4 x float> %1999, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2007 = fmul <4 x float> %2005, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2008 = fsub <4 x float> %2006, %2007
  %2009 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2005
  %2010 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2009
  %2011 = fadd <4 x float> %2008, %2010
  %2012 = fmul <4 x float> %2011, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2013 = fcmp olt <4 x float> %2012, zeroinitializer
  %2014 = select <4 x i1> %2013, <4 x float> zeroinitializer, <4 x float> %2012
  %2015 = fptosi <4 x float> %2014 to <4 x i32>
  %2016 = and <4 x i1> %1984, %1983
  %2017 = select <4 x i1> %2016, <4 x i32> %2015, <4 x i32> %1985
  %2018 = insertelement <4 x float> undef, float %1972, i32 0
  %2019 = shufflevector <4 x float> %2018, <4 x float> undef, <4 x i32> zeroinitializer
  %2020 = fsub <4 x float> %1978, %2019
  %2021 = insertelement <4 x float> undef, float %1968, i32 0
  %2022 = shufflevector <4 x float> %2021, <4 x float> undef, <4 x i32> zeroinitializer
  %2023 = fmul <4 x float> %2022, %2020
  %2024 = fmul <4 x float> %2023, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %2025 = fptosi <4 x float> %2024 to <4 x i32>
  %2026 = sitofp <4 x i32> %2025 to <4 x float>
  %2027 = fcmp olt <4 x float> %2024, %2026
  %2028 = select <4 x i1> %2027, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2029 = fsub <4 x float> %2026, %2028
  %2030 = fsub <4 x float> %2024, %2029
  %2031 = fadd <4 x float> %2024, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2032 = fmul <4 x float> %2030, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2033 = fsub <4 x float> %2031, %2032
  %2034 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2030
  %2035 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2034
  %2036 = fadd <4 x float> %2033, %2035
  %2037 = fmul <4 x float> %2036, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2038 = fcmp olt <4 x float> %2037, zeroinitializer
  %2039 = select <4 x i1> %2038, <4 x float> zeroinitializer, <4 x float> %2037
  %2040 = fptosi <4 x float> %2039 to <4 x i32>
  %2041 = bitcast <4 x i32> %2040 to <4 x float>
  %2042 = insertelement <4 x float> undef, float %1970, i32 0
  %2043 = shufflevector <4 x float> %2042, <4 x float> undef, <4 x i32> zeroinitializer
  %2044 = fadd <4 x float> %2043, %2041
  %2045 = bitcast <4 x float> %2044 to <4 x i32>
  %2046 = select <4 x i1> %1982, <4 x i32> %2045, <4 x i32> %2017
  %2047 = insertelement <4 x float> undef, float %1975, i32 0
  %2048 = shufflevector <4 x float> %2047, <4 x float> undef, <4 x i32> zeroinitializer
  %2049 = or <4 x i32> %2046, %1976
  %2050 = bitcast <4 x i32> %2049 to <4 x float>
  %2051 = fmul <4 x float> %2048, %2050
  store <4 x float> %2051, <4 x float>* %10, align 16
  br label %2988

2052:                                             ; preds = %135
  %2053 = getelementptr inbounds i8*, i8** %136, i64 1
  %2054 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %2055 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2054, align 8
  %2056 = load <4 x i32>, <4 x i32>* %19, align 16
  %2057 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2055, i64 0, i32 1
  %2058 = load float, float* %2057, align 4
  %2059 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2055, i64 0, i32 2
  %2060 = load float, float* %2059, align 4
  %2061 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2055, i64 0, i32 3
  %2062 = load float, float* %2061, align 4
  %2063 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2055, i64 0, i32 4
  %2064 = load float, float* %2063, align 4
  %2065 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2055, i64 0, i32 5
  %2066 = load float, float* %2065, align 4
  %2067 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2055, i64 0, i32 6
  %2068 = load float, float* %2067, align 4
  %2069 = fadd float %2068, 1.000000e+00
  %2070 = and <4 x i32> %2056, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2071 = and <4 x i32> %2056, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2072 = bitcast <4 x i32> %2071 to <4 x float>
  %2073 = insertelement <4 x float> undef, float %2069, i32 0
  %2074 = shufflevector <4 x float> %2073, <4 x float> undef, <4 x i32> zeroinitializer
  %2075 = fdiv <4 x float> %2072, %2074
  %2076 = bitcast <4 x float> %2075 to <4 x i32>
  %2077 = fcmp ugt <4 x float> %2075, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2078 = insertelement <4 x float> undef, float %2058, i32 0
  %2079 = shufflevector <4 x float> %2078, <4 x float> undef, <4 x i32> zeroinitializer
  %2080 = fcmp une <4 x float> %2075, zeroinitializer
  %2081 = fcmp une <4 x float> %2075, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2082 = sitofp <4 x i32> %2076 to <4 x float>
  %2083 = fmul <4 x float> %2082, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2084 = and <4 x i32> %2076, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2085 = or <4 x i32> %2084, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2086 = bitcast <4 x i32> %2085 to <4 x float>
  %2087 = fadd <4 x float> %2083, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2088 = fmul <4 x float> %2086, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2089 = fsub <4 x float> %2087, %2088
  %2090 = fadd <4 x float> %2086, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2091 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2090
  %2092 = fsub <4 x float> %2089, %2091
  %2093 = insertelement <4 x float> undef, float %2060, i32 0
  %2094 = shufflevector <4 x float> %2093, <4 x float> undef, <4 x i32> zeroinitializer
  %2095 = fmul <4 x float> %2094, %2092
  %2096 = fptosi <4 x float> %2095 to <4 x i32>
  %2097 = sitofp <4 x i32> %2096 to <4 x float>
  %2098 = fcmp olt <4 x float> %2095, %2097
  %2099 = select <4 x i1> %2098, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2100 = fsub <4 x float> %2097, %2099
  %2101 = fsub <4 x float> %2095, %2100
  %2102 = fadd <4 x float> %2095, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2103 = fmul <4 x float> %2101, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2104 = fsub <4 x float> %2102, %2103
  %2105 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2101
  %2106 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2105
  %2107 = fadd <4 x float> %2104, %2106
  %2108 = fmul <4 x float> %2107, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2109 = fcmp olt <4 x float> %2108, zeroinitializer
  %2110 = select <4 x i1> %2109, <4 x float> zeroinitializer, <4 x float> %2108
  %2111 = fptosi <4 x float> %2110 to <4 x i32>
  %2112 = and <4 x i1> %2081, %2080
  %2113 = select <4 x i1> %2112, <4 x i32> %2111, <4 x i32> %2076
  %2114 = bitcast <4 x i32> %2113 to <4 x float>
  %2115 = fmul <4 x float> %2079, %2114
  %2116 = insertelement <4 x float> undef, float %2062, i32 0
  %2117 = shufflevector <4 x float> %2116, <4 x float> undef, <4 x i32> zeroinitializer
  %2118 = insertelement <4 x float> undef, float %2064, i32 0
  %2119 = shufflevector <4 x float> %2118, <4 x float> undef, <4 x i32> zeroinitializer
  %2120 = fsub <4 x float> %2075, %2119
  %2121 = bitcast <4 x float> %2120 to <4 x i32>
  %2122 = sitofp <4 x i32> %2121 to <4 x float>
  %2123 = fmul <4 x float> %2122, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2124 = and <4 x i32> %2121, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2125 = or <4 x i32> %2124, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2126 = bitcast <4 x i32> %2125 to <4 x float>
  %2127 = fadd <4 x float> %2123, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2128 = fmul <4 x float> %2126, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2129 = fsub <4 x float> %2127, %2128
  %2130 = fadd <4 x float> %2126, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2131 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2130
  %2132 = fsub <4 x float> %2129, %2131
  %2133 = fmul <4 x float> %2132, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %2134 = fmul <4 x float> %2117, %2133
  %2135 = insertelement <4 x float> undef, float %2066, i32 0
  %2136 = shufflevector <4 x float> %2135, <4 x float> undef, <4 x i32> zeroinitializer
  %2137 = fadd <4 x float> %2136, %2134
  %2138 = select <4 x i1> %2077, <4 x float> %2137, <4 x float> %2115
  %2139 = bitcast <4 x float> %2138 to <4 x i32>
  %2140 = or <4 x i32> %2070, %2139
  store <4 x i32> %2140, <4 x i32>* %19, align 16
  br label %2988

2141:                                             ; preds = %135
  %2142 = getelementptr inbounds i8*, i8** %136, i64 1
  %2143 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %2144 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2143, align 8
  %2145 = load <4 x i32>, <4 x i32>* %18, align 16
  %2146 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2144, i64 0, i32 1
  %2147 = load float, float* %2146, align 4
  %2148 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2144, i64 0, i32 2
  %2149 = load float, float* %2148, align 4
  %2150 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2144, i64 0, i32 3
  %2151 = load float, float* %2150, align 4
  %2152 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2144, i64 0, i32 4
  %2153 = load float, float* %2152, align 4
  %2154 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2144, i64 0, i32 5
  %2155 = load float, float* %2154, align 4
  %2156 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2144, i64 0, i32 6
  %2157 = load float, float* %2156, align 4
  %2158 = fadd float %2157, 1.000000e+00
  %2159 = and <4 x i32> %2145, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2160 = and <4 x i32> %2145, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2161 = bitcast <4 x i32> %2160 to <4 x float>
  %2162 = insertelement <4 x float> undef, float %2158, i32 0
  %2163 = shufflevector <4 x float> %2162, <4 x float> undef, <4 x i32> zeroinitializer
  %2164 = fdiv <4 x float> %2161, %2163
  %2165 = bitcast <4 x float> %2164 to <4 x i32>
  %2166 = fcmp ugt <4 x float> %2164, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2167 = insertelement <4 x float> undef, float %2147, i32 0
  %2168 = shufflevector <4 x float> %2167, <4 x float> undef, <4 x i32> zeroinitializer
  %2169 = fcmp une <4 x float> %2164, zeroinitializer
  %2170 = fcmp une <4 x float> %2164, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2171 = sitofp <4 x i32> %2165 to <4 x float>
  %2172 = fmul <4 x float> %2171, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2173 = and <4 x i32> %2165, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2174 = or <4 x i32> %2173, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2175 = bitcast <4 x i32> %2174 to <4 x float>
  %2176 = fadd <4 x float> %2172, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2177 = fmul <4 x float> %2175, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2178 = fsub <4 x float> %2176, %2177
  %2179 = fadd <4 x float> %2175, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2180 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2179
  %2181 = fsub <4 x float> %2178, %2180
  %2182 = insertelement <4 x float> undef, float %2149, i32 0
  %2183 = shufflevector <4 x float> %2182, <4 x float> undef, <4 x i32> zeroinitializer
  %2184 = fmul <4 x float> %2183, %2181
  %2185 = fptosi <4 x float> %2184 to <4 x i32>
  %2186 = sitofp <4 x i32> %2185 to <4 x float>
  %2187 = fcmp olt <4 x float> %2184, %2186
  %2188 = select <4 x i1> %2187, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2189 = fsub <4 x float> %2186, %2188
  %2190 = fsub <4 x float> %2184, %2189
  %2191 = fadd <4 x float> %2184, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2192 = fmul <4 x float> %2190, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2193 = fsub <4 x float> %2191, %2192
  %2194 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2190
  %2195 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2194
  %2196 = fadd <4 x float> %2193, %2195
  %2197 = fmul <4 x float> %2196, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2198 = fcmp olt <4 x float> %2197, zeroinitializer
  %2199 = select <4 x i1> %2198, <4 x float> zeroinitializer, <4 x float> %2197
  %2200 = fptosi <4 x float> %2199 to <4 x i32>
  %2201 = and <4 x i1> %2170, %2169
  %2202 = select <4 x i1> %2201, <4 x i32> %2200, <4 x i32> %2165
  %2203 = bitcast <4 x i32> %2202 to <4 x float>
  %2204 = fmul <4 x float> %2168, %2203
  %2205 = insertelement <4 x float> undef, float %2151, i32 0
  %2206 = shufflevector <4 x float> %2205, <4 x float> undef, <4 x i32> zeroinitializer
  %2207 = insertelement <4 x float> undef, float %2153, i32 0
  %2208 = shufflevector <4 x float> %2207, <4 x float> undef, <4 x i32> zeroinitializer
  %2209 = fsub <4 x float> %2164, %2208
  %2210 = bitcast <4 x float> %2209 to <4 x i32>
  %2211 = sitofp <4 x i32> %2210 to <4 x float>
  %2212 = fmul <4 x float> %2211, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2213 = and <4 x i32> %2210, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2214 = or <4 x i32> %2213, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2215 = bitcast <4 x i32> %2214 to <4 x float>
  %2216 = fadd <4 x float> %2212, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2217 = fmul <4 x float> %2215, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2218 = fsub <4 x float> %2216, %2217
  %2219 = fadd <4 x float> %2215, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2220 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2219
  %2221 = fsub <4 x float> %2218, %2220
  %2222 = fmul <4 x float> %2221, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %2223 = fmul <4 x float> %2206, %2222
  %2224 = insertelement <4 x float> undef, float %2155, i32 0
  %2225 = shufflevector <4 x float> %2224, <4 x float> undef, <4 x i32> zeroinitializer
  %2226 = fadd <4 x float> %2225, %2223
  %2227 = select <4 x i1> %2166, <4 x float> %2226, <4 x float> %2204
  %2228 = bitcast <4 x float> %2227 to <4 x i32>
  %2229 = or <4 x i32> %2159, %2228
  store <4 x i32> %2229, <4 x i32>* %18, align 16
  br label %2988

2230:                                             ; preds = %135
  %2231 = getelementptr inbounds i8*, i8** %136, i64 1
  %2232 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %2233 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2232, align 8
  %2234 = load <4 x i32>, <4 x i32>* %17, align 16
  %2235 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2233, i64 0, i32 1
  %2236 = load float, float* %2235, align 4
  %2237 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2233, i64 0, i32 2
  %2238 = load float, float* %2237, align 4
  %2239 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2233, i64 0, i32 3
  %2240 = load float, float* %2239, align 4
  %2241 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2233, i64 0, i32 4
  %2242 = load float, float* %2241, align 4
  %2243 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2233, i64 0, i32 5
  %2244 = load float, float* %2243, align 4
  %2245 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2233, i64 0, i32 6
  %2246 = load float, float* %2245, align 4
  %2247 = fadd float %2246, 1.000000e+00
  %2248 = and <4 x i32> %2234, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2249 = and <4 x i32> %2234, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2250 = bitcast <4 x i32> %2249 to <4 x float>
  %2251 = insertelement <4 x float> undef, float %2247, i32 0
  %2252 = shufflevector <4 x float> %2251, <4 x float> undef, <4 x i32> zeroinitializer
  %2253 = fdiv <4 x float> %2250, %2252
  %2254 = bitcast <4 x float> %2253 to <4 x i32>
  %2255 = fcmp ugt <4 x float> %2253, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2256 = insertelement <4 x float> undef, float %2236, i32 0
  %2257 = shufflevector <4 x float> %2256, <4 x float> undef, <4 x i32> zeroinitializer
  %2258 = fcmp une <4 x float> %2253, zeroinitializer
  %2259 = fcmp une <4 x float> %2253, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2260 = sitofp <4 x i32> %2254 to <4 x float>
  %2261 = fmul <4 x float> %2260, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2262 = and <4 x i32> %2254, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2263 = or <4 x i32> %2262, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2264 = bitcast <4 x i32> %2263 to <4 x float>
  %2265 = fadd <4 x float> %2261, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2266 = fmul <4 x float> %2264, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2267 = fsub <4 x float> %2265, %2266
  %2268 = fadd <4 x float> %2264, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2269 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2268
  %2270 = fsub <4 x float> %2267, %2269
  %2271 = insertelement <4 x float> undef, float %2238, i32 0
  %2272 = shufflevector <4 x float> %2271, <4 x float> undef, <4 x i32> zeroinitializer
  %2273 = fmul <4 x float> %2272, %2270
  %2274 = fptosi <4 x float> %2273 to <4 x i32>
  %2275 = sitofp <4 x i32> %2274 to <4 x float>
  %2276 = fcmp olt <4 x float> %2273, %2275
  %2277 = select <4 x i1> %2276, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2278 = fsub <4 x float> %2275, %2277
  %2279 = fsub <4 x float> %2273, %2278
  %2280 = fadd <4 x float> %2273, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2281 = fmul <4 x float> %2279, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2282 = fsub <4 x float> %2280, %2281
  %2283 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2279
  %2284 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2283
  %2285 = fadd <4 x float> %2282, %2284
  %2286 = fmul <4 x float> %2285, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2287 = fcmp olt <4 x float> %2286, zeroinitializer
  %2288 = select <4 x i1> %2287, <4 x float> zeroinitializer, <4 x float> %2286
  %2289 = fptosi <4 x float> %2288 to <4 x i32>
  %2290 = and <4 x i1> %2259, %2258
  %2291 = select <4 x i1> %2290, <4 x i32> %2289, <4 x i32> %2254
  %2292 = bitcast <4 x i32> %2291 to <4 x float>
  %2293 = fmul <4 x float> %2257, %2292
  %2294 = insertelement <4 x float> undef, float %2240, i32 0
  %2295 = shufflevector <4 x float> %2294, <4 x float> undef, <4 x i32> zeroinitializer
  %2296 = insertelement <4 x float> undef, float %2242, i32 0
  %2297 = shufflevector <4 x float> %2296, <4 x float> undef, <4 x i32> zeroinitializer
  %2298 = fsub <4 x float> %2253, %2297
  %2299 = bitcast <4 x float> %2298 to <4 x i32>
  %2300 = sitofp <4 x i32> %2299 to <4 x float>
  %2301 = fmul <4 x float> %2300, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2302 = and <4 x i32> %2299, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2303 = or <4 x i32> %2302, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2304 = bitcast <4 x i32> %2303 to <4 x float>
  %2305 = fadd <4 x float> %2301, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2306 = fmul <4 x float> %2304, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2307 = fsub <4 x float> %2305, %2306
  %2308 = fadd <4 x float> %2304, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2309 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2308
  %2310 = fsub <4 x float> %2307, %2309
  %2311 = fmul <4 x float> %2310, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %2312 = fmul <4 x float> %2295, %2311
  %2313 = insertelement <4 x float> undef, float %2244, i32 0
  %2314 = shufflevector <4 x float> %2313, <4 x float> undef, <4 x i32> zeroinitializer
  %2315 = fadd <4 x float> %2314, %2312
  %2316 = select <4 x i1> %2255, <4 x float> %2315, <4 x float> %2293
  %2317 = bitcast <4 x float> %2316 to <4 x i32>
  %2318 = or <4 x i32> %2248, %2317
  store <4 x i32> %2318, <4 x i32>* %17, align 16
  br label %2988

2319:                                             ; preds = %135
  %2320 = getelementptr inbounds i8*, i8** %136, i64 1
  %2321 = bitcast i8** %136 to %struct.skcms_TransferFunction**
  %2322 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2321, align 8
  %2323 = load <4 x i32>, <4 x i32>* %16, align 16
  %2324 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2322, i64 0, i32 1
  %2325 = load float, float* %2324, align 4
  %2326 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2322, i64 0, i32 2
  %2327 = load float, float* %2326, align 4
  %2328 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2322, i64 0, i32 3
  %2329 = load float, float* %2328, align 4
  %2330 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2322, i64 0, i32 4
  %2331 = load float, float* %2330, align 4
  %2332 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2322, i64 0, i32 5
  %2333 = load float, float* %2332, align 4
  %2334 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2322, i64 0, i32 6
  %2335 = load float, float* %2334, align 4
  %2336 = fadd float %2335, 1.000000e+00
  %2337 = and <4 x i32> %2323, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2338 = and <4 x i32> %2323, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2339 = bitcast <4 x i32> %2338 to <4 x float>
  %2340 = insertelement <4 x float> undef, float %2336, i32 0
  %2341 = shufflevector <4 x float> %2340, <4 x float> undef, <4 x i32> zeroinitializer
  %2342 = fdiv <4 x float> %2339, %2341
  %2343 = bitcast <4 x float> %2342 to <4 x i32>
  %2344 = fcmp ugt <4 x float> %2342, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2345 = insertelement <4 x float> undef, float %2325, i32 0
  %2346 = shufflevector <4 x float> %2345, <4 x float> undef, <4 x i32> zeroinitializer
  %2347 = fcmp une <4 x float> %2342, zeroinitializer
  %2348 = fcmp une <4 x float> %2342, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2349 = sitofp <4 x i32> %2343 to <4 x float>
  %2350 = fmul <4 x float> %2349, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2351 = and <4 x i32> %2343, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2352 = or <4 x i32> %2351, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2353 = bitcast <4 x i32> %2352 to <4 x float>
  %2354 = fadd <4 x float> %2350, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2355 = fmul <4 x float> %2353, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2356 = fsub <4 x float> %2354, %2355
  %2357 = fadd <4 x float> %2353, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2358 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2357
  %2359 = fsub <4 x float> %2356, %2358
  %2360 = insertelement <4 x float> undef, float %2327, i32 0
  %2361 = shufflevector <4 x float> %2360, <4 x float> undef, <4 x i32> zeroinitializer
  %2362 = fmul <4 x float> %2361, %2359
  %2363 = fptosi <4 x float> %2362 to <4 x i32>
  %2364 = sitofp <4 x i32> %2363 to <4 x float>
  %2365 = fcmp olt <4 x float> %2362, %2364
  %2366 = select <4 x i1> %2365, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2367 = fsub <4 x float> %2364, %2366
  %2368 = fsub <4 x float> %2362, %2367
  %2369 = fadd <4 x float> %2362, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2370 = fmul <4 x float> %2368, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2371 = fsub <4 x float> %2369, %2370
  %2372 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2368
  %2373 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2372
  %2374 = fadd <4 x float> %2371, %2373
  %2375 = fmul <4 x float> %2374, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2376 = fcmp olt <4 x float> %2375, zeroinitializer
  %2377 = select <4 x i1> %2376, <4 x float> zeroinitializer, <4 x float> %2375
  %2378 = fptosi <4 x float> %2377 to <4 x i32>
  %2379 = and <4 x i1> %2348, %2347
  %2380 = select <4 x i1> %2379, <4 x i32> %2378, <4 x i32> %2343
  %2381 = bitcast <4 x i32> %2380 to <4 x float>
  %2382 = fmul <4 x float> %2346, %2381
  %2383 = insertelement <4 x float> undef, float %2329, i32 0
  %2384 = shufflevector <4 x float> %2383, <4 x float> undef, <4 x i32> zeroinitializer
  %2385 = insertelement <4 x float> undef, float %2331, i32 0
  %2386 = shufflevector <4 x float> %2385, <4 x float> undef, <4 x i32> zeroinitializer
  %2387 = fsub <4 x float> %2342, %2386
  %2388 = bitcast <4 x float> %2387 to <4 x i32>
  %2389 = sitofp <4 x i32> %2388 to <4 x float>
  %2390 = fmul <4 x float> %2389, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2391 = and <4 x i32> %2388, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2392 = or <4 x i32> %2391, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2393 = bitcast <4 x i32> %2392 to <4 x float>
  %2394 = fadd <4 x float> %2390, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2395 = fmul <4 x float> %2393, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2396 = fsub <4 x float> %2394, %2395
  %2397 = fadd <4 x float> %2393, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2398 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2397
  %2399 = fsub <4 x float> %2396, %2398
  %2400 = fmul <4 x float> %2399, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %2401 = fmul <4 x float> %2384, %2400
  %2402 = insertelement <4 x float> undef, float %2333, i32 0
  %2403 = shufflevector <4 x float> %2402, <4 x float> undef, <4 x i32> zeroinitializer
  %2404 = fadd <4 x float> %2403, %2401
  %2405 = select <4 x i1> %2344, <4 x float> %2404, <4 x float> %2382
  %2406 = bitcast <4 x float> %2405 to <4 x i32>
  %2407 = or <4 x i32> %2337, %2406
  store <4 x i32> %2407, <4 x i32>* %16, align 16
  br label %2988

2408:                                             ; preds = %135
  %2409 = getelementptr inbounds i8*, i8** %136, i64 1
  %2410 = bitcast i8** %136 to %union.skcms_Curve**
  %2411 = load %union.skcms_Curve*, %union.skcms_Curve** %2410, align 8
  %2412 = load <4 x float>, <4 x float>* %7, align 16
  %2413 = fcmp ogt <4 x float> %2412, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2414 = select <4 x i1> %2413, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %2412
  %2415 = fcmp ogt <4 x float> %2414, zeroinitializer
  %2416 = select <4 x i1> %2415, <4 x float> %2414, <4 x float> zeroinitializer
  %2417 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2411, i64 0, i32 0, i32 0
  %2418 = load i32, i32* %2417, align 8
  %2419 = add i32 %2418, -1
  %2420 = uitofp i32 %2419 to float
  %2421 = insertelement <4 x float> undef, float %2420, i32 0
  %2422 = shufflevector <4 x float> %2421, <4 x float> undef, <4 x i32> zeroinitializer
  %2423 = fmul <4 x float> %2416, %2422
  %2424 = fptosi <4 x float> %2423 to <4 x i32>
  %2425 = fadd <4 x float> %2423, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2426 = bitcast <4 x float> %2425 to <4 x i32>
  %2427 = add <4 x i32> %2426, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2428 = bitcast <4 x i32> %2427 to <4 x float>
  %2429 = fptosi <4 x float> %2428 to <4 x i32>
  %2430 = sitofp <4 x i32> %2424 to <4 x float>
  %2431 = fsub <4 x float> %2423, %2430
  %2432 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2411, i64 0, i32 0, i32 1
  %2433 = load i8*, i8** %2432, align 8
  %2434 = icmp eq i8* %2433, null
  br i1 %2434, label %2480, label %2435

2435:                                             ; preds = %2408
  %2436 = extractelement <4 x i32> %2424, i32 0
  %2437 = sext i32 %2436 to i64
  %2438 = getelementptr inbounds i8, i8* %2433, i64 %2437
  %2439 = load i8, i8* %2438, align 1
  %2440 = insertelement <4 x i8> undef, i8 %2439, i32 0
  %2441 = extractelement <4 x i32> %2424, i32 1
  %2442 = sext i32 %2441 to i64
  %2443 = getelementptr inbounds i8, i8* %2433, i64 %2442
  %2444 = load i8, i8* %2443, align 1
  %2445 = insertelement <4 x i8> %2440, i8 %2444, i32 1
  %2446 = extractelement <4 x i32> %2424, i32 2
  %2447 = sext i32 %2446 to i64
  %2448 = getelementptr inbounds i8, i8* %2433, i64 %2447
  %2449 = load i8, i8* %2448, align 1
  %2450 = insertelement <4 x i8> %2445, i8 %2449, i32 2
  %2451 = extractelement <4 x i32> %2424, i32 3
  %2452 = sext i32 %2451 to i64
  %2453 = getelementptr inbounds i8, i8* %2433, i64 %2452
  %2454 = load i8, i8* %2453, align 1
  %2455 = insertelement <4 x i8> %2450, i8 %2454, i32 3
  %2456 = uitofp <4 x i8> %2455 to <4 x float>
  %2457 = fmul <4 x float> %2456, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2458 = extractelement <4 x i32> %2429, i32 0
  %2459 = sext i32 %2458 to i64
  %2460 = getelementptr inbounds i8, i8* %2433, i64 %2459
  %2461 = load i8, i8* %2460, align 1
  %2462 = insertelement <4 x i8> undef, i8 %2461, i32 0
  %2463 = extractelement <4 x i32> %2429, i32 1
  %2464 = sext i32 %2463 to i64
  %2465 = getelementptr inbounds i8, i8* %2433, i64 %2464
  %2466 = load i8, i8* %2465, align 1
  %2467 = insertelement <4 x i8> %2462, i8 %2466, i32 1
  %2468 = extractelement <4 x i32> %2429, i32 2
  %2469 = sext i32 %2468 to i64
  %2470 = getelementptr inbounds i8, i8* %2433, i64 %2469
  %2471 = load i8, i8* %2470, align 1
  %2472 = insertelement <4 x i8> %2467, i8 %2471, i32 2
  %2473 = extractelement <4 x i32> %2429, i32 3
  %2474 = sext i32 %2473 to i64
  %2475 = getelementptr inbounds i8, i8* %2433, i64 %2474
  %2476 = load i8, i8* %2475, align 1
  %2477 = insertelement <4 x i8> %2472, i8 %2476, i32 3
  %2478 = uitofp <4 x i8> %2477 to <4 x float>
  %2479 = fmul <4 x float> %2478, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %2543

2480:                                             ; preds = %2408
  %2481 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2411, i64 0, i32 0, i32 2
  %2482 = load i8*, i8** %2481, align 8
  %2483 = shl nsw <4 x i32> %2424, <i32 1, i32 1, i32 1, i32 1>
  %2484 = extractelement <4 x i32> %2483, i32 0
  %2485 = sext i32 %2484 to i64
  %2486 = getelementptr inbounds i8, i8* %2482, i64 %2485
  %2487 = bitcast i8* %2486 to i16*
  %2488 = load i16, i16* %2487, align 1
  %2489 = insertelement <4 x i16> undef, i16 %2488, i32 0
  %2490 = extractelement <4 x i32> %2483, i32 1
  %2491 = sext i32 %2490 to i64
  %2492 = getelementptr inbounds i8, i8* %2482, i64 %2491
  %2493 = bitcast i8* %2492 to i16*
  %2494 = load i16, i16* %2493, align 1
  %2495 = insertelement <4 x i16> %2489, i16 %2494, i32 1
  %2496 = extractelement <4 x i32> %2483, i32 2
  %2497 = sext i32 %2496 to i64
  %2498 = getelementptr inbounds i8, i8* %2482, i64 %2497
  %2499 = bitcast i8* %2498 to i16*
  %2500 = load i16, i16* %2499, align 1
  %2501 = insertelement <4 x i16> %2495, i16 %2500, i32 2
  %2502 = extractelement <4 x i32> %2483, i32 3
  %2503 = sext i32 %2502 to i64
  %2504 = getelementptr inbounds i8, i8* %2482, i64 %2503
  %2505 = bitcast i8* %2504 to i16*
  %2506 = load i16, i16* %2505, align 1
  %2507 = insertelement <4 x i16> %2501, i16 %2506, i32 3
  %2508 = lshr <4 x i16> %2507, <i16 8, i16 8, i16 8, i16 8>
  %2509 = shl <4 x i16> %2507, <i16 8, i16 8, i16 8, i16 8>
  %2510 = or <4 x i16> %2508, %2509
  %2511 = uitofp <4 x i16> %2510 to <4 x float>
  %2512 = fmul <4 x float> %2511, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %2513 = shl nsw <4 x i32> %2429, <i32 1, i32 1, i32 1, i32 1>
  %2514 = extractelement <4 x i32> %2513, i32 0
  %2515 = sext i32 %2514 to i64
  %2516 = getelementptr inbounds i8, i8* %2482, i64 %2515
  %2517 = bitcast i8* %2516 to i16*
  %2518 = load i16, i16* %2517, align 1
  %2519 = insertelement <4 x i16> undef, i16 %2518, i32 0
  %2520 = extractelement <4 x i32> %2513, i32 1
  %2521 = sext i32 %2520 to i64
  %2522 = getelementptr inbounds i8, i8* %2482, i64 %2521
  %2523 = bitcast i8* %2522 to i16*
  %2524 = load i16, i16* %2523, align 1
  %2525 = insertelement <4 x i16> %2519, i16 %2524, i32 1
  %2526 = extractelement <4 x i32> %2513, i32 2
  %2527 = sext i32 %2526 to i64
  %2528 = getelementptr inbounds i8, i8* %2482, i64 %2527
  %2529 = bitcast i8* %2528 to i16*
  %2530 = load i16, i16* %2529, align 1
  %2531 = insertelement <4 x i16> %2525, i16 %2530, i32 2
  %2532 = extractelement <4 x i32> %2513, i32 3
  %2533 = sext i32 %2532 to i64
  %2534 = getelementptr inbounds i8, i8* %2482, i64 %2533
  %2535 = bitcast i8* %2534 to i16*
  %2536 = load i16, i16* %2535, align 1
  %2537 = insertelement <4 x i16> %2531, i16 %2536, i32 3
  %2538 = lshr <4 x i16> %2537, <i16 8, i16 8, i16 8, i16 8>
  %2539 = shl <4 x i16> %2537, <i16 8, i16 8, i16 8, i16 8>
  %2540 = or <4 x i16> %2538, %2539
  %2541 = uitofp <4 x i16> %2540 to <4 x float>
  %2542 = fmul <4 x float> %2541, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %2543

2543:                                             ; preds = %2435, %2480
  %2544 = phi <4 x float> [ %2479, %2435 ], [ %2542, %2480 ]
  %2545 = phi <4 x float> [ %2457, %2435 ], [ %2512, %2480 ]
  %2546 = fsub <4 x float> %2544, %2545
  %2547 = fmul <4 x float> %2431, %2546
  %2548 = fadd <4 x float> %2545, %2547
  store <4 x float> %2548, <4 x float>* %7, align 16
  br label %2988

2549:                                             ; preds = %135
  %2550 = getelementptr inbounds i8*, i8** %136, i64 1
  %2551 = bitcast i8** %136 to %union.skcms_Curve**
  %2552 = load %union.skcms_Curve*, %union.skcms_Curve** %2551, align 8
  %2553 = load <4 x float>, <4 x float>* %8, align 16
  %2554 = fcmp ogt <4 x float> %2553, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2555 = select <4 x i1> %2554, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %2553
  %2556 = fcmp ogt <4 x float> %2555, zeroinitializer
  %2557 = select <4 x i1> %2556, <4 x float> %2555, <4 x float> zeroinitializer
  %2558 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2552, i64 0, i32 0, i32 0
  %2559 = load i32, i32* %2558, align 8
  %2560 = add i32 %2559, -1
  %2561 = uitofp i32 %2560 to float
  %2562 = insertelement <4 x float> undef, float %2561, i32 0
  %2563 = shufflevector <4 x float> %2562, <4 x float> undef, <4 x i32> zeroinitializer
  %2564 = fmul <4 x float> %2557, %2563
  %2565 = fptosi <4 x float> %2564 to <4 x i32>
  %2566 = fadd <4 x float> %2564, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2567 = bitcast <4 x float> %2566 to <4 x i32>
  %2568 = add <4 x i32> %2567, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2569 = bitcast <4 x i32> %2568 to <4 x float>
  %2570 = fptosi <4 x float> %2569 to <4 x i32>
  %2571 = sitofp <4 x i32> %2565 to <4 x float>
  %2572 = fsub <4 x float> %2564, %2571
  %2573 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2552, i64 0, i32 0, i32 1
  %2574 = load i8*, i8** %2573, align 8
  %2575 = icmp eq i8* %2574, null
  br i1 %2575, label %2621, label %2576

2576:                                             ; preds = %2549
  %2577 = extractelement <4 x i32> %2565, i32 0
  %2578 = sext i32 %2577 to i64
  %2579 = getelementptr inbounds i8, i8* %2574, i64 %2578
  %2580 = load i8, i8* %2579, align 1
  %2581 = insertelement <4 x i8> undef, i8 %2580, i32 0
  %2582 = extractelement <4 x i32> %2565, i32 1
  %2583 = sext i32 %2582 to i64
  %2584 = getelementptr inbounds i8, i8* %2574, i64 %2583
  %2585 = load i8, i8* %2584, align 1
  %2586 = insertelement <4 x i8> %2581, i8 %2585, i32 1
  %2587 = extractelement <4 x i32> %2565, i32 2
  %2588 = sext i32 %2587 to i64
  %2589 = getelementptr inbounds i8, i8* %2574, i64 %2588
  %2590 = load i8, i8* %2589, align 1
  %2591 = insertelement <4 x i8> %2586, i8 %2590, i32 2
  %2592 = extractelement <4 x i32> %2565, i32 3
  %2593 = sext i32 %2592 to i64
  %2594 = getelementptr inbounds i8, i8* %2574, i64 %2593
  %2595 = load i8, i8* %2594, align 1
  %2596 = insertelement <4 x i8> %2591, i8 %2595, i32 3
  %2597 = uitofp <4 x i8> %2596 to <4 x float>
  %2598 = fmul <4 x float> %2597, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2599 = extractelement <4 x i32> %2570, i32 0
  %2600 = sext i32 %2599 to i64
  %2601 = getelementptr inbounds i8, i8* %2574, i64 %2600
  %2602 = load i8, i8* %2601, align 1
  %2603 = insertelement <4 x i8> undef, i8 %2602, i32 0
  %2604 = extractelement <4 x i32> %2570, i32 1
  %2605 = sext i32 %2604 to i64
  %2606 = getelementptr inbounds i8, i8* %2574, i64 %2605
  %2607 = load i8, i8* %2606, align 1
  %2608 = insertelement <4 x i8> %2603, i8 %2607, i32 1
  %2609 = extractelement <4 x i32> %2570, i32 2
  %2610 = sext i32 %2609 to i64
  %2611 = getelementptr inbounds i8, i8* %2574, i64 %2610
  %2612 = load i8, i8* %2611, align 1
  %2613 = insertelement <4 x i8> %2608, i8 %2612, i32 2
  %2614 = extractelement <4 x i32> %2570, i32 3
  %2615 = sext i32 %2614 to i64
  %2616 = getelementptr inbounds i8, i8* %2574, i64 %2615
  %2617 = load i8, i8* %2616, align 1
  %2618 = insertelement <4 x i8> %2613, i8 %2617, i32 3
  %2619 = uitofp <4 x i8> %2618 to <4 x float>
  %2620 = fmul <4 x float> %2619, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %2684

2621:                                             ; preds = %2549
  %2622 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2552, i64 0, i32 0, i32 2
  %2623 = load i8*, i8** %2622, align 8
  %2624 = shl nsw <4 x i32> %2565, <i32 1, i32 1, i32 1, i32 1>
  %2625 = extractelement <4 x i32> %2624, i32 0
  %2626 = sext i32 %2625 to i64
  %2627 = getelementptr inbounds i8, i8* %2623, i64 %2626
  %2628 = bitcast i8* %2627 to i16*
  %2629 = load i16, i16* %2628, align 1
  %2630 = insertelement <4 x i16> undef, i16 %2629, i32 0
  %2631 = extractelement <4 x i32> %2624, i32 1
  %2632 = sext i32 %2631 to i64
  %2633 = getelementptr inbounds i8, i8* %2623, i64 %2632
  %2634 = bitcast i8* %2633 to i16*
  %2635 = load i16, i16* %2634, align 1
  %2636 = insertelement <4 x i16> %2630, i16 %2635, i32 1
  %2637 = extractelement <4 x i32> %2624, i32 2
  %2638 = sext i32 %2637 to i64
  %2639 = getelementptr inbounds i8, i8* %2623, i64 %2638
  %2640 = bitcast i8* %2639 to i16*
  %2641 = load i16, i16* %2640, align 1
  %2642 = insertelement <4 x i16> %2636, i16 %2641, i32 2
  %2643 = extractelement <4 x i32> %2624, i32 3
  %2644 = sext i32 %2643 to i64
  %2645 = getelementptr inbounds i8, i8* %2623, i64 %2644
  %2646 = bitcast i8* %2645 to i16*
  %2647 = load i16, i16* %2646, align 1
  %2648 = insertelement <4 x i16> %2642, i16 %2647, i32 3
  %2649 = lshr <4 x i16> %2648, <i16 8, i16 8, i16 8, i16 8>
  %2650 = shl <4 x i16> %2648, <i16 8, i16 8, i16 8, i16 8>
  %2651 = or <4 x i16> %2649, %2650
  %2652 = uitofp <4 x i16> %2651 to <4 x float>
  %2653 = fmul <4 x float> %2652, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %2654 = shl nsw <4 x i32> %2570, <i32 1, i32 1, i32 1, i32 1>
  %2655 = extractelement <4 x i32> %2654, i32 0
  %2656 = sext i32 %2655 to i64
  %2657 = getelementptr inbounds i8, i8* %2623, i64 %2656
  %2658 = bitcast i8* %2657 to i16*
  %2659 = load i16, i16* %2658, align 1
  %2660 = insertelement <4 x i16> undef, i16 %2659, i32 0
  %2661 = extractelement <4 x i32> %2654, i32 1
  %2662 = sext i32 %2661 to i64
  %2663 = getelementptr inbounds i8, i8* %2623, i64 %2662
  %2664 = bitcast i8* %2663 to i16*
  %2665 = load i16, i16* %2664, align 1
  %2666 = insertelement <4 x i16> %2660, i16 %2665, i32 1
  %2667 = extractelement <4 x i32> %2654, i32 2
  %2668 = sext i32 %2667 to i64
  %2669 = getelementptr inbounds i8, i8* %2623, i64 %2668
  %2670 = bitcast i8* %2669 to i16*
  %2671 = load i16, i16* %2670, align 1
  %2672 = insertelement <4 x i16> %2666, i16 %2671, i32 2
  %2673 = extractelement <4 x i32> %2654, i32 3
  %2674 = sext i32 %2673 to i64
  %2675 = getelementptr inbounds i8, i8* %2623, i64 %2674
  %2676 = bitcast i8* %2675 to i16*
  %2677 = load i16, i16* %2676, align 1
  %2678 = insertelement <4 x i16> %2672, i16 %2677, i32 3
  %2679 = lshr <4 x i16> %2678, <i16 8, i16 8, i16 8, i16 8>
  %2680 = shl <4 x i16> %2678, <i16 8, i16 8, i16 8, i16 8>
  %2681 = or <4 x i16> %2679, %2680
  %2682 = uitofp <4 x i16> %2681 to <4 x float>
  %2683 = fmul <4 x float> %2682, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %2684

2684:                                             ; preds = %2576, %2621
  %2685 = phi <4 x float> [ %2620, %2576 ], [ %2683, %2621 ]
  %2686 = phi <4 x float> [ %2598, %2576 ], [ %2653, %2621 ]
  %2687 = fsub <4 x float> %2685, %2686
  %2688 = fmul <4 x float> %2572, %2687
  %2689 = fadd <4 x float> %2686, %2688
  store <4 x float> %2689, <4 x float>* %8, align 16
  br label %2988

2690:                                             ; preds = %135
  %2691 = getelementptr inbounds i8*, i8** %136, i64 1
  %2692 = bitcast i8** %136 to %union.skcms_Curve**
  %2693 = load %union.skcms_Curve*, %union.skcms_Curve** %2692, align 8
  %2694 = load <4 x float>, <4 x float>* %9, align 16
  %2695 = fcmp ogt <4 x float> %2694, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2696 = select <4 x i1> %2695, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %2694
  %2697 = fcmp ogt <4 x float> %2696, zeroinitializer
  %2698 = select <4 x i1> %2697, <4 x float> %2696, <4 x float> zeroinitializer
  %2699 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2693, i64 0, i32 0, i32 0
  %2700 = load i32, i32* %2699, align 8
  %2701 = add i32 %2700, -1
  %2702 = uitofp i32 %2701 to float
  %2703 = insertelement <4 x float> undef, float %2702, i32 0
  %2704 = shufflevector <4 x float> %2703, <4 x float> undef, <4 x i32> zeroinitializer
  %2705 = fmul <4 x float> %2698, %2704
  %2706 = fptosi <4 x float> %2705 to <4 x i32>
  %2707 = fadd <4 x float> %2705, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2708 = bitcast <4 x float> %2707 to <4 x i32>
  %2709 = add <4 x i32> %2708, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2710 = bitcast <4 x i32> %2709 to <4 x float>
  %2711 = fptosi <4 x float> %2710 to <4 x i32>
  %2712 = sitofp <4 x i32> %2706 to <4 x float>
  %2713 = fsub <4 x float> %2705, %2712
  %2714 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2693, i64 0, i32 0, i32 1
  %2715 = load i8*, i8** %2714, align 8
  %2716 = icmp eq i8* %2715, null
  br i1 %2716, label %2762, label %2717

2717:                                             ; preds = %2690
  %2718 = extractelement <4 x i32> %2706, i32 0
  %2719 = sext i32 %2718 to i64
  %2720 = getelementptr inbounds i8, i8* %2715, i64 %2719
  %2721 = load i8, i8* %2720, align 1
  %2722 = insertelement <4 x i8> undef, i8 %2721, i32 0
  %2723 = extractelement <4 x i32> %2706, i32 1
  %2724 = sext i32 %2723 to i64
  %2725 = getelementptr inbounds i8, i8* %2715, i64 %2724
  %2726 = load i8, i8* %2725, align 1
  %2727 = insertelement <4 x i8> %2722, i8 %2726, i32 1
  %2728 = extractelement <4 x i32> %2706, i32 2
  %2729 = sext i32 %2728 to i64
  %2730 = getelementptr inbounds i8, i8* %2715, i64 %2729
  %2731 = load i8, i8* %2730, align 1
  %2732 = insertelement <4 x i8> %2727, i8 %2731, i32 2
  %2733 = extractelement <4 x i32> %2706, i32 3
  %2734 = sext i32 %2733 to i64
  %2735 = getelementptr inbounds i8, i8* %2715, i64 %2734
  %2736 = load i8, i8* %2735, align 1
  %2737 = insertelement <4 x i8> %2732, i8 %2736, i32 3
  %2738 = uitofp <4 x i8> %2737 to <4 x float>
  %2739 = fmul <4 x float> %2738, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2740 = extractelement <4 x i32> %2711, i32 0
  %2741 = sext i32 %2740 to i64
  %2742 = getelementptr inbounds i8, i8* %2715, i64 %2741
  %2743 = load i8, i8* %2742, align 1
  %2744 = insertelement <4 x i8> undef, i8 %2743, i32 0
  %2745 = extractelement <4 x i32> %2711, i32 1
  %2746 = sext i32 %2745 to i64
  %2747 = getelementptr inbounds i8, i8* %2715, i64 %2746
  %2748 = load i8, i8* %2747, align 1
  %2749 = insertelement <4 x i8> %2744, i8 %2748, i32 1
  %2750 = extractelement <4 x i32> %2711, i32 2
  %2751 = sext i32 %2750 to i64
  %2752 = getelementptr inbounds i8, i8* %2715, i64 %2751
  %2753 = load i8, i8* %2752, align 1
  %2754 = insertelement <4 x i8> %2749, i8 %2753, i32 2
  %2755 = extractelement <4 x i32> %2711, i32 3
  %2756 = sext i32 %2755 to i64
  %2757 = getelementptr inbounds i8, i8* %2715, i64 %2756
  %2758 = load i8, i8* %2757, align 1
  %2759 = insertelement <4 x i8> %2754, i8 %2758, i32 3
  %2760 = uitofp <4 x i8> %2759 to <4 x float>
  %2761 = fmul <4 x float> %2760, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %2825

2762:                                             ; preds = %2690
  %2763 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2693, i64 0, i32 0, i32 2
  %2764 = load i8*, i8** %2763, align 8
  %2765 = shl nsw <4 x i32> %2706, <i32 1, i32 1, i32 1, i32 1>
  %2766 = extractelement <4 x i32> %2765, i32 0
  %2767 = sext i32 %2766 to i64
  %2768 = getelementptr inbounds i8, i8* %2764, i64 %2767
  %2769 = bitcast i8* %2768 to i16*
  %2770 = load i16, i16* %2769, align 1
  %2771 = insertelement <4 x i16> undef, i16 %2770, i32 0
  %2772 = extractelement <4 x i32> %2765, i32 1
  %2773 = sext i32 %2772 to i64
  %2774 = getelementptr inbounds i8, i8* %2764, i64 %2773
  %2775 = bitcast i8* %2774 to i16*
  %2776 = load i16, i16* %2775, align 1
  %2777 = insertelement <4 x i16> %2771, i16 %2776, i32 1
  %2778 = extractelement <4 x i32> %2765, i32 2
  %2779 = sext i32 %2778 to i64
  %2780 = getelementptr inbounds i8, i8* %2764, i64 %2779
  %2781 = bitcast i8* %2780 to i16*
  %2782 = load i16, i16* %2781, align 1
  %2783 = insertelement <4 x i16> %2777, i16 %2782, i32 2
  %2784 = extractelement <4 x i32> %2765, i32 3
  %2785 = sext i32 %2784 to i64
  %2786 = getelementptr inbounds i8, i8* %2764, i64 %2785
  %2787 = bitcast i8* %2786 to i16*
  %2788 = load i16, i16* %2787, align 1
  %2789 = insertelement <4 x i16> %2783, i16 %2788, i32 3
  %2790 = lshr <4 x i16> %2789, <i16 8, i16 8, i16 8, i16 8>
  %2791 = shl <4 x i16> %2789, <i16 8, i16 8, i16 8, i16 8>
  %2792 = or <4 x i16> %2790, %2791
  %2793 = uitofp <4 x i16> %2792 to <4 x float>
  %2794 = fmul <4 x float> %2793, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %2795 = shl nsw <4 x i32> %2711, <i32 1, i32 1, i32 1, i32 1>
  %2796 = extractelement <4 x i32> %2795, i32 0
  %2797 = sext i32 %2796 to i64
  %2798 = getelementptr inbounds i8, i8* %2764, i64 %2797
  %2799 = bitcast i8* %2798 to i16*
  %2800 = load i16, i16* %2799, align 1
  %2801 = insertelement <4 x i16> undef, i16 %2800, i32 0
  %2802 = extractelement <4 x i32> %2795, i32 1
  %2803 = sext i32 %2802 to i64
  %2804 = getelementptr inbounds i8, i8* %2764, i64 %2803
  %2805 = bitcast i8* %2804 to i16*
  %2806 = load i16, i16* %2805, align 1
  %2807 = insertelement <4 x i16> %2801, i16 %2806, i32 1
  %2808 = extractelement <4 x i32> %2795, i32 2
  %2809 = sext i32 %2808 to i64
  %2810 = getelementptr inbounds i8, i8* %2764, i64 %2809
  %2811 = bitcast i8* %2810 to i16*
  %2812 = load i16, i16* %2811, align 1
  %2813 = insertelement <4 x i16> %2807, i16 %2812, i32 2
  %2814 = extractelement <4 x i32> %2795, i32 3
  %2815 = sext i32 %2814 to i64
  %2816 = getelementptr inbounds i8, i8* %2764, i64 %2815
  %2817 = bitcast i8* %2816 to i16*
  %2818 = load i16, i16* %2817, align 1
  %2819 = insertelement <4 x i16> %2813, i16 %2818, i32 3
  %2820 = lshr <4 x i16> %2819, <i16 8, i16 8, i16 8, i16 8>
  %2821 = shl <4 x i16> %2819, <i16 8, i16 8, i16 8, i16 8>
  %2822 = or <4 x i16> %2820, %2821
  %2823 = uitofp <4 x i16> %2822 to <4 x float>
  %2824 = fmul <4 x float> %2823, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %2825

2825:                                             ; preds = %2717, %2762
  %2826 = phi <4 x float> [ %2761, %2717 ], [ %2824, %2762 ]
  %2827 = phi <4 x float> [ %2739, %2717 ], [ %2794, %2762 ]
  %2828 = fsub <4 x float> %2826, %2827
  %2829 = fmul <4 x float> %2713, %2828
  %2830 = fadd <4 x float> %2827, %2829
  store <4 x float> %2830, <4 x float>* %9, align 16
  br label %2988

2831:                                             ; preds = %135
  %2832 = getelementptr inbounds i8*, i8** %136, i64 1
  %2833 = bitcast i8** %136 to %union.skcms_Curve**
  %2834 = load %union.skcms_Curve*, %union.skcms_Curve** %2833, align 8
  %2835 = load <4 x float>, <4 x float>* %10, align 16
  %2836 = fcmp ogt <4 x float> %2835, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2837 = select <4 x i1> %2836, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %2835
  %2838 = fcmp ogt <4 x float> %2837, zeroinitializer
  %2839 = select <4 x i1> %2838, <4 x float> %2837, <4 x float> zeroinitializer
  %2840 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2834, i64 0, i32 0, i32 0
  %2841 = load i32, i32* %2840, align 8
  %2842 = add i32 %2841, -1
  %2843 = uitofp i32 %2842 to float
  %2844 = insertelement <4 x float> undef, float %2843, i32 0
  %2845 = shufflevector <4 x float> %2844, <4 x float> undef, <4 x i32> zeroinitializer
  %2846 = fmul <4 x float> %2839, %2845
  %2847 = fptosi <4 x float> %2846 to <4 x i32>
  %2848 = fadd <4 x float> %2846, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2849 = bitcast <4 x float> %2848 to <4 x i32>
  %2850 = add <4 x i32> %2849, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2851 = bitcast <4 x i32> %2850 to <4 x float>
  %2852 = fptosi <4 x float> %2851 to <4 x i32>
  %2853 = sitofp <4 x i32> %2847 to <4 x float>
  %2854 = fsub <4 x float> %2846, %2853
  %2855 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2834, i64 0, i32 0, i32 1
  %2856 = load i8*, i8** %2855, align 8
  %2857 = icmp eq i8* %2856, null
  br i1 %2857, label %2903, label %2858

2858:                                             ; preds = %2831
  %2859 = extractelement <4 x i32> %2847, i32 0
  %2860 = sext i32 %2859 to i64
  %2861 = getelementptr inbounds i8, i8* %2856, i64 %2860
  %2862 = load i8, i8* %2861, align 1
  %2863 = insertelement <4 x i8> undef, i8 %2862, i32 0
  %2864 = extractelement <4 x i32> %2847, i32 1
  %2865 = sext i32 %2864 to i64
  %2866 = getelementptr inbounds i8, i8* %2856, i64 %2865
  %2867 = load i8, i8* %2866, align 1
  %2868 = insertelement <4 x i8> %2863, i8 %2867, i32 1
  %2869 = extractelement <4 x i32> %2847, i32 2
  %2870 = sext i32 %2869 to i64
  %2871 = getelementptr inbounds i8, i8* %2856, i64 %2870
  %2872 = load i8, i8* %2871, align 1
  %2873 = insertelement <4 x i8> %2868, i8 %2872, i32 2
  %2874 = extractelement <4 x i32> %2847, i32 3
  %2875 = sext i32 %2874 to i64
  %2876 = getelementptr inbounds i8, i8* %2856, i64 %2875
  %2877 = load i8, i8* %2876, align 1
  %2878 = insertelement <4 x i8> %2873, i8 %2877, i32 3
  %2879 = uitofp <4 x i8> %2878 to <4 x float>
  %2880 = fmul <4 x float> %2879, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2881 = extractelement <4 x i32> %2852, i32 0
  %2882 = sext i32 %2881 to i64
  %2883 = getelementptr inbounds i8, i8* %2856, i64 %2882
  %2884 = load i8, i8* %2883, align 1
  %2885 = insertelement <4 x i8> undef, i8 %2884, i32 0
  %2886 = extractelement <4 x i32> %2852, i32 1
  %2887 = sext i32 %2886 to i64
  %2888 = getelementptr inbounds i8, i8* %2856, i64 %2887
  %2889 = load i8, i8* %2888, align 1
  %2890 = insertelement <4 x i8> %2885, i8 %2889, i32 1
  %2891 = extractelement <4 x i32> %2852, i32 2
  %2892 = sext i32 %2891 to i64
  %2893 = getelementptr inbounds i8, i8* %2856, i64 %2892
  %2894 = load i8, i8* %2893, align 1
  %2895 = insertelement <4 x i8> %2890, i8 %2894, i32 2
  %2896 = extractelement <4 x i32> %2852, i32 3
  %2897 = sext i32 %2896 to i64
  %2898 = getelementptr inbounds i8, i8* %2856, i64 %2897
  %2899 = load i8, i8* %2898, align 1
  %2900 = insertelement <4 x i8> %2895, i8 %2899, i32 3
  %2901 = uitofp <4 x i8> %2900 to <4 x float>
  %2902 = fmul <4 x float> %2901, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %2966

2903:                                             ; preds = %2831
  %2904 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2834, i64 0, i32 0, i32 2
  %2905 = load i8*, i8** %2904, align 8
  %2906 = shl nsw <4 x i32> %2847, <i32 1, i32 1, i32 1, i32 1>
  %2907 = extractelement <4 x i32> %2906, i32 0
  %2908 = sext i32 %2907 to i64
  %2909 = getelementptr inbounds i8, i8* %2905, i64 %2908
  %2910 = bitcast i8* %2909 to i16*
  %2911 = load i16, i16* %2910, align 1
  %2912 = insertelement <4 x i16> undef, i16 %2911, i32 0
  %2913 = extractelement <4 x i32> %2906, i32 1
  %2914 = sext i32 %2913 to i64
  %2915 = getelementptr inbounds i8, i8* %2905, i64 %2914
  %2916 = bitcast i8* %2915 to i16*
  %2917 = load i16, i16* %2916, align 1
  %2918 = insertelement <4 x i16> %2912, i16 %2917, i32 1
  %2919 = extractelement <4 x i32> %2906, i32 2
  %2920 = sext i32 %2919 to i64
  %2921 = getelementptr inbounds i8, i8* %2905, i64 %2920
  %2922 = bitcast i8* %2921 to i16*
  %2923 = load i16, i16* %2922, align 1
  %2924 = insertelement <4 x i16> %2918, i16 %2923, i32 2
  %2925 = extractelement <4 x i32> %2906, i32 3
  %2926 = sext i32 %2925 to i64
  %2927 = getelementptr inbounds i8, i8* %2905, i64 %2926
  %2928 = bitcast i8* %2927 to i16*
  %2929 = load i16, i16* %2928, align 1
  %2930 = insertelement <4 x i16> %2924, i16 %2929, i32 3
  %2931 = lshr <4 x i16> %2930, <i16 8, i16 8, i16 8, i16 8>
  %2932 = shl <4 x i16> %2930, <i16 8, i16 8, i16 8, i16 8>
  %2933 = or <4 x i16> %2931, %2932
  %2934 = uitofp <4 x i16> %2933 to <4 x float>
  %2935 = fmul <4 x float> %2934, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %2936 = shl nsw <4 x i32> %2852, <i32 1, i32 1, i32 1, i32 1>
  %2937 = extractelement <4 x i32> %2936, i32 0
  %2938 = sext i32 %2937 to i64
  %2939 = getelementptr inbounds i8, i8* %2905, i64 %2938
  %2940 = bitcast i8* %2939 to i16*
  %2941 = load i16, i16* %2940, align 1
  %2942 = insertelement <4 x i16> undef, i16 %2941, i32 0
  %2943 = extractelement <4 x i32> %2936, i32 1
  %2944 = sext i32 %2943 to i64
  %2945 = getelementptr inbounds i8, i8* %2905, i64 %2944
  %2946 = bitcast i8* %2945 to i16*
  %2947 = load i16, i16* %2946, align 1
  %2948 = insertelement <4 x i16> %2942, i16 %2947, i32 1
  %2949 = extractelement <4 x i32> %2936, i32 2
  %2950 = sext i32 %2949 to i64
  %2951 = getelementptr inbounds i8, i8* %2905, i64 %2950
  %2952 = bitcast i8* %2951 to i16*
  %2953 = load i16, i16* %2952, align 1
  %2954 = insertelement <4 x i16> %2948, i16 %2953, i32 2
  %2955 = extractelement <4 x i32> %2936, i32 3
  %2956 = sext i32 %2955 to i64
  %2957 = getelementptr inbounds i8, i8* %2905, i64 %2956
  %2958 = bitcast i8* %2957 to i16*
  %2959 = load i16, i16* %2958, align 1
  %2960 = insertelement <4 x i16> %2954, i16 %2959, i32 3
  %2961 = lshr <4 x i16> %2960, <i16 8, i16 8, i16 8, i16 8>
  %2962 = shl <4 x i16> %2960, <i16 8, i16 8, i16 8, i16 8>
  %2963 = or <4 x i16> %2961, %2962
  %2964 = uitofp <4 x i16> %2963 to <4 x float>
  %2965 = fmul <4 x float> %2964, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %2966

2966:                                             ; preds = %2858, %2903
  %2967 = phi <4 x float> [ %2902, %2858 ], [ %2965, %2903 ]
  %2968 = phi <4 x float> [ %2880, %2858 ], [ %2935, %2903 ]
  %2969 = fsub <4 x float> %2967, %2968
  %2970 = fmul <4 x float> %2854, %2969
  %2971 = fadd <4 x float> %2968, %2970
  store <4 x float> %2971, <4 x float>* %10, align 16
  br label %2988

2972:                                             ; preds = %135
  %2973 = getelementptr inbounds i8*, i8** %136, i64 1
  %2974 = bitcast i8** %136 to %struct.skcms_A2B**
  %2975 = load %struct.skcms_A2B*, %struct.skcms_A2B** %2974, align 8
  %2976 = load <4 x float>, <4 x float>* %10, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15)
  store <4 x float> %2976, <4 x float>* %6, align 16
  %2977 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %2975, i64 0, i32 0
  %2978 = load i32, i32* %2977, align 8
  %2979 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %2975, i64 0, i32 8
  %2980 = load i32, i32* %2979, align 8
  %2981 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %2975, i64 0, i32 2, i64 0
  %2982 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %2975, i64 0, i32 3
  %2983 = load i8*, i8** %2982, align 8
  %2984 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %2975, i64 0, i32 4
  %2985 = load i8*, i8** %2984, align 8
  call fastcc void @_ZN8baselineL4clutEjjPKhS1_S1_PDv4_fS3_S3_S3_(i32 %2978, i32 %2980, i8* %2981, i8* %2983, i8* %2985, <4 x float>* nonnull %7, <4 x float>* nonnull %8, <4 x float>* nonnull %9, <4 x float>* nonnull %6) #17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15)
  %2986 = load i32, i32* %2977, align 8
  %2987 = icmp eq i32 %2986, 4
  br i1 %2987, label %2990, label %2988

2988:                                             ; preds = %2972, %2990, %135, %2991, %2966, %2825, %2684, %2543, %2319, %2230, %2141, %2052, %1958, %1864, %1770, %1676, %1570, %1464, %1358, %1252, %1173, %1094, %1015, %936, %805, %770, %697, %639, %628, %620, %619, %610, %589, %586, %553, %528, %487, %435, %414, %356, %340, %297, %281, %234, %218, %175, %164, %148, %144, %140
  %2989 = phi i8** [ %136, %135 ], [ %2992, %2991 ], [ %2832, %2966 ], [ %2691, %2825 ], [ %2550, %2684 ], [ %2409, %2543 ], [ %2320, %2319 ], [ %2231, %2230 ], [ %2142, %2141 ], [ %2053, %2052 ], [ %1959, %1958 ], [ %1865, %1864 ], [ %1771, %1770 ], [ %1677, %1676 ], [ %1571, %1570 ], [ %1465, %1464 ], [ %1359, %1358 ], [ %1253, %1252 ], [ %1174, %1173 ], [ %1095, %1094 ], [ %1016, %1015 ], [ %937, %936 ], [ %136, %805 ], [ %136, %770 ], [ %698, %697 ], [ %640, %639 ], [ %136, %628 ], [ %136, %620 ], [ %136, %619 ], [ %136, %610 ], [ %136, %589 ], [ %136, %586 ], [ %136, %553 ], [ %136, %528 ], [ %136, %487 ], [ %136, %435 ], [ %136, %414 ], [ %136, %356 ], [ %136, %340 ], [ %136, %297 ], [ %136, %281 ], [ %235, %234 ], [ %136, %218 ], [ %136, %175 ], [ %136, %164 ], [ %136, %148 ], [ %136, %144 ], [ %136, %140 ], [ %2973, %2990 ], [ %2973, %2972 ]
  br label %135

2990:                                             ; preds = %2972
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %10, align 16
  br label %2988

2991:                                             ; preds = %135
  %2992 = getelementptr inbounds i8*, i8** %136, i64 1
  %2993 = bitcast i8** %136 to %struct.skcms_B2A**
  %2994 = load %struct.skcms_B2A*, %struct.skcms_B2A** %2993, align 8
  %2995 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %2994, i64 0, i32 0
  %2996 = load i32, i32* %2995, align 8
  %2997 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %2994, i64 0, i32 5
  %2998 = load i32, i32* %2997, align 8
  %2999 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %2994, i64 0, i32 6, i64 0
  %3000 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %2994, i64 0, i32 7
  %3001 = load i8*, i8** %3000, align 8
  %3002 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %2994, i64 0, i32 8
  %3003 = load i8*, i8** %3002, align 8
  call fastcc void @_ZN8baselineL4clutEjjPKhS1_S1_PDv4_fS3_S3_S3_(i32 %2996, i32 %2998, i8* %2999, i8* %3001, i8* %3003, <4 x float>* nonnull %7, <4 x float>* nonnull %8, <4 x float>* nonnull %9, <4 x float>* nonnull %10) #17
  br label %2988

3004:                                             ; preds = %135
  %3005 = getelementptr inbounds i8, i8* %3, i64 %114
  %3006 = load <4 x float>, <4 x float>* %10, align 16
  %3007 = fmul <4 x float> %3006, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3008 = fadd <4 x float> %3007, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3009 = fptosi <4 x float> %3008 to <4 x i32>
  %3010 = trunc <4 x i32> %3009 to <4 x i8>
  %3011 = bitcast i8* %3005 to <4 x i8>*
  store <4 x i8> %3010, <4 x i8>* %3011, align 1
  br label %3542

3012:                                             ; preds = %135
  %3013 = getelementptr inbounds i8, i8* %3, i64 %114
  %3014 = load <4 x float>, <4 x float>* %8, align 16
  %3015 = fmul <4 x float> %3014, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3016 = fadd <4 x float> %3015, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3017 = fptosi <4 x float> %3016 to <4 x i32>
  %3018 = trunc <4 x i32> %3017 to <4 x i8>
  %3019 = bitcast i8* %3013 to <4 x i8>*
  store <4 x i8> %3018, <4 x i8>* %3019, align 1
  br label %3542

3020:                                             ; preds = %135
  %3021 = getelementptr inbounds i8, i8* %3, i64 %132
  %3022 = load <4 x float>, <4 x float>* %7, align 16
  %3023 = fmul <4 x float> %3022, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %3024 = fadd <4 x float> %3023, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3025 = fptosi <4 x float> %3024 to <4 x i32>
  %3026 = shl <4 x i32> %3025, <i32 12, i32 12, i32 12, i32 12>
  %3027 = load <4 x float>, <4 x float>* %8, align 16
  %3028 = fmul <4 x float> %3027, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %3029 = fadd <4 x float> %3028, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3030 = fptosi <4 x float> %3029 to <4 x i32>
  %3031 = shl <4 x i32> %3030, <i32 8, i32 8, i32 8, i32 8>
  %3032 = or <4 x i32> %3031, %3026
  %3033 = load <4 x float>, <4 x float>* %9, align 16
  %3034 = fmul <4 x float> %3033, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %3035 = fadd <4 x float> %3034, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3036 = fptosi <4 x float> %3035 to <4 x i32>
  %3037 = shl <4 x i32> %3036, <i32 4, i32 4, i32 4, i32 4>
  %3038 = or <4 x i32> %3032, %3037
  %3039 = load <4 x float>, <4 x float>* %10, align 16
  %3040 = fmul <4 x float> %3039, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %3041 = fadd <4 x float> %3040, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3042 = fptosi <4 x float> %3041 to <4 x i32>
  %3043 = or <4 x i32> %3038, %3042
  %3044 = trunc <4 x i32> %3043 to <4 x i16>
  %3045 = bitcast i8* %3021 to <4 x i16>*
  store <4 x i16> %3044, <4 x i16>* %3045, align 1
  br label %3542

3046:                                             ; preds = %135
  %3047 = getelementptr inbounds i8, i8* %3, i64 %132
  %3048 = load <4 x float>, <4 x float>* %7, align 16
  %3049 = fmul <4 x float> %3048, <float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01>
  %3050 = fadd <4 x float> %3049, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3051 = fptosi <4 x float> %3050 to <4 x i32>
  %3052 = load <4 x float>, <4 x float>* %8, align 16
  %3053 = fmul <4 x float> %3052, <float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01>
  %3054 = fadd <4 x float> %3053, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3055 = fptosi <4 x float> %3054 to <4 x i32>
  %3056 = shl <4 x i32> %3055, <i32 5, i32 5, i32 5, i32 5>
  %3057 = or <4 x i32> %3056, %3051
  %3058 = load <4 x float>, <4 x float>* %9, align 16
  %3059 = fmul <4 x float> %3058, <float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01>
  %3060 = fadd <4 x float> %3059, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3061 = fptosi <4 x float> %3060 to <4 x i32>
  %3062 = shl <4 x i32> %3061, <i32 11, i32 11, i32 11, i32 11>
  %3063 = or <4 x i32> %3057, %3062
  %3064 = trunc <4 x i32> %3063 to <4 x i16>
  %3065 = bitcast i8* %3047 to <4 x i16>*
  store <4 x i16> %3064, <4 x i16>* %3065, align 1
  br label %3542

3066:                                             ; preds = %135
  %3067 = getelementptr inbounds i8, i8* %3, i64 %118
  %3068 = load <4 x float>, <4 x float>* %7, align 16
  %3069 = fmul <4 x float> %3068, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3070 = fadd <4 x float> %3069, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3071 = fptosi <4 x float> %3070 to <4 x i32>
  %3072 = trunc <4 x i32> %3071 to <4 x i8>
  %3073 = extractelement <4 x i8> %3072, i32 0
  store i8 %3073, i8* %3067, align 1
  %3074 = extractelement <4 x i8> %3072, i32 1
  %3075 = getelementptr inbounds i8, i8* %3067, i64 3
  store i8 %3074, i8* %3075, align 1
  %3076 = extractelement <4 x i8> %3072, i32 2
  %3077 = getelementptr inbounds i8, i8* %3067, i64 6
  store i8 %3076, i8* %3077, align 1
  %3078 = extractelement <4 x i8> %3072, i32 3
  %3079 = getelementptr inbounds i8, i8* %3067, i64 9
  store i8 %3078, i8* %3079, align 1
  %3080 = getelementptr inbounds i8, i8* %3067, i64 1
  %3081 = load <4 x float>, <4 x float>* %8, align 16
  %3082 = fmul <4 x float> %3081, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3083 = fadd <4 x float> %3082, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3084 = fptosi <4 x float> %3083 to <4 x i32>
  %3085 = trunc <4 x i32> %3084 to <4 x i8>
  %3086 = extractelement <4 x i8> %3085, i32 0
  store i8 %3086, i8* %3080, align 1
  %3087 = extractelement <4 x i8> %3085, i32 1
  %3088 = getelementptr inbounds i8, i8* %3080, i64 3
  store i8 %3087, i8* %3088, align 1
  %3089 = extractelement <4 x i8> %3085, i32 2
  %3090 = getelementptr inbounds i8, i8* %3080, i64 6
  store i8 %3089, i8* %3090, align 1
  %3091 = extractelement <4 x i8> %3085, i32 3
  %3092 = getelementptr inbounds i8, i8* %3080, i64 9
  store i8 %3091, i8* %3092, align 1
  %3093 = getelementptr inbounds i8, i8* %3067, i64 2
  %3094 = load <4 x float>, <4 x float>* %9, align 16
  %3095 = fmul <4 x float> %3094, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3096 = fadd <4 x float> %3095, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3097 = fptosi <4 x float> %3096 to <4 x i32>
  %3098 = trunc <4 x i32> %3097 to <4 x i8>
  %3099 = extractelement <4 x i8> %3098, i32 0
  store i8 %3099, i8* %3093, align 1
  %3100 = extractelement <4 x i8> %3098, i32 1
  %3101 = getelementptr inbounds i8, i8* %3093, i64 3
  store i8 %3100, i8* %3101, align 1
  %3102 = extractelement <4 x i8> %3098, i32 2
  %3103 = getelementptr inbounds i8, i8* %3093, i64 6
  store i8 %3102, i8* %3103, align 1
  %3104 = extractelement <4 x i8> %3098, i32 3
  %3105 = getelementptr inbounds i8, i8* %3093, i64 9
  store i8 %3104, i8* %3105, align 1
  br label %3542

3106:                                             ; preds = %135
  %3107 = getelementptr inbounds i8, i8* %3, i64 %111
  %3108 = load <4 x float>, <4 x float>* %7, align 16
  %3109 = fmul <4 x float> %3108, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3110 = fadd <4 x float> %3109, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3111 = fptosi <4 x float> %3110 to <4 x i32>
  %3112 = load <4 x float>, <4 x float>* %8, align 16
  %3113 = fmul <4 x float> %3112, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3114 = fadd <4 x float> %3113, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3115 = fptosi <4 x float> %3114 to <4 x i32>
  %3116 = shl <4 x i32> %3115, <i32 8, i32 8, i32 8, i32 8>
  %3117 = or <4 x i32> %3116, %3111
  %3118 = load <4 x float>, <4 x float>* %9, align 16
  %3119 = fmul <4 x float> %3118, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3120 = fadd <4 x float> %3119, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3121 = fptosi <4 x float> %3120 to <4 x i32>
  %3122 = shl <4 x i32> %3121, <i32 16, i32 16, i32 16, i32 16>
  %3123 = or <4 x i32> %3117, %3122
  %3124 = load <4 x float>, <4 x float>* %10, align 16
  %3125 = fmul <4 x float> %3124, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3126 = fadd <4 x float> %3125, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3127 = fptosi <4 x float> %3126 to <4 x i32>
  %3128 = shl <4 x i32> %3127, <i32 24, i32 24, i32 24, i32 24>
  %3129 = or <4 x i32> %3123, %3128
  %3130 = bitcast i8* %3107 to <4 x i32>*
  store <4 x i32> %3129, <4 x i32>* %3130, align 1
  br label %3542

3131:                                             ; preds = %135
  %3132 = getelementptr inbounds i8, i8* %3, i64 %111
  %3133 = load <4 x float>, <4 x float>* %7, align 16
  %3134 = fmul <4 x float> %3133, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %3135 = fadd <4 x float> %3134, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3136 = fptosi <4 x float> %3135 to <4 x i32>
  %3137 = load <4 x float>, <4 x float>* %8, align 16
  %3138 = fmul <4 x float> %3137, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %3139 = fadd <4 x float> %3138, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3140 = fptosi <4 x float> %3139 to <4 x i32>
  %3141 = shl <4 x i32> %3140, <i32 10, i32 10, i32 10, i32 10>
  %3142 = or <4 x i32> %3141, %3136
  %3143 = load <4 x float>, <4 x float>* %9, align 16
  %3144 = fmul <4 x float> %3143, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %3145 = fadd <4 x float> %3144, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3146 = fptosi <4 x float> %3145 to <4 x i32>
  %3147 = shl <4 x i32> %3146, <i32 20, i32 20, i32 20, i32 20>
  %3148 = or <4 x i32> %3142, %3147
  %3149 = load <4 x float>, <4 x float>* %10, align 16
  %3150 = fmul <4 x float> %3149, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %3151 = fadd <4 x float> %3150, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3152 = fptosi <4 x float> %3151 to <4 x i32>
  %3153 = shl <4 x i32> %3152, <i32 30, i32 30, i32 30, i32 30>
  %3154 = or <4 x i32> %3148, %3153
  %3155 = bitcast i8* %3132 to <4 x i32>*
  store <4 x i32> %3154, <4 x i32>* %3155, align 1
  br label %3542

3156:                                             ; preds = %135
  %3157 = getelementptr inbounds i8, i8* %3, i64 %85
  %3158 = bitcast i8* %3157 to i16*
  %3159 = load <4 x float>, <4 x float>* %7, align 16
  %3160 = fmul <4 x float> %3159, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3161 = fadd <4 x float> %3160, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3162 = fptoui <4 x float> %3161 to <4 x i16>
  %3163 = extractelement <4 x i16> %3162, i32 0
  store i16 %3163, i16* %3158, align 2
  %3164 = extractelement <4 x i16> %3162, i32 1
  %3165 = getelementptr inbounds i8, i8* %3157, i64 6
  %3166 = bitcast i8* %3165 to i16*
  store i16 %3164, i16* %3166, align 2
  %3167 = extractelement <4 x i16> %3162, i32 2
  %3168 = getelementptr inbounds i8, i8* %3157, i64 12
  %3169 = bitcast i8* %3168 to i16*
  store i16 %3167, i16* %3169, align 2
  %3170 = extractelement <4 x i16> %3162, i32 3
  %3171 = getelementptr inbounds i8, i8* %3157, i64 18
  %3172 = bitcast i8* %3171 to i16*
  store i16 %3170, i16* %3172, align 2
  %3173 = getelementptr inbounds i8, i8* %3157, i64 2
  %3174 = bitcast i8* %3173 to i16*
  %3175 = load <4 x float>, <4 x float>* %8, align 16
  %3176 = fmul <4 x float> %3175, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3177 = fadd <4 x float> %3176, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3178 = fptoui <4 x float> %3177 to <4 x i16>
  %3179 = extractelement <4 x i16> %3178, i32 0
  store i16 %3179, i16* %3174, align 2
  %3180 = extractelement <4 x i16> %3178, i32 1
  %3181 = getelementptr inbounds i8, i8* %3173, i64 6
  %3182 = bitcast i8* %3181 to i16*
  store i16 %3180, i16* %3182, align 2
  %3183 = extractelement <4 x i16> %3178, i32 2
  %3184 = getelementptr inbounds i8, i8* %3173, i64 12
  %3185 = bitcast i8* %3184 to i16*
  store i16 %3183, i16* %3185, align 2
  %3186 = extractelement <4 x i16> %3178, i32 3
  %3187 = getelementptr inbounds i8, i8* %3173, i64 18
  %3188 = bitcast i8* %3187 to i16*
  store i16 %3186, i16* %3188, align 2
  %3189 = getelementptr inbounds i8, i8* %3157, i64 4
  %3190 = bitcast i8* %3189 to i16*
  %3191 = load <4 x float>, <4 x float>* %9, align 16
  %3192 = fmul <4 x float> %3191, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3193 = fadd <4 x float> %3192, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3194 = fptoui <4 x float> %3193 to <4 x i16>
  %3195 = extractelement <4 x i16> %3194, i32 0
  store i16 %3195, i16* %3190, align 2
  %3196 = extractelement <4 x i16> %3194, i32 1
  %3197 = getelementptr inbounds i8, i8* %3189, i64 6
  %3198 = bitcast i8* %3197 to i16*
  store i16 %3196, i16* %3198, align 2
  %3199 = extractelement <4 x i16> %3194, i32 2
  %3200 = getelementptr inbounds i8, i8* %3189, i64 12
  %3201 = bitcast i8* %3200 to i16*
  store i16 %3199, i16* %3201, align 2
  %3202 = extractelement <4 x i16> %3194, i32 3
  %3203 = getelementptr inbounds i8, i8* %3189, i64 18
  %3204 = bitcast i8* %3203 to i16*
  store i16 %3202, i16* %3204, align 2
  br label %3542

3205:                                             ; preds = %135
  %3206 = getelementptr inbounds i8, i8* %3, i64 %81
  %3207 = load <4 x float>, <4 x float>* %7, align 16
  %3208 = fmul <4 x float> %3207, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3209 = fadd <4 x float> %3208, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3210 = fptosi <4 x float> %3209 to <4 x i32>
  %3211 = zext <4 x i32> %3210 to <4 x i64>
  %3212 = load <4 x float>, <4 x float>* %8, align 16
  %3213 = fmul <4 x float> %3212, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3214 = fadd <4 x float> %3213, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3215 = fptosi <4 x float> %3214 to <4 x i32>
  %3216 = zext <4 x i32> %3215 to <4 x i64>
  %3217 = shl nuw nsw <4 x i64> %3216, <i64 16, i64 16, i64 16, i64 16>
  %3218 = or <4 x i64> %3217, %3211
  %3219 = load <4 x float>, <4 x float>* %9, align 16
  %3220 = fmul <4 x float> %3219, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3221 = fadd <4 x float> %3220, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3222 = fptosi <4 x float> %3221 to <4 x i32>
  %3223 = zext <4 x i32> %3222 to <4 x i64>
  %3224 = shl nuw <4 x i64> %3223, <i64 32, i64 32, i64 32, i64 32>
  %3225 = or <4 x i64> %3218, %3224
  %3226 = load <4 x float>, <4 x float>* %10, align 16
  %3227 = fmul <4 x float> %3226, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3228 = fadd <4 x float> %3227, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3229 = fptosi <4 x float> %3228 to <4 x i32>
  %3230 = zext <4 x i32> %3229 to <4 x i64>
  %3231 = shl <4 x i64> %3230, <i64 48, i64 48, i64 48, i64 48>
  %3232 = or <4 x i64> %3225, %3231
  %3233 = bitcast i8* %3206 to <4 x i64>*
  store <4 x i64> %3232, <4 x i64>* %3233, align 2
  br label %3542

3234:                                             ; preds = %135
  %3235 = getelementptr inbounds i8, i8* %3, i64 %85
  %3236 = bitcast i8* %3235 to i16*
  %3237 = load <4 x float>, <4 x float>* %7, align 16
  %3238 = fmul <4 x float> %3237, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3239 = fadd <4 x float> %3238, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3240 = fptosi <4 x float> %3239 to <4 x i32>
  %3241 = load <4 x float>, <4 x float>* %8, align 16
  %3242 = fmul <4 x float> %3241, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3243 = fadd <4 x float> %3242, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3244 = fptosi <4 x float> %3243 to <4 x i32>
  %3245 = load <4 x float>, <4 x float>* %9, align 16
  %3246 = fmul <4 x float> %3245, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3247 = fadd <4 x float> %3246, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3248 = fptosi <4 x float> %3247 to <4 x i32>
  %3249 = shl <4 x i32> %3240, <i32 8, i32 8, i32 8, i32 8>
  %3250 = lshr <4 x i32> %3240, <i32 8, i32 8, i32 8, i32 8>
  %3251 = and <4 x i32> %3250, <i32 255, i32 255, i32 255, i32 255>
  %3252 = or <4 x i32> %3251, %3249
  %3253 = trunc <4 x i32> %3252 to <4 x i16>
  %3254 = extractelement <4 x i16> %3253, i32 0
  store i16 %3254, i16* %3236, align 2
  %3255 = extractelement <4 x i16> %3253, i32 1
  %3256 = getelementptr inbounds i8, i8* %3235, i64 6
  %3257 = bitcast i8* %3256 to i16*
  store i16 %3255, i16* %3257, align 2
  %3258 = extractelement <4 x i16> %3253, i32 2
  %3259 = getelementptr inbounds i8, i8* %3235, i64 12
  %3260 = bitcast i8* %3259 to i16*
  store i16 %3258, i16* %3260, align 2
  %3261 = extractelement <4 x i16> %3253, i32 3
  %3262 = getelementptr inbounds i8, i8* %3235, i64 18
  %3263 = bitcast i8* %3262 to i16*
  store i16 %3261, i16* %3263, align 2
  %3264 = getelementptr inbounds i8, i8* %3235, i64 2
  %3265 = bitcast i8* %3264 to i16*
  %3266 = shl <4 x i32> %3244, <i32 8, i32 8, i32 8, i32 8>
  %3267 = lshr <4 x i32> %3244, <i32 8, i32 8, i32 8, i32 8>
  %3268 = and <4 x i32> %3267, <i32 255, i32 255, i32 255, i32 255>
  %3269 = or <4 x i32> %3268, %3266
  %3270 = trunc <4 x i32> %3269 to <4 x i16>
  %3271 = extractelement <4 x i16> %3270, i32 0
  store i16 %3271, i16* %3265, align 2
  %3272 = extractelement <4 x i16> %3270, i32 1
  %3273 = getelementptr inbounds i8, i8* %3264, i64 6
  %3274 = bitcast i8* %3273 to i16*
  store i16 %3272, i16* %3274, align 2
  %3275 = extractelement <4 x i16> %3270, i32 2
  %3276 = getelementptr inbounds i8, i8* %3264, i64 12
  %3277 = bitcast i8* %3276 to i16*
  store i16 %3275, i16* %3277, align 2
  %3278 = extractelement <4 x i16> %3270, i32 3
  %3279 = getelementptr inbounds i8, i8* %3264, i64 18
  %3280 = bitcast i8* %3279 to i16*
  store i16 %3278, i16* %3280, align 2
  %3281 = getelementptr inbounds i8, i8* %3235, i64 4
  %3282 = bitcast i8* %3281 to i16*
  %3283 = shl <4 x i32> %3248, <i32 8, i32 8, i32 8, i32 8>
  %3284 = lshr <4 x i32> %3248, <i32 8, i32 8, i32 8, i32 8>
  %3285 = and <4 x i32> %3284, <i32 255, i32 255, i32 255, i32 255>
  %3286 = or <4 x i32> %3285, %3283
  %3287 = trunc <4 x i32> %3286 to <4 x i16>
  %3288 = extractelement <4 x i16> %3287, i32 0
  store i16 %3288, i16* %3282, align 2
  %3289 = extractelement <4 x i16> %3287, i32 1
  %3290 = getelementptr inbounds i8, i8* %3281, i64 6
  %3291 = bitcast i8* %3290 to i16*
  store i16 %3289, i16* %3291, align 2
  %3292 = extractelement <4 x i16> %3287, i32 2
  %3293 = getelementptr inbounds i8, i8* %3281, i64 12
  %3294 = bitcast i8* %3293 to i16*
  store i16 %3292, i16* %3294, align 2
  %3295 = extractelement <4 x i16> %3287, i32 3
  %3296 = getelementptr inbounds i8, i8* %3281, i64 18
  %3297 = bitcast i8* %3296 to i16*
  store i16 %3295, i16* %3297, align 2
  br label %3542

3298:                                             ; preds = %135
  %3299 = getelementptr inbounds i8, i8* %3, i64 %81
  %3300 = load <4 x float>, <4 x float>* %7, align 16
  %3301 = fmul <4 x float> %3300, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3302 = fadd <4 x float> %3301, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3303 = fptosi <4 x float> %3302 to <4 x i32>
  %3304 = zext <4 x i32> %3303 to <4 x i64>
  %3305 = load <4 x float>, <4 x float>* %8, align 16
  %3306 = fmul <4 x float> %3305, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3307 = fadd <4 x float> %3306, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3308 = fptosi <4 x float> %3307 to <4 x i32>
  %3309 = zext <4 x i32> %3308 to <4 x i64>
  %3310 = shl nuw nsw <4 x i64> %3309, <i64 16, i64 16, i64 16, i64 16>
  %3311 = or <4 x i64> %3310, %3304
  %3312 = load <4 x float>, <4 x float>* %9, align 16
  %3313 = fmul <4 x float> %3312, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3314 = fadd <4 x float> %3313, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3315 = fptosi <4 x float> %3314 to <4 x i32>
  %3316 = zext <4 x i32> %3315 to <4 x i64>
  %3317 = shl nuw <4 x i64> %3316, <i64 32, i64 32, i64 32, i64 32>
  %3318 = or <4 x i64> %3311, %3317
  %3319 = load <4 x float>, <4 x float>* %10, align 16
  %3320 = fmul <4 x float> %3319, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3321 = fadd <4 x float> %3320, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3322 = fptosi <4 x float> %3321 to <4 x i32>
  %3323 = zext <4 x i32> %3322 to <4 x i64>
  %3324 = shl <4 x i64> %3323, <i64 48, i64 48, i64 48, i64 48>
  %3325 = or <4 x i64> %3318, %3324
  %3326 = shl <4 x i64> %3325, <i64 8, i64 8, i64 8, i64 8>
  %3327 = and <4 x i64> %3326, <i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696>
  %3328 = lshr <4 x i64> %3325, <i64 8, i64 8, i64 8, i64 8>
  %3329 = and <4 x i64> %3328, <i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695>
  %3330 = or <4 x i64> %3327, %3329
  %3331 = bitcast i8* %3299 to <4 x i64>*
  store <4 x i64> %3330, <4 x i64>* %3331, align 2
  br label %3542

3332:                                             ; preds = %135
  %3333 = getelementptr inbounds i8, i8* %3, i64 %85
  %3334 = bitcast i8* %3333 to i16*
  %3335 = load <4 x i32>, <4 x i32>* %19, align 16
  %3336 = and <4 x i32> %3335, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %3337 = icmp ugt <4 x i32> %3336, <i32 947912703, i32 947912703, i32 947912703, i32 947912703>
  %3338 = lshr <4 x i32> %3335, <i32 16, i32 16, i32 16, i32 16>
  %3339 = and <4 x i32> %3338, <i32 32768, i32 32768, i32 32768, i32 32768>
  %3340 = lshr <4 x i32> %3335, <i32 13, i32 13, i32 13, i32 13>
  %3341 = add nuw nsw <4 x i32> %3340, <i32 16384, i32 16384, i32 16384, i32 16384>
  %3342 = add nuw nsw <4 x i32> %3341, %3339
  %3343 = select <4 x i1> %3337, <4 x i32> %3342, <4 x i32> zeroinitializer
  %3344 = trunc <4 x i32> %3343 to <4 x i16>
  %3345 = load <4 x i32>, <4 x i32>* %18, align 16
  %3346 = and <4 x i32> %3345, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %3347 = icmp ugt <4 x i32> %3346, <i32 947912703, i32 947912703, i32 947912703, i32 947912703>
  %3348 = lshr <4 x i32> %3345, <i32 16, i32 16, i32 16, i32 16>
  %3349 = and <4 x i32> %3348, <i32 32768, i32 32768, i32 32768, i32 32768>
  %3350 = lshr <4 x i32> %3345, <i32 13, i32 13, i32 13, i32 13>
  %3351 = add nuw nsw <4 x i32> %3350, <i32 16384, i32 16384, i32 16384, i32 16384>
  %3352 = add nuw nsw <4 x i32> %3351, %3349
  %3353 = select <4 x i1> %3347, <4 x i32> %3352, <4 x i32> zeroinitializer
  %3354 = trunc <4 x i32> %3353 to <4 x i16>
  %3355 = load <4 x i32>, <4 x i32>* %17, align 16
  %3356 = and <4 x i32> %3355, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %3357 = icmp ugt <4 x i32> %3356, <i32 947912703, i32 947912703, i32 947912703, i32 947912703>
  %3358 = lshr <4 x i32> %3355, <i32 16, i32 16, i32 16, i32 16>
  %3359 = and <4 x i32> %3358, <i32 32768, i32 32768, i32 32768, i32 32768>
  %3360 = lshr <4 x i32> %3355, <i32 13, i32 13, i32 13, i32 13>
  %3361 = add nuw nsw <4 x i32> %3360, <i32 16384, i32 16384, i32 16384, i32 16384>
  %3362 = add nuw nsw <4 x i32> %3361, %3359
  %3363 = select <4 x i1> %3357, <4 x i32> %3362, <4 x i32> zeroinitializer
  %3364 = trunc <4 x i32> %3363 to <4 x i16>
  %3365 = extractelement <4 x i16> %3344, i32 0
  store i16 %3365, i16* %3334, align 2
  %3366 = extractelement <4 x i16> %3344, i32 1
  %3367 = getelementptr inbounds i8, i8* %3333, i64 6
  %3368 = bitcast i8* %3367 to i16*
  store i16 %3366, i16* %3368, align 2
  %3369 = extractelement <4 x i16> %3344, i32 2
  %3370 = getelementptr inbounds i8, i8* %3333, i64 12
  %3371 = bitcast i8* %3370 to i16*
  store i16 %3369, i16* %3371, align 2
  %3372 = extractelement <4 x i16> %3344, i32 3
  %3373 = getelementptr inbounds i8, i8* %3333, i64 18
  %3374 = bitcast i8* %3373 to i16*
  store i16 %3372, i16* %3374, align 2
  %3375 = getelementptr inbounds i8, i8* %3333, i64 2
  %3376 = bitcast i8* %3375 to i16*
  %3377 = extractelement <4 x i16> %3354, i32 0
  store i16 %3377, i16* %3376, align 2
  %3378 = extractelement <4 x i16> %3354, i32 1
  %3379 = getelementptr inbounds i8, i8* %3375, i64 6
  %3380 = bitcast i8* %3379 to i16*
  store i16 %3378, i16* %3380, align 2
  %3381 = extractelement <4 x i16> %3354, i32 2
  %3382 = getelementptr inbounds i8, i8* %3375, i64 12
  %3383 = bitcast i8* %3382 to i16*
  store i16 %3381, i16* %3383, align 2
  %3384 = extractelement <4 x i16> %3354, i32 3
  %3385 = getelementptr inbounds i8, i8* %3375, i64 18
  %3386 = bitcast i8* %3385 to i16*
  store i16 %3384, i16* %3386, align 2
  %3387 = getelementptr inbounds i8, i8* %3333, i64 4
  %3388 = bitcast i8* %3387 to i16*
  %3389 = extractelement <4 x i16> %3364, i32 0
  store i16 %3389, i16* %3388, align 2
  %3390 = extractelement <4 x i16> %3364, i32 1
  %3391 = getelementptr inbounds i8, i8* %3387, i64 6
  %3392 = bitcast i8* %3391 to i16*
  store i16 %3390, i16* %3392, align 2
  %3393 = extractelement <4 x i16> %3364, i32 2
  %3394 = getelementptr inbounds i8, i8* %3387, i64 12
  %3395 = bitcast i8* %3394 to i16*
  store i16 %3393, i16* %3395, align 2
  %3396 = extractelement <4 x i16> %3364, i32 3
  %3397 = getelementptr inbounds i8, i8* %3387, i64 18
  %3398 = bitcast i8* %3397 to i16*
  store i16 %3396, i16* %3398, align 2
  br label %3542

3399:                                             ; preds = %135
  %3400 = getelementptr inbounds i8, i8* %3, i64 %81
  %3401 = load <4 x i32>, <4 x i32>* %19, align 16
  %3402 = and <4 x i32> %3401, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %3403 = icmp ugt <4 x i32> %3402, <i32 947912703, i32 947912703, i32 947912703, i32 947912703>
  %3404 = lshr <4 x i32> %3401, <i32 16, i32 16, i32 16, i32 16>
  %3405 = and <4 x i32> %3404, <i32 32768, i32 32768, i32 32768, i32 32768>
  %3406 = lshr <4 x i32> %3401, <i32 13, i32 13, i32 13, i32 13>
  %3407 = add nuw nsw <4 x i32> %3406, <i32 16384, i32 16384, i32 16384, i32 16384>
  %3408 = add nuw nsw <4 x i32> %3407, %3405
  %3409 = load <4 x i32>, <4 x i32>* %18, align 16
  %3410 = and <4 x i32> %3409, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %3411 = icmp ugt <4 x i32> %3410, <i32 947912703, i32 947912703, i32 947912703, i32 947912703>
  %3412 = lshr <4 x i32> %3409, <i32 16, i32 16, i32 16, i32 16>
  %3413 = and <4 x i32> %3412, <i32 32768, i32 32768, i32 32768, i32 32768>
  %3414 = lshr <4 x i32> %3409, <i32 13, i32 13, i32 13, i32 13>
  %3415 = add nuw nsw <4 x i32> %3414, <i32 16384, i32 16384, i32 16384, i32 16384>
  %3416 = add nuw nsw <4 x i32> %3415, %3413
  %3417 = load <4 x i32>, <4 x i32>* %17, align 16
  %3418 = and <4 x i32> %3417, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %3419 = icmp ugt <4 x i32> %3418, <i32 947912703, i32 947912703, i32 947912703, i32 947912703>
  %3420 = lshr <4 x i32> %3417, <i32 16, i32 16, i32 16, i32 16>
  %3421 = and <4 x i32> %3420, <i32 32768, i32 32768, i32 32768, i32 32768>
  %3422 = lshr <4 x i32> %3417, <i32 13, i32 13, i32 13, i32 13>
  %3423 = add nuw nsw <4 x i32> %3422, <i32 16384, i32 16384, i32 16384, i32 16384>
  %3424 = add nuw nsw <4 x i32> %3423, %3421
  %3425 = load <4 x i32>, <4 x i32>* %16, align 16
  %3426 = and <4 x i32> %3425, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %3427 = icmp ugt <4 x i32> %3426, <i32 947912703, i32 947912703, i32 947912703, i32 947912703>
  %3428 = lshr <4 x i32> %3425, <i32 16, i32 16, i32 16, i32 16>
  %3429 = and <4 x i32> %3428, <i32 32768, i32 32768, i32 32768, i32 32768>
  %3430 = lshr <4 x i32> %3425, <i32 13, i32 13, i32 13, i32 13>
  %3431 = add nuw nsw <4 x i32> %3430, <i32 16384, i32 16384, i32 16384, i32 16384>
  %3432 = add nuw nsw <4 x i32> %3431, %3429
  %3433 = and <4 x i32> %3408, <i32 65535, i32 65535, i32 65535, i32 65535>
  %3434 = select <4 x i1> %3403, <4 x i32> %3433, <4 x i32> zeroinitializer
  %3435 = shl <4 x i32> %3416, <i32 16, i32 16, i32 16, i32 16>
  %3436 = select <4 x i1> %3411, <4 x i32> %3435, <4 x i32> zeroinitializer
  %3437 = or <4 x i32> %3436, %3434
  %3438 = zext <4 x i32> %3437 to <4 x i64>
  %3439 = and <4 x i32> %3424, <i32 65535, i32 65535, i32 65535, i32 65535>
  %3440 = select <4 x i1> %3419, <4 x i32> %3439, <4 x i32> zeroinitializer
  %3441 = zext <4 x i32> %3440 to <4 x i64>
  %3442 = shl nuw nsw <4 x i64> %3441, <i64 32, i64 32, i64 32, i64 32>
  %3443 = or <4 x i64> %3442, %3438
  %3444 = select <4 x i1> %3427, <4 x i32> %3432, <4 x i32> zeroinitializer
  %3445 = zext <4 x i32> %3444 to <4 x i64>
  %3446 = shl <4 x i64> %3445, <i64 48, i64 48, i64 48, i64 48>
  %3447 = or <4 x i64> %3443, %3446
  %3448 = bitcast i8* %3400 to <4 x i64>*
  store <4 x i64> %3447, <4 x i64>* %3448, align 2
  br label %3542

3449:                                             ; preds = %135
  %3450 = getelementptr inbounds i8, i8* %3, i64 %55
  %3451 = bitcast i8* %3450 to float*
  %3452 = load <4 x float>, <4 x float>* %7, align 16
  %3453 = extractelement <4 x float> %3452, i32 0
  store float %3453, float* %3451, align 4
  %3454 = extractelement <4 x float> %3452, i32 1
  %3455 = getelementptr inbounds i8, i8* %3450, i64 12
  %3456 = bitcast i8* %3455 to float*
  store float %3454, float* %3456, align 4
  %3457 = extractelement <4 x float> %3452, i32 2
  %3458 = getelementptr inbounds i8, i8* %3450, i64 24
  %3459 = bitcast i8* %3458 to float*
  store float %3457, float* %3459, align 4
  %3460 = extractelement <4 x float> %3452, i32 3
  %3461 = getelementptr inbounds i8, i8* %3450, i64 36
  %3462 = bitcast i8* %3461 to float*
  store float %3460, float* %3462, align 4
  %3463 = getelementptr inbounds i8, i8* %3450, i64 4
  %3464 = bitcast i8* %3463 to float*
  %3465 = load <4 x float>, <4 x float>* %8, align 16
  %3466 = extractelement <4 x float> %3465, i32 0
  store float %3466, float* %3464, align 4
  %3467 = extractelement <4 x float> %3465, i32 1
  %3468 = getelementptr inbounds i8, i8* %3463, i64 12
  %3469 = bitcast i8* %3468 to float*
  store float %3467, float* %3469, align 4
  %3470 = extractelement <4 x float> %3465, i32 2
  %3471 = getelementptr inbounds i8, i8* %3463, i64 24
  %3472 = bitcast i8* %3471 to float*
  store float %3470, float* %3472, align 4
  %3473 = extractelement <4 x float> %3465, i32 3
  %3474 = getelementptr inbounds i8, i8* %3463, i64 36
  %3475 = bitcast i8* %3474 to float*
  store float %3473, float* %3475, align 4
  %3476 = getelementptr inbounds i8, i8* %3450, i64 8
  %3477 = bitcast i8* %3476 to float*
  %3478 = load <4 x float>, <4 x float>* %9, align 16
  %3479 = extractelement <4 x float> %3478, i32 0
  store float %3479, float* %3477, align 4
  %3480 = extractelement <4 x float> %3478, i32 1
  %3481 = getelementptr inbounds i8, i8* %3476, i64 12
  %3482 = bitcast i8* %3481 to float*
  store float %3480, float* %3482, align 4
  %3483 = extractelement <4 x float> %3478, i32 2
  %3484 = getelementptr inbounds i8, i8* %3476, i64 24
  %3485 = bitcast i8* %3484 to float*
  store float %3483, float* %3485, align 4
  %3486 = extractelement <4 x float> %3478, i32 3
  %3487 = getelementptr inbounds i8, i8* %3476, i64 36
  %3488 = bitcast i8* %3487 to float*
  store float %3486, float* %3488, align 4
  br label %3542

3489:                                             ; preds = %135
  %3490 = getelementptr inbounds i8, i8* %3, i64 %21
  %3491 = bitcast i8* %3490 to float*
  %3492 = load <4 x float>, <4 x float>* %7, align 16
  %3493 = extractelement <4 x float> %3492, i32 0
  store float %3493, float* %3491, align 4
  %3494 = extractelement <4 x float> %3492, i32 1
  %3495 = getelementptr inbounds i8, i8* %3490, i64 16
  %3496 = bitcast i8* %3495 to float*
  store float %3494, float* %3496, align 4
  %3497 = extractelement <4 x float> %3492, i32 2
  %3498 = getelementptr inbounds i8, i8* %3490, i64 32
  %3499 = bitcast i8* %3498 to float*
  store float %3497, float* %3499, align 4
  %3500 = extractelement <4 x float> %3492, i32 3
  %3501 = getelementptr inbounds i8, i8* %3490, i64 48
  %3502 = bitcast i8* %3501 to float*
  store float %3500, float* %3502, align 4
  %3503 = getelementptr inbounds i8, i8* %3490, i64 4
  %3504 = bitcast i8* %3503 to float*
  %3505 = load <4 x float>, <4 x float>* %8, align 16
  %3506 = extractelement <4 x float> %3505, i32 0
  store float %3506, float* %3504, align 4
  %3507 = extractelement <4 x float> %3505, i32 1
  %3508 = getelementptr inbounds i8, i8* %3503, i64 16
  %3509 = bitcast i8* %3508 to float*
  store float %3507, float* %3509, align 4
  %3510 = extractelement <4 x float> %3505, i32 2
  %3511 = getelementptr inbounds i8, i8* %3503, i64 32
  %3512 = bitcast i8* %3511 to float*
  store float %3510, float* %3512, align 4
  %3513 = extractelement <4 x float> %3505, i32 3
  %3514 = getelementptr inbounds i8, i8* %3503, i64 48
  %3515 = bitcast i8* %3514 to float*
  store float %3513, float* %3515, align 4
  %3516 = getelementptr inbounds i8, i8* %3490, i64 8
  %3517 = bitcast i8* %3516 to float*
  %3518 = load <4 x float>, <4 x float>* %9, align 16
  %3519 = extractelement <4 x float> %3518, i32 0
  store float %3519, float* %3517, align 4
  %3520 = extractelement <4 x float> %3518, i32 1
  %3521 = getelementptr inbounds i8, i8* %3516, i64 16
  %3522 = bitcast i8* %3521 to float*
  store float %3520, float* %3522, align 4
  %3523 = extractelement <4 x float> %3518, i32 2
  %3524 = getelementptr inbounds i8, i8* %3516, i64 32
  %3525 = bitcast i8* %3524 to float*
  store float %3523, float* %3525, align 4
  %3526 = extractelement <4 x float> %3518, i32 3
  %3527 = getelementptr inbounds i8, i8* %3516, i64 48
  %3528 = bitcast i8* %3527 to float*
  store float %3526, float* %3528, align 4
  %3529 = getelementptr inbounds i8, i8* %3490, i64 12
  %3530 = bitcast i8* %3529 to float*
  %3531 = load <4 x float>, <4 x float>* %10, align 16
  %3532 = extractelement <4 x float> %3531, i32 0
  store float %3532, float* %3530, align 4
  %3533 = extractelement <4 x float> %3531, i32 1
  %3534 = getelementptr inbounds i8, i8* %3529, i64 16
  %3535 = bitcast i8* %3534 to float*
  store float %3533, float* %3535, align 4
  %3536 = extractelement <4 x float> %3531, i32 2
  %3537 = getelementptr inbounds i8, i8* %3529, i64 32
  %3538 = bitcast i8* %3537 to float*
  store float %3536, float* %3538, align 4
  %3539 = extractelement <4 x float> %3531, i32 3
  %3540 = getelementptr inbounds i8, i8* %3529, i64 48
  %3541 = bitcast i8* %3540 to float*
  store float %3539, float* %3541, align 4
  br label %3542

3542:                                             ; preds = %3489, %3449, %3399, %3332, %3298, %3234, %3205, %3156, %3131, %3106, %3066, %3046, %3020, %3012, %3004
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN8baselineL4clutEjjPKhS1_S1_PDv4_fS3_S3_S3_(i32, i32, i8* nocapture readonly, i8* readonly, i8* nocapture readonly, <4 x float>* nocapture, <4 x float>* nocapture, <4 x float>* nocapture, <4 x float>* nocapture) unnamed_addr #10 {
  %10 = alloca [8 x <4 x i32>], align 16
  %11 = alloca [8 x <4 x float>], align 16
  %12 = alloca [4 x <4 x float>], align 16
  %13 = bitcast [8 x <4 x i32>]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %13) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 128, i1 false)
  %14 = bitcast [8 x <4 x float>]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %14) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -1, i64 128, i1 false)
  %15 = bitcast [4 x <4 x float>]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %15) #17
  %16 = getelementptr inbounds [4 x <4 x float>], [4 x <4 x float>]* %12, i64 0, i64 0
  %17 = load <4 x float>, <4 x float>* %5, align 16
  store <4 x float> %17, <4 x float>* %16, align 16
  %18 = getelementptr inbounds [4 x <4 x float>], [4 x <4 x float>]* %12, i64 0, i64 1
  %19 = load <4 x float>, <4 x float>* %6, align 16
  store <4 x float> %19, <4 x float>* %18, align 16
  %20 = getelementptr inbounds [4 x <4 x float>], [4 x <4 x float>]* %12, i64 0, i64 2
  %21 = load <4 x float>, <4 x float>* %7, align 16
  store <4 x float> %21, <4 x float>* %20, align 16
  %22 = getelementptr inbounds [4 x <4 x float>], [4 x <4 x float>]* %12, i64 0, i64 3
  %23 = load <4 x float>, <4 x float>* %8, align 16
  store <4 x float> %23, <4 x float>* %22, align 16
  %24 = add i32 %0, 3
  %25 = icmp sgt i32 %0, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %9
  %27 = sext i32 %0 to i64
  br label %30

28:                                               ; preds = %30, %9
  store <4 x float> zeroinitializer, <4 x float>* %7, align 16
  store <4 x float> zeroinitializer, <4 x float>* %6, align 16
  store <4 x float> zeroinitializer, <4 x float>* %5, align 16
  %29 = icmp eq i32 %1, 4
  br i1 %29, label %64, label %65

30:                                               ; preds = %26, %30
  %31 = phi i64 [ %27, %26 ], [ %33, %30 ]
  %32 = phi i32 [ 1, %26 ], [ %57, %30 ]
  %33 = add nsw i64 %31, -1
  %34 = getelementptr inbounds [4 x <4 x float>], [4 x <4 x float>]* %12, i64 0, i64 %33
  %35 = load <4 x float>, <4 x float>* %34, align 16
  %36 = getelementptr inbounds i8, i8* %2, i64 %33
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = add nsw i32 %38, -1
  %40 = sitofp i32 %39 to float
  %41 = insertelement <4 x float> undef, float %40, i32 0
  %42 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> zeroinitializer
  %43 = fmul <4 x float> %35, %42
  %44 = fptosi <4 x float> %43 to <4 x i32>
  %45 = fadd <4 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %46 = bitcast <4 x float> %45 to <4 x i32>
  %47 = add <4 x i32> %46, <i32 -1, i32 -1, i32 -1, i32 -1>
  %48 = bitcast <4 x i32> %47 to <4 x float>
  %49 = fptosi <4 x float> %48 to <4 x i32>
  %50 = insertelement <4 x i32> undef, i32 %32, i32 0
  %51 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> zeroinitializer
  %52 = mul <4 x i32> %51, %44
  %53 = getelementptr inbounds [8 x <4 x i32>], [8 x <4 x i32>]* %10, i64 0, i64 %33
  store <4 x i32> %52, <4 x i32>* %53, align 16
  %54 = mul <4 x i32> %51, %49
  %55 = add nuw i64 %31, 3
  %56 = getelementptr inbounds [8 x <4 x i32>], [8 x <4 x i32>]* %10, i64 0, i64 %55
  store <4 x i32> %54, <4 x i32>* %56, align 16
  %57 = mul nsw i32 %32, %38
  %58 = sitofp <4 x i32> %44 to <4 x float>
  %59 = fsub <4 x float> %43, %58
  %60 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %59
  %61 = getelementptr inbounds [8 x <4 x float>], [8 x <4 x float>]* %11, i64 0, i64 %33
  store <4 x float> %60, <4 x float>* %61, align 16
  %62 = getelementptr inbounds [8 x <4 x float>], [8 x <4 x float>]* %11, i64 0, i64 %55
  store <4 x float> %59, <4 x float>* %62, align 16
  %63 = icmp sgt i64 %33, 0
  br i1 %63, label %30, label %28

64:                                               ; preds = %28
  store <4 x float> zeroinitializer, <4 x float>* %8, align 16
  br label %65

65:                                               ; preds = %64, %28
  %66 = shl i32 1, %0
  %67 = icmp eq i32 %0, 31
  br i1 %67, label %74, label %68

68:                                               ; preds = %65
  %69 = and i32 %24, 3
  %70 = icmp eq i32 %1, 3
  %71 = icmp ne i8* %3, null
  %72 = getelementptr inbounds i8, i8* %4, i64 -2
  %73 = getelementptr inbounds i8, i8* %3, i64 -1
  br label %75

74:                                               ; preds = %372, %65
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %15) #17
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %14) #17
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %13) #17
  ret void

75:                                               ; preds = %68, %372
  %76 = phi i32 [ 0, %68 ], [ %389, %372 ]
  %77 = shl i32 %76, 2
  %78 = and i32 %77, 4
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [8 x <4 x i32>], [8 x <4 x i32>]* %10, i64 0, i64 %79
  %81 = load <4 x i32>, <4 x i32>* %80, align 16
  %82 = getelementptr inbounds [8 x <4 x float>], [8 x <4 x float>]* %11, i64 0, i64 %79
  %83 = load <4 x float>, <4 x float>* %82, align 16
  switch i32 %69, label %120 [
    i32 3, label %84
    i32 2, label %95
    i32 1, label %107
  ]

84:                                               ; preds = %75
  %85 = lshr i32 %76, 1
  %86 = and i32 %85, 4
  %87 = or i32 %86, 3
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds [8 x <4 x i32>], [8 x <4 x i32>]* %10, i64 0, i64 %88
  %90 = load <4 x i32>, <4 x i32>* %89, align 16
  %91 = add <4 x i32> %90, %81
  %92 = getelementptr inbounds [8 x <4 x float>], [8 x <4 x float>]* %11, i64 0, i64 %88
  %93 = load <4 x float>, <4 x float>* %92, align 16
  %94 = fmul <4 x float> %83, %93
  br label %95

95:                                               ; preds = %75, %84
  %96 = phi <4 x i32> [ %81, %75 ], [ %91, %84 ]
  %97 = phi <4 x float> [ %83, %75 ], [ %94, %84 ]
  %98 = and i32 %76, 4
  %99 = or i32 %98, 2
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds [8 x <4 x i32>], [8 x <4 x i32>]* %10, i64 0, i64 %100
  %102 = load <4 x i32>, <4 x i32>* %101, align 16
  %103 = add <4 x i32> %102, %96
  %104 = getelementptr inbounds [8 x <4 x float>], [8 x <4 x float>]* %11, i64 0, i64 %100
  %105 = load <4 x float>, <4 x float>* %104, align 16
  %106 = fmul <4 x float> %97, %105
  br label %107

107:                                              ; preds = %75, %95
  %108 = phi <4 x i32> [ %81, %75 ], [ %103, %95 ]
  %109 = phi <4 x float> [ %83, %75 ], [ %106, %95 ]
  %110 = shl nuw i32 %76, 1
  %111 = and i32 %110, 4
  %112 = or i32 %111, 1
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds [8 x <4 x i32>], [8 x <4 x i32>]* %10, i64 0, i64 %113
  %115 = load <4 x i32>, <4 x i32>* %114, align 16
  %116 = add <4 x i32> %115, %108
  %117 = getelementptr inbounds [8 x <4 x float>], [8 x <4 x float>]* %11, i64 0, i64 %113
  %118 = load <4 x float>, <4 x float>* %117, align 16
  %119 = fmul <4 x float> %109, %118
  br label %120

120:                                              ; preds = %107, %75
  %121 = phi <4 x i32> [ %81, %75 ], [ %116, %107 ]
  %122 = phi <4 x float> [ %83, %75 ], [ %119, %107 ]
  br i1 %70, label %123, label %207

123:                                              ; preds = %120
  %124 = extractelement <4 x i32> %121, i32 0
  br i1 %71, label %125, label %164

125:                                              ; preds = %123
  %126 = mul nsw i32 %124, 3
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %73, i64 %127
  %129 = bitcast i8* %128 to i32*
  %130 = load i32, i32* %129, align 1
  %131 = insertelement <4 x i32> undef, i32 %130, i32 0
  %132 = extractelement <4 x i32> %121, i32 1
  %133 = mul nsw i32 %132, 3
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i8, i8* %73, i64 %134
  %136 = bitcast i8* %135 to i32*
  %137 = load i32, i32* %136, align 1
  %138 = insertelement <4 x i32> %131, i32 %137, i32 1
  %139 = extractelement <4 x i32> %121, i32 2
  %140 = mul nsw i32 %139, 3
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %73, i64 %141
  %143 = bitcast i8* %142 to i32*
  %144 = load i32, i32* %143, align 1
  %145 = insertelement <4 x i32> %138, i32 %144, i32 2
  %146 = extractelement <4 x i32> %121, i32 3
  %147 = mul nsw i32 %146, 3
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i8, i8* %73, i64 %148
  %150 = bitcast i8* %149 to i32*
  %151 = load i32, i32* %150, align 1
  %152 = insertelement <4 x i32> %145, i32 %151, i32 3
  %153 = lshr <4 x i32> %152, <i32 8, i32 8, i32 8, i32 8>
  %154 = and <4 x i32> %153, <i32 255, i32 255, i32 255, i32 255>
  %155 = uitofp <4 x i32> %154 to <4 x float>
  %156 = fmul <4 x float> %155, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %157 = lshr <4 x i32> %152, <i32 16, i32 16, i32 16, i32 16>
  %158 = and <4 x i32> %157, <i32 255, i32 255, i32 255, i32 255>
  %159 = uitofp <4 x i32> %158 to <4 x float>
  %160 = fmul <4 x float> %159, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %161 = lshr <4 x i32> %152, <i32 24, i32 24, i32 24, i32 24>
  %162 = uitofp <4 x i32> %161 to <4 x float>
  %163 = fmul <4 x float> %162, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %372

164:                                              ; preds = %123
  %165 = mul nsw i32 %124, 6
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i8, i8* %72, i64 %166
  %168 = bitcast i8* %167 to i64*
  %169 = load i64, i64* %168, align 1
  %170 = insertelement <4 x i64> undef, i64 %169, i32 0
  %171 = extractelement <4 x i32> %121, i32 1
  %172 = mul nsw i32 %171, 6
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i8, i8* %72, i64 %173
  %175 = bitcast i8* %174 to i64*
  %176 = load i64, i64* %175, align 1
  %177 = insertelement <4 x i64> %170, i64 %176, i32 1
  %178 = extractelement <4 x i32> %121, i32 2
  %179 = mul nsw i32 %178, 6
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds i8, i8* %72, i64 %180
  %182 = bitcast i8* %181 to i64*
  %183 = load i64, i64* %182, align 1
  %184 = insertelement <4 x i64> %177, i64 %183, i32 2
  %185 = extractelement <4 x i32> %121, i32 3
  %186 = mul nsw i32 %185, 6
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds i8, i8* %72, i64 %187
  %189 = bitcast i8* %188 to i64*
  %190 = load i64, i64* %189, align 1
  %191 = insertelement <4 x i64> %184, i64 %190, i32 3
  %192 = lshr <4 x i64> %191, <i64 8, i64 8, i64 8, i64 8>
  %193 = and <4 x i64> %192, <i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240>
  %194 = lshr <4 x i64> %191, <i64 24, i64 24, i64 24, i64 24>
  %195 = and <4 x i64> %194, <i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415>
  %196 = or <4 x i64> %193, %195
  %197 = and <4 x i64> %196, <i64 65535, i64 65535, i64 65535, i64 65535>
  %198 = uitofp <4 x i64> %197 to <4 x float>
  %199 = fmul <4 x float> %198, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %200 = lshr <4 x i64> %196, <i64 16, i64 16, i64 16, i64 16>
  %201 = and <4 x i64> %200, <i64 65535, i64 65535, i64 65535, i64 65535>
  %202 = uitofp <4 x i64> %201 to <4 x float>
  %203 = fmul <4 x float> %202, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %204 = lshr <4 x i64> %196, <i64 32, i64 32, i64 32, i64 32>
  %205 = uitofp <4 x i64> %204 to <4 x float>
  %206 = fmul <4 x float> %205, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %372

207:                                              ; preds = %120
  br i1 %71, label %208, label %248

208:                                              ; preds = %207
  %209 = shl nsw <4 x i32> %121, <i32 2, i32 2, i32 2, i32 2>
  %210 = extractelement <4 x i32> %209, i32 0
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds i8, i8* %3, i64 %211
  %213 = bitcast i8* %212 to i32*
  %214 = load i32, i32* %213, align 1
  %215 = insertelement <4 x i32> undef, i32 %214, i32 0
  %216 = extractelement <4 x i32> %209, i32 1
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %3, i64 %217
  %219 = bitcast i8* %218 to i32*
  %220 = load i32, i32* %219, align 1
  %221 = insertelement <4 x i32> %215, i32 %220, i32 1
  %222 = extractelement <4 x i32> %209, i32 2
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds i8, i8* %3, i64 %223
  %225 = bitcast i8* %224 to i32*
  %226 = load i32, i32* %225, align 1
  %227 = insertelement <4 x i32> %221, i32 %226, i32 2
  %228 = extractelement <4 x i32> %209, i32 3
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds i8, i8* %3, i64 %229
  %231 = bitcast i8* %230 to i32*
  %232 = load i32, i32* %231, align 1
  %233 = insertelement <4 x i32> %227, i32 %232, i32 3
  %234 = and <4 x i32> %233, <i32 255, i32 255, i32 255, i32 255>
  %235 = uitofp <4 x i32> %234 to <4 x float>
  %236 = fmul <4 x float> %235, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %237 = lshr <4 x i32> %233, <i32 8, i32 8, i32 8, i32 8>
  %238 = and <4 x i32> %237, <i32 255, i32 255, i32 255, i32 255>
  %239 = uitofp <4 x i32> %238 to <4 x float>
  %240 = fmul <4 x float> %239, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %241 = lshr <4 x i32> %233, <i32 16, i32 16, i32 16, i32 16>
  %242 = and <4 x i32> %241, <i32 255, i32 255, i32 255, i32 255>
  %243 = uitofp <4 x i32> %242 to <4 x float>
  %244 = fmul <4 x float> %243, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %245 = lshr <4 x i32> %233, <i32 24, i32 24, i32 24, i32 24>
  %246 = uitofp <4 x i32> %245 to <4 x float>
  %247 = fmul <4 x float> %246, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %372

248:                                              ; preds = %207
  %249 = shl <4 x i32> %121, <i32 3, i32 3, i32 3, i32 3>
  %250 = shl <4 x i32> %121, <i32 3, i32 3, i32 3, i32 3>
  %251 = extractelement <4 x i32> %250, i32 0
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds i8, i8* %4, i64 %252
  %254 = bitcast i8* %253 to i16*
  %255 = load i16, i16* %254, align 1
  %256 = insertelement <4 x i16> undef, i16 %255, i32 0
  %257 = extractelement <4 x i32> %250, i32 1
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds i8, i8* %4, i64 %258
  %260 = bitcast i8* %259 to i16*
  %261 = load i16, i16* %260, align 1
  %262 = insertelement <4 x i16> %256, i16 %261, i32 1
  %263 = extractelement <4 x i32> %250, i32 2
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds i8, i8* %4, i64 %264
  %266 = bitcast i8* %265 to i16*
  %267 = load i16, i16* %266, align 1
  %268 = insertelement <4 x i16> %262, i16 %267, i32 2
  %269 = extractelement <4 x i32> %250, i32 3
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds i8, i8* %4, i64 %270
  %272 = bitcast i8* %271 to i16*
  %273 = load i16, i16* %272, align 1
  %274 = insertelement <4 x i16> %268, i16 %273, i32 3
  %275 = lshr <4 x i16> %274, <i16 8, i16 8, i16 8, i16 8>
  %276 = shl <4 x i16> %274, <i16 8, i16 8, i16 8, i16 8>
  %277 = or <4 x i16> %275, %276
  %278 = uitofp <4 x i16> %277 to <4 x float>
  %279 = fmul <4 x float> %278, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %280 = shl <4 x i32> %121, <i32 3, i32 3, i32 3, i32 3>
  %281 = or <4 x i32> %280, <i32 2, i32 2, i32 2, i32 2>
  %282 = extractelement <4 x i32> %281, i32 0
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds i8, i8* %4, i64 %283
  %285 = bitcast i8* %284 to i16*
  %286 = load i16, i16* %285, align 1
  %287 = insertelement <4 x i16> undef, i16 %286, i32 0
  %288 = extractelement <4 x i32> %281, i32 1
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds i8, i8* %4, i64 %289
  %291 = bitcast i8* %290 to i16*
  %292 = load i16, i16* %291, align 1
  %293 = insertelement <4 x i16> %287, i16 %292, i32 1
  %294 = extractelement <4 x i32> %281, i32 2
  %295 = sext i32 %294 to i64
  %296 = getelementptr inbounds i8, i8* %4, i64 %295
  %297 = bitcast i8* %296 to i16*
  %298 = load i16, i16* %297, align 1
  %299 = insertelement <4 x i16> %293, i16 %298, i32 2
  %300 = extractelement <4 x i32> %281, i32 3
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds i8, i8* %4, i64 %301
  %303 = bitcast i8* %302 to i16*
  %304 = load i16, i16* %303, align 1
  %305 = insertelement <4 x i16> %299, i16 %304, i32 3
  %306 = lshr <4 x i16> %305, <i16 8, i16 8, i16 8, i16 8>
  %307 = shl <4 x i16> %305, <i16 8, i16 8, i16 8, i16 8>
  %308 = or <4 x i16> %306, %307
  %309 = uitofp <4 x i16> %308 to <4 x float>
  %310 = fmul <4 x float> %309, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %311 = shl <4 x i32> %121, <i32 3, i32 3, i32 3, i32 3>
  %312 = or <4 x i32> %311, <i32 4, i32 4, i32 4, i32 4>
  %313 = extractelement <4 x i32> %312, i32 0
  %314 = sext i32 %313 to i64
  %315 = getelementptr inbounds i8, i8* %4, i64 %314
  %316 = bitcast i8* %315 to i16*
  %317 = load i16, i16* %316, align 1
  %318 = insertelement <4 x i16> undef, i16 %317, i32 0
  %319 = extractelement <4 x i32> %312, i32 1
  %320 = sext i32 %319 to i64
  %321 = getelementptr inbounds i8, i8* %4, i64 %320
  %322 = bitcast i8* %321 to i16*
  %323 = load i16, i16* %322, align 1
  %324 = insertelement <4 x i16> %318, i16 %323, i32 1
  %325 = extractelement <4 x i32> %312, i32 2
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds i8, i8* %4, i64 %326
  %328 = bitcast i8* %327 to i16*
  %329 = load i16, i16* %328, align 1
  %330 = insertelement <4 x i16> %324, i16 %329, i32 2
  %331 = extractelement <4 x i32> %312, i32 3
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds i8, i8* %4, i64 %332
  %334 = bitcast i8* %333 to i16*
  %335 = load i16, i16* %334, align 1
  %336 = insertelement <4 x i16> %330, i16 %335, i32 3
  %337 = lshr <4 x i16> %336, <i16 8, i16 8, i16 8, i16 8>
  %338 = shl <4 x i16> %336, <i16 8, i16 8, i16 8, i16 8>
  %339 = or <4 x i16> %337, %338
  %340 = uitofp <4 x i16> %339 to <4 x float>
  %341 = fmul <4 x float> %340, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %342 = or <4 x i32> %249, <i32 6, i32 6, i32 6, i32 6>
  %343 = extractelement <4 x i32> %342, i32 0
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds i8, i8* %4, i64 %344
  %346 = bitcast i8* %345 to i16*
  %347 = load i16, i16* %346, align 1
  %348 = insertelement <4 x i16> undef, i16 %347, i32 0
  %349 = extractelement <4 x i32> %342, i32 1
  %350 = sext i32 %349 to i64
  %351 = getelementptr inbounds i8, i8* %4, i64 %350
  %352 = bitcast i8* %351 to i16*
  %353 = load i16, i16* %352, align 1
  %354 = insertelement <4 x i16> %348, i16 %353, i32 1
  %355 = extractelement <4 x i32> %342, i32 2
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds i8, i8* %4, i64 %356
  %358 = bitcast i8* %357 to i16*
  %359 = load i16, i16* %358, align 1
  %360 = insertelement <4 x i16> %354, i16 %359, i32 2
  %361 = extractelement <4 x i32> %342, i32 3
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds i8, i8* %4, i64 %362
  %364 = bitcast i8* %363 to i16*
  %365 = load i16, i16* %364, align 1
  %366 = insertelement <4 x i16> %360, i16 %365, i32 3
  %367 = lshr <4 x i16> %366, <i16 8, i16 8, i16 8, i16 8>
  %368 = shl <4 x i16> %366, <i16 8, i16 8, i16 8, i16 8>
  %369 = or <4 x i16> %367, %368
  %370 = uitofp <4 x i16> %369 to <4 x float>
  %371 = fmul <4 x float> %370, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %372

372:                                              ; preds = %208, %248, %125, %164
  %373 = phi <4 x float> [ %156, %125 ], [ %199, %164 ], [ %236, %208 ], [ %279, %248 ]
  %374 = phi <4 x float> [ %160, %125 ], [ %203, %164 ], [ %240, %208 ], [ %310, %248 ]
  %375 = phi <4 x float> [ %163, %125 ], [ %206, %164 ], [ %244, %208 ], [ %341, %248 ]
  %376 = phi <4 x float> [ zeroinitializer, %125 ], [ zeroinitializer, %164 ], [ %247, %208 ], [ %371, %248 ]
  %377 = fmul <4 x float> %122, %373
  %378 = load <4 x float>, <4 x float>* %5, align 16
  %379 = fadd <4 x float> %377, %378
  store <4 x float> %379, <4 x float>* %5, align 16
  %380 = fmul <4 x float> %122, %374
  %381 = load <4 x float>, <4 x float>* %6, align 16
  %382 = fadd <4 x float> %380, %381
  store <4 x float> %382, <4 x float>* %6, align 16
  %383 = fmul <4 x float> %122, %375
  %384 = load <4 x float>, <4 x float>* %7, align 16
  %385 = fadd <4 x float> %383, %384
  store <4 x float> %385, <4 x float>* %7, align 16
  %386 = fmul <4 x float> %122, %376
  %387 = load <4 x float>, <4 x float>* %8, align 16
  %388 = fadd <4 x float> %386, %387
  store <4 x float> %388, <4 x float>* %8, align 16
  %389 = add nuw nsw i32 %76, 1
  %390 = icmp slt i32 %389, %66
  br i1 %390, label %75, label %74
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #11

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3hswL8exec_opsEPK2OpPPKvPKcPci(i32* nocapture readonly, i8** readonly, i8* nocapture readonly, i8* nocapture, i32) unnamed_addr #12 {
  %6 = alloca <8 x float>, align 32
  %7 = alloca <8 x float>, align 32
  %8 = alloca <8 x float>, align 32
  %9 = alloca <8 x float>, align 32
  %10 = alloca <8 x float>, align 32
  %11 = bitcast <8 x float>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #17
  store <8 x float> zeroinitializer, <8 x float>* %7, align 32
  %12 = bitcast <8 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #17
  store <8 x float> zeroinitializer, <8 x float>* %8, align 32
  %13 = bitcast <8 x float>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #17
  store <8 x float> zeroinitializer, <8 x float>* %9, align 32
  %14 = bitcast <8 x float>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #17
  store <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float>* %10, align 32
  %15 = bitcast <8 x float>* %6 to i8*
  %16 = bitcast <8 x float>* %10 to <8 x i32>*
  %17 = bitcast <8 x float>* %9 to <8 x i32>*
  %18 = bitcast <8 x float>* %8 to <8 x i32>*
  %19 = bitcast <8 x float>* %7 to <8 x i32>*
  %20 = shl nsw i32 %4, 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %2, i64 %21
  %23 = bitcast i8* %22 to float*
  %24 = getelementptr inbounds i8, i8* %22, i64 16
  %25 = bitcast i8* %24 to float*
  %26 = getelementptr inbounds i8, i8* %22, i64 32
  %27 = bitcast i8* %26 to float*
  %28 = getelementptr inbounds i8, i8* %22, i64 48
  %29 = bitcast i8* %28 to float*
  %30 = getelementptr inbounds i8, i8* %22, i64 64
  %31 = bitcast i8* %30 to float*
  %32 = getelementptr inbounds i8, i8* %22, i64 80
  %33 = bitcast i8* %32 to float*
  %34 = getelementptr inbounds i8, i8* %22, i64 96
  %35 = bitcast i8* %34 to float*
  %36 = getelementptr inbounds i8, i8* %22, i64 112
  %37 = bitcast i8* %36 to float*
  %38 = getelementptr inbounds i8, i8* %22, i64 4
  %39 = bitcast i8* %38 to float*
  %40 = getelementptr inbounds i8, i8* %38, i64 16
  %41 = bitcast i8* %40 to float*
  %42 = getelementptr inbounds i8, i8* %38, i64 32
  %43 = bitcast i8* %42 to float*
  %44 = getelementptr inbounds i8, i8* %38, i64 48
  %45 = bitcast i8* %44 to float*
  %46 = getelementptr inbounds i8, i8* %38, i64 64
  %47 = bitcast i8* %46 to float*
  %48 = getelementptr inbounds i8, i8* %38, i64 80
  %49 = bitcast i8* %48 to float*
  %50 = getelementptr inbounds i8, i8* %38, i64 96
  %51 = bitcast i8* %50 to float*
  %52 = getelementptr inbounds i8, i8* %38, i64 112
  %53 = bitcast i8* %52 to float*
  %54 = getelementptr inbounds i8, i8* %22, i64 8
  %55 = bitcast i8* %54 to float*
  %56 = getelementptr inbounds i8, i8* %54, i64 16
  %57 = bitcast i8* %56 to float*
  %58 = getelementptr inbounds i8, i8* %54, i64 32
  %59 = bitcast i8* %58 to float*
  %60 = getelementptr inbounds i8, i8* %54, i64 48
  %61 = bitcast i8* %60 to float*
  %62 = getelementptr inbounds i8, i8* %54, i64 64
  %63 = bitcast i8* %62 to float*
  %64 = getelementptr inbounds i8, i8* %54, i64 80
  %65 = bitcast i8* %64 to float*
  %66 = getelementptr inbounds i8, i8* %54, i64 96
  %67 = bitcast i8* %66 to float*
  %68 = getelementptr inbounds i8, i8* %54, i64 112
  %69 = bitcast i8* %68 to float*
  %70 = getelementptr inbounds i8, i8* %22, i64 12
  %71 = bitcast i8* %70 to float*
  %72 = getelementptr inbounds i8, i8* %70, i64 16
  %73 = bitcast i8* %72 to float*
  %74 = getelementptr inbounds i8, i8* %70, i64 32
  %75 = bitcast i8* %74 to float*
  %76 = getelementptr inbounds i8, i8* %70, i64 48
  %77 = bitcast i8* %76 to float*
  %78 = getelementptr inbounds i8, i8* %70, i64 64
  %79 = bitcast i8* %78 to float*
  %80 = getelementptr inbounds i8, i8* %70, i64 80
  %81 = bitcast i8* %80 to float*
  %82 = getelementptr inbounds i8, i8* %70, i64 96
  %83 = bitcast i8* %82 to float*
  %84 = getelementptr inbounds i8, i8* %70, i64 112
  %85 = bitcast i8* %84 to float*
  %86 = mul nsw i32 %4, 12
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %2, i64 %87
  %89 = bitcast i8* %88 to float*
  %90 = getelementptr inbounds i8, i8* %88, i64 12
  %91 = bitcast i8* %90 to float*
  %92 = getelementptr inbounds i8, i8* %88, i64 24
  %93 = bitcast i8* %92 to float*
  %94 = getelementptr inbounds i8, i8* %88, i64 36
  %95 = bitcast i8* %94 to float*
  %96 = getelementptr inbounds i8, i8* %88, i64 48
  %97 = bitcast i8* %96 to float*
  %98 = getelementptr inbounds i8, i8* %88, i64 60
  %99 = bitcast i8* %98 to float*
  %100 = getelementptr inbounds i8, i8* %88, i64 72
  %101 = bitcast i8* %100 to float*
  %102 = getelementptr inbounds i8, i8* %88, i64 84
  %103 = bitcast i8* %102 to float*
  %104 = getelementptr inbounds i8, i8* %88, i64 4
  %105 = bitcast i8* %104 to float*
  %106 = getelementptr inbounds i8, i8* %104, i64 12
  %107 = bitcast i8* %106 to float*
  %108 = getelementptr inbounds i8, i8* %104, i64 24
  %109 = bitcast i8* %108 to float*
  %110 = getelementptr inbounds i8, i8* %104, i64 36
  %111 = bitcast i8* %110 to float*
  %112 = getelementptr inbounds i8, i8* %104, i64 48
  %113 = bitcast i8* %112 to float*
  %114 = getelementptr inbounds i8, i8* %104, i64 60
  %115 = bitcast i8* %114 to float*
  %116 = getelementptr inbounds i8, i8* %104, i64 72
  %117 = bitcast i8* %116 to float*
  %118 = getelementptr inbounds i8, i8* %104, i64 84
  %119 = bitcast i8* %118 to float*
  %120 = getelementptr inbounds i8, i8* %88, i64 8
  %121 = bitcast i8* %120 to float*
  %122 = getelementptr inbounds i8, i8* %120, i64 12
  %123 = bitcast i8* %122 to float*
  %124 = getelementptr inbounds i8, i8* %120, i64 24
  %125 = bitcast i8* %124 to float*
  %126 = getelementptr inbounds i8, i8* %120, i64 36
  %127 = bitcast i8* %126 to float*
  %128 = getelementptr inbounds i8, i8* %120, i64 48
  %129 = bitcast i8* %128 to float*
  %130 = getelementptr inbounds i8, i8* %120, i64 60
  %131 = bitcast i8* %130 to float*
  %132 = getelementptr inbounds i8, i8* %120, i64 72
  %133 = bitcast i8* %132 to float*
  %134 = getelementptr inbounds i8, i8* %120, i64 84
  %135 = bitcast i8* %134 to float*
  %136 = shl nsw i32 %4, 3
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i8, i8* %2, i64 %137
  %139 = bitcast i8* %138 to <8 x i64>*
  %140 = mul nsw i32 %4, 6
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %2, i64 %141
  %143 = bitcast i8* %142 to i16*
  %144 = getelementptr inbounds i8, i8* %142, i64 6
  %145 = bitcast i8* %144 to i16*
  %146 = getelementptr inbounds i8, i8* %142, i64 12
  %147 = bitcast i8* %146 to i16*
  %148 = getelementptr inbounds i8, i8* %142, i64 18
  %149 = bitcast i8* %148 to i16*
  %150 = getelementptr inbounds i8, i8* %142, i64 24
  %151 = bitcast i8* %150 to i16*
  %152 = getelementptr inbounds i8, i8* %142, i64 30
  %153 = bitcast i8* %152 to i16*
  %154 = getelementptr inbounds i8, i8* %142, i64 36
  %155 = bitcast i8* %154 to i16*
  %156 = getelementptr inbounds i8, i8* %142, i64 42
  %157 = bitcast i8* %156 to i16*
  %158 = getelementptr inbounds i8, i8* %142, i64 2
  %159 = bitcast i8* %158 to i16*
  %160 = getelementptr inbounds i8, i8* %158, i64 6
  %161 = bitcast i8* %160 to i16*
  %162 = getelementptr inbounds i8, i8* %158, i64 12
  %163 = bitcast i8* %162 to i16*
  %164 = getelementptr inbounds i8, i8* %158, i64 18
  %165 = bitcast i8* %164 to i16*
  %166 = getelementptr inbounds i8, i8* %158, i64 24
  %167 = bitcast i8* %166 to i16*
  %168 = getelementptr inbounds i8, i8* %158, i64 30
  %169 = bitcast i8* %168 to i16*
  %170 = getelementptr inbounds i8, i8* %158, i64 36
  %171 = bitcast i8* %170 to i16*
  %172 = getelementptr inbounds i8, i8* %158, i64 42
  %173 = bitcast i8* %172 to i16*
  %174 = getelementptr inbounds i8, i8* %142, i64 4
  %175 = bitcast i8* %174 to i16*
  %176 = getelementptr inbounds i8, i8* %174, i64 6
  %177 = bitcast i8* %176 to i16*
  %178 = getelementptr inbounds i8, i8* %174, i64 12
  %179 = bitcast i8* %178 to i16*
  %180 = getelementptr inbounds i8, i8* %174, i64 18
  %181 = bitcast i8* %180 to i16*
  %182 = getelementptr inbounds i8, i8* %174, i64 24
  %183 = bitcast i8* %182 to i16*
  %184 = getelementptr inbounds i8, i8* %174, i64 30
  %185 = bitcast i8* %184 to i16*
  %186 = getelementptr inbounds i8, i8* %174, i64 36
  %187 = bitcast i8* %186 to i16*
  %188 = getelementptr inbounds i8, i8* %174, i64 42
  %189 = bitcast i8* %188 to i16*
  %190 = shl nsw i32 %4, 2
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds i8, i8* %2, i64 %191
  %193 = bitcast i8* %192 to <8 x i32>*
  %194 = sext i32 %4 to i64
  %195 = getelementptr inbounds i8, i8* %2, i64 %194
  %196 = bitcast i8* %195 to <8 x i8>*
  %197 = mul nsw i32 %4, 3
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds i8, i8* %2, i64 %198
  %200 = getelementptr inbounds i8, i8* %199, i64 3
  %201 = getelementptr inbounds i8, i8* %199, i64 6
  %202 = getelementptr inbounds i8, i8* %199, i64 9
  %203 = getelementptr inbounds i8, i8* %199, i64 12
  %204 = getelementptr inbounds i8, i8* %199, i64 15
  %205 = getelementptr inbounds i8, i8* %199, i64 18
  %206 = getelementptr inbounds i8, i8* %199, i64 21
  %207 = getelementptr inbounds i8, i8* %199, i64 1
  %208 = getelementptr inbounds i8, i8* %207, i64 3
  %209 = getelementptr inbounds i8, i8* %207, i64 6
  %210 = getelementptr inbounds i8, i8* %207, i64 9
  %211 = getelementptr inbounds i8, i8* %207, i64 12
  %212 = getelementptr inbounds i8, i8* %207, i64 15
  %213 = getelementptr inbounds i8, i8* %207, i64 18
  %214 = getelementptr inbounds i8, i8* %207, i64 21
  %215 = getelementptr inbounds i8, i8* %199, i64 2
  %216 = getelementptr inbounds i8, i8* %215, i64 3
  %217 = getelementptr inbounds i8, i8* %215, i64 6
  %218 = getelementptr inbounds i8, i8* %215, i64 9
  %219 = getelementptr inbounds i8, i8* %215, i64 12
  %220 = getelementptr inbounds i8, i8* %215, i64 15
  %221 = getelementptr inbounds i8, i8* %215, i64 18
  %222 = getelementptr inbounds i8, i8* %215, i64 21
  %223 = shl nsw i32 %4, 1
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds i8, i8* %2, i64 %224
  %226 = bitcast i8* %225 to <8 x i16>*
  br label %227

227:                                              ; preds = %3488, %5
  %228 = phi i8** [ %1, %5 ], [ %3489, %3488 ]
  %229 = phi i32* [ %0, %5 ], [ %230, %3488 ]
  %230 = getelementptr inbounds i32, i32* %229, i64 1
  %231 = load i32, i32* %229, align 4
  switch i32 %231, label %3488 [
    i32 0, label %232
    i32 1, label %236
    i32 3, label %240
    i32 4, label %256
    i32 5, label %267
    i32 6, label %346
    i32 2, label %362
    i32 7, label %437
    i32 8, label %453
    i32 9, label %532
    i32 10, label %548
    i32 11, label %642
    i32 12, label %663
    i32 13, label %715
    i32 14, label %728
    i32 15, label %777
    i32 16, label %842
    i32 17, label %845
    i32 18, label %866
    i32 19, label %875
    i32 20, label %876
    i32 21, label %884
    i32 22, label %895
    i32 23, label %953
    i32 24, label %1026
    i32 25, label %1061
    i32 26, label %1180
    i32 27, label %1255
    i32 28, label %1330
    i32 29, label %1405
    i32 30, label %1480
    i32 31, label %1578
    i32 32, label %1676
    i32 33, label %1774
    i32 34, label %1872
    i32 35, label %1958
    i32 36, label %2044
    i32 37, label %2130
    i32 38, label %2216
    i32 39, label %2301
    i32 40, label %2386
    i32 41, label %2471
    i32 42, label %2556
    i32 43, label %2785
    i32 44, label %3014
    i32 45, label %3243
    i32 46, label %3472
    i32 47, label %3491
    i32 48, label %3504
    i32 49, label %3512
    i32 50, label %3520
    i32 51, label %3546
    i32 52, label %3566
    i32 53, label %3630
    i32 54, label %3655
    i32 55, label %3680
    i32 56, label %3765
    i32 57, label %3794
    i32 58, label %3894
    i32 59, label %3928
    i32 60, label %4007
    i32 61, label %4028
    i32 62, label %4104
  ]

232:                                              ; preds = %227
  %233 = load <8 x i8>, <8 x i8>* %196, align 1
  %234 = uitofp <8 x i8> %233 to <8 x float>
  %235 = fmul <8 x float> %234, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <8 x float> %235, <8 x float>* %10, align 32
  br label %3488

236:                                              ; preds = %227
  %237 = load <8 x i8>, <8 x i8>* %196, align 1
  %238 = uitofp <8 x i8> %237 to <8 x float>
  %239 = fmul <8 x float> %238, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <8 x float> %239, <8 x float>* %9, align 32
  store <8 x float> %239, <8 x float>* %8, align 32
  store <8 x float> %239, <8 x float>* %7, align 32
  br label %3488

240:                                              ; preds = %227
  %241 = load <8 x i16>, <8 x i16>* %226, align 1
  %242 = lshr <8 x i16> %241, <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>
  %243 = uitofp <8 x i16> %242 to <8 x float>
  %244 = fmul <8 x float> %243, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  store <8 x float> %244, <8 x float>* %7, align 32
  %245 = lshr <8 x i16> %241, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %246 = and <8 x i16> %245, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %247 = uitofp <8 x i16> %246 to <8 x float>
  %248 = fmul <8 x float> %247, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  store <8 x float> %248, <8 x float>* %8, align 32
  %249 = lshr <8 x i16> %241, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %250 = and <8 x i16> %249, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %251 = uitofp <8 x i16> %250 to <8 x float>
  %252 = fmul <8 x float> %251, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  store <8 x float> %252, <8 x float>* %9, align 32
  %253 = and <8 x i16> %241, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %254 = uitofp <8 x i16> %253 to <8 x float>
  %255 = fmul <8 x float> %254, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  store <8 x float> %255, <8 x float>* %10, align 32
  br label %3488

256:                                              ; preds = %227
  %257 = load <8 x i16>, <8 x i16>* %226, align 1
  %258 = and <8 x i16> %257, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %259 = uitofp <8 x i16> %258 to <8 x float>
  %260 = fmul <8 x float> %259, <float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000>
  store <8 x float> %260, <8 x float>* %7, align 32
  %261 = and <8 x i16> %257, <i16 2016, i16 2016, i16 2016, i16 2016, i16 2016, i16 2016, i16 2016, i16 2016>
  %262 = uitofp <8 x i16> %261 to <8 x float>
  %263 = fmul <8 x float> %262, <float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000>
  store <8 x float> %263, <8 x float>* %8, align 32
  %264 = and <8 x i16> %257, <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>
  %265 = uitofp <8 x i16> %264 to <8 x float>
  %266 = fmul <8 x float> %265, <float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000>
  store <8 x float> %266, <8 x float>* %9, align 32
  br label %3488

267:                                              ; preds = %227
  %268 = load i8, i8* %199, align 1
  %269 = zext i8 %268 to i32
  %270 = insertelement <8 x i32> undef, i32 %269, i32 0
  %271 = load i8, i8* %200, align 1
  %272 = zext i8 %271 to i32
  %273 = insertelement <8 x i32> %270, i32 %272, i32 1
  %274 = load i8, i8* %201, align 1
  %275 = zext i8 %274 to i32
  %276 = insertelement <8 x i32> %273, i32 %275, i32 2
  %277 = load i8, i8* %202, align 1
  %278 = zext i8 %277 to i32
  %279 = insertelement <8 x i32> %276, i32 %278, i32 3
  %280 = load i8, i8* %203, align 1
  %281 = zext i8 %280 to i32
  %282 = insertelement <8 x i32> %279, i32 %281, i32 4
  %283 = load i8, i8* %204, align 1
  %284 = zext i8 %283 to i32
  %285 = insertelement <8 x i32> %282, i32 %284, i32 5
  %286 = load i8, i8* %205, align 1
  %287 = zext i8 %286 to i32
  %288 = insertelement <8 x i32> %285, i32 %287, i32 6
  %289 = load i8, i8* %206, align 1
  %290 = zext i8 %289 to i32
  %291 = insertelement <8 x i32> %288, i32 %290, i32 7
  %292 = uitofp <8 x i32> %291 to <8 x float>
  %293 = fmul <8 x float> %292, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <8 x float> %293, <8 x float>* %7, align 32
  %294 = load i8, i8* %207, align 1
  %295 = zext i8 %294 to i32
  %296 = insertelement <8 x i32> undef, i32 %295, i32 0
  %297 = load i8, i8* %208, align 1
  %298 = zext i8 %297 to i32
  %299 = insertelement <8 x i32> %296, i32 %298, i32 1
  %300 = load i8, i8* %209, align 1
  %301 = zext i8 %300 to i32
  %302 = insertelement <8 x i32> %299, i32 %301, i32 2
  %303 = load i8, i8* %210, align 1
  %304 = zext i8 %303 to i32
  %305 = insertelement <8 x i32> %302, i32 %304, i32 3
  %306 = load i8, i8* %211, align 1
  %307 = zext i8 %306 to i32
  %308 = insertelement <8 x i32> %305, i32 %307, i32 4
  %309 = load i8, i8* %212, align 1
  %310 = zext i8 %309 to i32
  %311 = insertelement <8 x i32> %308, i32 %310, i32 5
  %312 = load i8, i8* %213, align 1
  %313 = zext i8 %312 to i32
  %314 = insertelement <8 x i32> %311, i32 %313, i32 6
  %315 = load i8, i8* %214, align 1
  %316 = zext i8 %315 to i32
  %317 = insertelement <8 x i32> %314, i32 %316, i32 7
  %318 = uitofp <8 x i32> %317 to <8 x float>
  %319 = fmul <8 x float> %318, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <8 x float> %319, <8 x float>* %8, align 32
  %320 = load i8, i8* %215, align 1
  %321 = zext i8 %320 to i32
  %322 = insertelement <8 x i32> undef, i32 %321, i32 0
  %323 = load i8, i8* %216, align 1
  %324 = zext i8 %323 to i32
  %325 = insertelement <8 x i32> %322, i32 %324, i32 1
  %326 = load i8, i8* %217, align 1
  %327 = zext i8 %326 to i32
  %328 = insertelement <8 x i32> %325, i32 %327, i32 2
  %329 = load i8, i8* %218, align 1
  %330 = zext i8 %329 to i32
  %331 = insertelement <8 x i32> %328, i32 %330, i32 3
  %332 = load i8, i8* %219, align 1
  %333 = zext i8 %332 to i32
  %334 = insertelement <8 x i32> %331, i32 %333, i32 4
  %335 = load i8, i8* %220, align 1
  %336 = zext i8 %335 to i32
  %337 = insertelement <8 x i32> %334, i32 %336, i32 5
  %338 = load i8, i8* %221, align 1
  %339 = zext i8 %338 to i32
  %340 = insertelement <8 x i32> %337, i32 %339, i32 6
  %341 = load i8, i8* %222, align 1
  %342 = zext i8 %341 to i32
  %343 = insertelement <8 x i32> %340, i32 %342, i32 7
  %344 = uitofp <8 x i32> %343 to <8 x float>
  %345 = fmul <8 x float> %344, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <8 x float> %345, <8 x float>* %9, align 32
  br label %3488

346:                                              ; preds = %227
  %347 = load <8 x i32>, <8 x i32>* %193, align 1
  %348 = and <8 x i32> %347, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %349 = uitofp <8 x i32> %348 to <8 x float>
  %350 = fmul <8 x float> %349, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <8 x float> %350, <8 x float>* %7, align 32
  %351 = lshr <8 x i32> %347, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %352 = and <8 x i32> %351, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %353 = uitofp <8 x i32> %352 to <8 x float>
  %354 = fmul <8 x float> %353, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <8 x float> %354, <8 x float>* %8, align 32
  %355 = lshr <8 x i32> %347, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %356 = and <8 x i32> %355, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %357 = uitofp <8 x i32> %356 to <8 x float>
  %358 = fmul <8 x float> %357, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <8 x float> %358, <8 x float>* %9, align 32
  %359 = lshr <8 x i32> %347, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %360 = uitofp <8 x i32> %359 to <8 x float>
  %361 = fmul <8 x float> %360, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <8 x float> %361, <8 x float>* %10, align 32
  br label %3488

362:                                              ; preds = %227
  %363 = getelementptr inbounds i8*, i8** %228, i64 1
  %364 = load i8*, i8** %228, align 8
  %365 = load <8 x i8>, <8 x i8>* %196, align 1
  %366 = zext <8 x i8> %365 to <8 x i32>
  %367 = extractelement <8 x i32> %366, i32 0
  %368 = shl nuw nsw i32 %367, 2
  %369 = zext i32 %368 to i64
  %370 = getelementptr inbounds i8, i8* %364, i64 %369
  %371 = bitcast i8* %370 to i32*
  %372 = load i32, i32* %371, align 1
  %373 = insertelement <8 x i32> undef, i32 %372, i32 0
  %374 = extractelement <8 x i32> %366, i32 1
  %375 = shl nuw nsw i32 %374, 2
  %376 = zext i32 %375 to i64
  %377 = getelementptr inbounds i8, i8* %364, i64 %376
  %378 = bitcast i8* %377 to i32*
  %379 = load i32, i32* %378, align 1
  %380 = insertelement <8 x i32> %373, i32 %379, i32 1
  %381 = extractelement <8 x i32> %366, i32 2
  %382 = shl nuw nsw i32 %381, 2
  %383 = zext i32 %382 to i64
  %384 = getelementptr inbounds i8, i8* %364, i64 %383
  %385 = bitcast i8* %384 to i32*
  %386 = load i32, i32* %385, align 1
  %387 = insertelement <8 x i32> %380, i32 %386, i32 2
  %388 = extractelement <8 x i32> %366, i32 3
  %389 = shl nuw nsw i32 %388, 2
  %390 = zext i32 %389 to i64
  %391 = getelementptr inbounds i8, i8* %364, i64 %390
  %392 = bitcast i8* %391 to i32*
  %393 = load i32, i32* %392, align 1
  %394 = insertelement <8 x i32> %387, i32 %393, i32 3
  %395 = extractelement <8 x i32> %366, i32 4
  %396 = shl nuw nsw i32 %395, 2
  %397 = zext i32 %396 to i64
  %398 = getelementptr inbounds i8, i8* %364, i64 %397
  %399 = bitcast i8* %398 to i32*
  %400 = load i32, i32* %399, align 1
  %401 = insertelement <8 x i32> %394, i32 %400, i32 4
  %402 = extractelement <8 x i32> %366, i32 5
  %403 = shl nuw nsw i32 %402, 2
  %404 = zext i32 %403 to i64
  %405 = getelementptr inbounds i8, i8* %364, i64 %404
  %406 = bitcast i8* %405 to i32*
  %407 = load i32, i32* %406, align 1
  %408 = insertelement <8 x i32> %401, i32 %407, i32 5
  %409 = extractelement <8 x i32> %366, i32 6
  %410 = shl nuw nsw i32 %409, 2
  %411 = zext i32 %410 to i64
  %412 = getelementptr inbounds i8, i8* %364, i64 %411
  %413 = bitcast i8* %412 to i32*
  %414 = load i32, i32* %413, align 1
  %415 = insertelement <8 x i32> %408, i32 %414, i32 6
  %416 = extractelement <8 x i32> %366, i32 7
  %417 = shl nuw nsw i32 %416, 2
  %418 = zext i32 %417 to i64
  %419 = getelementptr inbounds i8, i8* %364, i64 %418
  %420 = bitcast i8* %419 to i32*
  %421 = load i32, i32* %420, align 1
  %422 = insertelement <8 x i32> %415, i32 %421, i32 7
  %423 = and <8 x i32> %422, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %424 = uitofp <8 x i32> %423 to <8 x float>
  %425 = fmul <8 x float> %424, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <8 x float> %425, <8 x float>* %7, align 32
  %426 = lshr <8 x i32> %422, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %427 = and <8 x i32> %426, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %428 = uitofp <8 x i32> %427 to <8 x float>
  %429 = fmul <8 x float> %428, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <8 x float> %429, <8 x float>* %8, align 32
  %430 = lshr <8 x i32> %422, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %431 = and <8 x i32> %430, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %432 = uitofp <8 x i32> %431 to <8 x float>
  %433 = fmul <8 x float> %432, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <8 x float> %433, <8 x float>* %9, align 32
  %434 = lshr <8 x i32> %422, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %435 = uitofp <8 x i32> %434 to <8 x float>
  %436 = fmul <8 x float> %435, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <8 x float> %436, <8 x float>* %10, align 32
  br label %3488

437:                                              ; preds = %227
  %438 = load <8 x i32>, <8 x i32>* %193, align 1
  %439 = and <8 x i32> %438, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %440 = uitofp <8 x i32> %439 to <8 x float>
  %441 = fmul <8 x float> %440, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  store <8 x float> %441, <8 x float>* %7, align 32
  %442 = lshr <8 x i32> %438, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %443 = and <8 x i32> %442, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %444 = uitofp <8 x i32> %443 to <8 x float>
  %445 = fmul <8 x float> %444, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  store <8 x float> %445, <8 x float>* %8, align 32
  %446 = lshr <8 x i32> %438, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %447 = and <8 x i32> %446, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %448 = uitofp <8 x i32> %447 to <8 x float>
  %449 = fmul <8 x float> %448, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  store <8 x float> %449, <8 x float>* %9, align 32
  %450 = lshr <8 x i32> %438, <i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30>
  %451 = uitofp <8 x i32> %450 to <8 x float>
  %452 = fmul <8 x float> %451, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  store <8 x float> %452, <8 x float>* %10, align 32
  br label %3488

453:                                              ; preds = %227
  %454 = load i16, i16* %143, align 2
  %455 = zext i16 %454 to i32
  %456 = insertelement <8 x i32> undef, i32 %455, i32 0
  %457 = load i16, i16* %145, align 2
  %458 = zext i16 %457 to i32
  %459 = insertelement <8 x i32> %456, i32 %458, i32 1
  %460 = load i16, i16* %147, align 2
  %461 = zext i16 %460 to i32
  %462 = insertelement <8 x i32> %459, i32 %461, i32 2
  %463 = load i16, i16* %149, align 2
  %464 = zext i16 %463 to i32
  %465 = insertelement <8 x i32> %462, i32 %464, i32 3
  %466 = load i16, i16* %151, align 2
  %467 = zext i16 %466 to i32
  %468 = insertelement <8 x i32> %465, i32 %467, i32 4
  %469 = load i16, i16* %153, align 2
  %470 = zext i16 %469 to i32
  %471 = insertelement <8 x i32> %468, i32 %470, i32 5
  %472 = load i16, i16* %155, align 2
  %473 = zext i16 %472 to i32
  %474 = insertelement <8 x i32> %471, i32 %473, i32 6
  %475 = load i16, i16* %157, align 2
  %476 = zext i16 %475 to i32
  %477 = insertelement <8 x i32> %474, i32 %476, i32 7
  %478 = uitofp <8 x i32> %477 to <8 x float>
  %479 = fmul <8 x float> %478, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <8 x float> %479, <8 x float>* %7, align 32
  %480 = load i16, i16* %159, align 2
  %481 = zext i16 %480 to i32
  %482 = insertelement <8 x i32> undef, i32 %481, i32 0
  %483 = load i16, i16* %161, align 2
  %484 = zext i16 %483 to i32
  %485 = insertelement <8 x i32> %482, i32 %484, i32 1
  %486 = load i16, i16* %163, align 2
  %487 = zext i16 %486 to i32
  %488 = insertelement <8 x i32> %485, i32 %487, i32 2
  %489 = load i16, i16* %165, align 2
  %490 = zext i16 %489 to i32
  %491 = insertelement <8 x i32> %488, i32 %490, i32 3
  %492 = load i16, i16* %167, align 2
  %493 = zext i16 %492 to i32
  %494 = insertelement <8 x i32> %491, i32 %493, i32 4
  %495 = load i16, i16* %169, align 2
  %496 = zext i16 %495 to i32
  %497 = insertelement <8 x i32> %494, i32 %496, i32 5
  %498 = load i16, i16* %171, align 2
  %499 = zext i16 %498 to i32
  %500 = insertelement <8 x i32> %497, i32 %499, i32 6
  %501 = load i16, i16* %173, align 2
  %502 = zext i16 %501 to i32
  %503 = insertelement <8 x i32> %500, i32 %502, i32 7
  %504 = uitofp <8 x i32> %503 to <8 x float>
  %505 = fmul <8 x float> %504, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <8 x float> %505, <8 x float>* %8, align 32
  %506 = load i16, i16* %175, align 2
  %507 = zext i16 %506 to i32
  %508 = insertelement <8 x i32> undef, i32 %507, i32 0
  %509 = load i16, i16* %177, align 2
  %510 = zext i16 %509 to i32
  %511 = insertelement <8 x i32> %508, i32 %510, i32 1
  %512 = load i16, i16* %179, align 2
  %513 = zext i16 %512 to i32
  %514 = insertelement <8 x i32> %511, i32 %513, i32 2
  %515 = load i16, i16* %181, align 2
  %516 = zext i16 %515 to i32
  %517 = insertelement <8 x i32> %514, i32 %516, i32 3
  %518 = load i16, i16* %183, align 2
  %519 = zext i16 %518 to i32
  %520 = insertelement <8 x i32> %517, i32 %519, i32 4
  %521 = load i16, i16* %185, align 2
  %522 = zext i16 %521 to i32
  %523 = insertelement <8 x i32> %520, i32 %522, i32 5
  %524 = load i16, i16* %187, align 2
  %525 = zext i16 %524 to i32
  %526 = insertelement <8 x i32> %523, i32 %525, i32 6
  %527 = load i16, i16* %189, align 2
  %528 = zext i16 %527 to i32
  %529 = insertelement <8 x i32> %526, i32 %528, i32 7
  %530 = uitofp <8 x i32> %529 to <8 x float>
  %531 = fmul <8 x float> %530, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <8 x float> %531, <8 x float>* %9, align 32
  br label %3488

532:                                              ; preds = %227
  %533 = load <8 x i64>, <8 x i64>* %139, align 2
  %534 = and <8 x i64> %533, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %535 = uitofp <8 x i64> %534 to <8 x float>
  %536 = fmul <8 x float> %535, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <8 x float> %536, <8 x float>* %7, align 32
  %537 = lshr <8 x i64> %533, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %538 = and <8 x i64> %537, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %539 = uitofp <8 x i64> %538 to <8 x float>
  %540 = fmul <8 x float> %539, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <8 x float> %540, <8 x float>* %8, align 32
  %541 = lshr <8 x i64> %533, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %542 = and <8 x i64> %541, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %543 = uitofp <8 x i64> %542 to <8 x float>
  %544 = fmul <8 x float> %543, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <8 x float> %544, <8 x float>* %9, align 32
  %545 = lshr <8 x i64> %533, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %546 = uitofp <8 x i64> %545 to <8 x float>
  %547 = fmul <8 x float> %546, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <8 x float> %547, <8 x float>* %10, align 32
  br label %3488

548:                                              ; preds = %227
  %549 = load i16, i16* %143, align 2
  %550 = zext i16 %549 to i32
  %551 = insertelement <8 x i32> undef, i32 %550, i32 0
  %552 = load i16, i16* %145, align 2
  %553 = zext i16 %552 to i32
  %554 = insertelement <8 x i32> %551, i32 %553, i32 1
  %555 = load i16, i16* %147, align 2
  %556 = zext i16 %555 to i32
  %557 = insertelement <8 x i32> %554, i32 %556, i32 2
  %558 = load i16, i16* %149, align 2
  %559 = zext i16 %558 to i32
  %560 = insertelement <8 x i32> %557, i32 %559, i32 3
  %561 = load i16, i16* %151, align 2
  %562 = zext i16 %561 to i32
  %563 = insertelement <8 x i32> %560, i32 %562, i32 4
  %564 = load i16, i16* %153, align 2
  %565 = zext i16 %564 to i32
  %566 = insertelement <8 x i32> %563, i32 %565, i32 5
  %567 = load i16, i16* %155, align 2
  %568 = zext i16 %567 to i32
  %569 = insertelement <8 x i32> %566, i32 %568, i32 6
  %570 = load i16, i16* %157, align 2
  %571 = zext i16 %570 to i32
  %572 = insertelement <8 x i32> %569, i32 %571, i32 7
  %573 = load i16, i16* %159, align 2
  %574 = zext i16 %573 to i32
  %575 = insertelement <8 x i32> undef, i32 %574, i32 0
  %576 = load i16, i16* %161, align 2
  %577 = zext i16 %576 to i32
  %578 = insertelement <8 x i32> %575, i32 %577, i32 1
  %579 = load i16, i16* %163, align 2
  %580 = zext i16 %579 to i32
  %581 = insertelement <8 x i32> %578, i32 %580, i32 2
  %582 = load i16, i16* %165, align 2
  %583 = zext i16 %582 to i32
  %584 = insertelement <8 x i32> %581, i32 %583, i32 3
  %585 = load i16, i16* %167, align 2
  %586 = zext i16 %585 to i32
  %587 = insertelement <8 x i32> %584, i32 %586, i32 4
  %588 = load i16, i16* %169, align 2
  %589 = zext i16 %588 to i32
  %590 = insertelement <8 x i32> %587, i32 %589, i32 5
  %591 = load i16, i16* %171, align 2
  %592 = zext i16 %591 to i32
  %593 = insertelement <8 x i32> %590, i32 %592, i32 6
  %594 = load i16, i16* %173, align 2
  %595 = zext i16 %594 to i32
  %596 = insertelement <8 x i32> %593, i32 %595, i32 7
  %597 = load i16, i16* %175, align 2
  %598 = zext i16 %597 to i32
  %599 = insertelement <8 x i32> undef, i32 %598, i32 0
  %600 = load i16, i16* %177, align 2
  %601 = zext i16 %600 to i32
  %602 = insertelement <8 x i32> %599, i32 %601, i32 1
  %603 = load i16, i16* %179, align 2
  %604 = zext i16 %603 to i32
  %605 = insertelement <8 x i32> %602, i32 %604, i32 2
  %606 = load i16, i16* %181, align 2
  %607 = zext i16 %606 to i32
  %608 = insertelement <8 x i32> %605, i32 %607, i32 3
  %609 = load i16, i16* %183, align 2
  %610 = zext i16 %609 to i32
  %611 = insertelement <8 x i32> %608, i32 %610, i32 4
  %612 = load i16, i16* %185, align 2
  %613 = zext i16 %612 to i32
  %614 = insertelement <8 x i32> %611, i32 %613, i32 5
  %615 = load i16, i16* %187, align 2
  %616 = zext i16 %615 to i32
  %617 = insertelement <8 x i32> %614, i32 %616, i32 6
  %618 = load i16, i16* %189, align 2
  %619 = zext i16 %618 to i32
  %620 = insertelement <8 x i32> %617, i32 %619, i32 7
  %621 = shl <8 x i32> %572, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %622 = and <8 x i32> %621, <i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280>
  %623 = lshr <8 x i32> %572, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %624 = and <8 x i32> %623, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %625 = or <8 x i32> %622, %624
  %626 = uitofp <8 x i32> %625 to <8 x float>
  %627 = fmul <8 x float> %626, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <8 x float> %627, <8 x float>* %7, align 32
  %628 = shl <8 x i32> %596, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %629 = and <8 x i32> %628, <i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280>
  %630 = lshr <8 x i32> %596, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %631 = and <8 x i32> %630, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %632 = or <8 x i32> %629, %631
  %633 = uitofp <8 x i32> %632 to <8 x float>
  %634 = fmul <8 x float> %633, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <8 x float> %634, <8 x float>* %8, align 32
  %635 = shl <8 x i32> %620, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %636 = and <8 x i32> %635, <i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280>
  %637 = lshr <8 x i32> %620, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %638 = and <8 x i32> %637, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %639 = or <8 x i32> %636, %638
  %640 = uitofp <8 x i32> %639 to <8 x float>
  %641 = fmul <8 x float> %640, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <8 x float> %641, <8 x float>* %9, align 32
  br label %3488

642:                                              ; preds = %227
  %643 = load <8 x i64>, <8 x i64>* %139, align 2
  %644 = shl <8 x i64> %643, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %645 = and <8 x i64> %644, <i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696>
  %646 = lshr <8 x i64> %643, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %647 = and <8 x i64> %646, <i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695>
  %648 = or <8 x i64> %645, %647
  %649 = and <8 x i64> %648, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %650 = uitofp <8 x i64> %649 to <8 x float>
  %651 = fmul <8 x float> %650, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <8 x float> %651, <8 x float>* %7, align 32
  %652 = lshr <8 x i64> %648, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %653 = and <8 x i64> %652, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %654 = uitofp <8 x i64> %653 to <8 x float>
  %655 = fmul <8 x float> %654, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <8 x float> %655, <8 x float>* %8, align 32
  %656 = lshr <8 x i64> %648, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %657 = and <8 x i64> %656, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %658 = uitofp <8 x i64> %657 to <8 x float>
  %659 = fmul <8 x float> %658, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <8 x float> %659, <8 x float>* %9, align 32
  %660 = lshr <8 x i64> %648, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %661 = uitofp <8 x i64> %660 to <8 x float>
  %662 = fmul <8 x float> %661, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <8 x float> %662, <8 x float>* %10, align 32
  br label %3488

663:                                              ; preds = %227
  %664 = load i16, i16* %143, align 2
  %665 = insertelement <8 x i16> undef, i16 %664, i32 0
  %666 = load i16, i16* %145, align 2
  %667 = insertelement <8 x i16> %665, i16 %666, i32 1
  %668 = load i16, i16* %147, align 2
  %669 = insertelement <8 x i16> %667, i16 %668, i32 2
  %670 = load i16, i16* %149, align 2
  %671 = insertelement <8 x i16> %669, i16 %670, i32 3
  %672 = load i16, i16* %151, align 2
  %673 = insertelement <8 x i16> %671, i16 %672, i32 4
  %674 = load i16, i16* %153, align 2
  %675 = insertelement <8 x i16> %673, i16 %674, i32 5
  %676 = load i16, i16* %155, align 2
  %677 = insertelement <8 x i16> %675, i16 %676, i32 6
  %678 = load i16, i16* %157, align 2
  %679 = insertelement <8 x i16> %677, i16 %678, i32 7
  %680 = load i16, i16* %159, align 2
  %681 = insertelement <8 x i16> undef, i16 %680, i32 0
  %682 = load i16, i16* %161, align 2
  %683 = insertelement <8 x i16> %681, i16 %682, i32 1
  %684 = load i16, i16* %163, align 2
  %685 = insertelement <8 x i16> %683, i16 %684, i32 2
  %686 = load i16, i16* %165, align 2
  %687 = insertelement <8 x i16> %685, i16 %686, i32 3
  %688 = load i16, i16* %167, align 2
  %689 = insertelement <8 x i16> %687, i16 %688, i32 4
  %690 = load i16, i16* %169, align 2
  %691 = insertelement <8 x i16> %689, i16 %690, i32 5
  %692 = load i16, i16* %171, align 2
  %693 = insertelement <8 x i16> %691, i16 %692, i32 6
  %694 = load i16, i16* %173, align 2
  %695 = insertelement <8 x i16> %693, i16 %694, i32 7
  %696 = load i16, i16* %175, align 2
  %697 = insertelement <8 x i16> undef, i16 %696, i32 0
  %698 = load i16, i16* %177, align 2
  %699 = insertelement <8 x i16> %697, i16 %698, i32 1
  %700 = load i16, i16* %179, align 2
  %701 = insertelement <8 x i16> %699, i16 %700, i32 2
  %702 = load i16, i16* %181, align 2
  %703 = insertelement <8 x i16> %701, i16 %702, i32 3
  %704 = load i16, i16* %183, align 2
  %705 = insertelement <8 x i16> %703, i16 %704, i32 4
  %706 = load i16, i16* %185, align 2
  %707 = insertelement <8 x i16> %705, i16 %706, i32 5
  %708 = load i16, i16* %187, align 2
  %709 = insertelement <8 x i16> %707, i16 %708, i32 6
  %710 = load i16, i16* %189, align 2
  %711 = insertelement <8 x i16> %709, i16 %710, i32 7
  %712 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %679) #17
  store <8 x float> %712, <8 x float>* %7, align 32
  %713 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %695) #17
  store <8 x float> %713, <8 x float>* %8, align 32
  %714 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %711) #17
  store <8 x float> %714, <8 x float>* %9, align 32
  br label %3488

715:                                              ; preds = %227
  %716 = load <8 x i64>, <8 x i64>* %139, align 2
  %717 = trunc <8 x i64> %716 to <8 x i16>
  %718 = lshr <8 x i64> %716, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %719 = trunc <8 x i64> %718 to <8 x i16>
  %720 = lshr <8 x i64> %716, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %721 = trunc <8 x i64> %720 to <8 x i16>
  %722 = lshr <8 x i64> %716, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %723 = trunc <8 x i64> %722 to <8 x i16>
  %724 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %717) #17
  store <8 x float> %724, <8 x float>* %7, align 32
  %725 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %719) #17
  store <8 x float> %725, <8 x float>* %8, align 32
  %726 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %721) #17
  store <8 x float> %726, <8 x float>* %9, align 32
  %727 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %723) #17
  store <8 x float> %727, <8 x float>* %10, align 32
  br label %3488

728:                                              ; preds = %227
  %729 = load float, float* %89, align 4
  %730 = insertelement <8 x float> undef, float %729, i32 0
  %731 = load float, float* %91, align 4
  %732 = insertelement <8 x float> %730, float %731, i32 1
  %733 = load float, float* %93, align 4
  %734 = insertelement <8 x float> %732, float %733, i32 2
  %735 = load float, float* %95, align 4
  %736 = insertelement <8 x float> %734, float %735, i32 3
  %737 = load float, float* %97, align 4
  %738 = insertelement <8 x float> %736, float %737, i32 4
  %739 = load float, float* %99, align 4
  %740 = insertelement <8 x float> %738, float %739, i32 5
  %741 = load float, float* %101, align 4
  %742 = insertelement <8 x float> %740, float %741, i32 6
  %743 = load float, float* %103, align 4
  %744 = insertelement <8 x float> %742, float %743, i32 7
  store <8 x float> %744, <8 x float>* %7, align 32
  %745 = load float, float* %105, align 4
  %746 = insertelement <8 x float> undef, float %745, i32 0
  %747 = load float, float* %107, align 4
  %748 = insertelement <8 x float> %746, float %747, i32 1
  %749 = load float, float* %109, align 4
  %750 = insertelement <8 x float> %748, float %749, i32 2
  %751 = load float, float* %111, align 4
  %752 = insertelement <8 x float> %750, float %751, i32 3
  %753 = load float, float* %113, align 4
  %754 = insertelement <8 x float> %752, float %753, i32 4
  %755 = load float, float* %115, align 4
  %756 = insertelement <8 x float> %754, float %755, i32 5
  %757 = load float, float* %117, align 4
  %758 = insertelement <8 x float> %756, float %757, i32 6
  %759 = load float, float* %119, align 4
  %760 = insertelement <8 x float> %758, float %759, i32 7
  store <8 x float> %760, <8 x float>* %8, align 32
  %761 = load float, float* %121, align 4
  %762 = insertelement <8 x float> undef, float %761, i32 0
  %763 = load float, float* %123, align 4
  %764 = insertelement <8 x float> %762, float %763, i32 1
  %765 = load float, float* %125, align 4
  %766 = insertelement <8 x float> %764, float %765, i32 2
  %767 = load float, float* %127, align 4
  %768 = insertelement <8 x float> %766, float %767, i32 3
  %769 = load float, float* %129, align 4
  %770 = insertelement <8 x float> %768, float %769, i32 4
  %771 = load float, float* %131, align 4
  %772 = insertelement <8 x float> %770, float %771, i32 5
  %773 = load float, float* %133, align 4
  %774 = insertelement <8 x float> %772, float %773, i32 6
  %775 = load float, float* %135, align 4
  %776 = insertelement <8 x float> %774, float %775, i32 7
  store <8 x float> %776, <8 x float>* %9, align 32
  br label %3488

777:                                              ; preds = %227
  %778 = load float, float* %23, align 4
  %779 = insertelement <8 x float> undef, float %778, i32 0
  %780 = load float, float* %25, align 4
  %781 = insertelement <8 x float> %779, float %780, i32 1
  %782 = load float, float* %27, align 4
  %783 = insertelement <8 x float> %781, float %782, i32 2
  %784 = load float, float* %29, align 4
  %785 = insertelement <8 x float> %783, float %784, i32 3
  %786 = load float, float* %31, align 4
  %787 = insertelement <8 x float> %785, float %786, i32 4
  %788 = load float, float* %33, align 4
  %789 = insertelement <8 x float> %787, float %788, i32 5
  %790 = load float, float* %35, align 4
  %791 = insertelement <8 x float> %789, float %790, i32 6
  %792 = load float, float* %37, align 4
  %793 = insertelement <8 x float> %791, float %792, i32 7
  store <8 x float> %793, <8 x float>* %7, align 32
  %794 = load float, float* %39, align 4
  %795 = insertelement <8 x float> undef, float %794, i32 0
  %796 = load float, float* %41, align 4
  %797 = insertelement <8 x float> %795, float %796, i32 1
  %798 = load float, float* %43, align 4
  %799 = insertelement <8 x float> %797, float %798, i32 2
  %800 = load float, float* %45, align 4
  %801 = insertelement <8 x float> %799, float %800, i32 3
  %802 = load float, float* %47, align 4
  %803 = insertelement <8 x float> %801, float %802, i32 4
  %804 = load float, float* %49, align 4
  %805 = insertelement <8 x float> %803, float %804, i32 5
  %806 = load float, float* %51, align 4
  %807 = insertelement <8 x float> %805, float %806, i32 6
  %808 = load float, float* %53, align 4
  %809 = insertelement <8 x float> %807, float %808, i32 7
  store <8 x float> %809, <8 x float>* %8, align 32
  %810 = load float, float* %55, align 4
  %811 = insertelement <8 x float> undef, float %810, i32 0
  %812 = load float, float* %57, align 4
  %813 = insertelement <8 x float> %811, float %812, i32 1
  %814 = load float, float* %59, align 4
  %815 = insertelement <8 x float> %813, float %814, i32 2
  %816 = load float, float* %61, align 4
  %817 = insertelement <8 x float> %815, float %816, i32 3
  %818 = load float, float* %63, align 4
  %819 = insertelement <8 x float> %817, float %818, i32 4
  %820 = load float, float* %65, align 4
  %821 = insertelement <8 x float> %819, float %820, i32 5
  %822 = load float, float* %67, align 4
  %823 = insertelement <8 x float> %821, float %822, i32 6
  %824 = load float, float* %69, align 4
  %825 = insertelement <8 x float> %823, float %824, i32 7
  store <8 x float> %825, <8 x float>* %9, align 32
  %826 = load float, float* %71, align 4
  %827 = insertelement <8 x float> undef, float %826, i32 0
  %828 = load float, float* %73, align 4
  %829 = insertelement <8 x float> %827, float %828, i32 1
  %830 = load float, float* %75, align 4
  %831 = insertelement <8 x float> %829, float %830, i32 2
  %832 = load float, float* %77, align 4
  %833 = insertelement <8 x float> %831, float %832, i32 3
  %834 = load float, float* %79, align 4
  %835 = insertelement <8 x float> %833, float %834, i32 4
  %836 = load float, float* %81, align 4
  %837 = insertelement <8 x float> %835, float %836, i32 5
  %838 = load float, float* %83, align 4
  %839 = insertelement <8 x float> %837, float %838, i32 6
  %840 = load float, float* %85, align 4
  %841 = insertelement <8 x float> %839, float %840, i32 7
  store <8 x float> %841, <8 x float>* %10, align 32
  br label %3488

842:                                              ; preds = %227
  %843 = load <8 x float>, <8 x float>* %7, align 32
  %844 = load <8 x float>, <8 x float>* %9, align 32
  store <8 x float> %844, <8 x float>* %7, align 32
  store <8 x float> %843, <8 x float>* %9, align 32
  br label %3488

845:                                              ; preds = %227
  %846 = load <8 x float>, <8 x float>* %7, align 32
  %847 = fcmp ogt <8 x float> %846, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %848 = select <8 x i1> %847, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %846
  %849 = fcmp ogt <8 x float> %848, zeroinitializer
  %850 = select <8 x i1> %849, <8 x float> %848, <8 x float> zeroinitializer
  store <8 x float> %850, <8 x float>* %7, align 32
  %851 = load <8 x float>, <8 x float>* %8, align 32
  %852 = fcmp ogt <8 x float> %851, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %853 = select <8 x i1> %852, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %851
  %854 = fcmp ogt <8 x float> %853, zeroinitializer
  %855 = select <8 x i1> %854, <8 x float> %853, <8 x float> zeroinitializer
  store <8 x float> %855, <8 x float>* %8, align 32
  %856 = load <8 x float>, <8 x float>* %9, align 32
  %857 = fcmp ogt <8 x float> %856, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %858 = select <8 x i1> %857, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %856
  %859 = fcmp ogt <8 x float> %858, zeroinitializer
  %860 = select <8 x i1> %859, <8 x float> %858, <8 x float> zeroinitializer
  store <8 x float> %860, <8 x float>* %9, align 32
  %861 = load <8 x float>, <8 x float>* %10, align 32
  %862 = fcmp ogt <8 x float> %861, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %863 = select <8 x i1> %862, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %861
  %864 = fcmp ogt <8 x float> %863, zeroinitializer
  %865 = select <8 x i1> %864, <8 x float> %863, <8 x float> zeroinitializer
  store <8 x float> %865, <8 x float>* %10, align 32
  br label %3488

866:                                              ; preds = %227
  %867 = load <8 x float>, <8 x float>* %7, align 32
  %868 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %867
  store <8 x float> %868, <8 x float>* %7, align 32
  %869 = load <8 x float>, <8 x float>* %8, align 32
  %870 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %869
  store <8 x float> %870, <8 x float>* %8, align 32
  %871 = load <8 x float>, <8 x float>* %9, align 32
  %872 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %871
  store <8 x float> %872, <8 x float>* %9, align 32
  %873 = load <8 x float>, <8 x float>* %10, align 32
  %874 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %873
  store <8 x float> %874, <8 x float>* %10, align 32
  br label %3488

875:                                              ; preds = %227
  store <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float>* %10, align 32
  br label %3488

876:                                              ; preds = %227
  %877 = load <8 x float>, <8 x float>* %10, align 32
  %878 = load <8 x float>, <8 x float>* %7, align 32
  %879 = fmul <8 x float> %877, %878
  store <8 x float> %879, <8 x float>* %7, align 32
  %880 = load <8 x float>, <8 x float>* %8, align 32
  %881 = fmul <8 x float> %877, %880
  store <8 x float> %881, <8 x float>* %8, align 32
  %882 = load <8 x float>, <8 x float>* %9, align 32
  %883 = fmul <8 x float> %877, %882
  store <8 x float> %883, <8 x float>* %9, align 32
  br label %3488

884:                                              ; preds = %227
  %885 = load <8 x float>, <8 x float>* %10, align 32
  %886 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %885
  %887 = fcmp olt <8 x float> %886, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %888 = select <8 x i1> %887, <8 x float> %886, <8 x float> zeroinitializer
  %889 = load <8 x float>, <8 x float>* %7, align 32
  %890 = fmul <8 x float> %889, %888
  store <8 x float> %890, <8 x float>* %7, align 32
  %891 = load <8 x float>, <8 x float>* %8, align 32
  %892 = fmul <8 x float> %891, %888
  store <8 x float> %892, <8 x float>* %8, align 32
  %893 = load <8 x float>, <8 x float>* %9, align 32
  %894 = fmul <8 x float> %888, %893
  store <8 x float> %894, <8 x float>* %9, align 32
  br label %3488

895:                                              ; preds = %227
  %896 = getelementptr inbounds i8*, i8** %228, i64 1
  %897 = bitcast i8** %228 to %struct.skcms_Matrix3x3**
  %898 = load %struct.skcms_Matrix3x3*, %struct.skcms_Matrix3x3** %897, align 8
  %899 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %898, i64 0, i32 0, i64 0, i64 0
  %900 = load float, float* %899, align 4
  %901 = insertelement <8 x float> undef, float %900, i32 0
  %902 = shufflevector <8 x float> %901, <8 x float> undef, <8 x i32> zeroinitializer
  %903 = load <8 x float>, <8 x float>* %7, align 32
  %904 = fmul <8 x float> %903, %902
  %905 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %898, i64 0, i32 0, i64 0, i64 1
  %906 = load float, float* %905, align 4
  %907 = insertelement <8 x float> undef, float %906, i32 0
  %908 = shufflevector <8 x float> %907, <8 x float> undef, <8 x i32> zeroinitializer
  %909 = load <8 x float>, <8 x float>* %8, align 32
  %910 = fmul <8 x float> %909, %908
  %911 = fadd <8 x float> %904, %910
  %912 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %898, i64 0, i32 0, i64 0, i64 2
  %913 = load float, float* %912, align 4
  %914 = insertelement <8 x float> undef, float %913, i32 0
  %915 = shufflevector <8 x float> %914, <8 x float> undef, <8 x i32> zeroinitializer
  %916 = load <8 x float>, <8 x float>* %9, align 32
  %917 = fmul <8 x float> %916, %915
  %918 = fadd <8 x float> %911, %917
  %919 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %898, i64 0, i32 0, i64 0, i64 3
  %920 = load float, float* %919, align 4
  %921 = insertelement <8 x float> undef, float %920, i32 0
  %922 = shufflevector <8 x float> %921, <8 x float> undef, <8 x i32> zeroinitializer
  %923 = fmul <8 x float> %903, %922
  %924 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %898, i64 0, i32 0, i64 0, i64 4
  %925 = load float, float* %924, align 4
  %926 = insertelement <8 x float> undef, float %925, i32 0
  %927 = shufflevector <8 x float> %926, <8 x float> undef, <8 x i32> zeroinitializer
  %928 = fmul <8 x float> %909, %927
  %929 = fadd <8 x float> %923, %928
  %930 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %898, i64 0, i32 0, i64 0, i64 5
  %931 = load float, float* %930, align 4
  %932 = insertelement <8 x float> undef, float %931, i32 0
  %933 = shufflevector <8 x float> %932, <8 x float> undef, <8 x i32> zeroinitializer
  %934 = fmul <8 x float> %916, %933
  %935 = fadd <8 x float> %929, %934
  %936 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %898, i64 0, i32 0, i64 0, i64 6
  %937 = load float, float* %936, align 4
  %938 = insertelement <8 x float> undef, float %937, i32 0
  %939 = shufflevector <8 x float> %938, <8 x float> undef, <8 x i32> zeroinitializer
  %940 = fmul <8 x float> %903, %939
  %941 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %898, i64 0, i32 0, i64 0, i64 7
  %942 = load float, float* %941, align 4
  %943 = insertelement <8 x float> undef, float %942, i32 0
  %944 = shufflevector <8 x float> %943, <8 x float> undef, <8 x i32> zeroinitializer
  %945 = fmul <8 x float> %909, %944
  %946 = fadd <8 x float> %940, %945
  %947 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %898, i64 0, i32 0, i64 0, i64 8
  %948 = load float, float* %947, align 4
  %949 = insertelement <8 x float> undef, float %948, i32 0
  %950 = shufflevector <8 x float> %949, <8 x float> undef, <8 x i32> zeroinitializer
  %951 = fmul <8 x float> %916, %950
  %952 = fadd <8 x float> %946, %951
  store <8 x float> %918, <8 x float>* %7, align 32
  store <8 x float> %935, <8 x float>* %8, align 32
  store <8 x float> %952, <8 x float>* %9, align 32
  br label %3488

953:                                              ; preds = %227
  %954 = getelementptr inbounds i8*, i8** %228, i64 1
  %955 = bitcast i8** %228 to %struct.skcms_Matrix3x4**
  %956 = load %struct.skcms_Matrix3x4*, %struct.skcms_Matrix3x4** %955, align 8
  %957 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %956, i64 0, i32 0, i64 0, i64 0
  %958 = load float, float* %957, align 4
  %959 = insertelement <8 x float> undef, float %958, i32 0
  %960 = shufflevector <8 x float> %959, <8 x float> undef, <8 x i32> zeroinitializer
  %961 = load <8 x float>, <8 x float>* %7, align 32
  %962 = fmul <8 x float> %961, %960
  %963 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %956, i64 0, i32 0, i64 0, i64 1
  %964 = load float, float* %963, align 4
  %965 = insertelement <8 x float> undef, float %964, i32 0
  %966 = shufflevector <8 x float> %965, <8 x float> undef, <8 x i32> zeroinitializer
  %967 = load <8 x float>, <8 x float>* %8, align 32
  %968 = fmul <8 x float> %967, %966
  %969 = fadd <8 x float> %962, %968
  %970 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %956, i64 0, i32 0, i64 0, i64 2
  %971 = load float, float* %970, align 4
  %972 = insertelement <8 x float> undef, float %971, i32 0
  %973 = shufflevector <8 x float> %972, <8 x float> undef, <8 x i32> zeroinitializer
  %974 = load <8 x float>, <8 x float>* %9, align 32
  %975 = fmul <8 x float> %974, %973
  %976 = fadd <8 x float> %969, %975
  %977 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %956, i64 0, i32 0, i64 0, i64 3
  %978 = load float, float* %977, align 4
  %979 = insertelement <8 x float> undef, float %978, i32 0
  %980 = shufflevector <8 x float> %979, <8 x float> undef, <8 x i32> zeroinitializer
  %981 = fadd <8 x float> %976, %980
  %982 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %956, i64 0, i32 0, i64 0, i64 4
  %983 = load float, float* %982, align 4
  %984 = insertelement <8 x float> undef, float %983, i32 0
  %985 = shufflevector <8 x float> %984, <8 x float> undef, <8 x i32> zeroinitializer
  %986 = fmul <8 x float> %961, %985
  %987 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %956, i64 0, i32 0, i64 0, i64 5
  %988 = load float, float* %987, align 4
  %989 = insertelement <8 x float> undef, float %988, i32 0
  %990 = shufflevector <8 x float> %989, <8 x float> undef, <8 x i32> zeroinitializer
  %991 = fmul <8 x float> %967, %990
  %992 = fadd <8 x float> %986, %991
  %993 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %956, i64 0, i32 0, i64 0, i64 6
  %994 = load float, float* %993, align 4
  %995 = insertelement <8 x float> undef, float %994, i32 0
  %996 = shufflevector <8 x float> %995, <8 x float> undef, <8 x i32> zeroinitializer
  %997 = fmul <8 x float> %974, %996
  %998 = fadd <8 x float> %992, %997
  %999 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %956, i64 0, i32 0, i64 0, i64 7
  %1000 = load float, float* %999, align 4
  %1001 = insertelement <8 x float> undef, float %1000, i32 0
  %1002 = shufflevector <8 x float> %1001, <8 x float> undef, <8 x i32> zeroinitializer
  %1003 = fadd <8 x float> %1002, %998
  %1004 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %956, i64 0, i32 0, i64 0, i64 8
  %1005 = load float, float* %1004, align 4
  %1006 = insertelement <8 x float> undef, float %1005, i32 0
  %1007 = shufflevector <8 x float> %1006, <8 x float> undef, <8 x i32> zeroinitializer
  %1008 = fmul <8 x float> %961, %1007
  %1009 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %956, i64 0, i32 0, i64 0, i64 9
  %1010 = load float, float* %1009, align 4
  %1011 = insertelement <8 x float> undef, float %1010, i32 0
  %1012 = shufflevector <8 x float> %1011, <8 x float> undef, <8 x i32> zeroinitializer
  %1013 = fmul <8 x float> %967, %1012
  %1014 = fadd <8 x float> %1008, %1013
  %1015 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %956, i64 0, i32 0, i64 0, i64 10
  %1016 = load float, float* %1015, align 4
  %1017 = insertelement <8 x float> undef, float %1016, i32 0
  %1018 = shufflevector <8 x float> %1017, <8 x float> undef, <8 x i32> zeroinitializer
  %1019 = fmul <8 x float> %974, %1018
  %1020 = fadd <8 x float> %1014, %1019
  %1021 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %956, i64 0, i32 0, i64 0, i64 11
  %1022 = load float, float* %1021, align 4
  %1023 = insertelement <8 x float> undef, float %1022, i32 0
  %1024 = shufflevector <8 x float> %1023, <8 x float> undef, <8 x i32> zeroinitializer
  %1025 = fadd <8 x float> %1024, %1020
  store <8 x float> %981, <8 x float>* %7, align 32
  store <8 x float> %1003, <8 x float>* %8, align 32
  store <8 x float> %1025, <8 x float>* %9, align 32
  br label %3488

1026:                                             ; preds = %227
  %1027 = load <8 x float>, <8 x float>* %7, align 32
  %1028 = fmul <8 x float> %1027, <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>
  %1029 = load <8 x float>, <8 x float>* %8, align 32
  %1030 = fmul <8 x float> %1029, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1031 = fadd <8 x float> %1030, <float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02>
  %1032 = load <8 x float>, <8 x float>* %9, align 32
  %1033 = fmul <8 x float> %1032, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1034 = fadd <8 x float> %1033, <float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02>
  %1035 = fadd <8 x float> %1028, <float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01>
  %1036 = fmul <8 x float> %1035, <float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000>
  %1037 = fmul <8 x float> %1031, <float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000>
  %1038 = fadd <8 x float> %1036, %1037
  %1039 = fmul <8 x float> %1034, <float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000>
  %1040 = fsub <8 x float> %1036, %1039
  %1041 = fmul <8 x float> %1038, %1038
  %1042 = fmul <8 x float> %1038, %1041
  %1043 = fcmp ule <8 x float> %1042, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %1044 = fadd <8 x float> %1038, <float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000>
  %1045 = fmul <8 x float> %1044, <float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000>
  %1046 = select <8 x i1> %1043, <8 x float> %1045, <8 x float> %1042
  %1047 = fmul <8 x float> %1036, %1036
  %1048 = fmul <8 x float> %1036, %1047
  %1049 = fcmp ule <8 x float> %1048, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %1050 = fadd <8 x float> %1036, <float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000>
  %1051 = fmul <8 x float> %1050, <float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000>
  %1052 = select <8 x i1> %1049, <8 x float> %1051, <8 x float> %1048
  %1053 = fmul <8 x float> %1040, %1040
  %1054 = fmul <8 x float> %1040, %1053
  %1055 = fcmp ule <8 x float> %1054, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %1056 = fadd <8 x float> %1040, <float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000>
  %1057 = fmul <8 x float> %1056, <float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000>
  %1058 = select <8 x i1> %1055, <8 x float> %1057, <8 x float> %1054
  %1059 = fmul <8 x float> %1046, <float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000>
  store <8 x float> %1059, <8 x float>* %7, align 32
  store <8 x float> %1052, <8 x float>* %8, align 32
  %1060 = fmul <8 x float> %1058, <float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000>
  store <8 x float> %1060, <8 x float>* %9, align 32
  br label %3488

1061:                                             ; preds = %227
  %1062 = load <8 x float>, <8 x float>* %7, align 32
  %1063 = fmul <8 x float> %1062, <float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000>
  %1064 = load <8 x float>, <8 x float>* %8, align 32
  %1065 = load <8 x float>, <8 x float>* %9, align 32
  %1066 = fmul <8 x float> %1065, <float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000>
  %1067 = fcmp ule <8 x float> %1063, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %1068 = fcmp une <8 x float> %1063, zeroinitializer
  %1069 = fcmp une <8 x float> %1063, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1070 = bitcast <8 x float> %1063 to <8 x i32>
  %1071 = sitofp <8 x i32> %1070 to <8 x float>
  %1072 = fmul <8 x float> %1071, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1073 = and <8 x i32> %1070, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1074 = or <8 x i32> %1073, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1075 = bitcast <8 x i32> %1074 to <8 x float>
  %1076 = fadd <8 x float> %1072, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1077 = fmul <8 x float> %1075, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1078 = fsub <8 x float> %1076, %1077
  %1079 = fadd <8 x float> %1075, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1080 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1079
  %1081 = fsub <8 x float> %1078, %1080
  %1082 = fmul <8 x float> %1081, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %1083 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1082, i32 1) #17
  %1084 = fsub <8 x float> %1082, %1083
  %1085 = fadd <8 x float> %1082, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1086 = fmul <8 x float> %1084, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1087 = fsub <8 x float> %1085, %1086
  %1088 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1084
  %1089 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1088
  %1090 = fadd <8 x float> %1087, %1089
  %1091 = fmul <8 x float> %1090, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1092 = fcmp olt <8 x float> %1091, zeroinitializer
  %1093 = select <8 x i1> %1092, <8 x float> zeroinitializer, <8 x float> %1091
  %1094 = fptosi <8 x float> %1093 to <8 x i32>
  %1095 = and <8 x i1> %1069, %1068
  %1096 = select <8 x i1> %1095, <8 x i32> %1094, <8 x i32> %1070
  %1097 = fmul <8 x float> %1063, <float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000>
  %1098 = fadd <8 x float> %1097, <float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000>
  %1099 = bitcast <8 x i32> %1096 to <8 x float>
  %1100 = select <8 x i1> %1067, <8 x float> %1098, <8 x float> %1099
  %1101 = fcmp ule <8 x float> %1064, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %1102 = fcmp une <8 x float> %1064, zeroinitializer
  %1103 = fcmp une <8 x float> %1064, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1104 = bitcast <8 x float> %1064 to <8 x i32>
  %1105 = sitofp <8 x i32> %1104 to <8 x float>
  %1106 = fmul <8 x float> %1105, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1107 = and <8 x i32> %1104, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1108 = or <8 x i32> %1107, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1109 = bitcast <8 x i32> %1108 to <8 x float>
  %1110 = fadd <8 x float> %1106, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1111 = fmul <8 x float> %1109, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1112 = fsub <8 x float> %1110, %1111
  %1113 = fadd <8 x float> %1109, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1114 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1113
  %1115 = fsub <8 x float> %1112, %1114
  %1116 = fmul <8 x float> %1115, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %1117 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1116, i32 1) #17
  %1118 = fsub <8 x float> %1116, %1117
  %1119 = fadd <8 x float> %1116, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1120 = fmul <8 x float> %1118, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1121 = fsub <8 x float> %1119, %1120
  %1122 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1118
  %1123 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1122
  %1124 = fadd <8 x float> %1121, %1123
  %1125 = fmul <8 x float> %1124, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1126 = fcmp olt <8 x float> %1125, zeroinitializer
  %1127 = select <8 x i1> %1126, <8 x float> zeroinitializer, <8 x float> %1125
  %1128 = fptosi <8 x float> %1127 to <8 x i32>
  %1129 = and <8 x i1> %1103, %1102
  %1130 = select <8 x i1> %1129, <8 x i32> %1128, <8 x i32> %1104
  %1131 = fmul <8 x float> %1064, <float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000>
  %1132 = fadd <8 x float> %1131, <float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000>
  %1133 = bitcast <8 x i32> %1130 to <8 x float>
  %1134 = select <8 x i1> %1101, <8 x float> %1132, <8 x float> %1133
  %1135 = fcmp ule <8 x float> %1066, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %1136 = fcmp une <8 x float> %1066, zeroinitializer
  %1137 = fcmp une <8 x float> %1066, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1138 = bitcast <8 x float> %1066 to <8 x i32>
  %1139 = sitofp <8 x i32> %1138 to <8 x float>
  %1140 = fmul <8 x float> %1139, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1141 = and <8 x i32> %1138, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1142 = or <8 x i32> %1141, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1143 = bitcast <8 x i32> %1142 to <8 x float>
  %1144 = fadd <8 x float> %1140, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1145 = fmul <8 x float> %1143, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1146 = fsub <8 x float> %1144, %1145
  %1147 = fadd <8 x float> %1143, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1148 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1147
  %1149 = fsub <8 x float> %1146, %1148
  %1150 = fmul <8 x float> %1149, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %1151 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1150, i32 1) #17
  %1152 = fsub <8 x float> %1150, %1151
  %1153 = fadd <8 x float> %1150, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1154 = fmul <8 x float> %1152, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1155 = fsub <8 x float> %1153, %1154
  %1156 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1152
  %1157 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1156
  %1158 = fadd <8 x float> %1155, %1157
  %1159 = fmul <8 x float> %1158, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1160 = fcmp olt <8 x float> %1159, zeroinitializer
  %1161 = select <8 x i1> %1160, <8 x float> zeroinitializer, <8 x float> %1159
  %1162 = fptosi <8 x float> %1161 to <8 x i32>
  %1163 = and <8 x i1> %1137, %1136
  %1164 = select <8 x i1> %1163, <8 x i32> %1162, <8 x i32> %1138
  %1165 = fmul <8 x float> %1066, <float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000>
  %1166 = fadd <8 x float> %1165, <float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000>
  %1167 = bitcast <8 x i32> %1164 to <8 x float>
  %1168 = select <8 x i1> %1135, <8 x float> %1166, <8 x float> %1167
  %1169 = fmul <8 x float> %1134, <float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02>
  %1170 = fadd <8 x float> %1169, <float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01>
  %1171 = fsub <8 x float> %1100, %1134
  %1172 = fmul <8 x float> %1171, <float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02>
  %1173 = fsub <8 x float> %1134, %1168
  %1174 = fmul <8 x float> %1173, <float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02>
  %1175 = fmul <8 x float> %1170, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  store <8 x float> %1175, <8 x float>* %7, align 32
  %1176 = fadd <8 x float> %1172, <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>
  %1177 = fmul <8 x float> %1176, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <8 x float> %1177, <8 x float>* %8, align 32
  %1178 = fadd <8 x float> %1174, <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>
  %1179 = fmul <8 x float> %1178, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <8 x float> %1179, <8 x float>* %9, align 32
  br label %3488

1180:                                             ; preds = %227
  %1181 = getelementptr inbounds i8*, i8** %228, i64 1
  %1182 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %1183 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1182, align 8
  %1184 = load <8 x i32>, <8 x i32>* %19, align 32
  %1185 = and <8 x i32> %1184, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1186 = and <8 x i32> %1184, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1187 = bitcast <8 x i32> %1186 to <8 x float>
  %1188 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1183, i64 0, i32 4
  %1189 = load float, float* %1188, align 4
  %1190 = insertelement <8 x float> undef, float %1189, i32 0
  %1191 = shufflevector <8 x float> %1190, <8 x float> undef, <8 x i32> zeroinitializer
  %1192 = fcmp ule <8 x float> %1191, %1187
  %1193 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1183, i64 0, i32 3
  %1194 = load float, float* %1193, align 4
  %1195 = insertelement <8 x float> undef, float %1194, i32 0
  %1196 = shufflevector <8 x float> %1195, <8 x float> undef, <8 x i32> zeroinitializer
  %1197 = fmul <8 x float> %1196, %1187
  %1198 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1183, i64 0, i32 6
  %1199 = load float, float* %1198, align 4
  %1200 = insertelement <8 x float> undef, float %1199, i32 0
  %1201 = shufflevector <8 x float> %1200, <8 x float> undef, <8 x i32> zeroinitializer
  %1202 = fadd <8 x float> %1197, %1201
  %1203 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1183, i64 0, i32 1
  %1204 = load float, float* %1203, align 4
  %1205 = insertelement <8 x float> undef, float %1204, i32 0
  %1206 = shufflevector <8 x float> %1205, <8 x float> undef, <8 x i32> zeroinitializer
  %1207 = fmul <8 x float> %1206, %1187
  %1208 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1183, i64 0, i32 2
  %1209 = load float, float* %1208, align 4
  %1210 = insertelement <8 x float> undef, float %1209, i32 0
  %1211 = shufflevector <8 x float> %1210, <8 x float> undef, <8 x i32> zeroinitializer
  %1212 = fadd <8 x float> %1207, %1211
  %1213 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1183, i64 0, i32 0
  %1214 = load float, float* %1213, align 4
  %1215 = fcmp une <8 x float> %1212, zeroinitializer
  %1216 = fcmp une <8 x float> %1212, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1217 = bitcast <8 x float> %1212 to <8 x i32>
  %1218 = sitofp <8 x i32> %1217 to <8 x float>
  %1219 = fmul <8 x float> %1218, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1220 = and <8 x i32> %1217, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1221 = or <8 x i32> %1220, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1222 = bitcast <8 x i32> %1221 to <8 x float>
  %1223 = fadd <8 x float> %1219, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1224 = fmul <8 x float> %1222, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1225 = fsub <8 x float> %1223, %1224
  %1226 = fadd <8 x float> %1222, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1227 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1226
  %1228 = fsub <8 x float> %1225, %1227
  %1229 = insertelement <8 x float> undef, float %1214, i32 0
  %1230 = shufflevector <8 x float> %1229, <8 x float> undef, <8 x i32> zeroinitializer
  %1231 = fmul <8 x float> %1230, %1228
  %1232 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1231, i32 1) #17
  %1233 = fsub <8 x float> %1231, %1232
  %1234 = fadd <8 x float> %1231, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1235 = fmul <8 x float> %1233, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1236 = fsub <8 x float> %1234, %1235
  %1237 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1233
  %1238 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1237
  %1239 = fadd <8 x float> %1236, %1238
  %1240 = fmul <8 x float> %1239, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1241 = fcmp olt <8 x float> %1240, zeroinitializer
  %1242 = select <8 x i1> %1241, <8 x float> zeroinitializer, <8 x float> %1240
  %1243 = fptosi <8 x float> %1242 to <8 x i32>
  %1244 = and <8 x i1> %1216, %1215
  %1245 = select <8 x i1> %1244, <8 x i32> %1243, <8 x i32> %1217
  %1246 = bitcast <8 x i32> %1245 to <8 x float>
  %1247 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1183, i64 0, i32 5
  %1248 = load float, float* %1247, align 4
  %1249 = insertelement <8 x float> undef, float %1248, i32 0
  %1250 = shufflevector <8 x float> %1249, <8 x float> undef, <8 x i32> zeroinitializer
  %1251 = fadd <8 x float> %1250, %1246
  %1252 = select <8 x i1> %1192, <8 x float> %1251, <8 x float> %1202
  %1253 = bitcast <8 x float> %1252 to <8 x i32>
  %1254 = or <8 x i32> %1185, %1253
  store <8 x i32> %1254, <8 x i32>* %19, align 32
  br label %3488

1255:                                             ; preds = %227
  %1256 = getelementptr inbounds i8*, i8** %228, i64 1
  %1257 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %1258 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1257, align 8
  %1259 = load <8 x i32>, <8 x i32>* %18, align 32
  %1260 = and <8 x i32> %1259, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1261 = and <8 x i32> %1259, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1262 = bitcast <8 x i32> %1261 to <8 x float>
  %1263 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1258, i64 0, i32 4
  %1264 = load float, float* %1263, align 4
  %1265 = insertelement <8 x float> undef, float %1264, i32 0
  %1266 = shufflevector <8 x float> %1265, <8 x float> undef, <8 x i32> zeroinitializer
  %1267 = fcmp ule <8 x float> %1266, %1262
  %1268 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1258, i64 0, i32 3
  %1269 = load float, float* %1268, align 4
  %1270 = insertelement <8 x float> undef, float %1269, i32 0
  %1271 = shufflevector <8 x float> %1270, <8 x float> undef, <8 x i32> zeroinitializer
  %1272 = fmul <8 x float> %1271, %1262
  %1273 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1258, i64 0, i32 6
  %1274 = load float, float* %1273, align 4
  %1275 = insertelement <8 x float> undef, float %1274, i32 0
  %1276 = shufflevector <8 x float> %1275, <8 x float> undef, <8 x i32> zeroinitializer
  %1277 = fadd <8 x float> %1272, %1276
  %1278 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1258, i64 0, i32 1
  %1279 = load float, float* %1278, align 4
  %1280 = insertelement <8 x float> undef, float %1279, i32 0
  %1281 = shufflevector <8 x float> %1280, <8 x float> undef, <8 x i32> zeroinitializer
  %1282 = fmul <8 x float> %1281, %1262
  %1283 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1258, i64 0, i32 2
  %1284 = load float, float* %1283, align 4
  %1285 = insertelement <8 x float> undef, float %1284, i32 0
  %1286 = shufflevector <8 x float> %1285, <8 x float> undef, <8 x i32> zeroinitializer
  %1287 = fadd <8 x float> %1282, %1286
  %1288 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1258, i64 0, i32 0
  %1289 = load float, float* %1288, align 4
  %1290 = fcmp une <8 x float> %1287, zeroinitializer
  %1291 = fcmp une <8 x float> %1287, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1292 = bitcast <8 x float> %1287 to <8 x i32>
  %1293 = sitofp <8 x i32> %1292 to <8 x float>
  %1294 = fmul <8 x float> %1293, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1295 = and <8 x i32> %1292, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1296 = or <8 x i32> %1295, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1297 = bitcast <8 x i32> %1296 to <8 x float>
  %1298 = fadd <8 x float> %1294, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1299 = fmul <8 x float> %1297, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1300 = fsub <8 x float> %1298, %1299
  %1301 = fadd <8 x float> %1297, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1302 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1301
  %1303 = fsub <8 x float> %1300, %1302
  %1304 = insertelement <8 x float> undef, float %1289, i32 0
  %1305 = shufflevector <8 x float> %1304, <8 x float> undef, <8 x i32> zeroinitializer
  %1306 = fmul <8 x float> %1305, %1303
  %1307 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1306, i32 1) #17
  %1308 = fsub <8 x float> %1306, %1307
  %1309 = fadd <8 x float> %1306, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1310 = fmul <8 x float> %1308, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1311 = fsub <8 x float> %1309, %1310
  %1312 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1308
  %1313 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1312
  %1314 = fadd <8 x float> %1311, %1313
  %1315 = fmul <8 x float> %1314, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1316 = fcmp olt <8 x float> %1315, zeroinitializer
  %1317 = select <8 x i1> %1316, <8 x float> zeroinitializer, <8 x float> %1315
  %1318 = fptosi <8 x float> %1317 to <8 x i32>
  %1319 = and <8 x i1> %1291, %1290
  %1320 = select <8 x i1> %1319, <8 x i32> %1318, <8 x i32> %1292
  %1321 = bitcast <8 x i32> %1320 to <8 x float>
  %1322 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1258, i64 0, i32 5
  %1323 = load float, float* %1322, align 4
  %1324 = insertelement <8 x float> undef, float %1323, i32 0
  %1325 = shufflevector <8 x float> %1324, <8 x float> undef, <8 x i32> zeroinitializer
  %1326 = fadd <8 x float> %1325, %1321
  %1327 = select <8 x i1> %1267, <8 x float> %1326, <8 x float> %1277
  %1328 = bitcast <8 x float> %1327 to <8 x i32>
  %1329 = or <8 x i32> %1260, %1328
  store <8 x i32> %1329, <8 x i32>* %18, align 32
  br label %3488

1330:                                             ; preds = %227
  %1331 = getelementptr inbounds i8*, i8** %228, i64 1
  %1332 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %1333 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1332, align 8
  %1334 = load <8 x i32>, <8 x i32>* %17, align 32
  %1335 = and <8 x i32> %1334, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1336 = and <8 x i32> %1334, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1337 = bitcast <8 x i32> %1336 to <8 x float>
  %1338 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1333, i64 0, i32 4
  %1339 = load float, float* %1338, align 4
  %1340 = insertelement <8 x float> undef, float %1339, i32 0
  %1341 = shufflevector <8 x float> %1340, <8 x float> undef, <8 x i32> zeroinitializer
  %1342 = fcmp ule <8 x float> %1341, %1337
  %1343 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1333, i64 0, i32 3
  %1344 = load float, float* %1343, align 4
  %1345 = insertelement <8 x float> undef, float %1344, i32 0
  %1346 = shufflevector <8 x float> %1345, <8 x float> undef, <8 x i32> zeroinitializer
  %1347 = fmul <8 x float> %1346, %1337
  %1348 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1333, i64 0, i32 6
  %1349 = load float, float* %1348, align 4
  %1350 = insertelement <8 x float> undef, float %1349, i32 0
  %1351 = shufflevector <8 x float> %1350, <8 x float> undef, <8 x i32> zeroinitializer
  %1352 = fadd <8 x float> %1347, %1351
  %1353 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1333, i64 0, i32 1
  %1354 = load float, float* %1353, align 4
  %1355 = insertelement <8 x float> undef, float %1354, i32 0
  %1356 = shufflevector <8 x float> %1355, <8 x float> undef, <8 x i32> zeroinitializer
  %1357 = fmul <8 x float> %1356, %1337
  %1358 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1333, i64 0, i32 2
  %1359 = load float, float* %1358, align 4
  %1360 = insertelement <8 x float> undef, float %1359, i32 0
  %1361 = shufflevector <8 x float> %1360, <8 x float> undef, <8 x i32> zeroinitializer
  %1362 = fadd <8 x float> %1357, %1361
  %1363 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1333, i64 0, i32 0
  %1364 = load float, float* %1363, align 4
  %1365 = fcmp une <8 x float> %1362, zeroinitializer
  %1366 = fcmp une <8 x float> %1362, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1367 = bitcast <8 x float> %1362 to <8 x i32>
  %1368 = sitofp <8 x i32> %1367 to <8 x float>
  %1369 = fmul <8 x float> %1368, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1370 = and <8 x i32> %1367, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1371 = or <8 x i32> %1370, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1372 = bitcast <8 x i32> %1371 to <8 x float>
  %1373 = fadd <8 x float> %1369, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1374 = fmul <8 x float> %1372, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1375 = fsub <8 x float> %1373, %1374
  %1376 = fadd <8 x float> %1372, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1377 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1376
  %1378 = fsub <8 x float> %1375, %1377
  %1379 = insertelement <8 x float> undef, float %1364, i32 0
  %1380 = shufflevector <8 x float> %1379, <8 x float> undef, <8 x i32> zeroinitializer
  %1381 = fmul <8 x float> %1380, %1378
  %1382 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1381, i32 1) #17
  %1383 = fsub <8 x float> %1381, %1382
  %1384 = fadd <8 x float> %1381, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1385 = fmul <8 x float> %1383, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1386 = fsub <8 x float> %1384, %1385
  %1387 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1383
  %1388 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1387
  %1389 = fadd <8 x float> %1386, %1388
  %1390 = fmul <8 x float> %1389, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1391 = fcmp olt <8 x float> %1390, zeroinitializer
  %1392 = select <8 x i1> %1391, <8 x float> zeroinitializer, <8 x float> %1390
  %1393 = fptosi <8 x float> %1392 to <8 x i32>
  %1394 = and <8 x i1> %1366, %1365
  %1395 = select <8 x i1> %1394, <8 x i32> %1393, <8 x i32> %1367
  %1396 = bitcast <8 x i32> %1395 to <8 x float>
  %1397 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1333, i64 0, i32 5
  %1398 = load float, float* %1397, align 4
  %1399 = insertelement <8 x float> undef, float %1398, i32 0
  %1400 = shufflevector <8 x float> %1399, <8 x float> undef, <8 x i32> zeroinitializer
  %1401 = fadd <8 x float> %1400, %1396
  %1402 = select <8 x i1> %1342, <8 x float> %1401, <8 x float> %1352
  %1403 = bitcast <8 x float> %1402 to <8 x i32>
  %1404 = or <8 x i32> %1335, %1403
  store <8 x i32> %1404, <8 x i32>* %17, align 32
  br label %3488

1405:                                             ; preds = %227
  %1406 = getelementptr inbounds i8*, i8** %228, i64 1
  %1407 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %1408 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1407, align 8
  %1409 = load <8 x i32>, <8 x i32>* %16, align 32
  %1410 = and <8 x i32> %1409, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1411 = and <8 x i32> %1409, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1412 = bitcast <8 x i32> %1411 to <8 x float>
  %1413 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1408, i64 0, i32 4
  %1414 = load float, float* %1413, align 4
  %1415 = insertelement <8 x float> undef, float %1414, i32 0
  %1416 = shufflevector <8 x float> %1415, <8 x float> undef, <8 x i32> zeroinitializer
  %1417 = fcmp ule <8 x float> %1416, %1412
  %1418 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1408, i64 0, i32 3
  %1419 = load float, float* %1418, align 4
  %1420 = insertelement <8 x float> undef, float %1419, i32 0
  %1421 = shufflevector <8 x float> %1420, <8 x float> undef, <8 x i32> zeroinitializer
  %1422 = fmul <8 x float> %1421, %1412
  %1423 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1408, i64 0, i32 6
  %1424 = load float, float* %1423, align 4
  %1425 = insertelement <8 x float> undef, float %1424, i32 0
  %1426 = shufflevector <8 x float> %1425, <8 x float> undef, <8 x i32> zeroinitializer
  %1427 = fadd <8 x float> %1422, %1426
  %1428 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1408, i64 0, i32 1
  %1429 = load float, float* %1428, align 4
  %1430 = insertelement <8 x float> undef, float %1429, i32 0
  %1431 = shufflevector <8 x float> %1430, <8 x float> undef, <8 x i32> zeroinitializer
  %1432 = fmul <8 x float> %1431, %1412
  %1433 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1408, i64 0, i32 2
  %1434 = load float, float* %1433, align 4
  %1435 = insertelement <8 x float> undef, float %1434, i32 0
  %1436 = shufflevector <8 x float> %1435, <8 x float> undef, <8 x i32> zeroinitializer
  %1437 = fadd <8 x float> %1432, %1436
  %1438 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1408, i64 0, i32 0
  %1439 = load float, float* %1438, align 4
  %1440 = fcmp une <8 x float> %1437, zeroinitializer
  %1441 = fcmp une <8 x float> %1437, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1442 = bitcast <8 x float> %1437 to <8 x i32>
  %1443 = sitofp <8 x i32> %1442 to <8 x float>
  %1444 = fmul <8 x float> %1443, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1445 = and <8 x i32> %1442, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1446 = or <8 x i32> %1445, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1447 = bitcast <8 x i32> %1446 to <8 x float>
  %1448 = fadd <8 x float> %1444, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1449 = fmul <8 x float> %1447, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1450 = fsub <8 x float> %1448, %1449
  %1451 = fadd <8 x float> %1447, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1452 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1451
  %1453 = fsub <8 x float> %1450, %1452
  %1454 = insertelement <8 x float> undef, float %1439, i32 0
  %1455 = shufflevector <8 x float> %1454, <8 x float> undef, <8 x i32> zeroinitializer
  %1456 = fmul <8 x float> %1455, %1453
  %1457 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1456, i32 1) #17
  %1458 = fsub <8 x float> %1456, %1457
  %1459 = fadd <8 x float> %1456, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1460 = fmul <8 x float> %1458, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1461 = fsub <8 x float> %1459, %1460
  %1462 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1458
  %1463 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1462
  %1464 = fadd <8 x float> %1461, %1463
  %1465 = fmul <8 x float> %1464, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1466 = fcmp olt <8 x float> %1465, zeroinitializer
  %1467 = select <8 x i1> %1466, <8 x float> zeroinitializer, <8 x float> %1465
  %1468 = fptosi <8 x float> %1467 to <8 x i32>
  %1469 = and <8 x i1> %1441, %1440
  %1470 = select <8 x i1> %1469, <8 x i32> %1468, <8 x i32> %1442
  %1471 = bitcast <8 x i32> %1470 to <8 x float>
  %1472 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1408, i64 0, i32 5
  %1473 = load float, float* %1472, align 4
  %1474 = insertelement <8 x float> undef, float %1473, i32 0
  %1475 = shufflevector <8 x float> %1474, <8 x float> undef, <8 x i32> zeroinitializer
  %1476 = fadd <8 x float> %1475, %1471
  %1477 = select <8 x i1> %1417, <8 x float> %1476, <8 x float> %1427
  %1478 = bitcast <8 x float> %1477 to <8 x i32>
  %1479 = or <8 x i32> %1410, %1478
  store <8 x i32> %1479, <8 x i32>* %16, align 32
  br label %3488

1480:                                             ; preds = %227
  %1481 = getelementptr inbounds i8*, i8** %228, i64 1
  %1482 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %1483 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1482, align 8
  %1484 = load <8 x i32>, <8 x i32>* %19, align 32
  %1485 = and <8 x i32> %1484, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1486 = and <8 x i32> %1484, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1487 = bitcast <8 x i32> %1486 to <8 x float>
  %1488 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1483, i64 0, i32 1
  %1489 = load float, float* %1488, align 4
  %1490 = insertelement <8 x float> undef, float %1489, i32 0
  %1491 = shufflevector <8 x float> %1490, <8 x float> undef, <8 x i32> zeroinitializer
  %1492 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1483, i64 0, i32 2
  %1493 = load float, float* %1492, align 4
  %1494 = insertelement <8 x float> undef, float %1493, i32 0
  %1495 = shufflevector <8 x float> %1494, <8 x float> undef, <8 x i32> zeroinitializer
  %1496 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1483, i64 0, i32 3
  %1497 = load float, float* %1496, align 4
  %1498 = fcmp une <8 x float> %1487, zeroinitializer
  %1499 = fcmp une <8 x float> %1487, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1500 = sitofp <8 x i32> %1486 to <8 x float>
  %1501 = fmul <8 x float> %1500, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1502 = and <8 x i32> %1484, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1503 = or <8 x i32> %1502, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1504 = bitcast <8 x i32> %1503 to <8 x float>
  %1505 = fadd <8 x float> %1501, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1506 = fmul <8 x float> %1504, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1507 = fsub <8 x float> %1505, %1506
  %1508 = fadd <8 x float> %1504, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1509 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1508
  %1510 = fsub <8 x float> %1507, %1509
  %1511 = insertelement <8 x float> undef, float %1497, i32 0
  %1512 = shufflevector <8 x float> %1511, <8 x float> undef, <8 x i32> zeroinitializer
  %1513 = fmul <8 x float> %1512, %1510
  %1514 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1513, i32 1) #17
  %1515 = fsub <8 x float> %1513, %1514
  %1516 = fadd <8 x float> %1513, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1517 = fmul <8 x float> %1515, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1518 = fsub <8 x float> %1516, %1517
  %1519 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1515
  %1520 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1519
  %1521 = fadd <8 x float> %1518, %1520
  %1522 = fmul <8 x float> %1521, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1523 = fcmp olt <8 x float> %1522, zeroinitializer
  %1524 = select <8 x i1> %1523, <8 x float> zeroinitializer, <8 x float> %1522
  %1525 = fptosi <8 x float> %1524 to <8 x i32>
  %1526 = and <8 x i1> %1499, %1498
  %1527 = select <8 x i1> %1526, <8 x i32> %1525, <8 x i32> %1486
  %1528 = bitcast <8 x i32> %1527 to <8 x float>
  %1529 = fmul <8 x float> %1495, %1528
  %1530 = fadd <8 x float> %1491, %1529
  %1531 = fcmp olt <8 x float> %1530, zeroinitializer
  %1532 = select <8 x i1> %1531, <8 x float> zeroinitializer, <8 x float> %1530
  %1533 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1483, i64 0, i32 4
  %1534 = load float, float* %1533, align 4
  %1535 = insertelement <8 x float> undef, float %1534, i32 0
  %1536 = shufflevector <8 x float> %1535, <8 x float> undef, <8 x i32> zeroinitializer
  %1537 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1483, i64 0, i32 5
  %1538 = load float, float* %1537, align 4
  %1539 = insertelement <8 x float> undef, float %1538, i32 0
  %1540 = shufflevector <8 x float> %1539, <8 x float> undef, <8 x i32> zeroinitializer
  %1541 = fmul <8 x float> %1540, %1528
  %1542 = fadd <8 x float> %1536, %1541
  %1543 = fdiv <8 x float> %1532, %1542
  %1544 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1483, i64 0, i32 6
  %1545 = load float, float* %1544, align 4
  %1546 = fcmp une <8 x float> %1543, zeroinitializer
  %1547 = fcmp une <8 x float> %1543, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1548 = bitcast <8 x float> %1543 to <8 x i32>
  %1549 = sitofp <8 x i32> %1548 to <8 x float>
  %1550 = fmul <8 x float> %1549, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1551 = and <8 x i32> %1548, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1552 = or <8 x i32> %1551, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1553 = bitcast <8 x i32> %1552 to <8 x float>
  %1554 = fadd <8 x float> %1550, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1555 = fmul <8 x float> %1553, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1556 = fsub <8 x float> %1554, %1555
  %1557 = fadd <8 x float> %1553, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1558 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1557
  %1559 = fsub <8 x float> %1556, %1558
  %1560 = insertelement <8 x float> undef, float %1545, i32 0
  %1561 = shufflevector <8 x float> %1560, <8 x float> undef, <8 x i32> zeroinitializer
  %1562 = fmul <8 x float> %1561, %1559
  %1563 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1562, i32 1) #17
  %1564 = fsub <8 x float> %1562, %1563
  %1565 = fadd <8 x float> %1562, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1566 = fmul <8 x float> %1564, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1567 = fsub <8 x float> %1565, %1566
  %1568 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1564
  %1569 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1568
  %1570 = fadd <8 x float> %1567, %1569
  %1571 = fmul <8 x float> %1570, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1572 = fcmp olt <8 x float> %1571, zeroinitializer
  %1573 = select <8 x i1> %1572, <8 x float> zeroinitializer, <8 x float> %1571
  %1574 = fptosi <8 x float> %1573 to <8 x i32>
  %1575 = and <8 x i1> %1547, %1546
  %1576 = select <8 x i1> %1575, <8 x i32> %1574, <8 x i32> %1548
  %1577 = or <8 x i32> %1576, %1485
  store <8 x i32> %1577, <8 x i32>* %19, align 32
  br label %3488

1578:                                             ; preds = %227
  %1579 = getelementptr inbounds i8*, i8** %228, i64 1
  %1580 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %1581 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1580, align 8
  %1582 = load <8 x i32>, <8 x i32>* %18, align 32
  %1583 = and <8 x i32> %1582, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1584 = and <8 x i32> %1582, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1585 = bitcast <8 x i32> %1584 to <8 x float>
  %1586 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1581, i64 0, i32 1
  %1587 = load float, float* %1586, align 4
  %1588 = insertelement <8 x float> undef, float %1587, i32 0
  %1589 = shufflevector <8 x float> %1588, <8 x float> undef, <8 x i32> zeroinitializer
  %1590 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1581, i64 0, i32 2
  %1591 = load float, float* %1590, align 4
  %1592 = insertelement <8 x float> undef, float %1591, i32 0
  %1593 = shufflevector <8 x float> %1592, <8 x float> undef, <8 x i32> zeroinitializer
  %1594 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1581, i64 0, i32 3
  %1595 = load float, float* %1594, align 4
  %1596 = fcmp une <8 x float> %1585, zeroinitializer
  %1597 = fcmp une <8 x float> %1585, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1598 = sitofp <8 x i32> %1584 to <8 x float>
  %1599 = fmul <8 x float> %1598, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1600 = and <8 x i32> %1582, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1601 = or <8 x i32> %1600, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1602 = bitcast <8 x i32> %1601 to <8 x float>
  %1603 = fadd <8 x float> %1599, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1604 = fmul <8 x float> %1602, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1605 = fsub <8 x float> %1603, %1604
  %1606 = fadd <8 x float> %1602, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1607 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1606
  %1608 = fsub <8 x float> %1605, %1607
  %1609 = insertelement <8 x float> undef, float %1595, i32 0
  %1610 = shufflevector <8 x float> %1609, <8 x float> undef, <8 x i32> zeroinitializer
  %1611 = fmul <8 x float> %1610, %1608
  %1612 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1611, i32 1) #17
  %1613 = fsub <8 x float> %1611, %1612
  %1614 = fadd <8 x float> %1611, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1615 = fmul <8 x float> %1613, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1616 = fsub <8 x float> %1614, %1615
  %1617 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1613
  %1618 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1617
  %1619 = fadd <8 x float> %1616, %1618
  %1620 = fmul <8 x float> %1619, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1621 = fcmp olt <8 x float> %1620, zeroinitializer
  %1622 = select <8 x i1> %1621, <8 x float> zeroinitializer, <8 x float> %1620
  %1623 = fptosi <8 x float> %1622 to <8 x i32>
  %1624 = and <8 x i1> %1597, %1596
  %1625 = select <8 x i1> %1624, <8 x i32> %1623, <8 x i32> %1584
  %1626 = bitcast <8 x i32> %1625 to <8 x float>
  %1627 = fmul <8 x float> %1593, %1626
  %1628 = fadd <8 x float> %1589, %1627
  %1629 = fcmp olt <8 x float> %1628, zeroinitializer
  %1630 = select <8 x i1> %1629, <8 x float> zeroinitializer, <8 x float> %1628
  %1631 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1581, i64 0, i32 4
  %1632 = load float, float* %1631, align 4
  %1633 = insertelement <8 x float> undef, float %1632, i32 0
  %1634 = shufflevector <8 x float> %1633, <8 x float> undef, <8 x i32> zeroinitializer
  %1635 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1581, i64 0, i32 5
  %1636 = load float, float* %1635, align 4
  %1637 = insertelement <8 x float> undef, float %1636, i32 0
  %1638 = shufflevector <8 x float> %1637, <8 x float> undef, <8 x i32> zeroinitializer
  %1639 = fmul <8 x float> %1638, %1626
  %1640 = fadd <8 x float> %1634, %1639
  %1641 = fdiv <8 x float> %1630, %1640
  %1642 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1581, i64 0, i32 6
  %1643 = load float, float* %1642, align 4
  %1644 = fcmp une <8 x float> %1641, zeroinitializer
  %1645 = fcmp une <8 x float> %1641, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1646 = bitcast <8 x float> %1641 to <8 x i32>
  %1647 = sitofp <8 x i32> %1646 to <8 x float>
  %1648 = fmul <8 x float> %1647, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1649 = and <8 x i32> %1646, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1650 = or <8 x i32> %1649, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1651 = bitcast <8 x i32> %1650 to <8 x float>
  %1652 = fadd <8 x float> %1648, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1653 = fmul <8 x float> %1651, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1654 = fsub <8 x float> %1652, %1653
  %1655 = fadd <8 x float> %1651, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1656 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1655
  %1657 = fsub <8 x float> %1654, %1656
  %1658 = insertelement <8 x float> undef, float %1643, i32 0
  %1659 = shufflevector <8 x float> %1658, <8 x float> undef, <8 x i32> zeroinitializer
  %1660 = fmul <8 x float> %1659, %1657
  %1661 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1660, i32 1) #17
  %1662 = fsub <8 x float> %1660, %1661
  %1663 = fadd <8 x float> %1660, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1664 = fmul <8 x float> %1662, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1665 = fsub <8 x float> %1663, %1664
  %1666 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1662
  %1667 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1666
  %1668 = fadd <8 x float> %1665, %1667
  %1669 = fmul <8 x float> %1668, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1670 = fcmp olt <8 x float> %1669, zeroinitializer
  %1671 = select <8 x i1> %1670, <8 x float> zeroinitializer, <8 x float> %1669
  %1672 = fptosi <8 x float> %1671 to <8 x i32>
  %1673 = and <8 x i1> %1645, %1644
  %1674 = select <8 x i1> %1673, <8 x i32> %1672, <8 x i32> %1646
  %1675 = or <8 x i32> %1674, %1583
  store <8 x i32> %1675, <8 x i32>* %18, align 32
  br label %3488

1676:                                             ; preds = %227
  %1677 = getelementptr inbounds i8*, i8** %228, i64 1
  %1678 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %1679 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1678, align 8
  %1680 = load <8 x i32>, <8 x i32>* %17, align 32
  %1681 = and <8 x i32> %1680, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1682 = and <8 x i32> %1680, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1683 = bitcast <8 x i32> %1682 to <8 x float>
  %1684 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1679, i64 0, i32 1
  %1685 = load float, float* %1684, align 4
  %1686 = insertelement <8 x float> undef, float %1685, i32 0
  %1687 = shufflevector <8 x float> %1686, <8 x float> undef, <8 x i32> zeroinitializer
  %1688 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1679, i64 0, i32 2
  %1689 = load float, float* %1688, align 4
  %1690 = insertelement <8 x float> undef, float %1689, i32 0
  %1691 = shufflevector <8 x float> %1690, <8 x float> undef, <8 x i32> zeroinitializer
  %1692 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1679, i64 0, i32 3
  %1693 = load float, float* %1692, align 4
  %1694 = fcmp une <8 x float> %1683, zeroinitializer
  %1695 = fcmp une <8 x float> %1683, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1696 = sitofp <8 x i32> %1682 to <8 x float>
  %1697 = fmul <8 x float> %1696, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1698 = and <8 x i32> %1680, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1699 = or <8 x i32> %1698, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1700 = bitcast <8 x i32> %1699 to <8 x float>
  %1701 = fadd <8 x float> %1697, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1702 = fmul <8 x float> %1700, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1703 = fsub <8 x float> %1701, %1702
  %1704 = fadd <8 x float> %1700, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1705 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1704
  %1706 = fsub <8 x float> %1703, %1705
  %1707 = insertelement <8 x float> undef, float %1693, i32 0
  %1708 = shufflevector <8 x float> %1707, <8 x float> undef, <8 x i32> zeroinitializer
  %1709 = fmul <8 x float> %1708, %1706
  %1710 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1709, i32 1) #17
  %1711 = fsub <8 x float> %1709, %1710
  %1712 = fadd <8 x float> %1709, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1713 = fmul <8 x float> %1711, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1714 = fsub <8 x float> %1712, %1713
  %1715 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1711
  %1716 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1715
  %1717 = fadd <8 x float> %1714, %1716
  %1718 = fmul <8 x float> %1717, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1719 = fcmp olt <8 x float> %1718, zeroinitializer
  %1720 = select <8 x i1> %1719, <8 x float> zeroinitializer, <8 x float> %1718
  %1721 = fptosi <8 x float> %1720 to <8 x i32>
  %1722 = and <8 x i1> %1695, %1694
  %1723 = select <8 x i1> %1722, <8 x i32> %1721, <8 x i32> %1682
  %1724 = bitcast <8 x i32> %1723 to <8 x float>
  %1725 = fmul <8 x float> %1691, %1724
  %1726 = fadd <8 x float> %1687, %1725
  %1727 = fcmp olt <8 x float> %1726, zeroinitializer
  %1728 = select <8 x i1> %1727, <8 x float> zeroinitializer, <8 x float> %1726
  %1729 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1679, i64 0, i32 4
  %1730 = load float, float* %1729, align 4
  %1731 = insertelement <8 x float> undef, float %1730, i32 0
  %1732 = shufflevector <8 x float> %1731, <8 x float> undef, <8 x i32> zeroinitializer
  %1733 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1679, i64 0, i32 5
  %1734 = load float, float* %1733, align 4
  %1735 = insertelement <8 x float> undef, float %1734, i32 0
  %1736 = shufflevector <8 x float> %1735, <8 x float> undef, <8 x i32> zeroinitializer
  %1737 = fmul <8 x float> %1736, %1724
  %1738 = fadd <8 x float> %1732, %1737
  %1739 = fdiv <8 x float> %1728, %1738
  %1740 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1679, i64 0, i32 6
  %1741 = load float, float* %1740, align 4
  %1742 = fcmp une <8 x float> %1739, zeroinitializer
  %1743 = fcmp une <8 x float> %1739, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1744 = bitcast <8 x float> %1739 to <8 x i32>
  %1745 = sitofp <8 x i32> %1744 to <8 x float>
  %1746 = fmul <8 x float> %1745, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1747 = and <8 x i32> %1744, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1748 = or <8 x i32> %1747, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1749 = bitcast <8 x i32> %1748 to <8 x float>
  %1750 = fadd <8 x float> %1746, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1751 = fmul <8 x float> %1749, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1752 = fsub <8 x float> %1750, %1751
  %1753 = fadd <8 x float> %1749, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1754 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1753
  %1755 = fsub <8 x float> %1752, %1754
  %1756 = insertelement <8 x float> undef, float %1741, i32 0
  %1757 = shufflevector <8 x float> %1756, <8 x float> undef, <8 x i32> zeroinitializer
  %1758 = fmul <8 x float> %1757, %1755
  %1759 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1758, i32 1) #17
  %1760 = fsub <8 x float> %1758, %1759
  %1761 = fadd <8 x float> %1758, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1762 = fmul <8 x float> %1760, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1763 = fsub <8 x float> %1761, %1762
  %1764 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1760
  %1765 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1764
  %1766 = fadd <8 x float> %1763, %1765
  %1767 = fmul <8 x float> %1766, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1768 = fcmp olt <8 x float> %1767, zeroinitializer
  %1769 = select <8 x i1> %1768, <8 x float> zeroinitializer, <8 x float> %1767
  %1770 = fptosi <8 x float> %1769 to <8 x i32>
  %1771 = and <8 x i1> %1743, %1742
  %1772 = select <8 x i1> %1771, <8 x i32> %1770, <8 x i32> %1744
  %1773 = or <8 x i32> %1772, %1681
  store <8 x i32> %1773, <8 x i32>* %17, align 32
  br label %3488

1774:                                             ; preds = %227
  %1775 = getelementptr inbounds i8*, i8** %228, i64 1
  %1776 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %1777 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1776, align 8
  %1778 = load <8 x i32>, <8 x i32>* %16, align 32
  %1779 = and <8 x i32> %1778, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1780 = and <8 x i32> %1778, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1781 = bitcast <8 x i32> %1780 to <8 x float>
  %1782 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1777, i64 0, i32 1
  %1783 = load float, float* %1782, align 4
  %1784 = insertelement <8 x float> undef, float %1783, i32 0
  %1785 = shufflevector <8 x float> %1784, <8 x float> undef, <8 x i32> zeroinitializer
  %1786 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1777, i64 0, i32 2
  %1787 = load float, float* %1786, align 4
  %1788 = insertelement <8 x float> undef, float %1787, i32 0
  %1789 = shufflevector <8 x float> %1788, <8 x float> undef, <8 x i32> zeroinitializer
  %1790 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1777, i64 0, i32 3
  %1791 = load float, float* %1790, align 4
  %1792 = fcmp une <8 x float> %1781, zeroinitializer
  %1793 = fcmp une <8 x float> %1781, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1794 = sitofp <8 x i32> %1780 to <8 x float>
  %1795 = fmul <8 x float> %1794, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1796 = and <8 x i32> %1778, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1797 = or <8 x i32> %1796, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1798 = bitcast <8 x i32> %1797 to <8 x float>
  %1799 = fadd <8 x float> %1795, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1800 = fmul <8 x float> %1798, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1801 = fsub <8 x float> %1799, %1800
  %1802 = fadd <8 x float> %1798, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1803 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1802
  %1804 = fsub <8 x float> %1801, %1803
  %1805 = insertelement <8 x float> undef, float %1791, i32 0
  %1806 = shufflevector <8 x float> %1805, <8 x float> undef, <8 x i32> zeroinitializer
  %1807 = fmul <8 x float> %1806, %1804
  %1808 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1807, i32 1) #17
  %1809 = fsub <8 x float> %1807, %1808
  %1810 = fadd <8 x float> %1807, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1811 = fmul <8 x float> %1809, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1812 = fsub <8 x float> %1810, %1811
  %1813 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1809
  %1814 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1813
  %1815 = fadd <8 x float> %1812, %1814
  %1816 = fmul <8 x float> %1815, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1817 = fcmp olt <8 x float> %1816, zeroinitializer
  %1818 = select <8 x i1> %1817, <8 x float> zeroinitializer, <8 x float> %1816
  %1819 = fptosi <8 x float> %1818 to <8 x i32>
  %1820 = and <8 x i1> %1793, %1792
  %1821 = select <8 x i1> %1820, <8 x i32> %1819, <8 x i32> %1780
  %1822 = bitcast <8 x i32> %1821 to <8 x float>
  %1823 = fmul <8 x float> %1789, %1822
  %1824 = fadd <8 x float> %1785, %1823
  %1825 = fcmp olt <8 x float> %1824, zeroinitializer
  %1826 = select <8 x i1> %1825, <8 x float> zeroinitializer, <8 x float> %1824
  %1827 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1777, i64 0, i32 4
  %1828 = load float, float* %1827, align 4
  %1829 = insertelement <8 x float> undef, float %1828, i32 0
  %1830 = shufflevector <8 x float> %1829, <8 x float> undef, <8 x i32> zeroinitializer
  %1831 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1777, i64 0, i32 5
  %1832 = load float, float* %1831, align 4
  %1833 = insertelement <8 x float> undef, float %1832, i32 0
  %1834 = shufflevector <8 x float> %1833, <8 x float> undef, <8 x i32> zeroinitializer
  %1835 = fmul <8 x float> %1834, %1822
  %1836 = fadd <8 x float> %1830, %1835
  %1837 = fdiv <8 x float> %1826, %1836
  %1838 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1777, i64 0, i32 6
  %1839 = load float, float* %1838, align 4
  %1840 = fcmp une <8 x float> %1837, zeroinitializer
  %1841 = fcmp une <8 x float> %1837, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1842 = bitcast <8 x float> %1837 to <8 x i32>
  %1843 = sitofp <8 x i32> %1842 to <8 x float>
  %1844 = fmul <8 x float> %1843, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1845 = and <8 x i32> %1842, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1846 = or <8 x i32> %1845, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1847 = bitcast <8 x i32> %1846 to <8 x float>
  %1848 = fadd <8 x float> %1844, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1849 = fmul <8 x float> %1847, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1850 = fsub <8 x float> %1848, %1849
  %1851 = fadd <8 x float> %1847, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1852 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1851
  %1853 = fsub <8 x float> %1850, %1852
  %1854 = insertelement <8 x float> undef, float %1839, i32 0
  %1855 = shufflevector <8 x float> %1854, <8 x float> undef, <8 x i32> zeroinitializer
  %1856 = fmul <8 x float> %1855, %1853
  %1857 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1856, i32 1) #17
  %1858 = fsub <8 x float> %1856, %1857
  %1859 = fadd <8 x float> %1856, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1860 = fmul <8 x float> %1858, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1861 = fsub <8 x float> %1859, %1860
  %1862 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1858
  %1863 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1862
  %1864 = fadd <8 x float> %1861, %1863
  %1865 = fmul <8 x float> %1864, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1866 = fcmp olt <8 x float> %1865, zeroinitializer
  %1867 = select <8 x i1> %1866, <8 x float> zeroinitializer, <8 x float> %1865
  %1868 = fptosi <8 x float> %1867 to <8 x i32>
  %1869 = and <8 x i1> %1841, %1840
  %1870 = select <8 x i1> %1869, <8 x i32> %1868, <8 x i32> %1842
  %1871 = or <8 x i32> %1870, %1779
  store <8 x i32> %1871, <8 x i32>* %16, align 32
  br label %3488

1872:                                             ; preds = %227
  %1873 = getelementptr inbounds i8*, i8** %228, i64 1
  %1874 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %1875 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1874, align 8
  %1876 = load <8 x i32>, <8 x i32>* %19, align 32
  %1877 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1875, i64 0, i32 1
  %1878 = load float, float* %1877, align 4
  %1879 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1875, i64 0, i32 2
  %1880 = load float, float* %1879, align 4
  %1881 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1875, i64 0, i32 3
  %1882 = load float, float* %1881, align 4
  %1883 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1875, i64 0, i32 4
  %1884 = load float, float* %1883, align 4
  %1885 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1875, i64 0, i32 5
  %1886 = load float, float* %1885, align 4
  %1887 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1875, i64 0, i32 6
  %1888 = load float, float* %1887, align 4
  %1889 = fadd float %1888, 1.000000e+00
  %1890 = and <8 x i32> %1876, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1891 = and <8 x i32> %1876, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1892 = bitcast <8 x i32> %1891 to <8 x float>
  %1893 = insertelement <8 x float> undef, float %1878, i32 0
  %1894 = shufflevector <8 x float> %1893, <8 x float> undef, <8 x i32> zeroinitializer
  %1895 = fmul <8 x float> %1894, %1892
  %1896 = fcmp ugt <8 x float> %1895, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1897 = fcmp une <8 x float> %1895, zeroinitializer
  %1898 = fcmp une <8 x float> %1895, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1899 = bitcast <8 x float> %1895 to <8 x i32>
  %1900 = sitofp <8 x i32> %1899 to <8 x float>
  %1901 = fmul <8 x float> %1900, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1902 = and <8 x i32> %1899, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1903 = or <8 x i32> %1902, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1904 = bitcast <8 x i32> %1903 to <8 x float>
  %1905 = fadd <8 x float> %1901, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1906 = fmul <8 x float> %1904, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1907 = fsub <8 x float> %1905, %1906
  %1908 = fadd <8 x float> %1904, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1909 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1908
  %1910 = fsub <8 x float> %1907, %1909
  %1911 = insertelement <8 x float> undef, float %1880, i32 0
  %1912 = shufflevector <8 x float> %1911, <8 x float> undef, <8 x i32> zeroinitializer
  %1913 = fmul <8 x float> %1912, %1910
  %1914 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1913, i32 1) #17
  %1915 = fsub <8 x float> %1913, %1914
  %1916 = fadd <8 x float> %1913, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1917 = fmul <8 x float> %1915, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1918 = fsub <8 x float> %1916, %1917
  %1919 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1915
  %1920 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1919
  %1921 = fadd <8 x float> %1918, %1920
  %1922 = fmul <8 x float> %1921, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1923 = fcmp olt <8 x float> %1922, zeroinitializer
  %1924 = select <8 x i1> %1923, <8 x float> zeroinitializer, <8 x float> %1922
  %1925 = fptosi <8 x float> %1924 to <8 x i32>
  %1926 = and <8 x i1> %1898, %1897
  %1927 = select <8 x i1> %1926, <8 x i32> %1925, <8 x i32> %1899
  %1928 = insertelement <8 x float> undef, float %1886, i32 0
  %1929 = shufflevector <8 x float> %1928, <8 x float> undef, <8 x i32> zeroinitializer
  %1930 = fsub <8 x float> %1892, %1929
  %1931 = insertelement <8 x float> undef, float %1882, i32 0
  %1932 = shufflevector <8 x float> %1931, <8 x float> undef, <8 x i32> zeroinitializer
  %1933 = fmul <8 x float> %1932, %1930
  %1934 = fmul <8 x float> %1933, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %1935 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1934, i32 1) #17
  %1936 = fsub <8 x float> %1934, %1935
  %1937 = fadd <8 x float> %1934, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1938 = fmul <8 x float> %1936, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1939 = fsub <8 x float> %1937, %1938
  %1940 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1936
  %1941 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1940
  %1942 = fadd <8 x float> %1939, %1941
  %1943 = fmul <8 x float> %1942, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1944 = fcmp olt <8 x float> %1943, zeroinitializer
  %1945 = select <8 x i1> %1944, <8 x float> zeroinitializer, <8 x float> %1943
  %1946 = fptosi <8 x float> %1945 to <8 x i32>
  %1947 = bitcast <8 x i32> %1946 to <8 x float>
  %1948 = insertelement <8 x float> undef, float %1884, i32 0
  %1949 = shufflevector <8 x float> %1948, <8 x float> undef, <8 x i32> zeroinitializer
  %1950 = fadd <8 x float> %1949, %1947
  %1951 = bitcast <8 x float> %1950 to <8 x i32>
  %1952 = select <8 x i1> %1896, <8 x i32> %1951, <8 x i32> %1927
  %1953 = insertelement <8 x float> undef, float %1889, i32 0
  %1954 = shufflevector <8 x float> %1953, <8 x float> undef, <8 x i32> zeroinitializer
  %1955 = or <8 x i32> %1952, %1890
  %1956 = bitcast <8 x i32> %1955 to <8 x float>
  %1957 = fmul <8 x float> %1954, %1956
  store <8 x float> %1957, <8 x float>* %7, align 32
  br label %3488

1958:                                             ; preds = %227
  %1959 = getelementptr inbounds i8*, i8** %228, i64 1
  %1960 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %1961 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1960, align 8
  %1962 = load <8 x i32>, <8 x i32>* %18, align 32
  %1963 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1961, i64 0, i32 1
  %1964 = load float, float* %1963, align 4
  %1965 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1961, i64 0, i32 2
  %1966 = load float, float* %1965, align 4
  %1967 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1961, i64 0, i32 3
  %1968 = load float, float* %1967, align 4
  %1969 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1961, i64 0, i32 4
  %1970 = load float, float* %1969, align 4
  %1971 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1961, i64 0, i32 5
  %1972 = load float, float* %1971, align 4
  %1973 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1961, i64 0, i32 6
  %1974 = load float, float* %1973, align 4
  %1975 = fadd float %1974, 1.000000e+00
  %1976 = and <8 x i32> %1962, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1977 = and <8 x i32> %1962, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1978 = bitcast <8 x i32> %1977 to <8 x float>
  %1979 = insertelement <8 x float> undef, float %1964, i32 0
  %1980 = shufflevector <8 x float> %1979, <8 x float> undef, <8 x i32> zeroinitializer
  %1981 = fmul <8 x float> %1980, %1978
  %1982 = fcmp ugt <8 x float> %1981, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1983 = fcmp une <8 x float> %1981, zeroinitializer
  %1984 = fcmp une <8 x float> %1981, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1985 = bitcast <8 x float> %1981 to <8 x i32>
  %1986 = sitofp <8 x i32> %1985 to <8 x float>
  %1987 = fmul <8 x float> %1986, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1988 = and <8 x i32> %1985, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1989 = or <8 x i32> %1988, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1990 = bitcast <8 x i32> %1989 to <8 x float>
  %1991 = fadd <8 x float> %1987, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1992 = fmul <8 x float> %1990, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1993 = fsub <8 x float> %1991, %1992
  %1994 = fadd <8 x float> %1990, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1995 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1994
  %1996 = fsub <8 x float> %1993, %1995
  %1997 = insertelement <8 x float> undef, float %1966, i32 0
  %1998 = shufflevector <8 x float> %1997, <8 x float> undef, <8 x i32> zeroinitializer
  %1999 = fmul <8 x float> %1998, %1996
  %2000 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1999, i32 1) #17
  %2001 = fsub <8 x float> %1999, %2000
  %2002 = fadd <8 x float> %1999, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2003 = fmul <8 x float> %2001, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2004 = fsub <8 x float> %2002, %2003
  %2005 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2001
  %2006 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2005
  %2007 = fadd <8 x float> %2004, %2006
  %2008 = fmul <8 x float> %2007, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2009 = fcmp olt <8 x float> %2008, zeroinitializer
  %2010 = select <8 x i1> %2009, <8 x float> zeroinitializer, <8 x float> %2008
  %2011 = fptosi <8 x float> %2010 to <8 x i32>
  %2012 = and <8 x i1> %1984, %1983
  %2013 = select <8 x i1> %2012, <8 x i32> %2011, <8 x i32> %1985
  %2014 = insertelement <8 x float> undef, float %1972, i32 0
  %2015 = shufflevector <8 x float> %2014, <8 x float> undef, <8 x i32> zeroinitializer
  %2016 = fsub <8 x float> %1978, %2015
  %2017 = insertelement <8 x float> undef, float %1968, i32 0
  %2018 = shufflevector <8 x float> %2017, <8 x float> undef, <8 x i32> zeroinitializer
  %2019 = fmul <8 x float> %2018, %2016
  %2020 = fmul <8 x float> %2019, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %2021 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2020, i32 1) #17
  %2022 = fsub <8 x float> %2020, %2021
  %2023 = fadd <8 x float> %2020, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2024 = fmul <8 x float> %2022, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2025 = fsub <8 x float> %2023, %2024
  %2026 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2022
  %2027 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2026
  %2028 = fadd <8 x float> %2025, %2027
  %2029 = fmul <8 x float> %2028, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2030 = fcmp olt <8 x float> %2029, zeroinitializer
  %2031 = select <8 x i1> %2030, <8 x float> zeroinitializer, <8 x float> %2029
  %2032 = fptosi <8 x float> %2031 to <8 x i32>
  %2033 = bitcast <8 x i32> %2032 to <8 x float>
  %2034 = insertelement <8 x float> undef, float %1970, i32 0
  %2035 = shufflevector <8 x float> %2034, <8 x float> undef, <8 x i32> zeroinitializer
  %2036 = fadd <8 x float> %2035, %2033
  %2037 = bitcast <8 x float> %2036 to <8 x i32>
  %2038 = select <8 x i1> %1982, <8 x i32> %2037, <8 x i32> %2013
  %2039 = insertelement <8 x float> undef, float %1975, i32 0
  %2040 = shufflevector <8 x float> %2039, <8 x float> undef, <8 x i32> zeroinitializer
  %2041 = or <8 x i32> %2038, %1976
  %2042 = bitcast <8 x i32> %2041 to <8 x float>
  %2043 = fmul <8 x float> %2040, %2042
  store <8 x float> %2043, <8 x float>* %8, align 32
  br label %3488

2044:                                             ; preds = %227
  %2045 = getelementptr inbounds i8*, i8** %228, i64 1
  %2046 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %2047 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2046, align 8
  %2048 = load <8 x i32>, <8 x i32>* %17, align 32
  %2049 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2047, i64 0, i32 1
  %2050 = load float, float* %2049, align 4
  %2051 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2047, i64 0, i32 2
  %2052 = load float, float* %2051, align 4
  %2053 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2047, i64 0, i32 3
  %2054 = load float, float* %2053, align 4
  %2055 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2047, i64 0, i32 4
  %2056 = load float, float* %2055, align 4
  %2057 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2047, i64 0, i32 5
  %2058 = load float, float* %2057, align 4
  %2059 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2047, i64 0, i32 6
  %2060 = load float, float* %2059, align 4
  %2061 = fadd float %2060, 1.000000e+00
  %2062 = and <8 x i32> %2048, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2063 = and <8 x i32> %2048, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2064 = bitcast <8 x i32> %2063 to <8 x float>
  %2065 = insertelement <8 x float> undef, float %2050, i32 0
  %2066 = shufflevector <8 x float> %2065, <8 x float> undef, <8 x i32> zeroinitializer
  %2067 = fmul <8 x float> %2066, %2064
  %2068 = fcmp ugt <8 x float> %2067, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2069 = fcmp une <8 x float> %2067, zeroinitializer
  %2070 = fcmp une <8 x float> %2067, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2071 = bitcast <8 x float> %2067 to <8 x i32>
  %2072 = sitofp <8 x i32> %2071 to <8 x float>
  %2073 = fmul <8 x float> %2072, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2074 = and <8 x i32> %2071, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2075 = or <8 x i32> %2074, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2076 = bitcast <8 x i32> %2075 to <8 x float>
  %2077 = fadd <8 x float> %2073, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2078 = fmul <8 x float> %2076, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2079 = fsub <8 x float> %2077, %2078
  %2080 = fadd <8 x float> %2076, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2081 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2080
  %2082 = fsub <8 x float> %2079, %2081
  %2083 = insertelement <8 x float> undef, float %2052, i32 0
  %2084 = shufflevector <8 x float> %2083, <8 x float> undef, <8 x i32> zeroinitializer
  %2085 = fmul <8 x float> %2084, %2082
  %2086 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2085, i32 1) #17
  %2087 = fsub <8 x float> %2085, %2086
  %2088 = fadd <8 x float> %2085, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2089 = fmul <8 x float> %2087, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2090 = fsub <8 x float> %2088, %2089
  %2091 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2087
  %2092 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2091
  %2093 = fadd <8 x float> %2090, %2092
  %2094 = fmul <8 x float> %2093, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2095 = fcmp olt <8 x float> %2094, zeroinitializer
  %2096 = select <8 x i1> %2095, <8 x float> zeroinitializer, <8 x float> %2094
  %2097 = fptosi <8 x float> %2096 to <8 x i32>
  %2098 = and <8 x i1> %2070, %2069
  %2099 = select <8 x i1> %2098, <8 x i32> %2097, <8 x i32> %2071
  %2100 = insertelement <8 x float> undef, float %2058, i32 0
  %2101 = shufflevector <8 x float> %2100, <8 x float> undef, <8 x i32> zeroinitializer
  %2102 = fsub <8 x float> %2064, %2101
  %2103 = insertelement <8 x float> undef, float %2054, i32 0
  %2104 = shufflevector <8 x float> %2103, <8 x float> undef, <8 x i32> zeroinitializer
  %2105 = fmul <8 x float> %2104, %2102
  %2106 = fmul <8 x float> %2105, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %2107 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2106, i32 1) #17
  %2108 = fsub <8 x float> %2106, %2107
  %2109 = fadd <8 x float> %2106, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2110 = fmul <8 x float> %2108, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2111 = fsub <8 x float> %2109, %2110
  %2112 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2108
  %2113 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2112
  %2114 = fadd <8 x float> %2111, %2113
  %2115 = fmul <8 x float> %2114, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2116 = fcmp olt <8 x float> %2115, zeroinitializer
  %2117 = select <8 x i1> %2116, <8 x float> zeroinitializer, <8 x float> %2115
  %2118 = fptosi <8 x float> %2117 to <8 x i32>
  %2119 = bitcast <8 x i32> %2118 to <8 x float>
  %2120 = insertelement <8 x float> undef, float %2056, i32 0
  %2121 = shufflevector <8 x float> %2120, <8 x float> undef, <8 x i32> zeroinitializer
  %2122 = fadd <8 x float> %2121, %2119
  %2123 = bitcast <8 x float> %2122 to <8 x i32>
  %2124 = select <8 x i1> %2068, <8 x i32> %2123, <8 x i32> %2099
  %2125 = insertelement <8 x float> undef, float %2061, i32 0
  %2126 = shufflevector <8 x float> %2125, <8 x float> undef, <8 x i32> zeroinitializer
  %2127 = or <8 x i32> %2124, %2062
  %2128 = bitcast <8 x i32> %2127 to <8 x float>
  %2129 = fmul <8 x float> %2126, %2128
  store <8 x float> %2129, <8 x float>* %9, align 32
  br label %3488

2130:                                             ; preds = %227
  %2131 = getelementptr inbounds i8*, i8** %228, i64 1
  %2132 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %2133 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2132, align 8
  %2134 = load <8 x i32>, <8 x i32>* %16, align 32
  %2135 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2133, i64 0, i32 1
  %2136 = load float, float* %2135, align 4
  %2137 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2133, i64 0, i32 2
  %2138 = load float, float* %2137, align 4
  %2139 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2133, i64 0, i32 3
  %2140 = load float, float* %2139, align 4
  %2141 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2133, i64 0, i32 4
  %2142 = load float, float* %2141, align 4
  %2143 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2133, i64 0, i32 5
  %2144 = load float, float* %2143, align 4
  %2145 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2133, i64 0, i32 6
  %2146 = load float, float* %2145, align 4
  %2147 = fadd float %2146, 1.000000e+00
  %2148 = and <8 x i32> %2134, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2149 = and <8 x i32> %2134, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2150 = bitcast <8 x i32> %2149 to <8 x float>
  %2151 = insertelement <8 x float> undef, float %2136, i32 0
  %2152 = shufflevector <8 x float> %2151, <8 x float> undef, <8 x i32> zeroinitializer
  %2153 = fmul <8 x float> %2152, %2150
  %2154 = fcmp ugt <8 x float> %2153, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2155 = fcmp une <8 x float> %2153, zeroinitializer
  %2156 = fcmp une <8 x float> %2153, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2157 = bitcast <8 x float> %2153 to <8 x i32>
  %2158 = sitofp <8 x i32> %2157 to <8 x float>
  %2159 = fmul <8 x float> %2158, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2160 = and <8 x i32> %2157, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2161 = or <8 x i32> %2160, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2162 = bitcast <8 x i32> %2161 to <8 x float>
  %2163 = fadd <8 x float> %2159, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2164 = fmul <8 x float> %2162, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2165 = fsub <8 x float> %2163, %2164
  %2166 = fadd <8 x float> %2162, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2167 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2166
  %2168 = fsub <8 x float> %2165, %2167
  %2169 = insertelement <8 x float> undef, float %2138, i32 0
  %2170 = shufflevector <8 x float> %2169, <8 x float> undef, <8 x i32> zeroinitializer
  %2171 = fmul <8 x float> %2170, %2168
  %2172 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2171, i32 1) #17
  %2173 = fsub <8 x float> %2171, %2172
  %2174 = fadd <8 x float> %2171, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2175 = fmul <8 x float> %2173, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2176 = fsub <8 x float> %2174, %2175
  %2177 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2173
  %2178 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2177
  %2179 = fadd <8 x float> %2176, %2178
  %2180 = fmul <8 x float> %2179, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2181 = fcmp olt <8 x float> %2180, zeroinitializer
  %2182 = select <8 x i1> %2181, <8 x float> zeroinitializer, <8 x float> %2180
  %2183 = fptosi <8 x float> %2182 to <8 x i32>
  %2184 = and <8 x i1> %2156, %2155
  %2185 = select <8 x i1> %2184, <8 x i32> %2183, <8 x i32> %2157
  %2186 = insertelement <8 x float> undef, float %2144, i32 0
  %2187 = shufflevector <8 x float> %2186, <8 x float> undef, <8 x i32> zeroinitializer
  %2188 = fsub <8 x float> %2150, %2187
  %2189 = insertelement <8 x float> undef, float %2140, i32 0
  %2190 = shufflevector <8 x float> %2189, <8 x float> undef, <8 x i32> zeroinitializer
  %2191 = fmul <8 x float> %2190, %2188
  %2192 = fmul <8 x float> %2191, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %2193 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2192, i32 1) #17
  %2194 = fsub <8 x float> %2192, %2193
  %2195 = fadd <8 x float> %2192, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2196 = fmul <8 x float> %2194, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2197 = fsub <8 x float> %2195, %2196
  %2198 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2194
  %2199 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2198
  %2200 = fadd <8 x float> %2197, %2199
  %2201 = fmul <8 x float> %2200, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2202 = fcmp olt <8 x float> %2201, zeroinitializer
  %2203 = select <8 x i1> %2202, <8 x float> zeroinitializer, <8 x float> %2201
  %2204 = fptosi <8 x float> %2203 to <8 x i32>
  %2205 = bitcast <8 x i32> %2204 to <8 x float>
  %2206 = insertelement <8 x float> undef, float %2142, i32 0
  %2207 = shufflevector <8 x float> %2206, <8 x float> undef, <8 x i32> zeroinitializer
  %2208 = fadd <8 x float> %2207, %2205
  %2209 = bitcast <8 x float> %2208 to <8 x i32>
  %2210 = select <8 x i1> %2154, <8 x i32> %2209, <8 x i32> %2185
  %2211 = insertelement <8 x float> undef, float %2147, i32 0
  %2212 = shufflevector <8 x float> %2211, <8 x float> undef, <8 x i32> zeroinitializer
  %2213 = or <8 x i32> %2210, %2148
  %2214 = bitcast <8 x i32> %2213 to <8 x float>
  %2215 = fmul <8 x float> %2212, %2214
  store <8 x float> %2215, <8 x float>* %10, align 32
  br label %3488

2216:                                             ; preds = %227
  %2217 = getelementptr inbounds i8*, i8** %228, i64 1
  %2218 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %2219 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2218, align 8
  %2220 = load <8 x i32>, <8 x i32>* %19, align 32
  %2221 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2219, i64 0, i32 1
  %2222 = load float, float* %2221, align 4
  %2223 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2219, i64 0, i32 2
  %2224 = load float, float* %2223, align 4
  %2225 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2219, i64 0, i32 3
  %2226 = load float, float* %2225, align 4
  %2227 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2219, i64 0, i32 4
  %2228 = load float, float* %2227, align 4
  %2229 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2219, i64 0, i32 5
  %2230 = load float, float* %2229, align 4
  %2231 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2219, i64 0, i32 6
  %2232 = load float, float* %2231, align 4
  %2233 = fadd float %2232, 1.000000e+00
  %2234 = and <8 x i32> %2220, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2235 = and <8 x i32> %2220, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2236 = bitcast <8 x i32> %2235 to <8 x float>
  %2237 = insertelement <8 x float> undef, float %2233, i32 0
  %2238 = shufflevector <8 x float> %2237, <8 x float> undef, <8 x i32> zeroinitializer
  %2239 = fdiv <8 x float> %2236, %2238
  %2240 = bitcast <8 x float> %2239 to <8 x i32>
  %2241 = fcmp ugt <8 x float> %2239, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2242 = insertelement <8 x float> undef, float %2222, i32 0
  %2243 = shufflevector <8 x float> %2242, <8 x float> undef, <8 x i32> zeroinitializer
  %2244 = fcmp une <8 x float> %2239, zeroinitializer
  %2245 = fcmp une <8 x float> %2239, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2246 = sitofp <8 x i32> %2240 to <8 x float>
  %2247 = fmul <8 x float> %2246, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2248 = and <8 x i32> %2240, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2249 = or <8 x i32> %2248, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2250 = bitcast <8 x i32> %2249 to <8 x float>
  %2251 = fadd <8 x float> %2247, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2252 = fmul <8 x float> %2250, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2253 = fsub <8 x float> %2251, %2252
  %2254 = fadd <8 x float> %2250, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2255 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2254
  %2256 = fsub <8 x float> %2253, %2255
  %2257 = insertelement <8 x float> undef, float %2224, i32 0
  %2258 = shufflevector <8 x float> %2257, <8 x float> undef, <8 x i32> zeroinitializer
  %2259 = fmul <8 x float> %2258, %2256
  %2260 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2259, i32 1) #17
  %2261 = fsub <8 x float> %2259, %2260
  %2262 = fadd <8 x float> %2259, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2263 = fmul <8 x float> %2261, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2264 = fsub <8 x float> %2262, %2263
  %2265 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2261
  %2266 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2265
  %2267 = fadd <8 x float> %2264, %2266
  %2268 = fmul <8 x float> %2267, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2269 = fcmp olt <8 x float> %2268, zeroinitializer
  %2270 = select <8 x i1> %2269, <8 x float> zeroinitializer, <8 x float> %2268
  %2271 = fptosi <8 x float> %2270 to <8 x i32>
  %2272 = and <8 x i1> %2245, %2244
  %2273 = select <8 x i1> %2272, <8 x i32> %2271, <8 x i32> %2240
  %2274 = bitcast <8 x i32> %2273 to <8 x float>
  %2275 = fmul <8 x float> %2243, %2274
  %2276 = insertelement <8 x float> undef, float %2226, i32 0
  %2277 = shufflevector <8 x float> %2276, <8 x float> undef, <8 x i32> zeroinitializer
  %2278 = insertelement <8 x float> undef, float %2228, i32 0
  %2279 = shufflevector <8 x float> %2278, <8 x float> undef, <8 x i32> zeroinitializer
  %2280 = fsub <8 x float> %2239, %2279
  %2281 = bitcast <8 x float> %2280 to <8 x i32>
  %2282 = sitofp <8 x i32> %2281 to <8 x float>
  %2283 = fmul <8 x float> %2282, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2284 = and <8 x i32> %2281, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2285 = or <8 x i32> %2284, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2286 = bitcast <8 x i32> %2285 to <8 x float>
  %2287 = fadd <8 x float> %2283, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2288 = fmul <8 x float> %2286, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2289 = fsub <8 x float> %2287, %2288
  %2290 = fadd <8 x float> %2286, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2291 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2290
  %2292 = fsub <8 x float> %2289, %2291
  %2293 = fmul <8 x float> %2292, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %2294 = fmul <8 x float> %2277, %2293
  %2295 = insertelement <8 x float> undef, float %2230, i32 0
  %2296 = shufflevector <8 x float> %2295, <8 x float> undef, <8 x i32> zeroinitializer
  %2297 = fadd <8 x float> %2296, %2294
  %2298 = select <8 x i1> %2241, <8 x float> %2297, <8 x float> %2275
  %2299 = bitcast <8 x float> %2298 to <8 x i32>
  %2300 = or <8 x i32> %2234, %2299
  store <8 x i32> %2300, <8 x i32>* %19, align 32
  br label %3488

2301:                                             ; preds = %227
  %2302 = getelementptr inbounds i8*, i8** %228, i64 1
  %2303 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %2304 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2303, align 8
  %2305 = load <8 x i32>, <8 x i32>* %18, align 32
  %2306 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2304, i64 0, i32 1
  %2307 = load float, float* %2306, align 4
  %2308 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2304, i64 0, i32 2
  %2309 = load float, float* %2308, align 4
  %2310 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2304, i64 0, i32 3
  %2311 = load float, float* %2310, align 4
  %2312 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2304, i64 0, i32 4
  %2313 = load float, float* %2312, align 4
  %2314 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2304, i64 0, i32 5
  %2315 = load float, float* %2314, align 4
  %2316 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2304, i64 0, i32 6
  %2317 = load float, float* %2316, align 4
  %2318 = fadd float %2317, 1.000000e+00
  %2319 = and <8 x i32> %2305, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2320 = and <8 x i32> %2305, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2321 = bitcast <8 x i32> %2320 to <8 x float>
  %2322 = insertelement <8 x float> undef, float %2318, i32 0
  %2323 = shufflevector <8 x float> %2322, <8 x float> undef, <8 x i32> zeroinitializer
  %2324 = fdiv <8 x float> %2321, %2323
  %2325 = bitcast <8 x float> %2324 to <8 x i32>
  %2326 = fcmp ugt <8 x float> %2324, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2327 = insertelement <8 x float> undef, float %2307, i32 0
  %2328 = shufflevector <8 x float> %2327, <8 x float> undef, <8 x i32> zeroinitializer
  %2329 = fcmp une <8 x float> %2324, zeroinitializer
  %2330 = fcmp une <8 x float> %2324, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2331 = sitofp <8 x i32> %2325 to <8 x float>
  %2332 = fmul <8 x float> %2331, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2333 = and <8 x i32> %2325, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2334 = or <8 x i32> %2333, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2335 = bitcast <8 x i32> %2334 to <8 x float>
  %2336 = fadd <8 x float> %2332, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2337 = fmul <8 x float> %2335, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2338 = fsub <8 x float> %2336, %2337
  %2339 = fadd <8 x float> %2335, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2340 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2339
  %2341 = fsub <8 x float> %2338, %2340
  %2342 = insertelement <8 x float> undef, float %2309, i32 0
  %2343 = shufflevector <8 x float> %2342, <8 x float> undef, <8 x i32> zeroinitializer
  %2344 = fmul <8 x float> %2343, %2341
  %2345 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2344, i32 1) #17
  %2346 = fsub <8 x float> %2344, %2345
  %2347 = fadd <8 x float> %2344, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2348 = fmul <8 x float> %2346, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2349 = fsub <8 x float> %2347, %2348
  %2350 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2346
  %2351 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2350
  %2352 = fadd <8 x float> %2349, %2351
  %2353 = fmul <8 x float> %2352, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2354 = fcmp olt <8 x float> %2353, zeroinitializer
  %2355 = select <8 x i1> %2354, <8 x float> zeroinitializer, <8 x float> %2353
  %2356 = fptosi <8 x float> %2355 to <8 x i32>
  %2357 = and <8 x i1> %2330, %2329
  %2358 = select <8 x i1> %2357, <8 x i32> %2356, <8 x i32> %2325
  %2359 = bitcast <8 x i32> %2358 to <8 x float>
  %2360 = fmul <8 x float> %2328, %2359
  %2361 = insertelement <8 x float> undef, float %2311, i32 0
  %2362 = shufflevector <8 x float> %2361, <8 x float> undef, <8 x i32> zeroinitializer
  %2363 = insertelement <8 x float> undef, float %2313, i32 0
  %2364 = shufflevector <8 x float> %2363, <8 x float> undef, <8 x i32> zeroinitializer
  %2365 = fsub <8 x float> %2324, %2364
  %2366 = bitcast <8 x float> %2365 to <8 x i32>
  %2367 = sitofp <8 x i32> %2366 to <8 x float>
  %2368 = fmul <8 x float> %2367, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2369 = and <8 x i32> %2366, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2370 = or <8 x i32> %2369, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2371 = bitcast <8 x i32> %2370 to <8 x float>
  %2372 = fadd <8 x float> %2368, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2373 = fmul <8 x float> %2371, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2374 = fsub <8 x float> %2372, %2373
  %2375 = fadd <8 x float> %2371, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2376 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2375
  %2377 = fsub <8 x float> %2374, %2376
  %2378 = fmul <8 x float> %2377, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %2379 = fmul <8 x float> %2362, %2378
  %2380 = insertelement <8 x float> undef, float %2315, i32 0
  %2381 = shufflevector <8 x float> %2380, <8 x float> undef, <8 x i32> zeroinitializer
  %2382 = fadd <8 x float> %2381, %2379
  %2383 = select <8 x i1> %2326, <8 x float> %2382, <8 x float> %2360
  %2384 = bitcast <8 x float> %2383 to <8 x i32>
  %2385 = or <8 x i32> %2319, %2384
  store <8 x i32> %2385, <8 x i32>* %18, align 32
  br label %3488

2386:                                             ; preds = %227
  %2387 = getelementptr inbounds i8*, i8** %228, i64 1
  %2388 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %2389 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2388, align 8
  %2390 = load <8 x i32>, <8 x i32>* %17, align 32
  %2391 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2389, i64 0, i32 1
  %2392 = load float, float* %2391, align 4
  %2393 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2389, i64 0, i32 2
  %2394 = load float, float* %2393, align 4
  %2395 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2389, i64 0, i32 3
  %2396 = load float, float* %2395, align 4
  %2397 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2389, i64 0, i32 4
  %2398 = load float, float* %2397, align 4
  %2399 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2389, i64 0, i32 5
  %2400 = load float, float* %2399, align 4
  %2401 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2389, i64 0, i32 6
  %2402 = load float, float* %2401, align 4
  %2403 = fadd float %2402, 1.000000e+00
  %2404 = and <8 x i32> %2390, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2405 = and <8 x i32> %2390, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2406 = bitcast <8 x i32> %2405 to <8 x float>
  %2407 = insertelement <8 x float> undef, float %2403, i32 0
  %2408 = shufflevector <8 x float> %2407, <8 x float> undef, <8 x i32> zeroinitializer
  %2409 = fdiv <8 x float> %2406, %2408
  %2410 = bitcast <8 x float> %2409 to <8 x i32>
  %2411 = fcmp ugt <8 x float> %2409, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2412 = insertelement <8 x float> undef, float %2392, i32 0
  %2413 = shufflevector <8 x float> %2412, <8 x float> undef, <8 x i32> zeroinitializer
  %2414 = fcmp une <8 x float> %2409, zeroinitializer
  %2415 = fcmp une <8 x float> %2409, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2416 = sitofp <8 x i32> %2410 to <8 x float>
  %2417 = fmul <8 x float> %2416, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2418 = and <8 x i32> %2410, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2419 = or <8 x i32> %2418, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2420 = bitcast <8 x i32> %2419 to <8 x float>
  %2421 = fadd <8 x float> %2417, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2422 = fmul <8 x float> %2420, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2423 = fsub <8 x float> %2421, %2422
  %2424 = fadd <8 x float> %2420, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2425 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2424
  %2426 = fsub <8 x float> %2423, %2425
  %2427 = insertelement <8 x float> undef, float %2394, i32 0
  %2428 = shufflevector <8 x float> %2427, <8 x float> undef, <8 x i32> zeroinitializer
  %2429 = fmul <8 x float> %2428, %2426
  %2430 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2429, i32 1) #17
  %2431 = fsub <8 x float> %2429, %2430
  %2432 = fadd <8 x float> %2429, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2433 = fmul <8 x float> %2431, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2434 = fsub <8 x float> %2432, %2433
  %2435 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2431
  %2436 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2435
  %2437 = fadd <8 x float> %2434, %2436
  %2438 = fmul <8 x float> %2437, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2439 = fcmp olt <8 x float> %2438, zeroinitializer
  %2440 = select <8 x i1> %2439, <8 x float> zeroinitializer, <8 x float> %2438
  %2441 = fptosi <8 x float> %2440 to <8 x i32>
  %2442 = and <8 x i1> %2415, %2414
  %2443 = select <8 x i1> %2442, <8 x i32> %2441, <8 x i32> %2410
  %2444 = bitcast <8 x i32> %2443 to <8 x float>
  %2445 = fmul <8 x float> %2413, %2444
  %2446 = insertelement <8 x float> undef, float %2396, i32 0
  %2447 = shufflevector <8 x float> %2446, <8 x float> undef, <8 x i32> zeroinitializer
  %2448 = insertelement <8 x float> undef, float %2398, i32 0
  %2449 = shufflevector <8 x float> %2448, <8 x float> undef, <8 x i32> zeroinitializer
  %2450 = fsub <8 x float> %2409, %2449
  %2451 = bitcast <8 x float> %2450 to <8 x i32>
  %2452 = sitofp <8 x i32> %2451 to <8 x float>
  %2453 = fmul <8 x float> %2452, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2454 = and <8 x i32> %2451, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2455 = or <8 x i32> %2454, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2456 = bitcast <8 x i32> %2455 to <8 x float>
  %2457 = fadd <8 x float> %2453, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2458 = fmul <8 x float> %2456, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2459 = fsub <8 x float> %2457, %2458
  %2460 = fadd <8 x float> %2456, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2461 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2460
  %2462 = fsub <8 x float> %2459, %2461
  %2463 = fmul <8 x float> %2462, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %2464 = fmul <8 x float> %2447, %2463
  %2465 = insertelement <8 x float> undef, float %2400, i32 0
  %2466 = shufflevector <8 x float> %2465, <8 x float> undef, <8 x i32> zeroinitializer
  %2467 = fadd <8 x float> %2466, %2464
  %2468 = select <8 x i1> %2411, <8 x float> %2467, <8 x float> %2445
  %2469 = bitcast <8 x float> %2468 to <8 x i32>
  %2470 = or <8 x i32> %2404, %2469
  store <8 x i32> %2470, <8 x i32>* %17, align 32
  br label %3488

2471:                                             ; preds = %227
  %2472 = getelementptr inbounds i8*, i8** %228, i64 1
  %2473 = bitcast i8** %228 to %struct.skcms_TransferFunction**
  %2474 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2473, align 8
  %2475 = load <8 x i32>, <8 x i32>* %16, align 32
  %2476 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2474, i64 0, i32 1
  %2477 = load float, float* %2476, align 4
  %2478 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2474, i64 0, i32 2
  %2479 = load float, float* %2478, align 4
  %2480 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2474, i64 0, i32 3
  %2481 = load float, float* %2480, align 4
  %2482 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2474, i64 0, i32 4
  %2483 = load float, float* %2482, align 4
  %2484 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2474, i64 0, i32 5
  %2485 = load float, float* %2484, align 4
  %2486 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2474, i64 0, i32 6
  %2487 = load float, float* %2486, align 4
  %2488 = fadd float %2487, 1.000000e+00
  %2489 = and <8 x i32> %2475, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2490 = and <8 x i32> %2475, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2491 = bitcast <8 x i32> %2490 to <8 x float>
  %2492 = insertelement <8 x float> undef, float %2488, i32 0
  %2493 = shufflevector <8 x float> %2492, <8 x float> undef, <8 x i32> zeroinitializer
  %2494 = fdiv <8 x float> %2491, %2493
  %2495 = bitcast <8 x float> %2494 to <8 x i32>
  %2496 = fcmp ugt <8 x float> %2494, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2497 = insertelement <8 x float> undef, float %2477, i32 0
  %2498 = shufflevector <8 x float> %2497, <8 x float> undef, <8 x i32> zeroinitializer
  %2499 = fcmp une <8 x float> %2494, zeroinitializer
  %2500 = fcmp une <8 x float> %2494, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2501 = sitofp <8 x i32> %2495 to <8 x float>
  %2502 = fmul <8 x float> %2501, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2503 = and <8 x i32> %2495, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2504 = or <8 x i32> %2503, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2505 = bitcast <8 x i32> %2504 to <8 x float>
  %2506 = fadd <8 x float> %2502, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2507 = fmul <8 x float> %2505, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2508 = fsub <8 x float> %2506, %2507
  %2509 = fadd <8 x float> %2505, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2510 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2509
  %2511 = fsub <8 x float> %2508, %2510
  %2512 = insertelement <8 x float> undef, float %2479, i32 0
  %2513 = shufflevector <8 x float> %2512, <8 x float> undef, <8 x i32> zeroinitializer
  %2514 = fmul <8 x float> %2513, %2511
  %2515 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2514, i32 1) #17
  %2516 = fsub <8 x float> %2514, %2515
  %2517 = fadd <8 x float> %2514, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2518 = fmul <8 x float> %2516, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2519 = fsub <8 x float> %2517, %2518
  %2520 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2516
  %2521 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2520
  %2522 = fadd <8 x float> %2519, %2521
  %2523 = fmul <8 x float> %2522, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2524 = fcmp olt <8 x float> %2523, zeroinitializer
  %2525 = select <8 x i1> %2524, <8 x float> zeroinitializer, <8 x float> %2523
  %2526 = fptosi <8 x float> %2525 to <8 x i32>
  %2527 = and <8 x i1> %2500, %2499
  %2528 = select <8 x i1> %2527, <8 x i32> %2526, <8 x i32> %2495
  %2529 = bitcast <8 x i32> %2528 to <8 x float>
  %2530 = fmul <8 x float> %2498, %2529
  %2531 = insertelement <8 x float> undef, float %2481, i32 0
  %2532 = shufflevector <8 x float> %2531, <8 x float> undef, <8 x i32> zeroinitializer
  %2533 = insertelement <8 x float> undef, float %2483, i32 0
  %2534 = shufflevector <8 x float> %2533, <8 x float> undef, <8 x i32> zeroinitializer
  %2535 = fsub <8 x float> %2494, %2534
  %2536 = bitcast <8 x float> %2535 to <8 x i32>
  %2537 = sitofp <8 x i32> %2536 to <8 x float>
  %2538 = fmul <8 x float> %2537, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2539 = and <8 x i32> %2536, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2540 = or <8 x i32> %2539, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2541 = bitcast <8 x i32> %2540 to <8 x float>
  %2542 = fadd <8 x float> %2538, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2543 = fmul <8 x float> %2541, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2544 = fsub <8 x float> %2542, %2543
  %2545 = fadd <8 x float> %2541, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2546 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2545
  %2547 = fsub <8 x float> %2544, %2546
  %2548 = fmul <8 x float> %2547, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %2549 = fmul <8 x float> %2532, %2548
  %2550 = insertelement <8 x float> undef, float %2485, i32 0
  %2551 = shufflevector <8 x float> %2550, <8 x float> undef, <8 x i32> zeroinitializer
  %2552 = fadd <8 x float> %2551, %2549
  %2553 = select <8 x i1> %2496, <8 x float> %2552, <8 x float> %2530
  %2554 = bitcast <8 x float> %2553 to <8 x i32>
  %2555 = or <8 x i32> %2489, %2554
  store <8 x i32> %2555, <8 x i32>* %16, align 32
  br label %3488

2556:                                             ; preds = %227
  %2557 = getelementptr inbounds i8*, i8** %228, i64 1
  %2558 = bitcast i8** %228 to %union.skcms_Curve**
  %2559 = load %union.skcms_Curve*, %union.skcms_Curve** %2558, align 8
  %2560 = load <8 x float>, <8 x float>* %7, align 32
  %2561 = fcmp ogt <8 x float> %2560, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2562 = select <8 x i1> %2561, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2560
  %2563 = fcmp ogt <8 x float> %2562, zeroinitializer
  %2564 = select <8 x i1> %2563, <8 x float> %2562, <8 x float> zeroinitializer
  %2565 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2559, i64 0, i32 0, i32 0
  %2566 = load i32, i32* %2565, align 8
  %2567 = add i32 %2566, -1
  %2568 = uitofp i32 %2567 to float
  %2569 = insertelement <8 x float> undef, float %2568, i32 0
  %2570 = shufflevector <8 x float> %2569, <8 x float> undef, <8 x i32> zeroinitializer
  %2571 = fmul <8 x float> %2564, %2570
  %2572 = fptosi <8 x float> %2571 to <8 x i32>
  %2573 = fadd <8 x float> %2571, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2574 = bitcast <8 x float> %2573 to <8 x i32>
  %2575 = add <8 x i32> %2574, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %2576 = bitcast <8 x i32> %2575 to <8 x float>
  %2577 = fptosi <8 x float> %2576 to <8 x i32>
  %2578 = sitofp <8 x i32> %2572 to <8 x float>
  %2579 = fsub <8 x float> %2571, %2578
  %2580 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2559, i64 0, i32 0, i32 1
  %2581 = load i8*, i8** %2580, align 8
  %2582 = icmp eq i8* %2581, null
  br i1 %2582, label %2668, label %2583

2583:                                             ; preds = %2556
  %2584 = extractelement <8 x i32> %2572, i32 0
  %2585 = sext i32 %2584 to i64
  %2586 = getelementptr inbounds i8, i8* %2581, i64 %2585
  %2587 = load i8, i8* %2586, align 1
  %2588 = insertelement <8 x i8> undef, i8 %2587, i32 0
  %2589 = extractelement <8 x i32> %2572, i32 1
  %2590 = sext i32 %2589 to i64
  %2591 = getelementptr inbounds i8, i8* %2581, i64 %2590
  %2592 = load i8, i8* %2591, align 1
  %2593 = insertelement <8 x i8> %2588, i8 %2592, i32 1
  %2594 = extractelement <8 x i32> %2572, i32 2
  %2595 = sext i32 %2594 to i64
  %2596 = getelementptr inbounds i8, i8* %2581, i64 %2595
  %2597 = load i8, i8* %2596, align 1
  %2598 = insertelement <8 x i8> %2593, i8 %2597, i32 2
  %2599 = extractelement <8 x i32> %2572, i32 3
  %2600 = sext i32 %2599 to i64
  %2601 = getelementptr inbounds i8, i8* %2581, i64 %2600
  %2602 = load i8, i8* %2601, align 1
  %2603 = insertelement <8 x i8> %2598, i8 %2602, i32 3
  %2604 = extractelement <8 x i32> %2572, i32 4
  %2605 = sext i32 %2604 to i64
  %2606 = getelementptr inbounds i8, i8* %2581, i64 %2605
  %2607 = load i8, i8* %2606, align 1
  %2608 = insertelement <8 x i8> %2603, i8 %2607, i32 4
  %2609 = extractelement <8 x i32> %2572, i32 5
  %2610 = sext i32 %2609 to i64
  %2611 = getelementptr inbounds i8, i8* %2581, i64 %2610
  %2612 = load i8, i8* %2611, align 1
  %2613 = insertelement <8 x i8> %2608, i8 %2612, i32 5
  %2614 = extractelement <8 x i32> %2572, i32 6
  %2615 = sext i32 %2614 to i64
  %2616 = getelementptr inbounds i8, i8* %2581, i64 %2615
  %2617 = load i8, i8* %2616, align 1
  %2618 = insertelement <8 x i8> %2613, i8 %2617, i32 6
  %2619 = extractelement <8 x i32> %2572, i32 7
  %2620 = sext i32 %2619 to i64
  %2621 = getelementptr inbounds i8, i8* %2581, i64 %2620
  %2622 = load i8, i8* %2621, align 1
  %2623 = insertelement <8 x i8> %2618, i8 %2622, i32 7
  %2624 = uitofp <8 x i8> %2623 to <8 x float>
  %2625 = fmul <8 x float> %2624, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2626 = extractelement <8 x i32> %2577, i32 0
  %2627 = sext i32 %2626 to i64
  %2628 = getelementptr inbounds i8, i8* %2581, i64 %2627
  %2629 = load i8, i8* %2628, align 1
  %2630 = insertelement <8 x i8> undef, i8 %2629, i32 0
  %2631 = extractelement <8 x i32> %2577, i32 1
  %2632 = sext i32 %2631 to i64
  %2633 = getelementptr inbounds i8, i8* %2581, i64 %2632
  %2634 = load i8, i8* %2633, align 1
  %2635 = insertelement <8 x i8> %2630, i8 %2634, i32 1
  %2636 = extractelement <8 x i32> %2577, i32 2
  %2637 = sext i32 %2636 to i64
  %2638 = getelementptr inbounds i8, i8* %2581, i64 %2637
  %2639 = load i8, i8* %2638, align 1
  %2640 = insertelement <8 x i8> %2635, i8 %2639, i32 2
  %2641 = extractelement <8 x i32> %2577, i32 3
  %2642 = sext i32 %2641 to i64
  %2643 = getelementptr inbounds i8, i8* %2581, i64 %2642
  %2644 = load i8, i8* %2643, align 1
  %2645 = insertelement <8 x i8> %2640, i8 %2644, i32 3
  %2646 = extractelement <8 x i32> %2577, i32 4
  %2647 = sext i32 %2646 to i64
  %2648 = getelementptr inbounds i8, i8* %2581, i64 %2647
  %2649 = load i8, i8* %2648, align 1
  %2650 = insertelement <8 x i8> %2645, i8 %2649, i32 4
  %2651 = extractelement <8 x i32> %2577, i32 5
  %2652 = sext i32 %2651 to i64
  %2653 = getelementptr inbounds i8, i8* %2581, i64 %2652
  %2654 = load i8, i8* %2653, align 1
  %2655 = insertelement <8 x i8> %2650, i8 %2654, i32 5
  %2656 = extractelement <8 x i32> %2577, i32 6
  %2657 = sext i32 %2656 to i64
  %2658 = getelementptr inbounds i8, i8* %2581, i64 %2657
  %2659 = load i8, i8* %2658, align 1
  %2660 = insertelement <8 x i8> %2655, i8 %2659, i32 6
  %2661 = extractelement <8 x i32> %2577, i32 7
  %2662 = sext i32 %2661 to i64
  %2663 = getelementptr inbounds i8, i8* %2581, i64 %2662
  %2664 = load i8, i8* %2663, align 1
  %2665 = insertelement <8 x i8> %2660, i8 %2664, i32 7
  %2666 = uitofp <8 x i8> %2665 to <8 x float>
  %2667 = fmul <8 x float> %2666, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %2779

2668:                                             ; preds = %2556
  %2669 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2559, i64 0, i32 0, i32 2
  %2670 = load i8*, i8** %2669, align 8
  %2671 = shl nsw <8 x i32> %2572, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2672 = extractelement <8 x i32> %2671, i32 0
  %2673 = sext i32 %2672 to i64
  %2674 = getelementptr inbounds i8, i8* %2670, i64 %2673
  %2675 = bitcast i8* %2674 to i16*
  %2676 = load i16, i16* %2675, align 1
  %2677 = insertelement <8 x i16> undef, i16 %2676, i32 0
  %2678 = extractelement <8 x i32> %2671, i32 1
  %2679 = sext i32 %2678 to i64
  %2680 = getelementptr inbounds i8, i8* %2670, i64 %2679
  %2681 = bitcast i8* %2680 to i16*
  %2682 = load i16, i16* %2681, align 1
  %2683 = insertelement <8 x i16> %2677, i16 %2682, i32 1
  %2684 = extractelement <8 x i32> %2671, i32 2
  %2685 = sext i32 %2684 to i64
  %2686 = getelementptr inbounds i8, i8* %2670, i64 %2685
  %2687 = bitcast i8* %2686 to i16*
  %2688 = load i16, i16* %2687, align 1
  %2689 = insertelement <8 x i16> %2683, i16 %2688, i32 2
  %2690 = extractelement <8 x i32> %2671, i32 3
  %2691 = sext i32 %2690 to i64
  %2692 = getelementptr inbounds i8, i8* %2670, i64 %2691
  %2693 = bitcast i8* %2692 to i16*
  %2694 = load i16, i16* %2693, align 1
  %2695 = insertelement <8 x i16> %2689, i16 %2694, i32 3
  %2696 = extractelement <8 x i32> %2671, i32 4
  %2697 = sext i32 %2696 to i64
  %2698 = getelementptr inbounds i8, i8* %2670, i64 %2697
  %2699 = bitcast i8* %2698 to i16*
  %2700 = load i16, i16* %2699, align 1
  %2701 = insertelement <8 x i16> %2695, i16 %2700, i32 4
  %2702 = extractelement <8 x i32> %2671, i32 5
  %2703 = sext i32 %2702 to i64
  %2704 = getelementptr inbounds i8, i8* %2670, i64 %2703
  %2705 = bitcast i8* %2704 to i16*
  %2706 = load i16, i16* %2705, align 1
  %2707 = insertelement <8 x i16> %2701, i16 %2706, i32 5
  %2708 = extractelement <8 x i32> %2671, i32 6
  %2709 = sext i32 %2708 to i64
  %2710 = getelementptr inbounds i8, i8* %2670, i64 %2709
  %2711 = bitcast i8* %2710 to i16*
  %2712 = load i16, i16* %2711, align 1
  %2713 = insertelement <8 x i16> %2707, i16 %2712, i32 6
  %2714 = extractelement <8 x i32> %2671, i32 7
  %2715 = sext i32 %2714 to i64
  %2716 = getelementptr inbounds i8, i8* %2670, i64 %2715
  %2717 = bitcast i8* %2716 to i16*
  %2718 = load i16, i16* %2717, align 1
  %2719 = insertelement <8 x i16> %2713, i16 %2718, i32 7
  %2720 = lshr <8 x i16> %2719, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %2721 = shl <8 x i16> %2719, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %2722 = or <8 x i16> %2720, %2721
  %2723 = uitofp <8 x i16> %2722 to <8 x float>
  %2724 = fmul <8 x float> %2723, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %2725 = shl nsw <8 x i32> %2577, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2726 = extractelement <8 x i32> %2725, i32 0
  %2727 = sext i32 %2726 to i64
  %2728 = getelementptr inbounds i8, i8* %2670, i64 %2727
  %2729 = bitcast i8* %2728 to i16*
  %2730 = load i16, i16* %2729, align 1
  %2731 = insertelement <8 x i16> undef, i16 %2730, i32 0
  %2732 = extractelement <8 x i32> %2725, i32 1
  %2733 = sext i32 %2732 to i64
  %2734 = getelementptr inbounds i8, i8* %2670, i64 %2733
  %2735 = bitcast i8* %2734 to i16*
  %2736 = load i16, i16* %2735, align 1
  %2737 = insertelement <8 x i16> %2731, i16 %2736, i32 1
  %2738 = extractelement <8 x i32> %2725, i32 2
  %2739 = sext i32 %2738 to i64
  %2740 = getelementptr inbounds i8, i8* %2670, i64 %2739
  %2741 = bitcast i8* %2740 to i16*
  %2742 = load i16, i16* %2741, align 1
  %2743 = insertelement <8 x i16> %2737, i16 %2742, i32 2
  %2744 = extractelement <8 x i32> %2725, i32 3
  %2745 = sext i32 %2744 to i64
  %2746 = getelementptr inbounds i8, i8* %2670, i64 %2745
  %2747 = bitcast i8* %2746 to i16*
  %2748 = load i16, i16* %2747, align 1
  %2749 = insertelement <8 x i16> %2743, i16 %2748, i32 3
  %2750 = extractelement <8 x i32> %2725, i32 4
  %2751 = sext i32 %2750 to i64
  %2752 = getelementptr inbounds i8, i8* %2670, i64 %2751
  %2753 = bitcast i8* %2752 to i16*
  %2754 = load i16, i16* %2753, align 1
  %2755 = insertelement <8 x i16> %2749, i16 %2754, i32 4
  %2756 = extractelement <8 x i32> %2725, i32 5
  %2757 = sext i32 %2756 to i64
  %2758 = getelementptr inbounds i8, i8* %2670, i64 %2757
  %2759 = bitcast i8* %2758 to i16*
  %2760 = load i16, i16* %2759, align 1
  %2761 = insertelement <8 x i16> %2755, i16 %2760, i32 5
  %2762 = extractelement <8 x i32> %2725, i32 6
  %2763 = sext i32 %2762 to i64
  %2764 = getelementptr inbounds i8, i8* %2670, i64 %2763
  %2765 = bitcast i8* %2764 to i16*
  %2766 = load i16, i16* %2765, align 1
  %2767 = insertelement <8 x i16> %2761, i16 %2766, i32 6
  %2768 = extractelement <8 x i32> %2725, i32 7
  %2769 = sext i32 %2768 to i64
  %2770 = getelementptr inbounds i8, i8* %2670, i64 %2769
  %2771 = bitcast i8* %2770 to i16*
  %2772 = load i16, i16* %2771, align 1
  %2773 = insertelement <8 x i16> %2767, i16 %2772, i32 7
  %2774 = lshr <8 x i16> %2773, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %2775 = shl <8 x i16> %2773, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %2776 = or <8 x i16> %2774, %2775
  %2777 = uitofp <8 x i16> %2776 to <8 x float>
  %2778 = fmul <8 x float> %2777, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %2779

2779:                                             ; preds = %2583, %2668
  %2780 = phi <8 x float> [ %2667, %2583 ], [ %2778, %2668 ]
  %2781 = phi <8 x float> [ %2625, %2583 ], [ %2724, %2668 ]
  %2782 = fsub <8 x float> %2780, %2781
  %2783 = fmul <8 x float> %2579, %2782
  %2784 = fadd <8 x float> %2781, %2783
  store <8 x float> %2784, <8 x float>* %7, align 32
  br label %3488

2785:                                             ; preds = %227
  %2786 = getelementptr inbounds i8*, i8** %228, i64 1
  %2787 = bitcast i8** %228 to %union.skcms_Curve**
  %2788 = load %union.skcms_Curve*, %union.skcms_Curve** %2787, align 8
  %2789 = load <8 x float>, <8 x float>* %8, align 32
  %2790 = fcmp ogt <8 x float> %2789, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2791 = select <8 x i1> %2790, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %2789
  %2792 = fcmp ogt <8 x float> %2791, zeroinitializer
  %2793 = select <8 x i1> %2792, <8 x float> %2791, <8 x float> zeroinitializer
  %2794 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2788, i64 0, i32 0, i32 0
  %2795 = load i32, i32* %2794, align 8
  %2796 = add i32 %2795, -1
  %2797 = uitofp i32 %2796 to float
  %2798 = insertelement <8 x float> undef, float %2797, i32 0
  %2799 = shufflevector <8 x float> %2798, <8 x float> undef, <8 x i32> zeroinitializer
  %2800 = fmul <8 x float> %2793, %2799
  %2801 = fptosi <8 x float> %2800 to <8 x i32>
  %2802 = fadd <8 x float> %2800, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2803 = bitcast <8 x float> %2802 to <8 x i32>
  %2804 = add <8 x i32> %2803, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %2805 = bitcast <8 x i32> %2804 to <8 x float>
  %2806 = fptosi <8 x float> %2805 to <8 x i32>
  %2807 = sitofp <8 x i32> %2801 to <8 x float>
  %2808 = fsub <8 x float> %2800, %2807
  %2809 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2788, i64 0, i32 0, i32 1
  %2810 = load i8*, i8** %2809, align 8
  %2811 = icmp eq i8* %2810, null
  br i1 %2811, label %2897, label %2812

2812:                                             ; preds = %2785
  %2813 = extractelement <8 x i32> %2801, i32 0
  %2814 = sext i32 %2813 to i64
  %2815 = getelementptr inbounds i8, i8* %2810, i64 %2814
  %2816 = load i8, i8* %2815, align 1
  %2817 = insertelement <8 x i8> undef, i8 %2816, i32 0
  %2818 = extractelement <8 x i32> %2801, i32 1
  %2819 = sext i32 %2818 to i64
  %2820 = getelementptr inbounds i8, i8* %2810, i64 %2819
  %2821 = load i8, i8* %2820, align 1
  %2822 = insertelement <8 x i8> %2817, i8 %2821, i32 1
  %2823 = extractelement <8 x i32> %2801, i32 2
  %2824 = sext i32 %2823 to i64
  %2825 = getelementptr inbounds i8, i8* %2810, i64 %2824
  %2826 = load i8, i8* %2825, align 1
  %2827 = insertelement <8 x i8> %2822, i8 %2826, i32 2
  %2828 = extractelement <8 x i32> %2801, i32 3
  %2829 = sext i32 %2828 to i64
  %2830 = getelementptr inbounds i8, i8* %2810, i64 %2829
  %2831 = load i8, i8* %2830, align 1
  %2832 = insertelement <8 x i8> %2827, i8 %2831, i32 3
  %2833 = extractelement <8 x i32> %2801, i32 4
  %2834 = sext i32 %2833 to i64
  %2835 = getelementptr inbounds i8, i8* %2810, i64 %2834
  %2836 = load i8, i8* %2835, align 1
  %2837 = insertelement <8 x i8> %2832, i8 %2836, i32 4
  %2838 = extractelement <8 x i32> %2801, i32 5
  %2839 = sext i32 %2838 to i64
  %2840 = getelementptr inbounds i8, i8* %2810, i64 %2839
  %2841 = load i8, i8* %2840, align 1
  %2842 = insertelement <8 x i8> %2837, i8 %2841, i32 5
  %2843 = extractelement <8 x i32> %2801, i32 6
  %2844 = sext i32 %2843 to i64
  %2845 = getelementptr inbounds i8, i8* %2810, i64 %2844
  %2846 = load i8, i8* %2845, align 1
  %2847 = insertelement <8 x i8> %2842, i8 %2846, i32 6
  %2848 = extractelement <8 x i32> %2801, i32 7
  %2849 = sext i32 %2848 to i64
  %2850 = getelementptr inbounds i8, i8* %2810, i64 %2849
  %2851 = load i8, i8* %2850, align 1
  %2852 = insertelement <8 x i8> %2847, i8 %2851, i32 7
  %2853 = uitofp <8 x i8> %2852 to <8 x float>
  %2854 = fmul <8 x float> %2853, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2855 = extractelement <8 x i32> %2806, i32 0
  %2856 = sext i32 %2855 to i64
  %2857 = getelementptr inbounds i8, i8* %2810, i64 %2856
  %2858 = load i8, i8* %2857, align 1
  %2859 = insertelement <8 x i8> undef, i8 %2858, i32 0
  %2860 = extractelement <8 x i32> %2806, i32 1
  %2861 = sext i32 %2860 to i64
  %2862 = getelementptr inbounds i8, i8* %2810, i64 %2861
  %2863 = load i8, i8* %2862, align 1
  %2864 = insertelement <8 x i8> %2859, i8 %2863, i32 1
  %2865 = extractelement <8 x i32> %2806, i32 2
  %2866 = sext i32 %2865 to i64
  %2867 = getelementptr inbounds i8, i8* %2810, i64 %2866
  %2868 = load i8, i8* %2867, align 1
  %2869 = insertelement <8 x i8> %2864, i8 %2868, i32 2
  %2870 = extractelement <8 x i32> %2806, i32 3
  %2871 = sext i32 %2870 to i64
  %2872 = getelementptr inbounds i8, i8* %2810, i64 %2871
  %2873 = load i8, i8* %2872, align 1
  %2874 = insertelement <8 x i8> %2869, i8 %2873, i32 3
  %2875 = extractelement <8 x i32> %2806, i32 4
  %2876 = sext i32 %2875 to i64
  %2877 = getelementptr inbounds i8, i8* %2810, i64 %2876
  %2878 = load i8, i8* %2877, align 1
  %2879 = insertelement <8 x i8> %2874, i8 %2878, i32 4
  %2880 = extractelement <8 x i32> %2806, i32 5
  %2881 = sext i32 %2880 to i64
  %2882 = getelementptr inbounds i8, i8* %2810, i64 %2881
  %2883 = load i8, i8* %2882, align 1
  %2884 = insertelement <8 x i8> %2879, i8 %2883, i32 5
  %2885 = extractelement <8 x i32> %2806, i32 6
  %2886 = sext i32 %2885 to i64
  %2887 = getelementptr inbounds i8, i8* %2810, i64 %2886
  %2888 = load i8, i8* %2887, align 1
  %2889 = insertelement <8 x i8> %2884, i8 %2888, i32 6
  %2890 = extractelement <8 x i32> %2806, i32 7
  %2891 = sext i32 %2890 to i64
  %2892 = getelementptr inbounds i8, i8* %2810, i64 %2891
  %2893 = load i8, i8* %2892, align 1
  %2894 = insertelement <8 x i8> %2889, i8 %2893, i32 7
  %2895 = uitofp <8 x i8> %2894 to <8 x float>
  %2896 = fmul <8 x float> %2895, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %3008

2897:                                             ; preds = %2785
  %2898 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %2788, i64 0, i32 0, i32 2
  %2899 = load i8*, i8** %2898, align 8
  %2900 = shl nsw <8 x i32> %2801, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2901 = extractelement <8 x i32> %2900, i32 0
  %2902 = sext i32 %2901 to i64
  %2903 = getelementptr inbounds i8, i8* %2899, i64 %2902
  %2904 = bitcast i8* %2903 to i16*
  %2905 = load i16, i16* %2904, align 1
  %2906 = insertelement <8 x i16> undef, i16 %2905, i32 0
  %2907 = extractelement <8 x i32> %2900, i32 1
  %2908 = sext i32 %2907 to i64
  %2909 = getelementptr inbounds i8, i8* %2899, i64 %2908
  %2910 = bitcast i8* %2909 to i16*
  %2911 = load i16, i16* %2910, align 1
  %2912 = insertelement <8 x i16> %2906, i16 %2911, i32 1
  %2913 = extractelement <8 x i32> %2900, i32 2
  %2914 = sext i32 %2913 to i64
  %2915 = getelementptr inbounds i8, i8* %2899, i64 %2914
  %2916 = bitcast i8* %2915 to i16*
  %2917 = load i16, i16* %2916, align 1
  %2918 = insertelement <8 x i16> %2912, i16 %2917, i32 2
  %2919 = extractelement <8 x i32> %2900, i32 3
  %2920 = sext i32 %2919 to i64
  %2921 = getelementptr inbounds i8, i8* %2899, i64 %2920
  %2922 = bitcast i8* %2921 to i16*
  %2923 = load i16, i16* %2922, align 1
  %2924 = insertelement <8 x i16> %2918, i16 %2923, i32 3
  %2925 = extractelement <8 x i32> %2900, i32 4
  %2926 = sext i32 %2925 to i64
  %2927 = getelementptr inbounds i8, i8* %2899, i64 %2926
  %2928 = bitcast i8* %2927 to i16*
  %2929 = load i16, i16* %2928, align 1
  %2930 = insertelement <8 x i16> %2924, i16 %2929, i32 4
  %2931 = extractelement <8 x i32> %2900, i32 5
  %2932 = sext i32 %2931 to i64
  %2933 = getelementptr inbounds i8, i8* %2899, i64 %2932
  %2934 = bitcast i8* %2933 to i16*
  %2935 = load i16, i16* %2934, align 1
  %2936 = insertelement <8 x i16> %2930, i16 %2935, i32 5
  %2937 = extractelement <8 x i32> %2900, i32 6
  %2938 = sext i32 %2937 to i64
  %2939 = getelementptr inbounds i8, i8* %2899, i64 %2938
  %2940 = bitcast i8* %2939 to i16*
  %2941 = load i16, i16* %2940, align 1
  %2942 = insertelement <8 x i16> %2936, i16 %2941, i32 6
  %2943 = extractelement <8 x i32> %2900, i32 7
  %2944 = sext i32 %2943 to i64
  %2945 = getelementptr inbounds i8, i8* %2899, i64 %2944
  %2946 = bitcast i8* %2945 to i16*
  %2947 = load i16, i16* %2946, align 1
  %2948 = insertelement <8 x i16> %2942, i16 %2947, i32 7
  %2949 = lshr <8 x i16> %2948, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %2950 = shl <8 x i16> %2948, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %2951 = or <8 x i16> %2949, %2950
  %2952 = uitofp <8 x i16> %2951 to <8 x float>
  %2953 = fmul <8 x float> %2952, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %2954 = shl nsw <8 x i32> %2806, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2955 = extractelement <8 x i32> %2954, i32 0
  %2956 = sext i32 %2955 to i64
  %2957 = getelementptr inbounds i8, i8* %2899, i64 %2956
  %2958 = bitcast i8* %2957 to i16*
  %2959 = load i16, i16* %2958, align 1
  %2960 = insertelement <8 x i16> undef, i16 %2959, i32 0
  %2961 = extractelement <8 x i32> %2954, i32 1
  %2962 = sext i32 %2961 to i64
  %2963 = getelementptr inbounds i8, i8* %2899, i64 %2962
  %2964 = bitcast i8* %2963 to i16*
  %2965 = load i16, i16* %2964, align 1
  %2966 = insertelement <8 x i16> %2960, i16 %2965, i32 1
  %2967 = extractelement <8 x i32> %2954, i32 2
  %2968 = sext i32 %2967 to i64
  %2969 = getelementptr inbounds i8, i8* %2899, i64 %2968
  %2970 = bitcast i8* %2969 to i16*
  %2971 = load i16, i16* %2970, align 1
  %2972 = insertelement <8 x i16> %2966, i16 %2971, i32 2
  %2973 = extractelement <8 x i32> %2954, i32 3
  %2974 = sext i32 %2973 to i64
  %2975 = getelementptr inbounds i8, i8* %2899, i64 %2974
  %2976 = bitcast i8* %2975 to i16*
  %2977 = load i16, i16* %2976, align 1
  %2978 = insertelement <8 x i16> %2972, i16 %2977, i32 3
  %2979 = extractelement <8 x i32> %2954, i32 4
  %2980 = sext i32 %2979 to i64
  %2981 = getelementptr inbounds i8, i8* %2899, i64 %2980
  %2982 = bitcast i8* %2981 to i16*
  %2983 = load i16, i16* %2982, align 1
  %2984 = insertelement <8 x i16> %2978, i16 %2983, i32 4
  %2985 = extractelement <8 x i32> %2954, i32 5
  %2986 = sext i32 %2985 to i64
  %2987 = getelementptr inbounds i8, i8* %2899, i64 %2986
  %2988 = bitcast i8* %2987 to i16*
  %2989 = load i16, i16* %2988, align 1
  %2990 = insertelement <8 x i16> %2984, i16 %2989, i32 5
  %2991 = extractelement <8 x i32> %2954, i32 6
  %2992 = sext i32 %2991 to i64
  %2993 = getelementptr inbounds i8, i8* %2899, i64 %2992
  %2994 = bitcast i8* %2993 to i16*
  %2995 = load i16, i16* %2994, align 1
  %2996 = insertelement <8 x i16> %2990, i16 %2995, i32 6
  %2997 = extractelement <8 x i32> %2954, i32 7
  %2998 = sext i32 %2997 to i64
  %2999 = getelementptr inbounds i8, i8* %2899, i64 %2998
  %3000 = bitcast i8* %2999 to i16*
  %3001 = load i16, i16* %3000, align 1
  %3002 = insertelement <8 x i16> %2996, i16 %3001, i32 7
  %3003 = lshr <8 x i16> %3002, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3004 = shl <8 x i16> %3002, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3005 = or <8 x i16> %3003, %3004
  %3006 = uitofp <8 x i16> %3005 to <8 x float>
  %3007 = fmul <8 x float> %3006, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %3008

3008:                                             ; preds = %2812, %2897
  %3009 = phi <8 x float> [ %2896, %2812 ], [ %3007, %2897 ]
  %3010 = phi <8 x float> [ %2854, %2812 ], [ %2953, %2897 ]
  %3011 = fsub <8 x float> %3009, %3010
  %3012 = fmul <8 x float> %2808, %3011
  %3013 = fadd <8 x float> %3010, %3012
  store <8 x float> %3013, <8 x float>* %8, align 32
  br label %3488

3014:                                             ; preds = %227
  %3015 = getelementptr inbounds i8*, i8** %228, i64 1
  %3016 = bitcast i8** %228 to %union.skcms_Curve**
  %3017 = load %union.skcms_Curve*, %union.skcms_Curve** %3016, align 8
  %3018 = load <8 x float>, <8 x float>* %9, align 32
  %3019 = fcmp ogt <8 x float> %3018, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3020 = select <8 x i1> %3019, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3018
  %3021 = fcmp ogt <8 x float> %3020, zeroinitializer
  %3022 = select <8 x i1> %3021, <8 x float> %3020, <8 x float> zeroinitializer
  %3023 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %3017, i64 0, i32 0, i32 0
  %3024 = load i32, i32* %3023, align 8
  %3025 = add i32 %3024, -1
  %3026 = uitofp i32 %3025 to float
  %3027 = insertelement <8 x float> undef, float %3026, i32 0
  %3028 = shufflevector <8 x float> %3027, <8 x float> undef, <8 x i32> zeroinitializer
  %3029 = fmul <8 x float> %3022, %3028
  %3030 = fptosi <8 x float> %3029 to <8 x i32>
  %3031 = fadd <8 x float> %3029, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3032 = bitcast <8 x float> %3031 to <8 x i32>
  %3033 = add <8 x i32> %3032, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %3034 = bitcast <8 x i32> %3033 to <8 x float>
  %3035 = fptosi <8 x float> %3034 to <8 x i32>
  %3036 = sitofp <8 x i32> %3030 to <8 x float>
  %3037 = fsub <8 x float> %3029, %3036
  %3038 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %3017, i64 0, i32 0, i32 1
  %3039 = load i8*, i8** %3038, align 8
  %3040 = icmp eq i8* %3039, null
  br i1 %3040, label %3126, label %3041

3041:                                             ; preds = %3014
  %3042 = extractelement <8 x i32> %3030, i32 0
  %3043 = sext i32 %3042 to i64
  %3044 = getelementptr inbounds i8, i8* %3039, i64 %3043
  %3045 = load i8, i8* %3044, align 1
  %3046 = insertelement <8 x i8> undef, i8 %3045, i32 0
  %3047 = extractelement <8 x i32> %3030, i32 1
  %3048 = sext i32 %3047 to i64
  %3049 = getelementptr inbounds i8, i8* %3039, i64 %3048
  %3050 = load i8, i8* %3049, align 1
  %3051 = insertelement <8 x i8> %3046, i8 %3050, i32 1
  %3052 = extractelement <8 x i32> %3030, i32 2
  %3053 = sext i32 %3052 to i64
  %3054 = getelementptr inbounds i8, i8* %3039, i64 %3053
  %3055 = load i8, i8* %3054, align 1
  %3056 = insertelement <8 x i8> %3051, i8 %3055, i32 2
  %3057 = extractelement <8 x i32> %3030, i32 3
  %3058 = sext i32 %3057 to i64
  %3059 = getelementptr inbounds i8, i8* %3039, i64 %3058
  %3060 = load i8, i8* %3059, align 1
  %3061 = insertelement <8 x i8> %3056, i8 %3060, i32 3
  %3062 = extractelement <8 x i32> %3030, i32 4
  %3063 = sext i32 %3062 to i64
  %3064 = getelementptr inbounds i8, i8* %3039, i64 %3063
  %3065 = load i8, i8* %3064, align 1
  %3066 = insertelement <8 x i8> %3061, i8 %3065, i32 4
  %3067 = extractelement <8 x i32> %3030, i32 5
  %3068 = sext i32 %3067 to i64
  %3069 = getelementptr inbounds i8, i8* %3039, i64 %3068
  %3070 = load i8, i8* %3069, align 1
  %3071 = insertelement <8 x i8> %3066, i8 %3070, i32 5
  %3072 = extractelement <8 x i32> %3030, i32 6
  %3073 = sext i32 %3072 to i64
  %3074 = getelementptr inbounds i8, i8* %3039, i64 %3073
  %3075 = load i8, i8* %3074, align 1
  %3076 = insertelement <8 x i8> %3071, i8 %3075, i32 6
  %3077 = extractelement <8 x i32> %3030, i32 7
  %3078 = sext i32 %3077 to i64
  %3079 = getelementptr inbounds i8, i8* %3039, i64 %3078
  %3080 = load i8, i8* %3079, align 1
  %3081 = insertelement <8 x i8> %3076, i8 %3080, i32 7
  %3082 = uitofp <8 x i8> %3081 to <8 x float>
  %3083 = fmul <8 x float> %3082, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %3084 = extractelement <8 x i32> %3035, i32 0
  %3085 = sext i32 %3084 to i64
  %3086 = getelementptr inbounds i8, i8* %3039, i64 %3085
  %3087 = load i8, i8* %3086, align 1
  %3088 = insertelement <8 x i8> undef, i8 %3087, i32 0
  %3089 = extractelement <8 x i32> %3035, i32 1
  %3090 = sext i32 %3089 to i64
  %3091 = getelementptr inbounds i8, i8* %3039, i64 %3090
  %3092 = load i8, i8* %3091, align 1
  %3093 = insertelement <8 x i8> %3088, i8 %3092, i32 1
  %3094 = extractelement <8 x i32> %3035, i32 2
  %3095 = sext i32 %3094 to i64
  %3096 = getelementptr inbounds i8, i8* %3039, i64 %3095
  %3097 = load i8, i8* %3096, align 1
  %3098 = insertelement <8 x i8> %3093, i8 %3097, i32 2
  %3099 = extractelement <8 x i32> %3035, i32 3
  %3100 = sext i32 %3099 to i64
  %3101 = getelementptr inbounds i8, i8* %3039, i64 %3100
  %3102 = load i8, i8* %3101, align 1
  %3103 = insertelement <8 x i8> %3098, i8 %3102, i32 3
  %3104 = extractelement <8 x i32> %3035, i32 4
  %3105 = sext i32 %3104 to i64
  %3106 = getelementptr inbounds i8, i8* %3039, i64 %3105
  %3107 = load i8, i8* %3106, align 1
  %3108 = insertelement <8 x i8> %3103, i8 %3107, i32 4
  %3109 = extractelement <8 x i32> %3035, i32 5
  %3110 = sext i32 %3109 to i64
  %3111 = getelementptr inbounds i8, i8* %3039, i64 %3110
  %3112 = load i8, i8* %3111, align 1
  %3113 = insertelement <8 x i8> %3108, i8 %3112, i32 5
  %3114 = extractelement <8 x i32> %3035, i32 6
  %3115 = sext i32 %3114 to i64
  %3116 = getelementptr inbounds i8, i8* %3039, i64 %3115
  %3117 = load i8, i8* %3116, align 1
  %3118 = insertelement <8 x i8> %3113, i8 %3117, i32 6
  %3119 = extractelement <8 x i32> %3035, i32 7
  %3120 = sext i32 %3119 to i64
  %3121 = getelementptr inbounds i8, i8* %3039, i64 %3120
  %3122 = load i8, i8* %3121, align 1
  %3123 = insertelement <8 x i8> %3118, i8 %3122, i32 7
  %3124 = uitofp <8 x i8> %3123 to <8 x float>
  %3125 = fmul <8 x float> %3124, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %3237

3126:                                             ; preds = %3014
  %3127 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %3017, i64 0, i32 0, i32 2
  %3128 = load i8*, i8** %3127, align 8
  %3129 = shl nsw <8 x i32> %3030, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3130 = extractelement <8 x i32> %3129, i32 0
  %3131 = sext i32 %3130 to i64
  %3132 = getelementptr inbounds i8, i8* %3128, i64 %3131
  %3133 = bitcast i8* %3132 to i16*
  %3134 = load i16, i16* %3133, align 1
  %3135 = insertelement <8 x i16> undef, i16 %3134, i32 0
  %3136 = extractelement <8 x i32> %3129, i32 1
  %3137 = sext i32 %3136 to i64
  %3138 = getelementptr inbounds i8, i8* %3128, i64 %3137
  %3139 = bitcast i8* %3138 to i16*
  %3140 = load i16, i16* %3139, align 1
  %3141 = insertelement <8 x i16> %3135, i16 %3140, i32 1
  %3142 = extractelement <8 x i32> %3129, i32 2
  %3143 = sext i32 %3142 to i64
  %3144 = getelementptr inbounds i8, i8* %3128, i64 %3143
  %3145 = bitcast i8* %3144 to i16*
  %3146 = load i16, i16* %3145, align 1
  %3147 = insertelement <8 x i16> %3141, i16 %3146, i32 2
  %3148 = extractelement <8 x i32> %3129, i32 3
  %3149 = sext i32 %3148 to i64
  %3150 = getelementptr inbounds i8, i8* %3128, i64 %3149
  %3151 = bitcast i8* %3150 to i16*
  %3152 = load i16, i16* %3151, align 1
  %3153 = insertelement <8 x i16> %3147, i16 %3152, i32 3
  %3154 = extractelement <8 x i32> %3129, i32 4
  %3155 = sext i32 %3154 to i64
  %3156 = getelementptr inbounds i8, i8* %3128, i64 %3155
  %3157 = bitcast i8* %3156 to i16*
  %3158 = load i16, i16* %3157, align 1
  %3159 = insertelement <8 x i16> %3153, i16 %3158, i32 4
  %3160 = extractelement <8 x i32> %3129, i32 5
  %3161 = sext i32 %3160 to i64
  %3162 = getelementptr inbounds i8, i8* %3128, i64 %3161
  %3163 = bitcast i8* %3162 to i16*
  %3164 = load i16, i16* %3163, align 1
  %3165 = insertelement <8 x i16> %3159, i16 %3164, i32 5
  %3166 = extractelement <8 x i32> %3129, i32 6
  %3167 = sext i32 %3166 to i64
  %3168 = getelementptr inbounds i8, i8* %3128, i64 %3167
  %3169 = bitcast i8* %3168 to i16*
  %3170 = load i16, i16* %3169, align 1
  %3171 = insertelement <8 x i16> %3165, i16 %3170, i32 6
  %3172 = extractelement <8 x i32> %3129, i32 7
  %3173 = sext i32 %3172 to i64
  %3174 = getelementptr inbounds i8, i8* %3128, i64 %3173
  %3175 = bitcast i8* %3174 to i16*
  %3176 = load i16, i16* %3175, align 1
  %3177 = insertelement <8 x i16> %3171, i16 %3176, i32 7
  %3178 = lshr <8 x i16> %3177, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3179 = shl <8 x i16> %3177, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3180 = or <8 x i16> %3178, %3179
  %3181 = uitofp <8 x i16> %3180 to <8 x float>
  %3182 = fmul <8 x float> %3181, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %3183 = shl nsw <8 x i32> %3035, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3184 = extractelement <8 x i32> %3183, i32 0
  %3185 = sext i32 %3184 to i64
  %3186 = getelementptr inbounds i8, i8* %3128, i64 %3185
  %3187 = bitcast i8* %3186 to i16*
  %3188 = load i16, i16* %3187, align 1
  %3189 = insertelement <8 x i16> undef, i16 %3188, i32 0
  %3190 = extractelement <8 x i32> %3183, i32 1
  %3191 = sext i32 %3190 to i64
  %3192 = getelementptr inbounds i8, i8* %3128, i64 %3191
  %3193 = bitcast i8* %3192 to i16*
  %3194 = load i16, i16* %3193, align 1
  %3195 = insertelement <8 x i16> %3189, i16 %3194, i32 1
  %3196 = extractelement <8 x i32> %3183, i32 2
  %3197 = sext i32 %3196 to i64
  %3198 = getelementptr inbounds i8, i8* %3128, i64 %3197
  %3199 = bitcast i8* %3198 to i16*
  %3200 = load i16, i16* %3199, align 1
  %3201 = insertelement <8 x i16> %3195, i16 %3200, i32 2
  %3202 = extractelement <8 x i32> %3183, i32 3
  %3203 = sext i32 %3202 to i64
  %3204 = getelementptr inbounds i8, i8* %3128, i64 %3203
  %3205 = bitcast i8* %3204 to i16*
  %3206 = load i16, i16* %3205, align 1
  %3207 = insertelement <8 x i16> %3201, i16 %3206, i32 3
  %3208 = extractelement <8 x i32> %3183, i32 4
  %3209 = sext i32 %3208 to i64
  %3210 = getelementptr inbounds i8, i8* %3128, i64 %3209
  %3211 = bitcast i8* %3210 to i16*
  %3212 = load i16, i16* %3211, align 1
  %3213 = insertelement <8 x i16> %3207, i16 %3212, i32 4
  %3214 = extractelement <8 x i32> %3183, i32 5
  %3215 = sext i32 %3214 to i64
  %3216 = getelementptr inbounds i8, i8* %3128, i64 %3215
  %3217 = bitcast i8* %3216 to i16*
  %3218 = load i16, i16* %3217, align 1
  %3219 = insertelement <8 x i16> %3213, i16 %3218, i32 5
  %3220 = extractelement <8 x i32> %3183, i32 6
  %3221 = sext i32 %3220 to i64
  %3222 = getelementptr inbounds i8, i8* %3128, i64 %3221
  %3223 = bitcast i8* %3222 to i16*
  %3224 = load i16, i16* %3223, align 1
  %3225 = insertelement <8 x i16> %3219, i16 %3224, i32 6
  %3226 = extractelement <8 x i32> %3183, i32 7
  %3227 = sext i32 %3226 to i64
  %3228 = getelementptr inbounds i8, i8* %3128, i64 %3227
  %3229 = bitcast i8* %3228 to i16*
  %3230 = load i16, i16* %3229, align 1
  %3231 = insertelement <8 x i16> %3225, i16 %3230, i32 7
  %3232 = lshr <8 x i16> %3231, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3233 = shl <8 x i16> %3231, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3234 = or <8 x i16> %3232, %3233
  %3235 = uitofp <8 x i16> %3234 to <8 x float>
  %3236 = fmul <8 x float> %3235, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %3237

3237:                                             ; preds = %3041, %3126
  %3238 = phi <8 x float> [ %3125, %3041 ], [ %3236, %3126 ]
  %3239 = phi <8 x float> [ %3083, %3041 ], [ %3182, %3126 ]
  %3240 = fsub <8 x float> %3238, %3239
  %3241 = fmul <8 x float> %3037, %3240
  %3242 = fadd <8 x float> %3239, %3241
  store <8 x float> %3242, <8 x float>* %9, align 32
  br label %3488

3243:                                             ; preds = %227
  %3244 = getelementptr inbounds i8*, i8** %228, i64 1
  %3245 = bitcast i8** %228 to %union.skcms_Curve**
  %3246 = load %union.skcms_Curve*, %union.skcms_Curve** %3245, align 8
  %3247 = load <8 x float>, <8 x float>* %10, align 32
  %3248 = fcmp ogt <8 x float> %3247, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3249 = select <8 x i1> %3248, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %3247
  %3250 = fcmp ogt <8 x float> %3249, zeroinitializer
  %3251 = select <8 x i1> %3250, <8 x float> %3249, <8 x float> zeroinitializer
  %3252 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %3246, i64 0, i32 0, i32 0
  %3253 = load i32, i32* %3252, align 8
  %3254 = add i32 %3253, -1
  %3255 = uitofp i32 %3254 to float
  %3256 = insertelement <8 x float> undef, float %3255, i32 0
  %3257 = shufflevector <8 x float> %3256, <8 x float> undef, <8 x i32> zeroinitializer
  %3258 = fmul <8 x float> %3251, %3257
  %3259 = fptosi <8 x float> %3258 to <8 x i32>
  %3260 = fadd <8 x float> %3258, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3261 = bitcast <8 x float> %3260 to <8 x i32>
  %3262 = add <8 x i32> %3261, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %3263 = bitcast <8 x i32> %3262 to <8 x float>
  %3264 = fptosi <8 x float> %3263 to <8 x i32>
  %3265 = sitofp <8 x i32> %3259 to <8 x float>
  %3266 = fsub <8 x float> %3258, %3265
  %3267 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %3246, i64 0, i32 0, i32 1
  %3268 = load i8*, i8** %3267, align 8
  %3269 = icmp eq i8* %3268, null
  br i1 %3269, label %3355, label %3270

3270:                                             ; preds = %3243
  %3271 = extractelement <8 x i32> %3259, i32 0
  %3272 = sext i32 %3271 to i64
  %3273 = getelementptr inbounds i8, i8* %3268, i64 %3272
  %3274 = load i8, i8* %3273, align 1
  %3275 = insertelement <8 x i8> undef, i8 %3274, i32 0
  %3276 = extractelement <8 x i32> %3259, i32 1
  %3277 = sext i32 %3276 to i64
  %3278 = getelementptr inbounds i8, i8* %3268, i64 %3277
  %3279 = load i8, i8* %3278, align 1
  %3280 = insertelement <8 x i8> %3275, i8 %3279, i32 1
  %3281 = extractelement <8 x i32> %3259, i32 2
  %3282 = sext i32 %3281 to i64
  %3283 = getelementptr inbounds i8, i8* %3268, i64 %3282
  %3284 = load i8, i8* %3283, align 1
  %3285 = insertelement <8 x i8> %3280, i8 %3284, i32 2
  %3286 = extractelement <8 x i32> %3259, i32 3
  %3287 = sext i32 %3286 to i64
  %3288 = getelementptr inbounds i8, i8* %3268, i64 %3287
  %3289 = load i8, i8* %3288, align 1
  %3290 = insertelement <8 x i8> %3285, i8 %3289, i32 3
  %3291 = extractelement <8 x i32> %3259, i32 4
  %3292 = sext i32 %3291 to i64
  %3293 = getelementptr inbounds i8, i8* %3268, i64 %3292
  %3294 = load i8, i8* %3293, align 1
  %3295 = insertelement <8 x i8> %3290, i8 %3294, i32 4
  %3296 = extractelement <8 x i32> %3259, i32 5
  %3297 = sext i32 %3296 to i64
  %3298 = getelementptr inbounds i8, i8* %3268, i64 %3297
  %3299 = load i8, i8* %3298, align 1
  %3300 = insertelement <8 x i8> %3295, i8 %3299, i32 5
  %3301 = extractelement <8 x i32> %3259, i32 6
  %3302 = sext i32 %3301 to i64
  %3303 = getelementptr inbounds i8, i8* %3268, i64 %3302
  %3304 = load i8, i8* %3303, align 1
  %3305 = insertelement <8 x i8> %3300, i8 %3304, i32 6
  %3306 = extractelement <8 x i32> %3259, i32 7
  %3307 = sext i32 %3306 to i64
  %3308 = getelementptr inbounds i8, i8* %3268, i64 %3307
  %3309 = load i8, i8* %3308, align 1
  %3310 = insertelement <8 x i8> %3305, i8 %3309, i32 7
  %3311 = uitofp <8 x i8> %3310 to <8 x float>
  %3312 = fmul <8 x float> %3311, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %3313 = extractelement <8 x i32> %3264, i32 0
  %3314 = sext i32 %3313 to i64
  %3315 = getelementptr inbounds i8, i8* %3268, i64 %3314
  %3316 = load i8, i8* %3315, align 1
  %3317 = insertelement <8 x i8> undef, i8 %3316, i32 0
  %3318 = extractelement <8 x i32> %3264, i32 1
  %3319 = sext i32 %3318 to i64
  %3320 = getelementptr inbounds i8, i8* %3268, i64 %3319
  %3321 = load i8, i8* %3320, align 1
  %3322 = insertelement <8 x i8> %3317, i8 %3321, i32 1
  %3323 = extractelement <8 x i32> %3264, i32 2
  %3324 = sext i32 %3323 to i64
  %3325 = getelementptr inbounds i8, i8* %3268, i64 %3324
  %3326 = load i8, i8* %3325, align 1
  %3327 = insertelement <8 x i8> %3322, i8 %3326, i32 2
  %3328 = extractelement <8 x i32> %3264, i32 3
  %3329 = sext i32 %3328 to i64
  %3330 = getelementptr inbounds i8, i8* %3268, i64 %3329
  %3331 = load i8, i8* %3330, align 1
  %3332 = insertelement <8 x i8> %3327, i8 %3331, i32 3
  %3333 = extractelement <8 x i32> %3264, i32 4
  %3334 = sext i32 %3333 to i64
  %3335 = getelementptr inbounds i8, i8* %3268, i64 %3334
  %3336 = load i8, i8* %3335, align 1
  %3337 = insertelement <8 x i8> %3332, i8 %3336, i32 4
  %3338 = extractelement <8 x i32> %3264, i32 5
  %3339 = sext i32 %3338 to i64
  %3340 = getelementptr inbounds i8, i8* %3268, i64 %3339
  %3341 = load i8, i8* %3340, align 1
  %3342 = insertelement <8 x i8> %3337, i8 %3341, i32 5
  %3343 = extractelement <8 x i32> %3264, i32 6
  %3344 = sext i32 %3343 to i64
  %3345 = getelementptr inbounds i8, i8* %3268, i64 %3344
  %3346 = load i8, i8* %3345, align 1
  %3347 = insertelement <8 x i8> %3342, i8 %3346, i32 6
  %3348 = extractelement <8 x i32> %3264, i32 7
  %3349 = sext i32 %3348 to i64
  %3350 = getelementptr inbounds i8, i8* %3268, i64 %3349
  %3351 = load i8, i8* %3350, align 1
  %3352 = insertelement <8 x i8> %3347, i8 %3351, i32 7
  %3353 = uitofp <8 x i8> %3352 to <8 x float>
  %3354 = fmul <8 x float> %3353, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %3466

3355:                                             ; preds = %3243
  %3356 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %3246, i64 0, i32 0, i32 2
  %3357 = load i8*, i8** %3356, align 8
  %3358 = shl nsw <8 x i32> %3259, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3359 = extractelement <8 x i32> %3358, i32 0
  %3360 = sext i32 %3359 to i64
  %3361 = getelementptr inbounds i8, i8* %3357, i64 %3360
  %3362 = bitcast i8* %3361 to i16*
  %3363 = load i16, i16* %3362, align 1
  %3364 = insertelement <8 x i16> undef, i16 %3363, i32 0
  %3365 = extractelement <8 x i32> %3358, i32 1
  %3366 = sext i32 %3365 to i64
  %3367 = getelementptr inbounds i8, i8* %3357, i64 %3366
  %3368 = bitcast i8* %3367 to i16*
  %3369 = load i16, i16* %3368, align 1
  %3370 = insertelement <8 x i16> %3364, i16 %3369, i32 1
  %3371 = extractelement <8 x i32> %3358, i32 2
  %3372 = sext i32 %3371 to i64
  %3373 = getelementptr inbounds i8, i8* %3357, i64 %3372
  %3374 = bitcast i8* %3373 to i16*
  %3375 = load i16, i16* %3374, align 1
  %3376 = insertelement <8 x i16> %3370, i16 %3375, i32 2
  %3377 = extractelement <8 x i32> %3358, i32 3
  %3378 = sext i32 %3377 to i64
  %3379 = getelementptr inbounds i8, i8* %3357, i64 %3378
  %3380 = bitcast i8* %3379 to i16*
  %3381 = load i16, i16* %3380, align 1
  %3382 = insertelement <8 x i16> %3376, i16 %3381, i32 3
  %3383 = extractelement <8 x i32> %3358, i32 4
  %3384 = sext i32 %3383 to i64
  %3385 = getelementptr inbounds i8, i8* %3357, i64 %3384
  %3386 = bitcast i8* %3385 to i16*
  %3387 = load i16, i16* %3386, align 1
  %3388 = insertelement <8 x i16> %3382, i16 %3387, i32 4
  %3389 = extractelement <8 x i32> %3358, i32 5
  %3390 = sext i32 %3389 to i64
  %3391 = getelementptr inbounds i8, i8* %3357, i64 %3390
  %3392 = bitcast i8* %3391 to i16*
  %3393 = load i16, i16* %3392, align 1
  %3394 = insertelement <8 x i16> %3388, i16 %3393, i32 5
  %3395 = extractelement <8 x i32> %3358, i32 6
  %3396 = sext i32 %3395 to i64
  %3397 = getelementptr inbounds i8, i8* %3357, i64 %3396
  %3398 = bitcast i8* %3397 to i16*
  %3399 = load i16, i16* %3398, align 1
  %3400 = insertelement <8 x i16> %3394, i16 %3399, i32 6
  %3401 = extractelement <8 x i32> %3358, i32 7
  %3402 = sext i32 %3401 to i64
  %3403 = getelementptr inbounds i8, i8* %3357, i64 %3402
  %3404 = bitcast i8* %3403 to i16*
  %3405 = load i16, i16* %3404, align 1
  %3406 = insertelement <8 x i16> %3400, i16 %3405, i32 7
  %3407 = lshr <8 x i16> %3406, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3408 = shl <8 x i16> %3406, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3409 = or <8 x i16> %3407, %3408
  %3410 = uitofp <8 x i16> %3409 to <8 x float>
  %3411 = fmul <8 x float> %3410, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %3412 = shl nsw <8 x i32> %3264, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3413 = extractelement <8 x i32> %3412, i32 0
  %3414 = sext i32 %3413 to i64
  %3415 = getelementptr inbounds i8, i8* %3357, i64 %3414
  %3416 = bitcast i8* %3415 to i16*
  %3417 = load i16, i16* %3416, align 1
  %3418 = insertelement <8 x i16> undef, i16 %3417, i32 0
  %3419 = extractelement <8 x i32> %3412, i32 1
  %3420 = sext i32 %3419 to i64
  %3421 = getelementptr inbounds i8, i8* %3357, i64 %3420
  %3422 = bitcast i8* %3421 to i16*
  %3423 = load i16, i16* %3422, align 1
  %3424 = insertelement <8 x i16> %3418, i16 %3423, i32 1
  %3425 = extractelement <8 x i32> %3412, i32 2
  %3426 = sext i32 %3425 to i64
  %3427 = getelementptr inbounds i8, i8* %3357, i64 %3426
  %3428 = bitcast i8* %3427 to i16*
  %3429 = load i16, i16* %3428, align 1
  %3430 = insertelement <8 x i16> %3424, i16 %3429, i32 2
  %3431 = extractelement <8 x i32> %3412, i32 3
  %3432 = sext i32 %3431 to i64
  %3433 = getelementptr inbounds i8, i8* %3357, i64 %3432
  %3434 = bitcast i8* %3433 to i16*
  %3435 = load i16, i16* %3434, align 1
  %3436 = insertelement <8 x i16> %3430, i16 %3435, i32 3
  %3437 = extractelement <8 x i32> %3412, i32 4
  %3438 = sext i32 %3437 to i64
  %3439 = getelementptr inbounds i8, i8* %3357, i64 %3438
  %3440 = bitcast i8* %3439 to i16*
  %3441 = load i16, i16* %3440, align 1
  %3442 = insertelement <8 x i16> %3436, i16 %3441, i32 4
  %3443 = extractelement <8 x i32> %3412, i32 5
  %3444 = sext i32 %3443 to i64
  %3445 = getelementptr inbounds i8, i8* %3357, i64 %3444
  %3446 = bitcast i8* %3445 to i16*
  %3447 = load i16, i16* %3446, align 1
  %3448 = insertelement <8 x i16> %3442, i16 %3447, i32 5
  %3449 = extractelement <8 x i32> %3412, i32 6
  %3450 = sext i32 %3449 to i64
  %3451 = getelementptr inbounds i8, i8* %3357, i64 %3450
  %3452 = bitcast i8* %3451 to i16*
  %3453 = load i16, i16* %3452, align 1
  %3454 = insertelement <8 x i16> %3448, i16 %3453, i32 6
  %3455 = extractelement <8 x i32> %3412, i32 7
  %3456 = sext i32 %3455 to i64
  %3457 = getelementptr inbounds i8, i8* %3357, i64 %3456
  %3458 = bitcast i8* %3457 to i16*
  %3459 = load i16, i16* %3458, align 1
  %3460 = insertelement <8 x i16> %3454, i16 %3459, i32 7
  %3461 = lshr <8 x i16> %3460, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3462 = shl <8 x i16> %3460, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3463 = or <8 x i16> %3461, %3462
  %3464 = uitofp <8 x i16> %3463 to <8 x float>
  %3465 = fmul <8 x float> %3464, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %3466

3466:                                             ; preds = %3270, %3355
  %3467 = phi <8 x float> [ %3354, %3270 ], [ %3465, %3355 ]
  %3468 = phi <8 x float> [ %3312, %3270 ], [ %3411, %3355 ]
  %3469 = fsub <8 x float> %3467, %3468
  %3470 = fmul <8 x float> %3266, %3469
  %3471 = fadd <8 x float> %3468, %3470
  store <8 x float> %3471, <8 x float>* %10, align 32
  br label %3488

3472:                                             ; preds = %227
  %3473 = getelementptr inbounds i8*, i8** %228, i64 1
  %3474 = bitcast i8** %228 to %struct.skcms_A2B**
  %3475 = load %struct.skcms_A2B*, %struct.skcms_A2B** %3474, align 8
  %3476 = load <8 x float>, <8 x float>* %10, align 32
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15)
  store <8 x float> %3476, <8 x float>* %6, align 32
  %3477 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %3475, i64 0, i32 0
  %3478 = load i32, i32* %3477, align 8
  %3479 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %3475, i64 0, i32 8
  %3480 = load i32, i32* %3479, align 8
  %3481 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %3475, i64 0, i32 2, i64 0
  %3482 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %3475, i64 0, i32 3
  %3483 = load i8*, i8** %3482, align 8
  %3484 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %3475, i64 0, i32 4
  %3485 = load i8*, i8** %3484, align 8
  call fastcc void @_ZN3hswL4clutEjjPKhS1_S1_PDv8_fS3_S3_S3_(i32 %3478, i32 %3480, i8* %3481, i8* %3483, i8* %3485, <8 x float>* nonnull %7, <8 x float>* nonnull %8, <8 x float>* nonnull %9, <8 x float>* nonnull %6) #17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15)
  %3486 = load i32, i32* %3477, align 8
  %3487 = icmp eq i32 %3486, 4
  br i1 %3487, label %3490, label %3488

3488:                                             ; preds = %3472, %3490, %227, %3491, %3466, %3237, %3008, %2779, %2471, %2386, %2301, %2216, %2130, %2044, %1958, %1872, %1774, %1676, %1578, %1480, %1405, %1330, %1255, %1180, %1061, %1026, %953, %895, %884, %876, %875, %866, %845, %842, %777, %728, %715, %663, %642, %548, %532, %453, %437, %362, %346, %267, %256, %240, %236, %232
  %3489 = phi i8** [ %228, %227 ], [ %3492, %3491 ], [ %3473, %3490 ], [ %3473, %3472 ], [ %3244, %3466 ], [ %3015, %3237 ], [ %2786, %3008 ], [ %2557, %2779 ], [ %2472, %2471 ], [ %2387, %2386 ], [ %2302, %2301 ], [ %2217, %2216 ], [ %2131, %2130 ], [ %2045, %2044 ], [ %1959, %1958 ], [ %1873, %1872 ], [ %1775, %1774 ], [ %1677, %1676 ], [ %1579, %1578 ], [ %1481, %1480 ], [ %1406, %1405 ], [ %1331, %1330 ], [ %1256, %1255 ], [ %1181, %1180 ], [ %228, %1061 ], [ %228, %1026 ], [ %954, %953 ], [ %896, %895 ], [ %228, %884 ], [ %228, %876 ], [ %228, %875 ], [ %228, %866 ], [ %228, %845 ], [ %228, %842 ], [ %228, %777 ], [ %228, %728 ], [ %228, %715 ], [ %228, %663 ], [ %228, %642 ], [ %228, %548 ], [ %228, %532 ], [ %228, %453 ], [ %228, %437 ], [ %363, %362 ], [ %228, %346 ], [ %228, %267 ], [ %228, %256 ], [ %228, %240 ], [ %228, %236 ], [ %228, %232 ]
  br label %227

3490:                                             ; preds = %3472
  store <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float>* %10, align 32
  br label %3488

3491:                                             ; preds = %227
  %3492 = getelementptr inbounds i8*, i8** %228, i64 1
  %3493 = bitcast i8** %228 to %struct.skcms_B2A**
  %3494 = load %struct.skcms_B2A*, %struct.skcms_B2A** %3493, align 8
  %3495 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %3494, i64 0, i32 0
  %3496 = load i32, i32* %3495, align 8
  %3497 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %3494, i64 0, i32 5
  %3498 = load i32, i32* %3497, align 8
  %3499 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %3494, i64 0, i32 6, i64 0
  %3500 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %3494, i64 0, i32 7
  %3501 = load i8*, i8** %3500, align 8
  %3502 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %3494, i64 0, i32 8
  %3503 = load i8*, i8** %3502, align 8
  call fastcc void @_ZN3hswL4clutEjjPKhS1_S1_PDv8_fS3_S3_S3_(i32 %3496, i32 %3498, i8* %3499, i8* %3501, i8* %3503, <8 x float>* nonnull %7, <8 x float>* nonnull %8, <8 x float>* nonnull %9, <8 x float>* nonnull %10) #17
  br label %3488

3504:                                             ; preds = %227
  %3505 = getelementptr inbounds i8, i8* %3, i64 %194
  %3506 = load <8 x float>, <8 x float>* %10, align 32
  %3507 = fmul <8 x float> %3506, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3508 = fadd <8 x float> %3507, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3509 = fptosi <8 x float> %3508 to <8 x i32>
  %3510 = trunc <8 x i32> %3509 to <8 x i8>
  %3511 = bitcast i8* %3505 to <8 x i8>*
  store <8 x i8> %3510, <8 x i8>* %3511, align 1
  br label %4205

3512:                                             ; preds = %227
  %3513 = getelementptr inbounds i8, i8* %3, i64 %194
  %3514 = load <8 x float>, <8 x float>* %8, align 32
  %3515 = fmul <8 x float> %3514, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3516 = fadd <8 x float> %3515, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3517 = fptosi <8 x float> %3516 to <8 x i32>
  %3518 = trunc <8 x i32> %3517 to <8 x i8>
  %3519 = bitcast i8* %3513 to <8 x i8>*
  store <8 x i8> %3518, <8 x i8>* %3519, align 1
  br label %4205

3520:                                             ; preds = %227
  %3521 = getelementptr inbounds i8, i8* %3, i64 %224
  %3522 = load <8 x float>, <8 x float>* %7, align 32
  %3523 = fmul <8 x float> %3522, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %3524 = fadd <8 x float> %3523, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3525 = fptosi <8 x float> %3524 to <8 x i32>
  %3526 = shl <8 x i32> %3525, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %3527 = load <8 x float>, <8 x float>* %8, align 32
  %3528 = fmul <8 x float> %3527, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %3529 = fadd <8 x float> %3528, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3530 = fptosi <8 x float> %3529 to <8 x i32>
  %3531 = shl <8 x i32> %3530, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %3532 = or <8 x i32> %3531, %3526
  %3533 = load <8 x float>, <8 x float>* %9, align 32
  %3534 = fmul <8 x float> %3533, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %3535 = fadd <8 x float> %3534, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3536 = fptosi <8 x float> %3535 to <8 x i32>
  %3537 = shl <8 x i32> %3536, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %3538 = or <8 x i32> %3532, %3537
  %3539 = load <8 x float>, <8 x float>* %10, align 32
  %3540 = fmul <8 x float> %3539, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %3541 = fadd <8 x float> %3540, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3542 = fptosi <8 x float> %3541 to <8 x i32>
  %3543 = or <8 x i32> %3538, %3542
  %3544 = trunc <8 x i32> %3543 to <8 x i16>
  %3545 = bitcast i8* %3521 to <8 x i16>*
  store <8 x i16> %3544, <8 x i16>* %3545, align 1
  br label %4205

3546:                                             ; preds = %227
  %3547 = getelementptr inbounds i8, i8* %3, i64 %224
  %3548 = load <8 x float>, <8 x float>* %7, align 32
  %3549 = fmul <8 x float> %3548, <float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01>
  %3550 = fadd <8 x float> %3549, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3551 = fptosi <8 x float> %3550 to <8 x i32>
  %3552 = load <8 x float>, <8 x float>* %8, align 32
  %3553 = fmul <8 x float> %3552, <float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01>
  %3554 = fadd <8 x float> %3553, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3555 = fptosi <8 x float> %3554 to <8 x i32>
  %3556 = shl <8 x i32> %3555, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %3557 = or <8 x i32> %3556, %3551
  %3558 = load <8 x float>, <8 x float>* %9, align 32
  %3559 = fmul <8 x float> %3558, <float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01>
  %3560 = fadd <8 x float> %3559, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3561 = fptosi <8 x float> %3560 to <8 x i32>
  %3562 = shl <8 x i32> %3561, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %3563 = or <8 x i32> %3557, %3562
  %3564 = trunc <8 x i32> %3563 to <8 x i16>
  %3565 = bitcast i8* %3547 to <8 x i16>*
  store <8 x i16> %3564, <8 x i16>* %3565, align 1
  br label %4205

3566:                                             ; preds = %227
  %3567 = getelementptr inbounds i8, i8* %3, i64 %198
  %3568 = load <8 x float>, <8 x float>* %7, align 32
  %3569 = fmul <8 x float> %3568, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3570 = fadd <8 x float> %3569, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3571 = fptosi <8 x float> %3570 to <8 x i32>
  %3572 = trunc <8 x i32> %3571 to <8 x i8>
  %3573 = extractelement <8 x i8> %3572, i32 0
  store i8 %3573, i8* %3567, align 1
  %3574 = extractelement <8 x i8> %3572, i32 1
  %3575 = getelementptr inbounds i8, i8* %3567, i64 3
  store i8 %3574, i8* %3575, align 1
  %3576 = extractelement <8 x i8> %3572, i32 2
  %3577 = getelementptr inbounds i8, i8* %3567, i64 6
  store i8 %3576, i8* %3577, align 1
  %3578 = extractelement <8 x i8> %3572, i32 3
  %3579 = getelementptr inbounds i8, i8* %3567, i64 9
  store i8 %3578, i8* %3579, align 1
  %3580 = extractelement <8 x i8> %3572, i32 4
  %3581 = getelementptr inbounds i8, i8* %3567, i64 12
  store i8 %3580, i8* %3581, align 1
  %3582 = extractelement <8 x i8> %3572, i32 5
  %3583 = getelementptr inbounds i8, i8* %3567, i64 15
  store i8 %3582, i8* %3583, align 1
  %3584 = extractelement <8 x i8> %3572, i32 6
  %3585 = getelementptr inbounds i8, i8* %3567, i64 18
  store i8 %3584, i8* %3585, align 1
  %3586 = extractelement <8 x i8> %3572, i32 7
  %3587 = getelementptr inbounds i8, i8* %3567, i64 21
  store i8 %3586, i8* %3587, align 1
  %3588 = getelementptr inbounds i8, i8* %3567, i64 1
  %3589 = load <8 x float>, <8 x float>* %8, align 32
  %3590 = fmul <8 x float> %3589, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3591 = fadd <8 x float> %3590, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3592 = fptosi <8 x float> %3591 to <8 x i32>
  %3593 = trunc <8 x i32> %3592 to <8 x i8>
  %3594 = extractelement <8 x i8> %3593, i32 0
  store i8 %3594, i8* %3588, align 1
  %3595 = extractelement <8 x i8> %3593, i32 1
  %3596 = getelementptr inbounds i8, i8* %3588, i64 3
  store i8 %3595, i8* %3596, align 1
  %3597 = extractelement <8 x i8> %3593, i32 2
  %3598 = getelementptr inbounds i8, i8* %3588, i64 6
  store i8 %3597, i8* %3598, align 1
  %3599 = extractelement <8 x i8> %3593, i32 3
  %3600 = getelementptr inbounds i8, i8* %3588, i64 9
  store i8 %3599, i8* %3600, align 1
  %3601 = extractelement <8 x i8> %3593, i32 4
  %3602 = getelementptr inbounds i8, i8* %3588, i64 12
  store i8 %3601, i8* %3602, align 1
  %3603 = extractelement <8 x i8> %3593, i32 5
  %3604 = getelementptr inbounds i8, i8* %3588, i64 15
  store i8 %3603, i8* %3604, align 1
  %3605 = extractelement <8 x i8> %3593, i32 6
  %3606 = getelementptr inbounds i8, i8* %3588, i64 18
  store i8 %3605, i8* %3606, align 1
  %3607 = extractelement <8 x i8> %3593, i32 7
  %3608 = getelementptr inbounds i8, i8* %3588, i64 21
  store i8 %3607, i8* %3608, align 1
  %3609 = getelementptr inbounds i8, i8* %3567, i64 2
  %3610 = load <8 x float>, <8 x float>* %9, align 32
  %3611 = fmul <8 x float> %3610, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3612 = fadd <8 x float> %3611, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3613 = fptosi <8 x float> %3612 to <8 x i32>
  %3614 = trunc <8 x i32> %3613 to <8 x i8>
  %3615 = extractelement <8 x i8> %3614, i32 0
  store i8 %3615, i8* %3609, align 1
  %3616 = extractelement <8 x i8> %3614, i32 1
  %3617 = getelementptr inbounds i8, i8* %3609, i64 3
  store i8 %3616, i8* %3617, align 1
  %3618 = extractelement <8 x i8> %3614, i32 2
  %3619 = getelementptr inbounds i8, i8* %3609, i64 6
  store i8 %3618, i8* %3619, align 1
  %3620 = extractelement <8 x i8> %3614, i32 3
  %3621 = getelementptr inbounds i8, i8* %3609, i64 9
  store i8 %3620, i8* %3621, align 1
  %3622 = extractelement <8 x i8> %3614, i32 4
  %3623 = getelementptr inbounds i8, i8* %3609, i64 12
  store i8 %3622, i8* %3623, align 1
  %3624 = extractelement <8 x i8> %3614, i32 5
  %3625 = getelementptr inbounds i8, i8* %3609, i64 15
  store i8 %3624, i8* %3625, align 1
  %3626 = extractelement <8 x i8> %3614, i32 6
  %3627 = getelementptr inbounds i8, i8* %3609, i64 18
  store i8 %3626, i8* %3627, align 1
  %3628 = extractelement <8 x i8> %3614, i32 7
  %3629 = getelementptr inbounds i8, i8* %3609, i64 21
  store i8 %3628, i8* %3629, align 1
  br label %4205

3630:                                             ; preds = %227
  %3631 = getelementptr inbounds i8, i8* %3, i64 %191
  %3632 = load <8 x float>, <8 x float>* %7, align 32
  %3633 = fmul <8 x float> %3632, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3634 = fadd <8 x float> %3633, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3635 = fptosi <8 x float> %3634 to <8 x i32>
  %3636 = load <8 x float>, <8 x float>* %8, align 32
  %3637 = fmul <8 x float> %3636, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3638 = fadd <8 x float> %3637, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3639 = fptosi <8 x float> %3638 to <8 x i32>
  %3640 = shl <8 x i32> %3639, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %3641 = or <8 x i32> %3640, %3635
  %3642 = load <8 x float>, <8 x float>* %9, align 32
  %3643 = fmul <8 x float> %3642, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3644 = fadd <8 x float> %3643, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3645 = fptosi <8 x float> %3644 to <8 x i32>
  %3646 = shl <8 x i32> %3645, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %3647 = or <8 x i32> %3641, %3646
  %3648 = load <8 x float>, <8 x float>* %10, align 32
  %3649 = fmul <8 x float> %3648, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3650 = fadd <8 x float> %3649, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3651 = fptosi <8 x float> %3650 to <8 x i32>
  %3652 = shl <8 x i32> %3651, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %3653 = or <8 x i32> %3647, %3652
  %3654 = bitcast i8* %3631 to <8 x i32>*
  store <8 x i32> %3653, <8 x i32>* %3654, align 1
  br label %4205

3655:                                             ; preds = %227
  %3656 = getelementptr inbounds i8, i8* %3, i64 %191
  %3657 = load <8 x float>, <8 x float>* %7, align 32
  %3658 = fmul <8 x float> %3657, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %3659 = fadd <8 x float> %3658, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3660 = fptosi <8 x float> %3659 to <8 x i32>
  %3661 = load <8 x float>, <8 x float>* %8, align 32
  %3662 = fmul <8 x float> %3661, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %3663 = fadd <8 x float> %3662, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3664 = fptosi <8 x float> %3663 to <8 x i32>
  %3665 = shl <8 x i32> %3664, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %3666 = or <8 x i32> %3665, %3660
  %3667 = load <8 x float>, <8 x float>* %9, align 32
  %3668 = fmul <8 x float> %3667, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %3669 = fadd <8 x float> %3668, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3670 = fptosi <8 x float> %3669 to <8 x i32>
  %3671 = shl <8 x i32> %3670, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %3672 = or <8 x i32> %3666, %3671
  %3673 = load <8 x float>, <8 x float>* %10, align 32
  %3674 = fmul <8 x float> %3673, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %3675 = fadd <8 x float> %3674, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3676 = fptosi <8 x float> %3675 to <8 x i32>
  %3677 = shl <8 x i32> %3676, <i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30>
  %3678 = or <8 x i32> %3672, %3677
  %3679 = bitcast i8* %3656 to <8 x i32>*
  store <8 x i32> %3678, <8 x i32>* %3679, align 1
  br label %4205

3680:                                             ; preds = %227
  %3681 = getelementptr inbounds i8, i8* %3, i64 %141
  %3682 = bitcast i8* %3681 to i16*
  %3683 = load <8 x float>, <8 x float>* %7, align 32
  %3684 = fmul <8 x float> %3683, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3685 = fadd <8 x float> %3684, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3686 = fptoui <8 x float> %3685 to <8 x i16>
  %3687 = extractelement <8 x i16> %3686, i32 0
  store i16 %3687, i16* %3682, align 2
  %3688 = extractelement <8 x i16> %3686, i32 1
  %3689 = getelementptr inbounds i8, i8* %3681, i64 6
  %3690 = bitcast i8* %3689 to i16*
  store i16 %3688, i16* %3690, align 2
  %3691 = extractelement <8 x i16> %3686, i32 2
  %3692 = getelementptr inbounds i8, i8* %3681, i64 12
  %3693 = bitcast i8* %3692 to i16*
  store i16 %3691, i16* %3693, align 2
  %3694 = extractelement <8 x i16> %3686, i32 3
  %3695 = getelementptr inbounds i8, i8* %3681, i64 18
  %3696 = bitcast i8* %3695 to i16*
  store i16 %3694, i16* %3696, align 2
  %3697 = extractelement <8 x i16> %3686, i32 4
  %3698 = getelementptr inbounds i8, i8* %3681, i64 24
  %3699 = bitcast i8* %3698 to i16*
  store i16 %3697, i16* %3699, align 2
  %3700 = extractelement <8 x i16> %3686, i32 5
  %3701 = getelementptr inbounds i8, i8* %3681, i64 30
  %3702 = bitcast i8* %3701 to i16*
  store i16 %3700, i16* %3702, align 2
  %3703 = extractelement <8 x i16> %3686, i32 6
  %3704 = getelementptr inbounds i8, i8* %3681, i64 36
  %3705 = bitcast i8* %3704 to i16*
  store i16 %3703, i16* %3705, align 2
  %3706 = extractelement <8 x i16> %3686, i32 7
  %3707 = getelementptr inbounds i8, i8* %3681, i64 42
  %3708 = bitcast i8* %3707 to i16*
  store i16 %3706, i16* %3708, align 2
  %3709 = getelementptr inbounds i8, i8* %3681, i64 2
  %3710 = bitcast i8* %3709 to i16*
  %3711 = load <8 x float>, <8 x float>* %8, align 32
  %3712 = fmul <8 x float> %3711, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3713 = fadd <8 x float> %3712, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3714 = fptoui <8 x float> %3713 to <8 x i16>
  %3715 = extractelement <8 x i16> %3714, i32 0
  store i16 %3715, i16* %3710, align 2
  %3716 = extractelement <8 x i16> %3714, i32 1
  %3717 = getelementptr inbounds i8, i8* %3709, i64 6
  %3718 = bitcast i8* %3717 to i16*
  store i16 %3716, i16* %3718, align 2
  %3719 = extractelement <8 x i16> %3714, i32 2
  %3720 = getelementptr inbounds i8, i8* %3709, i64 12
  %3721 = bitcast i8* %3720 to i16*
  store i16 %3719, i16* %3721, align 2
  %3722 = extractelement <8 x i16> %3714, i32 3
  %3723 = getelementptr inbounds i8, i8* %3709, i64 18
  %3724 = bitcast i8* %3723 to i16*
  store i16 %3722, i16* %3724, align 2
  %3725 = extractelement <8 x i16> %3714, i32 4
  %3726 = getelementptr inbounds i8, i8* %3709, i64 24
  %3727 = bitcast i8* %3726 to i16*
  store i16 %3725, i16* %3727, align 2
  %3728 = extractelement <8 x i16> %3714, i32 5
  %3729 = getelementptr inbounds i8, i8* %3709, i64 30
  %3730 = bitcast i8* %3729 to i16*
  store i16 %3728, i16* %3730, align 2
  %3731 = extractelement <8 x i16> %3714, i32 6
  %3732 = getelementptr inbounds i8, i8* %3709, i64 36
  %3733 = bitcast i8* %3732 to i16*
  store i16 %3731, i16* %3733, align 2
  %3734 = extractelement <8 x i16> %3714, i32 7
  %3735 = getelementptr inbounds i8, i8* %3709, i64 42
  %3736 = bitcast i8* %3735 to i16*
  store i16 %3734, i16* %3736, align 2
  %3737 = getelementptr inbounds i8, i8* %3681, i64 4
  %3738 = bitcast i8* %3737 to i16*
  %3739 = load <8 x float>, <8 x float>* %9, align 32
  %3740 = fmul <8 x float> %3739, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3741 = fadd <8 x float> %3740, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3742 = fptoui <8 x float> %3741 to <8 x i16>
  %3743 = extractelement <8 x i16> %3742, i32 0
  store i16 %3743, i16* %3738, align 2
  %3744 = extractelement <8 x i16> %3742, i32 1
  %3745 = getelementptr inbounds i8, i8* %3737, i64 6
  %3746 = bitcast i8* %3745 to i16*
  store i16 %3744, i16* %3746, align 2
  %3747 = extractelement <8 x i16> %3742, i32 2
  %3748 = getelementptr inbounds i8, i8* %3737, i64 12
  %3749 = bitcast i8* %3748 to i16*
  store i16 %3747, i16* %3749, align 2
  %3750 = extractelement <8 x i16> %3742, i32 3
  %3751 = getelementptr inbounds i8, i8* %3737, i64 18
  %3752 = bitcast i8* %3751 to i16*
  store i16 %3750, i16* %3752, align 2
  %3753 = extractelement <8 x i16> %3742, i32 4
  %3754 = getelementptr inbounds i8, i8* %3737, i64 24
  %3755 = bitcast i8* %3754 to i16*
  store i16 %3753, i16* %3755, align 2
  %3756 = extractelement <8 x i16> %3742, i32 5
  %3757 = getelementptr inbounds i8, i8* %3737, i64 30
  %3758 = bitcast i8* %3757 to i16*
  store i16 %3756, i16* %3758, align 2
  %3759 = extractelement <8 x i16> %3742, i32 6
  %3760 = getelementptr inbounds i8, i8* %3737, i64 36
  %3761 = bitcast i8* %3760 to i16*
  store i16 %3759, i16* %3761, align 2
  %3762 = extractelement <8 x i16> %3742, i32 7
  %3763 = getelementptr inbounds i8, i8* %3737, i64 42
  %3764 = bitcast i8* %3763 to i16*
  store i16 %3762, i16* %3764, align 2
  br label %4205

3765:                                             ; preds = %227
  %3766 = getelementptr inbounds i8, i8* %3, i64 %137
  %3767 = load <8 x float>, <8 x float>* %7, align 32
  %3768 = fmul <8 x float> %3767, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3769 = fadd <8 x float> %3768, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3770 = fptosi <8 x float> %3769 to <8 x i32>
  %3771 = zext <8 x i32> %3770 to <8 x i64>
  %3772 = load <8 x float>, <8 x float>* %8, align 32
  %3773 = fmul <8 x float> %3772, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3774 = fadd <8 x float> %3773, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3775 = fptosi <8 x float> %3774 to <8 x i32>
  %3776 = zext <8 x i32> %3775 to <8 x i64>
  %3777 = shl nuw nsw <8 x i64> %3776, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %3778 = or <8 x i64> %3777, %3771
  %3779 = load <8 x float>, <8 x float>* %9, align 32
  %3780 = fmul <8 x float> %3779, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3781 = fadd <8 x float> %3780, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3782 = fptosi <8 x float> %3781 to <8 x i32>
  %3783 = zext <8 x i32> %3782 to <8 x i64>
  %3784 = shl nuw <8 x i64> %3783, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %3785 = or <8 x i64> %3778, %3784
  %3786 = load <8 x float>, <8 x float>* %10, align 32
  %3787 = fmul <8 x float> %3786, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3788 = fadd <8 x float> %3787, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3789 = fptosi <8 x float> %3788 to <8 x i32>
  %3790 = zext <8 x i32> %3789 to <8 x i64>
  %3791 = shl <8 x i64> %3790, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %3792 = or <8 x i64> %3785, %3791
  %3793 = bitcast i8* %3766 to <8 x i64>*
  store <8 x i64> %3792, <8 x i64>* %3793, align 2
  br label %4205

3794:                                             ; preds = %227
  %3795 = getelementptr inbounds i8, i8* %3, i64 %141
  %3796 = bitcast i8* %3795 to i16*
  %3797 = load <8 x float>, <8 x float>* %7, align 32
  %3798 = fmul <8 x float> %3797, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3799 = fadd <8 x float> %3798, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3800 = fptosi <8 x float> %3799 to <8 x i32>
  %3801 = load <8 x float>, <8 x float>* %8, align 32
  %3802 = fmul <8 x float> %3801, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3803 = fadd <8 x float> %3802, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3804 = fptosi <8 x float> %3803 to <8 x i32>
  %3805 = load <8 x float>, <8 x float>* %9, align 32
  %3806 = fmul <8 x float> %3805, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3807 = fadd <8 x float> %3806, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3808 = fptosi <8 x float> %3807 to <8 x i32>
  %3809 = shl <8 x i32> %3800, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %3810 = lshr <8 x i32> %3800, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %3811 = and <8 x i32> %3810, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %3812 = or <8 x i32> %3811, %3809
  %3813 = trunc <8 x i32> %3812 to <8 x i16>
  %3814 = extractelement <8 x i16> %3813, i32 0
  store i16 %3814, i16* %3796, align 2
  %3815 = extractelement <8 x i16> %3813, i32 1
  %3816 = getelementptr inbounds i8, i8* %3795, i64 6
  %3817 = bitcast i8* %3816 to i16*
  store i16 %3815, i16* %3817, align 2
  %3818 = extractelement <8 x i16> %3813, i32 2
  %3819 = getelementptr inbounds i8, i8* %3795, i64 12
  %3820 = bitcast i8* %3819 to i16*
  store i16 %3818, i16* %3820, align 2
  %3821 = extractelement <8 x i16> %3813, i32 3
  %3822 = getelementptr inbounds i8, i8* %3795, i64 18
  %3823 = bitcast i8* %3822 to i16*
  store i16 %3821, i16* %3823, align 2
  %3824 = extractelement <8 x i16> %3813, i32 4
  %3825 = getelementptr inbounds i8, i8* %3795, i64 24
  %3826 = bitcast i8* %3825 to i16*
  store i16 %3824, i16* %3826, align 2
  %3827 = extractelement <8 x i16> %3813, i32 5
  %3828 = getelementptr inbounds i8, i8* %3795, i64 30
  %3829 = bitcast i8* %3828 to i16*
  store i16 %3827, i16* %3829, align 2
  %3830 = extractelement <8 x i16> %3813, i32 6
  %3831 = getelementptr inbounds i8, i8* %3795, i64 36
  %3832 = bitcast i8* %3831 to i16*
  store i16 %3830, i16* %3832, align 2
  %3833 = extractelement <8 x i16> %3813, i32 7
  %3834 = getelementptr inbounds i8, i8* %3795, i64 42
  %3835 = bitcast i8* %3834 to i16*
  store i16 %3833, i16* %3835, align 2
  %3836 = getelementptr inbounds i8, i8* %3795, i64 2
  %3837 = bitcast i8* %3836 to i16*
  %3838 = shl <8 x i32> %3804, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %3839 = lshr <8 x i32> %3804, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %3840 = and <8 x i32> %3839, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %3841 = or <8 x i32> %3840, %3838
  %3842 = trunc <8 x i32> %3841 to <8 x i16>
  %3843 = extractelement <8 x i16> %3842, i32 0
  store i16 %3843, i16* %3837, align 2
  %3844 = extractelement <8 x i16> %3842, i32 1
  %3845 = getelementptr inbounds i8, i8* %3836, i64 6
  %3846 = bitcast i8* %3845 to i16*
  store i16 %3844, i16* %3846, align 2
  %3847 = extractelement <8 x i16> %3842, i32 2
  %3848 = getelementptr inbounds i8, i8* %3836, i64 12
  %3849 = bitcast i8* %3848 to i16*
  store i16 %3847, i16* %3849, align 2
  %3850 = extractelement <8 x i16> %3842, i32 3
  %3851 = getelementptr inbounds i8, i8* %3836, i64 18
  %3852 = bitcast i8* %3851 to i16*
  store i16 %3850, i16* %3852, align 2
  %3853 = extractelement <8 x i16> %3842, i32 4
  %3854 = getelementptr inbounds i8, i8* %3836, i64 24
  %3855 = bitcast i8* %3854 to i16*
  store i16 %3853, i16* %3855, align 2
  %3856 = extractelement <8 x i16> %3842, i32 5
  %3857 = getelementptr inbounds i8, i8* %3836, i64 30
  %3858 = bitcast i8* %3857 to i16*
  store i16 %3856, i16* %3858, align 2
  %3859 = extractelement <8 x i16> %3842, i32 6
  %3860 = getelementptr inbounds i8, i8* %3836, i64 36
  %3861 = bitcast i8* %3860 to i16*
  store i16 %3859, i16* %3861, align 2
  %3862 = extractelement <8 x i16> %3842, i32 7
  %3863 = getelementptr inbounds i8, i8* %3836, i64 42
  %3864 = bitcast i8* %3863 to i16*
  store i16 %3862, i16* %3864, align 2
  %3865 = getelementptr inbounds i8, i8* %3795, i64 4
  %3866 = bitcast i8* %3865 to i16*
  %3867 = shl <8 x i32> %3808, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %3868 = lshr <8 x i32> %3808, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %3869 = and <8 x i32> %3868, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %3870 = or <8 x i32> %3869, %3867
  %3871 = trunc <8 x i32> %3870 to <8 x i16>
  %3872 = extractelement <8 x i16> %3871, i32 0
  store i16 %3872, i16* %3866, align 2
  %3873 = extractelement <8 x i16> %3871, i32 1
  %3874 = getelementptr inbounds i8, i8* %3865, i64 6
  %3875 = bitcast i8* %3874 to i16*
  store i16 %3873, i16* %3875, align 2
  %3876 = extractelement <8 x i16> %3871, i32 2
  %3877 = getelementptr inbounds i8, i8* %3865, i64 12
  %3878 = bitcast i8* %3877 to i16*
  store i16 %3876, i16* %3878, align 2
  %3879 = extractelement <8 x i16> %3871, i32 3
  %3880 = getelementptr inbounds i8, i8* %3865, i64 18
  %3881 = bitcast i8* %3880 to i16*
  store i16 %3879, i16* %3881, align 2
  %3882 = extractelement <8 x i16> %3871, i32 4
  %3883 = getelementptr inbounds i8, i8* %3865, i64 24
  %3884 = bitcast i8* %3883 to i16*
  store i16 %3882, i16* %3884, align 2
  %3885 = extractelement <8 x i16> %3871, i32 5
  %3886 = getelementptr inbounds i8, i8* %3865, i64 30
  %3887 = bitcast i8* %3886 to i16*
  store i16 %3885, i16* %3887, align 2
  %3888 = extractelement <8 x i16> %3871, i32 6
  %3889 = getelementptr inbounds i8, i8* %3865, i64 36
  %3890 = bitcast i8* %3889 to i16*
  store i16 %3888, i16* %3890, align 2
  %3891 = extractelement <8 x i16> %3871, i32 7
  %3892 = getelementptr inbounds i8, i8* %3865, i64 42
  %3893 = bitcast i8* %3892 to i16*
  store i16 %3891, i16* %3893, align 2
  br label %4205

3894:                                             ; preds = %227
  %3895 = getelementptr inbounds i8, i8* %3, i64 %137
  %3896 = load <8 x float>, <8 x float>* %7, align 32
  %3897 = fmul <8 x float> %3896, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3898 = fadd <8 x float> %3897, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3899 = fptosi <8 x float> %3898 to <8 x i32>
  %3900 = zext <8 x i32> %3899 to <8 x i64>
  %3901 = load <8 x float>, <8 x float>* %8, align 32
  %3902 = fmul <8 x float> %3901, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3903 = fadd <8 x float> %3902, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3904 = fptosi <8 x float> %3903 to <8 x i32>
  %3905 = zext <8 x i32> %3904 to <8 x i64>
  %3906 = shl nuw nsw <8 x i64> %3905, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %3907 = or <8 x i64> %3906, %3900
  %3908 = load <8 x float>, <8 x float>* %9, align 32
  %3909 = fmul <8 x float> %3908, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3910 = fadd <8 x float> %3909, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3911 = fptosi <8 x float> %3910 to <8 x i32>
  %3912 = zext <8 x i32> %3911 to <8 x i64>
  %3913 = shl nuw <8 x i64> %3912, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %3914 = or <8 x i64> %3907, %3913
  %3915 = load <8 x float>, <8 x float>* %10, align 32
  %3916 = fmul <8 x float> %3915, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %3917 = fadd <8 x float> %3916, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3918 = fptosi <8 x float> %3917 to <8 x i32>
  %3919 = zext <8 x i32> %3918 to <8 x i64>
  %3920 = shl <8 x i64> %3919, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %3921 = or <8 x i64> %3914, %3920
  %3922 = shl <8 x i64> %3921, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %3923 = and <8 x i64> %3922, <i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696>
  %3924 = lshr <8 x i64> %3921, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %3925 = and <8 x i64> %3924, <i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695>
  %3926 = or <8 x i64> %3923, %3925
  %3927 = bitcast i8* %3895 to <8 x i64>*
  store <8 x i64> %3926, <8 x i64>* %3927, align 2
  br label %4205

3928:                                             ; preds = %227
  %3929 = getelementptr inbounds i8, i8* %3, i64 %141
  %3930 = bitcast i8* %3929 to i16*
  %3931 = load <8 x float>, <8 x float>* %7, align 32
  %3932 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %3931, i32 4) #17
  %3933 = load <8 x float>, <8 x float>* %8, align 32
  %3934 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %3933, i32 4) #17
  %3935 = load <8 x float>, <8 x float>* %9, align 32
  %3936 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %3935, i32 4) #17
  %3937 = extractelement <8 x i16> %3932, i32 0
  store i16 %3937, i16* %3930, align 2
  %3938 = extractelement <8 x i16> %3932, i32 1
  %3939 = getelementptr inbounds i8, i8* %3929, i64 6
  %3940 = bitcast i8* %3939 to i16*
  store i16 %3938, i16* %3940, align 2
  %3941 = extractelement <8 x i16> %3932, i32 2
  %3942 = getelementptr inbounds i8, i8* %3929, i64 12
  %3943 = bitcast i8* %3942 to i16*
  store i16 %3941, i16* %3943, align 2
  %3944 = extractelement <8 x i16> %3932, i32 3
  %3945 = getelementptr inbounds i8, i8* %3929, i64 18
  %3946 = bitcast i8* %3945 to i16*
  store i16 %3944, i16* %3946, align 2
  %3947 = extractelement <8 x i16> %3932, i32 4
  %3948 = getelementptr inbounds i8, i8* %3929, i64 24
  %3949 = bitcast i8* %3948 to i16*
  store i16 %3947, i16* %3949, align 2
  %3950 = extractelement <8 x i16> %3932, i32 5
  %3951 = getelementptr inbounds i8, i8* %3929, i64 30
  %3952 = bitcast i8* %3951 to i16*
  store i16 %3950, i16* %3952, align 2
  %3953 = extractelement <8 x i16> %3932, i32 6
  %3954 = getelementptr inbounds i8, i8* %3929, i64 36
  %3955 = bitcast i8* %3954 to i16*
  store i16 %3953, i16* %3955, align 2
  %3956 = extractelement <8 x i16> %3932, i32 7
  %3957 = getelementptr inbounds i8, i8* %3929, i64 42
  %3958 = bitcast i8* %3957 to i16*
  store i16 %3956, i16* %3958, align 2
  %3959 = getelementptr inbounds i8, i8* %3929, i64 2
  %3960 = bitcast i8* %3959 to i16*
  %3961 = extractelement <8 x i16> %3934, i32 0
  store i16 %3961, i16* %3960, align 2
  %3962 = extractelement <8 x i16> %3934, i32 1
  %3963 = getelementptr inbounds i8, i8* %3959, i64 6
  %3964 = bitcast i8* %3963 to i16*
  store i16 %3962, i16* %3964, align 2
  %3965 = extractelement <8 x i16> %3934, i32 2
  %3966 = getelementptr inbounds i8, i8* %3959, i64 12
  %3967 = bitcast i8* %3966 to i16*
  store i16 %3965, i16* %3967, align 2
  %3968 = extractelement <8 x i16> %3934, i32 3
  %3969 = getelementptr inbounds i8, i8* %3959, i64 18
  %3970 = bitcast i8* %3969 to i16*
  store i16 %3968, i16* %3970, align 2
  %3971 = extractelement <8 x i16> %3934, i32 4
  %3972 = getelementptr inbounds i8, i8* %3959, i64 24
  %3973 = bitcast i8* %3972 to i16*
  store i16 %3971, i16* %3973, align 2
  %3974 = extractelement <8 x i16> %3934, i32 5
  %3975 = getelementptr inbounds i8, i8* %3959, i64 30
  %3976 = bitcast i8* %3975 to i16*
  store i16 %3974, i16* %3976, align 2
  %3977 = extractelement <8 x i16> %3934, i32 6
  %3978 = getelementptr inbounds i8, i8* %3959, i64 36
  %3979 = bitcast i8* %3978 to i16*
  store i16 %3977, i16* %3979, align 2
  %3980 = extractelement <8 x i16> %3934, i32 7
  %3981 = getelementptr inbounds i8, i8* %3959, i64 42
  %3982 = bitcast i8* %3981 to i16*
  store i16 %3980, i16* %3982, align 2
  %3983 = getelementptr inbounds i8, i8* %3929, i64 4
  %3984 = bitcast i8* %3983 to i16*
  %3985 = extractelement <8 x i16> %3936, i32 0
  store i16 %3985, i16* %3984, align 2
  %3986 = extractelement <8 x i16> %3936, i32 1
  %3987 = getelementptr inbounds i8, i8* %3983, i64 6
  %3988 = bitcast i8* %3987 to i16*
  store i16 %3986, i16* %3988, align 2
  %3989 = extractelement <8 x i16> %3936, i32 2
  %3990 = getelementptr inbounds i8, i8* %3983, i64 12
  %3991 = bitcast i8* %3990 to i16*
  store i16 %3989, i16* %3991, align 2
  %3992 = extractelement <8 x i16> %3936, i32 3
  %3993 = getelementptr inbounds i8, i8* %3983, i64 18
  %3994 = bitcast i8* %3993 to i16*
  store i16 %3992, i16* %3994, align 2
  %3995 = extractelement <8 x i16> %3936, i32 4
  %3996 = getelementptr inbounds i8, i8* %3983, i64 24
  %3997 = bitcast i8* %3996 to i16*
  store i16 %3995, i16* %3997, align 2
  %3998 = extractelement <8 x i16> %3936, i32 5
  %3999 = getelementptr inbounds i8, i8* %3983, i64 30
  %4000 = bitcast i8* %3999 to i16*
  store i16 %3998, i16* %4000, align 2
  %4001 = extractelement <8 x i16> %3936, i32 6
  %4002 = getelementptr inbounds i8, i8* %3983, i64 36
  %4003 = bitcast i8* %4002 to i16*
  store i16 %4001, i16* %4003, align 2
  %4004 = extractelement <8 x i16> %3936, i32 7
  %4005 = getelementptr inbounds i8, i8* %3983, i64 42
  %4006 = bitcast i8* %4005 to i16*
  store i16 %4004, i16* %4006, align 2
  br label %4205

4007:                                             ; preds = %227
  %4008 = getelementptr inbounds i8, i8* %3, i64 %137
  %4009 = load <8 x float>, <8 x float>* %7, align 32
  %4010 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %4009, i32 4) #17
  %4011 = load <8 x float>, <8 x float>* %8, align 32
  %4012 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %4011, i32 4) #17
  %4013 = load <8 x float>, <8 x float>* %9, align 32
  %4014 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %4013, i32 4) #17
  %4015 = load <8 x float>, <8 x float>* %10, align 32
  %4016 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %4015, i32 4) #17
  %4017 = zext <8 x i16> %4010 to <8 x i64>
  %4018 = zext <8 x i16> %4012 to <8 x i64>
  %4019 = shl nuw nsw <8 x i64> %4018, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %4020 = or <8 x i64> %4019, %4017
  %4021 = zext <8 x i16> %4014 to <8 x i64>
  %4022 = shl nuw nsw <8 x i64> %4021, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %4023 = or <8 x i64> %4020, %4022
  %4024 = zext <8 x i16> %4016 to <8 x i64>
  %4025 = shl nuw <8 x i64> %4024, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %4026 = or <8 x i64> %4023, %4025
  %4027 = bitcast i8* %4008 to <8 x i64>*
  store <8 x i64> %4026, <8 x i64>* %4027, align 2
  br label %4205

4028:                                             ; preds = %227
  %4029 = getelementptr inbounds i8, i8* %3, i64 %87
  %4030 = bitcast i8* %4029 to float*
  %4031 = load <8 x float>, <8 x float>* %7, align 32
  %4032 = extractelement <8 x float> %4031, i32 0
  store float %4032, float* %4030, align 4
  %4033 = extractelement <8 x float> %4031, i32 1
  %4034 = getelementptr inbounds i8, i8* %4029, i64 12
  %4035 = bitcast i8* %4034 to float*
  store float %4033, float* %4035, align 4
  %4036 = extractelement <8 x float> %4031, i32 2
  %4037 = getelementptr inbounds i8, i8* %4029, i64 24
  %4038 = bitcast i8* %4037 to float*
  store float %4036, float* %4038, align 4
  %4039 = extractelement <8 x float> %4031, i32 3
  %4040 = getelementptr inbounds i8, i8* %4029, i64 36
  %4041 = bitcast i8* %4040 to float*
  store float %4039, float* %4041, align 4
  %4042 = extractelement <8 x float> %4031, i32 4
  %4043 = getelementptr inbounds i8, i8* %4029, i64 48
  %4044 = bitcast i8* %4043 to float*
  store float %4042, float* %4044, align 4
  %4045 = extractelement <8 x float> %4031, i32 5
  %4046 = getelementptr inbounds i8, i8* %4029, i64 60
  %4047 = bitcast i8* %4046 to float*
  store float %4045, float* %4047, align 4
  %4048 = extractelement <8 x float> %4031, i32 6
  %4049 = getelementptr inbounds i8, i8* %4029, i64 72
  %4050 = bitcast i8* %4049 to float*
  store float %4048, float* %4050, align 4
  %4051 = extractelement <8 x float> %4031, i32 7
  %4052 = getelementptr inbounds i8, i8* %4029, i64 84
  %4053 = bitcast i8* %4052 to float*
  store float %4051, float* %4053, align 4
  %4054 = getelementptr inbounds i8, i8* %4029, i64 4
  %4055 = bitcast i8* %4054 to float*
  %4056 = load <8 x float>, <8 x float>* %8, align 32
  %4057 = extractelement <8 x float> %4056, i32 0
  store float %4057, float* %4055, align 4
  %4058 = extractelement <8 x float> %4056, i32 1
  %4059 = getelementptr inbounds i8, i8* %4054, i64 12
  %4060 = bitcast i8* %4059 to float*
  store float %4058, float* %4060, align 4
  %4061 = extractelement <8 x float> %4056, i32 2
  %4062 = getelementptr inbounds i8, i8* %4054, i64 24
  %4063 = bitcast i8* %4062 to float*
  store float %4061, float* %4063, align 4
  %4064 = extractelement <8 x float> %4056, i32 3
  %4065 = getelementptr inbounds i8, i8* %4054, i64 36
  %4066 = bitcast i8* %4065 to float*
  store float %4064, float* %4066, align 4
  %4067 = extractelement <8 x float> %4056, i32 4
  %4068 = getelementptr inbounds i8, i8* %4054, i64 48
  %4069 = bitcast i8* %4068 to float*
  store float %4067, float* %4069, align 4
  %4070 = extractelement <8 x float> %4056, i32 5
  %4071 = getelementptr inbounds i8, i8* %4054, i64 60
  %4072 = bitcast i8* %4071 to float*
  store float %4070, float* %4072, align 4
  %4073 = extractelement <8 x float> %4056, i32 6
  %4074 = getelementptr inbounds i8, i8* %4054, i64 72
  %4075 = bitcast i8* %4074 to float*
  store float %4073, float* %4075, align 4
  %4076 = extractelement <8 x float> %4056, i32 7
  %4077 = getelementptr inbounds i8, i8* %4054, i64 84
  %4078 = bitcast i8* %4077 to float*
  store float %4076, float* %4078, align 4
  %4079 = getelementptr inbounds i8, i8* %4029, i64 8
  %4080 = bitcast i8* %4079 to float*
  %4081 = load <8 x float>, <8 x float>* %9, align 32
  %4082 = extractelement <8 x float> %4081, i32 0
  store float %4082, float* %4080, align 4
  %4083 = extractelement <8 x float> %4081, i32 1
  %4084 = getelementptr inbounds i8, i8* %4079, i64 12
  %4085 = bitcast i8* %4084 to float*
  store float %4083, float* %4085, align 4
  %4086 = extractelement <8 x float> %4081, i32 2
  %4087 = getelementptr inbounds i8, i8* %4079, i64 24
  %4088 = bitcast i8* %4087 to float*
  store float %4086, float* %4088, align 4
  %4089 = extractelement <8 x float> %4081, i32 3
  %4090 = getelementptr inbounds i8, i8* %4079, i64 36
  %4091 = bitcast i8* %4090 to float*
  store float %4089, float* %4091, align 4
  %4092 = extractelement <8 x float> %4081, i32 4
  %4093 = getelementptr inbounds i8, i8* %4079, i64 48
  %4094 = bitcast i8* %4093 to float*
  store float %4092, float* %4094, align 4
  %4095 = extractelement <8 x float> %4081, i32 5
  %4096 = getelementptr inbounds i8, i8* %4079, i64 60
  %4097 = bitcast i8* %4096 to float*
  store float %4095, float* %4097, align 4
  %4098 = extractelement <8 x float> %4081, i32 6
  %4099 = getelementptr inbounds i8, i8* %4079, i64 72
  %4100 = bitcast i8* %4099 to float*
  store float %4098, float* %4100, align 4
  %4101 = extractelement <8 x float> %4081, i32 7
  %4102 = getelementptr inbounds i8, i8* %4079, i64 84
  %4103 = bitcast i8* %4102 to float*
  store float %4101, float* %4103, align 4
  br label %4205

4104:                                             ; preds = %227
  %4105 = getelementptr inbounds i8, i8* %3, i64 %21
  %4106 = bitcast i8* %4105 to float*
  %4107 = load <8 x float>, <8 x float>* %7, align 32
  %4108 = extractelement <8 x float> %4107, i32 0
  store float %4108, float* %4106, align 4
  %4109 = extractelement <8 x float> %4107, i32 1
  %4110 = getelementptr inbounds i8, i8* %4105, i64 16
  %4111 = bitcast i8* %4110 to float*
  store float %4109, float* %4111, align 4
  %4112 = extractelement <8 x float> %4107, i32 2
  %4113 = getelementptr inbounds i8, i8* %4105, i64 32
  %4114 = bitcast i8* %4113 to float*
  store float %4112, float* %4114, align 4
  %4115 = extractelement <8 x float> %4107, i32 3
  %4116 = getelementptr inbounds i8, i8* %4105, i64 48
  %4117 = bitcast i8* %4116 to float*
  store float %4115, float* %4117, align 4
  %4118 = extractelement <8 x float> %4107, i32 4
  %4119 = getelementptr inbounds i8, i8* %4105, i64 64
  %4120 = bitcast i8* %4119 to float*
  store float %4118, float* %4120, align 4
  %4121 = extractelement <8 x float> %4107, i32 5
  %4122 = getelementptr inbounds i8, i8* %4105, i64 80
  %4123 = bitcast i8* %4122 to float*
  store float %4121, float* %4123, align 4
  %4124 = extractelement <8 x float> %4107, i32 6
  %4125 = getelementptr inbounds i8, i8* %4105, i64 96
  %4126 = bitcast i8* %4125 to float*
  store float %4124, float* %4126, align 4
  %4127 = extractelement <8 x float> %4107, i32 7
  %4128 = getelementptr inbounds i8, i8* %4105, i64 112
  %4129 = bitcast i8* %4128 to float*
  store float %4127, float* %4129, align 4
  %4130 = getelementptr inbounds i8, i8* %4105, i64 4
  %4131 = bitcast i8* %4130 to float*
  %4132 = load <8 x float>, <8 x float>* %8, align 32
  %4133 = extractelement <8 x float> %4132, i32 0
  store float %4133, float* %4131, align 4
  %4134 = extractelement <8 x float> %4132, i32 1
  %4135 = getelementptr inbounds i8, i8* %4130, i64 16
  %4136 = bitcast i8* %4135 to float*
  store float %4134, float* %4136, align 4
  %4137 = extractelement <8 x float> %4132, i32 2
  %4138 = getelementptr inbounds i8, i8* %4130, i64 32
  %4139 = bitcast i8* %4138 to float*
  store float %4137, float* %4139, align 4
  %4140 = extractelement <8 x float> %4132, i32 3
  %4141 = getelementptr inbounds i8, i8* %4130, i64 48
  %4142 = bitcast i8* %4141 to float*
  store float %4140, float* %4142, align 4
  %4143 = extractelement <8 x float> %4132, i32 4
  %4144 = getelementptr inbounds i8, i8* %4130, i64 64
  %4145 = bitcast i8* %4144 to float*
  store float %4143, float* %4145, align 4
  %4146 = extractelement <8 x float> %4132, i32 5
  %4147 = getelementptr inbounds i8, i8* %4130, i64 80
  %4148 = bitcast i8* %4147 to float*
  store float %4146, float* %4148, align 4
  %4149 = extractelement <8 x float> %4132, i32 6
  %4150 = getelementptr inbounds i8, i8* %4130, i64 96
  %4151 = bitcast i8* %4150 to float*
  store float %4149, float* %4151, align 4
  %4152 = extractelement <8 x float> %4132, i32 7
  %4153 = getelementptr inbounds i8, i8* %4130, i64 112
  %4154 = bitcast i8* %4153 to float*
  store float %4152, float* %4154, align 4
  %4155 = getelementptr inbounds i8, i8* %4105, i64 8
  %4156 = bitcast i8* %4155 to float*
  %4157 = load <8 x float>, <8 x float>* %9, align 32
  %4158 = extractelement <8 x float> %4157, i32 0
  store float %4158, float* %4156, align 4
  %4159 = extractelement <8 x float> %4157, i32 1
  %4160 = getelementptr inbounds i8, i8* %4155, i64 16
  %4161 = bitcast i8* %4160 to float*
  store float %4159, float* %4161, align 4
  %4162 = extractelement <8 x float> %4157, i32 2
  %4163 = getelementptr inbounds i8, i8* %4155, i64 32
  %4164 = bitcast i8* %4163 to float*
  store float %4162, float* %4164, align 4
  %4165 = extractelement <8 x float> %4157, i32 3
  %4166 = getelementptr inbounds i8, i8* %4155, i64 48
  %4167 = bitcast i8* %4166 to float*
  store float %4165, float* %4167, align 4
  %4168 = extractelement <8 x float> %4157, i32 4
  %4169 = getelementptr inbounds i8, i8* %4155, i64 64
  %4170 = bitcast i8* %4169 to float*
  store float %4168, float* %4170, align 4
  %4171 = extractelement <8 x float> %4157, i32 5
  %4172 = getelementptr inbounds i8, i8* %4155, i64 80
  %4173 = bitcast i8* %4172 to float*
  store float %4171, float* %4173, align 4
  %4174 = extractelement <8 x float> %4157, i32 6
  %4175 = getelementptr inbounds i8, i8* %4155, i64 96
  %4176 = bitcast i8* %4175 to float*
  store float %4174, float* %4176, align 4
  %4177 = extractelement <8 x float> %4157, i32 7
  %4178 = getelementptr inbounds i8, i8* %4155, i64 112
  %4179 = bitcast i8* %4178 to float*
  store float %4177, float* %4179, align 4
  %4180 = getelementptr inbounds i8, i8* %4105, i64 12
  %4181 = bitcast i8* %4180 to float*
  %4182 = load <8 x float>, <8 x float>* %10, align 32
  %4183 = extractelement <8 x float> %4182, i32 0
  store float %4183, float* %4181, align 4
  %4184 = extractelement <8 x float> %4182, i32 1
  %4185 = getelementptr inbounds i8, i8* %4180, i64 16
  %4186 = bitcast i8* %4185 to float*
  store float %4184, float* %4186, align 4
  %4187 = extractelement <8 x float> %4182, i32 2
  %4188 = getelementptr inbounds i8, i8* %4180, i64 32
  %4189 = bitcast i8* %4188 to float*
  store float %4187, float* %4189, align 4
  %4190 = extractelement <8 x float> %4182, i32 3
  %4191 = getelementptr inbounds i8, i8* %4180, i64 48
  %4192 = bitcast i8* %4191 to float*
  store float %4190, float* %4192, align 4
  %4193 = extractelement <8 x float> %4182, i32 4
  %4194 = getelementptr inbounds i8, i8* %4180, i64 64
  %4195 = bitcast i8* %4194 to float*
  store float %4193, float* %4195, align 4
  %4196 = extractelement <8 x float> %4182, i32 5
  %4197 = getelementptr inbounds i8, i8* %4180, i64 80
  %4198 = bitcast i8* %4197 to float*
  store float %4196, float* %4198, align 4
  %4199 = extractelement <8 x float> %4182, i32 6
  %4200 = getelementptr inbounds i8, i8* %4180, i64 96
  %4201 = bitcast i8* %4200 to float*
  store float %4199, float* %4201, align 4
  %4202 = extractelement <8 x float> %4182, i32 7
  %4203 = getelementptr inbounds i8, i8* %4180, i64 112
  %4204 = bitcast i8* %4203 to float*
  store float %4202, float* %4204, align 4
  br label %4205

4205:                                             ; preds = %4104, %4028, %4007, %3928, %3894, %3794, %3765, %3680, %3655, %3630, %3566, %3546, %3520, %3512, %3504
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #17
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16>) #13

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.round.ps.256(<8 x float>, i32 immarg) #13

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3hswL4clutEjjPKhS1_S1_PDv8_fS3_S3_S3_(i32, i32, i8* nocapture readonly, i8*, i8*, <8 x float>* nocapture, <8 x float>* nocapture, <8 x float>* nocapture, <8 x float>* nocapture) unnamed_addr #12 {
  %10 = alloca [8 x <8 x i32>], align 32
  %11 = alloca [8 x <8 x float>], align 32
  %12 = alloca [4 x <8 x float>], align 32
  %13 = bitcast [8 x <8 x i32>]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %13) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %13, i8 -86, i64 256, i1 false)
  %14 = bitcast [8 x <8 x float>]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %14) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %14, i8 -1, i64 256, i1 false)
  %15 = bitcast [4 x <8 x float>]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %15) #17
  %16 = getelementptr inbounds [4 x <8 x float>], [4 x <8 x float>]* %12, i64 0, i64 0
  %17 = load <8 x float>, <8 x float>* %5, align 32
  store <8 x float> %17, <8 x float>* %16, align 32
  %18 = getelementptr inbounds [4 x <8 x float>], [4 x <8 x float>]* %12, i64 0, i64 1
  %19 = load <8 x float>, <8 x float>* %6, align 32
  store <8 x float> %19, <8 x float>* %18, align 32
  %20 = getelementptr inbounds [4 x <8 x float>], [4 x <8 x float>]* %12, i64 0, i64 2
  %21 = load <8 x float>, <8 x float>* %7, align 32
  store <8 x float> %21, <8 x float>* %20, align 32
  %22 = getelementptr inbounds [4 x <8 x float>], [4 x <8 x float>]* %12, i64 0, i64 3
  %23 = load <8 x float>, <8 x float>* %8, align 32
  store <8 x float> %23, <8 x float>* %22, align 32
  %24 = add i32 %0, 3
  %25 = icmp sgt i32 %0, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %9
  %27 = sext i32 %0 to i64
  br label %30

28:                                               ; preds = %30, %9
  store <8 x float> zeroinitializer, <8 x float>* %7, align 32
  store <8 x float> zeroinitializer, <8 x float>* %6, align 32
  store <8 x float> zeroinitializer, <8 x float>* %5, align 32
  %29 = icmp eq i32 %1, 4
  br i1 %29, label %64, label %65

30:                                               ; preds = %26, %30
  %31 = phi i64 [ %27, %26 ], [ %33, %30 ]
  %32 = phi i32 [ 1, %26 ], [ %57, %30 ]
  %33 = add nsw i64 %31, -1
  %34 = getelementptr inbounds [4 x <8 x float>], [4 x <8 x float>]* %12, i64 0, i64 %33
  %35 = load <8 x float>, <8 x float>* %34, align 32
  %36 = getelementptr inbounds i8, i8* %2, i64 %33
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = add nsw i32 %38, -1
  %40 = sitofp i32 %39 to float
  %41 = insertelement <8 x float> undef, float %40, i32 0
  %42 = shufflevector <8 x float> %41, <8 x float> undef, <8 x i32> zeroinitializer
  %43 = fmul <8 x float> %35, %42
  %44 = fptosi <8 x float> %43 to <8 x i32>
  %45 = fadd <8 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %46 = bitcast <8 x float> %45 to <8 x i32>
  %47 = add <8 x i32> %46, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %48 = bitcast <8 x i32> %47 to <8 x float>
  %49 = fptosi <8 x float> %48 to <8 x i32>
  %50 = insertelement <8 x i32> undef, i32 %32, i32 0
  %51 = shufflevector <8 x i32> %50, <8 x i32> undef, <8 x i32> zeroinitializer
  %52 = mul <8 x i32> %51, %44
  %53 = getelementptr inbounds [8 x <8 x i32>], [8 x <8 x i32>]* %10, i64 0, i64 %33
  store <8 x i32> %52, <8 x i32>* %53, align 32
  %54 = mul <8 x i32> %51, %49
  %55 = add nuw i64 %31, 3
  %56 = getelementptr inbounds [8 x <8 x i32>], [8 x <8 x i32>]* %10, i64 0, i64 %55
  store <8 x i32> %54, <8 x i32>* %56, align 32
  %57 = mul nsw i32 %32, %38
  %58 = sitofp <8 x i32> %44 to <8 x float>
  %59 = fsub <8 x float> %43, %58
  %60 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %59
  %61 = getelementptr inbounds [8 x <8 x float>], [8 x <8 x float>]* %11, i64 0, i64 %33
  store <8 x float> %60, <8 x float>* %61, align 32
  %62 = getelementptr inbounds [8 x <8 x float>], [8 x <8 x float>]* %11, i64 0, i64 %55
  store <8 x float> %59, <8 x float>* %62, align 32
  %63 = icmp sgt i64 %33, 0
  br i1 %63, label %30, label %28

64:                                               ; preds = %28
  store <8 x float> zeroinitializer, <8 x float>* %8, align 32
  br label %65

65:                                               ; preds = %64, %28
  %66 = shl i32 1, %0
  %67 = icmp eq i32 %0, 31
  br i1 %67, label %74, label %68

68:                                               ; preds = %65
  %69 = and i32 %24, 3
  %70 = icmp eq i32 %1, 3
  %71 = icmp ne i8* %3, null
  %72 = getelementptr inbounds i8, i8* %4, i64 -2
  %73 = getelementptr inbounds i8, i8* %3, i64 -1
  br label %75

74:                                               ; preds = %447, %65
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %15) #17
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %14) #17
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %13) #17
  ret void

75:                                               ; preds = %68, %447
  %76 = phi i32 [ 0, %68 ], [ %464, %447 ]
  %77 = shl i32 %76, 2
  %78 = and i32 %77, 4
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [8 x <8 x i32>], [8 x <8 x i32>]* %10, i64 0, i64 %79
  %81 = load <8 x i32>, <8 x i32>* %80, align 32
  %82 = getelementptr inbounds [8 x <8 x float>], [8 x <8 x float>]* %11, i64 0, i64 %79
  %83 = load <8 x float>, <8 x float>* %82, align 32
  switch i32 %69, label %120 [
    i32 3, label %84
    i32 2, label %95
    i32 1, label %107
  ]

84:                                               ; preds = %75
  %85 = lshr i32 %76, 1
  %86 = and i32 %85, 4
  %87 = or i32 %86, 3
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds [8 x <8 x i32>], [8 x <8 x i32>]* %10, i64 0, i64 %88
  %90 = load <8 x i32>, <8 x i32>* %89, align 32
  %91 = add <8 x i32> %90, %81
  %92 = getelementptr inbounds [8 x <8 x float>], [8 x <8 x float>]* %11, i64 0, i64 %88
  %93 = load <8 x float>, <8 x float>* %92, align 32
  %94 = fmul <8 x float> %83, %93
  br label %95

95:                                               ; preds = %75, %84
  %96 = phi <8 x i32> [ %81, %75 ], [ %91, %84 ]
  %97 = phi <8 x float> [ %83, %75 ], [ %94, %84 ]
  %98 = and i32 %76, 4
  %99 = or i32 %98, 2
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds [8 x <8 x i32>], [8 x <8 x i32>]* %10, i64 0, i64 %100
  %102 = load <8 x i32>, <8 x i32>* %101, align 32
  %103 = add <8 x i32> %102, %96
  %104 = getelementptr inbounds [8 x <8 x float>], [8 x <8 x float>]* %11, i64 0, i64 %100
  %105 = load <8 x float>, <8 x float>* %104, align 32
  %106 = fmul <8 x float> %97, %105
  br label %107

107:                                              ; preds = %75, %95
  %108 = phi <8 x i32> [ %81, %75 ], [ %103, %95 ]
  %109 = phi <8 x float> [ %83, %75 ], [ %106, %95 ]
  %110 = shl nuw i32 %76, 1
  %111 = and i32 %110, 4
  %112 = or i32 %111, 1
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds [8 x <8 x i32>], [8 x <8 x i32>]* %10, i64 0, i64 %113
  %115 = load <8 x i32>, <8 x i32>* %114, align 32
  %116 = add <8 x i32> %115, %108
  %117 = getelementptr inbounds [8 x <8 x float>], [8 x <8 x float>]* %11, i64 0, i64 %113
  %118 = load <8 x float>, <8 x float>* %117, align 32
  %119 = fmul <8 x float> %109, %118
  br label %120

120:                                              ; preds = %107, %75
  %121 = phi <8 x i32> [ %81, %75 ], [ %116, %107 ]
  %122 = phi <8 x float> [ %83, %75 ], [ %119, %107 ]
  br i1 %70, label %123, label %162

123:                                              ; preds = %120
  br i1 %71, label %124, label %138

124:                                              ; preds = %123
  %125 = mul <8 x i32> %121, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %126 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %73, <8 x i32> %125, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 1) #17
  %127 = lshr <8 x i32> %126, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %128 = and <8 x i32> %127, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %129 = uitofp <8 x i32> %128 to <8 x float>
  %130 = fmul <8 x float> %129, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %131 = lshr <8 x i32> %126, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %132 = and <8 x i32> %131, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %133 = uitofp <8 x i32> %132 to <8 x float>
  %134 = fmul <8 x float> %133, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %135 = lshr <8 x i32> %126, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %136 = uitofp <8 x i32> %135 to <8 x float>
  %137 = fmul <8 x float> %136, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %447

138:                                              ; preds = %123
  %139 = mul <8 x i32> %121, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %140 = shufflevector <8 x i32> %139, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %141 = shufflevector <8 x i32> %139, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %142 = tail call <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64> zeroinitializer, i8* %72, <4 x i32> %140, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, i8 1) #17
  %143 = tail call <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64> zeroinitializer, i8* %72, <4 x i32> %141, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, i8 1) #17
  %144 = shufflevector <4 x i64> %142, <4 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %145 = shufflevector <4 x i64> %143, <4 x i64> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %146 = shufflevector <8 x i64> %144, <8 x i64> %145, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %147 = lshr <8 x i64> %146, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %148 = and <8 x i64> %147, <i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240>
  %149 = lshr <8 x i64> %146, <i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24>
  %150 = and <8 x i64> %149, <i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415>
  %151 = or <8 x i64> %148, %150
  %152 = and <8 x i64> %151, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %153 = uitofp <8 x i64> %152 to <8 x float>
  %154 = fmul <8 x float> %153, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %155 = lshr <8 x i64> %151, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %156 = and <8 x i64> %155, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %157 = uitofp <8 x i64> %156 to <8 x float>
  %158 = fmul <8 x float> %157, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %159 = lshr <8 x i64> %151, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %160 = uitofp <8 x i64> %159 to <8 x float>
  %161 = fmul <8 x float> %160, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %447

162:                                              ; preds = %120
  br i1 %71, label %163, label %227

163:                                              ; preds = %162
  %164 = shl nsw <8 x i32> %121, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %165 = extractelement <8 x i32> %164, i32 0
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i8, i8* %3, i64 %166
  %168 = bitcast i8* %167 to i32*
  %169 = load i32, i32* %168, align 1
  %170 = insertelement <8 x i32> undef, i32 %169, i32 0
  %171 = extractelement <8 x i32> %164, i32 1
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %3, i64 %172
  %174 = bitcast i8* %173 to i32*
  %175 = load i32, i32* %174, align 1
  %176 = insertelement <8 x i32> %170, i32 %175, i32 1
  %177 = extractelement <8 x i32> %164, i32 2
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i8, i8* %3, i64 %178
  %180 = bitcast i8* %179 to i32*
  %181 = load i32, i32* %180, align 1
  %182 = insertelement <8 x i32> %176, i32 %181, i32 2
  %183 = extractelement <8 x i32> %164, i32 3
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds i8, i8* %3, i64 %184
  %186 = bitcast i8* %185 to i32*
  %187 = load i32, i32* %186, align 1
  %188 = insertelement <8 x i32> %182, i32 %187, i32 3
  %189 = extractelement <8 x i32> %164, i32 4
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %3, i64 %190
  %192 = bitcast i8* %191 to i32*
  %193 = load i32, i32* %192, align 1
  %194 = insertelement <8 x i32> %188, i32 %193, i32 4
  %195 = extractelement <8 x i32> %164, i32 5
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds i8, i8* %3, i64 %196
  %198 = bitcast i8* %197 to i32*
  %199 = load i32, i32* %198, align 1
  %200 = insertelement <8 x i32> %194, i32 %199, i32 5
  %201 = extractelement <8 x i32> %164, i32 6
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds i8, i8* %3, i64 %202
  %204 = bitcast i8* %203 to i32*
  %205 = load i32, i32* %204, align 1
  %206 = insertelement <8 x i32> %200, i32 %205, i32 6
  %207 = extractelement <8 x i32> %164, i32 7
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i8, i8* %3, i64 %208
  %210 = bitcast i8* %209 to i32*
  %211 = load i32, i32* %210, align 1
  %212 = insertelement <8 x i32> %206, i32 %211, i32 7
  %213 = and <8 x i32> %212, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %214 = uitofp <8 x i32> %213 to <8 x float>
  %215 = fmul <8 x float> %214, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %216 = lshr <8 x i32> %212, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %217 = and <8 x i32> %216, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %218 = uitofp <8 x i32> %217 to <8 x float>
  %219 = fmul <8 x float> %218, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %220 = lshr <8 x i32> %212, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %221 = and <8 x i32> %220, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %222 = uitofp <8 x i32> %221 to <8 x float>
  %223 = fmul <8 x float> %222, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %224 = lshr <8 x i32> %212, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %225 = uitofp <8 x i32> %224 to <8 x float>
  %226 = fmul <8 x float> %225, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %447

227:                                              ; preds = %162
  %228 = shl <8 x i32> %121, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %229 = shl <8 x i32> %121, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %230 = extractelement <8 x i32> %229, i32 0
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds i8, i8* %4, i64 %231
  %233 = bitcast i8* %232 to i16*
  %234 = load i16, i16* %233, align 1
  %235 = insertelement <8 x i16> undef, i16 %234, i32 0
  %236 = extractelement <8 x i32> %229, i32 1
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds i8, i8* %4, i64 %237
  %239 = bitcast i8* %238 to i16*
  %240 = load i16, i16* %239, align 1
  %241 = insertelement <8 x i16> %235, i16 %240, i32 1
  %242 = extractelement <8 x i32> %229, i32 2
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds i8, i8* %4, i64 %243
  %245 = bitcast i8* %244 to i16*
  %246 = load i16, i16* %245, align 1
  %247 = insertelement <8 x i16> %241, i16 %246, i32 2
  %248 = extractelement <8 x i32> %229, i32 3
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds i8, i8* %4, i64 %249
  %251 = bitcast i8* %250 to i16*
  %252 = load i16, i16* %251, align 1
  %253 = insertelement <8 x i16> %247, i16 %252, i32 3
  %254 = extractelement <8 x i32> %229, i32 4
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds i8, i8* %4, i64 %255
  %257 = bitcast i8* %256 to i16*
  %258 = load i16, i16* %257, align 1
  %259 = insertelement <8 x i16> %253, i16 %258, i32 4
  %260 = extractelement <8 x i32> %229, i32 5
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds i8, i8* %4, i64 %261
  %263 = bitcast i8* %262 to i16*
  %264 = load i16, i16* %263, align 1
  %265 = insertelement <8 x i16> %259, i16 %264, i32 5
  %266 = extractelement <8 x i32> %229, i32 6
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds i8, i8* %4, i64 %267
  %269 = bitcast i8* %268 to i16*
  %270 = load i16, i16* %269, align 1
  %271 = insertelement <8 x i16> %265, i16 %270, i32 6
  %272 = extractelement <8 x i32> %229, i32 7
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds i8, i8* %4, i64 %273
  %275 = bitcast i8* %274 to i16*
  %276 = load i16, i16* %275, align 1
  %277 = insertelement <8 x i16> %271, i16 %276, i32 7
  %278 = lshr <8 x i16> %277, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %279 = shl <8 x i16> %277, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %280 = or <8 x i16> %278, %279
  %281 = uitofp <8 x i16> %280 to <8 x float>
  %282 = fmul <8 x float> %281, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %283 = shl <8 x i32> %121, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %284 = or <8 x i32> %283, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %285 = extractelement <8 x i32> %284, i32 0
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds i8, i8* %4, i64 %286
  %288 = bitcast i8* %287 to i16*
  %289 = load i16, i16* %288, align 1
  %290 = insertelement <8 x i16> undef, i16 %289, i32 0
  %291 = extractelement <8 x i32> %284, i32 1
  %292 = sext i32 %291 to i64
  %293 = getelementptr inbounds i8, i8* %4, i64 %292
  %294 = bitcast i8* %293 to i16*
  %295 = load i16, i16* %294, align 1
  %296 = insertelement <8 x i16> %290, i16 %295, i32 1
  %297 = extractelement <8 x i32> %284, i32 2
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds i8, i8* %4, i64 %298
  %300 = bitcast i8* %299 to i16*
  %301 = load i16, i16* %300, align 1
  %302 = insertelement <8 x i16> %296, i16 %301, i32 2
  %303 = extractelement <8 x i32> %284, i32 3
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds i8, i8* %4, i64 %304
  %306 = bitcast i8* %305 to i16*
  %307 = load i16, i16* %306, align 1
  %308 = insertelement <8 x i16> %302, i16 %307, i32 3
  %309 = extractelement <8 x i32> %284, i32 4
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds i8, i8* %4, i64 %310
  %312 = bitcast i8* %311 to i16*
  %313 = load i16, i16* %312, align 1
  %314 = insertelement <8 x i16> %308, i16 %313, i32 4
  %315 = extractelement <8 x i32> %284, i32 5
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds i8, i8* %4, i64 %316
  %318 = bitcast i8* %317 to i16*
  %319 = load i16, i16* %318, align 1
  %320 = insertelement <8 x i16> %314, i16 %319, i32 5
  %321 = extractelement <8 x i32> %284, i32 6
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds i8, i8* %4, i64 %322
  %324 = bitcast i8* %323 to i16*
  %325 = load i16, i16* %324, align 1
  %326 = insertelement <8 x i16> %320, i16 %325, i32 6
  %327 = extractelement <8 x i32> %284, i32 7
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds i8, i8* %4, i64 %328
  %330 = bitcast i8* %329 to i16*
  %331 = load i16, i16* %330, align 1
  %332 = insertelement <8 x i16> %326, i16 %331, i32 7
  %333 = lshr <8 x i16> %332, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %334 = shl <8 x i16> %332, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %335 = or <8 x i16> %333, %334
  %336 = uitofp <8 x i16> %335 to <8 x float>
  %337 = fmul <8 x float> %336, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %338 = shl <8 x i32> %121, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %339 = or <8 x i32> %338, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %340 = extractelement <8 x i32> %339, i32 0
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds i8, i8* %4, i64 %341
  %343 = bitcast i8* %342 to i16*
  %344 = load i16, i16* %343, align 1
  %345 = insertelement <8 x i16> undef, i16 %344, i32 0
  %346 = extractelement <8 x i32> %339, i32 1
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds i8, i8* %4, i64 %347
  %349 = bitcast i8* %348 to i16*
  %350 = load i16, i16* %349, align 1
  %351 = insertelement <8 x i16> %345, i16 %350, i32 1
  %352 = extractelement <8 x i32> %339, i32 2
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds i8, i8* %4, i64 %353
  %355 = bitcast i8* %354 to i16*
  %356 = load i16, i16* %355, align 1
  %357 = insertelement <8 x i16> %351, i16 %356, i32 2
  %358 = extractelement <8 x i32> %339, i32 3
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds i8, i8* %4, i64 %359
  %361 = bitcast i8* %360 to i16*
  %362 = load i16, i16* %361, align 1
  %363 = insertelement <8 x i16> %357, i16 %362, i32 3
  %364 = extractelement <8 x i32> %339, i32 4
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds i8, i8* %4, i64 %365
  %367 = bitcast i8* %366 to i16*
  %368 = load i16, i16* %367, align 1
  %369 = insertelement <8 x i16> %363, i16 %368, i32 4
  %370 = extractelement <8 x i32> %339, i32 5
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds i8, i8* %4, i64 %371
  %373 = bitcast i8* %372 to i16*
  %374 = load i16, i16* %373, align 1
  %375 = insertelement <8 x i16> %369, i16 %374, i32 5
  %376 = extractelement <8 x i32> %339, i32 6
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds i8, i8* %4, i64 %377
  %379 = bitcast i8* %378 to i16*
  %380 = load i16, i16* %379, align 1
  %381 = insertelement <8 x i16> %375, i16 %380, i32 6
  %382 = extractelement <8 x i32> %339, i32 7
  %383 = sext i32 %382 to i64
  %384 = getelementptr inbounds i8, i8* %4, i64 %383
  %385 = bitcast i8* %384 to i16*
  %386 = load i16, i16* %385, align 1
  %387 = insertelement <8 x i16> %381, i16 %386, i32 7
  %388 = lshr <8 x i16> %387, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %389 = shl <8 x i16> %387, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %390 = or <8 x i16> %388, %389
  %391 = uitofp <8 x i16> %390 to <8 x float>
  %392 = fmul <8 x float> %391, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %393 = or <8 x i32> %228, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %394 = extractelement <8 x i32> %393, i32 0
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds i8, i8* %4, i64 %395
  %397 = bitcast i8* %396 to i16*
  %398 = load i16, i16* %397, align 1
  %399 = insertelement <8 x i16> undef, i16 %398, i32 0
  %400 = extractelement <8 x i32> %393, i32 1
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds i8, i8* %4, i64 %401
  %403 = bitcast i8* %402 to i16*
  %404 = load i16, i16* %403, align 1
  %405 = insertelement <8 x i16> %399, i16 %404, i32 1
  %406 = extractelement <8 x i32> %393, i32 2
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds i8, i8* %4, i64 %407
  %409 = bitcast i8* %408 to i16*
  %410 = load i16, i16* %409, align 1
  %411 = insertelement <8 x i16> %405, i16 %410, i32 2
  %412 = extractelement <8 x i32> %393, i32 3
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds i8, i8* %4, i64 %413
  %415 = bitcast i8* %414 to i16*
  %416 = load i16, i16* %415, align 1
  %417 = insertelement <8 x i16> %411, i16 %416, i32 3
  %418 = extractelement <8 x i32> %393, i32 4
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds i8, i8* %4, i64 %419
  %421 = bitcast i8* %420 to i16*
  %422 = load i16, i16* %421, align 1
  %423 = insertelement <8 x i16> %417, i16 %422, i32 4
  %424 = extractelement <8 x i32> %393, i32 5
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds i8, i8* %4, i64 %425
  %427 = bitcast i8* %426 to i16*
  %428 = load i16, i16* %427, align 1
  %429 = insertelement <8 x i16> %423, i16 %428, i32 5
  %430 = extractelement <8 x i32> %393, i32 6
  %431 = sext i32 %430 to i64
  %432 = getelementptr inbounds i8, i8* %4, i64 %431
  %433 = bitcast i8* %432 to i16*
  %434 = load i16, i16* %433, align 1
  %435 = insertelement <8 x i16> %429, i16 %434, i32 6
  %436 = extractelement <8 x i32> %393, i32 7
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds i8, i8* %4, i64 %437
  %439 = bitcast i8* %438 to i16*
  %440 = load i16, i16* %439, align 1
  %441 = insertelement <8 x i16> %435, i16 %440, i32 7
  %442 = lshr <8 x i16> %441, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %443 = shl <8 x i16> %441, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %444 = or <8 x i16> %442, %443
  %445 = uitofp <8 x i16> %444 to <8 x float>
  %446 = fmul <8 x float> %445, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %447

447:                                              ; preds = %163, %227, %124, %138
  %448 = phi <8 x float> [ zeroinitializer, %124 ], [ zeroinitializer, %138 ], [ %226, %163 ], [ %446, %227 ]
  %449 = phi <8 x float> [ %137, %124 ], [ %161, %138 ], [ %223, %163 ], [ %392, %227 ]
  %450 = phi <8 x float> [ %134, %124 ], [ %158, %138 ], [ %219, %163 ], [ %337, %227 ]
  %451 = phi <8 x float> [ %130, %124 ], [ %154, %138 ], [ %215, %163 ], [ %282, %227 ]
  %452 = fmul <8 x float> %122, %451
  %453 = load <8 x float>, <8 x float>* %5, align 32
  %454 = fadd <8 x float> %453, %452
  store <8 x float> %454, <8 x float>* %5, align 32
  %455 = fmul <8 x float> %122, %450
  %456 = load <8 x float>, <8 x float>* %6, align 32
  %457 = fadd <8 x float> %455, %456
  store <8 x float> %457, <8 x float>* %6, align 32
  %458 = fmul <8 x float> %122, %449
  %459 = load <8 x float>, <8 x float>* %7, align 32
  %460 = fadd <8 x float> %458, %459
  store <8 x float> %460, <8 x float>* %7, align 32
  %461 = fmul <8 x float> %122, %448
  %462 = load <8 x float>, <8 x float>* %8, align 32
  %463 = fadd <8 x float> %461, %462
  store <8 x float> %463, <8 x float>* %8, align 32
  %464 = add nuw nsw i32 %76, 1
  %465 = icmp slt i32 %464, %66
  br i1 %465, label %75, label %74
}

; Function Attrs: nounwind readonly
declare <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32>, i8*, <8 x i32>, <8 x i32>, i8 immarg) #14

; Function Attrs: nounwind readonly
declare <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64>, i8*, <4 x i32>, <4 x i64>, i8 immarg) #14

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float>, i32 immarg) #13

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3skxL8exec_opsEPK2OpPPKvPKcPci(i32* nocapture readonly, i8** readonly, i8* nocapture readonly, i8* nocapture, i32) unnamed_addr #15 {
  %6 = alloca <16 x float>, align 64
  %7 = alloca <16 x float>, align 64
  %8 = alloca <16 x float>, align 64
  %9 = alloca <16 x float>, align 64
  %10 = alloca <16 x float>, align 64
  %11 = bitcast <16 x float>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #17
  store <16 x float> zeroinitializer, <16 x float>* %7, align 64
  %12 = bitcast <16 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %12) #17
  store <16 x float> zeroinitializer, <16 x float>* %8, align 64
  %13 = bitcast <16 x float>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #17
  store <16 x float> zeroinitializer, <16 x float>* %9, align 64
  %14 = bitcast <16 x float>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %14) #17
  store <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float>* %10, align 64
  %15 = bitcast <16 x float>* %6 to i8*
  %16 = bitcast <16 x float>* %10 to <16 x i32>*
  %17 = bitcast <16 x float>* %9 to <16 x i32>*
  %18 = bitcast <16 x float>* %8 to <16 x i32>*
  %19 = bitcast <16 x float>* %7 to <16 x i32>*
  %20 = shl nsw i32 %4, 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %2, i64 %21
  %23 = bitcast i8* %22 to float*
  %24 = getelementptr inbounds i8, i8* %22, i64 16
  %25 = bitcast i8* %24 to float*
  %26 = getelementptr inbounds i8, i8* %22, i64 32
  %27 = bitcast i8* %26 to float*
  %28 = getelementptr inbounds i8, i8* %22, i64 48
  %29 = bitcast i8* %28 to float*
  %30 = getelementptr inbounds i8, i8* %22, i64 64
  %31 = bitcast i8* %30 to float*
  %32 = getelementptr inbounds i8, i8* %22, i64 80
  %33 = bitcast i8* %32 to float*
  %34 = getelementptr inbounds i8, i8* %22, i64 96
  %35 = bitcast i8* %34 to float*
  %36 = getelementptr inbounds i8, i8* %22, i64 112
  %37 = bitcast i8* %36 to float*
  %38 = getelementptr inbounds i8, i8* %22, i64 128
  %39 = bitcast i8* %38 to float*
  %40 = getelementptr inbounds i8, i8* %22, i64 144
  %41 = bitcast i8* %40 to float*
  %42 = getelementptr inbounds i8, i8* %22, i64 160
  %43 = bitcast i8* %42 to float*
  %44 = getelementptr inbounds i8, i8* %22, i64 176
  %45 = bitcast i8* %44 to float*
  %46 = getelementptr inbounds i8, i8* %22, i64 192
  %47 = bitcast i8* %46 to float*
  %48 = getelementptr inbounds i8, i8* %22, i64 208
  %49 = bitcast i8* %48 to float*
  %50 = getelementptr inbounds i8, i8* %22, i64 224
  %51 = bitcast i8* %50 to float*
  %52 = getelementptr inbounds i8, i8* %22, i64 240
  %53 = bitcast i8* %52 to float*
  %54 = getelementptr inbounds i8, i8* %22, i64 4
  %55 = bitcast i8* %54 to float*
  %56 = getelementptr inbounds i8, i8* %54, i64 16
  %57 = bitcast i8* %56 to float*
  %58 = getelementptr inbounds i8, i8* %54, i64 32
  %59 = bitcast i8* %58 to float*
  %60 = getelementptr inbounds i8, i8* %54, i64 48
  %61 = bitcast i8* %60 to float*
  %62 = getelementptr inbounds i8, i8* %54, i64 64
  %63 = bitcast i8* %62 to float*
  %64 = getelementptr inbounds i8, i8* %54, i64 80
  %65 = bitcast i8* %64 to float*
  %66 = getelementptr inbounds i8, i8* %54, i64 96
  %67 = bitcast i8* %66 to float*
  %68 = getelementptr inbounds i8, i8* %54, i64 112
  %69 = bitcast i8* %68 to float*
  %70 = getelementptr inbounds i8, i8* %54, i64 128
  %71 = bitcast i8* %70 to float*
  %72 = getelementptr inbounds i8, i8* %54, i64 144
  %73 = bitcast i8* %72 to float*
  %74 = getelementptr inbounds i8, i8* %54, i64 160
  %75 = bitcast i8* %74 to float*
  %76 = getelementptr inbounds i8, i8* %54, i64 176
  %77 = bitcast i8* %76 to float*
  %78 = getelementptr inbounds i8, i8* %54, i64 192
  %79 = bitcast i8* %78 to float*
  %80 = getelementptr inbounds i8, i8* %54, i64 208
  %81 = bitcast i8* %80 to float*
  %82 = getelementptr inbounds i8, i8* %54, i64 224
  %83 = bitcast i8* %82 to float*
  %84 = getelementptr inbounds i8, i8* %54, i64 240
  %85 = bitcast i8* %84 to float*
  %86 = getelementptr inbounds i8, i8* %22, i64 8
  %87 = bitcast i8* %86 to float*
  %88 = getelementptr inbounds i8, i8* %86, i64 16
  %89 = bitcast i8* %88 to float*
  %90 = getelementptr inbounds i8, i8* %86, i64 32
  %91 = bitcast i8* %90 to float*
  %92 = getelementptr inbounds i8, i8* %86, i64 48
  %93 = bitcast i8* %92 to float*
  %94 = getelementptr inbounds i8, i8* %86, i64 64
  %95 = bitcast i8* %94 to float*
  %96 = getelementptr inbounds i8, i8* %86, i64 80
  %97 = bitcast i8* %96 to float*
  %98 = getelementptr inbounds i8, i8* %86, i64 96
  %99 = bitcast i8* %98 to float*
  %100 = getelementptr inbounds i8, i8* %86, i64 112
  %101 = bitcast i8* %100 to float*
  %102 = getelementptr inbounds i8, i8* %86, i64 128
  %103 = bitcast i8* %102 to float*
  %104 = getelementptr inbounds i8, i8* %86, i64 144
  %105 = bitcast i8* %104 to float*
  %106 = getelementptr inbounds i8, i8* %86, i64 160
  %107 = bitcast i8* %106 to float*
  %108 = getelementptr inbounds i8, i8* %86, i64 176
  %109 = bitcast i8* %108 to float*
  %110 = getelementptr inbounds i8, i8* %86, i64 192
  %111 = bitcast i8* %110 to float*
  %112 = getelementptr inbounds i8, i8* %86, i64 208
  %113 = bitcast i8* %112 to float*
  %114 = getelementptr inbounds i8, i8* %86, i64 224
  %115 = bitcast i8* %114 to float*
  %116 = getelementptr inbounds i8, i8* %86, i64 240
  %117 = bitcast i8* %116 to float*
  %118 = getelementptr inbounds i8, i8* %22, i64 12
  %119 = bitcast i8* %118 to float*
  %120 = getelementptr inbounds i8, i8* %118, i64 16
  %121 = bitcast i8* %120 to float*
  %122 = getelementptr inbounds i8, i8* %118, i64 32
  %123 = bitcast i8* %122 to float*
  %124 = getelementptr inbounds i8, i8* %118, i64 48
  %125 = bitcast i8* %124 to float*
  %126 = getelementptr inbounds i8, i8* %118, i64 64
  %127 = bitcast i8* %126 to float*
  %128 = getelementptr inbounds i8, i8* %118, i64 80
  %129 = bitcast i8* %128 to float*
  %130 = getelementptr inbounds i8, i8* %118, i64 96
  %131 = bitcast i8* %130 to float*
  %132 = getelementptr inbounds i8, i8* %118, i64 112
  %133 = bitcast i8* %132 to float*
  %134 = getelementptr inbounds i8, i8* %118, i64 128
  %135 = bitcast i8* %134 to float*
  %136 = getelementptr inbounds i8, i8* %118, i64 144
  %137 = bitcast i8* %136 to float*
  %138 = getelementptr inbounds i8, i8* %118, i64 160
  %139 = bitcast i8* %138 to float*
  %140 = getelementptr inbounds i8, i8* %118, i64 176
  %141 = bitcast i8* %140 to float*
  %142 = getelementptr inbounds i8, i8* %118, i64 192
  %143 = bitcast i8* %142 to float*
  %144 = getelementptr inbounds i8, i8* %118, i64 208
  %145 = bitcast i8* %144 to float*
  %146 = getelementptr inbounds i8, i8* %118, i64 224
  %147 = bitcast i8* %146 to float*
  %148 = getelementptr inbounds i8, i8* %118, i64 240
  %149 = bitcast i8* %148 to float*
  %150 = mul nsw i32 %4, 12
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %2, i64 %151
  %153 = bitcast i8* %152 to float*
  %154 = getelementptr inbounds i8, i8* %152, i64 12
  %155 = bitcast i8* %154 to float*
  %156 = getelementptr inbounds i8, i8* %152, i64 24
  %157 = bitcast i8* %156 to float*
  %158 = getelementptr inbounds i8, i8* %152, i64 36
  %159 = bitcast i8* %158 to float*
  %160 = getelementptr inbounds i8, i8* %152, i64 48
  %161 = bitcast i8* %160 to float*
  %162 = getelementptr inbounds i8, i8* %152, i64 60
  %163 = bitcast i8* %162 to float*
  %164 = getelementptr inbounds i8, i8* %152, i64 72
  %165 = bitcast i8* %164 to float*
  %166 = getelementptr inbounds i8, i8* %152, i64 84
  %167 = bitcast i8* %166 to float*
  %168 = getelementptr inbounds i8, i8* %152, i64 96
  %169 = bitcast i8* %168 to float*
  %170 = getelementptr inbounds i8, i8* %152, i64 108
  %171 = bitcast i8* %170 to float*
  %172 = getelementptr inbounds i8, i8* %152, i64 120
  %173 = bitcast i8* %172 to float*
  %174 = getelementptr inbounds i8, i8* %152, i64 132
  %175 = bitcast i8* %174 to float*
  %176 = getelementptr inbounds i8, i8* %152, i64 144
  %177 = bitcast i8* %176 to float*
  %178 = getelementptr inbounds i8, i8* %152, i64 156
  %179 = bitcast i8* %178 to float*
  %180 = getelementptr inbounds i8, i8* %152, i64 168
  %181 = bitcast i8* %180 to float*
  %182 = getelementptr inbounds i8, i8* %152, i64 180
  %183 = bitcast i8* %182 to float*
  %184 = getelementptr inbounds i8, i8* %152, i64 4
  %185 = bitcast i8* %184 to float*
  %186 = getelementptr inbounds i8, i8* %184, i64 12
  %187 = bitcast i8* %186 to float*
  %188 = getelementptr inbounds i8, i8* %184, i64 24
  %189 = bitcast i8* %188 to float*
  %190 = getelementptr inbounds i8, i8* %184, i64 36
  %191 = bitcast i8* %190 to float*
  %192 = getelementptr inbounds i8, i8* %184, i64 48
  %193 = bitcast i8* %192 to float*
  %194 = getelementptr inbounds i8, i8* %184, i64 60
  %195 = bitcast i8* %194 to float*
  %196 = getelementptr inbounds i8, i8* %184, i64 72
  %197 = bitcast i8* %196 to float*
  %198 = getelementptr inbounds i8, i8* %184, i64 84
  %199 = bitcast i8* %198 to float*
  %200 = getelementptr inbounds i8, i8* %184, i64 96
  %201 = bitcast i8* %200 to float*
  %202 = getelementptr inbounds i8, i8* %184, i64 108
  %203 = bitcast i8* %202 to float*
  %204 = getelementptr inbounds i8, i8* %184, i64 120
  %205 = bitcast i8* %204 to float*
  %206 = getelementptr inbounds i8, i8* %184, i64 132
  %207 = bitcast i8* %206 to float*
  %208 = getelementptr inbounds i8, i8* %184, i64 144
  %209 = bitcast i8* %208 to float*
  %210 = getelementptr inbounds i8, i8* %184, i64 156
  %211 = bitcast i8* %210 to float*
  %212 = getelementptr inbounds i8, i8* %184, i64 168
  %213 = bitcast i8* %212 to float*
  %214 = getelementptr inbounds i8, i8* %184, i64 180
  %215 = bitcast i8* %214 to float*
  %216 = getelementptr inbounds i8, i8* %152, i64 8
  %217 = bitcast i8* %216 to float*
  %218 = getelementptr inbounds i8, i8* %216, i64 12
  %219 = bitcast i8* %218 to float*
  %220 = getelementptr inbounds i8, i8* %216, i64 24
  %221 = bitcast i8* %220 to float*
  %222 = getelementptr inbounds i8, i8* %216, i64 36
  %223 = bitcast i8* %222 to float*
  %224 = getelementptr inbounds i8, i8* %216, i64 48
  %225 = bitcast i8* %224 to float*
  %226 = getelementptr inbounds i8, i8* %216, i64 60
  %227 = bitcast i8* %226 to float*
  %228 = getelementptr inbounds i8, i8* %216, i64 72
  %229 = bitcast i8* %228 to float*
  %230 = getelementptr inbounds i8, i8* %216, i64 84
  %231 = bitcast i8* %230 to float*
  %232 = getelementptr inbounds i8, i8* %216, i64 96
  %233 = bitcast i8* %232 to float*
  %234 = getelementptr inbounds i8, i8* %216, i64 108
  %235 = bitcast i8* %234 to float*
  %236 = getelementptr inbounds i8, i8* %216, i64 120
  %237 = bitcast i8* %236 to float*
  %238 = getelementptr inbounds i8, i8* %216, i64 132
  %239 = bitcast i8* %238 to float*
  %240 = getelementptr inbounds i8, i8* %216, i64 144
  %241 = bitcast i8* %240 to float*
  %242 = getelementptr inbounds i8, i8* %216, i64 156
  %243 = bitcast i8* %242 to float*
  %244 = getelementptr inbounds i8, i8* %216, i64 168
  %245 = bitcast i8* %244 to float*
  %246 = getelementptr inbounds i8, i8* %216, i64 180
  %247 = bitcast i8* %246 to float*
  %248 = shl nsw i32 %4, 3
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds i8, i8* %2, i64 %249
  %251 = bitcast i8* %250 to <16 x i64>*
  %252 = mul nsw i32 %4, 6
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds i8, i8* %2, i64 %253
  %255 = bitcast i8* %254 to i16*
  %256 = getelementptr inbounds i8, i8* %254, i64 6
  %257 = bitcast i8* %256 to i16*
  %258 = getelementptr inbounds i8, i8* %254, i64 12
  %259 = bitcast i8* %258 to i16*
  %260 = getelementptr inbounds i8, i8* %254, i64 18
  %261 = bitcast i8* %260 to i16*
  %262 = getelementptr inbounds i8, i8* %254, i64 24
  %263 = bitcast i8* %262 to i16*
  %264 = getelementptr inbounds i8, i8* %254, i64 30
  %265 = bitcast i8* %264 to i16*
  %266 = getelementptr inbounds i8, i8* %254, i64 36
  %267 = bitcast i8* %266 to i16*
  %268 = getelementptr inbounds i8, i8* %254, i64 42
  %269 = bitcast i8* %268 to i16*
  %270 = getelementptr inbounds i8, i8* %254, i64 48
  %271 = bitcast i8* %270 to i16*
  %272 = getelementptr inbounds i8, i8* %254, i64 54
  %273 = bitcast i8* %272 to i16*
  %274 = getelementptr inbounds i8, i8* %254, i64 60
  %275 = bitcast i8* %274 to i16*
  %276 = getelementptr inbounds i8, i8* %254, i64 66
  %277 = bitcast i8* %276 to i16*
  %278 = getelementptr inbounds i8, i8* %254, i64 72
  %279 = bitcast i8* %278 to i16*
  %280 = getelementptr inbounds i8, i8* %254, i64 78
  %281 = bitcast i8* %280 to i16*
  %282 = getelementptr inbounds i8, i8* %254, i64 84
  %283 = bitcast i8* %282 to i16*
  %284 = getelementptr inbounds i8, i8* %254, i64 90
  %285 = bitcast i8* %284 to i16*
  %286 = getelementptr inbounds i8, i8* %254, i64 2
  %287 = bitcast i8* %286 to i16*
  %288 = getelementptr inbounds i8, i8* %286, i64 6
  %289 = bitcast i8* %288 to i16*
  %290 = getelementptr inbounds i8, i8* %286, i64 12
  %291 = bitcast i8* %290 to i16*
  %292 = getelementptr inbounds i8, i8* %286, i64 18
  %293 = bitcast i8* %292 to i16*
  %294 = getelementptr inbounds i8, i8* %286, i64 24
  %295 = bitcast i8* %294 to i16*
  %296 = getelementptr inbounds i8, i8* %286, i64 30
  %297 = bitcast i8* %296 to i16*
  %298 = getelementptr inbounds i8, i8* %286, i64 36
  %299 = bitcast i8* %298 to i16*
  %300 = getelementptr inbounds i8, i8* %286, i64 42
  %301 = bitcast i8* %300 to i16*
  %302 = getelementptr inbounds i8, i8* %286, i64 48
  %303 = bitcast i8* %302 to i16*
  %304 = getelementptr inbounds i8, i8* %286, i64 54
  %305 = bitcast i8* %304 to i16*
  %306 = getelementptr inbounds i8, i8* %286, i64 60
  %307 = bitcast i8* %306 to i16*
  %308 = getelementptr inbounds i8, i8* %286, i64 66
  %309 = bitcast i8* %308 to i16*
  %310 = getelementptr inbounds i8, i8* %286, i64 72
  %311 = bitcast i8* %310 to i16*
  %312 = getelementptr inbounds i8, i8* %286, i64 78
  %313 = bitcast i8* %312 to i16*
  %314 = getelementptr inbounds i8, i8* %286, i64 84
  %315 = bitcast i8* %314 to i16*
  %316 = getelementptr inbounds i8, i8* %286, i64 90
  %317 = bitcast i8* %316 to i16*
  %318 = getelementptr inbounds i8, i8* %254, i64 4
  %319 = bitcast i8* %318 to i16*
  %320 = getelementptr inbounds i8, i8* %318, i64 6
  %321 = bitcast i8* %320 to i16*
  %322 = getelementptr inbounds i8, i8* %318, i64 12
  %323 = bitcast i8* %322 to i16*
  %324 = getelementptr inbounds i8, i8* %318, i64 18
  %325 = bitcast i8* %324 to i16*
  %326 = getelementptr inbounds i8, i8* %318, i64 24
  %327 = bitcast i8* %326 to i16*
  %328 = getelementptr inbounds i8, i8* %318, i64 30
  %329 = bitcast i8* %328 to i16*
  %330 = getelementptr inbounds i8, i8* %318, i64 36
  %331 = bitcast i8* %330 to i16*
  %332 = getelementptr inbounds i8, i8* %318, i64 42
  %333 = bitcast i8* %332 to i16*
  %334 = getelementptr inbounds i8, i8* %318, i64 48
  %335 = bitcast i8* %334 to i16*
  %336 = getelementptr inbounds i8, i8* %318, i64 54
  %337 = bitcast i8* %336 to i16*
  %338 = getelementptr inbounds i8, i8* %318, i64 60
  %339 = bitcast i8* %338 to i16*
  %340 = getelementptr inbounds i8, i8* %318, i64 66
  %341 = bitcast i8* %340 to i16*
  %342 = getelementptr inbounds i8, i8* %318, i64 72
  %343 = bitcast i8* %342 to i16*
  %344 = getelementptr inbounds i8, i8* %318, i64 78
  %345 = bitcast i8* %344 to i16*
  %346 = getelementptr inbounds i8, i8* %318, i64 84
  %347 = bitcast i8* %346 to i16*
  %348 = getelementptr inbounds i8, i8* %318, i64 90
  %349 = bitcast i8* %348 to i16*
  %350 = shl nsw i32 %4, 2
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds i8, i8* %2, i64 %351
  %353 = bitcast i8* %352 to <16 x i32>*
  %354 = sext i32 %4 to i64
  %355 = getelementptr inbounds i8, i8* %2, i64 %354
  %356 = bitcast i8* %355 to <16 x i8>*
  %357 = mul nsw i32 %4, 3
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds i8, i8* %2, i64 %358
  %360 = getelementptr inbounds i8, i8* %359, i64 3
  %361 = getelementptr inbounds i8, i8* %359, i64 6
  %362 = getelementptr inbounds i8, i8* %359, i64 9
  %363 = getelementptr inbounds i8, i8* %359, i64 12
  %364 = getelementptr inbounds i8, i8* %359, i64 15
  %365 = getelementptr inbounds i8, i8* %359, i64 18
  %366 = getelementptr inbounds i8, i8* %359, i64 21
  %367 = getelementptr inbounds i8, i8* %359, i64 24
  %368 = getelementptr inbounds i8, i8* %359, i64 27
  %369 = getelementptr inbounds i8, i8* %359, i64 30
  %370 = getelementptr inbounds i8, i8* %359, i64 33
  %371 = getelementptr inbounds i8, i8* %359, i64 36
  %372 = getelementptr inbounds i8, i8* %359, i64 39
  %373 = getelementptr inbounds i8, i8* %359, i64 42
  %374 = getelementptr inbounds i8, i8* %359, i64 45
  %375 = getelementptr inbounds i8, i8* %359, i64 1
  %376 = getelementptr inbounds i8, i8* %375, i64 3
  %377 = getelementptr inbounds i8, i8* %375, i64 6
  %378 = getelementptr inbounds i8, i8* %375, i64 9
  %379 = getelementptr inbounds i8, i8* %375, i64 12
  %380 = getelementptr inbounds i8, i8* %375, i64 15
  %381 = getelementptr inbounds i8, i8* %375, i64 18
  %382 = getelementptr inbounds i8, i8* %375, i64 21
  %383 = getelementptr inbounds i8, i8* %375, i64 24
  %384 = getelementptr inbounds i8, i8* %375, i64 27
  %385 = getelementptr inbounds i8, i8* %375, i64 30
  %386 = getelementptr inbounds i8, i8* %375, i64 33
  %387 = getelementptr inbounds i8, i8* %375, i64 36
  %388 = getelementptr inbounds i8, i8* %375, i64 39
  %389 = getelementptr inbounds i8, i8* %375, i64 42
  %390 = getelementptr inbounds i8, i8* %375, i64 45
  %391 = getelementptr inbounds i8, i8* %359, i64 2
  %392 = getelementptr inbounds i8, i8* %391, i64 3
  %393 = getelementptr inbounds i8, i8* %391, i64 6
  %394 = getelementptr inbounds i8, i8* %391, i64 9
  %395 = getelementptr inbounds i8, i8* %391, i64 12
  %396 = getelementptr inbounds i8, i8* %391, i64 15
  %397 = getelementptr inbounds i8, i8* %391, i64 18
  %398 = getelementptr inbounds i8, i8* %391, i64 21
  %399 = getelementptr inbounds i8, i8* %391, i64 24
  %400 = getelementptr inbounds i8, i8* %391, i64 27
  %401 = getelementptr inbounds i8, i8* %391, i64 30
  %402 = getelementptr inbounds i8, i8* %391, i64 33
  %403 = getelementptr inbounds i8, i8* %391, i64 36
  %404 = getelementptr inbounds i8, i8* %391, i64 39
  %405 = getelementptr inbounds i8, i8* %391, i64 42
  %406 = getelementptr inbounds i8, i8* %391, i64 45
  %407 = shl nsw i32 %4, 1
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds i8, i8* %2, i64 %408
  %410 = bitcast i8* %409 to <16 x i16>*
  br label %411

411:                                              ; preds = %4808, %5
  %412 = phi i8** [ %1, %5 ], [ %4809, %4808 ]
  %413 = phi i32* [ %0, %5 ], [ %414, %4808 ]
  %414 = getelementptr inbounds i32, i32* %413, i64 1
  %415 = load i32, i32* %413, align 4
  switch i32 %415, label %4808 [
    i32 0, label %416
    i32 1, label %420
    i32 3, label %424
    i32 4, label %440
    i32 5, label %451
    i32 6, label %602
    i32 2, label %618
    i32 7, label %749
    i32 8, label %765
    i32 9, label %916
    i32 10, label %932
    i32 11, label %1098
    i32 12, label %1119
    i32 13, label %1219
    i32 14, label %1232
    i32 15, label %1329
    i32 16, label %1458
    i32 17, label %1461
    i32 18, label %1482
    i32 19, label %1491
    i32 20, label %1492
    i32 21, label %1500
    i32 22, label %1511
    i32 23, label %1569
    i32 24, label %1642
    i32 25, label %1677
    i32 26, label %1796
    i32 27, label %1871
    i32 28, label %1946
    i32 29, label %2021
    i32 30, label %2096
    i32 31, label %2194
    i32 32, label %2292
    i32 33, label %2390
    i32 34, label %2488
    i32 35, label %2574
    i32 36, label %2660
    i32 37, label %2746
    i32 38, label %2832
    i32 39, label %2917
    i32 40, label %3002
    i32 41, label %3087
    i32 42, label %3172
    i32 43, label %3577
    i32 44, label %3982
    i32 45, label %4387
    i32 46, label %4792
    i32 47, label %4811
    i32 48, label %4824
    i32 49, label %4832
    i32 50, label %4840
    i32 51, label %4866
    i32 52, label %4886
    i32 53, label %4998
    i32 54, label %5023
    i32 55, label %5048
    i32 56, label %5205
    i32 57, label %5234
    i32 58, label %5406
    i32 59, label %5440
    i32 60, label %5591
    i32 61, label %5612
    i32 62, label %5760
  ]

416:                                              ; preds = %411
  %417 = load <16 x i8>, <16 x i8>* %356, align 1
  %418 = uitofp <16 x i8> %417 to <16 x float>
  %419 = fmul <16 x float> %418, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <16 x float> %419, <16 x float>* %10, align 64
  br label %4808

420:                                              ; preds = %411
  %421 = load <16 x i8>, <16 x i8>* %356, align 1
  %422 = uitofp <16 x i8> %421 to <16 x float>
  %423 = fmul <16 x float> %422, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <16 x float> %423, <16 x float>* %9, align 64
  store <16 x float> %423, <16 x float>* %8, align 64
  store <16 x float> %423, <16 x float>* %7, align 64
  br label %4808

424:                                              ; preds = %411
  %425 = load <16 x i16>, <16 x i16>* %410, align 1
  %426 = lshr <16 x i16> %425, <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>
  %427 = uitofp <16 x i16> %426 to <16 x float>
  %428 = fmul <16 x float> %427, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  store <16 x float> %428, <16 x float>* %7, align 64
  %429 = lshr <16 x i16> %425, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %430 = and <16 x i16> %429, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %431 = uitofp <16 x i16> %430 to <16 x float>
  %432 = fmul <16 x float> %431, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  store <16 x float> %432, <16 x float>* %8, align 64
  %433 = lshr <16 x i16> %425, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %434 = and <16 x i16> %433, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %435 = uitofp <16 x i16> %434 to <16 x float>
  %436 = fmul <16 x float> %435, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  store <16 x float> %436, <16 x float>* %9, align 64
  %437 = and <16 x i16> %425, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %438 = uitofp <16 x i16> %437 to <16 x float>
  %439 = fmul <16 x float> %438, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  store <16 x float> %439, <16 x float>* %10, align 64
  br label %4808

440:                                              ; preds = %411
  %441 = load <16 x i16>, <16 x i16>* %410, align 1
  %442 = and <16 x i16> %441, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %443 = uitofp <16 x i16> %442 to <16 x float>
  %444 = fmul <16 x float> %443, <float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000>
  store <16 x float> %444, <16 x float>* %7, align 64
  %445 = and <16 x i16> %441, <i16 2016, i16 2016, i16 2016, i16 2016, i16 2016, i16 2016, i16 2016, i16 2016, i16 2016, i16 2016, i16 2016, i16 2016, i16 2016, i16 2016, i16 2016, i16 2016>
  %446 = uitofp <16 x i16> %445 to <16 x float>
  %447 = fmul <16 x float> %446, <float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000>
  store <16 x float> %447, <16 x float>* %8, align 64
  %448 = and <16 x i16> %441, <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>
  %449 = uitofp <16 x i16> %448 to <16 x float>
  %450 = fmul <16 x float> %449, <float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000>
  store <16 x float> %450, <16 x float>* %9, align 64
  br label %4808

451:                                              ; preds = %411
  %452 = load i8, i8* %359, align 1
  %453 = zext i8 %452 to i32
  %454 = insertelement <16 x i32> undef, i32 %453, i32 0
  %455 = load i8, i8* %360, align 1
  %456 = zext i8 %455 to i32
  %457 = insertelement <16 x i32> %454, i32 %456, i32 1
  %458 = load i8, i8* %361, align 1
  %459 = zext i8 %458 to i32
  %460 = insertelement <16 x i32> %457, i32 %459, i32 2
  %461 = load i8, i8* %362, align 1
  %462 = zext i8 %461 to i32
  %463 = insertelement <16 x i32> %460, i32 %462, i32 3
  %464 = load i8, i8* %363, align 1
  %465 = zext i8 %464 to i32
  %466 = insertelement <16 x i32> %463, i32 %465, i32 4
  %467 = load i8, i8* %364, align 1
  %468 = zext i8 %467 to i32
  %469 = insertelement <16 x i32> %466, i32 %468, i32 5
  %470 = load i8, i8* %365, align 1
  %471 = zext i8 %470 to i32
  %472 = insertelement <16 x i32> %469, i32 %471, i32 6
  %473 = load i8, i8* %366, align 1
  %474 = zext i8 %473 to i32
  %475 = insertelement <16 x i32> %472, i32 %474, i32 7
  %476 = load i8, i8* %367, align 1
  %477 = zext i8 %476 to i32
  %478 = insertelement <16 x i32> %475, i32 %477, i32 8
  %479 = load i8, i8* %368, align 1
  %480 = zext i8 %479 to i32
  %481 = insertelement <16 x i32> %478, i32 %480, i32 9
  %482 = load i8, i8* %369, align 1
  %483 = zext i8 %482 to i32
  %484 = insertelement <16 x i32> %481, i32 %483, i32 10
  %485 = load i8, i8* %370, align 1
  %486 = zext i8 %485 to i32
  %487 = insertelement <16 x i32> %484, i32 %486, i32 11
  %488 = load i8, i8* %371, align 1
  %489 = zext i8 %488 to i32
  %490 = insertelement <16 x i32> %487, i32 %489, i32 12
  %491 = load i8, i8* %372, align 1
  %492 = zext i8 %491 to i32
  %493 = insertelement <16 x i32> %490, i32 %492, i32 13
  %494 = load i8, i8* %373, align 1
  %495 = zext i8 %494 to i32
  %496 = insertelement <16 x i32> %493, i32 %495, i32 14
  %497 = load i8, i8* %374, align 1
  %498 = zext i8 %497 to i32
  %499 = insertelement <16 x i32> %496, i32 %498, i32 15
  %500 = uitofp <16 x i32> %499 to <16 x float>
  %501 = fmul <16 x float> %500, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <16 x float> %501, <16 x float>* %7, align 64
  %502 = load i8, i8* %375, align 1
  %503 = zext i8 %502 to i32
  %504 = insertelement <16 x i32> undef, i32 %503, i32 0
  %505 = load i8, i8* %376, align 1
  %506 = zext i8 %505 to i32
  %507 = insertelement <16 x i32> %504, i32 %506, i32 1
  %508 = load i8, i8* %377, align 1
  %509 = zext i8 %508 to i32
  %510 = insertelement <16 x i32> %507, i32 %509, i32 2
  %511 = load i8, i8* %378, align 1
  %512 = zext i8 %511 to i32
  %513 = insertelement <16 x i32> %510, i32 %512, i32 3
  %514 = load i8, i8* %379, align 1
  %515 = zext i8 %514 to i32
  %516 = insertelement <16 x i32> %513, i32 %515, i32 4
  %517 = load i8, i8* %380, align 1
  %518 = zext i8 %517 to i32
  %519 = insertelement <16 x i32> %516, i32 %518, i32 5
  %520 = load i8, i8* %381, align 1
  %521 = zext i8 %520 to i32
  %522 = insertelement <16 x i32> %519, i32 %521, i32 6
  %523 = load i8, i8* %382, align 1
  %524 = zext i8 %523 to i32
  %525 = insertelement <16 x i32> %522, i32 %524, i32 7
  %526 = load i8, i8* %383, align 1
  %527 = zext i8 %526 to i32
  %528 = insertelement <16 x i32> %525, i32 %527, i32 8
  %529 = load i8, i8* %384, align 1
  %530 = zext i8 %529 to i32
  %531 = insertelement <16 x i32> %528, i32 %530, i32 9
  %532 = load i8, i8* %385, align 1
  %533 = zext i8 %532 to i32
  %534 = insertelement <16 x i32> %531, i32 %533, i32 10
  %535 = load i8, i8* %386, align 1
  %536 = zext i8 %535 to i32
  %537 = insertelement <16 x i32> %534, i32 %536, i32 11
  %538 = load i8, i8* %387, align 1
  %539 = zext i8 %538 to i32
  %540 = insertelement <16 x i32> %537, i32 %539, i32 12
  %541 = load i8, i8* %388, align 1
  %542 = zext i8 %541 to i32
  %543 = insertelement <16 x i32> %540, i32 %542, i32 13
  %544 = load i8, i8* %389, align 1
  %545 = zext i8 %544 to i32
  %546 = insertelement <16 x i32> %543, i32 %545, i32 14
  %547 = load i8, i8* %390, align 1
  %548 = zext i8 %547 to i32
  %549 = insertelement <16 x i32> %546, i32 %548, i32 15
  %550 = uitofp <16 x i32> %549 to <16 x float>
  %551 = fmul <16 x float> %550, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <16 x float> %551, <16 x float>* %8, align 64
  %552 = load i8, i8* %391, align 1
  %553 = zext i8 %552 to i32
  %554 = insertelement <16 x i32> undef, i32 %553, i32 0
  %555 = load i8, i8* %392, align 1
  %556 = zext i8 %555 to i32
  %557 = insertelement <16 x i32> %554, i32 %556, i32 1
  %558 = load i8, i8* %393, align 1
  %559 = zext i8 %558 to i32
  %560 = insertelement <16 x i32> %557, i32 %559, i32 2
  %561 = load i8, i8* %394, align 1
  %562 = zext i8 %561 to i32
  %563 = insertelement <16 x i32> %560, i32 %562, i32 3
  %564 = load i8, i8* %395, align 1
  %565 = zext i8 %564 to i32
  %566 = insertelement <16 x i32> %563, i32 %565, i32 4
  %567 = load i8, i8* %396, align 1
  %568 = zext i8 %567 to i32
  %569 = insertelement <16 x i32> %566, i32 %568, i32 5
  %570 = load i8, i8* %397, align 1
  %571 = zext i8 %570 to i32
  %572 = insertelement <16 x i32> %569, i32 %571, i32 6
  %573 = load i8, i8* %398, align 1
  %574 = zext i8 %573 to i32
  %575 = insertelement <16 x i32> %572, i32 %574, i32 7
  %576 = load i8, i8* %399, align 1
  %577 = zext i8 %576 to i32
  %578 = insertelement <16 x i32> %575, i32 %577, i32 8
  %579 = load i8, i8* %400, align 1
  %580 = zext i8 %579 to i32
  %581 = insertelement <16 x i32> %578, i32 %580, i32 9
  %582 = load i8, i8* %401, align 1
  %583 = zext i8 %582 to i32
  %584 = insertelement <16 x i32> %581, i32 %583, i32 10
  %585 = load i8, i8* %402, align 1
  %586 = zext i8 %585 to i32
  %587 = insertelement <16 x i32> %584, i32 %586, i32 11
  %588 = load i8, i8* %403, align 1
  %589 = zext i8 %588 to i32
  %590 = insertelement <16 x i32> %587, i32 %589, i32 12
  %591 = load i8, i8* %404, align 1
  %592 = zext i8 %591 to i32
  %593 = insertelement <16 x i32> %590, i32 %592, i32 13
  %594 = load i8, i8* %405, align 1
  %595 = zext i8 %594 to i32
  %596 = insertelement <16 x i32> %593, i32 %595, i32 14
  %597 = load i8, i8* %406, align 1
  %598 = zext i8 %597 to i32
  %599 = insertelement <16 x i32> %596, i32 %598, i32 15
  %600 = uitofp <16 x i32> %599 to <16 x float>
  %601 = fmul <16 x float> %600, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <16 x float> %601, <16 x float>* %9, align 64
  br label %4808

602:                                              ; preds = %411
  %603 = load <16 x i32>, <16 x i32>* %353, align 1
  %604 = and <16 x i32> %603, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %605 = uitofp <16 x i32> %604 to <16 x float>
  %606 = fmul <16 x float> %605, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <16 x float> %606, <16 x float>* %7, align 64
  %607 = lshr <16 x i32> %603, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %608 = and <16 x i32> %607, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %609 = uitofp <16 x i32> %608 to <16 x float>
  %610 = fmul <16 x float> %609, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <16 x float> %610, <16 x float>* %8, align 64
  %611 = lshr <16 x i32> %603, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %612 = and <16 x i32> %611, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %613 = uitofp <16 x i32> %612 to <16 x float>
  %614 = fmul <16 x float> %613, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <16 x float> %614, <16 x float>* %9, align 64
  %615 = lshr <16 x i32> %603, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %616 = uitofp <16 x i32> %615 to <16 x float>
  %617 = fmul <16 x float> %616, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <16 x float> %617, <16 x float>* %10, align 64
  br label %4808

618:                                              ; preds = %411
  %619 = getelementptr inbounds i8*, i8** %412, i64 1
  %620 = load i8*, i8** %412, align 8
  %621 = load <16 x i8>, <16 x i8>* %356, align 1
  %622 = zext <16 x i8> %621 to <16 x i32>
  %623 = extractelement <16 x i32> %622, i32 0
  %624 = shl nuw nsw i32 %623, 2
  %625 = zext i32 %624 to i64
  %626 = getelementptr inbounds i8, i8* %620, i64 %625
  %627 = bitcast i8* %626 to i32*
  %628 = load i32, i32* %627, align 1
  %629 = insertelement <16 x i32> undef, i32 %628, i32 0
  %630 = extractelement <16 x i32> %622, i32 1
  %631 = shl nuw nsw i32 %630, 2
  %632 = zext i32 %631 to i64
  %633 = getelementptr inbounds i8, i8* %620, i64 %632
  %634 = bitcast i8* %633 to i32*
  %635 = load i32, i32* %634, align 1
  %636 = insertelement <16 x i32> %629, i32 %635, i32 1
  %637 = extractelement <16 x i32> %622, i32 2
  %638 = shl nuw nsw i32 %637, 2
  %639 = zext i32 %638 to i64
  %640 = getelementptr inbounds i8, i8* %620, i64 %639
  %641 = bitcast i8* %640 to i32*
  %642 = load i32, i32* %641, align 1
  %643 = insertelement <16 x i32> %636, i32 %642, i32 2
  %644 = extractelement <16 x i32> %622, i32 3
  %645 = shl nuw nsw i32 %644, 2
  %646 = zext i32 %645 to i64
  %647 = getelementptr inbounds i8, i8* %620, i64 %646
  %648 = bitcast i8* %647 to i32*
  %649 = load i32, i32* %648, align 1
  %650 = insertelement <16 x i32> %643, i32 %649, i32 3
  %651 = extractelement <16 x i32> %622, i32 4
  %652 = shl nuw nsw i32 %651, 2
  %653 = zext i32 %652 to i64
  %654 = getelementptr inbounds i8, i8* %620, i64 %653
  %655 = bitcast i8* %654 to i32*
  %656 = load i32, i32* %655, align 1
  %657 = insertelement <16 x i32> %650, i32 %656, i32 4
  %658 = extractelement <16 x i32> %622, i32 5
  %659 = shl nuw nsw i32 %658, 2
  %660 = zext i32 %659 to i64
  %661 = getelementptr inbounds i8, i8* %620, i64 %660
  %662 = bitcast i8* %661 to i32*
  %663 = load i32, i32* %662, align 1
  %664 = insertelement <16 x i32> %657, i32 %663, i32 5
  %665 = extractelement <16 x i32> %622, i32 6
  %666 = shl nuw nsw i32 %665, 2
  %667 = zext i32 %666 to i64
  %668 = getelementptr inbounds i8, i8* %620, i64 %667
  %669 = bitcast i8* %668 to i32*
  %670 = load i32, i32* %669, align 1
  %671 = insertelement <16 x i32> %664, i32 %670, i32 6
  %672 = extractelement <16 x i32> %622, i32 7
  %673 = shl nuw nsw i32 %672, 2
  %674 = zext i32 %673 to i64
  %675 = getelementptr inbounds i8, i8* %620, i64 %674
  %676 = bitcast i8* %675 to i32*
  %677 = load i32, i32* %676, align 1
  %678 = insertelement <16 x i32> %671, i32 %677, i32 7
  %679 = extractelement <16 x i32> %622, i32 8
  %680 = shl nuw nsw i32 %679, 2
  %681 = zext i32 %680 to i64
  %682 = getelementptr inbounds i8, i8* %620, i64 %681
  %683 = bitcast i8* %682 to i32*
  %684 = load i32, i32* %683, align 1
  %685 = insertelement <16 x i32> %678, i32 %684, i32 8
  %686 = extractelement <16 x i32> %622, i32 9
  %687 = shl nuw nsw i32 %686, 2
  %688 = zext i32 %687 to i64
  %689 = getelementptr inbounds i8, i8* %620, i64 %688
  %690 = bitcast i8* %689 to i32*
  %691 = load i32, i32* %690, align 1
  %692 = insertelement <16 x i32> %685, i32 %691, i32 9
  %693 = extractelement <16 x i32> %622, i32 10
  %694 = shl nuw nsw i32 %693, 2
  %695 = zext i32 %694 to i64
  %696 = getelementptr inbounds i8, i8* %620, i64 %695
  %697 = bitcast i8* %696 to i32*
  %698 = load i32, i32* %697, align 1
  %699 = insertelement <16 x i32> %692, i32 %698, i32 10
  %700 = extractelement <16 x i32> %622, i32 11
  %701 = shl nuw nsw i32 %700, 2
  %702 = zext i32 %701 to i64
  %703 = getelementptr inbounds i8, i8* %620, i64 %702
  %704 = bitcast i8* %703 to i32*
  %705 = load i32, i32* %704, align 1
  %706 = insertelement <16 x i32> %699, i32 %705, i32 11
  %707 = extractelement <16 x i32> %622, i32 12
  %708 = shl nuw nsw i32 %707, 2
  %709 = zext i32 %708 to i64
  %710 = getelementptr inbounds i8, i8* %620, i64 %709
  %711 = bitcast i8* %710 to i32*
  %712 = load i32, i32* %711, align 1
  %713 = insertelement <16 x i32> %706, i32 %712, i32 12
  %714 = extractelement <16 x i32> %622, i32 13
  %715 = shl nuw nsw i32 %714, 2
  %716 = zext i32 %715 to i64
  %717 = getelementptr inbounds i8, i8* %620, i64 %716
  %718 = bitcast i8* %717 to i32*
  %719 = load i32, i32* %718, align 1
  %720 = insertelement <16 x i32> %713, i32 %719, i32 13
  %721 = extractelement <16 x i32> %622, i32 14
  %722 = shl nuw nsw i32 %721, 2
  %723 = zext i32 %722 to i64
  %724 = getelementptr inbounds i8, i8* %620, i64 %723
  %725 = bitcast i8* %724 to i32*
  %726 = load i32, i32* %725, align 1
  %727 = insertelement <16 x i32> %720, i32 %726, i32 14
  %728 = extractelement <16 x i32> %622, i32 15
  %729 = shl nuw nsw i32 %728, 2
  %730 = zext i32 %729 to i64
  %731 = getelementptr inbounds i8, i8* %620, i64 %730
  %732 = bitcast i8* %731 to i32*
  %733 = load i32, i32* %732, align 1
  %734 = insertelement <16 x i32> %727, i32 %733, i32 15
  %735 = and <16 x i32> %734, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %736 = uitofp <16 x i32> %735 to <16 x float>
  %737 = fmul <16 x float> %736, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <16 x float> %737, <16 x float>* %7, align 64
  %738 = lshr <16 x i32> %734, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %739 = and <16 x i32> %738, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %740 = uitofp <16 x i32> %739 to <16 x float>
  %741 = fmul <16 x float> %740, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <16 x float> %741, <16 x float>* %8, align 64
  %742 = lshr <16 x i32> %734, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %743 = and <16 x i32> %742, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %744 = uitofp <16 x i32> %743 to <16 x float>
  %745 = fmul <16 x float> %744, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <16 x float> %745, <16 x float>* %9, align 64
  %746 = lshr <16 x i32> %734, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %747 = uitofp <16 x i32> %746 to <16 x float>
  %748 = fmul <16 x float> %747, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <16 x float> %748, <16 x float>* %10, align 64
  br label %4808

749:                                              ; preds = %411
  %750 = load <16 x i32>, <16 x i32>* %353, align 1
  %751 = and <16 x i32> %750, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %752 = uitofp <16 x i32> %751 to <16 x float>
  %753 = fmul <16 x float> %752, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  store <16 x float> %753, <16 x float>* %7, align 64
  %754 = lshr <16 x i32> %750, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %755 = and <16 x i32> %754, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %756 = uitofp <16 x i32> %755 to <16 x float>
  %757 = fmul <16 x float> %756, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  store <16 x float> %757, <16 x float>* %8, align 64
  %758 = lshr <16 x i32> %750, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %759 = and <16 x i32> %758, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %760 = uitofp <16 x i32> %759 to <16 x float>
  %761 = fmul <16 x float> %760, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  store <16 x float> %761, <16 x float>* %9, align 64
  %762 = lshr <16 x i32> %750, <i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30>
  %763 = uitofp <16 x i32> %762 to <16 x float>
  %764 = fmul <16 x float> %763, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  store <16 x float> %764, <16 x float>* %10, align 64
  br label %4808

765:                                              ; preds = %411
  %766 = load i16, i16* %255, align 2
  %767 = zext i16 %766 to i32
  %768 = insertelement <16 x i32> undef, i32 %767, i32 0
  %769 = load i16, i16* %257, align 2
  %770 = zext i16 %769 to i32
  %771 = insertelement <16 x i32> %768, i32 %770, i32 1
  %772 = load i16, i16* %259, align 2
  %773 = zext i16 %772 to i32
  %774 = insertelement <16 x i32> %771, i32 %773, i32 2
  %775 = load i16, i16* %261, align 2
  %776 = zext i16 %775 to i32
  %777 = insertelement <16 x i32> %774, i32 %776, i32 3
  %778 = load i16, i16* %263, align 2
  %779 = zext i16 %778 to i32
  %780 = insertelement <16 x i32> %777, i32 %779, i32 4
  %781 = load i16, i16* %265, align 2
  %782 = zext i16 %781 to i32
  %783 = insertelement <16 x i32> %780, i32 %782, i32 5
  %784 = load i16, i16* %267, align 2
  %785 = zext i16 %784 to i32
  %786 = insertelement <16 x i32> %783, i32 %785, i32 6
  %787 = load i16, i16* %269, align 2
  %788 = zext i16 %787 to i32
  %789 = insertelement <16 x i32> %786, i32 %788, i32 7
  %790 = load i16, i16* %271, align 2
  %791 = zext i16 %790 to i32
  %792 = insertelement <16 x i32> %789, i32 %791, i32 8
  %793 = load i16, i16* %273, align 2
  %794 = zext i16 %793 to i32
  %795 = insertelement <16 x i32> %792, i32 %794, i32 9
  %796 = load i16, i16* %275, align 2
  %797 = zext i16 %796 to i32
  %798 = insertelement <16 x i32> %795, i32 %797, i32 10
  %799 = load i16, i16* %277, align 2
  %800 = zext i16 %799 to i32
  %801 = insertelement <16 x i32> %798, i32 %800, i32 11
  %802 = load i16, i16* %279, align 2
  %803 = zext i16 %802 to i32
  %804 = insertelement <16 x i32> %801, i32 %803, i32 12
  %805 = load i16, i16* %281, align 2
  %806 = zext i16 %805 to i32
  %807 = insertelement <16 x i32> %804, i32 %806, i32 13
  %808 = load i16, i16* %283, align 2
  %809 = zext i16 %808 to i32
  %810 = insertelement <16 x i32> %807, i32 %809, i32 14
  %811 = load i16, i16* %285, align 2
  %812 = zext i16 %811 to i32
  %813 = insertelement <16 x i32> %810, i32 %812, i32 15
  %814 = uitofp <16 x i32> %813 to <16 x float>
  %815 = fmul <16 x float> %814, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <16 x float> %815, <16 x float>* %7, align 64
  %816 = load i16, i16* %287, align 2
  %817 = zext i16 %816 to i32
  %818 = insertelement <16 x i32> undef, i32 %817, i32 0
  %819 = load i16, i16* %289, align 2
  %820 = zext i16 %819 to i32
  %821 = insertelement <16 x i32> %818, i32 %820, i32 1
  %822 = load i16, i16* %291, align 2
  %823 = zext i16 %822 to i32
  %824 = insertelement <16 x i32> %821, i32 %823, i32 2
  %825 = load i16, i16* %293, align 2
  %826 = zext i16 %825 to i32
  %827 = insertelement <16 x i32> %824, i32 %826, i32 3
  %828 = load i16, i16* %295, align 2
  %829 = zext i16 %828 to i32
  %830 = insertelement <16 x i32> %827, i32 %829, i32 4
  %831 = load i16, i16* %297, align 2
  %832 = zext i16 %831 to i32
  %833 = insertelement <16 x i32> %830, i32 %832, i32 5
  %834 = load i16, i16* %299, align 2
  %835 = zext i16 %834 to i32
  %836 = insertelement <16 x i32> %833, i32 %835, i32 6
  %837 = load i16, i16* %301, align 2
  %838 = zext i16 %837 to i32
  %839 = insertelement <16 x i32> %836, i32 %838, i32 7
  %840 = load i16, i16* %303, align 2
  %841 = zext i16 %840 to i32
  %842 = insertelement <16 x i32> %839, i32 %841, i32 8
  %843 = load i16, i16* %305, align 2
  %844 = zext i16 %843 to i32
  %845 = insertelement <16 x i32> %842, i32 %844, i32 9
  %846 = load i16, i16* %307, align 2
  %847 = zext i16 %846 to i32
  %848 = insertelement <16 x i32> %845, i32 %847, i32 10
  %849 = load i16, i16* %309, align 2
  %850 = zext i16 %849 to i32
  %851 = insertelement <16 x i32> %848, i32 %850, i32 11
  %852 = load i16, i16* %311, align 2
  %853 = zext i16 %852 to i32
  %854 = insertelement <16 x i32> %851, i32 %853, i32 12
  %855 = load i16, i16* %313, align 2
  %856 = zext i16 %855 to i32
  %857 = insertelement <16 x i32> %854, i32 %856, i32 13
  %858 = load i16, i16* %315, align 2
  %859 = zext i16 %858 to i32
  %860 = insertelement <16 x i32> %857, i32 %859, i32 14
  %861 = load i16, i16* %317, align 2
  %862 = zext i16 %861 to i32
  %863 = insertelement <16 x i32> %860, i32 %862, i32 15
  %864 = uitofp <16 x i32> %863 to <16 x float>
  %865 = fmul <16 x float> %864, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <16 x float> %865, <16 x float>* %8, align 64
  %866 = load i16, i16* %319, align 2
  %867 = zext i16 %866 to i32
  %868 = insertelement <16 x i32> undef, i32 %867, i32 0
  %869 = load i16, i16* %321, align 2
  %870 = zext i16 %869 to i32
  %871 = insertelement <16 x i32> %868, i32 %870, i32 1
  %872 = load i16, i16* %323, align 2
  %873 = zext i16 %872 to i32
  %874 = insertelement <16 x i32> %871, i32 %873, i32 2
  %875 = load i16, i16* %325, align 2
  %876 = zext i16 %875 to i32
  %877 = insertelement <16 x i32> %874, i32 %876, i32 3
  %878 = load i16, i16* %327, align 2
  %879 = zext i16 %878 to i32
  %880 = insertelement <16 x i32> %877, i32 %879, i32 4
  %881 = load i16, i16* %329, align 2
  %882 = zext i16 %881 to i32
  %883 = insertelement <16 x i32> %880, i32 %882, i32 5
  %884 = load i16, i16* %331, align 2
  %885 = zext i16 %884 to i32
  %886 = insertelement <16 x i32> %883, i32 %885, i32 6
  %887 = load i16, i16* %333, align 2
  %888 = zext i16 %887 to i32
  %889 = insertelement <16 x i32> %886, i32 %888, i32 7
  %890 = load i16, i16* %335, align 2
  %891 = zext i16 %890 to i32
  %892 = insertelement <16 x i32> %889, i32 %891, i32 8
  %893 = load i16, i16* %337, align 2
  %894 = zext i16 %893 to i32
  %895 = insertelement <16 x i32> %892, i32 %894, i32 9
  %896 = load i16, i16* %339, align 2
  %897 = zext i16 %896 to i32
  %898 = insertelement <16 x i32> %895, i32 %897, i32 10
  %899 = load i16, i16* %341, align 2
  %900 = zext i16 %899 to i32
  %901 = insertelement <16 x i32> %898, i32 %900, i32 11
  %902 = load i16, i16* %343, align 2
  %903 = zext i16 %902 to i32
  %904 = insertelement <16 x i32> %901, i32 %903, i32 12
  %905 = load i16, i16* %345, align 2
  %906 = zext i16 %905 to i32
  %907 = insertelement <16 x i32> %904, i32 %906, i32 13
  %908 = load i16, i16* %347, align 2
  %909 = zext i16 %908 to i32
  %910 = insertelement <16 x i32> %907, i32 %909, i32 14
  %911 = load i16, i16* %349, align 2
  %912 = zext i16 %911 to i32
  %913 = insertelement <16 x i32> %910, i32 %912, i32 15
  %914 = uitofp <16 x i32> %913 to <16 x float>
  %915 = fmul <16 x float> %914, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <16 x float> %915, <16 x float>* %9, align 64
  br label %4808

916:                                              ; preds = %411
  %917 = load <16 x i64>, <16 x i64>* %251, align 2
  %918 = and <16 x i64> %917, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %919 = uitofp <16 x i64> %918 to <16 x float>
  %920 = fmul <16 x float> %919, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <16 x float> %920, <16 x float>* %7, align 64
  %921 = lshr <16 x i64> %917, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %922 = and <16 x i64> %921, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %923 = uitofp <16 x i64> %922 to <16 x float>
  %924 = fmul <16 x float> %923, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <16 x float> %924, <16 x float>* %8, align 64
  %925 = lshr <16 x i64> %917, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %926 = and <16 x i64> %925, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %927 = uitofp <16 x i64> %926 to <16 x float>
  %928 = fmul <16 x float> %927, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <16 x float> %928, <16 x float>* %9, align 64
  %929 = lshr <16 x i64> %917, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %930 = uitofp <16 x i64> %929 to <16 x float>
  %931 = fmul <16 x float> %930, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <16 x float> %931, <16 x float>* %10, align 64
  br label %4808

932:                                              ; preds = %411
  %933 = load i16, i16* %255, align 2
  %934 = zext i16 %933 to i32
  %935 = insertelement <16 x i32> undef, i32 %934, i32 0
  %936 = load i16, i16* %257, align 2
  %937 = zext i16 %936 to i32
  %938 = insertelement <16 x i32> %935, i32 %937, i32 1
  %939 = load i16, i16* %259, align 2
  %940 = zext i16 %939 to i32
  %941 = insertelement <16 x i32> %938, i32 %940, i32 2
  %942 = load i16, i16* %261, align 2
  %943 = zext i16 %942 to i32
  %944 = insertelement <16 x i32> %941, i32 %943, i32 3
  %945 = load i16, i16* %263, align 2
  %946 = zext i16 %945 to i32
  %947 = insertelement <16 x i32> %944, i32 %946, i32 4
  %948 = load i16, i16* %265, align 2
  %949 = zext i16 %948 to i32
  %950 = insertelement <16 x i32> %947, i32 %949, i32 5
  %951 = load i16, i16* %267, align 2
  %952 = zext i16 %951 to i32
  %953 = insertelement <16 x i32> %950, i32 %952, i32 6
  %954 = load i16, i16* %269, align 2
  %955 = zext i16 %954 to i32
  %956 = insertelement <16 x i32> %953, i32 %955, i32 7
  %957 = load i16, i16* %271, align 2
  %958 = zext i16 %957 to i32
  %959 = insertelement <16 x i32> %956, i32 %958, i32 8
  %960 = load i16, i16* %273, align 2
  %961 = zext i16 %960 to i32
  %962 = insertelement <16 x i32> %959, i32 %961, i32 9
  %963 = load i16, i16* %275, align 2
  %964 = zext i16 %963 to i32
  %965 = insertelement <16 x i32> %962, i32 %964, i32 10
  %966 = load i16, i16* %277, align 2
  %967 = zext i16 %966 to i32
  %968 = insertelement <16 x i32> %965, i32 %967, i32 11
  %969 = load i16, i16* %279, align 2
  %970 = zext i16 %969 to i32
  %971 = insertelement <16 x i32> %968, i32 %970, i32 12
  %972 = load i16, i16* %281, align 2
  %973 = zext i16 %972 to i32
  %974 = insertelement <16 x i32> %971, i32 %973, i32 13
  %975 = load i16, i16* %283, align 2
  %976 = zext i16 %975 to i32
  %977 = insertelement <16 x i32> %974, i32 %976, i32 14
  %978 = load i16, i16* %285, align 2
  %979 = zext i16 %978 to i32
  %980 = insertelement <16 x i32> %977, i32 %979, i32 15
  %981 = load i16, i16* %287, align 2
  %982 = zext i16 %981 to i32
  %983 = insertelement <16 x i32> undef, i32 %982, i32 0
  %984 = load i16, i16* %289, align 2
  %985 = zext i16 %984 to i32
  %986 = insertelement <16 x i32> %983, i32 %985, i32 1
  %987 = load i16, i16* %291, align 2
  %988 = zext i16 %987 to i32
  %989 = insertelement <16 x i32> %986, i32 %988, i32 2
  %990 = load i16, i16* %293, align 2
  %991 = zext i16 %990 to i32
  %992 = insertelement <16 x i32> %989, i32 %991, i32 3
  %993 = load i16, i16* %295, align 2
  %994 = zext i16 %993 to i32
  %995 = insertelement <16 x i32> %992, i32 %994, i32 4
  %996 = load i16, i16* %297, align 2
  %997 = zext i16 %996 to i32
  %998 = insertelement <16 x i32> %995, i32 %997, i32 5
  %999 = load i16, i16* %299, align 2
  %1000 = zext i16 %999 to i32
  %1001 = insertelement <16 x i32> %998, i32 %1000, i32 6
  %1002 = load i16, i16* %301, align 2
  %1003 = zext i16 %1002 to i32
  %1004 = insertelement <16 x i32> %1001, i32 %1003, i32 7
  %1005 = load i16, i16* %303, align 2
  %1006 = zext i16 %1005 to i32
  %1007 = insertelement <16 x i32> %1004, i32 %1006, i32 8
  %1008 = load i16, i16* %305, align 2
  %1009 = zext i16 %1008 to i32
  %1010 = insertelement <16 x i32> %1007, i32 %1009, i32 9
  %1011 = load i16, i16* %307, align 2
  %1012 = zext i16 %1011 to i32
  %1013 = insertelement <16 x i32> %1010, i32 %1012, i32 10
  %1014 = load i16, i16* %309, align 2
  %1015 = zext i16 %1014 to i32
  %1016 = insertelement <16 x i32> %1013, i32 %1015, i32 11
  %1017 = load i16, i16* %311, align 2
  %1018 = zext i16 %1017 to i32
  %1019 = insertelement <16 x i32> %1016, i32 %1018, i32 12
  %1020 = load i16, i16* %313, align 2
  %1021 = zext i16 %1020 to i32
  %1022 = insertelement <16 x i32> %1019, i32 %1021, i32 13
  %1023 = load i16, i16* %315, align 2
  %1024 = zext i16 %1023 to i32
  %1025 = insertelement <16 x i32> %1022, i32 %1024, i32 14
  %1026 = load i16, i16* %317, align 2
  %1027 = zext i16 %1026 to i32
  %1028 = insertelement <16 x i32> %1025, i32 %1027, i32 15
  %1029 = load i16, i16* %319, align 2
  %1030 = zext i16 %1029 to i32
  %1031 = insertelement <16 x i32> undef, i32 %1030, i32 0
  %1032 = load i16, i16* %321, align 2
  %1033 = zext i16 %1032 to i32
  %1034 = insertelement <16 x i32> %1031, i32 %1033, i32 1
  %1035 = load i16, i16* %323, align 2
  %1036 = zext i16 %1035 to i32
  %1037 = insertelement <16 x i32> %1034, i32 %1036, i32 2
  %1038 = load i16, i16* %325, align 2
  %1039 = zext i16 %1038 to i32
  %1040 = insertelement <16 x i32> %1037, i32 %1039, i32 3
  %1041 = load i16, i16* %327, align 2
  %1042 = zext i16 %1041 to i32
  %1043 = insertelement <16 x i32> %1040, i32 %1042, i32 4
  %1044 = load i16, i16* %329, align 2
  %1045 = zext i16 %1044 to i32
  %1046 = insertelement <16 x i32> %1043, i32 %1045, i32 5
  %1047 = load i16, i16* %331, align 2
  %1048 = zext i16 %1047 to i32
  %1049 = insertelement <16 x i32> %1046, i32 %1048, i32 6
  %1050 = load i16, i16* %333, align 2
  %1051 = zext i16 %1050 to i32
  %1052 = insertelement <16 x i32> %1049, i32 %1051, i32 7
  %1053 = load i16, i16* %335, align 2
  %1054 = zext i16 %1053 to i32
  %1055 = insertelement <16 x i32> %1052, i32 %1054, i32 8
  %1056 = load i16, i16* %337, align 2
  %1057 = zext i16 %1056 to i32
  %1058 = insertelement <16 x i32> %1055, i32 %1057, i32 9
  %1059 = load i16, i16* %339, align 2
  %1060 = zext i16 %1059 to i32
  %1061 = insertelement <16 x i32> %1058, i32 %1060, i32 10
  %1062 = load i16, i16* %341, align 2
  %1063 = zext i16 %1062 to i32
  %1064 = insertelement <16 x i32> %1061, i32 %1063, i32 11
  %1065 = load i16, i16* %343, align 2
  %1066 = zext i16 %1065 to i32
  %1067 = insertelement <16 x i32> %1064, i32 %1066, i32 12
  %1068 = load i16, i16* %345, align 2
  %1069 = zext i16 %1068 to i32
  %1070 = insertelement <16 x i32> %1067, i32 %1069, i32 13
  %1071 = load i16, i16* %347, align 2
  %1072 = zext i16 %1071 to i32
  %1073 = insertelement <16 x i32> %1070, i32 %1072, i32 14
  %1074 = load i16, i16* %349, align 2
  %1075 = zext i16 %1074 to i32
  %1076 = insertelement <16 x i32> %1073, i32 %1075, i32 15
  %1077 = shl <16 x i32> %980, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1078 = and <16 x i32> %1077, <i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280>
  %1079 = lshr <16 x i32> %980, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1080 = and <16 x i32> %1079, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1081 = or <16 x i32> %1078, %1080
  %1082 = uitofp <16 x i32> %1081 to <16 x float>
  %1083 = fmul <16 x float> %1082, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <16 x float> %1083, <16 x float>* %7, align 64
  %1084 = shl <16 x i32> %1028, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1085 = and <16 x i32> %1084, <i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280>
  %1086 = lshr <16 x i32> %1028, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1087 = and <16 x i32> %1086, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1088 = or <16 x i32> %1085, %1087
  %1089 = uitofp <16 x i32> %1088 to <16 x float>
  %1090 = fmul <16 x float> %1089, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <16 x float> %1090, <16 x float>* %8, align 64
  %1091 = shl <16 x i32> %1076, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1092 = and <16 x i32> %1091, <i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280>
  %1093 = lshr <16 x i32> %1076, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1094 = and <16 x i32> %1093, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1095 = or <16 x i32> %1092, %1094
  %1096 = uitofp <16 x i32> %1095 to <16 x float>
  %1097 = fmul <16 x float> %1096, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <16 x float> %1097, <16 x float>* %9, align 64
  br label %4808

1098:                                             ; preds = %411
  %1099 = load <16 x i64>, <16 x i64>* %251, align 2
  %1100 = shl <16 x i64> %1099, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %1101 = and <16 x i64> %1100, <i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696>
  %1102 = lshr <16 x i64> %1099, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %1103 = and <16 x i64> %1102, <i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695>
  %1104 = or <16 x i64> %1101, %1103
  %1105 = and <16 x i64> %1104, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %1106 = uitofp <16 x i64> %1105 to <16 x float>
  %1107 = fmul <16 x float> %1106, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <16 x float> %1107, <16 x float>* %7, align 64
  %1108 = lshr <16 x i64> %1104, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %1109 = and <16 x i64> %1108, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %1110 = uitofp <16 x i64> %1109 to <16 x float>
  %1111 = fmul <16 x float> %1110, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <16 x float> %1111, <16 x float>* %8, align 64
  %1112 = lshr <16 x i64> %1104, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %1113 = and <16 x i64> %1112, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %1114 = uitofp <16 x i64> %1113 to <16 x float>
  %1115 = fmul <16 x float> %1114, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <16 x float> %1115, <16 x float>* %9, align 64
  %1116 = lshr <16 x i64> %1104, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %1117 = uitofp <16 x i64> %1116 to <16 x float>
  %1118 = fmul <16 x float> %1117, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  store <16 x float> %1118, <16 x float>* %10, align 64
  br label %4808

1119:                                             ; preds = %411
  %1120 = load i16, i16* %255, align 2
  %1121 = insertelement <16 x i16> undef, i16 %1120, i32 0
  %1122 = load i16, i16* %257, align 2
  %1123 = insertelement <16 x i16> %1121, i16 %1122, i32 1
  %1124 = load i16, i16* %259, align 2
  %1125 = insertelement <16 x i16> %1123, i16 %1124, i32 2
  %1126 = load i16, i16* %261, align 2
  %1127 = insertelement <16 x i16> %1125, i16 %1126, i32 3
  %1128 = load i16, i16* %263, align 2
  %1129 = insertelement <16 x i16> %1127, i16 %1128, i32 4
  %1130 = load i16, i16* %265, align 2
  %1131 = insertelement <16 x i16> %1129, i16 %1130, i32 5
  %1132 = load i16, i16* %267, align 2
  %1133 = insertelement <16 x i16> %1131, i16 %1132, i32 6
  %1134 = load i16, i16* %269, align 2
  %1135 = insertelement <16 x i16> %1133, i16 %1134, i32 7
  %1136 = load i16, i16* %271, align 2
  %1137 = insertelement <16 x i16> %1135, i16 %1136, i32 8
  %1138 = load i16, i16* %273, align 2
  %1139 = insertelement <16 x i16> %1137, i16 %1138, i32 9
  %1140 = load i16, i16* %275, align 2
  %1141 = insertelement <16 x i16> %1139, i16 %1140, i32 10
  %1142 = load i16, i16* %277, align 2
  %1143 = insertelement <16 x i16> %1141, i16 %1142, i32 11
  %1144 = load i16, i16* %279, align 2
  %1145 = insertelement <16 x i16> %1143, i16 %1144, i32 12
  %1146 = load i16, i16* %281, align 2
  %1147 = insertelement <16 x i16> %1145, i16 %1146, i32 13
  %1148 = load i16, i16* %283, align 2
  %1149 = insertelement <16 x i16> %1147, i16 %1148, i32 14
  %1150 = load i16, i16* %285, align 2
  %1151 = insertelement <16 x i16> %1149, i16 %1150, i32 15
  %1152 = load i16, i16* %287, align 2
  %1153 = insertelement <16 x i16> undef, i16 %1152, i32 0
  %1154 = load i16, i16* %289, align 2
  %1155 = insertelement <16 x i16> %1153, i16 %1154, i32 1
  %1156 = load i16, i16* %291, align 2
  %1157 = insertelement <16 x i16> %1155, i16 %1156, i32 2
  %1158 = load i16, i16* %293, align 2
  %1159 = insertelement <16 x i16> %1157, i16 %1158, i32 3
  %1160 = load i16, i16* %295, align 2
  %1161 = insertelement <16 x i16> %1159, i16 %1160, i32 4
  %1162 = load i16, i16* %297, align 2
  %1163 = insertelement <16 x i16> %1161, i16 %1162, i32 5
  %1164 = load i16, i16* %299, align 2
  %1165 = insertelement <16 x i16> %1163, i16 %1164, i32 6
  %1166 = load i16, i16* %301, align 2
  %1167 = insertelement <16 x i16> %1165, i16 %1166, i32 7
  %1168 = load i16, i16* %303, align 2
  %1169 = insertelement <16 x i16> %1167, i16 %1168, i32 8
  %1170 = load i16, i16* %305, align 2
  %1171 = insertelement <16 x i16> %1169, i16 %1170, i32 9
  %1172 = load i16, i16* %307, align 2
  %1173 = insertelement <16 x i16> %1171, i16 %1172, i32 10
  %1174 = load i16, i16* %309, align 2
  %1175 = insertelement <16 x i16> %1173, i16 %1174, i32 11
  %1176 = load i16, i16* %311, align 2
  %1177 = insertelement <16 x i16> %1175, i16 %1176, i32 12
  %1178 = load i16, i16* %313, align 2
  %1179 = insertelement <16 x i16> %1177, i16 %1178, i32 13
  %1180 = load i16, i16* %315, align 2
  %1181 = insertelement <16 x i16> %1179, i16 %1180, i32 14
  %1182 = load i16, i16* %317, align 2
  %1183 = insertelement <16 x i16> %1181, i16 %1182, i32 15
  %1184 = load i16, i16* %319, align 2
  %1185 = insertelement <16 x i16> undef, i16 %1184, i32 0
  %1186 = load i16, i16* %321, align 2
  %1187 = insertelement <16 x i16> %1185, i16 %1186, i32 1
  %1188 = load i16, i16* %323, align 2
  %1189 = insertelement <16 x i16> %1187, i16 %1188, i32 2
  %1190 = load i16, i16* %325, align 2
  %1191 = insertelement <16 x i16> %1189, i16 %1190, i32 3
  %1192 = load i16, i16* %327, align 2
  %1193 = insertelement <16 x i16> %1191, i16 %1192, i32 4
  %1194 = load i16, i16* %329, align 2
  %1195 = insertelement <16 x i16> %1193, i16 %1194, i32 5
  %1196 = load i16, i16* %331, align 2
  %1197 = insertelement <16 x i16> %1195, i16 %1196, i32 6
  %1198 = load i16, i16* %333, align 2
  %1199 = insertelement <16 x i16> %1197, i16 %1198, i32 7
  %1200 = load i16, i16* %335, align 2
  %1201 = insertelement <16 x i16> %1199, i16 %1200, i32 8
  %1202 = load i16, i16* %337, align 2
  %1203 = insertelement <16 x i16> %1201, i16 %1202, i32 9
  %1204 = load i16, i16* %339, align 2
  %1205 = insertelement <16 x i16> %1203, i16 %1204, i32 10
  %1206 = load i16, i16* %341, align 2
  %1207 = insertelement <16 x i16> %1205, i16 %1206, i32 11
  %1208 = load i16, i16* %343, align 2
  %1209 = insertelement <16 x i16> %1207, i16 %1208, i32 12
  %1210 = load i16, i16* %345, align 2
  %1211 = insertelement <16 x i16> %1209, i16 %1210, i32 13
  %1212 = load i16, i16* %347, align 2
  %1213 = insertelement <16 x i16> %1211, i16 %1212, i32 14
  %1214 = load i16, i16* %349, align 2
  %1215 = insertelement <16 x i16> %1213, i16 %1214, i32 15
  %1216 = tail call <16 x float> @llvm.x86.avx512.mask.vcvtph2ps.512(<16 x i16> %1151, <16 x float> zeroinitializer, i16 -1, i32 4) #17
  store <16 x float> %1216, <16 x float>* %7, align 64
  %1217 = tail call <16 x float> @llvm.x86.avx512.mask.vcvtph2ps.512(<16 x i16> %1183, <16 x float> zeroinitializer, i16 -1, i32 4) #17
  store <16 x float> %1217, <16 x float>* %8, align 64
  %1218 = tail call <16 x float> @llvm.x86.avx512.mask.vcvtph2ps.512(<16 x i16> %1215, <16 x float> zeroinitializer, i16 -1, i32 4) #17
  store <16 x float> %1218, <16 x float>* %9, align 64
  br label %4808

1219:                                             ; preds = %411
  %1220 = load <16 x i64>, <16 x i64>* %251, align 2
  %1221 = trunc <16 x i64> %1220 to <16 x i16>
  %1222 = lshr <16 x i64> %1220, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %1223 = trunc <16 x i64> %1222 to <16 x i16>
  %1224 = lshr <16 x i64> %1220, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %1225 = trunc <16 x i64> %1224 to <16 x i16>
  %1226 = lshr <16 x i64> %1220, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %1227 = trunc <16 x i64> %1226 to <16 x i16>
  %1228 = tail call <16 x float> @llvm.x86.avx512.mask.vcvtph2ps.512(<16 x i16> %1221, <16 x float> zeroinitializer, i16 -1, i32 4) #17
  store <16 x float> %1228, <16 x float>* %7, align 64
  %1229 = tail call <16 x float> @llvm.x86.avx512.mask.vcvtph2ps.512(<16 x i16> %1223, <16 x float> zeroinitializer, i16 -1, i32 4) #17
  store <16 x float> %1229, <16 x float>* %8, align 64
  %1230 = tail call <16 x float> @llvm.x86.avx512.mask.vcvtph2ps.512(<16 x i16> %1225, <16 x float> zeroinitializer, i16 -1, i32 4) #17
  store <16 x float> %1230, <16 x float>* %9, align 64
  %1231 = tail call <16 x float> @llvm.x86.avx512.mask.vcvtph2ps.512(<16 x i16> %1227, <16 x float> zeroinitializer, i16 -1, i32 4) #17
  store <16 x float> %1231, <16 x float>* %10, align 64
  br label %4808

1232:                                             ; preds = %411
  %1233 = load float, float* %153, align 4
  %1234 = insertelement <16 x float> undef, float %1233, i32 0
  %1235 = load float, float* %155, align 4
  %1236 = insertelement <16 x float> %1234, float %1235, i32 1
  %1237 = load float, float* %157, align 4
  %1238 = insertelement <16 x float> %1236, float %1237, i32 2
  %1239 = load float, float* %159, align 4
  %1240 = insertelement <16 x float> %1238, float %1239, i32 3
  %1241 = load float, float* %161, align 4
  %1242 = insertelement <16 x float> %1240, float %1241, i32 4
  %1243 = load float, float* %163, align 4
  %1244 = insertelement <16 x float> %1242, float %1243, i32 5
  %1245 = load float, float* %165, align 4
  %1246 = insertelement <16 x float> %1244, float %1245, i32 6
  %1247 = load float, float* %167, align 4
  %1248 = insertelement <16 x float> %1246, float %1247, i32 7
  %1249 = load float, float* %169, align 4
  %1250 = insertelement <16 x float> %1248, float %1249, i32 8
  %1251 = load float, float* %171, align 4
  %1252 = insertelement <16 x float> %1250, float %1251, i32 9
  %1253 = load float, float* %173, align 4
  %1254 = insertelement <16 x float> %1252, float %1253, i32 10
  %1255 = load float, float* %175, align 4
  %1256 = insertelement <16 x float> %1254, float %1255, i32 11
  %1257 = load float, float* %177, align 4
  %1258 = insertelement <16 x float> %1256, float %1257, i32 12
  %1259 = load float, float* %179, align 4
  %1260 = insertelement <16 x float> %1258, float %1259, i32 13
  %1261 = load float, float* %181, align 4
  %1262 = insertelement <16 x float> %1260, float %1261, i32 14
  %1263 = load float, float* %183, align 4
  %1264 = insertelement <16 x float> %1262, float %1263, i32 15
  store <16 x float> %1264, <16 x float>* %7, align 64
  %1265 = load float, float* %185, align 4
  %1266 = insertelement <16 x float> undef, float %1265, i32 0
  %1267 = load float, float* %187, align 4
  %1268 = insertelement <16 x float> %1266, float %1267, i32 1
  %1269 = load float, float* %189, align 4
  %1270 = insertelement <16 x float> %1268, float %1269, i32 2
  %1271 = load float, float* %191, align 4
  %1272 = insertelement <16 x float> %1270, float %1271, i32 3
  %1273 = load float, float* %193, align 4
  %1274 = insertelement <16 x float> %1272, float %1273, i32 4
  %1275 = load float, float* %195, align 4
  %1276 = insertelement <16 x float> %1274, float %1275, i32 5
  %1277 = load float, float* %197, align 4
  %1278 = insertelement <16 x float> %1276, float %1277, i32 6
  %1279 = load float, float* %199, align 4
  %1280 = insertelement <16 x float> %1278, float %1279, i32 7
  %1281 = load float, float* %201, align 4
  %1282 = insertelement <16 x float> %1280, float %1281, i32 8
  %1283 = load float, float* %203, align 4
  %1284 = insertelement <16 x float> %1282, float %1283, i32 9
  %1285 = load float, float* %205, align 4
  %1286 = insertelement <16 x float> %1284, float %1285, i32 10
  %1287 = load float, float* %207, align 4
  %1288 = insertelement <16 x float> %1286, float %1287, i32 11
  %1289 = load float, float* %209, align 4
  %1290 = insertelement <16 x float> %1288, float %1289, i32 12
  %1291 = load float, float* %211, align 4
  %1292 = insertelement <16 x float> %1290, float %1291, i32 13
  %1293 = load float, float* %213, align 4
  %1294 = insertelement <16 x float> %1292, float %1293, i32 14
  %1295 = load float, float* %215, align 4
  %1296 = insertelement <16 x float> %1294, float %1295, i32 15
  store <16 x float> %1296, <16 x float>* %8, align 64
  %1297 = load float, float* %217, align 4
  %1298 = insertelement <16 x float> undef, float %1297, i32 0
  %1299 = load float, float* %219, align 4
  %1300 = insertelement <16 x float> %1298, float %1299, i32 1
  %1301 = load float, float* %221, align 4
  %1302 = insertelement <16 x float> %1300, float %1301, i32 2
  %1303 = load float, float* %223, align 4
  %1304 = insertelement <16 x float> %1302, float %1303, i32 3
  %1305 = load float, float* %225, align 4
  %1306 = insertelement <16 x float> %1304, float %1305, i32 4
  %1307 = load float, float* %227, align 4
  %1308 = insertelement <16 x float> %1306, float %1307, i32 5
  %1309 = load float, float* %229, align 4
  %1310 = insertelement <16 x float> %1308, float %1309, i32 6
  %1311 = load float, float* %231, align 4
  %1312 = insertelement <16 x float> %1310, float %1311, i32 7
  %1313 = load float, float* %233, align 4
  %1314 = insertelement <16 x float> %1312, float %1313, i32 8
  %1315 = load float, float* %235, align 4
  %1316 = insertelement <16 x float> %1314, float %1315, i32 9
  %1317 = load float, float* %237, align 4
  %1318 = insertelement <16 x float> %1316, float %1317, i32 10
  %1319 = load float, float* %239, align 4
  %1320 = insertelement <16 x float> %1318, float %1319, i32 11
  %1321 = load float, float* %241, align 4
  %1322 = insertelement <16 x float> %1320, float %1321, i32 12
  %1323 = load float, float* %243, align 4
  %1324 = insertelement <16 x float> %1322, float %1323, i32 13
  %1325 = load float, float* %245, align 4
  %1326 = insertelement <16 x float> %1324, float %1325, i32 14
  %1327 = load float, float* %247, align 4
  %1328 = insertelement <16 x float> %1326, float %1327, i32 15
  store <16 x float> %1328, <16 x float>* %9, align 64
  br label %4808

1329:                                             ; preds = %411
  %1330 = load float, float* %23, align 4
  %1331 = insertelement <16 x float> undef, float %1330, i32 0
  %1332 = load float, float* %25, align 4
  %1333 = insertelement <16 x float> %1331, float %1332, i32 1
  %1334 = load float, float* %27, align 4
  %1335 = insertelement <16 x float> %1333, float %1334, i32 2
  %1336 = load float, float* %29, align 4
  %1337 = insertelement <16 x float> %1335, float %1336, i32 3
  %1338 = load float, float* %31, align 4
  %1339 = insertelement <16 x float> %1337, float %1338, i32 4
  %1340 = load float, float* %33, align 4
  %1341 = insertelement <16 x float> %1339, float %1340, i32 5
  %1342 = load float, float* %35, align 4
  %1343 = insertelement <16 x float> %1341, float %1342, i32 6
  %1344 = load float, float* %37, align 4
  %1345 = insertelement <16 x float> %1343, float %1344, i32 7
  %1346 = load float, float* %39, align 4
  %1347 = insertelement <16 x float> %1345, float %1346, i32 8
  %1348 = load float, float* %41, align 4
  %1349 = insertelement <16 x float> %1347, float %1348, i32 9
  %1350 = load float, float* %43, align 4
  %1351 = insertelement <16 x float> %1349, float %1350, i32 10
  %1352 = load float, float* %45, align 4
  %1353 = insertelement <16 x float> %1351, float %1352, i32 11
  %1354 = load float, float* %47, align 4
  %1355 = insertelement <16 x float> %1353, float %1354, i32 12
  %1356 = load float, float* %49, align 4
  %1357 = insertelement <16 x float> %1355, float %1356, i32 13
  %1358 = load float, float* %51, align 4
  %1359 = insertelement <16 x float> %1357, float %1358, i32 14
  %1360 = load float, float* %53, align 4
  %1361 = insertelement <16 x float> %1359, float %1360, i32 15
  store <16 x float> %1361, <16 x float>* %7, align 64
  %1362 = load float, float* %55, align 4
  %1363 = insertelement <16 x float> undef, float %1362, i32 0
  %1364 = load float, float* %57, align 4
  %1365 = insertelement <16 x float> %1363, float %1364, i32 1
  %1366 = load float, float* %59, align 4
  %1367 = insertelement <16 x float> %1365, float %1366, i32 2
  %1368 = load float, float* %61, align 4
  %1369 = insertelement <16 x float> %1367, float %1368, i32 3
  %1370 = load float, float* %63, align 4
  %1371 = insertelement <16 x float> %1369, float %1370, i32 4
  %1372 = load float, float* %65, align 4
  %1373 = insertelement <16 x float> %1371, float %1372, i32 5
  %1374 = load float, float* %67, align 4
  %1375 = insertelement <16 x float> %1373, float %1374, i32 6
  %1376 = load float, float* %69, align 4
  %1377 = insertelement <16 x float> %1375, float %1376, i32 7
  %1378 = load float, float* %71, align 4
  %1379 = insertelement <16 x float> %1377, float %1378, i32 8
  %1380 = load float, float* %73, align 4
  %1381 = insertelement <16 x float> %1379, float %1380, i32 9
  %1382 = load float, float* %75, align 4
  %1383 = insertelement <16 x float> %1381, float %1382, i32 10
  %1384 = load float, float* %77, align 4
  %1385 = insertelement <16 x float> %1383, float %1384, i32 11
  %1386 = load float, float* %79, align 4
  %1387 = insertelement <16 x float> %1385, float %1386, i32 12
  %1388 = load float, float* %81, align 4
  %1389 = insertelement <16 x float> %1387, float %1388, i32 13
  %1390 = load float, float* %83, align 4
  %1391 = insertelement <16 x float> %1389, float %1390, i32 14
  %1392 = load float, float* %85, align 4
  %1393 = insertelement <16 x float> %1391, float %1392, i32 15
  store <16 x float> %1393, <16 x float>* %8, align 64
  %1394 = load float, float* %87, align 4
  %1395 = insertelement <16 x float> undef, float %1394, i32 0
  %1396 = load float, float* %89, align 4
  %1397 = insertelement <16 x float> %1395, float %1396, i32 1
  %1398 = load float, float* %91, align 4
  %1399 = insertelement <16 x float> %1397, float %1398, i32 2
  %1400 = load float, float* %93, align 4
  %1401 = insertelement <16 x float> %1399, float %1400, i32 3
  %1402 = load float, float* %95, align 4
  %1403 = insertelement <16 x float> %1401, float %1402, i32 4
  %1404 = load float, float* %97, align 4
  %1405 = insertelement <16 x float> %1403, float %1404, i32 5
  %1406 = load float, float* %99, align 4
  %1407 = insertelement <16 x float> %1405, float %1406, i32 6
  %1408 = load float, float* %101, align 4
  %1409 = insertelement <16 x float> %1407, float %1408, i32 7
  %1410 = load float, float* %103, align 4
  %1411 = insertelement <16 x float> %1409, float %1410, i32 8
  %1412 = load float, float* %105, align 4
  %1413 = insertelement <16 x float> %1411, float %1412, i32 9
  %1414 = load float, float* %107, align 4
  %1415 = insertelement <16 x float> %1413, float %1414, i32 10
  %1416 = load float, float* %109, align 4
  %1417 = insertelement <16 x float> %1415, float %1416, i32 11
  %1418 = load float, float* %111, align 4
  %1419 = insertelement <16 x float> %1417, float %1418, i32 12
  %1420 = load float, float* %113, align 4
  %1421 = insertelement <16 x float> %1419, float %1420, i32 13
  %1422 = load float, float* %115, align 4
  %1423 = insertelement <16 x float> %1421, float %1422, i32 14
  %1424 = load float, float* %117, align 4
  %1425 = insertelement <16 x float> %1423, float %1424, i32 15
  store <16 x float> %1425, <16 x float>* %9, align 64
  %1426 = load float, float* %119, align 4
  %1427 = insertelement <16 x float> undef, float %1426, i32 0
  %1428 = load float, float* %121, align 4
  %1429 = insertelement <16 x float> %1427, float %1428, i32 1
  %1430 = load float, float* %123, align 4
  %1431 = insertelement <16 x float> %1429, float %1430, i32 2
  %1432 = load float, float* %125, align 4
  %1433 = insertelement <16 x float> %1431, float %1432, i32 3
  %1434 = load float, float* %127, align 4
  %1435 = insertelement <16 x float> %1433, float %1434, i32 4
  %1436 = load float, float* %129, align 4
  %1437 = insertelement <16 x float> %1435, float %1436, i32 5
  %1438 = load float, float* %131, align 4
  %1439 = insertelement <16 x float> %1437, float %1438, i32 6
  %1440 = load float, float* %133, align 4
  %1441 = insertelement <16 x float> %1439, float %1440, i32 7
  %1442 = load float, float* %135, align 4
  %1443 = insertelement <16 x float> %1441, float %1442, i32 8
  %1444 = load float, float* %137, align 4
  %1445 = insertelement <16 x float> %1443, float %1444, i32 9
  %1446 = load float, float* %139, align 4
  %1447 = insertelement <16 x float> %1445, float %1446, i32 10
  %1448 = load float, float* %141, align 4
  %1449 = insertelement <16 x float> %1447, float %1448, i32 11
  %1450 = load float, float* %143, align 4
  %1451 = insertelement <16 x float> %1449, float %1450, i32 12
  %1452 = load float, float* %145, align 4
  %1453 = insertelement <16 x float> %1451, float %1452, i32 13
  %1454 = load float, float* %147, align 4
  %1455 = insertelement <16 x float> %1453, float %1454, i32 14
  %1456 = load float, float* %149, align 4
  %1457 = insertelement <16 x float> %1455, float %1456, i32 15
  store <16 x float> %1457, <16 x float>* %10, align 64
  br label %4808

1458:                                             ; preds = %411
  %1459 = load <16 x float>, <16 x float>* %7, align 64
  %1460 = load <16 x float>, <16 x float>* %9, align 64
  store <16 x float> %1460, <16 x float>* %7, align 64
  store <16 x float> %1459, <16 x float>* %9, align 64
  br label %4808

1461:                                             ; preds = %411
  %1462 = load <16 x float>, <16 x float>* %7, align 64
  %1463 = fcmp ogt <16 x float> %1462, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1464 = select <16 x i1> %1463, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %1462
  %1465 = fcmp ogt <16 x float> %1464, zeroinitializer
  %1466 = select <16 x i1> %1465, <16 x float> %1464, <16 x float> zeroinitializer
  store <16 x float> %1466, <16 x float>* %7, align 64
  %1467 = load <16 x float>, <16 x float>* %8, align 64
  %1468 = fcmp ogt <16 x float> %1467, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1469 = select <16 x i1> %1468, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %1467
  %1470 = fcmp ogt <16 x float> %1469, zeroinitializer
  %1471 = select <16 x i1> %1470, <16 x float> %1469, <16 x float> zeroinitializer
  store <16 x float> %1471, <16 x float>* %8, align 64
  %1472 = load <16 x float>, <16 x float>* %9, align 64
  %1473 = fcmp ogt <16 x float> %1472, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1474 = select <16 x i1> %1473, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %1472
  %1475 = fcmp ogt <16 x float> %1474, zeroinitializer
  %1476 = select <16 x i1> %1475, <16 x float> %1474, <16 x float> zeroinitializer
  store <16 x float> %1476, <16 x float>* %9, align 64
  %1477 = load <16 x float>, <16 x float>* %10, align 64
  %1478 = fcmp ogt <16 x float> %1477, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1479 = select <16 x i1> %1478, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %1477
  %1480 = fcmp ogt <16 x float> %1479, zeroinitializer
  %1481 = select <16 x i1> %1480, <16 x float> %1479, <16 x float> zeroinitializer
  store <16 x float> %1481, <16 x float>* %10, align 64
  br label %4808

1482:                                             ; preds = %411
  %1483 = load <16 x float>, <16 x float>* %7, align 64
  %1484 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1483
  store <16 x float> %1484, <16 x float>* %7, align 64
  %1485 = load <16 x float>, <16 x float>* %8, align 64
  %1486 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1485
  store <16 x float> %1486, <16 x float>* %8, align 64
  %1487 = load <16 x float>, <16 x float>* %9, align 64
  %1488 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1487
  store <16 x float> %1488, <16 x float>* %9, align 64
  %1489 = load <16 x float>, <16 x float>* %10, align 64
  %1490 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1489
  store <16 x float> %1490, <16 x float>* %10, align 64
  br label %4808

1491:                                             ; preds = %411
  store <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float>* %10, align 64
  br label %4808

1492:                                             ; preds = %411
  %1493 = load <16 x float>, <16 x float>* %10, align 64
  %1494 = load <16 x float>, <16 x float>* %7, align 64
  %1495 = fmul <16 x float> %1493, %1494
  store <16 x float> %1495, <16 x float>* %7, align 64
  %1496 = load <16 x float>, <16 x float>* %8, align 64
  %1497 = fmul <16 x float> %1493, %1496
  store <16 x float> %1497, <16 x float>* %8, align 64
  %1498 = load <16 x float>, <16 x float>* %9, align 64
  %1499 = fmul <16 x float> %1493, %1498
  store <16 x float> %1499, <16 x float>* %9, align 64
  br label %4808

1500:                                             ; preds = %411
  %1501 = load <16 x float>, <16 x float>* %10, align 64
  %1502 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1501
  %1503 = fcmp olt <16 x float> %1502, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %1504 = select <16 x i1> %1503, <16 x float> %1502, <16 x float> zeroinitializer
  %1505 = load <16 x float>, <16 x float>* %7, align 64
  %1506 = fmul <16 x float> %1505, %1504
  store <16 x float> %1506, <16 x float>* %7, align 64
  %1507 = load <16 x float>, <16 x float>* %8, align 64
  %1508 = fmul <16 x float> %1507, %1504
  store <16 x float> %1508, <16 x float>* %8, align 64
  %1509 = load <16 x float>, <16 x float>* %9, align 64
  %1510 = fmul <16 x float> %1504, %1509
  store <16 x float> %1510, <16 x float>* %9, align 64
  br label %4808

1511:                                             ; preds = %411
  %1512 = getelementptr inbounds i8*, i8** %412, i64 1
  %1513 = bitcast i8** %412 to %struct.skcms_Matrix3x3**
  %1514 = load %struct.skcms_Matrix3x3*, %struct.skcms_Matrix3x3** %1513, align 8
  %1515 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1514, i64 0, i32 0, i64 0, i64 0
  %1516 = load float, float* %1515, align 4
  %1517 = insertelement <16 x float> undef, float %1516, i32 0
  %1518 = shufflevector <16 x float> %1517, <16 x float> undef, <16 x i32> zeroinitializer
  %1519 = load <16 x float>, <16 x float>* %7, align 64
  %1520 = fmul <16 x float> %1519, %1518
  %1521 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1514, i64 0, i32 0, i64 0, i64 1
  %1522 = load float, float* %1521, align 4
  %1523 = insertelement <16 x float> undef, float %1522, i32 0
  %1524 = shufflevector <16 x float> %1523, <16 x float> undef, <16 x i32> zeroinitializer
  %1525 = load <16 x float>, <16 x float>* %8, align 64
  %1526 = fmul <16 x float> %1525, %1524
  %1527 = fadd <16 x float> %1520, %1526
  %1528 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1514, i64 0, i32 0, i64 0, i64 2
  %1529 = load float, float* %1528, align 4
  %1530 = insertelement <16 x float> undef, float %1529, i32 0
  %1531 = shufflevector <16 x float> %1530, <16 x float> undef, <16 x i32> zeroinitializer
  %1532 = load <16 x float>, <16 x float>* %9, align 64
  %1533 = fmul <16 x float> %1532, %1531
  %1534 = fadd <16 x float> %1527, %1533
  %1535 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1514, i64 0, i32 0, i64 0, i64 3
  %1536 = load float, float* %1535, align 4
  %1537 = insertelement <16 x float> undef, float %1536, i32 0
  %1538 = shufflevector <16 x float> %1537, <16 x float> undef, <16 x i32> zeroinitializer
  %1539 = fmul <16 x float> %1519, %1538
  %1540 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1514, i64 0, i32 0, i64 0, i64 4
  %1541 = load float, float* %1540, align 4
  %1542 = insertelement <16 x float> undef, float %1541, i32 0
  %1543 = shufflevector <16 x float> %1542, <16 x float> undef, <16 x i32> zeroinitializer
  %1544 = fmul <16 x float> %1525, %1543
  %1545 = fadd <16 x float> %1539, %1544
  %1546 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1514, i64 0, i32 0, i64 0, i64 5
  %1547 = load float, float* %1546, align 4
  %1548 = insertelement <16 x float> undef, float %1547, i32 0
  %1549 = shufflevector <16 x float> %1548, <16 x float> undef, <16 x i32> zeroinitializer
  %1550 = fmul <16 x float> %1532, %1549
  %1551 = fadd <16 x float> %1545, %1550
  %1552 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1514, i64 0, i32 0, i64 0, i64 6
  %1553 = load float, float* %1552, align 4
  %1554 = insertelement <16 x float> undef, float %1553, i32 0
  %1555 = shufflevector <16 x float> %1554, <16 x float> undef, <16 x i32> zeroinitializer
  %1556 = fmul <16 x float> %1519, %1555
  %1557 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1514, i64 0, i32 0, i64 0, i64 7
  %1558 = load float, float* %1557, align 4
  %1559 = insertelement <16 x float> undef, float %1558, i32 0
  %1560 = shufflevector <16 x float> %1559, <16 x float> undef, <16 x i32> zeroinitializer
  %1561 = fmul <16 x float> %1525, %1560
  %1562 = fadd <16 x float> %1556, %1561
  %1563 = getelementptr inbounds %struct.skcms_Matrix3x3, %struct.skcms_Matrix3x3* %1514, i64 0, i32 0, i64 0, i64 8
  %1564 = load float, float* %1563, align 4
  %1565 = insertelement <16 x float> undef, float %1564, i32 0
  %1566 = shufflevector <16 x float> %1565, <16 x float> undef, <16 x i32> zeroinitializer
  %1567 = fmul <16 x float> %1532, %1566
  %1568 = fadd <16 x float> %1562, %1567
  store <16 x float> %1534, <16 x float>* %7, align 64
  store <16 x float> %1551, <16 x float>* %8, align 64
  store <16 x float> %1568, <16 x float>* %9, align 64
  br label %4808

1569:                                             ; preds = %411
  %1570 = getelementptr inbounds i8*, i8** %412, i64 1
  %1571 = bitcast i8** %412 to %struct.skcms_Matrix3x4**
  %1572 = load %struct.skcms_Matrix3x4*, %struct.skcms_Matrix3x4** %1571, align 8
  %1573 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %1572, i64 0, i32 0, i64 0, i64 0
  %1574 = load float, float* %1573, align 4
  %1575 = insertelement <16 x float> undef, float %1574, i32 0
  %1576 = shufflevector <16 x float> %1575, <16 x float> undef, <16 x i32> zeroinitializer
  %1577 = load <16 x float>, <16 x float>* %7, align 64
  %1578 = fmul <16 x float> %1577, %1576
  %1579 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %1572, i64 0, i32 0, i64 0, i64 1
  %1580 = load float, float* %1579, align 4
  %1581 = insertelement <16 x float> undef, float %1580, i32 0
  %1582 = shufflevector <16 x float> %1581, <16 x float> undef, <16 x i32> zeroinitializer
  %1583 = load <16 x float>, <16 x float>* %8, align 64
  %1584 = fmul <16 x float> %1583, %1582
  %1585 = fadd <16 x float> %1578, %1584
  %1586 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %1572, i64 0, i32 0, i64 0, i64 2
  %1587 = load float, float* %1586, align 4
  %1588 = insertelement <16 x float> undef, float %1587, i32 0
  %1589 = shufflevector <16 x float> %1588, <16 x float> undef, <16 x i32> zeroinitializer
  %1590 = load <16 x float>, <16 x float>* %9, align 64
  %1591 = fmul <16 x float> %1590, %1589
  %1592 = fadd <16 x float> %1585, %1591
  %1593 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %1572, i64 0, i32 0, i64 0, i64 3
  %1594 = load float, float* %1593, align 4
  %1595 = insertelement <16 x float> undef, float %1594, i32 0
  %1596 = shufflevector <16 x float> %1595, <16 x float> undef, <16 x i32> zeroinitializer
  %1597 = fadd <16 x float> %1592, %1596
  %1598 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %1572, i64 0, i32 0, i64 0, i64 4
  %1599 = load float, float* %1598, align 4
  %1600 = insertelement <16 x float> undef, float %1599, i32 0
  %1601 = shufflevector <16 x float> %1600, <16 x float> undef, <16 x i32> zeroinitializer
  %1602 = fmul <16 x float> %1577, %1601
  %1603 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %1572, i64 0, i32 0, i64 0, i64 5
  %1604 = load float, float* %1603, align 4
  %1605 = insertelement <16 x float> undef, float %1604, i32 0
  %1606 = shufflevector <16 x float> %1605, <16 x float> undef, <16 x i32> zeroinitializer
  %1607 = fmul <16 x float> %1583, %1606
  %1608 = fadd <16 x float> %1602, %1607
  %1609 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %1572, i64 0, i32 0, i64 0, i64 6
  %1610 = load float, float* %1609, align 4
  %1611 = insertelement <16 x float> undef, float %1610, i32 0
  %1612 = shufflevector <16 x float> %1611, <16 x float> undef, <16 x i32> zeroinitializer
  %1613 = fmul <16 x float> %1590, %1612
  %1614 = fadd <16 x float> %1608, %1613
  %1615 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %1572, i64 0, i32 0, i64 0, i64 7
  %1616 = load float, float* %1615, align 4
  %1617 = insertelement <16 x float> undef, float %1616, i32 0
  %1618 = shufflevector <16 x float> %1617, <16 x float> undef, <16 x i32> zeroinitializer
  %1619 = fadd <16 x float> %1618, %1614
  %1620 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %1572, i64 0, i32 0, i64 0, i64 8
  %1621 = load float, float* %1620, align 4
  %1622 = insertelement <16 x float> undef, float %1621, i32 0
  %1623 = shufflevector <16 x float> %1622, <16 x float> undef, <16 x i32> zeroinitializer
  %1624 = fmul <16 x float> %1577, %1623
  %1625 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %1572, i64 0, i32 0, i64 0, i64 9
  %1626 = load float, float* %1625, align 4
  %1627 = insertelement <16 x float> undef, float %1626, i32 0
  %1628 = shufflevector <16 x float> %1627, <16 x float> undef, <16 x i32> zeroinitializer
  %1629 = fmul <16 x float> %1583, %1628
  %1630 = fadd <16 x float> %1624, %1629
  %1631 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %1572, i64 0, i32 0, i64 0, i64 10
  %1632 = load float, float* %1631, align 4
  %1633 = insertelement <16 x float> undef, float %1632, i32 0
  %1634 = shufflevector <16 x float> %1633, <16 x float> undef, <16 x i32> zeroinitializer
  %1635 = fmul <16 x float> %1590, %1634
  %1636 = fadd <16 x float> %1630, %1635
  %1637 = getelementptr inbounds %struct.skcms_Matrix3x4, %struct.skcms_Matrix3x4* %1572, i64 0, i32 0, i64 0, i64 11
  %1638 = load float, float* %1637, align 4
  %1639 = insertelement <16 x float> undef, float %1638, i32 0
  %1640 = shufflevector <16 x float> %1639, <16 x float> undef, <16 x i32> zeroinitializer
  %1641 = fadd <16 x float> %1640, %1636
  store <16 x float> %1597, <16 x float>* %7, align 64
  store <16 x float> %1619, <16 x float>* %8, align 64
  store <16 x float> %1641, <16 x float>* %9, align 64
  br label %4808

1642:                                             ; preds = %411
  %1643 = load <16 x float>, <16 x float>* %7, align 64
  %1644 = fmul <16 x float> %1643, <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>
  %1645 = load <16 x float>, <16 x float>* %8, align 64
  %1646 = fmul <16 x float> %1645, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1647 = fadd <16 x float> %1646, <float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02>
  %1648 = load <16 x float>, <16 x float>* %9, align 64
  %1649 = fmul <16 x float> %1648, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1650 = fadd <16 x float> %1649, <float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02, float -1.280000e+02>
  %1651 = fadd <16 x float> %1644, <float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01>
  %1652 = fmul <16 x float> %1651, <float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000, float 0x3F81A7B960000000>
  %1653 = fmul <16 x float> %1647, <float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000, float 0x3F60624DE0000000>
  %1654 = fadd <16 x float> %1652, %1653
  %1655 = fmul <16 x float> %1650, <float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000, float 0x3F747AE140000000>
  %1656 = fsub <16 x float> %1652, %1655
  %1657 = fmul <16 x float> %1654, %1654
  %1658 = fmul <16 x float> %1654, %1657
  %1659 = fcmp ule <16 x float> %1658, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %1660 = fadd <16 x float> %1654, <float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000>
  %1661 = fmul <16 x float> %1660, <float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000>
  %1662 = select <16 x i1> %1659, <16 x float> %1661, <16 x float> %1658
  %1663 = fmul <16 x float> %1652, %1652
  %1664 = fmul <16 x float> %1652, %1663
  %1665 = fcmp ule <16 x float> %1664, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %1666 = fadd <16 x float> %1652, <float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000>
  %1667 = fmul <16 x float> %1666, <float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000>
  %1668 = select <16 x i1> %1665, <16 x float> %1667, <16 x float> %1664
  %1669 = fmul <16 x float> %1656, %1656
  %1670 = fmul <16 x float> %1656, %1669
  %1671 = fcmp ule <16 x float> %1670, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %1672 = fadd <16 x float> %1656, <float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000, float 0xBFC1A7B960000000>
  %1673 = fmul <16 x float> %1672, <float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000, float 0x3FC0700A00000000>
  %1674 = select <16 x i1> %1671, <16 x float> %1673, <16 x float> %1670
  %1675 = fmul <16 x float> %1662, <float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000, float 0x3FEEDABA00000000>
  store <16 x float> %1675, <16 x float>* %7, align 64
  store <16 x float> %1668, <16 x float>* %8, align 64
  %1676 = fmul <16 x float> %1674, <float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000, float 0x3FEA6594A0000000>
  store <16 x float> %1676, <16 x float>* %9, align 64
  br label %4808

1677:                                             ; preds = %411
  %1678 = load <16 x float>, <16 x float>* %7, align 64
  %1679 = fmul <16 x float> %1678, <float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000, float 0x3FF09814C0000000>
  %1680 = load <16 x float>, <16 x float>* %8, align 64
  %1681 = load <16 x float>, <16 x float>* %9, align 64
  %1682 = fmul <16 x float> %1681, <float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000, float 0x3FF3657360000000>
  %1683 = fcmp ule <16 x float> %1679, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %1684 = fcmp une <16 x float> %1679, zeroinitializer
  %1685 = fcmp une <16 x float> %1679, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1686 = bitcast <16 x float> %1679 to <16 x i32>
  %1687 = sitofp <16 x i32> %1686 to <16 x float>
  %1688 = fmul <16 x float> %1687, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1689 = and <16 x i32> %1686, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1690 = or <16 x i32> %1689, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1691 = bitcast <16 x i32> %1690 to <16 x float>
  %1692 = fadd <16 x float> %1688, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1693 = fmul <16 x float> %1691, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1694 = fsub <16 x float> %1692, %1693
  %1695 = fadd <16 x float> %1691, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1696 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1695
  %1697 = fsub <16 x float> %1694, %1696
  %1698 = fmul <16 x float> %1697, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %1699 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %1698, i32 1, <16 x float> %1698, i16 -1, i32 4) #17
  %1700 = fsub <16 x float> %1698, %1699
  %1701 = fadd <16 x float> %1698, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1702 = fmul <16 x float> %1700, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1703 = fsub <16 x float> %1701, %1702
  %1704 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1700
  %1705 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1704
  %1706 = fadd <16 x float> %1703, %1705
  %1707 = fmul <16 x float> %1706, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1708 = fcmp olt <16 x float> %1707, zeroinitializer
  %1709 = select <16 x i1> %1708, <16 x float> zeroinitializer, <16 x float> %1707
  %1710 = fptosi <16 x float> %1709 to <16 x i32>
  %1711 = and <16 x i1> %1685, %1684
  %1712 = select <16 x i1> %1711, <16 x i32> %1710, <16 x i32> %1686
  %1713 = fmul <16 x float> %1679, <float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000>
  %1714 = fadd <16 x float> %1713, <float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000>
  %1715 = bitcast <16 x i32> %1712 to <16 x float>
  %1716 = select <16 x i1> %1683, <16 x float> %1714, <16 x float> %1715
  %1717 = fcmp ule <16 x float> %1680, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %1718 = fcmp une <16 x float> %1680, zeroinitializer
  %1719 = fcmp une <16 x float> %1680, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1720 = bitcast <16 x float> %1680 to <16 x i32>
  %1721 = sitofp <16 x i32> %1720 to <16 x float>
  %1722 = fmul <16 x float> %1721, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1723 = and <16 x i32> %1720, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1724 = or <16 x i32> %1723, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1725 = bitcast <16 x i32> %1724 to <16 x float>
  %1726 = fadd <16 x float> %1722, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1727 = fmul <16 x float> %1725, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1728 = fsub <16 x float> %1726, %1727
  %1729 = fadd <16 x float> %1725, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1730 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1729
  %1731 = fsub <16 x float> %1728, %1730
  %1732 = fmul <16 x float> %1731, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %1733 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %1732, i32 1, <16 x float> %1732, i16 -1, i32 4) #17
  %1734 = fsub <16 x float> %1732, %1733
  %1735 = fadd <16 x float> %1732, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1736 = fmul <16 x float> %1734, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1737 = fsub <16 x float> %1735, %1736
  %1738 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1734
  %1739 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1738
  %1740 = fadd <16 x float> %1737, %1739
  %1741 = fmul <16 x float> %1740, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1742 = fcmp olt <16 x float> %1741, zeroinitializer
  %1743 = select <16 x i1> %1742, <16 x float> zeroinitializer, <16 x float> %1741
  %1744 = fptosi <16 x float> %1743 to <16 x i32>
  %1745 = and <16 x i1> %1719, %1718
  %1746 = select <16 x i1> %1745, <16 x i32> %1744, <16 x i32> %1720
  %1747 = fmul <16 x float> %1680, <float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000>
  %1748 = fadd <16 x float> %1747, <float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000>
  %1749 = bitcast <16 x i32> %1746 to <16 x float>
  %1750 = select <16 x i1> %1717, <16 x float> %1748, <16 x float> %1749
  %1751 = fcmp ule <16 x float> %1682, <float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000, float 0x3F82231840000000>
  %1752 = fcmp une <16 x float> %1682, zeroinitializer
  %1753 = fcmp une <16 x float> %1682, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1754 = bitcast <16 x float> %1682 to <16 x i32>
  %1755 = sitofp <16 x i32> %1754 to <16 x float>
  %1756 = fmul <16 x float> %1755, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1757 = and <16 x i32> %1754, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1758 = or <16 x i32> %1757, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1759 = bitcast <16 x i32> %1758 to <16 x float>
  %1760 = fadd <16 x float> %1756, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1761 = fmul <16 x float> %1759, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1762 = fsub <16 x float> %1760, %1761
  %1763 = fadd <16 x float> %1759, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1764 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1763
  %1765 = fsub <16 x float> %1762, %1764
  %1766 = fmul <16 x float> %1765, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %1767 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %1766, i32 1, <16 x float> %1766, i16 -1, i32 4) #17
  %1768 = fsub <16 x float> %1766, %1767
  %1769 = fadd <16 x float> %1766, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1770 = fmul <16 x float> %1768, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1771 = fsub <16 x float> %1769, %1770
  %1772 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1768
  %1773 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1772
  %1774 = fadd <16 x float> %1771, %1773
  %1775 = fmul <16 x float> %1774, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1776 = fcmp olt <16 x float> %1775, zeroinitializer
  %1777 = select <16 x i1> %1776, <16 x float> zeroinitializer, <16 x float> %1775
  %1778 = fptosi <16 x float> %1777 to <16 x i32>
  %1779 = and <16 x i1> %1753, %1752
  %1780 = select <16 x i1> %1779, <16 x i32> %1778, <16 x i32> %1754
  %1781 = fmul <16 x float> %1682, <float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000, float 0x401F25E360000000>
  %1782 = fadd <16 x float> %1781, <float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000, float 0x3FC1A7B960000000>
  %1783 = bitcast <16 x i32> %1780 to <16 x float>
  %1784 = select <16 x i1> %1751, <16 x float> %1782, <16 x float> %1783
  %1785 = fmul <16 x float> %1750, <float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02, float 1.160000e+02>
  %1786 = fadd <16 x float> %1785, <float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01, float -1.600000e+01>
  %1787 = fsub <16 x float> %1716, %1750
  %1788 = fmul <16 x float> %1787, <float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02, float 5.000000e+02>
  %1789 = fsub <16 x float> %1750, %1784
  %1790 = fmul <16 x float> %1789, <float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02, float 2.000000e+02>
  %1791 = fmul <16 x float> %1786, <float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000, float 0x3F847AE140000000>
  store <16 x float> %1791, <16 x float>* %7, align 64
  %1792 = fadd <16 x float> %1788, <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>
  %1793 = fmul <16 x float> %1792, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <16 x float> %1793, <16 x float>* %8, align 64
  %1794 = fadd <16 x float> %1790, <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>
  %1795 = fmul <16 x float> %1794, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  store <16 x float> %1795, <16 x float>* %9, align 64
  br label %4808

1796:                                             ; preds = %411
  %1797 = getelementptr inbounds i8*, i8** %412, i64 1
  %1798 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %1799 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1798, align 8
  %1800 = load <16 x i32>, <16 x i32>* %19, align 64
  %1801 = and <16 x i32> %1800, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1802 = and <16 x i32> %1800, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1803 = bitcast <16 x i32> %1802 to <16 x float>
  %1804 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1799, i64 0, i32 4
  %1805 = load float, float* %1804, align 4
  %1806 = insertelement <16 x float> undef, float %1805, i32 0
  %1807 = shufflevector <16 x float> %1806, <16 x float> undef, <16 x i32> zeroinitializer
  %1808 = fcmp ule <16 x float> %1807, %1803
  %1809 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1799, i64 0, i32 3
  %1810 = load float, float* %1809, align 4
  %1811 = insertelement <16 x float> undef, float %1810, i32 0
  %1812 = shufflevector <16 x float> %1811, <16 x float> undef, <16 x i32> zeroinitializer
  %1813 = fmul <16 x float> %1812, %1803
  %1814 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1799, i64 0, i32 6
  %1815 = load float, float* %1814, align 4
  %1816 = insertelement <16 x float> undef, float %1815, i32 0
  %1817 = shufflevector <16 x float> %1816, <16 x float> undef, <16 x i32> zeroinitializer
  %1818 = fadd <16 x float> %1813, %1817
  %1819 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1799, i64 0, i32 1
  %1820 = load float, float* %1819, align 4
  %1821 = insertelement <16 x float> undef, float %1820, i32 0
  %1822 = shufflevector <16 x float> %1821, <16 x float> undef, <16 x i32> zeroinitializer
  %1823 = fmul <16 x float> %1822, %1803
  %1824 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1799, i64 0, i32 2
  %1825 = load float, float* %1824, align 4
  %1826 = insertelement <16 x float> undef, float %1825, i32 0
  %1827 = shufflevector <16 x float> %1826, <16 x float> undef, <16 x i32> zeroinitializer
  %1828 = fadd <16 x float> %1823, %1827
  %1829 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1799, i64 0, i32 0
  %1830 = load float, float* %1829, align 4
  %1831 = fcmp une <16 x float> %1828, zeroinitializer
  %1832 = fcmp une <16 x float> %1828, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1833 = bitcast <16 x float> %1828 to <16 x i32>
  %1834 = sitofp <16 x i32> %1833 to <16 x float>
  %1835 = fmul <16 x float> %1834, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1836 = and <16 x i32> %1833, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1837 = or <16 x i32> %1836, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1838 = bitcast <16 x i32> %1837 to <16 x float>
  %1839 = fadd <16 x float> %1835, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1840 = fmul <16 x float> %1838, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1841 = fsub <16 x float> %1839, %1840
  %1842 = fadd <16 x float> %1838, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1843 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1842
  %1844 = fsub <16 x float> %1841, %1843
  %1845 = insertelement <16 x float> undef, float %1830, i32 0
  %1846 = shufflevector <16 x float> %1845, <16 x float> undef, <16 x i32> zeroinitializer
  %1847 = fmul <16 x float> %1846, %1844
  %1848 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %1847, i32 1, <16 x float> %1847, i16 -1, i32 4) #17
  %1849 = fsub <16 x float> %1847, %1848
  %1850 = fadd <16 x float> %1847, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1851 = fmul <16 x float> %1849, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1852 = fsub <16 x float> %1850, %1851
  %1853 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1849
  %1854 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1853
  %1855 = fadd <16 x float> %1852, %1854
  %1856 = fmul <16 x float> %1855, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1857 = fcmp olt <16 x float> %1856, zeroinitializer
  %1858 = select <16 x i1> %1857, <16 x float> zeroinitializer, <16 x float> %1856
  %1859 = fptosi <16 x float> %1858 to <16 x i32>
  %1860 = and <16 x i1> %1832, %1831
  %1861 = select <16 x i1> %1860, <16 x i32> %1859, <16 x i32> %1833
  %1862 = bitcast <16 x i32> %1861 to <16 x float>
  %1863 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1799, i64 0, i32 5
  %1864 = load float, float* %1863, align 4
  %1865 = insertelement <16 x float> undef, float %1864, i32 0
  %1866 = shufflevector <16 x float> %1865, <16 x float> undef, <16 x i32> zeroinitializer
  %1867 = fadd <16 x float> %1866, %1862
  %1868 = select <16 x i1> %1808, <16 x float> %1867, <16 x float> %1818
  %1869 = bitcast <16 x float> %1868 to <16 x i32>
  %1870 = or <16 x i32> %1801, %1869
  store <16 x i32> %1870, <16 x i32>* %19, align 64
  br label %4808

1871:                                             ; preds = %411
  %1872 = getelementptr inbounds i8*, i8** %412, i64 1
  %1873 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %1874 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1873, align 8
  %1875 = load <16 x i32>, <16 x i32>* %18, align 64
  %1876 = and <16 x i32> %1875, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1877 = and <16 x i32> %1875, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1878 = bitcast <16 x i32> %1877 to <16 x float>
  %1879 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1874, i64 0, i32 4
  %1880 = load float, float* %1879, align 4
  %1881 = insertelement <16 x float> undef, float %1880, i32 0
  %1882 = shufflevector <16 x float> %1881, <16 x float> undef, <16 x i32> zeroinitializer
  %1883 = fcmp ule <16 x float> %1882, %1878
  %1884 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1874, i64 0, i32 3
  %1885 = load float, float* %1884, align 4
  %1886 = insertelement <16 x float> undef, float %1885, i32 0
  %1887 = shufflevector <16 x float> %1886, <16 x float> undef, <16 x i32> zeroinitializer
  %1888 = fmul <16 x float> %1887, %1878
  %1889 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1874, i64 0, i32 6
  %1890 = load float, float* %1889, align 4
  %1891 = insertelement <16 x float> undef, float %1890, i32 0
  %1892 = shufflevector <16 x float> %1891, <16 x float> undef, <16 x i32> zeroinitializer
  %1893 = fadd <16 x float> %1888, %1892
  %1894 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1874, i64 0, i32 1
  %1895 = load float, float* %1894, align 4
  %1896 = insertelement <16 x float> undef, float %1895, i32 0
  %1897 = shufflevector <16 x float> %1896, <16 x float> undef, <16 x i32> zeroinitializer
  %1898 = fmul <16 x float> %1897, %1878
  %1899 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1874, i64 0, i32 2
  %1900 = load float, float* %1899, align 4
  %1901 = insertelement <16 x float> undef, float %1900, i32 0
  %1902 = shufflevector <16 x float> %1901, <16 x float> undef, <16 x i32> zeroinitializer
  %1903 = fadd <16 x float> %1898, %1902
  %1904 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1874, i64 0, i32 0
  %1905 = load float, float* %1904, align 4
  %1906 = fcmp une <16 x float> %1903, zeroinitializer
  %1907 = fcmp une <16 x float> %1903, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1908 = bitcast <16 x float> %1903 to <16 x i32>
  %1909 = sitofp <16 x i32> %1908 to <16 x float>
  %1910 = fmul <16 x float> %1909, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1911 = and <16 x i32> %1908, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1912 = or <16 x i32> %1911, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1913 = bitcast <16 x i32> %1912 to <16 x float>
  %1914 = fadd <16 x float> %1910, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1915 = fmul <16 x float> %1913, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1916 = fsub <16 x float> %1914, %1915
  %1917 = fadd <16 x float> %1913, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1918 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1917
  %1919 = fsub <16 x float> %1916, %1918
  %1920 = insertelement <16 x float> undef, float %1905, i32 0
  %1921 = shufflevector <16 x float> %1920, <16 x float> undef, <16 x i32> zeroinitializer
  %1922 = fmul <16 x float> %1921, %1919
  %1923 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %1922, i32 1, <16 x float> %1922, i16 -1, i32 4) #17
  %1924 = fsub <16 x float> %1922, %1923
  %1925 = fadd <16 x float> %1922, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %1926 = fmul <16 x float> %1924, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %1927 = fsub <16 x float> %1925, %1926
  %1928 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1924
  %1929 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %1928
  %1930 = fadd <16 x float> %1927, %1929
  %1931 = fmul <16 x float> %1930, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %1932 = fcmp olt <16 x float> %1931, zeroinitializer
  %1933 = select <16 x i1> %1932, <16 x float> zeroinitializer, <16 x float> %1931
  %1934 = fptosi <16 x float> %1933 to <16 x i32>
  %1935 = and <16 x i1> %1907, %1906
  %1936 = select <16 x i1> %1935, <16 x i32> %1934, <16 x i32> %1908
  %1937 = bitcast <16 x i32> %1936 to <16 x float>
  %1938 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1874, i64 0, i32 5
  %1939 = load float, float* %1938, align 4
  %1940 = insertelement <16 x float> undef, float %1939, i32 0
  %1941 = shufflevector <16 x float> %1940, <16 x float> undef, <16 x i32> zeroinitializer
  %1942 = fadd <16 x float> %1941, %1937
  %1943 = select <16 x i1> %1883, <16 x float> %1942, <16 x float> %1893
  %1944 = bitcast <16 x float> %1943 to <16 x i32>
  %1945 = or <16 x i32> %1876, %1944
  store <16 x i32> %1945, <16 x i32>* %18, align 64
  br label %4808

1946:                                             ; preds = %411
  %1947 = getelementptr inbounds i8*, i8** %412, i64 1
  %1948 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %1949 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %1948, align 8
  %1950 = load <16 x i32>, <16 x i32>* %17, align 64
  %1951 = and <16 x i32> %1950, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1952 = and <16 x i32> %1950, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %1953 = bitcast <16 x i32> %1952 to <16 x float>
  %1954 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1949, i64 0, i32 4
  %1955 = load float, float* %1954, align 4
  %1956 = insertelement <16 x float> undef, float %1955, i32 0
  %1957 = shufflevector <16 x float> %1956, <16 x float> undef, <16 x i32> zeroinitializer
  %1958 = fcmp ule <16 x float> %1957, %1953
  %1959 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1949, i64 0, i32 3
  %1960 = load float, float* %1959, align 4
  %1961 = insertelement <16 x float> undef, float %1960, i32 0
  %1962 = shufflevector <16 x float> %1961, <16 x float> undef, <16 x i32> zeroinitializer
  %1963 = fmul <16 x float> %1962, %1953
  %1964 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1949, i64 0, i32 6
  %1965 = load float, float* %1964, align 4
  %1966 = insertelement <16 x float> undef, float %1965, i32 0
  %1967 = shufflevector <16 x float> %1966, <16 x float> undef, <16 x i32> zeroinitializer
  %1968 = fadd <16 x float> %1963, %1967
  %1969 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1949, i64 0, i32 1
  %1970 = load float, float* %1969, align 4
  %1971 = insertelement <16 x float> undef, float %1970, i32 0
  %1972 = shufflevector <16 x float> %1971, <16 x float> undef, <16 x i32> zeroinitializer
  %1973 = fmul <16 x float> %1972, %1953
  %1974 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1949, i64 0, i32 2
  %1975 = load float, float* %1974, align 4
  %1976 = insertelement <16 x float> undef, float %1975, i32 0
  %1977 = shufflevector <16 x float> %1976, <16 x float> undef, <16 x i32> zeroinitializer
  %1978 = fadd <16 x float> %1973, %1977
  %1979 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1949, i64 0, i32 0
  %1980 = load float, float* %1979, align 4
  %1981 = fcmp une <16 x float> %1978, zeroinitializer
  %1982 = fcmp une <16 x float> %1978, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1983 = bitcast <16 x float> %1978 to <16 x i32>
  %1984 = sitofp <16 x i32> %1983 to <16 x float>
  %1985 = fmul <16 x float> %1984, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %1986 = and <16 x i32> %1983, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %1987 = or <16 x i32> %1986, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %1988 = bitcast <16 x i32> %1987 to <16 x float>
  %1989 = fadd <16 x float> %1985, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %1990 = fmul <16 x float> %1988, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %1991 = fsub <16 x float> %1989, %1990
  %1992 = fadd <16 x float> %1988, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %1993 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %1992
  %1994 = fsub <16 x float> %1991, %1993
  %1995 = insertelement <16 x float> undef, float %1980, i32 0
  %1996 = shufflevector <16 x float> %1995, <16 x float> undef, <16 x i32> zeroinitializer
  %1997 = fmul <16 x float> %1996, %1994
  %1998 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %1997, i32 1, <16 x float> %1997, i16 -1, i32 4) #17
  %1999 = fsub <16 x float> %1997, %1998
  %2000 = fadd <16 x float> %1997, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2001 = fmul <16 x float> %1999, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2002 = fsub <16 x float> %2000, %2001
  %2003 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %1999
  %2004 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2003
  %2005 = fadd <16 x float> %2002, %2004
  %2006 = fmul <16 x float> %2005, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2007 = fcmp olt <16 x float> %2006, zeroinitializer
  %2008 = select <16 x i1> %2007, <16 x float> zeroinitializer, <16 x float> %2006
  %2009 = fptosi <16 x float> %2008 to <16 x i32>
  %2010 = and <16 x i1> %1982, %1981
  %2011 = select <16 x i1> %2010, <16 x i32> %2009, <16 x i32> %1983
  %2012 = bitcast <16 x i32> %2011 to <16 x float>
  %2013 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %1949, i64 0, i32 5
  %2014 = load float, float* %2013, align 4
  %2015 = insertelement <16 x float> undef, float %2014, i32 0
  %2016 = shufflevector <16 x float> %2015, <16 x float> undef, <16 x i32> zeroinitializer
  %2017 = fadd <16 x float> %2016, %2012
  %2018 = select <16 x i1> %1958, <16 x float> %2017, <16 x float> %1968
  %2019 = bitcast <16 x float> %2018 to <16 x i32>
  %2020 = or <16 x i32> %1951, %2019
  store <16 x i32> %2020, <16 x i32>* %17, align 64
  br label %4808

2021:                                             ; preds = %411
  %2022 = getelementptr inbounds i8*, i8** %412, i64 1
  %2023 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %2024 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2023, align 8
  %2025 = load <16 x i32>, <16 x i32>* %16, align 64
  %2026 = and <16 x i32> %2025, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2027 = and <16 x i32> %2025, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2028 = bitcast <16 x i32> %2027 to <16 x float>
  %2029 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2024, i64 0, i32 4
  %2030 = load float, float* %2029, align 4
  %2031 = insertelement <16 x float> undef, float %2030, i32 0
  %2032 = shufflevector <16 x float> %2031, <16 x float> undef, <16 x i32> zeroinitializer
  %2033 = fcmp ule <16 x float> %2032, %2028
  %2034 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2024, i64 0, i32 3
  %2035 = load float, float* %2034, align 4
  %2036 = insertelement <16 x float> undef, float %2035, i32 0
  %2037 = shufflevector <16 x float> %2036, <16 x float> undef, <16 x i32> zeroinitializer
  %2038 = fmul <16 x float> %2037, %2028
  %2039 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2024, i64 0, i32 6
  %2040 = load float, float* %2039, align 4
  %2041 = insertelement <16 x float> undef, float %2040, i32 0
  %2042 = shufflevector <16 x float> %2041, <16 x float> undef, <16 x i32> zeroinitializer
  %2043 = fadd <16 x float> %2038, %2042
  %2044 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2024, i64 0, i32 1
  %2045 = load float, float* %2044, align 4
  %2046 = insertelement <16 x float> undef, float %2045, i32 0
  %2047 = shufflevector <16 x float> %2046, <16 x float> undef, <16 x i32> zeroinitializer
  %2048 = fmul <16 x float> %2047, %2028
  %2049 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2024, i64 0, i32 2
  %2050 = load float, float* %2049, align 4
  %2051 = insertelement <16 x float> undef, float %2050, i32 0
  %2052 = shufflevector <16 x float> %2051, <16 x float> undef, <16 x i32> zeroinitializer
  %2053 = fadd <16 x float> %2048, %2052
  %2054 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2024, i64 0, i32 0
  %2055 = load float, float* %2054, align 4
  %2056 = fcmp une <16 x float> %2053, zeroinitializer
  %2057 = fcmp une <16 x float> %2053, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2058 = bitcast <16 x float> %2053 to <16 x i32>
  %2059 = sitofp <16 x i32> %2058 to <16 x float>
  %2060 = fmul <16 x float> %2059, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2061 = and <16 x i32> %2058, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2062 = or <16 x i32> %2061, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2063 = bitcast <16 x i32> %2062 to <16 x float>
  %2064 = fadd <16 x float> %2060, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2065 = fmul <16 x float> %2063, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2066 = fsub <16 x float> %2064, %2065
  %2067 = fadd <16 x float> %2063, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2068 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2067
  %2069 = fsub <16 x float> %2066, %2068
  %2070 = insertelement <16 x float> undef, float %2055, i32 0
  %2071 = shufflevector <16 x float> %2070, <16 x float> undef, <16 x i32> zeroinitializer
  %2072 = fmul <16 x float> %2071, %2069
  %2073 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2072, i32 1, <16 x float> %2072, i16 -1, i32 4) #17
  %2074 = fsub <16 x float> %2072, %2073
  %2075 = fadd <16 x float> %2072, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2076 = fmul <16 x float> %2074, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2077 = fsub <16 x float> %2075, %2076
  %2078 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2074
  %2079 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2078
  %2080 = fadd <16 x float> %2077, %2079
  %2081 = fmul <16 x float> %2080, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2082 = fcmp olt <16 x float> %2081, zeroinitializer
  %2083 = select <16 x i1> %2082, <16 x float> zeroinitializer, <16 x float> %2081
  %2084 = fptosi <16 x float> %2083 to <16 x i32>
  %2085 = and <16 x i1> %2057, %2056
  %2086 = select <16 x i1> %2085, <16 x i32> %2084, <16 x i32> %2058
  %2087 = bitcast <16 x i32> %2086 to <16 x float>
  %2088 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2024, i64 0, i32 5
  %2089 = load float, float* %2088, align 4
  %2090 = insertelement <16 x float> undef, float %2089, i32 0
  %2091 = shufflevector <16 x float> %2090, <16 x float> undef, <16 x i32> zeroinitializer
  %2092 = fadd <16 x float> %2091, %2087
  %2093 = select <16 x i1> %2033, <16 x float> %2092, <16 x float> %2043
  %2094 = bitcast <16 x float> %2093 to <16 x i32>
  %2095 = or <16 x i32> %2026, %2094
  store <16 x i32> %2095, <16 x i32>* %16, align 64
  br label %4808

2096:                                             ; preds = %411
  %2097 = getelementptr inbounds i8*, i8** %412, i64 1
  %2098 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %2099 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2098, align 8
  %2100 = load <16 x i32>, <16 x i32>* %19, align 64
  %2101 = and <16 x i32> %2100, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2102 = and <16 x i32> %2100, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2103 = bitcast <16 x i32> %2102 to <16 x float>
  %2104 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2099, i64 0, i32 1
  %2105 = load float, float* %2104, align 4
  %2106 = insertelement <16 x float> undef, float %2105, i32 0
  %2107 = shufflevector <16 x float> %2106, <16 x float> undef, <16 x i32> zeroinitializer
  %2108 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2099, i64 0, i32 2
  %2109 = load float, float* %2108, align 4
  %2110 = insertelement <16 x float> undef, float %2109, i32 0
  %2111 = shufflevector <16 x float> %2110, <16 x float> undef, <16 x i32> zeroinitializer
  %2112 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2099, i64 0, i32 3
  %2113 = load float, float* %2112, align 4
  %2114 = fcmp une <16 x float> %2103, zeroinitializer
  %2115 = fcmp une <16 x float> %2103, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2116 = sitofp <16 x i32> %2102 to <16 x float>
  %2117 = fmul <16 x float> %2116, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2118 = and <16 x i32> %2100, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2119 = or <16 x i32> %2118, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2120 = bitcast <16 x i32> %2119 to <16 x float>
  %2121 = fadd <16 x float> %2117, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2122 = fmul <16 x float> %2120, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2123 = fsub <16 x float> %2121, %2122
  %2124 = fadd <16 x float> %2120, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2125 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2124
  %2126 = fsub <16 x float> %2123, %2125
  %2127 = insertelement <16 x float> undef, float %2113, i32 0
  %2128 = shufflevector <16 x float> %2127, <16 x float> undef, <16 x i32> zeroinitializer
  %2129 = fmul <16 x float> %2128, %2126
  %2130 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2129, i32 1, <16 x float> %2129, i16 -1, i32 4) #17
  %2131 = fsub <16 x float> %2129, %2130
  %2132 = fadd <16 x float> %2129, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2133 = fmul <16 x float> %2131, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2134 = fsub <16 x float> %2132, %2133
  %2135 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2131
  %2136 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2135
  %2137 = fadd <16 x float> %2134, %2136
  %2138 = fmul <16 x float> %2137, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2139 = fcmp olt <16 x float> %2138, zeroinitializer
  %2140 = select <16 x i1> %2139, <16 x float> zeroinitializer, <16 x float> %2138
  %2141 = fptosi <16 x float> %2140 to <16 x i32>
  %2142 = and <16 x i1> %2115, %2114
  %2143 = select <16 x i1> %2142, <16 x i32> %2141, <16 x i32> %2102
  %2144 = bitcast <16 x i32> %2143 to <16 x float>
  %2145 = fmul <16 x float> %2111, %2144
  %2146 = fadd <16 x float> %2107, %2145
  %2147 = fcmp olt <16 x float> %2146, zeroinitializer
  %2148 = select <16 x i1> %2147, <16 x float> zeroinitializer, <16 x float> %2146
  %2149 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2099, i64 0, i32 4
  %2150 = load float, float* %2149, align 4
  %2151 = insertelement <16 x float> undef, float %2150, i32 0
  %2152 = shufflevector <16 x float> %2151, <16 x float> undef, <16 x i32> zeroinitializer
  %2153 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2099, i64 0, i32 5
  %2154 = load float, float* %2153, align 4
  %2155 = insertelement <16 x float> undef, float %2154, i32 0
  %2156 = shufflevector <16 x float> %2155, <16 x float> undef, <16 x i32> zeroinitializer
  %2157 = fmul <16 x float> %2156, %2144
  %2158 = fadd <16 x float> %2152, %2157
  %2159 = fdiv <16 x float> %2148, %2158
  %2160 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2099, i64 0, i32 6
  %2161 = load float, float* %2160, align 4
  %2162 = fcmp une <16 x float> %2159, zeroinitializer
  %2163 = fcmp une <16 x float> %2159, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2164 = bitcast <16 x float> %2159 to <16 x i32>
  %2165 = sitofp <16 x i32> %2164 to <16 x float>
  %2166 = fmul <16 x float> %2165, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2167 = and <16 x i32> %2164, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2168 = or <16 x i32> %2167, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2169 = bitcast <16 x i32> %2168 to <16 x float>
  %2170 = fadd <16 x float> %2166, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2171 = fmul <16 x float> %2169, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2172 = fsub <16 x float> %2170, %2171
  %2173 = fadd <16 x float> %2169, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2174 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2173
  %2175 = fsub <16 x float> %2172, %2174
  %2176 = insertelement <16 x float> undef, float %2161, i32 0
  %2177 = shufflevector <16 x float> %2176, <16 x float> undef, <16 x i32> zeroinitializer
  %2178 = fmul <16 x float> %2177, %2175
  %2179 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2178, i32 1, <16 x float> %2178, i16 -1, i32 4) #17
  %2180 = fsub <16 x float> %2178, %2179
  %2181 = fadd <16 x float> %2178, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2182 = fmul <16 x float> %2180, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2183 = fsub <16 x float> %2181, %2182
  %2184 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2180
  %2185 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2184
  %2186 = fadd <16 x float> %2183, %2185
  %2187 = fmul <16 x float> %2186, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2188 = fcmp olt <16 x float> %2187, zeroinitializer
  %2189 = select <16 x i1> %2188, <16 x float> zeroinitializer, <16 x float> %2187
  %2190 = fptosi <16 x float> %2189 to <16 x i32>
  %2191 = and <16 x i1> %2163, %2162
  %2192 = select <16 x i1> %2191, <16 x i32> %2190, <16 x i32> %2164
  %2193 = or <16 x i32> %2192, %2101
  store <16 x i32> %2193, <16 x i32>* %19, align 64
  br label %4808

2194:                                             ; preds = %411
  %2195 = getelementptr inbounds i8*, i8** %412, i64 1
  %2196 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %2197 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2196, align 8
  %2198 = load <16 x i32>, <16 x i32>* %18, align 64
  %2199 = and <16 x i32> %2198, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2200 = and <16 x i32> %2198, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2201 = bitcast <16 x i32> %2200 to <16 x float>
  %2202 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2197, i64 0, i32 1
  %2203 = load float, float* %2202, align 4
  %2204 = insertelement <16 x float> undef, float %2203, i32 0
  %2205 = shufflevector <16 x float> %2204, <16 x float> undef, <16 x i32> zeroinitializer
  %2206 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2197, i64 0, i32 2
  %2207 = load float, float* %2206, align 4
  %2208 = insertelement <16 x float> undef, float %2207, i32 0
  %2209 = shufflevector <16 x float> %2208, <16 x float> undef, <16 x i32> zeroinitializer
  %2210 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2197, i64 0, i32 3
  %2211 = load float, float* %2210, align 4
  %2212 = fcmp une <16 x float> %2201, zeroinitializer
  %2213 = fcmp une <16 x float> %2201, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2214 = sitofp <16 x i32> %2200 to <16 x float>
  %2215 = fmul <16 x float> %2214, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2216 = and <16 x i32> %2198, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2217 = or <16 x i32> %2216, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2218 = bitcast <16 x i32> %2217 to <16 x float>
  %2219 = fadd <16 x float> %2215, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2220 = fmul <16 x float> %2218, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2221 = fsub <16 x float> %2219, %2220
  %2222 = fadd <16 x float> %2218, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2223 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2222
  %2224 = fsub <16 x float> %2221, %2223
  %2225 = insertelement <16 x float> undef, float %2211, i32 0
  %2226 = shufflevector <16 x float> %2225, <16 x float> undef, <16 x i32> zeroinitializer
  %2227 = fmul <16 x float> %2226, %2224
  %2228 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2227, i32 1, <16 x float> %2227, i16 -1, i32 4) #17
  %2229 = fsub <16 x float> %2227, %2228
  %2230 = fadd <16 x float> %2227, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2231 = fmul <16 x float> %2229, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2232 = fsub <16 x float> %2230, %2231
  %2233 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2229
  %2234 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2233
  %2235 = fadd <16 x float> %2232, %2234
  %2236 = fmul <16 x float> %2235, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2237 = fcmp olt <16 x float> %2236, zeroinitializer
  %2238 = select <16 x i1> %2237, <16 x float> zeroinitializer, <16 x float> %2236
  %2239 = fptosi <16 x float> %2238 to <16 x i32>
  %2240 = and <16 x i1> %2213, %2212
  %2241 = select <16 x i1> %2240, <16 x i32> %2239, <16 x i32> %2200
  %2242 = bitcast <16 x i32> %2241 to <16 x float>
  %2243 = fmul <16 x float> %2209, %2242
  %2244 = fadd <16 x float> %2205, %2243
  %2245 = fcmp olt <16 x float> %2244, zeroinitializer
  %2246 = select <16 x i1> %2245, <16 x float> zeroinitializer, <16 x float> %2244
  %2247 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2197, i64 0, i32 4
  %2248 = load float, float* %2247, align 4
  %2249 = insertelement <16 x float> undef, float %2248, i32 0
  %2250 = shufflevector <16 x float> %2249, <16 x float> undef, <16 x i32> zeroinitializer
  %2251 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2197, i64 0, i32 5
  %2252 = load float, float* %2251, align 4
  %2253 = insertelement <16 x float> undef, float %2252, i32 0
  %2254 = shufflevector <16 x float> %2253, <16 x float> undef, <16 x i32> zeroinitializer
  %2255 = fmul <16 x float> %2254, %2242
  %2256 = fadd <16 x float> %2250, %2255
  %2257 = fdiv <16 x float> %2246, %2256
  %2258 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2197, i64 0, i32 6
  %2259 = load float, float* %2258, align 4
  %2260 = fcmp une <16 x float> %2257, zeroinitializer
  %2261 = fcmp une <16 x float> %2257, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2262 = bitcast <16 x float> %2257 to <16 x i32>
  %2263 = sitofp <16 x i32> %2262 to <16 x float>
  %2264 = fmul <16 x float> %2263, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2265 = and <16 x i32> %2262, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2266 = or <16 x i32> %2265, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2267 = bitcast <16 x i32> %2266 to <16 x float>
  %2268 = fadd <16 x float> %2264, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2269 = fmul <16 x float> %2267, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2270 = fsub <16 x float> %2268, %2269
  %2271 = fadd <16 x float> %2267, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2272 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2271
  %2273 = fsub <16 x float> %2270, %2272
  %2274 = insertelement <16 x float> undef, float %2259, i32 0
  %2275 = shufflevector <16 x float> %2274, <16 x float> undef, <16 x i32> zeroinitializer
  %2276 = fmul <16 x float> %2275, %2273
  %2277 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2276, i32 1, <16 x float> %2276, i16 -1, i32 4) #17
  %2278 = fsub <16 x float> %2276, %2277
  %2279 = fadd <16 x float> %2276, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2280 = fmul <16 x float> %2278, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2281 = fsub <16 x float> %2279, %2280
  %2282 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2278
  %2283 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2282
  %2284 = fadd <16 x float> %2281, %2283
  %2285 = fmul <16 x float> %2284, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2286 = fcmp olt <16 x float> %2285, zeroinitializer
  %2287 = select <16 x i1> %2286, <16 x float> zeroinitializer, <16 x float> %2285
  %2288 = fptosi <16 x float> %2287 to <16 x i32>
  %2289 = and <16 x i1> %2261, %2260
  %2290 = select <16 x i1> %2289, <16 x i32> %2288, <16 x i32> %2262
  %2291 = or <16 x i32> %2290, %2199
  store <16 x i32> %2291, <16 x i32>* %18, align 64
  br label %4808

2292:                                             ; preds = %411
  %2293 = getelementptr inbounds i8*, i8** %412, i64 1
  %2294 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %2295 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2294, align 8
  %2296 = load <16 x i32>, <16 x i32>* %17, align 64
  %2297 = and <16 x i32> %2296, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2298 = and <16 x i32> %2296, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2299 = bitcast <16 x i32> %2298 to <16 x float>
  %2300 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2295, i64 0, i32 1
  %2301 = load float, float* %2300, align 4
  %2302 = insertelement <16 x float> undef, float %2301, i32 0
  %2303 = shufflevector <16 x float> %2302, <16 x float> undef, <16 x i32> zeroinitializer
  %2304 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2295, i64 0, i32 2
  %2305 = load float, float* %2304, align 4
  %2306 = insertelement <16 x float> undef, float %2305, i32 0
  %2307 = shufflevector <16 x float> %2306, <16 x float> undef, <16 x i32> zeroinitializer
  %2308 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2295, i64 0, i32 3
  %2309 = load float, float* %2308, align 4
  %2310 = fcmp une <16 x float> %2299, zeroinitializer
  %2311 = fcmp une <16 x float> %2299, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2312 = sitofp <16 x i32> %2298 to <16 x float>
  %2313 = fmul <16 x float> %2312, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2314 = and <16 x i32> %2296, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2315 = or <16 x i32> %2314, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2316 = bitcast <16 x i32> %2315 to <16 x float>
  %2317 = fadd <16 x float> %2313, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2318 = fmul <16 x float> %2316, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2319 = fsub <16 x float> %2317, %2318
  %2320 = fadd <16 x float> %2316, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2321 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2320
  %2322 = fsub <16 x float> %2319, %2321
  %2323 = insertelement <16 x float> undef, float %2309, i32 0
  %2324 = shufflevector <16 x float> %2323, <16 x float> undef, <16 x i32> zeroinitializer
  %2325 = fmul <16 x float> %2324, %2322
  %2326 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2325, i32 1, <16 x float> %2325, i16 -1, i32 4) #17
  %2327 = fsub <16 x float> %2325, %2326
  %2328 = fadd <16 x float> %2325, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2329 = fmul <16 x float> %2327, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2330 = fsub <16 x float> %2328, %2329
  %2331 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2327
  %2332 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2331
  %2333 = fadd <16 x float> %2330, %2332
  %2334 = fmul <16 x float> %2333, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2335 = fcmp olt <16 x float> %2334, zeroinitializer
  %2336 = select <16 x i1> %2335, <16 x float> zeroinitializer, <16 x float> %2334
  %2337 = fptosi <16 x float> %2336 to <16 x i32>
  %2338 = and <16 x i1> %2311, %2310
  %2339 = select <16 x i1> %2338, <16 x i32> %2337, <16 x i32> %2298
  %2340 = bitcast <16 x i32> %2339 to <16 x float>
  %2341 = fmul <16 x float> %2307, %2340
  %2342 = fadd <16 x float> %2303, %2341
  %2343 = fcmp olt <16 x float> %2342, zeroinitializer
  %2344 = select <16 x i1> %2343, <16 x float> zeroinitializer, <16 x float> %2342
  %2345 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2295, i64 0, i32 4
  %2346 = load float, float* %2345, align 4
  %2347 = insertelement <16 x float> undef, float %2346, i32 0
  %2348 = shufflevector <16 x float> %2347, <16 x float> undef, <16 x i32> zeroinitializer
  %2349 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2295, i64 0, i32 5
  %2350 = load float, float* %2349, align 4
  %2351 = insertelement <16 x float> undef, float %2350, i32 0
  %2352 = shufflevector <16 x float> %2351, <16 x float> undef, <16 x i32> zeroinitializer
  %2353 = fmul <16 x float> %2352, %2340
  %2354 = fadd <16 x float> %2348, %2353
  %2355 = fdiv <16 x float> %2344, %2354
  %2356 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2295, i64 0, i32 6
  %2357 = load float, float* %2356, align 4
  %2358 = fcmp une <16 x float> %2355, zeroinitializer
  %2359 = fcmp une <16 x float> %2355, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2360 = bitcast <16 x float> %2355 to <16 x i32>
  %2361 = sitofp <16 x i32> %2360 to <16 x float>
  %2362 = fmul <16 x float> %2361, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2363 = and <16 x i32> %2360, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2364 = or <16 x i32> %2363, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2365 = bitcast <16 x i32> %2364 to <16 x float>
  %2366 = fadd <16 x float> %2362, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2367 = fmul <16 x float> %2365, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2368 = fsub <16 x float> %2366, %2367
  %2369 = fadd <16 x float> %2365, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2370 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2369
  %2371 = fsub <16 x float> %2368, %2370
  %2372 = insertelement <16 x float> undef, float %2357, i32 0
  %2373 = shufflevector <16 x float> %2372, <16 x float> undef, <16 x i32> zeroinitializer
  %2374 = fmul <16 x float> %2373, %2371
  %2375 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2374, i32 1, <16 x float> %2374, i16 -1, i32 4) #17
  %2376 = fsub <16 x float> %2374, %2375
  %2377 = fadd <16 x float> %2374, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2378 = fmul <16 x float> %2376, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2379 = fsub <16 x float> %2377, %2378
  %2380 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2376
  %2381 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2380
  %2382 = fadd <16 x float> %2379, %2381
  %2383 = fmul <16 x float> %2382, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2384 = fcmp olt <16 x float> %2383, zeroinitializer
  %2385 = select <16 x i1> %2384, <16 x float> zeroinitializer, <16 x float> %2383
  %2386 = fptosi <16 x float> %2385 to <16 x i32>
  %2387 = and <16 x i1> %2359, %2358
  %2388 = select <16 x i1> %2387, <16 x i32> %2386, <16 x i32> %2360
  %2389 = or <16 x i32> %2388, %2297
  store <16 x i32> %2389, <16 x i32>* %17, align 64
  br label %4808

2390:                                             ; preds = %411
  %2391 = getelementptr inbounds i8*, i8** %412, i64 1
  %2392 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %2393 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2392, align 8
  %2394 = load <16 x i32>, <16 x i32>* %16, align 64
  %2395 = and <16 x i32> %2394, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2396 = and <16 x i32> %2394, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2397 = bitcast <16 x i32> %2396 to <16 x float>
  %2398 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2393, i64 0, i32 1
  %2399 = load float, float* %2398, align 4
  %2400 = insertelement <16 x float> undef, float %2399, i32 0
  %2401 = shufflevector <16 x float> %2400, <16 x float> undef, <16 x i32> zeroinitializer
  %2402 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2393, i64 0, i32 2
  %2403 = load float, float* %2402, align 4
  %2404 = insertelement <16 x float> undef, float %2403, i32 0
  %2405 = shufflevector <16 x float> %2404, <16 x float> undef, <16 x i32> zeroinitializer
  %2406 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2393, i64 0, i32 3
  %2407 = load float, float* %2406, align 4
  %2408 = fcmp une <16 x float> %2397, zeroinitializer
  %2409 = fcmp une <16 x float> %2397, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2410 = sitofp <16 x i32> %2396 to <16 x float>
  %2411 = fmul <16 x float> %2410, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2412 = and <16 x i32> %2394, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2413 = or <16 x i32> %2412, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2414 = bitcast <16 x i32> %2413 to <16 x float>
  %2415 = fadd <16 x float> %2411, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2416 = fmul <16 x float> %2414, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2417 = fsub <16 x float> %2415, %2416
  %2418 = fadd <16 x float> %2414, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2419 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2418
  %2420 = fsub <16 x float> %2417, %2419
  %2421 = insertelement <16 x float> undef, float %2407, i32 0
  %2422 = shufflevector <16 x float> %2421, <16 x float> undef, <16 x i32> zeroinitializer
  %2423 = fmul <16 x float> %2422, %2420
  %2424 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2423, i32 1, <16 x float> %2423, i16 -1, i32 4) #17
  %2425 = fsub <16 x float> %2423, %2424
  %2426 = fadd <16 x float> %2423, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2427 = fmul <16 x float> %2425, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2428 = fsub <16 x float> %2426, %2427
  %2429 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2425
  %2430 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2429
  %2431 = fadd <16 x float> %2428, %2430
  %2432 = fmul <16 x float> %2431, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2433 = fcmp olt <16 x float> %2432, zeroinitializer
  %2434 = select <16 x i1> %2433, <16 x float> zeroinitializer, <16 x float> %2432
  %2435 = fptosi <16 x float> %2434 to <16 x i32>
  %2436 = and <16 x i1> %2409, %2408
  %2437 = select <16 x i1> %2436, <16 x i32> %2435, <16 x i32> %2396
  %2438 = bitcast <16 x i32> %2437 to <16 x float>
  %2439 = fmul <16 x float> %2405, %2438
  %2440 = fadd <16 x float> %2401, %2439
  %2441 = fcmp olt <16 x float> %2440, zeroinitializer
  %2442 = select <16 x i1> %2441, <16 x float> zeroinitializer, <16 x float> %2440
  %2443 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2393, i64 0, i32 4
  %2444 = load float, float* %2443, align 4
  %2445 = insertelement <16 x float> undef, float %2444, i32 0
  %2446 = shufflevector <16 x float> %2445, <16 x float> undef, <16 x i32> zeroinitializer
  %2447 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2393, i64 0, i32 5
  %2448 = load float, float* %2447, align 4
  %2449 = insertelement <16 x float> undef, float %2448, i32 0
  %2450 = shufflevector <16 x float> %2449, <16 x float> undef, <16 x i32> zeroinitializer
  %2451 = fmul <16 x float> %2450, %2438
  %2452 = fadd <16 x float> %2446, %2451
  %2453 = fdiv <16 x float> %2442, %2452
  %2454 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2393, i64 0, i32 6
  %2455 = load float, float* %2454, align 4
  %2456 = fcmp une <16 x float> %2453, zeroinitializer
  %2457 = fcmp une <16 x float> %2453, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2458 = bitcast <16 x float> %2453 to <16 x i32>
  %2459 = sitofp <16 x i32> %2458 to <16 x float>
  %2460 = fmul <16 x float> %2459, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2461 = and <16 x i32> %2458, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2462 = or <16 x i32> %2461, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2463 = bitcast <16 x i32> %2462 to <16 x float>
  %2464 = fadd <16 x float> %2460, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2465 = fmul <16 x float> %2463, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2466 = fsub <16 x float> %2464, %2465
  %2467 = fadd <16 x float> %2463, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2468 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2467
  %2469 = fsub <16 x float> %2466, %2468
  %2470 = insertelement <16 x float> undef, float %2455, i32 0
  %2471 = shufflevector <16 x float> %2470, <16 x float> undef, <16 x i32> zeroinitializer
  %2472 = fmul <16 x float> %2471, %2469
  %2473 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2472, i32 1, <16 x float> %2472, i16 -1, i32 4) #17
  %2474 = fsub <16 x float> %2472, %2473
  %2475 = fadd <16 x float> %2472, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2476 = fmul <16 x float> %2474, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2477 = fsub <16 x float> %2475, %2476
  %2478 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2474
  %2479 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2478
  %2480 = fadd <16 x float> %2477, %2479
  %2481 = fmul <16 x float> %2480, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2482 = fcmp olt <16 x float> %2481, zeroinitializer
  %2483 = select <16 x i1> %2482, <16 x float> zeroinitializer, <16 x float> %2481
  %2484 = fptosi <16 x float> %2483 to <16 x i32>
  %2485 = and <16 x i1> %2457, %2456
  %2486 = select <16 x i1> %2485, <16 x i32> %2484, <16 x i32> %2458
  %2487 = or <16 x i32> %2486, %2395
  store <16 x i32> %2487, <16 x i32>* %16, align 64
  br label %4808

2488:                                             ; preds = %411
  %2489 = getelementptr inbounds i8*, i8** %412, i64 1
  %2490 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %2491 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2490, align 8
  %2492 = load <16 x i32>, <16 x i32>* %19, align 64
  %2493 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2491, i64 0, i32 1
  %2494 = load float, float* %2493, align 4
  %2495 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2491, i64 0, i32 2
  %2496 = load float, float* %2495, align 4
  %2497 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2491, i64 0, i32 3
  %2498 = load float, float* %2497, align 4
  %2499 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2491, i64 0, i32 4
  %2500 = load float, float* %2499, align 4
  %2501 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2491, i64 0, i32 5
  %2502 = load float, float* %2501, align 4
  %2503 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2491, i64 0, i32 6
  %2504 = load float, float* %2503, align 4
  %2505 = fadd float %2504, 1.000000e+00
  %2506 = and <16 x i32> %2492, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2507 = and <16 x i32> %2492, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2508 = bitcast <16 x i32> %2507 to <16 x float>
  %2509 = insertelement <16 x float> undef, float %2494, i32 0
  %2510 = shufflevector <16 x float> %2509, <16 x float> undef, <16 x i32> zeroinitializer
  %2511 = fmul <16 x float> %2510, %2508
  %2512 = fcmp ugt <16 x float> %2511, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2513 = fcmp une <16 x float> %2511, zeroinitializer
  %2514 = fcmp une <16 x float> %2511, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2515 = bitcast <16 x float> %2511 to <16 x i32>
  %2516 = sitofp <16 x i32> %2515 to <16 x float>
  %2517 = fmul <16 x float> %2516, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2518 = and <16 x i32> %2515, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2519 = or <16 x i32> %2518, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2520 = bitcast <16 x i32> %2519 to <16 x float>
  %2521 = fadd <16 x float> %2517, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2522 = fmul <16 x float> %2520, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2523 = fsub <16 x float> %2521, %2522
  %2524 = fadd <16 x float> %2520, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2525 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2524
  %2526 = fsub <16 x float> %2523, %2525
  %2527 = insertelement <16 x float> undef, float %2496, i32 0
  %2528 = shufflevector <16 x float> %2527, <16 x float> undef, <16 x i32> zeroinitializer
  %2529 = fmul <16 x float> %2528, %2526
  %2530 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2529, i32 1, <16 x float> %2529, i16 -1, i32 4) #17
  %2531 = fsub <16 x float> %2529, %2530
  %2532 = fadd <16 x float> %2529, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2533 = fmul <16 x float> %2531, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2534 = fsub <16 x float> %2532, %2533
  %2535 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2531
  %2536 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2535
  %2537 = fadd <16 x float> %2534, %2536
  %2538 = fmul <16 x float> %2537, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2539 = fcmp olt <16 x float> %2538, zeroinitializer
  %2540 = select <16 x i1> %2539, <16 x float> zeroinitializer, <16 x float> %2538
  %2541 = fptosi <16 x float> %2540 to <16 x i32>
  %2542 = and <16 x i1> %2514, %2513
  %2543 = select <16 x i1> %2542, <16 x i32> %2541, <16 x i32> %2515
  %2544 = insertelement <16 x float> undef, float %2502, i32 0
  %2545 = shufflevector <16 x float> %2544, <16 x float> undef, <16 x i32> zeroinitializer
  %2546 = fsub <16 x float> %2508, %2545
  %2547 = insertelement <16 x float> undef, float %2498, i32 0
  %2548 = shufflevector <16 x float> %2547, <16 x float> undef, <16 x i32> zeroinitializer
  %2549 = fmul <16 x float> %2548, %2546
  %2550 = fmul <16 x float> %2549, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %2551 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2550, i32 1, <16 x float> %2550, i16 -1, i32 4) #17
  %2552 = fsub <16 x float> %2550, %2551
  %2553 = fadd <16 x float> %2550, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2554 = fmul <16 x float> %2552, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2555 = fsub <16 x float> %2553, %2554
  %2556 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2552
  %2557 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2556
  %2558 = fadd <16 x float> %2555, %2557
  %2559 = fmul <16 x float> %2558, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2560 = fcmp olt <16 x float> %2559, zeroinitializer
  %2561 = select <16 x i1> %2560, <16 x float> zeroinitializer, <16 x float> %2559
  %2562 = fptosi <16 x float> %2561 to <16 x i32>
  %2563 = bitcast <16 x i32> %2562 to <16 x float>
  %2564 = insertelement <16 x float> undef, float %2500, i32 0
  %2565 = shufflevector <16 x float> %2564, <16 x float> undef, <16 x i32> zeroinitializer
  %2566 = fadd <16 x float> %2565, %2563
  %2567 = bitcast <16 x float> %2566 to <16 x i32>
  %2568 = select <16 x i1> %2512, <16 x i32> %2567, <16 x i32> %2543
  %2569 = insertelement <16 x float> undef, float %2505, i32 0
  %2570 = shufflevector <16 x float> %2569, <16 x float> undef, <16 x i32> zeroinitializer
  %2571 = or <16 x i32> %2568, %2506
  %2572 = bitcast <16 x i32> %2571 to <16 x float>
  %2573 = fmul <16 x float> %2570, %2572
  store <16 x float> %2573, <16 x float>* %7, align 64
  br label %4808

2574:                                             ; preds = %411
  %2575 = getelementptr inbounds i8*, i8** %412, i64 1
  %2576 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %2577 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2576, align 8
  %2578 = load <16 x i32>, <16 x i32>* %18, align 64
  %2579 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2577, i64 0, i32 1
  %2580 = load float, float* %2579, align 4
  %2581 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2577, i64 0, i32 2
  %2582 = load float, float* %2581, align 4
  %2583 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2577, i64 0, i32 3
  %2584 = load float, float* %2583, align 4
  %2585 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2577, i64 0, i32 4
  %2586 = load float, float* %2585, align 4
  %2587 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2577, i64 0, i32 5
  %2588 = load float, float* %2587, align 4
  %2589 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2577, i64 0, i32 6
  %2590 = load float, float* %2589, align 4
  %2591 = fadd float %2590, 1.000000e+00
  %2592 = and <16 x i32> %2578, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2593 = and <16 x i32> %2578, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2594 = bitcast <16 x i32> %2593 to <16 x float>
  %2595 = insertelement <16 x float> undef, float %2580, i32 0
  %2596 = shufflevector <16 x float> %2595, <16 x float> undef, <16 x i32> zeroinitializer
  %2597 = fmul <16 x float> %2596, %2594
  %2598 = fcmp ugt <16 x float> %2597, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2599 = fcmp une <16 x float> %2597, zeroinitializer
  %2600 = fcmp une <16 x float> %2597, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2601 = bitcast <16 x float> %2597 to <16 x i32>
  %2602 = sitofp <16 x i32> %2601 to <16 x float>
  %2603 = fmul <16 x float> %2602, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2604 = and <16 x i32> %2601, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2605 = or <16 x i32> %2604, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2606 = bitcast <16 x i32> %2605 to <16 x float>
  %2607 = fadd <16 x float> %2603, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2608 = fmul <16 x float> %2606, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2609 = fsub <16 x float> %2607, %2608
  %2610 = fadd <16 x float> %2606, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2611 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2610
  %2612 = fsub <16 x float> %2609, %2611
  %2613 = insertelement <16 x float> undef, float %2582, i32 0
  %2614 = shufflevector <16 x float> %2613, <16 x float> undef, <16 x i32> zeroinitializer
  %2615 = fmul <16 x float> %2614, %2612
  %2616 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2615, i32 1, <16 x float> %2615, i16 -1, i32 4) #17
  %2617 = fsub <16 x float> %2615, %2616
  %2618 = fadd <16 x float> %2615, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2619 = fmul <16 x float> %2617, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2620 = fsub <16 x float> %2618, %2619
  %2621 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2617
  %2622 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2621
  %2623 = fadd <16 x float> %2620, %2622
  %2624 = fmul <16 x float> %2623, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2625 = fcmp olt <16 x float> %2624, zeroinitializer
  %2626 = select <16 x i1> %2625, <16 x float> zeroinitializer, <16 x float> %2624
  %2627 = fptosi <16 x float> %2626 to <16 x i32>
  %2628 = and <16 x i1> %2600, %2599
  %2629 = select <16 x i1> %2628, <16 x i32> %2627, <16 x i32> %2601
  %2630 = insertelement <16 x float> undef, float %2588, i32 0
  %2631 = shufflevector <16 x float> %2630, <16 x float> undef, <16 x i32> zeroinitializer
  %2632 = fsub <16 x float> %2594, %2631
  %2633 = insertelement <16 x float> undef, float %2584, i32 0
  %2634 = shufflevector <16 x float> %2633, <16 x float> undef, <16 x i32> zeroinitializer
  %2635 = fmul <16 x float> %2634, %2632
  %2636 = fmul <16 x float> %2635, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %2637 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2636, i32 1, <16 x float> %2636, i16 -1, i32 4) #17
  %2638 = fsub <16 x float> %2636, %2637
  %2639 = fadd <16 x float> %2636, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2640 = fmul <16 x float> %2638, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2641 = fsub <16 x float> %2639, %2640
  %2642 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2638
  %2643 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2642
  %2644 = fadd <16 x float> %2641, %2643
  %2645 = fmul <16 x float> %2644, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2646 = fcmp olt <16 x float> %2645, zeroinitializer
  %2647 = select <16 x i1> %2646, <16 x float> zeroinitializer, <16 x float> %2645
  %2648 = fptosi <16 x float> %2647 to <16 x i32>
  %2649 = bitcast <16 x i32> %2648 to <16 x float>
  %2650 = insertelement <16 x float> undef, float %2586, i32 0
  %2651 = shufflevector <16 x float> %2650, <16 x float> undef, <16 x i32> zeroinitializer
  %2652 = fadd <16 x float> %2651, %2649
  %2653 = bitcast <16 x float> %2652 to <16 x i32>
  %2654 = select <16 x i1> %2598, <16 x i32> %2653, <16 x i32> %2629
  %2655 = insertelement <16 x float> undef, float %2591, i32 0
  %2656 = shufflevector <16 x float> %2655, <16 x float> undef, <16 x i32> zeroinitializer
  %2657 = or <16 x i32> %2654, %2592
  %2658 = bitcast <16 x i32> %2657 to <16 x float>
  %2659 = fmul <16 x float> %2656, %2658
  store <16 x float> %2659, <16 x float>* %8, align 64
  br label %4808

2660:                                             ; preds = %411
  %2661 = getelementptr inbounds i8*, i8** %412, i64 1
  %2662 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %2663 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2662, align 8
  %2664 = load <16 x i32>, <16 x i32>* %17, align 64
  %2665 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2663, i64 0, i32 1
  %2666 = load float, float* %2665, align 4
  %2667 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2663, i64 0, i32 2
  %2668 = load float, float* %2667, align 4
  %2669 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2663, i64 0, i32 3
  %2670 = load float, float* %2669, align 4
  %2671 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2663, i64 0, i32 4
  %2672 = load float, float* %2671, align 4
  %2673 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2663, i64 0, i32 5
  %2674 = load float, float* %2673, align 4
  %2675 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2663, i64 0, i32 6
  %2676 = load float, float* %2675, align 4
  %2677 = fadd float %2676, 1.000000e+00
  %2678 = and <16 x i32> %2664, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2679 = and <16 x i32> %2664, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2680 = bitcast <16 x i32> %2679 to <16 x float>
  %2681 = insertelement <16 x float> undef, float %2666, i32 0
  %2682 = shufflevector <16 x float> %2681, <16 x float> undef, <16 x i32> zeroinitializer
  %2683 = fmul <16 x float> %2682, %2680
  %2684 = fcmp ugt <16 x float> %2683, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2685 = fcmp une <16 x float> %2683, zeroinitializer
  %2686 = fcmp une <16 x float> %2683, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2687 = bitcast <16 x float> %2683 to <16 x i32>
  %2688 = sitofp <16 x i32> %2687 to <16 x float>
  %2689 = fmul <16 x float> %2688, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2690 = and <16 x i32> %2687, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2691 = or <16 x i32> %2690, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2692 = bitcast <16 x i32> %2691 to <16 x float>
  %2693 = fadd <16 x float> %2689, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2694 = fmul <16 x float> %2692, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2695 = fsub <16 x float> %2693, %2694
  %2696 = fadd <16 x float> %2692, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2697 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2696
  %2698 = fsub <16 x float> %2695, %2697
  %2699 = insertelement <16 x float> undef, float %2668, i32 0
  %2700 = shufflevector <16 x float> %2699, <16 x float> undef, <16 x i32> zeroinitializer
  %2701 = fmul <16 x float> %2700, %2698
  %2702 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2701, i32 1, <16 x float> %2701, i16 -1, i32 4) #17
  %2703 = fsub <16 x float> %2701, %2702
  %2704 = fadd <16 x float> %2701, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2705 = fmul <16 x float> %2703, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2706 = fsub <16 x float> %2704, %2705
  %2707 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2703
  %2708 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2707
  %2709 = fadd <16 x float> %2706, %2708
  %2710 = fmul <16 x float> %2709, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2711 = fcmp olt <16 x float> %2710, zeroinitializer
  %2712 = select <16 x i1> %2711, <16 x float> zeroinitializer, <16 x float> %2710
  %2713 = fptosi <16 x float> %2712 to <16 x i32>
  %2714 = and <16 x i1> %2686, %2685
  %2715 = select <16 x i1> %2714, <16 x i32> %2713, <16 x i32> %2687
  %2716 = insertelement <16 x float> undef, float %2674, i32 0
  %2717 = shufflevector <16 x float> %2716, <16 x float> undef, <16 x i32> zeroinitializer
  %2718 = fsub <16 x float> %2680, %2717
  %2719 = insertelement <16 x float> undef, float %2670, i32 0
  %2720 = shufflevector <16 x float> %2719, <16 x float> undef, <16 x i32> zeroinitializer
  %2721 = fmul <16 x float> %2720, %2718
  %2722 = fmul <16 x float> %2721, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %2723 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2722, i32 1, <16 x float> %2722, i16 -1, i32 4) #17
  %2724 = fsub <16 x float> %2722, %2723
  %2725 = fadd <16 x float> %2722, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2726 = fmul <16 x float> %2724, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2727 = fsub <16 x float> %2725, %2726
  %2728 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2724
  %2729 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2728
  %2730 = fadd <16 x float> %2727, %2729
  %2731 = fmul <16 x float> %2730, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2732 = fcmp olt <16 x float> %2731, zeroinitializer
  %2733 = select <16 x i1> %2732, <16 x float> zeroinitializer, <16 x float> %2731
  %2734 = fptosi <16 x float> %2733 to <16 x i32>
  %2735 = bitcast <16 x i32> %2734 to <16 x float>
  %2736 = insertelement <16 x float> undef, float %2672, i32 0
  %2737 = shufflevector <16 x float> %2736, <16 x float> undef, <16 x i32> zeroinitializer
  %2738 = fadd <16 x float> %2737, %2735
  %2739 = bitcast <16 x float> %2738 to <16 x i32>
  %2740 = select <16 x i1> %2684, <16 x i32> %2739, <16 x i32> %2715
  %2741 = insertelement <16 x float> undef, float %2677, i32 0
  %2742 = shufflevector <16 x float> %2741, <16 x float> undef, <16 x i32> zeroinitializer
  %2743 = or <16 x i32> %2740, %2678
  %2744 = bitcast <16 x i32> %2743 to <16 x float>
  %2745 = fmul <16 x float> %2742, %2744
  store <16 x float> %2745, <16 x float>* %9, align 64
  br label %4808

2746:                                             ; preds = %411
  %2747 = getelementptr inbounds i8*, i8** %412, i64 1
  %2748 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %2749 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2748, align 8
  %2750 = load <16 x i32>, <16 x i32>* %16, align 64
  %2751 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2749, i64 0, i32 1
  %2752 = load float, float* %2751, align 4
  %2753 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2749, i64 0, i32 2
  %2754 = load float, float* %2753, align 4
  %2755 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2749, i64 0, i32 3
  %2756 = load float, float* %2755, align 4
  %2757 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2749, i64 0, i32 4
  %2758 = load float, float* %2757, align 4
  %2759 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2749, i64 0, i32 5
  %2760 = load float, float* %2759, align 4
  %2761 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2749, i64 0, i32 6
  %2762 = load float, float* %2761, align 4
  %2763 = fadd float %2762, 1.000000e+00
  %2764 = and <16 x i32> %2750, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2765 = and <16 x i32> %2750, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2766 = bitcast <16 x i32> %2765 to <16 x float>
  %2767 = insertelement <16 x float> undef, float %2752, i32 0
  %2768 = shufflevector <16 x float> %2767, <16 x float> undef, <16 x i32> zeroinitializer
  %2769 = fmul <16 x float> %2768, %2766
  %2770 = fcmp ugt <16 x float> %2769, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2771 = fcmp une <16 x float> %2769, zeroinitializer
  %2772 = fcmp une <16 x float> %2769, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2773 = bitcast <16 x float> %2769 to <16 x i32>
  %2774 = sitofp <16 x i32> %2773 to <16 x float>
  %2775 = fmul <16 x float> %2774, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2776 = and <16 x i32> %2773, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2777 = or <16 x i32> %2776, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2778 = bitcast <16 x i32> %2777 to <16 x float>
  %2779 = fadd <16 x float> %2775, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2780 = fmul <16 x float> %2778, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2781 = fsub <16 x float> %2779, %2780
  %2782 = fadd <16 x float> %2778, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2783 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2782
  %2784 = fsub <16 x float> %2781, %2783
  %2785 = insertelement <16 x float> undef, float %2754, i32 0
  %2786 = shufflevector <16 x float> %2785, <16 x float> undef, <16 x i32> zeroinitializer
  %2787 = fmul <16 x float> %2786, %2784
  %2788 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2787, i32 1, <16 x float> %2787, i16 -1, i32 4) #17
  %2789 = fsub <16 x float> %2787, %2788
  %2790 = fadd <16 x float> %2787, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2791 = fmul <16 x float> %2789, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2792 = fsub <16 x float> %2790, %2791
  %2793 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2789
  %2794 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2793
  %2795 = fadd <16 x float> %2792, %2794
  %2796 = fmul <16 x float> %2795, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2797 = fcmp olt <16 x float> %2796, zeroinitializer
  %2798 = select <16 x i1> %2797, <16 x float> zeroinitializer, <16 x float> %2796
  %2799 = fptosi <16 x float> %2798 to <16 x i32>
  %2800 = and <16 x i1> %2772, %2771
  %2801 = select <16 x i1> %2800, <16 x i32> %2799, <16 x i32> %2773
  %2802 = insertelement <16 x float> undef, float %2760, i32 0
  %2803 = shufflevector <16 x float> %2802, <16 x float> undef, <16 x i32> zeroinitializer
  %2804 = fsub <16 x float> %2766, %2803
  %2805 = insertelement <16 x float> undef, float %2756, i32 0
  %2806 = shufflevector <16 x float> %2805, <16 x float> undef, <16 x i32> zeroinitializer
  %2807 = fmul <16 x float> %2806, %2804
  %2808 = fmul <16 x float> %2807, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %2809 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2808, i32 1, <16 x float> %2808, i16 -1, i32 4) #17
  %2810 = fsub <16 x float> %2808, %2809
  %2811 = fadd <16 x float> %2808, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2812 = fmul <16 x float> %2810, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2813 = fsub <16 x float> %2811, %2812
  %2814 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2810
  %2815 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2814
  %2816 = fadd <16 x float> %2813, %2815
  %2817 = fmul <16 x float> %2816, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2818 = fcmp olt <16 x float> %2817, zeroinitializer
  %2819 = select <16 x i1> %2818, <16 x float> zeroinitializer, <16 x float> %2817
  %2820 = fptosi <16 x float> %2819 to <16 x i32>
  %2821 = bitcast <16 x i32> %2820 to <16 x float>
  %2822 = insertelement <16 x float> undef, float %2758, i32 0
  %2823 = shufflevector <16 x float> %2822, <16 x float> undef, <16 x i32> zeroinitializer
  %2824 = fadd <16 x float> %2823, %2821
  %2825 = bitcast <16 x float> %2824 to <16 x i32>
  %2826 = select <16 x i1> %2770, <16 x i32> %2825, <16 x i32> %2801
  %2827 = insertelement <16 x float> undef, float %2763, i32 0
  %2828 = shufflevector <16 x float> %2827, <16 x float> undef, <16 x i32> zeroinitializer
  %2829 = or <16 x i32> %2826, %2764
  %2830 = bitcast <16 x i32> %2829 to <16 x float>
  %2831 = fmul <16 x float> %2828, %2830
  store <16 x float> %2831, <16 x float>* %10, align 64
  br label %4808

2832:                                             ; preds = %411
  %2833 = getelementptr inbounds i8*, i8** %412, i64 1
  %2834 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %2835 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2834, align 8
  %2836 = load <16 x i32>, <16 x i32>* %19, align 64
  %2837 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2835, i64 0, i32 1
  %2838 = load float, float* %2837, align 4
  %2839 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2835, i64 0, i32 2
  %2840 = load float, float* %2839, align 4
  %2841 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2835, i64 0, i32 3
  %2842 = load float, float* %2841, align 4
  %2843 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2835, i64 0, i32 4
  %2844 = load float, float* %2843, align 4
  %2845 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2835, i64 0, i32 5
  %2846 = load float, float* %2845, align 4
  %2847 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2835, i64 0, i32 6
  %2848 = load float, float* %2847, align 4
  %2849 = fadd float %2848, 1.000000e+00
  %2850 = and <16 x i32> %2836, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2851 = and <16 x i32> %2836, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2852 = bitcast <16 x i32> %2851 to <16 x float>
  %2853 = insertelement <16 x float> undef, float %2849, i32 0
  %2854 = shufflevector <16 x float> %2853, <16 x float> undef, <16 x i32> zeroinitializer
  %2855 = fdiv <16 x float> %2852, %2854
  %2856 = bitcast <16 x float> %2855 to <16 x i32>
  %2857 = fcmp ugt <16 x float> %2855, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2858 = insertelement <16 x float> undef, float %2838, i32 0
  %2859 = shufflevector <16 x float> %2858, <16 x float> undef, <16 x i32> zeroinitializer
  %2860 = fcmp une <16 x float> %2855, zeroinitializer
  %2861 = fcmp une <16 x float> %2855, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2862 = sitofp <16 x i32> %2856 to <16 x float>
  %2863 = fmul <16 x float> %2862, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2864 = and <16 x i32> %2856, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2865 = or <16 x i32> %2864, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2866 = bitcast <16 x i32> %2865 to <16 x float>
  %2867 = fadd <16 x float> %2863, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2868 = fmul <16 x float> %2866, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2869 = fsub <16 x float> %2867, %2868
  %2870 = fadd <16 x float> %2866, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2871 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2870
  %2872 = fsub <16 x float> %2869, %2871
  %2873 = insertelement <16 x float> undef, float %2840, i32 0
  %2874 = shufflevector <16 x float> %2873, <16 x float> undef, <16 x i32> zeroinitializer
  %2875 = fmul <16 x float> %2874, %2872
  %2876 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2875, i32 1, <16 x float> %2875, i16 -1, i32 4) #17
  %2877 = fsub <16 x float> %2875, %2876
  %2878 = fadd <16 x float> %2875, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2879 = fmul <16 x float> %2877, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2880 = fsub <16 x float> %2878, %2879
  %2881 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2877
  %2882 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2881
  %2883 = fadd <16 x float> %2880, %2882
  %2884 = fmul <16 x float> %2883, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2885 = fcmp olt <16 x float> %2884, zeroinitializer
  %2886 = select <16 x i1> %2885, <16 x float> zeroinitializer, <16 x float> %2884
  %2887 = fptosi <16 x float> %2886 to <16 x i32>
  %2888 = and <16 x i1> %2861, %2860
  %2889 = select <16 x i1> %2888, <16 x i32> %2887, <16 x i32> %2856
  %2890 = bitcast <16 x i32> %2889 to <16 x float>
  %2891 = fmul <16 x float> %2859, %2890
  %2892 = insertelement <16 x float> undef, float %2842, i32 0
  %2893 = shufflevector <16 x float> %2892, <16 x float> undef, <16 x i32> zeroinitializer
  %2894 = insertelement <16 x float> undef, float %2844, i32 0
  %2895 = shufflevector <16 x float> %2894, <16 x float> undef, <16 x i32> zeroinitializer
  %2896 = fsub <16 x float> %2855, %2895
  %2897 = bitcast <16 x float> %2896 to <16 x i32>
  %2898 = sitofp <16 x i32> %2897 to <16 x float>
  %2899 = fmul <16 x float> %2898, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2900 = and <16 x i32> %2897, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2901 = or <16 x i32> %2900, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2902 = bitcast <16 x i32> %2901 to <16 x float>
  %2903 = fadd <16 x float> %2899, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2904 = fmul <16 x float> %2902, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2905 = fsub <16 x float> %2903, %2904
  %2906 = fadd <16 x float> %2902, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2907 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2906
  %2908 = fsub <16 x float> %2905, %2907
  %2909 = fmul <16 x float> %2908, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %2910 = fmul <16 x float> %2893, %2909
  %2911 = insertelement <16 x float> undef, float %2846, i32 0
  %2912 = shufflevector <16 x float> %2911, <16 x float> undef, <16 x i32> zeroinitializer
  %2913 = fadd <16 x float> %2912, %2910
  %2914 = select <16 x i1> %2857, <16 x float> %2913, <16 x float> %2891
  %2915 = bitcast <16 x float> %2914 to <16 x i32>
  %2916 = or <16 x i32> %2850, %2915
  store <16 x i32> %2916, <16 x i32>* %19, align 64
  br label %4808

2917:                                             ; preds = %411
  %2918 = getelementptr inbounds i8*, i8** %412, i64 1
  %2919 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %2920 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %2919, align 8
  %2921 = load <16 x i32>, <16 x i32>* %18, align 64
  %2922 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2920, i64 0, i32 1
  %2923 = load float, float* %2922, align 4
  %2924 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2920, i64 0, i32 2
  %2925 = load float, float* %2924, align 4
  %2926 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2920, i64 0, i32 3
  %2927 = load float, float* %2926, align 4
  %2928 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2920, i64 0, i32 4
  %2929 = load float, float* %2928, align 4
  %2930 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2920, i64 0, i32 5
  %2931 = load float, float* %2930, align 4
  %2932 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %2920, i64 0, i32 6
  %2933 = load float, float* %2932, align 4
  %2934 = fadd float %2933, 1.000000e+00
  %2935 = and <16 x i32> %2921, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %2936 = and <16 x i32> %2921, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %2937 = bitcast <16 x i32> %2936 to <16 x float>
  %2938 = insertelement <16 x float> undef, float %2934, i32 0
  %2939 = shufflevector <16 x float> %2938, <16 x float> undef, <16 x i32> zeroinitializer
  %2940 = fdiv <16 x float> %2937, %2939
  %2941 = bitcast <16 x float> %2940 to <16 x i32>
  %2942 = fcmp ugt <16 x float> %2940, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2943 = insertelement <16 x float> undef, float %2923, i32 0
  %2944 = shufflevector <16 x float> %2943, <16 x float> undef, <16 x i32> zeroinitializer
  %2945 = fcmp une <16 x float> %2940, zeroinitializer
  %2946 = fcmp une <16 x float> %2940, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2947 = sitofp <16 x i32> %2941 to <16 x float>
  %2948 = fmul <16 x float> %2947, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2949 = and <16 x i32> %2941, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2950 = or <16 x i32> %2949, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2951 = bitcast <16 x i32> %2950 to <16 x float>
  %2952 = fadd <16 x float> %2948, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2953 = fmul <16 x float> %2951, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2954 = fsub <16 x float> %2952, %2953
  %2955 = fadd <16 x float> %2951, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2956 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2955
  %2957 = fsub <16 x float> %2954, %2956
  %2958 = insertelement <16 x float> undef, float %2925, i32 0
  %2959 = shufflevector <16 x float> %2958, <16 x float> undef, <16 x i32> zeroinitializer
  %2960 = fmul <16 x float> %2959, %2957
  %2961 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2960, i32 1, <16 x float> %2960, i16 -1, i32 4) #17
  %2962 = fsub <16 x float> %2960, %2961
  %2963 = fadd <16 x float> %2960, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %2964 = fmul <16 x float> %2962, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %2965 = fsub <16 x float> %2963, %2964
  %2966 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %2962
  %2967 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %2966
  %2968 = fadd <16 x float> %2965, %2967
  %2969 = fmul <16 x float> %2968, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %2970 = fcmp olt <16 x float> %2969, zeroinitializer
  %2971 = select <16 x i1> %2970, <16 x float> zeroinitializer, <16 x float> %2969
  %2972 = fptosi <16 x float> %2971 to <16 x i32>
  %2973 = and <16 x i1> %2946, %2945
  %2974 = select <16 x i1> %2973, <16 x i32> %2972, <16 x i32> %2941
  %2975 = bitcast <16 x i32> %2974 to <16 x float>
  %2976 = fmul <16 x float> %2944, %2975
  %2977 = insertelement <16 x float> undef, float %2927, i32 0
  %2978 = shufflevector <16 x float> %2977, <16 x float> undef, <16 x i32> zeroinitializer
  %2979 = insertelement <16 x float> undef, float %2929, i32 0
  %2980 = shufflevector <16 x float> %2979, <16 x float> undef, <16 x i32> zeroinitializer
  %2981 = fsub <16 x float> %2940, %2980
  %2982 = bitcast <16 x float> %2981 to <16 x i32>
  %2983 = sitofp <16 x i32> %2982 to <16 x float>
  %2984 = fmul <16 x float> %2983, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %2985 = and <16 x i32> %2982, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %2986 = or <16 x i32> %2985, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %2987 = bitcast <16 x i32> %2986 to <16 x float>
  %2988 = fadd <16 x float> %2984, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %2989 = fmul <16 x float> %2987, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %2990 = fsub <16 x float> %2988, %2989
  %2991 = fadd <16 x float> %2987, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %2992 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %2991
  %2993 = fsub <16 x float> %2990, %2992
  %2994 = fmul <16 x float> %2993, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %2995 = fmul <16 x float> %2978, %2994
  %2996 = insertelement <16 x float> undef, float %2931, i32 0
  %2997 = shufflevector <16 x float> %2996, <16 x float> undef, <16 x i32> zeroinitializer
  %2998 = fadd <16 x float> %2997, %2995
  %2999 = select <16 x i1> %2942, <16 x float> %2998, <16 x float> %2976
  %3000 = bitcast <16 x float> %2999 to <16 x i32>
  %3001 = or <16 x i32> %2935, %3000
  store <16 x i32> %3001, <16 x i32>* %18, align 64
  br label %4808

3002:                                             ; preds = %411
  %3003 = getelementptr inbounds i8*, i8** %412, i64 1
  %3004 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %3005 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %3004, align 8
  %3006 = load <16 x i32>, <16 x i32>* %17, align 64
  %3007 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3005, i64 0, i32 1
  %3008 = load float, float* %3007, align 4
  %3009 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3005, i64 0, i32 2
  %3010 = load float, float* %3009, align 4
  %3011 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3005, i64 0, i32 3
  %3012 = load float, float* %3011, align 4
  %3013 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3005, i64 0, i32 4
  %3014 = load float, float* %3013, align 4
  %3015 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3005, i64 0, i32 5
  %3016 = load float, float* %3015, align 4
  %3017 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3005, i64 0, i32 6
  %3018 = load float, float* %3017, align 4
  %3019 = fadd float %3018, 1.000000e+00
  %3020 = and <16 x i32> %3006, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %3021 = and <16 x i32> %3006, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %3022 = bitcast <16 x i32> %3021 to <16 x float>
  %3023 = insertelement <16 x float> undef, float %3019, i32 0
  %3024 = shufflevector <16 x float> %3023, <16 x float> undef, <16 x i32> zeroinitializer
  %3025 = fdiv <16 x float> %3022, %3024
  %3026 = bitcast <16 x float> %3025 to <16 x i32>
  %3027 = fcmp ugt <16 x float> %3025, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3028 = insertelement <16 x float> undef, float %3008, i32 0
  %3029 = shufflevector <16 x float> %3028, <16 x float> undef, <16 x i32> zeroinitializer
  %3030 = fcmp une <16 x float> %3025, zeroinitializer
  %3031 = fcmp une <16 x float> %3025, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3032 = sitofp <16 x i32> %3026 to <16 x float>
  %3033 = fmul <16 x float> %3032, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %3034 = and <16 x i32> %3026, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %3035 = or <16 x i32> %3034, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %3036 = bitcast <16 x i32> %3035 to <16 x float>
  %3037 = fadd <16 x float> %3033, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %3038 = fmul <16 x float> %3036, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %3039 = fsub <16 x float> %3037, %3038
  %3040 = fadd <16 x float> %3036, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %3041 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %3040
  %3042 = fsub <16 x float> %3039, %3041
  %3043 = insertelement <16 x float> undef, float %3010, i32 0
  %3044 = shufflevector <16 x float> %3043, <16 x float> undef, <16 x i32> zeroinitializer
  %3045 = fmul <16 x float> %3044, %3042
  %3046 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %3045, i32 1, <16 x float> %3045, i16 -1, i32 4) #17
  %3047 = fsub <16 x float> %3045, %3046
  %3048 = fadd <16 x float> %3045, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %3049 = fmul <16 x float> %3047, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %3050 = fsub <16 x float> %3048, %3049
  %3051 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %3047
  %3052 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %3051
  %3053 = fadd <16 x float> %3050, %3052
  %3054 = fmul <16 x float> %3053, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %3055 = fcmp olt <16 x float> %3054, zeroinitializer
  %3056 = select <16 x i1> %3055, <16 x float> zeroinitializer, <16 x float> %3054
  %3057 = fptosi <16 x float> %3056 to <16 x i32>
  %3058 = and <16 x i1> %3031, %3030
  %3059 = select <16 x i1> %3058, <16 x i32> %3057, <16 x i32> %3026
  %3060 = bitcast <16 x i32> %3059 to <16 x float>
  %3061 = fmul <16 x float> %3029, %3060
  %3062 = insertelement <16 x float> undef, float %3012, i32 0
  %3063 = shufflevector <16 x float> %3062, <16 x float> undef, <16 x i32> zeroinitializer
  %3064 = insertelement <16 x float> undef, float %3014, i32 0
  %3065 = shufflevector <16 x float> %3064, <16 x float> undef, <16 x i32> zeroinitializer
  %3066 = fsub <16 x float> %3025, %3065
  %3067 = bitcast <16 x float> %3066 to <16 x i32>
  %3068 = sitofp <16 x i32> %3067 to <16 x float>
  %3069 = fmul <16 x float> %3068, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %3070 = and <16 x i32> %3067, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %3071 = or <16 x i32> %3070, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %3072 = bitcast <16 x i32> %3071 to <16 x float>
  %3073 = fadd <16 x float> %3069, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %3074 = fmul <16 x float> %3072, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %3075 = fsub <16 x float> %3073, %3074
  %3076 = fadd <16 x float> %3072, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %3077 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %3076
  %3078 = fsub <16 x float> %3075, %3077
  %3079 = fmul <16 x float> %3078, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %3080 = fmul <16 x float> %3063, %3079
  %3081 = insertelement <16 x float> undef, float %3016, i32 0
  %3082 = shufflevector <16 x float> %3081, <16 x float> undef, <16 x i32> zeroinitializer
  %3083 = fadd <16 x float> %3082, %3080
  %3084 = select <16 x i1> %3027, <16 x float> %3083, <16 x float> %3061
  %3085 = bitcast <16 x float> %3084 to <16 x i32>
  %3086 = or <16 x i32> %3020, %3085
  store <16 x i32> %3086, <16 x i32>* %17, align 64
  br label %4808

3087:                                             ; preds = %411
  %3088 = getelementptr inbounds i8*, i8** %412, i64 1
  %3089 = bitcast i8** %412 to %struct.skcms_TransferFunction**
  %3090 = load %struct.skcms_TransferFunction*, %struct.skcms_TransferFunction** %3089, align 8
  %3091 = load <16 x i32>, <16 x i32>* %16, align 64
  %3092 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3090, i64 0, i32 1
  %3093 = load float, float* %3092, align 4
  %3094 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3090, i64 0, i32 2
  %3095 = load float, float* %3094, align 4
  %3096 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3090, i64 0, i32 3
  %3097 = load float, float* %3096, align 4
  %3098 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3090, i64 0, i32 4
  %3099 = load float, float* %3098, align 4
  %3100 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3090, i64 0, i32 5
  %3101 = load float, float* %3100, align 4
  %3102 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %3090, i64 0, i32 6
  %3103 = load float, float* %3102, align 4
  %3104 = fadd float %3103, 1.000000e+00
  %3105 = and <16 x i32> %3091, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %3106 = and <16 x i32> %3091, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %3107 = bitcast <16 x i32> %3106 to <16 x float>
  %3108 = insertelement <16 x float> undef, float %3104, i32 0
  %3109 = shufflevector <16 x float> %3108, <16 x float> undef, <16 x i32> zeroinitializer
  %3110 = fdiv <16 x float> %3107, %3109
  %3111 = bitcast <16 x float> %3110 to <16 x i32>
  %3112 = fcmp ugt <16 x float> %3110, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3113 = insertelement <16 x float> undef, float %3093, i32 0
  %3114 = shufflevector <16 x float> %3113, <16 x float> undef, <16 x i32> zeroinitializer
  %3115 = fcmp une <16 x float> %3110, zeroinitializer
  %3116 = fcmp une <16 x float> %3110, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3117 = sitofp <16 x i32> %3111 to <16 x float>
  %3118 = fmul <16 x float> %3117, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %3119 = and <16 x i32> %3111, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %3120 = or <16 x i32> %3119, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %3121 = bitcast <16 x i32> %3120 to <16 x float>
  %3122 = fadd <16 x float> %3118, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %3123 = fmul <16 x float> %3121, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %3124 = fsub <16 x float> %3122, %3123
  %3125 = fadd <16 x float> %3121, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %3126 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %3125
  %3127 = fsub <16 x float> %3124, %3126
  %3128 = insertelement <16 x float> undef, float %3095, i32 0
  %3129 = shufflevector <16 x float> %3128, <16 x float> undef, <16 x i32> zeroinitializer
  %3130 = fmul <16 x float> %3129, %3127
  %3131 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %3130, i32 1, <16 x float> %3130, i16 -1, i32 4) #17
  %3132 = fsub <16 x float> %3130, %3131
  %3133 = fadd <16 x float> %3130, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %3134 = fmul <16 x float> %3132, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %3135 = fsub <16 x float> %3133, %3134
  %3136 = fsub <16 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %3132
  %3137 = fdiv <16 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %3136
  %3138 = fadd <16 x float> %3135, %3137
  %3139 = fmul <16 x float> %3138, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %3140 = fcmp olt <16 x float> %3139, zeroinitializer
  %3141 = select <16 x i1> %3140, <16 x float> zeroinitializer, <16 x float> %3139
  %3142 = fptosi <16 x float> %3141 to <16 x i32>
  %3143 = and <16 x i1> %3116, %3115
  %3144 = select <16 x i1> %3143, <16 x i32> %3142, <16 x i32> %3111
  %3145 = bitcast <16 x i32> %3144 to <16 x float>
  %3146 = fmul <16 x float> %3114, %3145
  %3147 = insertelement <16 x float> undef, float %3097, i32 0
  %3148 = shufflevector <16 x float> %3147, <16 x float> undef, <16 x i32> zeroinitializer
  %3149 = insertelement <16 x float> undef, float %3099, i32 0
  %3150 = shufflevector <16 x float> %3149, <16 x float> undef, <16 x i32> zeroinitializer
  %3151 = fsub <16 x float> %3110, %3150
  %3152 = bitcast <16 x float> %3151 to <16 x i32>
  %3153 = sitofp <16 x i32> %3152 to <16 x float>
  %3154 = fmul <16 x float> %3153, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %3155 = and <16 x i32> %3152, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %3156 = or <16 x i32> %3155, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %3157 = bitcast <16 x i32> %3156 to <16 x float>
  %3158 = fadd <16 x float> %3154, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %3159 = fmul <16 x float> %3157, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %3160 = fsub <16 x float> %3158, %3159
  %3161 = fadd <16 x float> %3157, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %3162 = fdiv <16 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %3161
  %3163 = fsub <16 x float> %3160, %3162
  %3164 = fmul <16 x float> %3163, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %3165 = fmul <16 x float> %3148, %3164
  %3166 = insertelement <16 x float> undef, float %3101, i32 0
  %3167 = shufflevector <16 x float> %3166, <16 x float> undef, <16 x i32> zeroinitializer
  %3168 = fadd <16 x float> %3167, %3165
  %3169 = select <16 x i1> %3112, <16 x float> %3168, <16 x float> %3146
  %3170 = bitcast <16 x float> %3169 to <16 x i32>
  %3171 = or <16 x i32> %3105, %3170
  store <16 x i32> %3171, <16 x i32>* %16, align 64
  br label %4808

3172:                                             ; preds = %411
  %3173 = getelementptr inbounds i8*, i8** %412, i64 1
  %3174 = bitcast i8** %412 to %union.skcms_Curve**
  %3175 = load %union.skcms_Curve*, %union.skcms_Curve** %3174, align 8
  %3176 = load <16 x float>, <16 x float>* %7, align 64
  %3177 = fcmp ogt <16 x float> %3176, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3178 = select <16 x i1> %3177, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %3176
  %3179 = fcmp ogt <16 x float> %3178, zeroinitializer
  %3180 = select <16 x i1> %3179, <16 x float> %3178, <16 x float> zeroinitializer
  %3181 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %3175, i64 0, i32 0, i32 0
  %3182 = load i32, i32* %3181, align 8
  %3183 = add i32 %3182, -1
  %3184 = uitofp i32 %3183 to float
  %3185 = insertelement <16 x float> undef, float %3184, i32 0
  %3186 = shufflevector <16 x float> %3185, <16 x float> undef, <16 x i32> zeroinitializer
  %3187 = fmul <16 x float> %3180, %3186
  %3188 = fptosi <16 x float> %3187 to <16 x i32>
  %3189 = fadd <16 x float> %3187, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3190 = bitcast <16 x float> %3189 to <16 x i32>
  %3191 = add <16 x i32> %3190, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %3192 = bitcast <16 x i32> %3191 to <16 x float>
  %3193 = fptosi <16 x float> %3192 to <16 x i32>
  %3194 = sitofp <16 x i32> %3188 to <16 x float>
  %3195 = fsub <16 x float> %3187, %3194
  %3196 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %3175, i64 0, i32 0, i32 1
  %3197 = load i8*, i8** %3196, align 8
  %3198 = icmp eq i8* %3197, null
  br i1 %3198, label %3364, label %3199

3199:                                             ; preds = %3172
  %3200 = extractelement <16 x i32> %3188, i32 0
  %3201 = sext i32 %3200 to i64
  %3202 = getelementptr inbounds i8, i8* %3197, i64 %3201
  %3203 = load i8, i8* %3202, align 1
  %3204 = insertelement <16 x i8> undef, i8 %3203, i32 0
  %3205 = extractelement <16 x i32> %3188, i32 1
  %3206 = sext i32 %3205 to i64
  %3207 = getelementptr inbounds i8, i8* %3197, i64 %3206
  %3208 = load i8, i8* %3207, align 1
  %3209 = insertelement <16 x i8> %3204, i8 %3208, i32 1
  %3210 = extractelement <16 x i32> %3188, i32 2
  %3211 = sext i32 %3210 to i64
  %3212 = getelementptr inbounds i8, i8* %3197, i64 %3211
  %3213 = load i8, i8* %3212, align 1
  %3214 = insertelement <16 x i8> %3209, i8 %3213, i32 2
  %3215 = extractelement <16 x i32> %3188, i32 3
  %3216 = sext i32 %3215 to i64
  %3217 = getelementptr inbounds i8, i8* %3197, i64 %3216
  %3218 = load i8, i8* %3217, align 1
  %3219 = insertelement <16 x i8> %3214, i8 %3218, i32 3
  %3220 = extractelement <16 x i32> %3188, i32 4
  %3221 = sext i32 %3220 to i64
  %3222 = getelementptr inbounds i8, i8* %3197, i64 %3221
  %3223 = load i8, i8* %3222, align 1
  %3224 = insertelement <16 x i8> %3219, i8 %3223, i32 4
  %3225 = extractelement <16 x i32> %3188, i32 5
  %3226 = sext i32 %3225 to i64
  %3227 = getelementptr inbounds i8, i8* %3197, i64 %3226
  %3228 = load i8, i8* %3227, align 1
  %3229 = insertelement <16 x i8> %3224, i8 %3228, i32 5
  %3230 = extractelement <16 x i32> %3188, i32 6
  %3231 = sext i32 %3230 to i64
  %3232 = getelementptr inbounds i8, i8* %3197, i64 %3231
  %3233 = load i8, i8* %3232, align 1
  %3234 = insertelement <16 x i8> %3229, i8 %3233, i32 6
  %3235 = extractelement <16 x i32> %3188, i32 7
  %3236 = sext i32 %3235 to i64
  %3237 = getelementptr inbounds i8, i8* %3197, i64 %3236
  %3238 = load i8, i8* %3237, align 1
  %3239 = insertelement <16 x i8> %3234, i8 %3238, i32 7
  %3240 = extractelement <16 x i32> %3188, i32 8
  %3241 = sext i32 %3240 to i64
  %3242 = getelementptr inbounds i8, i8* %3197, i64 %3241
  %3243 = load i8, i8* %3242, align 1
  %3244 = insertelement <16 x i8> %3239, i8 %3243, i32 8
  %3245 = extractelement <16 x i32> %3188, i32 9
  %3246 = sext i32 %3245 to i64
  %3247 = getelementptr inbounds i8, i8* %3197, i64 %3246
  %3248 = load i8, i8* %3247, align 1
  %3249 = insertelement <16 x i8> %3244, i8 %3248, i32 9
  %3250 = extractelement <16 x i32> %3188, i32 10
  %3251 = sext i32 %3250 to i64
  %3252 = getelementptr inbounds i8, i8* %3197, i64 %3251
  %3253 = load i8, i8* %3252, align 1
  %3254 = insertelement <16 x i8> %3249, i8 %3253, i32 10
  %3255 = extractelement <16 x i32> %3188, i32 11
  %3256 = sext i32 %3255 to i64
  %3257 = getelementptr inbounds i8, i8* %3197, i64 %3256
  %3258 = load i8, i8* %3257, align 1
  %3259 = insertelement <16 x i8> %3254, i8 %3258, i32 11
  %3260 = extractelement <16 x i32> %3188, i32 12
  %3261 = sext i32 %3260 to i64
  %3262 = getelementptr inbounds i8, i8* %3197, i64 %3261
  %3263 = load i8, i8* %3262, align 1
  %3264 = insertelement <16 x i8> %3259, i8 %3263, i32 12
  %3265 = extractelement <16 x i32> %3188, i32 13
  %3266 = sext i32 %3265 to i64
  %3267 = getelementptr inbounds i8, i8* %3197, i64 %3266
  %3268 = load i8, i8* %3267, align 1
  %3269 = insertelement <16 x i8> %3264, i8 %3268, i32 13
  %3270 = extractelement <16 x i32> %3188, i32 14
  %3271 = sext i32 %3270 to i64
  %3272 = getelementptr inbounds i8, i8* %3197, i64 %3271
  %3273 = load i8, i8* %3272, align 1
  %3274 = insertelement <16 x i8> %3269, i8 %3273, i32 14
  %3275 = extractelement <16 x i32> %3188, i32 15
  %3276 = sext i32 %3275 to i64
  %3277 = getelementptr inbounds i8, i8* %3197, i64 %3276
  %3278 = load i8, i8* %3277, align 1
  %3279 = insertelement <16 x i8> %3274, i8 %3278, i32 15
  %3280 = uitofp <16 x i8> %3279 to <16 x float>
  %3281 = fmul <16 x float> %3280, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %3282 = extractelement <16 x i32> %3193, i32 0
  %3283 = sext i32 %3282 to i64
  %3284 = getelementptr inbounds i8, i8* %3197, i64 %3283
  %3285 = load i8, i8* %3284, align 1
  %3286 = insertelement <16 x i8> undef, i8 %3285, i32 0
  %3287 = extractelement <16 x i32> %3193, i32 1
  %3288 = sext i32 %3287 to i64
  %3289 = getelementptr inbounds i8, i8* %3197, i64 %3288
  %3290 = load i8, i8* %3289, align 1
  %3291 = insertelement <16 x i8> %3286, i8 %3290, i32 1
  %3292 = extractelement <16 x i32> %3193, i32 2
  %3293 = sext i32 %3292 to i64
  %3294 = getelementptr inbounds i8, i8* %3197, i64 %3293
  %3295 = load i8, i8* %3294, align 1
  %3296 = insertelement <16 x i8> %3291, i8 %3295, i32 2
  %3297 = extractelement <16 x i32> %3193, i32 3
  %3298 = sext i32 %3297 to i64
  %3299 = getelementptr inbounds i8, i8* %3197, i64 %3298
  %3300 = load i8, i8* %3299, align 1
  %3301 = insertelement <16 x i8> %3296, i8 %3300, i32 3
  %3302 = extractelement <16 x i32> %3193, i32 4
  %3303 = sext i32 %3302 to i64
  %3304 = getelementptr inbounds i8, i8* %3197, i64 %3303
  %3305 = load i8, i8* %3304, align 1
  %3306 = insertelement <16 x i8> %3301, i8 %3305, i32 4
  %3307 = extractelement <16 x i32> %3193, i32 5
  %3308 = sext i32 %3307 to i64
  %3309 = getelementptr inbounds i8, i8* %3197, i64 %3308
  %3310 = load i8, i8* %3309, align 1
  %3311 = insertelement <16 x i8> %3306, i8 %3310, i32 5
  %3312 = extractelement <16 x i32> %3193, i32 6
  %3313 = sext i32 %3312 to i64
  %3314 = getelementptr inbounds i8, i8* %3197, i64 %3313
  %3315 = load i8, i8* %3314, align 1
  %3316 = insertelement <16 x i8> %3311, i8 %3315, i32 6
  %3317 = extractelement <16 x i32> %3193, i32 7
  %3318 = sext i32 %3317 to i64
  %3319 = getelementptr inbounds i8, i8* %3197, i64 %3318
  %3320 = load i8, i8* %3319, align 1
  %3321 = insertelement <16 x i8> %3316, i8 %3320, i32 7
  %3322 = extractelement <16 x i32> %3193, i32 8
  %3323 = sext i32 %3322 to i64
  %3324 = getelementptr inbounds i8, i8* %3197, i64 %3323
  %3325 = load i8, i8* %3324, align 1
  %3326 = insertelement <16 x i8> %3321, i8 %3325, i32 8
  %3327 = extractelement <16 x i32> %3193, i32 9
  %3328 = sext i32 %3327 to i64
  %3329 = getelementptr inbounds i8, i8* %3197, i64 %3328
  %3330 = load i8, i8* %3329, align 1
  %3331 = insertelement <16 x i8> %3326, i8 %3330, i32 9
  %3332 = extractelement <16 x i32> %3193, i32 10
  %3333 = sext i32 %3332 to i64
  %3334 = getelementptr inbounds i8, i8* %3197, i64 %3333
  %3335 = load i8, i8* %3334, align 1
  %3336 = insertelement <16 x i8> %3331, i8 %3335, i32 10
  %3337 = extractelement <16 x i32> %3193, i32 11
  %3338 = sext i32 %3337 to i64
  %3339 = getelementptr inbounds i8, i8* %3197, i64 %3338
  %3340 = load i8, i8* %3339, align 1
  %3341 = insertelement <16 x i8> %3336, i8 %3340, i32 11
  %3342 = extractelement <16 x i32> %3193, i32 12
  %3343 = sext i32 %3342 to i64
  %3344 = getelementptr inbounds i8, i8* %3197, i64 %3343
  %3345 = load i8, i8* %3344, align 1
  %3346 = insertelement <16 x i8> %3341, i8 %3345, i32 12
  %3347 = extractelement <16 x i32> %3193, i32 13
  %3348 = sext i32 %3347 to i64
  %3349 = getelementptr inbounds i8, i8* %3197, i64 %3348
  %3350 = load i8, i8* %3349, align 1
  %3351 = insertelement <16 x i8> %3346, i8 %3350, i32 13
  %3352 = extractelement <16 x i32> %3193, i32 14
  %3353 = sext i32 %3352 to i64
  %3354 = getelementptr inbounds i8, i8* %3197, i64 %3353
  %3355 = load i8, i8* %3354, align 1
  %3356 = insertelement <16 x i8> %3351, i8 %3355, i32 14
  %3357 = extractelement <16 x i32> %3193, i32 15
  %3358 = sext i32 %3357 to i64
  %3359 = getelementptr inbounds i8, i8* %3197, i64 %3358
  %3360 = load i8, i8* %3359, align 1
  %3361 = insertelement <16 x i8> %3356, i8 %3360, i32 15
  %3362 = uitofp <16 x i8> %3361 to <16 x float>
  %3363 = fmul <16 x float> %3362, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %3571

3364:                                             ; preds = %3172
  %3365 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %3175, i64 0, i32 0, i32 2
  %3366 = load i8*, i8** %3365, align 8
  %3367 = shl nsw <16 x i32> %3188, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3368 = extractelement <16 x i32> %3367, i32 0
  %3369 = sext i32 %3368 to i64
  %3370 = getelementptr inbounds i8, i8* %3366, i64 %3369
  %3371 = bitcast i8* %3370 to i16*
  %3372 = load i16, i16* %3371, align 1
  %3373 = insertelement <16 x i16> undef, i16 %3372, i32 0
  %3374 = extractelement <16 x i32> %3367, i32 1
  %3375 = sext i32 %3374 to i64
  %3376 = getelementptr inbounds i8, i8* %3366, i64 %3375
  %3377 = bitcast i8* %3376 to i16*
  %3378 = load i16, i16* %3377, align 1
  %3379 = insertelement <16 x i16> %3373, i16 %3378, i32 1
  %3380 = extractelement <16 x i32> %3367, i32 2
  %3381 = sext i32 %3380 to i64
  %3382 = getelementptr inbounds i8, i8* %3366, i64 %3381
  %3383 = bitcast i8* %3382 to i16*
  %3384 = load i16, i16* %3383, align 1
  %3385 = insertelement <16 x i16> %3379, i16 %3384, i32 2
  %3386 = extractelement <16 x i32> %3367, i32 3
  %3387 = sext i32 %3386 to i64
  %3388 = getelementptr inbounds i8, i8* %3366, i64 %3387
  %3389 = bitcast i8* %3388 to i16*
  %3390 = load i16, i16* %3389, align 1
  %3391 = insertelement <16 x i16> %3385, i16 %3390, i32 3
  %3392 = extractelement <16 x i32> %3367, i32 4
  %3393 = sext i32 %3392 to i64
  %3394 = getelementptr inbounds i8, i8* %3366, i64 %3393
  %3395 = bitcast i8* %3394 to i16*
  %3396 = load i16, i16* %3395, align 1
  %3397 = insertelement <16 x i16> %3391, i16 %3396, i32 4
  %3398 = extractelement <16 x i32> %3367, i32 5
  %3399 = sext i32 %3398 to i64
  %3400 = getelementptr inbounds i8, i8* %3366, i64 %3399
  %3401 = bitcast i8* %3400 to i16*
  %3402 = load i16, i16* %3401, align 1
  %3403 = insertelement <16 x i16> %3397, i16 %3402, i32 5
  %3404 = extractelement <16 x i32> %3367, i32 6
  %3405 = sext i32 %3404 to i64
  %3406 = getelementptr inbounds i8, i8* %3366, i64 %3405
  %3407 = bitcast i8* %3406 to i16*
  %3408 = load i16, i16* %3407, align 1
  %3409 = insertelement <16 x i16> %3403, i16 %3408, i32 6
  %3410 = extractelement <16 x i32> %3367, i32 7
  %3411 = sext i32 %3410 to i64
  %3412 = getelementptr inbounds i8, i8* %3366, i64 %3411
  %3413 = bitcast i8* %3412 to i16*
  %3414 = load i16, i16* %3413, align 1
  %3415 = insertelement <16 x i16> %3409, i16 %3414, i32 7
  %3416 = extractelement <16 x i32> %3367, i32 8
  %3417 = sext i32 %3416 to i64
  %3418 = getelementptr inbounds i8, i8* %3366, i64 %3417
  %3419 = bitcast i8* %3418 to i16*
  %3420 = load i16, i16* %3419, align 1
  %3421 = insertelement <16 x i16> %3415, i16 %3420, i32 8
  %3422 = extractelement <16 x i32> %3367, i32 9
  %3423 = sext i32 %3422 to i64
  %3424 = getelementptr inbounds i8, i8* %3366, i64 %3423
  %3425 = bitcast i8* %3424 to i16*
  %3426 = load i16, i16* %3425, align 1
  %3427 = insertelement <16 x i16> %3421, i16 %3426, i32 9
  %3428 = extractelement <16 x i32> %3367, i32 10
  %3429 = sext i32 %3428 to i64
  %3430 = getelementptr inbounds i8, i8* %3366, i64 %3429
  %3431 = bitcast i8* %3430 to i16*
  %3432 = load i16, i16* %3431, align 1
  %3433 = insertelement <16 x i16> %3427, i16 %3432, i32 10
  %3434 = extractelement <16 x i32> %3367, i32 11
  %3435 = sext i32 %3434 to i64
  %3436 = getelementptr inbounds i8, i8* %3366, i64 %3435
  %3437 = bitcast i8* %3436 to i16*
  %3438 = load i16, i16* %3437, align 1
  %3439 = insertelement <16 x i16> %3433, i16 %3438, i32 11
  %3440 = extractelement <16 x i32> %3367, i32 12
  %3441 = sext i32 %3440 to i64
  %3442 = getelementptr inbounds i8, i8* %3366, i64 %3441
  %3443 = bitcast i8* %3442 to i16*
  %3444 = load i16, i16* %3443, align 1
  %3445 = insertelement <16 x i16> %3439, i16 %3444, i32 12
  %3446 = extractelement <16 x i32> %3367, i32 13
  %3447 = sext i32 %3446 to i64
  %3448 = getelementptr inbounds i8, i8* %3366, i64 %3447
  %3449 = bitcast i8* %3448 to i16*
  %3450 = load i16, i16* %3449, align 1
  %3451 = insertelement <16 x i16> %3445, i16 %3450, i32 13
  %3452 = extractelement <16 x i32> %3367, i32 14
  %3453 = sext i32 %3452 to i64
  %3454 = getelementptr inbounds i8, i8* %3366, i64 %3453
  %3455 = bitcast i8* %3454 to i16*
  %3456 = load i16, i16* %3455, align 1
  %3457 = insertelement <16 x i16> %3451, i16 %3456, i32 14
  %3458 = extractelement <16 x i32> %3367, i32 15
  %3459 = sext i32 %3458 to i64
  %3460 = getelementptr inbounds i8, i8* %3366, i64 %3459
  %3461 = bitcast i8* %3460 to i16*
  %3462 = load i16, i16* %3461, align 1
  %3463 = insertelement <16 x i16> %3457, i16 %3462, i32 15
  %3464 = lshr <16 x i16> %3463, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3465 = shl <16 x i16> %3463, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3466 = or <16 x i16> %3464, %3465
  %3467 = uitofp <16 x i16> %3466 to <16 x float>
  %3468 = fmul <16 x float> %3467, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %3469 = shl nsw <16 x i32> %3193, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3470 = extractelement <16 x i32> %3469, i32 0
  %3471 = sext i32 %3470 to i64
  %3472 = getelementptr inbounds i8, i8* %3366, i64 %3471
  %3473 = bitcast i8* %3472 to i16*
  %3474 = load i16, i16* %3473, align 1
  %3475 = insertelement <16 x i16> undef, i16 %3474, i32 0
  %3476 = extractelement <16 x i32> %3469, i32 1
  %3477 = sext i32 %3476 to i64
  %3478 = getelementptr inbounds i8, i8* %3366, i64 %3477
  %3479 = bitcast i8* %3478 to i16*
  %3480 = load i16, i16* %3479, align 1
  %3481 = insertelement <16 x i16> %3475, i16 %3480, i32 1
  %3482 = extractelement <16 x i32> %3469, i32 2
  %3483 = sext i32 %3482 to i64
  %3484 = getelementptr inbounds i8, i8* %3366, i64 %3483
  %3485 = bitcast i8* %3484 to i16*
  %3486 = load i16, i16* %3485, align 1
  %3487 = insertelement <16 x i16> %3481, i16 %3486, i32 2
  %3488 = extractelement <16 x i32> %3469, i32 3
  %3489 = sext i32 %3488 to i64
  %3490 = getelementptr inbounds i8, i8* %3366, i64 %3489
  %3491 = bitcast i8* %3490 to i16*
  %3492 = load i16, i16* %3491, align 1
  %3493 = insertelement <16 x i16> %3487, i16 %3492, i32 3
  %3494 = extractelement <16 x i32> %3469, i32 4
  %3495 = sext i32 %3494 to i64
  %3496 = getelementptr inbounds i8, i8* %3366, i64 %3495
  %3497 = bitcast i8* %3496 to i16*
  %3498 = load i16, i16* %3497, align 1
  %3499 = insertelement <16 x i16> %3493, i16 %3498, i32 4
  %3500 = extractelement <16 x i32> %3469, i32 5
  %3501 = sext i32 %3500 to i64
  %3502 = getelementptr inbounds i8, i8* %3366, i64 %3501
  %3503 = bitcast i8* %3502 to i16*
  %3504 = load i16, i16* %3503, align 1
  %3505 = insertelement <16 x i16> %3499, i16 %3504, i32 5
  %3506 = extractelement <16 x i32> %3469, i32 6
  %3507 = sext i32 %3506 to i64
  %3508 = getelementptr inbounds i8, i8* %3366, i64 %3507
  %3509 = bitcast i8* %3508 to i16*
  %3510 = load i16, i16* %3509, align 1
  %3511 = insertelement <16 x i16> %3505, i16 %3510, i32 6
  %3512 = extractelement <16 x i32> %3469, i32 7
  %3513 = sext i32 %3512 to i64
  %3514 = getelementptr inbounds i8, i8* %3366, i64 %3513
  %3515 = bitcast i8* %3514 to i16*
  %3516 = load i16, i16* %3515, align 1
  %3517 = insertelement <16 x i16> %3511, i16 %3516, i32 7
  %3518 = extractelement <16 x i32> %3469, i32 8
  %3519 = sext i32 %3518 to i64
  %3520 = getelementptr inbounds i8, i8* %3366, i64 %3519
  %3521 = bitcast i8* %3520 to i16*
  %3522 = load i16, i16* %3521, align 1
  %3523 = insertelement <16 x i16> %3517, i16 %3522, i32 8
  %3524 = extractelement <16 x i32> %3469, i32 9
  %3525 = sext i32 %3524 to i64
  %3526 = getelementptr inbounds i8, i8* %3366, i64 %3525
  %3527 = bitcast i8* %3526 to i16*
  %3528 = load i16, i16* %3527, align 1
  %3529 = insertelement <16 x i16> %3523, i16 %3528, i32 9
  %3530 = extractelement <16 x i32> %3469, i32 10
  %3531 = sext i32 %3530 to i64
  %3532 = getelementptr inbounds i8, i8* %3366, i64 %3531
  %3533 = bitcast i8* %3532 to i16*
  %3534 = load i16, i16* %3533, align 1
  %3535 = insertelement <16 x i16> %3529, i16 %3534, i32 10
  %3536 = extractelement <16 x i32> %3469, i32 11
  %3537 = sext i32 %3536 to i64
  %3538 = getelementptr inbounds i8, i8* %3366, i64 %3537
  %3539 = bitcast i8* %3538 to i16*
  %3540 = load i16, i16* %3539, align 1
  %3541 = insertelement <16 x i16> %3535, i16 %3540, i32 11
  %3542 = extractelement <16 x i32> %3469, i32 12
  %3543 = sext i32 %3542 to i64
  %3544 = getelementptr inbounds i8, i8* %3366, i64 %3543
  %3545 = bitcast i8* %3544 to i16*
  %3546 = load i16, i16* %3545, align 1
  %3547 = insertelement <16 x i16> %3541, i16 %3546, i32 12
  %3548 = extractelement <16 x i32> %3469, i32 13
  %3549 = sext i32 %3548 to i64
  %3550 = getelementptr inbounds i8, i8* %3366, i64 %3549
  %3551 = bitcast i8* %3550 to i16*
  %3552 = load i16, i16* %3551, align 1
  %3553 = insertelement <16 x i16> %3547, i16 %3552, i32 13
  %3554 = extractelement <16 x i32> %3469, i32 14
  %3555 = sext i32 %3554 to i64
  %3556 = getelementptr inbounds i8, i8* %3366, i64 %3555
  %3557 = bitcast i8* %3556 to i16*
  %3558 = load i16, i16* %3557, align 1
  %3559 = insertelement <16 x i16> %3553, i16 %3558, i32 14
  %3560 = extractelement <16 x i32> %3469, i32 15
  %3561 = sext i32 %3560 to i64
  %3562 = getelementptr inbounds i8, i8* %3366, i64 %3561
  %3563 = bitcast i8* %3562 to i16*
  %3564 = load i16, i16* %3563, align 1
  %3565 = insertelement <16 x i16> %3559, i16 %3564, i32 15
  %3566 = lshr <16 x i16> %3565, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3567 = shl <16 x i16> %3565, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3568 = or <16 x i16> %3566, %3567
  %3569 = uitofp <16 x i16> %3568 to <16 x float>
  %3570 = fmul <16 x float> %3569, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %3571

3571:                                             ; preds = %3199, %3364
  %3572 = phi <16 x float> [ %3281, %3199 ], [ %3468, %3364 ]
  %3573 = phi <16 x float> [ %3363, %3199 ], [ %3570, %3364 ]
  %3574 = fsub <16 x float> %3573, %3572
  %3575 = fmul <16 x float> %3195, %3574
  %3576 = fadd <16 x float> %3572, %3575
  store <16 x float> %3576, <16 x float>* %7, align 64
  br label %4808

3577:                                             ; preds = %411
  %3578 = getelementptr inbounds i8*, i8** %412, i64 1
  %3579 = bitcast i8** %412 to %union.skcms_Curve**
  %3580 = load %union.skcms_Curve*, %union.skcms_Curve** %3579, align 8
  %3581 = load <16 x float>, <16 x float>* %8, align 64
  %3582 = fcmp ogt <16 x float> %3581, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3583 = select <16 x i1> %3582, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %3581
  %3584 = fcmp ogt <16 x float> %3583, zeroinitializer
  %3585 = select <16 x i1> %3584, <16 x float> %3583, <16 x float> zeroinitializer
  %3586 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %3580, i64 0, i32 0, i32 0
  %3587 = load i32, i32* %3586, align 8
  %3588 = add i32 %3587, -1
  %3589 = uitofp i32 %3588 to float
  %3590 = insertelement <16 x float> undef, float %3589, i32 0
  %3591 = shufflevector <16 x float> %3590, <16 x float> undef, <16 x i32> zeroinitializer
  %3592 = fmul <16 x float> %3585, %3591
  %3593 = fptosi <16 x float> %3592 to <16 x i32>
  %3594 = fadd <16 x float> %3592, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3595 = bitcast <16 x float> %3594 to <16 x i32>
  %3596 = add <16 x i32> %3595, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %3597 = bitcast <16 x i32> %3596 to <16 x float>
  %3598 = fptosi <16 x float> %3597 to <16 x i32>
  %3599 = sitofp <16 x i32> %3593 to <16 x float>
  %3600 = fsub <16 x float> %3592, %3599
  %3601 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %3580, i64 0, i32 0, i32 1
  %3602 = load i8*, i8** %3601, align 8
  %3603 = icmp eq i8* %3602, null
  br i1 %3603, label %3769, label %3604

3604:                                             ; preds = %3577
  %3605 = extractelement <16 x i32> %3593, i32 0
  %3606 = sext i32 %3605 to i64
  %3607 = getelementptr inbounds i8, i8* %3602, i64 %3606
  %3608 = load i8, i8* %3607, align 1
  %3609 = insertelement <16 x i8> undef, i8 %3608, i32 0
  %3610 = extractelement <16 x i32> %3593, i32 1
  %3611 = sext i32 %3610 to i64
  %3612 = getelementptr inbounds i8, i8* %3602, i64 %3611
  %3613 = load i8, i8* %3612, align 1
  %3614 = insertelement <16 x i8> %3609, i8 %3613, i32 1
  %3615 = extractelement <16 x i32> %3593, i32 2
  %3616 = sext i32 %3615 to i64
  %3617 = getelementptr inbounds i8, i8* %3602, i64 %3616
  %3618 = load i8, i8* %3617, align 1
  %3619 = insertelement <16 x i8> %3614, i8 %3618, i32 2
  %3620 = extractelement <16 x i32> %3593, i32 3
  %3621 = sext i32 %3620 to i64
  %3622 = getelementptr inbounds i8, i8* %3602, i64 %3621
  %3623 = load i8, i8* %3622, align 1
  %3624 = insertelement <16 x i8> %3619, i8 %3623, i32 3
  %3625 = extractelement <16 x i32> %3593, i32 4
  %3626 = sext i32 %3625 to i64
  %3627 = getelementptr inbounds i8, i8* %3602, i64 %3626
  %3628 = load i8, i8* %3627, align 1
  %3629 = insertelement <16 x i8> %3624, i8 %3628, i32 4
  %3630 = extractelement <16 x i32> %3593, i32 5
  %3631 = sext i32 %3630 to i64
  %3632 = getelementptr inbounds i8, i8* %3602, i64 %3631
  %3633 = load i8, i8* %3632, align 1
  %3634 = insertelement <16 x i8> %3629, i8 %3633, i32 5
  %3635 = extractelement <16 x i32> %3593, i32 6
  %3636 = sext i32 %3635 to i64
  %3637 = getelementptr inbounds i8, i8* %3602, i64 %3636
  %3638 = load i8, i8* %3637, align 1
  %3639 = insertelement <16 x i8> %3634, i8 %3638, i32 6
  %3640 = extractelement <16 x i32> %3593, i32 7
  %3641 = sext i32 %3640 to i64
  %3642 = getelementptr inbounds i8, i8* %3602, i64 %3641
  %3643 = load i8, i8* %3642, align 1
  %3644 = insertelement <16 x i8> %3639, i8 %3643, i32 7
  %3645 = extractelement <16 x i32> %3593, i32 8
  %3646 = sext i32 %3645 to i64
  %3647 = getelementptr inbounds i8, i8* %3602, i64 %3646
  %3648 = load i8, i8* %3647, align 1
  %3649 = insertelement <16 x i8> %3644, i8 %3648, i32 8
  %3650 = extractelement <16 x i32> %3593, i32 9
  %3651 = sext i32 %3650 to i64
  %3652 = getelementptr inbounds i8, i8* %3602, i64 %3651
  %3653 = load i8, i8* %3652, align 1
  %3654 = insertelement <16 x i8> %3649, i8 %3653, i32 9
  %3655 = extractelement <16 x i32> %3593, i32 10
  %3656 = sext i32 %3655 to i64
  %3657 = getelementptr inbounds i8, i8* %3602, i64 %3656
  %3658 = load i8, i8* %3657, align 1
  %3659 = insertelement <16 x i8> %3654, i8 %3658, i32 10
  %3660 = extractelement <16 x i32> %3593, i32 11
  %3661 = sext i32 %3660 to i64
  %3662 = getelementptr inbounds i8, i8* %3602, i64 %3661
  %3663 = load i8, i8* %3662, align 1
  %3664 = insertelement <16 x i8> %3659, i8 %3663, i32 11
  %3665 = extractelement <16 x i32> %3593, i32 12
  %3666 = sext i32 %3665 to i64
  %3667 = getelementptr inbounds i8, i8* %3602, i64 %3666
  %3668 = load i8, i8* %3667, align 1
  %3669 = insertelement <16 x i8> %3664, i8 %3668, i32 12
  %3670 = extractelement <16 x i32> %3593, i32 13
  %3671 = sext i32 %3670 to i64
  %3672 = getelementptr inbounds i8, i8* %3602, i64 %3671
  %3673 = load i8, i8* %3672, align 1
  %3674 = insertelement <16 x i8> %3669, i8 %3673, i32 13
  %3675 = extractelement <16 x i32> %3593, i32 14
  %3676 = sext i32 %3675 to i64
  %3677 = getelementptr inbounds i8, i8* %3602, i64 %3676
  %3678 = load i8, i8* %3677, align 1
  %3679 = insertelement <16 x i8> %3674, i8 %3678, i32 14
  %3680 = extractelement <16 x i32> %3593, i32 15
  %3681 = sext i32 %3680 to i64
  %3682 = getelementptr inbounds i8, i8* %3602, i64 %3681
  %3683 = load i8, i8* %3682, align 1
  %3684 = insertelement <16 x i8> %3679, i8 %3683, i32 15
  %3685 = uitofp <16 x i8> %3684 to <16 x float>
  %3686 = fmul <16 x float> %3685, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %3687 = extractelement <16 x i32> %3598, i32 0
  %3688 = sext i32 %3687 to i64
  %3689 = getelementptr inbounds i8, i8* %3602, i64 %3688
  %3690 = load i8, i8* %3689, align 1
  %3691 = insertelement <16 x i8> undef, i8 %3690, i32 0
  %3692 = extractelement <16 x i32> %3598, i32 1
  %3693 = sext i32 %3692 to i64
  %3694 = getelementptr inbounds i8, i8* %3602, i64 %3693
  %3695 = load i8, i8* %3694, align 1
  %3696 = insertelement <16 x i8> %3691, i8 %3695, i32 1
  %3697 = extractelement <16 x i32> %3598, i32 2
  %3698 = sext i32 %3697 to i64
  %3699 = getelementptr inbounds i8, i8* %3602, i64 %3698
  %3700 = load i8, i8* %3699, align 1
  %3701 = insertelement <16 x i8> %3696, i8 %3700, i32 2
  %3702 = extractelement <16 x i32> %3598, i32 3
  %3703 = sext i32 %3702 to i64
  %3704 = getelementptr inbounds i8, i8* %3602, i64 %3703
  %3705 = load i8, i8* %3704, align 1
  %3706 = insertelement <16 x i8> %3701, i8 %3705, i32 3
  %3707 = extractelement <16 x i32> %3598, i32 4
  %3708 = sext i32 %3707 to i64
  %3709 = getelementptr inbounds i8, i8* %3602, i64 %3708
  %3710 = load i8, i8* %3709, align 1
  %3711 = insertelement <16 x i8> %3706, i8 %3710, i32 4
  %3712 = extractelement <16 x i32> %3598, i32 5
  %3713 = sext i32 %3712 to i64
  %3714 = getelementptr inbounds i8, i8* %3602, i64 %3713
  %3715 = load i8, i8* %3714, align 1
  %3716 = insertelement <16 x i8> %3711, i8 %3715, i32 5
  %3717 = extractelement <16 x i32> %3598, i32 6
  %3718 = sext i32 %3717 to i64
  %3719 = getelementptr inbounds i8, i8* %3602, i64 %3718
  %3720 = load i8, i8* %3719, align 1
  %3721 = insertelement <16 x i8> %3716, i8 %3720, i32 6
  %3722 = extractelement <16 x i32> %3598, i32 7
  %3723 = sext i32 %3722 to i64
  %3724 = getelementptr inbounds i8, i8* %3602, i64 %3723
  %3725 = load i8, i8* %3724, align 1
  %3726 = insertelement <16 x i8> %3721, i8 %3725, i32 7
  %3727 = extractelement <16 x i32> %3598, i32 8
  %3728 = sext i32 %3727 to i64
  %3729 = getelementptr inbounds i8, i8* %3602, i64 %3728
  %3730 = load i8, i8* %3729, align 1
  %3731 = insertelement <16 x i8> %3726, i8 %3730, i32 8
  %3732 = extractelement <16 x i32> %3598, i32 9
  %3733 = sext i32 %3732 to i64
  %3734 = getelementptr inbounds i8, i8* %3602, i64 %3733
  %3735 = load i8, i8* %3734, align 1
  %3736 = insertelement <16 x i8> %3731, i8 %3735, i32 9
  %3737 = extractelement <16 x i32> %3598, i32 10
  %3738 = sext i32 %3737 to i64
  %3739 = getelementptr inbounds i8, i8* %3602, i64 %3738
  %3740 = load i8, i8* %3739, align 1
  %3741 = insertelement <16 x i8> %3736, i8 %3740, i32 10
  %3742 = extractelement <16 x i32> %3598, i32 11
  %3743 = sext i32 %3742 to i64
  %3744 = getelementptr inbounds i8, i8* %3602, i64 %3743
  %3745 = load i8, i8* %3744, align 1
  %3746 = insertelement <16 x i8> %3741, i8 %3745, i32 11
  %3747 = extractelement <16 x i32> %3598, i32 12
  %3748 = sext i32 %3747 to i64
  %3749 = getelementptr inbounds i8, i8* %3602, i64 %3748
  %3750 = load i8, i8* %3749, align 1
  %3751 = insertelement <16 x i8> %3746, i8 %3750, i32 12
  %3752 = extractelement <16 x i32> %3598, i32 13
  %3753 = sext i32 %3752 to i64
  %3754 = getelementptr inbounds i8, i8* %3602, i64 %3753
  %3755 = load i8, i8* %3754, align 1
  %3756 = insertelement <16 x i8> %3751, i8 %3755, i32 13
  %3757 = extractelement <16 x i32> %3598, i32 14
  %3758 = sext i32 %3757 to i64
  %3759 = getelementptr inbounds i8, i8* %3602, i64 %3758
  %3760 = load i8, i8* %3759, align 1
  %3761 = insertelement <16 x i8> %3756, i8 %3760, i32 14
  %3762 = extractelement <16 x i32> %3598, i32 15
  %3763 = sext i32 %3762 to i64
  %3764 = getelementptr inbounds i8, i8* %3602, i64 %3763
  %3765 = load i8, i8* %3764, align 1
  %3766 = insertelement <16 x i8> %3761, i8 %3765, i32 15
  %3767 = uitofp <16 x i8> %3766 to <16 x float>
  %3768 = fmul <16 x float> %3767, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %3976

3769:                                             ; preds = %3577
  %3770 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %3580, i64 0, i32 0, i32 2
  %3771 = load i8*, i8** %3770, align 8
  %3772 = shl nsw <16 x i32> %3593, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3773 = extractelement <16 x i32> %3772, i32 0
  %3774 = sext i32 %3773 to i64
  %3775 = getelementptr inbounds i8, i8* %3771, i64 %3774
  %3776 = bitcast i8* %3775 to i16*
  %3777 = load i16, i16* %3776, align 1
  %3778 = insertelement <16 x i16> undef, i16 %3777, i32 0
  %3779 = extractelement <16 x i32> %3772, i32 1
  %3780 = sext i32 %3779 to i64
  %3781 = getelementptr inbounds i8, i8* %3771, i64 %3780
  %3782 = bitcast i8* %3781 to i16*
  %3783 = load i16, i16* %3782, align 1
  %3784 = insertelement <16 x i16> %3778, i16 %3783, i32 1
  %3785 = extractelement <16 x i32> %3772, i32 2
  %3786 = sext i32 %3785 to i64
  %3787 = getelementptr inbounds i8, i8* %3771, i64 %3786
  %3788 = bitcast i8* %3787 to i16*
  %3789 = load i16, i16* %3788, align 1
  %3790 = insertelement <16 x i16> %3784, i16 %3789, i32 2
  %3791 = extractelement <16 x i32> %3772, i32 3
  %3792 = sext i32 %3791 to i64
  %3793 = getelementptr inbounds i8, i8* %3771, i64 %3792
  %3794 = bitcast i8* %3793 to i16*
  %3795 = load i16, i16* %3794, align 1
  %3796 = insertelement <16 x i16> %3790, i16 %3795, i32 3
  %3797 = extractelement <16 x i32> %3772, i32 4
  %3798 = sext i32 %3797 to i64
  %3799 = getelementptr inbounds i8, i8* %3771, i64 %3798
  %3800 = bitcast i8* %3799 to i16*
  %3801 = load i16, i16* %3800, align 1
  %3802 = insertelement <16 x i16> %3796, i16 %3801, i32 4
  %3803 = extractelement <16 x i32> %3772, i32 5
  %3804 = sext i32 %3803 to i64
  %3805 = getelementptr inbounds i8, i8* %3771, i64 %3804
  %3806 = bitcast i8* %3805 to i16*
  %3807 = load i16, i16* %3806, align 1
  %3808 = insertelement <16 x i16> %3802, i16 %3807, i32 5
  %3809 = extractelement <16 x i32> %3772, i32 6
  %3810 = sext i32 %3809 to i64
  %3811 = getelementptr inbounds i8, i8* %3771, i64 %3810
  %3812 = bitcast i8* %3811 to i16*
  %3813 = load i16, i16* %3812, align 1
  %3814 = insertelement <16 x i16> %3808, i16 %3813, i32 6
  %3815 = extractelement <16 x i32> %3772, i32 7
  %3816 = sext i32 %3815 to i64
  %3817 = getelementptr inbounds i8, i8* %3771, i64 %3816
  %3818 = bitcast i8* %3817 to i16*
  %3819 = load i16, i16* %3818, align 1
  %3820 = insertelement <16 x i16> %3814, i16 %3819, i32 7
  %3821 = extractelement <16 x i32> %3772, i32 8
  %3822 = sext i32 %3821 to i64
  %3823 = getelementptr inbounds i8, i8* %3771, i64 %3822
  %3824 = bitcast i8* %3823 to i16*
  %3825 = load i16, i16* %3824, align 1
  %3826 = insertelement <16 x i16> %3820, i16 %3825, i32 8
  %3827 = extractelement <16 x i32> %3772, i32 9
  %3828 = sext i32 %3827 to i64
  %3829 = getelementptr inbounds i8, i8* %3771, i64 %3828
  %3830 = bitcast i8* %3829 to i16*
  %3831 = load i16, i16* %3830, align 1
  %3832 = insertelement <16 x i16> %3826, i16 %3831, i32 9
  %3833 = extractelement <16 x i32> %3772, i32 10
  %3834 = sext i32 %3833 to i64
  %3835 = getelementptr inbounds i8, i8* %3771, i64 %3834
  %3836 = bitcast i8* %3835 to i16*
  %3837 = load i16, i16* %3836, align 1
  %3838 = insertelement <16 x i16> %3832, i16 %3837, i32 10
  %3839 = extractelement <16 x i32> %3772, i32 11
  %3840 = sext i32 %3839 to i64
  %3841 = getelementptr inbounds i8, i8* %3771, i64 %3840
  %3842 = bitcast i8* %3841 to i16*
  %3843 = load i16, i16* %3842, align 1
  %3844 = insertelement <16 x i16> %3838, i16 %3843, i32 11
  %3845 = extractelement <16 x i32> %3772, i32 12
  %3846 = sext i32 %3845 to i64
  %3847 = getelementptr inbounds i8, i8* %3771, i64 %3846
  %3848 = bitcast i8* %3847 to i16*
  %3849 = load i16, i16* %3848, align 1
  %3850 = insertelement <16 x i16> %3844, i16 %3849, i32 12
  %3851 = extractelement <16 x i32> %3772, i32 13
  %3852 = sext i32 %3851 to i64
  %3853 = getelementptr inbounds i8, i8* %3771, i64 %3852
  %3854 = bitcast i8* %3853 to i16*
  %3855 = load i16, i16* %3854, align 1
  %3856 = insertelement <16 x i16> %3850, i16 %3855, i32 13
  %3857 = extractelement <16 x i32> %3772, i32 14
  %3858 = sext i32 %3857 to i64
  %3859 = getelementptr inbounds i8, i8* %3771, i64 %3858
  %3860 = bitcast i8* %3859 to i16*
  %3861 = load i16, i16* %3860, align 1
  %3862 = insertelement <16 x i16> %3856, i16 %3861, i32 14
  %3863 = extractelement <16 x i32> %3772, i32 15
  %3864 = sext i32 %3863 to i64
  %3865 = getelementptr inbounds i8, i8* %3771, i64 %3864
  %3866 = bitcast i8* %3865 to i16*
  %3867 = load i16, i16* %3866, align 1
  %3868 = insertelement <16 x i16> %3862, i16 %3867, i32 15
  %3869 = lshr <16 x i16> %3868, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3870 = shl <16 x i16> %3868, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3871 = or <16 x i16> %3869, %3870
  %3872 = uitofp <16 x i16> %3871 to <16 x float>
  %3873 = fmul <16 x float> %3872, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %3874 = shl nsw <16 x i32> %3598, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3875 = extractelement <16 x i32> %3874, i32 0
  %3876 = sext i32 %3875 to i64
  %3877 = getelementptr inbounds i8, i8* %3771, i64 %3876
  %3878 = bitcast i8* %3877 to i16*
  %3879 = load i16, i16* %3878, align 1
  %3880 = insertelement <16 x i16> undef, i16 %3879, i32 0
  %3881 = extractelement <16 x i32> %3874, i32 1
  %3882 = sext i32 %3881 to i64
  %3883 = getelementptr inbounds i8, i8* %3771, i64 %3882
  %3884 = bitcast i8* %3883 to i16*
  %3885 = load i16, i16* %3884, align 1
  %3886 = insertelement <16 x i16> %3880, i16 %3885, i32 1
  %3887 = extractelement <16 x i32> %3874, i32 2
  %3888 = sext i32 %3887 to i64
  %3889 = getelementptr inbounds i8, i8* %3771, i64 %3888
  %3890 = bitcast i8* %3889 to i16*
  %3891 = load i16, i16* %3890, align 1
  %3892 = insertelement <16 x i16> %3886, i16 %3891, i32 2
  %3893 = extractelement <16 x i32> %3874, i32 3
  %3894 = sext i32 %3893 to i64
  %3895 = getelementptr inbounds i8, i8* %3771, i64 %3894
  %3896 = bitcast i8* %3895 to i16*
  %3897 = load i16, i16* %3896, align 1
  %3898 = insertelement <16 x i16> %3892, i16 %3897, i32 3
  %3899 = extractelement <16 x i32> %3874, i32 4
  %3900 = sext i32 %3899 to i64
  %3901 = getelementptr inbounds i8, i8* %3771, i64 %3900
  %3902 = bitcast i8* %3901 to i16*
  %3903 = load i16, i16* %3902, align 1
  %3904 = insertelement <16 x i16> %3898, i16 %3903, i32 4
  %3905 = extractelement <16 x i32> %3874, i32 5
  %3906 = sext i32 %3905 to i64
  %3907 = getelementptr inbounds i8, i8* %3771, i64 %3906
  %3908 = bitcast i8* %3907 to i16*
  %3909 = load i16, i16* %3908, align 1
  %3910 = insertelement <16 x i16> %3904, i16 %3909, i32 5
  %3911 = extractelement <16 x i32> %3874, i32 6
  %3912 = sext i32 %3911 to i64
  %3913 = getelementptr inbounds i8, i8* %3771, i64 %3912
  %3914 = bitcast i8* %3913 to i16*
  %3915 = load i16, i16* %3914, align 1
  %3916 = insertelement <16 x i16> %3910, i16 %3915, i32 6
  %3917 = extractelement <16 x i32> %3874, i32 7
  %3918 = sext i32 %3917 to i64
  %3919 = getelementptr inbounds i8, i8* %3771, i64 %3918
  %3920 = bitcast i8* %3919 to i16*
  %3921 = load i16, i16* %3920, align 1
  %3922 = insertelement <16 x i16> %3916, i16 %3921, i32 7
  %3923 = extractelement <16 x i32> %3874, i32 8
  %3924 = sext i32 %3923 to i64
  %3925 = getelementptr inbounds i8, i8* %3771, i64 %3924
  %3926 = bitcast i8* %3925 to i16*
  %3927 = load i16, i16* %3926, align 1
  %3928 = insertelement <16 x i16> %3922, i16 %3927, i32 8
  %3929 = extractelement <16 x i32> %3874, i32 9
  %3930 = sext i32 %3929 to i64
  %3931 = getelementptr inbounds i8, i8* %3771, i64 %3930
  %3932 = bitcast i8* %3931 to i16*
  %3933 = load i16, i16* %3932, align 1
  %3934 = insertelement <16 x i16> %3928, i16 %3933, i32 9
  %3935 = extractelement <16 x i32> %3874, i32 10
  %3936 = sext i32 %3935 to i64
  %3937 = getelementptr inbounds i8, i8* %3771, i64 %3936
  %3938 = bitcast i8* %3937 to i16*
  %3939 = load i16, i16* %3938, align 1
  %3940 = insertelement <16 x i16> %3934, i16 %3939, i32 10
  %3941 = extractelement <16 x i32> %3874, i32 11
  %3942 = sext i32 %3941 to i64
  %3943 = getelementptr inbounds i8, i8* %3771, i64 %3942
  %3944 = bitcast i8* %3943 to i16*
  %3945 = load i16, i16* %3944, align 1
  %3946 = insertelement <16 x i16> %3940, i16 %3945, i32 11
  %3947 = extractelement <16 x i32> %3874, i32 12
  %3948 = sext i32 %3947 to i64
  %3949 = getelementptr inbounds i8, i8* %3771, i64 %3948
  %3950 = bitcast i8* %3949 to i16*
  %3951 = load i16, i16* %3950, align 1
  %3952 = insertelement <16 x i16> %3946, i16 %3951, i32 12
  %3953 = extractelement <16 x i32> %3874, i32 13
  %3954 = sext i32 %3953 to i64
  %3955 = getelementptr inbounds i8, i8* %3771, i64 %3954
  %3956 = bitcast i8* %3955 to i16*
  %3957 = load i16, i16* %3956, align 1
  %3958 = insertelement <16 x i16> %3952, i16 %3957, i32 13
  %3959 = extractelement <16 x i32> %3874, i32 14
  %3960 = sext i32 %3959 to i64
  %3961 = getelementptr inbounds i8, i8* %3771, i64 %3960
  %3962 = bitcast i8* %3961 to i16*
  %3963 = load i16, i16* %3962, align 1
  %3964 = insertelement <16 x i16> %3958, i16 %3963, i32 14
  %3965 = extractelement <16 x i32> %3874, i32 15
  %3966 = sext i32 %3965 to i64
  %3967 = getelementptr inbounds i8, i8* %3771, i64 %3966
  %3968 = bitcast i8* %3967 to i16*
  %3969 = load i16, i16* %3968, align 1
  %3970 = insertelement <16 x i16> %3964, i16 %3969, i32 15
  %3971 = lshr <16 x i16> %3970, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3972 = shl <16 x i16> %3970, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %3973 = or <16 x i16> %3971, %3972
  %3974 = uitofp <16 x i16> %3973 to <16 x float>
  %3975 = fmul <16 x float> %3974, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %3976

3976:                                             ; preds = %3604, %3769
  %3977 = phi <16 x float> [ %3686, %3604 ], [ %3873, %3769 ]
  %3978 = phi <16 x float> [ %3768, %3604 ], [ %3975, %3769 ]
  %3979 = fsub <16 x float> %3978, %3977
  %3980 = fmul <16 x float> %3600, %3979
  %3981 = fadd <16 x float> %3977, %3980
  store <16 x float> %3981, <16 x float>* %8, align 64
  br label %4808

3982:                                             ; preds = %411
  %3983 = getelementptr inbounds i8*, i8** %412, i64 1
  %3984 = bitcast i8** %412 to %union.skcms_Curve**
  %3985 = load %union.skcms_Curve*, %union.skcms_Curve** %3984, align 8
  %3986 = load <16 x float>, <16 x float>* %9, align 64
  %3987 = fcmp ogt <16 x float> %3986, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3988 = select <16 x i1> %3987, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %3986
  %3989 = fcmp ogt <16 x float> %3988, zeroinitializer
  %3990 = select <16 x i1> %3989, <16 x float> %3988, <16 x float> zeroinitializer
  %3991 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %3985, i64 0, i32 0, i32 0
  %3992 = load i32, i32* %3991, align 8
  %3993 = add i32 %3992, -1
  %3994 = uitofp i32 %3993 to float
  %3995 = insertelement <16 x float> undef, float %3994, i32 0
  %3996 = shufflevector <16 x float> %3995, <16 x float> undef, <16 x i32> zeroinitializer
  %3997 = fmul <16 x float> %3990, %3996
  %3998 = fptosi <16 x float> %3997 to <16 x i32>
  %3999 = fadd <16 x float> %3997, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %4000 = bitcast <16 x float> %3999 to <16 x i32>
  %4001 = add <16 x i32> %4000, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %4002 = bitcast <16 x i32> %4001 to <16 x float>
  %4003 = fptosi <16 x float> %4002 to <16 x i32>
  %4004 = sitofp <16 x i32> %3998 to <16 x float>
  %4005 = fsub <16 x float> %3997, %4004
  %4006 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %3985, i64 0, i32 0, i32 1
  %4007 = load i8*, i8** %4006, align 8
  %4008 = icmp eq i8* %4007, null
  br i1 %4008, label %4174, label %4009

4009:                                             ; preds = %3982
  %4010 = extractelement <16 x i32> %3998, i32 0
  %4011 = sext i32 %4010 to i64
  %4012 = getelementptr inbounds i8, i8* %4007, i64 %4011
  %4013 = load i8, i8* %4012, align 1
  %4014 = insertelement <16 x i8> undef, i8 %4013, i32 0
  %4015 = extractelement <16 x i32> %3998, i32 1
  %4016 = sext i32 %4015 to i64
  %4017 = getelementptr inbounds i8, i8* %4007, i64 %4016
  %4018 = load i8, i8* %4017, align 1
  %4019 = insertelement <16 x i8> %4014, i8 %4018, i32 1
  %4020 = extractelement <16 x i32> %3998, i32 2
  %4021 = sext i32 %4020 to i64
  %4022 = getelementptr inbounds i8, i8* %4007, i64 %4021
  %4023 = load i8, i8* %4022, align 1
  %4024 = insertelement <16 x i8> %4019, i8 %4023, i32 2
  %4025 = extractelement <16 x i32> %3998, i32 3
  %4026 = sext i32 %4025 to i64
  %4027 = getelementptr inbounds i8, i8* %4007, i64 %4026
  %4028 = load i8, i8* %4027, align 1
  %4029 = insertelement <16 x i8> %4024, i8 %4028, i32 3
  %4030 = extractelement <16 x i32> %3998, i32 4
  %4031 = sext i32 %4030 to i64
  %4032 = getelementptr inbounds i8, i8* %4007, i64 %4031
  %4033 = load i8, i8* %4032, align 1
  %4034 = insertelement <16 x i8> %4029, i8 %4033, i32 4
  %4035 = extractelement <16 x i32> %3998, i32 5
  %4036 = sext i32 %4035 to i64
  %4037 = getelementptr inbounds i8, i8* %4007, i64 %4036
  %4038 = load i8, i8* %4037, align 1
  %4039 = insertelement <16 x i8> %4034, i8 %4038, i32 5
  %4040 = extractelement <16 x i32> %3998, i32 6
  %4041 = sext i32 %4040 to i64
  %4042 = getelementptr inbounds i8, i8* %4007, i64 %4041
  %4043 = load i8, i8* %4042, align 1
  %4044 = insertelement <16 x i8> %4039, i8 %4043, i32 6
  %4045 = extractelement <16 x i32> %3998, i32 7
  %4046 = sext i32 %4045 to i64
  %4047 = getelementptr inbounds i8, i8* %4007, i64 %4046
  %4048 = load i8, i8* %4047, align 1
  %4049 = insertelement <16 x i8> %4044, i8 %4048, i32 7
  %4050 = extractelement <16 x i32> %3998, i32 8
  %4051 = sext i32 %4050 to i64
  %4052 = getelementptr inbounds i8, i8* %4007, i64 %4051
  %4053 = load i8, i8* %4052, align 1
  %4054 = insertelement <16 x i8> %4049, i8 %4053, i32 8
  %4055 = extractelement <16 x i32> %3998, i32 9
  %4056 = sext i32 %4055 to i64
  %4057 = getelementptr inbounds i8, i8* %4007, i64 %4056
  %4058 = load i8, i8* %4057, align 1
  %4059 = insertelement <16 x i8> %4054, i8 %4058, i32 9
  %4060 = extractelement <16 x i32> %3998, i32 10
  %4061 = sext i32 %4060 to i64
  %4062 = getelementptr inbounds i8, i8* %4007, i64 %4061
  %4063 = load i8, i8* %4062, align 1
  %4064 = insertelement <16 x i8> %4059, i8 %4063, i32 10
  %4065 = extractelement <16 x i32> %3998, i32 11
  %4066 = sext i32 %4065 to i64
  %4067 = getelementptr inbounds i8, i8* %4007, i64 %4066
  %4068 = load i8, i8* %4067, align 1
  %4069 = insertelement <16 x i8> %4064, i8 %4068, i32 11
  %4070 = extractelement <16 x i32> %3998, i32 12
  %4071 = sext i32 %4070 to i64
  %4072 = getelementptr inbounds i8, i8* %4007, i64 %4071
  %4073 = load i8, i8* %4072, align 1
  %4074 = insertelement <16 x i8> %4069, i8 %4073, i32 12
  %4075 = extractelement <16 x i32> %3998, i32 13
  %4076 = sext i32 %4075 to i64
  %4077 = getelementptr inbounds i8, i8* %4007, i64 %4076
  %4078 = load i8, i8* %4077, align 1
  %4079 = insertelement <16 x i8> %4074, i8 %4078, i32 13
  %4080 = extractelement <16 x i32> %3998, i32 14
  %4081 = sext i32 %4080 to i64
  %4082 = getelementptr inbounds i8, i8* %4007, i64 %4081
  %4083 = load i8, i8* %4082, align 1
  %4084 = insertelement <16 x i8> %4079, i8 %4083, i32 14
  %4085 = extractelement <16 x i32> %3998, i32 15
  %4086 = sext i32 %4085 to i64
  %4087 = getelementptr inbounds i8, i8* %4007, i64 %4086
  %4088 = load i8, i8* %4087, align 1
  %4089 = insertelement <16 x i8> %4084, i8 %4088, i32 15
  %4090 = uitofp <16 x i8> %4089 to <16 x float>
  %4091 = fmul <16 x float> %4090, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %4092 = extractelement <16 x i32> %4003, i32 0
  %4093 = sext i32 %4092 to i64
  %4094 = getelementptr inbounds i8, i8* %4007, i64 %4093
  %4095 = load i8, i8* %4094, align 1
  %4096 = insertelement <16 x i8> undef, i8 %4095, i32 0
  %4097 = extractelement <16 x i32> %4003, i32 1
  %4098 = sext i32 %4097 to i64
  %4099 = getelementptr inbounds i8, i8* %4007, i64 %4098
  %4100 = load i8, i8* %4099, align 1
  %4101 = insertelement <16 x i8> %4096, i8 %4100, i32 1
  %4102 = extractelement <16 x i32> %4003, i32 2
  %4103 = sext i32 %4102 to i64
  %4104 = getelementptr inbounds i8, i8* %4007, i64 %4103
  %4105 = load i8, i8* %4104, align 1
  %4106 = insertelement <16 x i8> %4101, i8 %4105, i32 2
  %4107 = extractelement <16 x i32> %4003, i32 3
  %4108 = sext i32 %4107 to i64
  %4109 = getelementptr inbounds i8, i8* %4007, i64 %4108
  %4110 = load i8, i8* %4109, align 1
  %4111 = insertelement <16 x i8> %4106, i8 %4110, i32 3
  %4112 = extractelement <16 x i32> %4003, i32 4
  %4113 = sext i32 %4112 to i64
  %4114 = getelementptr inbounds i8, i8* %4007, i64 %4113
  %4115 = load i8, i8* %4114, align 1
  %4116 = insertelement <16 x i8> %4111, i8 %4115, i32 4
  %4117 = extractelement <16 x i32> %4003, i32 5
  %4118 = sext i32 %4117 to i64
  %4119 = getelementptr inbounds i8, i8* %4007, i64 %4118
  %4120 = load i8, i8* %4119, align 1
  %4121 = insertelement <16 x i8> %4116, i8 %4120, i32 5
  %4122 = extractelement <16 x i32> %4003, i32 6
  %4123 = sext i32 %4122 to i64
  %4124 = getelementptr inbounds i8, i8* %4007, i64 %4123
  %4125 = load i8, i8* %4124, align 1
  %4126 = insertelement <16 x i8> %4121, i8 %4125, i32 6
  %4127 = extractelement <16 x i32> %4003, i32 7
  %4128 = sext i32 %4127 to i64
  %4129 = getelementptr inbounds i8, i8* %4007, i64 %4128
  %4130 = load i8, i8* %4129, align 1
  %4131 = insertelement <16 x i8> %4126, i8 %4130, i32 7
  %4132 = extractelement <16 x i32> %4003, i32 8
  %4133 = sext i32 %4132 to i64
  %4134 = getelementptr inbounds i8, i8* %4007, i64 %4133
  %4135 = load i8, i8* %4134, align 1
  %4136 = insertelement <16 x i8> %4131, i8 %4135, i32 8
  %4137 = extractelement <16 x i32> %4003, i32 9
  %4138 = sext i32 %4137 to i64
  %4139 = getelementptr inbounds i8, i8* %4007, i64 %4138
  %4140 = load i8, i8* %4139, align 1
  %4141 = insertelement <16 x i8> %4136, i8 %4140, i32 9
  %4142 = extractelement <16 x i32> %4003, i32 10
  %4143 = sext i32 %4142 to i64
  %4144 = getelementptr inbounds i8, i8* %4007, i64 %4143
  %4145 = load i8, i8* %4144, align 1
  %4146 = insertelement <16 x i8> %4141, i8 %4145, i32 10
  %4147 = extractelement <16 x i32> %4003, i32 11
  %4148 = sext i32 %4147 to i64
  %4149 = getelementptr inbounds i8, i8* %4007, i64 %4148
  %4150 = load i8, i8* %4149, align 1
  %4151 = insertelement <16 x i8> %4146, i8 %4150, i32 11
  %4152 = extractelement <16 x i32> %4003, i32 12
  %4153 = sext i32 %4152 to i64
  %4154 = getelementptr inbounds i8, i8* %4007, i64 %4153
  %4155 = load i8, i8* %4154, align 1
  %4156 = insertelement <16 x i8> %4151, i8 %4155, i32 12
  %4157 = extractelement <16 x i32> %4003, i32 13
  %4158 = sext i32 %4157 to i64
  %4159 = getelementptr inbounds i8, i8* %4007, i64 %4158
  %4160 = load i8, i8* %4159, align 1
  %4161 = insertelement <16 x i8> %4156, i8 %4160, i32 13
  %4162 = extractelement <16 x i32> %4003, i32 14
  %4163 = sext i32 %4162 to i64
  %4164 = getelementptr inbounds i8, i8* %4007, i64 %4163
  %4165 = load i8, i8* %4164, align 1
  %4166 = insertelement <16 x i8> %4161, i8 %4165, i32 14
  %4167 = extractelement <16 x i32> %4003, i32 15
  %4168 = sext i32 %4167 to i64
  %4169 = getelementptr inbounds i8, i8* %4007, i64 %4168
  %4170 = load i8, i8* %4169, align 1
  %4171 = insertelement <16 x i8> %4166, i8 %4170, i32 15
  %4172 = uitofp <16 x i8> %4171 to <16 x float>
  %4173 = fmul <16 x float> %4172, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %4381

4174:                                             ; preds = %3982
  %4175 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %3985, i64 0, i32 0, i32 2
  %4176 = load i8*, i8** %4175, align 8
  %4177 = shl nsw <16 x i32> %3998, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %4178 = extractelement <16 x i32> %4177, i32 0
  %4179 = sext i32 %4178 to i64
  %4180 = getelementptr inbounds i8, i8* %4176, i64 %4179
  %4181 = bitcast i8* %4180 to i16*
  %4182 = load i16, i16* %4181, align 1
  %4183 = insertelement <16 x i16> undef, i16 %4182, i32 0
  %4184 = extractelement <16 x i32> %4177, i32 1
  %4185 = sext i32 %4184 to i64
  %4186 = getelementptr inbounds i8, i8* %4176, i64 %4185
  %4187 = bitcast i8* %4186 to i16*
  %4188 = load i16, i16* %4187, align 1
  %4189 = insertelement <16 x i16> %4183, i16 %4188, i32 1
  %4190 = extractelement <16 x i32> %4177, i32 2
  %4191 = sext i32 %4190 to i64
  %4192 = getelementptr inbounds i8, i8* %4176, i64 %4191
  %4193 = bitcast i8* %4192 to i16*
  %4194 = load i16, i16* %4193, align 1
  %4195 = insertelement <16 x i16> %4189, i16 %4194, i32 2
  %4196 = extractelement <16 x i32> %4177, i32 3
  %4197 = sext i32 %4196 to i64
  %4198 = getelementptr inbounds i8, i8* %4176, i64 %4197
  %4199 = bitcast i8* %4198 to i16*
  %4200 = load i16, i16* %4199, align 1
  %4201 = insertelement <16 x i16> %4195, i16 %4200, i32 3
  %4202 = extractelement <16 x i32> %4177, i32 4
  %4203 = sext i32 %4202 to i64
  %4204 = getelementptr inbounds i8, i8* %4176, i64 %4203
  %4205 = bitcast i8* %4204 to i16*
  %4206 = load i16, i16* %4205, align 1
  %4207 = insertelement <16 x i16> %4201, i16 %4206, i32 4
  %4208 = extractelement <16 x i32> %4177, i32 5
  %4209 = sext i32 %4208 to i64
  %4210 = getelementptr inbounds i8, i8* %4176, i64 %4209
  %4211 = bitcast i8* %4210 to i16*
  %4212 = load i16, i16* %4211, align 1
  %4213 = insertelement <16 x i16> %4207, i16 %4212, i32 5
  %4214 = extractelement <16 x i32> %4177, i32 6
  %4215 = sext i32 %4214 to i64
  %4216 = getelementptr inbounds i8, i8* %4176, i64 %4215
  %4217 = bitcast i8* %4216 to i16*
  %4218 = load i16, i16* %4217, align 1
  %4219 = insertelement <16 x i16> %4213, i16 %4218, i32 6
  %4220 = extractelement <16 x i32> %4177, i32 7
  %4221 = sext i32 %4220 to i64
  %4222 = getelementptr inbounds i8, i8* %4176, i64 %4221
  %4223 = bitcast i8* %4222 to i16*
  %4224 = load i16, i16* %4223, align 1
  %4225 = insertelement <16 x i16> %4219, i16 %4224, i32 7
  %4226 = extractelement <16 x i32> %4177, i32 8
  %4227 = sext i32 %4226 to i64
  %4228 = getelementptr inbounds i8, i8* %4176, i64 %4227
  %4229 = bitcast i8* %4228 to i16*
  %4230 = load i16, i16* %4229, align 1
  %4231 = insertelement <16 x i16> %4225, i16 %4230, i32 8
  %4232 = extractelement <16 x i32> %4177, i32 9
  %4233 = sext i32 %4232 to i64
  %4234 = getelementptr inbounds i8, i8* %4176, i64 %4233
  %4235 = bitcast i8* %4234 to i16*
  %4236 = load i16, i16* %4235, align 1
  %4237 = insertelement <16 x i16> %4231, i16 %4236, i32 9
  %4238 = extractelement <16 x i32> %4177, i32 10
  %4239 = sext i32 %4238 to i64
  %4240 = getelementptr inbounds i8, i8* %4176, i64 %4239
  %4241 = bitcast i8* %4240 to i16*
  %4242 = load i16, i16* %4241, align 1
  %4243 = insertelement <16 x i16> %4237, i16 %4242, i32 10
  %4244 = extractelement <16 x i32> %4177, i32 11
  %4245 = sext i32 %4244 to i64
  %4246 = getelementptr inbounds i8, i8* %4176, i64 %4245
  %4247 = bitcast i8* %4246 to i16*
  %4248 = load i16, i16* %4247, align 1
  %4249 = insertelement <16 x i16> %4243, i16 %4248, i32 11
  %4250 = extractelement <16 x i32> %4177, i32 12
  %4251 = sext i32 %4250 to i64
  %4252 = getelementptr inbounds i8, i8* %4176, i64 %4251
  %4253 = bitcast i8* %4252 to i16*
  %4254 = load i16, i16* %4253, align 1
  %4255 = insertelement <16 x i16> %4249, i16 %4254, i32 12
  %4256 = extractelement <16 x i32> %4177, i32 13
  %4257 = sext i32 %4256 to i64
  %4258 = getelementptr inbounds i8, i8* %4176, i64 %4257
  %4259 = bitcast i8* %4258 to i16*
  %4260 = load i16, i16* %4259, align 1
  %4261 = insertelement <16 x i16> %4255, i16 %4260, i32 13
  %4262 = extractelement <16 x i32> %4177, i32 14
  %4263 = sext i32 %4262 to i64
  %4264 = getelementptr inbounds i8, i8* %4176, i64 %4263
  %4265 = bitcast i8* %4264 to i16*
  %4266 = load i16, i16* %4265, align 1
  %4267 = insertelement <16 x i16> %4261, i16 %4266, i32 14
  %4268 = extractelement <16 x i32> %4177, i32 15
  %4269 = sext i32 %4268 to i64
  %4270 = getelementptr inbounds i8, i8* %4176, i64 %4269
  %4271 = bitcast i8* %4270 to i16*
  %4272 = load i16, i16* %4271, align 1
  %4273 = insertelement <16 x i16> %4267, i16 %4272, i32 15
  %4274 = lshr <16 x i16> %4273, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %4275 = shl <16 x i16> %4273, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %4276 = or <16 x i16> %4274, %4275
  %4277 = uitofp <16 x i16> %4276 to <16 x float>
  %4278 = fmul <16 x float> %4277, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %4279 = shl nsw <16 x i32> %4003, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %4280 = extractelement <16 x i32> %4279, i32 0
  %4281 = sext i32 %4280 to i64
  %4282 = getelementptr inbounds i8, i8* %4176, i64 %4281
  %4283 = bitcast i8* %4282 to i16*
  %4284 = load i16, i16* %4283, align 1
  %4285 = insertelement <16 x i16> undef, i16 %4284, i32 0
  %4286 = extractelement <16 x i32> %4279, i32 1
  %4287 = sext i32 %4286 to i64
  %4288 = getelementptr inbounds i8, i8* %4176, i64 %4287
  %4289 = bitcast i8* %4288 to i16*
  %4290 = load i16, i16* %4289, align 1
  %4291 = insertelement <16 x i16> %4285, i16 %4290, i32 1
  %4292 = extractelement <16 x i32> %4279, i32 2
  %4293 = sext i32 %4292 to i64
  %4294 = getelementptr inbounds i8, i8* %4176, i64 %4293
  %4295 = bitcast i8* %4294 to i16*
  %4296 = load i16, i16* %4295, align 1
  %4297 = insertelement <16 x i16> %4291, i16 %4296, i32 2
  %4298 = extractelement <16 x i32> %4279, i32 3
  %4299 = sext i32 %4298 to i64
  %4300 = getelementptr inbounds i8, i8* %4176, i64 %4299
  %4301 = bitcast i8* %4300 to i16*
  %4302 = load i16, i16* %4301, align 1
  %4303 = insertelement <16 x i16> %4297, i16 %4302, i32 3
  %4304 = extractelement <16 x i32> %4279, i32 4
  %4305 = sext i32 %4304 to i64
  %4306 = getelementptr inbounds i8, i8* %4176, i64 %4305
  %4307 = bitcast i8* %4306 to i16*
  %4308 = load i16, i16* %4307, align 1
  %4309 = insertelement <16 x i16> %4303, i16 %4308, i32 4
  %4310 = extractelement <16 x i32> %4279, i32 5
  %4311 = sext i32 %4310 to i64
  %4312 = getelementptr inbounds i8, i8* %4176, i64 %4311
  %4313 = bitcast i8* %4312 to i16*
  %4314 = load i16, i16* %4313, align 1
  %4315 = insertelement <16 x i16> %4309, i16 %4314, i32 5
  %4316 = extractelement <16 x i32> %4279, i32 6
  %4317 = sext i32 %4316 to i64
  %4318 = getelementptr inbounds i8, i8* %4176, i64 %4317
  %4319 = bitcast i8* %4318 to i16*
  %4320 = load i16, i16* %4319, align 1
  %4321 = insertelement <16 x i16> %4315, i16 %4320, i32 6
  %4322 = extractelement <16 x i32> %4279, i32 7
  %4323 = sext i32 %4322 to i64
  %4324 = getelementptr inbounds i8, i8* %4176, i64 %4323
  %4325 = bitcast i8* %4324 to i16*
  %4326 = load i16, i16* %4325, align 1
  %4327 = insertelement <16 x i16> %4321, i16 %4326, i32 7
  %4328 = extractelement <16 x i32> %4279, i32 8
  %4329 = sext i32 %4328 to i64
  %4330 = getelementptr inbounds i8, i8* %4176, i64 %4329
  %4331 = bitcast i8* %4330 to i16*
  %4332 = load i16, i16* %4331, align 1
  %4333 = insertelement <16 x i16> %4327, i16 %4332, i32 8
  %4334 = extractelement <16 x i32> %4279, i32 9
  %4335 = sext i32 %4334 to i64
  %4336 = getelementptr inbounds i8, i8* %4176, i64 %4335
  %4337 = bitcast i8* %4336 to i16*
  %4338 = load i16, i16* %4337, align 1
  %4339 = insertelement <16 x i16> %4333, i16 %4338, i32 9
  %4340 = extractelement <16 x i32> %4279, i32 10
  %4341 = sext i32 %4340 to i64
  %4342 = getelementptr inbounds i8, i8* %4176, i64 %4341
  %4343 = bitcast i8* %4342 to i16*
  %4344 = load i16, i16* %4343, align 1
  %4345 = insertelement <16 x i16> %4339, i16 %4344, i32 10
  %4346 = extractelement <16 x i32> %4279, i32 11
  %4347 = sext i32 %4346 to i64
  %4348 = getelementptr inbounds i8, i8* %4176, i64 %4347
  %4349 = bitcast i8* %4348 to i16*
  %4350 = load i16, i16* %4349, align 1
  %4351 = insertelement <16 x i16> %4345, i16 %4350, i32 11
  %4352 = extractelement <16 x i32> %4279, i32 12
  %4353 = sext i32 %4352 to i64
  %4354 = getelementptr inbounds i8, i8* %4176, i64 %4353
  %4355 = bitcast i8* %4354 to i16*
  %4356 = load i16, i16* %4355, align 1
  %4357 = insertelement <16 x i16> %4351, i16 %4356, i32 12
  %4358 = extractelement <16 x i32> %4279, i32 13
  %4359 = sext i32 %4358 to i64
  %4360 = getelementptr inbounds i8, i8* %4176, i64 %4359
  %4361 = bitcast i8* %4360 to i16*
  %4362 = load i16, i16* %4361, align 1
  %4363 = insertelement <16 x i16> %4357, i16 %4362, i32 13
  %4364 = extractelement <16 x i32> %4279, i32 14
  %4365 = sext i32 %4364 to i64
  %4366 = getelementptr inbounds i8, i8* %4176, i64 %4365
  %4367 = bitcast i8* %4366 to i16*
  %4368 = load i16, i16* %4367, align 1
  %4369 = insertelement <16 x i16> %4363, i16 %4368, i32 14
  %4370 = extractelement <16 x i32> %4279, i32 15
  %4371 = sext i32 %4370 to i64
  %4372 = getelementptr inbounds i8, i8* %4176, i64 %4371
  %4373 = bitcast i8* %4372 to i16*
  %4374 = load i16, i16* %4373, align 1
  %4375 = insertelement <16 x i16> %4369, i16 %4374, i32 15
  %4376 = lshr <16 x i16> %4375, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %4377 = shl <16 x i16> %4375, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %4378 = or <16 x i16> %4376, %4377
  %4379 = uitofp <16 x i16> %4378 to <16 x float>
  %4380 = fmul <16 x float> %4379, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %4381

4381:                                             ; preds = %4009, %4174
  %4382 = phi <16 x float> [ %4091, %4009 ], [ %4278, %4174 ]
  %4383 = phi <16 x float> [ %4173, %4009 ], [ %4380, %4174 ]
  %4384 = fsub <16 x float> %4383, %4382
  %4385 = fmul <16 x float> %4005, %4384
  %4386 = fadd <16 x float> %4382, %4385
  store <16 x float> %4386, <16 x float>* %9, align 64
  br label %4808

4387:                                             ; preds = %411
  %4388 = getelementptr inbounds i8*, i8** %412, i64 1
  %4389 = bitcast i8** %412 to %union.skcms_Curve**
  %4390 = load %union.skcms_Curve*, %union.skcms_Curve** %4389, align 8
  %4391 = load <16 x float>, <16 x float>* %10, align 64
  %4392 = fcmp ogt <16 x float> %4391, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %4393 = select <16 x i1> %4392, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %4391
  %4394 = fcmp ogt <16 x float> %4393, zeroinitializer
  %4395 = select <16 x i1> %4394, <16 x float> %4393, <16 x float> zeroinitializer
  %4396 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %4390, i64 0, i32 0, i32 0
  %4397 = load i32, i32* %4396, align 8
  %4398 = add i32 %4397, -1
  %4399 = uitofp i32 %4398 to float
  %4400 = insertelement <16 x float> undef, float %4399, i32 0
  %4401 = shufflevector <16 x float> %4400, <16 x float> undef, <16 x i32> zeroinitializer
  %4402 = fmul <16 x float> %4395, %4401
  %4403 = fptosi <16 x float> %4402 to <16 x i32>
  %4404 = fadd <16 x float> %4402, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %4405 = bitcast <16 x float> %4404 to <16 x i32>
  %4406 = add <16 x i32> %4405, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %4407 = bitcast <16 x i32> %4406 to <16 x float>
  %4408 = fptosi <16 x float> %4407 to <16 x i32>
  %4409 = sitofp <16 x i32> %4403 to <16 x float>
  %4410 = fsub <16 x float> %4402, %4409
  %4411 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %4390, i64 0, i32 0, i32 1
  %4412 = load i8*, i8** %4411, align 8
  %4413 = icmp eq i8* %4412, null
  br i1 %4413, label %4579, label %4414

4414:                                             ; preds = %4387
  %4415 = extractelement <16 x i32> %4403, i32 0
  %4416 = sext i32 %4415 to i64
  %4417 = getelementptr inbounds i8, i8* %4412, i64 %4416
  %4418 = load i8, i8* %4417, align 1
  %4419 = insertelement <16 x i8> undef, i8 %4418, i32 0
  %4420 = extractelement <16 x i32> %4403, i32 1
  %4421 = sext i32 %4420 to i64
  %4422 = getelementptr inbounds i8, i8* %4412, i64 %4421
  %4423 = load i8, i8* %4422, align 1
  %4424 = insertelement <16 x i8> %4419, i8 %4423, i32 1
  %4425 = extractelement <16 x i32> %4403, i32 2
  %4426 = sext i32 %4425 to i64
  %4427 = getelementptr inbounds i8, i8* %4412, i64 %4426
  %4428 = load i8, i8* %4427, align 1
  %4429 = insertelement <16 x i8> %4424, i8 %4428, i32 2
  %4430 = extractelement <16 x i32> %4403, i32 3
  %4431 = sext i32 %4430 to i64
  %4432 = getelementptr inbounds i8, i8* %4412, i64 %4431
  %4433 = load i8, i8* %4432, align 1
  %4434 = insertelement <16 x i8> %4429, i8 %4433, i32 3
  %4435 = extractelement <16 x i32> %4403, i32 4
  %4436 = sext i32 %4435 to i64
  %4437 = getelementptr inbounds i8, i8* %4412, i64 %4436
  %4438 = load i8, i8* %4437, align 1
  %4439 = insertelement <16 x i8> %4434, i8 %4438, i32 4
  %4440 = extractelement <16 x i32> %4403, i32 5
  %4441 = sext i32 %4440 to i64
  %4442 = getelementptr inbounds i8, i8* %4412, i64 %4441
  %4443 = load i8, i8* %4442, align 1
  %4444 = insertelement <16 x i8> %4439, i8 %4443, i32 5
  %4445 = extractelement <16 x i32> %4403, i32 6
  %4446 = sext i32 %4445 to i64
  %4447 = getelementptr inbounds i8, i8* %4412, i64 %4446
  %4448 = load i8, i8* %4447, align 1
  %4449 = insertelement <16 x i8> %4444, i8 %4448, i32 6
  %4450 = extractelement <16 x i32> %4403, i32 7
  %4451 = sext i32 %4450 to i64
  %4452 = getelementptr inbounds i8, i8* %4412, i64 %4451
  %4453 = load i8, i8* %4452, align 1
  %4454 = insertelement <16 x i8> %4449, i8 %4453, i32 7
  %4455 = extractelement <16 x i32> %4403, i32 8
  %4456 = sext i32 %4455 to i64
  %4457 = getelementptr inbounds i8, i8* %4412, i64 %4456
  %4458 = load i8, i8* %4457, align 1
  %4459 = insertelement <16 x i8> %4454, i8 %4458, i32 8
  %4460 = extractelement <16 x i32> %4403, i32 9
  %4461 = sext i32 %4460 to i64
  %4462 = getelementptr inbounds i8, i8* %4412, i64 %4461
  %4463 = load i8, i8* %4462, align 1
  %4464 = insertelement <16 x i8> %4459, i8 %4463, i32 9
  %4465 = extractelement <16 x i32> %4403, i32 10
  %4466 = sext i32 %4465 to i64
  %4467 = getelementptr inbounds i8, i8* %4412, i64 %4466
  %4468 = load i8, i8* %4467, align 1
  %4469 = insertelement <16 x i8> %4464, i8 %4468, i32 10
  %4470 = extractelement <16 x i32> %4403, i32 11
  %4471 = sext i32 %4470 to i64
  %4472 = getelementptr inbounds i8, i8* %4412, i64 %4471
  %4473 = load i8, i8* %4472, align 1
  %4474 = insertelement <16 x i8> %4469, i8 %4473, i32 11
  %4475 = extractelement <16 x i32> %4403, i32 12
  %4476 = sext i32 %4475 to i64
  %4477 = getelementptr inbounds i8, i8* %4412, i64 %4476
  %4478 = load i8, i8* %4477, align 1
  %4479 = insertelement <16 x i8> %4474, i8 %4478, i32 12
  %4480 = extractelement <16 x i32> %4403, i32 13
  %4481 = sext i32 %4480 to i64
  %4482 = getelementptr inbounds i8, i8* %4412, i64 %4481
  %4483 = load i8, i8* %4482, align 1
  %4484 = insertelement <16 x i8> %4479, i8 %4483, i32 13
  %4485 = extractelement <16 x i32> %4403, i32 14
  %4486 = sext i32 %4485 to i64
  %4487 = getelementptr inbounds i8, i8* %4412, i64 %4486
  %4488 = load i8, i8* %4487, align 1
  %4489 = insertelement <16 x i8> %4484, i8 %4488, i32 14
  %4490 = extractelement <16 x i32> %4403, i32 15
  %4491 = sext i32 %4490 to i64
  %4492 = getelementptr inbounds i8, i8* %4412, i64 %4491
  %4493 = load i8, i8* %4492, align 1
  %4494 = insertelement <16 x i8> %4489, i8 %4493, i32 15
  %4495 = uitofp <16 x i8> %4494 to <16 x float>
  %4496 = fmul <16 x float> %4495, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %4497 = extractelement <16 x i32> %4408, i32 0
  %4498 = sext i32 %4497 to i64
  %4499 = getelementptr inbounds i8, i8* %4412, i64 %4498
  %4500 = load i8, i8* %4499, align 1
  %4501 = insertelement <16 x i8> undef, i8 %4500, i32 0
  %4502 = extractelement <16 x i32> %4408, i32 1
  %4503 = sext i32 %4502 to i64
  %4504 = getelementptr inbounds i8, i8* %4412, i64 %4503
  %4505 = load i8, i8* %4504, align 1
  %4506 = insertelement <16 x i8> %4501, i8 %4505, i32 1
  %4507 = extractelement <16 x i32> %4408, i32 2
  %4508 = sext i32 %4507 to i64
  %4509 = getelementptr inbounds i8, i8* %4412, i64 %4508
  %4510 = load i8, i8* %4509, align 1
  %4511 = insertelement <16 x i8> %4506, i8 %4510, i32 2
  %4512 = extractelement <16 x i32> %4408, i32 3
  %4513 = sext i32 %4512 to i64
  %4514 = getelementptr inbounds i8, i8* %4412, i64 %4513
  %4515 = load i8, i8* %4514, align 1
  %4516 = insertelement <16 x i8> %4511, i8 %4515, i32 3
  %4517 = extractelement <16 x i32> %4408, i32 4
  %4518 = sext i32 %4517 to i64
  %4519 = getelementptr inbounds i8, i8* %4412, i64 %4518
  %4520 = load i8, i8* %4519, align 1
  %4521 = insertelement <16 x i8> %4516, i8 %4520, i32 4
  %4522 = extractelement <16 x i32> %4408, i32 5
  %4523 = sext i32 %4522 to i64
  %4524 = getelementptr inbounds i8, i8* %4412, i64 %4523
  %4525 = load i8, i8* %4524, align 1
  %4526 = insertelement <16 x i8> %4521, i8 %4525, i32 5
  %4527 = extractelement <16 x i32> %4408, i32 6
  %4528 = sext i32 %4527 to i64
  %4529 = getelementptr inbounds i8, i8* %4412, i64 %4528
  %4530 = load i8, i8* %4529, align 1
  %4531 = insertelement <16 x i8> %4526, i8 %4530, i32 6
  %4532 = extractelement <16 x i32> %4408, i32 7
  %4533 = sext i32 %4532 to i64
  %4534 = getelementptr inbounds i8, i8* %4412, i64 %4533
  %4535 = load i8, i8* %4534, align 1
  %4536 = insertelement <16 x i8> %4531, i8 %4535, i32 7
  %4537 = extractelement <16 x i32> %4408, i32 8
  %4538 = sext i32 %4537 to i64
  %4539 = getelementptr inbounds i8, i8* %4412, i64 %4538
  %4540 = load i8, i8* %4539, align 1
  %4541 = insertelement <16 x i8> %4536, i8 %4540, i32 8
  %4542 = extractelement <16 x i32> %4408, i32 9
  %4543 = sext i32 %4542 to i64
  %4544 = getelementptr inbounds i8, i8* %4412, i64 %4543
  %4545 = load i8, i8* %4544, align 1
  %4546 = insertelement <16 x i8> %4541, i8 %4545, i32 9
  %4547 = extractelement <16 x i32> %4408, i32 10
  %4548 = sext i32 %4547 to i64
  %4549 = getelementptr inbounds i8, i8* %4412, i64 %4548
  %4550 = load i8, i8* %4549, align 1
  %4551 = insertelement <16 x i8> %4546, i8 %4550, i32 10
  %4552 = extractelement <16 x i32> %4408, i32 11
  %4553 = sext i32 %4552 to i64
  %4554 = getelementptr inbounds i8, i8* %4412, i64 %4553
  %4555 = load i8, i8* %4554, align 1
  %4556 = insertelement <16 x i8> %4551, i8 %4555, i32 11
  %4557 = extractelement <16 x i32> %4408, i32 12
  %4558 = sext i32 %4557 to i64
  %4559 = getelementptr inbounds i8, i8* %4412, i64 %4558
  %4560 = load i8, i8* %4559, align 1
  %4561 = insertelement <16 x i8> %4556, i8 %4560, i32 12
  %4562 = extractelement <16 x i32> %4408, i32 13
  %4563 = sext i32 %4562 to i64
  %4564 = getelementptr inbounds i8, i8* %4412, i64 %4563
  %4565 = load i8, i8* %4564, align 1
  %4566 = insertelement <16 x i8> %4561, i8 %4565, i32 13
  %4567 = extractelement <16 x i32> %4408, i32 14
  %4568 = sext i32 %4567 to i64
  %4569 = getelementptr inbounds i8, i8* %4412, i64 %4568
  %4570 = load i8, i8* %4569, align 1
  %4571 = insertelement <16 x i8> %4566, i8 %4570, i32 14
  %4572 = extractelement <16 x i32> %4408, i32 15
  %4573 = sext i32 %4572 to i64
  %4574 = getelementptr inbounds i8, i8* %4412, i64 %4573
  %4575 = load i8, i8* %4574, align 1
  %4576 = insertelement <16 x i8> %4571, i8 %4575, i32 15
  %4577 = uitofp <16 x i8> %4576 to <16 x float>
  %4578 = fmul <16 x float> %4577, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %4786

4579:                                             ; preds = %4387
  %4580 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %4390, i64 0, i32 0, i32 2
  %4581 = load i8*, i8** %4580, align 8
  %4582 = shl nsw <16 x i32> %4403, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %4583 = extractelement <16 x i32> %4582, i32 0
  %4584 = sext i32 %4583 to i64
  %4585 = getelementptr inbounds i8, i8* %4581, i64 %4584
  %4586 = bitcast i8* %4585 to i16*
  %4587 = load i16, i16* %4586, align 1
  %4588 = insertelement <16 x i16> undef, i16 %4587, i32 0
  %4589 = extractelement <16 x i32> %4582, i32 1
  %4590 = sext i32 %4589 to i64
  %4591 = getelementptr inbounds i8, i8* %4581, i64 %4590
  %4592 = bitcast i8* %4591 to i16*
  %4593 = load i16, i16* %4592, align 1
  %4594 = insertelement <16 x i16> %4588, i16 %4593, i32 1
  %4595 = extractelement <16 x i32> %4582, i32 2
  %4596 = sext i32 %4595 to i64
  %4597 = getelementptr inbounds i8, i8* %4581, i64 %4596
  %4598 = bitcast i8* %4597 to i16*
  %4599 = load i16, i16* %4598, align 1
  %4600 = insertelement <16 x i16> %4594, i16 %4599, i32 2
  %4601 = extractelement <16 x i32> %4582, i32 3
  %4602 = sext i32 %4601 to i64
  %4603 = getelementptr inbounds i8, i8* %4581, i64 %4602
  %4604 = bitcast i8* %4603 to i16*
  %4605 = load i16, i16* %4604, align 1
  %4606 = insertelement <16 x i16> %4600, i16 %4605, i32 3
  %4607 = extractelement <16 x i32> %4582, i32 4
  %4608 = sext i32 %4607 to i64
  %4609 = getelementptr inbounds i8, i8* %4581, i64 %4608
  %4610 = bitcast i8* %4609 to i16*
  %4611 = load i16, i16* %4610, align 1
  %4612 = insertelement <16 x i16> %4606, i16 %4611, i32 4
  %4613 = extractelement <16 x i32> %4582, i32 5
  %4614 = sext i32 %4613 to i64
  %4615 = getelementptr inbounds i8, i8* %4581, i64 %4614
  %4616 = bitcast i8* %4615 to i16*
  %4617 = load i16, i16* %4616, align 1
  %4618 = insertelement <16 x i16> %4612, i16 %4617, i32 5
  %4619 = extractelement <16 x i32> %4582, i32 6
  %4620 = sext i32 %4619 to i64
  %4621 = getelementptr inbounds i8, i8* %4581, i64 %4620
  %4622 = bitcast i8* %4621 to i16*
  %4623 = load i16, i16* %4622, align 1
  %4624 = insertelement <16 x i16> %4618, i16 %4623, i32 6
  %4625 = extractelement <16 x i32> %4582, i32 7
  %4626 = sext i32 %4625 to i64
  %4627 = getelementptr inbounds i8, i8* %4581, i64 %4626
  %4628 = bitcast i8* %4627 to i16*
  %4629 = load i16, i16* %4628, align 1
  %4630 = insertelement <16 x i16> %4624, i16 %4629, i32 7
  %4631 = extractelement <16 x i32> %4582, i32 8
  %4632 = sext i32 %4631 to i64
  %4633 = getelementptr inbounds i8, i8* %4581, i64 %4632
  %4634 = bitcast i8* %4633 to i16*
  %4635 = load i16, i16* %4634, align 1
  %4636 = insertelement <16 x i16> %4630, i16 %4635, i32 8
  %4637 = extractelement <16 x i32> %4582, i32 9
  %4638 = sext i32 %4637 to i64
  %4639 = getelementptr inbounds i8, i8* %4581, i64 %4638
  %4640 = bitcast i8* %4639 to i16*
  %4641 = load i16, i16* %4640, align 1
  %4642 = insertelement <16 x i16> %4636, i16 %4641, i32 9
  %4643 = extractelement <16 x i32> %4582, i32 10
  %4644 = sext i32 %4643 to i64
  %4645 = getelementptr inbounds i8, i8* %4581, i64 %4644
  %4646 = bitcast i8* %4645 to i16*
  %4647 = load i16, i16* %4646, align 1
  %4648 = insertelement <16 x i16> %4642, i16 %4647, i32 10
  %4649 = extractelement <16 x i32> %4582, i32 11
  %4650 = sext i32 %4649 to i64
  %4651 = getelementptr inbounds i8, i8* %4581, i64 %4650
  %4652 = bitcast i8* %4651 to i16*
  %4653 = load i16, i16* %4652, align 1
  %4654 = insertelement <16 x i16> %4648, i16 %4653, i32 11
  %4655 = extractelement <16 x i32> %4582, i32 12
  %4656 = sext i32 %4655 to i64
  %4657 = getelementptr inbounds i8, i8* %4581, i64 %4656
  %4658 = bitcast i8* %4657 to i16*
  %4659 = load i16, i16* %4658, align 1
  %4660 = insertelement <16 x i16> %4654, i16 %4659, i32 12
  %4661 = extractelement <16 x i32> %4582, i32 13
  %4662 = sext i32 %4661 to i64
  %4663 = getelementptr inbounds i8, i8* %4581, i64 %4662
  %4664 = bitcast i8* %4663 to i16*
  %4665 = load i16, i16* %4664, align 1
  %4666 = insertelement <16 x i16> %4660, i16 %4665, i32 13
  %4667 = extractelement <16 x i32> %4582, i32 14
  %4668 = sext i32 %4667 to i64
  %4669 = getelementptr inbounds i8, i8* %4581, i64 %4668
  %4670 = bitcast i8* %4669 to i16*
  %4671 = load i16, i16* %4670, align 1
  %4672 = insertelement <16 x i16> %4666, i16 %4671, i32 14
  %4673 = extractelement <16 x i32> %4582, i32 15
  %4674 = sext i32 %4673 to i64
  %4675 = getelementptr inbounds i8, i8* %4581, i64 %4674
  %4676 = bitcast i8* %4675 to i16*
  %4677 = load i16, i16* %4676, align 1
  %4678 = insertelement <16 x i16> %4672, i16 %4677, i32 15
  %4679 = lshr <16 x i16> %4678, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %4680 = shl <16 x i16> %4678, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %4681 = or <16 x i16> %4679, %4680
  %4682 = uitofp <16 x i16> %4681 to <16 x float>
  %4683 = fmul <16 x float> %4682, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %4684 = shl nsw <16 x i32> %4408, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %4685 = extractelement <16 x i32> %4684, i32 0
  %4686 = sext i32 %4685 to i64
  %4687 = getelementptr inbounds i8, i8* %4581, i64 %4686
  %4688 = bitcast i8* %4687 to i16*
  %4689 = load i16, i16* %4688, align 1
  %4690 = insertelement <16 x i16> undef, i16 %4689, i32 0
  %4691 = extractelement <16 x i32> %4684, i32 1
  %4692 = sext i32 %4691 to i64
  %4693 = getelementptr inbounds i8, i8* %4581, i64 %4692
  %4694 = bitcast i8* %4693 to i16*
  %4695 = load i16, i16* %4694, align 1
  %4696 = insertelement <16 x i16> %4690, i16 %4695, i32 1
  %4697 = extractelement <16 x i32> %4684, i32 2
  %4698 = sext i32 %4697 to i64
  %4699 = getelementptr inbounds i8, i8* %4581, i64 %4698
  %4700 = bitcast i8* %4699 to i16*
  %4701 = load i16, i16* %4700, align 1
  %4702 = insertelement <16 x i16> %4696, i16 %4701, i32 2
  %4703 = extractelement <16 x i32> %4684, i32 3
  %4704 = sext i32 %4703 to i64
  %4705 = getelementptr inbounds i8, i8* %4581, i64 %4704
  %4706 = bitcast i8* %4705 to i16*
  %4707 = load i16, i16* %4706, align 1
  %4708 = insertelement <16 x i16> %4702, i16 %4707, i32 3
  %4709 = extractelement <16 x i32> %4684, i32 4
  %4710 = sext i32 %4709 to i64
  %4711 = getelementptr inbounds i8, i8* %4581, i64 %4710
  %4712 = bitcast i8* %4711 to i16*
  %4713 = load i16, i16* %4712, align 1
  %4714 = insertelement <16 x i16> %4708, i16 %4713, i32 4
  %4715 = extractelement <16 x i32> %4684, i32 5
  %4716 = sext i32 %4715 to i64
  %4717 = getelementptr inbounds i8, i8* %4581, i64 %4716
  %4718 = bitcast i8* %4717 to i16*
  %4719 = load i16, i16* %4718, align 1
  %4720 = insertelement <16 x i16> %4714, i16 %4719, i32 5
  %4721 = extractelement <16 x i32> %4684, i32 6
  %4722 = sext i32 %4721 to i64
  %4723 = getelementptr inbounds i8, i8* %4581, i64 %4722
  %4724 = bitcast i8* %4723 to i16*
  %4725 = load i16, i16* %4724, align 1
  %4726 = insertelement <16 x i16> %4720, i16 %4725, i32 6
  %4727 = extractelement <16 x i32> %4684, i32 7
  %4728 = sext i32 %4727 to i64
  %4729 = getelementptr inbounds i8, i8* %4581, i64 %4728
  %4730 = bitcast i8* %4729 to i16*
  %4731 = load i16, i16* %4730, align 1
  %4732 = insertelement <16 x i16> %4726, i16 %4731, i32 7
  %4733 = extractelement <16 x i32> %4684, i32 8
  %4734 = sext i32 %4733 to i64
  %4735 = getelementptr inbounds i8, i8* %4581, i64 %4734
  %4736 = bitcast i8* %4735 to i16*
  %4737 = load i16, i16* %4736, align 1
  %4738 = insertelement <16 x i16> %4732, i16 %4737, i32 8
  %4739 = extractelement <16 x i32> %4684, i32 9
  %4740 = sext i32 %4739 to i64
  %4741 = getelementptr inbounds i8, i8* %4581, i64 %4740
  %4742 = bitcast i8* %4741 to i16*
  %4743 = load i16, i16* %4742, align 1
  %4744 = insertelement <16 x i16> %4738, i16 %4743, i32 9
  %4745 = extractelement <16 x i32> %4684, i32 10
  %4746 = sext i32 %4745 to i64
  %4747 = getelementptr inbounds i8, i8* %4581, i64 %4746
  %4748 = bitcast i8* %4747 to i16*
  %4749 = load i16, i16* %4748, align 1
  %4750 = insertelement <16 x i16> %4744, i16 %4749, i32 10
  %4751 = extractelement <16 x i32> %4684, i32 11
  %4752 = sext i32 %4751 to i64
  %4753 = getelementptr inbounds i8, i8* %4581, i64 %4752
  %4754 = bitcast i8* %4753 to i16*
  %4755 = load i16, i16* %4754, align 1
  %4756 = insertelement <16 x i16> %4750, i16 %4755, i32 11
  %4757 = extractelement <16 x i32> %4684, i32 12
  %4758 = sext i32 %4757 to i64
  %4759 = getelementptr inbounds i8, i8* %4581, i64 %4758
  %4760 = bitcast i8* %4759 to i16*
  %4761 = load i16, i16* %4760, align 1
  %4762 = insertelement <16 x i16> %4756, i16 %4761, i32 12
  %4763 = extractelement <16 x i32> %4684, i32 13
  %4764 = sext i32 %4763 to i64
  %4765 = getelementptr inbounds i8, i8* %4581, i64 %4764
  %4766 = bitcast i8* %4765 to i16*
  %4767 = load i16, i16* %4766, align 1
  %4768 = insertelement <16 x i16> %4762, i16 %4767, i32 13
  %4769 = extractelement <16 x i32> %4684, i32 14
  %4770 = sext i32 %4769 to i64
  %4771 = getelementptr inbounds i8, i8* %4581, i64 %4770
  %4772 = bitcast i8* %4771 to i16*
  %4773 = load i16, i16* %4772, align 1
  %4774 = insertelement <16 x i16> %4768, i16 %4773, i32 14
  %4775 = extractelement <16 x i32> %4684, i32 15
  %4776 = sext i32 %4775 to i64
  %4777 = getelementptr inbounds i8, i8* %4581, i64 %4776
  %4778 = bitcast i8* %4777 to i16*
  %4779 = load i16, i16* %4778, align 1
  %4780 = insertelement <16 x i16> %4774, i16 %4779, i32 15
  %4781 = lshr <16 x i16> %4780, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %4782 = shl <16 x i16> %4780, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %4783 = or <16 x i16> %4781, %4782
  %4784 = uitofp <16 x i16> %4783 to <16 x float>
  %4785 = fmul <16 x float> %4784, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %4786

4786:                                             ; preds = %4414, %4579
  %4787 = phi <16 x float> [ %4496, %4414 ], [ %4683, %4579 ]
  %4788 = phi <16 x float> [ %4578, %4414 ], [ %4785, %4579 ]
  %4789 = fsub <16 x float> %4788, %4787
  %4790 = fmul <16 x float> %4410, %4789
  %4791 = fadd <16 x float> %4787, %4790
  store <16 x float> %4791, <16 x float>* %10, align 64
  br label %4808

4792:                                             ; preds = %411
  %4793 = getelementptr inbounds i8*, i8** %412, i64 1
  %4794 = bitcast i8** %412 to %struct.skcms_A2B**
  %4795 = load %struct.skcms_A2B*, %struct.skcms_A2B** %4794, align 8
  %4796 = load <16 x float>, <16 x float>* %10, align 64
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %15)
  store <16 x float> %4796, <16 x float>* %6, align 64
  %4797 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %4795, i64 0, i32 0
  %4798 = load i32, i32* %4797, align 8
  %4799 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %4795, i64 0, i32 8
  %4800 = load i32, i32* %4799, align 8
  %4801 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %4795, i64 0, i32 2, i64 0
  %4802 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %4795, i64 0, i32 3
  %4803 = load i8*, i8** %4802, align 8
  %4804 = getelementptr inbounds %struct.skcms_A2B, %struct.skcms_A2B* %4795, i64 0, i32 4
  %4805 = load i8*, i8** %4804, align 8
  call fastcc void @_ZN3skxL4clutEjjPKhS1_S1_PDv16_fS3_S3_S3_(i32 %4798, i32 %4800, i8* %4801, i8* %4803, i8* %4805, <16 x float>* nonnull %7, <16 x float>* nonnull %8, <16 x float>* nonnull %9, <16 x float>* nonnull %6) #17
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %15)
  %4806 = load i32, i32* %4797, align 8
  %4807 = icmp eq i32 %4806, 4
  br i1 %4807, label %4810, label %4808

4808:                                             ; preds = %4792, %4810, %411, %4811, %4786, %4381, %3976, %3571, %3087, %3002, %2917, %2832, %2746, %2660, %2574, %2488, %2390, %2292, %2194, %2096, %2021, %1946, %1871, %1796, %1677, %1642, %1569, %1511, %1500, %1492, %1491, %1482, %1461, %1458, %1329, %1232, %1219, %1119, %1098, %932, %916, %765, %749, %618, %602, %451, %440, %424, %420, %416
  %4809 = phi i8** [ %412, %411 ], [ %4812, %4811 ], [ %4793, %4810 ], [ %4793, %4792 ], [ %4388, %4786 ], [ %3983, %4381 ], [ %3578, %3976 ], [ %3173, %3571 ], [ %3088, %3087 ], [ %3003, %3002 ], [ %2918, %2917 ], [ %2833, %2832 ], [ %2747, %2746 ], [ %2661, %2660 ], [ %2575, %2574 ], [ %2489, %2488 ], [ %2391, %2390 ], [ %2293, %2292 ], [ %2195, %2194 ], [ %2097, %2096 ], [ %2022, %2021 ], [ %1947, %1946 ], [ %1872, %1871 ], [ %1797, %1796 ], [ %412, %1677 ], [ %412, %1642 ], [ %1570, %1569 ], [ %1512, %1511 ], [ %412, %1500 ], [ %412, %1492 ], [ %412, %1491 ], [ %412, %1482 ], [ %412, %1461 ], [ %412, %1458 ], [ %412, %1329 ], [ %412, %1232 ], [ %412, %1219 ], [ %412, %1119 ], [ %412, %1098 ], [ %412, %932 ], [ %412, %916 ], [ %412, %765 ], [ %412, %749 ], [ %619, %618 ], [ %412, %602 ], [ %412, %451 ], [ %412, %440 ], [ %412, %424 ], [ %412, %420 ], [ %412, %416 ]
  br label %411

4810:                                             ; preds = %4792
  store <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float>* %10, align 64
  br label %4808

4811:                                             ; preds = %411
  %4812 = getelementptr inbounds i8*, i8** %412, i64 1
  %4813 = bitcast i8** %412 to %struct.skcms_B2A**
  %4814 = load %struct.skcms_B2A*, %struct.skcms_B2A** %4813, align 8
  %4815 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %4814, i64 0, i32 0
  %4816 = load i32, i32* %4815, align 8
  %4817 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %4814, i64 0, i32 5
  %4818 = load i32, i32* %4817, align 8
  %4819 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %4814, i64 0, i32 6, i64 0
  %4820 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %4814, i64 0, i32 7
  %4821 = load i8*, i8** %4820, align 8
  %4822 = getelementptr inbounds %struct.skcms_B2A, %struct.skcms_B2A* %4814, i64 0, i32 8
  %4823 = load i8*, i8** %4822, align 8
  call fastcc void @_ZN3skxL4clutEjjPKhS1_S1_PDv16_fS3_S3_S3_(i32 %4816, i32 %4818, i8* %4819, i8* %4821, i8* %4823, <16 x float>* nonnull %7, <16 x float>* nonnull %8, <16 x float>* nonnull %9, <16 x float>* nonnull %10) #17
  br label %4808

4824:                                             ; preds = %411
  %4825 = getelementptr inbounds i8, i8* %3, i64 %354
  %4826 = load <16 x float>, <16 x float>* %10, align 64
  %4827 = fmul <16 x float> %4826, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %4828 = fadd <16 x float> %4827, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %4829 = fptosi <16 x float> %4828 to <16 x i32>
  %4830 = trunc <16 x i32> %4829 to <16 x i8>
  %4831 = bitcast i8* %4825 to <16 x i8>*
  store <16 x i8> %4830, <16 x i8>* %4831, align 1
  br label %5957

4832:                                             ; preds = %411
  %4833 = getelementptr inbounds i8, i8* %3, i64 %354
  %4834 = load <16 x float>, <16 x float>* %8, align 64
  %4835 = fmul <16 x float> %4834, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %4836 = fadd <16 x float> %4835, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %4837 = fptosi <16 x float> %4836 to <16 x i32>
  %4838 = trunc <16 x i32> %4837 to <16 x i8>
  %4839 = bitcast i8* %4833 to <16 x i8>*
  store <16 x i8> %4838, <16 x i8>* %4839, align 1
  br label %5957

4840:                                             ; preds = %411
  %4841 = getelementptr inbounds i8, i8* %3, i64 %408
  %4842 = load <16 x float>, <16 x float>* %7, align 64
  %4843 = fmul <16 x float> %4842, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %4844 = fadd <16 x float> %4843, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %4845 = fptosi <16 x float> %4844 to <16 x i32>
  %4846 = shl <16 x i32> %4845, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %4847 = load <16 x float>, <16 x float>* %8, align 64
  %4848 = fmul <16 x float> %4847, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %4849 = fadd <16 x float> %4848, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %4850 = fptosi <16 x float> %4849 to <16 x i32>
  %4851 = shl <16 x i32> %4850, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %4852 = or <16 x i32> %4851, %4846
  %4853 = load <16 x float>, <16 x float>* %9, align 64
  %4854 = fmul <16 x float> %4853, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %4855 = fadd <16 x float> %4854, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %4856 = fptosi <16 x float> %4855 to <16 x i32>
  %4857 = shl <16 x i32> %4856, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %4858 = or <16 x i32> %4852, %4857
  %4859 = load <16 x float>, <16 x float>* %10, align 64
  %4860 = fmul <16 x float> %4859, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %4861 = fadd <16 x float> %4860, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %4862 = fptosi <16 x float> %4861 to <16 x i32>
  %4863 = or <16 x i32> %4858, %4862
  %4864 = trunc <16 x i32> %4863 to <16 x i16>
  %4865 = bitcast i8* %4841 to <16 x i16>*
  store <16 x i16> %4864, <16 x i16>* %4865, align 1
  br label %5957

4866:                                             ; preds = %411
  %4867 = getelementptr inbounds i8, i8* %3, i64 %408
  %4868 = load <16 x float>, <16 x float>* %7, align 64
  %4869 = fmul <16 x float> %4868, <float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01>
  %4870 = fadd <16 x float> %4869, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %4871 = fptosi <16 x float> %4870 to <16 x i32>
  %4872 = load <16 x float>, <16 x float>* %8, align 64
  %4873 = fmul <16 x float> %4872, <float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01>
  %4874 = fadd <16 x float> %4873, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %4875 = fptosi <16 x float> %4874 to <16 x i32>
  %4876 = shl <16 x i32> %4875, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %4877 = or <16 x i32> %4876, %4871
  %4878 = load <16 x float>, <16 x float>* %9, align 64
  %4879 = fmul <16 x float> %4878, <float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01>
  %4880 = fadd <16 x float> %4879, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %4881 = fptosi <16 x float> %4880 to <16 x i32>
  %4882 = shl <16 x i32> %4881, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %4883 = or <16 x i32> %4877, %4882
  %4884 = trunc <16 x i32> %4883 to <16 x i16>
  %4885 = bitcast i8* %4867 to <16 x i16>*
  store <16 x i16> %4884, <16 x i16>* %4885, align 1
  br label %5957

4886:                                             ; preds = %411
  %4887 = getelementptr inbounds i8, i8* %3, i64 %358
  %4888 = load <16 x float>, <16 x float>* %7, align 64
  %4889 = fmul <16 x float> %4888, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %4890 = fadd <16 x float> %4889, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %4891 = fptosi <16 x float> %4890 to <16 x i32>
  %4892 = trunc <16 x i32> %4891 to <16 x i8>
  %4893 = extractelement <16 x i8> %4892, i32 0
  store i8 %4893, i8* %4887, align 1
  %4894 = extractelement <16 x i8> %4892, i32 1
  %4895 = getelementptr inbounds i8, i8* %4887, i64 3
  store i8 %4894, i8* %4895, align 1
  %4896 = extractelement <16 x i8> %4892, i32 2
  %4897 = getelementptr inbounds i8, i8* %4887, i64 6
  store i8 %4896, i8* %4897, align 1
  %4898 = extractelement <16 x i8> %4892, i32 3
  %4899 = getelementptr inbounds i8, i8* %4887, i64 9
  store i8 %4898, i8* %4899, align 1
  %4900 = extractelement <16 x i8> %4892, i32 4
  %4901 = getelementptr inbounds i8, i8* %4887, i64 12
  store i8 %4900, i8* %4901, align 1
  %4902 = extractelement <16 x i8> %4892, i32 5
  %4903 = getelementptr inbounds i8, i8* %4887, i64 15
  store i8 %4902, i8* %4903, align 1
  %4904 = extractelement <16 x i8> %4892, i32 6
  %4905 = getelementptr inbounds i8, i8* %4887, i64 18
  store i8 %4904, i8* %4905, align 1
  %4906 = extractelement <16 x i8> %4892, i32 7
  %4907 = getelementptr inbounds i8, i8* %4887, i64 21
  store i8 %4906, i8* %4907, align 1
  %4908 = extractelement <16 x i8> %4892, i32 8
  %4909 = getelementptr inbounds i8, i8* %4887, i64 24
  store i8 %4908, i8* %4909, align 1
  %4910 = extractelement <16 x i8> %4892, i32 9
  %4911 = getelementptr inbounds i8, i8* %4887, i64 27
  store i8 %4910, i8* %4911, align 1
  %4912 = extractelement <16 x i8> %4892, i32 10
  %4913 = getelementptr inbounds i8, i8* %4887, i64 30
  store i8 %4912, i8* %4913, align 1
  %4914 = extractelement <16 x i8> %4892, i32 11
  %4915 = getelementptr inbounds i8, i8* %4887, i64 33
  store i8 %4914, i8* %4915, align 1
  %4916 = extractelement <16 x i8> %4892, i32 12
  %4917 = getelementptr inbounds i8, i8* %4887, i64 36
  store i8 %4916, i8* %4917, align 1
  %4918 = extractelement <16 x i8> %4892, i32 13
  %4919 = getelementptr inbounds i8, i8* %4887, i64 39
  store i8 %4918, i8* %4919, align 1
  %4920 = extractelement <16 x i8> %4892, i32 14
  %4921 = getelementptr inbounds i8, i8* %4887, i64 42
  store i8 %4920, i8* %4921, align 1
  %4922 = extractelement <16 x i8> %4892, i32 15
  %4923 = getelementptr inbounds i8, i8* %4887, i64 45
  store i8 %4922, i8* %4923, align 1
  %4924 = getelementptr inbounds i8, i8* %4887, i64 1
  %4925 = load <16 x float>, <16 x float>* %8, align 64
  %4926 = fmul <16 x float> %4925, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %4927 = fadd <16 x float> %4926, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %4928 = fptosi <16 x float> %4927 to <16 x i32>
  %4929 = trunc <16 x i32> %4928 to <16 x i8>
  %4930 = extractelement <16 x i8> %4929, i32 0
  store i8 %4930, i8* %4924, align 1
  %4931 = extractelement <16 x i8> %4929, i32 1
  %4932 = getelementptr inbounds i8, i8* %4924, i64 3
  store i8 %4931, i8* %4932, align 1
  %4933 = extractelement <16 x i8> %4929, i32 2
  %4934 = getelementptr inbounds i8, i8* %4924, i64 6
  store i8 %4933, i8* %4934, align 1
  %4935 = extractelement <16 x i8> %4929, i32 3
  %4936 = getelementptr inbounds i8, i8* %4924, i64 9
  store i8 %4935, i8* %4936, align 1
  %4937 = extractelement <16 x i8> %4929, i32 4
  %4938 = getelementptr inbounds i8, i8* %4924, i64 12
  store i8 %4937, i8* %4938, align 1
  %4939 = extractelement <16 x i8> %4929, i32 5
  %4940 = getelementptr inbounds i8, i8* %4924, i64 15
  store i8 %4939, i8* %4940, align 1
  %4941 = extractelement <16 x i8> %4929, i32 6
  %4942 = getelementptr inbounds i8, i8* %4924, i64 18
  store i8 %4941, i8* %4942, align 1
  %4943 = extractelement <16 x i8> %4929, i32 7
  %4944 = getelementptr inbounds i8, i8* %4924, i64 21
  store i8 %4943, i8* %4944, align 1
  %4945 = extractelement <16 x i8> %4929, i32 8
  %4946 = getelementptr inbounds i8, i8* %4924, i64 24
  store i8 %4945, i8* %4946, align 1
  %4947 = extractelement <16 x i8> %4929, i32 9
  %4948 = getelementptr inbounds i8, i8* %4924, i64 27
  store i8 %4947, i8* %4948, align 1
  %4949 = extractelement <16 x i8> %4929, i32 10
  %4950 = getelementptr inbounds i8, i8* %4924, i64 30
  store i8 %4949, i8* %4950, align 1
  %4951 = extractelement <16 x i8> %4929, i32 11
  %4952 = getelementptr inbounds i8, i8* %4924, i64 33
  store i8 %4951, i8* %4952, align 1
  %4953 = extractelement <16 x i8> %4929, i32 12
  %4954 = getelementptr inbounds i8, i8* %4924, i64 36
  store i8 %4953, i8* %4954, align 1
  %4955 = extractelement <16 x i8> %4929, i32 13
  %4956 = getelementptr inbounds i8, i8* %4924, i64 39
  store i8 %4955, i8* %4956, align 1
  %4957 = extractelement <16 x i8> %4929, i32 14
  %4958 = getelementptr inbounds i8, i8* %4924, i64 42
  store i8 %4957, i8* %4958, align 1
  %4959 = extractelement <16 x i8> %4929, i32 15
  %4960 = getelementptr inbounds i8, i8* %4924, i64 45
  store i8 %4959, i8* %4960, align 1
  %4961 = getelementptr inbounds i8, i8* %4887, i64 2
  %4962 = load <16 x float>, <16 x float>* %9, align 64
  %4963 = fmul <16 x float> %4962, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %4964 = fadd <16 x float> %4963, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %4965 = fptosi <16 x float> %4964 to <16 x i32>
  %4966 = trunc <16 x i32> %4965 to <16 x i8>
  %4967 = extractelement <16 x i8> %4966, i32 0
  store i8 %4967, i8* %4961, align 1
  %4968 = extractelement <16 x i8> %4966, i32 1
  %4969 = getelementptr inbounds i8, i8* %4961, i64 3
  store i8 %4968, i8* %4969, align 1
  %4970 = extractelement <16 x i8> %4966, i32 2
  %4971 = getelementptr inbounds i8, i8* %4961, i64 6
  store i8 %4970, i8* %4971, align 1
  %4972 = extractelement <16 x i8> %4966, i32 3
  %4973 = getelementptr inbounds i8, i8* %4961, i64 9
  store i8 %4972, i8* %4973, align 1
  %4974 = extractelement <16 x i8> %4966, i32 4
  %4975 = getelementptr inbounds i8, i8* %4961, i64 12
  store i8 %4974, i8* %4975, align 1
  %4976 = extractelement <16 x i8> %4966, i32 5
  %4977 = getelementptr inbounds i8, i8* %4961, i64 15
  store i8 %4976, i8* %4977, align 1
  %4978 = extractelement <16 x i8> %4966, i32 6
  %4979 = getelementptr inbounds i8, i8* %4961, i64 18
  store i8 %4978, i8* %4979, align 1
  %4980 = extractelement <16 x i8> %4966, i32 7
  %4981 = getelementptr inbounds i8, i8* %4961, i64 21
  store i8 %4980, i8* %4981, align 1
  %4982 = extractelement <16 x i8> %4966, i32 8
  %4983 = getelementptr inbounds i8, i8* %4961, i64 24
  store i8 %4982, i8* %4983, align 1
  %4984 = extractelement <16 x i8> %4966, i32 9
  %4985 = getelementptr inbounds i8, i8* %4961, i64 27
  store i8 %4984, i8* %4985, align 1
  %4986 = extractelement <16 x i8> %4966, i32 10
  %4987 = getelementptr inbounds i8, i8* %4961, i64 30
  store i8 %4986, i8* %4987, align 1
  %4988 = extractelement <16 x i8> %4966, i32 11
  %4989 = getelementptr inbounds i8, i8* %4961, i64 33
  store i8 %4988, i8* %4989, align 1
  %4990 = extractelement <16 x i8> %4966, i32 12
  %4991 = getelementptr inbounds i8, i8* %4961, i64 36
  store i8 %4990, i8* %4991, align 1
  %4992 = extractelement <16 x i8> %4966, i32 13
  %4993 = getelementptr inbounds i8, i8* %4961, i64 39
  store i8 %4992, i8* %4993, align 1
  %4994 = extractelement <16 x i8> %4966, i32 14
  %4995 = getelementptr inbounds i8, i8* %4961, i64 42
  store i8 %4994, i8* %4995, align 1
  %4996 = extractelement <16 x i8> %4966, i32 15
  %4997 = getelementptr inbounds i8, i8* %4961, i64 45
  store i8 %4996, i8* %4997, align 1
  br label %5957

4998:                                             ; preds = %411
  %4999 = getelementptr inbounds i8, i8* %3, i64 %351
  %5000 = load <16 x float>, <16 x float>* %7, align 64
  %5001 = fmul <16 x float> %5000, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %5002 = fadd <16 x float> %5001, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5003 = fptosi <16 x float> %5002 to <16 x i32>
  %5004 = load <16 x float>, <16 x float>* %8, align 64
  %5005 = fmul <16 x float> %5004, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %5006 = fadd <16 x float> %5005, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5007 = fptosi <16 x float> %5006 to <16 x i32>
  %5008 = shl <16 x i32> %5007, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %5009 = or <16 x i32> %5008, %5003
  %5010 = load <16 x float>, <16 x float>* %9, align 64
  %5011 = fmul <16 x float> %5010, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %5012 = fadd <16 x float> %5011, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5013 = fptosi <16 x float> %5012 to <16 x i32>
  %5014 = shl <16 x i32> %5013, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %5015 = or <16 x i32> %5009, %5014
  %5016 = load <16 x float>, <16 x float>* %10, align 64
  %5017 = fmul <16 x float> %5016, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %5018 = fadd <16 x float> %5017, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5019 = fptosi <16 x float> %5018 to <16 x i32>
  %5020 = shl <16 x i32> %5019, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %5021 = or <16 x i32> %5015, %5020
  %5022 = bitcast i8* %4999 to <16 x i32>*
  store <16 x i32> %5021, <16 x i32>* %5022, align 1
  br label %5957

5023:                                             ; preds = %411
  %5024 = getelementptr inbounds i8, i8* %3, i64 %351
  %5025 = load <16 x float>, <16 x float>* %7, align 64
  %5026 = fmul <16 x float> %5025, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %5027 = fadd <16 x float> %5026, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5028 = fptosi <16 x float> %5027 to <16 x i32>
  %5029 = load <16 x float>, <16 x float>* %8, align 64
  %5030 = fmul <16 x float> %5029, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %5031 = fadd <16 x float> %5030, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5032 = fptosi <16 x float> %5031 to <16 x i32>
  %5033 = shl <16 x i32> %5032, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %5034 = or <16 x i32> %5033, %5028
  %5035 = load <16 x float>, <16 x float>* %9, align 64
  %5036 = fmul <16 x float> %5035, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %5037 = fadd <16 x float> %5036, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5038 = fptosi <16 x float> %5037 to <16 x i32>
  %5039 = shl <16 x i32> %5038, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %5040 = or <16 x i32> %5034, %5039
  %5041 = load <16 x float>, <16 x float>* %10, align 64
  %5042 = fmul <16 x float> %5041, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %5043 = fadd <16 x float> %5042, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5044 = fptosi <16 x float> %5043 to <16 x i32>
  %5045 = shl <16 x i32> %5044, <i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30>
  %5046 = or <16 x i32> %5040, %5045
  %5047 = bitcast i8* %5024 to <16 x i32>*
  store <16 x i32> %5046, <16 x i32>* %5047, align 1
  br label %5957

5048:                                             ; preds = %411
  %5049 = getelementptr inbounds i8, i8* %3, i64 %253
  %5050 = bitcast i8* %5049 to i16*
  %5051 = load <16 x float>, <16 x float>* %7, align 64
  %5052 = fmul <16 x float> %5051, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %5053 = fadd <16 x float> %5052, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5054 = fptoui <16 x float> %5053 to <16 x i16>
  %5055 = extractelement <16 x i16> %5054, i32 0
  store i16 %5055, i16* %5050, align 2
  %5056 = extractelement <16 x i16> %5054, i32 1
  %5057 = getelementptr inbounds i8, i8* %5049, i64 6
  %5058 = bitcast i8* %5057 to i16*
  store i16 %5056, i16* %5058, align 2
  %5059 = extractelement <16 x i16> %5054, i32 2
  %5060 = getelementptr inbounds i8, i8* %5049, i64 12
  %5061 = bitcast i8* %5060 to i16*
  store i16 %5059, i16* %5061, align 2
  %5062 = extractelement <16 x i16> %5054, i32 3
  %5063 = getelementptr inbounds i8, i8* %5049, i64 18
  %5064 = bitcast i8* %5063 to i16*
  store i16 %5062, i16* %5064, align 2
  %5065 = extractelement <16 x i16> %5054, i32 4
  %5066 = getelementptr inbounds i8, i8* %5049, i64 24
  %5067 = bitcast i8* %5066 to i16*
  store i16 %5065, i16* %5067, align 2
  %5068 = extractelement <16 x i16> %5054, i32 5
  %5069 = getelementptr inbounds i8, i8* %5049, i64 30
  %5070 = bitcast i8* %5069 to i16*
  store i16 %5068, i16* %5070, align 2
  %5071 = extractelement <16 x i16> %5054, i32 6
  %5072 = getelementptr inbounds i8, i8* %5049, i64 36
  %5073 = bitcast i8* %5072 to i16*
  store i16 %5071, i16* %5073, align 2
  %5074 = extractelement <16 x i16> %5054, i32 7
  %5075 = getelementptr inbounds i8, i8* %5049, i64 42
  %5076 = bitcast i8* %5075 to i16*
  store i16 %5074, i16* %5076, align 2
  %5077 = extractelement <16 x i16> %5054, i32 8
  %5078 = getelementptr inbounds i8, i8* %5049, i64 48
  %5079 = bitcast i8* %5078 to i16*
  store i16 %5077, i16* %5079, align 2
  %5080 = extractelement <16 x i16> %5054, i32 9
  %5081 = getelementptr inbounds i8, i8* %5049, i64 54
  %5082 = bitcast i8* %5081 to i16*
  store i16 %5080, i16* %5082, align 2
  %5083 = extractelement <16 x i16> %5054, i32 10
  %5084 = getelementptr inbounds i8, i8* %5049, i64 60
  %5085 = bitcast i8* %5084 to i16*
  store i16 %5083, i16* %5085, align 2
  %5086 = extractelement <16 x i16> %5054, i32 11
  %5087 = getelementptr inbounds i8, i8* %5049, i64 66
  %5088 = bitcast i8* %5087 to i16*
  store i16 %5086, i16* %5088, align 2
  %5089 = extractelement <16 x i16> %5054, i32 12
  %5090 = getelementptr inbounds i8, i8* %5049, i64 72
  %5091 = bitcast i8* %5090 to i16*
  store i16 %5089, i16* %5091, align 2
  %5092 = extractelement <16 x i16> %5054, i32 13
  %5093 = getelementptr inbounds i8, i8* %5049, i64 78
  %5094 = bitcast i8* %5093 to i16*
  store i16 %5092, i16* %5094, align 2
  %5095 = extractelement <16 x i16> %5054, i32 14
  %5096 = getelementptr inbounds i8, i8* %5049, i64 84
  %5097 = bitcast i8* %5096 to i16*
  store i16 %5095, i16* %5097, align 2
  %5098 = extractelement <16 x i16> %5054, i32 15
  %5099 = getelementptr inbounds i8, i8* %5049, i64 90
  %5100 = bitcast i8* %5099 to i16*
  store i16 %5098, i16* %5100, align 2
  %5101 = getelementptr inbounds i8, i8* %5049, i64 2
  %5102 = bitcast i8* %5101 to i16*
  %5103 = load <16 x float>, <16 x float>* %8, align 64
  %5104 = fmul <16 x float> %5103, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %5105 = fadd <16 x float> %5104, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5106 = fptoui <16 x float> %5105 to <16 x i16>
  %5107 = extractelement <16 x i16> %5106, i32 0
  store i16 %5107, i16* %5102, align 2
  %5108 = extractelement <16 x i16> %5106, i32 1
  %5109 = getelementptr inbounds i8, i8* %5101, i64 6
  %5110 = bitcast i8* %5109 to i16*
  store i16 %5108, i16* %5110, align 2
  %5111 = extractelement <16 x i16> %5106, i32 2
  %5112 = getelementptr inbounds i8, i8* %5101, i64 12
  %5113 = bitcast i8* %5112 to i16*
  store i16 %5111, i16* %5113, align 2
  %5114 = extractelement <16 x i16> %5106, i32 3
  %5115 = getelementptr inbounds i8, i8* %5101, i64 18
  %5116 = bitcast i8* %5115 to i16*
  store i16 %5114, i16* %5116, align 2
  %5117 = extractelement <16 x i16> %5106, i32 4
  %5118 = getelementptr inbounds i8, i8* %5101, i64 24
  %5119 = bitcast i8* %5118 to i16*
  store i16 %5117, i16* %5119, align 2
  %5120 = extractelement <16 x i16> %5106, i32 5
  %5121 = getelementptr inbounds i8, i8* %5101, i64 30
  %5122 = bitcast i8* %5121 to i16*
  store i16 %5120, i16* %5122, align 2
  %5123 = extractelement <16 x i16> %5106, i32 6
  %5124 = getelementptr inbounds i8, i8* %5101, i64 36
  %5125 = bitcast i8* %5124 to i16*
  store i16 %5123, i16* %5125, align 2
  %5126 = extractelement <16 x i16> %5106, i32 7
  %5127 = getelementptr inbounds i8, i8* %5101, i64 42
  %5128 = bitcast i8* %5127 to i16*
  store i16 %5126, i16* %5128, align 2
  %5129 = extractelement <16 x i16> %5106, i32 8
  %5130 = getelementptr inbounds i8, i8* %5101, i64 48
  %5131 = bitcast i8* %5130 to i16*
  store i16 %5129, i16* %5131, align 2
  %5132 = extractelement <16 x i16> %5106, i32 9
  %5133 = getelementptr inbounds i8, i8* %5101, i64 54
  %5134 = bitcast i8* %5133 to i16*
  store i16 %5132, i16* %5134, align 2
  %5135 = extractelement <16 x i16> %5106, i32 10
  %5136 = getelementptr inbounds i8, i8* %5101, i64 60
  %5137 = bitcast i8* %5136 to i16*
  store i16 %5135, i16* %5137, align 2
  %5138 = extractelement <16 x i16> %5106, i32 11
  %5139 = getelementptr inbounds i8, i8* %5101, i64 66
  %5140 = bitcast i8* %5139 to i16*
  store i16 %5138, i16* %5140, align 2
  %5141 = extractelement <16 x i16> %5106, i32 12
  %5142 = getelementptr inbounds i8, i8* %5101, i64 72
  %5143 = bitcast i8* %5142 to i16*
  store i16 %5141, i16* %5143, align 2
  %5144 = extractelement <16 x i16> %5106, i32 13
  %5145 = getelementptr inbounds i8, i8* %5101, i64 78
  %5146 = bitcast i8* %5145 to i16*
  store i16 %5144, i16* %5146, align 2
  %5147 = extractelement <16 x i16> %5106, i32 14
  %5148 = getelementptr inbounds i8, i8* %5101, i64 84
  %5149 = bitcast i8* %5148 to i16*
  store i16 %5147, i16* %5149, align 2
  %5150 = extractelement <16 x i16> %5106, i32 15
  %5151 = getelementptr inbounds i8, i8* %5101, i64 90
  %5152 = bitcast i8* %5151 to i16*
  store i16 %5150, i16* %5152, align 2
  %5153 = getelementptr inbounds i8, i8* %5049, i64 4
  %5154 = bitcast i8* %5153 to i16*
  %5155 = load <16 x float>, <16 x float>* %9, align 64
  %5156 = fmul <16 x float> %5155, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %5157 = fadd <16 x float> %5156, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5158 = fptoui <16 x float> %5157 to <16 x i16>
  %5159 = extractelement <16 x i16> %5158, i32 0
  store i16 %5159, i16* %5154, align 2
  %5160 = extractelement <16 x i16> %5158, i32 1
  %5161 = getelementptr inbounds i8, i8* %5153, i64 6
  %5162 = bitcast i8* %5161 to i16*
  store i16 %5160, i16* %5162, align 2
  %5163 = extractelement <16 x i16> %5158, i32 2
  %5164 = getelementptr inbounds i8, i8* %5153, i64 12
  %5165 = bitcast i8* %5164 to i16*
  store i16 %5163, i16* %5165, align 2
  %5166 = extractelement <16 x i16> %5158, i32 3
  %5167 = getelementptr inbounds i8, i8* %5153, i64 18
  %5168 = bitcast i8* %5167 to i16*
  store i16 %5166, i16* %5168, align 2
  %5169 = extractelement <16 x i16> %5158, i32 4
  %5170 = getelementptr inbounds i8, i8* %5153, i64 24
  %5171 = bitcast i8* %5170 to i16*
  store i16 %5169, i16* %5171, align 2
  %5172 = extractelement <16 x i16> %5158, i32 5
  %5173 = getelementptr inbounds i8, i8* %5153, i64 30
  %5174 = bitcast i8* %5173 to i16*
  store i16 %5172, i16* %5174, align 2
  %5175 = extractelement <16 x i16> %5158, i32 6
  %5176 = getelementptr inbounds i8, i8* %5153, i64 36
  %5177 = bitcast i8* %5176 to i16*
  store i16 %5175, i16* %5177, align 2
  %5178 = extractelement <16 x i16> %5158, i32 7
  %5179 = getelementptr inbounds i8, i8* %5153, i64 42
  %5180 = bitcast i8* %5179 to i16*
  store i16 %5178, i16* %5180, align 2
  %5181 = extractelement <16 x i16> %5158, i32 8
  %5182 = getelementptr inbounds i8, i8* %5153, i64 48
  %5183 = bitcast i8* %5182 to i16*
  store i16 %5181, i16* %5183, align 2
  %5184 = extractelement <16 x i16> %5158, i32 9
  %5185 = getelementptr inbounds i8, i8* %5153, i64 54
  %5186 = bitcast i8* %5185 to i16*
  store i16 %5184, i16* %5186, align 2
  %5187 = extractelement <16 x i16> %5158, i32 10
  %5188 = getelementptr inbounds i8, i8* %5153, i64 60
  %5189 = bitcast i8* %5188 to i16*
  store i16 %5187, i16* %5189, align 2
  %5190 = extractelement <16 x i16> %5158, i32 11
  %5191 = getelementptr inbounds i8, i8* %5153, i64 66
  %5192 = bitcast i8* %5191 to i16*
  store i16 %5190, i16* %5192, align 2
  %5193 = extractelement <16 x i16> %5158, i32 12
  %5194 = getelementptr inbounds i8, i8* %5153, i64 72
  %5195 = bitcast i8* %5194 to i16*
  store i16 %5193, i16* %5195, align 2
  %5196 = extractelement <16 x i16> %5158, i32 13
  %5197 = getelementptr inbounds i8, i8* %5153, i64 78
  %5198 = bitcast i8* %5197 to i16*
  store i16 %5196, i16* %5198, align 2
  %5199 = extractelement <16 x i16> %5158, i32 14
  %5200 = getelementptr inbounds i8, i8* %5153, i64 84
  %5201 = bitcast i8* %5200 to i16*
  store i16 %5199, i16* %5201, align 2
  %5202 = extractelement <16 x i16> %5158, i32 15
  %5203 = getelementptr inbounds i8, i8* %5153, i64 90
  %5204 = bitcast i8* %5203 to i16*
  store i16 %5202, i16* %5204, align 2
  br label %5957

5205:                                             ; preds = %411
  %5206 = getelementptr inbounds i8, i8* %3, i64 %249
  %5207 = load <16 x float>, <16 x float>* %7, align 64
  %5208 = fmul <16 x float> %5207, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %5209 = fadd <16 x float> %5208, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5210 = fptosi <16 x float> %5209 to <16 x i32>
  %5211 = zext <16 x i32> %5210 to <16 x i64>
  %5212 = load <16 x float>, <16 x float>* %8, align 64
  %5213 = fmul <16 x float> %5212, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %5214 = fadd <16 x float> %5213, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5215 = fptosi <16 x float> %5214 to <16 x i32>
  %5216 = zext <16 x i32> %5215 to <16 x i64>
  %5217 = shl nuw nsw <16 x i64> %5216, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %5218 = or <16 x i64> %5217, %5211
  %5219 = load <16 x float>, <16 x float>* %9, align 64
  %5220 = fmul <16 x float> %5219, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %5221 = fadd <16 x float> %5220, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5222 = fptosi <16 x float> %5221 to <16 x i32>
  %5223 = zext <16 x i32> %5222 to <16 x i64>
  %5224 = shl nuw <16 x i64> %5223, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %5225 = or <16 x i64> %5218, %5224
  %5226 = load <16 x float>, <16 x float>* %10, align 64
  %5227 = fmul <16 x float> %5226, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %5228 = fadd <16 x float> %5227, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5229 = fptosi <16 x float> %5228 to <16 x i32>
  %5230 = zext <16 x i32> %5229 to <16 x i64>
  %5231 = shl <16 x i64> %5230, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %5232 = or <16 x i64> %5225, %5231
  %5233 = bitcast i8* %5206 to <16 x i64>*
  store <16 x i64> %5232, <16 x i64>* %5233, align 2
  br label %5957

5234:                                             ; preds = %411
  %5235 = getelementptr inbounds i8, i8* %3, i64 %253
  %5236 = bitcast i8* %5235 to i16*
  %5237 = load <16 x float>, <16 x float>* %7, align 64
  %5238 = fmul <16 x float> %5237, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %5239 = fadd <16 x float> %5238, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5240 = fptosi <16 x float> %5239 to <16 x i32>
  %5241 = load <16 x float>, <16 x float>* %8, align 64
  %5242 = fmul <16 x float> %5241, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %5243 = fadd <16 x float> %5242, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5244 = fptosi <16 x float> %5243 to <16 x i32>
  %5245 = load <16 x float>, <16 x float>* %9, align 64
  %5246 = fmul <16 x float> %5245, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %5247 = fadd <16 x float> %5246, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5248 = fptosi <16 x float> %5247 to <16 x i32>
  %5249 = shl <16 x i32> %5240, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %5250 = lshr <16 x i32> %5240, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %5251 = and <16 x i32> %5250, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %5252 = or <16 x i32> %5251, %5249
  %5253 = trunc <16 x i32> %5252 to <16 x i16>
  %5254 = extractelement <16 x i16> %5253, i32 0
  store i16 %5254, i16* %5236, align 2
  %5255 = extractelement <16 x i16> %5253, i32 1
  %5256 = getelementptr inbounds i8, i8* %5235, i64 6
  %5257 = bitcast i8* %5256 to i16*
  store i16 %5255, i16* %5257, align 2
  %5258 = extractelement <16 x i16> %5253, i32 2
  %5259 = getelementptr inbounds i8, i8* %5235, i64 12
  %5260 = bitcast i8* %5259 to i16*
  store i16 %5258, i16* %5260, align 2
  %5261 = extractelement <16 x i16> %5253, i32 3
  %5262 = getelementptr inbounds i8, i8* %5235, i64 18
  %5263 = bitcast i8* %5262 to i16*
  store i16 %5261, i16* %5263, align 2
  %5264 = extractelement <16 x i16> %5253, i32 4
  %5265 = getelementptr inbounds i8, i8* %5235, i64 24
  %5266 = bitcast i8* %5265 to i16*
  store i16 %5264, i16* %5266, align 2
  %5267 = extractelement <16 x i16> %5253, i32 5
  %5268 = getelementptr inbounds i8, i8* %5235, i64 30
  %5269 = bitcast i8* %5268 to i16*
  store i16 %5267, i16* %5269, align 2
  %5270 = extractelement <16 x i16> %5253, i32 6
  %5271 = getelementptr inbounds i8, i8* %5235, i64 36
  %5272 = bitcast i8* %5271 to i16*
  store i16 %5270, i16* %5272, align 2
  %5273 = extractelement <16 x i16> %5253, i32 7
  %5274 = getelementptr inbounds i8, i8* %5235, i64 42
  %5275 = bitcast i8* %5274 to i16*
  store i16 %5273, i16* %5275, align 2
  %5276 = extractelement <16 x i16> %5253, i32 8
  %5277 = getelementptr inbounds i8, i8* %5235, i64 48
  %5278 = bitcast i8* %5277 to i16*
  store i16 %5276, i16* %5278, align 2
  %5279 = extractelement <16 x i16> %5253, i32 9
  %5280 = getelementptr inbounds i8, i8* %5235, i64 54
  %5281 = bitcast i8* %5280 to i16*
  store i16 %5279, i16* %5281, align 2
  %5282 = extractelement <16 x i16> %5253, i32 10
  %5283 = getelementptr inbounds i8, i8* %5235, i64 60
  %5284 = bitcast i8* %5283 to i16*
  store i16 %5282, i16* %5284, align 2
  %5285 = extractelement <16 x i16> %5253, i32 11
  %5286 = getelementptr inbounds i8, i8* %5235, i64 66
  %5287 = bitcast i8* %5286 to i16*
  store i16 %5285, i16* %5287, align 2
  %5288 = extractelement <16 x i16> %5253, i32 12
  %5289 = getelementptr inbounds i8, i8* %5235, i64 72
  %5290 = bitcast i8* %5289 to i16*
  store i16 %5288, i16* %5290, align 2
  %5291 = extractelement <16 x i16> %5253, i32 13
  %5292 = getelementptr inbounds i8, i8* %5235, i64 78
  %5293 = bitcast i8* %5292 to i16*
  store i16 %5291, i16* %5293, align 2
  %5294 = extractelement <16 x i16> %5253, i32 14
  %5295 = getelementptr inbounds i8, i8* %5235, i64 84
  %5296 = bitcast i8* %5295 to i16*
  store i16 %5294, i16* %5296, align 2
  %5297 = extractelement <16 x i16> %5253, i32 15
  %5298 = getelementptr inbounds i8, i8* %5235, i64 90
  %5299 = bitcast i8* %5298 to i16*
  store i16 %5297, i16* %5299, align 2
  %5300 = getelementptr inbounds i8, i8* %5235, i64 2
  %5301 = bitcast i8* %5300 to i16*
  %5302 = shl <16 x i32> %5244, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %5303 = lshr <16 x i32> %5244, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %5304 = and <16 x i32> %5303, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %5305 = or <16 x i32> %5304, %5302
  %5306 = trunc <16 x i32> %5305 to <16 x i16>
  %5307 = extractelement <16 x i16> %5306, i32 0
  store i16 %5307, i16* %5301, align 2
  %5308 = extractelement <16 x i16> %5306, i32 1
  %5309 = getelementptr inbounds i8, i8* %5300, i64 6
  %5310 = bitcast i8* %5309 to i16*
  store i16 %5308, i16* %5310, align 2
  %5311 = extractelement <16 x i16> %5306, i32 2
  %5312 = getelementptr inbounds i8, i8* %5300, i64 12
  %5313 = bitcast i8* %5312 to i16*
  store i16 %5311, i16* %5313, align 2
  %5314 = extractelement <16 x i16> %5306, i32 3
  %5315 = getelementptr inbounds i8, i8* %5300, i64 18
  %5316 = bitcast i8* %5315 to i16*
  store i16 %5314, i16* %5316, align 2
  %5317 = extractelement <16 x i16> %5306, i32 4
  %5318 = getelementptr inbounds i8, i8* %5300, i64 24
  %5319 = bitcast i8* %5318 to i16*
  store i16 %5317, i16* %5319, align 2
  %5320 = extractelement <16 x i16> %5306, i32 5
  %5321 = getelementptr inbounds i8, i8* %5300, i64 30
  %5322 = bitcast i8* %5321 to i16*
  store i16 %5320, i16* %5322, align 2
  %5323 = extractelement <16 x i16> %5306, i32 6
  %5324 = getelementptr inbounds i8, i8* %5300, i64 36
  %5325 = bitcast i8* %5324 to i16*
  store i16 %5323, i16* %5325, align 2
  %5326 = extractelement <16 x i16> %5306, i32 7
  %5327 = getelementptr inbounds i8, i8* %5300, i64 42
  %5328 = bitcast i8* %5327 to i16*
  store i16 %5326, i16* %5328, align 2
  %5329 = extractelement <16 x i16> %5306, i32 8
  %5330 = getelementptr inbounds i8, i8* %5300, i64 48
  %5331 = bitcast i8* %5330 to i16*
  store i16 %5329, i16* %5331, align 2
  %5332 = extractelement <16 x i16> %5306, i32 9
  %5333 = getelementptr inbounds i8, i8* %5300, i64 54
  %5334 = bitcast i8* %5333 to i16*
  store i16 %5332, i16* %5334, align 2
  %5335 = extractelement <16 x i16> %5306, i32 10
  %5336 = getelementptr inbounds i8, i8* %5300, i64 60
  %5337 = bitcast i8* %5336 to i16*
  store i16 %5335, i16* %5337, align 2
  %5338 = extractelement <16 x i16> %5306, i32 11
  %5339 = getelementptr inbounds i8, i8* %5300, i64 66
  %5340 = bitcast i8* %5339 to i16*
  store i16 %5338, i16* %5340, align 2
  %5341 = extractelement <16 x i16> %5306, i32 12
  %5342 = getelementptr inbounds i8, i8* %5300, i64 72
  %5343 = bitcast i8* %5342 to i16*
  store i16 %5341, i16* %5343, align 2
  %5344 = extractelement <16 x i16> %5306, i32 13
  %5345 = getelementptr inbounds i8, i8* %5300, i64 78
  %5346 = bitcast i8* %5345 to i16*
  store i16 %5344, i16* %5346, align 2
  %5347 = extractelement <16 x i16> %5306, i32 14
  %5348 = getelementptr inbounds i8, i8* %5300, i64 84
  %5349 = bitcast i8* %5348 to i16*
  store i16 %5347, i16* %5349, align 2
  %5350 = extractelement <16 x i16> %5306, i32 15
  %5351 = getelementptr inbounds i8, i8* %5300, i64 90
  %5352 = bitcast i8* %5351 to i16*
  store i16 %5350, i16* %5352, align 2
  %5353 = getelementptr inbounds i8, i8* %5235, i64 4
  %5354 = bitcast i8* %5353 to i16*
  %5355 = shl <16 x i32> %5248, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %5356 = lshr <16 x i32> %5248, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %5357 = and <16 x i32> %5356, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %5358 = or <16 x i32> %5357, %5355
  %5359 = trunc <16 x i32> %5358 to <16 x i16>
  %5360 = extractelement <16 x i16> %5359, i32 0
  store i16 %5360, i16* %5354, align 2
  %5361 = extractelement <16 x i16> %5359, i32 1
  %5362 = getelementptr inbounds i8, i8* %5353, i64 6
  %5363 = bitcast i8* %5362 to i16*
  store i16 %5361, i16* %5363, align 2
  %5364 = extractelement <16 x i16> %5359, i32 2
  %5365 = getelementptr inbounds i8, i8* %5353, i64 12
  %5366 = bitcast i8* %5365 to i16*
  store i16 %5364, i16* %5366, align 2
  %5367 = extractelement <16 x i16> %5359, i32 3
  %5368 = getelementptr inbounds i8, i8* %5353, i64 18
  %5369 = bitcast i8* %5368 to i16*
  store i16 %5367, i16* %5369, align 2
  %5370 = extractelement <16 x i16> %5359, i32 4
  %5371 = getelementptr inbounds i8, i8* %5353, i64 24
  %5372 = bitcast i8* %5371 to i16*
  store i16 %5370, i16* %5372, align 2
  %5373 = extractelement <16 x i16> %5359, i32 5
  %5374 = getelementptr inbounds i8, i8* %5353, i64 30
  %5375 = bitcast i8* %5374 to i16*
  store i16 %5373, i16* %5375, align 2
  %5376 = extractelement <16 x i16> %5359, i32 6
  %5377 = getelementptr inbounds i8, i8* %5353, i64 36
  %5378 = bitcast i8* %5377 to i16*
  store i16 %5376, i16* %5378, align 2
  %5379 = extractelement <16 x i16> %5359, i32 7
  %5380 = getelementptr inbounds i8, i8* %5353, i64 42
  %5381 = bitcast i8* %5380 to i16*
  store i16 %5379, i16* %5381, align 2
  %5382 = extractelement <16 x i16> %5359, i32 8
  %5383 = getelementptr inbounds i8, i8* %5353, i64 48
  %5384 = bitcast i8* %5383 to i16*
  store i16 %5382, i16* %5384, align 2
  %5385 = extractelement <16 x i16> %5359, i32 9
  %5386 = getelementptr inbounds i8, i8* %5353, i64 54
  %5387 = bitcast i8* %5386 to i16*
  store i16 %5385, i16* %5387, align 2
  %5388 = extractelement <16 x i16> %5359, i32 10
  %5389 = getelementptr inbounds i8, i8* %5353, i64 60
  %5390 = bitcast i8* %5389 to i16*
  store i16 %5388, i16* %5390, align 2
  %5391 = extractelement <16 x i16> %5359, i32 11
  %5392 = getelementptr inbounds i8, i8* %5353, i64 66
  %5393 = bitcast i8* %5392 to i16*
  store i16 %5391, i16* %5393, align 2
  %5394 = extractelement <16 x i16> %5359, i32 12
  %5395 = getelementptr inbounds i8, i8* %5353, i64 72
  %5396 = bitcast i8* %5395 to i16*
  store i16 %5394, i16* %5396, align 2
  %5397 = extractelement <16 x i16> %5359, i32 13
  %5398 = getelementptr inbounds i8, i8* %5353, i64 78
  %5399 = bitcast i8* %5398 to i16*
  store i16 %5397, i16* %5399, align 2
  %5400 = extractelement <16 x i16> %5359, i32 14
  %5401 = getelementptr inbounds i8, i8* %5353, i64 84
  %5402 = bitcast i8* %5401 to i16*
  store i16 %5400, i16* %5402, align 2
  %5403 = extractelement <16 x i16> %5359, i32 15
  %5404 = getelementptr inbounds i8, i8* %5353, i64 90
  %5405 = bitcast i8* %5404 to i16*
  store i16 %5403, i16* %5405, align 2
  br label %5957

5406:                                             ; preds = %411
  %5407 = getelementptr inbounds i8, i8* %3, i64 %249
  %5408 = load <16 x float>, <16 x float>* %7, align 64
  %5409 = fmul <16 x float> %5408, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %5410 = fadd <16 x float> %5409, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5411 = fptosi <16 x float> %5410 to <16 x i32>
  %5412 = zext <16 x i32> %5411 to <16 x i64>
  %5413 = load <16 x float>, <16 x float>* %8, align 64
  %5414 = fmul <16 x float> %5413, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %5415 = fadd <16 x float> %5414, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5416 = fptosi <16 x float> %5415 to <16 x i32>
  %5417 = zext <16 x i32> %5416 to <16 x i64>
  %5418 = shl nuw nsw <16 x i64> %5417, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %5419 = or <16 x i64> %5418, %5412
  %5420 = load <16 x float>, <16 x float>* %9, align 64
  %5421 = fmul <16 x float> %5420, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %5422 = fadd <16 x float> %5421, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5423 = fptosi <16 x float> %5422 to <16 x i32>
  %5424 = zext <16 x i32> %5423 to <16 x i64>
  %5425 = shl nuw <16 x i64> %5424, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %5426 = or <16 x i64> %5419, %5425
  %5427 = load <16 x float>, <16 x float>* %10, align 64
  %5428 = fmul <16 x float> %5427, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %5429 = fadd <16 x float> %5428, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %5430 = fptosi <16 x float> %5429 to <16 x i32>
  %5431 = zext <16 x i32> %5430 to <16 x i64>
  %5432 = shl <16 x i64> %5431, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %5433 = or <16 x i64> %5426, %5432
  %5434 = shl <16 x i64> %5433, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %5435 = and <16 x i64> %5434, <i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696>
  %5436 = lshr <16 x i64> %5433, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %5437 = and <16 x i64> %5436, <i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695, i64 71777214294589695>
  %5438 = or <16 x i64> %5435, %5437
  %5439 = bitcast i8* %5407 to <16 x i64>*
  store <16 x i64> %5438, <16 x i64>* %5439, align 2
  br label %5957

5440:                                             ; preds = %411
  %5441 = getelementptr inbounds i8, i8* %3, i64 %253
  %5442 = bitcast i8* %5441 to i16*
  %5443 = load <16 x float>, <16 x float>* %7, align 64
  %5444 = tail call <16 x i16> @llvm.x86.avx512.mask.vcvtps2ph.512(<16 x float> %5443, i32 4, <16 x i16> zeroinitializer, i16 -1) #17
  %5445 = load <16 x float>, <16 x float>* %8, align 64
  %5446 = tail call <16 x i16> @llvm.x86.avx512.mask.vcvtps2ph.512(<16 x float> %5445, i32 4, <16 x i16> zeroinitializer, i16 -1) #17
  %5447 = load <16 x float>, <16 x float>* %9, align 64
  %5448 = tail call <16 x i16> @llvm.x86.avx512.mask.vcvtps2ph.512(<16 x float> %5447, i32 4, <16 x i16> zeroinitializer, i16 -1) #17
  %5449 = extractelement <16 x i16> %5444, i32 0
  store i16 %5449, i16* %5442, align 2
  %5450 = extractelement <16 x i16> %5444, i32 1
  %5451 = getelementptr inbounds i8, i8* %5441, i64 6
  %5452 = bitcast i8* %5451 to i16*
  store i16 %5450, i16* %5452, align 2
  %5453 = extractelement <16 x i16> %5444, i32 2
  %5454 = getelementptr inbounds i8, i8* %5441, i64 12
  %5455 = bitcast i8* %5454 to i16*
  store i16 %5453, i16* %5455, align 2
  %5456 = extractelement <16 x i16> %5444, i32 3
  %5457 = getelementptr inbounds i8, i8* %5441, i64 18
  %5458 = bitcast i8* %5457 to i16*
  store i16 %5456, i16* %5458, align 2
  %5459 = extractelement <16 x i16> %5444, i32 4
  %5460 = getelementptr inbounds i8, i8* %5441, i64 24
  %5461 = bitcast i8* %5460 to i16*
  store i16 %5459, i16* %5461, align 2
  %5462 = extractelement <16 x i16> %5444, i32 5
  %5463 = getelementptr inbounds i8, i8* %5441, i64 30
  %5464 = bitcast i8* %5463 to i16*
  store i16 %5462, i16* %5464, align 2
  %5465 = extractelement <16 x i16> %5444, i32 6
  %5466 = getelementptr inbounds i8, i8* %5441, i64 36
  %5467 = bitcast i8* %5466 to i16*
  store i16 %5465, i16* %5467, align 2
  %5468 = extractelement <16 x i16> %5444, i32 7
  %5469 = getelementptr inbounds i8, i8* %5441, i64 42
  %5470 = bitcast i8* %5469 to i16*
  store i16 %5468, i16* %5470, align 2
  %5471 = extractelement <16 x i16> %5444, i32 8
  %5472 = getelementptr inbounds i8, i8* %5441, i64 48
  %5473 = bitcast i8* %5472 to i16*
  store i16 %5471, i16* %5473, align 2
  %5474 = extractelement <16 x i16> %5444, i32 9
  %5475 = getelementptr inbounds i8, i8* %5441, i64 54
  %5476 = bitcast i8* %5475 to i16*
  store i16 %5474, i16* %5476, align 2
  %5477 = extractelement <16 x i16> %5444, i32 10
  %5478 = getelementptr inbounds i8, i8* %5441, i64 60
  %5479 = bitcast i8* %5478 to i16*
  store i16 %5477, i16* %5479, align 2
  %5480 = extractelement <16 x i16> %5444, i32 11
  %5481 = getelementptr inbounds i8, i8* %5441, i64 66
  %5482 = bitcast i8* %5481 to i16*
  store i16 %5480, i16* %5482, align 2
  %5483 = extractelement <16 x i16> %5444, i32 12
  %5484 = getelementptr inbounds i8, i8* %5441, i64 72
  %5485 = bitcast i8* %5484 to i16*
  store i16 %5483, i16* %5485, align 2
  %5486 = extractelement <16 x i16> %5444, i32 13
  %5487 = getelementptr inbounds i8, i8* %5441, i64 78
  %5488 = bitcast i8* %5487 to i16*
  store i16 %5486, i16* %5488, align 2
  %5489 = extractelement <16 x i16> %5444, i32 14
  %5490 = getelementptr inbounds i8, i8* %5441, i64 84
  %5491 = bitcast i8* %5490 to i16*
  store i16 %5489, i16* %5491, align 2
  %5492 = extractelement <16 x i16> %5444, i32 15
  %5493 = getelementptr inbounds i8, i8* %5441, i64 90
  %5494 = bitcast i8* %5493 to i16*
  store i16 %5492, i16* %5494, align 2
  %5495 = getelementptr inbounds i8, i8* %5441, i64 2
  %5496 = bitcast i8* %5495 to i16*
  %5497 = extractelement <16 x i16> %5446, i32 0
  store i16 %5497, i16* %5496, align 2
  %5498 = extractelement <16 x i16> %5446, i32 1
  %5499 = getelementptr inbounds i8, i8* %5495, i64 6
  %5500 = bitcast i8* %5499 to i16*
  store i16 %5498, i16* %5500, align 2
  %5501 = extractelement <16 x i16> %5446, i32 2
  %5502 = getelementptr inbounds i8, i8* %5495, i64 12
  %5503 = bitcast i8* %5502 to i16*
  store i16 %5501, i16* %5503, align 2
  %5504 = extractelement <16 x i16> %5446, i32 3
  %5505 = getelementptr inbounds i8, i8* %5495, i64 18
  %5506 = bitcast i8* %5505 to i16*
  store i16 %5504, i16* %5506, align 2
  %5507 = extractelement <16 x i16> %5446, i32 4
  %5508 = getelementptr inbounds i8, i8* %5495, i64 24
  %5509 = bitcast i8* %5508 to i16*
  store i16 %5507, i16* %5509, align 2
  %5510 = extractelement <16 x i16> %5446, i32 5
  %5511 = getelementptr inbounds i8, i8* %5495, i64 30
  %5512 = bitcast i8* %5511 to i16*
  store i16 %5510, i16* %5512, align 2
  %5513 = extractelement <16 x i16> %5446, i32 6
  %5514 = getelementptr inbounds i8, i8* %5495, i64 36
  %5515 = bitcast i8* %5514 to i16*
  store i16 %5513, i16* %5515, align 2
  %5516 = extractelement <16 x i16> %5446, i32 7
  %5517 = getelementptr inbounds i8, i8* %5495, i64 42
  %5518 = bitcast i8* %5517 to i16*
  store i16 %5516, i16* %5518, align 2
  %5519 = extractelement <16 x i16> %5446, i32 8
  %5520 = getelementptr inbounds i8, i8* %5495, i64 48
  %5521 = bitcast i8* %5520 to i16*
  store i16 %5519, i16* %5521, align 2
  %5522 = extractelement <16 x i16> %5446, i32 9
  %5523 = getelementptr inbounds i8, i8* %5495, i64 54
  %5524 = bitcast i8* %5523 to i16*
  store i16 %5522, i16* %5524, align 2
  %5525 = extractelement <16 x i16> %5446, i32 10
  %5526 = getelementptr inbounds i8, i8* %5495, i64 60
  %5527 = bitcast i8* %5526 to i16*
  store i16 %5525, i16* %5527, align 2
  %5528 = extractelement <16 x i16> %5446, i32 11
  %5529 = getelementptr inbounds i8, i8* %5495, i64 66
  %5530 = bitcast i8* %5529 to i16*
  store i16 %5528, i16* %5530, align 2
  %5531 = extractelement <16 x i16> %5446, i32 12
  %5532 = getelementptr inbounds i8, i8* %5495, i64 72
  %5533 = bitcast i8* %5532 to i16*
  store i16 %5531, i16* %5533, align 2
  %5534 = extractelement <16 x i16> %5446, i32 13
  %5535 = getelementptr inbounds i8, i8* %5495, i64 78
  %5536 = bitcast i8* %5535 to i16*
  store i16 %5534, i16* %5536, align 2
  %5537 = extractelement <16 x i16> %5446, i32 14
  %5538 = getelementptr inbounds i8, i8* %5495, i64 84
  %5539 = bitcast i8* %5538 to i16*
  store i16 %5537, i16* %5539, align 2
  %5540 = extractelement <16 x i16> %5446, i32 15
  %5541 = getelementptr inbounds i8, i8* %5495, i64 90
  %5542 = bitcast i8* %5541 to i16*
  store i16 %5540, i16* %5542, align 2
  %5543 = getelementptr inbounds i8, i8* %5441, i64 4
  %5544 = bitcast i8* %5543 to i16*
  %5545 = extractelement <16 x i16> %5448, i32 0
  store i16 %5545, i16* %5544, align 2
  %5546 = extractelement <16 x i16> %5448, i32 1
  %5547 = getelementptr inbounds i8, i8* %5543, i64 6
  %5548 = bitcast i8* %5547 to i16*
  store i16 %5546, i16* %5548, align 2
  %5549 = extractelement <16 x i16> %5448, i32 2
  %5550 = getelementptr inbounds i8, i8* %5543, i64 12
  %5551 = bitcast i8* %5550 to i16*
  store i16 %5549, i16* %5551, align 2
  %5552 = extractelement <16 x i16> %5448, i32 3
  %5553 = getelementptr inbounds i8, i8* %5543, i64 18
  %5554 = bitcast i8* %5553 to i16*
  store i16 %5552, i16* %5554, align 2
  %5555 = extractelement <16 x i16> %5448, i32 4
  %5556 = getelementptr inbounds i8, i8* %5543, i64 24
  %5557 = bitcast i8* %5556 to i16*
  store i16 %5555, i16* %5557, align 2
  %5558 = extractelement <16 x i16> %5448, i32 5
  %5559 = getelementptr inbounds i8, i8* %5543, i64 30
  %5560 = bitcast i8* %5559 to i16*
  store i16 %5558, i16* %5560, align 2
  %5561 = extractelement <16 x i16> %5448, i32 6
  %5562 = getelementptr inbounds i8, i8* %5543, i64 36
  %5563 = bitcast i8* %5562 to i16*
  store i16 %5561, i16* %5563, align 2
  %5564 = extractelement <16 x i16> %5448, i32 7
  %5565 = getelementptr inbounds i8, i8* %5543, i64 42
  %5566 = bitcast i8* %5565 to i16*
  store i16 %5564, i16* %5566, align 2
  %5567 = extractelement <16 x i16> %5448, i32 8
  %5568 = getelementptr inbounds i8, i8* %5543, i64 48
  %5569 = bitcast i8* %5568 to i16*
  store i16 %5567, i16* %5569, align 2
  %5570 = extractelement <16 x i16> %5448, i32 9
  %5571 = getelementptr inbounds i8, i8* %5543, i64 54
  %5572 = bitcast i8* %5571 to i16*
  store i16 %5570, i16* %5572, align 2
  %5573 = extractelement <16 x i16> %5448, i32 10
  %5574 = getelementptr inbounds i8, i8* %5543, i64 60
  %5575 = bitcast i8* %5574 to i16*
  store i16 %5573, i16* %5575, align 2
  %5576 = extractelement <16 x i16> %5448, i32 11
  %5577 = getelementptr inbounds i8, i8* %5543, i64 66
  %5578 = bitcast i8* %5577 to i16*
  store i16 %5576, i16* %5578, align 2
  %5579 = extractelement <16 x i16> %5448, i32 12
  %5580 = getelementptr inbounds i8, i8* %5543, i64 72
  %5581 = bitcast i8* %5580 to i16*
  store i16 %5579, i16* %5581, align 2
  %5582 = extractelement <16 x i16> %5448, i32 13
  %5583 = getelementptr inbounds i8, i8* %5543, i64 78
  %5584 = bitcast i8* %5583 to i16*
  store i16 %5582, i16* %5584, align 2
  %5585 = extractelement <16 x i16> %5448, i32 14
  %5586 = getelementptr inbounds i8, i8* %5543, i64 84
  %5587 = bitcast i8* %5586 to i16*
  store i16 %5585, i16* %5587, align 2
  %5588 = extractelement <16 x i16> %5448, i32 15
  %5589 = getelementptr inbounds i8, i8* %5543, i64 90
  %5590 = bitcast i8* %5589 to i16*
  store i16 %5588, i16* %5590, align 2
  br label %5957

5591:                                             ; preds = %411
  %5592 = getelementptr inbounds i8, i8* %3, i64 %249
  %5593 = load <16 x float>, <16 x float>* %7, align 64
  %5594 = tail call <16 x i16> @llvm.x86.avx512.mask.vcvtps2ph.512(<16 x float> %5593, i32 4, <16 x i16> zeroinitializer, i16 -1) #17
  %5595 = load <16 x float>, <16 x float>* %8, align 64
  %5596 = tail call <16 x i16> @llvm.x86.avx512.mask.vcvtps2ph.512(<16 x float> %5595, i32 4, <16 x i16> zeroinitializer, i16 -1) #17
  %5597 = load <16 x float>, <16 x float>* %9, align 64
  %5598 = tail call <16 x i16> @llvm.x86.avx512.mask.vcvtps2ph.512(<16 x float> %5597, i32 4, <16 x i16> zeroinitializer, i16 -1) #17
  %5599 = load <16 x float>, <16 x float>* %10, align 64
  %5600 = tail call <16 x i16> @llvm.x86.avx512.mask.vcvtps2ph.512(<16 x float> %5599, i32 4, <16 x i16> zeroinitializer, i16 -1) #17
  %5601 = zext <16 x i16> %5594 to <16 x i64>
  %5602 = zext <16 x i16> %5596 to <16 x i64>
  %5603 = shl nuw nsw <16 x i64> %5602, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %5604 = or <16 x i64> %5603, %5601
  %5605 = zext <16 x i16> %5598 to <16 x i64>
  %5606 = shl nuw nsw <16 x i64> %5605, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %5607 = or <16 x i64> %5604, %5606
  %5608 = zext <16 x i16> %5600 to <16 x i64>
  %5609 = shl nuw <16 x i64> %5608, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %5610 = or <16 x i64> %5607, %5609
  %5611 = bitcast i8* %5592 to <16 x i64>*
  store <16 x i64> %5610, <16 x i64>* %5611, align 2
  br label %5957

5612:                                             ; preds = %411
  %5613 = getelementptr inbounds i8, i8* %3, i64 %151
  %5614 = bitcast i8* %5613 to float*
  %5615 = load <16 x float>, <16 x float>* %7, align 64
  %5616 = extractelement <16 x float> %5615, i32 0
  store float %5616, float* %5614, align 4
  %5617 = extractelement <16 x float> %5615, i32 1
  %5618 = getelementptr inbounds i8, i8* %5613, i64 12
  %5619 = bitcast i8* %5618 to float*
  store float %5617, float* %5619, align 4
  %5620 = extractelement <16 x float> %5615, i32 2
  %5621 = getelementptr inbounds i8, i8* %5613, i64 24
  %5622 = bitcast i8* %5621 to float*
  store float %5620, float* %5622, align 4
  %5623 = extractelement <16 x float> %5615, i32 3
  %5624 = getelementptr inbounds i8, i8* %5613, i64 36
  %5625 = bitcast i8* %5624 to float*
  store float %5623, float* %5625, align 4
  %5626 = extractelement <16 x float> %5615, i32 4
  %5627 = getelementptr inbounds i8, i8* %5613, i64 48
  %5628 = bitcast i8* %5627 to float*
  store float %5626, float* %5628, align 4
  %5629 = extractelement <16 x float> %5615, i32 5
  %5630 = getelementptr inbounds i8, i8* %5613, i64 60
  %5631 = bitcast i8* %5630 to float*
  store float %5629, float* %5631, align 4
  %5632 = extractelement <16 x float> %5615, i32 6
  %5633 = getelementptr inbounds i8, i8* %5613, i64 72
  %5634 = bitcast i8* %5633 to float*
  store float %5632, float* %5634, align 4
  %5635 = extractelement <16 x float> %5615, i32 7
  %5636 = getelementptr inbounds i8, i8* %5613, i64 84
  %5637 = bitcast i8* %5636 to float*
  store float %5635, float* %5637, align 4
  %5638 = extractelement <16 x float> %5615, i32 8
  %5639 = getelementptr inbounds i8, i8* %5613, i64 96
  %5640 = bitcast i8* %5639 to float*
  store float %5638, float* %5640, align 4
  %5641 = extractelement <16 x float> %5615, i32 9
  %5642 = getelementptr inbounds i8, i8* %5613, i64 108
  %5643 = bitcast i8* %5642 to float*
  store float %5641, float* %5643, align 4
  %5644 = extractelement <16 x float> %5615, i32 10
  %5645 = getelementptr inbounds i8, i8* %5613, i64 120
  %5646 = bitcast i8* %5645 to float*
  store float %5644, float* %5646, align 4
  %5647 = extractelement <16 x float> %5615, i32 11
  %5648 = getelementptr inbounds i8, i8* %5613, i64 132
  %5649 = bitcast i8* %5648 to float*
  store float %5647, float* %5649, align 4
  %5650 = extractelement <16 x float> %5615, i32 12
  %5651 = getelementptr inbounds i8, i8* %5613, i64 144
  %5652 = bitcast i8* %5651 to float*
  store float %5650, float* %5652, align 4
  %5653 = extractelement <16 x float> %5615, i32 13
  %5654 = getelementptr inbounds i8, i8* %5613, i64 156
  %5655 = bitcast i8* %5654 to float*
  store float %5653, float* %5655, align 4
  %5656 = extractelement <16 x float> %5615, i32 14
  %5657 = getelementptr inbounds i8, i8* %5613, i64 168
  %5658 = bitcast i8* %5657 to float*
  store float %5656, float* %5658, align 4
  %5659 = extractelement <16 x float> %5615, i32 15
  %5660 = getelementptr inbounds i8, i8* %5613, i64 180
  %5661 = bitcast i8* %5660 to float*
  store float %5659, float* %5661, align 4
  %5662 = getelementptr inbounds i8, i8* %5613, i64 4
  %5663 = bitcast i8* %5662 to float*
  %5664 = load <16 x float>, <16 x float>* %8, align 64
  %5665 = extractelement <16 x float> %5664, i32 0
  store float %5665, float* %5663, align 4
  %5666 = extractelement <16 x float> %5664, i32 1
  %5667 = getelementptr inbounds i8, i8* %5662, i64 12
  %5668 = bitcast i8* %5667 to float*
  store float %5666, float* %5668, align 4
  %5669 = extractelement <16 x float> %5664, i32 2
  %5670 = getelementptr inbounds i8, i8* %5662, i64 24
  %5671 = bitcast i8* %5670 to float*
  store float %5669, float* %5671, align 4
  %5672 = extractelement <16 x float> %5664, i32 3
  %5673 = getelementptr inbounds i8, i8* %5662, i64 36
  %5674 = bitcast i8* %5673 to float*
  store float %5672, float* %5674, align 4
  %5675 = extractelement <16 x float> %5664, i32 4
  %5676 = getelementptr inbounds i8, i8* %5662, i64 48
  %5677 = bitcast i8* %5676 to float*
  store float %5675, float* %5677, align 4
  %5678 = extractelement <16 x float> %5664, i32 5
  %5679 = getelementptr inbounds i8, i8* %5662, i64 60
  %5680 = bitcast i8* %5679 to float*
  store float %5678, float* %5680, align 4
  %5681 = extractelement <16 x float> %5664, i32 6
  %5682 = getelementptr inbounds i8, i8* %5662, i64 72
  %5683 = bitcast i8* %5682 to float*
  store float %5681, float* %5683, align 4
  %5684 = extractelement <16 x float> %5664, i32 7
  %5685 = getelementptr inbounds i8, i8* %5662, i64 84
  %5686 = bitcast i8* %5685 to float*
  store float %5684, float* %5686, align 4
  %5687 = extractelement <16 x float> %5664, i32 8
  %5688 = getelementptr inbounds i8, i8* %5662, i64 96
  %5689 = bitcast i8* %5688 to float*
  store float %5687, float* %5689, align 4
  %5690 = extractelement <16 x float> %5664, i32 9
  %5691 = getelementptr inbounds i8, i8* %5662, i64 108
  %5692 = bitcast i8* %5691 to float*
  store float %5690, float* %5692, align 4
  %5693 = extractelement <16 x float> %5664, i32 10
  %5694 = getelementptr inbounds i8, i8* %5662, i64 120
  %5695 = bitcast i8* %5694 to float*
  store float %5693, float* %5695, align 4
  %5696 = extractelement <16 x float> %5664, i32 11
  %5697 = getelementptr inbounds i8, i8* %5662, i64 132
  %5698 = bitcast i8* %5697 to float*
  store float %5696, float* %5698, align 4
  %5699 = extractelement <16 x float> %5664, i32 12
  %5700 = getelementptr inbounds i8, i8* %5662, i64 144
  %5701 = bitcast i8* %5700 to float*
  store float %5699, float* %5701, align 4
  %5702 = extractelement <16 x float> %5664, i32 13
  %5703 = getelementptr inbounds i8, i8* %5662, i64 156
  %5704 = bitcast i8* %5703 to float*
  store float %5702, float* %5704, align 4
  %5705 = extractelement <16 x float> %5664, i32 14
  %5706 = getelementptr inbounds i8, i8* %5662, i64 168
  %5707 = bitcast i8* %5706 to float*
  store float %5705, float* %5707, align 4
  %5708 = extractelement <16 x float> %5664, i32 15
  %5709 = getelementptr inbounds i8, i8* %5662, i64 180
  %5710 = bitcast i8* %5709 to float*
  store float %5708, float* %5710, align 4
  %5711 = getelementptr inbounds i8, i8* %5613, i64 8
  %5712 = bitcast i8* %5711 to float*
  %5713 = load <16 x float>, <16 x float>* %9, align 64
  %5714 = extractelement <16 x float> %5713, i32 0
  store float %5714, float* %5712, align 4
  %5715 = extractelement <16 x float> %5713, i32 1
  %5716 = getelementptr inbounds i8, i8* %5711, i64 12
  %5717 = bitcast i8* %5716 to float*
  store float %5715, float* %5717, align 4
  %5718 = extractelement <16 x float> %5713, i32 2
  %5719 = getelementptr inbounds i8, i8* %5711, i64 24
  %5720 = bitcast i8* %5719 to float*
  store float %5718, float* %5720, align 4
  %5721 = extractelement <16 x float> %5713, i32 3
  %5722 = getelementptr inbounds i8, i8* %5711, i64 36
  %5723 = bitcast i8* %5722 to float*
  store float %5721, float* %5723, align 4
  %5724 = extractelement <16 x float> %5713, i32 4
  %5725 = getelementptr inbounds i8, i8* %5711, i64 48
  %5726 = bitcast i8* %5725 to float*
  store float %5724, float* %5726, align 4
  %5727 = extractelement <16 x float> %5713, i32 5
  %5728 = getelementptr inbounds i8, i8* %5711, i64 60
  %5729 = bitcast i8* %5728 to float*
  store float %5727, float* %5729, align 4
  %5730 = extractelement <16 x float> %5713, i32 6
  %5731 = getelementptr inbounds i8, i8* %5711, i64 72
  %5732 = bitcast i8* %5731 to float*
  store float %5730, float* %5732, align 4
  %5733 = extractelement <16 x float> %5713, i32 7
  %5734 = getelementptr inbounds i8, i8* %5711, i64 84
  %5735 = bitcast i8* %5734 to float*
  store float %5733, float* %5735, align 4
  %5736 = extractelement <16 x float> %5713, i32 8
  %5737 = getelementptr inbounds i8, i8* %5711, i64 96
  %5738 = bitcast i8* %5737 to float*
  store float %5736, float* %5738, align 4
  %5739 = extractelement <16 x float> %5713, i32 9
  %5740 = getelementptr inbounds i8, i8* %5711, i64 108
  %5741 = bitcast i8* %5740 to float*
  store float %5739, float* %5741, align 4
  %5742 = extractelement <16 x float> %5713, i32 10
  %5743 = getelementptr inbounds i8, i8* %5711, i64 120
  %5744 = bitcast i8* %5743 to float*
  store float %5742, float* %5744, align 4
  %5745 = extractelement <16 x float> %5713, i32 11
  %5746 = getelementptr inbounds i8, i8* %5711, i64 132
  %5747 = bitcast i8* %5746 to float*
  store float %5745, float* %5747, align 4
  %5748 = extractelement <16 x float> %5713, i32 12
  %5749 = getelementptr inbounds i8, i8* %5711, i64 144
  %5750 = bitcast i8* %5749 to float*
  store float %5748, float* %5750, align 4
  %5751 = extractelement <16 x float> %5713, i32 13
  %5752 = getelementptr inbounds i8, i8* %5711, i64 156
  %5753 = bitcast i8* %5752 to float*
  store float %5751, float* %5753, align 4
  %5754 = extractelement <16 x float> %5713, i32 14
  %5755 = getelementptr inbounds i8, i8* %5711, i64 168
  %5756 = bitcast i8* %5755 to float*
  store float %5754, float* %5756, align 4
  %5757 = extractelement <16 x float> %5713, i32 15
  %5758 = getelementptr inbounds i8, i8* %5711, i64 180
  %5759 = bitcast i8* %5758 to float*
  store float %5757, float* %5759, align 4
  br label %5957

5760:                                             ; preds = %411
  %5761 = getelementptr inbounds i8, i8* %3, i64 %21
  %5762 = bitcast i8* %5761 to float*
  %5763 = load <16 x float>, <16 x float>* %7, align 64
  %5764 = extractelement <16 x float> %5763, i32 0
  store float %5764, float* %5762, align 4
  %5765 = extractelement <16 x float> %5763, i32 1
  %5766 = getelementptr inbounds i8, i8* %5761, i64 16
  %5767 = bitcast i8* %5766 to float*
  store float %5765, float* %5767, align 4
  %5768 = extractelement <16 x float> %5763, i32 2
  %5769 = getelementptr inbounds i8, i8* %5761, i64 32
  %5770 = bitcast i8* %5769 to float*
  store float %5768, float* %5770, align 4
  %5771 = extractelement <16 x float> %5763, i32 3
  %5772 = getelementptr inbounds i8, i8* %5761, i64 48
  %5773 = bitcast i8* %5772 to float*
  store float %5771, float* %5773, align 4
  %5774 = extractelement <16 x float> %5763, i32 4
  %5775 = getelementptr inbounds i8, i8* %5761, i64 64
  %5776 = bitcast i8* %5775 to float*
  store float %5774, float* %5776, align 4
  %5777 = extractelement <16 x float> %5763, i32 5
  %5778 = getelementptr inbounds i8, i8* %5761, i64 80
  %5779 = bitcast i8* %5778 to float*
  store float %5777, float* %5779, align 4
  %5780 = extractelement <16 x float> %5763, i32 6
  %5781 = getelementptr inbounds i8, i8* %5761, i64 96
  %5782 = bitcast i8* %5781 to float*
  store float %5780, float* %5782, align 4
  %5783 = extractelement <16 x float> %5763, i32 7
  %5784 = getelementptr inbounds i8, i8* %5761, i64 112
  %5785 = bitcast i8* %5784 to float*
  store float %5783, float* %5785, align 4
  %5786 = extractelement <16 x float> %5763, i32 8
  %5787 = getelementptr inbounds i8, i8* %5761, i64 128
  %5788 = bitcast i8* %5787 to float*
  store float %5786, float* %5788, align 4
  %5789 = extractelement <16 x float> %5763, i32 9
  %5790 = getelementptr inbounds i8, i8* %5761, i64 144
  %5791 = bitcast i8* %5790 to float*
  store float %5789, float* %5791, align 4
  %5792 = extractelement <16 x float> %5763, i32 10
  %5793 = getelementptr inbounds i8, i8* %5761, i64 160
  %5794 = bitcast i8* %5793 to float*
  store float %5792, float* %5794, align 4
  %5795 = extractelement <16 x float> %5763, i32 11
  %5796 = getelementptr inbounds i8, i8* %5761, i64 176
  %5797 = bitcast i8* %5796 to float*
  store float %5795, float* %5797, align 4
  %5798 = extractelement <16 x float> %5763, i32 12
  %5799 = getelementptr inbounds i8, i8* %5761, i64 192
  %5800 = bitcast i8* %5799 to float*
  store float %5798, float* %5800, align 4
  %5801 = extractelement <16 x float> %5763, i32 13
  %5802 = getelementptr inbounds i8, i8* %5761, i64 208
  %5803 = bitcast i8* %5802 to float*
  store float %5801, float* %5803, align 4
  %5804 = extractelement <16 x float> %5763, i32 14
  %5805 = getelementptr inbounds i8, i8* %5761, i64 224
  %5806 = bitcast i8* %5805 to float*
  store float %5804, float* %5806, align 4
  %5807 = extractelement <16 x float> %5763, i32 15
  %5808 = getelementptr inbounds i8, i8* %5761, i64 240
  %5809 = bitcast i8* %5808 to float*
  store float %5807, float* %5809, align 4
  %5810 = getelementptr inbounds i8, i8* %5761, i64 4
  %5811 = bitcast i8* %5810 to float*
  %5812 = load <16 x float>, <16 x float>* %8, align 64
  %5813 = extractelement <16 x float> %5812, i32 0
  store float %5813, float* %5811, align 4
  %5814 = extractelement <16 x float> %5812, i32 1
  %5815 = getelementptr inbounds i8, i8* %5810, i64 16
  %5816 = bitcast i8* %5815 to float*
  store float %5814, float* %5816, align 4
  %5817 = extractelement <16 x float> %5812, i32 2
  %5818 = getelementptr inbounds i8, i8* %5810, i64 32
  %5819 = bitcast i8* %5818 to float*
  store float %5817, float* %5819, align 4
  %5820 = extractelement <16 x float> %5812, i32 3
  %5821 = getelementptr inbounds i8, i8* %5810, i64 48
  %5822 = bitcast i8* %5821 to float*
  store float %5820, float* %5822, align 4
  %5823 = extractelement <16 x float> %5812, i32 4
  %5824 = getelementptr inbounds i8, i8* %5810, i64 64
  %5825 = bitcast i8* %5824 to float*
  store float %5823, float* %5825, align 4
  %5826 = extractelement <16 x float> %5812, i32 5
  %5827 = getelementptr inbounds i8, i8* %5810, i64 80
  %5828 = bitcast i8* %5827 to float*
  store float %5826, float* %5828, align 4
  %5829 = extractelement <16 x float> %5812, i32 6
  %5830 = getelementptr inbounds i8, i8* %5810, i64 96
  %5831 = bitcast i8* %5830 to float*
  store float %5829, float* %5831, align 4
  %5832 = extractelement <16 x float> %5812, i32 7
  %5833 = getelementptr inbounds i8, i8* %5810, i64 112
  %5834 = bitcast i8* %5833 to float*
  store float %5832, float* %5834, align 4
  %5835 = extractelement <16 x float> %5812, i32 8
  %5836 = getelementptr inbounds i8, i8* %5810, i64 128
  %5837 = bitcast i8* %5836 to float*
  store float %5835, float* %5837, align 4
  %5838 = extractelement <16 x float> %5812, i32 9
  %5839 = getelementptr inbounds i8, i8* %5810, i64 144
  %5840 = bitcast i8* %5839 to float*
  store float %5838, float* %5840, align 4
  %5841 = extractelement <16 x float> %5812, i32 10
  %5842 = getelementptr inbounds i8, i8* %5810, i64 160
  %5843 = bitcast i8* %5842 to float*
  store float %5841, float* %5843, align 4
  %5844 = extractelement <16 x float> %5812, i32 11
  %5845 = getelementptr inbounds i8, i8* %5810, i64 176
  %5846 = bitcast i8* %5845 to float*
  store float %5844, float* %5846, align 4
  %5847 = extractelement <16 x float> %5812, i32 12
  %5848 = getelementptr inbounds i8, i8* %5810, i64 192
  %5849 = bitcast i8* %5848 to float*
  store float %5847, float* %5849, align 4
  %5850 = extractelement <16 x float> %5812, i32 13
  %5851 = getelementptr inbounds i8, i8* %5810, i64 208
  %5852 = bitcast i8* %5851 to float*
  store float %5850, float* %5852, align 4
  %5853 = extractelement <16 x float> %5812, i32 14
  %5854 = getelementptr inbounds i8, i8* %5810, i64 224
  %5855 = bitcast i8* %5854 to float*
  store float %5853, float* %5855, align 4
  %5856 = extractelement <16 x float> %5812, i32 15
  %5857 = getelementptr inbounds i8, i8* %5810, i64 240
  %5858 = bitcast i8* %5857 to float*
  store float %5856, float* %5858, align 4
  %5859 = getelementptr inbounds i8, i8* %5761, i64 8
  %5860 = bitcast i8* %5859 to float*
  %5861 = load <16 x float>, <16 x float>* %9, align 64
  %5862 = extractelement <16 x float> %5861, i32 0
  store float %5862, float* %5860, align 4
  %5863 = extractelement <16 x float> %5861, i32 1
  %5864 = getelementptr inbounds i8, i8* %5859, i64 16
  %5865 = bitcast i8* %5864 to float*
  store float %5863, float* %5865, align 4
  %5866 = extractelement <16 x float> %5861, i32 2
  %5867 = getelementptr inbounds i8, i8* %5859, i64 32
  %5868 = bitcast i8* %5867 to float*
  store float %5866, float* %5868, align 4
  %5869 = extractelement <16 x float> %5861, i32 3
  %5870 = getelementptr inbounds i8, i8* %5859, i64 48
  %5871 = bitcast i8* %5870 to float*
  store float %5869, float* %5871, align 4
  %5872 = extractelement <16 x float> %5861, i32 4
  %5873 = getelementptr inbounds i8, i8* %5859, i64 64
  %5874 = bitcast i8* %5873 to float*
  store float %5872, float* %5874, align 4
  %5875 = extractelement <16 x float> %5861, i32 5
  %5876 = getelementptr inbounds i8, i8* %5859, i64 80
  %5877 = bitcast i8* %5876 to float*
  store float %5875, float* %5877, align 4
  %5878 = extractelement <16 x float> %5861, i32 6
  %5879 = getelementptr inbounds i8, i8* %5859, i64 96
  %5880 = bitcast i8* %5879 to float*
  store float %5878, float* %5880, align 4
  %5881 = extractelement <16 x float> %5861, i32 7
  %5882 = getelementptr inbounds i8, i8* %5859, i64 112
  %5883 = bitcast i8* %5882 to float*
  store float %5881, float* %5883, align 4
  %5884 = extractelement <16 x float> %5861, i32 8
  %5885 = getelementptr inbounds i8, i8* %5859, i64 128
  %5886 = bitcast i8* %5885 to float*
  store float %5884, float* %5886, align 4
  %5887 = extractelement <16 x float> %5861, i32 9
  %5888 = getelementptr inbounds i8, i8* %5859, i64 144
  %5889 = bitcast i8* %5888 to float*
  store float %5887, float* %5889, align 4
  %5890 = extractelement <16 x float> %5861, i32 10
  %5891 = getelementptr inbounds i8, i8* %5859, i64 160
  %5892 = bitcast i8* %5891 to float*
  store float %5890, float* %5892, align 4
  %5893 = extractelement <16 x float> %5861, i32 11
  %5894 = getelementptr inbounds i8, i8* %5859, i64 176
  %5895 = bitcast i8* %5894 to float*
  store float %5893, float* %5895, align 4
  %5896 = extractelement <16 x float> %5861, i32 12
  %5897 = getelementptr inbounds i8, i8* %5859, i64 192
  %5898 = bitcast i8* %5897 to float*
  store float %5896, float* %5898, align 4
  %5899 = extractelement <16 x float> %5861, i32 13
  %5900 = getelementptr inbounds i8, i8* %5859, i64 208
  %5901 = bitcast i8* %5900 to float*
  store float %5899, float* %5901, align 4
  %5902 = extractelement <16 x float> %5861, i32 14
  %5903 = getelementptr inbounds i8, i8* %5859, i64 224
  %5904 = bitcast i8* %5903 to float*
  store float %5902, float* %5904, align 4
  %5905 = extractelement <16 x float> %5861, i32 15
  %5906 = getelementptr inbounds i8, i8* %5859, i64 240
  %5907 = bitcast i8* %5906 to float*
  store float %5905, float* %5907, align 4
  %5908 = getelementptr inbounds i8, i8* %5761, i64 12
  %5909 = bitcast i8* %5908 to float*
  %5910 = load <16 x float>, <16 x float>* %10, align 64
  %5911 = extractelement <16 x float> %5910, i32 0
  store float %5911, float* %5909, align 4
  %5912 = extractelement <16 x float> %5910, i32 1
  %5913 = getelementptr inbounds i8, i8* %5908, i64 16
  %5914 = bitcast i8* %5913 to float*
  store float %5912, float* %5914, align 4
  %5915 = extractelement <16 x float> %5910, i32 2
  %5916 = getelementptr inbounds i8, i8* %5908, i64 32
  %5917 = bitcast i8* %5916 to float*
  store float %5915, float* %5917, align 4
  %5918 = extractelement <16 x float> %5910, i32 3
  %5919 = getelementptr inbounds i8, i8* %5908, i64 48
  %5920 = bitcast i8* %5919 to float*
  store float %5918, float* %5920, align 4
  %5921 = extractelement <16 x float> %5910, i32 4
  %5922 = getelementptr inbounds i8, i8* %5908, i64 64
  %5923 = bitcast i8* %5922 to float*
  store float %5921, float* %5923, align 4
  %5924 = extractelement <16 x float> %5910, i32 5
  %5925 = getelementptr inbounds i8, i8* %5908, i64 80
  %5926 = bitcast i8* %5925 to float*
  store float %5924, float* %5926, align 4
  %5927 = extractelement <16 x float> %5910, i32 6
  %5928 = getelementptr inbounds i8, i8* %5908, i64 96
  %5929 = bitcast i8* %5928 to float*
  store float %5927, float* %5929, align 4
  %5930 = extractelement <16 x float> %5910, i32 7
  %5931 = getelementptr inbounds i8, i8* %5908, i64 112
  %5932 = bitcast i8* %5931 to float*
  store float %5930, float* %5932, align 4
  %5933 = extractelement <16 x float> %5910, i32 8
  %5934 = getelementptr inbounds i8, i8* %5908, i64 128
  %5935 = bitcast i8* %5934 to float*
  store float %5933, float* %5935, align 4
  %5936 = extractelement <16 x float> %5910, i32 9
  %5937 = getelementptr inbounds i8, i8* %5908, i64 144
  %5938 = bitcast i8* %5937 to float*
  store float %5936, float* %5938, align 4
  %5939 = extractelement <16 x float> %5910, i32 10
  %5940 = getelementptr inbounds i8, i8* %5908, i64 160
  %5941 = bitcast i8* %5940 to float*
  store float %5939, float* %5941, align 4
  %5942 = extractelement <16 x float> %5910, i32 11
  %5943 = getelementptr inbounds i8, i8* %5908, i64 176
  %5944 = bitcast i8* %5943 to float*
  store float %5942, float* %5944, align 4
  %5945 = extractelement <16 x float> %5910, i32 12
  %5946 = getelementptr inbounds i8, i8* %5908, i64 192
  %5947 = bitcast i8* %5946 to float*
  store float %5945, float* %5947, align 4
  %5948 = extractelement <16 x float> %5910, i32 13
  %5949 = getelementptr inbounds i8, i8* %5908, i64 208
  %5950 = bitcast i8* %5949 to float*
  store float %5948, float* %5950, align 4
  %5951 = extractelement <16 x float> %5910, i32 14
  %5952 = getelementptr inbounds i8, i8* %5908, i64 224
  %5953 = bitcast i8* %5952 to float*
  store float %5951, float* %5953, align 4
  %5954 = extractelement <16 x float> %5910, i32 15
  %5955 = getelementptr inbounds i8, i8* %5908, i64 240
  %5956 = bitcast i8* %5955 to float*
  store float %5954, float* %5956, align 4
  br label %5957

5957:                                             ; preds = %5760, %5612, %5591, %5440, %5406, %5234, %5205, %5048, %5023, %4998, %4886, %4866, %4840, %4832, %4824
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #17
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #17
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %12) #17
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #17
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x float> @llvm.x86.avx512.mask.vcvtph2ps.512(<16 x i16>, <16 x float>, i16, i32 immarg) #13

; Function Attrs: nounwind readnone
declare <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float>, i32 immarg, <16 x float>, i16, i32 immarg) #13

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3skxL4clutEjjPKhS1_S1_PDv16_fS3_S3_S3_(i32, i32, i8* nocapture readonly, i8*, i8*, <16 x float>* nocapture, <16 x float>* nocapture, <16 x float>* nocapture, <16 x float>* nocapture) unnamed_addr #15 {
  %10 = alloca [8 x <16 x i32>], align 64
  %11 = alloca [8 x <16 x float>], align 64
  %12 = alloca [4 x <16 x float>], align 64
  %13 = bitcast [8 x <16 x i32>]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %13) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 64 %13, i8 -86, i64 512, i1 false)
  %14 = bitcast [8 x <16 x float>]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %14) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 64 %14, i8 -1, i64 512, i1 false)
  %15 = bitcast [4 x <16 x float>]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %15) #17
  %16 = getelementptr inbounds [4 x <16 x float>], [4 x <16 x float>]* %12, i64 0, i64 0
  %17 = load <16 x float>, <16 x float>* %5, align 64
  store <16 x float> %17, <16 x float>* %16, align 64
  %18 = getelementptr inbounds [4 x <16 x float>], [4 x <16 x float>]* %12, i64 0, i64 1
  %19 = load <16 x float>, <16 x float>* %6, align 64
  store <16 x float> %19, <16 x float>* %18, align 64
  %20 = getelementptr inbounds [4 x <16 x float>], [4 x <16 x float>]* %12, i64 0, i64 2
  %21 = load <16 x float>, <16 x float>* %7, align 64
  store <16 x float> %21, <16 x float>* %20, align 64
  %22 = getelementptr inbounds [4 x <16 x float>], [4 x <16 x float>]* %12, i64 0, i64 3
  %23 = load <16 x float>, <16 x float>* %8, align 64
  store <16 x float> %23, <16 x float>* %22, align 64
  %24 = add i32 %0, 3
  %25 = icmp sgt i32 %0, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %9
  %27 = sext i32 %0 to i64
  br label %30

28:                                               ; preds = %30, %9
  store <16 x float> zeroinitializer, <16 x float>* %7, align 64
  store <16 x float> zeroinitializer, <16 x float>* %6, align 64
  store <16 x float> zeroinitializer, <16 x float>* %5, align 64
  %29 = icmp eq i32 %1, 4
  br i1 %29, label %64, label %65

30:                                               ; preds = %26, %30
  %31 = phi i64 [ %27, %26 ], [ %33, %30 ]
  %32 = phi i32 [ 1, %26 ], [ %57, %30 ]
  %33 = add nsw i64 %31, -1
  %34 = getelementptr inbounds [4 x <16 x float>], [4 x <16 x float>]* %12, i64 0, i64 %33
  %35 = load <16 x float>, <16 x float>* %34, align 64
  %36 = getelementptr inbounds i8, i8* %2, i64 %33
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = add nsw i32 %38, -1
  %40 = sitofp i32 %39 to float
  %41 = insertelement <16 x float> undef, float %40, i32 0
  %42 = shufflevector <16 x float> %41, <16 x float> undef, <16 x i32> zeroinitializer
  %43 = fmul <16 x float> %35, %42
  %44 = fptosi <16 x float> %43 to <16 x i32>
  %45 = fadd <16 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %46 = bitcast <16 x float> %45 to <16 x i32>
  %47 = add <16 x i32> %46, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %48 = bitcast <16 x i32> %47 to <16 x float>
  %49 = fptosi <16 x float> %48 to <16 x i32>
  %50 = insertelement <16 x i32> undef, i32 %32, i32 0
  %51 = shufflevector <16 x i32> %50, <16 x i32> undef, <16 x i32> zeroinitializer
  %52 = mul <16 x i32> %51, %44
  %53 = getelementptr inbounds [8 x <16 x i32>], [8 x <16 x i32>]* %10, i64 0, i64 %33
  store <16 x i32> %52, <16 x i32>* %53, align 64
  %54 = mul <16 x i32> %51, %49
  %55 = add nuw i64 %31, 3
  %56 = getelementptr inbounds [8 x <16 x i32>], [8 x <16 x i32>]* %10, i64 0, i64 %55
  store <16 x i32> %54, <16 x i32>* %56, align 64
  %57 = mul nsw i32 %32, %38
  %58 = sitofp <16 x i32> %44 to <16 x float>
  %59 = fsub <16 x float> %43, %58
  %60 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %59
  %61 = getelementptr inbounds [8 x <16 x float>], [8 x <16 x float>]* %11, i64 0, i64 %33
  store <16 x float> %60, <16 x float>* %61, align 64
  %62 = getelementptr inbounds [8 x <16 x float>], [8 x <16 x float>]* %11, i64 0, i64 %55
  store <16 x float> %59, <16 x float>* %62, align 64
  %63 = icmp sgt i64 %33, 0
  br i1 %63, label %30, label %28

64:                                               ; preds = %28
  store <16 x float> zeroinitializer, <16 x float>* %8, align 64
  br label %65

65:                                               ; preds = %64, %28
  %66 = shl i32 1, %0
  %67 = icmp eq i32 %0, 31
  br i1 %67, label %74, label %68

68:                                               ; preds = %65
  %69 = and i32 %24, 3
  %70 = icmp eq i32 %1, 3
  %71 = icmp ne i8* %3, null
  %72 = getelementptr inbounds i8, i8* %4, i64 -2
  %73 = getelementptr inbounds i8, i8* %3, i64 -1
  br label %75

74:                                               ; preds = %687, %65
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %15) #17
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %14) #17
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %13) #17
  ret void

75:                                               ; preds = %68, %687
  %76 = phi i32 [ 0, %68 ], [ %704, %687 ]
  %77 = shl i32 %76, 2
  %78 = and i32 %77, 4
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [8 x <16 x i32>], [8 x <16 x i32>]* %10, i64 0, i64 %79
  %81 = load <16 x i32>, <16 x i32>* %80, align 64
  %82 = getelementptr inbounds [8 x <16 x float>], [8 x <16 x float>]* %11, i64 0, i64 %79
  %83 = load <16 x float>, <16 x float>* %82, align 64
  switch i32 %69, label %120 [
    i32 3, label %84
    i32 2, label %95
    i32 1, label %107
  ]

84:                                               ; preds = %75
  %85 = lshr i32 %76, 1
  %86 = and i32 %85, 4
  %87 = or i32 %86, 3
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds [8 x <16 x i32>], [8 x <16 x i32>]* %10, i64 0, i64 %88
  %90 = load <16 x i32>, <16 x i32>* %89, align 64
  %91 = add <16 x i32> %90, %81
  %92 = getelementptr inbounds [8 x <16 x float>], [8 x <16 x float>]* %11, i64 0, i64 %88
  %93 = load <16 x float>, <16 x float>* %92, align 64
  %94 = fmul <16 x float> %83, %93
  br label %95

95:                                               ; preds = %75, %84
  %96 = phi <16 x i32> [ %81, %75 ], [ %91, %84 ]
  %97 = phi <16 x float> [ %83, %75 ], [ %94, %84 ]
  %98 = and i32 %76, 4
  %99 = or i32 %98, 2
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds [8 x <16 x i32>], [8 x <16 x i32>]* %10, i64 0, i64 %100
  %102 = load <16 x i32>, <16 x i32>* %101, align 64
  %103 = add <16 x i32> %102, %96
  %104 = getelementptr inbounds [8 x <16 x float>], [8 x <16 x float>]* %11, i64 0, i64 %100
  %105 = load <16 x float>, <16 x float>* %104, align 64
  %106 = fmul <16 x float> %97, %105
  br label %107

107:                                              ; preds = %75, %95
  %108 = phi <16 x i32> [ %81, %75 ], [ %103, %95 ]
  %109 = phi <16 x float> [ %83, %75 ], [ %106, %95 ]
  %110 = shl nuw i32 %76, 1
  %111 = and i32 %110, 4
  %112 = or i32 %111, 1
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds [8 x <16 x i32>], [8 x <16 x i32>]* %10, i64 0, i64 %113
  %115 = load <16 x i32>, <16 x i32>* %114, align 64
  %116 = add <16 x i32> %115, %108
  %117 = getelementptr inbounds [8 x <16 x float>], [8 x <16 x float>]* %11, i64 0, i64 %113
  %118 = load <16 x float>, <16 x float>* %117, align 64
  %119 = fmul <16 x float> %109, %118
  br label %120

120:                                              ; preds = %107, %75
  %121 = phi <16 x i32> [ %81, %75 ], [ %116, %107 ]
  %122 = phi <16 x float> [ %83, %75 ], [ %119, %107 ]
  br i1 %70, label %123, label %162

123:                                              ; preds = %120
  br i1 %71, label %124, label %138

124:                                              ; preds = %123
  %125 = mul <16 x i32> %121, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %126 = tail call <16 x i32> @llvm.x86.avx512.mask.gather.dpi.512(<16 x i32> zeroinitializer, i8* %73, <16 x i32> %125, <16 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, i32 1) #17
  %127 = lshr <16 x i32> %126, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %128 = and <16 x i32> %127, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %129 = uitofp <16 x i32> %128 to <16 x float>
  %130 = fmul <16 x float> %129, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %131 = lshr <16 x i32> %126, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %132 = and <16 x i32> %131, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %133 = uitofp <16 x i32> %132 to <16 x float>
  %134 = fmul <16 x float> %133, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %135 = lshr <16 x i32> %126, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %136 = uitofp <16 x i32> %135 to <16 x float>
  %137 = fmul <16 x float> %136, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %687

138:                                              ; preds = %123
  %139 = mul <16 x i32> %121, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %140 = shufflevector <16 x i32> %139, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %141 = tail call <8 x i64> @llvm.x86.avx512.mask.gather.dpq.512(<8 x i64> zeroinitializer, i8* %72, <8 x i32> %140, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, i32 1) #17
  %142 = shufflevector <16 x i32> %139, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %143 = tail call <8 x i64> @llvm.x86.avx512.mask.gather.dpq.512(<8 x i64> zeroinitializer, i8* %72, <8 x i32> %142, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, i32 1) #17
  %144 = shufflevector <8 x i64> %141, <8 x i64> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %145 = shufflevector <8 x i64> %143, <8 x i64> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %146 = shufflevector <16 x i64> %144, <16 x i64> %145, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %147 = lshr <16 x i64> %146, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %148 = and <16 x i64> %147, <i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240, i64 280379743338240>
  %149 = lshr <16 x i64> %146, <i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24>
  %150 = and <16 x i64> %149, <i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415, i64 1095233372415>
  %151 = or <16 x i64> %148, %150
  %152 = and <16 x i64> %151, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %153 = uitofp <16 x i64> %152 to <16 x float>
  %154 = fmul <16 x float> %153, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %155 = lshr <16 x i64> %151, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %156 = and <16 x i64> %155, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %157 = uitofp <16 x i64> %156 to <16 x float>
  %158 = fmul <16 x float> %157, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %159 = lshr <16 x i64> %151, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %160 = uitofp <16 x i64> %159 to <16 x float>
  %161 = fmul <16 x float> %160, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %687

162:                                              ; preds = %120
  br i1 %71, label %163, label %275

163:                                              ; preds = %162
  %164 = shl nsw <16 x i32> %121, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %165 = extractelement <16 x i32> %164, i32 0
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i8, i8* %3, i64 %166
  %168 = bitcast i8* %167 to i32*
  %169 = load i32, i32* %168, align 1
  %170 = insertelement <16 x i32> undef, i32 %169, i32 0
  %171 = extractelement <16 x i32> %164, i32 1
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %3, i64 %172
  %174 = bitcast i8* %173 to i32*
  %175 = load i32, i32* %174, align 1
  %176 = insertelement <16 x i32> %170, i32 %175, i32 1
  %177 = extractelement <16 x i32> %164, i32 2
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i8, i8* %3, i64 %178
  %180 = bitcast i8* %179 to i32*
  %181 = load i32, i32* %180, align 1
  %182 = insertelement <16 x i32> %176, i32 %181, i32 2
  %183 = extractelement <16 x i32> %164, i32 3
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds i8, i8* %3, i64 %184
  %186 = bitcast i8* %185 to i32*
  %187 = load i32, i32* %186, align 1
  %188 = insertelement <16 x i32> %182, i32 %187, i32 3
  %189 = extractelement <16 x i32> %164, i32 4
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %3, i64 %190
  %192 = bitcast i8* %191 to i32*
  %193 = load i32, i32* %192, align 1
  %194 = insertelement <16 x i32> %188, i32 %193, i32 4
  %195 = extractelement <16 x i32> %164, i32 5
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds i8, i8* %3, i64 %196
  %198 = bitcast i8* %197 to i32*
  %199 = load i32, i32* %198, align 1
  %200 = insertelement <16 x i32> %194, i32 %199, i32 5
  %201 = extractelement <16 x i32> %164, i32 6
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds i8, i8* %3, i64 %202
  %204 = bitcast i8* %203 to i32*
  %205 = load i32, i32* %204, align 1
  %206 = insertelement <16 x i32> %200, i32 %205, i32 6
  %207 = extractelement <16 x i32> %164, i32 7
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i8, i8* %3, i64 %208
  %210 = bitcast i8* %209 to i32*
  %211 = load i32, i32* %210, align 1
  %212 = insertelement <16 x i32> %206, i32 %211, i32 7
  %213 = extractelement <16 x i32> %164, i32 8
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds i8, i8* %3, i64 %214
  %216 = bitcast i8* %215 to i32*
  %217 = load i32, i32* %216, align 1
  %218 = insertelement <16 x i32> %212, i32 %217, i32 8
  %219 = extractelement <16 x i32> %164, i32 9
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds i8, i8* %3, i64 %220
  %222 = bitcast i8* %221 to i32*
  %223 = load i32, i32* %222, align 1
  %224 = insertelement <16 x i32> %218, i32 %223, i32 9
  %225 = extractelement <16 x i32> %164, i32 10
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds i8, i8* %3, i64 %226
  %228 = bitcast i8* %227 to i32*
  %229 = load i32, i32* %228, align 1
  %230 = insertelement <16 x i32> %224, i32 %229, i32 10
  %231 = extractelement <16 x i32> %164, i32 11
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds i8, i8* %3, i64 %232
  %234 = bitcast i8* %233 to i32*
  %235 = load i32, i32* %234, align 1
  %236 = insertelement <16 x i32> %230, i32 %235, i32 11
  %237 = extractelement <16 x i32> %164, i32 12
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds i8, i8* %3, i64 %238
  %240 = bitcast i8* %239 to i32*
  %241 = load i32, i32* %240, align 1
  %242 = insertelement <16 x i32> %236, i32 %241, i32 12
  %243 = extractelement <16 x i32> %164, i32 13
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds i8, i8* %3, i64 %244
  %246 = bitcast i8* %245 to i32*
  %247 = load i32, i32* %246, align 1
  %248 = insertelement <16 x i32> %242, i32 %247, i32 13
  %249 = extractelement <16 x i32> %164, i32 14
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds i8, i8* %3, i64 %250
  %252 = bitcast i8* %251 to i32*
  %253 = load i32, i32* %252, align 1
  %254 = insertelement <16 x i32> %248, i32 %253, i32 14
  %255 = extractelement <16 x i32> %164, i32 15
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds i8, i8* %3, i64 %256
  %258 = bitcast i8* %257 to i32*
  %259 = load i32, i32* %258, align 1
  %260 = insertelement <16 x i32> %254, i32 %259, i32 15
  %261 = and <16 x i32> %260, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %262 = uitofp <16 x i32> %261 to <16 x float>
  %263 = fmul <16 x float> %262, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %264 = lshr <16 x i32> %260, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %265 = and <16 x i32> %264, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %266 = uitofp <16 x i32> %265 to <16 x float>
  %267 = fmul <16 x float> %266, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %268 = lshr <16 x i32> %260, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %269 = and <16 x i32> %268, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %270 = uitofp <16 x i32> %269 to <16 x float>
  %271 = fmul <16 x float> %270, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %272 = lshr <16 x i32> %260, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %273 = uitofp <16 x i32> %272 to <16 x float>
  %274 = fmul <16 x float> %273, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  br label %687

275:                                              ; preds = %162
  %276 = shl <16 x i32> %121, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %277 = shl <16 x i32> %121, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %278 = extractelement <16 x i32> %277, i32 0
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds i8, i8* %4, i64 %279
  %281 = bitcast i8* %280 to i16*
  %282 = load i16, i16* %281, align 1
  %283 = insertelement <16 x i16> undef, i16 %282, i32 0
  %284 = extractelement <16 x i32> %277, i32 1
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds i8, i8* %4, i64 %285
  %287 = bitcast i8* %286 to i16*
  %288 = load i16, i16* %287, align 1
  %289 = insertelement <16 x i16> %283, i16 %288, i32 1
  %290 = extractelement <16 x i32> %277, i32 2
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds i8, i8* %4, i64 %291
  %293 = bitcast i8* %292 to i16*
  %294 = load i16, i16* %293, align 1
  %295 = insertelement <16 x i16> %289, i16 %294, i32 2
  %296 = extractelement <16 x i32> %277, i32 3
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds i8, i8* %4, i64 %297
  %299 = bitcast i8* %298 to i16*
  %300 = load i16, i16* %299, align 1
  %301 = insertelement <16 x i16> %295, i16 %300, i32 3
  %302 = extractelement <16 x i32> %277, i32 4
  %303 = sext i32 %302 to i64
  %304 = getelementptr inbounds i8, i8* %4, i64 %303
  %305 = bitcast i8* %304 to i16*
  %306 = load i16, i16* %305, align 1
  %307 = insertelement <16 x i16> %301, i16 %306, i32 4
  %308 = extractelement <16 x i32> %277, i32 5
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds i8, i8* %4, i64 %309
  %311 = bitcast i8* %310 to i16*
  %312 = load i16, i16* %311, align 1
  %313 = insertelement <16 x i16> %307, i16 %312, i32 5
  %314 = extractelement <16 x i32> %277, i32 6
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds i8, i8* %4, i64 %315
  %317 = bitcast i8* %316 to i16*
  %318 = load i16, i16* %317, align 1
  %319 = insertelement <16 x i16> %313, i16 %318, i32 6
  %320 = extractelement <16 x i32> %277, i32 7
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds i8, i8* %4, i64 %321
  %323 = bitcast i8* %322 to i16*
  %324 = load i16, i16* %323, align 1
  %325 = insertelement <16 x i16> %319, i16 %324, i32 7
  %326 = extractelement <16 x i32> %277, i32 8
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds i8, i8* %4, i64 %327
  %329 = bitcast i8* %328 to i16*
  %330 = load i16, i16* %329, align 1
  %331 = insertelement <16 x i16> %325, i16 %330, i32 8
  %332 = extractelement <16 x i32> %277, i32 9
  %333 = sext i32 %332 to i64
  %334 = getelementptr inbounds i8, i8* %4, i64 %333
  %335 = bitcast i8* %334 to i16*
  %336 = load i16, i16* %335, align 1
  %337 = insertelement <16 x i16> %331, i16 %336, i32 9
  %338 = extractelement <16 x i32> %277, i32 10
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds i8, i8* %4, i64 %339
  %341 = bitcast i8* %340 to i16*
  %342 = load i16, i16* %341, align 1
  %343 = insertelement <16 x i16> %337, i16 %342, i32 10
  %344 = extractelement <16 x i32> %277, i32 11
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds i8, i8* %4, i64 %345
  %347 = bitcast i8* %346 to i16*
  %348 = load i16, i16* %347, align 1
  %349 = insertelement <16 x i16> %343, i16 %348, i32 11
  %350 = extractelement <16 x i32> %277, i32 12
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds i8, i8* %4, i64 %351
  %353 = bitcast i8* %352 to i16*
  %354 = load i16, i16* %353, align 1
  %355 = insertelement <16 x i16> %349, i16 %354, i32 12
  %356 = extractelement <16 x i32> %277, i32 13
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds i8, i8* %4, i64 %357
  %359 = bitcast i8* %358 to i16*
  %360 = load i16, i16* %359, align 1
  %361 = insertelement <16 x i16> %355, i16 %360, i32 13
  %362 = extractelement <16 x i32> %277, i32 14
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds i8, i8* %4, i64 %363
  %365 = bitcast i8* %364 to i16*
  %366 = load i16, i16* %365, align 1
  %367 = insertelement <16 x i16> %361, i16 %366, i32 14
  %368 = extractelement <16 x i32> %277, i32 15
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds i8, i8* %4, i64 %369
  %371 = bitcast i8* %370 to i16*
  %372 = load i16, i16* %371, align 1
  %373 = insertelement <16 x i16> %367, i16 %372, i32 15
  %374 = lshr <16 x i16> %373, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %375 = shl <16 x i16> %373, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %376 = or <16 x i16> %374, %375
  %377 = uitofp <16 x i16> %376 to <16 x float>
  %378 = fmul <16 x float> %377, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %379 = shl <16 x i32> %121, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %380 = or <16 x i32> %379, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %381 = extractelement <16 x i32> %380, i32 0
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds i8, i8* %4, i64 %382
  %384 = bitcast i8* %383 to i16*
  %385 = load i16, i16* %384, align 1
  %386 = insertelement <16 x i16> undef, i16 %385, i32 0
  %387 = extractelement <16 x i32> %380, i32 1
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds i8, i8* %4, i64 %388
  %390 = bitcast i8* %389 to i16*
  %391 = load i16, i16* %390, align 1
  %392 = insertelement <16 x i16> %386, i16 %391, i32 1
  %393 = extractelement <16 x i32> %380, i32 2
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds i8, i8* %4, i64 %394
  %396 = bitcast i8* %395 to i16*
  %397 = load i16, i16* %396, align 1
  %398 = insertelement <16 x i16> %392, i16 %397, i32 2
  %399 = extractelement <16 x i32> %380, i32 3
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds i8, i8* %4, i64 %400
  %402 = bitcast i8* %401 to i16*
  %403 = load i16, i16* %402, align 1
  %404 = insertelement <16 x i16> %398, i16 %403, i32 3
  %405 = extractelement <16 x i32> %380, i32 4
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds i8, i8* %4, i64 %406
  %408 = bitcast i8* %407 to i16*
  %409 = load i16, i16* %408, align 1
  %410 = insertelement <16 x i16> %404, i16 %409, i32 4
  %411 = extractelement <16 x i32> %380, i32 5
  %412 = sext i32 %411 to i64
  %413 = getelementptr inbounds i8, i8* %4, i64 %412
  %414 = bitcast i8* %413 to i16*
  %415 = load i16, i16* %414, align 1
  %416 = insertelement <16 x i16> %410, i16 %415, i32 5
  %417 = extractelement <16 x i32> %380, i32 6
  %418 = sext i32 %417 to i64
  %419 = getelementptr inbounds i8, i8* %4, i64 %418
  %420 = bitcast i8* %419 to i16*
  %421 = load i16, i16* %420, align 1
  %422 = insertelement <16 x i16> %416, i16 %421, i32 6
  %423 = extractelement <16 x i32> %380, i32 7
  %424 = sext i32 %423 to i64
  %425 = getelementptr inbounds i8, i8* %4, i64 %424
  %426 = bitcast i8* %425 to i16*
  %427 = load i16, i16* %426, align 1
  %428 = insertelement <16 x i16> %422, i16 %427, i32 7
  %429 = extractelement <16 x i32> %380, i32 8
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds i8, i8* %4, i64 %430
  %432 = bitcast i8* %431 to i16*
  %433 = load i16, i16* %432, align 1
  %434 = insertelement <16 x i16> %428, i16 %433, i32 8
  %435 = extractelement <16 x i32> %380, i32 9
  %436 = sext i32 %435 to i64
  %437 = getelementptr inbounds i8, i8* %4, i64 %436
  %438 = bitcast i8* %437 to i16*
  %439 = load i16, i16* %438, align 1
  %440 = insertelement <16 x i16> %434, i16 %439, i32 9
  %441 = extractelement <16 x i32> %380, i32 10
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds i8, i8* %4, i64 %442
  %444 = bitcast i8* %443 to i16*
  %445 = load i16, i16* %444, align 1
  %446 = insertelement <16 x i16> %440, i16 %445, i32 10
  %447 = extractelement <16 x i32> %380, i32 11
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds i8, i8* %4, i64 %448
  %450 = bitcast i8* %449 to i16*
  %451 = load i16, i16* %450, align 1
  %452 = insertelement <16 x i16> %446, i16 %451, i32 11
  %453 = extractelement <16 x i32> %380, i32 12
  %454 = sext i32 %453 to i64
  %455 = getelementptr inbounds i8, i8* %4, i64 %454
  %456 = bitcast i8* %455 to i16*
  %457 = load i16, i16* %456, align 1
  %458 = insertelement <16 x i16> %452, i16 %457, i32 12
  %459 = extractelement <16 x i32> %380, i32 13
  %460 = sext i32 %459 to i64
  %461 = getelementptr inbounds i8, i8* %4, i64 %460
  %462 = bitcast i8* %461 to i16*
  %463 = load i16, i16* %462, align 1
  %464 = insertelement <16 x i16> %458, i16 %463, i32 13
  %465 = extractelement <16 x i32> %380, i32 14
  %466 = sext i32 %465 to i64
  %467 = getelementptr inbounds i8, i8* %4, i64 %466
  %468 = bitcast i8* %467 to i16*
  %469 = load i16, i16* %468, align 1
  %470 = insertelement <16 x i16> %464, i16 %469, i32 14
  %471 = extractelement <16 x i32> %380, i32 15
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds i8, i8* %4, i64 %472
  %474 = bitcast i8* %473 to i16*
  %475 = load i16, i16* %474, align 1
  %476 = insertelement <16 x i16> %470, i16 %475, i32 15
  %477 = lshr <16 x i16> %476, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %478 = shl <16 x i16> %476, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %479 = or <16 x i16> %477, %478
  %480 = uitofp <16 x i16> %479 to <16 x float>
  %481 = fmul <16 x float> %480, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %482 = shl <16 x i32> %121, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %483 = or <16 x i32> %482, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %484 = extractelement <16 x i32> %483, i32 0
  %485 = sext i32 %484 to i64
  %486 = getelementptr inbounds i8, i8* %4, i64 %485
  %487 = bitcast i8* %486 to i16*
  %488 = load i16, i16* %487, align 1
  %489 = insertelement <16 x i16> undef, i16 %488, i32 0
  %490 = extractelement <16 x i32> %483, i32 1
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds i8, i8* %4, i64 %491
  %493 = bitcast i8* %492 to i16*
  %494 = load i16, i16* %493, align 1
  %495 = insertelement <16 x i16> %489, i16 %494, i32 1
  %496 = extractelement <16 x i32> %483, i32 2
  %497 = sext i32 %496 to i64
  %498 = getelementptr inbounds i8, i8* %4, i64 %497
  %499 = bitcast i8* %498 to i16*
  %500 = load i16, i16* %499, align 1
  %501 = insertelement <16 x i16> %495, i16 %500, i32 2
  %502 = extractelement <16 x i32> %483, i32 3
  %503 = sext i32 %502 to i64
  %504 = getelementptr inbounds i8, i8* %4, i64 %503
  %505 = bitcast i8* %504 to i16*
  %506 = load i16, i16* %505, align 1
  %507 = insertelement <16 x i16> %501, i16 %506, i32 3
  %508 = extractelement <16 x i32> %483, i32 4
  %509 = sext i32 %508 to i64
  %510 = getelementptr inbounds i8, i8* %4, i64 %509
  %511 = bitcast i8* %510 to i16*
  %512 = load i16, i16* %511, align 1
  %513 = insertelement <16 x i16> %507, i16 %512, i32 4
  %514 = extractelement <16 x i32> %483, i32 5
  %515 = sext i32 %514 to i64
  %516 = getelementptr inbounds i8, i8* %4, i64 %515
  %517 = bitcast i8* %516 to i16*
  %518 = load i16, i16* %517, align 1
  %519 = insertelement <16 x i16> %513, i16 %518, i32 5
  %520 = extractelement <16 x i32> %483, i32 6
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds i8, i8* %4, i64 %521
  %523 = bitcast i8* %522 to i16*
  %524 = load i16, i16* %523, align 1
  %525 = insertelement <16 x i16> %519, i16 %524, i32 6
  %526 = extractelement <16 x i32> %483, i32 7
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds i8, i8* %4, i64 %527
  %529 = bitcast i8* %528 to i16*
  %530 = load i16, i16* %529, align 1
  %531 = insertelement <16 x i16> %525, i16 %530, i32 7
  %532 = extractelement <16 x i32> %483, i32 8
  %533 = sext i32 %532 to i64
  %534 = getelementptr inbounds i8, i8* %4, i64 %533
  %535 = bitcast i8* %534 to i16*
  %536 = load i16, i16* %535, align 1
  %537 = insertelement <16 x i16> %531, i16 %536, i32 8
  %538 = extractelement <16 x i32> %483, i32 9
  %539 = sext i32 %538 to i64
  %540 = getelementptr inbounds i8, i8* %4, i64 %539
  %541 = bitcast i8* %540 to i16*
  %542 = load i16, i16* %541, align 1
  %543 = insertelement <16 x i16> %537, i16 %542, i32 9
  %544 = extractelement <16 x i32> %483, i32 10
  %545 = sext i32 %544 to i64
  %546 = getelementptr inbounds i8, i8* %4, i64 %545
  %547 = bitcast i8* %546 to i16*
  %548 = load i16, i16* %547, align 1
  %549 = insertelement <16 x i16> %543, i16 %548, i32 10
  %550 = extractelement <16 x i32> %483, i32 11
  %551 = sext i32 %550 to i64
  %552 = getelementptr inbounds i8, i8* %4, i64 %551
  %553 = bitcast i8* %552 to i16*
  %554 = load i16, i16* %553, align 1
  %555 = insertelement <16 x i16> %549, i16 %554, i32 11
  %556 = extractelement <16 x i32> %483, i32 12
  %557 = sext i32 %556 to i64
  %558 = getelementptr inbounds i8, i8* %4, i64 %557
  %559 = bitcast i8* %558 to i16*
  %560 = load i16, i16* %559, align 1
  %561 = insertelement <16 x i16> %555, i16 %560, i32 12
  %562 = extractelement <16 x i32> %483, i32 13
  %563 = sext i32 %562 to i64
  %564 = getelementptr inbounds i8, i8* %4, i64 %563
  %565 = bitcast i8* %564 to i16*
  %566 = load i16, i16* %565, align 1
  %567 = insertelement <16 x i16> %561, i16 %566, i32 13
  %568 = extractelement <16 x i32> %483, i32 14
  %569 = sext i32 %568 to i64
  %570 = getelementptr inbounds i8, i8* %4, i64 %569
  %571 = bitcast i8* %570 to i16*
  %572 = load i16, i16* %571, align 1
  %573 = insertelement <16 x i16> %567, i16 %572, i32 14
  %574 = extractelement <16 x i32> %483, i32 15
  %575 = sext i32 %574 to i64
  %576 = getelementptr inbounds i8, i8* %4, i64 %575
  %577 = bitcast i8* %576 to i16*
  %578 = load i16, i16* %577, align 1
  %579 = insertelement <16 x i16> %573, i16 %578, i32 15
  %580 = lshr <16 x i16> %579, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %581 = shl <16 x i16> %579, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %582 = or <16 x i16> %580, %581
  %583 = uitofp <16 x i16> %582 to <16 x float>
  %584 = fmul <16 x float> %583, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %585 = or <16 x i32> %276, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %586 = extractelement <16 x i32> %585, i32 0
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds i8, i8* %4, i64 %587
  %589 = bitcast i8* %588 to i16*
  %590 = load i16, i16* %589, align 1
  %591 = insertelement <16 x i16> undef, i16 %590, i32 0
  %592 = extractelement <16 x i32> %585, i32 1
  %593 = sext i32 %592 to i64
  %594 = getelementptr inbounds i8, i8* %4, i64 %593
  %595 = bitcast i8* %594 to i16*
  %596 = load i16, i16* %595, align 1
  %597 = insertelement <16 x i16> %591, i16 %596, i32 1
  %598 = extractelement <16 x i32> %585, i32 2
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds i8, i8* %4, i64 %599
  %601 = bitcast i8* %600 to i16*
  %602 = load i16, i16* %601, align 1
  %603 = insertelement <16 x i16> %597, i16 %602, i32 2
  %604 = extractelement <16 x i32> %585, i32 3
  %605 = sext i32 %604 to i64
  %606 = getelementptr inbounds i8, i8* %4, i64 %605
  %607 = bitcast i8* %606 to i16*
  %608 = load i16, i16* %607, align 1
  %609 = insertelement <16 x i16> %603, i16 %608, i32 3
  %610 = extractelement <16 x i32> %585, i32 4
  %611 = sext i32 %610 to i64
  %612 = getelementptr inbounds i8, i8* %4, i64 %611
  %613 = bitcast i8* %612 to i16*
  %614 = load i16, i16* %613, align 1
  %615 = insertelement <16 x i16> %609, i16 %614, i32 4
  %616 = extractelement <16 x i32> %585, i32 5
  %617 = sext i32 %616 to i64
  %618 = getelementptr inbounds i8, i8* %4, i64 %617
  %619 = bitcast i8* %618 to i16*
  %620 = load i16, i16* %619, align 1
  %621 = insertelement <16 x i16> %615, i16 %620, i32 5
  %622 = extractelement <16 x i32> %585, i32 6
  %623 = sext i32 %622 to i64
  %624 = getelementptr inbounds i8, i8* %4, i64 %623
  %625 = bitcast i8* %624 to i16*
  %626 = load i16, i16* %625, align 1
  %627 = insertelement <16 x i16> %621, i16 %626, i32 6
  %628 = extractelement <16 x i32> %585, i32 7
  %629 = sext i32 %628 to i64
  %630 = getelementptr inbounds i8, i8* %4, i64 %629
  %631 = bitcast i8* %630 to i16*
  %632 = load i16, i16* %631, align 1
  %633 = insertelement <16 x i16> %627, i16 %632, i32 7
  %634 = extractelement <16 x i32> %585, i32 8
  %635 = sext i32 %634 to i64
  %636 = getelementptr inbounds i8, i8* %4, i64 %635
  %637 = bitcast i8* %636 to i16*
  %638 = load i16, i16* %637, align 1
  %639 = insertelement <16 x i16> %633, i16 %638, i32 8
  %640 = extractelement <16 x i32> %585, i32 9
  %641 = sext i32 %640 to i64
  %642 = getelementptr inbounds i8, i8* %4, i64 %641
  %643 = bitcast i8* %642 to i16*
  %644 = load i16, i16* %643, align 1
  %645 = insertelement <16 x i16> %639, i16 %644, i32 9
  %646 = extractelement <16 x i32> %585, i32 10
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds i8, i8* %4, i64 %647
  %649 = bitcast i8* %648 to i16*
  %650 = load i16, i16* %649, align 1
  %651 = insertelement <16 x i16> %645, i16 %650, i32 10
  %652 = extractelement <16 x i32> %585, i32 11
  %653 = sext i32 %652 to i64
  %654 = getelementptr inbounds i8, i8* %4, i64 %653
  %655 = bitcast i8* %654 to i16*
  %656 = load i16, i16* %655, align 1
  %657 = insertelement <16 x i16> %651, i16 %656, i32 11
  %658 = extractelement <16 x i32> %585, i32 12
  %659 = sext i32 %658 to i64
  %660 = getelementptr inbounds i8, i8* %4, i64 %659
  %661 = bitcast i8* %660 to i16*
  %662 = load i16, i16* %661, align 1
  %663 = insertelement <16 x i16> %657, i16 %662, i32 12
  %664 = extractelement <16 x i32> %585, i32 13
  %665 = sext i32 %664 to i64
  %666 = getelementptr inbounds i8, i8* %4, i64 %665
  %667 = bitcast i8* %666 to i16*
  %668 = load i16, i16* %667, align 1
  %669 = insertelement <16 x i16> %663, i16 %668, i32 13
  %670 = extractelement <16 x i32> %585, i32 14
  %671 = sext i32 %670 to i64
  %672 = getelementptr inbounds i8, i8* %4, i64 %671
  %673 = bitcast i8* %672 to i16*
  %674 = load i16, i16* %673, align 1
  %675 = insertelement <16 x i16> %669, i16 %674, i32 14
  %676 = extractelement <16 x i32> %585, i32 15
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds i8, i8* %4, i64 %677
  %679 = bitcast i8* %678 to i16*
  %680 = load i16, i16* %679, align 1
  %681 = insertelement <16 x i16> %675, i16 %680, i32 15
  %682 = lshr <16 x i16> %681, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %683 = shl <16 x i16> %681, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %684 = or <16 x i16> %682, %683
  %685 = uitofp <16 x i16> %684 to <16 x float>
  %686 = fmul <16 x float> %685, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  br label %687

687:                                              ; preds = %163, %275, %124, %138
  %688 = phi <16 x float> [ zeroinitializer, %124 ], [ zeroinitializer, %138 ], [ %274, %163 ], [ %686, %275 ]
  %689 = phi <16 x float> [ %137, %124 ], [ %161, %138 ], [ %271, %163 ], [ %584, %275 ]
  %690 = phi <16 x float> [ %134, %124 ], [ %158, %138 ], [ %267, %163 ], [ %481, %275 ]
  %691 = phi <16 x float> [ %130, %124 ], [ %154, %138 ], [ %263, %163 ], [ %378, %275 ]
  %692 = fmul <16 x float> %122, %691
  %693 = load <16 x float>, <16 x float>* %5, align 64
  %694 = fadd <16 x float> %693, %692
  store <16 x float> %694, <16 x float>* %5, align 64
  %695 = fmul <16 x float> %122, %690
  %696 = load <16 x float>, <16 x float>* %6, align 64
  %697 = fadd <16 x float> %695, %696
  store <16 x float> %697, <16 x float>* %6, align 64
  %698 = fmul <16 x float> %122, %689
  %699 = load <16 x float>, <16 x float>* %7, align 64
  %700 = fadd <16 x float> %698, %699
  store <16 x float> %700, <16 x float>* %7, align 64
  %701 = fmul <16 x float> %122, %688
  %702 = load <16 x float>, <16 x float>* %8, align 64
  %703 = fadd <16 x float> %701, %702
  store <16 x float> %703, <16 x float>* %8, align 64
  %704 = add nuw nsw i32 %76, 1
  %705 = icmp slt i32 %704, %66
  br i1 %705, label %75, label %74
}

; Function Attrs: nounwind readonly
declare <16 x i32> @llvm.x86.avx512.mask.gather.dpi.512(<16 x i32>, i8*, <16 x i32>, <16 x i1>, i32 immarg) #14

; Function Attrs: nounwind readonly
declare <8 x i64> @llvm.x86.avx512.mask.gather.dpq.512(<8 x i64>, i8*, <8 x i32>, <8 x i1>, i32 immarg) #14

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx512.mask.vcvtps2ph.512(<16 x float>, i32 immarg, <16 x i16>, i16) #13

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #16

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+f16c,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512vl,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind }
attributes #12 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+f16c,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind readnone }
attributes #14 = { nounwind readonly }
attributes #15 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="1024" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512vl,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nofree nounwind readonly }
attributes #17 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !10}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !8}
!21 = distinct !{!21, !10}
!22 = !{i8 0, i8 2}
!23 = !{!24}
!24 = distinct !{!24, !25, !"skcms_Matrix3x3_concat: argument 0"}
!25 = distinct !{!25, !"skcms_Matrix3x3_concat"}
!26 = !{!27}
!27 = distinct !{!27, !28, !"skcms_Matrix3x3_concat: argument 0"}
!28 = distinct !{!28, !"skcms_Matrix3x3_concat"}
!29 = !{void (i32*, i8**, i8*, i8*, i32, i64, i64)* @_ZN3hswL11run_programEPK2OpPPKvPKcPcimm, void (i32*, i8**, i8*, i8*, i32, i64, i64)* @_ZN3skxL11run_programEPK2OpPPKvPKcPcimm, void (i32*, i8**, i8*, i8*, i32, i64, i64)* @_ZN8baselineL11run_programEPK2OpPPKvPKcPcimm}
!30 = !{!"branch_weights", i32 1, i32 1048575}
!31 = !{i32 86027}
!32 = !{i32 86834}
!33 = !{i32 87143}
