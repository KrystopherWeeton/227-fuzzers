; ModuleID = '../../third_party/brotli/enc/backward_references_hq.c'
source_filename = "../../third_party/brotli/enc/backward_references_hq.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.StartPosQueue = type { [8 x %struct.PosData], i64 }
%struct.PosData = type { i64, [4 x i32], float, float }
%struct.ZopfliNode = type { i32, i32, i32, %union.anon }
%union.anon = type { float }
%struct.BrotliEncoderParams = type { i32, i32, i32, i32, i64, i64, i32, i32, %struct.BrotliHasherParams, %struct.BrotliDistanceParams, %struct.BrotliEncoderDictionary }
%struct.BrotliHasherParams = type { i32, i32, i32, i32, i32 }
%struct.BrotliDistanceParams = type { i32, i32, i32, i32, i64 }
%struct.BrotliEncoderDictionary = type { %struct.BrotliDictionary*, i32, i32, i64, i16*, i8*, i16*, %struct.DictWord* }
%struct.BrotliDictionary = type { [32 x i8], [32 x i32], i64, i8* }
%struct.DictWord = type { i8, i8, i16 }
%struct.Command = type { i32, i32, i32, i16, i16 }
%struct.MemoryManager = type { i8* (i8*, i64)*, void (i8*, i8*)*, i8* }
%struct.Hasher = type { %struct.HasherCommon, %union.anon.0 }
%struct.HasherCommon = type { i8*, i64, i64, %struct.BrotliHasherParams, i32 }
%union.anon.0 = type { %struct.H42 }
%struct.H42 = type { [512 x i16], i64, i8*, %struct.HasherCommon* }
%struct.ZopfliCostModel = type { [704 x float], float*, i32, float*, float, i64 }
%struct.BackwardMatch = type { i32, i32 }

@__const.BrotliCreateHqZopfliBackwardReferences.model = private unnamed_addr constant { [704 x float], float*, i32, [4 x i8], float*, float, [4 x i8], i64 } { [704 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], float* inttoptr (i64 -6148914691236517206 to float*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", float* inttoptr (i64 -6148914691236517206 to float*), float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206 }, align 8
@kBrotliLog2Table = external hidden local_unnamed_addr constant [256 x double], align 16
@kDistanceCacheIndex = internal unnamed_addr constant [16 x i32] [i32 0, i32 1, i32 2, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1], align 16
@kDistanceCacheOffset = internal unnamed_addr constant [16 x i32] [i32 0, i32 0, i32 0, i32 0, i32 -1, i32 1, i32 -2, i32 2, i32 -3, i32 3, i32 -1, i32 1, i32 -2, i32 2, i32 -3, i32 3], align 16
@kBrotliInsExtra = external hidden local_unnamed_addr constant [24 x i32], align 16
@kBrotliCopyExtra = external hidden local_unnamed_addr constant [24 x i32], align 16
@__const.ZopfliIterate.queue = private unnamed_addr constant %struct.StartPosQueue { [8 x %struct.PosData] [%struct.PosData { i64 -6148914691236517206, [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.PosData { i64 -6148914691236517206, [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.PosData { i64 -6148914691236517206, [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.PosData { i64 -6148914691236517206, [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.PosData { i64 -6148914691236517206, [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.PosData { i64 -6148914691236517206, [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.PosData { i64 -6148914691236517206, [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.PosData { i64 -6148914691236517206, [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }], i64 -6148914691236517206 }, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @BrotliInitZopfliNodes(%struct.ZopfliNode* nocapture, i64) local_unnamed_addr #0 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %32, label %4

4:                                                ; preds = %2
  %5 = and i64 %1, 1
  %6 = icmp eq i64 %1, 1
  br i1 %6, label %24, label %7

7:                                                ; preds = %4
  %8 = sub i64 %1, %5
  br label %9

9:                                                ; preds = %9, %7
  %10 = phi i64 [ 0, %7 ], [ %21, %9 ]
  %11 = phi i64 [ %8, %7 ], [ %22, %9 ]
  %12 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %0, i64 %10, i32 0
  store i32 1, i32* %12, align 4
  %13 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %0, i64 %10, i32 1
  store i32 0, i32* %13, align 4
  %14 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %0, i64 %10, i32 2
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %0, i64 %10, i32 3, i32 0
  store float 0x47DFF933C0000000, float* %15, align 4
  %16 = or i64 %10, 1
  %17 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %0, i64 %16, i32 0
  store i32 1, i32* %17, align 4
  %18 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %0, i64 %16, i32 1
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %0, i64 %16, i32 2
  store i32 0, i32* %19, align 4
  %20 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %0, i64 %16, i32 3, i32 0
  store float 0x47DFF933C0000000, float* %20, align 4
  %21 = add nuw i64 %10, 2
  %22 = add i64 %11, -2
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %9

24:                                               ; preds = %9, %4
  %25 = phi i64 [ 0, %4 ], [ %21, %9 ]
  %26 = icmp eq i64 %5, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %24
  %28 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %0, i64 %25, i32 0
  store i32 1, i32* %28, align 4
  %29 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %0, i64 %25, i32 1
  store i32 0, i32* %29, align 4
  %30 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %0, i64 %25, i32 2
  store i32 0, i32* %30, align 4
  %31 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %0, i64 %25, i32 3, i32 0
  store float 0x47DFF933C0000000, float* %31, align 4
  br label %32

32:                                               ; preds = %27, %24, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @BrotliZopfliCreateCommands(i64, i64, %struct.ZopfliNode* nocapture readonly, i32* nocapture, i64* nocapture, %struct.BrotliEncoderParams* nocapture readonly, %struct.Command* nocapture, i64* nocapture) local_unnamed_addr #2 {
  %9 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %5, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  %12 = shl i64 1, %11
  %13 = add i64 %12, -16
  %14 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %2, i64 0, i32 3
  %15 = bitcast %union.anon* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, -1
  br i1 %17, label %224, label %18

18:                                               ; preds = %8
  %19 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %5, i64 0, i32 4
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %1
  %22 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %5, i64 0, i32 9, i32 1
  %23 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %5, i64 0, i32 9, i32 0
  %24 = getelementptr inbounds i32, i32* %3, i64 2
  %25 = getelementptr inbounds i32, i32* %3, i64 3
  %26 = getelementptr inbounds i32, i32* %3, i64 1
  br label %27

27:                                               ; preds = %18, %218
  %28 = phi i64 [ 0, %18 ], [ %221, %218 ]
  %29 = phi i32 [ %16, %18 ], [ %44, %218 ]
  %30 = phi i64 [ 0, %18 ], [ %222, %218 ]
  %31 = zext i32 %29 to i64
  %32 = add i64 %28, %31
  %33 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %2, i64 %32, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = and i32 %34, 33554431
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %2, i64 %32, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = and i32 %38, 134217727
  %40 = zext i32 %39 to i64
  %41 = add i64 %28, %40
  %42 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %2, i64 %32, i32 3
  %43 = bitcast %union.anon* %42 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i64 %30, 0
  br i1 %45, label %46, label %52

46:                                               ; preds = %27
  %47 = load i64, i64* %4, align 8
  %48 = add i64 %47, %40
  store i64 0, i64* %4, align 8
  %49 = load i32, i32* %33, align 4
  %50 = load i32, i32* %37, align 4
  %51 = and i32 %49, 33554431
  br label %52

52:                                               ; preds = %46, %27
  %53 = phi i32 [ %51, %46 ], [ %35, %27 ]
  %54 = phi i32 [ %50, %46 ], [ %38, %27 ]
  %55 = phi i32 [ %49, %46 ], [ %34, %27 ]
  %56 = phi i64 [ %48, %46 ], [ %40, %27 ]
  %57 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %2, i64 %32, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = zext i32 %58 to i64
  %60 = lshr i32 %55, 25
  %61 = add nuw nsw i32 %53, 9
  %62 = sub nsw i32 %61, %60
  %63 = add i64 %21, %41
  %64 = icmp ult i64 %63, %13
  %65 = select i1 %64, i64 %63, i64 %13
  %66 = icmp uge i64 %65, %59
  %67 = lshr i32 %54, 27
  %68 = icmp eq i32 %67, 0
  %69 = add i32 %58, 15
  %70 = add nsw i32 %67, -1
  %71 = select i1 %68, i32 %69, i32 %70
  %72 = zext i32 %71 to i64
  %73 = sub i32 %62, %34
  %74 = trunc i64 %56 to i32
  %75 = getelementptr inbounds %struct.Command, %struct.Command* %6, i64 %30, i32 0
  store i32 %74, i32* %75, align 4
  %76 = shl i32 %73, 25
  %77 = or i32 %76, %35
  %78 = getelementptr inbounds %struct.Command, %struct.Command* %6, i64 %30, i32 1
  store i32 %77, i32* %78, align 4
  %79 = load i32, i32* %22, align 4
  %80 = zext i32 %79 to i64
  %81 = load i32, i32* %23, align 8
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %struct.Command, %struct.Command* %6, i64 %30, i32 4
  %84 = getelementptr inbounds %struct.Command, %struct.Command* %6, i64 %30, i32 2
  %85 = add nuw nsw i64 %80, 16
  %86 = icmp ugt i64 %85, %72
  br i1 %86, label %87, label %89

87:                                               ; preds = %52
  %88 = trunc i32 %71 to i16
  store i16 %88, i16* %83, align 2
  br label %119

89:                                               ; preds = %52
  %90 = shl i64 4, %82
  %91 = add nsw i64 %72, -16
  %92 = sub nsw i64 %91, %80
  %93 = add i64 %92, %90
  %94 = trunc i64 %93 to i32
  %95 = tail call i32 @llvm.ctlz.i32(i32 %94, i1 true) #7, !range !2
  %96 = sub nsw i32 30, %95
  %97 = zext i32 %96 to i64
  %98 = shl nsw i32 -1, %81
  %99 = xor i32 %98, 65535
  %100 = zext i32 %99 to i64
  %101 = and i64 %93, %100
  %102 = lshr i64 %93, %97
  %103 = and i64 %102, 1
  %104 = or i64 %103, 2
  %105 = shl i64 %104, %97
  %106 = sub nsw i64 %97, %82
  %107 = shl nsw i64 %106, 10
  %108 = shl nsw i64 %106, 1
  %109 = add nsw i64 %108, -2
  %110 = or i64 %109, %103
  %111 = shl i64 %110, %82
  %112 = add nuw nsw i64 %101, %85
  %113 = add i64 %112, %111
  %114 = or i64 %113, %107
  %115 = trunc i64 %114 to i16
  store i16 %115, i16* %83, align 2
  %116 = sub i64 %93, %105
  %117 = lshr i64 %116, %82
  %118 = trunc i64 %117 to i32
  br label %119

119:                                              ; preds = %89, %87
  %120 = phi i16 [ %115, %89 ], [ %88, %87 ]
  %121 = phi i32 [ %118, %89 ], [ 0, %87 ]
  store i32 %121, i32* %84, align 4
  %122 = and i16 %120, 1023
  %123 = icmp eq i16 %122, 0
  %124 = getelementptr inbounds %struct.Command, %struct.Command* %6, i64 %30, i32 3
  %125 = icmp ult i64 %56, 6
  br i1 %125, label %126, label %128

126:                                              ; preds = %119
  %127 = trunc i64 %56 to i16
  br label %154

128:                                              ; preds = %119
  %129 = icmp ult i64 %56, 130
  br i1 %129, label %130, label %142

130:                                              ; preds = %128
  %131 = add nsw i64 %56, -2
  %132 = trunc i64 %131 to i32
  %133 = tail call i32 @llvm.ctlz.i32(i32 %132, i1 true) #7, !range !2
  %134 = sub nsw i32 30, %133
  %135 = shl nsw i32 %134, 1
  %136 = zext i32 %135 to i64
  %137 = zext i32 %134 to i64
  %138 = lshr i64 %131, %137
  %139 = add nuw nsw i64 %138, %136
  %140 = trunc i64 %139 to i16
  %141 = add i16 %140, 2
  br label %154

142:                                              ; preds = %128
  %143 = icmp ult i64 %56, 2114
  br i1 %143, label %144, label %149

144:                                              ; preds = %142
  %145 = add nsw i32 %74, -66
  %146 = tail call i32 @llvm.ctlz.i32(i32 %145, i1 true) #7, !range !2
  %147 = trunc i32 %146 to i16
  %148 = sub nuw nsw i16 41, %147
  br label %154

149:                                              ; preds = %142
  %150 = icmp ult i64 %56, 6210
  br i1 %150, label %154, label %151

151:                                              ; preds = %149
  %152 = icmp ult i64 %56, 22594
  %153 = select i1 %152, i16 22, i16 23
  br label %154

154:                                              ; preds = %151, %149, %144, %130, %126
  %155 = phi i16 [ %127, %126 ], [ %141, %130 ], [ %148, %144 ], [ 21, %149 ], [ %153, %151 ]
  %156 = icmp ult i32 %62, 10
  br i1 %156, label %157, label %160

157:                                              ; preds = %154
  %158 = trunc i32 %62 to i16
  %159 = add nsw i16 %158, -2
  br label %181

160:                                              ; preds = %154
  %161 = icmp ult i32 %62, 134
  br i1 %161, label %162, label %174

162:                                              ; preds = %160
  %163 = add nsw i32 %62, -6
  %164 = sext i32 %163 to i64
  %165 = tail call i32 @llvm.ctlz.i32(i32 %163, i1 true) #7, !range !2
  %166 = sub nsw i32 30, %165
  %167 = shl nsw i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = zext i32 %166 to i64
  %170 = lshr i64 %164, %169
  %171 = add nuw nsw i64 %170, %168
  %172 = trunc i64 %171 to i16
  %173 = add i16 %172, 4
  br label %181

174:                                              ; preds = %160
  %175 = icmp ult i32 %62, 2118
  br i1 %175, label %176, label %181

176:                                              ; preds = %174
  %177 = add nsw i32 %62, -70
  %178 = tail call i32 @llvm.ctlz.i32(i32 %177, i1 true) #7, !range !2
  %179 = trunc i32 %178 to i16
  %180 = sub nuw nsw i16 43, %179
  br label %181

181:                                              ; preds = %176, %174, %162, %157
  %182 = phi i16 [ %159, %157 ], [ %173, %162 ], [ %180, %176 ], [ 23, %174 ]
  %183 = and i16 %182, 7
  %184 = shl i16 %155, 3
  %185 = and i16 %184, 56
  %186 = or i16 %183, %185
  %187 = icmp ult i16 %155, 8
  %188 = and i1 %123, %187
  %189 = icmp ult i16 %182, 16
  %190 = and i1 %188, %189
  br i1 %190, label %191, label %195

191:                                              ; preds = %181
  %192 = icmp ult i16 %182, 8
  %193 = or i16 %186, 64
  %194 = select i1 %192, i16 %186, i16 %193
  br label %210

195:                                              ; preds = %181
  %196 = lshr i16 %182, 3
  %197 = lshr i16 %155, 3
  %198 = mul nuw nsw i16 %197, 3
  %199 = add nuw nsw i16 %196, %198
  %200 = zext i16 %199 to i32
  %201 = shl nuw i16 %199, 1
  %202 = zext i16 %201 to i32
  %203 = shl nuw nsw i32 %200, 6
  %204 = add nuw nsw i32 %203, 64
  %205 = lshr i32 5377344, %202
  %206 = and i32 %205, 192
  %207 = add nuw nsw i32 %204, %206
  %208 = trunc i32 %207 to i16
  %209 = or i16 %186, %208
  br label %210

210:                                              ; preds = %191, %195
  %211 = phi i16 [ %194, %191 ], [ %209, %195 ]
  store i16 %211, i16* %124, align 2
  %212 = icmp ne i32 %71, 0
  %213 = and i1 %66, %212
  br i1 %213, label %214, label %218

214:                                              ; preds = %210
  %215 = load i32, i32* %24, align 4
  store i32 %215, i32* %25, align 4
  %216 = load i32, i32* %26, align 4
  store i32 %216, i32* %24, align 4
  %217 = load i32, i32* %3, align 4
  store i32 %217, i32* %26, align 4
  store i32 %58, i32* %3, align 4
  br label %218

218:                                              ; preds = %210, %214
  %219 = load i64, i64* %7, align 8
  %220 = add i64 %219, %56
  store i64 %220, i64* %7, align 8
  %221 = add i64 %41, %36
  %222 = add i64 %30, 1
  %223 = icmp eq i32 %44, -1
  br i1 %223, label %224, label %27

224:                                              ; preds = %218, %8
  %225 = phi i64 [ 0, %8 ], [ %221, %218 ]
  %226 = sub i64 %0, %225
  %227 = load i64, i64* %4, align 8
  %228 = add i64 %226, %227
  store i64 %228, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @BrotliZopfliComputeShortestPath(%struct.MemoryManager*, i64, i64, i8*, i64, i8* nocapture readnone, %struct.BrotliEncoderParams*, i32* nocapture readonly, %struct.Hasher* nocapture readonly, %struct.ZopfliNode* nocapture) local_unnamed_addr #3 {
  %11 = alloca [38 x i32], align 16
  %12 = alloca %struct.ZopfliCostModel, align 8
  %13 = alloca %struct.StartPosQueue, align 8
  %14 = alloca [384 x %struct.BackwardMatch], align 16
  %15 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 4
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = zext i32 %18 to i64
  %20 = shl i64 1, %19
  %21 = add i64 %20, -16
  %22 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, 11
  %25 = select i1 %24, i64 150, i64 325
  %26 = bitcast %struct.ZopfliCostModel* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2856, i8* nonnull %26) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* align 8 bitcast ({ [704 x float], float*, i32, [4 x i8], float*, float, [4 x i8], i64 }* @__const.BrotliCreateHqZopfliBackwardReferences.model to i8*), i64 2848, i1 false)
  %27 = bitcast %struct.StartPosQueue* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %27) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %27, i8* align 8 bitcast (%struct.StartPosQueue* @__const.ZopfliIterate.queue to i8*), i64 264, i1 false)
  %28 = bitcast [384 x %struct.BackwardMatch]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3072, i8* nonnull %28) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -86, i64 3072, i1 false)
  %29 = icmp ugt i64 %1, 127
  %30 = add i64 %1, -127
  %31 = select i1 %29, i64 %30, i64 0
  %32 = add i64 %31, %2
  %33 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %9, i64 0, i32 0
  store i32 0, i32* %33, align 4
  %34 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %9, i64 0, i32 3, i32 0
  store float 0.000000e+00, float* %34, align 4
  %35 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %12, i64 0, i32 5
  store i64 %1, i64* %35, align 8
  %36 = add i64 %1, 2
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %10
  %39 = shl i64 %36, 2
  %40 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %39) #7
  %41 = bitcast i8* %40 to float*
  br label %42

42:                                               ; preds = %38, %10
  %43 = phi float* [ %41, %38 ], [ null, %10 ]
  %44 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %12, i64 0, i32 3
  store float* %43, float** %44, align 8
  %45 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 9, i32 3
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %54, label %48

48:                                               ; preds = %42
  %49 = zext i32 %46 to i64
  %50 = shl nuw nsw i64 %49, 2
  %51 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %50) #7
  %52 = bitcast i8* %51 to float*
  %53 = load i32, i32* %45, align 4
  br label %54

54:                                               ; preds = %42, %48
  %55 = phi i32 [ %53, %48 ], [ 0, %42 ]
  %56 = phi float* [ %52, %48 ], [ null, %42 ]
  %57 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %12, i64 0, i32 1
  store float* %56, float** %57, align 8
  %58 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %12, i64 0, i32 2
  store i32 %55, i32* %58, align 8
  call fastcc void @ZopfliCostModelSetFromLiteralCosts(%struct.ZopfliCostModel* nonnull %12, i64 %2, i8* %3, i64 %4)
  %59 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %13, i64 0, i32 1
  store i64 0, i64* %59, align 8
  %60 = icmp ugt i64 %1, 3
  br i1 %60, label %61, label %723

61:                                               ; preds = %54
  %62 = getelementptr inbounds %struct.Hasher, %struct.Hasher* %8, i64 0, i32 1
  %63 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 10
  %64 = getelementptr inbounds [384 x %struct.BackwardMatch], [384 x %struct.BackwardMatch]* %14, i64 0, i64 0
  %65 = bitcast [38 x i32]* %11 to i8*
  %66 = getelementptr inbounds %struct.Hasher, %struct.Hasher* %8, i64 0, i32 1, i32 0, i32 0, i64 4
  %67 = bitcast i16* %66 to i32**
  %68 = getelementptr inbounds %struct.Hasher, %struct.Hasher* %8, i64 0, i32 1, i32 0, i32 0, i64 12
  %69 = bitcast i16* %68 to i32**
  %70 = bitcast %union.anon.0* %62 to i64*
  %71 = getelementptr inbounds %struct.Hasher, %struct.Hasher* %8, i64 0, i32 1, i32 0, i32 0, i64 8
  %72 = bitcast i16* %71 to i32*
  %73 = getelementptr inbounds [38 x i32], [38 x i32]* %11, i64 0, i64 0
  %74 = getelementptr inbounds [38 x i32], [38 x i32]* %11, i64 0, i64 4
  %75 = getelementptr inbounds [38 x i32], [38 x i32]* %11, i64 0, i64 8
  %76 = getelementptr inbounds [38 x i32], [38 x i32]* %11, i64 0, i64 12
  %77 = getelementptr inbounds [38 x i32], [38 x i32]* %11, i64 0, i64 16
  %78 = getelementptr inbounds [38 x i32], [38 x i32]* %11, i64 0, i64 20
  %79 = getelementptr inbounds [38 x i32], [38 x i32]* %11, i64 0, i64 24
  %80 = getelementptr inbounds [38 x i32], [38 x i32]* %11, i64 0, i64 28
  %81 = getelementptr inbounds [38 x i32], [38 x i32]* %11, i64 0, i64 32
  %82 = getelementptr inbounds [38 x i32], [38 x i32]* %11, i64 0, i64 36
  %83 = getelementptr inbounds [38 x i32], [38 x i32]* %11, i64 0, i64 37
  %84 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 9, i32 4
  %85 = ptrtoint [384 x %struct.BackwardMatch]* %14 to i64
  %86 = bitcast [384 x %struct.BackwardMatch]* %14 to i64*
  %87 = getelementptr inbounds [384 x %struct.BackwardMatch], [384 x %struct.BackwardMatch]* %14, i64 0, i64 0, i32 1
  %88 = add i64 %16, %2
  %89 = bitcast [38 x i32]* %11 to <4 x i32>*
  %90 = bitcast i32* %74 to <4 x i32>*
  %91 = bitcast i32* %75 to <4 x i32>*
  %92 = bitcast i32* %76 to <4 x i32>*
  %93 = bitcast i32* %77 to <4 x i32>*
  %94 = bitcast i32* %78 to <4 x i32>*
  %95 = bitcast i32* %79 to <4 x i32>*
  %96 = bitcast i32* %80 to <4 x i32>*
  %97 = bitcast i32* %81 to <4 x i32>*
  br label %98

98:                                               ; preds = %61, %718
  %99 = phi i64 [ 0, %61 ], [ %720, %718 ]
  %100 = add i64 %99, %2
  %101 = icmp ult i64 %100, %21
  %102 = select i1 %101, i64 %100, i64 %21
  %103 = add i64 %100, %16
  %104 = icmp ult i64 %103, %21
  %105 = select i1 %104, i64 %103, i64 %21
  %106 = sub i64 %1, %99
  %107 = and i64 %100, %4
  %108 = load i32, i32* %22, align 4, !noalias !3
  %109 = icmp eq i32 %108, 11
  %110 = select i1 %109, i64 64, i64 16
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %65) #7, !noalias !3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %65, i8 -86, i64 152, i1 false) #7, !noalias !3
  %111 = call i64 @llvm.usub.sat.i64(i64 %100, i64 %110) #7
  %112 = add i64 %100, -1
  %113 = icmp ugt i64 %112, %111
  br i1 %113, label %114, label %194

114:                                              ; preds = %98
  %115 = getelementptr inbounds i8, i8* %3, i64 %107
  %116 = add i64 %107, 1
  %117 = getelementptr inbounds i8, i8* %3, i64 %116
  %118 = lshr i64 %106, 3
  %119 = icmp eq i64 %118, 0
  %120 = and i64 %106, 7
  %121 = icmp eq i64 %120, 0
  %122 = icmp eq i64 %120, 1
  %123 = icmp eq i64 %120, 2
  %124 = icmp eq i64 %120, 3
  %125 = icmp eq i64 %120, 4
  %126 = icmp eq i64 %120, 5
  %127 = icmp eq i64 %120, 6
  br label %128

128:                                              ; preds = %187, %114
  %129 = phi i64 [ %112, %114 ], [ %190, %187 ]
  %130 = phi %struct.BackwardMatch* [ %64, %114 ], [ %189, %187 ]
  %131 = phi i64 [ 1, %114 ], [ %188, %187 ]
  %132 = sub i64 %100, %129
  %133 = icmp ugt i64 %132, %102
  br i1 %133, label %194, label %134, !prof !7

134:                                              ; preds = %128
  %135 = and i64 %129, %4
  %136 = load i8, i8* %115, align 1, !alias.scope !8, !noalias !9
  %137 = getelementptr inbounds i8, i8* %3, i64 %135
  %138 = load i8, i8* %137, align 1, !alias.scope !8, !noalias !9
  %139 = icmp eq i8 %136, %138
  br i1 %139, label %140, label %187

140:                                              ; preds = %134
  %141 = load i8, i8* %117, align 1, !alias.scope !8, !noalias !9
  %142 = add i64 %135, 1
  %143 = getelementptr inbounds i8, i8* %3, i64 %142
  %144 = load i8, i8* %143, align 1, !alias.scope !8, !noalias !9
  %145 = icmp eq i8 %141, %144
  br i1 %145, label %146, label %187

146:                                              ; preds = %140
  br i1 %119, label %167, label %147, !prof !7

147:                                              ; preds = %146, %157
  %148 = phi i64 [ %160, %157 ], [ %118, %146 ]
  %149 = phi i8* [ %158, %157 ], [ %115, %146 ]
  %150 = phi i64 [ %159, %157 ], [ 0, %146 ]
  %151 = bitcast i8* %149 to i64*
  %152 = load i64, i64* %151, align 8, !alias.scope !8, !noalias !9
  %153 = getelementptr inbounds i8, i8* %137, i64 %150
  %154 = bitcast i8* %153 to i64*
  %155 = load i64, i64* %154, align 8, !alias.scope !8, !noalias !9
  %156 = icmp eq i64 %152, %155
  br i1 %156, label %157, label %162, !prof !7

157:                                              ; preds = %147
  %158 = getelementptr inbounds i8, i8* %149, i64 8
  %159 = add nuw i64 %150, 8
  %160 = add nsw i64 %148, -1
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %167, label %147, !prof !7

162:                                              ; preds = %147
  %163 = xor i64 %155, %152
  %164 = call i64 @llvm.cttz.i64(i64 %163, i1 true) #7, !range !10
  %165 = lshr i64 %164, 3
  %166 = or i64 %165, %150
  br label %177

167:                                              ; preds = %157, %146
  %168 = phi i64 [ 0, %146 ], [ %159, %157 ]
  %169 = phi i8* [ %115, %146 ], [ %158, %157 ]
  br i1 %121, label %177, label %170

170:                                              ; preds = %167
  %171 = getelementptr inbounds i8, i8* %137, i64 %168
  %172 = load i8, i8* %171, align 1, !alias.scope !8, !noalias !9
  %173 = load i8, i8* %169, align 1, !alias.scope !8, !noalias !9
  %174 = icmp eq i8 %172, %173
  br i1 %174, label %175, label %177, !prof !11

175:                                              ; preds = %170
  %176 = add i64 %168, 1
  br i1 %122, label %177, label %766

177:                                              ; preds = %806, %175, %170, %766, %772, %774, %780, %782, %788, %790, %796, %798, %804, %167, %162
  %178 = phi i64 [ %166, %162 ], [ %168, %167 ], [ %168, %170 ], [ %176, %175 ], [ %176, %766 ], [ %773, %772 ], [ %773, %774 ], [ %781, %780 ], [ %781, %782 ], [ %789, %788 ], [ %789, %790 ], [ %797, %796 ], [ %797, %798 ], [ %805, %804 ], [ %813, %806 ]
  %179 = icmp ugt i64 %178, %131
  br i1 %179, label %180, label %187

180:                                              ; preds = %177
  %181 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %130, i64 1
  %182 = trunc i64 %132 to i32
  %183 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %130, i64 0, i32 0
  store i32 %182, i32* %183, align 4, !noalias !3
  %184 = trunc i64 %178 to i32
  %185 = shl i32 %184, 5
  %186 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %130, i64 0, i32 1
  store i32 %185, i32* %186, align 4, !noalias !3
  br label %187

187:                                              ; preds = %180, %177, %140, %134
  %188 = phi i64 [ %178, %180 ], [ %131, %177 ], [ %131, %140 ], [ %131, %134 ]
  %189 = phi %struct.BackwardMatch* [ %181, %180 ], [ %130, %177 ], [ %130, %140 ], [ %130, %134 ]
  %190 = add i64 %129, -1
  %191 = icmp ugt i64 %190, %111
  %192 = icmp ult i64 %188, 3
  %193 = and i1 %191, %192
  br i1 %193, label %128, label %194

194:                                              ; preds = %187, %128, %98
  %195 = phi i64 [ 1, %98 ], [ %188, %187 ], [ %131, %128 ]
  %196 = phi %struct.BackwardMatch* [ %64, %98 ], [ %189, %187 ], [ %130, %128 ]
  %197 = icmp ult i64 %195, %106
  br i1 %197, label %198, label %350

198:                                              ; preds = %194
  %199 = icmp ult i64 %106, 128
  %200 = select i1 %199, i64 %106, i64 128
  %201 = icmp ugt i64 %106, 127
  %202 = getelementptr inbounds i8, i8* %3, i64 %107
  %203 = bitcast i8* %202 to i32*
  %204 = load i32, i32* %203, align 4, !alias.scope !12, !noalias !17
  %205 = mul i32 %204, 506832829
  %206 = lshr i32 %205, 15
  %207 = load i32*, i32** %67, align 8, !alias.scope !21, !noalias !22
  %208 = load i32*, i32** %69, align 8, !alias.scope !21, !noalias !22
  %209 = zext i32 %206 to i64
  %210 = getelementptr inbounds i32, i32* %207, i64 %209
  %211 = load i32, i32* %210, align 4, !noalias !23
  %212 = load i64, i64* %70, align 8, !alias.scope !24, !noalias !22
  %213 = and i64 %212, %100
  %214 = shl i64 %213, 1
  %215 = or i64 %214, 1
  br i1 %201, label %216, label %218

216:                                              ; preds = %198
  %217 = trunc i64 %100 to i32
  store i32 %217, i32* %210, align 4, !noalias !27
  br label %218

218:                                              ; preds = %216, %198
  %219 = zext i32 %211 to i64
  %220 = sub i64 %100, %219
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %237, label %222

222:                                              ; preds = %218, %338
  %223 = phi i64 [ %303, %338 ], [ %195, %218 ]
  %224 = phi i64 [ %347, %338 ], [ %219, %218 ]
  %225 = phi i64 [ %348, %338 ], [ %220, %218 ]
  %226 = phi %struct.BackwardMatch* [ %304, %338 ], [ %196, %218 ]
  %227 = phi i64 [ %346, %338 ], [ 64, %218 ]
  %228 = phi i64 [ %343, %338 ], [ 0, %218 ]
  %229 = phi i64 [ %342, %338 ], [ 0, %218 ]
  %230 = phi i64 [ %341, %338 ], [ %215, %218 ]
  %231 = phi i64 [ %340, %338 ], [ %214, %218 ]
  %232 = phi i32 [ %345, %338 ], [ %211, %218 ]
  %233 = and i64 %224, %4
  %234 = icmp ugt i64 %225, %102
  %235 = icmp eq i64 %227, 0
  %236 = or i1 %234, %235
  br i1 %236, label %237, label %246

237:                                              ; preds = %338, %222, %218
  %238 = phi i64 [ %195, %218 ], [ %223, %222 ], [ %303, %338 ]
  %239 = phi i64 [ %214, %218 ], [ %231, %222 ], [ %340, %338 ]
  %240 = phi i64 [ %215, %218 ], [ %230, %222 ], [ %341, %338 ]
  %241 = phi %struct.BackwardMatch* [ %196, %218 ], [ %226, %222 ], [ %304, %338 ]
  br i1 %201, label %242, label %350

242:                                              ; preds = %237
  %243 = load i32, i32* %72, align 8, !alias.scope !21, !noalias !22
  %244 = getelementptr inbounds i32, i32* %208, i64 %239
  store i32 %243, i32* %244, align 4, !noalias !27
  %245 = getelementptr inbounds i32, i32* %208, i64 %240
  store i32 %243, i32* %245, align 4, !noalias !27
  br label %350

246:                                              ; preds = %222
  %247 = icmp ult i64 %229, %228
  %248 = select i1 %247, i64 %229, i64 %228
  %249 = add i64 %248, %107
  %250 = getelementptr inbounds i8, i8* %3, i64 %249
  %251 = add i64 %248, %233
  %252 = getelementptr inbounds i8, i8* %3, i64 %251
  %253 = sub i64 %106, %248
  %254 = lshr i64 %253, 3
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %276, label %256, !prof !7

256:                                              ; preds = %246, %266
  %257 = phi i64 [ %269, %266 ], [ %254, %246 ]
  %258 = phi i8* [ %267, %266 ], [ %252, %246 ]
  %259 = phi i64 [ %268, %266 ], [ 0, %246 ]
  %260 = bitcast i8* %258 to i64*
  %261 = load i64, i64* %260, align 8, !alias.scope !28, !noalias !17
  %262 = getelementptr inbounds i8, i8* %250, i64 %259
  %263 = bitcast i8* %262 to i64*
  %264 = load i64, i64* %263, align 8, !alias.scope !28, !noalias !17
  %265 = icmp eq i64 %261, %264
  br i1 %265, label %266, label %271, !prof !7

266:                                              ; preds = %256
  %267 = getelementptr inbounds i8, i8* %258, i64 8
  %268 = add nuw i64 %259, 8
  %269 = add nsw i64 %257, -1
  %270 = icmp eq i64 %269, 0
  br i1 %270, label %276, label %256, !prof !7

271:                                              ; preds = %256
  %272 = xor i64 %264, %261
  %273 = call i64 @llvm.cttz.i64(i64 %272, i1 true) #7, !range !10
  %274 = lshr i64 %273, 3
  %275 = or i64 %274, %259
  br label %289

276:                                              ; preds = %266, %246
  %277 = phi i64 [ 0, %246 ], [ %268, %266 ]
  %278 = phi i8* [ %252, %246 ], [ %267, %266 ]
  %279 = and i64 %253, 7
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %289, label %281

281:                                              ; preds = %276
  %282 = getelementptr inbounds i8, i8* %250, i64 %277
  %283 = load i8, i8* %282, align 1, !alias.scope !28, !noalias !17
  %284 = load i8, i8* %278, align 1, !alias.scope !28, !noalias !17
  %285 = icmp eq i8 %283, %284
  br i1 %285, label %286, label %289, !prof !11

286:                                              ; preds = %281
  %287 = add i64 %277, 1
  %288 = icmp eq i64 %279, 1
  br i1 %288, label %289, label %814

289:                                              ; preds = %859, %286, %281, %814, %820, %823, %829, %832, %838, %841, %847, %850, %856, %276, %271
  %290 = phi i64 [ %275, %271 ], [ %277, %276 ], [ %287, %286 ], [ %277, %281 ], [ %287, %814 ], [ %821, %820 ], [ %821, %823 ], [ %830, %829 ], [ %830, %832 ], [ %839, %838 ], [ %839, %841 ], [ %848, %847 ], [ %848, %850 ], [ %857, %856 ], [ %866, %859 ]
  %291 = add i64 %290, %248
  %292 = icmp eq %struct.BackwardMatch* %226, null
  br i1 %292, label %302, label %293

293:                                              ; preds = %289
  %294 = icmp ugt i64 %291, %223
  br i1 %294, label %295, label %302

295:                                              ; preds = %293
  %296 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %226, i64 1
  %297 = trunc i64 %225 to i32
  %298 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %226, i64 0, i32 0
  store i32 %297, i32* %298, align 4, !alias.scope !29, !noalias !30
  %299 = trunc i64 %291 to i32
  %300 = shl i32 %299, 5
  %301 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %226, i64 0, i32 1
  store i32 %300, i32* %301, align 4, !alias.scope !29, !noalias !30
  br label %302

302:                                              ; preds = %295, %293, %289
  %303 = phi i64 [ %223, %289 ], [ %291, %295 ], [ %223, %293 ]
  %304 = phi %struct.BackwardMatch* [ null, %289 ], [ %296, %295 ], [ %226, %293 ]
  %305 = icmp ult i64 %291, %200
  br i1 %305, label %317, label %306

306:                                              ; preds = %302
  br i1 %201, label %307, label %350

307:                                              ; preds = %306
  %308 = and i64 %224, %212
  %309 = shl nuw nsw i64 %308, 1
  %310 = getelementptr inbounds i32, i32* %208, i64 %309
  %311 = load i32, i32* %310, align 4, !noalias !27
  %312 = getelementptr inbounds i32, i32* %208, i64 %231
  store i32 %311, i32* %312, align 4, !noalias !27
  %313 = or i64 %309, 1
  %314 = getelementptr inbounds i32, i32* %208, i64 %313
  %315 = load i32, i32* %314, align 4, !noalias !27
  %316 = getelementptr inbounds i32, i32* %208, i64 %230
  store i32 %315, i32* %316, align 4, !noalias !27
  br label %350

317:                                              ; preds = %302
  %318 = add i64 %291, %107
  %319 = getelementptr inbounds i8, i8* %3, i64 %318
  %320 = load i8, i8* %319, align 1, !alias.scope !28, !noalias !17
  %321 = add i64 %291, %233
  %322 = getelementptr inbounds i8, i8* %3, i64 %321
  %323 = load i8, i8* %322, align 1, !alias.scope !28, !noalias !17
  %324 = icmp ugt i8 %320, %323
  br i1 %324, label %325, label %332

325:                                              ; preds = %317
  br i1 %201, label %326, label %328

326:                                              ; preds = %325
  %327 = getelementptr inbounds i32, i32* %208, i64 %231
  store i32 %232, i32* %327, align 4, !noalias !27
  br label %328

328:                                              ; preds = %326, %325
  %329 = and i64 %224, %212
  %330 = shl nuw nsw i64 %329, 1
  %331 = or i64 %330, 1
  br label %338

332:                                              ; preds = %317
  br i1 %201, label %333, label %335

333:                                              ; preds = %332
  %334 = getelementptr inbounds i32, i32* %208, i64 %230
  store i32 %232, i32* %334, align 4, !noalias !27
  br label %335

335:                                              ; preds = %333, %332
  %336 = and i64 %224, %212
  %337 = shl nuw nsw i64 %336, 1
  br label %338

338:                                              ; preds = %335, %328
  %339 = phi i64 [ %331, %328 ], [ %337, %335 ]
  %340 = phi i64 [ %331, %328 ], [ %231, %335 ]
  %341 = phi i64 [ %230, %328 ], [ %337, %335 ]
  %342 = phi i64 [ %291, %328 ], [ %229, %335 ]
  %343 = phi i64 [ %228, %328 ], [ %291, %335 ]
  %344 = getelementptr inbounds i32, i32* %208, i64 %339
  %345 = load i32, i32* %344, align 4, !noalias !27
  %346 = add nsw i64 %227, -1
  %347 = zext i32 %345 to i64
  %348 = sub i64 %100, %347
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %237, label %222

350:                                              ; preds = %307, %306, %242, %237, %194
  %351 = phi i64 [ %195, %194 ], [ %238, %242 ], [ %238, %237 ], [ %303, %307 ], [ %303, %306 ]
  %352 = phi %struct.BackwardMatch* [ %196, %194 ], [ %241, %242 ], [ %241, %237 ], [ %304, %307 ], [ %304, %306 ]
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %89, align 16, !noalias !3
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %90, align 16, !noalias !3
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %91, align 16, !noalias !3
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %92, align 16, !noalias !3
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %93, align 16, !noalias !3
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %94, align 16, !noalias !3
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %95, align 16, !noalias !3
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %96, align 16, !noalias !3
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %97, align 16, !noalias !3
  store i32 268435455, i32* %82, align 16, !noalias !3
  store i32 268435455, i32* %83, align 4, !noalias !3
  %353 = add i64 %351, 1
  %354 = icmp ugt i64 %353, 4
  %355 = select i1 %354, i64 %353, i64 4
  %356 = getelementptr inbounds i8, i8* %3, i64 %107
  %357 = call i32 @BrotliFindAllStaticDictionaryMatches(%struct.BrotliEncoderDictionary* %63, i8* %356, i64 %355, i64 %106, i32* nonnull %73) #7, !noalias !9
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %393, label %359

359:                                              ; preds = %350
  %360 = icmp ult i64 %106, 37
  %361 = select i1 %360, i64 %106, i64 37
  %362 = icmp ugt i64 %355, %361
  br i1 %362, label %393, label %363

363:                                              ; preds = %359
  %364 = add i64 %105, 1
  br label %365

365:                                              ; preds = %389, %363
  %366 = phi i64 [ %355, %363 ], [ %391, %389 ]
  %367 = phi %struct.BackwardMatch* [ %352, %363 ], [ %390, %389 ]
  %368 = getelementptr inbounds [38 x i32], [38 x i32]* %11, i64 0, i64 %366
  %369 = load i32, i32* %368, align 4, !noalias !3
  %370 = icmp ult i32 %369, 268435455
  br i1 %370, label %371, label %389

371:                                              ; preds = %365
  %372 = lshr i32 %369, 5
  %373 = zext i32 %372 to i64
  %374 = add i64 %364, %373
  %375 = load i64, i64* %84, align 8, !noalias !3
  %376 = icmp ugt i64 %374, %375
  br i1 %376, label %389, label %377

377:                                              ; preds = %371
  %378 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %367, i64 1
  %379 = and i32 %369, 31
  %380 = zext i32 %379 to i64
  %381 = trunc i64 %374 to i32
  %382 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %367, i64 0, i32 0
  store i32 %381, i32* %382, align 4, !noalias !3
  %383 = shl i64 %366, 5
  %384 = icmp eq i64 %366, %380
  %385 = select i1 %384, i64 0, i64 %380
  %386 = or i64 %385, %383
  %387 = trunc i64 %386 to i32
  %388 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %367, i64 0, i32 1
  store i32 %387, i32* %388, align 4, !noalias !3
  br label %389

389:                                              ; preds = %377, %371, %365
  %390 = phi %struct.BackwardMatch* [ %367, %365 ], [ %378, %377 ], [ %367, %371 ]
  %391 = add i64 %366, 1
  %392 = icmp ugt i64 %391, %361
  br i1 %392, label %393, label %365

393:                                              ; preds = %389, %350, %359
  %394 = phi %struct.BackwardMatch* [ %352, %350 ], [ %352, %359 ], [ %390, %389 ]
  %395 = ptrtoint %struct.BackwardMatch* %394 to i64
  %396 = sub i64 %395, %85
  %397 = ashr exact i64 %396, 3
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %65) #7, !noalias !3
  %398 = icmp eq i64 %396, 0
  br i1 %398, label %410, label %399

399:                                              ; preds = %393
  %400 = add nsw i64 %397, -1
  %401 = getelementptr inbounds [384 x %struct.BackwardMatch], [384 x %struct.BackwardMatch]* %14, i64 0, i64 %400, i32 1
  %402 = load i32, i32* %401, align 4
  %403 = lshr i32 %402, 5
  %404 = zext i32 %403 to i64
  %405 = icmp ult i64 %25, %404
  br i1 %405, label %406, label %410

406:                                              ; preds = %399
  %407 = getelementptr inbounds [384 x %struct.BackwardMatch], [384 x %struct.BackwardMatch]* %14, i64 0, i64 %400
  %408 = bitcast %struct.BackwardMatch* %407 to i64*
  %409 = load i64, i64* %408, align 8
  store i64 %409, i64* %86, align 16
  br label %410

410:                                              ; preds = %393, %406, %399
  %411 = phi i64 [ 1, %406 ], [ %397, %399 ], [ 0, %393 ]
  %412 = call fastcc i64 @UpdateNodes(i64 %1, i64 %2, i64 %99, i8* %3, i64 %4, %struct.BrotliEncoderParams* %6, i64 %21, i32* %7, i64 %411, %struct.BackwardMatch* nonnull %64, %struct.ZopfliCostModel* nonnull %12, %struct.StartPosQueue* nonnull %13, %struct.ZopfliNode* %9)
  %413 = icmp ult i64 %412, 16384
  %414 = select i1 %413, i64 0, i64 %412
  %415 = icmp eq i64 %411, 1
  br i1 %415, label %416, label %424

416:                                              ; preds = %410
  %417 = load i32, i32* %87, align 4
  %418 = lshr i32 %417, 5
  %419 = zext i32 %418 to i64
  %420 = icmp ult i64 %25, %419
  br i1 %420, label %421, label %424

421:                                              ; preds = %416
  %422 = icmp ult i64 %414, %419
  %423 = select i1 %422, i64 %419, i64 %414
  br label %424

424:                                              ; preds = %421, %416, %410
  %425 = phi i64 [ %423, %421 ], [ %414, %416 ], [ %414, %410 ]
  %426 = icmp ugt i64 %425, 1
  br i1 %426, label %427, label %718

427:                                              ; preds = %424
  %428 = add i64 %100, 1
  %429 = add i64 %425, %100
  %430 = icmp ult i64 %429, %32
  %431 = select i1 %430, i64 %429, i64 %32
  %432 = add i64 %100, 64
  %433 = icmp ugt i64 %432, %431
  %434 = add i64 %431, -63
  %435 = select i1 %433, i64 %428, i64 %434
  %436 = add i64 %100, 513
  %437 = icmp ule i64 %436, %435
  %438 = icmp ugt i64 %435, %428
  %439 = and i1 %437, %438
  br i1 %439, label %440, label %572

440:                                              ; preds = %427
  %441 = load i64, i64* %70, align 8, !alias.scope !31, !noalias !36
  %442 = add i64 %441, -15
  %443 = load i32*, i32** %67, align 8, !alias.scope !39, !noalias !42
  %444 = load i32*, i32** %69, align 8, !alias.scope !39, !noalias !42
  br label %445

445:                                              ; preds = %566, %440
  %446 = phi i64 [ %428, %440 ], [ %570, %566 ]
  %447 = and i64 %446, %4
  %448 = getelementptr inbounds i8, i8* %3, i64 %447
  %449 = bitcast i8* %448 to i32*
  %450 = load i32, i32* %449, align 4, !alias.scope !46, !noalias !49
  %451 = mul i32 %450, 506832829
  %452 = lshr i32 %451, 15
  %453 = zext i32 %452 to i64
  %454 = getelementptr inbounds i32, i32* %443, i64 %453
  %455 = load i32, i32* %454, align 4, !noalias !50
  %456 = and i64 %446, %441
  %457 = shl i64 %456, 1
  %458 = or i64 %457, 1
  %459 = trunc i64 %446 to i32
  store i32 %459, i32* %454, align 4, !noalias !51
  %460 = zext i32 %455 to i64
  %461 = sub i64 %446, %460
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %476, label %463

463:                                              ; preds = %445, %554
  %464 = phi i64 [ %563, %554 ], [ %460, %445 ]
  %465 = phi i64 [ %564, %554 ], [ %461, %445 ]
  %466 = phi i64 [ %562, %554 ], [ 64, %445 ]
  %467 = phi i64 [ %559, %554 ], [ 0, %445 ]
  %468 = phi i64 [ %558, %554 ], [ 0, %445 ]
  %469 = phi i64 [ %557, %554 ], [ %458, %445 ]
  %470 = phi i64 [ %556, %554 ], [ %457, %445 ]
  %471 = phi i32 [ %561, %554 ], [ %455, %445 ]
  %472 = and i64 %464, %4
  %473 = icmp ugt i64 %465, %442
  %474 = icmp eq i64 %466, 0
  %475 = or i1 %473, %474
  br i1 %475, label %476, label %481

476:                                              ; preds = %554, %463, %445
  %477 = phi i64 [ %457, %445 ], [ %556, %554 ], [ %470, %463 ]
  %478 = phi i64 [ %458, %445 ], [ %557, %554 ], [ %469, %463 ]
  %479 = load i32, i32* %72, align 8, !alias.scope !39, !noalias !42
  %480 = getelementptr inbounds i32, i32* %444, i64 %477
  store i32 %479, i32* %480, align 4, !noalias !51
  br label %566

481:                                              ; preds = %463
  %482 = icmp ult i64 %468, %467
  %483 = select i1 %482, i64 %468, i64 %467
  %484 = add i64 %483, %447
  %485 = getelementptr inbounds i8, i8* %3, i64 %484
  %486 = add i64 %483, %472
  %487 = getelementptr inbounds i8, i8* %3, i64 %486
  %488 = sub i64 128, %483
  %489 = lshr i64 %488, 3
  %490 = icmp eq i64 %489, 0
  br i1 %490, label %511, label %491, !prof !7

491:                                              ; preds = %481, %501
  %492 = phi i64 [ %504, %501 ], [ %489, %481 ]
  %493 = phi i8* [ %502, %501 ], [ %487, %481 ]
  %494 = phi i64 [ %503, %501 ], [ 0, %481 ]
  %495 = bitcast i8* %493 to i64*
  %496 = load i64, i64* %495, align 8, !alias.scope !52, !noalias !49
  %497 = getelementptr inbounds i8, i8* %485, i64 %494
  %498 = bitcast i8* %497 to i64*
  %499 = load i64, i64* %498, align 8, !alias.scope !52, !noalias !49
  %500 = icmp eq i64 %496, %499
  br i1 %500, label %501, label %506, !prof !7

501:                                              ; preds = %491
  %502 = getelementptr inbounds i8, i8* %493, i64 8
  %503 = add nuw i64 %494, 8
  %504 = add nsw i64 %492, -1
  %505 = icmp eq i64 %504, 0
  br i1 %505, label %511, label %491, !prof !7

506:                                              ; preds = %491
  %507 = xor i64 %499, %496
  %508 = call i64 @llvm.cttz.i64(i64 %507, i1 true) #7, !range !10
  %509 = lshr i64 %508, 3
  %510 = or i64 %509, %494
  br label %524

511:                                              ; preds = %501, %481
  %512 = phi i64 [ 0, %481 ], [ %503, %501 ]
  %513 = phi i8* [ %487, %481 ], [ %502, %501 ]
  %514 = and i64 %488, 7
  %515 = icmp eq i64 %514, 0
  br i1 %515, label %524, label %516

516:                                              ; preds = %511
  %517 = getelementptr inbounds i8, i8* %485, i64 %512
  %518 = load i8, i8* %517, align 1, !alias.scope !52, !noalias !49
  %519 = load i8, i8* %513, align 1, !alias.scope !52, !noalias !49
  %520 = icmp eq i8 %518, %519
  br i1 %520, label %521, label %524, !prof !11

521:                                              ; preds = %516
  %522 = add i64 %512, 1
  %523 = icmp eq i64 %514, 1
  br i1 %523, label %524, label %867

524:                                              ; preds = %912, %521, %516, %867, %873, %876, %882, %885, %891, %894, %900, %903, %909, %511, %506
  %525 = phi i64 [ %510, %506 ], [ %512, %511 ], [ %512, %516 ], [ %522, %521 ], [ %522, %867 ], [ %874, %873 ], [ %874, %876 ], [ %883, %882 ], [ %883, %885 ], [ %892, %891 ], [ %892, %894 ], [ %901, %900 ], [ %901, %903 ], [ %910, %909 ], [ %919, %912 ]
  %526 = add i64 %525, %483
  %527 = icmp ult i64 %526, 128
  br i1 %527, label %537, label %528

528:                                              ; preds = %524
  %529 = and i64 %464, %441
  %530 = shl nuw nsw i64 %529, 1
  %531 = getelementptr inbounds i32, i32* %444, i64 %530
  %532 = load i32, i32* %531, align 4, !noalias !51
  %533 = getelementptr inbounds i32, i32* %444, i64 %470
  store i32 %532, i32* %533, align 4, !noalias !51
  %534 = or i64 %530, 1
  %535 = getelementptr inbounds i32, i32* %444, i64 %534
  %536 = load i32, i32* %535, align 4, !noalias !51
  br label %566

537:                                              ; preds = %524
  %538 = add i64 %526, %447
  %539 = getelementptr inbounds i8, i8* %3, i64 %538
  %540 = load i8, i8* %539, align 1, !alias.scope !52, !noalias !49
  %541 = add i64 %526, %472
  %542 = getelementptr inbounds i8, i8* %3, i64 %541
  %543 = load i8, i8* %542, align 1, !alias.scope !52, !noalias !49
  %544 = icmp ugt i8 %540, %543
  br i1 %544, label %545, label %550

545:                                              ; preds = %537
  %546 = getelementptr inbounds i32, i32* %444, i64 %470
  store i32 %471, i32* %546, align 4, !noalias !51
  %547 = and i64 %464, %441
  %548 = shl nuw nsw i64 %547, 1
  %549 = or i64 %548, 1
  br label %554

550:                                              ; preds = %537
  %551 = getelementptr inbounds i32, i32* %444, i64 %469
  store i32 %471, i32* %551, align 4, !noalias !51
  %552 = and i64 %464, %441
  %553 = shl nuw nsw i64 %552, 1
  br label %554

554:                                              ; preds = %550, %545
  %555 = phi i64 [ %549, %545 ], [ %553, %550 ]
  %556 = phi i64 [ %549, %545 ], [ %470, %550 ]
  %557 = phi i64 [ %469, %545 ], [ %553, %550 ]
  %558 = phi i64 [ %526, %545 ], [ %468, %550 ]
  %559 = phi i64 [ %467, %545 ], [ %526, %550 ]
  %560 = getelementptr inbounds i32, i32* %444, i64 %555
  %561 = load i32, i32* %560, align 4, !noalias !51
  %562 = add nsw i64 %466, -1
  %563 = zext i32 %561 to i64
  %564 = sub i64 %446, %563
  %565 = icmp eq i64 %564, 0
  br i1 %565, label %476, label %463

566:                                              ; preds = %528, %476
  %567 = phi i64 [ %469, %528 ], [ %478, %476 ]
  %568 = phi i32 [ %536, %528 ], [ %479, %476 ]
  %569 = getelementptr inbounds i32, i32* %444, i64 %567
  store i32 %568, i32* %569, align 4, !noalias !51
  %570 = add i64 %446, 8
  %571 = icmp ult i64 %570, %435
  br i1 %571, label %445, label %572

572:                                              ; preds = %566, %427
  %573 = icmp ult i64 %435, %431
  br i1 %573, label %574, label %706

574:                                              ; preds = %572
  %575 = load i64, i64* %70, align 8, !alias.scope !53, !noalias !56
  %576 = add i64 %575, -15
  %577 = load i32*, i32** %67, align 8, !alias.scope !58, !noalias !61
  %578 = load i32*, i32** %69, align 8, !alias.scope !58, !noalias !61
  br label %579

579:                                              ; preds = %700, %574
  %580 = phi i64 [ %435, %574 ], [ %704, %700 ]
  %581 = and i64 %580, %4
  %582 = getelementptr inbounds i8, i8* %3, i64 %581
  %583 = bitcast i8* %582 to i32*
  %584 = load i32, i32* %583, align 4, !alias.scope !65, !noalias !68
  %585 = mul i32 %584, 506832829
  %586 = lshr i32 %585, 15
  %587 = zext i32 %586 to i64
  %588 = getelementptr inbounds i32, i32* %577, i64 %587
  %589 = load i32, i32* %588, align 4, !noalias !69
  %590 = and i64 %580, %575
  %591 = shl i64 %590, 1
  %592 = or i64 %591, 1
  %593 = trunc i64 %580 to i32
  store i32 %593, i32* %588, align 4, !noalias !70
  %594 = zext i32 %589 to i64
  %595 = sub i64 %580, %594
  %596 = icmp eq i64 %595, 0
  br i1 %596, label %610, label %597

597:                                              ; preds = %579, %688
  %598 = phi i64 [ %697, %688 ], [ %594, %579 ]
  %599 = phi i64 [ %698, %688 ], [ %595, %579 ]
  %600 = phi i64 [ %696, %688 ], [ 64, %579 ]
  %601 = phi i64 [ %693, %688 ], [ 0, %579 ]
  %602 = phi i64 [ %692, %688 ], [ 0, %579 ]
  %603 = phi i64 [ %691, %688 ], [ %592, %579 ]
  %604 = phi i64 [ %690, %688 ], [ %591, %579 ]
  %605 = phi i32 [ %695, %688 ], [ %589, %579 ]
  %606 = and i64 %598, %4
  %607 = icmp ugt i64 %599, %576
  %608 = icmp eq i64 %600, 0
  %609 = or i1 %607, %608
  br i1 %609, label %610, label %615

610:                                              ; preds = %688, %597, %579
  %611 = phi i64 [ %591, %579 ], [ %690, %688 ], [ %604, %597 ]
  %612 = phi i64 [ %592, %579 ], [ %691, %688 ], [ %603, %597 ]
  %613 = load i32, i32* %72, align 8, !alias.scope !58, !noalias !61
  %614 = getelementptr inbounds i32, i32* %578, i64 %611
  store i32 %613, i32* %614, align 4, !noalias !70
  br label %700

615:                                              ; preds = %597
  %616 = icmp ult i64 %602, %601
  %617 = select i1 %616, i64 %602, i64 %601
  %618 = add i64 %617, %581
  %619 = getelementptr inbounds i8, i8* %3, i64 %618
  %620 = add i64 %617, %606
  %621 = getelementptr inbounds i8, i8* %3, i64 %620
  %622 = sub i64 128, %617
  %623 = lshr i64 %622, 3
  %624 = icmp eq i64 %623, 0
  br i1 %624, label %645, label %625, !prof !7

625:                                              ; preds = %615, %635
  %626 = phi i64 [ %638, %635 ], [ %623, %615 ]
  %627 = phi i8* [ %636, %635 ], [ %621, %615 ]
  %628 = phi i64 [ %637, %635 ], [ 0, %615 ]
  %629 = bitcast i8* %627 to i64*
  %630 = load i64, i64* %629, align 8, !alias.scope !71, !noalias !68
  %631 = getelementptr inbounds i8, i8* %619, i64 %628
  %632 = bitcast i8* %631 to i64*
  %633 = load i64, i64* %632, align 8, !alias.scope !71, !noalias !68
  %634 = icmp eq i64 %630, %633
  br i1 %634, label %635, label %640, !prof !7

635:                                              ; preds = %625
  %636 = getelementptr inbounds i8, i8* %627, i64 8
  %637 = add nuw i64 %628, 8
  %638 = add nsw i64 %626, -1
  %639 = icmp eq i64 %638, 0
  br i1 %639, label %645, label %625, !prof !7

640:                                              ; preds = %625
  %641 = xor i64 %633, %630
  %642 = call i64 @llvm.cttz.i64(i64 %641, i1 true) #7, !range !10
  %643 = lshr i64 %642, 3
  %644 = or i64 %643, %628
  br label %658

645:                                              ; preds = %635, %615
  %646 = phi i64 [ 0, %615 ], [ %637, %635 ]
  %647 = phi i8* [ %621, %615 ], [ %636, %635 ]
  %648 = and i64 %622, 7
  %649 = icmp eq i64 %648, 0
  br i1 %649, label %658, label %650

650:                                              ; preds = %645
  %651 = getelementptr inbounds i8, i8* %619, i64 %646
  %652 = load i8, i8* %651, align 1, !alias.scope !71, !noalias !68
  %653 = load i8, i8* %647, align 1, !alias.scope !71, !noalias !68
  %654 = icmp eq i8 %652, %653
  br i1 %654, label %655, label %658, !prof !11

655:                                              ; preds = %650
  %656 = add i64 %646, 1
  %657 = icmp eq i64 %648, 1
  br i1 %657, label %658, label %920

658:                                              ; preds = %965, %655, %650, %920, %926, %929, %935, %938, %944, %947, %953, %956, %962, %645, %640
  %659 = phi i64 [ %644, %640 ], [ %646, %645 ], [ %646, %650 ], [ %656, %655 ], [ %656, %920 ], [ %927, %926 ], [ %927, %929 ], [ %936, %935 ], [ %936, %938 ], [ %945, %944 ], [ %945, %947 ], [ %954, %953 ], [ %954, %956 ], [ %963, %962 ], [ %972, %965 ]
  %660 = add i64 %659, %617
  %661 = icmp ult i64 %660, 128
  br i1 %661, label %671, label %662

662:                                              ; preds = %658
  %663 = and i64 %598, %575
  %664 = shl nuw nsw i64 %663, 1
  %665 = getelementptr inbounds i32, i32* %578, i64 %664
  %666 = load i32, i32* %665, align 4, !noalias !70
  %667 = getelementptr inbounds i32, i32* %578, i64 %604
  store i32 %666, i32* %667, align 4, !noalias !70
  %668 = or i64 %664, 1
  %669 = getelementptr inbounds i32, i32* %578, i64 %668
  %670 = load i32, i32* %669, align 4, !noalias !70
  br label %700

671:                                              ; preds = %658
  %672 = add i64 %660, %581
  %673 = getelementptr inbounds i8, i8* %3, i64 %672
  %674 = load i8, i8* %673, align 1, !alias.scope !71, !noalias !68
  %675 = add i64 %660, %606
  %676 = getelementptr inbounds i8, i8* %3, i64 %675
  %677 = load i8, i8* %676, align 1, !alias.scope !71, !noalias !68
  %678 = icmp ugt i8 %674, %677
  br i1 %678, label %679, label %684

679:                                              ; preds = %671
  %680 = getelementptr inbounds i32, i32* %578, i64 %604
  store i32 %605, i32* %680, align 4, !noalias !70
  %681 = and i64 %598, %575
  %682 = shl nuw nsw i64 %681, 1
  %683 = or i64 %682, 1
  br label %688

684:                                              ; preds = %671
  %685 = getelementptr inbounds i32, i32* %578, i64 %603
  store i32 %605, i32* %685, align 4, !noalias !70
  %686 = and i64 %598, %575
  %687 = shl nuw nsw i64 %686, 1
  br label %688

688:                                              ; preds = %684, %679
  %689 = phi i64 [ %683, %679 ], [ %687, %684 ]
  %690 = phi i64 [ %683, %679 ], [ %604, %684 ]
  %691 = phi i64 [ %603, %679 ], [ %687, %684 ]
  %692 = phi i64 [ %660, %679 ], [ %602, %684 ]
  %693 = phi i64 [ %601, %679 ], [ %660, %684 ]
  %694 = getelementptr inbounds i32, i32* %578, i64 %689
  %695 = load i32, i32* %694, align 4, !noalias !70
  %696 = add nsw i64 %600, -1
  %697 = zext i32 %695 to i64
  %698 = sub i64 %580, %697
  %699 = icmp eq i64 %698, 0
  br i1 %699, label %610, label %597

700:                                              ; preds = %662, %610
  %701 = phi i64 [ %603, %662 ], [ %612, %610 ]
  %702 = phi i32 [ %670, %662 ], [ %613, %610 ]
  %703 = getelementptr inbounds i32, i32* %578, i64 %701
  store i32 %702, i32* %703, align 4, !noalias !70
  %704 = add i64 %580, 1
  %705 = icmp ult i64 %704, %431
  br i1 %705, label %579, label %706

706:                                              ; preds = %700, %572
  %707 = add i64 %425, -1
  %708 = icmp eq i64 %707, 0
  br i1 %708, label %718, label %709

709:                                              ; preds = %706, %715
  %710 = phi i64 [ %716, %715 ], [ %707, %706 ]
  %711 = phi i64 [ %712, %715 ], [ %99, %706 ]
  %712 = add i64 %711, 1
  %713 = add i64 %711, 4
  %714 = icmp ult i64 %713, %1
  br i1 %714, label %715, label %718

715:                                              ; preds = %709
  call fastcc void @EvaluateNode(i64 %88, i64 %712, i64 %21, i32* %7, %struct.ZopfliCostModel* nonnull %12, %struct.StartPosQueue* nonnull %13, %struct.ZopfliNode* %9)
  %716 = add i64 %710, -1
  %717 = icmp eq i64 %716, 0
  br i1 %717, label %718, label %709

718:                                              ; preds = %715, %709, %706, %424
  %719 = phi i64 [ %99, %424 ], [ %99, %706 ], [ %712, %709 ], [ %712, %715 ]
  %720 = add i64 %719, 1
  %721 = add i64 %719, 4
  %722 = icmp ult i64 %721, %1
  br i1 %722, label %98, label %723

723:                                              ; preds = %718, %54
  %724 = bitcast float** %44 to i8**
  %725 = load i8*, i8** %724, align 8
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %725) #7
  store float* null, float** %44, align 8
  %726 = bitcast float** %57 to i8**
  %727 = load i8*, i8** %726, align 8
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %727) #7
  store float* null, float** %57, align 8
  %728 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %9, i64 %1, i32 2
  %729 = load i32, i32* %728, align 4
  %730 = and i32 %729, 134217727
  %731 = icmp eq i32 %730, 0
  br i1 %731, label %732, label %743

732:                                              ; preds = %723, %737
  %733 = phi i64 [ %738, %737 ], [ %1, %723 ]
  %734 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %9, i64 %733, i32 0
  %735 = load i32, i32* %734, align 4
  %736 = icmp eq i32 %735, 1
  br i1 %736, label %737, label %743

737:                                              ; preds = %732
  %738 = add i64 %733, -1
  %739 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %9, i64 %738, i32 2
  %740 = load i32, i32* %739, align 4
  %741 = and i32 %740, 134217727
  %742 = icmp eq i32 %741, 0
  br i1 %742, label %732, label %743

743:                                              ; preds = %737, %732, %723
  %744 = phi i64 [ %1, %723 ], [ %733, %732 ], [ %738, %737 ]
  %745 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %9, i64 %744, i32 3
  %746 = bitcast %union.anon* %745 to i32*
  store i32 -1, i32* %746, align 4
  %747 = icmp eq i64 %744, 0
  br i1 %747, label %764, label %748

748:                                              ; preds = %743, %748
  %749 = phi i64 [ %759, %748 ], [ %744, %743 ]
  %750 = phi i64 [ %762, %748 ], [ 0, %743 ]
  %751 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %9, i64 %749, i32 0
  %752 = load i32, i32* %751, align 4
  %753 = and i32 %752, 33554431
  %754 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %9, i64 %749, i32 2
  %755 = load i32, i32* %754, align 4
  %756 = and i32 %755, 134217727
  %757 = add nuw nsw i32 %756, %753
  %758 = zext i32 %757 to i64
  %759 = sub i64 %749, %758
  %760 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %9, i64 %759, i32 3
  %761 = bitcast %union.anon* %760 to i32*
  store i32 %757, i32* %761, align 4
  %762 = add i64 %750, 1
  %763 = icmp eq i64 %759, 0
  br i1 %763, label %764, label %748

764:                                              ; preds = %748, %743
  %765 = phi i64 [ 0, %743 ], [ %762, %748 ]
  call void @llvm.lifetime.end.p0i8(i64 3072, i8* nonnull %28) #7
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %27) #7
  call void @llvm.lifetime.end.p0i8(i64 2856, i8* nonnull %26) #7
  ret i64 %765

766:                                              ; preds = %175
  %767 = getelementptr inbounds i8, i8* %169, i64 1
  %768 = getelementptr inbounds i8, i8* %137, i64 %176
  %769 = load i8, i8* %768, align 1, !alias.scope !8, !noalias !9
  %770 = load i8, i8* %767, align 1, !alias.scope !8, !noalias !9
  %771 = icmp eq i8 %769, %770
  br i1 %771, label %772, label %177, !prof !11

772:                                              ; preds = %766
  %773 = add i64 %168, 2
  br i1 %123, label %177, label %774

774:                                              ; preds = %772
  %775 = getelementptr inbounds i8, i8* %169, i64 2
  %776 = getelementptr inbounds i8, i8* %137, i64 %773
  %777 = load i8, i8* %776, align 1, !alias.scope !8, !noalias !9
  %778 = load i8, i8* %775, align 1, !alias.scope !8, !noalias !9
  %779 = icmp eq i8 %777, %778
  br i1 %779, label %780, label %177, !prof !11

780:                                              ; preds = %774
  %781 = add i64 %168, 3
  br i1 %124, label %177, label %782

782:                                              ; preds = %780
  %783 = getelementptr inbounds i8, i8* %169, i64 3
  %784 = getelementptr inbounds i8, i8* %137, i64 %781
  %785 = load i8, i8* %784, align 1, !alias.scope !8, !noalias !9
  %786 = load i8, i8* %783, align 1, !alias.scope !8, !noalias !9
  %787 = icmp eq i8 %785, %786
  br i1 %787, label %788, label %177, !prof !11

788:                                              ; preds = %782
  %789 = add i64 %168, 4
  br i1 %125, label %177, label %790

790:                                              ; preds = %788
  %791 = getelementptr inbounds i8, i8* %169, i64 4
  %792 = getelementptr inbounds i8, i8* %137, i64 %789
  %793 = load i8, i8* %792, align 1, !alias.scope !8, !noalias !9
  %794 = load i8, i8* %791, align 1, !alias.scope !8, !noalias !9
  %795 = icmp eq i8 %793, %794
  br i1 %795, label %796, label %177, !prof !11

796:                                              ; preds = %790
  %797 = add i64 %168, 5
  br i1 %126, label %177, label %798

798:                                              ; preds = %796
  %799 = getelementptr inbounds i8, i8* %169, i64 5
  %800 = getelementptr inbounds i8, i8* %137, i64 %797
  %801 = load i8, i8* %800, align 1, !alias.scope !8, !noalias !9
  %802 = load i8, i8* %799, align 1, !alias.scope !8, !noalias !9
  %803 = icmp eq i8 %801, %802
  br i1 %803, label %804, label %177, !prof !11

804:                                              ; preds = %798
  %805 = add i64 %168, 6
  br i1 %127, label %177, label %806

806:                                              ; preds = %804
  %807 = getelementptr inbounds i8, i8* %169, i64 6
  %808 = getelementptr inbounds i8, i8* %137, i64 %805
  %809 = load i8, i8* %808, align 1, !alias.scope !8, !noalias !9
  %810 = load i8, i8* %807, align 1, !alias.scope !8, !noalias !9
  %811 = icmp eq i8 %809, %810
  %812 = add i64 %168, 7
  %813 = select i1 %811, i64 %812, i64 %805, !prof !11
  br label %177

814:                                              ; preds = %286
  %815 = getelementptr inbounds i8, i8* %278, i64 1
  %816 = getelementptr inbounds i8, i8* %250, i64 %287
  %817 = load i8, i8* %816, align 1, !alias.scope !28, !noalias !17
  %818 = load i8, i8* %815, align 1, !alias.scope !28, !noalias !17
  %819 = icmp eq i8 %817, %818
  br i1 %819, label %820, label %289, !prof !11

820:                                              ; preds = %814
  %821 = add i64 %277, 2
  %822 = icmp eq i64 %279, 2
  br i1 %822, label %289, label %823

823:                                              ; preds = %820
  %824 = getelementptr inbounds i8, i8* %278, i64 2
  %825 = getelementptr inbounds i8, i8* %250, i64 %821
  %826 = load i8, i8* %825, align 1, !alias.scope !28, !noalias !17
  %827 = load i8, i8* %824, align 1, !alias.scope !28, !noalias !17
  %828 = icmp eq i8 %826, %827
  br i1 %828, label %829, label %289, !prof !11

829:                                              ; preds = %823
  %830 = add i64 %277, 3
  %831 = icmp eq i64 %279, 3
  br i1 %831, label %289, label %832

832:                                              ; preds = %829
  %833 = getelementptr inbounds i8, i8* %278, i64 3
  %834 = getelementptr inbounds i8, i8* %250, i64 %830
  %835 = load i8, i8* %834, align 1, !alias.scope !28, !noalias !17
  %836 = load i8, i8* %833, align 1, !alias.scope !28, !noalias !17
  %837 = icmp eq i8 %835, %836
  br i1 %837, label %838, label %289, !prof !11

838:                                              ; preds = %832
  %839 = add i64 %277, 4
  %840 = icmp eq i64 %279, 4
  br i1 %840, label %289, label %841

841:                                              ; preds = %838
  %842 = getelementptr inbounds i8, i8* %278, i64 4
  %843 = getelementptr inbounds i8, i8* %250, i64 %839
  %844 = load i8, i8* %843, align 1, !alias.scope !28, !noalias !17
  %845 = load i8, i8* %842, align 1, !alias.scope !28, !noalias !17
  %846 = icmp eq i8 %844, %845
  br i1 %846, label %847, label %289, !prof !11

847:                                              ; preds = %841
  %848 = add i64 %277, 5
  %849 = icmp eq i64 %279, 5
  br i1 %849, label %289, label %850

850:                                              ; preds = %847
  %851 = getelementptr inbounds i8, i8* %278, i64 5
  %852 = getelementptr inbounds i8, i8* %250, i64 %848
  %853 = load i8, i8* %852, align 1, !alias.scope !28, !noalias !17
  %854 = load i8, i8* %851, align 1, !alias.scope !28, !noalias !17
  %855 = icmp eq i8 %853, %854
  br i1 %855, label %856, label %289, !prof !11

856:                                              ; preds = %850
  %857 = add i64 %277, 6
  %858 = icmp eq i64 %279, 6
  br i1 %858, label %289, label %859

859:                                              ; preds = %856
  %860 = getelementptr inbounds i8, i8* %278, i64 6
  %861 = getelementptr inbounds i8, i8* %250, i64 %857
  %862 = load i8, i8* %861, align 1, !alias.scope !28, !noalias !17
  %863 = load i8, i8* %860, align 1, !alias.scope !28, !noalias !17
  %864 = icmp eq i8 %862, %863
  %865 = add i64 %277, 7
  %866 = select i1 %864, i64 %865, i64 %857, !prof !11
  br label %289

867:                                              ; preds = %521
  %868 = getelementptr inbounds i8, i8* %513, i64 1
  %869 = getelementptr inbounds i8, i8* %485, i64 %522
  %870 = load i8, i8* %869, align 1, !alias.scope !52, !noalias !49
  %871 = load i8, i8* %868, align 1, !alias.scope !52, !noalias !49
  %872 = icmp eq i8 %870, %871
  br i1 %872, label %873, label %524, !prof !11

873:                                              ; preds = %867
  %874 = add i64 %512, 2
  %875 = icmp eq i64 %514, 2
  br i1 %875, label %524, label %876

876:                                              ; preds = %873
  %877 = getelementptr inbounds i8, i8* %513, i64 2
  %878 = getelementptr inbounds i8, i8* %485, i64 %874
  %879 = load i8, i8* %878, align 1, !alias.scope !52, !noalias !49
  %880 = load i8, i8* %877, align 1, !alias.scope !52, !noalias !49
  %881 = icmp eq i8 %879, %880
  br i1 %881, label %882, label %524, !prof !11

882:                                              ; preds = %876
  %883 = add i64 %512, 3
  %884 = icmp eq i64 %514, 3
  br i1 %884, label %524, label %885

885:                                              ; preds = %882
  %886 = getelementptr inbounds i8, i8* %513, i64 3
  %887 = getelementptr inbounds i8, i8* %485, i64 %883
  %888 = load i8, i8* %887, align 1, !alias.scope !52, !noalias !49
  %889 = load i8, i8* %886, align 1, !alias.scope !52, !noalias !49
  %890 = icmp eq i8 %888, %889
  br i1 %890, label %891, label %524, !prof !11

891:                                              ; preds = %885
  %892 = add i64 %512, 4
  %893 = icmp eq i64 %514, 4
  br i1 %893, label %524, label %894

894:                                              ; preds = %891
  %895 = getelementptr inbounds i8, i8* %513, i64 4
  %896 = getelementptr inbounds i8, i8* %485, i64 %892
  %897 = load i8, i8* %896, align 1, !alias.scope !52, !noalias !49
  %898 = load i8, i8* %895, align 1, !alias.scope !52, !noalias !49
  %899 = icmp eq i8 %897, %898
  br i1 %899, label %900, label %524, !prof !11

900:                                              ; preds = %894
  %901 = add i64 %512, 5
  %902 = icmp eq i64 %514, 5
  br i1 %902, label %524, label %903

903:                                              ; preds = %900
  %904 = getelementptr inbounds i8, i8* %513, i64 5
  %905 = getelementptr inbounds i8, i8* %485, i64 %901
  %906 = load i8, i8* %905, align 1, !alias.scope !52, !noalias !49
  %907 = load i8, i8* %904, align 1, !alias.scope !52, !noalias !49
  %908 = icmp eq i8 %906, %907
  br i1 %908, label %909, label %524, !prof !11

909:                                              ; preds = %903
  %910 = add i64 %512, 6
  %911 = icmp eq i64 %514, 6
  br i1 %911, label %524, label %912

912:                                              ; preds = %909
  %913 = getelementptr inbounds i8, i8* %513, i64 6
  %914 = getelementptr inbounds i8, i8* %485, i64 %910
  %915 = load i8, i8* %914, align 1, !alias.scope !52, !noalias !49
  %916 = load i8, i8* %913, align 1, !alias.scope !52, !noalias !49
  %917 = icmp eq i8 %915, %916
  %918 = add i64 %512, 7
  %919 = select i1 %917, i64 %918, i64 %910, !prof !11
  br label %524

920:                                              ; preds = %655
  %921 = getelementptr inbounds i8, i8* %647, i64 1
  %922 = getelementptr inbounds i8, i8* %619, i64 %656
  %923 = load i8, i8* %922, align 1, !alias.scope !71, !noalias !68
  %924 = load i8, i8* %921, align 1, !alias.scope !71, !noalias !68
  %925 = icmp eq i8 %923, %924
  br i1 %925, label %926, label %658, !prof !11

926:                                              ; preds = %920
  %927 = add i64 %646, 2
  %928 = icmp eq i64 %648, 2
  br i1 %928, label %658, label %929

929:                                              ; preds = %926
  %930 = getelementptr inbounds i8, i8* %647, i64 2
  %931 = getelementptr inbounds i8, i8* %619, i64 %927
  %932 = load i8, i8* %931, align 1, !alias.scope !71, !noalias !68
  %933 = load i8, i8* %930, align 1, !alias.scope !71, !noalias !68
  %934 = icmp eq i8 %932, %933
  br i1 %934, label %935, label %658, !prof !11

935:                                              ; preds = %929
  %936 = add i64 %646, 3
  %937 = icmp eq i64 %648, 3
  br i1 %937, label %658, label %938

938:                                              ; preds = %935
  %939 = getelementptr inbounds i8, i8* %647, i64 3
  %940 = getelementptr inbounds i8, i8* %619, i64 %936
  %941 = load i8, i8* %940, align 1, !alias.scope !71, !noalias !68
  %942 = load i8, i8* %939, align 1, !alias.scope !71, !noalias !68
  %943 = icmp eq i8 %941, %942
  br i1 %943, label %944, label %658, !prof !11

944:                                              ; preds = %938
  %945 = add i64 %646, 4
  %946 = icmp eq i64 %648, 4
  br i1 %946, label %658, label %947

947:                                              ; preds = %944
  %948 = getelementptr inbounds i8, i8* %647, i64 4
  %949 = getelementptr inbounds i8, i8* %619, i64 %945
  %950 = load i8, i8* %949, align 1, !alias.scope !71, !noalias !68
  %951 = load i8, i8* %948, align 1, !alias.scope !71, !noalias !68
  %952 = icmp eq i8 %950, %951
  br i1 %952, label %953, label %658, !prof !11

953:                                              ; preds = %947
  %954 = add i64 %646, 5
  %955 = icmp eq i64 %648, 5
  br i1 %955, label %658, label %956

956:                                              ; preds = %953
  %957 = getelementptr inbounds i8, i8* %647, i64 5
  %958 = getelementptr inbounds i8, i8* %619, i64 %954
  %959 = load i8, i8* %958, align 1, !alias.scope !71, !noalias !68
  %960 = load i8, i8* %957, align 1, !alias.scope !71, !noalias !68
  %961 = icmp eq i8 %959, %960
  br i1 %961, label %962, label %658, !prof !11

962:                                              ; preds = %956
  %963 = add i64 %646, 6
  %964 = icmp eq i64 %648, 6
  br i1 %964, label %658, label %965

965:                                              ; preds = %962
  %966 = getelementptr inbounds i8, i8* %647, i64 6
  %967 = getelementptr inbounds i8, i8* %619, i64 %963
  %968 = load i8, i8* %967, align 1, !alias.scope !71, !noalias !68
  %969 = load i8, i8* %966, align 1, !alias.scope !71, !noalias !68
  %970 = icmp eq i8 %968, %969
  %971 = add i64 %646, 7
  %972 = select i1 %970, i64 %971, i64 %963, !prof !11
  br label %658
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @ZopfliCostModelSetFromLiteralCosts(%struct.ZopfliCostModel* nocapture, i64, i8*, i64) unnamed_addr #3 {
  %5 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %0, i64 0, i32 3
  %6 = load float*, float** %5, align 8
  %7 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %0, i64 0, i32 1
  %8 = load float*, float** %7, align 8
  %9 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %0, i64 0, i32 5
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds float, float* %6, i64 1
  tail call void @BrotliEstimateBitCostsForLiterals(i64 %1, i64 %10, i64 %3, i8* %2, float* %11) #7
  store float 0.000000e+00, float* %6, align 4
  %12 = icmp eq i64 %10, 0
  br i1 %12, label %30, label %13

13:                                               ; preds = %4
  %14 = and i64 %10, 1
  %15 = icmp eq i64 %10, 1
  br i1 %15, label %20, label %16

16:                                               ; preds = %13
  %17 = sub i64 %10, %14
  br label %31

18:                                               ; preds = %31
  %19 = add i64 %33, 3
  br label %20

20:                                               ; preds = %18, %13
  %21 = phi float [ 0.000000e+00, %13 ], [ %47, %18 ]
  %22 = phi i64 [ 1, %13 ], [ %19, %18 ]
  %23 = phi float [ 0.000000e+00, %13 ], [ %49, %18 ]
  %24 = icmp eq i64 %14, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds float, float* %6, i64 %22
  %27 = load float, float* %26, align 4
  %28 = fadd float %23, %27
  %29 = fadd float %21, %28
  store float %29, float* %26, align 4
  br label %30

30:                                               ; preds = %25, %20, %4
  br label %56

31:                                               ; preds = %31, %16
  %32 = phi float [ 0.000000e+00, %16 ], [ %47, %31 ]
  %33 = phi i64 [ 0, %16 ], [ %43, %31 ]
  %34 = phi float [ 0.000000e+00, %16 ], [ %49, %31 ]
  %35 = phi i64 [ %17, %16 ], [ %50, %31 ]
  %36 = or i64 %33, 1
  %37 = getelementptr inbounds float, float* %6, i64 %36
  %38 = load float, float* %37, align 4
  %39 = fadd float %34, %38
  %40 = fadd float %32, %39
  store float %40, float* %37, align 4
  %41 = fsub float %40, %32
  %42 = fsub float %39, %41
  %43 = add nuw i64 %33, 2
  %44 = getelementptr inbounds float, float* %6, i64 %43
  %45 = load float, float* %44, align 4
  %46 = fadd float %42, %45
  %47 = fadd float %40, %46
  store float %47, float* %44, align 4
  %48 = fsub float %47, %40
  %49 = fsub float %46, %48
  %50 = add i64 %35, -2
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %18, label %31

52:                                               ; preds = %66
  %53 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %0, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %91, label %72

56:                                               ; preds = %30, %66
  %57 = phi i64 [ %70, %66 ], [ 0, %30 ]
  %58 = add nuw nsw i64 %57, 11
  %59 = icmp ult i64 %58, 256
  br i1 %59, label %60, label %63

60:                                               ; preds = %56
  %61 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %58
  %62 = load double, double* %61, align 8
  br label %66

63:                                               ; preds = %56
  %64 = uitofp i64 %58 to double
  %65 = tail call double @log2(double %64) #7
  br label %66

66:                                               ; preds = %60, %63
  %67 = phi double [ %62, %60 ], [ %65, %63 ]
  %68 = fptrunc double %67 to float
  %69 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %0, i64 0, i32 0, i64 %57
  store float %68, float* %69, align 4
  %70 = add nuw nsw i64 %57, 1
  %71 = icmp eq i64 %70, 704
  br i1 %71, label %52, label %56

72:                                               ; preds = %52, %83
  %73 = phi i64 [ %87, %83 ], [ 0, %52 ]
  %74 = add nuw nsw i64 %73, 20
  %75 = and i64 %74, 4294967295
  %76 = icmp ult i64 %75, 256
  br i1 %76, label %77, label %80

77:                                               ; preds = %72
  %78 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %75
  %79 = load double, double* %78, align 8
  br label %83

80:                                               ; preds = %72
  %81 = uitofp i64 %75 to double
  %82 = tail call double @log2(double %81) #7
  br label %83

83:                                               ; preds = %77, %80
  %84 = phi double [ %79, %77 ], [ %82, %80 ]
  %85 = fptrunc double %84 to float
  %86 = getelementptr inbounds float, float* %8, i64 %73
  store float %85, float* %86, align 4
  %87 = add nuw nsw i64 %73, 1
  %88 = load i32, i32* %53, align 8
  %89 = zext i32 %88 to i64
  %90 = icmp ult i64 %87, %89
  br i1 %90, label %72, label %91

91:                                               ; preds = %83, %52
  %92 = load double, double* getelementptr inbounds ([256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 11), align 8
  %93 = fptrunc double %92 to float
  %94 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %0, i64 0, i32 4
  store float %93, float* %94, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @UpdateNodes(i64, i64, i64, i8* nocapture readonly, i64, %struct.BrotliEncoderParams* nocapture readonly, i64, i32* nocapture readonly, i64, %struct.BackwardMatch* nocapture readonly, %struct.ZopfliCostModel* nocapture readonly, %struct.StartPosQueue* nocapture, %struct.ZopfliNode* nocapture) unnamed_addr #3 {
  %14 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %5, i64 0, i32 4
  %15 = load i64, i64* %14, align 8
  %16 = add i64 %2, %1
  %17 = and i64 %16, %4
  %18 = icmp ult i64 %16, %6
  %19 = select i1 %18, i64 %16, i64 %6
  %20 = add i64 %15, %16
  %21 = icmp ult i64 %20, %6
  %22 = select i1 %21, i64 %20, i64 %6
  %23 = sub i64 %0, %2
  %24 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %5, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 11
  %27 = select i1 %26, i64 150, i64 325
  %28 = select i1 %26, i64 1, i64 5
  %29 = add i64 %15, %1
  tail call fastcc void @EvaluateNode(i64 %29, i64 %2, i64 %6, i32* %7, %struct.ZopfliCostModel* %10, %struct.StartPosQueue* %11, %struct.ZopfliNode* %12)
  %30 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %11, i64 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 0, %31
  %33 = and i64 %32, 7
  %34 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %10, i64 0, i32 3
  %35 = load float*, float** %34, align 8
  %36 = add i64 %2, 2
  %37 = icmp ugt i64 %36, %0
  br i1 %37, label %74, label %38

38:                                               ; preds = %13
  %39 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %11, i64 0, i32 0, i64 %33, i32 3
  %40 = load float, float* %39, align 4
  %41 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %10, i64 0, i32 4
  %42 = load float, float* %41, align 8
  %43 = fadd float %40, %42
  %44 = getelementptr inbounds float, float* %35, i64 %2
  %45 = load float, float* %44, align 4
  %46 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %11, i64 0, i32 0, i64 %33, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds float, float* %35, i64 %47
  %49 = load float, float* %48, align 4
  %50 = fsub float %45, %49
  %51 = fadd float %43, %50
  br label %52

52:                                               ; preds = %38, %68
  %53 = phi i64 [ %72, %68 ], [ %36, %38 ]
  %54 = phi i64 [ %71, %68 ], [ 10, %38 ]
  %55 = phi i64 [ %70, %68 ], [ 4, %38 ]
  %56 = phi i64 [ %62, %68 ], [ 2, %38 ]
  %57 = phi float [ %69, %68 ], [ %51, %38 ]
  %58 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %12, i64 %53, i32 3, i32 0
  %59 = load float, float* %58, align 4
  %60 = fcmp ugt float %59, %57
  br i1 %60, label %74, label %61

61:                                               ; preds = %52
  %62 = add i64 %56, 1
  %63 = icmp eq i64 %62, %54
  br i1 %63, label %64, label %68

64:                                               ; preds = %61
  %65 = fadd float %57, 1.000000e+00
  %66 = add i64 %55, %54
  %67 = shl i64 %55, 1
  br label %68

68:                                               ; preds = %64, %61
  %69 = phi float [ %65, %64 ], [ %57, %61 ]
  %70 = phi i64 [ %67, %64 ], [ %55, %61 ]
  %71 = phi i64 [ %66, %64 ], [ %54, %61 ]
  %72 = add i64 %62, %2
  %73 = icmp ugt i64 %72, %0
  br i1 %73, label %74, label %52

74:                                               ; preds = %52, %68, %13
  %75 = phi i64 [ 2, %13 ], [ %62, %68 ], [ %56, %52 ]
  %76 = add i64 %75, -1
  %77 = icmp ult i64 %76, %23
  %78 = getelementptr inbounds i8, i8* %3, i64 %17
  %79 = lshr i64 %23, 3
  %80 = icmp eq i64 %79, 0
  %81 = and i64 %23, 7
  %82 = icmp eq i64 %81, 0
  %83 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %10, i64 0, i32 1
  %84 = icmp eq i64 %8, 0
  %85 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %5, i64 0, i32 9, i32 1
  %86 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %5, i64 0, i32 9, i32 0
  %87 = icmp eq i64 %31, 0
  br i1 %87, label %494, label %88

88:                                               ; preds = %74
  %89 = icmp eq i64 %81, 1
  %90 = icmp eq i64 %81, 2
  %91 = icmp eq i64 %81, 3
  %92 = icmp eq i64 %81, 4
  %93 = icmp eq i64 %81, 5
  %94 = icmp eq i64 %81, 6
  br label %95

95:                                               ; preds = %88, %489
  %96 = phi i64 [ %487, %489 ], [ 0, %88 ]
  %97 = phi i64 [ %486, %489 ], [ 0, %88 ]
  %98 = phi i64 [ %490, %489 ], [ %31, %88 ]
  %99 = sub i64 %96, %98
  %100 = and i64 %99, 7
  %101 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %11, i64 0, i32 0, i64 %100, i32 0
  %102 = load i64, i64* %101, align 8
  %103 = sub i64 %2, %102
  %104 = icmp ult i64 %103, 6
  br i1 %104, label %105, label %107

105:                                              ; preds = %95
  %106 = trunc i64 %103 to i16
  br label %134

107:                                              ; preds = %95
  %108 = icmp ult i64 %103, 130
  br i1 %108, label %109, label %121

109:                                              ; preds = %107
  %110 = add nsw i64 %103, -2
  %111 = trunc i64 %110 to i32
  %112 = tail call i32 @llvm.ctlz.i32(i32 %111, i1 true) #7, !range !2
  %113 = sub nsw i32 30, %112
  %114 = shl nsw i32 %113, 1
  %115 = zext i32 %114 to i64
  %116 = zext i32 %113 to i64
  %117 = lshr i64 %110, %116
  %118 = add nuw nsw i64 %117, %115
  %119 = trunc i64 %118 to i16
  %120 = add i16 %119, 2
  br label %134

121:                                              ; preds = %107
  %122 = icmp ult i64 %103, 2114
  br i1 %122, label %123, label %129

123:                                              ; preds = %121
  %124 = trunc i64 %103 to i32
  %125 = add nsw i32 %124, -66
  %126 = tail call i32 @llvm.ctlz.i32(i32 %125, i1 true) #7, !range !2
  %127 = trunc i32 %126 to i16
  %128 = sub nuw nsw i16 41, %127
  br label %134

129:                                              ; preds = %121
  %130 = icmp ult i64 %103, 6210
  br i1 %130, label %134, label %131

131:                                              ; preds = %129
  %132 = icmp ult i64 %103, 22594
  %133 = select i1 %132, i16 22, i16 23
  br label %134

134:                                              ; preds = %105, %109, %123, %129, %131
  %135 = phi i16 [ %106, %105 ], [ %120, %109 ], [ %128, %123 ], [ 21, %129 ], [ %133, %131 ]
  %136 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %11, i64 0, i32 0, i64 %100, i32 2
  %137 = load float, float* %136, align 8
  %138 = zext i16 %135 to i64
  %139 = getelementptr inbounds [24 x i32], [24 x i32]* @kBrotliInsExtra, i64 0, i64 %138
  %140 = load i32, i32* %139, align 4
  %141 = uitofp i32 %140 to float
  %142 = fadd float %137, %141
  %143 = load float*, float** %34, align 8
  %144 = getelementptr inbounds float, float* %143, i64 %2
  %145 = load float, float* %144, align 4
  %146 = load float, float* %143, align 4
  %147 = fsub float %145, %146
  %148 = fadd float %142, %147
  br i1 %77, label %149, label %327

149:                                              ; preds = %134
  %150 = shl i16 %135, 3
  %151 = and i16 %150, 56
  %152 = icmp ult i16 %135, 8
  %153 = lshr i16 %135, 3
  %154 = mul nuw nsw i16 %153, 3
  %155 = or i16 %151, 7
  br label %156

156:                                              ; preds = %149, %320
  %157 = phi i64 [ 0, %149 ], [ %323, %320 ]
  %158 = phi i64 [ %76, %149 ], [ %322, %320 ]
  %159 = phi i64 [ %97, %149 ], [ %321, %320 ]
  %160 = getelementptr inbounds [16 x i32], [16 x i32]* @kDistanceCacheIndex, i64 0, i64 %157
  %161 = load i32, i32* %160, align 4
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %11, i64 0, i32 0, i64 %100, i32 1, i64 %162
  %164 = load i32, i32* %163, align 4
  %165 = getelementptr inbounds [16 x i32], [16 x i32]* @kDistanceCacheOffset, i64 0, i64 %157
  %166 = load i32, i32* %165, align 4
  %167 = add nsw i32 %166, %164
  %168 = sext i32 %167 to i64
  %169 = sub i64 %16, %168
  %170 = add i64 %158, %17
  %171 = getelementptr inbounds i8, i8* %3, i64 %170
  %172 = load i8, i8* %171, align 1
  %173 = icmp ugt i64 %170, %4
  br i1 %173, label %327, label %174

174:                                              ; preds = %156
  %175 = icmp uge i64 %22, %168
  %176 = icmp uge i64 %19, %168
  %177 = and i1 %176, %175
  %178 = icmp ult i64 %169, %16
  %179 = and i1 %177, %178
  br i1 %179, label %180, label %320, !prof !72

180:                                              ; preds = %174
  %181 = and i64 %169, %4
  %182 = add i64 %181, %158
  %183 = icmp ugt i64 %182, %4
  br i1 %183, label %320, label %184

184:                                              ; preds = %180
  %185 = getelementptr inbounds i8, i8* %3, i64 %182
  %186 = load i8, i8* %185, align 1
  %187 = icmp eq i8 %172, %186
  br i1 %187, label %188, label %320

188:                                              ; preds = %184
  %189 = getelementptr inbounds i8, i8* %3, i64 %181
  br i1 %80, label %210, label %190, !prof !7

190:                                              ; preds = %188, %200
  %191 = phi i64 [ %203, %200 ], [ %79, %188 ]
  %192 = phi i8* [ %201, %200 ], [ %78, %188 ]
  %193 = phi i64 [ %202, %200 ], [ 0, %188 ]
  %194 = bitcast i8* %192 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = getelementptr inbounds i8, i8* %189, i64 %193
  %197 = bitcast i8* %196 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = icmp eq i64 %195, %198
  br i1 %199, label %200, label %205, !prof !7

200:                                              ; preds = %190
  %201 = getelementptr inbounds i8, i8* %192, i64 8
  %202 = add nuw i64 %193, 8
  %203 = add nsw i64 %191, -1
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %210, label %190, !prof !7

205:                                              ; preds = %190
  %206 = xor i64 %198, %195
  %207 = tail call i64 @llvm.cttz.i64(i64 %206, i1 true) #7, !range !10
  %208 = lshr i64 %207, 3
  %209 = or i64 %208, %193
  br label %220

210:                                              ; preds = %200, %188
  %211 = phi i64 [ 0, %188 ], [ %202, %200 ]
  %212 = phi i8* [ %78, %188 ], [ %201, %200 ]
  br i1 %82, label %220, label %213

213:                                              ; preds = %210
  %214 = getelementptr inbounds i8, i8* %189, i64 %211
  %215 = load i8, i8* %214, align 1
  %216 = load i8, i8* %212, align 1
  %217 = icmp eq i8 %215, %216
  br i1 %217, label %218, label %220, !prof !11

218:                                              ; preds = %213
  %219 = add i64 %211, 1
  br i1 %89, label %220, label %496

220:                                              ; preds = %536, %213, %218, %496, %502, %504, %510, %512, %518, %520, %526, %528, %534, %205, %210
  %221 = phi i64 [ %209, %205 ], [ %211, %210 ], [ %219, %218 ], [ %211, %213 ], [ %219, %496 ], [ %503, %502 ], [ %503, %504 ], [ %511, %510 ], [ %511, %512 ], [ %519, %518 ], [ %519, %520 ], [ %527, %526 ], [ %527, %528 ], [ %535, %534 ], [ %543, %536 ]
  %222 = load float*, float** %83, align 8
  %223 = getelementptr inbounds float, float* %222, i64 %157
  %224 = load float, float* %223, align 4
  %225 = fadd float %148, %224
  %226 = add i64 %158, 1
  %227 = icmp ugt i64 %226, %221
  br i1 %227, label %320, label %228

228:                                              ; preds = %220
  %229 = icmp eq i64 %157, 0
  %230 = and i1 %152, %229
  %231 = shl i64 %157, 27
  %232 = add nuw nsw i64 %231, 134217728
  %233 = or i64 %232, %103
  %234 = trunc i64 %233 to i32
  br label %235

235:                                              ; preds = %228, %316
  %236 = phi i64 [ %226, %228 ], [ %318, %316 ]
  %237 = phi i64 [ %158, %228 ], [ %236, %316 ]
  %238 = phi i64 [ %159, %228 ], [ %317, %316 ]
  %239 = icmp ult i64 %236, 10
  br i1 %239, label %240, label %243

240:                                              ; preds = %235
  %241 = trunc i64 %236 to i16
  %242 = add nsw i16 %241, -2
  br label %265

243:                                              ; preds = %235
  %244 = icmp ult i64 %236, 134
  br i1 %244, label %245, label %257

245:                                              ; preds = %243
  %246 = add i64 %237, -5
  %247 = trunc i64 %246 to i32
  %248 = tail call i32 @llvm.ctlz.i32(i32 %247, i1 true) #7, !range !2
  %249 = sub nsw i32 30, %248
  %250 = shl nsw i32 %249, 1
  %251 = zext i32 %250 to i64
  %252 = zext i32 %249 to i64
  %253 = lshr i64 %246, %252
  %254 = add nuw nsw i64 %253, %251
  %255 = trunc i64 %254 to i16
  %256 = add i16 %255, 4
  br label %265

257:                                              ; preds = %243
  %258 = icmp ult i64 %236, 2118
  br i1 %258, label %259, label %275

259:                                              ; preds = %257
  %260 = trunc i64 %236 to i32
  %261 = add nsw i32 %260, -70
  %262 = tail call i32 @llvm.ctlz.i32(i32 %261, i1 true) #7, !range !2
  %263 = trunc i32 %262 to i16
  %264 = sub nuw nsw i16 43, %263
  br label %265

265:                                              ; preds = %240, %245, %259
  %266 = phi i16 [ %242, %240 ], [ %256, %245 ], [ %264, %259 ]
  %267 = and i16 %266, 7
  %268 = or i16 %267, %151
  %269 = icmp ult i16 %266, 16
  %270 = and i1 %230, %269
  br i1 %270, label %271, label %275

271:                                              ; preds = %265
  %272 = icmp ult i16 %266, 8
  %273 = or i16 %268, 64
  %274 = select i1 %272, i16 %268, i16 %273
  br label %290

275:                                              ; preds = %257, %265
  %276 = phi i16 [ %268, %265 ], [ %155, %257 ]
  %277 = phi i16 [ %266, %265 ], [ 23, %257 ]
  %278 = lshr i16 %277, 3
  %279 = add nuw nsw i16 %278, %154
  %280 = zext i16 %279 to i32
  %281 = shl nuw i16 %279, 1
  %282 = zext i16 %281 to i32
  %283 = shl nuw nsw i32 %280, 6
  %284 = add nuw nsw i32 %283, 64
  %285 = lshr i32 5377344, %282
  %286 = and i32 %285, 192
  %287 = add nuw nsw i32 %284, %286
  %288 = trunc i32 %287 to i16
  %289 = or i16 %276, %288
  br label %290

290:                                              ; preds = %271, %275
  %291 = phi i16 [ %266, %271 ], [ %277, %275 ]
  %292 = phi i16 [ %274, %271 ], [ %289, %275 ]
  %293 = icmp ult i16 %292, 128
  %294 = select i1 %293, float %148, float %225
  %295 = zext i16 %291 to i64
  %296 = getelementptr inbounds [24 x i32], [24 x i32]* @kBrotliCopyExtra, i64 0, i64 %295
  %297 = load i32, i32* %296, align 4
  %298 = uitofp i32 %297 to float
  %299 = fadd float %294, %298
  %300 = zext i16 %292 to i64
  %301 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %10, i64 0, i32 0, i64 %300
  %302 = load float, float* %301, align 4
  %303 = fadd float %302, %299
  %304 = add i64 %236, %2
  %305 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %12, i64 %304, i32 3, i32 0
  %306 = load float, float* %305, align 4
  %307 = fcmp olt float %303, %306
  br i1 %307, label %308, label %316

308:                                              ; preds = %290
  %309 = trunc i64 %236 to i32
  %310 = or i32 %309, 301989888
  %311 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %12, i64 %304, i32 0
  store i32 %310, i32* %311, align 4
  %312 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %12, i64 %304, i32 1
  store i32 %167, i32* %312, align 4
  %313 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %12, i64 %304, i32 2
  store i32 %234, i32* %313, align 4
  store float %303, float* %305, align 4
  %314 = icmp ugt i64 %238, %236
  %315 = select i1 %314, i64 %238, i64 %236
  br label %316

316:                                              ; preds = %308, %290
  %317 = phi i64 [ %315, %308 ], [ %238, %290 ]
  %318 = add i64 %236, 1
  %319 = icmp ugt i64 %318, %221
  br i1 %319, label %320, label %235

320:                                              ; preds = %316, %220, %174, %184, %180
  %321 = phi i64 [ %159, %180 ], [ %159, %184 ], [ %159, %174 ], [ %159, %220 ], [ %317, %316 ]
  %322 = phi i64 [ %158, %180 ], [ %158, %184 ], [ %158, %174 ], [ %158, %220 ], [ %236, %316 ]
  %323 = add nuw nsw i64 %157, 1
  %324 = icmp ult i64 %323, 16
  %325 = icmp ult i64 %322, %23
  %326 = and i1 %325, %324
  br i1 %326, label %156, label %327

327:                                              ; preds = %320, %156, %134
  %328 = phi i64 [ %97, %134 ], [ %159, %156 ], [ %321, %320 ]
  %329 = icmp ugt i64 %96, 1
  %330 = or i1 %329, %84
  br i1 %330, label %485, label %331

331:                                              ; preds = %327
  %332 = shl i16 %135, 3
  %333 = and i16 %332, 56
  %334 = lshr i16 %135, 3
  %335 = mul nuw nsw i16 %334, 3
  %336 = trunc i64 %103 to i32
  br label %337

337:                                              ; preds = %480, %331
  %338 = phi i64 [ %75, %331 ], [ %482, %480 ]
  %339 = phi i64 [ 0, %331 ], [ %483, %480 ]
  %340 = phi i64 [ %328, %331 ], [ %481, %480 ]
  %341 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %9, i64 %339
  %342 = bitcast %struct.BackwardMatch* %341 to i64*
  %343 = load i64, i64* %342, align 4
  %344 = trunc i64 %343 to i32
  %345 = lshr i64 %343, 32
  %346 = trunc i64 %345 to i32
  %347 = and i64 %343, 4294967295
  %348 = icmp ult i64 %22, %347
  %349 = add nuw nsw i64 %347, 15
  %350 = load i32, i32* %85, align 4
  %351 = zext i32 %350 to i64
  %352 = load i32, i32* %86, align 8
  %353 = zext i32 %352 to i64
  %354 = add nuw nsw i64 %351, 16
  %355 = icmp ugt i64 %354, %349
  br i1 %355, label %380, label %356

356:                                              ; preds = %337
  %357 = shl i64 4, %353
  %358 = xor i64 %351, -1
  %359 = add nsw i64 %347, %358
  %360 = add i64 %359, %357
  %361 = trunc i64 %360 to i32
  %362 = tail call i32 @llvm.ctlz.i32(i32 %361, i1 true) #7, !range !2
  %363 = sub nsw i32 30, %362
  %364 = zext i32 %363 to i64
  %365 = shl nsw i32 -1, %352
  %366 = xor i32 %365, 65535
  %367 = zext i32 %366 to i64
  %368 = and i64 %360, %367
  %369 = lshr i64 %360, %364
  %370 = and i64 %369, 1
  %371 = sub nsw i64 %364, %353
  %372 = shl nsw i64 %371, 10
  %373 = shl nsw i64 %371, 1
  %374 = add nsw i64 %373, -2
  %375 = or i64 %374, %370
  %376 = shl i64 %375, %353
  %377 = add nuw nsw i64 %368, %354
  %378 = add i64 %377, %376
  %379 = or i64 %378, %372
  br label %380

380:                                              ; preds = %337, %356
  %381 = phi i64 [ %379, %356 ], [ %349, %337 ]
  %382 = trunc i64 %381 to i32
  %383 = lshr i32 %382, 10
  %384 = and i32 %383, 63
  %385 = uitofp i32 %384 to float
  %386 = fadd float %148, %385
  %387 = and i64 %381, 1023
  %388 = load float*, float** %83, align 8
  %389 = getelementptr inbounds float, float* %388, i64 %387
  %390 = load float, float* %389, align 4
  %391 = fadd float %390, %386
  %392 = lshr i64 %343, 37
  %393 = icmp ult i64 %338, %392
  %394 = icmp ugt i64 %392, %27
  %395 = or i1 %348, %394
  %396 = and i1 %393, %395
  %397 = select i1 %396, i64 %392, i64 %338
  %398 = icmp ugt i64 %397, %392
  br i1 %398, label %480, label %399

399:                                              ; preds = %380
  %400 = trunc i64 %392 to i32
  %401 = and i32 %346, 31
  %402 = icmp eq i32 %401, 0
  %403 = select i1 %402, i32 %400, i32 %401
  %404 = zext i32 %403 to i64
  %405 = add nuw nsw i64 %392, 1
  br label %406

406:                                              ; preds = %399, %476
  %407 = phi i64 [ %397, %399 ], [ %478, %476 ]
  %408 = phi i64 [ %340, %399 ], [ %477, %476 ]
  %409 = select i1 %348, i64 %404, i64 %407
  %410 = icmp ult i64 %409, 10
  br i1 %410, label %411, label %414

411:                                              ; preds = %406
  %412 = trunc i64 %409 to i16
  %413 = add nsw i16 %412, -2
  br label %436

414:                                              ; preds = %406
  %415 = icmp ult i64 %409, 134
  br i1 %415, label %416, label %428

416:                                              ; preds = %414
  %417 = add nsw i64 %409, -6
  %418 = trunc i64 %417 to i32
  %419 = tail call i32 @llvm.ctlz.i32(i32 %418, i1 true) #7, !range !2
  %420 = sub nsw i32 30, %419
  %421 = shl nsw i32 %420, 1
  %422 = zext i32 %421 to i64
  %423 = zext i32 %420 to i64
  %424 = lshr i64 %417, %423
  %425 = add nuw nsw i64 %424, %422
  %426 = trunc i64 %425 to i16
  %427 = add i16 %426, 4
  br label %436

428:                                              ; preds = %414
  %429 = icmp ult i64 %409, 2118
  br i1 %429, label %430, label %436

430:                                              ; preds = %428
  %431 = trunc i64 %409 to i32
  %432 = add nsw i32 %431, -70
  %433 = tail call i32 @llvm.ctlz.i32(i32 %432, i1 true) #7, !range !2
  %434 = trunc i32 %433 to i16
  %435 = sub nuw nsw i16 43, %434
  br label %436

436:                                              ; preds = %411, %416, %428, %430
  %437 = phi i16 [ %413, %411 ], [ %427, %416 ], [ %435, %430 ], [ 23, %428 ]
  %438 = and i16 %437, 7
  %439 = or i16 %438, %333
  %440 = lshr i16 %437, 3
  %441 = add nuw nsw i16 %440, %335
  %442 = zext i16 %441 to i32
  %443 = shl nuw i16 %441, 1
  %444 = zext i16 %443 to i32
  %445 = shl nuw nsw i32 %442, 6
  %446 = add nuw nsw i32 %445, 64
  %447 = lshr i32 5377344, %444
  %448 = and i32 %447, 192
  %449 = add nuw nsw i32 %446, %448
  %450 = trunc i32 %449 to i16
  %451 = or i16 %439, %450
  %452 = zext i16 %437 to i64
  %453 = getelementptr inbounds [24 x i32], [24 x i32]* @kBrotliCopyExtra, i64 0, i64 %452
  %454 = load i32, i32* %453, align 4
  %455 = uitofp i32 %454 to float
  %456 = fadd float %391, %455
  %457 = zext i16 %451 to i64
  %458 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %10, i64 0, i32 0, i64 %457
  %459 = load float, float* %458, align 4
  %460 = fadd float %459, %456
  %461 = add i64 %407, %2
  %462 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %12, i64 %461, i32 3, i32 0
  %463 = load float, float* %462, align 4
  %464 = fcmp olt float %460, %463
  br i1 %464, label %465, label %476

465:                                              ; preds = %436
  %466 = add i64 %407, 9
  %467 = sub i64 %466, %409
  %468 = shl i64 %467, 25
  %469 = or i64 %468, %407
  %470 = trunc i64 %469 to i32
  %471 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %12, i64 %461, i32 0
  store i32 %470, i32* %471, align 4
  %472 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %12, i64 %461, i32 1
  store i32 %344, i32* %472, align 4
  %473 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %12, i64 %461, i32 2
  store i32 %336, i32* %473, align 4
  store float %460, float* %462, align 4
  %474 = icmp ugt i64 %408, %407
  %475 = select i1 %474, i64 %408, i64 %407
  br label %476

476:                                              ; preds = %465, %436
  %477 = phi i64 [ %475, %465 ], [ %408, %436 ]
  %478 = add nuw nsw i64 %407, 1
  %479 = icmp eq i64 %478, %405
  br i1 %479, label %480, label %406

480:                                              ; preds = %476, %380
  %481 = phi i64 [ %340, %380 ], [ %477, %476 ]
  %482 = phi i64 [ %397, %380 ], [ %405, %476 ]
  %483 = add nuw i64 %339, 1
  %484 = icmp eq i64 %483, %8
  br i1 %484, label %485, label %337

485:                                              ; preds = %480, %327
  %486 = phi i64 [ %328, %327 ], [ %481, %480 ]
  %487 = add nuw nsw i64 %96, 1
  %488 = icmp eq i64 %487, %28
  br i1 %488, label %494, label %489

489:                                              ; preds = %485
  %490 = load i64, i64* %30, align 8
  %491 = icmp ult i64 %490, 8
  %492 = select i1 %491, i64 %490, i64 8
  %493 = icmp ult i64 %487, %492
  br i1 %493, label %95, label %494

494:                                              ; preds = %489, %485, %74
  %495 = phi i64 [ 0, %74 ], [ %486, %485 ], [ %486, %489 ]
  ret i64 %495

496:                                              ; preds = %218
  %497 = getelementptr inbounds i8, i8* %212, i64 1
  %498 = getelementptr inbounds i8, i8* %189, i64 %219
  %499 = load i8, i8* %498, align 1
  %500 = load i8, i8* %497, align 1
  %501 = icmp eq i8 %499, %500
  br i1 %501, label %502, label %220, !prof !11

502:                                              ; preds = %496
  %503 = add i64 %211, 2
  br i1 %90, label %220, label %504

504:                                              ; preds = %502
  %505 = getelementptr inbounds i8, i8* %212, i64 2
  %506 = getelementptr inbounds i8, i8* %189, i64 %503
  %507 = load i8, i8* %506, align 1
  %508 = load i8, i8* %505, align 1
  %509 = icmp eq i8 %507, %508
  br i1 %509, label %510, label %220, !prof !11

510:                                              ; preds = %504
  %511 = add i64 %211, 3
  br i1 %91, label %220, label %512

512:                                              ; preds = %510
  %513 = getelementptr inbounds i8, i8* %212, i64 3
  %514 = getelementptr inbounds i8, i8* %189, i64 %511
  %515 = load i8, i8* %514, align 1
  %516 = load i8, i8* %513, align 1
  %517 = icmp eq i8 %515, %516
  br i1 %517, label %518, label %220, !prof !11

518:                                              ; preds = %512
  %519 = add i64 %211, 4
  br i1 %92, label %220, label %520

520:                                              ; preds = %518
  %521 = getelementptr inbounds i8, i8* %212, i64 4
  %522 = getelementptr inbounds i8, i8* %189, i64 %519
  %523 = load i8, i8* %522, align 1
  %524 = load i8, i8* %521, align 1
  %525 = icmp eq i8 %523, %524
  br i1 %525, label %526, label %220, !prof !11

526:                                              ; preds = %520
  %527 = add i64 %211, 5
  br i1 %93, label %220, label %528

528:                                              ; preds = %526
  %529 = getelementptr inbounds i8, i8* %212, i64 5
  %530 = getelementptr inbounds i8, i8* %189, i64 %527
  %531 = load i8, i8* %530, align 1
  %532 = load i8, i8* %529, align 1
  %533 = icmp eq i8 %531, %532
  br i1 %533, label %534, label %220, !prof !11

534:                                              ; preds = %528
  %535 = add i64 %211, 6
  br i1 %94, label %220, label %536

536:                                              ; preds = %534
  %537 = getelementptr inbounds i8, i8* %212, i64 6
  %538 = getelementptr inbounds i8, i8* %189, i64 %535
  %539 = load i8, i8* %538, align 1
  %540 = load i8, i8* %537, align 1
  %541 = icmp eq i8 %539, %540
  %542 = add i64 %211, 7
  %543 = select i1 %541, i64 %542, i64 %535, !prof !11
  br label %220
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @EvaluateNode(i64, i64, i64, i32* nocapture readonly, %struct.ZopfliCostModel* nocapture readonly, %struct.StartPosQueue* nocapture, %struct.ZopfliNode* nocapture) unnamed_addr #3 {
  %8 = alloca %struct.PosData, align 8
  %9 = bitcast %struct.PosData* %8 to i8*
  %10 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %1, i32 3
  %11 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %1, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 33554431
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %1, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = and i32 %18, 134217727
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %1, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = zext i32 %22 to i64
  %24 = icmp eq i64 %1, 0
  br i1 %24, label %46, label %25

25:                                               ; preds = %7
  %26 = add nuw nsw i64 %23, %16
  %27 = add i64 %1, %0
  %28 = icmp ugt i64 %26, %27
  %29 = icmp ugt i64 %23, %2
  %30 = or i1 %29, %28
  br i1 %30, label %40, label %31

31:                                               ; preds = %25
  %32 = lshr i32 %18, 27
  %33 = icmp eq i32 %32, 0
  %34 = add i32 %22, 15
  %35 = add nsw i32 %32, -1
  %36 = select i1 %33, i32 %34, i32 %35
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %31
  %39 = trunc i64 %1 to i32
  br label %46

40:                                               ; preds = %31, %25
  %41 = sub i64 %1, %16
  %42 = sub i64 %41, %20
  %43 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %42, i32 3
  %44 = bitcast %union.anon* %43 to i32*
  %45 = load i32, i32* %44, align 4
  br label %46

46:                                               ; preds = %7, %38, %40
  %47 = phi i32 [ %39, %38 ], [ %45, %40 ], [ 0, %7 ]
  %48 = bitcast %union.anon* %10 to i32*
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %4, i64 0, i32 3
  %50 = load float*, float** %49, align 8
  %51 = getelementptr inbounds float, float* %50, i64 %1
  %52 = load float, float* %51, align 4
  %53 = load float, float* %50, align 4
  %54 = fsub float %52, %53
  %55 = fcmp ugt float %12, %54
  br i1 %55, label %272, label %56

56:                                               ; preds = %46
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #7
  %57 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 0
  %58 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 2
  %59 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 1
  %60 = bitcast [4 x i32]* %59 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %60, i8 -86, i64 16, i1 false)
  %61 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 3
  store i64 %1, i64* %57, align 8
  store float %12, float* %61, align 4
  %62 = fsub float %12, %54
  store float %62, float* %58, align 8
  %63 = icmp eq i32 %47, 0
  br i1 %63, label %68, label %189

64:                                               ; preds = %292, %273, %189, %311
  %65 = phi i64 [ 1, %189 ], [ 2, %273 ], [ 3, %292 ], [ 4, %311 ]
  %66 = trunc i64 %65 to i32
  %67 = icmp ult i32 %66, 4
  br i1 %67, label %68, label %228

68:                                               ; preds = %64, %56
  %69 = phi i64 [ %65, %64 ], [ 0, %56 ]
  %70 = and i64 %69, 4294967295
  %71 = sub nsw i64 4, %69
  %72 = icmp ult i64 %71, 8
  br i1 %72, label %73, label %94

73:                                               ; preds = %187, %94, %68
  %74 = phi i64 [ %70, %94 ], [ %70, %68 ], [ %108, %187 ]
  %75 = phi i32* [ %3, %94 ], [ %3, %68 ], [ %109, %187 ]
  %76 = sub i64 0, %74
  %77 = sub i64 3, %74
  %78 = and i64 %76, 3
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %90, label %80

80:                                               ; preds = %73, %80
  %81 = phi i64 [ %87, %80 ], [ %74, %73 ]
  %82 = phi i32* [ %84, %80 ], [ %75, %73 ]
  %83 = phi i64 [ %88, %80 ], [ %78, %73 ]
  %84 = getelementptr inbounds i32, i32* %82, i64 1
  %85 = load i32, i32* %82, align 4
  %86 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 1, i64 %81
  store i32 %85, i32* %86, align 4
  %87 = add nuw nsw i64 %81, 1
  %88 = add i64 %83, -1
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %80, !llvm.loop !73

90:                                               ; preds = %80, %73
  %91 = phi i64 [ %74, %73 ], [ %87, %80 ]
  %92 = phi i32* [ %75, %73 ], [ %84, %80 ]
  %93 = icmp ult i64 %77, 3
  br i1 %93, label %228, label %208

94:                                               ; preds = %68
  %95 = shl nuw nsw i64 %69, 2
  %96 = add nuw nsw i64 %95, 8
  %97 = getelementptr i8, i8* %9, i64 %96
  %98 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 2
  %99 = sub nsw i64 4, %69
  %100 = getelementptr i32, i32* %3, i64 %99
  %101 = bitcast i32* %100 to i8*
  %102 = icmp ult i8* %97, %101
  %103 = bitcast float* %98 to i32*
  %104 = icmp ugt i32* %103, %3
  %105 = and i1 %102, %104
  br i1 %105, label %73, label %106

106:                                              ; preds = %94
  %107 = and i64 %71, -8
  %108 = add nsw i64 %70, %107
  %109 = getelementptr i32, i32* %3, i64 %107
  %110 = add nuw nsw i64 %107, -8
  %111 = lshr exact i64 %110, 3
  %112 = add nuw nsw i64 %111, 1
  %113 = and i64 %112, 3
  %114 = sub nsw i64 %112, %113
  br label %115

115:                                              ; preds = %115, %106
  %116 = phi i64 [ 0, %106 ], [ %165, %115 ]
  %117 = phi i64 [ %114, %106 ], [ %166, %115 ]
  %118 = add i64 %70, %116
  %119 = getelementptr i32, i32* %3, i64 %116
  %120 = bitcast i32* %119 to <4 x i32>*
  %121 = load <4 x i32>, <4 x i32>* %120, align 4, !alias.scope !75
  %122 = getelementptr i32, i32* %119, i64 4
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 4, !alias.scope !75
  %125 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 1, i64 %118
  %126 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> %121, <4 x i32>* %126, align 4, !alias.scope !78, !noalias !75
  %127 = getelementptr inbounds i32, i32* %125, i64 4
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %128, align 4, !alias.scope !78, !noalias !75
  %129 = or i64 %116, 8
  %130 = add i64 %70, %129
  %131 = getelementptr i32, i32* %3, i64 %129
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4, !alias.scope !75
  %134 = getelementptr i32, i32* %131, i64 4
  %135 = bitcast i32* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 4, !alias.scope !75
  %137 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 1, i64 %130
  %138 = bitcast i32* %137 to <4 x i32>*
  store <4 x i32> %133, <4 x i32>* %138, align 4, !alias.scope !78, !noalias !75
  %139 = getelementptr inbounds i32, i32* %137, i64 4
  %140 = bitcast i32* %139 to <4 x i32>*
  store <4 x i32> %136, <4 x i32>* %140, align 4, !alias.scope !78, !noalias !75
  %141 = or i64 %116, 16
  %142 = add i64 %70, %141
  %143 = getelementptr i32, i32* %3, i64 %141
  %144 = bitcast i32* %143 to <4 x i32>*
  %145 = load <4 x i32>, <4 x i32>* %144, align 4, !alias.scope !75
  %146 = getelementptr i32, i32* %143, i64 4
  %147 = bitcast i32* %146 to <4 x i32>*
  %148 = load <4 x i32>, <4 x i32>* %147, align 4, !alias.scope !75
  %149 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 1, i64 %142
  %150 = bitcast i32* %149 to <4 x i32>*
  store <4 x i32> %145, <4 x i32>* %150, align 4, !alias.scope !78, !noalias !75
  %151 = getelementptr inbounds i32, i32* %149, i64 4
  %152 = bitcast i32* %151 to <4 x i32>*
  store <4 x i32> %148, <4 x i32>* %152, align 4, !alias.scope !78, !noalias !75
  %153 = or i64 %116, 24
  %154 = add i64 %70, %153
  %155 = getelementptr i32, i32* %3, i64 %153
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 4, !alias.scope !75
  %158 = getelementptr i32, i32* %155, i64 4
  %159 = bitcast i32* %158 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 4, !alias.scope !75
  %161 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 1, i64 %154
  %162 = bitcast i32* %161 to <4 x i32>*
  store <4 x i32> %157, <4 x i32>* %162, align 4, !alias.scope !78, !noalias !75
  %163 = getelementptr inbounds i32, i32* %161, i64 4
  %164 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> %160, <4 x i32>* %164, align 4, !alias.scope !78, !noalias !75
  %165 = add i64 %116, 32
  %166 = add i64 %117, -4
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %115, !llvm.loop !80

168:                                              ; preds = %115
  %169 = icmp eq i64 %113, 0
  br i1 %169, label %187, label %170

170:                                              ; preds = %168, %170
  %171 = phi i64 [ %184, %170 ], [ %165, %168 ]
  %172 = phi i64 [ %185, %170 ], [ %113, %168 ]
  %173 = add i64 %70, %171
  %174 = getelementptr i32, i32* %3, i64 %171
  %175 = bitcast i32* %174 to <4 x i32>*
  %176 = load <4 x i32>, <4 x i32>* %175, align 4, !alias.scope !75
  %177 = getelementptr i32, i32* %174, i64 4
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 4, !alias.scope !75
  %180 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 1, i64 %173
  %181 = bitcast i32* %180 to <4 x i32>*
  store <4 x i32> %176, <4 x i32>* %181, align 4, !alias.scope !78, !noalias !75
  %182 = getelementptr inbounds i32, i32* %180, i64 4
  %183 = bitcast i32* %182 to <4 x i32>*
  store <4 x i32> %179, <4 x i32>* %183, align 4, !alias.scope !78, !noalias !75
  %184 = add i64 %171, 8
  %185 = add i64 %172, -1
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %170, !llvm.loop !82

187:                                              ; preds = %170, %168
  %188 = icmp eq i64 %71, %107
  br i1 %188, label %228, label %73

189:                                              ; preds = %56
  %190 = zext i32 %47 to i64
  %191 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %190, i32 2
  %192 = load i32, i32* %191, align 4
  %193 = and i32 %192, 134217727
  %194 = zext i32 %193 to i64
  %195 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %190, i32 0
  %196 = load i32, i32* %195, align 4
  %197 = and i32 %196, 33554431
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %190, i32 1
  %200 = load i32, i32* %199, align 4
  %201 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 1, i64 0
  store i32 %200, i32* %201, align 8
  %202 = sub nsw i64 %190, %194
  %203 = sub nsw i64 %202, %198
  %204 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %203, i32 3
  %205 = bitcast %union.anon* %204 to i32*
  %206 = load i32, i32* %205, align 4
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %64, label %273

208:                                              ; preds = %90, %208
  %209 = phi i64 [ %226, %208 ], [ %91, %90 ]
  %210 = phi i32* [ %223, %208 ], [ %92, %90 ]
  %211 = getelementptr inbounds i32, i32* %210, i64 1
  %212 = load i32, i32* %210, align 4
  %213 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 1, i64 %209
  store i32 %212, i32* %213, align 4
  %214 = add nuw nsw i64 %209, 1
  %215 = getelementptr inbounds i32, i32* %210, i64 2
  %216 = load i32, i32* %211, align 4
  %217 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 1, i64 %214
  store i32 %216, i32* %217, align 4
  %218 = add nuw nsw i64 %209, 2
  %219 = getelementptr inbounds i32, i32* %210, i64 3
  %220 = load i32, i32* %215, align 4
  %221 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 1, i64 %218
  store i32 %220, i32* %221, align 4
  %222 = add nuw nsw i64 %209, 3
  %223 = getelementptr inbounds i32, i32* %210, i64 4
  %224 = load i32, i32* %219, align 4
  %225 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 1, i64 %222
  store i32 %224, i32* %225, align 4
  %226 = add nuw nsw i64 %209, 4
  %227 = icmp eq i64 %209, 0
  br i1 %227, label %228, label %208, !llvm.loop !83

228:                                              ; preds = %90, %208, %187, %64
  %229 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %5, i64 0, i32 1
  %230 = load i64, i64* %229, align 8
  %231 = add i64 %230, 1
  store i64 %231, i64* %229, align 8
  %232 = and i64 %230, 7
  %233 = xor i64 %232, 7
  %234 = icmp ult i64 %231, 8
  %235 = select i1 %234, i64 %231, i64 8
  %236 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %5, i64 0, i32 0, i64 %233
  %237 = bitcast %struct.PosData* %236 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %237, i8* nonnull align 8 %9, i64 32, i1 false) #7
  %238 = icmp ugt i64 %235, 1
  br i1 %238, label %239, label %271

239:                                              ; preds = %228, %268
  %240 = phi i64 [ %246, %268 ], [ %233, %228 ]
  %241 = phi i64 [ %269, %268 ], [ 1, %228 ]
  %242 = and i64 %240, 7
  %243 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %5, i64 0, i32 0, i64 %242
  %244 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %5, i64 0, i32 0, i64 %242, i32 2
  %245 = load float, float* %244, align 8
  %246 = add i64 %240, 1
  %247 = and i64 %246, 7
  %248 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %5, i64 0, i32 0, i64 %247
  %249 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %5, i64 0, i32 0, i64 %247, i32 2
  %250 = load float, float* %249, align 8
  %251 = fcmp ogt float %245, %250
  br i1 %251, label %252, label %268

252:                                              ; preds = %239
  %253 = getelementptr inbounds %struct.PosData, %struct.PosData* %243, i64 0, i32 0
  %254 = load i64, i64* %253, align 8
  %255 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %5, i64 0, i32 0, i64 %242, i32 1, i64 0
  %256 = bitcast i32* %255 to <4 x i32>*
  %257 = load <4 x i32>, <4 x i32>* %256, align 8
  %258 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %5, i64 0, i32 0, i64 %242, i32 3
  %259 = bitcast float* %258 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = bitcast %struct.PosData* %243 to i8*
  %262 = bitcast %struct.PosData* %248 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %261, i8* align 8 %262, i64 32, i1 false) #7
  %263 = getelementptr inbounds %struct.PosData, %struct.PosData* %248, i64 0, i32 0
  store i64 %254, i64* %263, align 8
  %264 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %5, i64 0, i32 0, i64 %247, i32 1, i64 0
  %265 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> %257, <4 x i32>* %265, align 8
  store float %245, float* %249, align 8
  %266 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %5, i64 0, i32 0, i64 %247, i32 3
  %267 = bitcast float* %266 to i32*
  store i32 %260, i32* %267, align 4
  br label %268

268:                                              ; preds = %252, %239
  %269 = add nuw i64 %241, 1
  %270 = icmp ult i64 %269, %235
  br i1 %270, label %239, label %271

271:                                              ; preds = %268, %228
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #7
  br label %272

272:                                              ; preds = %46, %271
  ret void

273:                                              ; preds = %189
  %274 = zext i32 %206 to i64
  %275 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %274, i32 2
  %276 = load i32, i32* %275, align 4
  %277 = and i32 %276, 134217727
  %278 = zext i32 %277 to i64
  %279 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %274, i32 0
  %280 = load i32, i32* %279, align 4
  %281 = and i32 %280, 33554431
  %282 = zext i32 %281 to i64
  %283 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %274, i32 1
  %284 = load i32, i32* %283, align 4
  %285 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 1, i64 1
  store i32 %284, i32* %285, align 4
  %286 = sub nsw i64 %274, %278
  %287 = sub nsw i64 %286, %282
  %288 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %287, i32 3
  %289 = bitcast %union.anon* %288 to i32*
  %290 = load i32, i32* %289, align 4
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %64, label %292

292:                                              ; preds = %273
  %293 = zext i32 %290 to i64
  %294 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %293, i32 2
  %295 = load i32, i32* %294, align 4
  %296 = and i32 %295, 134217727
  %297 = zext i32 %296 to i64
  %298 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %293, i32 0
  %299 = load i32, i32* %298, align 4
  %300 = and i32 %299, 33554431
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %293, i32 1
  %303 = load i32, i32* %302, align 4
  %304 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 1, i64 2
  store i32 %303, i32* %304, align 8
  %305 = sub nsw i64 %293, %297
  %306 = sub nsw i64 %305, %301
  %307 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %306, i32 3
  %308 = bitcast %union.anon* %307 to i32*
  %309 = load i32, i32* %308, align 4
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %64, label %311

311:                                              ; preds = %292
  %312 = zext i32 %309 to i64
  %313 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %6, i64 %312, i32 1
  %314 = load i32, i32* %313, align 4
  %315 = getelementptr inbounds %struct.PosData, %struct.PosData* %8, i64 0, i32 1, i64 3
  store i32 %314, i32* %315, align 4
  br label %64
}

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliCreateZopfliBackwardReferences(%struct.MemoryManager*, i64, i64, i8*, i64, i8* nocapture readnone, %struct.BrotliEncoderParams*, %struct.Hasher* nocapture readonly, i32* nocapture, i64* nocapture, %struct.Command* nocapture, i64* nocapture, i64* nocapture) local_unnamed_addr #3 {
  %14 = add i64 %1, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %47, label %16

16:                                               ; preds = %13
  %17 = shl i64 %14, 4
  %18 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %17) #7
  %19 = bitcast i8* %18 to %struct.ZopfliNode*
  %20 = and i64 %14, 1
  %21 = icmp eq i64 %1, 0
  br i1 %21, label %39, label %22

22:                                               ; preds = %16
  %23 = sub i64 %14, %20
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %36, %24 ]
  %26 = phi i64 [ %23, %22 ], [ %37, %24 ]
  %27 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %19, i64 %25, i32 0
  store i32 1, i32* %27, align 4
  %28 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %19, i64 %25, i32 1
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %19, i64 %25, i32 2
  store i32 0, i32* %29, align 4
  %30 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %19, i64 %25, i32 3, i32 0
  store float 0x47DFF933C0000000, float* %30, align 4
  %31 = or i64 %25, 1
  %32 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %19, i64 %31, i32 0
  store i32 1, i32* %32, align 4
  %33 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %19, i64 %31, i32 1
  store i32 0, i32* %33, align 4
  %34 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %19, i64 %31, i32 2
  store i32 0, i32* %34, align 4
  %35 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %19, i64 %31, i32 3, i32 0
  store float 0x47DFF933C0000000, float* %35, align 4
  %36 = add nuw i64 %25, 2
  %37 = add i64 %26, -2
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %39, label %24

39:                                               ; preds = %24, %16
  %40 = phi i64 [ 0, %16 ], [ %36, %24 ]
  %41 = icmp eq i64 %20, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %19, i64 %40, i32 0
  store i32 1, i32* %43, align 4
  %44 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %19, i64 %40, i32 1
  store i32 0, i32* %44, align 4
  %45 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %19, i64 %40, i32 2
  store i32 0, i32* %45, align 4
  %46 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %19, i64 %40, i32 3, i32 0
  store float 0x47DFF933C0000000, float* %46, align 4
  br label %47

47:                                               ; preds = %42, %39, %13
  %48 = phi %struct.ZopfliNode* [ null, %13 ], [ %19, %39 ], [ %19, %42 ]
  %49 = phi i8* [ null, %13 ], [ %18, %39 ], [ %18, %42 ]
  %50 = tail call i64 @BrotliZopfliComputeShortestPath(%struct.MemoryManager* %0, i64 %1, i64 %2, i8* %3, i64 %4, i8* undef, %struct.BrotliEncoderParams* %6, i32* %8, %struct.Hasher* %7, %struct.ZopfliNode* %48)
  %51 = load i64, i64* %11, align 8
  %52 = add i64 %51, %50
  store i64 %52, i64* %11, align 8
  tail call void @BrotliZopfliCreateCommands(i64 %1, i64 %2, %struct.ZopfliNode* %48, i32* %8, i64* %9, %struct.BrotliEncoderParams* %6, %struct.Command* %10, i64* %12)
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %49) #7
  ret void
}

declare hidden i8* @BrotliAllocate(%struct.MemoryManager*, i64) local_unnamed_addr #4

declare hidden void @BrotliFree(%struct.MemoryManager*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliCreateHqZopfliBackwardReferences(%struct.MemoryManager*, i64, i64, i8*, i64, i8* nocapture readnone, %struct.BrotliEncoderParams*, %struct.Hasher* nocapture readonly, i32* nocapture, i64* nocapture, %struct.Command* nocapture, i64* nocapture, i64* nocapture) local_unnamed_addr #3 {
  %14 = alloca [256 x i32], align 16
  %15 = alloca [704 x i32], align 16
  %16 = alloca [544 x i32], align 16
  %17 = alloca [256 x float], align 16
  %18 = alloca [38 x i32], align 16
  %19 = alloca %struct.StartPosQueue, align 8
  %20 = alloca %struct.ZopfliCostModel, align 8
  %21 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 4
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 2
  %24 = load i32, i32* %23, align 8
  %25 = zext i32 %24 to i64
  %26 = shl i64 1, %25
  %27 = add i64 %26, -16
  %28 = icmp eq i64 %1, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %13
  %30 = bitcast %struct.ZopfliCostModel* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2856, i8* nonnull %30) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %30, i8* align 8 bitcast ({ [704 x float], float*, i32, [4 x i8], float*, float, [4 x i8], i64 }* @__const.BrotliCreateHqZopfliBackwardReferences.model to i8*), i64 2856, i1 false)
  br label %721

31:                                               ; preds = %13
  %32 = shl i64 %1, 2
  %33 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %32) #7
  %34 = bitcast i8* %33 to i32*
  %35 = icmp ugt i64 %1, 127
  %36 = add i64 %1, -127
  %37 = select i1 %35, i64 %36, i64 0
  %38 = add i64 %37, %2
  %39 = bitcast %struct.ZopfliCostModel* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2856, i8* nonnull %39) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %39, i8* align 8 bitcast ({ [704 x float], float*, i32, [4 x i8], float*, float, [4 x i8], i64 }* @__const.BrotliCreateHqZopfliBackwardReferences.model to i8*), i64 2856, i1 false)
  %40 = icmp eq i64 %32, 0
  br i1 %40, label %45, label %41

41:                                               ; preds = %31
  %42 = shl i64 %1, 5
  %43 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %42) #7
  %44 = bitcast i8* %43 to %struct.BackwardMatch*
  br label %45

45:                                               ; preds = %31, %41
  %46 = phi i8* [ %43, %41 ], [ null, %31 ]
  %47 = phi %struct.BackwardMatch* [ %44, %41 ], [ null, %31 ]
  %48 = icmp ugt i64 %1, 3
  br i1 %48, label %49, label %721

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.Hasher, %struct.Hasher* %7, i64 0, i32 1
  %51 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 10
  %52 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 1
  %53 = bitcast [38 x i32]* %18 to i8*
  %54 = getelementptr inbounds %struct.Hasher, %struct.Hasher* %7, i64 0, i32 1, i32 0, i32 0, i64 4
  %55 = bitcast i16* %54 to i32**
  %56 = getelementptr inbounds %struct.Hasher, %struct.Hasher* %7, i64 0, i32 1, i32 0, i32 0, i64 12
  %57 = bitcast i16* %56 to i32**
  %58 = bitcast %union.anon.0* %50 to i64*
  %59 = getelementptr inbounds %struct.Hasher, %struct.Hasher* %7, i64 0, i32 1, i32 0, i32 0, i64 8
  %60 = bitcast i16* %59 to i32*
  %61 = getelementptr inbounds [38 x i32], [38 x i32]* %18, i64 0, i64 0
  %62 = getelementptr inbounds [38 x i32], [38 x i32]* %18, i64 0, i64 4
  %63 = getelementptr inbounds [38 x i32], [38 x i32]* %18, i64 0, i64 8
  %64 = getelementptr inbounds [38 x i32], [38 x i32]* %18, i64 0, i64 12
  %65 = getelementptr inbounds [38 x i32], [38 x i32]* %18, i64 0, i64 16
  %66 = getelementptr inbounds [38 x i32], [38 x i32]* %18, i64 0, i64 20
  %67 = getelementptr inbounds [38 x i32], [38 x i32]* %18, i64 0, i64 24
  %68 = getelementptr inbounds [38 x i32], [38 x i32]* %18, i64 0, i64 28
  %69 = getelementptr inbounds [38 x i32], [38 x i32]* %18, i64 0, i64 32
  %70 = getelementptr inbounds [38 x i32], [38 x i32]* %18, i64 0, i64 36
  %71 = getelementptr inbounds [38 x i32], [38 x i32]* %18, i64 0, i64 37
  %72 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 9, i32 4
  %73 = bitcast [38 x i32]* %18 to <4 x i32>*
  %74 = bitcast i32* %62 to <4 x i32>*
  %75 = bitcast i32* %63 to <4 x i32>*
  %76 = bitcast i32* %64 to <4 x i32>*
  %77 = bitcast i32* %65 to <4 x i32>*
  %78 = bitcast i32* %66 to <4 x i32>*
  %79 = bitcast i32* %67 to <4 x i32>*
  %80 = bitcast i32* %68 to <4 x i32>*
  %81 = bitcast i32* %69 to <4 x i32>*
  br label %82

82:                                               ; preds = %49, %715
  %83 = phi %struct.BackwardMatch* [ %47, %49 ], [ %119, %715 ]
  %84 = phi i8* [ %46, %49 ], [ %118, %715 ]
  %85 = phi i64 [ 0, %49 ], [ %718, %715 ]
  %86 = phi i64 [ 0, %49 ], [ %716, %715 ]
  %87 = phi i64 [ %32, %49 ], [ %117, %715 ]
  %88 = add i64 %85, %2
  %89 = icmp ult i64 %88, %27
  %90 = select i1 %89, i64 %88, i64 %27
  %91 = add i64 %88, %22
  %92 = icmp ult i64 %91, %27
  %93 = select i1 %92, i64 %91, i64 %27
  %94 = sub i64 %1, %85
  %95 = add i64 %86, 128
  %96 = icmp ult i64 %87, %95
  br i1 %96, label %97, label %116

97:                                               ; preds = %82
  %98 = icmp eq i64 %87, 0
  %99 = select i1 %98, i64 %95, i64 %87
  br label %100

100:                                              ; preds = %100, %97
  %101 = phi i64 [ %99, %97 ], [ %103, %100 ]
  %102 = icmp ult i64 %101, %95
  %103 = shl i64 %101, 1
  br i1 %102, label %100, label %104

104:                                              ; preds = %100
  %105 = icmp eq i64 %101, 0
  br i1 %105, label %110, label %106

106:                                              ; preds = %104
  %107 = shl i64 %101, 3
  %108 = call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %107) #7
  %109 = bitcast i8* %108 to %struct.BackwardMatch*
  br label %110

110:                                              ; preds = %104, %106
  %111 = phi i8* [ %108, %106 ], [ null, %104 ]
  %112 = phi %struct.BackwardMatch* [ %109, %106 ], [ null, %104 ]
  br i1 %98, label %115, label %113

113:                                              ; preds = %110
  %114 = shl i64 %87, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %111, i8* align 4 %84, i64 %114, i1 false)
  br label %115

115:                                              ; preds = %110, %113
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %84) #7
  br label %116

116:                                              ; preds = %115, %82
  %117 = phi i64 [ %101, %115 ], [ %87, %82 ]
  %118 = phi i8* [ %111, %115 ], [ %84, %82 ]
  %119 = phi %struct.BackwardMatch* [ %112, %115 ], [ %83, %82 ]
  %120 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %119, i64 %86
  %121 = and i64 %88, %4
  %122 = load i32, i32* %52, align 4, !noalias !84
  %123 = icmp eq i32 %122, 11
  %124 = select i1 %123, i64 64, i64 16
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %53) #7, !noalias !84
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %53, i8 -86, i64 152, i1 false) #7, !noalias !84
  %125 = call i64 @llvm.usub.sat.i64(i64 %88, i64 %124) #7
  %126 = add i64 %88, -1
  %127 = icmp ugt i64 %126, %125
  br i1 %127, label %128, label %208

128:                                              ; preds = %116
  %129 = getelementptr inbounds i8, i8* %3, i64 %121
  %130 = add i64 %121, 1
  %131 = getelementptr inbounds i8, i8* %3, i64 %130
  %132 = lshr i64 %94, 3
  %133 = icmp eq i64 %132, 0
  %134 = and i64 %94, 7
  %135 = icmp eq i64 %134, 0
  %136 = icmp eq i64 %134, 1
  %137 = icmp eq i64 %134, 2
  %138 = icmp eq i64 %134, 3
  %139 = icmp eq i64 %134, 4
  %140 = icmp eq i64 %134, 5
  %141 = icmp eq i64 %134, 6
  br label %142

142:                                              ; preds = %201, %128
  %143 = phi i64 [ %126, %128 ], [ %204, %201 ]
  %144 = phi %struct.BackwardMatch* [ %120, %128 ], [ %203, %201 ]
  %145 = phi i64 [ 1, %128 ], [ %202, %201 ]
  %146 = sub i64 %88, %143
  %147 = icmp ugt i64 %146, %90
  br i1 %147, label %208, label %148, !prof !7

148:                                              ; preds = %142
  %149 = and i64 %143, %4
  %150 = load i8, i8* %129, align 1, !alias.scope !88, !noalias !89
  %151 = getelementptr inbounds i8, i8* %3, i64 %149
  %152 = load i8, i8* %151, align 1, !alias.scope !88, !noalias !89
  %153 = icmp eq i8 %150, %152
  br i1 %153, label %154, label %201

154:                                              ; preds = %148
  %155 = load i8, i8* %131, align 1, !alias.scope !88, !noalias !89
  %156 = add i64 %149, 1
  %157 = getelementptr inbounds i8, i8* %3, i64 %156
  %158 = load i8, i8* %157, align 1, !alias.scope !88, !noalias !89
  %159 = icmp eq i8 %155, %158
  br i1 %159, label %160, label %201

160:                                              ; preds = %154
  br i1 %133, label %181, label %161, !prof !7

161:                                              ; preds = %160, %171
  %162 = phi i64 [ %174, %171 ], [ %132, %160 ]
  %163 = phi i8* [ %172, %171 ], [ %129, %160 ]
  %164 = phi i64 [ %173, %171 ], [ 0, %160 ]
  %165 = bitcast i8* %163 to i64*
  %166 = load i64, i64* %165, align 8, !alias.scope !88, !noalias !89
  %167 = getelementptr inbounds i8, i8* %151, i64 %164
  %168 = bitcast i8* %167 to i64*
  %169 = load i64, i64* %168, align 8, !alias.scope !88, !noalias !89
  %170 = icmp eq i64 %166, %169
  br i1 %170, label %171, label %176, !prof !7

171:                                              ; preds = %161
  %172 = getelementptr inbounds i8, i8* %163, i64 8
  %173 = add nuw i64 %164, 8
  %174 = add nsw i64 %162, -1
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %181, label %161, !prof !7

176:                                              ; preds = %161
  %177 = xor i64 %169, %166
  %178 = call i64 @llvm.cttz.i64(i64 %177, i1 true) #7, !range !10
  %179 = lshr i64 %178, 3
  %180 = or i64 %179, %164
  br label %191

181:                                              ; preds = %171, %160
  %182 = phi i64 [ 0, %160 ], [ %173, %171 ]
  %183 = phi i8* [ %129, %160 ], [ %172, %171 ]
  br i1 %135, label %191, label %184

184:                                              ; preds = %181
  %185 = getelementptr inbounds i8, i8* %151, i64 %182
  %186 = load i8, i8* %185, align 1, !alias.scope !88, !noalias !89
  %187 = load i8, i8* %183, align 1, !alias.scope !88, !noalias !89
  %188 = icmp eq i8 %186, %187
  br i1 %188, label %189, label %191, !prof !11

189:                                              ; preds = %184
  %190 = add i64 %182, 1
  br i1 %136, label %191, label %1097

191:                                              ; preds = %1137, %189, %184, %1097, %1103, %1105, %1111, %1113, %1119, %1121, %1127, %1129, %1135, %181, %176
  %192 = phi i64 [ %180, %176 ], [ %182, %181 ], [ %182, %184 ], [ %190, %189 ], [ %190, %1097 ], [ %1104, %1103 ], [ %1104, %1105 ], [ %1112, %1111 ], [ %1112, %1113 ], [ %1120, %1119 ], [ %1120, %1121 ], [ %1128, %1127 ], [ %1128, %1129 ], [ %1136, %1135 ], [ %1144, %1137 ]
  %193 = icmp ugt i64 %192, %145
  br i1 %193, label %194, label %201

194:                                              ; preds = %191
  %195 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %144, i64 1
  %196 = trunc i64 %146 to i32
  %197 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %144, i64 0, i32 0
  store i32 %196, i32* %197, align 4, !noalias !84
  %198 = trunc i64 %192 to i32
  %199 = shl i32 %198, 5
  %200 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %144, i64 0, i32 1
  store i32 %199, i32* %200, align 4, !noalias !84
  br label %201

201:                                              ; preds = %194, %191, %154, %148
  %202 = phi i64 [ %192, %194 ], [ %145, %191 ], [ %145, %154 ], [ %145, %148 ]
  %203 = phi %struct.BackwardMatch* [ %195, %194 ], [ %144, %191 ], [ %144, %154 ], [ %144, %148 ]
  %204 = add i64 %143, -1
  %205 = icmp ugt i64 %204, %125
  %206 = icmp ult i64 %202, 3
  %207 = and i1 %205, %206
  br i1 %207, label %142, label %208

208:                                              ; preds = %201, %142, %116
  %209 = phi i64 [ 1, %116 ], [ %202, %201 ], [ %145, %142 ]
  %210 = phi %struct.BackwardMatch* [ %120, %116 ], [ %203, %201 ], [ %144, %142 ]
  %211 = icmp ult i64 %209, %94
  br i1 %211, label %212, label %364

212:                                              ; preds = %208
  %213 = icmp ult i64 %94, 128
  %214 = select i1 %213, i64 %94, i64 128
  %215 = icmp ugt i64 %94, 127
  %216 = getelementptr inbounds i8, i8* %3, i64 %121
  %217 = bitcast i8* %216 to i32*
  %218 = load i32, i32* %217, align 4, !alias.scope !90, !noalias !95
  %219 = mul i32 %218, 506832829
  %220 = lshr i32 %219, 15
  %221 = load i32*, i32** %55, align 8, !alias.scope !99, !noalias !100
  %222 = load i32*, i32** %57, align 8, !alias.scope !99, !noalias !100
  %223 = zext i32 %220 to i64
  %224 = getelementptr inbounds i32, i32* %221, i64 %223
  %225 = load i32, i32* %224, align 4, !noalias !101
  %226 = load i64, i64* %58, align 8, !alias.scope !102, !noalias !100
  %227 = and i64 %226, %88
  %228 = shl i64 %227, 1
  %229 = or i64 %228, 1
  br i1 %215, label %230, label %232

230:                                              ; preds = %212
  %231 = trunc i64 %88 to i32
  store i32 %231, i32* %224, align 4, !noalias !105
  br label %232

232:                                              ; preds = %230, %212
  %233 = zext i32 %225 to i64
  %234 = sub i64 %88, %233
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %251, label %236

236:                                              ; preds = %232, %352
  %237 = phi i64 [ %317, %352 ], [ %209, %232 ]
  %238 = phi i64 [ %361, %352 ], [ %233, %232 ]
  %239 = phi i64 [ %362, %352 ], [ %234, %232 ]
  %240 = phi %struct.BackwardMatch* [ %318, %352 ], [ %210, %232 ]
  %241 = phi i64 [ %360, %352 ], [ 64, %232 ]
  %242 = phi i64 [ %357, %352 ], [ 0, %232 ]
  %243 = phi i64 [ %356, %352 ], [ 0, %232 ]
  %244 = phi i64 [ %355, %352 ], [ %229, %232 ]
  %245 = phi i64 [ %354, %352 ], [ %228, %232 ]
  %246 = phi i32 [ %359, %352 ], [ %225, %232 ]
  %247 = and i64 %238, %4
  %248 = icmp ugt i64 %239, %90
  %249 = icmp eq i64 %241, 0
  %250 = or i1 %248, %249
  br i1 %250, label %251, label %260

251:                                              ; preds = %352, %236, %232
  %252 = phi i64 [ %209, %232 ], [ %237, %236 ], [ %317, %352 ]
  %253 = phi i64 [ %228, %232 ], [ %245, %236 ], [ %354, %352 ]
  %254 = phi i64 [ %229, %232 ], [ %244, %236 ], [ %355, %352 ]
  %255 = phi %struct.BackwardMatch* [ %210, %232 ], [ %240, %236 ], [ %318, %352 ]
  br i1 %215, label %256, label %364

256:                                              ; preds = %251
  %257 = load i32, i32* %60, align 8, !alias.scope !99, !noalias !100
  %258 = getelementptr inbounds i32, i32* %222, i64 %253
  store i32 %257, i32* %258, align 4, !noalias !105
  %259 = getelementptr inbounds i32, i32* %222, i64 %254
  store i32 %257, i32* %259, align 4, !noalias !105
  br label %364

260:                                              ; preds = %236
  %261 = icmp ult i64 %243, %242
  %262 = select i1 %261, i64 %243, i64 %242
  %263 = add i64 %262, %121
  %264 = getelementptr inbounds i8, i8* %3, i64 %263
  %265 = add i64 %262, %247
  %266 = getelementptr inbounds i8, i8* %3, i64 %265
  %267 = sub i64 %94, %262
  %268 = lshr i64 %267, 3
  %269 = icmp eq i64 %268, 0
  br i1 %269, label %290, label %270, !prof !7

270:                                              ; preds = %260, %280
  %271 = phi i64 [ %283, %280 ], [ %268, %260 ]
  %272 = phi i8* [ %281, %280 ], [ %266, %260 ]
  %273 = phi i64 [ %282, %280 ], [ 0, %260 ]
  %274 = bitcast i8* %272 to i64*
  %275 = load i64, i64* %274, align 8, !alias.scope !106, !noalias !95
  %276 = getelementptr inbounds i8, i8* %264, i64 %273
  %277 = bitcast i8* %276 to i64*
  %278 = load i64, i64* %277, align 8, !alias.scope !106, !noalias !95
  %279 = icmp eq i64 %275, %278
  br i1 %279, label %280, label %285, !prof !7

280:                                              ; preds = %270
  %281 = getelementptr inbounds i8, i8* %272, i64 8
  %282 = add nuw i64 %273, 8
  %283 = add nsw i64 %271, -1
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %290, label %270, !prof !7

285:                                              ; preds = %270
  %286 = xor i64 %278, %275
  %287 = call i64 @llvm.cttz.i64(i64 %286, i1 true) #7, !range !10
  %288 = lshr i64 %287, 3
  %289 = or i64 %288, %273
  br label %303

290:                                              ; preds = %280, %260
  %291 = phi i64 [ 0, %260 ], [ %282, %280 ]
  %292 = phi i8* [ %266, %260 ], [ %281, %280 ]
  %293 = and i64 %267, 7
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %303, label %295

295:                                              ; preds = %290
  %296 = getelementptr inbounds i8, i8* %264, i64 %291
  %297 = load i8, i8* %296, align 1, !alias.scope !106, !noalias !95
  %298 = load i8, i8* %292, align 1, !alias.scope !106, !noalias !95
  %299 = icmp eq i8 %297, %298
  br i1 %299, label %300, label %303, !prof !11

300:                                              ; preds = %295
  %301 = add i64 %291, 1
  %302 = icmp eq i64 %293, 1
  br i1 %302, label %303, label %1145

303:                                              ; preds = %1190, %300, %295, %1145, %1151, %1154, %1160, %1163, %1169, %1172, %1178, %1181, %1187, %290, %285
  %304 = phi i64 [ %289, %285 ], [ %291, %290 ], [ %301, %300 ], [ %291, %295 ], [ %301, %1145 ], [ %1152, %1151 ], [ %1152, %1154 ], [ %1161, %1160 ], [ %1161, %1163 ], [ %1170, %1169 ], [ %1170, %1172 ], [ %1179, %1178 ], [ %1179, %1181 ], [ %1188, %1187 ], [ %1197, %1190 ]
  %305 = add i64 %304, %262
  %306 = icmp eq %struct.BackwardMatch* %240, null
  br i1 %306, label %316, label %307

307:                                              ; preds = %303
  %308 = icmp ugt i64 %305, %237
  br i1 %308, label %309, label %316

309:                                              ; preds = %307
  %310 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %240, i64 1
  %311 = trunc i64 %239 to i32
  %312 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %240, i64 0, i32 0
  store i32 %311, i32* %312, align 4, !alias.scope !107, !noalias !108
  %313 = trunc i64 %305 to i32
  %314 = shl i32 %313, 5
  %315 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %240, i64 0, i32 1
  store i32 %314, i32* %315, align 4, !alias.scope !107, !noalias !108
  br label %316

316:                                              ; preds = %309, %307, %303
  %317 = phi i64 [ %237, %303 ], [ %305, %309 ], [ %237, %307 ]
  %318 = phi %struct.BackwardMatch* [ null, %303 ], [ %310, %309 ], [ %240, %307 ]
  %319 = icmp ult i64 %305, %214
  br i1 %319, label %331, label %320

320:                                              ; preds = %316
  br i1 %215, label %321, label %364

321:                                              ; preds = %320
  %322 = and i64 %238, %226
  %323 = shl nuw nsw i64 %322, 1
  %324 = getelementptr inbounds i32, i32* %222, i64 %323
  %325 = load i32, i32* %324, align 4, !noalias !105
  %326 = getelementptr inbounds i32, i32* %222, i64 %245
  store i32 %325, i32* %326, align 4, !noalias !105
  %327 = or i64 %323, 1
  %328 = getelementptr inbounds i32, i32* %222, i64 %327
  %329 = load i32, i32* %328, align 4, !noalias !105
  %330 = getelementptr inbounds i32, i32* %222, i64 %244
  store i32 %329, i32* %330, align 4, !noalias !105
  br label %364

331:                                              ; preds = %316
  %332 = add i64 %305, %121
  %333 = getelementptr inbounds i8, i8* %3, i64 %332
  %334 = load i8, i8* %333, align 1, !alias.scope !106, !noalias !95
  %335 = add i64 %305, %247
  %336 = getelementptr inbounds i8, i8* %3, i64 %335
  %337 = load i8, i8* %336, align 1, !alias.scope !106, !noalias !95
  %338 = icmp ugt i8 %334, %337
  br i1 %338, label %339, label %346

339:                                              ; preds = %331
  br i1 %215, label %340, label %342

340:                                              ; preds = %339
  %341 = getelementptr inbounds i32, i32* %222, i64 %245
  store i32 %246, i32* %341, align 4, !noalias !105
  br label %342

342:                                              ; preds = %340, %339
  %343 = and i64 %238, %226
  %344 = shl nuw nsw i64 %343, 1
  %345 = or i64 %344, 1
  br label %352

346:                                              ; preds = %331
  br i1 %215, label %347, label %349

347:                                              ; preds = %346
  %348 = getelementptr inbounds i32, i32* %222, i64 %244
  store i32 %246, i32* %348, align 4, !noalias !105
  br label %349

349:                                              ; preds = %347, %346
  %350 = and i64 %238, %226
  %351 = shl nuw nsw i64 %350, 1
  br label %352

352:                                              ; preds = %349, %342
  %353 = phi i64 [ %345, %342 ], [ %351, %349 ]
  %354 = phi i64 [ %345, %342 ], [ %245, %349 ]
  %355 = phi i64 [ %244, %342 ], [ %351, %349 ]
  %356 = phi i64 [ %305, %342 ], [ %243, %349 ]
  %357 = phi i64 [ %242, %342 ], [ %305, %349 ]
  %358 = getelementptr inbounds i32, i32* %222, i64 %353
  %359 = load i32, i32* %358, align 4, !noalias !105
  %360 = add nsw i64 %241, -1
  %361 = zext i32 %359 to i64
  %362 = sub i64 %88, %361
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %251, label %236

364:                                              ; preds = %321, %320, %256, %251, %208
  %365 = phi i64 [ %209, %208 ], [ %252, %256 ], [ %252, %251 ], [ %317, %321 ], [ %317, %320 ]
  %366 = phi %struct.BackwardMatch* [ %210, %208 ], [ %255, %256 ], [ %255, %251 ], [ %318, %321 ], [ %318, %320 ]
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %73, align 16, !noalias !84
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %74, align 16, !noalias !84
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %75, align 16, !noalias !84
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %76, align 16, !noalias !84
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %77, align 16, !noalias !84
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %78, align 16, !noalias !84
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %79, align 16, !noalias !84
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %80, align 16, !noalias !84
  store <4 x i32> <i32 268435455, i32 268435455, i32 268435455, i32 268435455>, <4 x i32>* %81, align 16, !noalias !84
  store i32 268435455, i32* %70, align 16, !noalias !84
  store i32 268435455, i32* %71, align 4, !noalias !84
  %367 = add i64 %365, 1
  %368 = icmp ugt i64 %367, 4
  %369 = select i1 %368, i64 %367, i64 4
  %370 = getelementptr inbounds i8, i8* %3, i64 %121
  %371 = call i32 @BrotliFindAllStaticDictionaryMatches(%struct.BrotliEncoderDictionary* %51, i8* %370, i64 %369, i64 %94, i32* nonnull %61) #7, !noalias !89
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %407, label %373

373:                                              ; preds = %364
  %374 = icmp ult i64 %94, 37
  %375 = select i1 %374, i64 %94, i64 37
  %376 = icmp ugt i64 %369, %375
  br i1 %376, label %407, label %377

377:                                              ; preds = %373
  %378 = add i64 %93, 1
  br label %379

379:                                              ; preds = %403, %377
  %380 = phi i64 [ %369, %377 ], [ %405, %403 ]
  %381 = phi %struct.BackwardMatch* [ %366, %377 ], [ %404, %403 ]
  %382 = getelementptr inbounds [38 x i32], [38 x i32]* %18, i64 0, i64 %380
  %383 = load i32, i32* %382, align 4, !noalias !84
  %384 = icmp ult i32 %383, 268435455
  br i1 %384, label %385, label %403

385:                                              ; preds = %379
  %386 = lshr i32 %383, 5
  %387 = zext i32 %386 to i64
  %388 = add i64 %378, %387
  %389 = load i64, i64* %72, align 8, !noalias !84
  %390 = icmp ugt i64 %388, %389
  br i1 %390, label %403, label %391

391:                                              ; preds = %385
  %392 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %381, i64 1
  %393 = and i32 %383, 31
  %394 = zext i32 %393 to i64
  %395 = trunc i64 %388 to i32
  %396 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %381, i64 0, i32 0
  store i32 %395, i32* %396, align 4, !noalias !84
  %397 = shl i64 %380, 5
  %398 = icmp eq i64 %380, %394
  %399 = select i1 %398, i64 0, i64 %394
  %400 = or i64 %399, %397
  %401 = trunc i64 %400 to i32
  %402 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %381, i64 0, i32 1
  store i32 %401, i32* %402, align 4, !noalias !84
  br label %403

403:                                              ; preds = %391, %385, %379
  %404 = phi %struct.BackwardMatch* [ %381, %379 ], [ %392, %391 ], [ %381, %385 ]
  %405 = add i64 %380, 1
  %406 = icmp ugt i64 %405, %375
  br i1 %406, label %407, label %379

407:                                              ; preds = %403, %364, %373
  %408 = phi %struct.BackwardMatch* [ %366, %364 ], [ %366, %373 ], [ %404, %403 ]
  %409 = ptrtoint %struct.BackwardMatch* %408 to i64
  %410 = ptrtoint %struct.BackwardMatch* %120 to i64
  %411 = sub i64 %409, %410
  %412 = ashr exact i64 %411, 3
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %53) #7, !noalias !84
  %413 = add i64 %412, %86
  %414 = trunc i64 %412 to i32
  %415 = getelementptr inbounds i32, i32* %34, i64 %85
  store i32 %414, i32* %415, align 4
  %416 = icmp eq i64 %411, 0
  br i1 %416, label %715, label %417

417:                                              ; preds = %407
  %418 = add i64 %413, -1
  %419 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %119, i64 %418, i32 1
  %420 = load i32, i32* %419, align 4
  %421 = lshr i32 %420, 5
  %422 = zext i32 %421 to i64
  %423 = icmp ugt i32 %420, 10431
  br i1 %423, label %424, label %715

424:                                              ; preds = %417
  %425 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %119, i64 %418
  %426 = add nsw i64 %422, -1
  %427 = add i64 %86, 1
  %428 = bitcast %struct.BackwardMatch* %425 to i64*
  %429 = bitcast %struct.BackwardMatch* %120 to i64*
  %430 = load i64, i64* %428, align 4
  store i64 %430, i64* %429, align 4
  store i32 1, i32* %415, align 4
  %431 = add i64 %88, 1
  %432 = add i64 %88, %422
  %433 = icmp ult i64 %432, %38
  %434 = select i1 %433, i64 %432, i64 %38
  %435 = add i64 %88, 64
  %436 = icmp ugt i64 %435, %434
  %437 = add i64 %434, -63
  %438 = select i1 %436, i64 %431, i64 %437
  %439 = add i64 %88, 513
  %440 = icmp ule i64 %439, %438
  %441 = icmp ugt i64 %438, %431
  %442 = and i1 %440, %441
  br i1 %442, label %443, label %575

443:                                              ; preds = %424
  %444 = load i64, i64* %58, align 8, !alias.scope !109, !noalias !114
  %445 = add i64 %444, -15
  %446 = load i32*, i32** %55, align 8, !alias.scope !117, !noalias !120
  %447 = load i32*, i32** %57, align 8, !alias.scope !117, !noalias !120
  br label %448

448:                                              ; preds = %569, %443
  %449 = phi i64 [ %431, %443 ], [ %573, %569 ]
  %450 = and i64 %449, %4
  %451 = getelementptr inbounds i8, i8* %3, i64 %450
  %452 = bitcast i8* %451 to i32*
  %453 = load i32, i32* %452, align 4, !alias.scope !124, !noalias !127
  %454 = mul i32 %453, 506832829
  %455 = lshr i32 %454, 15
  %456 = zext i32 %455 to i64
  %457 = getelementptr inbounds i32, i32* %446, i64 %456
  %458 = load i32, i32* %457, align 4, !noalias !128
  %459 = and i64 %449, %444
  %460 = shl i64 %459, 1
  %461 = or i64 %460, 1
  %462 = trunc i64 %449 to i32
  store i32 %462, i32* %457, align 4, !noalias !129
  %463 = zext i32 %458 to i64
  %464 = sub i64 %449, %463
  %465 = icmp eq i64 %464, 0
  br i1 %465, label %479, label %466

466:                                              ; preds = %448, %557
  %467 = phi i64 [ %566, %557 ], [ %463, %448 ]
  %468 = phi i64 [ %567, %557 ], [ %464, %448 ]
  %469 = phi i64 [ %565, %557 ], [ 64, %448 ]
  %470 = phi i64 [ %562, %557 ], [ 0, %448 ]
  %471 = phi i64 [ %561, %557 ], [ 0, %448 ]
  %472 = phi i64 [ %560, %557 ], [ %461, %448 ]
  %473 = phi i64 [ %559, %557 ], [ %460, %448 ]
  %474 = phi i32 [ %564, %557 ], [ %458, %448 ]
  %475 = and i64 %467, %4
  %476 = icmp ugt i64 %468, %445
  %477 = icmp eq i64 %469, 0
  %478 = or i1 %476, %477
  br i1 %478, label %479, label %484

479:                                              ; preds = %557, %466, %448
  %480 = phi i64 [ %460, %448 ], [ %559, %557 ], [ %473, %466 ]
  %481 = phi i64 [ %461, %448 ], [ %560, %557 ], [ %472, %466 ]
  %482 = load i32, i32* %60, align 8, !alias.scope !117, !noalias !120
  %483 = getelementptr inbounds i32, i32* %447, i64 %480
  store i32 %482, i32* %483, align 4, !noalias !129
  br label %569

484:                                              ; preds = %466
  %485 = icmp ult i64 %471, %470
  %486 = select i1 %485, i64 %471, i64 %470
  %487 = add i64 %486, %450
  %488 = getelementptr inbounds i8, i8* %3, i64 %487
  %489 = add i64 %486, %475
  %490 = getelementptr inbounds i8, i8* %3, i64 %489
  %491 = sub i64 128, %486
  %492 = lshr i64 %491, 3
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %514, label %494, !prof !7

494:                                              ; preds = %484, %504
  %495 = phi i64 [ %507, %504 ], [ %492, %484 ]
  %496 = phi i8* [ %505, %504 ], [ %490, %484 ]
  %497 = phi i64 [ %506, %504 ], [ 0, %484 ]
  %498 = bitcast i8* %496 to i64*
  %499 = load i64, i64* %498, align 8, !alias.scope !130, !noalias !127
  %500 = getelementptr inbounds i8, i8* %488, i64 %497
  %501 = bitcast i8* %500 to i64*
  %502 = load i64, i64* %501, align 8, !alias.scope !130, !noalias !127
  %503 = icmp eq i64 %499, %502
  br i1 %503, label %504, label %509, !prof !7

504:                                              ; preds = %494
  %505 = getelementptr inbounds i8, i8* %496, i64 8
  %506 = add nuw i64 %497, 8
  %507 = add nsw i64 %495, -1
  %508 = icmp eq i64 %507, 0
  br i1 %508, label %514, label %494, !prof !7

509:                                              ; preds = %494
  %510 = xor i64 %502, %499
  %511 = call i64 @llvm.cttz.i64(i64 %510, i1 true) #7, !range !10
  %512 = lshr i64 %511, 3
  %513 = or i64 %512, %497
  br label %527

514:                                              ; preds = %504, %484
  %515 = phi i64 [ 0, %484 ], [ %506, %504 ]
  %516 = phi i8* [ %490, %484 ], [ %505, %504 ]
  %517 = and i64 %491, 7
  %518 = icmp eq i64 %517, 0
  br i1 %518, label %527, label %519

519:                                              ; preds = %514
  %520 = getelementptr inbounds i8, i8* %488, i64 %515
  %521 = load i8, i8* %520, align 1, !alias.scope !130, !noalias !127
  %522 = load i8, i8* %516, align 1, !alias.scope !130, !noalias !127
  %523 = icmp eq i8 %521, %522
  br i1 %523, label %524, label %527, !prof !11

524:                                              ; preds = %519
  %525 = add i64 %515, 1
  %526 = icmp eq i64 %517, 1
  br i1 %526, label %527, label %1198

527:                                              ; preds = %1243, %524, %519, %1198, %1204, %1207, %1213, %1216, %1222, %1225, %1231, %1234, %1240, %514, %509
  %528 = phi i64 [ %513, %509 ], [ %515, %514 ], [ %515, %519 ], [ %525, %524 ], [ %525, %1198 ], [ %1205, %1204 ], [ %1205, %1207 ], [ %1214, %1213 ], [ %1214, %1216 ], [ %1223, %1222 ], [ %1223, %1225 ], [ %1232, %1231 ], [ %1232, %1234 ], [ %1241, %1240 ], [ %1250, %1243 ]
  %529 = add i64 %528, %486
  %530 = icmp ult i64 %529, 128
  br i1 %530, label %540, label %531

531:                                              ; preds = %527
  %532 = and i64 %467, %444
  %533 = shl nuw nsw i64 %532, 1
  %534 = getelementptr inbounds i32, i32* %447, i64 %533
  %535 = load i32, i32* %534, align 4, !noalias !129
  %536 = getelementptr inbounds i32, i32* %447, i64 %473
  store i32 %535, i32* %536, align 4, !noalias !129
  %537 = or i64 %533, 1
  %538 = getelementptr inbounds i32, i32* %447, i64 %537
  %539 = load i32, i32* %538, align 4, !noalias !129
  br label %569

540:                                              ; preds = %527
  %541 = add i64 %529, %450
  %542 = getelementptr inbounds i8, i8* %3, i64 %541
  %543 = load i8, i8* %542, align 1, !alias.scope !130, !noalias !127
  %544 = add i64 %529, %475
  %545 = getelementptr inbounds i8, i8* %3, i64 %544
  %546 = load i8, i8* %545, align 1, !alias.scope !130, !noalias !127
  %547 = icmp ugt i8 %543, %546
  br i1 %547, label %548, label %553

548:                                              ; preds = %540
  %549 = getelementptr inbounds i32, i32* %447, i64 %473
  store i32 %474, i32* %549, align 4, !noalias !129
  %550 = and i64 %467, %444
  %551 = shl nuw nsw i64 %550, 1
  %552 = or i64 %551, 1
  br label %557

553:                                              ; preds = %540
  %554 = getelementptr inbounds i32, i32* %447, i64 %472
  store i32 %474, i32* %554, align 4, !noalias !129
  %555 = and i64 %467, %444
  %556 = shl nuw nsw i64 %555, 1
  br label %557

557:                                              ; preds = %553, %548
  %558 = phi i64 [ %552, %548 ], [ %556, %553 ]
  %559 = phi i64 [ %552, %548 ], [ %473, %553 ]
  %560 = phi i64 [ %472, %548 ], [ %556, %553 ]
  %561 = phi i64 [ %529, %548 ], [ %471, %553 ]
  %562 = phi i64 [ %470, %548 ], [ %529, %553 ]
  %563 = getelementptr inbounds i32, i32* %447, i64 %558
  %564 = load i32, i32* %563, align 4, !noalias !129
  %565 = add nsw i64 %469, -1
  %566 = zext i32 %564 to i64
  %567 = sub i64 %449, %566
  %568 = icmp eq i64 %567, 0
  br i1 %568, label %479, label %466

569:                                              ; preds = %531, %479
  %570 = phi i64 [ %472, %531 ], [ %481, %479 ]
  %571 = phi i32 [ %539, %531 ], [ %482, %479 ]
  %572 = getelementptr inbounds i32, i32* %447, i64 %570
  store i32 %571, i32* %572, align 4, !noalias !129
  %573 = add i64 %449, 8
  %574 = icmp ult i64 %573, %438
  br i1 %574, label %448, label %575

575:                                              ; preds = %569, %424
  %576 = icmp ult i64 %438, %434
  br i1 %576, label %577, label %709

577:                                              ; preds = %575
  %578 = load i64, i64* %58, align 8, !alias.scope !131, !noalias !134
  %579 = add i64 %578, -15
  %580 = load i32*, i32** %55, align 8, !alias.scope !136, !noalias !139
  %581 = load i32*, i32** %57, align 8, !alias.scope !136, !noalias !139
  br label %582

582:                                              ; preds = %703, %577
  %583 = phi i64 [ %438, %577 ], [ %707, %703 ]
  %584 = and i64 %583, %4
  %585 = getelementptr inbounds i8, i8* %3, i64 %584
  %586 = bitcast i8* %585 to i32*
  %587 = load i32, i32* %586, align 4, !alias.scope !143, !noalias !146
  %588 = mul i32 %587, 506832829
  %589 = lshr i32 %588, 15
  %590 = zext i32 %589 to i64
  %591 = getelementptr inbounds i32, i32* %580, i64 %590
  %592 = load i32, i32* %591, align 4, !noalias !147
  %593 = and i64 %583, %578
  %594 = shl i64 %593, 1
  %595 = or i64 %594, 1
  %596 = trunc i64 %583 to i32
  store i32 %596, i32* %591, align 4, !noalias !148
  %597 = zext i32 %592 to i64
  %598 = sub i64 %583, %597
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %613, label %600

600:                                              ; preds = %582, %691
  %601 = phi i64 [ %700, %691 ], [ %597, %582 ]
  %602 = phi i64 [ %701, %691 ], [ %598, %582 ]
  %603 = phi i64 [ %699, %691 ], [ 64, %582 ]
  %604 = phi i64 [ %696, %691 ], [ 0, %582 ]
  %605 = phi i64 [ %695, %691 ], [ 0, %582 ]
  %606 = phi i64 [ %694, %691 ], [ %595, %582 ]
  %607 = phi i64 [ %693, %691 ], [ %594, %582 ]
  %608 = phi i32 [ %698, %691 ], [ %592, %582 ]
  %609 = and i64 %601, %4
  %610 = icmp ugt i64 %602, %579
  %611 = icmp eq i64 %603, 0
  %612 = or i1 %610, %611
  br i1 %612, label %613, label %618

613:                                              ; preds = %691, %600, %582
  %614 = phi i64 [ %594, %582 ], [ %693, %691 ], [ %607, %600 ]
  %615 = phi i64 [ %595, %582 ], [ %694, %691 ], [ %606, %600 ]
  %616 = load i32, i32* %60, align 8, !alias.scope !136, !noalias !139
  %617 = getelementptr inbounds i32, i32* %581, i64 %614
  store i32 %616, i32* %617, align 4, !noalias !148
  br label %703

618:                                              ; preds = %600
  %619 = icmp ult i64 %605, %604
  %620 = select i1 %619, i64 %605, i64 %604
  %621 = add i64 %620, %584
  %622 = getelementptr inbounds i8, i8* %3, i64 %621
  %623 = add i64 %620, %609
  %624 = getelementptr inbounds i8, i8* %3, i64 %623
  %625 = sub i64 128, %620
  %626 = lshr i64 %625, 3
  %627 = icmp eq i64 %626, 0
  br i1 %627, label %648, label %628, !prof !7

628:                                              ; preds = %618, %638
  %629 = phi i64 [ %641, %638 ], [ %626, %618 ]
  %630 = phi i8* [ %639, %638 ], [ %624, %618 ]
  %631 = phi i64 [ %640, %638 ], [ 0, %618 ]
  %632 = bitcast i8* %630 to i64*
  %633 = load i64, i64* %632, align 8, !alias.scope !149, !noalias !146
  %634 = getelementptr inbounds i8, i8* %622, i64 %631
  %635 = bitcast i8* %634 to i64*
  %636 = load i64, i64* %635, align 8, !alias.scope !149, !noalias !146
  %637 = icmp eq i64 %633, %636
  br i1 %637, label %638, label %643, !prof !7

638:                                              ; preds = %628
  %639 = getelementptr inbounds i8, i8* %630, i64 8
  %640 = add nuw i64 %631, 8
  %641 = add nsw i64 %629, -1
  %642 = icmp eq i64 %641, 0
  br i1 %642, label %648, label %628, !prof !7

643:                                              ; preds = %628
  %644 = xor i64 %636, %633
  %645 = call i64 @llvm.cttz.i64(i64 %644, i1 true) #7, !range !10
  %646 = lshr i64 %645, 3
  %647 = or i64 %646, %631
  br label %661

648:                                              ; preds = %638, %618
  %649 = phi i64 [ 0, %618 ], [ %640, %638 ]
  %650 = phi i8* [ %624, %618 ], [ %639, %638 ]
  %651 = and i64 %625, 7
  %652 = icmp eq i64 %651, 0
  br i1 %652, label %661, label %653

653:                                              ; preds = %648
  %654 = getelementptr inbounds i8, i8* %622, i64 %649
  %655 = load i8, i8* %654, align 1, !alias.scope !149, !noalias !146
  %656 = load i8, i8* %650, align 1, !alias.scope !149, !noalias !146
  %657 = icmp eq i8 %655, %656
  br i1 %657, label %658, label %661, !prof !11

658:                                              ; preds = %653
  %659 = add i64 %649, 1
  %660 = icmp eq i64 %651, 1
  br i1 %660, label %661, label %1251

661:                                              ; preds = %1296, %658, %653, %1251, %1257, %1260, %1266, %1269, %1275, %1278, %1284, %1287, %1293, %648, %643
  %662 = phi i64 [ %647, %643 ], [ %649, %648 ], [ %649, %653 ], [ %659, %658 ], [ %659, %1251 ], [ %1258, %1257 ], [ %1258, %1260 ], [ %1267, %1266 ], [ %1267, %1269 ], [ %1276, %1275 ], [ %1276, %1278 ], [ %1285, %1284 ], [ %1285, %1287 ], [ %1294, %1293 ], [ %1303, %1296 ]
  %663 = add i64 %662, %620
  %664 = icmp ult i64 %663, 128
  br i1 %664, label %674, label %665

665:                                              ; preds = %661
  %666 = and i64 %601, %578
  %667 = shl nuw nsw i64 %666, 1
  %668 = getelementptr inbounds i32, i32* %581, i64 %667
  %669 = load i32, i32* %668, align 4, !noalias !148
  %670 = getelementptr inbounds i32, i32* %581, i64 %607
  store i32 %669, i32* %670, align 4, !noalias !148
  %671 = or i64 %667, 1
  %672 = getelementptr inbounds i32, i32* %581, i64 %671
  %673 = load i32, i32* %672, align 4, !noalias !148
  br label %703

674:                                              ; preds = %661
  %675 = add i64 %663, %584
  %676 = getelementptr inbounds i8, i8* %3, i64 %675
  %677 = load i8, i8* %676, align 1, !alias.scope !149, !noalias !146
  %678 = add i64 %663, %609
  %679 = getelementptr inbounds i8, i8* %3, i64 %678
  %680 = load i8, i8* %679, align 1, !alias.scope !149, !noalias !146
  %681 = icmp ugt i8 %677, %680
  br i1 %681, label %682, label %687

682:                                              ; preds = %674
  %683 = getelementptr inbounds i32, i32* %581, i64 %607
  store i32 %608, i32* %683, align 4, !noalias !148
  %684 = and i64 %601, %578
  %685 = shl nuw nsw i64 %684, 1
  %686 = or i64 %685, 1
  br label %691

687:                                              ; preds = %674
  %688 = getelementptr inbounds i32, i32* %581, i64 %606
  store i32 %608, i32* %688, align 4, !noalias !148
  %689 = and i64 %601, %578
  %690 = shl nuw nsw i64 %689, 1
  br label %691

691:                                              ; preds = %687, %682
  %692 = phi i64 [ %686, %682 ], [ %690, %687 ]
  %693 = phi i64 [ %686, %682 ], [ %607, %687 ]
  %694 = phi i64 [ %606, %682 ], [ %690, %687 ]
  %695 = phi i64 [ %663, %682 ], [ %605, %687 ]
  %696 = phi i64 [ %604, %682 ], [ %663, %687 ]
  %697 = getelementptr inbounds i32, i32* %581, i64 %692
  %698 = load i32, i32* %697, align 4, !noalias !148
  %699 = add nsw i64 %603, -1
  %700 = zext i32 %698 to i64
  %701 = sub i64 %583, %700
  %702 = icmp eq i64 %701, 0
  br i1 %702, label %613, label %600

703:                                              ; preds = %665, %613
  %704 = phi i64 [ %606, %665 ], [ %615, %613 ]
  %705 = phi i32 [ %673, %665 ], [ %616, %613 ]
  %706 = getelementptr inbounds i32, i32* %581, i64 %704
  store i32 %705, i32* %706, align 4, !noalias !148
  %707 = add i64 %583, 1
  %708 = icmp ult i64 %707, %434
  br i1 %708, label %582, label %709

709:                                              ; preds = %703, %575
  %710 = add i64 %85, 1
  %711 = getelementptr inbounds i32, i32* %34, i64 %710
  %712 = bitcast i32* %711 to i8*
  %713 = shl nsw i64 %426, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %712, i8 0, i64 %713, i1 false)
  %714 = add i64 %426, %85
  br label %715

715:                                              ; preds = %709, %417, %407
  %716 = phi i64 [ %86, %407 ], [ %427, %709 ], [ %413, %417 ]
  %717 = phi i64 [ %85, %407 ], [ %714, %709 ], [ %85, %417 ]
  %718 = add i64 %717, 1
  %719 = add i64 %717, 4
  %720 = icmp ult i64 %719, %1
  br i1 %720, label %82, label %721

721:                                              ; preds = %715, %29, %45
  %722 = phi i1 [ false, %45 ], [ false, %29 ], [ %48, %715 ]
  %723 = phi i32* [ %34, %45 ], [ null, %29 ], [ %34, %715 ]
  %724 = phi i8* [ %33, %45 ], [ null, %29 ], [ %33, %715 ]
  %725 = phi i8* [ %39, %45 ], [ %30, %29 ], [ %39, %715 ]
  %726 = phi i8* [ %46, %45 ], [ null, %29 ], [ %118, %715 ]
  %727 = phi %struct.BackwardMatch* [ %47, %45 ], [ null, %29 ], [ %119, %715 ]
  %728 = load i64, i64* %12, align 8
  %729 = load i64, i64* %9, align 8
  %730 = bitcast i32* %8 to <4 x i32>*
  %731 = load <4 x i32>, <4 x i32>* %730, align 4
  %732 = load i64, i64* %11, align 8
  %733 = add i64 %1, 1
  %734 = icmp eq i64 %733, 0
  br i1 %734, label %735, label %738

735:                                              ; preds = %721
  %736 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 9
  %737 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %20, i64 0, i32 5
  store i64 %1, i64* %737, align 8
  br label %746

738:                                              ; preds = %721
  %739 = shl i64 %733, 4
  %740 = call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %739) #7
  %741 = bitcast i8* %740 to %struct.ZopfliNode*
  %742 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 9
  %743 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %20, i64 0, i32 5
  store i64 %1, i64* %743, align 8
  %744 = add i64 %1, 2
  %745 = icmp eq i64 %744, 0
  br i1 %745, label %755, label %746

746:                                              ; preds = %735, %738
  %747 = phi i64 [ 1, %735 ], [ %744, %738 ]
  %748 = phi i64* [ %737, %735 ], [ %743, %738 ]
  %749 = phi %struct.BrotliDistanceParams* [ %736, %735 ], [ %742, %738 ]
  %750 = phi %struct.ZopfliNode* [ null, %735 ], [ %741, %738 ]
  %751 = phi i8* [ null, %735 ], [ %740, %738 ]
  %752 = shl i64 %747, 2
  %753 = call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %752) #7
  %754 = bitcast i8* %753 to float*
  br label %755

755:                                              ; preds = %746, %738
  %756 = phi i64* [ %748, %746 ], [ %743, %738 ]
  %757 = phi %struct.BrotliDistanceParams* [ %749, %746 ], [ %742, %738 ]
  %758 = phi %struct.ZopfliNode* [ %750, %746 ], [ %741, %738 ]
  %759 = phi i8* [ %751, %746 ], [ %740, %738 ]
  %760 = phi float* [ %754, %746 ], [ null, %738 ]
  %761 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %20, i64 0, i32 3
  store float* %760, float** %761, align 8
  %762 = getelementptr inbounds %struct.BrotliDistanceParams, %struct.BrotliDistanceParams* %757, i64 0, i32 3
  %763 = load i32, i32* %762, align 4
  %764 = icmp eq i32 %763, 0
  br i1 %764, label %771, label %765

765:                                              ; preds = %755
  %766 = zext i32 %763 to i64
  %767 = shl nuw nsw i64 %766, 2
  %768 = call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %767) #7
  %769 = bitcast i8* %768 to float*
  %770 = load i32, i32* %762, align 4
  br label %771

771:                                              ; preds = %755, %765
  %772 = phi i32 [ %770, %765 ], [ 0, %755 ]
  %773 = phi float* [ %769, %765 ], [ null, %755 ]
  %774 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %20, i64 0, i32 1
  store float* %773, float** %774, align 8
  %775 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %20, i64 0, i32 2
  store i32 %772, i32* %775, align 8
  %776 = bitcast [256 x i32]* %14 to i8*
  %777 = bitcast [704 x i32]* %15 to i8*
  %778 = bitcast [544 x i32]* %16 to i8*
  %779 = bitcast [256 x float]* %17 to i8*
  %780 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %20, i64 0, i32 0, i64 0
  %781 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 0
  %782 = getelementptr inbounds [704 x i32], [704 x i32]* %15, i64 0, i64 0
  %783 = getelementptr inbounds [544 x i32], [544 x i32]* %16, i64 0, i64 0
  %784 = sub i64 %2, %729
  %785 = getelementptr inbounds [256 x float], [256 x float]* %17, i64 0, i64 0
  %786 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %20, i64 0, i32 4
  %787 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 1
  %788 = bitcast %struct.StartPosQueue* %19 to i8*
  %789 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 0, i32 0
  %790 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 0, i32 3, i32 0
  %791 = getelementptr inbounds %struct.StartPosQueue, %struct.StartPosQueue* %19, i64 0, i32 1
  %792 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %1, i32 2
  %793 = and i64 %733, 1
  %794 = icmp eq i64 %1, 0
  %795 = sub i64 %733, %793
  %796 = icmp eq i64 %793, 0
  %797 = bitcast i32* %8 to <4 x i32>*
  br label %798

798:                                              ; preds = %1086, %771
  %799 = phi i64 [ 0, %771 ], [ %1090, %1086 ]
  br i1 %734, label %823, label %800

800:                                              ; preds = %798
  br i1 %794, label %816, label %801

801:                                              ; preds = %800, %801
  %802 = phi i64 [ %813, %801 ], [ 0, %800 ]
  %803 = phi i64 [ %814, %801 ], [ %795, %800 ]
  %804 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %802, i32 0
  store i32 1, i32* %804, align 4
  %805 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %802, i32 1
  store i32 0, i32* %805, align 4
  %806 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %802, i32 2
  store i32 0, i32* %806, align 4
  %807 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %802, i32 3, i32 0
  store float 0x47DFF933C0000000, float* %807, align 4
  %808 = or i64 %802, 1
  %809 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %808, i32 0
  store i32 1, i32* %809, align 4
  %810 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %808, i32 1
  store i32 0, i32* %810, align 4
  %811 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %808, i32 2
  store i32 0, i32* %811, align 4
  %812 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %808, i32 3, i32 0
  store float 0x47DFF933C0000000, float* %812, align 4
  %813 = add nuw i64 %802, 2
  %814 = add i64 %803, -2
  %815 = icmp eq i64 %814, 0
  br i1 %815, label %816, label %801

816:                                              ; preds = %801, %800
  %817 = phi i64 [ 0, %800 ], [ %813, %801 ]
  br i1 %796, label %823, label %818

818:                                              ; preds = %816
  %819 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %817, i32 0
  store i32 1, i32* %819, align 4
  %820 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %817, i32 1
  store i32 0, i32* %820, align 4
  %821 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %817, i32 2
  store i32 0, i32* %821, align 4
  %822 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %817, i32 3, i32 0
  store float 0x47DFF933C0000000, float* %822, align 4
  br label %823

823:                                              ; preds = %818, %816, %798
  %824 = icmp eq i64 %799, 0
  br i1 %824, label %825, label %826

825:                                              ; preds = %823
  call fastcc void @ZopfliCostModelSetFromLiteralCosts(%struct.ZopfliCostModel* nonnull %20, i64 %2, i8* %3, i64 %4)
  br label %990

826:                                              ; preds = %823
  %827 = load i64, i64* %11, align 8
  %828 = sub i64 %827, %732
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %776) #7
  call void @llvm.lifetime.start.p0i8(i64 2816, i8* nonnull %777) #7
  call void @llvm.lifetime.start.p0i8(i64 2176, i8* nonnull %778) #7
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %779) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %779, i8 -1, i64 1024, i1 false) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %776, i8 0, i64 1024, i1 false) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %777, i8 0, i64 2816, i1 false) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %778, i8 0, i64 2176, i1 false) #7
  %829 = icmp eq i64 %828, 0
  br i1 %829, label %902, label %830

830:                                              ; preds = %826, %897
  %831 = phi i64 [ %899, %897 ], [ %784, %826 ]
  %832 = phi i64 [ %900, %897 ], [ 0, %826 ]
  %833 = getelementptr inbounds %struct.Command, %struct.Command* %10, i64 %832, i32 0
  %834 = load i32, i32* %833, align 4
  %835 = zext i32 %834 to i64
  %836 = getelementptr inbounds %struct.Command, %struct.Command* %10, i64 %832, i32 1
  %837 = load i32, i32* %836, align 4
  %838 = and i32 %837, 33554431
  %839 = zext i32 %838 to i64
  %840 = getelementptr inbounds %struct.Command, %struct.Command* %10, i64 %832, i32 4
  %841 = load i16, i16* %840, align 2
  %842 = getelementptr inbounds %struct.Command, %struct.Command* %10, i64 %832, i32 3
  %843 = load i16, i16* %842, align 4
  %844 = zext i16 %843 to i64
  %845 = getelementptr inbounds [704 x i32], [704 x i32]* %15, i64 0, i64 %844
  %846 = load i32, i32* %845, align 4
  %847 = add i32 %846, 1
  store i32 %847, i32* %845, align 4
  %848 = icmp ugt i16 %843, 127
  br i1 %848, label %849, label %855

849:                                              ; preds = %830
  %850 = and i16 %841, 1023
  %851 = zext i16 %850 to i64
  %852 = getelementptr inbounds [544 x i32], [544 x i32]* %16, i64 0, i64 %851
  %853 = load i32, i32* %852, align 4
  %854 = add i32 %853, 1
  store i32 %854, i32* %852, align 4
  br label %855

855:                                              ; preds = %849, %830
  %856 = icmp eq i32 %834, 0
  br i1 %856, label %897, label %857

857:                                              ; preds = %855
  %858 = and i64 %835, 1
  %859 = icmp eq i32 %834, 1
  br i1 %859, label %885, label %860

860:                                              ; preds = %857
  %861 = sub nsw i64 %835, %858
  br label %862

862:                                              ; preds = %862, %860
  %863 = phi i64 [ 0, %860 ], [ %882, %862 ]
  %864 = phi i64 [ %861, %860 ], [ %883, %862 ]
  %865 = add i64 %863, %831
  %866 = and i64 %865, %4
  %867 = getelementptr inbounds i8, i8* %3, i64 %866
  %868 = load i8, i8* %867, align 1
  %869 = zext i8 %868 to i64
  %870 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %869
  %871 = load i32, i32* %870, align 4
  %872 = add i32 %871, 1
  store i32 %872, i32* %870, align 4
  %873 = or i64 %863, 1
  %874 = add i64 %873, %831
  %875 = and i64 %874, %4
  %876 = getelementptr inbounds i8, i8* %3, i64 %875
  %877 = load i8, i8* %876, align 1
  %878 = zext i8 %877 to i64
  %879 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %878
  %880 = load i32, i32* %879, align 4
  %881 = add i32 %880, 1
  store i32 %881, i32* %879, align 4
  %882 = add nuw nsw i64 %863, 2
  %883 = add i64 %864, -2
  %884 = icmp eq i64 %883, 0
  br i1 %884, label %885, label %862

885:                                              ; preds = %862, %857
  %886 = phi i64 [ 0, %857 ], [ %882, %862 ]
  %887 = icmp eq i64 %858, 0
  br i1 %887, label %897, label %888

888:                                              ; preds = %885
  %889 = add i64 %886, %831
  %890 = and i64 %889, %4
  %891 = getelementptr inbounds i8, i8* %3, i64 %890
  %892 = load i8, i8* %891, align 1
  %893 = zext i8 %892 to i64
  %894 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %893
  %895 = load i32, i32* %894, align 4
  %896 = add i32 %895, 1
  store i32 %896, i32* %894, align 4
  br label %897

897:                                              ; preds = %888, %885, %855
  %898 = add i64 %831, %835
  %899 = add i64 %898, %839
  %900 = add nuw i64 %832, 1
  %901 = icmp eq i64 %900, %828
  br i1 %901, label %902, label %830

902:                                              ; preds = %897, %826
  call fastcc void @SetCost(i32* nonnull %781, i64 256, i32 1, float* nonnull %785) #7
  call fastcc void @SetCost(i32* nonnull %782, i64 704, i32 0, float* nonnull %780) #7
  %903 = load i32, i32* %775, align 8
  %904 = zext i32 %903 to i64
  %905 = load float*, float** %774, align 8
  call fastcc void @SetCost(i32* nonnull %783, i64 %904, i32 0, float* %905) #7
  br label %906

906:                                              ; preds = %906, %902
  %907 = phi i64 [ 0, %902 ], [ %928, %906 ]
  %908 = phi float [ 0x47DFF933C0000000, %902 ], [ %927, %906 ]
  %909 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %20, i64 0, i32 0, i64 %907
  %910 = load float, float* %909, align 8
  %911 = fcmp olt float %908, %910
  %912 = select i1 %911, float %908, float %910
  %913 = or i64 %907, 1
  %914 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %20, i64 0, i32 0, i64 %913
  %915 = load float, float* %914, align 4
  %916 = fcmp olt float %912, %915
  %917 = select i1 %916, float %912, float %915
  %918 = or i64 %907, 2
  %919 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %20, i64 0, i32 0, i64 %918
  %920 = load float, float* %919, align 8
  %921 = fcmp olt float %917, %920
  %922 = select i1 %921, float %917, float %920
  %923 = or i64 %907, 3
  %924 = getelementptr inbounds %struct.ZopfliCostModel, %struct.ZopfliCostModel* %20, i64 0, i32 0, i64 %923
  %925 = load float, float* %924, align 4
  %926 = fcmp olt float %922, %925
  %927 = select i1 %926, float %922, float %925
  %928 = add nuw nsw i64 %907, 4
  %929 = icmp eq i64 %928, 704
  br i1 %929, label %930, label %906

930:                                              ; preds = %906
  store float %927, float* %786, align 8
  %931 = load float*, float** %761, align 8
  %932 = load i64, i64* %756, align 8
  store float 0.000000e+00, float* %931, align 4
  %933 = icmp eq i64 %932, 0
  br i1 %933, label %989, label %934

934:                                              ; preds = %930
  %935 = and i64 %932, 1
  %936 = icmp eq i64 %932, 1
  br i1 %936, label %972, label %937

937:                                              ; preds = %934
  %938 = sub i64 %932, %935
  br label %939

939:                                              ; preds = %939, %937
  %940 = phi float [ 0.000000e+00, %937 ], [ %965, %939 ]
  %941 = phi float [ 0.000000e+00, %937 ], [ %969, %939 ]
  %942 = phi i64 [ 0, %937 ], [ %966, %939 ]
  %943 = phi i64 [ %938, %937 ], [ %970, %939 ]
  %944 = add i64 %942, %2
  %945 = and i64 %944, %4
  %946 = getelementptr inbounds i8, i8* %3, i64 %945
  %947 = load i8, i8* %946, align 1
  %948 = zext i8 %947 to i64
  %949 = getelementptr inbounds [256 x float], [256 x float]* %17, i64 0, i64 %948
  %950 = load float, float* %949, align 4
  %951 = fadd float %941, %950
  %952 = fadd float %940, %951
  %953 = or i64 %942, 1
  %954 = getelementptr inbounds float, float* %931, i64 %953
  store float %952, float* %954, align 4
  %955 = fsub float %952, %940
  %956 = fsub float %951, %955
  %957 = add i64 %953, %2
  %958 = and i64 %957, %4
  %959 = getelementptr inbounds i8, i8* %3, i64 %958
  %960 = load i8, i8* %959, align 1
  %961 = zext i8 %960 to i64
  %962 = getelementptr inbounds [256 x float], [256 x float]* %17, i64 0, i64 %961
  %963 = load float, float* %962, align 4
  %964 = fadd float %956, %963
  %965 = fadd float %952, %964
  %966 = add nuw i64 %942, 2
  %967 = getelementptr inbounds float, float* %931, i64 %966
  store float %965, float* %967, align 4
  %968 = fsub float %965, %952
  %969 = fsub float %964, %968
  %970 = add i64 %943, -2
  %971 = icmp eq i64 %970, 0
  br i1 %971, label %972, label %939

972:                                              ; preds = %939, %934
  %973 = phi float [ 0.000000e+00, %934 ], [ %965, %939 ]
  %974 = phi float [ 0.000000e+00, %934 ], [ %969, %939 ]
  %975 = phi i64 [ 0, %934 ], [ %966, %939 ]
  %976 = icmp eq i64 %935, 0
  br i1 %976, label %989, label %977

977:                                              ; preds = %972
  %978 = add i64 %975, %2
  %979 = and i64 %978, %4
  %980 = getelementptr inbounds i8, i8* %3, i64 %979
  %981 = load i8, i8* %980, align 1
  %982 = zext i8 %981 to i64
  %983 = getelementptr inbounds [256 x float], [256 x float]* %17, i64 0, i64 %982
  %984 = load float, float* %983, align 4
  %985 = fadd float %974, %984
  %986 = fadd float %973, %985
  %987 = add nuw i64 %975, 1
  %988 = getelementptr inbounds float, float* %931, i64 %987
  store float %986, float* %988, align 4
  br label %989

989:                                              ; preds = %977, %972, %930
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %779) #7
  call void @llvm.lifetime.end.p0i8(i64 2176, i8* nonnull %778) #7
  call void @llvm.lifetime.end.p0i8(i64 2816, i8* nonnull %777) #7
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %776) #7
  br label %990

990:                                              ; preds = %989, %825
  store i64 %732, i64* %11, align 8
  store i64 %728, i64* %12, align 8
  store i64 %729, i64* %9, align 8
  store <4 x i32> %731, <4 x i32>* %797, align 4
  %991 = load i64, i64* %21, align 8
  %992 = load i32, i32* %23, align 8
  %993 = zext i32 %992 to i64
  %994 = shl i64 1, %993
  %995 = add i64 %994, -16
  %996 = load i32, i32* %787, align 4
  %997 = icmp slt i32 %996, 11
  %998 = select i1 %997, i64 150, i64 325
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %788) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %788, i8* align 8 bitcast (%struct.StartPosQueue* @__const.ZopfliIterate.queue to i8*), i64 256, i1 false) #7
  store i32 0, i32* %789, align 4
  store float 0.000000e+00, float* %790, align 4
  store i64 0, i64* %791, align 8
  br i1 %722, label %999, label %1050

999:                                              ; preds = %990
  %1000 = add i64 %991, %2
  br label %1001

1001:                                             ; preds = %1044, %999
  %1002 = phi i64 [ 0, %999 ], [ %1047, %1044 ]
  %1003 = phi i64 [ 0, %999 ], [ %1045, %1044 ]
  %1004 = getelementptr inbounds i32, i32* %723, i64 %1002
  %1005 = load i32, i32* %1004, align 4
  %1006 = zext i32 %1005 to i64
  %1007 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %727, i64 %1003
  %1008 = call fastcc i64 @UpdateNodes(i64 %1, i64 %2, i64 %1002, i8* %3, i64 %4, %struct.BrotliEncoderParams* %6, i64 %995, i32* %8, i64 %1006, %struct.BackwardMatch* %1007, %struct.ZopfliCostModel* nonnull %20, %struct.StartPosQueue* nonnull %19, %struct.ZopfliNode* %758) #7
  %1009 = icmp ult i64 %1008, 16384
  %1010 = select i1 %1009, i64 0, i64 %1008
  %1011 = load i32, i32* %1004, align 4
  %1012 = zext i32 %1011 to i64
  %1013 = add i64 %1003, %1012
  %1014 = icmp eq i32 %1011, 1
  br i1 %1014, label %1015, label %1025

1015:                                             ; preds = %1001
  %1016 = add i64 %1013, -1
  %1017 = getelementptr inbounds %struct.BackwardMatch, %struct.BackwardMatch* %727, i64 %1016, i32 1
  %1018 = load i32, i32* %1017, align 4
  %1019 = lshr i32 %1018, 5
  %1020 = zext i32 %1019 to i64
  %1021 = icmp ult i64 %998, %1020
  br i1 %1021, label %1022, label %1025

1022:                                             ; preds = %1015
  %1023 = icmp ult i64 %1010, %1020
  %1024 = select i1 %1023, i64 %1020, i64 %1010
  br label %1025

1025:                                             ; preds = %1022, %1015, %1001
  %1026 = phi i64 [ %1024, %1022 ], [ %1010, %1015 ], [ %1010, %1001 ]
  %1027 = icmp ugt i64 %1026, 1
  br i1 %1027, label %1028, label %1044

1028:                                             ; preds = %1025
  %1029 = add i64 %1026, -1
  br label %1030

1030:                                             ; preds = %1037, %1028
  %1031 = phi i64 [ %1042, %1037 ], [ %1029, %1028 ]
  %1032 = phi i64 [ %1034, %1037 ], [ %1002, %1028 ]
  %1033 = phi i64 [ %1041, %1037 ], [ %1013, %1028 ]
  %1034 = add i64 %1032, 1
  %1035 = add i64 %1032, 4
  %1036 = icmp ult i64 %1035, %1
  br i1 %1036, label %1037, label %1044

1037:                                             ; preds = %1030
  call fastcc void @EvaluateNode(i64 %1000, i64 %1034, i64 %995, i32* %8, %struct.ZopfliCostModel* nonnull %20, %struct.StartPosQueue* nonnull %19, %struct.ZopfliNode* %758) #7
  %1038 = getelementptr inbounds i32, i32* %723, i64 %1034
  %1039 = load i32, i32* %1038, align 4
  %1040 = zext i32 %1039 to i64
  %1041 = add i64 %1033, %1040
  %1042 = add i64 %1031, -1
  %1043 = icmp eq i64 %1042, 0
  br i1 %1043, label %1044, label %1030

1044:                                             ; preds = %1037, %1030, %1025
  %1045 = phi i64 [ %1013, %1025 ], [ %1033, %1030 ], [ %1041, %1037 ]
  %1046 = phi i64 [ %1002, %1025 ], [ %1034, %1030 ], [ %1034, %1037 ]
  %1047 = add i64 %1046, 1
  %1048 = add i64 %1046, 4
  %1049 = icmp ult i64 %1048, %1
  br i1 %1049, label %1001, label %1050

1050:                                             ; preds = %1044, %990
  %1051 = load i32, i32* %792, align 4
  %1052 = and i32 %1051, 134217727
  %1053 = icmp eq i32 %1052, 0
  br i1 %1053, label %1054, label %1065

1054:                                             ; preds = %1050, %1059
  %1055 = phi i64 [ %1060, %1059 ], [ %1, %1050 ]
  %1056 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %1055, i32 0
  %1057 = load i32, i32* %1056, align 4
  %1058 = icmp eq i32 %1057, 1
  br i1 %1058, label %1059, label %1065

1059:                                             ; preds = %1054
  %1060 = add i64 %1055, -1
  %1061 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %1060, i32 2
  %1062 = load i32, i32* %1061, align 4
  %1063 = and i32 %1062, 134217727
  %1064 = icmp eq i32 %1063, 0
  br i1 %1064, label %1054, label %1065

1065:                                             ; preds = %1059, %1054, %1050
  %1066 = phi i64 [ %1, %1050 ], [ %1060, %1059 ], [ %1055, %1054 ]
  %1067 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %1066, i32 3
  %1068 = bitcast %union.anon* %1067 to i32*
  store i32 -1, i32* %1068, align 4
  %1069 = icmp eq i64 %1066, 0
  br i1 %1069, label %1086, label %1070

1070:                                             ; preds = %1065, %1070
  %1071 = phi i64 [ %1081, %1070 ], [ %1066, %1065 ]
  %1072 = phi i64 [ %1084, %1070 ], [ 0, %1065 ]
  %1073 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %1071, i32 0
  %1074 = load i32, i32* %1073, align 4
  %1075 = and i32 %1074, 33554431
  %1076 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %1071, i32 2
  %1077 = load i32, i32* %1076, align 4
  %1078 = and i32 %1077, 134217727
  %1079 = add nuw nsw i32 %1078, %1075
  %1080 = zext i32 %1079 to i64
  %1081 = sub i64 %1071, %1080
  %1082 = getelementptr inbounds %struct.ZopfliNode, %struct.ZopfliNode* %758, i64 %1081, i32 3
  %1083 = bitcast %union.anon* %1082 to i32*
  store i32 %1079, i32* %1083, align 4
  %1084 = add i64 %1072, 1
  %1085 = icmp eq i64 %1081, 0
  br i1 %1085, label %1086, label %1070

1086:                                             ; preds = %1070, %1065
  %1087 = phi i64 [ 0, %1065 ], [ %1084, %1070 ]
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %788) #7
  %1088 = load i64, i64* %11, align 8
  %1089 = add i64 %1088, %1087
  store i64 %1089, i64* %11, align 8
  call void @BrotliZopfliCreateCommands(i64 %1, i64 %2, %struct.ZopfliNode* %758, i32* %8, i64* %9, %struct.BrotliEncoderParams* %6, %struct.Command* %10, i64* %12)
  %1090 = add nuw nsw i64 %799, 1
  %1091 = icmp eq i64 %1090, 2
  br i1 %1091, label %1092, label %798

1092:                                             ; preds = %1086
  %1093 = bitcast float** %761 to i8**
  %1094 = load i8*, i8** %1093, align 8
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %1094) #7
  store float* null, float** %761, align 8
  %1095 = bitcast float** %774 to i8**
  %1096 = load i8*, i8** %1095, align 8
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %1096) #7
  store float* null, float** %774, align 8
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %759) #7
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %726) #7
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %724) #7
  call void @llvm.lifetime.end.p0i8(i64 2856, i8* nonnull %725) #7
  ret void

1097:                                             ; preds = %189
  %1098 = getelementptr inbounds i8, i8* %183, i64 1
  %1099 = getelementptr inbounds i8, i8* %151, i64 %190
  %1100 = load i8, i8* %1099, align 1, !alias.scope !88, !noalias !89
  %1101 = load i8, i8* %1098, align 1, !alias.scope !88, !noalias !89
  %1102 = icmp eq i8 %1100, %1101
  br i1 %1102, label %1103, label %191, !prof !11

1103:                                             ; preds = %1097
  %1104 = add i64 %182, 2
  br i1 %137, label %191, label %1105

1105:                                             ; preds = %1103
  %1106 = getelementptr inbounds i8, i8* %183, i64 2
  %1107 = getelementptr inbounds i8, i8* %151, i64 %1104
  %1108 = load i8, i8* %1107, align 1, !alias.scope !88, !noalias !89
  %1109 = load i8, i8* %1106, align 1, !alias.scope !88, !noalias !89
  %1110 = icmp eq i8 %1108, %1109
  br i1 %1110, label %1111, label %191, !prof !11

1111:                                             ; preds = %1105
  %1112 = add i64 %182, 3
  br i1 %138, label %191, label %1113

1113:                                             ; preds = %1111
  %1114 = getelementptr inbounds i8, i8* %183, i64 3
  %1115 = getelementptr inbounds i8, i8* %151, i64 %1112
  %1116 = load i8, i8* %1115, align 1, !alias.scope !88, !noalias !89
  %1117 = load i8, i8* %1114, align 1, !alias.scope !88, !noalias !89
  %1118 = icmp eq i8 %1116, %1117
  br i1 %1118, label %1119, label %191, !prof !11

1119:                                             ; preds = %1113
  %1120 = add i64 %182, 4
  br i1 %139, label %191, label %1121

1121:                                             ; preds = %1119
  %1122 = getelementptr inbounds i8, i8* %183, i64 4
  %1123 = getelementptr inbounds i8, i8* %151, i64 %1120
  %1124 = load i8, i8* %1123, align 1, !alias.scope !88, !noalias !89
  %1125 = load i8, i8* %1122, align 1, !alias.scope !88, !noalias !89
  %1126 = icmp eq i8 %1124, %1125
  br i1 %1126, label %1127, label %191, !prof !11

1127:                                             ; preds = %1121
  %1128 = add i64 %182, 5
  br i1 %140, label %191, label %1129

1129:                                             ; preds = %1127
  %1130 = getelementptr inbounds i8, i8* %183, i64 5
  %1131 = getelementptr inbounds i8, i8* %151, i64 %1128
  %1132 = load i8, i8* %1131, align 1, !alias.scope !88, !noalias !89
  %1133 = load i8, i8* %1130, align 1, !alias.scope !88, !noalias !89
  %1134 = icmp eq i8 %1132, %1133
  br i1 %1134, label %1135, label %191, !prof !11

1135:                                             ; preds = %1129
  %1136 = add i64 %182, 6
  br i1 %141, label %191, label %1137

1137:                                             ; preds = %1135
  %1138 = getelementptr inbounds i8, i8* %183, i64 6
  %1139 = getelementptr inbounds i8, i8* %151, i64 %1136
  %1140 = load i8, i8* %1139, align 1, !alias.scope !88, !noalias !89
  %1141 = load i8, i8* %1138, align 1, !alias.scope !88, !noalias !89
  %1142 = icmp eq i8 %1140, %1141
  %1143 = add i64 %182, 7
  %1144 = select i1 %1142, i64 %1143, i64 %1136, !prof !11
  br label %191

1145:                                             ; preds = %300
  %1146 = getelementptr inbounds i8, i8* %292, i64 1
  %1147 = getelementptr inbounds i8, i8* %264, i64 %301
  %1148 = load i8, i8* %1147, align 1, !alias.scope !106, !noalias !95
  %1149 = load i8, i8* %1146, align 1, !alias.scope !106, !noalias !95
  %1150 = icmp eq i8 %1148, %1149
  br i1 %1150, label %1151, label %303, !prof !11

1151:                                             ; preds = %1145
  %1152 = add i64 %291, 2
  %1153 = icmp eq i64 %293, 2
  br i1 %1153, label %303, label %1154

1154:                                             ; preds = %1151
  %1155 = getelementptr inbounds i8, i8* %292, i64 2
  %1156 = getelementptr inbounds i8, i8* %264, i64 %1152
  %1157 = load i8, i8* %1156, align 1, !alias.scope !106, !noalias !95
  %1158 = load i8, i8* %1155, align 1, !alias.scope !106, !noalias !95
  %1159 = icmp eq i8 %1157, %1158
  br i1 %1159, label %1160, label %303, !prof !11

1160:                                             ; preds = %1154
  %1161 = add i64 %291, 3
  %1162 = icmp eq i64 %293, 3
  br i1 %1162, label %303, label %1163

1163:                                             ; preds = %1160
  %1164 = getelementptr inbounds i8, i8* %292, i64 3
  %1165 = getelementptr inbounds i8, i8* %264, i64 %1161
  %1166 = load i8, i8* %1165, align 1, !alias.scope !106, !noalias !95
  %1167 = load i8, i8* %1164, align 1, !alias.scope !106, !noalias !95
  %1168 = icmp eq i8 %1166, %1167
  br i1 %1168, label %1169, label %303, !prof !11

1169:                                             ; preds = %1163
  %1170 = add i64 %291, 4
  %1171 = icmp eq i64 %293, 4
  br i1 %1171, label %303, label %1172

1172:                                             ; preds = %1169
  %1173 = getelementptr inbounds i8, i8* %292, i64 4
  %1174 = getelementptr inbounds i8, i8* %264, i64 %1170
  %1175 = load i8, i8* %1174, align 1, !alias.scope !106, !noalias !95
  %1176 = load i8, i8* %1173, align 1, !alias.scope !106, !noalias !95
  %1177 = icmp eq i8 %1175, %1176
  br i1 %1177, label %1178, label %303, !prof !11

1178:                                             ; preds = %1172
  %1179 = add i64 %291, 5
  %1180 = icmp eq i64 %293, 5
  br i1 %1180, label %303, label %1181

1181:                                             ; preds = %1178
  %1182 = getelementptr inbounds i8, i8* %292, i64 5
  %1183 = getelementptr inbounds i8, i8* %264, i64 %1179
  %1184 = load i8, i8* %1183, align 1, !alias.scope !106, !noalias !95
  %1185 = load i8, i8* %1182, align 1, !alias.scope !106, !noalias !95
  %1186 = icmp eq i8 %1184, %1185
  br i1 %1186, label %1187, label %303, !prof !11

1187:                                             ; preds = %1181
  %1188 = add i64 %291, 6
  %1189 = icmp eq i64 %293, 6
  br i1 %1189, label %303, label %1190

1190:                                             ; preds = %1187
  %1191 = getelementptr inbounds i8, i8* %292, i64 6
  %1192 = getelementptr inbounds i8, i8* %264, i64 %1188
  %1193 = load i8, i8* %1192, align 1, !alias.scope !106, !noalias !95
  %1194 = load i8, i8* %1191, align 1, !alias.scope !106, !noalias !95
  %1195 = icmp eq i8 %1193, %1194
  %1196 = add i64 %291, 7
  %1197 = select i1 %1195, i64 %1196, i64 %1188, !prof !11
  br label %303

1198:                                             ; preds = %524
  %1199 = getelementptr inbounds i8, i8* %516, i64 1
  %1200 = getelementptr inbounds i8, i8* %488, i64 %525
  %1201 = load i8, i8* %1200, align 1, !alias.scope !130, !noalias !127
  %1202 = load i8, i8* %1199, align 1, !alias.scope !130, !noalias !127
  %1203 = icmp eq i8 %1201, %1202
  br i1 %1203, label %1204, label %527, !prof !11

1204:                                             ; preds = %1198
  %1205 = add i64 %515, 2
  %1206 = icmp eq i64 %517, 2
  br i1 %1206, label %527, label %1207

1207:                                             ; preds = %1204
  %1208 = getelementptr inbounds i8, i8* %516, i64 2
  %1209 = getelementptr inbounds i8, i8* %488, i64 %1205
  %1210 = load i8, i8* %1209, align 1, !alias.scope !130, !noalias !127
  %1211 = load i8, i8* %1208, align 1, !alias.scope !130, !noalias !127
  %1212 = icmp eq i8 %1210, %1211
  br i1 %1212, label %1213, label %527, !prof !11

1213:                                             ; preds = %1207
  %1214 = add i64 %515, 3
  %1215 = icmp eq i64 %517, 3
  br i1 %1215, label %527, label %1216

1216:                                             ; preds = %1213
  %1217 = getelementptr inbounds i8, i8* %516, i64 3
  %1218 = getelementptr inbounds i8, i8* %488, i64 %1214
  %1219 = load i8, i8* %1218, align 1, !alias.scope !130, !noalias !127
  %1220 = load i8, i8* %1217, align 1, !alias.scope !130, !noalias !127
  %1221 = icmp eq i8 %1219, %1220
  br i1 %1221, label %1222, label %527, !prof !11

1222:                                             ; preds = %1216
  %1223 = add i64 %515, 4
  %1224 = icmp eq i64 %517, 4
  br i1 %1224, label %527, label %1225

1225:                                             ; preds = %1222
  %1226 = getelementptr inbounds i8, i8* %516, i64 4
  %1227 = getelementptr inbounds i8, i8* %488, i64 %1223
  %1228 = load i8, i8* %1227, align 1, !alias.scope !130, !noalias !127
  %1229 = load i8, i8* %1226, align 1, !alias.scope !130, !noalias !127
  %1230 = icmp eq i8 %1228, %1229
  br i1 %1230, label %1231, label %527, !prof !11

1231:                                             ; preds = %1225
  %1232 = add i64 %515, 5
  %1233 = icmp eq i64 %517, 5
  br i1 %1233, label %527, label %1234

1234:                                             ; preds = %1231
  %1235 = getelementptr inbounds i8, i8* %516, i64 5
  %1236 = getelementptr inbounds i8, i8* %488, i64 %1232
  %1237 = load i8, i8* %1236, align 1, !alias.scope !130, !noalias !127
  %1238 = load i8, i8* %1235, align 1, !alias.scope !130, !noalias !127
  %1239 = icmp eq i8 %1237, %1238
  br i1 %1239, label %1240, label %527, !prof !11

1240:                                             ; preds = %1234
  %1241 = add i64 %515, 6
  %1242 = icmp eq i64 %517, 6
  br i1 %1242, label %527, label %1243

1243:                                             ; preds = %1240
  %1244 = getelementptr inbounds i8, i8* %516, i64 6
  %1245 = getelementptr inbounds i8, i8* %488, i64 %1241
  %1246 = load i8, i8* %1245, align 1, !alias.scope !130, !noalias !127
  %1247 = load i8, i8* %1244, align 1, !alias.scope !130, !noalias !127
  %1248 = icmp eq i8 %1246, %1247
  %1249 = add i64 %515, 7
  %1250 = select i1 %1248, i64 %1249, i64 %1241, !prof !11
  br label %527

1251:                                             ; preds = %658
  %1252 = getelementptr inbounds i8, i8* %650, i64 1
  %1253 = getelementptr inbounds i8, i8* %622, i64 %659
  %1254 = load i8, i8* %1253, align 1, !alias.scope !149, !noalias !146
  %1255 = load i8, i8* %1252, align 1, !alias.scope !149, !noalias !146
  %1256 = icmp eq i8 %1254, %1255
  br i1 %1256, label %1257, label %661, !prof !11

1257:                                             ; preds = %1251
  %1258 = add i64 %649, 2
  %1259 = icmp eq i64 %651, 2
  br i1 %1259, label %661, label %1260

1260:                                             ; preds = %1257
  %1261 = getelementptr inbounds i8, i8* %650, i64 2
  %1262 = getelementptr inbounds i8, i8* %622, i64 %1258
  %1263 = load i8, i8* %1262, align 1, !alias.scope !149, !noalias !146
  %1264 = load i8, i8* %1261, align 1, !alias.scope !149, !noalias !146
  %1265 = icmp eq i8 %1263, %1264
  br i1 %1265, label %1266, label %661, !prof !11

1266:                                             ; preds = %1260
  %1267 = add i64 %649, 3
  %1268 = icmp eq i64 %651, 3
  br i1 %1268, label %661, label %1269

1269:                                             ; preds = %1266
  %1270 = getelementptr inbounds i8, i8* %650, i64 3
  %1271 = getelementptr inbounds i8, i8* %622, i64 %1267
  %1272 = load i8, i8* %1271, align 1, !alias.scope !149, !noalias !146
  %1273 = load i8, i8* %1270, align 1, !alias.scope !149, !noalias !146
  %1274 = icmp eq i8 %1272, %1273
  br i1 %1274, label %1275, label %661, !prof !11

1275:                                             ; preds = %1269
  %1276 = add i64 %649, 4
  %1277 = icmp eq i64 %651, 4
  br i1 %1277, label %661, label %1278

1278:                                             ; preds = %1275
  %1279 = getelementptr inbounds i8, i8* %650, i64 4
  %1280 = getelementptr inbounds i8, i8* %622, i64 %1276
  %1281 = load i8, i8* %1280, align 1, !alias.scope !149, !noalias !146
  %1282 = load i8, i8* %1279, align 1, !alias.scope !149, !noalias !146
  %1283 = icmp eq i8 %1281, %1282
  br i1 %1283, label %1284, label %661, !prof !11

1284:                                             ; preds = %1278
  %1285 = add i64 %649, 5
  %1286 = icmp eq i64 %651, 5
  br i1 %1286, label %661, label %1287

1287:                                             ; preds = %1284
  %1288 = getelementptr inbounds i8, i8* %650, i64 5
  %1289 = getelementptr inbounds i8, i8* %622, i64 %1285
  %1290 = load i8, i8* %1289, align 1, !alias.scope !149, !noalias !146
  %1291 = load i8, i8* %1288, align 1, !alias.scope !149, !noalias !146
  %1292 = icmp eq i8 %1290, %1291
  br i1 %1292, label %1293, label %661, !prof !11

1293:                                             ; preds = %1287
  %1294 = add i64 %649, 6
  %1295 = icmp eq i64 %651, 6
  br i1 %1295, label %661, label %1296

1296:                                             ; preds = %1293
  %1297 = getelementptr inbounds i8, i8* %650, i64 6
  %1298 = getelementptr inbounds i8, i8* %622, i64 %1294
  %1299 = load i8, i8* %1298, align 1, !alias.scope !149, !noalias !146
  %1300 = load i8, i8* %1297, align 1, !alias.scope !149, !noalias !146
  %1301 = icmp eq i8 %1299, %1300
  %1302 = add i64 %649, 7
  %1303 = select i1 %1301, i64 %1302, i64 %1294, !prof !11
  br label %661
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

declare hidden void @BrotliEstimateBitCostsForLiterals(i64, i64, i64, i8*, float*) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare double @log2(double) local_unnamed_addr #6

declare hidden i32 @BrotliFindAllStaticDictionaryMatches(%struct.BrotliEncoderDictionary*, i8*, i64, i64, i32*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.cttz.i64(i64, i1 immarg) #5

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @SetCost(i32* nocapture readonly, i64, i32, float* nocapture) unnamed_addr #2 {
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %87, label %6

6:                                                ; preds = %4
  %7 = icmp ult i64 %1, 4
  br i1 %7, label %72, label %8

8:                                                ; preds = %6
  %9 = and i64 %1, -4
  %10 = add i64 %9, -4
  %11 = lshr exact i64 %10, 2
  %12 = add nuw nsw i64 %11, 1
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %10, 0
  br i1 %14, label %46, label %15

15:                                               ; preds = %8
  %16 = sub nuw nsw i64 %12, %13
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i64 [ 0, %15 ], [ %43, %17 ]
  %19 = phi <2 x i64> [ zeroinitializer, %15 ], [ %41, %17 ]
  %20 = phi <2 x i64> [ zeroinitializer, %15 ], [ %42, %17 ]
  %21 = phi i64 [ %16, %15 ], [ %44, %17 ]
  %22 = getelementptr inbounds i32, i32* %0, i64 %18
  %23 = bitcast i32* %22 to <2 x i32>*
  %24 = load <2 x i32>, <2 x i32>* %23, align 4
  %25 = getelementptr inbounds i32, i32* %22, i64 2
  %26 = bitcast i32* %25 to <2 x i32>*
  %27 = load <2 x i32>, <2 x i32>* %26, align 4
  %28 = zext <2 x i32> %24 to <2 x i64>
  %29 = zext <2 x i32> %27 to <2 x i64>
  %30 = add <2 x i64> %19, %28
  %31 = add <2 x i64> %20, %29
  %32 = or i64 %18, 4
  %33 = getelementptr inbounds i32, i32* %0, i64 %32
  %34 = bitcast i32* %33 to <2 x i32>*
  %35 = load <2 x i32>, <2 x i32>* %34, align 4
  %36 = getelementptr inbounds i32, i32* %33, i64 2
  %37 = bitcast i32* %36 to <2 x i32>*
  %38 = load <2 x i32>, <2 x i32>* %37, align 4
  %39 = zext <2 x i32> %35 to <2 x i64>
  %40 = zext <2 x i32> %38 to <2 x i64>
  %41 = add <2 x i64> %30, %39
  %42 = add <2 x i64> %31, %40
  %43 = add i64 %18, 8
  %44 = add i64 %21, -2
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %17, !llvm.loop !150

46:                                               ; preds = %17, %8
  %47 = phi <2 x i64> [ undef, %8 ], [ %41, %17 ]
  %48 = phi <2 x i64> [ undef, %8 ], [ %42, %17 ]
  %49 = phi i64 [ 0, %8 ], [ %43, %17 ]
  %50 = phi <2 x i64> [ zeroinitializer, %8 ], [ %41, %17 ]
  %51 = phi <2 x i64> [ zeroinitializer, %8 ], [ %42, %17 ]
  %52 = icmp eq i64 %13, 0
  br i1 %52, label %64, label %53

53:                                               ; preds = %46
  %54 = getelementptr inbounds i32, i32* %0, i64 %49
  %55 = getelementptr inbounds i32, i32* %54, i64 2
  %56 = bitcast i32* %55 to <2 x i32>*
  %57 = load <2 x i32>, <2 x i32>* %56, align 4
  %58 = zext <2 x i32> %57 to <2 x i64>
  %59 = add <2 x i64> %51, %58
  %60 = bitcast i32* %54 to <2 x i32>*
  %61 = load <2 x i32>, <2 x i32>* %60, align 4
  %62 = zext <2 x i32> %61 to <2 x i64>
  %63 = add <2 x i64> %50, %62
  br label %64

64:                                               ; preds = %46, %53
  %65 = phi <2 x i64> [ %47, %46 ], [ %63, %53 ]
  %66 = phi <2 x i64> [ %48, %46 ], [ %59, %53 ]
  %67 = add <2 x i64> %66, %65
  %68 = shufflevector <2 x i64> %67, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %69 = add <2 x i64> %67, %68
  %70 = extractelement <2 x i64> %69, i32 0
  %71 = icmp eq i64 %9, %1
  br i1 %71, label %84, label %72

72:                                               ; preds = %64, %6
  %73 = phi i64 [ 0, %6 ], [ %9, %64 ]
  %74 = phi i64 [ 0, %6 ], [ %70, %64 ]
  br label %75

75:                                               ; preds = %72, %75
  %76 = phi i64 [ %82, %75 ], [ %73, %72 ]
  %77 = phi i64 [ %81, %75 ], [ %74, %72 ]
  %78 = getelementptr inbounds i32, i32* %0, i64 %76
  %79 = load i32, i32* %78, align 4
  %80 = zext i32 %79 to i64
  %81 = add i64 %77, %80
  %82 = add nuw i64 %76, 1
  %83 = icmp eq i64 %82, %1
  br i1 %83, label %84, label %75, !llvm.loop !151

84:                                               ; preds = %75, %64
  %85 = phi i64 [ %70, %64 ], [ %81, %75 ]
  %86 = icmp ult i64 %85, 256
  br i1 %86, label %87, label %91

87:                                               ; preds = %4, %84
  %88 = phi i64 [ %85, %84 ], [ 0, %4 ]
  %89 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %88
  %90 = load double, double* %89, align 8
  br label %94

91:                                               ; preds = %84
  %92 = uitofp i64 %85 to double
  %93 = tail call double @log2(double %92) #7
  br label %94

94:                                               ; preds = %87, %91
  %95 = phi i64 [ %88, %87 ], [ %85, %91 ]
  %96 = phi double [ %90, %87 ], [ %93, %91 ]
  %97 = fptrunc double %96 to float
  %98 = icmp eq i32 %2, 0
  %99 = icmp ne i64 %1, 0
  %100 = and i1 %98, %99
  br i1 %100, label %101, label %154

101:                                              ; preds = %94
  %102 = add i64 %1, -1
  %103 = and i64 %1, 3
  %104 = icmp ult i64 %102, 3
  br i1 %104, label %137, label %105

105:                                              ; preds = %101
  %106 = sub i64 %1, %103
  br label %107

107:                                              ; preds = %107, %105
  %108 = phi i64 [ 0, %105 ], [ %134, %107 ]
  %109 = phi i64 [ %95, %105 ], [ %133, %107 ]
  %110 = phi i64 [ %106, %105 ], [ %135, %107 ]
  %111 = getelementptr inbounds i32, i32* %0, i64 %108
  %112 = load i32, i32* %111, align 4
  %113 = icmp eq i32 %112, 0
  %114 = zext i1 %113 to i64
  %115 = add i64 %109, %114
  %116 = or i64 %108, 1
  %117 = getelementptr inbounds i32, i32* %0, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = icmp eq i32 %118, 0
  %120 = zext i1 %119 to i64
  %121 = add i64 %115, %120
  %122 = or i64 %108, 2
  %123 = getelementptr inbounds i32, i32* %0, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, 0
  %126 = zext i1 %125 to i64
  %127 = add i64 %121, %126
  %128 = or i64 %108, 3
  %129 = getelementptr inbounds i32, i32* %0, i64 %128
  %130 = load i32, i32* %129, align 4
  %131 = icmp eq i32 %130, 0
  %132 = zext i1 %131 to i64
  %133 = add i64 %127, %132
  %134 = add nuw i64 %108, 4
  %135 = add i64 %110, -4
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %107

137:                                              ; preds = %107, %101
  %138 = phi i64 [ undef, %101 ], [ %133, %107 ]
  %139 = phi i64 [ 0, %101 ], [ %134, %107 ]
  %140 = phi i64 [ %95, %101 ], [ %133, %107 ]
  %141 = icmp eq i64 %103, 0
  br i1 %141, label %154, label %142

142:                                              ; preds = %137, %142
  %143 = phi i64 [ %151, %142 ], [ %139, %137 ]
  %144 = phi i64 [ %150, %142 ], [ %140, %137 ]
  %145 = phi i64 [ %152, %142 ], [ %103, %137 ]
  %146 = getelementptr inbounds i32, i32* %0, i64 %143
  %147 = load i32, i32* %146, align 4
  %148 = icmp eq i32 %147, 0
  %149 = zext i1 %148 to i64
  %150 = add i64 %144, %149
  %151 = add nuw i64 %143, 1
  %152 = add i64 %145, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %142, !llvm.loop !153

154:                                              ; preds = %137, %142, %94
  %155 = phi i64 [ %95, %94 ], [ %138, %137 ], [ %150, %142 ]
  %156 = icmp ult i64 %155, 256
  br i1 %156, label %157, label %160

157:                                              ; preds = %154
  %158 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %155
  %159 = load double, double* %158, align 8
  br label %163

160:                                              ; preds = %154
  %161 = uitofp i64 %155 to double
  %162 = tail call double @log2(double %161) #7
  br label %163

163:                                              ; preds = %157, %160
  %164 = phi double [ %159, %157 ], [ %162, %160 ]
  %165 = fptrunc double %164 to float
  %166 = fadd float %165, 2.000000e+00
  br i1 %5, label %193, label %167

167:                                              ; preds = %163, %190
  %168 = phi i64 [ %191, %190 ], [ 0, %163 ]
  %169 = getelementptr inbounds i32, i32* %0, i64 %168
  %170 = load i32, i32* %169, align 4
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %174

172:                                              ; preds = %167
  %173 = getelementptr inbounds float, float* %3, i64 %168
  store float %166, float* %173, align 4
  br label %190

174:                                              ; preds = %167
  %175 = icmp ult i32 %170, 256
  br i1 %175, label %176, label %180

176:                                              ; preds = %174
  %177 = zext i32 %170 to i64
  %178 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %177
  %179 = load double, double* %178, align 8
  br label %183

180:                                              ; preds = %174
  %181 = uitofp i32 %170 to double
  %182 = tail call double @log2(double %181) #7
  br label %183

183:                                              ; preds = %176, %180
  %184 = phi double [ %179, %176 ], [ %182, %180 ]
  %185 = fptrunc double %184 to float
  %186 = fsub float %97, %185
  %187 = getelementptr inbounds float, float* %3, i64 %168
  store float %186, float* %187, align 4
  %188 = fcmp olt float %186, 1.000000e+00
  br i1 %188, label %189, label %190

189:                                              ; preds = %183
  store float 1.000000e+00, float* %187, align 4
  br label %190

190:                                              ; preds = %183, %189, %172
  %191 = add nuw i64 %168, 1
  %192 = icmp eq i64 %191, %1
  br i1 %192, label %193, label %167

193:                                              ; preds = %190, %163
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{!4, !6}
!4 = distinct !{!4, !5, !"FindAllMatchesH10: argument 0"}
!5 = distinct !{!5, !"FindAllMatchesH10"}
!6 = distinct !{!6, !5, !"FindAllMatchesH10: argument 1"}
!7 = !{!"branch_weights", i32 1, i32 2000}
!8 = !{!6}
!9 = !{!4}
!10 = !{i64 0, i64 65}
!11 = !{!"branch_weights", i32 2000, i32 1}
!12 = !{!13, !15, !6}
!13 = distinct !{!13, !14, !"HashBytesH10: argument 0"}
!14 = distinct !{!14, !"HashBytesH10"}
!15 = distinct !{!15, !16, !"StoreAndFindMatchesH10: argument 1"}
!16 = distinct !{!16, !"StoreAndFindMatchesH10"}
!17 = !{!18, !19, !20, !4}
!18 = distinct !{!18, !16, !"StoreAndFindMatchesH10: argument 0"}
!19 = distinct !{!19, !16, !"StoreAndFindMatchesH10: argument 2"}
!20 = distinct !{!20, !16, !"StoreAndFindMatchesH10: argument 3"}
!21 = !{!18, !4}
!22 = !{!15, !19, !20, !6}
!23 = !{!18, !15, !19, !20, !4}
!24 = !{!25, !18, !4}
!25 = distinct !{!25, !26, !"LeftChildIndexH10: argument 0"}
!26 = distinct !{!26, !"LeftChildIndexH10"}
!27 = !{!18, !15, !19, !4}
!28 = !{!15, !6}
!29 = !{!20}
!30 = !{!18, !15, !19, !4, !6}
!31 = !{!32, !34}
!32 = distinct !{!32, !33, !"StoreH10: argument 0"}
!33 = distinct !{!33, !"StoreH10"}
!34 = distinct !{!34, !35, !"StoreRangeH10: argument 0"}
!35 = distinct !{!35, !"StoreRangeH10"}
!36 = !{!37, !38}
!37 = distinct !{!37, !33, !"StoreH10: argument 1"}
!38 = distinct !{!38, !35, !"StoreRangeH10: argument 1"}
!39 = !{!40, !32, !34}
!40 = distinct !{!40, !41, !"StoreAndFindMatchesH10: argument 0"}
!41 = distinct !{!41, !"StoreAndFindMatchesH10"}
!42 = !{!43, !44, !45, !37, !38}
!43 = distinct !{!43, !41, !"StoreAndFindMatchesH10: argument 1"}
!44 = distinct !{!44, !41, !"StoreAndFindMatchesH10: argument 2"}
!45 = distinct !{!45, !41, !"StoreAndFindMatchesH10: argument 3"}
!46 = !{!47, !43, !37, !38}
!47 = distinct !{!47, !48, !"HashBytesH10: argument 0"}
!48 = distinct !{!48, !"HashBytesH10"}
!49 = !{!40, !44, !45, !32, !34}
!50 = !{!40, !43, !44, !45, !32, !37, !34, !38}
!51 = !{!40, !43, !44, !32, !37, !34, !38}
!52 = !{!43, !37, !38}
!53 = !{!54, !34}
!54 = distinct !{!54, !55, !"StoreH10: argument 0"}
!55 = distinct !{!55, !"StoreH10"}
!56 = !{!57, !38}
!57 = distinct !{!57, !55, !"StoreH10: argument 1"}
!58 = !{!59, !54, !34}
!59 = distinct !{!59, !60, !"StoreAndFindMatchesH10: argument 0"}
!60 = distinct !{!60, !"StoreAndFindMatchesH10"}
!61 = !{!62, !63, !64, !57, !38}
!62 = distinct !{!62, !60, !"StoreAndFindMatchesH10: argument 1"}
!63 = distinct !{!63, !60, !"StoreAndFindMatchesH10: argument 2"}
!64 = distinct !{!64, !60, !"StoreAndFindMatchesH10: argument 3"}
!65 = !{!66, !62, !57, !38}
!66 = distinct !{!66, !67, !"HashBytesH10: argument 0"}
!67 = distinct !{!67, !"HashBytesH10"}
!68 = !{!59, !63, !64, !54, !34}
!69 = !{!59, !62, !63, !64, !54, !57, !34, !38}
!70 = !{!59, !62, !63, !54, !57, !34, !38}
!71 = !{!62, !57, !38}
!72 = !{!"branch_weights", i32 2000, i32 6004}
!73 = distinct !{!73, !74}
!74 = !{!"llvm.loop.unroll.disable"}
!75 = !{!76}
!76 = distinct !{!76, !77}
!77 = distinct !{!77, !"LVerDomain"}
!78 = !{!79}
!79 = distinct !{!79, !77}
!80 = distinct !{!80, !81}
!81 = !{!"llvm.loop.isvectorized", i32 1}
!82 = distinct !{!82, !74}
!83 = distinct !{!83, !81}
!84 = !{!85, !87}
!85 = distinct !{!85, !86, !"FindAllMatchesH10: argument 0"}
!86 = distinct !{!86, !"FindAllMatchesH10"}
!87 = distinct !{!87, !86, !"FindAllMatchesH10: argument 1"}
!88 = !{!87}
!89 = !{!85}
!90 = !{!91, !93, !87}
!91 = distinct !{!91, !92, !"HashBytesH10: argument 0"}
!92 = distinct !{!92, !"HashBytesH10"}
!93 = distinct !{!93, !94, !"StoreAndFindMatchesH10: argument 1"}
!94 = distinct !{!94, !"StoreAndFindMatchesH10"}
!95 = !{!96, !97, !98, !85}
!96 = distinct !{!96, !94, !"StoreAndFindMatchesH10: argument 0"}
!97 = distinct !{!97, !94, !"StoreAndFindMatchesH10: argument 2"}
!98 = distinct !{!98, !94, !"StoreAndFindMatchesH10: argument 3"}
!99 = !{!96, !85}
!100 = !{!93, !97, !98, !87}
!101 = !{!96, !93, !97, !98, !85}
!102 = !{!103, !96, !85}
!103 = distinct !{!103, !104, !"LeftChildIndexH10: argument 0"}
!104 = distinct !{!104, !"LeftChildIndexH10"}
!105 = !{!96, !93, !97, !85}
!106 = !{!93, !87}
!107 = !{!98}
!108 = !{!96, !93, !97, !85, !87}
!109 = !{!110, !112}
!110 = distinct !{!110, !111, !"StoreH10: argument 0"}
!111 = distinct !{!111, !"StoreH10"}
!112 = distinct !{!112, !113, !"StoreRangeH10: argument 0"}
!113 = distinct !{!113, !"StoreRangeH10"}
!114 = !{!115, !116}
!115 = distinct !{!115, !111, !"StoreH10: argument 1"}
!116 = distinct !{!116, !113, !"StoreRangeH10: argument 1"}
!117 = !{!118, !110, !112}
!118 = distinct !{!118, !119, !"StoreAndFindMatchesH10: argument 0"}
!119 = distinct !{!119, !"StoreAndFindMatchesH10"}
!120 = !{!121, !122, !123, !115, !116}
!121 = distinct !{!121, !119, !"StoreAndFindMatchesH10: argument 1"}
!122 = distinct !{!122, !119, !"StoreAndFindMatchesH10: argument 2"}
!123 = distinct !{!123, !119, !"StoreAndFindMatchesH10: argument 3"}
!124 = !{!125, !121, !115, !116}
!125 = distinct !{!125, !126, !"HashBytesH10: argument 0"}
!126 = distinct !{!126, !"HashBytesH10"}
!127 = !{!118, !122, !123, !110, !112}
!128 = !{!118, !121, !122, !123, !110, !115, !112, !116}
!129 = !{!118, !121, !122, !110, !115, !112, !116}
!130 = !{!121, !115, !116}
!131 = !{!132, !112}
!132 = distinct !{!132, !133, !"StoreH10: argument 0"}
!133 = distinct !{!133, !"StoreH10"}
!134 = !{!135, !116}
!135 = distinct !{!135, !133, !"StoreH10: argument 1"}
!136 = !{!137, !132, !112}
!137 = distinct !{!137, !138, !"StoreAndFindMatchesH10: argument 0"}
!138 = distinct !{!138, !"StoreAndFindMatchesH10"}
!139 = !{!140, !141, !142, !135, !116}
!140 = distinct !{!140, !138, !"StoreAndFindMatchesH10: argument 1"}
!141 = distinct !{!141, !138, !"StoreAndFindMatchesH10: argument 2"}
!142 = distinct !{!142, !138, !"StoreAndFindMatchesH10: argument 3"}
!143 = !{!144, !140, !135, !116}
!144 = distinct !{!144, !145, !"HashBytesH10: argument 0"}
!145 = distinct !{!145, !"HashBytesH10"}
!146 = !{!137, !141, !142, !132, !112}
!147 = !{!137, !140, !141, !142, !132, !135, !112, !116}
!148 = !{!137, !140, !141, !132, !135, !112, !116}
!149 = !{!140, !135, !116}
!150 = distinct !{!150, !81}
!151 = distinct !{!151, !152, !81}
!152 = !{!"llvm.loop.unroll.runtime.disable"}
!153 = distinct !{!153, !74}
