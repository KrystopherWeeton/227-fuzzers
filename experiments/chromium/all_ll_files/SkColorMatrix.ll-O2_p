; ModuleID = '../../third_party/skia/src/effects/SkColorMatrix.cpp'
source_filename = "../../third_party/skia/src/effects/SkColorMatrix.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.SkColorMatrix = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [20 x float] }

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN13SkColorMatrix11setIdentityEv(%class.SkColorMatrix*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 6
  %3 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 12
  %4 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 18
  %5 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 1
  %6 = bitcast float* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 76, i1 false)
  store float 1.000000e+00, float* %4, align 4
  store float 1.000000e+00, float* %3, align 4
  store float 1.000000e+00, float* %2, align 4
  %7 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 0
  store float 1.000000e+00, float* %7, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN13SkColorMatrix8setScaleEffff(%class.SkColorMatrix*, float, float, float, float) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 6
  %7 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 12
  %8 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 18
  %9 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 0
  %10 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 1
  %11 = bitcast float* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 76, i1 false)
  store float %1, float* %9, align 4
  store float %2, float* %6, align 4
  store float %3, float* %7, align 4
  store float %4, float* %8, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13SkColorMatrix13postTranslateEffff(%class.SkColorMatrix* nocapture, float, float, float, float) local_unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 4
  %7 = load float, float* %6, align 4
  %8 = fadd float %7, %1
  store float %8, float* %6, align 4
  %9 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 9
  %10 = load float, float* %9, align 4
  %11 = fadd float %10, %2
  store float %11, float* %9, align 4
  %12 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 14
  %13 = load float, float* %12, align 4
  %14 = fadd float %13, %3
  store float %14, float* %12, align 4
  %15 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 19
  %16 = load float, float* %15, align 4
  %17 = fadd float %16, %4
  store float %17, float* %15, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkColorMatrix9setConcatERKS_S1_(%class.SkColorMatrix*, %class.SkColorMatrix* readonly dereferenceable(80), %class.SkColorMatrix* readonly dereferenceable(80)) local_unnamed_addr #3 align 2 {
  %4 = alloca [20 x float], align 16
  %5 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 0
  %6 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 0
  %7 = bitcast [20 x float]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -1, i64 80, i1 false) #4
  %8 = icmp eq %class.SkColorMatrix* %1, %0
  %9 = icmp eq %class.SkColorMatrix* %2, %0
  %10 = or i1 %8, %9
  %11 = getelementptr inbounds [20 x float], [20 x float]* %4, i64 0, i64 0
  %12 = select i1 %10, float* %11, float* %5
  %13 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 4
  %14 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 9
  %15 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 14
  %16 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 19
  %17 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 5
  %18 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 10
  %19 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 15
  %20 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 1
  %21 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 6
  %22 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 11
  %23 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 16
  %24 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 2
  %25 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 7
  %26 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 12
  %27 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 17
  %28 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 3
  %29 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 8
  %30 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 13
  %31 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %2, i64 0, i32 0, i32 0, i64 18
  br label %32

32:                                               ; preds = %32, %3
  %33 = phi i64 [ 0, %3 ], [ %128, %32 ]
  %34 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %1, i64 0, i32 0, i32 0, i64 %33
  %35 = load float, float* %34, align 4
  %36 = add nuw nsw i64 %33, 1
  %37 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %1, i64 0, i32 0, i32 0, i64 %36
  %38 = add nuw nsw i64 %33, 2
  %39 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %1, i64 0, i32 0, i32 0, i64 %38
  %40 = add nuw nsw i64 %33, 3
  %41 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %1, i64 0, i32 0, i32 0, i64 %40
  %42 = load float, float* %6, align 4
  %43 = fmul float %35, %42
  %44 = load float, float* %37, align 4
  %45 = load float, float* %17, align 4
  %46 = fmul float %44, %45
  %47 = fadd float %43, %46
  %48 = load float, float* %39, align 4
  %49 = load float, float* %18, align 4
  %50 = fmul float %48, %49
  %51 = fadd float %47, %50
  %52 = load float, float* %41, align 4
  %53 = load float, float* %19, align 4
  %54 = fmul float %52, %53
  %55 = fadd float %51, %54
  %56 = getelementptr inbounds float, float* %12, i64 %33
  store float %55, float* %56, align 4
  %57 = load float, float* %34, align 4
  %58 = load float, float* %20, align 4
  %59 = fmul float %57, %58
  %60 = load float, float* %37, align 4
  %61 = load float, float* %21, align 4
  %62 = fmul float %60, %61
  %63 = fadd float %59, %62
  %64 = load float, float* %39, align 4
  %65 = load float, float* %22, align 4
  %66 = fmul float %64, %65
  %67 = fadd float %63, %66
  %68 = load float, float* %41, align 4
  %69 = load float, float* %23, align 4
  %70 = fmul float %68, %69
  %71 = fadd float %67, %70
  %72 = getelementptr inbounds float, float* %12, i64 %36
  store float %71, float* %72, align 4
  %73 = load float, float* %34, align 4
  %74 = load float, float* %24, align 4
  %75 = fmul float %73, %74
  %76 = load float, float* %37, align 4
  %77 = load float, float* %25, align 4
  %78 = fmul float %76, %77
  %79 = fadd float %75, %78
  %80 = load float, float* %39, align 4
  %81 = load float, float* %26, align 4
  %82 = fmul float %80, %81
  %83 = fadd float %79, %82
  %84 = load float, float* %41, align 4
  %85 = load float, float* %27, align 4
  %86 = fmul float %84, %85
  %87 = fadd float %83, %86
  %88 = getelementptr inbounds float, float* %12, i64 %38
  store float %87, float* %88, align 4
  %89 = load float, float* %34, align 4
  %90 = load float, float* %28, align 4
  %91 = fmul float %89, %90
  %92 = load float, float* %37, align 4
  %93 = load float, float* %29, align 4
  %94 = fmul float %92, %93
  %95 = fadd float %91, %94
  %96 = load float, float* %39, align 4
  %97 = load float, float* %30, align 4
  %98 = fmul float %96, %97
  %99 = fadd float %95, %98
  %100 = load float, float* %41, align 4
  %101 = load float, float* %31, align 4
  %102 = fmul float %100, %101
  %103 = fadd float %99, %102
  %104 = getelementptr inbounds float, float* %12, i64 %40
  store float %103, float* %104, align 4
  %105 = load float, float* %34, align 4
  %106 = load float, float* %13, align 4
  %107 = fmul float %105, %106
  %108 = load float, float* %37, align 4
  %109 = load float, float* %14, align 4
  %110 = fmul float %108, %109
  %111 = fadd float %107, %110
  %112 = load float, float* %39, align 4
  %113 = load float, float* %15, align 4
  %114 = fmul float %112, %113
  %115 = fadd float %111, %114
  %116 = load float, float* %41, align 4
  %117 = load float, float* %16, align 4
  %118 = fmul float %116, %117
  %119 = fadd float %115, %118
  %120 = add nuw nsw i64 %33, 4
  %121 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %1, i64 0, i32 0, i32 0, i64 %120
  %122 = load float, float* %121, align 4
  %123 = fadd float %122, %119
  %124 = shl i64 %33, 32
  %125 = add nuw nsw i64 %124, 17179869184
  %126 = ashr exact i64 %125, 32
  %127 = getelementptr inbounds float, float* %12, i64 %126
  store float %123, float* %127, align 4
  %128 = add nuw nsw i64 %33, 5
  %129 = icmp ult i64 %128, 20
  br i1 %129, label %32, label %130

130:                                              ; preds = %32
  %131 = icmp eq float* %12, %5
  br i1 %131, label %135, label %132

132:                                              ; preds = %130
  %133 = bitcast %class.SkColorMatrix* %0 to i8*
  %134 = bitcast float* %12 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %133, i8* align 4 %134, i64 80, i1 false) #4
  br label %135

135:                                              ; preds = %130, %132
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %7) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN13SkColorMatrix13setSaturationEf(%class.SkColorMatrix*, float) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 1
  %4 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 2
  %5 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 5
  %6 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 6
  %7 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 7
  %8 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 10
  %9 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 11
  %10 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 12
  %11 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 18
  %12 = fsub float 1.000000e+00, %1
  %13 = fmul float %12, 0x3FCB439580000000
  %14 = fmul float %12, 0x3FE6E147A0000000
  %15 = fmul float %12, 0x3FB26E9780000000
  %16 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 0
  %17 = fadd float %13, %1
  %18 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %0, i64 0, i32 0, i32 0, i64 3
  %19 = bitcast float* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 68, i1 false)
  store float %17, float* %16, align 4
  store float %14, float* %3, align 4
  store float %15, float* %4, align 4
  %20 = fadd float %14, %1
  store float %13, float* %5, align 4
  store float %20, float* %6, align 4
  store float %15, float* %7, align 4
  %21 = fadd float %15, %1
  store float %13, float* %8, align 4
  store float %14, float* %9, align 4
  store float %21, float* %10, align 4
  store float 1.000000e+00, float* %11, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
