; ModuleID = '../../third_party/angle/src/compiler/translator/tree_util/DriverUniform.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_util/DriverUniform.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::array.39" = type { [8 x i8*] }
%"class.sh::ImmutableString" = type { i8*, i64 }
%"struct.std::__1::array.41" = type { [4 x i8*] }
%"struct.sh::StaticType::Helpers::StaticMangledName" = type { [4 x i8] }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.0"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.0" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TField"**, %"class.sh::TField"**, %"class.std::__1::__compressed_pair" }
%"class.sh::TField" = type <{ %"class.sh::TType"*, %"class.sh::ImmutableString", %"struct.sh::TSourceLoc", i8, [7 x i8] }>
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TField"** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::DriverUniform" = type { i32 (...)**, %"class.sh::TVariable"*, %"class.sh::TType"* }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.7, i32 }
%union.anon.7 = type { i32 }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.8", i8, [7 x i8] }>
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.8" = type { %"class.std::__1::vector.9" }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.sh::TIntermNode"** }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.16", %"class.std::__1::vector.21", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { %"class.std::__1::unique_ptr.23"*, %"class.std::__1::unique_ptr.23"*, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::unique_ptr.23" = type opaque
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.std::__1::unique_ptr.23"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.29", %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { i64 }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.51", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.53" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::array.40" = type { [8 x %"class.sh::TType"*] }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::DriverUniformExtended" = type { %"class.sh::DriverUniform" }
%"struct.std::__1::array.42" = type { [4 x %"class.sh::TType"*] }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.43", i8, [7 x i8] }>
%"class.sh::TVector.43" = type { %"class.std::__1::vector.44" }
%"class.std::__1::vector.44" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { i32*, i32*, %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { i32* }

$_ZN2sh13DriverUniformD2Ev = comdat any

$_ZN2sh13DriverUniformD0Ev = comdat any

$_ZNK2sh13DriverUniform12getFlipXYRefEv = comdat any

$_ZNK2sh13DriverUniform15getNegFlipXYRefEv = comdat any

$_ZNK2sh13DriverUniform24getFragRotationMatrixRefEv = comdat any

$_ZNK2sh13DriverUniform20getHalfRenderAreaRefEv = comdat any

$_ZNK2sh13DriverUniform14getNegFlipYRefEv = comdat any

$_ZN2sh21DriverUniformExtendedD0Ev = comdat any

@_ZN2sh12_GLOBAL__N_117kAcbBufferOffsetsE = internal constant [17 x i8] c"acbBufferOffsets\00", align 16
@_ZN2sh2vk24kDriverUniformsBlockNameE = external constant [0 x i8], align 1
@_ZN2sh2vk22kDriverUniformsVarNameE = external constant [0 x i8], align 1
@_ZZN2sh13DriverUniform19createUniformFieldsEPNS_12TSymbolTableEE27kGraphicsDriverUniformNames = internal unnamed_addr constant %"struct.std::__1::array.39" { [8 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @_ZN2sh12_GLOBAL__N_19kViewportE, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @_ZN2sh12_GLOBAL__N_121kClipDistancesEnabledE, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @_ZN2sh12_GLOBAL__N_118kXfbActiveUnpausedE, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @_ZN2sh12_GLOBAL__N_123kXfbVerticesPerInstanceE, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @_ZN2sh12_GLOBAL__N_111kNumSamplesE, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @_ZN2sh12_GLOBAL__N_117kXfbBufferOffsetsE, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @_ZN2sh12_GLOBAL__N_117kAcbBufferOffsetsE, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @_ZN2sh12_GLOBAL__N_111kDepthRangeE, i32 0, i32 0)] }, align 8
@_ZN2sh12_GLOBAL__N_19kViewportE = internal constant [9 x i8] c"viewport\00", align 1
@_ZN2sh12_GLOBAL__N_121kClipDistancesEnabledE = internal constant [21 x i8] c"clipDistancesEnabled\00", align 16
@_ZN2sh12_GLOBAL__N_118kXfbActiveUnpausedE = internal constant [18 x i8] c"xfbActiveUnpaused\00", align 16
@_ZN2sh12_GLOBAL__N_123kXfbVerticesPerInstanceE = internal constant [23 x i8] c"xfbVerticesPerInstance\00", align 16
@_ZN2sh12_GLOBAL__N_111kNumSamplesE = internal constant [11 x i8] c"numSamples\00", align 1
@_ZN2sh12_GLOBAL__N_117kXfbBufferOffsetsE = internal constant [17 x i8] c"xfbBufferOffsets\00", align 16
@_ZN2sh12_GLOBAL__N_111kDepthRangeE = internal constant [11 x i8] c"depthRange\00", align 1
@.str = private unnamed_addr constant [5 x i8] c"near\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"far\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"diff\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"reserved\00", align 1
@_ZN2sh12_GLOBAL__N_125kEmulatedDepthRangeParamsE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i32 0, i32 0), i64 21 }, align 8
@_ZN2shL21kEmptyImmutableStringE = internal unnamed_addr constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i32 0, i32 0), i64 0 }, align 8
@_ZZN2sh21DriverUniformExtended19createUniformFieldsEPNS_12TSymbolTableEE30kGraphicsDriverUniformNamesExt = internal unnamed_addr constant %"struct.std::__1::array.41" { [4 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @_ZN2sh12_GLOBAL__N_115kHalfRenderAreaE, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @_ZN2sh12_GLOBAL__N_17kFlipXYE, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @_ZN2sh12_GLOBAL__N_110kNegFlipXYE, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @_ZN2sh12_GLOBAL__N_113kFragRotationE, i32 0, i32 0)] }, align 8
@_ZN2sh12_GLOBAL__N_115kHalfRenderAreaE = internal constant [15 x i8] c"halfRenderArea\00", align 1
@_ZN2sh12_GLOBAL__N_17kFlipXYE = internal constant [7 x i8] c"flipXY\00", align 1
@_ZN2sh12_GLOBAL__N_110kNegFlipXYE = internal constant [10 x i8] c"negFlipXY\00", align 1
@_ZN2sh12_GLOBAL__N_113kFragRotationE = internal constant [13 x i8] c"fragRotation\00", align 1
@_ZTVN2sh13DriverUniformE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::DriverUniform"*)* @_ZN2sh13DriverUniformD2Ev to i8*), i8* bitcast (void (%"class.sh::DriverUniform"*)* @_ZN2sh13DriverUniformD0Ev to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)* @_ZNK2sh13DriverUniform12getFlipXYRefEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)* @_ZNK2sh13DriverUniform15getNegFlipXYRefEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)* @_ZNK2sh13DriverUniform24getFragRotationMatrixRefEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)* @_ZNK2sh13DriverUniform20getHalfRenderAreaRefEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::DriverUniform"*)* @_ZNK2sh13DriverUniform14getNegFlipYRefEv to i8*), i8* bitcast (%"class.sh::TVector.0"* (%"class.sh::DriverUniform"*, %"class.sh::TSymbolTable"*)* @_ZN2sh13DriverUniform19createUniformFieldsEPNS_12TSymbolTableE to i8*)] }, align 8
@_ZTVN2sh21DriverUniformExtendedE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::DriverUniform"*)* @_ZN2sh13DriverUniformD2Ev to i8*), i8* bitcast (void (%"class.sh::DriverUniformExtended"*)* @_ZN2sh21DriverUniformExtendedD0Ev to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::DriverUniformExtended"*)* @_ZNK2sh21DriverUniformExtended12getFlipXYRefEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::DriverUniformExtended"*)* @_ZNK2sh21DriverUniformExtended15getNegFlipXYRefEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::DriverUniformExtended"*)* @_ZNK2sh21DriverUniformExtended24getFragRotationMatrixRefEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::DriverUniformExtended"*)* @_ZNK2sh21DriverUniformExtended20getHalfRenderAreaRefEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::DriverUniformExtended"*)* @_ZNK2sh21DriverUniformExtended14getNegFlipYRefEv to i8*), i8* bitcast (%"class.sh::TVector.0"* (%"class.sh::DriverUniformExtended"*, %"class.sh::TSymbolTable"*)* @_ZN2sh21DriverUniformExtended19createUniformFieldsEPNS_12TSymbolTableE to i8*)] }, align 8
@.str.4 = private unnamed_addr constant [22 x i8] c"ANGLEDepthRangeParams\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE3ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"00D\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE3ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 3, i32 0, i32 1, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 1, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE3ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZTVN2sh20TIntermConstantUnionE = external unnamed_addr constant { [34 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh13DriverUniform32addComputeDriverUniformsToShaderEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::DriverUniform"* nocapture, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.sh::TLayoutQualifier", align 16
  %5 = alloca %"struct.sh::TMemoryQualifier", align 8
  %6 = alloca %"class.sh::ImmutableString", align 8
  %7 = alloca %"class.sh::ImmutableString", align 8
  %8 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %9 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %8, i64 24) #5
  %10 = bitcast i8* %9 to %"class.sh::TVector.0"*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #5
  %11 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %12 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %11, i64 184) #5
  %13 = bitcast i8* %12 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %13, i32 4, i8 zeroext 4, i8 zeroext 1) #5
  %14 = getelementptr inbounds i8, i8* %9, i64 8
  %15 = bitcast i8* %14 to %"class.sh::TField"***
  %16 = getelementptr inbounds i8, i8* %9, i64 16
  %17 = bitcast i8* %16 to %"class.sh::TField"***
  %18 = bitcast i8* %14 to i64*
  %19 = bitcast i8* %9 to i64*
  %20 = bitcast i8* %16 to i64*
  %21 = bitcast i8* %9 to %"class.sh::TField"***
  %22 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %23 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %22, i64 48) #5
  %24 = ptrtoint i8* %12 to i64
  %25 = bitcast i8* %23 to i64*
  store i64 %24, i64* %25, align 8
  %26 = getelementptr inbounds i8, i8* %23, i64 8
  %27 = bitcast i8* %26 to i8**
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @_ZN2sh12_GLOBAL__N_117kAcbBufferOffsetsE, i64 0, i64 0), i8** %27, align 8
  %28 = getelementptr inbounds i8, i8* %23, i64 16
  %29 = bitcast i8* %28 to i64*
  store i64 16, i64* %29, align 8
  %30 = getelementptr inbounds i8, i8* %23, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 16, i1 false)
  %31 = getelementptr inbounds i8, i8* %23, i64 40
  store i8 2, i8* %31, align 8
  %32 = ptrtoint i8* %23 to i64
  %33 = load %"class.sh::TField"**, %"class.sh::TField"*** %15, align 8
  %34 = load %"class.sh::TField"**, %"class.sh::TField"*** %17, align 8
  %35 = icmp eq %"class.sh::TField"** %33, %34
  %36 = ptrtoint %"class.sh::TField"** %34 to i64
  br i1 %35, label %62, label %58

37:                                               ; preds = %37, %271
  %38 = phi i64 [ %42, %37 ], [ 0, %271 ]
  %39 = getelementptr inbounds [0 x i8], [0 x i8]* @_ZN2sh2vk24kDriverUniformsBlockNameE, i64 0, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  %42 = add i64 %38, 1
  br i1 %41, label %43, label %37

43:                                               ; preds = %37
  %44 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %6, i64 0, i32 1
  store i64 %38, i64* %44, align 8
  %45 = bitcast %"class.sh::ImmutableString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #5
  %46 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %7, i64 0, i32 0
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk22kDriverUniformsVarNameE, i64 0, i64 0), i8** %46, align 8
  br label %47

47:                                               ; preds = %47, %43
  %48 = phi i64 [ %52, %47 ], [ 0, %43 ]
  %49 = getelementptr inbounds [0 x i8], [0 x i8]* @_ZN2sh2vk22kDriverUniformsVarNameE, i64 0, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = icmp eq i8 %50, 0
  %52 = add i64 %48, 1
  br i1 %51, label %53, label %47

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %7, i64 0, i32 1
  store i64 %48, i64* %54, align 8
  %55 = call %"class.sh::TVariable"* @_ZN2sh21DeclareInterfaceBlockEPNS_12TIntermBlockEPNS_12TSymbolTableEPNS_7TVectorIPNS_6TFieldEEENS_10TQualifierERKNS_16TLayoutQualifierERKNS_16TMemoryQualifierEjRKNS_15ImmutableStringESI_(%"class.sh::TIntermBlock"* %1, %"class.sh::TSymbolTable"* %2, %"class.sh::TVector.0"* %10, i32 6, %"struct.sh::TLayoutQualifier"* nonnull dereferenceable(92) %4, %"struct.sh::TMemoryQualifier"* nonnull dereferenceable(5) %5, i32 0, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %6, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %7) #5
  %56 = getelementptr inbounds %"class.sh::DriverUniform", %"class.sh::DriverUniform"* %0, i64 0, i32 1
  store %"class.sh::TVariable"* %55, %"class.sh::TVariable"** %56, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %290) #5
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %288) #5
  call void @llvm.lifetime.end.p0i8(i64 92, i8* nonnull %272) #5
  %57 = icmp ne %"class.sh::TVariable"* %55, null
  ret i1 %57

58:                                               ; preds = %3
  %59 = bitcast %"class.sh::TField"** %33 to i64*
  store i64 %32, i64* %59, align 8
  %60 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %33, i64 1
  %61 = ptrtoint %"class.sh::TField"** %60 to i64
  store i64 %61, i64* %18, align 8
  br label %271

62:                                               ; preds = %3
  %63 = ptrtoint %"class.sh::TField"** %33 to i64
  %64 = load i64, i64* %19, align 8
  %65 = sub i64 %63, %64
  %66 = ashr exact i64 %65, 3
  %67 = add nsw i64 %66, 1
  %68 = icmp ugt i64 %67, 2305843009213693951
  br i1 %68, label %69, label %71

69:                                               ; preds = %62
  %70 = bitcast i8* %9 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #6
  unreachable

71:                                               ; preds = %62
  %72 = sub i64 %36, %64
  %73 = ashr exact i64 %72, 3
  %74 = icmp ult i64 %73, 1152921504606846975
  br i1 %74, label %75, label %80

75:                                               ; preds = %71
  %76 = ashr exact i64 %72, 2
  %77 = icmp ult i64 %76, %67
  %78 = select i1 %77, i64 %67, i64 %76
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %86, label %80

80:                                               ; preds = %75, %71
  %81 = phi i64 [ %78, %75 ], [ 2305843009213693951, %71 ]
  %82 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %83 = shl i64 %81, 3
  %84 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %82, i64 %83) #5
  %85 = bitcast i8* %84 to %"class.sh::TField"**
  br label %86

86:                                               ; preds = %80, %75
  %87 = phi i64 [ %81, %80 ], [ 0, %75 ]
  %88 = phi %"class.sh::TField"** [ %85, %80 ], [ null, %75 ]
  %89 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %88, i64 %66
  %90 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %88, i64 %87
  %91 = ptrtoint %"class.sh::TField"** %90 to i64
  %92 = bitcast %"class.sh::TField"** %89 to i64*
  store i64 %32, i64* %92, align 8
  %93 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %89, i64 1
  %94 = ptrtoint %"class.sh::TField"** %93 to i64
  %95 = load %"class.sh::TField"**, %"class.sh::TField"*** %21, align 8
  %96 = ptrtoint %"class.sh::TField"** %95 to i64
  %97 = load %"class.sh::TField"**, %"class.sh::TField"*** %15, align 8
  %98 = icmp eq %"class.sh::TField"** %97, %95
  br i1 %98, label %268, label %99

99:                                               ; preds = %86
  %100 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %97, i64 -1
  %101 = ptrtoint %"class.sh::TField"** %100 to i64
  %102 = sub i64 %101, %96
  %103 = lshr i64 %102, 3
  %104 = add nuw nsw i64 %103, 1
  %105 = icmp ult i64 %104, 4
  br i1 %105, label %198, label %106

106:                                              ; preds = %99
  %107 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %97, i64 -1
  %108 = ptrtoint %"class.sh::TField"** %107 to i64
  %109 = sub i64 %108, %96
  %110 = lshr i64 %109, 3
  %111 = xor i64 %110, -1
  %112 = add nsw i64 %66, %111
  %113 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %88, i64 %112
  %114 = xor i64 %110, -1
  %115 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %97, i64 %114
  %116 = icmp ult %"class.sh::TField"** %113, %97
  %117 = icmp ult %"class.sh::TField"** %115, %89
  %118 = and i1 %116, %117
  br i1 %118, label %198, label %119

119:                                              ; preds = %106
  %120 = and i64 %104, 4611686018427387900
  %121 = sub nsw i64 0, %120
  %122 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %89, i64 %121
  %123 = sub nsw i64 0, %120
  %124 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %97, i64 %123
  %125 = add nsw i64 %120, -4
  %126 = lshr exact i64 %125, 2
  %127 = add nuw nsw i64 %126, 1
  %128 = and i64 %127, 1
  %129 = icmp eq i64 %125, 0
  br i1 %129, label %176, label %130

130:                                              ; preds = %119
  %131 = sub nuw nsw i64 %127, %128
  %132 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %89, i64 -1
  %133 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %97, i64 -1
  %134 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %89, i64 -1
  %135 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %97, i64 -1
  br label %136

136:                                              ; preds = %136, %130
  %137 = phi i64 [ 0, %130 ], [ %171, %136 ]
  %138 = phi i64 [ %131, %130 ], [ %172, %136 ]
  %139 = sub i64 0, %137
  %140 = sub i64 0, %137
  %141 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %132, i64 %139
  %142 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %133, i64 %140
  %143 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %142, i64 -1
  %144 = bitcast %"class.sh::TField"** %143 to <2 x i64>*
  %145 = load <2 x i64>, <2 x i64>* %144, align 8, !alias.scope !2
  %146 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %142, i64 -2
  %147 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %146, i64 -1
  %148 = bitcast %"class.sh::TField"** %147 to <2 x i64>*
  %149 = load <2 x i64>, <2 x i64>* %148, align 8, !alias.scope !2
  %150 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %141, i64 -1
  %151 = bitcast %"class.sh::TField"** %150 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %151, align 8, !alias.scope !5, !noalias !2
  %152 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %141, i64 -2
  %153 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %152, i64 -1
  %154 = bitcast %"class.sh::TField"** %153 to <2 x i64>*
  store <2 x i64> %149, <2 x i64>* %154, align 8, !alias.scope !5, !noalias !2
  %155 = sub nuw nsw i64 -4, %137
  %156 = sub nuw nsw i64 -4, %137
  %157 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %134, i64 %155
  %158 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %135, i64 %156
  %159 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %158, i64 -1
  %160 = bitcast %"class.sh::TField"** %159 to <2 x i64>*
  %161 = load <2 x i64>, <2 x i64>* %160, align 8, !alias.scope !2
  %162 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %158, i64 -2
  %163 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %162, i64 -1
  %164 = bitcast %"class.sh::TField"** %163 to <2 x i64>*
  %165 = load <2 x i64>, <2 x i64>* %164, align 8, !alias.scope !2
  %166 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %157, i64 -1
  %167 = bitcast %"class.sh::TField"** %166 to <2 x i64>*
  store <2 x i64> %161, <2 x i64>* %167, align 8, !alias.scope !5, !noalias !2
  %168 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %157, i64 -2
  %169 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %168, i64 -1
  %170 = bitcast %"class.sh::TField"** %169 to <2 x i64>*
  store <2 x i64> %165, <2 x i64>* %170, align 8, !alias.scope !5, !noalias !2
  %171 = add i64 %137, 8
  %172 = add i64 %138, -2
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %136, !llvm.loop !7

174:                                              ; preds = %136
  %175 = sub nuw nsw i64 -8, %137
  br label %176

176:                                              ; preds = %174, %119
  %177 = phi i64 [ 0, %119 ], [ %175, %174 ]
  %178 = icmp eq i64 %128, 0
  br i1 %178, label %196, label %179

179:                                              ; preds = %176
  %180 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %89, i64 -1
  %181 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %97, i64 -1
  %182 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %180, i64 %177
  %183 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %181, i64 %177
  %184 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %183, i64 -1
  %185 = bitcast %"class.sh::TField"** %184 to <2 x i64>*
  %186 = load <2 x i64>, <2 x i64>* %185, align 8, !alias.scope !2
  %187 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %183, i64 -2
  %188 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %187, i64 -1
  %189 = bitcast %"class.sh::TField"** %188 to <2 x i64>*
  %190 = load <2 x i64>, <2 x i64>* %189, align 8, !alias.scope !2
  %191 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %182, i64 -1
  %192 = bitcast %"class.sh::TField"** %191 to <2 x i64>*
  store <2 x i64> %186, <2 x i64>* %192, align 8, !alias.scope !5, !noalias !2
  %193 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %182, i64 -2
  %194 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %193, i64 -1
  %195 = bitcast %"class.sh::TField"** %194 to <2 x i64>*
  store <2 x i64> %190, <2 x i64>* %195, align 8, !alias.scope !5, !noalias !2
  br label %196

196:                                              ; preds = %176, %179
  %197 = icmp eq i64 %104, %120
  br i1 %197, label %268, label %198

198:                                              ; preds = %196, %106, %99
  %199 = phi %"class.sh::TField"** [ %89, %106 ], [ %89, %99 ], [ %122, %196 ]
  %200 = phi %"class.sh::TField"** [ %97, %106 ], [ %97, %99 ], [ %124, %196 ]
  %201 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %200, i64 -1
  %202 = ptrtoint %"class.sh::TField"** %201 to i64
  %203 = sub i64 %202, %96
  %204 = lshr i64 %203, 3
  %205 = add nuw nsw i64 %204, 1
  %206 = and i64 %205, 7
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %219, label %208

208:                                              ; preds = %198, %208
  %209 = phi %"class.sh::TField"** [ %212, %208 ], [ %199, %198 ]
  %210 = phi %"class.sh::TField"** [ %213, %208 ], [ %200, %198 ]
  %211 = phi i64 [ %217, %208 ], [ %206, %198 ]
  %212 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %209, i64 -1
  %213 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %210, i64 -1
  %214 = bitcast %"class.sh::TField"** %213 to i64*
  %215 = load i64, i64* %214, align 8
  %216 = bitcast %"class.sh::TField"** %212 to i64*
  store i64 %215, i64* %216, align 8
  %217 = add i64 %211, -1
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %219, label %208, !llvm.loop !9

219:                                              ; preds = %208, %198
  %220 = phi %"class.sh::TField"** [ undef, %198 ], [ %212, %208 ]
  %221 = phi %"class.sh::TField"** [ %199, %198 ], [ %212, %208 ]
  %222 = phi %"class.sh::TField"** [ %200, %198 ], [ %213, %208 ]
  %223 = icmp ult i64 %203, 56
  br i1 %223, label %268, label %224

224:                                              ; preds = %219, %224
  %225 = phi %"class.sh::TField"** [ %262, %224 ], [ %221, %219 ]
  %226 = phi %"class.sh::TField"** [ %263, %224 ], [ %222, %219 ]
  %227 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %225, i64 -1
  %228 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %226, i64 -1
  %229 = bitcast %"class.sh::TField"** %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = bitcast %"class.sh::TField"** %227 to i64*
  store i64 %230, i64* %231, align 8
  %232 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %225, i64 -2
  %233 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %226, i64 -2
  %234 = bitcast %"class.sh::TField"** %233 to i64*
  %235 = load i64, i64* %234, align 8
  %236 = bitcast %"class.sh::TField"** %232 to i64*
  store i64 %235, i64* %236, align 8
  %237 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %225, i64 -3
  %238 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %226, i64 -3
  %239 = bitcast %"class.sh::TField"** %238 to i64*
  %240 = load i64, i64* %239, align 8
  %241 = bitcast %"class.sh::TField"** %237 to i64*
  store i64 %240, i64* %241, align 8
  %242 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %225, i64 -4
  %243 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %226, i64 -4
  %244 = bitcast %"class.sh::TField"** %243 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = bitcast %"class.sh::TField"** %242 to i64*
  store i64 %245, i64* %246, align 8
  %247 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %225, i64 -5
  %248 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %226, i64 -5
  %249 = bitcast %"class.sh::TField"** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = bitcast %"class.sh::TField"** %247 to i64*
  store i64 %250, i64* %251, align 8
  %252 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %225, i64 -6
  %253 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %226, i64 -6
  %254 = bitcast %"class.sh::TField"** %253 to i64*
  %255 = load i64, i64* %254, align 8
  %256 = bitcast %"class.sh::TField"** %252 to i64*
  store i64 %255, i64* %256, align 8
  %257 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %225, i64 -7
  %258 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %226, i64 -7
  %259 = bitcast %"class.sh::TField"** %258 to i64*
  %260 = load i64, i64* %259, align 8
  %261 = bitcast %"class.sh::TField"** %257 to i64*
  store i64 %260, i64* %261, align 8
  %262 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %225, i64 -8
  %263 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %226, i64 -8
  %264 = bitcast %"class.sh::TField"** %263 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = bitcast %"class.sh::TField"** %262 to i64*
  store i64 %265, i64* %266, align 8
  %267 = icmp eq %"class.sh::TField"** %263, %95
  br i1 %267, label %268, label %224, !llvm.loop !11

268:                                              ; preds = %219, %224, %196, %86
  %269 = phi %"class.sh::TField"** [ %89, %86 ], [ %122, %196 ], [ %220, %219 ], [ %262, %224 ]
  %270 = ptrtoint %"class.sh::TField"** %269 to i64
  store i64 %270, i64* %19, align 8
  store i64 %94, i64* %18, align 8
  store i64 %91, i64* %20, align 8
  br label %271

271:                                              ; preds = %58, %268
  %272 = bitcast %"struct.sh::TLayoutQualifier"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 92, i8* nonnull %272) #5
  %273 = bitcast %"struct.sh::TLayoutQualifier"* %4 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %273, align 16, !alias.scope !12
  %274 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %4, i64 0, i32 4, i32 0, i64 0
  %275 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %4, i64 0, i32 7
  %276 = bitcast i32* %274 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %276, i8 -1, i64 20, i1 false) #5, !alias.scope !12
  store i32 0, i32* %275, align 4, !alias.scope !12
  %277 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %4, i64 0, i32 8
  store i32 -1, i32* %277, align 8, !alias.scope !12
  %278 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %4, i64 0, i32 9
  store i8 0, i8* %278, align 4, !alias.scope !12
  %279 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %4, i64 0, i32 10
  store i8 0, i8* %279, align 1, !alias.scope !12
  %280 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %4, i64 0, i32 12
  store i32 0, i32* %280, align 16, !alias.scope !12
  %281 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %4, i64 0, i32 13
  store i32 0, i32* %281, align 4, !alias.scope !12
  %282 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %4, i64 0, i32 14
  store i32 -1, i32* %282, align 8, !alias.scope !12
  %283 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %4, i64 0, i32 15
  %284 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %4, i64 0, i32 20
  %285 = bitcast i32* %283 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %285, i8 0, i64 20, i1 false) #5, !alias.scope !12
  store i32 -1, i32* %284, align 16, !alias.scope !12
  %286 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %4, i64 0, i32 21
  store i32 -1, i32* %286, align 4, !alias.scope !12
  %287 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %4, i64 0, i32 22
  store i8 0, i8* %287, align 8, !alias.scope !12
  %288 = getelementptr inbounds %"struct.sh::TMemoryQualifier", %"struct.sh::TMemoryQualifier"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %288) #5
  %289 = bitcast %"struct.sh::TMemoryQualifier"* %5 to i40*
  store i40 0, i40* %289, align 8
  %290 = bitcast %"class.sh::ImmutableString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %290) #5
  %291 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %6, i64 0, i32 0
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk24kDriverUniformsBlockNameE, i64 0, i64 0), i8** %291, align 8
  br label %37
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"*, i32, i8 zeroext, i8 zeroext) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.sh::TVariable"* @_ZN2sh21DeclareInterfaceBlockEPNS_12TIntermBlockEPNS_12TSymbolTableEPNS_7TVectorIPNS_6TFieldEEENS_10TQualifierERKNS_16TLayoutQualifierERKNS_16TMemoryQualifierEjRKNS_15ImmutableStringESI_(%"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, %"class.sh::TVector.0"*, i32, %"struct.sh::TLayoutQualifier"* dereferenceable(92), %"struct.sh::TMemoryQualifier"* dereferenceable(5), i32, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::ImmutableString"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TVector.0"* @_ZN2sh13DriverUniform19createUniformFieldsEPNS_12TSymbolTableE(%"class.sh::DriverUniform"* nocapture, %"class.sh::TSymbolTable"*) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.std::__1::array.40", align 8
  %4 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %5 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %4, i64 24) #5
  %6 = bitcast i8* %5 to %"class.sh::TVector.0"*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #5
  %7 = bitcast %"struct.std::__1::array.40"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %7) #5
  %8 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %9 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %8, i64 184) #5
  %10 = bitcast i8* %9 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %10, i32 1, i8 zeroext 4, i8 zeroext 1) #5
  %11 = bitcast %"struct.std::__1::array.40"* %3 to i8**
  store i8* %9, i8** %11, align 8
  %12 = getelementptr inbounds %"struct.std::__1::array.40", %"struct.std::__1::array.40"* %3, i64 0, i32 0, i64 1
  %13 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %14 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %13, i64 184) #5
  %15 = bitcast i8* %14 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %15, i32 4, i8 zeroext 1, i8 zeroext 1) #5
  %16 = bitcast %"class.sh::TType"** %12 to i8**
  store i8* %14, i8** %16, align 8
  %17 = getelementptr inbounds %"struct.std::__1::array.40", %"struct.std::__1::array.40"* %3, i64 0, i32 0, i64 2
  %18 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %19 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %18, i64 184) #5
  %20 = bitcast i8* %19 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %20, i32 4, i8 zeroext 1, i8 zeroext 1) #5
  %21 = bitcast %"class.sh::TType"** %17 to i8**
  store i8* %19, i8** %21, align 8
  %22 = getelementptr inbounds %"struct.std::__1::array.40", %"struct.std::__1::array.40"* %3, i64 0, i32 0, i64 3
  %23 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %24 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %23, i64 184) #5
  %25 = bitcast i8* %24 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %25, i32 3, i8 zeroext 1, i8 zeroext 1) #5
  %26 = bitcast %"class.sh::TType"** %22 to i8**
  store i8* %24, i8** %26, align 8
  %27 = getelementptr inbounds %"struct.std::__1::array.40", %"struct.std::__1::array.40"* %3, i64 0, i32 0, i64 4
  %28 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %29 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %28, i64 184) #5
  %30 = bitcast i8* %29 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %30, i32 3, i8 zeroext 1, i8 zeroext 1) #5
  %31 = bitcast %"class.sh::TType"** %27 to i8**
  store i8* %29, i8** %31, align 8
  %32 = getelementptr inbounds %"struct.std::__1::array.40", %"struct.std::__1::array.40"* %3, i64 0, i32 0, i64 5
  %33 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %34 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %33, i64 184) #5
  %35 = bitcast i8* %34 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %35, i32 3, i8 zeroext 4, i8 zeroext 1) #5
  %36 = bitcast %"class.sh::TType"** %32 to i8**
  store i8* %34, i8** %36, align 8
  %37 = getelementptr inbounds %"struct.std::__1::array.40", %"struct.std::__1::array.40"* %3, i64 0, i32 0, i64 6
  %38 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %39 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %38, i64 184) #5
  %40 = bitcast i8* %39 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %40, i32 4, i8 zeroext 4, i8 zeroext 1) #5
  %41 = bitcast %"class.sh::TType"** %37 to i8**
  store i8* %39, i8** %41, align 8
  %42 = getelementptr inbounds %"struct.std::__1::array.40", %"struct.std::__1::array.40"* %3, i64 0, i32 0, i64 7
  %43 = tail call %"class.sh::TType"* @_ZN2sh13DriverUniform28createEmulatedDepthRangeTypeEPNS_12TSymbolTableE(%"class.sh::DriverUniform"* %0, %"class.sh::TSymbolTable"* %1)
  store %"class.sh::TType"* %43, %"class.sh::TType"** %42, align 8
  %44 = getelementptr inbounds i8, i8* %5, i64 8
  %45 = bitcast i8* %44 to %"class.sh::TField"***
  %46 = getelementptr inbounds i8, i8* %5, i64 16
  %47 = bitcast i8* %46 to %"class.sh::TField"***
  %48 = bitcast i8* %44 to i64*
  %49 = bitcast i8* %5 to i64*
  %50 = bitcast i8* %46 to i64*
  %51 = bitcast i8* %5 to %"class.sh::TField"***
  br label %53

52:                                               ; preds = %297
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %7) #5
  ret %"class.sh::TVector.0"* %6

53:                                               ; preds = %297, %2
  %54 = phi i64 [ 0, %2 ], [ %298, %297 ]
  %55 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %56 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %55, i64 48) #5
  %57 = getelementptr inbounds %"struct.std::__1::array.40", %"struct.std::__1::array.40"* %3, i64 0, i32 0, i64 %54
  %58 = bitcast %"class.sh::TType"** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"struct.std::__1::array.39", %"struct.std::__1::array.39"* @_ZZN2sh13DriverUniform19createUniformFieldsEPNS_12TSymbolTableEE27kGraphicsDriverUniformNames, i64 0, i32 0, i64 %54
  %61 = load i8*, i8** %60, align 8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %69, label %63

63:                                               ; preds = %53, %63
  %64 = phi i64 [ %68, %63 ], [ 0, %53 ]
  %65 = getelementptr inbounds i8, i8* %61, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = icmp eq i8 %66, 0
  %68 = add i64 %64, 1
  br i1 %67, label %69, label %63

69:                                               ; preds = %63, %53
  %70 = phi i64 [ 0, %53 ], [ %64, %63 ]
  %71 = bitcast i8* %56 to i64*
  store i64 %59, i64* %71, align 8
  %72 = getelementptr inbounds i8, i8* %56, i64 8
  %73 = bitcast i8* %72 to i8**
  store i8* %61, i8** %73, align 8
  %74 = getelementptr inbounds i8, i8* %56, i64 16
  %75 = bitcast i8* %74 to i64*
  store i64 %70, i64* %75, align 8
  %76 = getelementptr inbounds i8, i8* %56, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %76, i8 0, i64 16, i1 false)
  %77 = getelementptr inbounds i8, i8* %56, i64 40
  store i8 2, i8* %77, align 8
  %78 = ptrtoint i8* %56 to i64
  %79 = load %"class.sh::TField"**, %"class.sh::TField"*** %45, align 8
  %80 = load %"class.sh::TField"**, %"class.sh::TField"*** %47, align 8
  %81 = icmp eq %"class.sh::TField"** %79, %80
  %82 = ptrtoint %"class.sh::TField"** %80 to i64
  br i1 %81, label %87, label %83

83:                                               ; preds = %69
  %84 = bitcast %"class.sh::TField"** %79 to i64*
  store i64 %78, i64* %84, align 8
  %85 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %79, i64 1
  %86 = ptrtoint %"class.sh::TField"** %85 to i64
  store i64 %86, i64* %48, align 8
  br label %297

87:                                               ; preds = %69
  %88 = ptrtoint %"class.sh::TField"** %79 to i64
  %89 = load i64, i64* %49, align 8
  %90 = sub i64 %88, %89
  %91 = ashr exact i64 %90, 3
  %92 = add nsw i64 %91, 1
  %93 = icmp ugt i64 %92, 2305843009213693951
  br i1 %93, label %94, label %96

94:                                               ; preds = %87
  %95 = bitcast i8* %5 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %95) #6
  unreachable

96:                                               ; preds = %87
  %97 = sub i64 %82, %89
  %98 = ashr exact i64 %97, 3
  %99 = icmp ult i64 %98, 1152921504606846975
  br i1 %99, label %100, label %105

100:                                              ; preds = %96
  %101 = ashr exact i64 %97, 2
  %102 = icmp ult i64 %101, %92
  %103 = select i1 %102, i64 %92, i64 %101
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %111, label %105

105:                                              ; preds = %100, %96
  %106 = phi i64 [ %103, %100 ], [ 2305843009213693951, %96 ]
  %107 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %108 = shl i64 %106, 3
  %109 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %107, i64 %108) #5
  %110 = bitcast i8* %109 to %"class.sh::TField"**
  br label %111

111:                                              ; preds = %105, %100
  %112 = phi i64 [ %106, %105 ], [ 0, %100 ]
  %113 = phi %"class.sh::TField"** [ %110, %105 ], [ null, %100 ]
  %114 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %113, i64 %91
  %115 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %113, i64 %112
  %116 = ptrtoint %"class.sh::TField"** %115 to i64
  %117 = bitcast %"class.sh::TField"** %114 to i64*
  store i64 %78, i64* %117, align 8
  %118 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %114, i64 1
  %119 = ptrtoint %"class.sh::TField"** %118 to i64
  %120 = load %"class.sh::TField"**, %"class.sh::TField"*** %51, align 8
  %121 = ptrtoint %"class.sh::TField"** %120 to i64
  %122 = load %"class.sh::TField"**, %"class.sh::TField"*** %45, align 8
  %123 = icmp eq %"class.sh::TField"** %122, %120
  br i1 %123, label %294, label %124

124:                                              ; preds = %111
  %125 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %122, i64 -1
  %126 = ptrtoint %"class.sh::TField"** %125 to i64
  %127 = sub i64 %126, %121
  %128 = lshr i64 %127, 3
  %129 = add nuw nsw i64 %128, 1
  %130 = icmp ult i64 %129, 4
  br i1 %130, label %224, label %131

131:                                              ; preds = %124
  %132 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %113, i64 -1
  %133 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %122, i64 -1
  %134 = ptrtoint %"class.sh::TField"** %133 to i64
  %135 = sub i64 %134, %121
  %136 = lshr i64 %135, 3
  %137 = sub nsw i64 %91, %136
  %138 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %132, i64 %137
  %139 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %122, i64 -1
  %140 = sub nsw i64 0, %136
  %141 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %139, i64 %140
  %142 = icmp ult %"class.sh::TField"** %138, %122
  %143 = icmp ult %"class.sh::TField"** %141, %114
  %144 = and i1 %142, %143
  br i1 %144, label %224, label %145

145:                                              ; preds = %131
  %146 = and i64 %129, 4611686018427387900
  %147 = sub nsw i64 0, %146
  %148 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %114, i64 %147
  %149 = sub nsw i64 0, %146
  %150 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %122, i64 %149
  %151 = add nsw i64 %146, -4
  %152 = lshr exact i64 %151, 2
  %153 = add nuw nsw i64 %152, 1
  %154 = and i64 %153, 1
  %155 = icmp eq i64 %151, 0
  br i1 %155, label %200, label %156

156:                                              ; preds = %145
  %157 = sub nuw nsw i64 %153, %154
  %158 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %114, i64 -1
  %159 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %122, i64 -1
  %160 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %114, i64 -1
  %161 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %122, i64 -1
  br label %162

162:                                              ; preds = %162, %156
  %163 = phi i64 [ 0, %156 ], [ %197, %162 ]
  %164 = phi i64 [ %157, %156 ], [ %198, %162 ]
  %165 = sub i64 0, %163
  %166 = sub i64 0, %163
  %167 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %158, i64 %165
  %168 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %159, i64 %166
  %169 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %168, i64 -1
  %170 = bitcast %"class.sh::TField"** %169 to <2 x i64>*
  %171 = load <2 x i64>, <2 x i64>* %170, align 8, !alias.scope !15
  %172 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %168, i64 -2
  %173 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %172, i64 -1
  %174 = bitcast %"class.sh::TField"** %173 to <2 x i64>*
  %175 = load <2 x i64>, <2 x i64>* %174, align 8, !alias.scope !15
  %176 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %167, i64 -1
  %177 = bitcast %"class.sh::TField"** %176 to <2 x i64>*
  store <2 x i64> %171, <2 x i64>* %177, align 8, !alias.scope !18, !noalias !15
  %178 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %167, i64 -2
  %179 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %178, i64 -1
  %180 = bitcast %"class.sh::TField"** %179 to <2 x i64>*
  store <2 x i64> %175, <2 x i64>* %180, align 8, !alias.scope !18, !noalias !15
  %181 = sub nuw nsw i64 -4, %163
  %182 = sub nuw nsw i64 -4, %163
  %183 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %160, i64 %181
  %184 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %161, i64 %182
  %185 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %184, i64 -1
  %186 = bitcast %"class.sh::TField"** %185 to <2 x i64>*
  %187 = load <2 x i64>, <2 x i64>* %186, align 8, !alias.scope !15
  %188 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %184, i64 -2
  %189 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %188, i64 -1
  %190 = bitcast %"class.sh::TField"** %189 to <2 x i64>*
  %191 = load <2 x i64>, <2 x i64>* %190, align 8, !alias.scope !15
  %192 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %183, i64 -1
  %193 = bitcast %"class.sh::TField"** %192 to <2 x i64>*
  store <2 x i64> %187, <2 x i64>* %193, align 8, !alias.scope !18, !noalias !15
  %194 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %183, i64 -2
  %195 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %194, i64 -1
  %196 = bitcast %"class.sh::TField"** %195 to <2 x i64>*
  store <2 x i64> %191, <2 x i64>* %196, align 8, !alias.scope !18, !noalias !15
  %197 = add i64 %163, 8
  %198 = add i64 %164, -2
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %162, !llvm.loop !20

200:                                              ; preds = %162, %145
  %201 = phi i64 [ 0, %145 ], [ %197, %162 ]
  %202 = icmp eq i64 %154, 0
  br i1 %202, label %222, label %203

203:                                              ; preds = %200
  %204 = sub i64 0, %201
  %205 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %114, i64 -1
  %206 = sub i64 0, %201
  %207 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %122, i64 -1
  %208 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %205, i64 %204
  %209 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %207, i64 %206
  %210 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %209, i64 -1
  %211 = bitcast %"class.sh::TField"** %210 to <2 x i64>*
  %212 = load <2 x i64>, <2 x i64>* %211, align 8, !alias.scope !15
  %213 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %209, i64 -2
  %214 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %213, i64 -1
  %215 = bitcast %"class.sh::TField"** %214 to <2 x i64>*
  %216 = load <2 x i64>, <2 x i64>* %215, align 8, !alias.scope !15
  %217 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %208, i64 -1
  %218 = bitcast %"class.sh::TField"** %217 to <2 x i64>*
  store <2 x i64> %212, <2 x i64>* %218, align 8, !alias.scope !18, !noalias !15
  %219 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %208, i64 -2
  %220 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %219, i64 -1
  %221 = bitcast %"class.sh::TField"** %220 to <2 x i64>*
  store <2 x i64> %216, <2 x i64>* %221, align 8, !alias.scope !18, !noalias !15
  br label %222

222:                                              ; preds = %200, %203
  %223 = icmp eq i64 %129, %146
  br i1 %223, label %294, label %224

224:                                              ; preds = %222, %131, %124
  %225 = phi %"class.sh::TField"** [ %114, %131 ], [ %114, %124 ], [ %148, %222 ]
  %226 = phi %"class.sh::TField"** [ %122, %131 ], [ %122, %124 ], [ %150, %222 ]
  %227 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %226, i64 -1
  %228 = ptrtoint %"class.sh::TField"** %227 to i64
  %229 = sub i64 %228, %121
  %230 = lshr i64 %229, 3
  %231 = add nuw nsw i64 %230, 1
  %232 = and i64 %231, 7
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %245, label %234

234:                                              ; preds = %224, %234
  %235 = phi %"class.sh::TField"** [ %238, %234 ], [ %225, %224 ]
  %236 = phi %"class.sh::TField"** [ %239, %234 ], [ %226, %224 ]
  %237 = phi i64 [ %243, %234 ], [ %232, %224 ]
  %238 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %235, i64 -1
  %239 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %236, i64 -1
  %240 = bitcast %"class.sh::TField"** %239 to i64*
  %241 = load i64, i64* %240, align 8
  %242 = bitcast %"class.sh::TField"** %238 to i64*
  store i64 %241, i64* %242, align 8
  %243 = add i64 %237, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %234, !llvm.loop !21

245:                                              ; preds = %234, %224
  %246 = phi %"class.sh::TField"** [ undef, %224 ], [ %238, %234 ]
  %247 = phi %"class.sh::TField"** [ %225, %224 ], [ %238, %234 ]
  %248 = phi %"class.sh::TField"** [ %226, %224 ], [ %239, %234 ]
  %249 = icmp ult i64 %229, 56
  br i1 %249, label %294, label %250

250:                                              ; preds = %245, %250
  %251 = phi %"class.sh::TField"** [ %288, %250 ], [ %247, %245 ]
  %252 = phi %"class.sh::TField"** [ %289, %250 ], [ %248, %245 ]
  %253 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %251, i64 -1
  %254 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %252, i64 -1
  %255 = bitcast %"class.sh::TField"** %254 to i64*
  %256 = load i64, i64* %255, align 8
  %257 = bitcast %"class.sh::TField"** %253 to i64*
  store i64 %256, i64* %257, align 8
  %258 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %251, i64 -2
  %259 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %252, i64 -2
  %260 = bitcast %"class.sh::TField"** %259 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = bitcast %"class.sh::TField"** %258 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %251, i64 -3
  %264 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %252, i64 -3
  %265 = bitcast %"class.sh::TField"** %264 to i64*
  %266 = load i64, i64* %265, align 8
  %267 = bitcast %"class.sh::TField"** %263 to i64*
  store i64 %266, i64* %267, align 8
  %268 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %251, i64 -4
  %269 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %252, i64 -4
  %270 = bitcast %"class.sh::TField"** %269 to i64*
  %271 = load i64, i64* %270, align 8
  %272 = bitcast %"class.sh::TField"** %268 to i64*
  store i64 %271, i64* %272, align 8
  %273 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %251, i64 -5
  %274 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %252, i64 -5
  %275 = bitcast %"class.sh::TField"** %274 to i64*
  %276 = load i64, i64* %275, align 8
  %277 = bitcast %"class.sh::TField"** %273 to i64*
  store i64 %276, i64* %277, align 8
  %278 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %251, i64 -6
  %279 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %252, i64 -6
  %280 = bitcast %"class.sh::TField"** %279 to i64*
  %281 = load i64, i64* %280, align 8
  %282 = bitcast %"class.sh::TField"** %278 to i64*
  store i64 %281, i64* %282, align 8
  %283 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %251, i64 -7
  %284 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %252, i64 -7
  %285 = bitcast %"class.sh::TField"** %284 to i64*
  %286 = load i64, i64* %285, align 8
  %287 = bitcast %"class.sh::TField"** %283 to i64*
  store i64 %286, i64* %287, align 8
  %288 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %251, i64 -8
  %289 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %252, i64 -8
  %290 = bitcast %"class.sh::TField"** %289 to i64*
  %291 = load i64, i64* %290, align 8
  %292 = bitcast %"class.sh::TField"** %288 to i64*
  store i64 %291, i64* %292, align 8
  %293 = icmp eq %"class.sh::TField"** %289, %120
  br i1 %293, label %294, label %250, !llvm.loop !22

294:                                              ; preds = %245, %250, %222, %111
  %295 = phi %"class.sh::TField"** [ %114, %111 ], [ %148, %222 ], [ %246, %245 ], [ %288, %250 ]
  %296 = ptrtoint %"class.sh::TField"** %295 to i64
  store i64 %296, i64* %49, align 8
  store i64 %119, i64* %48, align 8
  store i64 %116, i64* %50, align 8
  br label %297

297:                                              ; preds = %83, %294
  %298 = add nuw nsw i64 %54, 1
  %299 = icmp eq i64 %298, 8
  br i1 %299, label %52, label %53
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TType"* @_ZN2sh13DriverUniform28createEmulatedDepthRangeTypeEPNS_12TSymbolTableE(%"class.sh::DriverUniform"* nocapture, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::DriverUniform", %"class.sh::DriverUniform"* %0, i64 0, i32 2
  %4 = load %"class.sh::TType"*, %"class.sh::TType"** %3, align 8
  %5 = icmp eq %"class.sh::TType"* %4, null
  br i1 %5, label %6, label %965

6:                                                ; preds = %2
  %7 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %8 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %7, i64 24) #5
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #5
  %9 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %10 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %9, i64 48) #5
  %11 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %12 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %11, i64 184) #5
  %13 = bitcast i8* %12 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* %13, i32 1, i32 3, i32 1, i8 zeroext 1, i8 zeroext 1) #5
  %14 = bitcast i8* %8 to %"class.sh::TVector.0"*
  %15 = bitcast i8* %10 to i8**
  store i8* %12, i8** %15, align 8
  %16 = getelementptr inbounds i8, i8* %10, i64 8
  %17 = bitcast i8* %16 to i8**
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8** %17, align 8
  %18 = getelementptr inbounds i8, i8* %10, i64 16
  %19 = bitcast i8* %18 to i64*
  store i64 4, i64* %19, align 8
  %20 = getelementptr inbounds i8, i8* %10, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false)
  %21 = getelementptr inbounds i8, i8* %10, i64 40
  store i8 2, i8* %21, align 8
  %22 = ptrtoint i8* %10 to i64
  %23 = getelementptr inbounds i8, i8* %8, i64 8
  %24 = bitcast i8* %23 to %"class.sh::TField"***
  %25 = load %"class.sh::TField"**, %"class.sh::TField"*** %24, align 8
  %26 = getelementptr inbounds i8, i8* %8, i64 16
  %27 = bitcast i8* %26 to %"class.sh::TField"***
  %28 = load %"class.sh::TField"**, %"class.sh::TField"*** %27, align 8
  %29 = icmp ult %"class.sh::TField"** %25, %28
  %30 = ptrtoint %"class.sh::TField"** %28 to i64
  br i1 %29, label %31, label %36

31:                                               ; preds = %6
  %32 = bitcast %"class.sh::TField"** %25 to i64*
  store i64 %22, i64* %32, align 8
  %33 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %25, i64 1
  %34 = ptrtoint %"class.sh::TField"** %33 to i64
  %35 = bitcast i8* %23 to i64*
  store i64 %34, i64* %35, align 8
  br label %249

36:                                               ; preds = %6
  %37 = ptrtoint %"class.sh::TField"** %25 to i64
  %38 = bitcast i8* %23 to i64*
  %39 = bitcast i8* %8 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %37, %40
  %42 = ashr exact i64 %41, 3
  %43 = add nsw i64 %42, 1
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %47

45:                                               ; preds = %36
  %46 = bitcast i8* %8 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %46) #6
  unreachable

47:                                               ; preds = %36
  %48 = bitcast i8* %26 to i64*
  %49 = sub i64 %30, %40
  %50 = ashr exact i64 %49, 3
  %51 = icmp ult i64 %50, 1152921504606846975
  br i1 %51, label %52, label %57

52:                                               ; preds = %47
  %53 = ashr exact i64 %49, 2
  %54 = icmp ult i64 %53, %43
  %55 = select i1 %54, i64 %43, i64 %53
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %63, label %57

57:                                               ; preds = %52, %47
  %58 = phi i64 [ %55, %52 ], [ 2305843009213693951, %47 ]
  %59 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %60 = shl i64 %58, 3
  %61 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %59, i64 %60) #5
  %62 = bitcast i8* %61 to %"class.sh::TField"**
  br label %63

63:                                               ; preds = %57, %52
  %64 = phi i64 [ %58, %57 ], [ 0, %52 ]
  %65 = phi %"class.sh::TField"** [ %62, %57 ], [ null, %52 ]
  %66 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %65, i64 %42
  %67 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %65, i64 %64
  %68 = ptrtoint %"class.sh::TField"** %67 to i64
  %69 = bitcast %"class.sh::TField"** %66 to i64*
  store i64 %22, i64* %69, align 8
  %70 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %66, i64 1
  %71 = ptrtoint %"class.sh::TField"** %70 to i64
  %72 = bitcast i8* %8 to %"class.sh::TField"***
  %73 = load %"class.sh::TField"**, %"class.sh::TField"*** %72, align 8
  %74 = ptrtoint %"class.sh::TField"** %73 to i64
  %75 = load %"class.sh::TField"**, %"class.sh::TField"*** %24, align 8
  %76 = icmp eq %"class.sh::TField"** %75, %73
  br i1 %76, label %246, label %77

77:                                               ; preds = %63
  %78 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %75, i64 -1
  %79 = ptrtoint %"class.sh::TField"** %78 to i64
  %80 = sub i64 %79, %74
  %81 = lshr i64 %80, 3
  %82 = add nuw nsw i64 %81, 1
  %83 = icmp ult i64 %82, 4
  br i1 %83, label %176, label %84

84:                                               ; preds = %77
  %85 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %75, i64 -1
  %86 = ptrtoint %"class.sh::TField"** %85 to i64
  %87 = sub i64 %86, %74
  %88 = lshr i64 %87, 3
  %89 = xor i64 %88, -1
  %90 = add nsw i64 %42, %89
  %91 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %65, i64 %90
  %92 = xor i64 %88, -1
  %93 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %75, i64 %92
  %94 = icmp ult %"class.sh::TField"** %91, %75
  %95 = icmp ult %"class.sh::TField"** %93, %66
  %96 = and i1 %94, %95
  br i1 %96, label %176, label %97

97:                                               ; preds = %84
  %98 = and i64 %82, 4611686018427387900
  %99 = sub nsw i64 0, %98
  %100 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %66, i64 %99
  %101 = sub nsw i64 0, %98
  %102 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %75, i64 %101
  %103 = add nsw i64 %98, -4
  %104 = lshr exact i64 %103, 2
  %105 = add nuw nsw i64 %104, 1
  %106 = and i64 %105, 1
  %107 = icmp eq i64 %103, 0
  br i1 %107, label %152, label %108

108:                                              ; preds = %97
  %109 = sub nuw nsw i64 %105, %106
  %110 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %66, i64 -1
  %111 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %75, i64 -1
  %112 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %66, i64 -1
  %113 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %75, i64 -1
  br label %114

114:                                              ; preds = %114, %108
  %115 = phi i64 [ 0, %108 ], [ %149, %114 ]
  %116 = phi i64 [ %109, %108 ], [ %150, %114 ]
  %117 = sub i64 0, %115
  %118 = sub i64 0, %115
  %119 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %110, i64 %117
  %120 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %111, i64 %118
  %121 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %120, i64 -1
  %122 = bitcast %"class.sh::TField"** %121 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 8, !alias.scope !23
  %124 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %120, i64 -2
  %125 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %124, i64 -1
  %126 = bitcast %"class.sh::TField"** %125 to <2 x i64>*
  %127 = load <2 x i64>, <2 x i64>* %126, align 8, !alias.scope !23
  %128 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %119, i64 -1
  %129 = bitcast %"class.sh::TField"** %128 to <2 x i64>*
  store <2 x i64> %123, <2 x i64>* %129, align 8, !alias.scope !26, !noalias !23
  %130 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %119, i64 -2
  %131 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %130, i64 -1
  %132 = bitcast %"class.sh::TField"** %131 to <2 x i64>*
  store <2 x i64> %127, <2 x i64>* %132, align 8, !alias.scope !26, !noalias !23
  %133 = sub nuw nsw i64 -4, %115
  %134 = sub nuw nsw i64 -4, %115
  %135 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %112, i64 %133
  %136 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %113, i64 %134
  %137 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %136, i64 -1
  %138 = bitcast %"class.sh::TField"** %137 to <2 x i64>*
  %139 = load <2 x i64>, <2 x i64>* %138, align 8, !alias.scope !23
  %140 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %136, i64 -2
  %141 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %140, i64 -1
  %142 = bitcast %"class.sh::TField"** %141 to <2 x i64>*
  %143 = load <2 x i64>, <2 x i64>* %142, align 8, !alias.scope !23
  %144 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %135, i64 -1
  %145 = bitcast %"class.sh::TField"** %144 to <2 x i64>*
  store <2 x i64> %139, <2 x i64>* %145, align 8, !alias.scope !26, !noalias !23
  %146 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %135, i64 -2
  %147 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %146, i64 -1
  %148 = bitcast %"class.sh::TField"** %147 to <2 x i64>*
  store <2 x i64> %143, <2 x i64>* %148, align 8, !alias.scope !26, !noalias !23
  %149 = add i64 %115, 8
  %150 = add i64 %116, -2
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %152, label %114, !llvm.loop !28

152:                                              ; preds = %114, %97
  %153 = phi i64 [ 0, %97 ], [ %149, %114 ]
  %154 = icmp eq i64 %106, 0
  br i1 %154, label %174, label %155

155:                                              ; preds = %152
  %156 = sub i64 0, %153
  %157 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %66, i64 -1
  %158 = sub i64 0, %153
  %159 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %75, i64 -1
  %160 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %157, i64 %156
  %161 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %159, i64 %158
  %162 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %161, i64 -1
  %163 = bitcast %"class.sh::TField"** %162 to <2 x i64>*
  %164 = load <2 x i64>, <2 x i64>* %163, align 8, !alias.scope !23
  %165 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %161, i64 -2
  %166 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %165, i64 -1
  %167 = bitcast %"class.sh::TField"** %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 8, !alias.scope !23
  %169 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %160, i64 -1
  %170 = bitcast %"class.sh::TField"** %169 to <2 x i64>*
  store <2 x i64> %164, <2 x i64>* %170, align 8, !alias.scope !26, !noalias !23
  %171 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %160, i64 -2
  %172 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %171, i64 -1
  %173 = bitcast %"class.sh::TField"** %172 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %173, align 8, !alias.scope !26, !noalias !23
  br label %174

174:                                              ; preds = %152, %155
  %175 = icmp eq i64 %82, %98
  br i1 %175, label %246, label %176

176:                                              ; preds = %174, %84, %77
  %177 = phi %"class.sh::TField"** [ %66, %84 ], [ %66, %77 ], [ %100, %174 ]
  %178 = phi %"class.sh::TField"** [ %75, %84 ], [ %75, %77 ], [ %102, %174 ]
  %179 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %178, i64 -1
  %180 = ptrtoint %"class.sh::TField"** %179 to i64
  %181 = sub i64 %180, %74
  %182 = lshr i64 %181, 3
  %183 = add nuw nsw i64 %182, 1
  %184 = and i64 %183, 7
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %197, label %186

186:                                              ; preds = %176, %186
  %187 = phi %"class.sh::TField"** [ %190, %186 ], [ %177, %176 ]
  %188 = phi %"class.sh::TField"** [ %191, %186 ], [ %178, %176 ]
  %189 = phi i64 [ %195, %186 ], [ %184, %176 ]
  %190 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %187, i64 -1
  %191 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %188, i64 -1
  %192 = bitcast %"class.sh::TField"** %191 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = bitcast %"class.sh::TField"** %190 to i64*
  store i64 %193, i64* %194, align 8
  %195 = add i64 %189, -1
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %197, label %186, !llvm.loop !29

197:                                              ; preds = %186, %176
  %198 = phi %"class.sh::TField"** [ undef, %176 ], [ %190, %186 ]
  %199 = phi %"class.sh::TField"** [ %177, %176 ], [ %190, %186 ]
  %200 = phi %"class.sh::TField"** [ %178, %176 ], [ %191, %186 ]
  %201 = icmp ult i64 %181, 56
  br i1 %201, label %246, label %202

202:                                              ; preds = %197, %202
  %203 = phi %"class.sh::TField"** [ %240, %202 ], [ %199, %197 ]
  %204 = phi %"class.sh::TField"** [ %241, %202 ], [ %200, %197 ]
  %205 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -1
  %206 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %204, i64 -1
  %207 = bitcast %"class.sh::TField"** %206 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = bitcast %"class.sh::TField"** %205 to i64*
  store i64 %208, i64* %209, align 8
  %210 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -2
  %211 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %204, i64 -2
  %212 = bitcast %"class.sh::TField"** %211 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = bitcast %"class.sh::TField"** %210 to i64*
  store i64 %213, i64* %214, align 8
  %215 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -3
  %216 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %204, i64 -3
  %217 = bitcast %"class.sh::TField"** %216 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = bitcast %"class.sh::TField"** %215 to i64*
  store i64 %218, i64* %219, align 8
  %220 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -4
  %221 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %204, i64 -4
  %222 = bitcast %"class.sh::TField"** %221 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = bitcast %"class.sh::TField"** %220 to i64*
  store i64 %223, i64* %224, align 8
  %225 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -5
  %226 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %204, i64 -5
  %227 = bitcast %"class.sh::TField"** %226 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = bitcast %"class.sh::TField"** %225 to i64*
  store i64 %228, i64* %229, align 8
  %230 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -6
  %231 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %204, i64 -6
  %232 = bitcast %"class.sh::TField"** %231 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = bitcast %"class.sh::TField"** %230 to i64*
  store i64 %233, i64* %234, align 8
  %235 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -7
  %236 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %204, i64 -7
  %237 = bitcast %"class.sh::TField"** %236 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = bitcast %"class.sh::TField"** %235 to i64*
  store i64 %238, i64* %239, align 8
  %240 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -8
  %241 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %204, i64 -8
  %242 = bitcast %"class.sh::TField"** %241 to i64*
  %243 = load i64, i64* %242, align 8
  %244 = bitcast %"class.sh::TField"** %240 to i64*
  store i64 %243, i64* %244, align 8
  %245 = icmp eq %"class.sh::TField"** %241, %73
  br i1 %245, label %246, label %202, !llvm.loop !30

246:                                              ; preds = %197, %202, %174, %63
  %247 = phi %"class.sh::TField"** [ %66, %63 ], [ %100, %174 ], [ %198, %197 ], [ %240, %202 ]
  %248 = ptrtoint %"class.sh::TField"** %247 to i64
  store i64 %248, i64* %39, align 8
  store i64 %71, i64* %38, align 8
  store i64 %68, i64* %48, align 8
  br label %249

249:                                              ; preds = %31, %246
  %250 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %251 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %250, i64 48) #5
  %252 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %253 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %252, i64 184) #5
  %254 = bitcast i8* %253 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* %254, i32 1, i32 3, i32 1, i8 zeroext 1, i8 zeroext 1) #5
  %255 = bitcast i8* %251 to i8**
  store i8* %253, i8** %255, align 8
  %256 = getelementptr inbounds i8, i8* %251, i64 8
  %257 = bitcast i8* %256 to i8**
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8** %257, align 8
  %258 = getelementptr inbounds i8, i8* %251, i64 16
  %259 = bitcast i8* %258 to i64*
  store i64 3, i64* %259, align 8
  %260 = getelementptr inbounds i8, i8* %251, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %260, i8 0, i64 16, i1 false)
  %261 = getelementptr inbounds i8, i8* %251, i64 40
  store i8 2, i8* %261, align 8
  %262 = ptrtoint i8* %251 to i64
  %263 = load %"class.sh::TField"**, %"class.sh::TField"*** %24, align 8
  %264 = load %"class.sh::TField"**, %"class.sh::TField"*** %27, align 8
  %265 = icmp ult %"class.sh::TField"** %263, %264
  %266 = ptrtoint %"class.sh::TField"** %264 to i64
  br i1 %265, label %267, label %272

267:                                              ; preds = %249
  %268 = bitcast %"class.sh::TField"** %263 to i64*
  store i64 %262, i64* %268, align 8
  %269 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %263, i64 1
  %270 = ptrtoint %"class.sh::TField"** %269 to i64
  %271 = bitcast i8* %23 to i64*
  store i64 %270, i64* %271, align 8
  br label %485

272:                                              ; preds = %249
  %273 = ptrtoint %"class.sh::TField"** %263 to i64
  %274 = bitcast i8* %23 to i64*
  %275 = bitcast i8* %8 to i64*
  %276 = load i64, i64* %275, align 8
  %277 = sub i64 %273, %276
  %278 = ashr exact i64 %277, 3
  %279 = add nsw i64 %278, 1
  %280 = icmp ugt i64 %279, 2305843009213693951
  br i1 %280, label %281, label %283

281:                                              ; preds = %272
  %282 = bitcast i8* %8 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %282) #6
  unreachable

283:                                              ; preds = %272
  %284 = bitcast i8* %26 to i64*
  %285 = sub i64 %266, %276
  %286 = ashr exact i64 %285, 3
  %287 = icmp ult i64 %286, 1152921504606846975
  br i1 %287, label %288, label %293

288:                                              ; preds = %283
  %289 = ashr exact i64 %285, 2
  %290 = icmp ult i64 %289, %279
  %291 = select i1 %290, i64 %279, i64 %289
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %299, label %293

293:                                              ; preds = %288, %283
  %294 = phi i64 [ %291, %288 ], [ 2305843009213693951, %283 ]
  %295 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %296 = shl i64 %294, 3
  %297 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %295, i64 %296) #5
  %298 = bitcast i8* %297 to %"class.sh::TField"**
  br label %299

299:                                              ; preds = %293, %288
  %300 = phi i64 [ %294, %293 ], [ 0, %288 ]
  %301 = phi %"class.sh::TField"** [ %298, %293 ], [ null, %288 ]
  %302 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %301, i64 %278
  %303 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %301, i64 %300
  %304 = ptrtoint %"class.sh::TField"** %303 to i64
  %305 = bitcast %"class.sh::TField"** %302 to i64*
  store i64 %262, i64* %305, align 8
  %306 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %302, i64 1
  %307 = ptrtoint %"class.sh::TField"** %306 to i64
  %308 = bitcast i8* %8 to %"class.sh::TField"***
  %309 = load %"class.sh::TField"**, %"class.sh::TField"*** %308, align 8
  %310 = ptrtoint %"class.sh::TField"** %309 to i64
  %311 = load %"class.sh::TField"**, %"class.sh::TField"*** %24, align 8
  %312 = icmp eq %"class.sh::TField"** %311, %309
  br i1 %312, label %482, label %313

313:                                              ; preds = %299
  %314 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %311, i64 -1
  %315 = ptrtoint %"class.sh::TField"** %314 to i64
  %316 = sub i64 %315, %310
  %317 = lshr i64 %316, 3
  %318 = add nuw nsw i64 %317, 1
  %319 = icmp ult i64 %318, 4
  br i1 %319, label %412, label %320

320:                                              ; preds = %313
  %321 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %311, i64 -1
  %322 = ptrtoint %"class.sh::TField"** %321 to i64
  %323 = sub i64 %322, %310
  %324 = lshr i64 %323, 3
  %325 = xor i64 %324, -1
  %326 = add nsw i64 %278, %325
  %327 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %301, i64 %326
  %328 = xor i64 %324, -1
  %329 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %311, i64 %328
  %330 = icmp ult %"class.sh::TField"** %327, %311
  %331 = icmp ult %"class.sh::TField"** %329, %302
  %332 = and i1 %330, %331
  br i1 %332, label %412, label %333

333:                                              ; preds = %320
  %334 = and i64 %318, 4611686018427387900
  %335 = sub nsw i64 0, %334
  %336 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %302, i64 %335
  %337 = sub nsw i64 0, %334
  %338 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %311, i64 %337
  %339 = add nsw i64 %334, -4
  %340 = lshr exact i64 %339, 2
  %341 = add nuw nsw i64 %340, 1
  %342 = and i64 %341, 1
  %343 = icmp eq i64 %339, 0
  br i1 %343, label %388, label %344

344:                                              ; preds = %333
  %345 = sub nuw nsw i64 %341, %342
  %346 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %302, i64 -1
  %347 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %311, i64 -1
  %348 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %302, i64 -1
  %349 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %311, i64 -1
  br label %350

350:                                              ; preds = %350, %344
  %351 = phi i64 [ 0, %344 ], [ %385, %350 ]
  %352 = phi i64 [ %345, %344 ], [ %386, %350 ]
  %353 = sub i64 0, %351
  %354 = sub i64 0, %351
  %355 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %346, i64 %353
  %356 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %347, i64 %354
  %357 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %356, i64 -1
  %358 = bitcast %"class.sh::TField"** %357 to <2 x i64>*
  %359 = load <2 x i64>, <2 x i64>* %358, align 8, !alias.scope !31
  %360 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %356, i64 -2
  %361 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %360, i64 -1
  %362 = bitcast %"class.sh::TField"** %361 to <2 x i64>*
  %363 = load <2 x i64>, <2 x i64>* %362, align 8, !alias.scope !31
  %364 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %355, i64 -1
  %365 = bitcast %"class.sh::TField"** %364 to <2 x i64>*
  store <2 x i64> %359, <2 x i64>* %365, align 8, !alias.scope !34, !noalias !31
  %366 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %355, i64 -2
  %367 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %366, i64 -1
  %368 = bitcast %"class.sh::TField"** %367 to <2 x i64>*
  store <2 x i64> %363, <2 x i64>* %368, align 8, !alias.scope !34, !noalias !31
  %369 = sub nuw nsw i64 -4, %351
  %370 = sub nuw nsw i64 -4, %351
  %371 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %348, i64 %369
  %372 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %349, i64 %370
  %373 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %372, i64 -1
  %374 = bitcast %"class.sh::TField"** %373 to <2 x i64>*
  %375 = load <2 x i64>, <2 x i64>* %374, align 8, !alias.scope !31
  %376 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %372, i64 -2
  %377 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %376, i64 -1
  %378 = bitcast %"class.sh::TField"** %377 to <2 x i64>*
  %379 = load <2 x i64>, <2 x i64>* %378, align 8, !alias.scope !31
  %380 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %371, i64 -1
  %381 = bitcast %"class.sh::TField"** %380 to <2 x i64>*
  store <2 x i64> %375, <2 x i64>* %381, align 8, !alias.scope !34, !noalias !31
  %382 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %371, i64 -2
  %383 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %382, i64 -1
  %384 = bitcast %"class.sh::TField"** %383 to <2 x i64>*
  store <2 x i64> %379, <2 x i64>* %384, align 8, !alias.scope !34, !noalias !31
  %385 = add i64 %351, 8
  %386 = add i64 %352, -2
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %388, label %350, !llvm.loop !36

388:                                              ; preds = %350, %333
  %389 = phi i64 [ 0, %333 ], [ %385, %350 ]
  %390 = icmp eq i64 %342, 0
  br i1 %390, label %410, label %391

391:                                              ; preds = %388
  %392 = sub i64 0, %389
  %393 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %302, i64 -1
  %394 = sub i64 0, %389
  %395 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %311, i64 -1
  %396 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %393, i64 %392
  %397 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %395, i64 %394
  %398 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %397, i64 -1
  %399 = bitcast %"class.sh::TField"** %398 to <2 x i64>*
  %400 = load <2 x i64>, <2 x i64>* %399, align 8, !alias.scope !31
  %401 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %397, i64 -2
  %402 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %401, i64 -1
  %403 = bitcast %"class.sh::TField"** %402 to <2 x i64>*
  %404 = load <2 x i64>, <2 x i64>* %403, align 8, !alias.scope !31
  %405 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %396, i64 -1
  %406 = bitcast %"class.sh::TField"** %405 to <2 x i64>*
  store <2 x i64> %400, <2 x i64>* %406, align 8, !alias.scope !34, !noalias !31
  %407 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %396, i64 -2
  %408 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %407, i64 -1
  %409 = bitcast %"class.sh::TField"** %408 to <2 x i64>*
  store <2 x i64> %404, <2 x i64>* %409, align 8, !alias.scope !34, !noalias !31
  br label %410

410:                                              ; preds = %388, %391
  %411 = icmp eq i64 %318, %334
  br i1 %411, label %482, label %412

412:                                              ; preds = %410, %320, %313
  %413 = phi %"class.sh::TField"** [ %302, %320 ], [ %302, %313 ], [ %336, %410 ]
  %414 = phi %"class.sh::TField"** [ %311, %320 ], [ %311, %313 ], [ %338, %410 ]
  %415 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %414, i64 -1
  %416 = ptrtoint %"class.sh::TField"** %415 to i64
  %417 = sub i64 %416, %310
  %418 = lshr i64 %417, 3
  %419 = add nuw nsw i64 %418, 1
  %420 = and i64 %419, 7
  %421 = icmp eq i64 %420, 0
  br i1 %421, label %433, label %422

422:                                              ; preds = %412, %422
  %423 = phi %"class.sh::TField"** [ %426, %422 ], [ %413, %412 ]
  %424 = phi %"class.sh::TField"** [ %427, %422 ], [ %414, %412 ]
  %425 = phi i64 [ %431, %422 ], [ %420, %412 ]
  %426 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %423, i64 -1
  %427 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %424, i64 -1
  %428 = bitcast %"class.sh::TField"** %427 to i64*
  %429 = load i64, i64* %428, align 8
  %430 = bitcast %"class.sh::TField"** %426 to i64*
  store i64 %429, i64* %430, align 8
  %431 = add i64 %425, -1
  %432 = icmp eq i64 %431, 0
  br i1 %432, label %433, label %422, !llvm.loop !37

433:                                              ; preds = %422, %412
  %434 = phi %"class.sh::TField"** [ undef, %412 ], [ %426, %422 ]
  %435 = phi %"class.sh::TField"** [ %413, %412 ], [ %426, %422 ]
  %436 = phi %"class.sh::TField"** [ %414, %412 ], [ %427, %422 ]
  %437 = icmp ult i64 %417, 56
  br i1 %437, label %482, label %438

438:                                              ; preds = %433, %438
  %439 = phi %"class.sh::TField"** [ %476, %438 ], [ %435, %433 ]
  %440 = phi %"class.sh::TField"** [ %477, %438 ], [ %436, %433 ]
  %441 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %439, i64 -1
  %442 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %440, i64 -1
  %443 = bitcast %"class.sh::TField"** %442 to i64*
  %444 = load i64, i64* %443, align 8
  %445 = bitcast %"class.sh::TField"** %441 to i64*
  store i64 %444, i64* %445, align 8
  %446 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %439, i64 -2
  %447 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %440, i64 -2
  %448 = bitcast %"class.sh::TField"** %447 to i64*
  %449 = load i64, i64* %448, align 8
  %450 = bitcast %"class.sh::TField"** %446 to i64*
  store i64 %449, i64* %450, align 8
  %451 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %439, i64 -3
  %452 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %440, i64 -3
  %453 = bitcast %"class.sh::TField"** %452 to i64*
  %454 = load i64, i64* %453, align 8
  %455 = bitcast %"class.sh::TField"** %451 to i64*
  store i64 %454, i64* %455, align 8
  %456 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %439, i64 -4
  %457 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %440, i64 -4
  %458 = bitcast %"class.sh::TField"** %457 to i64*
  %459 = load i64, i64* %458, align 8
  %460 = bitcast %"class.sh::TField"** %456 to i64*
  store i64 %459, i64* %460, align 8
  %461 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %439, i64 -5
  %462 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %440, i64 -5
  %463 = bitcast %"class.sh::TField"** %462 to i64*
  %464 = load i64, i64* %463, align 8
  %465 = bitcast %"class.sh::TField"** %461 to i64*
  store i64 %464, i64* %465, align 8
  %466 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %439, i64 -6
  %467 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %440, i64 -6
  %468 = bitcast %"class.sh::TField"** %467 to i64*
  %469 = load i64, i64* %468, align 8
  %470 = bitcast %"class.sh::TField"** %466 to i64*
  store i64 %469, i64* %470, align 8
  %471 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %439, i64 -7
  %472 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %440, i64 -7
  %473 = bitcast %"class.sh::TField"** %472 to i64*
  %474 = load i64, i64* %473, align 8
  %475 = bitcast %"class.sh::TField"** %471 to i64*
  store i64 %474, i64* %475, align 8
  %476 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %439, i64 -8
  %477 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %440, i64 -8
  %478 = bitcast %"class.sh::TField"** %477 to i64*
  %479 = load i64, i64* %478, align 8
  %480 = bitcast %"class.sh::TField"** %476 to i64*
  store i64 %479, i64* %480, align 8
  %481 = icmp eq %"class.sh::TField"** %477, %309
  br i1 %481, label %482, label %438, !llvm.loop !38

482:                                              ; preds = %433, %438, %410, %299
  %483 = phi %"class.sh::TField"** [ %302, %299 ], [ %336, %410 ], [ %434, %433 ], [ %476, %438 ]
  %484 = ptrtoint %"class.sh::TField"** %483 to i64
  store i64 %484, i64* %275, align 8
  store i64 %307, i64* %274, align 8
  store i64 %304, i64* %284, align 8
  br label %485

485:                                              ; preds = %267, %482
  %486 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %487 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %486, i64 48) #5
  %488 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %489 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %488, i64 184) #5
  %490 = bitcast i8* %489 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* %490, i32 1, i32 3, i32 1, i8 zeroext 1, i8 zeroext 1) #5
  %491 = bitcast i8* %487 to i8**
  store i8* %489, i8** %491, align 8
  %492 = getelementptr inbounds i8, i8* %487, i64 8
  %493 = bitcast i8* %492 to i8**
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8** %493, align 8
  %494 = getelementptr inbounds i8, i8* %487, i64 16
  %495 = bitcast i8* %494 to i64*
  store i64 4, i64* %495, align 8
  %496 = getelementptr inbounds i8, i8* %487, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %496, i8 0, i64 16, i1 false)
  %497 = getelementptr inbounds i8, i8* %487, i64 40
  store i8 2, i8* %497, align 8
  %498 = ptrtoint i8* %487 to i64
  %499 = load %"class.sh::TField"**, %"class.sh::TField"*** %24, align 8
  %500 = load %"class.sh::TField"**, %"class.sh::TField"*** %27, align 8
  %501 = icmp ult %"class.sh::TField"** %499, %500
  %502 = ptrtoint %"class.sh::TField"** %500 to i64
  br i1 %501, label %503, label %508

503:                                              ; preds = %485
  %504 = bitcast %"class.sh::TField"** %499 to i64*
  store i64 %498, i64* %504, align 8
  %505 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %499, i64 1
  %506 = ptrtoint %"class.sh::TField"** %505 to i64
  %507 = bitcast i8* %23 to i64*
  store i64 %506, i64* %507, align 8
  br label %721

508:                                              ; preds = %485
  %509 = ptrtoint %"class.sh::TField"** %499 to i64
  %510 = bitcast i8* %23 to i64*
  %511 = bitcast i8* %8 to i64*
  %512 = load i64, i64* %511, align 8
  %513 = sub i64 %509, %512
  %514 = ashr exact i64 %513, 3
  %515 = add nsw i64 %514, 1
  %516 = icmp ugt i64 %515, 2305843009213693951
  br i1 %516, label %517, label %519

517:                                              ; preds = %508
  %518 = bitcast i8* %8 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %518) #6
  unreachable

519:                                              ; preds = %508
  %520 = bitcast i8* %26 to i64*
  %521 = sub i64 %502, %512
  %522 = ashr exact i64 %521, 3
  %523 = icmp ult i64 %522, 1152921504606846975
  br i1 %523, label %524, label %529

524:                                              ; preds = %519
  %525 = ashr exact i64 %521, 2
  %526 = icmp ult i64 %525, %515
  %527 = select i1 %526, i64 %515, i64 %525
  %528 = icmp eq i64 %527, 0
  br i1 %528, label %535, label %529

529:                                              ; preds = %524, %519
  %530 = phi i64 [ %527, %524 ], [ 2305843009213693951, %519 ]
  %531 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %532 = shl i64 %530, 3
  %533 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %531, i64 %532) #5
  %534 = bitcast i8* %533 to %"class.sh::TField"**
  br label %535

535:                                              ; preds = %529, %524
  %536 = phi i64 [ %530, %529 ], [ 0, %524 ]
  %537 = phi %"class.sh::TField"** [ %534, %529 ], [ null, %524 ]
  %538 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %537, i64 %514
  %539 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %537, i64 %536
  %540 = ptrtoint %"class.sh::TField"** %539 to i64
  %541 = bitcast %"class.sh::TField"** %538 to i64*
  store i64 %498, i64* %541, align 8
  %542 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %538, i64 1
  %543 = ptrtoint %"class.sh::TField"** %542 to i64
  %544 = bitcast i8* %8 to %"class.sh::TField"***
  %545 = load %"class.sh::TField"**, %"class.sh::TField"*** %544, align 8
  %546 = ptrtoint %"class.sh::TField"** %545 to i64
  %547 = load %"class.sh::TField"**, %"class.sh::TField"*** %24, align 8
  %548 = icmp eq %"class.sh::TField"** %547, %545
  br i1 %548, label %718, label %549

549:                                              ; preds = %535
  %550 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %547, i64 -1
  %551 = ptrtoint %"class.sh::TField"** %550 to i64
  %552 = sub i64 %551, %546
  %553 = lshr i64 %552, 3
  %554 = add nuw nsw i64 %553, 1
  %555 = icmp ult i64 %554, 4
  br i1 %555, label %648, label %556

556:                                              ; preds = %549
  %557 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %547, i64 -1
  %558 = ptrtoint %"class.sh::TField"** %557 to i64
  %559 = sub i64 %558, %546
  %560 = lshr i64 %559, 3
  %561 = xor i64 %560, -1
  %562 = add nsw i64 %514, %561
  %563 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %537, i64 %562
  %564 = xor i64 %560, -1
  %565 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %547, i64 %564
  %566 = icmp ult %"class.sh::TField"** %563, %547
  %567 = icmp ult %"class.sh::TField"** %565, %538
  %568 = and i1 %566, %567
  br i1 %568, label %648, label %569

569:                                              ; preds = %556
  %570 = and i64 %554, 4611686018427387900
  %571 = sub nsw i64 0, %570
  %572 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %538, i64 %571
  %573 = sub nsw i64 0, %570
  %574 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %547, i64 %573
  %575 = add nsw i64 %570, -4
  %576 = lshr exact i64 %575, 2
  %577 = add nuw nsw i64 %576, 1
  %578 = and i64 %577, 1
  %579 = icmp eq i64 %575, 0
  br i1 %579, label %624, label %580

580:                                              ; preds = %569
  %581 = sub nuw nsw i64 %577, %578
  %582 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %538, i64 -1
  %583 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %547, i64 -1
  %584 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %538, i64 -1
  %585 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %547, i64 -1
  br label %586

586:                                              ; preds = %586, %580
  %587 = phi i64 [ 0, %580 ], [ %621, %586 ]
  %588 = phi i64 [ %581, %580 ], [ %622, %586 ]
  %589 = sub i64 0, %587
  %590 = sub i64 0, %587
  %591 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %582, i64 %589
  %592 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %583, i64 %590
  %593 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %592, i64 -1
  %594 = bitcast %"class.sh::TField"** %593 to <2 x i64>*
  %595 = load <2 x i64>, <2 x i64>* %594, align 8, !alias.scope !39
  %596 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %592, i64 -2
  %597 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %596, i64 -1
  %598 = bitcast %"class.sh::TField"** %597 to <2 x i64>*
  %599 = load <2 x i64>, <2 x i64>* %598, align 8, !alias.scope !39
  %600 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %591, i64 -1
  %601 = bitcast %"class.sh::TField"** %600 to <2 x i64>*
  store <2 x i64> %595, <2 x i64>* %601, align 8, !alias.scope !42, !noalias !39
  %602 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %591, i64 -2
  %603 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %602, i64 -1
  %604 = bitcast %"class.sh::TField"** %603 to <2 x i64>*
  store <2 x i64> %599, <2 x i64>* %604, align 8, !alias.scope !42, !noalias !39
  %605 = sub nuw nsw i64 -4, %587
  %606 = sub nuw nsw i64 -4, %587
  %607 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %584, i64 %605
  %608 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %585, i64 %606
  %609 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %608, i64 -1
  %610 = bitcast %"class.sh::TField"** %609 to <2 x i64>*
  %611 = load <2 x i64>, <2 x i64>* %610, align 8, !alias.scope !39
  %612 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %608, i64 -2
  %613 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %612, i64 -1
  %614 = bitcast %"class.sh::TField"** %613 to <2 x i64>*
  %615 = load <2 x i64>, <2 x i64>* %614, align 8, !alias.scope !39
  %616 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %607, i64 -1
  %617 = bitcast %"class.sh::TField"** %616 to <2 x i64>*
  store <2 x i64> %611, <2 x i64>* %617, align 8, !alias.scope !42, !noalias !39
  %618 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %607, i64 -2
  %619 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %618, i64 -1
  %620 = bitcast %"class.sh::TField"** %619 to <2 x i64>*
  store <2 x i64> %615, <2 x i64>* %620, align 8, !alias.scope !42, !noalias !39
  %621 = add i64 %587, 8
  %622 = add i64 %588, -2
  %623 = icmp eq i64 %622, 0
  br i1 %623, label %624, label %586, !llvm.loop !44

624:                                              ; preds = %586, %569
  %625 = phi i64 [ 0, %569 ], [ %621, %586 ]
  %626 = icmp eq i64 %578, 0
  br i1 %626, label %646, label %627

627:                                              ; preds = %624
  %628 = sub i64 0, %625
  %629 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %538, i64 -1
  %630 = sub i64 0, %625
  %631 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %547, i64 -1
  %632 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %629, i64 %628
  %633 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %631, i64 %630
  %634 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %633, i64 -1
  %635 = bitcast %"class.sh::TField"** %634 to <2 x i64>*
  %636 = load <2 x i64>, <2 x i64>* %635, align 8, !alias.scope !39
  %637 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %633, i64 -2
  %638 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %637, i64 -1
  %639 = bitcast %"class.sh::TField"** %638 to <2 x i64>*
  %640 = load <2 x i64>, <2 x i64>* %639, align 8, !alias.scope !39
  %641 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %632, i64 -1
  %642 = bitcast %"class.sh::TField"** %641 to <2 x i64>*
  store <2 x i64> %636, <2 x i64>* %642, align 8, !alias.scope !42, !noalias !39
  %643 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %632, i64 -2
  %644 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %643, i64 -1
  %645 = bitcast %"class.sh::TField"** %644 to <2 x i64>*
  store <2 x i64> %640, <2 x i64>* %645, align 8, !alias.scope !42, !noalias !39
  br label %646

646:                                              ; preds = %624, %627
  %647 = icmp eq i64 %554, %570
  br i1 %647, label %718, label %648

648:                                              ; preds = %646, %556, %549
  %649 = phi %"class.sh::TField"** [ %538, %556 ], [ %538, %549 ], [ %572, %646 ]
  %650 = phi %"class.sh::TField"** [ %547, %556 ], [ %547, %549 ], [ %574, %646 ]
  %651 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %650, i64 -1
  %652 = ptrtoint %"class.sh::TField"** %651 to i64
  %653 = sub i64 %652, %546
  %654 = lshr i64 %653, 3
  %655 = add nuw nsw i64 %654, 1
  %656 = and i64 %655, 7
  %657 = icmp eq i64 %656, 0
  br i1 %657, label %669, label %658

658:                                              ; preds = %648, %658
  %659 = phi %"class.sh::TField"** [ %662, %658 ], [ %649, %648 ]
  %660 = phi %"class.sh::TField"** [ %663, %658 ], [ %650, %648 ]
  %661 = phi i64 [ %667, %658 ], [ %656, %648 ]
  %662 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %659, i64 -1
  %663 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %660, i64 -1
  %664 = bitcast %"class.sh::TField"** %663 to i64*
  %665 = load i64, i64* %664, align 8
  %666 = bitcast %"class.sh::TField"** %662 to i64*
  store i64 %665, i64* %666, align 8
  %667 = add i64 %661, -1
  %668 = icmp eq i64 %667, 0
  br i1 %668, label %669, label %658, !llvm.loop !45

669:                                              ; preds = %658, %648
  %670 = phi %"class.sh::TField"** [ undef, %648 ], [ %662, %658 ]
  %671 = phi %"class.sh::TField"** [ %649, %648 ], [ %662, %658 ]
  %672 = phi %"class.sh::TField"** [ %650, %648 ], [ %663, %658 ]
  %673 = icmp ult i64 %653, 56
  br i1 %673, label %718, label %674

674:                                              ; preds = %669, %674
  %675 = phi %"class.sh::TField"** [ %712, %674 ], [ %671, %669 ]
  %676 = phi %"class.sh::TField"** [ %713, %674 ], [ %672, %669 ]
  %677 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %675, i64 -1
  %678 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %676, i64 -1
  %679 = bitcast %"class.sh::TField"** %678 to i64*
  %680 = load i64, i64* %679, align 8
  %681 = bitcast %"class.sh::TField"** %677 to i64*
  store i64 %680, i64* %681, align 8
  %682 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %675, i64 -2
  %683 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %676, i64 -2
  %684 = bitcast %"class.sh::TField"** %683 to i64*
  %685 = load i64, i64* %684, align 8
  %686 = bitcast %"class.sh::TField"** %682 to i64*
  store i64 %685, i64* %686, align 8
  %687 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %675, i64 -3
  %688 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %676, i64 -3
  %689 = bitcast %"class.sh::TField"** %688 to i64*
  %690 = load i64, i64* %689, align 8
  %691 = bitcast %"class.sh::TField"** %687 to i64*
  store i64 %690, i64* %691, align 8
  %692 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %675, i64 -4
  %693 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %676, i64 -4
  %694 = bitcast %"class.sh::TField"** %693 to i64*
  %695 = load i64, i64* %694, align 8
  %696 = bitcast %"class.sh::TField"** %692 to i64*
  store i64 %695, i64* %696, align 8
  %697 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %675, i64 -5
  %698 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %676, i64 -5
  %699 = bitcast %"class.sh::TField"** %698 to i64*
  %700 = load i64, i64* %699, align 8
  %701 = bitcast %"class.sh::TField"** %697 to i64*
  store i64 %700, i64* %701, align 8
  %702 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %675, i64 -6
  %703 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %676, i64 -6
  %704 = bitcast %"class.sh::TField"** %703 to i64*
  %705 = load i64, i64* %704, align 8
  %706 = bitcast %"class.sh::TField"** %702 to i64*
  store i64 %705, i64* %706, align 8
  %707 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %675, i64 -7
  %708 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %676, i64 -7
  %709 = bitcast %"class.sh::TField"** %708 to i64*
  %710 = load i64, i64* %709, align 8
  %711 = bitcast %"class.sh::TField"** %707 to i64*
  store i64 %710, i64* %711, align 8
  %712 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %675, i64 -8
  %713 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %676, i64 -8
  %714 = bitcast %"class.sh::TField"** %713 to i64*
  %715 = load i64, i64* %714, align 8
  %716 = bitcast %"class.sh::TField"** %712 to i64*
  store i64 %715, i64* %716, align 8
  %717 = icmp eq %"class.sh::TField"** %713, %545
  br i1 %717, label %718, label %674, !llvm.loop !46

718:                                              ; preds = %669, %674, %646, %535
  %719 = phi %"class.sh::TField"** [ %538, %535 ], [ %572, %646 ], [ %670, %669 ], [ %712, %674 ]
  %720 = ptrtoint %"class.sh::TField"** %719 to i64
  store i64 %720, i64* %511, align 8
  store i64 %543, i64* %510, align 8
  store i64 %540, i64* %520, align 8
  br label %721

721:                                              ; preds = %503, %718
  %722 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %723 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %722, i64 48) #5
  %724 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %725 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %724, i64 184) #5
  %726 = bitcast i8* %725 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* %726, i32 1, i32 3, i32 1, i8 zeroext 1, i8 zeroext 1) #5
  %727 = bitcast i8* %723 to i8**
  store i8* %725, i8** %727, align 8
  %728 = getelementptr inbounds i8, i8* %723, i64 8
  %729 = bitcast i8* %728 to i8**
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i8** %729, align 8
  %730 = getelementptr inbounds i8, i8* %723, i64 16
  %731 = bitcast i8* %730 to i64*
  store i64 8, i64* %731, align 8
  %732 = getelementptr inbounds i8, i8* %723, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %732, i8 0, i64 16, i1 false)
  %733 = getelementptr inbounds i8, i8* %723, i64 40
  store i8 2, i8* %733, align 8
  %734 = ptrtoint i8* %723 to i64
  %735 = load %"class.sh::TField"**, %"class.sh::TField"*** %24, align 8
  %736 = load %"class.sh::TField"**, %"class.sh::TField"*** %27, align 8
  %737 = icmp ult %"class.sh::TField"** %735, %736
  %738 = ptrtoint %"class.sh::TField"** %736 to i64
  br i1 %737, label %739, label %744

739:                                              ; preds = %721
  %740 = bitcast %"class.sh::TField"** %735 to i64*
  store i64 %734, i64* %740, align 8
  %741 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %735, i64 1
  %742 = ptrtoint %"class.sh::TField"** %741 to i64
  %743 = bitcast i8* %23 to i64*
  store i64 %742, i64* %743, align 8
  br label %957

744:                                              ; preds = %721
  %745 = ptrtoint %"class.sh::TField"** %735 to i64
  %746 = bitcast i8* %23 to i64*
  %747 = bitcast i8* %8 to i64*
  %748 = load i64, i64* %747, align 8
  %749 = sub i64 %745, %748
  %750 = ashr exact i64 %749, 3
  %751 = add nsw i64 %750, 1
  %752 = icmp ugt i64 %751, 2305843009213693951
  br i1 %752, label %753, label %755

753:                                              ; preds = %744
  %754 = bitcast i8* %8 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %754) #6
  unreachable

755:                                              ; preds = %744
  %756 = bitcast i8* %26 to i64*
  %757 = sub i64 %738, %748
  %758 = ashr exact i64 %757, 3
  %759 = icmp ult i64 %758, 1152921504606846975
  br i1 %759, label %760, label %765

760:                                              ; preds = %755
  %761 = ashr exact i64 %757, 2
  %762 = icmp ult i64 %761, %751
  %763 = select i1 %762, i64 %751, i64 %761
  %764 = icmp eq i64 %763, 0
  br i1 %764, label %771, label %765

765:                                              ; preds = %760, %755
  %766 = phi i64 [ %763, %760 ], [ 2305843009213693951, %755 ]
  %767 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %768 = shl i64 %766, 3
  %769 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %767, i64 %768) #5
  %770 = bitcast i8* %769 to %"class.sh::TField"**
  br label %771

771:                                              ; preds = %765, %760
  %772 = phi i64 [ %766, %765 ], [ 0, %760 ]
  %773 = phi %"class.sh::TField"** [ %770, %765 ], [ null, %760 ]
  %774 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %773, i64 %750
  %775 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %773, i64 %772
  %776 = ptrtoint %"class.sh::TField"** %775 to i64
  %777 = bitcast %"class.sh::TField"** %774 to i64*
  store i64 %734, i64* %777, align 8
  %778 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %774, i64 1
  %779 = ptrtoint %"class.sh::TField"** %778 to i64
  %780 = bitcast i8* %8 to %"class.sh::TField"***
  %781 = load %"class.sh::TField"**, %"class.sh::TField"*** %780, align 8
  %782 = ptrtoint %"class.sh::TField"** %781 to i64
  %783 = load %"class.sh::TField"**, %"class.sh::TField"*** %24, align 8
  %784 = icmp eq %"class.sh::TField"** %783, %781
  br i1 %784, label %954, label %785

785:                                              ; preds = %771
  %786 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %783, i64 -1
  %787 = ptrtoint %"class.sh::TField"** %786 to i64
  %788 = sub i64 %787, %782
  %789 = lshr i64 %788, 3
  %790 = add nuw nsw i64 %789, 1
  %791 = icmp ult i64 %790, 4
  br i1 %791, label %884, label %792

792:                                              ; preds = %785
  %793 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %783, i64 -1
  %794 = ptrtoint %"class.sh::TField"** %793 to i64
  %795 = sub i64 %794, %782
  %796 = lshr i64 %795, 3
  %797 = xor i64 %796, -1
  %798 = add nsw i64 %750, %797
  %799 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %773, i64 %798
  %800 = xor i64 %796, -1
  %801 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %783, i64 %800
  %802 = icmp ult %"class.sh::TField"** %799, %783
  %803 = icmp ult %"class.sh::TField"** %801, %774
  %804 = and i1 %802, %803
  br i1 %804, label %884, label %805

805:                                              ; preds = %792
  %806 = and i64 %790, 4611686018427387900
  %807 = sub nsw i64 0, %806
  %808 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %774, i64 %807
  %809 = sub nsw i64 0, %806
  %810 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %783, i64 %809
  %811 = add nsw i64 %806, -4
  %812 = lshr exact i64 %811, 2
  %813 = add nuw nsw i64 %812, 1
  %814 = and i64 %813, 1
  %815 = icmp eq i64 %811, 0
  br i1 %815, label %862, label %816

816:                                              ; preds = %805
  %817 = sub nuw nsw i64 %813, %814
  %818 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %774, i64 -1
  %819 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %783, i64 -1
  %820 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %774, i64 -1
  %821 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %783, i64 -1
  br label %822

822:                                              ; preds = %822, %816
  %823 = phi i64 [ 0, %816 ], [ %857, %822 ]
  %824 = phi i64 [ %817, %816 ], [ %858, %822 ]
  %825 = sub i64 0, %823
  %826 = sub i64 0, %823
  %827 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %818, i64 %825
  %828 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %819, i64 %826
  %829 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %828, i64 -1
  %830 = bitcast %"class.sh::TField"** %829 to <2 x i64>*
  %831 = load <2 x i64>, <2 x i64>* %830, align 8, !alias.scope !47
  %832 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %828, i64 -2
  %833 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %832, i64 -1
  %834 = bitcast %"class.sh::TField"** %833 to <2 x i64>*
  %835 = load <2 x i64>, <2 x i64>* %834, align 8, !alias.scope !47
  %836 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %827, i64 -1
  %837 = bitcast %"class.sh::TField"** %836 to <2 x i64>*
  store <2 x i64> %831, <2 x i64>* %837, align 8, !alias.scope !50, !noalias !47
  %838 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %827, i64 -2
  %839 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %838, i64 -1
  %840 = bitcast %"class.sh::TField"** %839 to <2 x i64>*
  store <2 x i64> %835, <2 x i64>* %840, align 8, !alias.scope !50, !noalias !47
  %841 = sub nuw nsw i64 -4, %823
  %842 = sub nuw nsw i64 -4, %823
  %843 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %820, i64 %841
  %844 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %821, i64 %842
  %845 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %844, i64 -1
  %846 = bitcast %"class.sh::TField"** %845 to <2 x i64>*
  %847 = load <2 x i64>, <2 x i64>* %846, align 8, !alias.scope !47
  %848 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %844, i64 -2
  %849 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %848, i64 -1
  %850 = bitcast %"class.sh::TField"** %849 to <2 x i64>*
  %851 = load <2 x i64>, <2 x i64>* %850, align 8, !alias.scope !47
  %852 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %843, i64 -1
  %853 = bitcast %"class.sh::TField"** %852 to <2 x i64>*
  store <2 x i64> %847, <2 x i64>* %853, align 8, !alias.scope !50, !noalias !47
  %854 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %843, i64 -2
  %855 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %854, i64 -1
  %856 = bitcast %"class.sh::TField"** %855 to <2 x i64>*
  store <2 x i64> %851, <2 x i64>* %856, align 8, !alias.scope !50, !noalias !47
  %857 = add i64 %823, 8
  %858 = add i64 %824, -2
  %859 = icmp eq i64 %858, 0
  br i1 %859, label %860, label %822, !llvm.loop !52

860:                                              ; preds = %822
  %861 = sub nuw nsw i64 -8, %823
  br label %862

862:                                              ; preds = %860, %805
  %863 = phi i64 [ 0, %805 ], [ %861, %860 ]
  %864 = icmp eq i64 %814, 0
  br i1 %864, label %882, label %865

865:                                              ; preds = %862
  %866 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %774, i64 -1
  %867 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %783, i64 -1
  %868 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %866, i64 %863
  %869 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %867, i64 %863
  %870 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %869, i64 -1
  %871 = bitcast %"class.sh::TField"** %870 to <2 x i64>*
  %872 = load <2 x i64>, <2 x i64>* %871, align 8, !alias.scope !47
  %873 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %869, i64 -2
  %874 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %873, i64 -1
  %875 = bitcast %"class.sh::TField"** %874 to <2 x i64>*
  %876 = load <2 x i64>, <2 x i64>* %875, align 8, !alias.scope !47
  %877 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %868, i64 -1
  %878 = bitcast %"class.sh::TField"** %877 to <2 x i64>*
  store <2 x i64> %872, <2 x i64>* %878, align 8, !alias.scope !50, !noalias !47
  %879 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %868, i64 -2
  %880 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %879, i64 -1
  %881 = bitcast %"class.sh::TField"** %880 to <2 x i64>*
  store <2 x i64> %876, <2 x i64>* %881, align 8, !alias.scope !50, !noalias !47
  br label %882

882:                                              ; preds = %862, %865
  %883 = icmp eq i64 %790, %806
  br i1 %883, label %954, label %884

884:                                              ; preds = %882, %792, %785
  %885 = phi %"class.sh::TField"** [ %774, %792 ], [ %774, %785 ], [ %808, %882 ]
  %886 = phi %"class.sh::TField"** [ %783, %792 ], [ %783, %785 ], [ %810, %882 ]
  %887 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %886, i64 -1
  %888 = ptrtoint %"class.sh::TField"** %887 to i64
  %889 = sub i64 %888, %782
  %890 = lshr i64 %889, 3
  %891 = add nuw nsw i64 %890, 1
  %892 = and i64 %891, 7
  %893 = icmp eq i64 %892, 0
  br i1 %893, label %905, label %894

894:                                              ; preds = %884, %894
  %895 = phi %"class.sh::TField"** [ %898, %894 ], [ %885, %884 ]
  %896 = phi %"class.sh::TField"** [ %899, %894 ], [ %886, %884 ]
  %897 = phi i64 [ %903, %894 ], [ %892, %884 ]
  %898 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %895, i64 -1
  %899 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %896, i64 -1
  %900 = bitcast %"class.sh::TField"** %899 to i64*
  %901 = load i64, i64* %900, align 8
  %902 = bitcast %"class.sh::TField"** %898 to i64*
  store i64 %901, i64* %902, align 8
  %903 = add i64 %897, -1
  %904 = icmp eq i64 %903, 0
  br i1 %904, label %905, label %894, !llvm.loop !53

905:                                              ; preds = %894, %884
  %906 = phi %"class.sh::TField"** [ undef, %884 ], [ %898, %894 ]
  %907 = phi %"class.sh::TField"** [ %885, %884 ], [ %898, %894 ]
  %908 = phi %"class.sh::TField"** [ %886, %884 ], [ %899, %894 ]
  %909 = icmp ult i64 %889, 56
  br i1 %909, label %954, label %910

910:                                              ; preds = %905, %910
  %911 = phi %"class.sh::TField"** [ %948, %910 ], [ %907, %905 ]
  %912 = phi %"class.sh::TField"** [ %949, %910 ], [ %908, %905 ]
  %913 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %911, i64 -1
  %914 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %912, i64 -1
  %915 = bitcast %"class.sh::TField"** %914 to i64*
  %916 = load i64, i64* %915, align 8
  %917 = bitcast %"class.sh::TField"** %913 to i64*
  store i64 %916, i64* %917, align 8
  %918 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %911, i64 -2
  %919 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %912, i64 -2
  %920 = bitcast %"class.sh::TField"** %919 to i64*
  %921 = load i64, i64* %920, align 8
  %922 = bitcast %"class.sh::TField"** %918 to i64*
  store i64 %921, i64* %922, align 8
  %923 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %911, i64 -3
  %924 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %912, i64 -3
  %925 = bitcast %"class.sh::TField"** %924 to i64*
  %926 = load i64, i64* %925, align 8
  %927 = bitcast %"class.sh::TField"** %923 to i64*
  store i64 %926, i64* %927, align 8
  %928 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %911, i64 -4
  %929 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %912, i64 -4
  %930 = bitcast %"class.sh::TField"** %929 to i64*
  %931 = load i64, i64* %930, align 8
  %932 = bitcast %"class.sh::TField"** %928 to i64*
  store i64 %931, i64* %932, align 8
  %933 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %911, i64 -5
  %934 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %912, i64 -5
  %935 = bitcast %"class.sh::TField"** %934 to i64*
  %936 = load i64, i64* %935, align 8
  %937 = bitcast %"class.sh::TField"** %933 to i64*
  store i64 %936, i64* %937, align 8
  %938 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %911, i64 -6
  %939 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %912, i64 -6
  %940 = bitcast %"class.sh::TField"** %939 to i64*
  %941 = load i64, i64* %940, align 8
  %942 = bitcast %"class.sh::TField"** %938 to i64*
  store i64 %941, i64* %942, align 8
  %943 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %911, i64 -7
  %944 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %912, i64 -7
  %945 = bitcast %"class.sh::TField"** %944 to i64*
  %946 = load i64, i64* %945, align 8
  %947 = bitcast %"class.sh::TField"** %943 to i64*
  store i64 %946, i64* %947, align 8
  %948 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %911, i64 -8
  %949 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %912, i64 -8
  %950 = bitcast %"class.sh::TField"** %949 to i64*
  %951 = load i64, i64* %950, align 8
  %952 = bitcast %"class.sh::TField"** %948 to i64*
  store i64 %951, i64* %952, align 8
  %953 = icmp eq %"class.sh::TField"** %949, %781
  br i1 %953, label %954, label %910, !llvm.loop !54

954:                                              ; preds = %905, %910, %882, %771
  %955 = phi %"class.sh::TField"** [ %774, %771 ], [ %808, %882 ], [ %906, %905 ], [ %948, %910 ]
  %956 = ptrtoint %"class.sh::TField"** %955 to i64
  store i64 %956, i64* %747, align 8
  store i64 %779, i64* %746, align 8
  store i64 %776, i64* %756, align 8
  br label %957

957:                                              ; preds = %739, %954
  %958 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %959 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %958, i64 80) #5
  %960 = bitcast i8* %959 to %"class.sh::TStructure"*
  tail call void @_ZN2sh10TStructureC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_7TVectorIPNS_6TFieldEEENS_10SymbolTypeE(%"class.sh::TStructure"* %960, %"class.sh::TSymbolTable"* %1, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_125kEmulatedDepthRangeParamsE, %"class.sh::TVector.0"* %14, i8 zeroext 2) #5
  %961 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %962 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %961, i64 184) #5
  %963 = bitcast i8* %962 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1EPKNS_10TStructureEb(%"class.sh::TType"* %963, %"class.sh::TStructure"* %960, i1 zeroext false) #5
  %964 = bitcast %"class.sh::TType"** %3 to i8**
  store i8* %962, i8** %964, align 8
  br label %965

965:                                              ; preds = %2, %957
  %966 = phi %"class.sh::TType"* [ %963, %957 ], [ %4, %2 ]
  ret %"class.sh::TType"* %966
}

declare void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"*, i32, i32, i32, i8 zeroext, i8 zeroext) unnamed_addr #2

declare void @_ZN2sh10TStructureC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_7TVectorIPNS_6TFieldEEENS_10SymbolTypeE(%"class.sh::TStructure"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TVector.0"*, i8 zeroext) unnamed_addr #2

declare void @_ZN2sh5TTypeC1EPKNS_10TStructureEb(%"class.sh::TType"*, %"class.sh::TStructure"*, i1 zeroext) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh13DriverUniform33addGraphicsDriverUniformsToShaderEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::DriverUniform"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TSymbolUniqueId", align 4
  %5 = alloca %"struct.sh::TLayoutQualifier", align 16
  %6 = alloca %"struct.sh::TMemoryQualifier", align 8
  %7 = alloca %"class.sh::ImmutableString", align 8
  %8 = alloca %"class.sh::ImmutableString", align 8
  %9 = tail call %"class.sh::TType"* @_ZN2sh13DriverUniform28createEmulatedDepthRangeTypeEPNS_12TSymbolTableE(%"class.sh::DriverUniform"* %0, %"class.sh::TSymbolTable"* %2)
  %10 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %11 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 184) #5
  %12 = bitcast i8* %11 to %"class.sh::TType"*
  %13 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %9, i64 0, i32 13
  %14 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %13, align 8
  tail call void @_ZN2sh5TTypeC1EPKNS_10TStructureEb(%"class.sh::TType"* %12, %"class.sh::TStructure"* %14, i1 zeroext true) #5
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 40) #5
  %17 = bitcast i8* %16 to %"class.sh::TVariable"*
  %18 = bitcast %"class.sh::TSymbolUniqueId"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18)
  call void @_ZN2sh15TSymbolUniqueIdC1EPNS_12TSymbolTableE(%"class.sh::TSymbolUniqueId"* nonnull %4, %"class.sh::TSymbolTable"* %2) #5
  %19 = getelementptr inbounds %"class.sh::TSymbolUniqueId", %"class.sh::TSymbolUniqueId"* %4, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%"class.sh::ImmutableString"* @_ZN2shL21kEmptyImmutableStringE to i8*), i64 16, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %16, i64 16
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 8
  %23 = getelementptr inbounds i8, i8* %16, i64 20
  store i8 3, i8* %23, align 4
  %24 = getelementptr inbounds i8, i8* %16, i64 21
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds i8, i8* %16, i64 22
  store i8 1, i8* %25, align 2
  %26 = getelementptr inbounds i8, i8* %16, i64 24
  %27 = bitcast i8* %26 to i8**
  store i8* %11, i8** %27, align 8
  %28 = getelementptr inbounds i8, i8* %16, i64 32
  %29 = bitcast i8* %28 to %"class.sh::TConstantUnion"**
  store %"class.sh::TConstantUnion"* null, %"class.sh::TConstantUnion"** %29, align 8
  call void @_ZN2sh21DeclareGlobalVariableEPNS_12TIntermBlockEPKNS_9TVariableE(%"class.sh::TIntermBlock"* %1, %"class.sh::TVariable"* %17) #5
  %30 = bitcast %"class.sh::DriverUniform"* %0 to %"class.sh::TVector.0"* (%"class.sh::DriverUniform"*, %"class.sh::TSymbolTable"*)***
  %31 = load %"class.sh::TVector.0"* (%"class.sh::DriverUniform"*, %"class.sh::TSymbolTable"*)**, %"class.sh::TVector.0"* (%"class.sh::DriverUniform"*, %"class.sh::TSymbolTable"*)*** %30, align 8
  %32 = getelementptr inbounds %"class.sh::TVector.0"* (%"class.sh::DriverUniform"*, %"class.sh::TSymbolTable"*)*, %"class.sh::TVector.0"* (%"class.sh::DriverUniform"*, %"class.sh::TSymbolTable"*)** %31, i64 7
  %33 = load %"class.sh::TVector.0"* (%"class.sh::DriverUniform"*, %"class.sh::TSymbolTable"*)*, %"class.sh::TVector.0"* (%"class.sh::DriverUniform"*, %"class.sh::TSymbolTable"*)** %32, align 8
  %34 = call %"class.sh::TVector.0"* %33(%"class.sh::DriverUniform"* %0, %"class.sh::TSymbolTable"* %2) #5
  %35 = bitcast %"struct.sh::TLayoutQualifier"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 92, i8* nonnull %35) #5
  %36 = bitcast %"struct.sh::TLayoutQualifier"* %5 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %36, align 16, !alias.scope !55
  %37 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %5, i64 0, i32 4, i32 0, i64 0
  %38 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %5, i64 0, i32 7
  %39 = bitcast i32* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %39, i8 -1, i64 20, i1 false) #5, !alias.scope !55
  store i32 0, i32* %38, align 4, !alias.scope !55
  %40 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %5, i64 0, i32 8
  store i32 -1, i32* %40, align 8, !alias.scope !55
  %41 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %5, i64 0, i32 9
  store i8 0, i8* %41, align 4, !alias.scope !55
  %42 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %5, i64 0, i32 10
  store i8 0, i8* %42, align 1, !alias.scope !55
  %43 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %5, i64 0, i32 12
  store i32 0, i32* %43, align 16, !alias.scope !55
  %44 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %5, i64 0, i32 13
  store i32 0, i32* %44, align 4, !alias.scope !55
  %45 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %5, i64 0, i32 14
  store i32 -1, i32* %45, align 8, !alias.scope !55
  %46 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %5, i64 0, i32 15
  %47 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %5, i64 0, i32 20
  %48 = bitcast i32* %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %48, i8 0, i64 20, i1 false) #5, !alias.scope !55
  store i32 -1, i32* %47, align 16, !alias.scope !55
  %49 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %5, i64 0, i32 21
  store i32 -1, i32* %49, align 4, !alias.scope !55
  %50 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %5, i64 0, i32 22
  store i8 0, i8* %50, align 8, !alias.scope !55
  %51 = getelementptr inbounds %"struct.sh::TMemoryQualifier", %"struct.sh::TMemoryQualifier"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %51) #5
  %52 = bitcast %"struct.sh::TMemoryQualifier"* %6 to i40*
  store i40 0, i40* %52, align 8
  %53 = bitcast %"class.sh::ImmutableString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53) #5
  %54 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %7, i64 0, i32 0
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk24kDriverUniformsBlockNameE, i64 0, i64 0), i8** %54, align 8
  br label %55

55:                                               ; preds = %55, %3
  %56 = phi i64 [ %60, %55 ], [ 0, %3 ]
  %57 = getelementptr inbounds [0 x i8], [0 x i8]* @_ZN2sh2vk24kDriverUniformsBlockNameE, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = icmp eq i8 %58, 0
  %60 = add i64 %56, 1
  br i1 %59, label %61, label %55

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %7, i64 0, i32 1
  store i64 %56, i64* %62, align 8
  %63 = bitcast %"class.sh::ImmutableString"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %63) #5
  %64 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %8, i64 0, i32 0
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk22kDriverUniformsVarNameE, i64 0, i64 0), i8** %64, align 8
  br label %65

65:                                               ; preds = %65, %61
  %66 = phi i64 [ %70, %65 ], [ 0, %61 ]
  %67 = getelementptr inbounds [0 x i8], [0 x i8]* @_ZN2sh2vk22kDriverUniformsVarNameE, i64 0, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, 0
  %70 = add i64 %66, 1
  br i1 %69, label %71, label %65

71:                                               ; preds = %65
  %72 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %8, i64 0, i32 1
  store i64 %66, i64* %72, align 8
  %73 = call %"class.sh::TVariable"* @_ZN2sh21DeclareInterfaceBlockEPNS_12TIntermBlockEPNS_12TSymbolTableEPNS_7TVectorIPNS_6TFieldEEENS_10TQualifierERKNS_16TLayoutQualifierERKNS_16TMemoryQualifierEjRKNS_15ImmutableStringESI_(%"class.sh::TIntermBlock"* %1, %"class.sh::TSymbolTable"* %2, %"class.sh::TVector.0"* %34, i32 6, %"struct.sh::TLayoutQualifier"* nonnull dereferenceable(92) %5, %"struct.sh::TMemoryQualifier"* nonnull dereferenceable(5) %6, i32 0, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %7, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %8) #5
  %74 = getelementptr inbounds %"class.sh::DriverUniform", %"class.sh::DriverUniform"* %0, i64 0, i32 1
  store %"class.sh::TVariable"* %73, %"class.sh::TVariable"** %74, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %63) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #5
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %51) #5
  call void @llvm.lifetime.end.p0i8(i64 92, i8* nonnull %35) #5
  %75 = icmp ne %"class.sh::TVariable"* %73, null
  ret i1 %75
}

declare void @_ZN2sh21DeclareGlobalVariableEPNS_12TIntermBlockEPKNS_9TVariableE(%"class.sh::TIntermBlock"*, %"class.sh::TVariable"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform22createDriverUniformRefEPKc(%"class.sh::DriverUniform"* nocapture readonly, i8*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::DriverUniform", %"class.sh::DriverUniform"* %0, i64 0, i32 1
  %4 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %4, i64 0, i32 1
  %6 = load %"class.sh::TType"*, %"class.sh::TType"** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %6, i64 0, i32 12
  %8 = load %"class.sh::TInterfaceBlock"*, %"class.sh::TInterfaceBlock"** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TInterfaceBlock", %"class.sh::TInterfaceBlock"* %8, i64 0, i32 1, i32 0
  %10 = load %"class.sh::TVector.0"*, %"class.sh::TVector.0"** %9, align 8
  %11 = tail call i64 @_ZN2sh14FindFieldIndexERKNS_7TVectorIPNS_6TFieldEEEPKc(%"class.sh::TVector.0"* dereferenceable(24) %10, i8* %1) #5
  %12 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %13 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %12, i64 32) #5
  %14 = bitcast i8* %13 to %"class.sh::TIntermSymbol"*
  %15 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %3, align 8
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %14, %"class.sh::TVariable"* %15) #5
  %16 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %17 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %16, i64 8) #5
  %18 = bitcast i8* %17 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %18) #5
  %19 = trunc i64 %11 to i32
  %20 = bitcast i8* %17 to i32*
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds i8, i8* %17, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 3, i32* %22, align 4
  %23 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %24 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %23, i64 216) #5
  %25 = bitcast i8* %24 to %"class.sh::TIntermExpression"*
  tail call void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"* %25, %"class.sh::TType"* dereferenceable(184) bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE3ELNS_10TPrecisionE0ELNS_10TQualifierE1ELh1ELh1EEE to %"class.sh::TType"*)) #5
  %26 = bitcast i8* %24 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds i8, i8* %24, i64 208
  %28 = bitcast i8* %27 to i8**
  store i8* %17, i8** %28, align 8
  %29 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %30 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %29, i64 240) #5
  %31 = bitcast i8* %30 to %"class.sh::TIntermBinary"*
  %32 = bitcast i8* %13 to %"class.sh::TIntermTyped"*
  %33 = bitcast i8* %24 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %31, i8 zeroext 47, %"class.sh::TIntermTyped"* %32, %"class.sh::TIntermTyped"* %33) #5
  ret %"class.sh::TIntermBinary"* %31
}

declare i64 @_ZN2sh14FindFieldIndexERKNS_7TVectorIPNS_6TFieldEEEPKc(%"class.sh::TVector.0"* dereferenceable(24), i8*) local_unnamed_addr #2

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #2

declare void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"*) unnamed_addr #2

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform14getViewportRefEv(%"class.sh::DriverUniform"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform22createDriverUniformRefEPKc(%"class.sh::DriverUniform"* %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @_ZN2sh12_GLOBAL__N_19kViewportE, i64 0, i64 0))
  ret %"class.sh::TIntermBinary"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform19getAbcBufferOffsetsEv(%"class.sh::DriverUniform"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform22createDriverUniformRefEPKc(%"class.sh::DriverUniform"* %0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @_ZN2sh12_GLOBAL__N_117kAcbBufferOffsetsE, i64 0, i64 0))
  ret %"class.sh::TIntermBinary"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform20getXfbActiveUnpausedEv(%"class.sh::DriverUniform"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform22createDriverUniformRefEPKc(%"class.sh::DriverUniform"* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @_ZN2sh12_GLOBAL__N_118kXfbActiveUnpausedE, i64 0, i64 0))
  ret %"class.sh::TIntermBinary"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform25getXfbVerticesPerInstanceEv(%"class.sh::DriverUniform"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform22createDriverUniformRefEPKc(%"class.sh::DriverUniform"* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @_ZN2sh12_GLOBAL__N_123kXfbVerticesPerInstanceE, i64 0, i64 0))
  ret %"class.sh::TIntermBinary"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform19getXfbBufferOffsetsEv(%"class.sh::DriverUniform"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform22createDriverUniformRefEPKc(%"class.sh::DriverUniform"* %0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @_ZN2sh12_GLOBAL__N_117kXfbBufferOffsetsE, i64 0, i64 0))
  ret %"class.sh::TIntermBinary"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform23getClipDistancesEnabledEv(%"class.sh::DriverUniform"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform22createDriverUniformRefEPKc(%"class.sh::DriverUniform"* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @_ZN2sh12_GLOBAL__N_121kClipDistancesEnabledE, i64 0, i64 0))
  ret %"class.sh::TIntermBinary"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform16getDepthRangeRefEv(%"class.sh::DriverUniform"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform22createDriverUniformRefEPKc(%"class.sh::DriverUniform"* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @_ZN2sh12_GLOBAL__N_111kDepthRangeE, i64 0, i64 0))
  ret %"class.sh::TIntermBinary"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform29getDepthRangeReservedFieldRefEv(%"class.sh::DriverUniform"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform22createDriverUniformRefEPKc(%"class.sh::DriverUniform"* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @_ZN2sh12_GLOBAL__N_111kDepthRangeE, i64 0, i64 0))
  %3 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %4 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %3, i64 240) #5
  %5 = bitcast i8* %4 to %"class.sh::TIntermBinary"*
  %6 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 0, i32 0, i32 0
  %7 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 3) #5
  %8 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %7, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %5, i8 zeroext 46, %"class.sh::TIntermTyped"* %6, %"class.sh::TIntermTyped"* %8) #5
  ret %"class.sh::TIntermBinary"* %5
}

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform16getNumSamplesRefEv(%"class.sh::DriverUniform"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform22createDriverUniformRefEPKc(%"class.sh::DriverUniform"* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @_ZN2sh12_GLOBAL__N_111kNumSamplesE, i64 0, i64 0))
  ret %"class.sh::TIntermBinary"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TVector.0"* @_ZN2sh21DriverUniformExtended19createUniformFieldsEPNS_12TSymbolTableE(%"class.sh::DriverUniformExtended"* nocapture, %"class.sh::TSymbolTable"*) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.std::__1::array.42", align 8
  %4 = getelementptr inbounds %"class.sh::DriverUniformExtended", %"class.sh::DriverUniformExtended"* %0, i64 0, i32 0
  %5 = tail call %"class.sh::TVector.0"* @_ZN2sh13DriverUniform19createUniformFieldsEPNS_12TSymbolTableE(%"class.sh::DriverUniform"* %4, %"class.sh::TSymbolTable"* %1)
  %6 = bitcast %"struct.std::__1::array.42"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #5
  %7 = getelementptr inbounds %"struct.std::__1::array.42", %"struct.std::__1::array.42"* %3, i64 0, i32 0, i64 1
  %8 = getelementptr inbounds %"struct.std::__1::array.42", %"struct.std::__1::array.42"* %3, i64 0, i32 0, i64 2
  %9 = getelementptr inbounds %"struct.std::__1::array.42", %"struct.std::__1::array.42"* %3, i64 0, i32 0, i64 3
  %10 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %11 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 184) #5
  %12 = bitcast i8* %11 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %12, i32 1, i8 zeroext 2, i8 zeroext 1) #5
  %13 = bitcast %"struct.std::__1::array.42"* %3 to i8**
  store i8* %11, i8** %13, align 8
  %14 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %15 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %14, i64 184) #5
  %16 = bitcast i8* %15 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %16, i32 1, i8 zeroext 2, i8 zeroext 1) #5
  %17 = bitcast %"class.sh::TType"** %7 to i8**
  store i8* %15, i8** %17, align 8
  %18 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %19 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %18, i64 184) #5
  %20 = bitcast i8* %19 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %20, i32 1, i8 zeroext 2, i8 zeroext 1) #5
  %21 = bitcast %"class.sh::TType"** %8 to i8**
  store i8* %19, i8** %21, align 8
  %22 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %23 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %22, i64 184) #5
  %24 = bitcast i8* %23 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %24, i32 1, i8 zeroext 2, i8 zeroext 2) #5
  %25 = bitcast %"class.sh::TType"** %9 to i8**
  store i8* %23, i8** %25, align 8
  %26 = getelementptr inbounds %"class.sh::TVector.0", %"class.sh::TVector.0"* %5, i64 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.sh::TVector.0", %"class.sh::TVector.0"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %28 = bitcast %"class.sh::TField"*** %26 to i64*
  %29 = bitcast %"class.sh::TVector.0"* %5 to i64*
  %30 = bitcast %"class.sh::TField"*** %27 to i64*
  %31 = getelementptr inbounds %"class.sh::TVector.0", %"class.sh::TVector.0"* %5, i64 0, i32 0, i32 0, i32 0
  br label %33

32:                                               ; preds = %277
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #5
  ret %"class.sh::TVector.0"* %5

33:                                               ; preds = %277, %2
  %34 = phi i64 [ 0, %2 ], [ %278, %277 ]
  %35 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %36 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %35, i64 48) #5
  %37 = getelementptr inbounds %"struct.std::__1::array.42", %"struct.std::__1::array.42"* %3, i64 0, i32 0, i64 %34
  %38 = bitcast %"class.sh::TType"** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"struct.std::__1::array.41", %"struct.std::__1::array.41"* @_ZZN2sh21DriverUniformExtended19createUniformFieldsEPNS_12TSymbolTableEE30kGraphicsDriverUniformNamesExt, i64 0, i32 0, i64 %34
  %41 = load i8*, i8** %40, align 8
  %42 = icmp eq i8* %41, null
  br i1 %42, label %49, label %43

43:                                               ; preds = %33, %43
  %44 = phi i64 [ %48, %43 ], [ 0, %33 ]
  %45 = getelementptr inbounds i8, i8* %41, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 0
  %48 = add i64 %44, 1
  br i1 %47, label %49, label %43

49:                                               ; preds = %43, %33
  %50 = phi i64 [ 0, %33 ], [ %44, %43 ]
  %51 = bitcast i8* %36 to i64*
  store i64 %39, i64* %51, align 8
  %52 = getelementptr inbounds i8, i8* %36, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %41, i8** %53, align 8
  %54 = getelementptr inbounds i8, i8* %36, i64 16
  %55 = bitcast i8* %54 to i64*
  store i64 %50, i64* %55, align 8
  %56 = getelementptr inbounds i8, i8* %36, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 16, i1 false)
  %57 = getelementptr inbounds i8, i8* %36, i64 40
  store i8 2, i8* %57, align 8
  %58 = ptrtoint i8* %36 to i64
  %59 = load %"class.sh::TField"**, %"class.sh::TField"*** %26, align 8
  %60 = load %"class.sh::TField"**, %"class.sh::TField"*** %27, align 8
  %61 = icmp eq %"class.sh::TField"** %59, %60
  %62 = ptrtoint %"class.sh::TField"** %60 to i64
  br i1 %61, label %67, label %63

63:                                               ; preds = %49
  %64 = bitcast %"class.sh::TField"** %59 to i64*
  store i64 %58, i64* %64, align 8
  %65 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %59, i64 1
  %66 = ptrtoint %"class.sh::TField"** %65 to i64
  store i64 %66, i64* %28, align 8
  br label %277

67:                                               ; preds = %49
  %68 = ptrtoint %"class.sh::TField"** %59 to i64
  %69 = load i64, i64* %29, align 8
  %70 = sub i64 %68, %69
  %71 = ashr exact i64 %70, 3
  %72 = add nsw i64 %71, 1
  %73 = icmp ugt i64 %72, 2305843009213693951
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = bitcast %"class.sh::TVector.0"* %5 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %75) #6
  unreachable

76:                                               ; preds = %67
  %77 = sub i64 %62, %69
  %78 = ashr exact i64 %77, 3
  %79 = icmp ult i64 %78, 1152921504606846975
  br i1 %79, label %80, label %85

80:                                               ; preds = %76
  %81 = ashr exact i64 %77, 2
  %82 = icmp ult i64 %81, %72
  %83 = select i1 %82, i64 %72, i64 %81
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %91, label %85

85:                                               ; preds = %80, %76
  %86 = phi i64 [ %83, %80 ], [ 2305843009213693951, %76 ]
  %87 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %88 = shl i64 %86, 3
  %89 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %87, i64 %88) #5
  %90 = bitcast i8* %89 to %"class.sh::TField"**
  br label %91

91:                                               ; preds = %85, %80
  %92 = phi i64 [ %86, %85 ], [ 0, %80 ]
  %93 = phi %"class.sh::TField"** [ %90, %85 ], [ null, %80 ]
  %94 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %93, i64 %71
  %95 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %93, i64 %92
  %96 = ptrtoint %"class.sh::TField"** %95 to i64
  %97 = bitcast %"class.sh::TField"** %94 to i64*
  store i64 %58, i64* %97, align 8
  %98 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %94, i64 1
  %99 = ptrtoint %"class.sh::TField"** %98 to i64
  %100 = load %"class.sh::TField"**, %"class.sh::TField"*** %31, align 8
  %101 = ptrtoint %"class.sh::TField"** %100 to i64
  %102 = load %"class.sh::TField"**, %"class.sh::TField"*** %26, align 8
  %103 = icmp eq %"class.sh::TField"** %102, %100
  br i1 %103, label %274, label %104

104:                                              ; preds = %91
  %105 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %102, i64 -1
  %106 = ptrtoint %"class.sh::TField"** %105 to i64
  %107 = sub i64 %106, %101
  %108 = lshr i64 %107, 3
  %109 = add nuw nsw i64 %108, 1
  %110 = icmp ult i64 %109, 4
  br i1 %110, label %204, label %111

111:                                              ; preds = %104
  %112 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %93, i64 -1
  %113 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %102, i64 -1
  %114 = ptrtoint %"class.sh::TField"** %113 to i64
  %115 = sub i64 %114, %101
  %116 = lshr i64 %115, 3
  %117 = sub nsw i64 %71, %116
  %118 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %112, i64 %117
  %119 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %102, i64 -1
  %120 = sub nsw i64 0, %116
  %121 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %119, i64 %120
  %122 = icmp ult %"class.sh::TField"** %118, %102
  %123 = icmp ult %"class.sh::TField"** %121, %94
  %124 = and i1 %122, %123
  br i1 %124, label %204, label %125

125:                                              ; preds = %111
  %126 = and i64 %109, 4611686018427387900
  %127 = sub nsw i64 0, %126
  %128 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %94, i64 %127
  %129 = sub nsw i64 0, %126
  %130 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %102, i64 %129
  %131 = add nsw i64 %126, -4
  %132 = lshr exact i64 %131, 2
  %133 = add nuw nsw i64 %132, 1
  %134 = and i64 %133, 1
  %135 = icmp eq i64 %131, 0
  br i1 %135, label %180, label %136

136:                                              ; preds = %125
  %137 = sub nuw nsw i64 %133, %134
  %138 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %94, i64 -1
  %139 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %102, i64 -1
  %140 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %94, i64 -1
  %141 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %102, i64 -1
  br label %142

142:                                              ; preds = %142, %136
  %143 = phi i64 [ 0, %136 ], [ %177, %142 ]
  %144 = phi i64 [ %137, %136 ], [ %178, %142 ]
  %145 = sub i64 0, %143
  %146 = sub i64 0, %143
  %147 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %138, i64 %145
  %148 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %139, i64 %146
  %149 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %148, i64 -1
  %150 = bitcast %"class.sh::TField"** %149 to <2 x i64>*
  %151 = load <2 x i64>, <2 x i64>* %150, align 8, !alias.scope !58
  %152 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %148, i64 -2
  %153 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %152, i64 -1
  %154 = bitcast %"class.sh::TField"** %153 to <2 x i64>*
  %155 = load <2 x i64>, <2 x i64>* %154, align 8, !alias.scope !58
  %156 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %147, i64 -1
  %157 = bitcast %"class.sh::TField"** %156 to <2 x i64>*
  store <2 x i64> %151, <2 x i64>* %157, align 8, !alias.scope !61, !noalias !58
  %158 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %147, i64 -2
  %159 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %158, i64 -1
  %160 = bitcast %"class.sh::TField"** %159 to <2 x i64>*
  store <2 x i64> %155, <2 x i64>* %160, align 8, !alias.scope !61, !noalias !58
  %161 = sub nuw nsw i64 -4, %143
  %162 = sub nuw nsw i64 -4, %143
  %163 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %140, i64 %161
  %164 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %141, i64 %162
  %165 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %164, i64 -1
  %166 = bitcast %"class.sh::TField"** %165 to <2 x i64>*
  %167 = load <2 x i64>, <2 x i64>* %166, align 8, !alias.scope !58
  %168 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %164, i64 -2
  %169 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %168, i64 -1
  %170 = bitcast %"class.sh::TField"** %169 to <2 x i64>*
  %171 = load <2 x i64>, <2 x i64>* %170, align 8, !alias.scope !58
  %172 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %163, i64 -1
  %173 = bitcast %"class.sh::TField"** %172 to <2 x i64>*
  store <2 x i64> %167, <2 x i64>* %173, align 8, !alias.scope !61, !noalias !58
  %174 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %163, i64 -2
  %175 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %174, i64 -1
  %176 = bitcast %"class.sh::TField"** %175 to <2 x i64>*
  store <2 x i64> %171, <2 x i64>* %176, align 8, !alias.scope !61, !noalias !58
  %177 = add i64 %143, 8
  %178 = add i64 %144, -2
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %142, !llvm.loop !63

180:                                              ; preds = %142, %125
  %181 = phi i64 [ 0, %125 ], [ %177, %142 ]
  %182 = icmp eq i64 %134, 0
  br i1 %182, label %202, label %183

183:                                              ; preds = %180
  %184 = sub i64 0, %181
  %185 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %94, i64 -1
  %186 = sub i64 0, %181
  %187 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %102, i64 -1
  %188 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %185, i64 %184
  %189 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %187, i64 %186
  %190 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %189, i64 -1
  %191 = bitcast %"class.sh::TField"** %190 to <2 x i64>*
  %192 = load <2 x i64>, <2 x i64>* %191, align 8, !alias.scope !58
  %193 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %189, i64 -2
  %194 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %193, i64 -1
  %195 = bitcast %"class.sh::TField"** %194 to <2 x i64>*
  %196 = load <2 x i64>, <2 x i64>* %195, align 8, !alias.scope !58
  %197 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %188, i64 -1
  %198 = bitcast %"class.sh::TField"** %197 to <2 x i64>*
  store <2 x i64> %192, <2 x i64>* %198, align 8, !alias.scope !61, !noalias !58
  %199 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %188, i64 -2
  %200 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %199, i64 -1
  %201 = bitcast %"class.sh::TField"** %200 to <2 x i64>*
  store <2 x i64> %196, <2 x i64>* %201, align 8, !alias.scope !61, !noalias !58
  br label %202

202:                                              ; preds = %180, %183
  %203 = icmp eq i64 %109, %126
  br i1 %203, label %274, label %204

204:                                              ; preds = %202, %111, %104
  %205 = phi %"class.sh::TField"** [ %94, %111 ], [ %94, %104 ], [ %128, %202 ]
  %206 = phi %"class.sh::TField"** [ %102, %111 ], [ %102, %104 ], [ %130, %202 ]
  %207 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %206, i64 -1
  %208 = ptrtoint %"class.sh::TField"** %207 to i64
  %209 = sub i64 %208, %101
  %210 = lshr i64 %209, 3
  %211 = add nuw nsw i64 %210, 1
  %212 = and i64 %211, 7
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %225, label %214

214:                                              ; preds = %204, %214
  %215 = phi %"class.sh::TField"** [ %218, %214 ], [ %205, %204 ]
  %216 = phi %"class.sh::TField"** [ %219, %214 ], [ %206, %204 ]
  %217 = phi i64 [ %223, %214 ], [ %212, %204 ]
  %218 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %215, i64 -1
  %219 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %216, i64 -1
  %220 = bitcast %"class.sh::TField"** %219 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = bitcast %"class.sh::TField"** %218 to i64*
  store i64 %221, i64* %222, align 8
  %223 = add i64 %217, -1
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %225, label %214, !llvm.loop !64

225:                                              ; preds = %214, %204
  %226 = phi %"class.sh::TField"** [ undef, %204 ], [ %218, %214 ]
  %227 = phi %"class.sh::TField"** [ %205, %204 ], [ %218, %214 ]
  %228 = phi %"class.sh::TField"** [ %206, %204 ], [ %219, %214 ]
  %229 = icmp ult i64 %209, 56
  br i1 %229, label %274, label %230

230:                                              ; preds = %225, %230
  %231 = phi %"class.sh::TField"** [ %268, %230 ], [ %227, %225 ]
  %232 = phi %"class.sh::TField"** [ %269, %230 ], [ %228, %225 ]
  %233 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %231, i64 -1
  %234 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %232, i64 -1
  %235 = bitcast %"class.sh::TField"** %234 to i64*
  %236 = load i64, i64* %235, align 8
  %237 = bitcast %"class.sh::TField"** %233 to i64*
  store i64 %236, i64* %237, align 8
  %238 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %231, i64 -2
  %239 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %232, i64 -2
  %240 = bitcast %"class.sh::TField"** %239 to i64*
  %241 = load i64, i64* %240, align 8
  %242 = bitcast %"class.sh::TField"** %238 to i64*
  store i64 %241, i64* %242, align 8
  %243 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %231, i64 -3
  %244 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %232, i64 -3
  %245 = bitcast %"class.sh::TField"** %244 to i64*
  %246 = load i64, i64* %245, align 8
  %247 = bitcast %"class.sh::TField"** %243 to i64*
  store i64 %246, i64* %247, align 8
  %248 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %231, i64 -4
  %249 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %232, i64 -4
  %250 = bitcast %"class.sh::TField"** %249 to i64*
  %251 = load i64, i64* %250, align 8
  %252 = bitcast %"class.sh::TField"** %248 to i64*
  store i64 %251, i64* %252, align 8
  %253 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %231, i64 -5
  %254 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %232, i64 -5
  %255 = bitcast %"class.sh::TField"** %254 to i64*
  %256 = load i64, i64* %255, align 8
  %257 = bitcast %"class.sh::TField"** %253 to i64*
  store i64 %256, i64* %257, align 8
  %258 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %231, i64 -6
  %259 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %232, i64 -6
  %260 = bitcast %"class.sh::TField"** %259 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = bitcast %"class.sh::TField"** %258 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %231, i64 -7
  %264 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %232, i64 -7
  %265 = bitcast %"class.sh::TField"** %264 to i64*
  %266 = load i64, i64* %265, align 8
  %267 = bitcast %"class.sh::TField"** %263 to i64*
  store i64 %266, i64* %267, align 8
  %268 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %231, i64 -8
  %269 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %232, i64 -8
  %270 = bitcast %"class.sh::TField"** %269 to i64*
  %271 = load i64, i64* %270, align 8
  %272 = bitcast %"class.sh::TField"** %268 to i64*
  store i64 %271, i64* %272, align 8
  %273 = icmp eq %"class.sh::TField"** %269, %100
  br i1 %273, label %274, label %230, !llvm.loop !65

274:                                              ; preds = %225, %230, %202, %91
  %275 = phi %"class.sh::TField"** [ %94, %91 ], [ %128, %202 ], [ %226, %225 ], [ %268, %230 ]
  %276 = ptrtoint %"class.sh::TField"** %275 to i64
  store i64 %276, i64* %29, align 8
  store i64 %99, i64* %28, align 8
  store i64 %96, i64* %30, align 8
  br label %277

277:                                              ; preds = %63, %274
  %278 = add nuw nsw i64 %34, 1
  %279 = icmp eq i64 %278, 4
  br i1 %279, label %32, label %33
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZNK2sh21DriverUniformExtended12getFlipXYRefEv(%"class.sh::DriverUniformExtended"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::DriverUniformExtended", %"class.sh::DriverUniformExtended"* %0, i64 0, i32 0
  %3 = tail call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform22createDriverUniformRefEPKc(%"class.sh::DriverUniform"* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @_ZN2sh12_GLOBAL__N_17kFlipXYE, i64 0, i64 0))
  ret %"class.sh::TIntermBinary"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZNK2sh21DriverUniformExtended15getNegFlipXYRefEv(%"class.sh::DriverUniformExtended"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::DriverUniformExtended", %"class.sh::DriverUniformExtended"* %0, i64 0, i32 0
  %3 = tail call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform22createDriverUniformRefEPKc(%"class.sh::DriverUniform"* %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @_ZN2sh12_GLOBAL__N_110kNegFlipXYE, i64 0, i64 0))
  ret %"class.sh::TIntermBinary"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermSwizzle"* @_ZNK2sh21DriverUniformExtended14getNegFlipYRefEv(%"class.sh::DriverUniformExtended"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = alloca %"class.sh::TVector.43", align 8
  %3 = getelementptr inbounds %"class.sh::DriverUniformExtended", %"class.sh::DriverUniformExtended"* %0, i64 0, i32 0
  %4 = tail call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform22createDriverUniformRefEPKc(%"class.sh::DriverUniform"* %3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @_ZN2sh12_GLOBAL__N_110kNegFlipXYE, i64 0, i64 0))
  %5 = bitcast %"class.sh::TVector.43"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #5
  %6 = getelementptr inbounds %"class.sh::TVector.43", %"class.sh::TVector.43"* %2, i64 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.sh::TVector.43", %"class.sh::TVector.43"* %2, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.sh::TVector.43", %"class.sh::TVector.43"* %2, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %10 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %9, i64 4) #5
  %11 = bitcast i8* %10 to i32*
  %12 = bitcast %"class.sh::TVector.43"* %2 to i8**
  store i8* %10, i8** %12, align 8
  %13 = getelementptr inbounds i8, i8* %10, i64 4
  %14 = bitcast i32** %8 to i8**
  store i8* %13, i8** %14, align 8
  store i32 1, i32* %11, align 4
  %15 = getelementptr inbounds i8, i8* %10, i64 4
  %16 = bitcast i32** %7 to i64*
  %17 = ptrtoint i8* %15 to i64
  store i64 %17, i64* %16, align 8
  %18 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %19 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %18, i64 248) #5
  %20 = bitcast i8* %19 to %"class.sh::TIntermSwizzle"*
  %21 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %4, i64 0, i32 0, i32 0, i32 0
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %20, %"class.sh::TIntermTyped"* %21, %"class.sh::TVector.43"* nonnull dereferenceable(24) %2) #5
  %22 = load i32*, i32** %6, align 8
  %23 = icmp eq i32* %22, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %1
  %25 = ptrtoint i32* %22 to i64
  store i64 %25, i64* %16, align 8
  br label %26

26:                                               ; preds = %1, %24
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #5
  ret %"class.sh::TIntermSwizzle"* %20
}

declare void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermTyped"*, %"class.sh::TVector.43"* dereferenceable(24)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZNK2sh21DriverUniformExtended24getFragRotationMatrixRefEv(%"class.sh::DriverUniformExtended"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::DriverUniformExtended", %"class.sh::DriverUniformExtended"* %0, i64 0, i32 0
  %3 = tail call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform22createDriverUniformRefEPKc(%"class.sh::DriverUniform"* %2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @_ZN2sh12_GLOBAL__N_113kFragRotationE, i64 0, i64 0))
  ret %"class.sh::TIntermBinary"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZNK2sh21DriverUniformExtended20getHalfRenderAreaRefEv(%"class.sh::DriverUniformExtended"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::DriverUniformExtended", %"class.sh::DriverUniformExtended"* %0, i64 0, i32 0
  %3 = tail call %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform22createDriverUniformRefEPKc(%"class.sh::DriverUniform"* %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @_ZN2sh12_GLOBAL__N_115kHalfRenderAreaE, i64 0, i64 0))
  ret %"class.sh::TIntermBinary"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh13DriverUniformD2Ev(%"class.sh::DriverUniform"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh13DriverUniformD0Ev(%"class.sh::DriverUniform"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.sh::DriverUniform"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform12getFlipXYRefEv(%"class.sh::DriverUniform"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermBinary"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform15getNegFlipXYRefEv(%"class.sh::DriverUniform"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermBinary"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform24getFragRotationMatrixRefEv(%"class.sh::DriverUniform"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermBinary"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermBinary"* @_ZNK2sh13DriverUniform20getHalfRenderAreaRefEv(%"class.sh::DriverUniform"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermBinary"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermSwizzle"* @_ZNK2sh13DriverUniform14getNegFlipYRefEv(%"class.sh::DriverUniform"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermSwizzle"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh21DriverUniformExtendedD0Ev(%"class.sh::DriverUniformExtended"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.sh::DriverUniformExtended"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

declare void @_ZN2sh15TSymbolUniqueIdC1EPNS_12TSymbolTableE(%"class.sh::TSymbolUniqueId"*, %"class.sh::TSymbolTable"*) unnamed_addr #2

declare void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN2sh16TLayoutQualifier6CreateEv: argument 0"}
!14 = distinct !{!14, !"_ZN2sh16TLayoutQualifier6CreateEv"}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !8}
!21 = distinct !{!21, !10}
!22 = distinct !{!22, !8}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = distinct !{!28, !8}
!29 = distinct !{!29, !10}
!30 = distinct !{!30, !8}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !8}
!37 = distinct !{!37, !10}
!38 = distinct !{!38, !8}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !8}
!45 = distinct !{!45, !10}
!46 = distinct !{!46, !8}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !8}
!53 = distinct !{!53, !10}
!54 = distinct !{!54, !8}
!55 = !{!56}
!56 = distinct !{!56, !57, !"_ZN2sh16TLayoutQualifier6CreateEv: argument 0"}
!57 = distinct !{!57, !"_ZN2sh16TLayoutQualifier6CreateEv"}
!58 = !{!59}
!59 = distinct !{!59, !60}
!60 = distinct !{!60, !"LVerDomain"}
!61 = !{!62}
!62 = distinct !{!62, !60}
!63 = distinct !{!63, !8}
!64 = distinct !{!64, !10}
!65 = distinct !{!65, !8}
