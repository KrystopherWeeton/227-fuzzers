; ModuleID = '../../third_party/ffmpeg/libavcodec/mpegaudiodsp_float.c'
source_filename = "../../third_party/ffmpeg/libavcodec/mpegaudiodsp_float.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.MPADSPContext = type { void (float*, float*, i32*, float*, i64)*, void (i32*, i32*, i32*, i16*, i64)*, void (float*, float*)*, void (i32*, i32*)*, void (float*, float*, float*, i32, i32, i32)*, void (i32*, i32*, i32*, i32, i32, i32)* }

@ff_mpa_synth_init_float.init_static_once = internal global i32 0, align 4
@ff_mdct_win_float = common hidden local_unnamed_addr global [8 x [40 x float]] zeroinitializer, align 16
@ff_mpa_synth_window_float = common hidden local_unnamed_addr global [768 x float] zeroinitializer, align 16
@ff_mpa_enwindow = external local_unnamed_addr constant [257 x i32], align 16
@icos36h = internal unnamed_addr constant [9 x float] [float 0x3FD00FA560000000, float 0x3FD0907DC0000000, float 0x3FD1A76FA0000000, float 0x3FD3884AE0000000, float 0x3FD6A09E60000000, float 0x3FDBE52880000000, float 0x3FD2EDFB20000000, float 0x3FDEE8DD40000000, float 0.000000e+00], align 16
@icos36 = internal unnamed_addr constant [9 x float] [float 0x3FE00FA560000000, float 0x3FE0907DC0000000, float 0x3FE1A76FA0000000, float 0x3FE3884AE0000000, float 0x3FE6A09E60000000, float 0x3FEBE52880000000, float 0x3FF2EDFB20000000, float 0x3FFEE8DD40000000, float 0x4016F28A80000000], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_mpadsp_apply_window_float(float*, float* readonly, i32* nocapture, float* nocapture, i64) local_unnamed_addr #0 {
  %6 = getelementptr inbounds float, float* %0, i64 512
  %7 = bitcast float* %6 to i8*
  %8 = bitcast float* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 128, i1 false)
  %9 = mul nsw i64 %4, 31
  %10 = getelementptr inbounds float, float* %3, i64 %9
  %11 = getelementptr inbounds float, float* %1, i64 31
  %12 = load i32, i32* %2, align 4
  %13 = sitofp i32 %12 to float
  %14 = getelementptr inbounds float, float* %0, i64 16
  %15 = load float, float* %1, align 4
  %16 = load float, float* %14, align 4
  %17 = fmul nsz float %15, %16
  %18 = fadd nsz float %17, %13
  %19 = getelementptr inbounds float, float* %1, i64 64
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds float, float* %0, i64 80
  %22 = load float, float* %21, align 4
  %23 = fmul nsz float %20, %22
  %24 = fadd nsz float %18, %23
  %25 = getelementptr inbounds float, float* %1, i64 128
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds float, float* %0, i64 144
  %28 = load float, float* %27, align 4
  %29 = fmul nsz float %26, %28
  %30 = fadd nsz float %24, %29
  %31 = getelementptr inbounds float, float* %1, i64 192
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds float, float* %0, i64 208
  %34 = load float, float* %33, align 4
  %35 = fmul nsz float %32, %34
  %36 = fadd nsz float %30, %35
  %37 = getelementptr inbounds float, float* %1, i64 256
  %38 = load float, float* %37, align 4
  %39 = getelementptr inbounds float, float* %0, i64 272
  %40 = load float, float* %39, align 4
  %41 = fmul nsz float %38, %40
  %42 = fadd nsz float %36, %41
  %43 = getelementptr inbounds float, float* %1, i64 320
  %44 = load float, float* %43, align 4
  %45 = getelementptr inbounds float, float* %0, i64 336
  %46 = load float, float* %45, align 4
  %47 = fmul nsz float %44, %46
  %48 = fadd nsz float %42, %47
  %49 = getelementptr inbounds float, float* %1, i64 384
  %50 = load float, float* %49, align 4
  %51 = getelementptr inbounds float, float* %0, i64 400
  %52 = load float, float* %51, align 4
  %53 = fmul nsz float %50, %52
  %54 = fadd nsz float %48, %53
  %55 = getelementptr inbounds float, float* %1, i64 448
  %56 = load float, float* %55, align 4
  %57 = getelementptr inbounds float, float* %0, i64 464
  %58 = load float, float* %57, align 4
  %59 = fmul nsz float %56, %58
  %60 = fadd nsz float %54, %59
  %61 = getelementptr inbounds float, float* %0, i64 48
  %62 = getelementptr inbounds float, float* %1, i64 32
  %63 = load float, float* %62, align 4
  %64 = load float, float* %61, align 4
  %65 = fmul nsz float %63, %64
  %66 = fsub nsz float %60, %65
  %67 = getelementptr inbounds float, float* %1, i64 96
  %68 = load float, float* %67, align 4
  %69 = getelementptr inbounds float, float* %0, i64 112
  %70 = load float, float* %69, align 4
  %71 = fmul nsz float %68, %70
  %72 = fsub nsz float %66, %71
  %73 = getelementptr inbounds float, float* %1, i64 160
  %74 = load float, float* %73, align 4
  %75 = getelementptr inbounds float, float* %0, i64 176
  %76 = load float, float* %75, align 4
  %77 = fmul nsz float %74, %76
  %78 = fsub nsz float %72, %77
  %79 = getelementptr inbounds float, float* %1, i64 224
  %80 = load float, float* %79, align 4
  %81 = getelementptr inbounds float, float* %0, i64 240
  %82 = load float, float* %81, align 4
  %83 = fmul nsz float %80, %82
  %84 = fsub nsz float %78, %83
  %85 = getelementptr inbounds float, float* %1, i64 288
  %86 = load float, float* %85, align 4
  %87 = getelementptr inbounds float, float* %0, i64 304
  %88 = load float, float* %87, align 4
  %89 = fmul nsz float %86, %88
  %90 = fsub nsz float %84, %89
  %91 = getelementptr inbounds float, float* %1, i64 352
  %92 = load float, float* %91, align 4
  %93 = getelementptr inbounds float, float* %0, i64 368
  %94 = load float, float* %93, align 4
  %95 = fmul nsz float %92, %94
  %96 = fsub nsz float %90, %95
  %97 = getelementptr inbounds float, float* %1, i64 416
  %98 = load float, float* %97, align 4
  %99 = getelementptr inbounds float, float* %0, i64 432
  %100 = load float, float* %99, align 4
  %101 = fmul nsz float %98, %100
  %102 = fsub nsz float %96, %101
  %103 = getelementptr inbounds float, float* %1, i64 480
  %104 = load float, float* %103, align 4
  %105 = getelementptr inbounds float, float* %0, i64 496
  %106 = load float, float* %105, align 4
  %107 = fmul nsz float %104, %106
  %108 = fsub nsz float %102, %107
  store float %108, float* %3, align 4
  %109 = getelementptr inbounds float, float* %3, i64 %4
  %110 = sub i64 0, %4
  br label %111

111:                                              ; preds = %111, %5
  %112 = phi i64 [ 1, %5 ], [ %278, %111 ]
  %113 = phi float* [ %109, %5 ], [ %279, %111 ]
  %114 = phi float* [ %1, %5 ], [ %117, %111 ]
  %115 = phi float* [ %10, %5 ], [ %276, %111 ]
  %116 = phi float* [ %11, %5 ], [ %277, %111 ]
  %117 = getelementptr inbounds float, float* %114, i64 1
  %118 = getelementptr inbounds float, float* %14, i64 %112
  %119 = load float, float* %118, align 4
  %120 = load float, float* %117, align 4
  %121 = fmul nsz float %119, %120
  %122 = load float, float* %116, align 4
  %123 = fmul nsz float %119, %122
  %124 = fsub nsz float -0.000000e+00, %123
  %125 = getelementptr inbounds float, float* %118, i64 64
  %126 = load float, float* %125, align 4
  %127 = getelementptr inbounds float, float* %114, i64 65
  %128 = load float, float* %127, align 4
  %129 = fmul nsz float %126, %128
  %130 = fadd nsz float %121, %129
  %131 = getelementptr inbounds float, float* %116, i64 64
  %132 = load float, float* %131, align 4
  %133 = fmul nsz float %126, %132
  %134 = fsub nsz float %124, %133
  %135 = getelementptr inbounds float, float* %118, i64 128
  %136 = load float, float* %135, align 4
  %137 = getelementptr inbounds float, float* %114, i64 129
  %138 = load float, float* %137, align 4
  %139 = fmul nsz float %136, %138
  %140 = fadd nsz float %130, %139
  %141 = getelementptr inbounds float, float* %116, i64 128
  %142 = load float, float* %141, align 4
  %143 = fmul nsz float %136, %142
  %144 = fsub nsz float %134, %143
  %145 = getelementptr inbounds float, float* %118, i64 192
  %146 = load float, float* %145, align 4
  %147 = getelementptr inbounds float, float* %114, i64 193
  %148 = load float, float* %147, align 4
  %149 = fmul nsz float %146, %148
  %150 = fadd nsz float %140, %149
  %151 = getelementptr inbounds float, float* %116, i64 192
  %152 = load float, float* %151, align 4
  %153 = fmul nsz float %146, %152
  %154 = fsub nsz float %144, %153
  %155 = getelementptr inbounds float, float* %118, i64 256
  %156 = load float, float* %155, align 4
  %157 = getelementptr inbounds float, float* %114, i64 257
  %158 = load float, float* %157, align 4
  %159 = fmul nsz float %156, %158
  %160 = fadd nsz float %150, %159
  %161 = getelementptr inbounds float, float* %116, i64 256
  %162 = load float, float* %161, align 4
  %163 = fmul nsz float %156, %162
  %164 = fsub nsz float %154, %163
  %165 = getelementptr inbounds float, float* %118, i64 320
  %166 = load float, float* %165, align 4
  %167 = getelementptr inbounds float, float* %114, i64 321
  %168 = load float, float* %167, align 4
  %169 = fmul nsz float %166, %168
  %170 = fadd nsz float %160, %169
  %171 = getelementptr inbounds float, float* %116, i64 320
  %172 = load float, float* %171, align 4
  %173 = fmul nsz float %166, %172
  %174 = fsub nsz float %164, %173
  %175 = getelementptr inbounds float, float* %118, i64 384
  %176 = load float, float* %175, align 4
  %177 = getelementptr inbounds float, float* %114, i64 385
  %178 = load float, float* %177, align 4
  %179 = fmul nsz float %176, %178
  %180 = fadd nsz float %170, %179
  %181 = getelementptr inbounds float, float* %116, i64 384
  %182 = load float, float* %181, align 4
  %183 = fmul nsz float %176, %182
  %184 = fsub nsz float %174, %183
  %185 = getelementptr inbounds float, float* %118, i64 448
  %186 = load float, float* %185, align 4
  %187 = getelementptr inbounds float, float* %114, i64 449
  %188 = load float, float* %187, align 4
  %189 = fmul nsz float %186, %188
  %190 = fadd nsz float %180, %189
  %191 = getelementptr inbounds float, float* %116, i64 448
  %192 = load float, float* %191, align 4
  %193 = fmul nsz float %186, %192
  %194 = fsub nsz float %184, %193
  %195 = sub nsw i64 0, %112
  %196 = getelementptr inbounds float, float* %61, i64 %195
  %197 = load float, float* %196, align 4
  %198 = getelementptr inbounds float, float* %114, i64 33
  %199 = load float, float* %198, align 4
  %200 = fmul nsz float %197, %199
  %201 = fsub nsz float %190, %200
  %202 = getelementptr inbounds float, float* %116, i64 32
  %203 = load float, float* %202, align 4
  %204 = fmul nsz float %197, %203
  %205 = fsub nsz float %194, %204
  %206 = getelementptr inbounds float, float* %196, i64 64
  %207 = load float, float* %206, align 4
  %208 = getelementptr inbounds float, float* %114, i64 97
  %209 = load float, float* %208, align 4
  %210 = fmul nsz float %207, %209
  %211 = fsub nsz float %201, %210
  %212 = getelementptr inbounds float, float* %116, i64 96
  %213 = load float, float* %212, align 4
  %214 = fmul nsz float %207, %213
  %215 = fsub nsz float %205, %214
  %216 = getelementptr inbounds float, float* %196, i64 128
  %217 = load float, float* %216, align 4
  %218 = getelementptr inbounds float, float* %114, i64 161
  %219 = load float, float* %218, align 4
  %220 = fmul nsz float %217, %219
  %221 = fsub nsz float %211, %220
  %222 = getelementptr inbounds float, float* %116, i64 160
  %223 = load float, float* %222, align 4
  %224 = fmul nsz float %217, %223
  %225 = fsub nsz float %215, %224
  %226 = getelementptr inbounds float, float* %196, i64 192
  %227 = load float, float* %226, align 4
  %228 = getelementptr inbounds float, float* %114, i64 225
  %229 = load float, float* %228, align 4
  %230 = fmul nsz float %227, %229
  %231 = fsub nsz float %221, %230
  %232 = getelementptr inbounds float, float* %116, i64 224
  %233 = load float, float* %232, align 4
  %234 = fmul nsz float %227, %233
  %235 = fsub nsz float %225, %234
  %236 = getelementptr inbounds float, float* %196, i64 256
  %237 = load float, float* %236, align 4
  %238 = getelementptr inbounds float, float* %114, i64 289
  %239 = load float, float* %238, align 4
  %240 = fmul nsz float %237, %239
  %241 = fsub nsz float %231, %240
  %242 = getelementptr inbounds float, float* %116, i64 288
  %243 = load float, float* %242, align 4
  %244 = fmul nsz float %237, %243
  %245 = fsub nsz float %235, %244
  %246 = getelementptr inbounds float, float* %196, i64 320
  %247 = load float, float* %246, align 4
  %248 = getelementptr inbounds float, float* %114, i64 353
  %249 = load float, float* %248, align 4
  %250 = fmul nsz float %247, %249
  %251 = fsub nsz float %241, %250
  %252 = getelementptr inbounds float, float* %116, i64 352
  %253 = load float, float* %252, align 4
  %254 = fmul nsz float %247, %253
  %255 = fsub nsz float %245, %254
  %256 = getelementptr inbounds float, float* %196, i64 384
  %257 = load float, float* %256, align 4
  %258 = getelementptr inbounds float, float* %114, i64 417
  %259 = load float, float* %258, align 4
  %260 = fmul nsz float %257, %259
  %261 = fsub nsz float %251, %260
  %262 = getelementptr inbounds float, float* %116, i64 416
  %263 = load float, float* %262, align 4
  %264 = fmul nsz float %257, %263
  %265 = fsub nsz float %255, %264
  %266 = getelementptr inbounds float, float* %196, i64 448
  %267 = load float, float* %266, align 4
  %268 = getelementptr inbounds float, float* %114, i64 481
  %269 = load float, float* %268, align 4
  %270 = fmul nsz float %267, %269
  %271 = fsub nsz float %261, %270
  %272 = getelementptr inbounds float, float* %116, i64 480
  %273 = load float, float* %272, align 4
  %274 = fmul nsz float %267, %273
  %275 = fsub nsz float %265, %274
  store float %271, float* %113, align 4
  store float %275, float* %115, align 4
  %276 = getelementptr inbounds float, float* %115, i64 %110
  %277 = getelementptr inbounds float, float* %116, i64 -1
  %278 = add nuw nsw i64 %112, 1
  %279 = getelementptr inbounds float, float* %113, i64 %4
  %280 = icmp eq i64 %278, 16
  br i1 %280, label %281, label %111

281:                                              ; preds = %111
  %282 = getelementptr inbounds float, float* %0, i64 32
  %283 = getelementptr inbounds float, float* %114, i64 34
  %284 = load float, float* %283, align 4
  %285 = load float, float* %282, align 4
  %286 = fmul nsz float %284, %285
  %287 = fsub nsz float -0.000000e+00, %286
  %288 = getelementptr inbounds float, float* %114, i64 98
  %289 = load float, float* %288, align 4
  %290 = getelementptr inbounds float, float* %0, i64 96
  %291 = load float, float* %290, align 4
  %292 = fmul nsz float %289, %291
  %293 = fsub nsz float %287, %292
  %294 = getelementptr inbounds float, float* %114, i64 162
  %295 = load float, float* %294, align 4
  %296 = getelementptr inbounds float, float* %0, i64 160
  %297 = load float, float* %296, align 4
  %298 = fmul nsz float %295, %297
  %299 = fsub nsz float %293, %298
  %300 = getelementptr inbounds float, float* %114, i64 226
  %301 = load float, float* %300, align 4
  %302 = getelementptr inbounds float, float* %0, i64 224
  %303 = load float, float* %302, align 4
  %304 = fmul nsz float %301, %303
  %305 = fsub nsz float %299, %304
  %306 = getelementptr inbounds float, float* %114, i64 290
  %307 = load float, float* %306, align 4
  %308 = getelementptr inbounds float, float* %0, i64 288
  %309 = load float, float* %308, align 4
  %310 = fmul nsz float %307, %309
  %311 = fsub nsz float %305, %310
  %312 = getelementptr inbounds float, float* %114, i64 354
  %313 = load float, float* %312, align 4
  %314 = getelementptr inbounds float, float* %0, i64 352
  %315 = load float, float* %314, align 4
  %316 = fmul nsz float %313, %315
  %317 = fsub nsz float %311, %316
  %318 = getelementptr inbounds float, float* %114, i64 418
  %319 = load float, float* %318, align 4
  %320 = getelementptr inbounds float, float* %0, i64 416
  %321 = load float, float* %320, align 4
  %322 = fmul nsz float %319, %321
  %323 = fsub nsz float %317, %322
  %324 = getelementptr inbounds float, float* %114, i64 482
  %325 = load float, float* %324, align 4
  %326 = getelementptr inbounds float, float* %0, i64 480
  %327 = load float, float* %326, align 4
  %328 = fmul nsz float %325, %327
  %329 = fsub nsz float %323, %328
  store float %329, float* %279, align 4
  store i32 0, i32* %2, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_mpa_synth_filter_float(%struct.MPADSPContext* nocapture readonly, float*, i32* nocapture, float*, i32*, float*, i64, float*) local_unnamed_addr #0 {
  %9 = load i32, i32* %2, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds float, float* %1, i64 %10
  %12 = getelementptr inbounds %struct.MPADSPContext, %struct.MPADSPContext* %0, i64 0, i32 2
  %13 = load void (float*, float*)*, void (float*, float*)** %12, align 8
  tail call void %13(float* %11, float* %7) #5
  %14 = getelementptr inbounds %struct.MPADSPContext, %struct.MPADSPContext* %0, i64 0, i32 0
  %15 = load void (float*, float*, i32*, float*, i64)*, void (float*, float*, i32*, float*, i64)** %14, align 8
  tail call void %15(float* %11, float* %3, i32* %4, float* %5, i64 %6) #5
  %16 = add i32 %9, 480
  %17 = and i32 %16, 511
  store i32 %17, i32* %2, align 4
  ret void
}

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @ff_mpa_synth_init_float() local_unnamed_addr #2 {
  %1 = tail call i32 @pthread_once(i32* nonnull @ff_mpa_synth_init_float.init_static_once, void ()* nonnull @mpa_synth_window_init) #5
  ret void
}

declare i32 @pthread_once(i32*, void ()*) local_unnamed_addr #3

; Function Attrs: cold nofree norecurse nounwind optsize ssp uwtable
define internal void @mpa_synth_window_init() #4 {
  tail call fastcc void @mpa_synth_init() #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_imdct36_blocks_float(float* nocapture, float* nocapture, float*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = alloca [18 x float], align 16
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %334

9:                                                ; preds = %6
  %10 = icmp ne i32 %4, 0
  %11 = bitcast [18 x float]* %7 to i8*
  %12 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 6
  %13 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 16
  %14 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 10
  %15 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 14
  %16 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 4
  %17 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 12
  %18 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 8
  %19 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 7
  %20 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 17
  %21 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 11
  %22 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 15
  %23 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 5
  %24 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 13
  %25 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 9
  %26 = bitcast [18 x float]* %7 to <4 x float>*
  br label %27

27:                                               ; preds = %301, %9
  %28 = phi float* [ %0, %9 ], [ %331, %301 ]
  %29 = phi float* [ %1, %9 ], [ %330, %301 ]
  %30 = phi i32 [ 0, %9 ], [ %332, %301 ]
  %31 = phi float* [ %2, %9 ], [ %326, %301 ]
  %32 = icmp ult i32 %30, 2
  %33 = and i1 %10, %32
  %34 = select i1 %33, i32 0, i32 %5
  %35 = and i32 %30, 1
  %36 = sub nsw i32 0, %35
  %37 = and i32 %36, 4
  %38 = add nsw i32 %34, %37
  %39 = sext i32 %38 to i64
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %11) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 72, i1 false) #5
  %40 = getelementptr inbounds float, float* %31, i64 16
  %41 = load float, float* %40, align 4
  %42 = getelementptr inbounds float, float* %31, i64 17
  %43 = load float, float* %42, align 4
  %44 = fadd nsz float %41, %43
  %45 = getelementptr inbounds float, float* %31, i64 15
  %46 = load float, float* %45, align 4
  %47 = fadd nsz float %41, %46
  store float %47, float* %40, align 4
  %48 = getelementptr inbounds float, float* %31, i64 14
  %49 = load float, float* %48, align 4
  %50 = fadd nsz float %46, %49
  %51 = getelementptr inbounds float, float* %31, i64 13
  %52 = load float, float* %51, align 4
  %53 = getelementptr inbounds float, float* %31, i64 12
  %54 = load float, float* %53, align 4
  %55 = fadd nsz float %52, %54
  %56 = getelementptr inbounds float, float* %31, i64 11
  %57 = load float, float* %56, align 4
  %58 = getelementptr inbounds float, float* %31, i64 10
  %59 = load float, float* %58, align 4
  %60 = fadd nsz float %57, %59
  %61 = getelementptr inbounds float, float* %31, i64 9
  %62 = load float, float* %61, align 4
  %63 = getelementptr inbounds float, float* %31, i64 8
  %64 = load float, float* %63, align 4
  %65 = fadd nsz float %62, %64
  %66 = getelementptr inbounds float, float* %31, i64 7
  %67 = load float, float* %66, align 4
  %68 = getelementptr inbounds float, float* %31, i64 6
  %69 = load float, float* %68, align 4
  %70 = fadd nsz float %67, %69
  %71 = insertelement <4 x float> undef, float %59, i32 0
  %72 = insertelement <4 x float> %71, float %60, i32 1
  %73 = insertelement <4 x float> %72, float %64, i32 2
  %74 = insertelement <4 x float> %73, float %65, i32 3
  %75 = insertelement <4 x float> undef, float %62, i32 0
  %76 = insertelement <4 x float> %75, float %65, i32 1
  %77 = insertelement <4 x float> %76, float %67, i32 2
  %78 = insertelement <4 x float> %77, float %70, i32 3
  %79 = fadd nsz <4 x float> %74, %78
  %80 = extractelement <4 x float> %79, i32 0
  store float %80, float* %58, align 4
  %81 = extractelement <4 x float> %79, i32 2
  store float %81, float* %63, align 4
  %82 = getelementptr inbounds float, float* %31, i64 5
  %83 = load float, float* %82, align 4
  %84 = getelementptr inbounds float, float* %31, i64 4
  %85 = load float, float* %84, align 4
  %86 = fadd nsz float %83, %85
  %87 = getelementptr inbounds float, float* %31, i64 3
  %88 = load float, float* %87, align 4
  %89 = getelementptr inbounds float, float* %31, i64 2
  %90 = load float, float* %89, align 4
  %91 = fadd nsz float %88, %90
  %92 = getelementptr inbounds float, float* %31, i64 1
  %93 = load float, float* %92, align 4
  %94 = fadd nsz float %90, %93
  store float %94, float* %89, align 4
  %95 = load float, float* %31, align 4
  %96 = fadd nsz float %93, %95
  store float %96, float* %92, align 4
  %97 = fadd nsz float %44, %50
  store float %97, float* %42, align 4
  %98 = insertelement <4 x float> undef, float %54, i32 0
  %99 = insertelement <4 x float> %98, float %55, i32 1
  %100 = insertelement <4 x float> %99, float %49, i32 2
  %101 = insertelement <4 x float> %100, float %50, i32 3
  %102 = insertelement <4 x float> undef, float %57, i32 0
  %103 = insertelement <4 x float> %102, float %60, i32 1
  %104 = insertelement <4 x float> %103, float %52, i32 2
  %105 = insertelement <4 x float> %104, float %55, i32 3
  %106 = fadd nsz <4 x float> %101, %105
  %107 = bitcast float* %53 to <4 x float>*
  store <4 x float> %106, <4 x float>* %107, align 4
  %108 = extractelement <4 x float> %79, i32 1
  store float %108, float* %56, align 4
  %109 = extractelement <4 x float> %79, i32 3
  store float %109, float* %61, align 4
  %110 = insertelement <4 x float> undef, float %85, i32 0
  %111 = insertelement <4 x float> %110, float %86, i32 1
  %112 = insertelement <4 x float> %111, float %69, i32 2
  %113 = insertelement <4 x float> %112, float %70, i32 3
  %114 = insertelement <4 x float> undef, float %88, i32 0
  %115 = insertelement <4 x float> %114, float %91, i32 1
  %116 = insertelement <4 x float> %115, float %83, i32 2
  %117 = insertelement <4 x float> %116, float %86, i32 3
  %118 = fadd nsz <4 x float> %113, %117
  %119 = bitcast float* %84 to <4 x float>*
  store <4 x float> %118, <4 x float>* %119, align 4
  %120 = fadd nsz float %91, %96
  store float %120, float* %87, align 4
  %121 = fadd nsz float %47, %81
  %122 = extractelement <4 x float> %118, i32 0
  %123 = fsub nsz float %121, %122
  %124 = extractelement <4 x float> %106, i32 0
  %125 = fmul nsz float %124, 5.000000e-01
  %126 = fsub nsz float %95, %124
  %127 = fmul nsz float %123, 5.000000e-01
  %128 = fsub nsz float %126, %127
  store float %128, float* %12, align 8
  %129 = fadd nsz float %123, %126
  store float %129, float* %13, align 16
  %130 = fsub nsz float %81, %47
  %131 = fmul nsz float %130, 0xBFC63A1A80000000
  %132 = fadd nsz float %47, %122
  %133 = fmul nsz float %132, 0xBFE8836FA0000000
  %134 = fadd nsz float %80, %94
  %135 = extractelement <4 x float> %106, i32 2
  %136 = fadd nsz float %97, %109
  %137 = extractelement <4 x float> %118, i32 1
  %138 = fsub nsz float %136, %137
  %139 = extractelement <4 x float> %106, i32 1
  %140 = fmul nsz float %139, 5.000000e-01
  %141 = fsub nsz float %96, %139
  %142 = fadd nsz float %138, %141
  store float %142, float* %20, align 4
  %143 = load float, float* %45, align 4
  %144 = insertelement <4 x float> undef, float %135, i32 0
  %145 = insertelement <4 x float> %144, float %120, i32 1
  %146 = shufflevector <4 x float> %145, <4 x float> %118, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %147 = fsub nsz <4 x float> %79, %146
  %148 = fadd nsz <4 x float> %79, %146
  %149 = shufflevector <4 x float> %147, <4 x float> %148, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %150 = fmul nsz <4 x float> %149, <float 0xBFD5E3A880000000, float 0x3FEF838B80000000, float 0x3FEE11F640000000, float 0x3FEE11F640000000>
  %151 = fsub nsz float %108, %143
  %152 = insertelement <4 x float> undef, float %134, i32 0
  %153 = insertelement <4 x float> %152, float %151, i32 1
  %154 = insertelement <4 x float> %153, float %125, i32 2
  %155 = insertelement <4 x float> %154, float %140, i32 3
  %156 = insertelement <4 x float> <float 0x3FEF838B80000000, float 0xBFD5E3A880000000, float undef, float undef>, float %95, i32 2
  %157 = insertelement <4 x float> %156, float %96, i32 3
  %158 = fmul nsz <4 x float> %155, %157
  %159 = fadd nsz <4 x float> %155, %157
  %160 = shufflevector <4 x float> %158, <4 x float> %159, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %161 = extractelement <4 x float> %150, i32 2
  %162 = extractelement <4 x float> %159, i32 2
  %163 = fsub nsz float %162, %161
  %164 = fsub nsz float %163, %133
  store float %164, float* %14, align 8
  %165 = fadd nsz float %133, %162
  %166 = fsub nsz float %165, %131
  store float %166, float* %15, align 8
  %167 = fadd nsz float %135, %80
  %168 = fsub nsz float %167, %94
  %169 = fmul nsz float %168, 0xBFEBB67AE0000000
  store float %169, float* %16, align 16
  %170 = extractelement <4 x float> %118, i32 2
  %171 = fmul nsz float %170, 0x3FEBB67AE0000000
  %172 = fadd nsz float %135, %94
  %173 = fmul nsz float %172, 0xBFE491B760000000
  %174 = extractelement <4 x float> %158, i32 0
  %175 = fadd nsz float %174, %173
  %176 = fsub nsz float %175, %171
  store float %176, float* %17, align 16
  %177 = extractelement <4 x float> %150, i32 0
  %178 = fsub nsz float %177, %173
  %179 = fsub nsz float %178, %171
  store float %179, float* %18, align 16
  %180 = fmul nsz float %138, 5.000000e-01
  %181 = fsub nsz float %141, %180
  store float %181, float* %19, align 4
  %182 = fsub nsz float %109, %97
  %183 = fmul nsz float %182, 0xBFC63A1A80000000
  %184 = fadd nsz float %97, %137
  %185 = fmul nsz float %184, 0xBFE8836FA0000000
  %186 = extractelement <4 x float> %150, i32 3
  %187 = extractelement <4 x float> %159, i32 3
  %188 = fsub nsz float %187, %186
  %189 = fsub nsz float %188, %185
  store float %189, float* %21, align 4
  %190 = fadd nsz float %185, %187
  %191 = fsub nsz float %190, %183
  store float %191, float* %22, align 4
  %192 = fadd nsz float %108, %143
  %193 = fsub nsz float %192, %120
  %194 = fmul nsz float %193, 0xBFEBB67AE0000000
  store float %194, float* %23, align 4
  %195 = load float, float* %66, align 4
  %196 = fmul nsz float %195, 0x3FEBB67AE0000000
  %197 = fadd nsz float %120, %143
  %198 = fmul nsz float %197, 0xBFE491B760000000
  %199 = fadd nsz <4 x float> %150, %160
  %200 = insertelement <4 x float> undef, float %171, i32 0
  %201 = insertelement <4 x float> %200, float %196, i32 1
  %202 = insertelement <4 x float> %201, float %131, i32 2
  %203 = insertelement <4 x float> %202, float %183, i32 3
  %204 = fadd nsz <4 x float> %203, %199
  store <4 x float> %204, <4 x float>* %26, align 16
  %205 = extractelement <4 x float> %150, i32 1
  %206 = fadd nsz float %205, %198
  %207 = fsub nsz float %206, %196
  store float %207, float* %24, align 4
  %208 = extractelement <4 x float> %158, i32 1
  %209 = fsub nsz float %208, %198
  %210 = fsub nsz float %209, %196
  store float %210, float* %25, align 4
  %211 = extractelement <4 x float> %204, i32 0
  br label %212

212:                                              ; preds = %298, %27
  %213 = phi float [ %211, %27 ], [ %300, %298 ]
  %214 = phi i64 [ 0, %27 ], [ %295, %298 ]
  %215 = phi i64 [ 0, %27 ], [ %296, %298 ]
  %216 = or i64 %214, 2
  %217 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 %216
  %218 = load float, float* %217, align 8
  %219 = fadd nsz float %213, %218
  %220 = fsub nsz float %218, %213
  %221 = or i64 %214, 1
  %222 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 %221
  %223 = load float, float* %222, align 4
  %224 = or i64 %214, 3
  %225 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 %224
  %226 = load float, float* %225, align 4
  %227 = getelementptr inbounds [9 x float], [9 x float]* @icos36h, i64 0, i64 %215
  %228 = load float, float* %227, align 4
  %229 = fmul nsz float %228, 2.000000e+00
  %230 = fadd nsz float %223, %226
  %231 = fmul nsz float %230, %229
  %232 = sub nuw nsw i64 8, %215
  %233 = getelementptr inbounds [9 x float], [9 x float]* @icos36, i64 0, i64 %232
  %234 = load float, float* %233, align 4
  %235 = fsub nsz float %226, %223
  %236 = fmul nsz float %235, %234
  %237 = fadd nsz float %219, %231
  %238 = fsub nsz float %219, %231
  %239 = add nuw nsw i64 %215, 9
  %240 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %39, i64 %239
  %241 = load float, float* %240, align 4
  %242 = fmul nsz float %241, %238
  %243 = shl nsw i64 %239, 2
  %244 = getelementptr inbounds float, float* %29, i64 %243
  %245 = load float, float* %244, align 4
  %246 = fadd nsz float %245, %242
  %247 = shl nsw i64 %239, 5
  %248 = getelementptr inbounds float, float* %28, i64 %247
  store float %246, float* %248, align 4
  %249 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %39, i64 %232
  %250 = load float, float* %249, align 4
  %251 = fmul nsz float %238, %250
  %252 = shl nsw i64 %232, 2
  %253 = getelementptr inbounds float, float* %29, i64 %252
  %254 = load float, float* %253, align 4
  %255 = fadd nsz float %251, %254
  %256 = shl nsw i64 %232, 5
  %257 = getelementptr inbounds float, float* %28, i64 %256
  store float %255, float* %257, align 4
  %258 = add nuw nsw i64 %215, 29
  %259 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %39, i64 %258
  %260 = load float, float* %259, align 4
  %261 = fmul nsz float %237, %260
  store float %261, float* %244, align 4
  %262 = sub nuw nsw i64 28, %215
  %263 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %39, i64 %262
  %264 = load float, float* %263, align 4
  %265 = fmul nsz float %237, %264
  store float %265, float* %253, align 4
  %266 = fadd nsz float %220, %236
  %267 = fsub nsz float %220, %236
  %268 = sub nuw nsw i64 17, %215
  %269 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %39, i64 %268
  %270 = load float, float* %269, align 4
  %271 = fmul nsz float %267, %270
  %272 = shl nsw i64 %268, 2
  %273 = getelementptr inbounds float, float* %29, i64 %272
  %274 = load float, float* %273, align 4
  %275 = fadd nsz float %271, %274
  %276 = shl nsw i64 %268, 5
  %277 = getelementptr inbounds float, float* %28, i64 %276
  store float %275, float* %277, align 4
  %278 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %39, i64 %215
  %279 = load float, float* %278, align 4
  %280 = fmul nsz float %267, %279
  %281 = shl nsw i64 %215, 2
  %282 = getelementptr inbounds float, float* %29, i64 %281
  %283 = load float, float* %282, align 4
  %284 = fadd nsz float %280, %283
  %285 = shl nsw i64 %215, 5
  %286 = getelementptr inbounds float, float* %28, i64 %285
  store float %284, float* %286, align 4
  %287 = sub nuw nsw i64 37, %215
  %288 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %39, i64 %287
  %289 = load float, float* %288, align 4
  %290 = fmul nsz float %266, %289
  store float %290, float* %273, align 4
  %291 = add nuw nsw i64 %215, 20
  %292 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %39, i64 %291
  %293 = load float, float* %292, align 4
  %294 = fmul nsz float %266, %293
  store float %294, float* %282, align 4
  %295 = add nuw nsw i64 %214, 4
  %296 = add nuw nsw i64 %215, 1
  %297 = icmp eq i64 %296, 4
  br i1 %297, label %301, label %298

298:                                              ; preds = %212
  %299 = getelementptr inbounds [18 x float], [18 x float]* %7, i64 0, i64 %295
  %300 = load float, float* %299, align 16
  br label %212

301:                                              ; preds = %212
  %302 = load float, float* %13, align 16
  %303 = fmul nsz float %142, 0x3FE6A09E60000000
  %304 = fadd nsz float %303, %302
  %305 = fsub nsz float %302, %303
  %306 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %39, i64 13
  %307 = load float, float* %306, align 4
  %308 = fmul nsz float %307, %305
  %309 = getelementptr inbounds float, float* %29, i64 52
  %310 = load float, float* %309, align 4
  %311 = fadd nsz float %310, %308
  %312 = getelementptr inbounds float, float* %28, i64 416
  store float %311, float* %312, align 4
  %313 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %39, i64 4
  %314 = load float, float* %313, align 16
  %315 = fmul nsz float %305, %314
  %316 = getelementptr inbounds float, float* %29, i64 16
  %317 = load float, float* %316, align 4
  %318 = fadd nsz float %315, %317
  %319 = getelementptr inbounds float, float* %28, i64 128
  store float %318, float* %319, align 4
  %320 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %39, i64 33
  %321 = load float, float* %320, align 4
  %322 = fmul nsz float %304, %321
  store float %322, float* %309, align 4
  %323 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %39, i64 24
  %324 = load float, float* %323, align 16
  %325 = fmul nsz float %304, %324
  store float %325, float* %316, align 4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %11) #5
  %326 = getelementptr inbounds float, float* %31, i64 18
  %327 = and i32 %30, 3
  %328 = icmp eq i32 %327, 3
  %329 = select i1 %328, i64 69, i64 1
  %330 = getelementptr inbounds float, float* %29, i64 %329
  %331 = getelementptr inbounds float, float* %28, i64 1
  %332 = add nuw nsw i32 %30, 1
  %333 = icmp eq i32 %332, %3
  br i1 %333, label %334, label %27

334:                                              ; preds = %301, %6
  ret void
}

; Function Attrs: cold nofree norecurse nounwind optsize ssp uwtable
define internal fastcc void @mpa_synth_init() unnamed_addr #4 {
  br label %1

1:                                                ; preds = %16, %0
  %2 = phi i64 [ 0, %0 ], [ %17, %16 ]
  %3 = getelementptr inbounds [257 x i32], [257 x i32]* @ff_mpa_enwindow, i64 0, i64 %2
  %4 = load i32, i32* %3, align 4
  %5 = sitofp i32 %4 to float
  %6 = fmul nsz float %5, 0x3D80000000000000
  %7 = getelementptr inbounds [768 x float], [768 x float]* @ff_mpa_synth_window_float, i64 0, i64 %2
  store float %6, float* %7, align 4
  %8 = icmp eq i64 %2, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %1
  %10 = and i64 %2, 63
  %11 = icmp eq i64 %10, 0
  %12 = fsub nsz float -0.000000e+00, %6
  %13 = select i1 %11, float %6, float %12
  %14 = sub nuw nsw i64 512, %2
  %15 = getelementptr inbounds [768 x float], [768 x float]* @ff_mpa_synth_window_float, i64 0, i64 %14
  store float %13, float* %15, align 4
  br label %16

16:                                               ; preds = %1, %9
  %17 = add nuw nsw i64 %2, 1
  %18 = icmp eq i64 %17, 257
  br i1 %18, label %19, label %1

19:                                               ; preds = %16, %36
  %20 = phi i64 [ %37, %36 ], [ 0, %16 ]
  %21 = shl nsw i64 %20, 6
  %22 = or i64 %21, 32
  %23 = shl i64 %20, 4
  %24 = add nuw nsw i64 %23, 512
  br label %25

25:                                               ; preds = %25, %19
  %26 = phi i64 [ 0, %19 ], [ %34, %25 ]
  %27 = sub nuw nsw i64 %22, %26
  %28 = getelementptr inbounds [768 x float], [768 x float]* @ff_mpa_synth_window_float, i64 0, i64 %27
  %29 = bitcast float* %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = add nuw nsw i64 %24, %26
  %32 = getelementptr inbounds [768 x float], [768 x float]* @ff_mpa_synth_window_float, i64 0, i64 %31
  %33 = bitcast float* %32 to i32*
  store i32 %30, i32* %33, align 4
  %34 = add nuw nsw i64 %26, 1
  %35 = icmp eq i64 %34, 16
  br i1 %35, label %36, label %25

36:                                               ; preds = %25
  %37 = add nuw nsw i64 %20, 1
  %38 = icmp eq i64 %37, 8
  br i1 %38, label %39, label %19

39:                                               ; preds = %36, %56
  %40 = phi i64 [ %57, %56 ], [ 0, %36 ]
  %41 = shl nsw i64 %40, 6
  %42 = or i64 %41, 48
  %43 = shl i64 %40, 4
  %44 = add nuw nsw i64 %43, 640
  br label %45

45:                                               ; preds = %45, %39
  %46 = phi i64 [ 0, %39 ], [ %54, %45 ]
  %47 = sub nuw nsw i64 %42, %46
  %48 = getelementptr inbounds [768 x float], [768 x float]* @ff_mpa_synth_window_float, i64 0, i64 %47
  %49 = bitcast float* %48 to i32*
  %50 = load i32, i32* %49, align 4
  %51 = add nuw nsw i64 %44, %46
  %52 = getelementptr inbounds [768 x float], [768 x float]* @ff_mpa_synth_window_float, i64 0, i64 %51
  %53 = bitcast float* %52 to i32*
  store i32 %50, i32* %53, align 4
  %54 = add nuw nsw i64 %46, 1
  %55 = icmp eq i64 %54, 16
  br i1 %55, label %56, label %45

56:                                               ; preds = %45
  %57 = add nuw nsw i64 %40, 1
  %58 = icmp eq i64 %57, 8
  br i1 %58, label %59, label %39

59:                                               ; preds = %56
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { cold }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
