; ModuleID = '../../third_party/skia/modules/sksg/src/SkSGPath.cpp'
source_filename = "../../third_party/skia/modules/sksg/src/SkSGPath.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sksg::Path" = type { %"class.sksg::GeometryNode.base", [6 x i8], %class.SkPath }
%"class.sksg::GeometryNode.base" = type { %"class.sksg::Node.base" }
%"class.sksg::Node.base" = type <{ %class.SkRefCnt.base, [4 x i8], %union.anon, %struct.SkRect, i16 }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%union.anon = type { %"class.sksg::Node"* }
%"class.sksg::Node" = type <{ %class.SkRefCnt.base, [4 x i8], %union.anon, %struct.SkRect, i16, [6 x i8] }>
%struct.SkRect = type { float, float, float, float }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%"class.sksg::GeometryNode" = type { %"class.sksg::Node.base", [6 x i8] }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.13, [384 x i64], %class.sk_sp.14, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.16" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.13 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.14 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%class.SkPaint = type <{ %class.sk_sp.22, %class.sk_sp.23, %class.sk_sp.24, %class.sk_sp.25, %class.sk_sp.26, %struct.SkRGBA4f, float, float, %union.anon.27, [4 x i8] }>
%class.sk_sp.22 = type { %class.SkPathEffect* }
%class.SkPathEffect = type opaque
%class.sk_sp.23 = type { %class.SkShader* }
%class.SkShader = type opaque
%class.sk_sp.24 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type opaque
%class.sk_sp.25 = type { %class.SkColorFilter* }
%class.SkColorFilter = type opaque
%class.sk_sp.26 = type { %class.SkImageFilter* }
%class.SkImageFilter = type opaque
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon.27 = type { %struct.anon }
%struct.anon = type { i32 }
%"class.sksg::InvalidationController" = type opaque
%class.SkMatrix = type { [9 x float], i32 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

$_ZN4sksg4PathD2Ev = comdat any

$_ZN4sksg4PathD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

@_ZTVN4sksg4PathE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::Path"*)* @_ZN4sksg4PathD2Ev to i8*), i8* bitcast (void (%"class.sksg::Path"*)* @_ZN4sksg4PathD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%"class.sksg::Path"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)* @_ZN4sksg4Path12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix to i8*), i8* bitcast (void (%"class.sksg::Path"*, %class.SkCanvas*, i1)* @_ZNK4sksg4Path6onClipEP8SkCanvasb to i8*), i8* bitcast (void (%"class.sksg::Path"*, %class.SkCanvas*, %class.SkPaint*)* @_ZNK4sksg4Path6onDrawEP8SkCanvasRK7SkPaint to i8*), i8* bitcast (i1 (%"class.sksg::Path"*, %struct.SkPoint*)* @_ZNK4sksg4Path10onContainsERK7SkPoint to i8*), i8* bitcast (void (%class.SkPath*, %"class.sksg::Path"*)* @_ZNK4sksg4Path8onAsPathEv to i8*)] }, align 8

@_ZN4sksg4PathC1ERK6SkPath = hidden unnamed_addr alias void (%"class.sksg::Path"*, %class.SkPath*), void (%"class.sksg::Path"*, %class.SkPath*)* @_ZN4sksg4PathC2ERK6SkPath

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg4PathC2ERK6SkPath(%"class.sksg::Path"*, %class.SkPath* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.sksg::Path"* %0 to %"class.sksg::GeometryNode"*
  tail call void @_ZN4sksg12GeometryNodeC2Ev(%"class.sksg::GeometryNode"* %3) #5
  %4 = getelementptr inbounds %"class.sksg::Path", %"class.sksg::Path"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4sksg4PathE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.sksg::Path", %"class.sksg::Path"* %0, i64 0, i32 2
  tail call void @_ZN6SkPathC1ERKS_(%class.SkPath* %5, %class.SkPath* dereferenceable(16) %1) #5
  ret void
}

declare void @_ZN4sksg12GeometryNodeC2Ev(%"class.sksg::GeometryNode"*) unnamed_addr #1

declare void @_ZN6SkPathC1ERKS_(%class.SkPath*, %class.SkPath* dereferenceable(16)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg4Path6onClipEP8SkCanvasb(%"class.sksg::Path"*, %class.SkCanvas*, i1 zeroext) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sksg::Path", %"class.sksg::Path"* %0, i64 0, i32 2
  tail call void @_ZN8SkCanvas8clipPathERK6SkPath8SkClipOpb(%class.SkCanvas* %1, %class.SkPath* dereferenceable(16) %4, i32 1, i1 zeroext %2) #5
  ret void
}

declare void @_ZN8SkCanvas8clipPathERK6SkPath8SkClipOpb(%class.SkCanvas*, %class.SkPath* dereferenceable(16), i32, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg4Path6onDrawEP8SkCanvasRK7SkPaint(%"class.sksg::Path"*, %class.SkCanvas*, %class.SkPaint* dereferenceable(72)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sksg::Path", %"class.sksg::Path"* %0, i64 0, i32 2
  tail call void @_ZN8SkCanvas8drawPathERK6SkPathRK7SkPaint(%class.SkCanvas* %1, %class.SkPath* dereferenceable(16) %4, %class.SkPaint* dereferenceable(72) %2) #5
  ret void
}

declare void @_ZN8SkCanvas8drawPathERK6SkPathRK7SkPaint(%class.SkCanvas*, %class.SkPath* dereferenceable(16), %class.SkPaint* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4sksg4Path10onContainsERK7SkPoint(%"class.sksg::Path"*, %struct.SkPoint* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sksg::Path", %"class.sksg::Path"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %7 = load float, float* %6, align 4
  %8 = tail call zeroext i1 @_ZNK6SkPath8containsEff(%class.SkPath* %3, float %5, float %7) #5
  ret i1 %8
}

declare zeroext i1 @_ZNK6SkPath8containsEff(%class.SkPath*, float, float) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN4sksg4Path12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Path"*, %"class.sksg::InvalidationController"* nocapture readnone, %class.SkMatrix* nocapture readnone dereferenceable(40)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sksg::Path", %"class.sksg::Path"* %0, i64 0, i32 2, i32 4
  %5 = load i8, i8* %4, align 2
  %6 = and i8 %5, 2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.sksg::Path", %"class.sksg::Path"* %0, i64 0, i32 2
  %10 = tail call { <2 x float>, <2 x float> } @_ZNK6SkPath18computeTightBoundsEv(%class.SkPath* %9) #5
  %11 = extractvalue { <2 x float>, <2 x float> } %10, 0
  %12 = extractvalue { <2 x float>, <2 x float> } %10, 1
  br label %13

13:                                               ; preds = %3, %8
  %14 = phi <2 x float> [ %11, %8 ], [ <float 0xC1C0000000000000, float 0xC1C0000000000000>, %3 ]
  %15 = phi <2 x float> [ %12, %8 ], [ <float 0x41C0000000000000, float 0x41C0000000000000>, %3 ]
  %16 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %14, 0
  %17 = insertvalue { <2 x float>, <2 x float> } %16, <2 x float> %15, 1
  ret { <2 x float>, <2 x float> } %17
}

declare { <2 x float>, <2 x float> } @_ZNK6SkPath18computeTightBoundsEv(%class.SkPath*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg4Path8onAsPathEv(%class.SkPath* noalias sret, %"class.sksg::Path"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sksg::Path", %"class.sksg::Path"* %1, i64 0, i32 2
  tail call void @_ZN6SkPathC1ERKS_(%class.SkPath* %0, %class.SkPath* dereferenceable(16) %3) #5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sksg4PathD2Ev(%"class.sksg::Path"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.sksg::Path", %"class.sksg::Path"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4sksg4PathE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sksg::Path", %"class.sksg::Path"* %0, i64 0, i32 2
  tail call void @_ZN6SkPathD1Ev(%class.SkPath* %3) #5
  %4 = bitcast %"class.sksg::Path"* %0 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %4) #5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sksg4PathD0Ev(%"class.sksg::Path"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.sksg::Path", %"class.sksg::Path"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4sksg4PathE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sksg::Path", %"class.sksg::Path"* %0, i64 0, i32 2
  tail call void @_ZN6SkPathD1Ev(%class.SkPath* %3) #5
  %4 = bitcast %"class.sksg::Path"* %0 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %4) #5
  %5 = bitcast %"class.sksg::Path"* %0 to i8*
  tail call void @_ZdlPv(i8* %5) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #5
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
