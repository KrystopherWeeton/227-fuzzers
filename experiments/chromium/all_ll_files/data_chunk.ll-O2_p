; ModuleID = '../../third_party/webrtc/net/dcsctp/packet/chunk/data_chunk.cc'
source_filename = "../../third_party/webrtc/net/dcsctp/packet/chunk/data_chunk.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [7 x i8], %union.anon }
%union.anon = type { %"class.dcsctp::DataChunk" }
%"class.dcsctp::DataChunk" = type { %"class.dcsctp::AnyDataChunk.base", [7 x i8] }
%"class.dcsctp::AnyDataChunk.base" = type <{ %"class.dcsctp::Chunk", %"class.dcsctp::StrongAlias", [4 x i8], %"struct.dcsctp::Data", %"class.dcsctp::StrongAlias.9" }>
%"class.dcsctp::Chunk" = type { i32 (...)** }
%"class.dcsctp::StrongAlias" = type { i32 }
%"struct.dcsctp::Data" = type <{ %"class.dcsctp::StrongAlias.0", %"class.dcsctp::StrongAlias.1", %"class.dcsctp::StrongAlias.2", %"class.dcsctp::StrongAlias.3", %"class.dcsctp::StrongAlias.4", %"class.std::__1::vector", %"class.dcsctp::StrongAlias.6", %"class.dcsctp::StrongAlias.7", %"class.dcsctp::StrongAlias.8", [5 x i8] }>
%"class.dcsctp::StrongAlias.0" = type { i16 }
%"class.dcsctp::StrongAlias.1" = type { i16 }
%"class.dcsctp::StrongAlias.2" = type { i32 }
%"class.dcsctp::StrongAlias.3" = type { i32 }
%"class.dcsctp::StrongAlias.4" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.dcsctp::StrongAlias.6" = type { i8 }
%"class.dcsctp::StrongAlias.7" = type { i8 }
%"class.dcsctp::StrongAlias.8" = type { i8 }
%"class.dcsctp::StrongAlias.9" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.23 }
%union.anon.23 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.rtc::StringBuilder" = type { %"class.std::__1::basic_string" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.dcsctp::AnyDataChunk" = type <{ %"class.dcsctp::Chunk", %"class.dcsctp::StrongAlias", [4 x i8], %"struct.dcsctp::Data", %"class.dcsctp::StrongAlias.9", [7 x i8] }>

$_ZN6dcsctp9DataChunkD0Ev = comdat any

$_ZN6dcsctp12AnyDataChunkD2Ev = comdat any

$_ZN6dcsctp12AnyDataChunkD0Ev = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZTVN6dcsctp12AnyDataChunkE = comdat any

@_ZN6dcsctp9DataChunk5kTypeE = hidden local_unnamed_addr constant i32 0, align 4
@.str = private unnamed_addr constant [12 x i8] c"DATA, type=\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"unordered\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"ordered\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"::\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"complete\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"first\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"last\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"middle\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c", tsn=\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c", stream_id=\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c", ppid=\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c", length=\00", align 1
@_ZTVN6dcsctp9DataChunkE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.dcsctp::AnyDataChunk"*)* @_ZN6dcsctp12AnyDataChunkD2Ev to i8*), i8* bitcast (void (%"class.dcsctp::DataChunk"*)* @_ZN6dcsctp9DataChunkD0Ev to i8*), i8* bitcast (void (%"class.dcsctp::DataChunk"*, %"class.std::__1::vector"*)* @_ZNK6dcsctp9DataChunk11SerializeToERNSt3__16vectorIhNS1_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.dcsctp::DataChunk"*)* @_ZNK6dcsctp9DataChunk8ToStringEv to i8*)] }, align 8
@_ZTVN6dcsctp12AnyDataChunkE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.dcsctp::AnyDataChunk"*)* @_ZN6dcsctp12AnyDataChunkD2Ev to i8*), i8* bitcast (void (%"class.dcsctp::AnyDataChunk"*)* @_ZN6dcsctp12AnyDataChunkD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6dcsctp9DataChunk5ParseEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional"* noalias nocapture sret, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = icmp eq i64 %2, 0
  %6 = select i1 %5, i8* null, i8* %1
  %7 = icmp ult i64 %2, 16
  br i1 %7, label %8, label %9

8:                                                ; preds = %3
  tail call void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidSizeEmm(i64 %2, i64 16) #9, !noalias !2
  br label %32

9:                                                ; preds = %3
  %10 = load i8, i8* %6, align 1, !noalias !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %9
  %13 = zext i8 %10 to i32
  tail call void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidTypeEii(i32 %13, i32 0) #9, !noalias !2
  br label %32

14:                                               ; preds = %9
  %15 = getelementptr inbounds i8, i8* %6, i64 2
  %16 = load i8, i8* %15, align 1, !noalias !2
  %17 = zext i8 %16 to i16
  %18 = shl nuw i16 %17, 8
  %19 = getelementptr inbounds i8, i8* %6, i64 3
  %20 = load i8, i8* %19, align 1, !noalias !2
  %21 = zext i8 %20 to i16
  %22 = or i16 %18, %21
  %23 = zext i16 %22 to i64
  %24 = icmp ugt i64 %23, %2
  %25 = icmp ult i16 %22, 16
  %26 = or i1 %25, %24
  br i1 %26, label %27, label %28

27:                                               ; preds = %14
  tail call void @_ZN6dcsctp14tlv_trait_impl32ReportInvalidVariableLengthFieldEmm(i64 %23, i64 %2) #9, !noalias !2
  br label %32

28:                                               ; preds = %14
  %29 = sub i64 %2, %23
  %30 = icmp ugt i64 %29, 3
  br i1 %30, label %31, label %36

31:                                               ; preds = %28
  tail call void @_ZN6dcsctp14tlv_trait_impl20ReportInvalidPaddingEm(i64 %29) #9, !noalias !2
  br label %32

32:                                               ; preds = %8, %27, %31, %12
  %33 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %33, align 8
  %34 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %35 = bitcast %union.anon* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 72, i1 false) #9
  br label %142

36:                                               ; preds = %28
  %37 = getelementptr inbounds i8, i8* %6, i64 1
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds i8, i8* %6, i64 4
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = shl nuw i32 %41, 24
  %43 = getelementptr inbounds i8, i8* %6, i64 5
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = shl nuw nsw i32 %45, 16
  %47 = or i32 %46, %42
  %48 = getelementptr inbounds i8, i8* %6, i64 6
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = shl nuw nsw i32 %50, 8
  %52 = or i32 %47, %51
  %53 = getelementptr inbounds i8, i8* %6, i64 7
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = or i32 %52, %55
  %57 = getelementptr inbounds i8, i8* %6, i64 8
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i16
  %60 = shl nuw i16 %59, 8
  %61 = getelementptr inbounds i8, i8* %6, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i16
  %64 = or i16 %60, %63
  %65 = getelementptr inbounds i8, i8* %6, i64 10
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i16
  %68 = shl nuw i16 %67, 8
  %69 = getelementptr inbounds i8, i8* %6, i64 11
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i16
  %72 = or i16 %68, %71
  %73 = getelementptr inbounds i8, i8* %6, i64 12
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = shl nuw i32 %75, 24
  %77 = getelementptr inbounds i8, i8* %6, i64 13
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = shl nuw nsw i32 %79, 16
  %81 = or i32 %80, %76
  %82 = getelementptr inbounds i8, i8* %6, i64 14
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = shl nuw nsw i32 %84, 8
  %86 = or i32 %81, %85
  %87 = getelementptr inbounds i8, i8* %6, i64 15
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = or i32 %86, %89
  %91 = and i8 %38, 1
  %92 = lshr i8 %38, 1
  %93 = and i8 %92, 1
  %94 = lshr i8 %38, 2
  %95 = and i8 %94, 1
  %96 = lshr i8 %38, 3
  %97 = and i8 %96, 1
  %98 = add nsw i64 %23, -16
  %99 = icmp ugt i16 %22, 16
  %100 = getelementptr inbounds i8, i8* %6, i64 16
  %101 = icmp eq i64 %98, 0
  %102 = select i1 %101, i8* null, i8* %100
  %103 = select i1 %99, i8* %102, i8* null
  %104 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %104, i8 0, i64 24, i1 false) #9
  %105 = icmp eq i64 %98, 0
  %106 = xor i1 %99, true
  %107 = or i1 %105, %106
  br i1 %107, label %121, label %108

108:                                              ; preds = %36
  %109 = icmp slt i64 %98, 0
  br i1 %109, label %110, label %112

110:                                              ; preds = %108
  %111 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %111) #10
  unreachable

112:                                              ; preds = %108
  %113 = tail call i8* @_Znwm(i64 %98) #11
  %114 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %115 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  store i8* %113, i8** %115, align 8
  %116 = getelementptr inbounds i8, i8* %113, i64 %98
  %117 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8* %116, i8** %117, align 8
  %118 = bitcast i8** %114 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %113, i8* align 1 %103, i64 %98, i1 false) #9
  %119 = ptrtoint i8* %116 to i64
  store i64 %119, i64* %118, align 8
  %120 = ptrtoint i8* %113 to i64
  br label %121

121:                                              ; preds = %36, %112
  %122 = phi i64 [ %119, %112 ], [ 0, %36 ]
  %123 = phi i64 [ %120, %112 ], [ 0, %36 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %104, i8 0, i64 24, i1 false) #9
  %124 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %124, align 8
  %125 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %126 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 1, i32 0
  store i32 %56, i32* %126, align 8
  %127 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 0, i32 0
  store i16 %64, i16* %127, align 8
  %128 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 1, i32 0
  store i16 %72, i16* %128, align 2
  %129 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 2, i32 0
  store i32 0, i32* %129, align 4
  %130 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 3, i32 0
  store i32 0, i32* %130, align 8
  %131 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 4, i32 0
  store i32 %90, i32* %131, align 4
  %132 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 5
  %133 = bitcast %"class.std::__1::vector"* %132 to i64*
  store i64 %123, i64* %133, align 8
  %134 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 5, i32 0, i32 1
  %135 = bitcast i8** %134 to i64*
  store i64 %122, i64* %135, align 8
  %136 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 5, i32 0, i32 2, i32 0, i32 0
  %137 = bitcast i8** %136 to i64*
  store i64 %122, i64* %137, align 8
  %138 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 6, i32 0
  store i8 %93, i8* %138, align 8
  %139 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 7, i32 0
  store i8 %91, i8* %139, align 1
  %140 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 3, i32 8, i32 0
  store i8 %95, i8* %140, align 2
  %141 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 4, i32 0
  store i8 %97, i8* %141, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp9DataChunkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %125, align 8
  br label %142

142:                                              ; preds = %121, %32
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6dcsctp9DataChunk11SerializeToERNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.dcsctp::DataChunk"* readonly, %"class.std::__1::vector"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %0, i64 0, i32 0, i32 3, i32 5, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %0, i64 0, i32 0, i32 3, i32 5, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %8, %5
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector"* %1 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = add i64 %9, 16
  %17 = add i64 %15, %16
  %18 = icmp ult i64 %15, %17
  %19 = inttoptr i64 %14 to i8*
  br i1 %18, label %20, label %23

20:                                               ; preds = %2
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %1, i64 %16) #9
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  br label %27

23:                                               ; preds = %2
  %24 = icmp ugt i64 %15, %17
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = getelementptr inbounds i8, i8* %19, i64 %17
  store i8* %26, i8** %10, align 8
  br label %27

27:                                               ; preds = %20, %23, %25
  %28 = phi i8* [ %22, %20 ], [ %19, %23 ], [ %19, %25 ]
  %29 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %30 = getelementptr inbounds i8, i8* %28, i64 %15
  store i8 0, i8* %30, align 1
  %31 = trunc i64 %16 to i16
  %32 = getelementptr inbounds i8, i8* %30, i64 2
  %33 = lshr i16 %31, 8
  %34 = trunc i16 %33 to i8
  store i8 %34, i8* %32, align 1
  %35 = trunc i64 %16 to i8
  %36 = getelementptr inbounds i8, i8* %30, i64 3
  store i8 %35, i8* %36, align 1
  %37 = load i8*, i8** %29, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %15
  %39 = icmp eq i64 %16, 0
  %40 = select i1 %39, i8* null, i8* %38
  %41 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %0, i64 0, i32 0, i32 3, i32 7, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %0, i64 0, i32 0, i32 3, i32 6, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %0, i64 0, i32 0, i32 3, i32 8, i32 0
  %46 = load i8, i8* %45, align 1
  %47 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %0, i64 0, i32 0, i32 4, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %44, 0
  %50 = select i1 %49, i8 0, i8 2
  %51 = or i8 %50, %42
  %52 = icmp eq i8 %46, 0
  %53 = select i1 %52, i8 0, i8 4
  %54 = or i8 %51, %53
  %55 = icmp eq i8 %48, 0
  %56 = select i1 %55, i8 0, i8 8
  %57 = or i8 %54, %56
  %58 = getelementptr inbounds i8, i8* %40, i64 1
  store i8 %57, i8* %58, align 1
  %59 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %0, i64 0, i32 0, i32 1, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds i8, i8* %40, i64 4
  %62 = lshr i32 %60, 24
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %61, align 1
  %64 = lshr i32 %60, 16
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds i8, i8* %40, i64 5
  store i8 %65, i8* %66, align 1
  %67 = lshr i32 %60, 8
  %68 = trunc i32 %67 to i8
  %69 = getelementptr inbounds i8, i8* %40, i64 6
  store i8 %68, i8* %69, align 1
  %70 = trunc i32 %60 to i8
  %71 = getelementptr inbounds i8, i8* %40, i64 7
  store i8 %70, i8* %71, align 1
  %72 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %0, i64 0, i32 0, i32 3, i32 0, i32 0
  %73 = load i16, i16* %72, align 8
  %74 = getelementptr inbounds i8, i8* %40, i64 8
  %75 = lshr i16 %73, 8
  %76 = trunc i16 %75 to i8
  store i8 %76, i8* %74, align 1
  %77 = trunc i16 %73 to i8
  %78 = getelementptr inbounds i8, i8* %40, i64 9
  store i8 %77, i8* %78, align 1
  %79 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %0, i64 0, i32 0, i32 3, i32 1, i32 0
  %80 = load i16, i16* %79, align 2
  %81 = getelementptr inbounds i8, i8* %40, i64 10
  %82 = lshr i16 %80, 8
  %83 = trunc i16 %82 to i8
  store i8 %83, i8* %81, align 1
  %84 = trunc i16 %80 to i8
  %85 = getelementptr inbounds i8, i8* %40, i64 11
  store i8 %84, i8* %85, align 1
  %86 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %0, i64 0, i32 0, i32 3, i32 4, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds i8, i8* %40, i64 12
  %89 = lshr i32 %87, 24
  %90 = trunc i32 %89 to i8
  store i8 %90, i8* %88, align 1
  %91 = lshr i32 %87, 16
  %92 = trunc i32 %91 to i8
  %93 = getelementptr inbounds i8, i8* %40, i64 13
  store i8 %92, i8* %93, align 1
  %94 = lshr i32 %87, 8
  %95 = trunc i32 %94 to i8
  %96 = getelementptr inbounds i8, i8* %40, i64 14
  store i8 %95, i8* %96, align 1
  %97 = trunc i32 %87 to i8
  %98 = getelementptr inbounds i8, i8* %40, i64 15
  store i8 %97, i8* %98, align 1
  %99 = load i8*, i8** %3, align 8
  %100 = load i64, i64* %7, align 8
  %101 = ptrtoint i8* %99 to i64
  %102 = sub i64 %100, %101
  %103 = icmp eq i64 %102, 0
  %104 = select i1 %103, i8* null, i8* %99
  %105 = getelementptr inbounds i8, i8* %40, i64 16
  %106 = icmp ult i64 %9, %102
  %107 = select i1 %106, i64 %9, i64 %102
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %105, i8* align 1 %104, i64 %107, i1 false) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6dcsctp9DataChunk8ToStringEv(%"class.std::__1::basic_string"* noalias nocapture sret, %"class.dcsctp::DataChunk"* readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.rtc::StringBuilder", align 8
  %8 = bitcast %"class.rtc::StringBuilder"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #9
  %9 = getelementptr inbounds %"class.rtc::StringBuilder", %"class.rtc::StringBuilder"* %7, i64 0, i32 0
  %10 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %9, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i64 11) #9
  %11 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %1, i64 0, i32 0, i32 3, i32 7, i32 0
  %12 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %1, i64 0, i32 0, i32 3, i32 6, i32 0
  %13 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %1, i64 0, i32 0, i32 3, i32 8, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, 0
  %16 = select i1 %15, i64 7, i64 9
  %17 = select i1 %15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0)
  %18 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %9, i8* %17, i64 %16) #9
  %19 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2) #9
  %20 = load i8, i8* %11, align 1
  %21 = load i8, i8* %12, align 1
  %22 = icmp eq i8 %21, 0
  %23 = icmp eq i8 %20, 0
  %24 = select i1 %23, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)
  %25 = select i1 %23, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0)
  %26 = select i1 %22, i8* %24, i8* %25
  %27 = call i64 @strlen(i8* nonnull %26) #9
  %28 = icmp sgt i64 %27, -1
  br i1 %28, label %30, label %29, !prof !5

29:                                               ; preds = %2
  call void @llvm.trap() #9
  unreachable

30:                                               ; preds = %2
  %31 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %9, i8* %26, i64 %27) #9
  %32 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0), i64 6) #9
  %33 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %1, i64 0, i32 0, i32 1, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #9
  call void @_ZN3rtc8ToStringEj(%"class.std::__1::basic_string"* nonnull sret %3, i32 %34) #9
  %36 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  %38 = load i8, i8* %37, align 1
  %39 = icmp slt i8 %38, 0
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = zext i8 %38 to i64
  %45 = select i1 %39, i8* %41, i8* %35
  %46 = select i1 %39, i64 %43, i64 %44
  %47 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %9, i8* %45, i64 %46) #9
  %48 = load i8, i8* %37, align 1
  %49 = icmp slt i8 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %30
  %51 = load i8*, i8** %40, align 8
  call void @_ZdlPv(i8* %51) #11
  br label %52

52:                                               ; preds = %30, %50
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #9
  %53 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %9, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i64 12) #9
  %54 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %1, i64 0, i32 0, i32 3, i32 0, i32 0
  %55 = load i16, i16* %54, align 8
  %56 = zext i16 %55 to i32
  %57 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %57) #9
  call void @_ZN3rtc8ToStringEi(%"class.std::__1::basic_string"* nonnull sret %4, i32 %56) #9
  %58 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %59 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %58, i64 0, i32 1, i32 0
  %60 = load i8, i8* %59, align 1
  %61 = icmp slt i8 %60, 0
  %62 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = zext i8 %60 to i64
  %67 = select i1 %61, i8* %63, i8* %57
  %68 = select i1 %61, i64 %65, i64 %66
  %69 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %9, i8* %67, i64 %68) #9
  %70 = load i8, i8* %59, align 1
  %71 = icmp slt i8 %70, 0
  br i1 %71, label %72, label %74

72:                                               ; preds = %52
  %73 = load i8*, i8** %62, align 8
  call void @_ZdlPv(i8* %73) #11
  br label %74

74:                                               ; preds = %52, %72
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %57) #9
  %75 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0), i64 7) #9
  %76 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %1, i64 0, i32 0, i32 3, i32 4, i32 0
  %77 = load i32, i32* %76, align 4
  %78 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %78) #9
  call void @_ZN3rtc8ToStringEj(%"class.std::__1::basic_string"* nonnull sret %5, i32 %77) #9
  %79 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %80 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %79, i64 0, i32 1, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp slt i8 %81, 0
  %83 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = zext i8 %81 to i64
  %88 = select i1 %82, i8* %84, i8* %78
  %89 = select i1 %82, i64 %86, i64 %87
  %90 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %9, i8* %88, i64 %89) #9
  %91 = load i8, i8* %80, align 1
  %92 = icmp slt i8 %91, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %74
  %94 = load i8*, i8** %83, align 8
  call void @_ZdlPv(i8* %94) #11
  br label %95

95:                                               ; preds = %74, %93
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %78) #9
  %96 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %9, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i64 9) #9
  %97 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %1, i64 0, i32 0, i32 3, i32 5, i32 0, i32 0
  %98 = bitcast i8** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %1, i64 0, i32 0, i32 3, i32 5, i32 0, i32 1
  %101 = bitcast i8** %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = sub i64 %102, %99
  %104 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %104) #9
  call void @_ZN3rtc8ToStringEm(%"class.std::__1::basic_string"* nonnull sret %6, i64 %103) #9
  %105 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %106 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %105, i64 0, i32 1, i32 0
  %107 = load i8, i8* %106, align 1
  %108 = icmp slt i8 %107, 0
  %109 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load i8*, i8** %109, align 8
  %111 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = zext i8 %107 to i64
  %114 = select i1 %108, i8* %110, i8* %104
  %115 = select i1 %108, i64 %112, i64 %113
  %116 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %9, i8* %114, i64 %115) #9
  %117 = load i8, i8* %106, align 1
  %118 = icmp slt i8 %117, 0
  br i1 %118, label %119, label %121

119:                                              ; preds = %95
  %120 = load i8*, i8** %109, align 8
  call void @_ZdlPv(i8* %120) #11
  br label %121

121:                                              ; preds = %119, %95
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %104) #9
  %122 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* nonnull align 8 %8, i64 24, i1 false) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp9DataChunkD0Ev(%"class.dcsctp::DataChunk"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp12AnyDataChunkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %0, i64 0, i32 0, i32 3, i32 5, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %"class.dcsctp::DataChunk", %"class.dcsctp::DataChunk"* %0, i64 0, i32 0, i32 3, i32 5, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  tail call void @_ZdlPv(i8* nonnull %4) #11
  br label %10

10:                                               ; preds = %1, %6
  %11 = bitcast %"class.dcsctp::DataChunk"* %0 to i8*
  tail call void @_ZdlPv(i8* %11) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp12AnyDataChunkD2Ev(%"class.dcsctp::AnyDataChunk"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.dcsctp::AnyDataChunk", %"class.dcsctp::AnyDataChunk"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp12AnyDataChunkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.dcsctp::AnyDataChunk", %"class.dcsctp::AnyDataChunk"* %0, i64 0, i32 3, i32 5, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %"class.dcsctp::AnyDataChunk", %"class.dcsctp::AnyDataChunk"* %0, i64 0, i32 3, i32 5, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  tail call void @_ZdlPv(i8* nonnull %4) #11
  br label %10

10:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp12AnyDataChunkD0Ev(%"class.dcsctp::AnyDataChunk"*) unnamed_addr #2 comdat align 2 {
  tail call void @llvm.trap() #10
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

declare void @_ZN3rtc8ToStringEj(%"class.std::__1::basic_string"* sret, i32) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_ZN3rtc8ToStringEi(%"class.std::__1::basic_string"* sret, i32) local_unnamed_addr #4

declare void @_ZN3rtc8ToStringEm(%"class.std::__1::basic_string"* sret, i64) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidSizeEmm(i64, i64) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidTypeEii(i32, i32) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl32ReportInvalidVariableLengthFieldEmm(i64, i64) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl20ReportInvalidPaddingEm(i64) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #9
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #10
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #11
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #9
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #9
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #11
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6dcsctp8TLVTraitINS_15DataChunkConfigEE8ParseTLVEN3rtc9ArrayViewIKhLln4711EEE: argument 0"}
!4 = distinct !{!4, !"_ZN6dcsctp8TLVTraitINS_15DataChunkConfigEE8ParseTLVEN3rtc9ArrayViewIKhLln4711EEE"}
!5 = !{!"branch_weights", i32 2000, i32 1}
