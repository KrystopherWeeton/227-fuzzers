; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/encodemv.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/encodemv.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.mv_context = type { [19 x i8] }
%struct.vp8_token_struct = type { i32, i32 }
%struct.BOOL_CODER = type { i32, i32, i32, i32, i8*, i8*, %struct.vpx_internal_error_info* }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MV = type { i16, i16 }
%struct.VP8_COMP = type { [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], %struct.macroblock, %struct.VP8Common, [9 x %struct.BOOL_CODER], %struct.VP8_CONFIG, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.TOKENEXTRA*, i32, i32, i32, i32, i32, i32, [20 x i32], [20 x i32], i32, i32, %struct.CODING_CONTEXT, i64, i64, i32, i32, [2 x i32], double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, [5 x i32], i32, i32, i32, i32, double, i64, i64, i64, i32, i32, i32, i32, i64, i32, double, double, i64, i64, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x [2 x i32]]]]], i32, i32, i32, i32, %struct.vpx_codec_pkt_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [4 x i32], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i8*, i8*, [2 x [4 x i8]], [4 x i32], i8*, i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_atomic_int*, i32, %struct.vpx_atomic_int, i32, i32, i64*, i64, %struct.MB_ROW_COMP*, %struct.ENCODETHREAD_DATA*, %struct.LPFTHREAD_DATA, %union.sem_t*, %union.sem_t*, %union.sem_t, %union.sem_t, %struct.TOKENLIST*, [9 x i32], [9 x i8*], [9 x i8*], i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, [5 x %struct.variance_vtable], i64, i64, i64, i64, [128 x i32], %struct.frame_contexts, %struct.frame_contexts, %struct.frame_contexts, %struct.twopass_rc, i32, i32, i32*, i8*, i32, i32, %union.int_mv*, i32*, i32*, i32, i32, i32, i32, %struct.vp8_denoiser, i32, [5 x %struct.LAYER_CONTEXT], [5 x i64], [5 x i64], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], i32, i8, [4 x i32], i32, %struct.rd_costs_struct, i32, i32, [12 x i8] }
%struct.macroblock = type { [400 x i16], [400 x i16], [256 x i8], i8*, [25 x %struct.block], %struct.yv12_buffer_config, %struct.macroblockd, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, [4 x i32], %struct.search_site*, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32, i32, [2 x i32*], [2 x i32*], [10 x i32]*, [10 x i32]*, [10 x [10 x i32]]*, i32*, [8 x [3 x [12 x i32]]]*, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.mv_context*, i32, i32, i32, i32, i32, i32, %union.int_mv, i32, i32, i8, i32, [4 x [8 x [3 x [12 x i32]]]], [2 x [2047 x i32]], [5 x i32], [4 x i32], i64, i64, [4 x i32], [20 x i32], [20 x i32], i32, [20 x i32], i32, i32, i32, i32, i32, [1024 x i32], void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (%struct.block*, %struct.blockd*)*, i32, i32, [8 x i8] }
%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.PARTITION_INFO = type { i32, [16 x %struct.anon] }
%struct.anon = type { i32, %union.int_mv }
%struct.search_site = type { %struct.MV, i32 }
%union.int_mv = type { i32 }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.VP8_CONFIG = type { i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_codec_pkt_list*, i32, i32, [16 x i32], [16 x i32], i32, [16 x i32], i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_rational = type { i32, i32 }
%struct.lookahead_ctx = type opaque
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TOKENEXTRA = type { i8*, i16, i8, i8 }
%struct.CODING_CONTEXT = type { i32, i32, i32, i32, i32, [4 x i32], [2 x %struct.mv_context], [2 x [2048 x i32]], [4 x i8], [3 x i8], [4 x i8], [3 x i8], [5 x i32], [4 x i32], [4 x i32], i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon }
%union.anon = type { %struct.anon.0, [40 x i8] }
%struct.anon.0 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, i32, i32 }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_COMP = type { %struct.macroblock, [4 x i32], i32, [12 x i8] }
%struct.ENCODETHREAD_DATA = type { i32, i8*, i8* }
%struct.LPFTHREAD_DATA = type { i32, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA* }
%struct.variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32)* }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.twopass_rc = type { i32, double, i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS, i32, i64, i64, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, double }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.vp8_denoiser = type { [4 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, %struct.yv12_buffer_config, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.denoise_params }
%struct.denoise_params = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { double, i32, i64, i64, i64, i64, i64, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, i32, i32, i64, i32, i32, i32, i32, [4 x i32], [2 x i32] }
%struct.rd_costs_struct = type { [2 x [2048 x i32]], [2 x [512 x i32]], [2 x [10 x i32]], [2 x [10 x i32]], [10 x [10 x [10 x i32]]], [14 x i32], [4 x [8 x [3 x [12 x i32]]]] }

@vp8_prob_cost = external local_unnamed_addr constant [256 x i32], align 16
@vp8_default_mv_context = external constant [2 x %struct.mv_context], align 16
@vp8_mv_update_probs = external constant [2 x %struct.mv_context], align 16
@vp8_small_mvtree = external constant [0 x i8], align 1
@vp8_norm = external local_unnamed_addr constant [256 x i8], align 16
@.str = private unnamed_addr constant [39 x i8] c"Truncated packet or corrupt partition \00", align 1
@vp8_small_mvencodings = external constant [8 x %struct.vp8_token_struct], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_encode_motion_vector(%struct.BOOL_CODER* nocapture, %struct.MV* nocapture readonly, %struct.mv_context* nocapture readonly) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.MV, %struct.MV* %1, i64 0, i32 0
  %5 = load i16, i16* %4, align 2
  %6 = ashr i16 %5, 1
  %7 = sext i16 %6 to i32
  tail call fastcc void @encode_mvcomponent(%struct.BOOL_CODER* %0, i32 %7, %struct.mv_context* %2)
  %8 = getelementptr inbounds %struct.MV, %struct.MV* %1, i64 0, i32 1
  %9 = load i16, i16* %8, align 2
  %10 = ashr i16 %9, 1
  %11 = sext i16 %10 to i32
  %12 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %2, i64 1
  tail call fastcc void @encode_mvcomponent(%struct.BOOL_CODER* %0, i32 %11, %struct.mv_context* %12)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @encode_mvcomponent(%struct.BOOL_CODER* nocapture, i32, %struct.mv_context* nocapture readonly) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %2, i64 0, i32 0, i64 0
  %5 = icmp slt i32 %1, 0
  %6 = sub nsw i32 0, %1
  %7 = select i1 %5, i32 %6, i32 %1
  %8 = icmp slt i32 %7, 8
  %9 = load i8, i8* %4, align 1
  %10 = zext i8 %9 to i32
  br i1 %8, label %11, label %39

11:                                               ; preds = %3
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0, i32 %10)
  %12 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %2, i64 0, i32 0, i64 2
  %13 = lshr i32 %7, 2
  %14 = and i32 %13, 1
  %15 = load i8, i8* %12, align 1
  %16 = zext i8 %15 to i32
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 %14, i32 %16) #4
  %17 = zext i32 %14 to i64
  %18 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_small_mvtree, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = lshr i32 %7, 1
  %21 = and i32 %20, 1
  %22 = sext i8 %19 to i32
  %23 = ashr i32 %22, 1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %12, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 %21, i32 %27) #4
  %28 = add nsw i32 %21, %22
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_small_mvtree, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = and i32 %7, 1
  %33 = ashr i8 %31, 1
  %34 = sext i8 %33 to i64
  %35 = getelementptr inbounds i8, i8* %12, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 %32, i32 %37) #4
  %38 = icmp eq i32 %1, 0
  br i1 %38, label %97, label %92

39:                                               ; preds = %3
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 1, i32 %10)
  %40 = and i32 %7, 1
  %41 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %2, i64 0, i32 0, i64 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 %40, i32 %43)
  %44 = lshr i32 %7, 1
  %45 = and i32 %44, 1
  %46 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %2, i64 0, i32 0, i64 10
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 %45, i32 %48)
  %49 = lshr i32 %7, 2
  %50 = and i32 %49, 1
  %51 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %2, i64 0, i32 0, i64 11
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 %50, i32 %53)
  %54 = lshr i32 %7, 9
  %55 = and i32 %54, 1
  %56 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %2, i64 0, i32 0, i64 18
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 %55, i32 %58)
  %59 = lshr i32 %7, 8
  %60 = and i32 %59, 1
  %61 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %2, i64 0, i32 0, i64 17
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 %60, i32 %63)
  %64 = lshr i32 %7, 7
  %65 = and i32 %64, 1
  %66 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %2, i64 0, i32 0, i64 16
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 %65, i32 %68)
  %69 = lshr i32 %7, 6
  %70 = and i32 %69, 1
  %71 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %2, i64 0, i32 0, i64 15
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 %70, i32 %73)
  %74 = lshr i32 %7, 5
  %75 = and i32 %74, 1
  %76 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %2, i64 0, i32 0, i64 14
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 %75, i32 %78)
  %79 = lshr i32 %7, 4
  %80 = and i32 %79, 1
  %81 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %2, i64 0, i32 0, i64 13
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 %80, i32 %83)
  %84 = and i32 %7, 65520
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %92, label %86

86:                                               ; preds = %39
  %87 = lshr i32 %7, 3
  %88 = and i32 %87, 1
  %89 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %2, i64 0, i32 0, i64 12
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 %88, i32 %91)
  br label %92

92:                                               ; preds = %86, %39, %11
  %93 = lshr i32 %1, 31
  %94 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %2, i64 0, i32 0, i64 1
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 %93, i32 %96)
  br label %97

97:                                               ; preds = %11, %92
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_build_component_cost_table(i32** nocapture readonly, %struct.mv_context* nocapture readonly, i32* nocapture readonly) local_unnamed_addr #0 {
  tail call void @vpx_clear_system_state() #4
  %4 = load i32, i32* %2, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %62, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 0
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  %10 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %9
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i64
  %15 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = load i8, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_small_mvtree, i64 0, i64 0), align 1
  %18 = ashr i8 %17, 1
  %19 = sext i8 %18 to i64
  %20 = getelementptr inbounds i8, i8* %12, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = sext i8 %17 to i64
  %26 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_small_mvtree, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = ashr i8 %27, 1
  %29 = sext i8 %28 to i64
  %30 = getelementptr inbounds i8, i8* %12, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i64
  %33 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = add i32 %16, %11
  %36 = add i32 %35, %24
  %37 = add i32 %36, %34
  %38 = load i32*, i32** %0, align 8
  store i32 %37, i32* %38, align 4
  %39 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 1
  br label %40

40:                                               ; preds = %40, %6
  %41 = phi i64 [ %60, %40 ], [ 1, %6 ]
  %42 = trunc i64 %41 to i32
  %43 = tail call fastcc i32 @cost_mvcomponent(i32 %42, %struct.mv_context* %1)
  %44 = load i8, i8* %39, align 1
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = add i32 %47, %43
  %49 = load i32*, i32** %0, align 8
  %50 = getelementptr inbounds i32, i32* %49, i64 %41
  store i32 %48, i32* %50, align 4
  %51 = load i8, i8* %39, align 1
  %52 = xor i8 %51, -1
  %53 = zext i8 %52 to i64
  %54 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = add i32 %55, %43
  %57 = load i32*, i32** %0, align 8
  %58 = sub nsw i64 0, %41
  %59 = getelementptr inbounds i32, i32* %57, i64 %58
  store i32 %56, i32* %59, align 4
  %60 = add nuw nsw i64 %41, 1
  %61 = icmp eq i64 %60, 1024
  br i1 %61, label %62, label %40

62:                                               ; preds = %40, %3
  %63 = getelementptr inbounds i32, i32* %2, i64 1
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %124, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 1
  %68 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %67, i64 0, i32 0, i64 0
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 1, i32 0, i64 2
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i64
  %76 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = load i8, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_small_mvtree, i64 0, i64 0), align 1
  %79 = ashr i8 %78, 1
  %80 = sext i8 %79 to i64
  %81 = getelementptr inbounds i8, i8* %73, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i64
  %84 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = sext i8 %78 to i64
  %87 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_small_mvtree, i64 0, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = ashr i8 %88, 1
  %90 = sext i8 %89 to i64
  %91 = getelementptr inbounds i8, i8* %73, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i64
  %94 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %93
  %95 = load i32, i32* %94, align 4
  %96 = add i32 %77, %72
  %97 = add i32 %96, %85
  %98 = add i32 %97, %95
  %99 = getelementptr inbounds i32*, i32** %0, i64 1
  %100 = load i32*, i32** %99, align 8
  store i32 %98, i32* %100, align 4
  %101 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 1, i32 0, i64 1
  br label %102

102:                                              ; preds = %102, %66
  %103 = phi i64 [ %122, %102 ], [ 1, %66 ]
  %104 = trunc i64 %103 to i32
  %105 = tail call fastcc i32 @cost_mvcomponent(i32 %104, %struct.mv_context* %67)
  %106 = load i8, i8* %101, align 1
  %107 = zext i8 %106 to i64
  %108 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = add i32 %109, %105
  %111 = load i32*, i32** %99, align 8
  %112 = getelementptr inbounds i32, i32* %111, i64 %103
  store i32 %110, i32* %112, align 4
  %113 = load i8, i8* %101, align 1
  %114 = xor i8 %113, -1
  %115 = zext i8 %114 to i64
  %116 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = add i32 %117, %105
  %119 = load i32*, i32** %99, align 8
  %120 = sub nsw i64 0, %103
  %121 = getelementptr inbounds i32, i32* %119, i64 %120
  store i32 %118, i32* %121, align 4
  %122 = add nuw nsw i64 %103, 1
  %123 = icmp eq i64 %122, 1024
  br i1 %123, label %124, label %102

124:                                              ; preds = %102, %62
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @vpx_clear_system_state() local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc i32 @cost_mvcomponent(i32, %struct.mv_context* nocapture readonly) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 0
  %4 = icmp slt i32 %0, 8
  %5 = load i8, i8* %3, align 1
  br i1 %4, label %6, label %57

6:                                                ; preds = %2
  %7 = zext i8 %5 to i64
  %8 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 2
  %11 = lshr i32 %0, 2
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = load i8, i8* %10, align 1
  %15 = zext i8 %14 to i32
  %16 = xor i32 %15, 255
  %17 = select i1 %13, i32 %15, i32 %16
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %12 to i64
  %22 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_small_mvtree, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = lshr i32 %0, 1
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  %27 = sext i8 %23 to i32
  %28 = ashr i32 %27, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %10, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = xor i32 %32, 255
  %34 = select i1 %26, i32 %32, i32 %33
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %35
  %37 = load i32, i32* %36, align 4
  %38 = add nsw i32 %25, %27
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_small_mvtree, i64 0, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = and i32 %0, 1
  %43 = icmp eq i32 %42, 0
  %44 = ashr i8 %41, 1
  %45 = sext i8 %44 to i64
  %46 = getelementptr inbounds i8, i8* %10, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = xor i32 %48, 255
  %50 = select i1 %43, i32 %48, i32 %49
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = add i32 %20, %9
  %55 = add i32 %54, %37
  %56 = add i32 %55, %53
  ret i32 %56

57:                                               ; preds = %2
  %58 = xor i8 %5, -1
  %59 = zext i8 %58 to i64
  %60 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = and i32 %0, 1
  %63 = icmp eq i32 %62, 0
  %64 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 9
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = xor i32 %66, 255
  %68 = select i1 %63, i32 %66, i32 %67
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = add i32 %71, %61
  %73 = and i32 %0, 2
  %74 = icmp eq i32 %73, 0
  %75 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 10
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = xor i32 %77, 255
  %79 = select i1 %74, i32 %77, i32 %78
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = add i32 %82, %72
  %84 = and i32 %0, 4
  %85 = icmp eq i32 %84, 0
  %86 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 11
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = xor i32 %88, 255
  %90 = select i1 %85, i32 %88, i32 %89
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %91
  %93 = load i32, i32* %92, align 4
  %94 = add i32 %93, %83
  %95 = and i32 %0, 512
  %96 = icmp eq i32 %95, 0
  %97 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 18
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = xor i32 %99, 255
  %101 = select i1 %96, i32 %99, i32 %100
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = add i32 %104, %94
  %106 = and i32 %0, 256
  %107 = icmp eq i32 %106, 0
  %108 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 17
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = xor i32 %110, 255
  %112 = select i1 %107, i32 %110, i32 %111
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %113
  %115 = load i32, i32* %114, align 4
  %116 = add i32 %115, %105
  %117 = trunc i32 %0 to i8
  %118 = icmp sgt i8 %117, -1
  %119 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 16
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = xor i32 %121, 255
  %123 = select i1 %118, i32 %121, i32 %122
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = add i32 %126, %116
  %128 = and i32 %0, 64
  %129 = icmp eq i32 %128, 0
  %130 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 15
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = xor i32 %132, 255
  %134 = select i1 %129, i32 %132, i32 %133
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %135
  %137 = load i32, i32* %136, align 4
  %138 = add i32 %137, %127
  %139 = and i32 %0, 32
  %140 = icmp eq i32 %139, 0
  %141 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 14
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = xor i32 %143, 255
  %145 = select i1 %140, i32 %143, i32 %144
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %146
  %148 = load i32, i32* %147, align 4
  %149 = add i32 %148, %138
  %150 = and i32 %0, 16
  %151 = icmp eq i32 %150, 0
  %152 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 13
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = xor i32 %154, 255
  %156 = select i1 %151, i32 %154, i32 %155
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %157
  %159 = load i32, i32* %158, align 4
  %160 = add i32 %159, %149
  %161 = and i32 %0, 65520
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %175, label %163

163:                                              ; preds = %57
  %164 = and i32 %0, 8
  %165 = icmp eq i32 %164, 0
  %166 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 12
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = xor i32 %168, 255
  %170 = select i1 %165, i32 %168, i32 %169
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %171
  %173 = load i32, i32* %172, align 4
  %174 = add i32 %173, %160
  br label %175

175:                                              ; preds = %57, %163
  %176 = phi i32 [ %174, %163 ], [ %160, %57 ]
  ret i32 %176
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_write_mvprobs(%struct.VP8_COMP*) local_unnamed_addr #0 {
  %2 = alloca i64, align 8
  %3 = bitcast i64* %2 to [2 x i32]*
  %4 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 20, i64 0
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 5, i64 0
  %6 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #4
  store i64 0, i64* %2, align 8
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 51, i64 0, i64 0
  %8 = bitcast i64* %2 to i32*
  call fastcc void @write_component_probs(%struct.BOOL_CODER* %4, %struct.mv_context* %5, %struct.mv_context* getelementptr inbounds ([2 x %struct.mv_context], [2 x %struct.mv_context]* @vp8_default_mv_context, i64 0, i64 0), %struct.mv_context* getelementptr inbounds ([2 x %struct.mv_context], [2 x %struct.mv_context]* @vp8_mv_update_probs, i64 0, i64 0), i32* %7, i32* nonnull %8)
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 5, i64 1
  %10 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 51, i64 1, i64 0
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  call fastcc void @write_component_probs(%struct.BOOL_CODER* %4, %struct.mv_context* %9, %struct.mv_context* getelementptr inbounds ([2 x %struct.mv_context], [2 x %struct.mv_context]* @vp8_default_mv_context, i64 0, i64 1), %struct.mv_context* getelementptr inbounds ([2 x %struct.mv_context], [2 x %struct.mv_context]* @vp8_mv_update_probs, i64 0, i64 1), i32* %10, i32* %11)
  %12 = load i32, i32* %8, align 8
  %13 = load i32, i32* %11, align 4
  %14 = or i32 %13, %12
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %1
  %17 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 23, i64 0
  call void @vp8_build_component_cost_table(i32** %17, %struct.mv_context* %5, i32* nonnull %8)
  br label %18

18:                                               ; preds = %1, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @write_component_probs(%struct.BOOL_CODER*, %struct.mv_context* nocapture, %struct.mv_context* nocapture readonly, %struct.mv_context* nocapture readonly, i32* nocapture readonly, i32* nocapture) unnamed_addr #0 {
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to [2 x i32]*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to [2 x i32]*
  %11 = alloca [10 x [2 x i32]], align 16
  %12 = alloca [8 x i32], align 16
  %13 = alloca [7 x [2 x i32]], align 16
  %14 = alloca [19 x i8], align 16
  %15 = alloca [7 x i8], align 1
  %16 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %2, i64 0, i32 0, i64 0
  %17 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #4
  %18 = bitcast i64* %7 to i32*
  %19 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  %20 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #4
  %21 = bitcast i64* %9 to i32*
  %22 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  %23 = bitcast [10 x [2 x i32]]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %23) #4
  %24 = bitcast [8 x i32]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #4
  %25 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 0
  %26 = bitcast [7 x [2 x i32]]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %26) #4
  %27 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 19, i8* nonnull %27) #4
  %28 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 1
  %29 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 2
  %30 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %27, i8* align 1 %16, i64 19, i1 false)
  store i64 0, i64* %7, align 8
  store i64 0, i64* %9, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 80, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 0, i64 32, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 56, i1 false)
  %31 = getelementptr inbounds i32, i32* %4, i64 1023
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %18, align 8
  store i32 %32, i32* %25, align 16
  br label %33

33:                                               ; preds = %105, %6
  %34 = phi i64 [ %108, %105 ], [ 1, %6 ]
  %35 = phi i32 [ %106, %105 ], [ %32, %6 ]
  %36 = phi i32 [ %107, %105 ], [ 0, %6 ]
  %37 = phi i32 [ %47, %105 ], [ 0, %6 ]
  %38 = phi i32 [ %46, %105 ], [ 0, %6 ]
  %39 = add nuw nsw i64 %34, 1023
  %40 = getelementptr inbounds i32, i32* %4, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = sub nuw nsw i64 1023, %34
  %43 = getelementptr inbounds i32, i32* %4, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = add nsw i32 %44, %41
  %46 = add i32 %38, %41
  %47 = add i32 %37, %44
  %48 = icmp ult i64 %34, 8
  br i1 %48, label %49, label %54

49:                                               ; preds = %33
  %50 = add i32 %35, %45
  %51 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %34
  %52 = load i32, i32* %51, align 4
  %53 = add i32 %52, %45
  store i32 %53, i32* %51, align 4
  br label %105

54:                                               ; preds = %33
  %55 = lshr i64 %34, 9
  %56 = and i64 %55, 1
  %57 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 9, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = add i32 %58, %45
  store i32 %59, i32* %57, align 4
  %60 = lshr i64 %34, 8
  %61 = and i64 %60, 1
  %62 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 8, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = add i32 %63, %45
  store i32 %64, i32* %62, align 4
  %65 = lshr i64 %34, 7
  %66 = and i64 %65, 1
  %67 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 7, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = add i32 %68, %45
  store i32 %69, i32* %67, align 4
  %70 = lshr i64 %34, 6
  %71 = and i64 %70, 1
  %72 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 6, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = add i32 %73, %45
  store i32 %74, i32* %72, align 4
  %75 = lshr i64 %34, 5
  %76 = and i64 %75, 1
  %77 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 5, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = add i32 %78, %45
  store i32 %79, i32* %77, align 4
  %80 = lshr i64 %34, 4
  %81 = and i64 %80, 1
  %82 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 4, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = add i32 %83, %45
  store i32 %84, i32* %82, align 4
  %85 = lshr i64 %34, 3
  %86 = and i64 %85, 1
  %87 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 3, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = add i32 %88, %45
  store i32 %89, i32* %87, align 4
  %90 = lshr i64 %34, 2
  %91 = and i64 %90, 1
  %92 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 2, i64 %91
  %93 = load i32, i32* %92, align 4
  %94 = add i32 %93, %45
  store i32 %94, i32* %92, align 4
  %95 = lshr i64 %34, 1
  %96 = and i64 %95, 1
  %97 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 1, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = add i32 %98, %45
  store i32 %99, i32* %97, align 4
  %100 = and i64 %34, 1
  %101 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 0, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = add i32 %102, %45
  store i32 %103, i32* %101, align 4
  %104 = add i32 %36, %45
  br label %105

105:                                              ; preds = %54, %49
  %106 = phi i32 [ %50, %49 ], [ %35, %54 ]
  %107 = phi i32 [ %36, %49 ], [ %104, %54 ]
  %108 = add nuw nsw i64 %34, 1
  %109 = icmp eq i64 %108, 1024
  br i1 %109, label %110, label %33

110:                                              ; preds = %105
  %111 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 0
  %112 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 0
  store i32 %46, i32* %21, align 8
  store i32 %47, i32* %22, align 4
  store i32 %107, i32* %19, align 4
  store i32 %106, i32* %18, align 8
  %113 = add i32 %107, %106
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %122, label %115

115:                                              ; preds = %110
  %116 = mul i32 %106, 255
  %117 = udiv i32 %116, %113
  %118 = and i32 %117, 254
  %119 = icmp eq i32 %118, 0
  %120 = select i1 %119, i32 1, i32 %118
  %121 = trunc i32 %120 to i8
  store i8 %121, i8* %27, align 16
  br label %122

122:                                              ; preds = %110, %115
  %123 = add i32 %47, %46
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %132, label %125

125:                                              ; preds = %122
  %126 = mul i32 %46, 255
  %127 = udiv i32 %126, %123
  %128 = and i32 %127, 254
  %129 = icmp eq i32 %128, 0
  %130 = select i1 %129, i32 1, i32 %128
  %131 = trunc i32 %130 to i8
  store i8 %131, i8* %28, align 1
  br label %132

132:                                              ; preds = %122, %125
  %133 = getelementptr inbounds [7 x i8], [7 x i8]* %15, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 7, i8* nonnull %133) #4
  %134 = getelementptr inbounds [7 x [2 x i32]], [7 x [2 x i32]]* %13, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %133, i8 -86, i64 7, i1 false)
  call void @vp8_tree_probs_from_distribution(i32 8, %struct.vp8_token_struct* getelementptr inbounds ([8 x %struct.vp8_token_struct], [8 x %struct.vp8_token_struct]* @vp8_small_mvencodings, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_small_mvtree, i64 0, i64 0), i8* nonnull %133, [2 x i32]* nonnull %134, i32* nonnull %25, i32 256, i32 1) #4
  %135 = getelementptr inbounds [7 x [2 x i32]], [7 x [2 x i32]]* %13, i64 0, i64 0, i64 0
  %136 = load i32, i32* %135, align 16
  %137 = getelementptr inbounds [7 x [2 x i32]], [7 x [2 x i32]]* %13, i64 0, i64 0, i64 1
  %138 = load i32, i32* %137, align 4
  %139 = add i32 %138, %136
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %148, label %141

141:                                              ; preds = %132
  %142 = mul i32 %136, 255
  %143 = udiv i32 %142, %139
  %144 = and i32 %143, 254
  %145 = icmp eq i32 %144, 0
  %146 = select i1 %145, i32 1, i32 %144
  %147 = trunc i32 %146 to i8
  store i8 %147, i8* %29, align 2
  br label %148

148:                                              ; preds = %132, %141
  %149 = getelementptr inbounds [7 x [2 x i32]], [7 x [2 x i32]]* %13, i64 0, i64 1, i64 0
  %150 = load i32, i32* %149, align 8
  %151 = getelementptr inbounds [7 x [2 x i32]], [7 x [2 x i32]]* %13, i64 0, i64 1, i64 1
  %152 = load i32, i32* %151, align 4
  %153 = add i32 %152, %150
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %395, label %387

155:                                              ; preds = %470
  %156 = mul i32 %472, 255
  %157 = udiv i32 %156, %475
  %158 = and i32 %157, 254
  %159 = icmp eq i32 %158, 0
  %160 = select i1 %159, i32 1, i32 %158
  %161 = trunc i32 %160 to i8
  store i8 %161, i8* %30, align 1
  br label %162

162:                                              ; preds = %470, %155
  %163 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 1, i64 0
  %164 = load i32, i32* %163, align 8
  %165 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 1, i64 1
  %166 = load i32, i32* %165, align 4
  %167 = add i32 %166, %164
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %177, label %169

169:                                              ; preds = %162
  %170 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 10
  %171 = mul i32 %164, 255
  %172 = udiv i32 %171, %167
  %173 = and i32 %172, 254
  %174 = icmp eq i32 %173, 0
  %175 = select i1 %174, i32 1, i32 %173
  %176 = trunc i32 %175 to i8
  store i8 %176, i8* %170, align 2
  br label %177

177:                                              ; preds = %169, %162
  %178 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 2, i64 0
  %179 = load i32, i32* %178, align 16
  %180 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 2, i64 1
  %181 = load i32, i32* %180, align 4
  %182 = add i32 %181, %179
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %192, label %184

184:                                              ; preds = %177
  %185 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 11
  %186 = mul i32 %179, 255
  %187 = udiv i32 %186, %182
  %188 = and i32 %187, 254
  %189 = icmp eq i32 %188, 0
  %190 = select i1 %189, i32 1, i32 %188
  %191 = trunc i32 %190 to i8
  store i8 %191, i8* %185, align 1
  br label %192

192:                                              ; preds = %184, %177
  %193 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 3, i64 0
  %194 = load i32, i32* %193, align 8
  %195 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 3, i64 1
  %196 = load i32, i32* %195, align 4
  %197 = add i32 %196, %194
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %207, label %199

199:                                              ; preds = %192
  %200 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 12
  %201 = mul i32 %194, 255
  %202 = udiv i32 %201, %197
  %203 = and i32 %202, 254
  %204 = icmp eq i32 %203, 0
  %205 = select i1 %204, i32 1, i32 %203
  %206 = trunc i32 %205 to i8
  store i8 %206, i8* %200, align 4
  br label %207

207:                                              ; preds = %199, %192
  %208 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 4, i64 0
  %209 = load i32, i32* %208, align 16
  %210 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 4, i64 1
  %211 = load i32, i32* %210, align 4
  %212 = add i32 %211, %209
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %222, label %214

214:                                              ; preds = %207
  %215 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 13
  %216 = mul i32 %209, 255
  %217 = udiv i32 %216, %212
  %218 = and i32 %217, 254
  %219 = icmp eq i32 %218, 0
  %220 = select i1 %219, i32 1, i32 %218
  %221 = trunc i32 %220 to i8
  store i8 %221, i8* %215, align 1
  br label %222

222:                                              ; preds = %214, %207
  %223 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 5, i64 0
  %224 = load i32, i32* %223, align 8
  %225 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 5, i64 1
  %226 = load i32, i32* %225, align 4
  %227 = add i32 %226, %224
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %237, label %229

229:                                              ; preds = %222
  %230 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 14
  %231 = mul i32 %224, 255
  %232 = udiv i32 %231, %227
  %233 = and i32 %232, 254
  %234 = icmp eq i32 %233, 0
  %235 = select i1 %234, i32 1, i32 %233
  %236 = trunc i32 %235 to i8
  store i8 %236, i8* %230, align 2
  br label %237

237:                                              ; preds = %229, %222
  %238 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 6, i64 0
  %239 = load i32, i32* %238, align 16
  %240 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 6, i64 1
  %241 = load i32, i32* %240, align 4
  %242 = add i32 %241, %239
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %252, label %244

244:                                              ; preds = %237
  %245 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 15
  %246 = mul i32 %239, 255
  %247 = udiv i32 %246, %242
  %248 = and i32 %247, 254
  %249 = icmp eq i32 %248, 0
  %250 = select i1 %249, i32 1, i32 %248
  %251 = trunc i32 %250 to i8
  store i8 %251, i8* %245, align 1
  br label %252

252:                                              ; preds = %244, %237
  %253 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 7, i64 0
  %254 = load i32, i32* %253, align 8
  %255 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 7, i64 1
  %256 = load i32, i32* %255, align 4
  %257 = add i32 %256, %254
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %267, label %259

259:                                              ; preds = %252
  %260 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 16
  %261 = mul i32 %254, 255
  %262 = udiv i32 %261, %257
  %263 = and i32 %262, 254
  %264 = icmp eq i32 %263, 0
  %265 = select i1 %264, i32 1, i32 %263
  %266 = trunc i32 %265 to i8
  store i8 %266, i8* %260, align 16
  br label %267

267:                                              ; preds = %259, %252
  %268 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 8, i64 0
  %269 = load i32, i32* %268, align 16
  %270 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 8, i64 1
  %271 = load i32, i32* %270, align 4
  %272 = add i32 %271, %269
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %282, label %274

274:                                              ; preds = %267
  %275 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 17
  %276 = mul i32 %269, 255
  %277 = udiv i32 %276, %272
  %278 = and i32 %277, 254
  %279 = icmp eq i32 %278, 0
  %280 = select i1 %279, i32 1, i32 %278
  %281 = trunc i32 %280 to i8
  store i8 %281, i8* %275, align 1
  br label %282

282:                                              ; preds = %274, %267
  %283 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 9, i64 0
  %284 = load i32, i32* %283, align 8
  %285 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 9, i64 1
  %286 = load i32, i32* %285, align 4
  %287 = add i32 %286, %284
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %297, label %289

289:                                              ; preds = %282
  %290 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 18
  %291 = mul i32 %284, 255
  %292 = udiv i32 %291, %287
  %293 = and i32 %292, 254
  %294 = icmp eq i32 %293, 0
  %295 = select i1 %294, i32 1, i32 %293
  %296 = trunc i32 %295 to i8
  store i8 %296, i8* %290, align 2
  br label %297

297:                                              ; preds = %289, %282
  %298 = load i8, i8* %27, align 16
  %299 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 1
  %300 = load i8, i8* %112, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* nonnull %18, i8* %111, i8 zeroext %298, i8 zeroext %300, i32* %5)
  %301 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 1
  %302 = load i8, i8* %28, align 1
  %303 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 2
  %304 = load i8, i8* %299, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* nonnull %21, i8* %301, i8 zeroext %302, i8 zeroext %304, i32* %5)
  %305 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 2
  %306 = load i8, i8* %29, align 2
  %307 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 3
  %308 = load i8, i8* %303, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* nonnull %135, i8* %305, i8 zeroext %306, i8 zeroext %308, i32* %5)
  %309 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 3
  %310 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 3
  %311 = load i8, i8* %310, align 1
  %312 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 4
  %313 = load i8, i8* %307, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* %149, i8* %309, i8 zeroext %311, i8 zeroext %313, i32* %5)
  %314 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 4
  %315 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 4
  %316 = load i8, i8* %315, align 4
  %317 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 5
  %318 = load i8, i8* %312, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* %396, i8* %314, i8 zeroext %316, i8 zeroext %318, i32* %5)
  %319 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 5
  %320 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 5
  %321 = load i8, i8* %320, align 1
  %322 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 6
  %323 = load i8, i8* %317, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* %411, i8* %319, i8 zeroext %321, i8 zeroext %323, i32* %5)
  %324 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 6
  %325 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 6
  %326 = load i8, i8* %325, align 2
  %327 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 7
  %328 = load i8, i8* %322, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* %426, i8* %324, i8 zeroext %326, i8 zeroext %328, i32* %5)
  %329 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 7
  %330 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 7
  %331 = load i8, i8* %330, align 1
  %332 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 8
  %333 = load i8, i8* %327, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* %441, i8* %329, i8 zeroext %331, i8 zeroext %333, i32* %5)
  %334 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 8
  %335 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 8
  %336 = load i8, i8* %335, align 8
  %337 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 9
  %338 = load i8, i8* %332, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* %456, i8* %334, i8 zeroext %336, i8 zeroext %338, i32* %5)
  %339 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 9
  %340 = load i8, i8* %30, align 1
  %341 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 10
  %342 = load i8, i8* %337, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* nonnull %471, i8* %339, i8 zeroext %340, i8 zeroext %342, i32* %5)
  %343 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 10
  %344 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 10
  %345 = load i8, i8* %344, align 2
  %346 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 11
  %347 = load i8, i8* %341, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* %163, i8* %343, i8 zeroext %345, i8 zeroext %347, i32* %5)
  %348 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 11
  %349 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 11
  %350 = load i8, i8* %349, align 1
  %351 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 12
  %352 = load i8, i8* %346, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* %178, i8* %348, i8 zeroext %350, i8 zeroext %352, i32* %5)
  %353 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 12
  %354 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 12
  %355 = load i8, i8* %354, align 4
  %356 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 13
  %357 = load i8, i8* %351, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* %193, i8* %353, i8 zeroext %355, i8 zeroext %357, i32* %5)
  %358 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 13
  %359 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 13
  %360 = load i8, i8* %359, align 1
  %361 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 14
  %362 = load i8, i8* %356, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* %208, i8* %358, i8 zeroext %360, i8 zeroext %362, i32* %5)
  %363 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 14
  %364 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 14
  %365 = load i8, i8* %364, align 2
  %366 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 15
  %367 = load i8, i8* %361, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* %223, i8* %363, i8 zeroext %365, i8 zeroext %367, i32* %5)
  %368 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 15
  %369 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 15
  %370 = load i8, i8* %369, align 1
  %371 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 16
  %372 = load i8, i8* %366, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* %238, i8* %368, i8 zeroext %370, i8 zeroext %372, i32* %5)
  %373 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 16
  %374 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 16
  %375 = load i8, i8* %374, align 16
  %376 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 17
  %377 = load i8, i8* %371, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* %253, i8* %373, i8 zeroext %375, i8 zeroext %377, i32* %5)
  %378 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 17
  %379 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 17
  %380 = load i8, i8* %379, align 1
  %381 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %3, i64 0, i32 0, i64 18
  %382 = load i8, i8* %376, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* %268, i8* %378, i8 zeroext %380, i8 zeroext %382, i32* %5)
  %383 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 18
  %384 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 18
  %385 = load i8, i8* %384, align 2
  %386 = load i8, i8* %381, align 1
  call fastcc void @update(%struct.BOOL_CODER* %0, i32* %283, i8* %383, i8 zeroext %385, i8 zeroext %386, i32* %5)
  call void @llvm.lifetime.end.p0i8(i64 19, i8* nonnull %27) #4
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %26) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %23) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #4
  ret void

387:                                              ; preds = %148
  %388 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 3
  %389 = mul i32 %150, 255
  %390 = udiv i32 %389, %153
  %391 = and i32 %390, 254
  %392 = icmp eq i32 %391, 0
  %393 = select i1 %392, i32 1, i32 %391
  %394 = trunc i32 %393 to i8
  store i8 %394, i8* %388, align 1
  br label %395

395:                                              ; preds = %387, %148
  %396 = getelementptr inbounds [7 x [2 x i32]], [7 x [2 x i32]]* %13, i64 0, i64 2, i64 0
  %397 = load i32, i32* %396, align 16
  %398 = getelementptr inbounds [7 x [2 x i32]], [7 x [2 x i32]]* %13, i64 0, i64 2, i64 1
  %399 = load i32, i32* %398, align 4
  %400 = add i32 %399, %397
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %410, label %402

402:                                              ; preds = %395
  %403 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 4
  %404 = mul i32 %397, 255
  %405 = udiv i32 %404, %400
  %406 = and i32 %405, 254
  %407 = icmp eq i32 %406, 0
  %408 = select i1 %407, i32 1, i32 %406
  %409 = trunc i32 %408 to i8
  store i8 %409, i8* %403, align 4
  br label %410

410:                                              ; preds = %402, %395
  %411 = getelementptr inbounds [7 x [2 x i32]], [7 x [2 x i32]]* %13, i64 0, i64 3, i64 0
  %412 = load i32, i32* %411, align 8
  %413 = getelementptr inbounds [7 x [2 x i32]], [7 x [2 x i32]]* %13, i64 0, i64 3, i64 1
  %414 = load i32, i32* %413, align 4
  %415 = add i32 %414, %412
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %425, label %417

417:                                              ; preds = %410
  %418 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 5
  %419 = mul i32 %412, 255
  %420 = udiv i32 %419, %415
  %421 = and i32 %420, 254
  %422 = icmp eq i32 %421, 0
  %423 = select i1 %422, i32 1, i32 %421
  %424 = trunc i32 %423 to i8
  store i8 %424, i8* %418, align 1
  br label %425

425:                                              ; preds = %417, %410
  %426 = getelementptr inbounds [7 x [2 x i32]], [7 x [2 x i32]]* %13, i64 0, i64 4, i64 0
  %427 = load i32, i32* %426, align 16
  %428 = getelementptr inbounds [7 x [2 x i32]], [7 x [2 x i32]]* %13, i64 0, i64 4, i64 1
  %429 = load i32, i32* %428, align 4
  %430 = add i32 %429, %427
  %431 = icmp eq i32 %430, 0
  br i1 %431, label %440, label %432

432:                                              ; preds = %425
  %433 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 6
  %434 = mul i32 %427, 255
  %435 = udiv i32 %434, %430
  %436 = and i32 %435, 254
  %437 = icmp eq i32 %436, 0
  %438 = select i1 %437, i32 1, i32 %436
  %439 = trunc i32 %438 to i8
  store i8 %439, i8* %433, align 2
  br label %440

440:                                              ; preds = %432, %425
  %441 = getelementptr inbounds [7 x [2 x i32]], [7 x [2 x i32]]* %13, i64 0, i64 5, i64 0
  %442 = load i32, i32* %441, align 8
  %443 = getelementptr inbounds [7 x [2 x i32]], [7 x [2 x i32]]* %13, i64 0, i64 5, i64 1
  %444 = load i32, i32* %443, align 4
  %445 = add i32 %444, %442
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %455, label %447

447:                                              ; preds = %440
  %448 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 7
  %449 = mul i32 %442, 255
  %450 = udiv i32 %449, %445
  %451 = and i32 %450, 254
  %452 = icmp eq i32 %451, 0
  %453 = select i1 %452, i32 1, i32 %451
  %454 = trunc i32 %453 to i8
  store i8 %454, i8* %448, align 1
  br label %455

455:                                              ; preds = %447, %440
  %456 = getelementptr inbounds [7 x [2 x i32]], [7 x [2 x i32]]* %13, i64 0, i64 6, i64 0
  %457 = load i32, i32* %456, align 16
  %458 = getelementptr inbounds [7 x [2 x i32]], [7 x [2 x i32]]* %13, i64 0, i64 6, i64 1
  %459 = load i32, i32* %458, align 4
  %460 = add i32 %459, %457
  %461 = icmp eq i32 %460, 0
  br i1 %461, label %470, label %462

462:                                              ; preds = %455
  %463 = getelementptr inbounds [19 x i8], [19 x i8]* %14, i64 0, i64 8
  %464 = mul i32 %457, 255
  %465 = udiv i32 %464, %460
  %466 = and i32 %465, 254
  %467 = icmp eq i32 %466, 0
  %468 = select i1 %467, i32 1, i32 %466
  %469 = trunc i32 %468 to i8
  store i8 %469, i8* %463, align 8
  br label %470

470:                                              ; preds = %462, %455
  call void @llvm.lifetime.end.p0i8(i64 7, i8* nonnull %133) #4
  %471 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 0, i64 0
  %472 = load i32, i32* %471, align 16
  %473 = getelementptr inbounds [10 x [2 x i32]], [10 x [2 x i32]]* %11, i64 0, i64 0, i64 1
  %474 = load i32, i32* %473, align 4
  %475 = add i32 %474, %472
  %476 = icmp eq i32 %475, 0
  br i1 %476, label %162, label %155
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @vp8_encode_bool(%struct.BOOL_CODER* nocapture, i32, i32) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %7, -1
  %11 = mul i32 %10, %2
  %12 = lshr i32 %11, 8
  %13 = add nuw nsw i32 %12, 1
  %14 = icmp eq i32 %1, 0
  %15 = sub i32 %7, %13
  %16 = select i1 %14, i32 %13, i32 %15
  %17 = select i1 %14, i32 0, i32 %13
  %18 = add i32 %17, %9
  %19 = zext i32 %16 to i64
  %20 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = shl i32 %16, %22
  %24 = add nsw i32 %5, %22
  %25 = icmp sgt i32 %24, -1
  br i1 %25, label %26, label %88

26:                                               ; preds = %3
  %27 = sub i32 0, %5
  %28 = xor i32 %5, -1
  %29 = shl i32 %18, %28
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %31, label %59

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = add i32 %33, -1
  %35 = icmp sgt i32 %34, -1
  %36 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 4
  %37 = load i8*, i8** %36, align 8
  %38 = sext i32 %34 to i64
  %39 = getelementptr inbounds i8, i8* %37, i64 %38
  br i1 %35, label %40, label %55

40:                                               ; preds = %31, %47
  %41 = phi i8* [ %51, %47 ], [ %37, %31 ]
  %42 = phi i64 [ %54, %47 ], [ %38, %31 ]
  %43 = phi i8* [ %53, %47 ], [ %39, %31 ]
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, -1
  %46 = getelementptr inbounds i8, i8* %41, i64 %42
  br i1 %45, label %47, label %55

47:                                               ; preds = %40
  store i8 0, i8* %46, align 1
  %48 = trunc i64 %42 to i32
  %49 = add i32 %48, -1
  %50 = icmp sgt i32 %49, -1
  %51 = load i8*, i8** %36, align 8
  %52 = sext i32 %49 to i64
  %53 = getelementptr inbounds i8, i8* %51, i64 %52
  %54 = add nsw i64 %42, -1
  br i1 %50, label %40, label %55

55:                                               ; preds = %40, %47, %31
  %56 = phi i8* [ %39, %31 ], [ %53, %47 ], [ %46, %40 ]
  %57 = load i8, i8* %56, align 1
  %58 = add i8 %57, 1
  store i8 %58, i8* %56, align 1
  br label %59

59:                                               ; preds = %55, %26
  %60 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 4
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 3
  %63 = load i32, i32* %62, align 4
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %61, i64 %64
  %66 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 5
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds i8, i8* %65, i64 1
  %69 = icmp ult i8* %68, %67
  br i1 %69, label %76, label %70

70:                                               ; preds = %59
  %71 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 6
  %72 = load %struct.vpx_internal_error_info*, %struct.vpx_internal_error_info** %71, align 8
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %72, i32 7, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #4
  %73 = load i8*, i8** %60, align 8
  %74 = load i32, i32* %62, align 4
  %75 = zext i32 %74 to i64
  br label %76

76:                                               ; preds = %59, %70
  %77 = phi i64 [ %64, %59 ], [ %75, %70 ]
  %78 = phi i32 [ %63, %59 ], [ %74, %70 ]
  %79 = phi i8* [ %61, %59 ], [ %73, %70 ]
  %80 = add i32 %5, 24
  %81 = lshr i32 %18, %80
  %82 = trunc i32 %81 to i8
  %83 = add i32 %78, 1
  store i32 %83, i32* %62, align 4
  %84 = getelementptr inbounds i8, i8* %79, i64 %77
  store i8 %82, i8* %84, align 1
  %85 = shl i32 %18, %27
  %86 = and i32 %85, 16777215
  %87 = add nsw i32 %24, -8
  br label %88

88:                                               ; preds = %76, %3
  %89 = phi i32 [ %87, %76 ], [ %24, %3 ]
  %90 = phi i32 [ %86, %76 ], [ %18, %3 ]
  %91 = phi i32 [ %24, %76 ], [ %22, %3 ]
  %92 = shl i32 %90, %91
  store i32 %89, i32* %4, align 8
  store i32 %92, i32* %8, align 8
  store i32 %23, i32* %6, align 4
  ret void
}

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @vp8_tree_probs_from_distribution(i32, %struct.vp8_token_struct*, i8*, i8*, [2 x i32]*, i32*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @update(%struct.BOOL_CODER*, i32* nocapture readonly, i8* nocapture, i8 zeroext, i8 zeroext, i32* nocapture) unnamed_addr #0 {
  %7 = load i8, i8* %2, align 1
  %8 = load i32, i32* %1, align 4
  %9 = zext i32 %8 to i64
  %10 = zext i8 %7 to i64
  %11 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %10
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  %14 = mul nuw i64 %13, %9
  %15 = getelementptr inbounds i32, i32* %1, i64 1
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = xor i8 %7, -1
  %19 = zext i8 %18 to i64
  %20 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  %23 = mul nuw i64 %22, %17
  %24 = add i64 %23, %14
  %25 = lshr i64 %24, 8
  %26 = trunc i64 %25 to i32
  %27 = zext i8 %3 to i64
  %28 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = mul nuw i64 %30, %9
  %32 = xor i8 %3, -1
  %33 = zext i8 %32 to i64
  %34 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i64
  %37 = mul nuw i64 %36, %17
  %38 = add i64 %37, %31
  %39 = lshr i64 %38, 8
  %40 = trunc i64 %39 to i32
  %41 = zext i8 %4 to i32
  %42 = xor i32 %41, 255
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = zext i8 %4 to i64
  %47 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = add i32 %45, 128
  %50 = sub i32 %49, %48
  %51 = lshr i32 %50, 8
  %52 = add nuw nsw i32 %51, 6
  %53 = sub nsw i32 %26, %40
  %54 = icmp sgt i32 %53, %52
  br i1 %54, label %55, label %58

55:                                               ; preds = %6
  store i8 %3, i8* %2, align 1
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 1, i32 %41)
  %56 = lshr i8 %3, 1
  %57 = zext i8 %56 to i32
  tail call void @vp8_encode_value(%struct.BOOL_CODER* %0, i32 %57, i32 7) #4
  store i32 1, i32* %5, align 4
  br label %59

58:                                               ; preds = %6
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0, i32 %41)
  br label %59

59:                                               ; preds = %58, %55
  ret void
}

declare void @vp8_encode_value(%struct.BOOL_CODER*, i32, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
