; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/quantize.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/quantize.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { {}*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"struct.tflite::ops::builtin::quantize::OpData" = type { i32, i32 }
%struct.TfLiteAffineQuantization = type { %struct.TfLiteFloatArray*, %struct.TfLiteIntArray*, i32 }
%struct.TfLiteFloatArray = type { i32, [0 x float] }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }

$_ZN6tflite3ops7builtin8quantize4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin8quantize4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [65 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/quantize.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"output->quantization.type\00", align 1
@.str.8 = private unnamed_addr constant [26 x i8] c"kTfLiteAffineQuantization\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"%s:%d %s was not true.\00", align 1
@.str.10 = private unnamed_addr constant [20 x i8] c"affine_quantization\00", align 1
@.str.11 = private unnamed_addr constant [27 x i8] c"affine_quantization->scale\00", align 1
@.str.12 = private unnamed_addr constant [38 x i8] c"affine_quantization->scale->size == 1\00", align 1
@.str.13 = private unnamed_addr constant [92 x i8] c"output->type == kTfLiteUInt8 || output->type == kTfLiteInt8 || output->type == kTfLiteInt16\00", align 1
@.str.14 = private unnamed_addr constant [60 x i8] c"output->type == kTfLiteInt8 || output->type == kTfLiteInt16\00", align 1
@.str.15 = private unnamed_addr constant [58 x i8] c"input->type == kTfLiteInt8 || input->type == kTfLiteUInt8\00", align 1
@.str.16 = private unnamed_addr constant [60 x i8] c"output->type == kTfLiteUInt8 || output->type == kTfLiteInt8\00", align 1
@_ZZN6tflite3ops7builtin21Register_QUANTIZE_OPTEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin8quantize4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin8quantize4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin8quantize7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin8quantize4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin21Register_QUANTIZE_REFEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin8quantize4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin8quantize4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin8quantize7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin8quantize4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@.str.21 = private unnamed_addr constant [62 x i8] c"Input type %s with Output type %s is not currently supported.\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull i8* @_ZN6tflite3ops7builtin8quantize4InitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8* nocapture readnone, i64) #0 {
  %4 = tail call i8* @_Znwm(i64 8) #8
  ret i8* %4
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops7builtin8quantize4FreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #2 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZdlPv(i8* nonnull %1) #8
  br label %5

5:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin8quantize7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #2 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %4 = bitcast i8** %3 to %"struct.tflite::ops::builtin::quantize::OpData"**
  %5 = load %"struct.tflite::ops::builtin::quantize::OpData"*, %"struct.tflite::ops::builtin::quantize::OpData"** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %7 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %6, align 8
  %8 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %14, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %13 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %12, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %13(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %9, i32 1) #9
  br label %113

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %16 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %15, align 8
  %17 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %22 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %21, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %22(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0), i32 98, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %18, i32 1) #9
  br label %113

23:                                               ; preds = %14
  %24 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 1, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %29 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %28, align 8
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 %30
  br label %32

32:                                               ; preds = %23, %27
  %33 = phi %struct.TfLiteTensor* [ %31, %27 ], [ null, %23 ]
  %34 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 1, i64 0
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %42, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %39 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %38, align 8
  %40 = sext i32 %35 to i64
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %39, i64 %40
  br label %42

42:                                               ; preds = %32, %37
  %43 = phi %struct.TfLiteTensor* [ %41, %37 ], [ null, %32 ]
  %44 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 12, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %45, 1
  br i1 %46, label %50, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %49 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %48, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %49(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0), i32 106, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8, i64 0, i64 0), i32 %45, i32 1) #9
  br label %113

50:                                               ; preds = %42
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 12, i32 1
  %52 = bitcast i8** %51 to %struct.TfLiteAffineQuantization**
  %53 = load %struct.TfLiteAffineQuantization*, %struct.TfLiteAffineQuantization** %52, align 8
  %54 = icmp eq %struct.TfLiteAffineQuantization* %53, null
  br i1 %54, label %55, label %58

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %57 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %56, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %57(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0), i32 109, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i64 0, i64 0)) #9
  br label %113

58:                                               ; preds = %50
  %59 = getelementptr inbounds %struct.TfLiteAffineQuantization, %struct.TfLiteAffineQuantization* %53, i64 0, i32 0
  %60 = load %struct.TfLiteFloatArray*, %struct.TfLiteFloatArray** %59, align 8
  %61 = icmp eq %struct.TfLiteFloatArray* %60, null
  br i1 %61, label %62, label %65

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %64 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %63, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %64(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i64 0, i64 0)) #9
  br label %113

65:                                               ; preds = %58
  %66 = getelementptr inbounds %struct.TfLiteFloatArray, %struct.TfLiteFloatArray* %60, i64 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %72, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %71 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %70, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %71(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0), i32 111, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.12, i64 0, i64 0)) #9
  br label %113

72:                                               ; preds = %65
  %73 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 0
  %74 = load i32, i32* %73, align 8
  switch i32 %74, label %87 [
    i32 1, label %75
    i32 7, label %81
    i32 9, label %90
    i32 3, label %90
  ]

75:                                               ; preds = %72
  %76 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 0
  %77 = load i32, i32* %76, align 8
  switch i32 %77, label %78 [
    i32 3, label %106
    i32 9, label %106
    i32 7, label %106
  ]

78:                                               ; preds = %75
  %79 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %80 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %79, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %80(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0), i32 117, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.13, i64 0, i64 0)) #9
  br label %113

81:                                               ; preds = %72
  %82 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 0
  %83 = load i32, i32* %82, align 8
  switch i32 %83, label %84 [
    i32 9, label %96
    i32 7, label %96
  ]

84:                                               ; preds = %81
  %85 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %86 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %85, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %86(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0), i32 122, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.14, i64 0, i64 0)) #9
  br label %113

87:                                               ; preds = %72
  %88 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %89 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %88, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %89(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.15, i64 0, i64 0)) #9
  br label %113

90:                                               ; preds = %72, %72
  %91 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 0
  %92 = load i32, i32* %91, align 8
  switch i32 %92, label %93 [
    i32 3, label %96
    i32 9, label %96
  ]

93:                                               ; preds = %90
  %94 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %95 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %94, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %95(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0), i32 127, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.16, i64 0, i64 0)) #9
  br label %113

96:                                               ; preds = %90, %90, %81, %81
  %97 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 3, i32 0
  %98 = load float, float* %97, align 8
  %99 = fpext float %98 to double
  %100 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 3, i32 0
  %101 = load float, float* %100, align 8
  %102 = fpext float %101 to double
  %103 = fdiv double %99, %102
  %104 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %5, i64 0, i32 0
  %105 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %5, i64 0, i32 1
  tail call void @_ZN6tflite18QuantizeMultiplierEdPiS0_(double %103, i32* %104, i32* %105) #9
  br label %106

106:                                              ; preds = %75, %75, %75, %96
  %107 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %108 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %107, align 8
  %109 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %110 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %109, align 8
  %111 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %110) #9
  %112 = tail call i32 %108(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %43, %struct.TfLiteIntArray* %111) #9
  br label %113

113:                                              ; preds = %47, %106, %93, %87, %84, %78, %69, %62, %55, %20, %11
  %114 = phi i32 [ 1, %11 ], [ 1, %20 ], [ 1, %47 ], [ %112, %106 ], [ 1, %78 ], [ 1, %84 ], [ 1, %93 ], [ 1, %87 ], [ 1, %69 ], [ 1, %62 ], [ 1, %55 ]
  ret i32 %114
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN6tflite18QuantizeMultiplierEdPiS0_(double, i32*, i32*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray*) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin21Register_QUANTIZE_OPTEv() local_unnamed_addr #6 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin21Register_QUANTIZE_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin8quantize4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #2 comdat {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %6 = bitcast i8** %5 to %"struct.tflite::ops::builtin::quantize::OpData"**
  %7 = load %"struct.tflite::ops::builtin::quantize::OpData"*, %"struct.tflite::ops::builtin::quantize::OpData"** %6, align 8
  %8 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %9 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %8, align 8
  %10 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %9, i64 0, i32 1, i64 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %15 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %14, align 8
  %16 = sext i32 %11 to i64
  %17 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %15, i64 %16
  br label %18

18:                                               ; preds = %2, %13
  %19 = phi %struct.TfLiteTensor* [ %17, %13 ], [ null, %2 ]
  %20 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %21 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %20, align 8
  %22 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %21, i64 0, i32 1, i64 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %27 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %26, align 8
  %28 = sext i32 %23 to i64
  %29 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %27, i64 %28
  br label %30

30:                                               ; preds = %18, %25
  %31 = phi %struct.TfLiteTensor* [ %29, %25 ], [ null, %18 ]
  %32 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %32) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 32, i1 false)
  %33 = icmp eq %struct.TfLiteTensor* %19, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %35, align 8, !alias.scope !2
  br label %61

36:                                               ; preds = %30
  %37 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 2
  %38 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %37, align 8, !noalias !2
  %39 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %38, i64 0, i32 0
  %40 = load i32, i32* %39, align 4, !noalias !2
  %41 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %38, i64 0, i32 1, i64 0
  %42 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %40, i32* %42, align 8, !alias.scope !2
  %43 = icmp sgt i32 %40, 5
  br i1 %43, label %44, label %51

44:                                               ; preds = %36
  %45 = sext i32 %40 to i64
  %46 = shl nsw i64 %45, 2
  %47 = tail call i8* @_Znam(i64 %46) #8, !noalias !2
  %48 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %49 = bitcast i32** %48 to i8**
  store i8* %47, i8** %49, align 8, !alias.scope !2
  %50 = bitcast i8* %47 to i32*
  br label %56

51:                                               ; preds = %36
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %53 = bitcast %union.anon* %52 to i32*
  %54 = sext i32 %40 to i64
  %55 = shl nsw i64 %54, 2
  br label %56

56:                                               ; preds = %51, %44
  %57 = phi i64 [ %46, %44 ], [ %55, %51 ]
  %58 = phi i32* [ %50, %44 ], [ %53, %51 ]
  %59 = bitcast i32* %58 to i8*
  %60 = bitcast i32* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %60, i64 %57, i1 false) #9
  br label %61

61:                                               ; preds = %34, %56
  %62 = phi i32 [ 0, %34 ], [ %40, %56 ]
  %63 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %63) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %63, i8 -86, i64 32, i1 false)
  %64 = icmp eq %struct.TfLiteTensor* %31, null
  br i1 %64, label %65, label %67

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %66, align 8, !alias.scope !5
  br label %92

67:                                               ; preds = %61
  %68 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 2
  %69 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %68, align 8, !noalias !5
  %70 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %69, i64 0, i32 0
  %71 = load i32, i32* %70, align 4, !noalias !5
  %72 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %69, i64 0, i32 1, i64 0
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %71, i32* %73, align 8, !alias.scope !5
  %74 = icmp sgt i32 %71, 5
  br i1 %74, label %75, label %82

75:                                               ; preds = %67
  %76 = sext i32 %71 to i64
  %77 = shl nsw i64 %76, 2
  %78 = tail call i8* @_Znam(i64 %77) #8, !noalias !5
  %79 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %80 = bitcast i32** %79 to i8**
  store i8* %78, i8** %80, align 8, !alias.scope !5
  %81 = bitcast i8* %78 to i32*
  br label %87

82:                                               ; preds = %67
  %83 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %84 = bitcast %union.anon* %83 to i32*
  %85 = sext i32 %71 to i64
  %86 = shl nsw i64 %85, 2
  br label %87

87:                                               ; preds = %82, %75
  %88 = phi i64 [ %77, %75 ], [ %86, %82 ]
  %89 = phi i32* [ %81, %75 ], [ %84, %82 ]
  %90 = bitcast i32* %89 to i8*
  %91 = bitcast i32* %72 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %90, i8* align 4 %91, i64 %88, i1 false) #9
  br label %92

92:                                               ; preds = %65, %87
  %93 = phi i32 [ 0, %65 ], [ %71, %87 ]
  %94 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 0
  %95 = load i32, i32* %94, align 8
  switch i32 %95, label %1535 [
    i32 1, label %96
    i32 7, label %645
    i32 9, label %1019
    i32 3, label %1277
  ]

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 1
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 0
  %100 = load float, float* %99, align 8
  %101 = fpext float %100 to double
  br i1 %33, label %107, label %102

102:                                              ; preds = %96
  %103 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1
  %104 = bitcast %union.TfLitePtrUnion* %103 to float**
  %105 = load float*, float** %104, align 8
  %106 = bitcast float* %105 to i8*
  br label %107

107:                                              ; preds = %96, %102
  %108 = phi i8* [ %106, %102 ], [ null, %96 ]
  %109 = phi float* [ %105, %102 ], [ null, %96 ]
  %110 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 0
  %111 = load i32, i32* %110, align 8
  switch i32 %111, label %640 [
    i32 9, label %112
    i32 3, label %287
    i32 7, label %462
  ]

112:                                              ; preds = %107
  br i1 %64, label %117, label %113

113:                                              ; preds = %112
  %114 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %115 = bitcast %union.TfLitePtrUnion* %114 to i8**
  %116 = load i8*, i8** %115, align 8
  br label %117

117:                                              ; preds = %112, %113
  %118 = phi i8* [ %116, %113 ], [ null, %112 ]
  %119 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %120 = icmp sgt i32 %62, 5
  br i1 %120, label %121, label %124

121:                                              ; preds = %117
  %122 = getelementptr inbounds %union.anon, %union.anon* %119, i64 0, i32 0
  %123 = load i32*, i32** %122, align 8
  br label %127

124:                                              ; preds = %117
  %125 = bitcast %union.anon* %119 to i32*
  %126 = icmp sgt i32 %62, 0
  br i1 %126, label %127, label %230

127:                                              ; preds = %124, %121
  %128 = phi i32* [ %123, %121 ], [ %125, %124 ]
  %129 = zext i32 %62 to i64
  %130 = icmp ult i32 %62, 8
  br i1 %130, label %216, label %131

131:                                              ; preds = %127
  %132 = and i64 %129, 4294967288
  %133 = add nsw i64 %132, -8
  %134 = lshr exact i64 %133, 3
  %135 = add nuw nsw i64 %134, 1
  %136 = and i64 %135, 3
  %137 = icmp ult i64 %133, 24
  br i1 %137, label %183, label %138

138:                                              ; preds = %131
  %139 = sub nsw i64 %135, %136
  br label %140

140:                                              ; preds = %140, %138
  %141 = phi i64 [ 0, %138 ], [ %180, %140 ]
  %142 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %138 ], [ %178, %140 ]
  %143 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %138 ], [ %179, %140 ]
  %144 = phi i64 [ %139, %138 ], [ %181, %140 ]
  %145 = getelementptr inbounds i32, i32* %128, i64 %141
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4
  %148 = getelementptr inbounds i32, i32* %145, i64 4
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = mul nsw <4 x i32> %147, %142
  %152 = mul nsw <4 x i32> %150, %143
  %153 = or i64 %141, 8
  %154 = getelementptr inbounds i32, i32* %128, i64 %153
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4
  %157 = getelementptr inbounds i32, i32* %154, i64 4
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = mul nsw <4 x i32> %156, %151
  %161 = mul nsw <4 x i32> %159, %152
  %162 = or i64 %141, 16
  %163 = getelementptr inbounds i32, i32* %128, i64 %162
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 4
  %166 = getelementptr inbounds i32, i32* %163, i64 4
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4
  %169 = mul nsw <4 x i32> %165, %160
  %170 = mul nsw <4 x i32> %168, %161
  %171 = or i64 %141, 24
  %172 = getelementptr inbounds i32, i32* %128, i64 %171
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4
  %175 = getelementptr inbounds i32, i32* %172, i64 4
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4
  %178 = mul nsw <4 x i32> %174, %169
  %179 = mul nsw <4 x i32> %177, %170
  %180 = add i64 %141, 32
  %181 = add i64 %144, -4
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %183, label %140, !llvm.loop !8

183:                                              ; preds = %140, %131
  %184 = phi <4 x i32> [ undef, %131 ], [ %178, %140 ]
  %185 = phi <4 x i32> [ undef, %131 ], [ %179, %140 ]
  %186 = phi i64 [ 0, %131 ], [ %180, %140 ]
  %187 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %131 ], [ %178, %140 ]
  %188 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %131 ], [ %179, %140 ]
  %189 = icmp eq i64 %136, 0
  br i1 %189, label %206, label %190

190:                                              ; preds = %183, %190
  %191 = phi i64 [ %203, %190 ], [ %186, %183 ]
  %192 = phi <4 x i32> [ %201, %190 ], [ %187, %183 ]
  %193 = phi <4 x i32> [ %202, %190 ], [ %188, %183 ]
  %194 = phi i64 [ %204, %190 ], [ %136, %183 ]
  %195 = getelementptr inbounds i32, i32* %128, i64 %191
  %196 = bitcast i32* %195 to <4 x i32>*
  %197 = load <4 x i32>, <4 x i32>* %196, align 4
  %198 = getelementptr inbounds i32, i32* %195, i64 4
  %199 = bitcast i32* %198 to <4 x i32>*
  %200 = load <4 x i32>, <4 x i32>* %199, align 4
  %201 = mul nsw <4 x i32> %197, %192
  %202 = mul nsw <4 x i32> %200, %193
  %203 = add i64 %191, 8
  %204 = add i64 %194, -1
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %206, label %190, !llvm.loop !10

206:                                              ; preds = %190, %183
  %207 = phi <4 x i32> [ %184, %183 ], [ %201, %190 ]
  %208 = phi <4 x i32> [ %185, %183 ], [ %202, %190 ]
  %209 = mul <4 x i32> %208, %207
  %210 = shufflevector <4 x i32> %209, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %211 = mul <4 x i32> %209, %210
  %212 = shufflevector <4 x i32> %211, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %213 = mul <4 x i32> %211, %212
  %214 = extractelement <4 x i32> %213, i32 0
  %215 = icmp eq i64 %132, %129
  br i1 %215, label %227, label %216

216:                                              ; preds = %206, %127
  %217 = phi i64 [ 0, %127 ], [ %132, %206 ]
  %218 = phi i32 [ 1, %127 ], [ %214, %206 ]
  br label %219

219:                                              ; preds = %216, %219
  %220 = phi i64 [ %225, %219 ], [ %217, %216 ]
  %221 = phi i32 [ %224, %219 ], [ %218, %216 ]
  %222 = getelementptr inbounds i32, i32* %128, i64 %220
  %223 = load i32, i32* %222, align 4
  %224 = mul nsw i32 %223, %221
  %225 = add nuw nsw i64 %220, 1
  %226 = icmp eq i64 %225, %129
  br i1 %226, label %227, label %219, !llvm.loop !12

227:                                              ; preds = %219, %206
  %228 = phi i32 [ %214, %206 ], [ %224, %219 ]
  %229 = icmp sgt i32 %228, 0
  br i1 %229, label %230, label %1542

230:                                              ; preds = %227, %124
  %231 = phi i32 [ %228, %227 ], [ 1, %124 ]
  %232 = zext i32 %231 to i64
  %233 = icmp ult i32 %231, 4
  br i1 %233, label %268, label %234

234:                                              ; preds = %230
  %235 = getelementptr i8, i8* %118, i64 %232
  %236 = getelementptr float, float* %109, i64 %232
  %237 = bitcast float* %236 to i8*
  %238 = icmp ult i8* %118, %237
  %239 = icmp ult i8* %108, %235
  %240 = and i1 %238, %239
  br i1 %240, label %268, label %241

241:                                              ; preds = %234
  %242 = and i64 %232, 4294967292
  %243 = insertelement <4 x double> undef, double %101, i32 0
  %244 = shufflevector <4 x double> %243, <4 x double> undef, <4 x i32> zeroinitializer
  %245 = insertelement <4 x i32> undef, i32 %98, i32 0
  %246 = shufflevector <4 x i32> %245, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %247

247:                                              ; preds = %247, %241
  %248 = phi i64 [ 0, %241 ], [ %264, %247 ]
  %249 = getelementptr inbounds float, float* %109, i64 %248
  %250 = bitcast float* %249 to <4 x float>*
  %251 = load <4 x float>, <4 x float>* %250, align 4, !alias.scope !14
  %252 = fpext <4 x float> %251 to <4 x double>
  %253 = fdiv <4 x double> %252, %244
  %254 = call <4 x double> @llvm.round.v4f64(<4 x double> %253)
  %255 = fptosi <4 x double> %254 to <4 x i32>
  %256 = add nsw <4 x i32> %246, %255
  %257 = icmp sgt <4 x i32> %256, <i32 -128, i32 -128, i32 -128, i32 -128>
  %258 = select <4 x i1> %257, <4 x i32> %256, <4 x i32> <i32 -128, i32 -128, i32 -128, i32 -128>
  %259 = icmp slt <4 x i32> %258, <i32 127, i32 127, i32 127, i32 127>
  %260 = select <4 x i1> %259, <4 x i32> %258, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %261 = trunc <4 x i32> %260 to <4 x i8>
  %262 = getelementptr inbounds i8, i8* %118, i64 %248
  %263 = bitcast i8* %262 to <4 x i8>*
  store <4 x i8> %261, <4 x i8>* %263, align 1, !alias.scope !17, !noalias !14
  %264 = add i64 %248, 4
  %265 = icmp eq i64 %264, %242
  br i1 %265, label %266, label %247, !llvm.loop !19

266:                                              ; preds = %247
  %267 = icmp eq i64 %242, %232
  br i1 %267, label %1542, label %268

268:                                              ; preds = %266, %234, %230
  %269 = phi i64 [ 0, %234 ], [ 0, %230 ], [ %242, %266 ]
  br label %270

270:                                              ; preds = %268, %270
  %271 = phi i64 [ %285, %270 ], [ %269, %268 ]
  %272 = getelementptr inbounds float, float* %109, i64 %271
  %273 = load float, float* %272, align 4
  %274 = fpext float %273 to double
  %275 = fdiv double %274, %101
  %276 = tail call double @llvm.round.f64(double %275) #9
  %277 = fptosi double %276 to i32
  %278 = add nsw i32 %98, %277
  %279 = icmp sgt i32 %278, -128
  %280 = select i1 %279, i32 %278, i32 -128
  %281 = icmp slt i32 %280, 127
  %282 = select i1 %281, i32 %280, i32 127
  %283 = trunc i32 %282 to i8
  %284 = getelementptr inbounds i8, i8* %118, i64 %271
  store i8 %283, i8* %284, align 1
  %285 = add nuw nsw i64 %271, 1
  %286 = icmp eq i64 %285, %232
  br i1 %286, label %1542, label %270, !llvm.loop !20

287:                                              ; preds = %107
  br i1 %64, label %292, label %288

288:                                              ; preds = %287
  %289 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %290 = bitcast %union.TfLitePtrUnion* %289 to i8**
  %291 = load i8*, i8** %290, align 8
  br label %292

292:                                              ; preds = %287, %288
  %293 = phi i8* [ %291, %288 ], [ null, %287 ]
  %294 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %295 = icmp sgt i32 %62, 5
  br i1 %295, label %296, label %299

296:                                              ; preds = %292
  %297 = getelementptr inbounds %union.anon, %union.anon* %294, i64 0, i32 0
  %298 = load i32*, i32** %297, align 8
  br label %302

299:                                              ; preds = %292
  %300 = bitcast %union.anon* %294 to i32*
  %301 = icmp sgt i32 %62, 0
  br i1 %301, label %302, label %405

302:                                              ; preds = %299, %296
  %303 = phi i32* [ %298, %296 ], [ %300, %299 ]
  %304 = zext i32 %62 to i64
  %305 = icmp ult i32 %62, 8
  br i1 %305, label %391, label %306

306:                                              ; preds = %302
  %307 = and i64 %304, 4294967288
  %308 = add nsw i64 %307, -8
  %309 = lshr exact i64 %308, 3
  %310 = add nuw nsw i64 %309, 1
  %311 = and i64 %310, 3
  %312 = icmp ult i64 %308, 24
  br i1 %312, label %358, label %313

313:                                              ; preds = %306
  %314 = sub nsw i64 %310, %311
  br label %315

315:                                              ; preds = %315, %313
  %316 = phi i64 [ 0, %313 ], [ %355, %315 ]
  %317 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %313 ], [ %353, %315 ]
  %318 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %313 ], [ %354, %315 ]
  %319 = phi i64 [ %314, %313 ], [ %356, %315 ]
  %320 = getelementptr inbounds i32, i32* %303, i64 %316
  %321 = bitcast i32* %320 to <4 x i32>*
  %322 = load <4 x i32>, <4 x i32>* %321, align 4
  %323 = getelementptr inbounds i32, i32* %320, i64 4
  %324 = bitcast i32* %323 to <4 x i32>*
  %325 = load <4 x i32>, <4 x i32>* %324, align 4
  %326 = mul nsw <4 x i32> %322, %317
  %327 = mul nsw <4 x i32> %325, %318
  %328 = or i64 %316, 8
  %329 = getelementptr inbounds i32, i32* %303, i64 %328
  %330 = bitcast i32* %329 to <4 x i32>*
  %331 = load <4 x i32>, <4 x i32>* %330, align 4
  %332 = getelementptr inbounds i32, i32* %329, i64 4
  %333 = bitcast i32* %332 to <4 x i32>*
  %334 = load <4 x i32>, <4 x i32>* %333, align 4
  %335 = mul nsw <4 x i32> %331, %326
  %336 = mul nsw <4 x i32> %334, %327
  %337 = or i64 %316, 16
  %338 = getelementptr inbounds i32, i32* %303, i64 %337
  %339 = bitcast i32* %338 to <4 x i32>*
  %340 = load <4 x i32>, <4 x i32>* %339, align 4
  %341 = getelementptr inbounds i32, i32* %338, i64 4
  %342 = bitcast i32* %341 to <4 x i32>*
  %343 = load <4 x i32>, <4 x i32>* %342, align 4
  %344 = mul nsw <4 x i32> %340, %335
  %345 = mul nsw <4 x i32> %343, %336
  %346 = or i64 %316, 24
  %347 = getelementptr inbounds i32, i32* %303, i64 %346
  %348 = bitcast i32* %347 to <4 x i32>*
  %349 = load <4 x i32>, <4 x i32>* %348, align 4
  %350 = getelementptr inbounds i32, i32* %347, i64 4
  %351 = bitcast i32* %350 to <4 x i32>*
  %352 = load <4 x i32>, <4 x i32>* %351, align 4
  %353 = mul nsw <4 x i32> %349, %344
  %354 = mul nsw <4 x i32> %352, %345
  %355 = add i64 %316, 32
  %356 = add i64 %319, -4
  %357 = icmp eq i64 %356, 0
  br i1 %357, label %358, label %315, !llvm.loop !21

358:                                              ; preds = %315, %306
  %359 = phi <4 x i32> [ undef, %306 ], [ %353, %315 ]
  %360 = phi <4 x i32> [ undef, %306 ], [ %354, %315 ]
  %361 = phi i64 [ 0, %306 ], [ %355, %315 ]
  %362 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %306 ], [ %353, %315 ]
  %363 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %306 ], [ %354, %315 ]
  %364 = icmp eq i64 %311, 0
  br i1 %364, label %381, label %365

365:                                              ; preds = %358, %365
  %366 = phi i64 [ %378, %365 ], [ %361, %358 ]
  %367 = phi <4 x i32> [ %376, %365 ], [ %362, %358 ]
  %368 = phi <4 x i32> [ %377, %365 ], [ %363, %358 ]
  %369 = phi i64 [ %379, %365 ], [ %311, %358 ]
  %370 = getelementptr inbounds i32, i32* %303, i64 %366
  %371 = bitcast i32* %370 to <4 x i32>*
  %372 = load <4 x i32>, <4 x i32>* %371, align 4
  %373 = getelementptr inbounds i32, i32* %370, i64 4
  %374 = bitcast i32* %373 to <4 x i32>*
  %375 = load <4 x i32>, <4 x i32>* %374, align 4
  %376 = mul nsw <4 x i32> %372, %367
  %377 = mul nsw <4 x i32> %375, %368
  %378 = add i64 %366, 8
  %379 = add i64 %369, -1
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %381, label %365, !llvm.loop !22

381:                                              ; preds = %365, %358
  %382 = phi <4 x i32> [ %359, %358 ], [ %376, %365 ]
  %383 = phi <4 x i32> [ %360, %358 ], [ %377, %365 ]
  %384 = mul <4 x i32> %383, %382
  %385 = shufflevector <4 x i32> %384, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %386 = mul <4 x i32> %384, %385
  %387 = shufflevector <4 x i32> %386, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %388 = mul <4 x i32> %386, %387
  %389 = extractelement <4 x i32> %388, i32 0
  %390 = icmp eq i64 %307, %304
  br i1 %390, label %402, label %391

391:                                              ; preds = %381, %302
  %392 = phi i64 [ 0, %302 ], [ %307, %381 ]
  %393 = phi i32 [ 1, %302 ], [ %389, %381 ]
  br label %394

394:                                              ; preds = %391, %394
  %395 = phi i64 [ %400, %394 ], [ %392, %391 ]
  %396 = phi i32 [ %399, %394 ], [ %393, %391 ]
  %397 = getelementptr inbounds i32, i32* %303, i64 %395
  %398 = load i32, i32* %397, align 4
  %399 = mul nsw i32 %398, %396
  %400 = add nuw nsw i64 %395, 1
  %401 = icmp eq i64 %400, %304
  br i1 %401, label %402, label %394, !llvm.loop !23

402:                                              ; preds = %394, %381
  %403 = phi i32 [ %389, %381 ], [ %399, %394 ]
  %404 = icmp sgt i32 %403, 0
  br i1 %404, label %405, label %1542

405:                                              ; preds = %402, %299
  %406 = phi i32 [ %403, %402 ], [ 1, %299 ]
  %407 = zext i32 %406 to i64
  %408 = icmp ult i32 %406, 4
  br i1 %408, label %443, label %409

409:                                              ; preds = %405
  %410 = getelementptr i8, i8* %293, i64 %407
  %411 = getelementptr float, float* %109, i64 %407
  %412 = bitcast float* %411 to i8*
  %413 = icmp ult i8* %293, %412
  %414 = icmp ult i8* %108, %410
  %415 = and i1 %413, %414
  br i1 %415, label %443, label %416

416:                                              ; preds = %409
  %417 = and i64 %407, 4294967292
  %418 = insertelement <4 x double> undef, double %101, i32 0
  %419 = shufflevector <4 x double> %418, <4 x double> undef, <4 x i32> zeroinitializer
  %420 = insertelement <4 x i32> undef, i32 %98, i32 0
  %421 = shufflevector <4 x i32> %420, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %422

422:                                              ; preds = %422, %416
  %423 = phi i64 [ 0, %416 ], [ %439, %422 ]
  %424 = getelementptr inbounds float, float* %109, i64 %423
  %425 = bitcast float* %424 to <4 x float>*
  %426 = load <4 x float>, <4 x float>* %425, align 4, !alias.scope !24
  %427 = fpext <4 x float> %426 to <4 x double>
  %428 = fdiv <4 x double> %427, %419
  %429 = call <4 x double> @llvm.round.v4f64(<4 x double> %428)
  %430 = fptosi <4 x double> %429 to <4 x i32>
  %431 = add nsw <4 x i32> %421, %430
  %432 = icmp sgt <4 x i32> %431, zeroinitializer
  %433 = select <4 x i1> %432, <4 x i32> %431, <4 x i32> zeroinitializer
  %434 = icmp slt <4 x i32> %433, <i32 255, i32 255, i32 255, i32 255>
  %435 = select <4 x i1> %434, <4 x i32> %433, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %436 = trunc <4 x i32> %435 to <4 x i8>
  %437 = getelementptr inbounds i8, i8* %293, i64 %423
  %438 = bitcast i8* %437 to <4 x i8>*
  store <4 x i8> %436, <4 x i8>* %438, align 1, !alias.scope !27, !noalias !24
  %439 = add i64 %423, 4
  %440 = icmp eq i64 %439, %417
  br i1 %440, label %441, label %422, !llvm.loop !29

441:                                              ; preds = %422
  %442 = icmp eq i64 %417, %407
  br i1 %442, label %1542, label %443

443:                                              ; preds = %441, %409, %405
  %444 = phi i64 [ 0, %409 ], [ 0, %405 ], [ %417, %441 ]
  br label %445

445:                                              ; preds = %443, %445
  %446 = phi i64 [ %460, %445 ], [ %444, %443 ]
  %447 = getelementptr inbounds float, float* %109, i64 %446
  %448 = load float, float* %447, align 4
  %449 = fpext float %448 to double
  %450 = fdiv double %449, %101
  %451 = tail call double @llvm.round.f64(double %450) #9
  %452 = fptosi double %451 to i32
  %453 = add nsw i32 %98, %452
  %454 = icmp sgt i32 %453, 0
  %455 = select i1 %454, i32 %453, i32 0
  %456 = icmp slt i32 %455, 255
  %457 = select i1 %456, i32 %455, i32 255
  %458 = trunc i32 %457 to i8
  %459 = getelementptr inbounds i8, i8* %293, i64 %446
  store i8 %458, i8* %459, align 1
  %460 = add nuw nsw i64 %446, 1
  %461 = icmp eq i64 %460, %407
  br i1 %461, label %1542, label %445, !llvm.loop !30

462:                                              ; preds = %107
  br i1 %64, label %468, label %463

463:                                              ; preds = %462
  %464 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %465 = bitcast %union.TfLitePtrUnion* %464 to i16**
  %466 = load i16*, i16** %465, align 8
  %467 = bitcast i16* %466 to i8*
  br label %468

468:                                              ; preds = %462, %463
  %469 = phi i8* [ %467, %463 ], [ null, %462 ]
  %470 = phi i16* [ %466, %463 ], [ null, %462 ]
  %471 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %472 = icmp sgt i32 %62, 5
  br i1 %472, label %473, label %476

473:                                              ; preds = %468
  %474 = getelementptr inbounds %union.anon, %union.anon* %471, i64 0, i32 0
  %475 = load i32*, i32** %474, align 8
  br label %479

476:                                              ; preds = %468
  %477 = bitcast %union.anon* %471 to i32*
  %478 = icmp sgt i32 %62, 0
  br i1 %478, label %479, label %582

479:                                              ; preds = %476, %473
  %480 = phi i32* [ %475, %473 ], [ %477, %476 ]
  %481 = zext i32 %62 to i64
  %482 = icmp ult i32 %62, 8
  br i1 %482, label %568, label %483

483:                                              ; preds = %479
  %484 = and i64 %481, 4294967288
  %485 = add nsw i64 %484, -8
  %486 = lshr exact i64 %485, 3
  %487 = add nuw nsw i64 %486, 1
  %488 = and i64 %487, 3
  %489 = icmp ult i64 %485, 24
  br i1 %489, label %535, label %490

490:                                              ; preds = %483
  %491 = sub nsw i64 %487, %488
  br label %492

492:                                              ; preds = %492, %490
  %493 = phi i64 [ 0, %490 ], [ %532, %492 ]
  %494 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %490 ], [ %530, %492 ]
  %495 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %490 ], [ %531, %492 ]
  %496 = phi i64 [ %491, %490 ], [ %533, %492 ]
  %497 = getelementptr inbounds i32, i32* %480, i64 %493
  %498 = bitcast i32* %497 to <4 x i32>*
  %499 = load <4 x i32>, <4 x i32>* %498, align 4
  %500 = getelementptr inbounds i32, i32* %497, i64 4
  %501 = bitcast i32* %500 to <4 x i32>*
  %502 = load <4 x i32>, <4 x i32>* %501, align 4
  %503 = mul nsw <4 x i32> %499, %494
  %504 = mul nsw <4 x i32> %502, %495
  %505 = or i64 %493, 8
  %506 = getelementptr inbounds i32, i32* %480, i64 %505
  %507 = bitcast i32* %506 to <4 x i32>*
  %508 = load <4 x i32>, <4 x i32>* %507, align 4
  %509 = getelementptr inbounds i32, i32* %506, i64 4
  %510 = bitcast i32* %509 to <4 x i32>*
  %511 = load <4 x i32>, <4 x i32>* %510, align 4
  %512 = mul nsw <4 x i32> %508, %503
  %513 = mul nsw <4 x i32> %511, %504
  %514 = or i64 %493, 16
  %515 = getelementptr inbounds i32, i32* %480, i64 %514
  %516 = bitcast i32* %515 to <4 x i32>*
  %517 = load <4 x i32>, <4 x i32>* %516, align 4
  %518 = getelementptr inbounds i32, i32* %515, i64 4
  %519 = bitcast i32* %518 to <4 x i32>*
  %520 = load <4 x i32>, <4 x i32>* %519, align 4
  %521 = mul nsw <4 x i32> %517, %512
  %522 = mul nsw <4 x i32> %520, %513
  %523 = or i64 %493, 24
  %524 = getelementptr inbounds i32, i32* %480, i64 %523
  %525 = bitcast i32* %524 to <4 x i32>*
  %526 = load <4 x i32>, <4 x i32>* %525, align 4
  %527 = getelementptr inbounds i32, i32* %524, i64 4
  %528 = bitcast i32* %527 to <4 x i32>*
  %529 = load <4 x i32>, <4 x i32>* %528, align 4
  %530 = mul nsw <4 x i32> %526, %521
  %531 = mul nsw <4 x i32> %529, %522
  %532 = add i64 %493, 32
  %533 = add i64 %496, -4
  %534 = icmp eq i64 %533, 0
  br i1 %534, label %535, label %492, !llvm.loop !31

535:                                              ; preds = %492, %483
  %536 = phi <4 x i32> [ undef, %483 ], [ %530, %492 ]
  %537 = phi <4 x i32> [ undef, %483 ], [ %531, %492 ]
  %538 = phi i64 [ 0, %483 ], [ %532, %492 ]
  %539 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %483 ], [ %530, %492 ]
  %540 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %483 ], [ %531, %492 ]
  %541 = icmp eq i64 %488, 0
  br i1 %541, label %558, label %542

542:                                              ; preds = %535, %542
  %543 = phi i64 [ %555, %542 ], [ %538, %535 ]
  %544 = phi <4 x i32> [ %553, %542 ], [ %539, %535 ]
  %545 = phi <4 x i32> [ %554, %542 ], [ %540, %535 ]
  %546 = phi i64 [ %556, %542 ], [ %488, %535 ]
  %547 = getelementptr inbounds i32, i32* %480, i64 %543
  %548 = bitcast i32* %547 to <4 x i32>*
  %549 = load <4 x i32>, <4 x i32>* %548, align 4
  %550 = getelementptr inbounds i32, i32* %547, i64 4
  %551 = bitcast i32* %550 to <4 x i32>*
  %552 = load <4 x i32>, <4 x i32>* %551, align 4
  %553 = mul nsw <4 x i32> %549, %544
  %554 = mul nsw <4 x i32> %552, %545
  %555 = add i64 %543, 8
  %556 = add i64 %546, -1
  %557 = icmp eq i64 %556, 0
  br i1 %557, label %558, label %542, !llvm.loop !32

558:                                              ; preds = %542, %535
  %559 = phi <4 x i32> [ %536, %535 ], [ %553, %542 ]
  %560 = phi <4 x i32> [ %537, %535 ], [ %554, %542 ]
  %561 = mul <4 x i32> %560, %559
  %562 = shufflevector <4 x i32> %561, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %563 = mul <4 x i32> %561, %562
  %564 = shufflevector <4 x i32> %563, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %565 = mul <4 x i32> %563, %564
  %566 = extractelement <4 x i32> %565, i32 0
  %567 = icmp eq i64 %484, %481
  br i1 %567, label %579, label %568

568:                                              ; preds = %558, %479
  %569 = phi i64 [ 0, %479 ], [ %484, %558 ]
  %570 = phi i32 [ 1, %479 ], [ %566, %558 ]
  br label %571

571:                                              ; preds = %568, %571
  %572 = phi i64 [ %577, %571 ], [ %569, %568 ]
  %573 = phi i32 [ %576, %571 ], [ %570, %568 ]
  %574 = getelementptr inbounds i32, i32* %480, i64 %572
  %575 = load i32, i32* %574, align 4
  %576 = mul nsw i32 %575, %573
  %577 = add nuw nsw i64 %572, 1
  %578 = icmp eq i64 %577, %481
  br i1 %578, label %579, label %571, !llvm.loop !33

579:                                              ; preds = %571, %558
  %580 = phi i32 [ %566, %558 ], [ %576, %571 ]
  %581 = icmp sgt i32 %580, 0
  br i1 %581, label %582, label %1542

582:                                              ; preds = %579, %476
  %583 = phi i32 [ %580, %579 ], [ 1, %476 ]
  %584 = zext i32 %583 to i64
  %585 = icmp ult i32 %583, 4
  br i1 %585, label %621, label %586

586:                                              ; preds = %582
  %587 = getelementptr i16, i16* %470, i64 %584
  %588 = bitcast i16* %587 to i8*
  %589 = getelementptr float, float* %109, i64 %584
  %590 = bitcast float* %589 to i8*
  %591 = icmp ult i8* %469, %590
  %592 = icmp ult i8* %108, %588
  %593 = and i1 %591, %592
  br i1 %593, label %621, label %594

594:                                              ; preds = %586
  %595 = and i64 %584, 4294967292
  %596 = insertelement <4 x double> undef, double %101, i32 0
  %597 = shufflevector <4 x double> %596, <4 x double> undef, <4 x i32> zeroinitializer
  %598 = insertelement <4 x i32> undef, i32 %98, i32 0
  %599 = shufflevector <4 x i32> %598, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %600

600:                                              ; preds = %600, %594
  %601 = phi i64 [ 0, %594 ], [ %617, %600 ]
  %602 = getelementptr inbounds float, float* %109, i64 %601
  %603 = bitcast float* %602 to <4 x float>*
  %604 = load <4 x float>, <4 x float>* %603, align 4, !alias.scope !34
  %605 = fpext <4 x float> %604 to <4 x double>
  %606 = fdiv <4 x double> %605, %597
  %607 = call <4 x double> @llvm.round.v4f64(<4 x double> %606)
  %608 = fptosi <4 x double> %607 to <4 x i32>
  %609 = add nsw <4 x i32> %599, %608
  %610 = icmp sgt <4 x i32> %609, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %611 = select <4 x i1> %610, <4 x i32> %609, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %612 = icmp slt <4 x i32> %611, <i32 32767, i32 32767, i32 32767, i32 32767>
  %613 = select <4 x i1> %612, <4 x i32> %611, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %614 = trunc <4 x i32> %613 to <4 x i16>
  %615 = getelementptr inbounds i16, i16* %470, i64 %601
  %616 = bitcast i16* %615 to <4 x i16>*
  store <4 x i16> %614, <4 x i16>* %616, align 2, !alias.scope !37, !noalias !34
  %617 = add i64 %601, 4
  %618 = icmp eq i64 %617, %595
  br i1 %618, label %619, label %600, !llvm.loop !39

619:                                              ; preds = %600
  %620 = icmp eq i64 %595, %584
  br i1 %620, label %1542, label %621

621:                                              ; preds = %619, %586, %582
  %622 = phi i64 [ 0, %586 ], [ 0, %582 ], [ %595, %619 ]
  br label %623

623:                                              ; preds = %621, %623
  %624 = phi i64 [ %638, %623 ], [ %622, %621 ]
  %625 = getelementptr inbounds float, float* %109, i64 %624
  %626 = load float, float* %625, align 4
  %627 = fpext float %626 to double
  %628 = fdiv double %627, %101
  %629 = tail call double @llvm.round.f64(double %628) #9
  %630 = fptosi double %629 to i32
  %631 = add nsw i32 %98, %630
  %632 = icmp sgt i32 %631, -32768
  %633 = select i1 %632, i32 %631, i32 -32768
  %634 = icmp slt i32 %633, 32767
  %635 = select i1 %634, i32 %633, i32 32767
  %636 = trunc i32 %635 to i16
  %637 = getelementptr inbounds i16, i16* %470, i64 %624
  store i16 %636, i16* %637, align 2
  %638 = add nuw nsw i64 %624, 1
  %639 = icmp eq i64 %638, %584
  br i1 %639, label %1542, label %623, !llvm.loop !40

640:                                              ; preds = %107
  %641 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %642 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %641, align 8
  %643 = tail call i8* @TfLiteTypeGetName(i32 1) #9
  %644 = tail call i8* @TfLiteTypeGetName(i32 %111) #9
  tail call void (%struct.TfLiteContext*, i8*, ...) %642(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.21, i64 0, i64 0), i8* %643, i8* %644) #9
  br label %1542

645:                                              ; preds = %92
  %646 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 0
  %647 = load i32, i32* %646, align 8
  switch i32 %647, label %1014 [
    i32 9, label %648
    i32 7, label %831
  ]

648:                                              ; preds = %645
  br i1 %33, label %653, label %649

649:                                              ; preds = %648
  %650 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1
  %651 = bitcast %union.TfLitePtrUnion* %650 to i16**
  %652 = load i16*, i16** %651, align 8
  br label %653

653:                                              ; preds = %648, %649
  %654 = phi i16* [ %652, %649 ], [ null, %648 ]
  %655 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %656 = icmp sgt i32 %62, 5
  br i1 %656, label %657, label %660

657:                                              ; preds = %653
  %658 = getelementptr inbounds %union.anon, %union.anon* %655, i64 0, i32 0
  %659 = load i32*, i32** %658, align 8
  br label %663

660:                                              ; preds = %653
  %661 = bitcast %union.anon* %655 to i32*
  %662 = icmp sgt i32 %62, 0
  br i1 %662, label %663, label %763

663:                                              ; preds = %660, %657
  %664 = phi i32* [ %659, %657 ], [ %661, %660 ]
  %665 = zext i32 %62 to i64
  %666 = icmp ult i32 %62, 8
  br i1 %666, label %752, label %667

667:                                              ; preds = %663
  %668 = and i64 %665, 4294967288
  %669 = add nsw i64 %668, -8
  %670 = lshr exact i64 %669, 3
  %671 = add nuw nsw i64 %670, 1
  %672 = and i64 %671, 3
  %673 = icmp ult i64 %669, 24
  br i1 %673, label %719, label %674

674:                                              ; preds = %667
  %675 = sub nsw i64 %671, %672
  br label %676

676:                                              ; preds = %676, %674
  %677 = phi i64 [ 0, %674 ], [ %716, %676 ]
  %678 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %674 ], [ %714, %676 ]
  %679 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %674 ], [ %715, %676 ]
  %680 = phi i64 [ %675, %674 ], [ %717, %676 ]
  %681 = getelementptr inbounds i32, i32* %664, i64 %677
  %682 = bitcast i32* %681 to <4 x i32>*
  %683 = load <4 x i32>, <4 x i32>* %682, align 4
  %684 = getelementptr inbounds i32, i32* %681, i64 4
  %685 = bitcast i32* %684 to <4 x i32>*
  %686 = load <4 x i32>, <4 x i32>* %685, align 4
  %687 = mul nsw <4 x i32> %683, %678
  %688 = mul nsw <4 x i32> %686, %679
  %689 = or i64 %677, 8
  %690 = getelementptr inbounds i32, i32* %664, i64 %689
  %691 = bitcast i32* %690 to <4 x i32>*
  %692 = load <4 x i32>, <4 x i32>* %691, align 4
  %693 = getelementptr inbounds i32, i32* %690, i64 4
  %694 = bitcast i32* %693 to <4 x i32>*
  %695 = load <4 x i32>, <4 x i32>* %694, align 4
  %696 = mul nsw <4 x i32> %692, %687
  %697 = mul nsw <4 x i32> %695, %688
  %698 = or i64 %677, 16
  %699 = getelementptr inbounds i32, i32* %664, i64 %698
  %700 = bitcast i32* %699 to <4 x i32>*
  %701 = load <4 x i32>, <4 x i32>* %700, align 4
  %702 = getelementptr inbounds i32, i32* %699, i64 4
  %703 = bitcast i32* %702 to <4 x i32>*
  %704 = load <4 x i32>, <4 x i32>* %703, align 4
  %705 = mul nsw <4 x i32> %701, %696
  %706 = mul nsw <4 x i32> %704, %697
  %707 = or i64 %677, 24
  %708 = getelementptr inbounds i32, i32* %664, i64 %707
  %709 = bitcast i32* %708 to <4 x i32>*
  %710 = load <4 x i32>, <4 x i32>* %709, align 4
  %711 = getelementptr inbounds i32, i32* %708, i64 4
  %712 = bitcast i32* %711 to <4 x i32>*
  %713 = load <4 x i32>, <4 x i32>* %712, align 4
  %714 = mul nsw <4 x i32> %710, %705
  %715 = mul nsw <4 x i32> %713, %706
  %716 = add i64 %677, 32
  %717 = add i64 %680, -4
  %718 = icmp eq i64 %717, 0
  br i1 %718, label %719, label %676, !llvm.loop !41

719:                                              ; preds = %676, %667
  %720 = phi <4 x i32> [ undef, %667 ], [ %714, %676 ]
  %721 = phi <4 x i32> [ undef, %667 ], [ %715, %676 ]
  %722 = phi i64 [ 0, %667 ], [ %716, %676 ]
  %723 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %667 ], [ %714, %676 ]
  %724 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %667 ], [ %715, %676 ]
  %725 = icmp eq i64 %672, 0
  br i1 %725, label %742, label %726

726:                                              ; preds = %719, %726
  %727 = phi i64 [ %739, %726 ], [ %722, %719 ]
  %728 = phi <4 x i32> [ %737, %726 ], [ %723, %719 ]
  %729 = phi <4 x i32> [ %738, %726 ], [ %724, %719 ]
  %730 = phi i64 [ %740, %726 ], [ %672, %719 ]
  %731 = getelementptr inbounds i32, i32* %664, i64 %727
  %732 = bitcast i32* %731 to <4 x i32>*
  %733 = load <4 x i32>, <4 x i32>* %732, align 4
  %734 = getelementptr inbounds i32, i32* %731, i64 4
  %735 = bitcast i32* %734 to <4 x i32>*
  %736 = load <4 x i32>, <4 x i32>* %735, align 4
  %737 = mul nsw <4 x i32> %733, %728
  %738 = mul nsw <4 x i32> %736, %729
  %739 = add i64 %727, 8
  %740 = add i64 %730, -1
  %741 = icmp eq i64 %740, 0
  br i1 %741, label %742, label %726, !llvm.loop !42

742:                                              ; preds = %726, %719
  %743 = phi <4 x i32> [ %720, %719 ], [ %737, %726 ]
  %744 = phi <4 x i32> [ %721, %719 ], [ %738, %726 ]
  %745 = mul <4 x i32> %744, %743
  %746 = shufflevector <4 x i32> %745, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %747 = mul <4 x i32> %745, %746
  %748 = shufflevector <4 x i32> %747, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %749 = mul <4 x i32> %747, %748
  %750 = extractelement <4 x i32> %749, i32 0
  %751 = icmp eq i64 %668, %665
  br i1 %751, label %763, label %752

752:                                              ; preds = %742, %663
  %753 = phi i64 [ 0, %663 ], [ %668, %742 ]
  %754 = phi i32 [ 1, %663 ], [ %750, %742 ]
  br label %755

755:                                              ; preds = %752, %755
  %756 = phi i64 [ %761, %755 ], [ %753, %752 ]
  %757 = phi i32 [ %760, %755 ], [ %754, %752 ]
  %758 = getelementptr inbounds i32, i32* %664, i64 %756
  %759 = load i32, i32* %758, align 4
  %760 = mul nsw i32 %759, %757
  %761 = add nuw nsw i64 %756, 1
  %762 = icmp eq i64 %761, %665
  br i1 %762, label %763, label %755, !llvm.loop !43

763:                                              ; preds = %755, %742, %660
  %764 = phi i32 [ 1, %660 ], [ %750, %742 ], [ %760, %755 ]
  %765 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 0
  %766 = load i32, i32* %765, align 4
  %767 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 1
  %768 = load i32, i32* %767, align 4
  %769 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 1
  %770 = load i32, i32* %769, align 4
  %771 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 1
  %772 = load i32, i32* %771, align 4
  br i1 %64, label %777, label %773

773:                                              ; preds = %763
  %774 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %775 = bitcast %union.TfLitePtrUnion* %774 to i8**
  %776 = load i8*, i8** %775, align 8
  br label %777

777:                                              ; preds = %763, %773
  %778 = phi i8* [ %776, %773 ], [ null, %763 ]
  %779 = icmp sgt i32 %764, 0
  br i1 %779, label %780, label %1542

780:                                              ; preds = %777
  %781 = icmp sgt i32 %768, 0
  %782 = sub nsw i32 0, %768
  %783 = select i1 %781, i32 0, i32 %782
  %784 = shl i32 1, %768
  %785 = select i1 %781, i32 %784, i32 1
  %786 = sext i32 %766 to i64
  %787 = icmp eq i32 %766, -2147483648
  %788 = zext i32 %783 to i64
  %789 = shl nsw i64 -1, %788
  %790 = trunc i64 %789 to i32
  %791 = xor i32 %790, -1
  %792 = ashr i32 %791, 1
  %793 = zext i32 %764 to i64
  br label %794

794:                                              ; preds = %813, %780
  %795 = phi i64 [ 0, %780 ], [ %829, %813 ]
  %796 = getelementptr inbounds i16, i16* %654, i64 %795
  %797 = load i16, i16* %796, align 2
  %798 = sext i16 %797 to i32
  %799 = sub nsw i32 %798, %770
  %800 = mul nsw i32 %799, %785
  %801 = icmp eq i32 %800, %766
  br i1 %801, label %804, label %802

802:                                              ; preds = %794
  %803 = sext i32 %800 to i64
  br label %805

804:                                              ; preds = %794
  br i1 %787, label %813, label %805

805:                                              ; preds = %804, %802
  %806 = phi i64 [ %803, %802 ], [ %786, %804 ]
  %807 = mul nsw i64 %806, %786
  %808 = icmp sgt i64 %807, -1
  %809 = select i1 %808, i64 1073741824, i64 -1073741823
  %810 = add nsw i64 %809, %807
  %811 = sdiv i64 %810, 2147483648
  %812 = trunc i64 %811 to i32
  br label %813

813:                                              ; preds = %805, %804
  %814 = phi i32 [ %812, %805 ], [ 2147483647, %804 ]
  %815 = and i32 %814, %791
  %816 = lshr i32 %814, 31
  %817 = add nsw i32 %816, %792
  %818 = ashr i32 %814, %783
  %819 = icmp sgt i32 %815, %817
  %820 = zext i1 %819 to i32
  %821 = add i32 %818, %772
  %822 = add i32 %821, %820
  %823 = icmp slt i32 %822, 127
  %824 = select i1 %823, i32 %822, i32 127
  %825 = icmp sgt i32 %824, -128
  %826 = select i1 %825, i32 %824, i32 -128
  %827 = trunc i32 %826 to i8
  %828 = getelementptr inbounds i8, i8* %778, i64 %795
  store i8 %827, i8* %828, align 1
  %829 = add nuw nsw i64 %795, 1
  %830 = icmp eq i64 %829, %793
  br i1 %830, label %1542, label %794

831:                                              ; preds = %645
  br i1 %33, label %836, label %832

832:                                              ; preds = %831
  %833 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1
  %834 = bitcast %union.TfLitePtrUnion* %833 to i16**
  %835 = load i16*, i16** %834, align 8
  br label %836

836:                                              ; preds = %831, %832
  %837 = phi i16* [ %835, %832 ], [ null, %831 ]
  %838 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %839 = icmp sgt i32 %62, 5
  br i1 %839, label %840, label %843

840:                                              ; preds = %836
  %841 = getelementptr inbounds %union.anon, %union.anon* %838, i64 0, i32 0
  %842 = load i32*, i32** %841, align 8
  br label %846

843:                                              ; preds = %836
  %844 = bitcast %union.anon* %838 to i32*
  %845 = icmp sgt i32 %62, 0
  br i1 %845, label %846, label %946

846:                                              ; preds = %843, %840
  %847 = phi i32* [ %842, %840 ], [ %844, %843 ]
  %848 = zext i32 %62 to i64
  %849 = icmp ult i32 %62, 8
  br i1 %849, label %935, label %850

850:                                              ; preds = %846
  %851 = and i64 %848, 4294967288
  %852 = add nsw i64 %851, -8
  %853 = lshr exact i64 %852, 3
  %854 = add nuw nsw i64 %853, 1
  %855 = and i64 %854, 3
  %856 = icmp ult i64 %852, 24
  br i1 %856, label %902, label %857

857:                                              ; preds = %850
  %858 = sub nsw i64 %854, %855
  br label %859

859:                                              ; preds = %859, %857
  %860 = phi i64 [ 0, %857 ], [ %899, %859 ]
  %861 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %857 ], [ %897, %859 ]
  %862 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %857 ], [ %898, %859 ]
  %863 = phi i64 [ %858, %857 ], [ %900, %859 ]
  %864 = getelementptr inbounds i32, i32* %847, i64 %860
  %865 = bitcast i32* %864 to <4 x i32>*
  %866 = load <4 x i32>, <4 x i32>* %865, align 4
  %867 = getelementptr inbounds i32, i32* %864, i64 4
  %868 = bitcast i32* %867 to <4 x i32>*
  %869 = load <4 x i32>, <4 x i32>* %868, align 4
  %870 = mul nsw <4 x i32> %866, %861
  %871 = mul nsw <4 x i32> %869, %862
  %872 = or i64 %860, 8
  %873 = getelementptr inbounds i32, i32* %847, i64 %872
  %874 = bitcast i32* %873 to <4 x i32>*
  %875 = load <4 x i32>, <4 x i32>* %874, align 4
  %876 = getelementptr inbounds i32, i32* %873, i64 4
  %877 = bitcast i32* %876 to <4 x i32>*
  %878 = load <4 x i32>, <4 x i32>* %877, align 4
  %879 = mul nsw <4 x i32> %875, %870
  %880 = mul nsw <4 x i32> %878, %871
  %881 = or i64 %860, 16
  %882 = getelementptr inbounds i32, i32* %847, i64 %881
  %883 = bitcast i32* %882 to <4 x i32>*
  %884 = load <4 x i32>, <4 x i32>* %883, align 4
  %885 = getelementptr inbounds i32, i32* %882, i64 4
  %886 = bitcast i32* %885 to <4 x i32>*
  %887 = load <4 x i32>, <4 x i32>* %886, align 4
  %888 = mul nsw <4 x i32> %884, %879
  %889 = mul nsw <4 x i32> %887, %880
  %890 = or i64 %860, 24
  %891 = getelementptr inbounds i32, i32* %847, i64 %890
  %892 = bitcast i32* %891 to <4 x i32>*
  %893 = load <4 x i32>, <4 x i32>* %892, align 4
  %894 = getelementptr inbounds i32, i32* %891, i64 4
  %895 = bitcast i32* %894 to <4 x i32>*
  %896 = load <4 x i32>, <4 x i32>* %895, align 4
  %897 = mul nsw <4 x i32> %893, %888
  %898 = mul nsw <4 x i32> %896, %889
  %899 = add i64 %860, 32
  %900 = add i64 %863, -4
  %901 = icmp eq i64 %900, 0
  br i1 %901, label %902, label %859, !llvm.loop !44

902:                                              ; preds = %859, %850
  %903 = phi <4 x i32> [ undef, %850 ], [ %897, %859 ]
  %904 = phi <4 x i32> [ undef, %850 ], [ %898, %859 ]
  %905 = phi i64 [ 0, %850 ], [ %899, %859 ]
  %906 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %850 ], [ %897, %859 ]
  %907 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %850 ], [ %898, %859 ]
  %908 = icmp eq i64 %855, 0
  br i1 %908, label %925, label %909

909:                                              ; preds = %902, %909
  %910 = phi i64 [ %922, %909 ], [ %905, %902 ]
  %911 = phi <4 x i32> [ %920, %909 ], [ %906, %902 ]
  %912 = phi <4 x i32> [ %921, %909 ], [ %907, %902 ]
  %913 = phi i64 [ %923, %909 ], [ %855, %902 ]
  %914 = getelementptr inbounds i32, i32* %847, i64 %910
  %915 = bitcast i32* %914 to <4 x i32>*
  %916 = load <4 x i32>, <4 x i32>* %915, align 4
  %917 = getelementptr inbounds i32, i32* %914, i64 4
  %918 = bitcast i32* %917 to <4 x i32>*
  %919 = load <4 x i32>, <4 x i32>* %918, align 4
  %920 = mul nsw <4 x i32> %916, %911
  %921 = mul nsw <4 x i32> %919, %912
  %922 = add i64 %910, 8
  %923 = add i64 %913, -1
  %924 = icmp eq i64 %923, 0
  br i1 %924, label %925, label %909, !llvm.loop !45

925:                                              ; preds = %909, %902
  %926 = phi <4 x i32> [ %903, %902 ], [ %920, %909 ]
  %927 = phi <4 x i32> [ %904, %902 ], [ %921, %909 ]
  %928 = mul <4 x i32> %927, %926
  %929 = shufflevector <4 x i32> %928, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %930 = mul <4 x i32> %928, %929
  %931 = shufflevector <4 x i32> %930, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %932 = mul <4 x i32> %930, %931
  %933 = extractelement <4 x i32> %932, i32 0
  %934 = icmp eq i64 %851, %848
  br i1 %934, label %946, label %935

935:                                              ; preds = %925, %846
  %936 = phi i64 [ 0, %846 ], [ %851, %925 ]
  %937 = phi i32 [ 1, %846 ], [ %933, %925 ]
  br label %938

938:                                              ; preds = %935, %938
  %939 = phi i64 [ %944, %938 ], [ %936, %935 ]
  %940 = phi i32 [ %943, %938 ], [ %937, %935 ]
  %941 = getelementptr inbounds i32, i32* %847, i64 %939
  %942 = load i32, i32* %941, align 4
  %943 = mul nsw i32 %942, %940
  %944 = add nuw nsw i64 %939, 1
  %945 = icmp eq i64 %944, %848
  br i1 %945, label %946, label %938, !llvm.loop !46

946:                                              ; preds = %938, %925, %843
  %947 = phi i32 [ 1, %843 ], [ %933, %925 ], [ %943, %938 ]
  %948 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 0
  %949 = load i32, i32* %948, align 4
  %950 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 1
  %951 = load i32, i32* %950, align 4
  %952 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 1
  %953 = load i32, i32* %952, align 4
  %954 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 1
  %955 = load i32, i32* %954, align 4
  br i1 %64, label %960, label %956

956:                                              ; preds = %946
  %957 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %958 = bitcast %union.TfLitePtrUnion* %957 to i16**
  %959 = load i16*, i16** %958, align 8
  br label %960

960:                                              ; preds = %946, %956
  %961 = phi i16* [ %959, %956 ], [ null, %946 ]
  %962 = icmp sgt i32 %947, 0
  br i1 %962, label %963, label %1542

963:                                              ; preds = %960
  %964 = icmp sgt i32 %951, 0
  %965 = sub nsw i32 0, %951
  %966 = select i1 %964, i32 0, i32 %965
  %967 = shl i32 1, %951
  %968 = select i1 %964, i32 %967, i32 1
  %969 = sext i32 %949 to i64
  %970 = icmp eq i32 %949, -2147483648
  %971 = zext i32 %966 to i64
  %972 = shl nsw i64 -1, %971
  %973 = trunc i64 %972 to i32
  %974 = xor i32 %973, -1
  %975 = ashr i32 %974, 1
  %976 = zext i32 %947 to i64
  br label %977

977:                                              ; preds = %996, %963
  %978 = phi i64 [ 0, %963 ], [ %1012, %996 ]
  %979 = getelementptr inbounds i16, i16* %837, i64 %978
  %980 = load i16, i16* %979, align 2
  %981 = sext i16 %980 to i32
  %982 = sub nsw i32 %981, %953
  %983 = mul nsw i32 %982, %968
  %984 = icmp eq i32 %983, %949
  br i1 %984, label %987, label %985

985:                                              ; preds = %977
  %986 = sext i32 %983 to i64
  br label %988

987:                                              ; preds = %977
  br i1 %970, label %996, label %988

988:                                              ; preds = %987, %985
  %989 = phi i64 [ %986, %985 ], [ %969, %987 ]
  %990 = mul nsw i64 %989, %969
  %991 = icmp sgt i64 %990, -1
  %992 = select i1 %991, i64 1073741824, i64 -1073741823
  %993 = add nsw i64 %992, %990
  %994 = sdiv i64 %993, 2147483648
  %995 = trunc i64 %994 to i32
  br label %996

996:                                              ; preds = %988, %987
  %997 = phi i32 [ %995, %988 ], [ 2147483647, %987 ]
  %998 = and i32 %997, %974
  %999 = lshr i32 %997, 31
  %1000 = add nsw i32 %999, %975
  %1001 = ashr i32 %997, %966
  %1002 = icmp sgt i32 %998, %1000
  %1003 = zext i1 %1002 to i32
  %1004 = add i32 %1001, %955
  %1005 = add i32 %1004, %1003
  %1006 = icmp slt i32 %1005, 32767
  %1007 = select i1 %1006, i32 %1005, i32 32767
  %1008 = icmp sgt i32 %1007, -32768
  %1009 = select i1 %1008, i32 %1007, i32 -32768
  %1010 = trunc i32 %1009 to i16
  %1011 = getelementptr inbounds i16, i16* %961, i64 %978
  store i16 %1010, i16* %1011, align 2
  %1012 = add nuw nsw i64 %978, 1
  %1013 = icmp eq i64 %1012, %976
  br i1 %1013, label %1542, label %977

1014:                                             ; preds = %645
  %1015 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1016 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1015, align 8
  %1017 = tail call i8* @TfLiteTypeGetName(i32 7) #9
  %1018 = tail call i8* @TfLiteTypeGetName(i32 %647) #9
  tail call void (%struct.TfLiteContext*, i8*, ...) %1016(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.21, i64 0, i64 0), i8* %1017, i8* %1018) #9
  br label %1542

1019:                                             ; preds = %92
  %1020 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %1021 = icmp sgt i32 %62, 5
  br i1 %1021, label %1022, label %1025

1022:                                             ; preds = %1019
  %1023 = getelementptr inbounds %union.anon, %union.anon* %1020, i64 0, i32 0
  %1024 = load i32*, i32** %1023, align 8
  br label %1028

1025:                                             ; preds = %1019
  %1026 = bitcast %union.anon* %1020 to i32*
  %1027 = icmp sgt i32 %62, 0
  br i1 %1027, label %1028, label %1128

1028:                                             ; preds = %1025, %1022
  %1029 = phi i32* [ %1024, %1022 ], [ %1026, %1025 ]
  %1030 = zext i32 %62 to i64
  %1031 = icmp ult i32 %62, 8
  br i1 %1031, label %1117, label %1032

1032:                                             ; preds = %1028
  %1033 = and i64 %1030, 4294967288
  %1034 = add nsw i64 %1033, -8
  %1035 = lshr exact i64 %1034, 3
  %1036 = add nuw nsw i64 %1035, 1
  %1037 = and i64 %1036, 3
  %1038 = icmp ult i64 %1034, 24
  br i1 %1038, label %1084, label %1039

1039:                                             ; preds = %1032
  %1040 = sub nsw i64 %1036, %1037
  br label %1041

1041:                                             ; preds = %1041, %1039
  %1042 = phi i64 [ 0, %1039 ], [ %1081, %1041 ]
  %1043 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1039 ], [ %1079, %1041 ]
  %1044 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1039 ], [ %1080, %1041 ]
  %1045 = phi i64 [ %1040, %1039 ], [ %1082, %1041 ]
  %1046 = getelementptr inbounds i32, i32* %1029, i64 %1042
  %1047 = bitcast i32* %1046 to <4 x i32>*
  %1048 = load <4 x i32>, <4 x i32>* %1047, align 4
  %1049 = getelementptr inbounds i32, i32* %1046, i64 4
  %1050 = bitcast i32* %1049 to <4 x i32>*
  %1051 = load <4 x i32>, <4 x i32>* %1050, align 4
  %1052 = mul nsw <4 x i32> %1048, %1043
  %1053 = mul nsw <4 x i32> %1051, %1044
  %1054 = or i64 %1042, 8
  %1055 = getelementptr inbounds i32, i32* %1029, i64 %1054
  %1056 = bitcast i32* %1055 to <4 x i32>*
  %1057 = load <4 x i32>, <4 x i32>* %1056, align 4
  %1058 = getelementptr inbounds i32, i32* %1055, i64 4
  %1059 = bitcast i32* %1058 to <4 x i32>*
  %1060 = load <4 x i32>, <4 x i32>* %1059, align 4
  %1061 = mul nsw <4 x i32> %1057, %1052
  %1062 = mul nsw <4 x i32> %1060, %1053
  %1063 = or i64 %1042, 16
  %1064 = getelementptr inbounds i32, i32* %1029, i64 %1063
  %1065 = bitcast i32* %1064 to <4 x i32>*
  %1066 = load <4 x i32>, <4 x i32>* %1065, align 4
  %1067 = getelementptr inbounds i32, i32* %1064, i64 4
  %1068 = bitcast i32* %1067 to <4 x i32>*
  %1069 = load <4 x i32>, <4 x i32>* %1068, align 4
  %1070 = mul nsw <4 x i32> %1066, %1061
  %1071 = mul nsw <4 x i32> %1069, %1062
  %1072 = or i64 %1042, 24
  %1073 = getelementptr inbounds i32, i32* %1029, i64 %1072
  %1074 = bitcast i32* %1073 to <4 x i32>*
  %1075 = load <4 x i32>, <4 x i32>* %1074, align 4
  %1076 = getelementptr inbounds i32, i32* %1073, i64 4
  %1077 = bitcast i32* %1076 to <4 x i32>*
  %1078 = load <4 x i32>, <4 x i32>* %1077, align 4
  %1079 = mul nsw <4 x i32> %1075, %1070
  %1080 = mul nsw <4 x i32> %1078, %1071
  %1081 = add i64 %1042, 32
  %1082 = add i64 %1045, -4
  %1083 = icmp eq i64 %1082, 0
  br i1 %1083, label %1084, label %1041, !llvm.loop !47

1084:                                             ; preds = %1041, %1032
  %1085 = phi <4 x i32> [ undef, %1032 ], [ %1079, %1041 ]
  %1086 = phi <4 x i32> [ undef, %1032 ], [ %1080, %1041 ]
  %1087 = phi i64 [ 0, %1032 ], [ %1081, %1041 ]
  %1088 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1032 ], [ %1079, %1041 ]
  %1089 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1032 ], [ %1080, %1041 ]
  %1090 = icmp eq i64 %1037, 0
  br i1 %1090, label %1107, label %1091

1091:                                             ; preds = %1084, %1091
  %1092 = phi i64 [ %1104, %1091 ], [ %1087, %1084 ]
  %1093 = phi <4 x i32> [ %1102, %1091 ], [ %1088, %1084 ]
  %1094 = phi <4 x i32> [ %1103, %1091 ], [ %1089, %1084 ]
  %1095 = phi i64 [ %1105, %1091 ], [ %1037, %1084 ]
  %1096 = getelementptr inbounds i32, i32* %1029, i64 %1092
  %1097 = bitcast i32* %1096 to <4 x i32>*
  %1098 = load <4 x i32>, <4 x i32>* %1097, align 4
  %1099 = getelementptr inbounds i32, i32* %1096, i64 4
  %1100 = bitcast i32* %1099 to <4 x i32>*
  %1101 = load <4 x i32>, <4 x i32>* %1100, align 4
  %1102 = mul nsw <4 x i32> %1098, %1093
  %1103 = mul nsw <4 x i32> %1101, %1094
  %1104 = add i64 %1092, 8
  %1105 = add i64 %1095, -1
  %1106 = icmp eq i64 %1105, 0
  br i1 %1106, label %1107, label %1091, !llvm.loop !48

1107:                                             ; preds = %1091, %1084
  %1108 = phi <4 x i32> [ %1085, %1084 ], [ %1102, %1091 ]
  %1109 = phi <4 x i32> [ %1086, %1084 ], [ %1103, %1091 ]
  %1110 = mul <4 x i32> %1109, %1108
  %1111 = shufflevector <4 x i32> %1110, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1112 = mul <4 x i32> %1110, %1111
  %1113 = shufflevector <4 x i32> %1112, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1114 = mul <4 x i32> %1112, %1113
  %1115 = extractelement <4 x i32> %1114, i32 0
  %1116 = icmp eq i64 %1033, %1030
  br i1 %1116, label %1128, label %1117

1117:                                             ; preds = %1107, %1028
  %1118 = phi i64 [ 0, %1028 ], [ %1033, %1107 ]
  %1119 = phi i32 [ 1, %1028 ], [ %1115, %1107 ]
  br label %1120

1120:                                             ; preds = %1117, %1120
  %1121 = phi i64 [ %1126, %1120 ], [ %1118, %1117 ]
  %1122 = phi i32 [ %1125, %1120 ], [ %1119, %1117 ]
  %1123 = getelementptr inbounds i32, i32* %1029, i64 %1121
  %1124 = load i32, i32* %1123, align 4
  %1125 = mul nsw i32 %1124, %1122
  %1126 = add nuw nsw i64 %1121, 1
  %1127 = icmp eq i64 %1126, %1030
  br i1 %1127, label %1128, label %1120, !llvm.loop !49

1128:                                             ; preds = %1120, %1107, %1025
  %1129 = phi i32 [ 1, %1025 ], [ %1115, %1107 ], [ %1125, %1120 ]
  br i1 %33, label %1134, label %1130

1130:                                             ; preds = %1128
  %1131 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1
  %1132 = bitcast %union.TfLitePtrUnion* %1131 to i8**
  %1133 = load i8*, i8** %1132, align 8
  br label %1134

1134:                                             ; preds = %1128, %1130
  %1135 = phi i8* [ %1133, %1130 ], [ null, %1128 ]
  %1136 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 0
  %1137 = load i32, i32* %1136, align 8
  switch i32 %1137, label %1272 [
    i32 9, label %1138
    i32 3, label %1205
  ]

1138:                                             ; preds = %1134
  %1139 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 0
  %1140 = load i32, i32* %1139, align 4
  %1141 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 1
  %1142 = load i32, i32* %1141, align 4
  %1143 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 1
  %1144 = load i32, i32* %1143, align 4
  %1145 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 1
  %1146 = load i32, i32* %1145, align 4
  br i1 %64, label %1151, label %1147

1147:                                             ; preds = %1138
  %1148 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %1149 = bitcast %union.TfLitePtrUnion* %1148 to i8**
  %1150 = load i8*, i8** %1149, align 8
  br label %1151

1151:                                             ; preds = %1138, %1147
  %1152 = phi i8* [ %1150, %1147 ], [ null, %1138 ]
  %1153 = icmp sgt i32 %1129, 0
  br i1 %1153, label %1154, label %1542

1154:                                             ; preds = %1151
  %1155 = icmp sgt i32 %1142, 0
  %1156 = sub nsw i32 0, %1142
  %1157 = select i1 %1155, i32 0, i32 %1156
  %1158 = shl i32 1, %1142
  %1159 = select i1 %1155, i32 %1158, i32 1
  %1160 = sext i32 %1140 to i64
  %1161 = icmp eq i32 %1140, -2147483648
  %1162 = zext i32 %1157 to i64
  %1163 = shl nsw i64 -1, %1162
  %1164 = trunc i64 %1163 to i32
  %1165 = xor i32 %1164, -1
  %1166 = ashr i32 %1165, 1
  %1167 = zext i32 %1129 to i64
  br label %1168

1168:                                             ; preds = %1187, %1154
  %1169 = phi i64 [ 0, %1154 ], [ %1203, %1187 ]
  %1170 = getelementptr inbounds i8, i8* %1135, i64 %1169
  %1171 = load i8, i8* %1170, align 1
  %1172 = sext i8 %1171 to i32
  %1173 = sub nsw i32 %1172, %1144
  %1174 = mul nsw i32 %1173, %1159
  %1175 = icmp eq i32 %1174, %1140
  br i1 %1175, label %1178, label %1176

1176:                                             ; preds = %1168
  %1177 = sext i32 %1174 to i64
  br label %1179

1178:                                             ; preds = %1168
  br i1 %1161, label %1187, label %1179

1179:                                             ; preds = %1178, %1176
  %1180 = phi i64 [ %1177, %1176 ], [ %1160, %1178 ]
  %1181 = mul nsw i64 %1180, %1160
  %1182 = icmp sgt i64 %1181, -1
  %1183 = select i1 %1182, i64 1073741824, i64 -1073741823
  %1184 = add nsw i64 %1183, %1181
  %1185 = sdiv i64 %1184, 2147483648
  %1186 = trunc i64 %1185 to i32
  br label %1187

1187:                                             ; preds = %1179, %1178
  %1188 = phi i32 [ %1186, %1179 ], [ 2147483647, %1178 ]
  %1189 = and i32 %1188, %1165
  %1190 = lshr i32 %1188, 31
  %1191 = add nsw i32 %1190, %1166
  %1192 = ashr i32 %1188, %1157
  %1193 = icmp sgt i32 %1189, %1191
  %1194 = zext i1 %1193 to i32
  %1195 = add i32 %1192, %1146
  %1196 = add i32 %1195, %1194
  %1197 = icmp slt i32 %1196, 127
  %1198 = select i1 %1197, i32 %1196, i32 127
  %1199 = icmp sgt i32 %1198, -128
  %1200 = select i1 %1199, i32 %1198, i32 -128
  %1201 = trunc i32 %1200 to i8
  %1202 = getelementptr inbounds i8, i8* %1152, i64 %1169
  store i8 %1201, i8* %1202, align 1
  %1203 = add nuw nsw i64 %1169, 1
  %1204 = icmp eq i64 %1203, %1167
  br i1 %1204, label %1542, label %1168

1205:                                             ; preds = %1134
  %1206 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 0
  %1207 = load i32, i32* %1206, align 4
  %1208 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 1
  %1209 = load i32, i32* %1208, align 4
  %1210 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 1
  %1211 = load i32, i32* %1210, align 4
  %1212 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 1
  %1213 = load i32, i32* %1212, align 4
  br i1 %64, label %1218, label %1214

1214:                                             ; preds = %1205
  %1215 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %1216 = bitcast %union.TfLitePtrUnion* %1215 to i8**
  %1217 = load i8*, i8** %1216, align 8
  br label %1218

1218:                                             ; preds = %1205, %1214
  %1219 = phi i8* [ %1217, %1214 ], [ null, %1205 ]
  %1220 = icmp sgt i32 %1129, 0
  br i1 %1220, label %1221, label %1542

1221:                                             ; preds = %1218
  %1222 = icmp sgt i32 %1209, 0
  %1223 = sub nsw i32 0, %1209
  %1224 = select i1 %1222, i32 0, i32 %1223
  %1225 = shl i32 1, %1209
  %1226 = select i1 %1222, i32 %1225, i32 1
  %1227 = sext i32 %1207 to i64
  %1228 = icmp eq i32 %1207, -2147483648
  %1229 = zext i32 %1224 to i64
  %1230 = shl nsw i64 -1, %1229
  %1231 = trunc i64 %1230 to i32
  %1232 = xor i32 %1231, -1
  %1233 = ashr i32 %1232, 1
  %1234 = zext i32 %1129 to i64
  br label %1235

1235:                                             ; preds = %1254, %1221
  %1236 = phi i64 [ 0, %1221 ], [ %1270, %1254 ]
  %1237 = getelementptr inbounds i8, i8* %1135, i64 %1236
  %1238 = load i8, i8* %1237, align 1
  %1239 = sext i8 %1238 to i32
  %1240 = sub nsw i32 %1239, %1211
  %1241 = mul nsw i32 %1240, %1226
  %1242 = icmp eq i32 %1241, %1207
  br i1 %1242, label %1245, label %1243

1243:                                             ; preds = %1235
  %1244 = sext i32 %1241 to i64
  br label %1246

1245:                                             ; preds = %1235
  br i1 %1228, label %1254, label %1246

1246:                                             ; preds = %1245, %1243
  %1247 = phi i64 [ %1244, %1243 ], [ %1227, %1245 ]
  %1248 = mul nsw i64 %1247, %1227
  %1249 = icmp sgt i64 %1248, -1
  %1250 = select i1 %1249, i64 1073741824, i64 -1073741823
  %1251 = add nsw i64 %1250, %1248
  %1252 = sdiv i64 %1251, 2147483648
  %1253 = trunc i64 %1252 to i32
  br label %1254

1254:                                             ; preds = %1246, %1245
  %1255 = phi i32 [ %1253, %1246 ], [ 2147483647, %1245 ]
  %1256 = and i32 %1255, %1232
  %1257 = lshr i32 %1255, 31
  %1258 = add nsw i32 %1257, %1233
  %1259 = ashr i32 %1255, %1224
  %1260 = icmp sgt i32 %1256, %1258
  %1261 = zext i1 %1260 to i32
  %1262 = add i32 %1259, %1213
  %1263 = add i32 %1262, %1261
  %1264 = icmp slt i32 %1263, 255
  %1265 = select i1 %1264, i32 %1263, i32 255
  %1266 = icmp sgt i32 %1265, 0
  %1267 = select i1 %1266, i32 %1265, i32 0
  %1268 = trunc i32 %1267 to i8
  %1269 = getelementptr inbounds i8, i8* %1219, i64 %1236
  store i8 %1268, i8* %1269, align 1
  %1270 = add nuw nsw i64 %1236, 1
  %1271 = icmp eq i64 %1270, %1234
  br i1 %1271, label %1542, label %1235

1272:                                             ; preds = %1134
  %1273 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1274 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1273, align 8
  %1275 = tail call i8* @TfLiteTypeGetName(i32 9) #9
  %1276 = tail call i8* @TfLiteTypeGetName(i32 %1137) #9
  tail call void (%struct.TfLiteContext*, i8*, ...) %1274(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.21, i64 0, i64 0), i8* %1275, i8* %1276) #9
  br label %1542

1277:                                             ; preds = %92
  %1278 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %1279 = icmp sgt i32 %62, 5
  br i1 %1279, label %1280, label %1283

1280:                                             ; preds = %1277
  %1281 = getelementptr inbounds %union.anon, %union.anon* %1278, i64 0, i32 0
  %1282 = load i32*, i32** %1281, align 8
  br label %1286

1283:                                             ; preds = %1277
  %1284 = bitcast %union.anon* %1278 to i32*
  %1285 = icmp sgt i32 %62, 0
  br i1 %1285, label %1286, label %1386

1286:                                             ; preds = %1283, %1280
  %1287 = phi i32* [ %1282, %1280 ], [ %1284, %1283 ]
  %1288 = zext i32 %62 to i64
  %1289 = icmp ult i32 %62, 8
  br i1 %1289, label %1375, label %1290

1290:                                             ; preds = %1286
  %1291 = and i64 %1288, 4294967288
  %1292 = add nsw i64 %1291, -8
  %1293 = lshr exact i64 %1292, 3
  %1294 = add nuw nsw i64 %1293, 1
  %1295 = and i64 %1294, 3
  %1296 = icmp ult i64 %1292, 24
  br i1 %1296, label %1342, label %1297

1297:                                             ; preds = %1290
  %1298 = sub nsw i64 %1294, %1295
  br label %1299

1299:                                             ; preds = %1299, %1297
  %1300 = phi i64 [ 0, %1297 ], [ %1339, %1299 ]
  %1301 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1297 ], [ %1337, %1299 ]
  %1302 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1297 ], [ %1338, %1299 ]
  %1303 = phi i64 [ %1298, %1297 ], [ %1340, %1299 ]
  %1304 = getelementptr inbounds i32, i32* %1287, i64 %1300
  %1305 = bitcast i32* %1304 to <4 x i32>*
  %1306 = load <4 x i32>, <4 x i32>* %1305, align 4
  %1307 = getelementptr inbounds i32, i32* %1304, i64 4
  %1308 = bitcast i32* %1307 to <4 x i32>*
  %1309 = load <4 x i32>, <4 x i32>* %1308, align 4
  %1310 = mul nsw <4 x i32> %1306, %1301
  %1311 = mul nsw <4 x i32> %1309, %1302
  %1312 = or i64 %1300, 8
  %1313 = getelementptr inbounds i32, i32* %1287, i64 %1312
  %1314 = bitcast i32* %1313 to <4 x i32>*
  %1315 = load <4 x i32>, <4 x i32>* %1314, align 4
  %1316 = getelementptr inbounds i32, i32* %1313, i64 4
  %1317 = bitcast i32* %1316 to <4 x i32>*
  %1318 = load <4 x i32>, <4 x i32>* %1317, align 4
  %1319 = mul nsw <4 x i32> %1315, %1310
  %1320 = mul nsw <4 x i32> %1318, %1311
  %1321 = or i64 %1300, 16
  %1322 = getelementptr inbounds i32, i32* %1287, i64 %1321
  %1323 = bitcast i32* %1322 to <4 x i32>*
  %1324 = load <4 x i32>, <4 x i32>* %1323, align 4
  %1325 = getelementptr inbounds i32, i32* %1322, i64 4
  %1326 = bitcast i32* %1325 to <4 x i32>*
  %1327 = load <4 x i32>, <4 x i32>* %1326, align 4
  %1328 = mul nsw <4 x i32> %1324, %1319
  %1329 = mul nsw <4 x i32> %1327, %1320
  %1330 = or i64 %1300, 24
  %1331 = getelementptr inbounds i32, i32* %1287, i64 %1330
  %1332 = bitcast i32* %1331 to <4 x i32>*
  %1333 = load <4 x i32>, <4 x i32>* %1332, align 4
  %1334 = getelementptr inbounds i32, i32* %1331, i64 4
  %1335 = bitcast i32* %1334 to <4 x i32>*
  %1336 = load <4 x i32>, <4 x i32>* %1335, align 4
  %1337 = mul nsw <4 x i32> %1333, %1328
  %1338 = mul nsw <4 x i32> %1336, %1329
  %1339 = add i64 %1300, 32
  %1340 = add i64 %1303, -4
  %1341 = icmp eq i64 %1340, 0
  br i1 %1341, label %1342, label %1299, !llvm.loop !50

1342:                                             ; preds = %1299, %1290
  %1343 = phi <4 x i32> [ undef, %1290 ], [ %1337, %1299 ]
  %1344 = phi <4 x i32> [ undef, %1290 ], [ %1338, %1299 ]
  %1345 = phi i64 [ 0, %1290 ], [ %1339, %1299 ]
  %1346 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1290 ], [ %1337, %1299 ]
  %1347 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1290 ], [ %1338, %1299 ]
  %1348 = icmp eq i64 %1295, 0
  br i1 %1348, label %1365, label %1349

1349:                                             ; preds = %1342, %1349
  %1350 = phi i64 [ %1362, %1349 ], [ %1345, %1342 ]
  %1351 = phi <4 x i32> [ %1360, %1349 ], [ %1346, %1342 ]
  %1352 = phi <4 x i32> [ %1361, %1349 ], [ %1347, %1342 ]
  %1353 = phi i64 [ %1363, %1349 ], [ %1295, %1342 ]
  %1354 = getelementptr inbounds i32, i32* %1287, i64 %1350
  %1355 = bitcast i32* %1354 to <4 x i32>*
  %1356 = load <4 x i32>, <4 x i32>* %1355, align 4
  %1357 = getelementptr inbounds i32, i32* %1354, i64 4
  %1358 = bitcast i32* %1357 to <4 x i32>*
  %1359 = load <4 x i32>, <4 x i32>* %1358, align 4
  %1360 = mul nsw <4 x i32> %1356, %1351
  %1361 = mul nsw <4 x i32> %1359, %1352
  %1362 = add i64 %1350, 8
  %1363 = add i64 %1353, -1
  %1364 = icmp eq i64 %1363, 0
  br i1 %1364, label %1365, label %1349, !llvm.loop !51

1365:                                             ; preds = %1349, %1342
  %1366 = phi <4 x i32> [ %1343, %1342 ], [ %1360, %1349 ]
  %1367 = phi <4 x i32> [ %1344, %1342 ], [ %1361, %1349 ]
  %1368 = mul <4 x i32> %1367, %1366
  %1369 = shufflevector <4 x i32> %1368, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1370 = mul <4 x i32> %1368, %1369
  %1371 = shufflevector <4 x i32> %1370, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1372 = mul <4 x i32> %1370, %1371
  %1373 = extractelement <4 x i32> %1372, i32 0
  %1374 = icmp eq i64 %1291, %1288
  br i1 %1374, label %1386, label %1375

1375:                                             ; preds = %1365, %1286
  %1376 = phi i64 [ 0, %1286 ], [ %1291, %1365 ]
  %1377 = phi i32 [ 1, %1286 ], [ %1373, %1365 ]
  br label %1378

1378:                                             ; preds = %1375, %1378
  %1379 = phi i64 [ %1384, %1378 ], [ %1376, %1375 ]
  %1380 = phi i32 [ %1383, %1378 ], [ %1377, %1375 ]
  %1381 = getelementptr inbounds i32, i32* %1287, i64 %1379
  %1382 = load i32, i32* %1381, align 4
  %1383 = mul nsw i32 %1382, %1380
  %1384 = add nuw nsw i64 %1379, 1
  %1385 = icmp eq i64 %1384, %1288
  br i1 %1385, label %1386, label %1378, !llvm.loop !52

1386:                                             ; preds = %1378, %1365, %1283
  %1387 = phi i32 [ 1, %1283 ], [ %1373, %1365 ], [ %1383, %1378 ]
  br i1 %33, label %1392, label %1388

1388:                                             ; preds = %1386
  %1389 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1
  %1390 = bitcast %union.TfLitePtrUnion* %1389 to i8**
  %1391 = load i8*, i8** %1390, align 8
  br label %1392

1392:                                             ; preds = %1386, %1388
  %1393 = phi i8* [ %1391, %1388 ], [ null, %1386 ]
  %1394 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 0
  %1395 = load i32, i32* %1394, align 8
  switch i32 %1395, label %1530 [
    i32 9, label %1396
    i32 3, label %1463
  ]

1396:                                             ; preds = %1392
  %1397 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 0
  %1398 = load i32, i32* %1397, align 4
  %1399 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 1
  %1400 = load i32, i32* %1399, align 4
  %1401 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 1
  %1402 = load i32, i32* %1401, align 4
  %1403 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 1
  %1404 = load i32, i32* %1403, align 4
  br i1 %64, label %1409, label %1405

1405:                                             ; preds = %1396
  %1406 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %1407 = bitcast %union.TfLitePtrUnion* %1406 to i8**
  %1408 = load i8*, i8** %1407, align 8
  br label %1409

1409:                                             ; preds = %1396, %1405
  %1410 = phi i8* [ %1408, %1405 ], [ null, %1396 ]
  %1411 = icmp sgt i32 %1387, 0
  br i1 %1411, label %1412, label %1542

1412:                                             ; preds = %1409
  %1413 = icmp sgt i32 %1400, 0
  %1414 = sub nsw i32 0, %1400
  %1415 = select i1 %1413, i32 0, i32 %1414
  %1416 = shl i32 1, %1400
  %1417 = select i1 %1413, i32 %1416, i32 1
  %1418 = sext i32 %1398 to i64
  %1419 = icmp eq i32 %1398, -2147483648
  %1420 = zext i32 %1415 to i64
  %1421 = shl nsw i64 -1, %1420
  %1422 = trunc i64 %1421 to i32
  %1423 = xor i32 %1422, -1
  %1424 = ashr i32 %1423, 1
  %1425 = zext i32 %1387 to i64
  br label %1426

1426:                                             ; preds = %1445, %1412
  %1427 = phi i64 [ 0, %1412 ], [ %1461, %1445 ]
  %1428 = getelementptr inbounds i8, i8* %1393, i64 %1427
  %1429 = load i8, i8* %1428, align 1
  %1430 = zext i8 %1429 to i32
  %1431 = sub nsw i32 %1430, %1402
  %1432 = mul nsw i32 %1431, %1417
  %1433 = icmp eq i32 %1432, %1398
  br i1 %1433, label %1436, label %1434

1434:                                             ; preds = %1426
  %1435 = sext i32 %1432 to i64
  br label %1437

1436:                                             ; preds = %1426
  br i1 %1419, label %1445, label %1437

1437:                                             ; preds = %1436, %1434
  %1438 = phi i64 [ %1435, %1434 ], [ %1418, %1436 ]
  %1439 = mul nsw i64 %1438, %1418
  %1440 = icmp sgt i64 %1439, -1
  %1441 = select i1 %1440, i64 1073741824, i64 -1073741823
  %1442 = add nsw i64 %1441, %1439
  %1443 = sdiv i64 %1442, 2147483648
  %1444 = trunc i64 %1443 to i32
  br label %1445

1445:                                             ; preds = %1437, %1436
  %1446 = phi i32 [ %1444, %1437 ], [ 2147483647, %1436 ]
  %1447 = and i32 %1446, %1423
  %1448 = lshr i32 %1446, 31
  %1449 = add nsw i32 %1448, %1424
  %1450 = ashr i32 %1446, %1415
  %1451 = icmp sgt i32 %1447, %1449
  %1452 = zext i1 %1451 to i32
  %1453 = add i32 %1450, %1404
  %1454 = add i32 %1453, %1452
  %1455 = icmp slt i32 %1454, 127
  %1456 = select i1 %1455, i32 %1454, i32 127
  %1457 = icmp sgt i32 %1456, -128
  %1458 = select i1 %1457, i32 %1456, i32 -128
  %1459 = trunc i32 %1458 to i8
  %1460 = getelementptr inbounds i8, i8* %1410, i64 %1427
  store i8 %1459, i8* %1460, align 1
  %1461 = add nuw nsw i64 %1427, 1
  %1462 = icmp eq i64 %1461, %1425
  br i1 %1462, label %1542, label %1426

1463:                                             ; preds = %1392
  %1464 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 0
  %1465 = load i32, i32* %1464, align 4
  %1466 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 1
  %1467 = load i32, i32* %1466, align 4
  %1468 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 1
  %1469 = load i32, i32* %1468, align 4
  %1470 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 1
  %1471 = load i32, i32* %1470, align 4
  br i1 %64, label %1476, label %1472

1472:                                             ; preds = %1463
  %1473 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %1474 = bitcast %union.TfLitePtrUnion* %1473 to i8**
  %1475 = load i8*, i8** %1474, align 8
  br label %1476

1476:                                             ; preds = %1463, %1472
  %1477 = phi i8* [ %1475, %1472 ], [ null, %1463 ]
  %1478 = icmp sgt i32 %1387, 0
  br i1 %1478, label %1479, label %1542

1479:                                             ; preds = %1476
  %1480 = icmp sgt i32 %1467, 0
  %1481 = sub nsw i32 0, %1467
  %1482 = select i1 %1480, i32 0, i32 %1481
  %1483 = shl i32 1, %1467
  %1484 = select i1 %1480, i32 %1483, i32 1
  %1485 = sext i32 %1465 to i64
  %1486 = icmp eq i32 %1465, -2147483648
  %1487 = zext i32 %1482 to i64
  %1488 = shl nsw i64 -1, %1487
  %1489 = trunc i64 %1488 to i32
  %1490 = xor i32 %1489, -1
  %1491 = ashr i32 %1490, 1
  %1492 = zext i32 %1387 to i64
  br label %1493

1493:                                             ; preds = %1512, %1479
  %1494 = phi i64 [ 0, %1479 ], [ %1528, %1512 ]
  %1495 = getelementptr inbounds i8, i8* %1393, i64 %1494
  %1496 = load i8, i8* %1495, align 1
  %1497 = zext i8 %1496 to i32
  %1498 = sub nsw i32 %1497, %1469
  %1499 = mul nsw i32 %1498, %1484
  %1500 = icmp eq i32 %1499, %1465
  br i1 %1500, label %1503, label %1501

1501:                                             ; preds = %1493
  %1502 = sext i32 %1499 to i64
  br label %1504

1503:                                             ; preds = %1493
  br i1 %1486, label %1512, label %1504

1504:                                             ; preds = %1503, %1501
  %1505 = phi i64 [ %1502, %1501 ], [ %1485, %1503 ]
  %1506 = mul nsw i64 %1505, %1485
  %1507 = icmp sgt i64 %1506, -1
  %1508 = select i1 %1507, i64 1073741824, i64 -1073741823
  %1509 = add nsw i64 %1508, %1506
  %1510 = sdiv i64 %1509, 2147483648
  %1511 = trunc i64 %1510 to i32
  br label %1512

1512:                                             ; preds = %1504, %1503
  %1513 = phi i32 [ %1511, %1504 ], [ 2147483647, %1503 ]
  %1514 = and i32 %1513, %1490
  %1515 = lshr i32 %1513, 31
  %1516 = add nsw i32 %1515, %1491
  %1517 = ashr i32 %1513, %1482
  %1518 = icmp sgt i32 %1514, %1516
  %1519 = zext i1 %1518 to i32
  %1520 = add i32 %1517, %1471
  %1521 = add i32 %1520, %1519
  %1522 = icmp slt i32 %1521, 255
  %1523 = select i1 %1522, i32 %1521, i32 255
  %1524 = icmp sgt i32 %1523, 0
  %1525 = select i1 %1524, i32 %1523, i32 0
  %1526 = trunc i32 %1525 to i8
  %1527 = getelementptr inbounds i8, i8* %1477, i64 %1494
  store i8 %1526, i8* %1527, align 1
  %1528 = add nuw nsw i64 %1494, 1
  %1529 = icmp eq i64 %1528, %1492
  br i1 %1529, label %1542, label %1493

1530:                                             ; preds = %1392
  %1531 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1532 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1531, align 8
  %1533 = tail call i8* @TfLiteTypeGetName(i32 3) #9
  %1534 = tail call i8* @TfLiteTypeGetName(i32 %1395) #9
  tail call void (%struct.TfLiteContext*, i8*, ...) %1532(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.21, i64 0, i64 0), i8* %1533, i8* %1534) #9
  br label %1542

1535:                                             ; preds = %92
  %1536 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 0
  %1537 = load i32, i32* %1536, align 8
  %1538 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1539 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1538, align 8
  %1540 = tail call i8* @TfLiteTypeGetName(i32 %95) #9
  %1541 = tail call i8* @TfLiteTypeGetName(i32 %1537) #9
  tail call void (%struct.TfLiteContext*, i8*, ...) %1539(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.21, i64 0, i64 0), i8* %1540, i8* %1541) #9
  br label %1542

1542:                                             ; preds = %1512, %1445, %1254, %1187, %996, %813, %623, %445, %270, %619, %441, %266, %1476, %1409, %1218, %1151, %960, %777, %640, %227, %402, %579, %1530, %1272, %1535, %1014
  %1543 = phi i32 [ 1, %1535 ], [ 1, %1014 ], [ 1, %1272 ], [ 1, %1530 ], [ 1, %640 ], [ 0, %227 ], [ 0, %402 ], [ 0, %579 ], [ 0, %777 ], [ 0, %960 ], [ 0, %1151 ], [ 0, %1218 ], [ 0, %1409 ], [ 0, %1476 ], [ 0, %266 ], [ 0, %441 ], [ 0, %619 ], [ 0, %270 ], [ 0, %445 ], [ 0, %623 ], [ 0, %813 ], [ 0, %996 ], [ 0, %1187 ], [ 0, %1254 ], [ 0, %1445 ], [ 0, %1512 ]
  %1544 = icmp sgt i32 %93, 5
  br i1 %1544, label %1545, label %1551

1545:                                             ; preds = %1542
  %1546 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %1547 = load i32*, i32** %1546, align 8
  %1548 = icmp eq i32* %1547, null
  br i1 %1548, label %1551, label %1549

1549:                                             ; preds = %1545
  %1550 = bitcast i32* %1547 to i8*
  tail call void @_ZdaPv(i8* %1550) #8
  br label %1551

1551:                                             ; preds = %1542, %1545, %1549
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %63) #9
  %1552 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %1553 = load i32, i32* %1552, align 8
  %1554 = icmp sgt i32 %1553, 5
  br i1 %1554, label %1555, label %1561

1555:                                             ; preds = %1551
  %1556 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %1557 = load i32*, i32** %1556, align 8
  %1558 = icmp eq i32* %1557, null
  br i1 %1558, label %1561, label %1559

1559:                                             ; preds = %1555
  %1560 = bitcast i32* %1557 to i8*
  tail call void @_ZdaPv(i8* %1560) #8
  br label %1561

1561:                                             ; preds = %1551, %1555, %1559
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %32) #9
  ret i32 %1543
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin21Register_QUANTIZE_REFEv() local_unnamed_addr #6 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin21Register_QUANTIZE_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin8quantize4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #2 comdat {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %6 = bitcast i8** %5 to %"struct.tflite::ops::builtin::quantize::OpData"**
  %7 = load %"struct.tflite::ops::builtin::quantize::OpData"*, %"struct.tflite::ops::builtin::quantize::OpData"** %6, align 8
  %8 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %9 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %8, align 8
  %10 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %9, i64 0, i32 1, i64 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %15 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %14, align 8
  %16 = sext i32 %11 to i64
  %17 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %15, i64 %16
  br label %18

18:                                               ; preds = %2, %13
  %19 = phi %struct.TfLiteTensor* [ %17, %13 ], [ null, %2 ]
  %20 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %21 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %20, align 8
  %22 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %21, i64 0, i32 1, i64 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %27 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %26, align 8
  %28 = sext i32 %23 to i64
  %29 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %27, i64 %28
  br label %30

30:                                               ; preds = %18, %25
  %31 = phi %struct.TfLiteTensor* [ %29, %25 ], [ null, %18 ]
  %32 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %32) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 32, i1 false)
  %33 = icmp eq %struct.TfLiteTensor* %19, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %35, align 8, !alias.scope !53
  br label %61

36:                                               ; preds = %30
  %37 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 2
  %38 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %37, align 8, !noalias !53
  %39 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %38, i64 0, i32 0
  %40 = load i32, i32* %39, align 4, !noalias !53
  %41 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %38, i64 0, i32 1, i64 0
  %42 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %40, i32* %42, align 8, !alias.scope !53
  %43 = icmp sgt i32 %40, 5
  br i1 %43, label %44, label %51

44:                                               ; preds = %36
  %45 = sext i32 %40 to i64
  %46 = shl nsw i64 %45, 2
  %47 = tail call i8* @_Znam(i64 %46) #8, !noalias !53
  %48 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %49 = bitcast i32** %48 to i8**
  store i8* %47, i8** %49, align 8, !alias.scope !53
  %50 = bitcast i8* %47 to i32*
  br label %56

51:                                               ; preds = %36
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %53 = bitcast %union.anon* %52 to i32*
  %54 = sext i32 %40 to i64
  %55 = shl nsw i64 %54, 2
  br label %56

56:                                               ; preds = %51, %44
  %57 = phi i64 [ %46, %44 ], [ %55, %51 ]
  %58 = phi i32* [ %50, %44 ], [ %53, %51 ]
  %59 = bitcast i32* %58 to i8*
  %60 = bitcast i32* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %60, i64 %57, i1 false) #9
  br label %61

61:                                               ; preds = %34, %56
  %62 = phi i32 [ 0, %34 ], [ %40, %56 ]
  %63 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %63) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %63, i8 -86, i64 32, i1 false)
  %64 = icmp eq %struct.TfLiteTensor* %31, null
  br i1 %64, label %65, label %67

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %66, align 8, !alias.scope !56
  br label %92

67:                                               ; preds = %61
  %68 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 2
  %69 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %68, align 8, !noalias !56
  %70 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %69, i64 0, i32 0
  %71 = load i32, i32* %70, align 4, !noalias !56
  %72 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %69, i64 0, i32 1, i64 0
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %71, i32* %73, align 8, !alias.scope !56
  %74 = icmp sgt i32 %71, 5
  br i1 %74, label %75, label %82

75:                                               ; preds = %67
  %76 = sext i32 %71 to i64
  %77 = shl nsw i64 %76, 2
  %78 = tail call i8* @_Znam(i64 %77) #8, !noalias !56
  %79 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %80 = bitcast i32** %79 to i8**
  store i8* %78, i8** %80, align 8, !alias.scope !56
  %81 = bitcast i8* %78 to i32*
  br label %87

82:                                               ; preds = %67
  %83 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %84 = bitcast %union.anon* %83 to i32*
  %85 = sext i32 %71 to i64
  %86 = shl nsw i64 %85, 2
  br label %87

87:                                               ; preds = %82, %75
  %88 = phi i64 [ %77, %75 ], [ %86, %82 ]
  %89 = phi i32* [ %81, %75 ], [ %84, %82 ]
  %90 = bitcast i32* %89 to i8*
  %91 = bitcast i32* %72 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %90, i8* align 4 %91, i64 %88, i1 false) #9
  br label %92

92:                                               ; preds = %65, %87
  %93 = phi i32 [ 0, %65 ], [ %71, %87 ]
  %94 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 0
  %95 = load i32, i32* %94, align 8
  switch i32 %95, label %1762 [
    i32 1, label %96
    i32 7, label %638
    i32 9, label %1012
    i32 3, label %1387
  ]

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 1
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 0
  %100 = load float, float* %99, align 8
  br i1 %33, label %106, label %101

101:                                              ; preds = %96
  %102 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1
  %103 = bitcast %union.TfLitePtrUnion* %102 to float**
  %104 = load float*, float** %103, align 8
  %105 = bitcast float* %104 to i8*
  br label %106

106:                                              ; preds = %96, %101
  %107 = phi i8* [ %105, %101 ], [ null, %96 ]
  %108 = phi float* [ %104, %101 ], [ null, %96 ]
  %109 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 0
  %110 = load i32, i32* %109, align 8
  switch i32 %110, label %633 [
    i32 9, label %111
    i32 3, label %284
    i32 7, label %457
  ]

111:                                              ; preds = %106
  br i1 %64, label %116, label %112

112:                                              ; preds = %111
  %113 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %114 = bitcast %union.TfLitePtrUnion* %113 to i8**
  %115 = load i8*, i8** %114, align 8
  br label %116

116:                                              ; preds = %111, %112
  %117 = phi i8* [ %115, %112 ], [ null, %111 ]
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %119 = icmp sgt i32 %62, 5
  br i1 %119, label %120, label %123

120:                                              ; preds = %116
  %121 = getelementptr inbounds %union.anon, %union.anon* %118, i64 0, i32 0
  %122 = load i32*, i32** %121, align 8
  br label %126

123:                                              ; preds = %116
  %124 = bitcast %union.anon* %118 to i32*
  %125 = icmp sgt i32 %62, 0
  br i1 %125, label %126, label %229

126:                                              ; preds = %123, %120
  %127 = phi i32* [ %122, %120 ], [ %124, %123 ]
  %128 = zext i32 %62 to i64
  %129 = icmp ult i32 %62, 8
  br i1 %129, label %215, label %130

130:                                              ; preds = %126
  %131 = and i64 %128, 4294967288
  %132 = add nsw i64 %131, -8
  %133 = lshr exact i64 %132, 3
  %134 = add nuw nsw i64 %133, 1
  %135 = and i64 %134, 3
  %136 = icmp ult i64 %132, 24
  br i1 %136, label %182, label %137

137:                                              ; preds = %130
  %138 = sub nsw i64 %134, %135
  br label %139

139:                                              ; preds = %139, %137
  %140 = phi i64 [ 0, %137 ], [ %179, %139 ]
  %141 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %137 ], [ %177, %139 ]
  %142 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %137 ], [ %178, %139 ]
  %143 = phi i64 [ %138, %137 ], [ %180, %139 ]
  %144 = getelementptr inbounds i32, i32* %127, i64 %140
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4
  %147 = getelementptr inbounds i32, i32* %144, i64 4
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4
  %150 = mul nsw <4 x i32> %146, %141
  %151 = mul nsw <4 x i32> %149, %142
  %152 = or i64 %140, 8
  %153 = getelementptr inbounds i32, i32* %127, i64 %152
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4
  %156 = getelementptr inbounds i32, i32* %153, i64 4
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4
  %159 = mul nsw <4 x i32> %155, %150
  %160 = mul nsw <4 x i32> %158, %151
  %161 = or i64 %140, 16
  %162 = getelementptr inbounds i32, i32* %127, i64 %161
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 4
  %165 = getelementptr inbounds i32, i32* %162, i64 4
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4
  %168 = mul nsw <4 x i32> %164, %159
  %169 = mul nsw <4 x i32> %167, %160
  %170 = or i64 %140, 24
  %171 = getelementptr inbounds i32, i32* %127, i64 %170
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 4
  %174 = getelementptr inbounds i32, i32* %171, i64 4
  %175 = bitcast i32* %174 to <4 x i32>*
  %176 = load <4 x i32>, <4 x i32>* %175, align 4
  %177 = mul nsw <4 x i32> %173, %168
  %178 = mul nsw <4 x i32> %176, %169
  %179 = add i64 %140, 32
  %180 = add i64 %143, -4
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %182, label %139, !llvm.loop !59

182:                                              ; preds = %139, %130
  %183 = phi <4 x i32> [ undef, %130 ], [ %177, %139 ]
  %184 = phi <4 x i32> [ undef, %130 ], [ %178, %139 ]
  %185 = phi i64 [ 0, %130 ], [ %179, %139 ]
  %186 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %130 ], [ %177, %139 ]
  %187 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %130 ], [ %178, %139 ]
  %188 = icmp eq i64 %135, 0
  br i1 %188, label %205, label %189

189:                                              ; preds = %182, %189
  %190 = phi i64 [ %202, %189 ], [ %185, %182 ]
  %191 = phi <4 x i32> [ %200, %189 ], [ %186, %182 ]
  %192 = phi <4 x i32> [ %201, %189 ], [ %187, %182 ]
  %193 = phi i64 [ %203, %189 ], [ %135, %182 ]
  %194 = getelementptr inbounds i32, i32* %127, i64 %190
  %195 = bitcast i32* %194 to <4 x i32>*
  %196 = load <4 x i32>, <4 x i32>* %195, align 4
  %197 = getelementptr inbounds i32, i32* %194, i64 4
  %198 = bitcast i32* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 4
  %200 = mul nsw <4 x i32> %196, %191
  %201 = mul nsw <4 x i32> %199, %192
  %202 = add i64 %190, 8
  %203 = add i64 %193, -1
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %205, label %189, !llvm.loop !60

205:                                              ; preds = %189, %182
  %206 = phi <4 x i32> [ %183, %182 ], [ %200, %189 ]
  %207 = phi <4 x i32> [ %184, %182 ], [ %201, %189 ]
  %208 = mul <4 x i32> %207, %206
  %209 = shufflevector <4 x i32> %208, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %210 = mul <4 x i32> %208, %209
  %211 = shufflevector <4 x i32> %210, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %212 = mul <4 x i32> %210, %211
  %213 = extractelement <4 x i32> %212, i32 0
  %214 = icmp eq i64 %131, %128
  br i1 %214, label %226, label %215

215:                                              ; preds = %205, %126
  %216 = phi i64 [ 0, %126 ], [ %131, %205 ]
  %217 = phi i32 [ 1, %126 ], [ %213, %205 ]
  br label %218

218:                                              ; preds = %215, %218
  %219 = phi i64 [ %224, %218 ], [ %216, %215 ]
  %220 = phi i32 [ %223, %218 ], [ %217, %215 ]
  %221 = getelementptr inbounds i32, i32* %127, i64 %219
  %222 = load i32, i32* %221, align 4
  %223 = mul nsw i32 %222, %220
  %224 = add nuw nsw i64 %219, 1
  %225 = icmp eq i64 %224, %128
  br i1 %225, label %226, label %218, !llvm.loop !61

226:                                              ; preds = %218, %205
  %227 = phi i32 [ %213, %205 ], [ %223, %218 ]
  %228 = icmp sgt i32 %227, 0
  br i1 %228, label %229, label %1769

229:                                              ; preds = %226, %123
  %230 = phi i32 [ %227, %226 ], [ 1, %123 ]
  %231 = zext i32 %230 to i64
  %232 = icmp ult i32 %230, 4
  br i1 %232, label %266, label %233

233:                                              ; preds = %229
  %234 = getelementptr i8, i8* %117, i64 %231
  %235 = getelementptr float, float* %108, i64 %231
  %236 = bitcast float* %235 to i8*
  %237 = icmp ult i8* %117, %236
  %238 = icmp ult i8* %107, %234
  %239 = and i1 %237, %238
  br i1 %239, label %266, label %240

240:                                              ; preds = %233
  %241 = and i64 %231, 4294967292
  %242 = insertelement <4 x float> undef, float %100, i32 0
  %243 = shufflevector <4 x float> %242, <4 x float> undef, <4 x i32> zeroinitializer
  %244 = insertelement <4 x i32> undef, i32 %98, i32 0
  %245 = shufflevector <4 x i32> %244, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %246

246:                                              ; preds = %246, %240
  %247 = phi i64 [ 0, %240 ], [ %262, %246 ]
  %248 = getelementptr inbounds float, float* %108, i64 %247
  %249 = bitcast float* %248 to <4 x float>*
  %250 = load <4 x float>, <4 x float>* %249, align 4, !alias.scope !62
  %251 = fdiv <4 x float> %250, %243
  %252 = call <4 x float> @llvm.round.v4f32(<4 x float> %251)
  %253 = fptosi <4 x float> %252 to <4 x i32>
  %254 = add nsw <4 x i32> %245, %253
  %255 = icmp sgt <4 x i32> %254, <i32 -128, i32 -128, i32 -128, i32 -128>
  %256 = select <4 x i1> %255, <4 x i32> %254, <4 x i32> <i32 -128, i32 -128, i32 -128, i32 -128>
  %257 = icmp slt <4 x i32> %256, <i32 127, i32 127, i32 127, i32 127>
  %258 = select <4 x i1> %257, <4 x i32> %256, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %259 = trunc <4 x i32> %258 to <4 x i8>
  %260 = getelementptr inbounds i8, i8* %117, i64 %247
  %261 = bitcast i8* %260 to <4 x i8>*
  store <4 x i8> %259, <4 x i8>* %261, align 1, !alias.scope !65, !noalias !62
  %262 = add i64 %247, 4
  %263 = icmp eq i64 %262, %241
  br i1 %263, label %264, label %246, !llvm.loop !67

264:                                              ; preds = %246
  %265 = icmp eq i64 %241, %231
  br i1 %265, label %1769, label %266

266:                                              ; preds = %264, %233, %229
  %267 = phi i64 [ 0, %233 ], [ 0, %229 ], [ %241, %264 ]
  br label %268

268:                                              ; preds = %266, %268
  %269 = phi i64 [ %282, %268 ], [ %267, %266 ]
  %270 = getelementptr inbounds float, float* %108, i64 %269
  %271 = load float, float* %270, align 4
  %272 = fdiv float %271, %100
  %273 = tail call float @llvm.round.f32(float %272) #9
  %274 = fptosi float %273 to i32
  %275 = add nsw i32 %98, %274
  %276 = icmp sgt i32 %275, -128
  %277 = select i1 %276, i32 %275, i32 -128
  %278 = icmp slt i32 %277, 127
  %279 = select i1 %278, i32 %277, i32 127
  %280 = trunc i32 %279 to i8
  %281 = getelementptr inbounds i8, i8* %117, i64 %269
  store i8 %280, i8* %281, align 1
  %282 = add nuw nsw i64 %269, 1
  %283 = icmp eq i64 %282, %231
  br i1 %283, label %1769, label %268, !llvm.loop !68

284:                                              ; preds = %106
  br i1 %64, label %289, label %285

285:                                              ; preds = %284
  %286 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %287 = bitcast %union.TfLitePtrUnion* %286 to i8**
  %288 = load i8*, i8** %287, align 8
  br label %289

289:                                              ; preds = %284, %285
  %290 = phi i8* [ %288, %285 ], [ null, %284 ]
  %291 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %292 = icmp sgt i32 %62, 5
  br i1 %292, label %293, label %296

293:                                              ; preds = %289
  %294 = getelementptr inbounds %union.anon, %union.anon* %291, i64 0, i32 0
  %295 = load i32*, i32** %294, align 8
  br label %299

296:                                              ; preds = %289
  %297 = bitcast %union.anon* %291 to i32*
  %298 = icmp sgt i32 %62, 0
  br i1 %298, label %299, label %402

299:                                              ; preds = %296, %293
  %300 = phi i32* [ %295, %293 ], [ %297, %296 ]
  %301 = zext i32 %62 to i64
  %302 = icmp ult i32 %62, 8
  br i1 %302, label %388, label %303

303:                                              ; preds = %299
  %304 = and i64 %301, 4294967288
  %305 = add nsw i64 %304, -8
  %306 = lshr exact i64 %305, 3
  %307 = add nuw nsw i64 %306, 1
  %308 = and i64 %307, 3
  %309 = icmp ult i64 %305, 24
  br i1 %309, label %355, label %310

310:                                              ; preds = %303
  %311 = sub nsw i64 %307, %308
  br label %312

312:                                              ; preds = %312, %310
  %313 = phi i64 [ 0, %310 ], [ %352, %312 ]
  %314 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %310 ], [ %350, %312 ]
  %315 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %310 ], [ %351, %312 ]
  %316 = phi i64 [ %311, %310 ], [ %353, %312 ]
  %317 = getelementptr inbounds i32, i32* %300, i64 %313
  %318 = bitcast i32* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 4
  %320 = getelementptr inbounds i32, i32* %317, i64 4
  %321 = bitcast i32* %320 to <4 x i32>*
  %322 = load <4 x i32>, <4 x i32>* %321, align 4
  %323 = mul nsw <4 x i32> %319, %314
  %324 = mul nsw <4 x i32> %322, %315
  %325 = or i64 %313, 8
  %326 = getelementptr inbounds i32, i32* %300, i64 %325
  %327 = bitcast i32* %326 to <4 x i32>*
  %328 = load <4 x i32>, <4 x i32>* %327, align 4
  %329 = getelementptr inbounds i32, i32* %326, i64 4
  %330 = bitcast i32* %329 to <4 x i32>*
  %331 = load <4 x i32>, <4 x i32>* %330, align 4
  %332 = mul nsw <4 x i32> %328, %323
  %333 = mul nsw <4 x i32> %331, %324
  %334 = or i64 %313, 16
  %335 = getelementptr inbounds i32, i32* %300, i64 %334
  %336 = bitcast i32* %335 to <4 x i32>*
  %337 = load <4 x i32>, <4 x i32>* %336, align 4
  %338 = getelementptr inbounds i32, i32* %335, i64 4
  %339 = bitcast i32* %338 to <4 x i32>*
  %340 = load <4 x i32>, <4 x i32>* %339, align 4
  %341 = mul nsw <4 x i32> %337, %332
  %342 = mul nsw <4 x i32> %340, %333
  %343 = or i64 %313, 24
  %344 = getelementptr inbounds i32, i32* %300, i64 %343
  %345 = bitcast i32* %344 to <4 x i32>*
  %346 = load <4 x i32>, <4 x i32>* %345, align 4
  %347 = getelementptr inbounds i32, i32* %344, i64 4
  %348 = bitcast i32* %347 to <4 x i32>*
  %349 = load <4 x i32>, <4 x i32>* %348, align 4
  %350 = mul nsw <4 x i32> %346, %341
  %351 = mul nsw <4 x i32> %349, %342
  %352 = add i64 %313, 32
  %353 = add i64 %316, -4
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %355, label %312, !llvm.loop !69

355:                                              ; preds = %312, %303
  %356 = phi <4 x i32> [ undef, %303 ], [ %350, %312 ]
  %357 = phi <4 x i32> [ undef, %303 ], [ %351, %312 ]
  %358 = phi i64 [ 0, %303 ], [ %352, %312 ]
  %359 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %303 ], [ %350, %312 ]
  %360 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %303 ], [ %351, %312 ]
  %361 = icmp eq i64 %308, 0
  br i1 %361, label %378, label %362

362:                                              ; preds = %355, %362
  %363 = phi i64 [ %375, %362 ], [ %358, %355 ]
  %364 = phi <4 x i32> [ %373, %362 ], [ %359, %355 ]
  %365 = phi <4 x i32> [ %374, %362 ], [ %360, %355 ]
  %366 = phi i64 [ %376, %362 ], [ %308, %355 ]
  %367 = getelementptr inbounds i32, i32* %300, i64 %363
  %368 = bitcast i32* %367 to <4 x i32>*
  %369 = load <4 x i32>, <4 x i32>* %368, align 4
  %370 = getelementptr inbounds i32, i32* %367, i64 4
  %371 = bitcast i32* %370 to <4 x i32>*
  %372 = load <4 x i32>, <4 x i32>* %371, align 4
  %373 = mul nsw <4 x i32> %369, %364
  %374 = mul nsw <4 x i32> %372, %365
  %375 = add i64 %363, 8
  %376 = add i64 %366, -1
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %378, label %362, !llvm.loop !70

378:                                              ; preds = %362, %355
  %379 = phi <4 x i32> [ %356, %355 ], [ %373, %362 ]
  %380 = phi <4 x i32> [ %357, %355 ], [ %374, %362 ]
  %381 = mul <4 x i32> %380, %379
  %382 = shufflevector <4 x i32> %381, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %383 = mul <4 x i32> %381, %382
  %384 = shufflevector <4 x i32> %383, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %385 = mul <4 x i32> %383, %384
  %386 = extractelement <4 x i32> %385, i32 0
  %387 = icmp eq i64 %304, %301
  br i1 %387, label %399, label %388

388:                                              ; preds = %378, %299
  %389 = phi i64 [ 0, %299 ], [ %304, %378 ]
  %390 = phi i32 [ 1, %299 ], [ %386, %378 ]
  br label %391

391:                                              ; preds = %388, %391
  %392 = phi i64 [ %397, %391 ], [ %389, %388 ]
  %393 = phi i32 [ %396, %391 ], [ %390, %388 ]
  %394 = getelementptr inbounds i32, i32* %300, i64 %392
  %395 = load i32, i32* %394, align 4
  %396 = mul nsw i32 %395, %393
  %397 = add nuw nsw i64 %392, 1
  %398 = icmp eq i64 %397, %301
  br i1 %398, label %399, label %391, !llvm.loop !71

399:                                              ; preds = %391, %378
  %400 = phi i32 [ %386, %378 ], [ %396, %391 ]
  %401 = icmp sgt i32 %400, 0
  br i1 %401, label %402, label %1769

402:                                              ; preds = %399, %296
  %403 = phi i32 [ %400, %399 ], [ 1, %296 ]
  %404 = zext i32 %403 to i64
  %405 = icmp ult i32 %403, 4
  br i1 %405, label %439, label %406

406:                                              ; preds = %402
  %407 = getelementptr i8, i8* %290, i64 %404
  %408 = getelementptr float, float* %108, i64 %404
  %409 = bitcast float* %408 to i8*
  %410 = icmp ult i8* %290, %409
  %411 = icmp ult i8* %107, %407
  %412 = and i1 %410, %411
  br i1 %412, label %439, label %413

413:                                              ; preds = %406
  %414 = and i64 %404, 4294967292
  %415 = insertelement <4 x float> undef, float %100, i32 0
  %416 = shufflevector <4 x float> %415, <4 x float> undef, <4 x i32> zeroinitializer
  %417 = insertelement <4 x i32> undef, i32 %98, i32 0
  %418 = shufflevector <4 x i32> %417, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %419

419:                                              ; preds = %419, %413
  %420 = phi i64 [ 0, %413 ], [ %435, %419 ]
  %421 = getelementptr inbounds float, float* %108, i64 %420
  %422 = bitcast float* %421 to <4 x float>*
  %423 = load <4 x float>, <4 x float>* %422, align 4, !alias.scope !72
  %424 = fdiv <4 x float> %423, %416
  %425 = call <4 x float> @llvm.round.v4f32(<4 x float> %424)
  %426 = fptosi <4 x float> %425 to <4 x i32>
  %427 = add nsw <4 x i32> %418, %426
  %428 = icmp sgt <4 x i32> %427, zeroinitializer
  %429 = select <4 x i1> %428, <4 x i32> %427, <4 x i32> zeroinitializer
  %430 = icmp slt <4 x i32> %429, <i32 255, i32 255, i32 255, i32 255>
  %431 = select <4 x i1> %430, <4 x i32> %429, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %432 = trunc <4 x i32> %431 to <4 x i8>
  %433 = getelementptr inbounds i8, i8* %290, i64 %420
  %434 = bitcast i8* %433 to <4 x i8>*
  store <4 x i8> %432, <4 x i8>* %434, align 1, !alias.scope !75, !noalias !72
  %435 = add i64 %420, 4
  %436 = icmp eq i64 %435, %414
  br i1 %436, label %437, label %419, !llvm.loop !77

437:                                              ; preds = %419
  %438 = icmp eq i64 %414, %404
  br i1 %438, label %1769, label %439

439:                                              ; preds = %437, %406, %402
  %440 = phi i64 [ 0, %406 ], [ 0, %402 ], [ %414, %437 ]
  br label %441

441:                                              ; preds = %439, %441
  %442 = phi i64 [ %455, %441 ], [ %440, %439 ]
  %443 = getelementptr inbounds float, float* %108, i64 %442
  %444 = load float, float* %443, align 4
  %445 = fdiv float %444, %100
  %446 = tail call float @llvm.round.f32(float %445) #9
  %447 = fptosi float %446 to i32
  %448 = add nsw i32 %98, %447
  %449 = icmp sgt i32 %448, 0
  %450 = select i1 %449, i32 %448, i32 0
  %451 = icmp slt i32 %450, 255
  %452 = select i1 %451, i32 %450, i32 255
  %453 = trunc i32 %452 to i8
  %454 = getelementptr inbounds i8, i8* %290, i64 %442
  store i8 %453, i8* %454, align 1
  %455 = add nuw nsw i64 %442, 1
  %456 = icmp eq i64 %455, %404
  br i1 %456, label %1769, label %441, !llvm.loop !78

457:                                              ; preds = %106
  br i1 %64, label %463, label %458

458:                                              ; preds = %457
  %459 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %460 = bitcast %union.TfLitePtrUnion* %459 to i16**
  %461 = load i16*, i16** %460, align 8
  %462 = bitcast i16* %461 to i8*
  br label %463

463:                                              ; preds = %457, %458
  %464 = phi i8* [ %462, %458 ], [ null, %457 ]
  %465 = phi i16* [ %461, %458 ], [ null, %457 ]
  %466 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %467 = icmp sgt i32 %62, 5
  br i1 %467, label %468, label %471

468:                                              ; preds = %463
  %469 = getelementptr inbounds %union.anon, %union.anon* %466, i64 0, i32 0
  %470 = load i32*, i32** %469, align 8
  br label %474

471:                                              ; preds = %463
  %472 = bitcast %union.anon* %466 to i32*
  %473 = icmp sgt i32 %62, 0
  br i1 %473, label %474, label %577

474:                                              ; preds = %471, %468
  %475 = phi i32* [ %470, %468 ], [ %472, %471 ]
  %476 = zext i32 %62 to i64
  %477 = icmp ult i32 %62, 8
  br i1 %477, label %563, label %478

478:                                              ; preds = %474
  %479 = and i64 %476, 4294967288
  %480 = add nsw i64 %479, -8
  %481 = lshr exact i64 %480, 3
  %482 = add nuw nsw i64 %481, 1
  %483 = and i64 %482, 3
  %484 = icmp ult i64 %480, 24
  br i1 %484, label %530, label %485

485:                                              ; preds = %478
  %486 = sub nsw i64 %482, %483
  br label %487

487:                                              ; preds = %487, %485
  %488 = phi i64 [ 0, %485 ], [ %527, %487 ]
  %489 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %485 ], [ %525, %487 ]
  %490 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %485 ], [ %526, %487 ]
  %491 = phi i64 [ %486, %485 ], [ %528, %487 ]
  %492 = getelementptr inbounds i32, i32* %475, i64 %488
  %493 = bitcast i32* %492 to <4 x i32>*
  %494 = load <4 x i32>, <4 x i32>* %493, align 4
  %495 = getelementptr inbounds i32, i32* %492, i64 4
  %496 = bitcast i32* %495 to <4 x i32>*
  %497 = load <4 x i32>, <4 x i32>* %496, align 4
  %498 = mul nsw <4 x i32> %494, %489
  %499 = mul nsw <4 x i32> %497, %490
  %500 = or i64 %488, 8
  %501 = getelementptr inbounds i32, i32* %475, i64 %500
  %502 = bitcast i32* %501 to <4 x i32>*
  %503 = load <4 x i32>, <4 x i32>* %502, align 4
  %504 = getelementptr inbounds i32, i32* %501, i64 4
  %505 = bitcast i32* %504 to <4 x i32>*
  %506 = load <4 x i32>, <4 x i32>* %505, align 4
  %507 = mul nsw <4 x i32> %503, %498
  %508 = mul nsw <4 x i32> %506, %499
  %509 = or i64 %488, 16
  %510 = getelementptr inbounds i32, i32* %475, i64 %509
  %511 = bitcast i32* %510 to <4 x i32>*
  %512 = load <4 x i32>, <4 x i32>* %511, align 4
  %513 = getelementptr inbounds i32, i32* %510, i64 4
  %514 = bitcast i32* %513 to <4 x i32>*
  %515 = load <4 x i32>, <4 x i32>* %514, align 4
  %516 = mul nsw <4 x i32> %512, %507
  %517 = mul nsw <4 x i32> %515, %508
  %518 = or i64 %488, 24
  %519 = getelementptr inbounds i32, i32* %475, i64 %518
  %520 = bitcast i32* %519 to <4 x i32>*
  %521 = load <4 x i32>, <4 x i32>* %520, align 4
  %522 = getelementptr inbounds i32, i32* %519, i64 4
  %523 = bitcast i32* %522 to <4 x i32>*
  %524 = load <4 x i32>, <4 x i32>* %523, align 4
  %525 = mul nsw <4 x i32> %521, %516
  %526 = mul nsw <4 x i32> %524, %517
  %527 = add i64 %488, 32
  %528 = add i64 %491, -4
  %529 = icmp eq i64 %528, 0
  br i1 %529, label %530, label %487, !llvm.loop !79

530:                                              ; preds = %487, %478
  %531 = phi <4 x i32> [ undef, %478 ], [ %525, %487 ]
  %532 = phi <4 x i32> [ undef, %478 ], [ %526, %487 ]
  %533 = phi i64 [ 0, %478 ], [ %527, %487 ]
  %534 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %478 ], [ %525, %487 ]
  %535 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %478 ], [ %526, %487 ]
  %536 = icmp eq i64 %483, 0
  br i1 %536, label %553, label %537

537:                                              ; preds = %530, %537
  %538 = phi i64 [ %550, %537 ], [ %533, %530 ]
  %539 = phi <4 x i32> [ %548, %537 ], [ %534, %530 ]
  %540 = phi <4 x i32> [ %549, %537 ], [ %535, %530 ]
  %541 = phi i64 [ %551, %537 ], [ %483, %530 ]
  %542 = getelementptr inbounds i32, i32* %475, i64 %538
  %543 = bitcast i32* %542 to <4 x i32>*
  %544 = load <4 x i32>, <4 x i32>* %543, align 4
  %545 = getelementptr inbounds i32, i32* %542, i64 4
  %546 = bitcast i32* %545 to <4 x i32>*
  %547 = load <4 x i32>, <4 x i32>* %546, align 4
  %548 = mul nsw <4 x i32> %544, %539
  %549 = mul nsw <4 x i32> %547, %540
  %550 = add i64 %538, 8
  %551 = add i64 %541, -1
  %552 = icmp eq i64 %551, 0
  br i1 %552, label %553, label %537, !llvm.loop !80

553:                                              ; preds = %537, %530
  %554 = phi <4 x i32> [ %531, %530 ], [ %548, %537 ]
  %555 = phi <4 x i32> [ %532, %530 ], [ %549, %537 ]
  %556 = mul <4 x i32> %555, %554
  %557 = shufflevector <4 x i32> %556, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %558 = mul <4 x i32> %556, %557
  %559 = shufflevector <4 x i32> %558, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %560 = mul <4 x i32> %558, %559
  %561 = extractelement <4 x i32> %560, i32 0
  %562 = icmp eq i64 %479, %476
  br i1 %562, label %574, label %563

563:                                              ; preds = %553, %474
  %564 = phi i64 [ 0, %474 ], [ %479, %553 ]
  %565 = phi i32 [ 1, %474 ], [ %561, %553 ]
  br label %566

566:                                              ; preds = %563, %566
  %567 = phi i64 [ %572, %566 ], [ %564, %563 ]
  %568 = phi i32 [ %571, %566 ], [ %565, %563 ]
  %569 = getelementptr inbounds i32, i32* %475, i64 %567
  %570 = load i32, i32* %569, align 4
  %571 = mul nsw i32 %570, %568
  %572 = add nuw nsw i64 %567, 1
  %573 = icmp eq i64 %572, %476
  br i1 %573, label %574, label %566, !llvm.loop !81

574:                                              ; preds = %566, %553
  %575 = phi i32 [ %561, %553 ], [ %571, %566 ]
  %576 = icmp sgt i32 %575, 0
  br i1 %576, label %577, label %1769

577:                                              ; preds = %574, %471
  %578 = phi i32 [ %575, %574 ], [ 1, %471 ]
  %579 = zext i32 %578 to i64
  %580 = icmp ult i32 %578, 4
  br i1 %580, label %615, label %581

581:                                              ; preds = %577
  %582 = getelementptr i16, i16* %465, i64 %579
  %583 = bitcast i16* %582 to i8*
  %584 = getelementptr float, float* %108, i64 %579
  %585 = bitcast float* %584 to i8*
  %586 = icmp ult i8* %464, %585
  %587 = icmp ult i8* %107, %583
  %588 = and i1 %586, %587
  br i1 %588, label %615, label %589

589:                                              ; preds = %581
  %590 = and i64 %579, 4294967292
  %591 = insertelement <4 x float> undef, float %100, i32 0
  %592 = shufflevector <4 x float> %591, <4 x float> undef, <4 x i32> zeroinitializer
  %593 = insertelement <4 x i32> undef, i32 %98, i32 0
  %594 = shufflevector <4 x i32> %593, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %595

595:                                              ; preds = %595, %589
  %596 = phi i64 [ 0, %589 ], [ %611, %595 ]
  %597 = getelementptr inbounds float, float* %108, i64 %596
  %598 = bitcast float* %597 to <4 x float>*
  %599 = load <4 x float>, <4 x float>* %598, align 4, !alias.scope !82
  %600 = fdiv <4 x float> %599, %592
  %601 = call <4 x float> @llvm.round.v4f32(<4 x float> %600)
  %602 = fptosi <4 x float> %601 to <4 x i32>
  %603 = add nsw <4 x i32> %594, %602
  %604 = icmp sgt <4 x i32> %603, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %605 = select <4 x i1> %604, <4 x i32> %603, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %606 = icmp slt <4 x i32> %605, <i32 32767, i32 32767, i32 32767, i32 32767>
  %607 = select <4 x i1> %606, <4 x i32> %605, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %608 = trunc <4 x i32> %607 to <4 x i16>
  %609 = getelementptr inbounds i16, i16* %465, i64 %596
  %610 = bitcast i16* %609 to <4 x i16>*
  store <4 x i16> %608, <4 x i16>* %610, align 2, !alias.scope !85, !noalias !82
  %611 = add i64 %596, 4
  %612 = icmp eq i64 %611, %590
  br i1 %612, label %613, label %595, !llvm.loop !87

613:                                              ; preds = %595
  %614 = icmp eq i64 %590, %579
  br i1 %614, label %1769, label %615

615:                                              ; preds = %613, %581, %577
  %616 = phi i64 [ 0, %581 ], [ 0, %577 ], [ %590, %613 ]
  br label %617

617:                                              ; preds = %615, %617
  %618 = phi i64 [ %631, %617 ], [ %616, %615 ]
  %619 = getelementptr inbounds float, float* %108, i64 %618
  %620 = load float, float* %619, align 4
  %621 = fdiv float %620, %100
  %622 = tail call float @llvm.round.f32(float %621) #9
  %623 = fptosi float %622 to i32
  %624 = add nsw i32 %98, %623
  %625 = icmp sgt i32 %624, -32768
  %626 = select i1 %625, i32 %624, i32 -32768
  %627 = icmp slt i32 %626, 32767
  %628 = select i1 %627, i32 %626, i32 32767
  %629 = trunc i32 %628 to i16
  %630 = getelementptr inbounds i16, i16* %465, i64 %618
  store i16 %629, i16* %630, align 2
  %631 = add nuw nsw i64 %618, 1
  %632 = icmp eq i64 %631, %579
  br i1 %632, label %1769, label %617, !llvm.loop !88

633:                                              ; preds = %106
  %634 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %635 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %634, align 8
  %636 = tail call i8* @TfLiteTypeGetName(i32 1) #9
  %637 = tail call i8* @TfLiteTypeGetName(i32 %110) #9
  tail call void (%struct.TfLiteContext*, i8*, ...) %635(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.21, i64 0, i64 0), i8* %636, i8* %637) #9
  br label %1769

638:                                              ; preds = %92
  %639 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 0
  %640 = load i32, i32* %639, align 8
  switch i32 %640, label %1007 [
    i32 9, label %641
    i32 7, label %824
  ]

641:                                              ; preds = %638
  br i1 %33, label %646, label %642

642:                                              ; preds = %641
  %643 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1
  %644 = bitcast %union.TfLitePtrUnion* %643 to i16**
  %645 = load i16*, i16** %644, align 8
  br label %646

646:                                              ; preds = %641, %642
  %647 = phi i16* [ %645, %642 ], [ null, %641 ]
  %648 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %649 = icmp sgt i32 %62, 5
  br i1 %649, label %650, label %653

650:                                              ; preds = %646
  %651 = getelementptr inbounds %union.anon, %union.anon* %648, i64 0, i32 0
  %652 = load i32*, i32** %651, align 8
  br label %656

653:                                              ; preds = %646
  %654 = bitcast %union.anon* %648 to i32*
  %655 = icmp sgt i32 %62, 0
  br i1 %655, label %656, label %756

656:                                              ; preds = %653, %650
  %657 = phi i32* [ %652, %650 ], [ %654, %653 ]
  %658 = zext i32 %62 to i64
  %659 = icmp ult i32 %62, 8
  br i1 %659, label %745, label %660

660:                                              ; preds = %656
  %661 = and i64 %658, 4294967288
  %662 = add nsw i64 %661, -8
  %663 = lshr exact i64 %662, 3
  %664 = add nuw nsw i64 %663, 1
  %665 = and i64 %664, 3
  %666 = icmp ult i64 %662, 24
  br i1 %666, label %712, label %667

667:                                              ; preds = %660
  %668 = sub nsw i64 %664, %665
  br label %669

669:                                              ; preds = %669, %667
  %670 = phi i64 [ 0, %667 ], [ %709, %669 ]
  %671 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %667 ], [ %707, %669 ]
  %672 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %667 ], [ %708, %669 ]
  %673 = phi i64 [ %668, %667 ], [ %710, %669 ]
  %674 = getelementptr inbounds i32, i32* %657, i64 %670
  %675 = bitcast i32* %674 to <4 x i32>*
  %676 = load <4 x i32>, <4 x i32>* %675, align 4
  %677 = getelementptr inbounds i32, i32* %674, i64 4
  %678 = bitcast i32* %677 to <4 x i32>*
  %679 = load <4 x i32>, <4 x i32>* %678, align 4
  %680 = mul nsw <4 x i32> %676, %671
  %681 = mul nsw <4 x i32> %679, %672
  %682 = or i64 %670, 8
  %683 = getelementptr inbounds i32, i32* %657, i64 %682
  %684 = bitcast i32* %683 to <4 x i32>*
  %685 = load <4 x i32>, <4 x i32>* %684, align 4
  %686 = getelementptr inbounds i32, i32* %683, i64 4
  %687 = bitcast i32* %686 to <4 x i32>*
  %688 = load <4 x i32>, <4 x i32>* %687, align 4
  %689 = mul nsw <4 x i32> %685, %680
  %690 = mul nsw <4 x i32> %688, %681
  %691 = or i64 %670, 16
  %692 = getelementptr inbounds i32, i32* %657, i64 %691
  %693 = bitcast i32* %692 to <4 x i32>*
  %694 = load <4 x i32>, <4 x i32>* %693, align 4
  %695 = getelementptr inbounds i32, i32* %692, i64 4
  %696 = bitcast i32* %695 to <4 x i32>*
  %697 = load <4 x i32>, <4 x i32>* %696, align 4
  %698 = mul nsw <4 x i32> %694, %689
  %699 = mul nsw <4 x i32> %697, %690
  %700 = or i64 %670, 24
  %701 = getelementptr inbounds i32, i32* %657, i64 %700
  %702 = bitcast i32* %701 to <4 x i32>*
  %703 = load <4 x i32>, <4 x i32>* %702, align 4
  %704 = getelementptr inbounds i32, i32* %701, i64 4
  %705 = bitcast i32* %704 to <4 x i32>*
  %706 = load <4 x i32>, <4 x i32>* %705, align 4
  %707 = mul nsw <4 x i32> %703, %698
  %708 = mul nsw <4 x i32> %706, %699
  %709 = add i64 %670, 32
  %710 = add i64 %673, -4
  %711 = icmp eq i64 %710, 0
  br i1 %711, label %712, label %669, !llvm.loop !89

712:                                              ; preds = %669, %660
  %713 = phi <4 x i32> [ undef, %660 ], [ %707, %669 ]
  %714 = phi <4 x i32> [ undef, %660 ], [ %708, %669 ]
  %715 = phi i64 [ 0, %660 ], [ %709, %669 ]
  %716 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %660 ], [ %707, %669 ]
  %717 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %660 ], [ %708, %669 ]
  %718 = icmp eq i64 %665, 0
  br i1 %718, label %735, label %719

719:                                              ; preds = %712, %719
  %720 = phi i64 [ %732, %719 ], [ %715, %712 ]
  %721 = phi <4 x i32> [ %730, %719 ], [ %716, %712 ]
  %722 = phi <4 x i32> [ %731, %719 ], [ %717, %712 ]
  %723 = phi i64 [ %733, %719 ], [ %665, %712 ]
  %724 = getelementptr inbounds i32, i32* %657, i64 %720
  %725 = bitcast i32* %724 to <4 x i32>*
  %726 = load <4 x i32>, <4 x i32>* %725, align 4
  %727 = getelementptr inbounds i32, i32* %724, i64 4
  %728 = bitcast i32* %727 to <4 x i32>*
  %729 = load <4 x i32>, <4 x i32>* %728, align 4
  %730 = mul nsw <4 x i32> %726, %721
  %731 = mul nsw <4 x i32> %729, %722
  %732 = add i64 %720, 8
  %733 = add i64 %723, -1
  %734 = icmp eq i64 %733, 0
  br i1 %734, label %735, label %719, !llvm.loop !90

735:                                              ; preds = %719, %712
  %736 = phi <4 x i32> [ %713, %712 ], [ %730, %719 ]
  %737 = phi <4 x i32> [ %714, %712 ], [ %731, %719 ]
  %738 = mul <4 x i32> %737, %736
  %739 = shufflevector <4 x i32> %738, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %740 = mul <4 x i32> %738, %739
  %741 = shufflevector <4 x i32> %740, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %742 = mul <4 x i32> %740, %741
  %743 = extractelement <4 x i32> %742, i32 0
  %744 = icmp eq i64 %661, %658
  br i1 %744, label %756, label %745

745:                                              ; preds = %735, %656
  %746 = phi i64 [ 0, %656 ], [ %661, %735 ]
  %747 = phi i32 [ 1, %656 ], [ %743, %735 ]
  br label %748

748:                                              ; preds = %745, %748
  %749 = phi i64 [ %754, %748 ], [ %746, %745 ]
  %750 = phi i32 [ %753, %748 ], [ %747, %745 ]
  %751 = getelementptr inbounds i32, i32* %657, i64 %749
  %752 = load i32, i32* %751, align 4
  %753 = mul nsw i32 %752, %750
  %754 = add nuw nsw i64 %749, 1
  %755 = icmp eq i64 %754, %658
  br i1 %755, label %756, label %748, !llvm.loop !91

756:                                              ; preds = %748, %735, %653
  %757 = phi i32 [ 1, %653 ], [ %743, %735 ], [ %753, %748 ]
  %758 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 0
  %759 = load i32, i32* %758, align 4
  %760 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 1
  %761 = load i32, i32* %760, align 4
  %762 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 1
  %763 = load i32, i32* %762, align 4
  %764 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 1
  %765 = load i32, i32* %764, align 4
  br i1 %64, label %770, label %766

766:                                              ; preds = %756
  %767 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %768 = bitcast %union.TfLitePtrUnion* %767 to i8**
  %769 = load i8*, i8** %768, align 8
  br label %770

770:                                              ; preds = %756, %766
  %771 = phi i8* [ %769, %766 ], [ null, %756 ]
  %772 = icmp sgt i32 %757, 0
  br i1 %772, label %773, label %1769

773:                                              ; preds = %770
  %774 = icmp sgt i32 %761, 0
  %775 = sub nsw i32 0, %761
  %776 = select i1 %774, i32 0, i32 %775
  %777 = shl i32 1, %761
  %778 = select i1 %774, i32 %777, i32 1
  %779 = sext i32 %759 to i64
  %780 = icmp eq i32 %759, -2147483648
  %781 = zext i32 %776 to i64
  %782 = shl nsw i64 -1, %781
  %783 = trunc i64 %782 to i32
  %784 = xor i32 %783, -1
  %785 = ashr i32 %784, 1
  %786 = zext i32 %757 to i64
  br label %787

787:                                              ; preds = %806, %773
  %788 = phi i64 [ 0, %773 ], [ %822, %806 ]
  %789 = getelementptr inbounds i16, i16* %647, i64 %788
  %790 = load i16, i16* %789, align 2
  %791 = sext i16 %790 to i32
  %792 = sub nsw i32 %791, %763
  %793 = mul nsw i32 %792, %778
  %794 = icmp eq i32 %793, %759
  br i1 %794, label %797, label %795

795:                                              ; preds = %787
  %796 = sext i32 %793 to i64
  br label %798

797:                                              ; preds = %787
  br i1 %780, label %806, label %798

798:                                              ; preds = %797, %795
  %799 = phi i64 [ %796, %795 ], [ %779, %797 ]
  %800 = mul nsw i64 %799, %779
  %801 = icmp sgt i64 %800, -1
  %802 = select i1 %801, i64 1073741824, i64 -1073741823
  %803 = add nsw i64 %802, %800
  %804 = sdiv i64 %803, 2147483648
  %805 = trunc i64 %804 to i32
  br label %806

806:                                              ; preds = %798, %797
  %807 = phi i32 [ %805, %798 ], [ 2147483647, %797 ]
  %808 = and i32 %807, %784
  %809 = lshr i32 %807, 31
  %810 = add nsw i32 %809, %785
  %811 = ashr i32 %807, %776
  %812 = icmp sgt i32 %808, %810
  %813 = zext i1 %812 to i32
  %814 = add i32 %811, %765
  %815 = add i32 %814, %813
  %816 = icmp slt i32 %815, 127
  %817 = select i1 %816, i32 %815, i32 127
  %818 = icmp sgt i32 %817, -128
  %819 = select i1 %818, i32 %817, i32 -128
  %820 = trunc i32 %819 to i8
  %821 = getelementptr inbounds i8, i8* %771, i64 %788
  store i8 %820, i8* %821, align 1
  %822 = add nuw nsw i64 %788, 1
  %823 = icmp eq i64 %822, %786
  br i1 %823, label %1769, label %787

824:                                              ; preds = %638
  br i1 %33, label %829, label %825

825:                                              ; preds = %824
  %826 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1
  %827 = bitcast %union.TfLitePtrUnion* %826 to i16**
  %828 = load i16*, i16** %827, align 8
  br label %829

829:                                              ; preds = %824, %825
  %830 = phi i16* [ %828, %825 ], [ null, %824 ]
  %831 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %832 = icmp sgt i32 %62, 5
  br i1 %832, label %833, label %836

833:                                              ; preds = %829
  %834 = getelementptr inbounds %union.anon, %union.anon* %831, i64 0, i32 0
  %835 = load i32*, i32** %834, align 8
  br label %839

836:                                              ; preds = %829
  %837 = bitcast %union.anon* %831 to i32*
  %838 = icmp sgt i32 %62, 0
  br i1 %838, label %839, label %939

839:                                              ; preds = %836, %833
  %840 = phi i32* [ %835, %833 ], [ %837, %836 ]
  %841 = zext i32 %62 to i64
  %842 = icmp ult i32 %62, 8
  br i1 %842, label %928, label %843

843:                                              ; preds = %839
  %844 = and i64 %841, 4294967288
  %845 = add nsw i64 %844, -8
  %846 = lshr exact i64 %845, 3
  %847 = add nuw nsw i64 %846, 1
  %848 = and i64 %847, 3
  %849 = icmp ult i64 %845, 24
  br i1 %849, label %895, label %850

850:                                              ; preds = %843
  %851 = sub nsw i64 %847, %848
  br label %852

852:                                              ; preds = %852, %850
  %853 = phi i64 [ 0, %850 ], [ %892, %852 ]
  %854 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %850 ], [ %890, %852 ]
  %855 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %850 ], [ %891, %852 ]
  %856 = phi i64 [ %851, %850 ], [ %893, %852 ]
  %857 = getelementptr inbounds i32, i32* %840, i64 %853
  %858 = bitcast i32* %857 to <4 x i32>*
  %859 = load <4 x i32>, <4 x i32>* %858, align 4
  %860 = getelementptr inbounds i32, i32* %857, i64 4
  %861 = bitcast i32* %860 to <4 x i32>*
  %862 = load <4 x i32>, <4 x i32>* %861, align 4
  %863 = mul nsw <4 x i32> %859, %854
  %864 = mul nsw <4 x i32> %862, %855
  %865 = or i64 %853, 8
  %866 = getelementptr inbounds i32, i32* %840, i64 %865
  %867 = bitcast i32* %866 to <4 x i32>*
  %868 = load <4 x i32>, <4 x i32>* %867, align 4
  %869 = getelementptr inbounds i32, i32* %866, i64 4
  %870 = bitcast i32* %869 to <4 x i32>*
  %871 = load <4 x i32>, <4 x i32>* %870, align 4
  %872 = mul nsw <4 x i32> %868, %863
  %873 = mul nsw <4 x i32> %871, %864
  %874 = or i64 %853, 16
  %875 = getelementptr inbounds i32, i32* %840, i64 %874
  %876 = bitcast i32* %875 to <4 x i32>*
  %877 = load <4 x i32>, <4 x i32>* %876, align 4
  %878 = getelementptr inbounds i32, i32* %875, i64 4
  %879 = bitcast i32* %878 to <4 x i32>*
  %880 = load <4 x i32>, <4 x i32>* %879, align 4
  %881 = mul nsw <4 x i32> %877, %872
  %882 = mul nsw <4 x i32> %880, %873
  %883 = or i64 %853, 24
  %884 = getelementptr inbounds i32, i32* %840, i64 %883
  %885 = bitcast i32* %884 to <4 x i32>*
  %886 = load <4 x i32>, <4 x i32>* %885, align 4
  %887 = getelementptr inbounds i32, i32* %884, i64 4
  %888 = bitcast i32* %887 to <4 x i32>*
  %889 = load <4 x i32>, <4 x i32>* %888, align 4
  %890 = mul nsw <4 x i32> %886, %881
  %891 = mul nsw <4 x i32> %889, %882
  %892 = add i64 %853, 32
  %893 = add i64 %856, -4
  %894 = icmp eq i64 %893, 0
  br i1 %894, label %895, label %852, !llvm.loop !92

895:                                              ; preds = %852, %843
  %896 = phi <4 x i32> [ undef, %843 ], [ %890, %852 ]
  %897 = phi <4 x i32> [ undef, %843 ], [ %891, %852 ]
  %898 = phi i64 [ 0, %843 ], [ %892, %852 ]
  %899 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %843 ], [ %890, %852 ]
  %900 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %843 ], [ %891, %852 ]
  %901 = icmp eq i64 %848, 0
  br i1 %901, label %918, label %902

902:                                              ; preds = %895, %902
  %903 = phi i64 [ %915, %902 ], [ %898, %895 ]
  %904 = phi <4 x i32> [ %913, %902 ], [ %899, %895 ]
  %905 = phi <4 x i32> [ %914, %902 ], [ %900, %895 ]
  %906 = phi i64 [ %916, %902 ], [ %848, %895 ]
  %907 = getelementptr inbounds i32, i32* %840, i64 %903
  %908 = bitcast i32* %907 to <4 x i32>*
  %909 = load <4 x i32>, <4 x i32>* %908, align 4
  %910 = getelementptr inbounds i32, i32* %907, i64 4
  %911 = bitcast i32* %910 to <4 x i32>*
  %912 = load <4 x i32>, <4 x i32>* %911, align 4
  %913 = mul nsw <4 x i32> %909, %904
  %914 = mul nsw <4 x i32> %912, %905
  %915 = add i64 %903, 8
  %916 = add i64 %906, -1
  %917 = icmp eq i64 %916, 0
  br i1 %917, label %918, label %902, !llvm.loop !93

918:                                              ; preds = %902, %895
  %919 = phi <4 x i32> [ %896, %895 ], [ %913, %902 ]
  %920 = phi <4 x i32> [ %897, %895 ], [ %914, %902 ]
  %921 = mul <4 x i32> %920, %919
  %922 = shufflevector <4 x i32> %921, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %923 = mul <4 x i32> %921, %922
  %924 = shufflevector <4 x i32> %923, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %925 = mul <4 x i32> %923, %924
  %926 = extractelement <4 x i32> %925, i32 0
  %927 = icmp eq i64 %844, %841
  br i1 %927, label %939, label %928

928:                                              ; preds = %918, %839
  %929 = phi i64 [ 0, %839 ], [ %844, %918 ]
  %930 = phi i32 [ 1, %839 ], [ %926, %918 ]
  br label %931

931:                                              ; preds = %928, %931
  %932 = phi i64 [ %937, %931 ], [ %929, %928 ]
  %933 = phi i32 [ %936, %931 ], [ %930, %928 ]
  %934 = getelementptr inbounds i32, i32* %840, i64 %932
  %935 = load i32, i32* %934, align 4
  %936 = mul nsw i32 %935, %933
  %937 = add nuw nsw i64 %932, 1
  %938 = icmp eq i64 %937, %841
  br i1 %938, label %939, label %931, !llvm.loop !94

939:                                              ; preds = %931, %918, %836
  %940 = phi i32 [ 1, %836 ], [ %926, %918 ], [ %936, %931 ]
  %941 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 0
  %942 = load i32, i32* %941, align 4
  %943 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 1
  %944 = load i32, i32* %943, align 4
  %945 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 1
  %946 = load i32, i32* %945, align 4
  %947 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 1
  %948 = load i32, i32* %947, align 4
  br i1 %64, label %953, label %949

949:                                              ; preds = %939
  %950 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %951 = bitcast %union.TfLitePtrUnion* %950 to i16**
  %952 = load i16*, i16** %951, align 8
  br label %953

953:                                              ; preds = %939, %949
  %954 = phi i16* [ %952, %949 ], [ null, %939 ]
  %955 = icmp sgt i32 %940, 0
  br i1 %955, label %956, label %1769

956:                                              ; preds = %953
  %957 = icmp sgt i32 %944, 0
  %958 = sub nsw i32 0, %944
  %959 = select i1 %957, i32 0, i32 %958
  %960 = shl i32 1, %944
  %961 = select i1 %957, i32 %960, i32 1
  %962 = sext i32 %942 to i64
  %963 = icmp eq i32 %942, -2147483648
  %964 = zext i32 %959 to i64
  %965 = shl nsw i64 -1, %964
  %966 = trunc i64 %965 to i32
  %967 = xor i32 %966, -1
  %968 = ashr i32 %967, 1
  %969 = zext i32 %940 to i64
  br label %970

970:                                              ; preds = %989, %956
  %971 = phi i64 [ 0, %956 ], [ %1005, %989 ]
  %972 = getelementptr inbounds i16, i16* %830, i64 %971
  %973 = load i16, i16* %972, align 2
  %974 = sext i16 %973 to i32
  %975 = sub nsw i32 %974, %946
  %976 = mul nsw i32 %975, %961
  %977 = icmp eq i32 %976, %942
  br i1 %977, label %980, label %978

978:                                              ; preds = %970
  %979 = sext i32 %976 to i64
  br label %981

980:                                              ; preds = %970
  br i1 %963, label %989, label %981

981:                                              ; preds = %980, %978
  %982 = phi i64 [ %979, %978 ], [ %962, %980 ]
  %983 = mul nsw i64 %982, %962
  %984 = icmp sgt i64 %983, -1
  %985 = select i1 %984, i64 1073741824, i64 -1073741823
  %986 = add nsw i64 %985, %983
  %987 = sdiv i64 %986, 2147483648
  %988 = trunc i64 %987 to i32
  br label %989

989:                                              ; preds = %981, %980
  %990 = phi i32 [ %988, %981 ], [ 2147483647, %980 ]
  %991 = and i32 %990, %967
  %992 = lshr i32 %990, 31
  %993 = add nsw i32 %992, %968
  %994 = ashr i32 %990, %959
  %995 = icmp sgt i32 %991, %993
  %996 = zext i1 %995 to i32
  %997 = add i32 %994, %948
  %998 = add i32 %997, %996
  %999 = icmp slt i32 %998, 32767
  %1000 = select i1 %999, i32 %998, i32 32767
  %1001 = icmp sgt i32 %1000, -32768
  %1002 = select i1 %1001, i32 %1000, i32 -32768
  %1003 = trunc i32 %1002 to i16
  %1004 = getelementptr inbounds i16, i16* %954, i64 %971
  store i16 %1003, i16* %1004, align 2
  %1005 = add nuw nsw i64 %971, 1
  %1006 = icmp eq i64 %1005, %969
  br i1 %1006, label %1769, label %970

1007:                                             ; preds = %638
  %1008 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1009 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1008, align 8
  %1010 = tail call i8* @TfLiteTypeGetName(i32 7) #9
  %1011 = tail call i8* @TfLiteTypeGetName(i32 %640) #9
  tail call void (%struct.TfLiteContext*, i8*, ...) %1009(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.21, i64 0, i64 0), i8* %1010, i8* %1011) #9
  br label %1769

1012:                                             ; preds = %92
  %1013 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %1014 = icmp sgt i32 %62, 5
  br i1 %1014, label %1015, label %1018

1015:                                             ; preds = %1012
  %1016 = getelementptr inbounds %union.anon, %union.anon* %1013, i64 0, i32 0
  %1017 = load i32*, i32** %1016, align 8
  br label %1021

1018:                                             ; preds = %1012
  %1019 = bitcast %union.anon* %1013 to i32*
  %1020 = icmp sgt i32 %62, 0
  br i1 %1020, label %1021, label %1121

1021:                                             ; preds = %1018, %1015
  %1022 = phi i32* [ %1017, %1015 ], [ %1019, %1018 ]
  %1023 = zext i32 %62 to i64
  %1024 = icmp ult i32 %62, 8
  br i1 %1024, label %1110, label %1025

1025:                                             ; preds = %1021
  %1026 = and i64 %1023, 4294967288
  %1027 = add nsw i64 %1026, -8
  %1028 = lshr exact i64 %1027, 3
  %1029 = add nuw nsw i64 %1028, 1
  %1030 = and i64 %1029, 3
  %1031 = icmp ult i64 %1027, 24
  br i1 %1031, label %1077, label %1032

1032:                                             ; preds = %1025
  %1033 = sub nsw i64 %1029, %1030
  br label %1034

1034:                                             ; preds = %1034, %1032
  %1035 = phi i64 [ 0, %1032 ], [ %1074, %1034 ]
  %1036 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1032 ], [ %1072, %1034 ]
  %1037 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1032 ], [ %1073, %1034 ]
  %1038 = phi i64 [ %1033, %1032 ], [ %1075, %1034 ]
  %1039 = getelementptr inbounds i32, i32* %1022, i64 %1035
  %1040 = bitcast i32* %1039 to <4 x i32>*
  %1041 = load <4 x i32>, <4 x i32>* %1040, align 4
  %1042 = getelementptr inbounds i32, i32* %1039, i64 4
  %1043 = bitcast i32* %1042 to <4 x i32>*
  %1044 = load <4 x i32>, <4 x i32>* %1043, align 4
  %1045 = mul nsw <4 x i32> %1041, %1036
  %1046 = mul nsw <4 x i32> %1044, %1037
  %1047 = or i64 %1035, 8
  %1048 = getelementptr inbounds i32, i32* %1022, i64 %1047
  %1049 = bitcast i32* %1048 to <4 x i32>*
  %1050 = load <4 x i32>, <4 x i32>* %1049, align 4
  %1051 = getelementptr inbounds i32, i32* %1048, i64 4
  %1052 = bitcast i32* %1051 to <4 x i32>*
  %1053 = load <4 x i32>, <4 x i32>* %1052, align 4
  %1054 = mul nsw <4 x i32> %1050, %1045
  %1055 = mul nsw <4 x i32> %1053, %1046
  %1056 = or i64 %1035, 16
  %1057 = getelementptr inbounds i32, i32* %1022, i64 %1056
  %1058 = bitcast i32* %1057 to <4 x i32>*
  %1059 = load <4 x i32>, <4 x i32>* %1058, align 4
  %1060 = getelementptr inbounds i32, i32* %1057, i64 4
  %1061 = bitcast i32* %1060 to <4 x i32>*
  %1062 = load <4 x i32>, <4 x i32>* %1061, align 4
  %1063 = mul nsw <4 x i32> %1059, %1054
  %1064 = mul nsw <4 x i32> %1062, %1055
  %1065 = or i64 %1035, 24
  %1066 = getelementptr inbounds i32, i32* %1022, i64 %1065
  %1067 = bitcast i32* %1066 to <4 x i32>*
  %1068 = load <4 x i32>, <4 x i32>* %1067, align 4
  %1069 = getelementptr inbounds i32, i32* %1066, i64 4
  %1070 = bitcast i32* %1069 to <4 x i32>*
  %1071 = load <4 x i32>, <4 x i32>* %1070, align 4
  %1072 = mul nsw <4 x i32> %1068, %1063
  %1073 = mul nsw <4 x i32> %1071, %1064
  %1074 = add i64 %1035, 32
  %1075 = add i64 %1038, -4
  %1076 = icmp eq i64 %1075, 0
  br i1 %1076, label %1077, label %1034, !llvm.loop !95

1077:                                             ; preds = %1034, %1025
  %1078 = phi <4 x i32> [ undef, %1025 ], [ %1072, %1034 ]
  %1079 = phi <4 x i32> [ undef, %1025 ], [ %1073, %1034 ]
  %1080 = phi i64 [ 0, %1025 ], [ %1074, %1034 ]
  %1081 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1025 ], [ %1072, %1034 ]
  %1082 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1025 ], [ %1073, %1034 ]
  %1083 = icmp eq i64 %1030, 0
  br i1 %1083, label %1100, label %1084

1084:                                             ; preds = %1077, %1084
  %1085 = phi i64 [ %1097, %1084 ], [ %1080, %1077 ]
  %1086 = phi <4 x i32> [ %1095, %1084 ], [ %1081, %1077 ]
  %1087 = phi <4 x i32> [ %1096, %1084 ], [ %1082, %1077 ]
  %1088 = phi i64 [ %1098, %1084 ], [ %1030, %1077 ]
  %1089 = getelementptr inbounds i32, i32* %1022, i64 %1085
  %1090 = bitcast i32* %1089 to <4 x i32>*
  %1091 = load <4 x i32>, <4 x i32>* %1090, align 4
  %1092 = getelementptr inbounds i32, i32* %1089, i64 4
  %1093 = bitcast i32* %1092 to <4 x i32>*
  %1094 = load <4 x i32>, <4 x i32>* %1093, align 4
  %1095 = mul nsw <4 x i32> %1091, %1086
  %1096 = mul nsw <4 x i32> %1094, %1087
  %1097 = add i64 %1085, 8
  %1098 = add i64 %1088, -1
  %1099 = icmp eq i64 %1098, 0
  br i1 %1099, label %1100, label %1084, !llvm.loop !96

1100:                                             ; preds = %1084, %1077
  %1101 = phi <4 x i32> [ %1078, %1077 ], [ %1095, %1084 ]
  %1102 = phi <4 x i32> [ %1079, %1077 ], [ %1096, %1084 ]
  %1103 = mul <4 x i32> %1102, %1101
  %1104 = shufflevector <4 x i32> %1103, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1105 = mul <4 x i32> %1103, %1104
  %1106 = shufflevector <4 x i32> %1105, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1107 = mul <4 x i32> %1105, %1106
  %1108 = extractelement <4 x i32> %1107, i32 0
  %1109 = icmp eq i64 %1026, %1023
  br i1 %1109, label %1121, label %1110

1110:                                             ; preds = %1100, %1021
  %1111 = phi i64 [ 0, %1021 ], [ %1026, %1100 ]
  %1112 = phi i32 [ 1, %1021 ], [ %1108, %1100 ]
  br label %1113

1113:                                             ; preds = %1110, %1113
  %1114 = phi i64 [ %1119, %1113 ], [ %1111, %1110 ]
  %1115 = phi i32 [ %1118, %1113 ], [ %1112, %1110 ]
  %1116 = getelementptr inbounds i32, i32* %1022, i64 %1114
  %1117 = load i32, i32* %1116, align 4
  %1118 = mul nsw i32 %1117, %1115
  %1119 = add nuw nsw i64 %1114, 1
  %1120 = icmp eq i64 %1119, %1023
  br i1 %1120, label %1121, label %1113, !llvm.loop !97

1121:                                             ; preds = %1113, %1100, %1018
  %1122 = phi i32 [ 1, %1018 ], [ %1108, %1100 ], [ %1118, %1113 ]
  br i1 %33, label %1127, label %1123

1123:                                             ; preds = %1121
  %1124 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1
  %1125 = bitcast %union.TfLitePtrUnion* %1124 to i8**
  %1126 = load i8*, i8** %1125, align 8
  br label %1127

1127:                                             ; preds = %1121, %1123
  %1128 = phi i8* [ %1126, %1123 ], [ null, %1121 ]
  %1129 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 0
  %1130 = load i32, i32* %1129, align 8
  switch i32 %1130, label %1382 [
    i32 9, label %1131
    i32 3, label %1198
  ]

1131:                                             ; preds = %1127
  %1132 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 0
  %1133 = load i32, i32* %1132, align 4
  %1134 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 1
  %1135 = load i32, i32* %1134, align 4
  %1136 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 1
  %1137 = load i32, i32* %1136, align 4
  %1138 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 1
  %1139 = load i32, i32* %1138, align 4
  br i1 %64, label %1144, label %1140

1140:                                             ; preds = %1131
  %1141 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %1142 = bitcast %union.TfLitePtrUnion* %1141 to i8**
  %1143 = load i8*, i8** %1142, align 8
  br label %1144

1144:                                             ; preds = %1131, %1140
  %1145 = phi i8* [ %1143, %1140 ], [ null, %1131 ]
  %1146 = icmp sgt i32 %1122, 0
  br i1 %1146, label %1147, label %1769

1147:                                             ; preds = %1144
  %1148 = icmp sgt i32 %1135, 0
  %1149 = sub nsw i32 0, %1135
  %1150 = select i1 %1148, i32 0, i32 %1149
  %1151 = shl i32 1, %1135
  %1152 = select i1 %1148, i32 %1151, i32 1
  %1153 = sext i32 %1133 to i64
  %1154 = icmp eq i32 %1133, -2147483648
  %1155 = zext i32 %1150 to i64
  %1156 = shl nsw i64 -1, %1155
  %1157 = trunc i64 %1156 to i32
  %1158 = xor i32 %1157, -1
  %1159 = ashr i32 %1158, 1
  %1160 = zext i32 %1122 to i64
  br label %1161

1161:                                             ; preds = %1180, %1147
  %1162 = phi i64 [ 0, %1147 ], [ %1196, %1180 ]
  %1163 = getelementptr inbounds i8, i8* %1128, i64 %1162
  %1164 = load i8, i8* %1163, align 1
  %1165 = sext i8 %1164 to i32
  %1166 = sub nsw i32 %1165, %1137
  %1167 = mul nsw i32 %1166, %1152
  %1168 = icmp eq i32 %1167, %1133
  br i1 %1168, label %1171, label %1169

1169:                                             ; preds = %1161
  %1170 = sext i32 %1167 to i64
  br label %1172

1171:                                             ; preds = %1161
  br i1 %1154, label %1180, label %1172

1172:                                             ; preds = %1171, %1169
  %1173 = phi i64 [ %1170, %1169 ], [ %1153, %1171 ]
  %1174 = mul nsw i64 %1173, %1153
  %1175 = icmp sgt i64 %1174, -1
  %1176 = select i1 %1175, i64 1073741824, i64 -1073741823
  %1177 = add nsw i64 %1176, %1174
  %1178 = sdiv i64 %1177, 2147483648
  %1179 = trunc i64 %1178 to i32
  br label %1180

1180:                                             ; preds = %1172, %1171
  %1181 = phi i32 [ %1179, %1172 ], [ 2147483647, %1171 ]
  %1182 = and i32 %1181, %1158
  %1183 = lshr i32 %1181, 31
  %1184 = add nsw i32 %1183, %1159
  %1185 = ashr i32 %1181, %1150
  %1186 = icmp sgt i32 %1182, %1184
  %1187 = zext i1 %1186 to i32
  %1188 = add i32 %1185, %1139
  %1189 = add i32 %1188, %1187
  %1190 = icmp slt i32 %1189, 127
  %1191 = select i1 %1190, i32 %1189, i32 127
  %1192 = icmp sgt i32 %1191, -128
  %1193 = select i1 %1192, i32 %1191, i32 -128
  %1194 = trunc i32 %1193 to i8
  %1195 = getelementptr inbounds i8, i8* %1145, i64 %1162
  store i8 %1194, i8* %1195, align 1
  %1196 = add nuw nsw i64 %1162, 1
  %1197 = icmp eq i64 %1196, %1160
  br i1 %1197, label %1769, label %1161

1198:                                             ; preds = %1127
  %1199 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 0
  %1200 = load i32, i32* %1199, align 4
  %1201 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 1
  %1202 = load i32, i32* %1201, align 4
  %1203 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 1
  %1204 = load i32, i32* %1203, align 4
  %1205 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 1
  %1206 = load i32, i32* %1205, align 4
  br i1 %64, label %1211, label %1207

1207:                                             ; preds = %1198
  %1208 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %1209 = bitcast %union.TfLitePtrUnion* %1208 to i8**
  %1210 = load i8*, i8** %1209, align 8
  br label %1211

1211:                                             ; preds = %1198, %1207
  %1212 = phi i8* [ %1210, %1207 ], [ null, %1198 ]
  %1213 = icmp eq i32 %1200, 1073741824
  %1214 = icmp eq i32 %1202, 1
  %1215 = and i1 %1213, %1214
  %1216 = sub nsw i32 %1204, %1206
  %1217 = icmp eq i32 %1216, -128
  %1218 = and i1 %1215, %1217
  %1219 = icmp sgt i32 %1122, 0
  %1220 = and i1 %1219, %1218
  br i1 %1220, label %1221, label %1330

1221:                                             ; preds = %1211
  %1222 = zext i32 %1122 to i64
  %1223 = icmp ult i32 %1122, 32
  br i1 %1223, label %1288, label %1224

1224:                                             ; preds = %1221
  %1225 = getelementptr i8, i8* %1212, i64 %1222
  %1226 = getelementptr i8, i8* %1128, i64 %1222
  %1227 = icmp ult i8* %1212, %1226
  %1228 = icmp ult i8* %1128, %1225
  %1229 = and i1 %1227, %1228
  br i1 %1229, label %1288, label %1230

1230:                                             ; preds = %1224
  %1231 = and i64 %1222, 4294967264
  %1232 = add nsw i64 %1231, -32
  %1233 = lshr exact i64 %1232, 5
  %1234 = add nuw nsw i64 %1233, 1
  %1235 = and i64 %1234, 1
  %1236 = icmp eq i64 %1232, 0
  br i1 %1236, label %1270, label %1237

1237:                                             ; preds = %1230
  %1238 = sub nuw nsw i64 %1234, %1235
  br label %1239

1239:                                             ; preds = %1239, %1237
  %1240 = phi i64 [ 0, %1237 ], [ %1267, %1239 ]
  %1241 = phi i64 [ %1238, %1237 ], [ %1268, %1239 ]
  %1242 = getelementptr inbounds i8, i8* %1128, i64 %1240
  %1243 = bitcast i8* %1242 to <16 x i8>*
  %1244 = load <16 x i8>, <16 x i8>* %1243, align 1, !alias.scope !98
  %1245 = getelementptr inbounds i8, i8* %1242, i64 16
  %1246 = bitcast i8* %1245 to <16 x i8>*
  %1247 = load <16 x i8>, <16 x i8>* %1246, align 1, !alias.scope !98
  %1248 = xor <16 x i8> %1244, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %1249 = xor <16 x i8> %1247, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %1250 = getelementptr inbounds i8, i8* %1212, i64 %1240
  %1251 = bitcast i8* %1250 to <16 x i8>*
  store <16 x i8> %1248, <16 x i8>* %1251, align 1, !alias.scope !101, !noalias !98
  %1252 = getelementptr inbounds i8, i8* %1250, i64 16
  %1253 = bitcast i8* %1252 to <16 x i8>*
  store <16 x i8> %1249, <16 x i8>* %1253, align 1, !alias.scope !101, !noalias !98
  %1254 = or i64 %1240, 32
  %1255 = getelementptr inbounds i8, i8* %1128, i64 %1254
  %1256 = bitcast i8* %1255 to <16 x i8>*
  %1257 = load <16 x i8>, <16 x i8>* %1256, align 1, !alias.scope !98
  %1258 = getelementptr inbounds i8, i8* %1255, i64 16
  %1259 = bitcast i8* %1258 to <16 x i8>*
  %1260 = load <16 x i8>, <16 x i8>* %1259, align 1, !alias.scope !98
  %1261 = xor <16 x i8> %1257, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %1262 = xor <16 x i8> %1260, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %1263 = getelementptr inbounds i8, i8* %1212, i64 %1254
  %1264 = bitcast i8* %1263 to <16 x i8>*
  store <16 x i8> %1261, <16 x i8>* %1264, align 1, !alias.scope !101, !noalias !98
  %1265 = getelementptr inbounds i8, i8* %1263, i64 16
  %1266 = bitcast i8* %1265 to <16 x i8>*
  store <16 x i8> %1262, <16 x i8>* %1266, align 1, !alias.scope !101, !noalias !98
  %1267 = add i64 %1240, 64
  %1268 = add i64 %1241, -2
  %1269 = icmp eq i64 %1268, 0
  br i1 %1269, label %1270, label %1239, !llvm.loop !103

1270:                                             ; preds = %1239, %1230
  %1271 = phi i64 [ 0, %1230 ], [ %1267, %1239 ]
  %1272 = icmp eq i64 %1235, 0
  br i1 %1272, label %1286, label %1273

1273:                                             ; preds = %1270
  %1274 = getelementptr inbounds i8, i8* %1128, i64 %1271
  %1275 = bitcast i8* %1274 to <16 x i8>*
  %1276 = load <16 x i8>, <16 x i8>* %1275, align 1, !alias.scope !98
  %1277 = getelementptr inbounds i8, i8* %1274, i64 16
  %1278 = bitcast i8* %1277 to <16 x i8>*
  %1279 = load <16 x i8>, <16 x i8>* %1278, align 1, !alias.scope !98
  %1280 = xor <16 x i8> %1276, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %1281 = xor <16 x i8> %1279, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %1282 = getelementptr inbounds i8, i8* %1212, i64 %1271
  %1283 = bitcast i8* %1282 to <16 x i8>*
  store <16 x i8> %1280, <16 x i8>* %1283, align 1, !alias.scope !101, !noalias !98
  %1284 = getelementptr inbounds i8, i8* %1282, i64 16
  %1285 = bitcast i8* %1284 to <16 x i8>*
  store <16 x i8> %1281, <16 x i8>* %1285, align 1, !alias.scope !101, !noalias !98
  br label %1286

1286:                                             ; preds = %1270, %1273
  %1287 = icmp eq i64 %1231, %1222
  br i1 %1287, label %1330, label %1288

1288:                                             ; preds = %1286, %1224, %1221
  %1289 = phi i64 [ 0, %1224 ], [ 0, %1221 ], [ %1231, %1286 ]
  %1290 = xor i64 %1289, -1
  %1291 = add nsw i64 %1290, %1222
  %1292 = and i64 %1222, 3
  %1293 = icmp eq i64 %1292, 0
  br i1 %1293, label %1304, label %1294

1294:                                             ; preds = %1288, %1294
  %1295 = phi i64 [ %1301, %1294 ], [ %1289, %1288 ]
  %1296 = phi i64 [ %1302, %1294 ], [ %1292, %1288 ]
  %1297 = getelementptr inbounds i8, i8* %1128, i64 %1295
  %1298 = load i8, i8* %1297, align 1
  %1299 = xor i8 %1298, -128
  %1300 = getelementptr inbounds i8, i8* %1212, i64 %1295
  store i8 %1299, i8* %1300, align 1
  %1301 = add nuw nsw i64 %1295, 1
  %1302 = add i64 %1296, -1
  %1303 = icmp eq i64 %1302, 0
  br i1 %1303, label %1304, label %1294, !llvm.loop !104

1304:                                             ; preds = %1294, %1288
  %1305 = phi i64 [ %1289, %1288 ], [ %1301, %1294 ]
  %1306 = icmp ult i64 %1291, 3
  br i1 %1306, label %1330, label %1307

1307:                                             ; preds = %1304, %1307
  %1308 = phi i64 [ %1328, %1307 ], [ %1305, %1304 ]
  %1309 = getelementptr inbounds i8, i8* %1128, i64 %1308
  %1310 = load i8, i8* %1309, align 1
  %1311 = xor i8 %1310, -128
  %1312 = getelementptr inbounds i8, i8* %1212, i64 %1308
  store i8 %1311, i8* %1312, align 1
  %1313 = add nuw nsw i64 %1308, 1
  %1314 = getelementptr inbounds i8, i8* %1128, i64 %1313
  %1315 = load i8, i8* %1314, align 1
  %1316 = xor i8 %1315, -128
  %1317 = getelementptr inbounds i8, i8* %1212, i64 %1313
  store i8 %1316, i8* %1317, align 1
  %1318 = add nuw nsw i64 %1308, 2
  %1319 = getelementptr inbounds i8, i8* %1128, i64 %1318
  %1320 = load i8, i8* %1319, align 1
  %1321 = xor i8 %1320, -128
  %1322 = getelementptr inbounds i8, i8* %1212, i64 %1318
  store i8 %1321, i8* %1322, align 1
  %1323 = add nuw nsw i64 %1308, 3
  %1324 = getelementptr inbounds i8, i8* %1128, i64 %1323
  %1325 = load i8, i8* %1324, align 1
  %1326 = xor i8 %1325, -128
  %1327 = getelementptr inbounds i8, i8* %1212, i64 %1323
  store i8 %1326, i8* %1327, align 1
  %1328 = add nuw nsw i64 %1308, 4
  %1329 = icmp eq i64 %1328, %1222
  br i1 %1329, label %1330, label %1307, !llvm.loop !105

1330:                                             ; preds = %1304, %1307, %1286, %1211
  br i1 %1219, label %1331, label %1769

1331:                                             ; preds = %1330
  %1332 = icmp sgt i32 %1202, 0
  %1333 = sub nsw i32 0, %1202
  %1334 = select i1 %1332, i32 0, i32 %1333
  %1335 = shl i32 1, %1202
  %1336 = select i1 %1332, i32 %1335, i32 1
  %1337 = sext i32 %1200 to i64
  %1338 = icmp eq i32 %1200, -2147483648
  %1339 = zext i32 %1334 to i64
  %1340 = shl nsw i64 -1, %1339
  %1341 = trunc i64 %1340 to i32
  %1342 = xor i32 %1341, -1
  %1343 = ashr i32 %1342, 1
  %1344 = zext i32 %1122 to i64
  br label %1345

1345:                                             ; preds = %1364, %1331
  %1346 = phi i64 [ 0, %1331 ], [ %1380, %1364 ]
  %1347 = getelementptr inbounds i8, i8* %1128, i64 %1346
  %1348 = load i8, i8* %1347, align 1
  %1349 = sext i8 %1348 to i32
  %1350 = sub nsw i32 %1349, %1204
  %1351 = mul nsw i32 %1350, %1336
  %1352 = icmp eq i32 %1351, %1200
  br i1 %1352, label %1355, label %1353

1353:                                             ; preds = %1345
  %1354 = sext i32 %1351 to i64
  br label %1356

1355:                                             ; preds = %1345
  br i1 %1338, label %1364, label %1356

1356:                                             ; preds = %1355, %1353
  %1357 = phi i64 [ %1354, %1353 ], [ %1337, %1355 ]
  %1358 = mul nsw i64 %1357, %1337
  %1359 = icmp sgt i64 %1358, -1
  %1360 = select i1 %1359, i64 1073741824, i64 -1073741823
  %1361 = add nsw i64 %1360, %1358
  %1362 = sdiv i64 %1361, 2147483648
  %1363 = trunc i64 %1362 to i32
  br label %1364

1364:                                             ; preds = %1356, %1355
  %1365 = phi i32 [ %1363, %1356 ], [ 2147483647, %1355 ]
  %1366 = and i32 %1365, %1342
  %1367 = lshr i32 %1365, 31
  %1368 = add nsw i32 %1367, %1343
  %1369 = ashr i32 %1365, %1334
  %1370 = icmp sgt i32 %1366, %1368
  %1371 = zext i1 %1370 to i32
  %1372 = add i32 %1369, %1206
  %1373 = add i32 %1372, %1371
  %1374 = icmp slt i32 %1373, 255
  %1375 = select i1 %1374, i32 %1373, i32 255
  %1376 = icmp sgt i32 %1375, 0
  %1377 = select i1 %1376, i32 %1375, i32 0
  %1378 = trunc i32 %1377 to i8
  %1379 = getelementptr inbounds i8, i8* %1212, i64 %1346
  store i8 %1378, i8* %1379, align 1
  %1380 = add nuw nsw i64 %1346, 1
  %1381 = icmp eq i64 %1380, %1344
  br i1 %1381, label %1769, label %1345

1382:                                             ; preds = %1127
  %1383 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1384 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1383, align 8
  %1385 = tail call i8* @TfLiteTypeGetName(i32 9) #9
  %1386 = tail call i8* @TfLiteTypeGetName(i32 %1130) #9
  tail call void (%struct.TfLiteContext*, i8*, ...) %1384(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.21, i64 0, i64 0), i8* %1385, i8* %1386) #9
  br label %1769

1387:                                             ; preds = %92
  %1388 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %1389 = icmp sgt i32 %62, 5
  br i1 %1389, label %1390, label %1393

1390:                                             ; preds = %1387
  %1391 = getelementptr inbounds %union.anon, %union.anon* %1388, i64 0, i32 0
  %1392 = load i32*, i32** %1391, align 8
  br label %1396

1393:                                             ; preds = %1387
  %1394 = bitcast %union.anon* %1388 to i32*
  %1395 = icmp sgt i32 %62, 0
  br i1 %1395, label %1396, label %1496

1396:                                             ; preds = %1393, %1390
  %1397 = phi i32* [ %1392, %1390 ], [ %1394, %1393 ]
  %1398 = zext i32 %62 to i64
  %1399 = icmp ult i32 %62, 8
  br i1 %1399, label %1485, label %1400

1400:                                             ; preds = %1396
  %1401 = and i64 %1398, 4294967288
  %1402 = add nsw i64 %1401, -8
  %1403 = lshr exact i64 %1402, 3
  %1404 = add nuw nsw i64 %1403, 1
  %1405 = and i64 %1404, 3
  %1406 = icmp ult i64 %1402, 24
  br i1 %1406, label %1452, label %1407

1407:                                             ; preds = %1400
  %1408 = sub nsw i64 %1404, %1405
  br label %1409

1409:                                             ; preds = %1409, %1407
  %1410 = phi i64 [ 0, %1407 ], [ %1449, %1409 ]
  %1411 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1407 ], [ %1447, %1409 ]
  %1412 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1407 ], [ %1448, %1409 ]
  %1413 = phi i64 [ %1408, %1407 ], [ %1450, %1409 ]
  %1414 = getelementptr inbounds i32, i32* %1397, i64 %1410
  %1415 = bitcast i32* %1414 to <4 x i32>*
  %1416 = load <4 x i32>, <4 x i32>* %1415, align 4
  %1417 = getelementptr inbounds i32, i32* %1414, i64 4
  %1418 = bitcast i32* %1417 to <4 x i32>*
  %1419 = load <4 x i32>, <4 x i32>* %1418, align 4
  %1420 = mul nsw <4 x i32> %1416, %1411
  %1421 = mul nsw <4 x i32> %1419, %1412
  %1422 = or i64 %1410, 8
  %1423 = getelementptr inbounds i32, i32* %1397, i64 %1422
  %1424 = bitcast i32* %1423 to <4 x i32>*
  %1425 = load <4 x i32>, <4 x i32>* %1424, align 4
  %1426 = getelementptr inbounds i32, i32* %1423, i64 4
  %1427 = bitcast i32* %1426 to <4 x i32>*
  %1428 = load <4 x i32>, <4 x i32>* %1427, align 4
  %1429 = mul nsw <4 x i32> %1425, %1420
  %1430 = mul nsw <4 x i32> %1428, %1421
  %1431 = or i64 %1410, 16
  %1432 = getelementptr inbounds i32, i32* %1397, i64 %1431
  %1433 = bitcast i32* %1432 to <4 x i32>*
  %1434 = load <4 x i32>, <4 x i32>* %1433, align 4
  %1435 = getelementptr inbounds i32, i32* %1432, i64 4
  %1436 = bitcast i32* %1435 to <4 x i32>*
  %1437 = load <4 x i32>, <4 x i32>* %1436, align 4
  %1438 = mul nsw <4 x i32> %1434, %1429
  %1439 = mul nsw <4 x i32> %1437, %1430
  %1440 = or i64 %1410, 24
  %1441 = getelementptr inbounds i32, i32* %1397, i64 %1440
  %1442 = bitcast i32* %1441 to <4 x i32>*
  %1443 = load <4 x i32>, <4 x i32>* %1442, align 4
  %1444 = getelementptr inbounds i32, i32* %1441, i64 4
  %1445 = bitcast i32* %1444 to <4 x i32>*
  %1446 = load <4 x i32>, <4 x i32>* %1445, align 4
  %1447 = mul nsw <4 x i32> %1443, %1438
  %1448 = mul nsw <4 x i32> %1446, %1439
  %1449 = add i64 %1410, 32
  %1450 = add i64 %1413, -4
  %1451 = icmp eq i64 %1450, 0
  br i1 %1451, label %1452, label %1409, !llvm.loop !106

1452:                                             ; preds = %1409, %1400
  %1453 = phi <4 x i32> [ undef, %1400 ], [ %1447, %1409 ]
  %1454 = phi <4 x i32> [ undef, %1400 ], [ %1448, %1409 ]
  %1455 = phi i64 [ 0, %1400 ], [ %1449, %1409 ]
  %1456 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1400 ], [ %1447, %1409 ]
  %1457 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1400 ], [ %1448, %1409 ]
  %1458 = icmp eq i64 %1405, 0
  br i1 %1458, label %1475, label %1459

1459:                                             ; preds = %1452, %1459
  %1460 = phi i64 [ %1472, %1459 ], [ %1455, %1452 ]
  %1461 = phi <4 x i32> [ %1470, %1459 ], [ %1456, %1452 ]
  %1462 = phi <4 x i32> [ %1471, %1459 ], [ %1457, %1452 ]
  %1463 = phi i64 [ %1473, %1459 ], [ %1405, %1452 ]
  %1464 = getelementptr inbounds i32, i32* %1397, i64 %1460
  %1465 = bitcast i32* %1464 to <4 x i32>*
  %1466 = load <4 x i32>, <4 x i32>* %1465, align 4
  %1467 = getelementptr inbounds i32, i32* %1464, i64 4
  %1468 = bitcast i32* %1467 to <4 x i32>*
  %1469 = load <4 x i32>, <4 x i32>* %1468, align 4
  %1470 = mul nsw <4 x i32> %1466, %1461
  %1471 = mul nsw <4 x i32> %1469, %1462
  %1472 = add i64 %1460, 8
  %1473 = add i64 %1463, -1
  %1474 = icmp eq i64 %1473, 0
  br i1 %1474, label %1475, label %1459, !llvm.loop !107

1475:                                             ; preds = %1459, %1452
  %1476 = phi <4 x i32> [ %1453, %1452 ], [ %1470, %1459 ]
  %1477 = phi <4 x i32> [ %1454, %1452 ], [ %1471, %1459 ]
  %1478 = mul <4 x i32> %1477, %1476
  %1479 = shufflevector <4 x i32> %1478, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1480 = mul <4 x i32> %1478, %1479
  %1481 = shufflevector <4 x i32> %1480, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1482 = mul <4 x i32> %1480, %1481
  %1483 = extractelement <4 x i32> %1482, i32 0
  %1484 = icmp eq i64 %1401, %1398
  br i1 %1484, label %1496, label %1485

1485:                                             ; preds = %1475, %1396
  %1486 = phi i64 [ 0, %1396 ], [ %1401, %1475 ]
  %1487 = phi i32 [ 1, %1396 ], [ %1483, %1475 ]
  br label %1488

1488:                                             ; preds = %1485, %1488
  %1489 = phi i64 [ %1494, %1488 ], [ %1486, %1485 ]
  %1490 = phi i32 [ %1493, %1488 ], [ %1487, %1485 ]
  %1491 = getelementptr inbounds i32, i32* %1397, i64 %1489
  %1492 = load i32, i32* %1491, align 4
  %1493 = mul nsw i32 %1492, %1490
  %1494 = add nuw nsw i64 %1489, 1
  %1495 = icmp eq i64 %1494, %1398
  br i1 %1495, label %1496, label %1488, !llvm.loop !108

1496:                                             ; preds = %1488, %1475, %1393
  %1497 = phi i32 [ 1, %1393 ], [ %1483, %1475 ], [ %1493, %1488 ]
  br i1 %33, label %1502, label %1498

1498:                                             ; preds = %1496
  %1499 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 1
  %1500 = bitcast %union.TfLitePtrUnion* %1499 to i8**
  %1501 = load i8*, i8** %1500, align 8
  br label %1502

1502:                                             ; preds = %1496, %1498
  %1503 = phi i8* [ %1501, %1498 ], [ null, %1496 ]
  %1504 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 0
  %1505 = load i32, i32* %1504, align 8
  switch i32 %1505, label %1757 [
    i32 9, label %1506
    i32 3, label %1690
  ]

1506:                                             ; preds = %1502
  %1507 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 0
  %1508 = load i32, i32* %1507, align 4
  %1509 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 1
  %1510 = load i32, i32* %1509, align 4
  %1511 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 1
  %1512 = load i32, i32* %1511, align 4
  %1513 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 1
  %1514 = load i32, i32* %1513, align 4
  br i1 %64, label %1519, label %1515

1515:                                             ; preds = %1506
  %1516 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %1517 = bitcast %union.TfLitePtrUnion* %1516 to i8**
  %1518 = load i8*, i8** %1517, align 8
  br label %1519

1519:                                             ; preds = %1506, %1515
  %1520 = phi i8* [ %1518, %1515 ], [ null, %1506 ]
  %1521 = icmp eq i32 %1508, 1073741824
  %1522 = icmp eq i32 %1510, 1
  %1523 = and i1 %1521, %1522
  %1524 = sub nsw i32 %1512, %1514
  %1525 = icmp eq i32 %1524, 128
  %1526 = and i1 %1523, %1525
  %1527 = icmp sgt i32 %1497, 0
  %1528 = and i1 %1527, %1526
  br i1 %1528, label %1529, label %1638

1529:                                             ; preds = %1519
  %1530 = zext i32 %1497 to i64
  %1531 = icmp ult i32 %1497, 32
  br i1 %1531, label %1596, label %1532

1532:                                             ; preds = %1529
  %1533 = getelementptr i8, i8* %1520, i64 %1530
  %1534 = getelementptr i8, i8* %1503, i64 %1530
  %1535 = icmp ult i8* %1520, %1534
  %1536 = icmp ult i8* %1503, %1533
  %1537 = and i1 %1535, %1536
  br i1 %1537, label %1596, label %1538

1538:                                             ; preds = %1532
  %1539 = and i64 %1530, 4294967264
  %1540 = add nsw i64 %1539, -32
  %1541 = lshr exact i64 %1540, 5
  %1542 = add nuw nsw i64 %1541, 1
  %1543 = and i64 %1542, 1
  %1544 = icmp eq i64 %1540, 0
  br i1 %1544, label %1578, label %1545

1545:                                             ; preds = %1538
  %1546 = sub nuw nsw i64 %1542, %1543
  br label %1547

1547:                                             ; preds = %1547, %1545
  %1548 = phi i64 [ 0, %1545 ], [ %1575, %1547 ]
  %1549 = phi i64 [ %1546, %1545 ], [ %1576, %1547 ]
  %1550 = getelementptr inbounds i8, i8* %1503, i64 %1548
  %1551 = bitcast i8* %1550 to <16 x i8>*
  %1552 = load <16 x i8>, <16 x i8>* %1551, align 1, !alias.scope !109
  %1553 = getelementptr inbounds i8, i8* %1550, i64 16
  %1554 = bitcast i8* %1553 to <16 x i8>*
  %1555 = load <16 x i8>, <16 x i8>* %1554, align 1, !alias.scope !109
  %1556 = xor <16 x i8> %1552, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %1557 = xor <16 x i8> %1555, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %1558 = getelementptr inbounds i8, i8* %1520, i64 %1548
  %1559 = bitcast i8* %1558 to <16 x i8>*
  store <16 x i8> %1556, <16 x i8>* %1559, align 1, !alias.scope !112, !noalias !109
  %1560 = getelementptr inbounds i8, i8* %1558, i64 16
  %1561 = bitcast i8* %1560 to <16 x i8>*
  store <16 x i8> %1557, <16 x i8>* %1561, align 1, !alias.scope !112, !noalias !109
  %1562 = or i64 %1548, 32
  %1563 = getelementptr inbounds i8, i8* %1503, i64 %1562
  %1564 = bitcast i8* %1563 to <16 x i8>*
  %1565 = load <16 x i8>, <16 x i8>* %1564, align 1, !alias.scope !109
  %1566 = getelementptr inbounds i8, i8* %1563, i64 16
  %1567 = bitcast i8* %1566 to <16 x i8>*
  %1568 = load <16 x i8>, <16 x i8>* %1567, align 1, !alias.scope !109
  %1569 = xor <16 x i8> %1565, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %1570 = xor <16 x i8> %1568, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %1571 = getelementptr inbounds i8, i8* %1520, i64 %1562
  %1572 = bitcast i8* %1571 to <16 x i8>*
  store <16 x i8> %1569, <16 x i8>* %1572, align 1, !alias.scope !112, !noalias !109
  %1573 = getelementptr inbounds i8, i8* %1571, i64 16
  %1574 = bitcast i8* %1573 to <16 x i8>*
  store <16 x i8> %1570, <16 x i8>* %1574, align 1, !alias.scope !112, !noalias !109
  %1575 = add i64 %1548, 64
  %1576 = add i64 %1549, -2
  %1577 = icmp eq i64 %1576, 0
  br i1 %1577, label %1578, label %1547, !llvm.loop !114

1578:                                             ; preds = %1547, %1538
  %1579 = phi i64 [ 0, %1538 ], [ %1575, %1547 ]
  %1580 = icmp eq i64 %1543, 0
  br i1 %1580, label %1594, label %1581

1581:                                             ; preds = %1578
  %1582 = getelementptr inbounds i8, i8* %1503, i64 %1579
  %1583 = bitcast i8* %1582 to <16 x i8>*
  %1584 = load <16 x i8>, <16 x i8>* %1583, align 1, !alias.scope !109
  %1585 = getelementptr inbounds i8, i8* %1582, i64 16
  %1586 = bitcast i8* %1585 to <16 x i8>*
  %1587 = load <16 x i8>, <16 x i8>* %1586, align 1, !alias.scope !109
  %1588 = xor <16 x i8> %1584, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %1589 = xor <16 x i8> %1587, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %1590 = getelementptr inbounds i8, i8* %1520, i64 %1579
  %1591 = bitcast i8* %1590 to <16 x i8>*
  store <16 x i8> %1588, <16 x i8>* %1591, align 1, !alias.scope !112, !noalias !109
  %1592 = getelementptr inbounds i8, i8* %1590, i64 16
  %1593 = bitcast i8* %1592 to <16 x i8>*
  store <16 x i8> %1589, <16 x i8>* %1593, align 1, !alias.scope !112, !noalias !109
  br label %1594

1594:                                             ; preds = %1578, %1581
  %1595 = icmp eq i64 %1539, %1530
  br i1 %1595, label %1638, label %1596

1596:                                             ; preds = %1594, %1532, %1529
  %1597 = phi i64 [ 0, %1532 ], [ 0, %1529 ], [ %1539, %1594 ]
  %1598 = xor i64 %1597, -1
  %1599 = add nsw i64 %1598, %1530
  %1600 = and i64 %1530, 3
  %1601 = icmp eq i64 %1600, 0
  br i1 %1601, label %1612, label %1602

1602:                                             ; preds = %1596, %1602
  %1603 = phi i64 [ %1609, %1602 ], [ %1597, %1596 ]
  %1604 = phi i64 [ %1610, %1602 ], [ %1600, %1596 ]
  %1605 = getelementptr inbounds i8, i8* %1503, i64 %1603
  %1606 = load i8, i8* %1605, align 1
  %1607 = xor i8 %1606, -128
  %1608 = getelementptr inbounds i8, i8* %1520, i64 %1603
  store i8 %1607, i8* %1608, align 1
  %1609 = add nuw nsw i64 %1603, 1
  %1610 = add i64 %1604, -1
  %1611 = icmp eq i64 %1610, 0
  br i1 %1611, label %1612, label %1602, !llvm.loop !115

1612:                                             ; preds = %1602, %1596
  %1613 = phi i64 [ %1597, %1596 ], [ %1609, %1602 ]
  %1614 = icmp ult i64 %1599, 3
  br i1 %1614, label %1638, label %1615

1615:                                             ; preds = %1612, %1615
  %1616 = phi i64 [ %1636, %1615 ], [ %1613, %1612 ]
  %1617 = getelementptr inbounds i8, i8* %1503, i64 %1616
  %1618 = load i8, i8* %1617, align 1
  %1619 = xor i8 %1618, -128
  %1620 = getelementptr inbounds i8, i8* %1520, i64 %1616
  store i8 %1619, i8* %1620, align 1
  %1621 = add nuw nsw i64 %1616, 1
  %1622 = getelementptr inbounds i8, i8* %1503, i64 %1621
  %1623 = load i8, i8* %1622, align 1
  %1624 = xor i8 %1623, -128
  %1625 = getelementptr inbounds i8, i8* %1520, i64 %1621
  store i8 %1624, i8* %1625, align 1
  %1626 = add nuw nsw i64 %1616, 2
  %1627 = getelementptr inbounds i8, i8* %1503, i64 %1626
  %1628 = load i8, i8* %1627, align 1
  %1629 = xor i8 %1628, -128
  %1630 = getelementptr inbounds i8, i8* %1520, i64 %1626
  store i8 %1629, i8* %1630, align 1
  %1631 = add nuw nsw i64 %1616, 3
  %1632 = getelementptr inbounds i8, i8* %1503, i64 %1631
  %1633 = load i8, i8* %1632, align 1
  %1634 = xor i8 %1633, -128
  %1635 = getelementptr inbounds i8, i8* %1520, i64 %1631
  store i8 %1634, i8* %1635, align 1
  %1636 = add nuw nsw i64 %1616, 4
  %1637 = icmp eq i64 %1636, %1530
  br i1 %1637, label %1638, label %1615, !llvm.loop !116

1638:                                             ; preds = %1612, %1615, %1594, %1519
  br i1 %1527, label %1639, label %1769

1639:                                             ; preds = %1638
  %1640 = icmp sgt i32 %1510, 0
  %1641 = sub nsw i32 0, %1510
  %1642 = select i1 %1640, i32 0, i32 %1641
  %1643 = shl i32 1, %1510
  %1644 = select i1 %1640, i32 %1643, i32 1
  %1645 = sext i32 %1508 to i64
  %1646 = icmp eq i32 %1508, -2147483648
  %1647 = zext i32 %1642 to i64
  %1648 = shl nsw i64 -1, %1647
  %1649 = trunc i64 %1648 to i32
  %1650 = xor i32 %1649, -1
  %1651 = ashr i32 %1650, 1
  %1652 = zext i32 %1497 to i64
  br label %1653

1653:                                             ; preds = %1672, %1639
  %1654 = phi i64 [ 0, %1639 ], [ %1688, %1672 ]
  %1655 = getelementptr inbounds i8, i8* %1503, i64 %1654
  %1656 = load i8, i8* %1655, align 1
  %1657 = zext i8 %1656 to i32
  %1658 = sub nsw i32 %1657, %1512
  %1659 = mul nsw i32 %1658, %1644
  %1660 = icmp eq i32 %1659, %1508
  br i1 %1660, label %1663, label %1661

1661:                                             ; preds = %1653
  %1662 = sext i32 %1659 to i64
  br label %1664

1663:                                             ; preds = %1653
  br i1 %1646, label %1672, label %1664

1664:                                             ; preds = %1663, %1661
  %1665 = phi i64 [ %1662, %1661 ], [ %1645, %1663 ]
  %1666 = mul nsw i64 %1665, %1645
  %1667 = icmp sgt i64 %1666, -1
  %1668 = select i1 %1667, i64 1073741824, i64 -1073741823
  %1669 = add nsw i64 %1668, %1666
  %1670 = sdiv i64 %1669, 2147483648
  %1671 = trunc i64 %1670 to i32
  br label %1672

1672:                                             ; preds = %1664, %1663
  %1673 = phi i32 [ %1671, %1664 ], [ 2147483647, %1663 ]
  %1674 = and i32 %1673, %1650
  %1675 = lshr i32 %1673, 31
  %1676 = add nsw i32 %1675, %1651
  %1677 = ashr i32 %1673, %1642
  %1678 = icmp sgt i32 %1674, %1676
  %1679 = zext i1 %1678 to i32
  %1680 = add i32 %1677, %1514
  %1681 = add i32 %1680, %1679
  %1682 = icmp slt i32 %1681, 127
  %1683 = select i1 %1682, i32 %1681, i32 127
  %1684 = icmp sgt i32 %1683, -128
  %1685 = select i1 %1684, i32 %1683, i32 -128
  %1686 = trunc i32 %1685 to i8
  %1687 = getelementptr inbounds i8, i8* %1520, i64 %1654
  store i8 %1686, i8* %1687, align 1
  %1688 = add nuw nsw i64 %1654, 1
  %1689 = icmp eq i64 %1688, %1652
  br i1 %1689, label %1769, label %1653

1690:                                             ; preds = %1502
  %1691 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 0
  %1692 = load i32, i32* %1691, align 4
  %1693 = getelementptr inbounds %"struct.tflite::ops::builtin::quantize::OpData", %"struct.tflite::ops::builtin::quantize::OpData"* %7, i64 0, i32 1
  %1694 = load i32, i32* %1693, align 4
  %1695 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %19, i64 0, i32 3, i32 1
  %1696 = load i32, i32* %1695, align 4
  %1697 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 3, i32 1
  %1698 = load i32, i32* %1697, align 4
  br i1 %64, label %1703, label %1699

1699:                                             ; preds = %1690
  %1700 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %1701 = bitcast %union.TfLitePtrUnion* %1700 to i8**
  %1702 = load i8*, i8** %1701, align 8
  br label %1703

1703:                                             ; preds = %1690, %1699
  %1704 = phi i8* [ %1702, %1699 ], [ null, %1690 ]
  %1705 = icmp sgt i32 %1497, 0
  br i1 %1705, label %1706, label %1769

1706:                                             ; preds = %1703
  %1707 = icmp sgt i32 %1694, 0
  %1708 = sub nsw i32 0, %1694
  %1709 = select i1 %1707, i32 0, i32 %1708
  %1710 = shl i32 1, %1694
  %1711 = select i1 %1707, i32 %1710, i32 1
  %1712 = sext i32 %1692 to i64
  %1713 = icmp eq i32 %1692, -2147483648
  %1714 = zext i32 %1709 to i64
  %1715 = shl nsw i64 -1, %1714
  %1716 = trunc i64 %1715 to i32
  %1717 = xor i32 %1716, -1
  %1718 = ashr i32 %1717, 1
  %1719 = zext i32 %1497 to i64
  br label %1720

1720:                                             ; preds = %1739, %1706
  %1721 = phi i64 [ 0, %1706 ], [ %1755, %1739 ]
  %1722 = getelementptr inbounds i8, i8* %1503, i64 %1721
  %1723 = load i8, i8* %1722, align 1
  %1724 = zext i8 %1723 to i32
  %1725 = sub nsw i32 %1724, %1696
  %1726 = mul nsw i32 %1725, %1711
  %1727 = icmp eq i32 %1726, %1692
  br i1 %1727, label %1730, label %1728

1728:                                             ; preds = %1720
  %1729 = sext i32 %1726 to i64
  br label %1731

1730:                                             ; preds = %1720
  br i1 %1713, label %1739, label %1731

1731:                                             ; preds = %1730, %1728
  %1732 = phi i64 [ %1729, %1728 ], [ %1712, %1730 ]
  %1733 = mul nsw i64 %1732, %1712
  %1734 = icmp sgt i64 %1733, -1
  %1735 = select i1 %1734, i64 1073741824, i64 -1073741823
  %1736 = add nsw i64 %1735, %1733
  %1737 = sdiv i64 %1736, 2147483648
  %1738 = trunc i64 %1737 to i32
  br label %1739

1739:                                             ; preds = %1731, %1730
  %1740 = phi i32 [ %1738, %1731 ], [ 2147483647, %1730 ]
  %1741 = and i32 %1740, %1717
  %1742 = lshr i32 %1740, 31
  %1743 = add nsw i32 %1742, %1718
  %1744 = ashr i32 %1740, %1709
  %1745 = icmp sgt i32 %1741, %1743
  %1746 = zext i1 %1745 to i32
  %1747 = add i32 %1744, %1698
  %1748 = add i32 %1747, %1746
  %1749 = icmp slt i32 %1748, 255
  %1750 = select i1 %1749, i32 %1748, i32 255
  %1751 = icmp sgt i32 %1750, 0
  %1752 = select i1 %1751, i32 %1750, i32 0
  %1753 = trunc i32 %1752 to i8
  %1754 = getelementptr inbounds i8, i8* %1704, i64 %1721
  store i8 %1753, i8* %1754, align 1
  %1755 = add nuw nsw i64 %1721, 1
  %1756 = icmp eq i64 %1755, %1719
  br i1 %1756, label %1769, label %1720

1757:                                             ; preds = %1502
  %1758 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1759 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1758, align 8
  %1760 = tail call i8* @TfLiteTypeGetName(i32 3) #9
  %1761 = tail call i8* @TfLiteTypeGetName(i32 %1505) #9
  tail call void (%struct.TfLiteContext*, i8*, ...) %1759(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.21, i64 0, i64 0), i8* %1760, i8* %1761) #9
  br label %1769

1762:                                             ; preds = %92
  %1763 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 0
  %1764 = load i32, i32* %1763, align 8
  %1765 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1766 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1765, align 8
  %1767 = tail call i8* @TfLiteTypeGetName(i32 %95) #9
  %1768 = tail call i8* @TfLiteTypeGetName(i32 %1764) #9
  tail call void (%struct.TfLiteContext*, i8*, ...) %1766(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.21, i64 0, i64 0), i8* %1767, i8* %1768) #9
  br label %1769

1769:                                             ; preds = %1739, %1672, %1364, %1180, %989, %806, %617, %441, %268, %613, %437, %264, %1703, %1638, %1330, %1144, %953, %770, %633, %226, %399, %574, %1757, %1382, %1762, %1007
  %1770 = phi i32 [ 1, %1762 ], [ 1, %1007 ], [ 1, %1382 ], [ 1, %1757 ], [ 1, %633 ], [ 0, %226 ], [ 0, %399 ], [ 0, %574 ], [ 0, %770 ], [ 0, %953 ], [ 0, %1144 ], [ 0, %1330 ], [ 0, %1638 ], [ 0, %1703 ], [ 0, %264 ], [ 0, %437 ], [ 0, %613 ], [ 0, %268 ], [ 0, %441 ], [ 0, %617 ], [ 0, %806 ], [ 0, %989 ], [ 0, %1180 ], [ 0, %1364 ], [ 0, %1672 ], [ 0, %1739 ]
  %1771 = icmp sgt i32 %93, 5
  br i1 %1771, label %1772, label %1778

1772:                                             ; preds = %1769
  %1773 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %1774 = load i32*, i32** %1773, align 8
  %1775 = icmp eq i32* %1774, null
  br i1 %1775, label %1778, label %1776

1776:                                             ; preds = %1772
  %1777 = bitcast i32* %1774 to i8*
  tail call void @_ZdaPv(i8* %1777) #8
  br label %1778

1778:                                             ; preds = %1769, %1772, %1776
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %63) #9
  %1779 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %1780 = load i32, i32* %1779, align 8
  %1781 = icmp sgt i32 %1780, 5
  br i1 %1781, label %1782, label %1788

1782:                                             ; preds = %1778
  %1783 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %1784 = load i32*, i32** %1783, align 8
  %1785 = icmp eq i32* %1784, null
  br i1 %1785, label %1788, label %1786

1786:                                             ; preds = %1782
  %1787 = bitcast i32* %1784 to i8*
  tail call void @_ZdaPv(i8* %1787) #8
  br label %1788

1788:                                             ; preds = %1778, %1782, %1786
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %32) #9
  ret i32 %1770
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin17Register_QUANTIZEEv() local_unnamed_addr #6 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin21Register_QUANTIZE_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #7

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind readnone speculatable
declare <4 x double> @llvm.round.v4f64(<4 x double>) #7

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.round.v4f32(<4 x float>) #7

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { builtin nounwind }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!4 = distinct !{!4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!7 = distinct !{!7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !13, !9}
!13 = !{!"llvm.loop.unroll.runtime.disable"}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !9}
!20 = distinct !{!20, !9}
!21 = distinct !{!21, !9}
!22 = distinct !{!22, !11}
!23 = distinct !{!23, !13, !9}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !9}
!30 = distinct !{!30, !9}
!31 = distinct !{!31, !9}
!32 = distinct !{!32, !11}
!33 = distinct !{!33, !13, !9}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = distinct !{!39, !9}
!40 = distinct !{!40, !9}
!41 = distinct !{!41, !9}
!42 = distinct !{!42, !11}
!43 = distinct !{!43, !13, !9}
!44 = distinct !{!44, !9}
!45 = distinct !{!45, !11}
!46 = distinct !{!46, !13, !9}
!47 = distinct !{!47, !9}
!48 = distinct !{!48, !11}
!49 = distinct !{!49, !13, !9}
!50 = distinct !{!50, !9}
!51 = distinct !{!51, !11}
!52 = distinct !{!52, !13, !9}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!55 = distinct !{!55, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!58 = distinct !{!58, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!59 = distinct !{!59, !9}
!60 = distinct !{!60, !11}
!61 = distinct !{!61, !13, !9}
!62 = !{!63}
!63 = distinct !{!63, !64}
!64 = distinct !{!64, !"LVerDomain"}
!65 = !{!66}
!66 = distinct !{!66, !64}
!67 = distinct !{!67, !9}
!68 = distinct !{!68, !9}
!69 = distinct !{!69, !9}
!70 = distinct !{!70, !11}
!71 = distinct !{!71, !13, !9}
!72 = !{!73}
!73 = distinct !{!73, !74}
!74 = distinct !{!74, !"LVerDomain"}
!75 = !{!76}
!76 = distinct !{!76, !74}
!77 = distinct !{!77, !9}
!78 = distinct !{!78, !9}
!79 = distinct !{!79, !9}
!80 = distinct !{!80, !11}
!81 = distinct !{!81, !13, !9}
!82 = !{!83}
!83 = distinct !{!83, !84}
!84 = distinct !{!84, !"LVerDomain"}
!85 = !{!86}
!86 = distinct !{!86, !84}
!87 = distinct !{!87, !9}
!88 = distinct !{!88, !9}
!89 = distinct !{!89, !9}
!90 = distinct !{!90, !11}
!91 = distinct !{!91, !13, !9}
!92 = distinct !{!92, !9}
!93 = distinct !{!93, !11}
!94 = distinct !{!94, !13, !9}
!95 = distinct !{!95, !9}
!96 = distinct !{!96, !11}
!97 = distinct !{!97, !13, !9}
!98 = !{!99}
!99 = distinct !{!99, !100}
!100 = distinct !{!100, !"LVerDomain"}
!101 = !{!102}
!102 = distinct !{!102, !100}
!103 = distinct !{!103, !9}
!104 = distinct !{!104, !11}
!105 = distinct !{!105, !9}
!106 = distinct !{!106, !9}
!107 = distinct !{!107, !11}
!108 = distinct !{!108, !13, !9}
!109 = !{!110}
!110 = distinct !{!110, !111}
!111 = distinct !{!111, !"LVerDomain"}
!112 = !{!113}
!113 = distinct !{!113, !111}
!114 = distinct !{!114, !9}
!115 = distinct !{!115, !11}
!116 = distinct !{!116, !9}
