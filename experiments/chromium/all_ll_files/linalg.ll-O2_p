; ModuleID = '../../third_party/libjxl/src/lib/jxl/linalg.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/linalg.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { double*, double*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { double* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.jxl::Plane"* }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.16" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair"**, %"struct.std::__1::pair"**, %"struct.std::__1::pair"**, %"class.std::__1::__compressed_pair.11" }
%"struct.std::__1::pair" = type { i32, i32 }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::pair"** }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { i64 }
%"struct.std::__1::__split_buffer.28" = type { %"struct.std::__1::pair"**, %"struct.std::__1::pair"**, %"struct.std::__1::pair"**, %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.12", %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.std::__1::allocator.14"* }
%"class.std::__1::allocator.14" = type { i8 }

$_ZN3jxl9CopyImageIdEENS_5PlaneIT_EERKS3_ = comdat any

$_ZN3jxl7LinCombIdEENS_5PlaneIT_EES2_RKS3_S2_S5_ = comdat any

$_ZN3jxl6MatMulIdddEENS_5PlaneIT_EERKNS1_IT0_EERKNS1_IT1_EE = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIdEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_ = comdat any

$_ZNSt3__15dequeINS_4pairIiiEENS_9allocatorIS2_EEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPNS_4pairIiiEENS_9allocatorIS3_EEE9push_backEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPNS_4pairIiiEENS_9allocatorIS3_EEE10push_frontEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPNS_4pairIiiEERNS_9allocatorIS3_EEE10push_frontERKS3_ = comdat any

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"../../third_party/libjxl/src/lib/jxl/linalg.cc\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"A.xsize() == A.ysize()\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"std::abs(A.Row(i)[j] - A.Row(j)[i]) < 1e-15\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"U->xsize() == U->ysize()\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"m1 - m0 > 2\00", align 1
@.str.6 = private unnamed_addr constant [46 x i8] c"../../third_party/libjxl/src/lib/jxl/linalg.h\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"a.ysize() == 1\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"b.ysize() == 1\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"a.xsize() == b.xsize()\00", align 1
@.str.11 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/image_ops.h\00", align 1
@.str.12 = private unnamed_addr constant [20 x i8] c"SameSize(from, *to)\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"A.ysize() == B.xsize()\00", align 1
@.str.14 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.15 = private unnamed_addr constant [24 x i8] c"xsize == image2.xsize()\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"ysize == image2.ysize()\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl15AssertSymmetricERKNS_5PlaneIdEE(%"class.jxl::Plane"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %3, %6
  br i1 %7, label %8, label %15

8:                                                ; preds = %1
  %9 = icmp eq i32 %3, 0
  br i1 %9, label %20, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %14 = load i64, i64* %13, align 8
  br label %21

15:                                               ; preds = %1
  %16 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 32, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0)) #9
  %17 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

18:                                               ; preds = %32, %21
  %19 = icmp eq i64 %23, %4
  br i1 %19, label %20, label %21

20:                                               ; preds = %18, %8
  ret void

21:                                               ; preds = %18, %10
  %22 = phi i64 [ 0, %10 ], [ %23, %18 ]
  %23 = add nuw nsw i64 %22, 1
  %24 = icmp ult i64 %23, %4
  br i1 %24, label %25, label %18

25:                                               ; preds = %21
  %26 = mul i64 %14, %22
  %27 = getelementptr inbounds i8, i8* %12, i64 %26
  %28 = ptrtoint i8* %27 to i64
  %29 = and i64 %28, 63
  %30 = icmp eq i64 %29, 0
  tail call void @llvm.assume(i1 %30) #9
  %31 = bitcast i8* %27 to double*
  br label %34

32:                                               ; preds = %34
  %33 = icmp eq i64 %49, %4
  br i1 %33, label %18, label %34

34:                                               ; preds = %32, %25
  %35 = phi i64 [ %23, %25 ], [ %49, %32 ]
  %36 = getelementptr inbounds double, double* %31, i64 %35
  %37 = load double, double* %36, align 8
  %38 = mul i64 %14, %35
  %39 = getelementptr inbounds i8, i8* %12, i64 %38
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #9
  %43 = bitcast i8* %39 to double*
  %44 = getelementptr inbounds double, double* %43, i64 %22
  %45 = load double, double* %44, align 8
  %46 = fsub double %37, %45
  %47 = tail call double @llvm.fabs.f64(double %46) #9
  %48 = fcmp olt double %47, 1.000000e-15
  %49 = add nuw nsw i64 %35, 1
  br i1 %48, label %32, label %50

50:                                               ; preds = %34
  %51 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 35, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0)) #9
  %52 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN3jxl14Diagonalize2x2EdddPdS0_(double, double, double, double* nocapture, double* nocapture) local_unnamed_addr #4 {
  %6 = tail call double @llvm.fabs.f64(double %2) #9
  %7 = fcmp olt double %6, 1.000000e-15
  br i1 %7, label %8, label %9

8:                                                ; preds = %5
  store double 1.000000e+00, double* %3, align 8
  br label %19

9:                                                ; preds = %5
  %10 = fmul double %2, 2.000000e+00
  %11 = fsub double %1, %0
  %12 = tail call double @atan2(double %10, double %11) #9
  %13 = fcmp ogt double %2, 0.000000e+00
  %14 = fmul double %12, 5.000000e-01
  %15 = fadd double %14, 0x400921FB54442D18
  %16 = select i1 %13, double %14, double %15
  %17 = tail call double @cos(double %16) #9
  store double %17, double* %3, align 8
  %18 = tail call double @sin(double %16) #9
  br label %19

19:                                               ; preds = %9, %8
  %20 = phi double [ %18, %9 ], [ 0.000000e+00, %8 ]
  store double %20, double* %4, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare double @atan2(double, double) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl14GivensRotationEddPdS0_(double, double, double* nocapture, double* nocapture) local_unnamed_addr #0 {
  %5 = fcmp oeq double %1, 0.000000e+00
  br i1 %5, label %6, label %9

6:                                                ; preds = %4
  %7 = fcmp olt double %0, 0.000000e+00
  %8 = select i1 %7, double -1.000000e+00, double 1.000000e+00
  store double %8, double* %2, align 8
  br label %15

9:                                                ; preds = %4
  %10 = tail call double @hypot(double %0, double %1) #9
  %11 = fdiv double 1.000000e+00, %10
  %12 = fmul double %11, %0
  store double %12, double* %2, align 8
  %13 = fmul double %11, %1
  %14 = fsub double -0.000000e+00, %13
  br label %15

15:                                               ; preds = %9, %6
  %16 = phi double [ %14, %9 ], [ 0.000000e+00, %6 ]
  store double %16, double* %3, align 8
  ret void
}

; Function Attrs: nounwind
declare double @hypot(double, double) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl16RotateMatrixColsEPNS_5PlaneIdEEiidd(%"class.jxl::Plane"* noalias nocapture readonly, i32, i32, double, double) local_unnamed_addr #0 {
  %6 = alloca %"class.std::__1::vector", align 8
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %9, %12
  br i1 %13, label %17, label %14

14:                                               ; preds = %5
  %15 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 68, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0)) #9
  %16 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

17:                                               ; preds = %5
  %18 = sext i32 %1 to i64
  %19 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %22 = load i64, i64* %21, align 8
  %23 = mul i64 %22, %18
  %24 = getelementptr inbounds i8, i8* %20, i64 %23
  %25 = ptrtoint i8* %24 to i64
  %26 = and i64 %25, 63
  %27 = icmp eq i64 %26, 0
  tail call void @llvm.assume(i1 %27) #9
  %28 = bitcast i8* %24 to double*
  %29 = sext i32 %2 to i64
  %30 = mul i64 %22, %29
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #9
  %35 = bitcast i8* %31 to double*
  %36 = bitcast %"class.std::__1::vector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #9
  %37 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %38 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %39 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 0, i64 24, i1 false) #9
  %40 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %40) #9
  %41 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %42 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %43 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 24, i1 false) #9
  %44 = bitcast double** %39 to i64*
  %45 = bitcast %"class.std::__1::vector"* %6 to i64*
  %46 = icmp eq i32 %9, 0
  br i1 %46, label %227, label %47

47:                                               ; preds = %17
  %48 = bitcast double** %38 to i64*
  %49 = shl nuw nsw i64 %10, 3
  %50 = tail call i8* @_Znwm(i64 %49) #14
  %51 = bitcast i8* %50 to double*
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds double, double* %51, i64 %10
  %54 = ptrtoint double* %53 to i64
  %55 = ptrtoint i8* %50 to i64
  store i64 %55, i64* %45, align 8
  store i64 %52, i64* %48, align 8
  store i64 %54, i64* %44, align 8
  %56 = bitcast double** %43 to i64*
  %57 = bitcast %"class.std::__1::vector"* %7 to i64*
  %58 = bitcast double** %42 to i64*
  %59 = shl nuw nsw i64 %10, 3
  %60 = tail call i8* @_Znwm(i64 %59) #14
  %61 = bitcast i8* %60 to double*
  %62 = ptrtoint i8* %60 to i64
  %63 = getelementptr inbounds double, double* %61, i64 %10
  %64 = ptrtoint double* %63 to i64
  %65 = ptrtoint i8* %60 to i64
  store i64 %65, i64* %57, align 8
  store i64 %62, i64* %58, align 8
  store i64 %64, i64* %56, align 8
  %66 = bitcast double** %38 to i64*
  %67 = bitcast double** %42 to i64*
  br label %68

68:                                               ; preds = %207, %47
  %69 = phi i64 [ %62, %47 ], [ %198, %207 ]
  %70 = phi double* [ %61, %47 ], [ %199, %207 ]
  %71 = phi i64 [ %52, %47 ], [ %210, %207 ]
  %72 = phi double* [ %53, %47 ], [ %209, %207 ]
  %73 = phi double* [ %51, %47 ], [ %208, %207 ]
  %74 = phi i64 [ 0, %47 ], [ %200, %207 ]
  %75 = getelementptr inbounds double, double* %28, i64 %74
  %76 = load double, double* %75, align 8
  %77 = fmul double %76, %3
  %78 = getelementptr inbounds double, double* %35, i64 %74
  %79 = load double, double* %78, align 8
  %80 = fmul double %79, %4
  %81 = fsub double %77, %80
  %82 = icmp ult double* %73, %72
  %83 = ptrtoint double* %72 to i64
  br i1 %82, label %84, label %89

84:                                               ; preds = %68
  store double %81, double* %73, align 8
  %85 = getelementptr inbounds double, double* %73, i64 1
  %86 = ptrtoint double* %85 to i64
  store i64 %86, i64* %66, align 8
  %87 = load double*, double** %42, align 8
  %88 = ptrtoint double* %87 to i64
  br label %136

89:                                               ; preds = %68
  %90 = ptrtoint double* %73 to i64
  %91 = load i64, i64* %45, align 8
  %92 = sub i64 %90, %91
  %93 = ashr exact i64 %92, 3
  %94 = add nsw i64 %93, 1
  %95 = icmp ugt i64 %94, 2305843009213693951
  br i1 %95, label %96, label %98

96:                                               ; preds = %89
  %97 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %97) #13
  unreachable

98:                                               ; preds = %89
  %99 = sub i64 %83, %91
  %100 = ashr exact i64 %99, 3
  %101 = icmp ult i64 %100, 1152921504606846975
  br i1 %101, label %102, label %110

102:                                              ; preds = %98
  %103 = ashr exact i64 %99, 2
  %104 = icmp ult i64 %103, %94
  %105 = select i1 %104, i64 %94, i64 %103
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %115, label %107

107:                                              ; preds = %102
  %108 = icmp ugt i64 %105, 2305843009213693951
  br i1 %108, label %109, label %110

109:                                              ; preds = %107
  tail call void @abort() #13
  unreachable

110:                                              ; preds = %107, %98
  %111 = phi i64 [ %105, %107 ], [ 2305843009213693951, %98 ]
  %112 = shl i64 %111, 3
  %113 = tail call i8* @_Znwm(i64 %112) #14
  %114 = bitcast i8* %113 to double*
  br label %115

115:                                              ; preds = %110, %102
  %116 = phi i64 [ %111, %110 ], [ 0, %102 ]
  %117 = phi double* [ %114, %110 ], [ null, %102 ]
  %118 = getelementptr inbounds double, double* %117, i64 %93
  %119 = getelementptr inbounds double, double* %117, i64 %116
  %120 = ptrtoint double* %119 to i64
  store double %81, double* %118, align 8
  %121 = getelementptr inbounds double, double* %118, i64 1
  %122 = ptrtoint double* %121 to i64
  %123 = sub i64 %71, %91
  %124 = ashr exact i64 %123, 3
  %125 = sub nsw i64 0, %124
  %126 = getelementptr inbounds double, double* %118, i64 %125
  %127 = ptrtoint double* %126 to i64
  %128 = icmp sgt i64 %123, 0
  br i1 %128, label %129, label %132

129:                                              ; preds = %115
  %130 = bitcast double* %126 to i8*
  %131 = inttoptr i64 %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %130, i8* align 8 %131, i64 %123, i1 false) #9
  br label %132

132:                                              ; preds = %129, %115
  store i64 %127, i64* %45, align 8
  store i64 %122, i64* %66, align 8
  store i64 %120, i64* %44, align 8
  %133 = icmp eq i64 %91, 0
  br i1 %133, label %136, label %134

134:                                              ; preds = %132
  %135 = inttoptr i64 %91 to i8*
  tail call void @_ZdlPv(i8* %135) #14
  br label %136

136:                                              ; preds = %84, %132, %134
  %137 = phi i64 [ %88, %84 ], [ %69, %132 ], [ %69, %134 ]
  %138 = phi double* [ %87, %84 ], [ %70, %132 ], [ %70, %134 ]
  %139 = load double, double* %75, align 8
  %140 = fmul double %139, %4
  %141 = load double, double* %78, align 8
  %142 = fmul double %141, %3
  %143 = fadd double %140, %142
  %144 = load double*, double** %43, align 8
  %145 = icmp ult double* %138, %144
  %146 = ptrtoint double* %144 to i64
  br i1 %145, label %147, label %150

147:                                              ; preds = %136
  store double %143, double* %138, align 8
  %148 = getelementptr inbounds double, double* %138, i64 1
  %149 = ptrtoint double* %148 to i64
  store i64 %149, i64* %67, align 8
  br label %197

150:                                              ; preds = %136
  %151 = ptrtoint double* %138 to i64
  %152 = load i64, i64* %57, align 8
  %153 = sub i64 %151, %152
  %154 = ashr exact i64 %153, 3
  %155 = add nsw i64 %154, 1
  %156 = icmp ugt i64 %155, 2305843009213693951
  br i1 %156, label %157, label %159

157:                                              ; preds = %150
  %158 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %158) #13
  unreachable

159:                                              ; preds = %150
  %160 = sub i64 %146, %152
  %161 = ashr exact i64 %160, 3
  %162 = icmp ult i64 %161, 1152921504606846975
  br i1 %162, label %163, label %171

163:                                              ; preds = %159
  %164 = ashr exact i64 %160, 2
  %165 = icmp ult i64 %164, %155
  %166 = select i1 %165, i64 %155, i64 %164
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %176, label %168

168:                                              ; preds = %163
  %169 = icmp ugt i64 %166, 2305843009213693951
  br i1 %169, label %170, label %171

170:                                              ; preds = %168
  tail call void @abort() #13
  unreachable

171:                                              ; preds = %168, %159
  %172 = phi i64 [ %166, %168 ], [ 2305843009213693951, %159 ]
  %173 = shl i64 %172, 3
  %174 = tail call i8* @_Znwm(i64 %173) #14
  %175 = bitcast i8* %174 to double*
  br label %176

176:                                              ; preds = %171, %163
  %177 = phi i64 [ %172, %171 ], [ 0, %163 ]
  %178 = phi double* [ %175, %171 ], [ null, %163 ]
  %179 = getelementptr inbounds double, double* %178, i64 %154
  %180 = getelementptr inbounds double, double* %178, i64 %177
  %181 = ptrtoint double* %180 to i64
  store double %143, double* %179, align 8
  %182 = getelementptr inbounds double, double* %179, i64 1
  %183 = ptrtoint double* %182 to i64
  %184 = sub i64 %137, %152
  %185 = ashr exact i64 %184, 3
  %186 = sub nsw i64 0, %185
  %187 = getelementptr inbounds double, double* %179, i64 %186
  %188 = ptrtoint double* %187 to i64
  %189 = icmp sgt i64 %184, 0
  br i1 %189, label %190, label %193

190:                                              ; preds = %176
  %191 = bitcast double* %187 to i8*
  %192 = inttoptr i64 %152 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %191, i8* align 8 %192, i64 %184, i1 false) #9
  br label %193

193:                                              ; preds = %190, %176
  store i64 %188, i64* %57, align 8
  store i64 %183, i64* %67, align 8
  store i64 %181, i64* %56, align 8
  %194 = icmp eq i64 %152, 0
  br i1 %194, label %197, label %195

195:                                              ; preds = %193
  %196 = inttoptr i64 %152 to i8*
  tail call void @_ZdlPv(i8* %196) #14
  br label %197

197:                                              ; preds = %147, %193, %195
  %198 = phi i64 [ %149, %147 ], [ %183, %193 ], [ %183, %195 ]
  %199 = phi double* [ %148, %147 ], [ %182, %193 ], [ %182, %195 ]
  %200 = add nuw nsw i64 %74, 1
  %201 = icmp eq i64 %200, %10
  br i1 %201, label %202, label %207

202:                                              ; preds = %197
  %203 = and i64 %10, 1
  %204 = icmp eq i32 %9, 1
  br i1 %204, label %211, label %205

205:                                              ; preds = %202
  %206 = sub nsw i64 %10, %203
  br label %242

207:                                              ; preds = %197
  %208 = load double*, double** %38, align 8
  %209 = load double*, double** %39, align 8
  %210 = ptrtoint double* %208 to i64
  br label %68

211:                                              ; preds = %242, %202
  %212 = phi i64 [ 0, %202 ], [ %270, %242 ]
  %213 = icmp eq i64 %203, 0
  br i1 %213, label %227, label %214

214:                                              ; preds = %211
  %215 = load double*, double** %37, align 8
  %216 = getelementptr inbounds double, double* %215, i64 %212
  %217 = bitcast double* %216 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = getelementptr inbounds double, double* %28, i64 %212
  %220 = bitcast double* %219 to i64*
  store i64 %218, i64* %220, align 8
  %221 = load double*, double** %41, align 8
  %222 = getelementptr inbounds double, double* %221, i64 %212
  %223 = bitcast double* %222 to i64*
  %224 = load i64, i64* %223, align 8
  %225 = getelementptr inbounds double, double* %35, i64 %212
  %226 = bitcast double* %225 to i64*
  store i64 %224, i64* %226, align 8
  br label %227

227:                                              ; preds = %214, %211, %17
  %228 = load double*, double** %41, align 8
  %229 = icmp eq double* %228, null
  br i1 %229, label %234, label %230

230:                                              ; preds = %227
  %231 = ptrtoint double* %228 to i64
  %232 = bitcast double** %42 to i64*
  store i64 %231, i64* %232, align 8
  %233 = bitcast double* %228 to i8*
  tail call void @_ZdlPv(i8* %233) #14
  br label %234

234:                                              ; preds = %227, %230
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %40) #9
  %235 = load double*, double** %37, align 8
  %236 = icmp eq double* %235, null
  br i1 %236, label %241, label %237

237:                                              ; preds = %234
  %238 = ptrtoint double* %235 to i64
  %239 = bitcast double** %38 to i64*
  store i64 %238, i64* %239, align 8
  %240 = bitcast double* %235 to i8*
  tail call void @_ZdlPv(i8* %240) #14
  br label %241

241:                                              ; preds = %234, %237
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #9
  ret void

242:                                              ; preds = %242, %205
  %243 = phi i64 [ 0, %205 ], [ %270, %242 ]
  %244 = phi i64 [ %206, %205 ], [ %271, %242 ]
  %245 = load double*, double** %37, align 8
  %246 = getelementptr inbounds double, double* %245, i64 %243
  %247 = bitcast double* %246 to i64*
  %248 = load i64, i64* %247, align 8
  %249 = getelementptr inbounds double, double* %28, i64 %243
  %250 = bitcast double* %249 to i64*
  store i64 %248, i64* %250, align 16
  %251 = load double*, double** %41, align 8
  %252 = getelementptr inbounds double, double* %251, i64 %243
  %253 = bitcast double* %252 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = getelementptr inbounds double, double* %35, i64 %243
  %256 = bitcast double* %255 to i64*
  store i64 %254, i64* %256, align 16
  %257 = or i64 %243, 1
  %258 = load double*, double** %37, align 8
  %259 = getelementptr inbounds double, double* %258, i64 %257
  %260 = bitcast double* %259 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = getelementptr inbounds double, double* %28, i64 %257
  %263 = bitcast double* %262 to i64*
  store i64 %261, i64* %263, align 8
  %264 = load double*, double** %41, align 8
  %265 = getelementptr inbounds double, double* %264, i64 %257
  %266 = bitcast double* %265 to i64*
  %267 = load i64, i64* %266, align 8
  %268 = getelementptr inbounds double, double* %35, i64 %257
  %269 = bitcast double* %268 to i64*
  store i64 %267, i64* %269, align 8
  %270 = add nuw nsw i64 %243, 2
  %271 = add i64 %244, -2
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %211, label %242
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN3jxl20HouseholderReflectorEmPKdPd(i64, double* nocapture readonly, double* nocapture) local_unnamed_addr #4 {
  %4 = load double, double* %1, align 8
  %5 = fcmp ole double %4, 0.000000e+00
  %6 = select i1 %5, double 1.000000e+00, double -1.000000e+00
  %7 = icmp eq i64 %0, 0
  br i1 %7, label %61, label %8

8:                                                ; preds = %3
  %9 = fmul double %4, %4
  %10 = fadd double %9, 0.000000e+00
  %11 = icmp eq i64 %0, 1
  br i1 %11, label %61, label %12

12:                                               ; preds = %8
  %13 = add i64 %0, -1
  %14 = add i64 %0, -2
  %15 = and i64 %13, 3
  %16 = icmp ult i64 %14, 3
  br i1 %16, label %45, label %17

17:                                               ; preds = %12
  %18 = sub i64 %13, %15
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i64 [ 1, %17 ], [ %42, %19 ]
  %21 = phi double [ %10, %17 ], [ %41, %19 ]
  %22 = phi i64 [ %18, %17 ], [ %43, %19 ]
  %23 = getelementptr inbounds double, double* %1, i64 %20
  %24 = load double, double* %23, align 8, !alias.scope !2, !noalias !5
  %25 = fmul double %24, %24
  %26 = fadd double %21, %25
  %27 = add nuw nsw i64 %20, 1
  %28 = getelementptr inbounds double, double* %1, i64 %27
  %29 = load double, double* %28, align 8, !alias.scope !2, !noalias !5
  %30 = fmul double %29, %29
  %31 = fadd double %26, %30
  %32 = add nuw nsw i64 %20, 2
  %33 = getelementptr inbounds double, double* %1, i64 %32
  %34 = load double, double* %33, align 8, !alias.scope !2, !noalias !5
  %35 = fmul double %34, %34
  %36 = fadd double %31, %35
  %37 = add nuw i64 %20, 3
  %38 = getelementptr inbounds double, double* %1, i64 %37
  %39 = load double, double* %38, align 8, !alias.scope !2, !noalias !5
  %40 = fmul double %39, %39
  %41 = fadd double %36, %40
  %42 = add nuw i64 %20, 4
  %43 = add i64 %22, -4
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %19

45:                                               ; preds = %19, %12
  %46 = phi double [ undef, %12 ], [ %41, %19 ]
  %47 = phi i64 [ 1, %12 ], [ %42, %19 ]
  %48 = phi double [ %10, %12 ], [ %41, %19 ]
  %49 = icmp eq i64 %15, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %45, %50
  %51 = phi i64 [ %58, %50 ], [ %47, %45 ]
  %52 = phi double [ %57, %50 ], [ %48, %45 ]
  %53 = phi i64 [ %59, %50 ], [ %15, %45 ]
  %54 = getelementptr inbounds double, double* %1, i64 %51
  %55 = load double, double* %54, align 8, !alias.scope !2, !noalias !5
  %56 = fmul double %55, %55
  %57 = fadd double %52, %56
  %58 = add nuw i64 %51, 1
  %59 = add i64 %53, -1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %50, !llvm.loop !7

61:                                               ; preds = %45, %50, %8, %3
  %62 = phi double [ 0.000000e+00, %3 ], [ %10, %8 ], [ %46, %45 ], [ %57, %50 ]
  %63 = tail call double @sqrt(double %62) #9
  %64 = fmul double %6, %63
  %65 = fsub double %4, %64
  store double %65, double* %2, align 8
  %66 = icmp ugt i64 %0, 1
  br i1 %66, label %67, label %181

67:                                               ; preds = %61
  %68 = add i64 %0, -1
  %69 = icmp ult i64 %68, 4
  br i1 %69, label %70, label %91

70:                                               ; preds = %179, %91, %67
  %71 = phi i64 [ 1, %91 ], [ 1, %67 ], [ %101, %179 ]
  %72 = sub i64 %0, %71
  %73 = xor i64 %71, -1
  %74 = add i64 %73, %0
  %75 = and i64 %72, 7
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %88, label %77

77:                                               ; preds = %70, %77
  %78 = phi i64 [ %85, %77 ], [ %71, %70 ]
  %79 = phi i64 [ %86, %77 ], [ %75, %70 ]
  %80 = getelementptr inbounds double, double* %1, i64 %78
  %81 = bitcast double* %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds double, double* %2, i64 %78
  %84 = bitcast double* %83 to i64*
  store i64 %82, i64* %84, align 8
  %85 = add nuw i64 %78, 1
  %86 = add i64 %79, -1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %77, !llvm.loop !9

88:                                               ; preds = %77, %70
  %89 = phi i64 [ %71, %70 ], [ %85, %77 ]
  %90 = icmp ult i64 %74, 7
  br i1 %90, label %181, label %294

91:                                               ; preds = %67
  %92 = getelementptr double, double* %2, i64 1
  %93 = getelementptr double, double* %2, i64 %0
  %94 = getelementptr double, double* %1, i64 1
  %95 = getelementptr double, double* %1, i64 %0
  %96 = icmp ult double* %92, %95
  %97 = icmp ult double* %94, %93
  %98 = and i1 %96, %97
  br i1 %98, label %70, label %99

99:                                               ; preds = %91
  %100 = and i64 %68, -4
  %101 = or i64 %100, 1
  %102 = add i64 %100, -4
  %103 = lshr exact i64 %102, 2
  %104 = add nuw nsw i64 %103, 1
  %105 = and i64 %104, 3
  %106 = icmp ult i64 %102, 12
  br i1 %106, label %159, label %107

107:                                              ; preds = %99
  %108 = sub nsw i64 %104, %105
  br label %109

109:                                              ; preds = %109, %107
  %110 = phi i64 [ 0, %107 ], [ %156, %109 ]
  %111 = phi i64 [ %108, %107 ], [ %157, %109 ]
  %112 = or i64 %110, 1
  %113 = getelementptr inbounds double, double* %1, i64 %112
  %114 = bitcast double* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 8, !alias.scope !10
  %116 = getelementptr inbounds double, double* %113, i64 2
  %117 = bitcast double* %116 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 8, !alias.scope !10
  %119 = getelementptr inbounds double, double* %2, i64 %112
  %120 = bitcast double* %119 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %120, align 8, !alias.scope !13, !noalias !10
  %121 = getelementptr inbounds double, double* %119, i64 2
  %122 = bitcast double* %121 to <2 x i64>*
  store <2 x i64> %118, <2 x i64>* %122, align 8, !alias.scope !13, !noalias !10
  %123 = or i64 %110, 5
  %124 = getelementptr inbounds double, double* %1, i64 %123
  %125 = bitcast double* %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 8, !alias.scope !10
  %127 = getelementptr inbounds double, double* %124, i64 2
  %128 = bitcast double* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !10
  %130 = getelementptr inbounds double, double* %2, i64 %123
  %131 = bitcast double* %130 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %131, align 8, !alias.scope !13, !noalias !10
  %132 = getelementptr inbounds double, double* %130, i64 2
  %133 = bitcast double* %132 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %133, align 8, !alias.scope !13, !noalias !10
  %134 = or i64 %110, 9
  %135 = getelementptr inbounds double, double* %1, i64 %134
  %136 = bitcast double* %135 to <2 x i64>*
  %137 = load <2 x i64>, <2 x i64>* %136, align 8, !alias.scope !10
  %138 = getelementptr inbounds double, double* %135, i64 2
  %139 = bitcast double* %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 8, !alias.scope !10
  %141 = getelementptr inbounds double, double* %2, i64 %134
  %142 = bitcast double* %141 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %142, align 8, !alias.scope !13, !noalias !10
  %143 = getelementptr inbounds double, double* %141, i64 2
  %144 = bitcast double* %143 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %144, align 8, !alias.scope !13, !noalias !10
  %145 = or i64 %110, 13
  %146 = getelementptr inbounds double, double* %1, i64 %145
  %147 = bitcast double* %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 8, !alias.scope !10
  %149 = getelementptr inbounds double, double* %146, i64 2
  %150 = bitcast double* %149 to <2 x i64>*
  %151 = load <2 x i64>, <2 x i64>* %150, align 8, !alias.scope !10
  %152 = getelementptr inbounds double, double* %2, i64 %145
  %153 = bitcast double* %152 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %153, align 8, !alias.scope !13, !noalias !10
  %154 = getelementptr inbounds double, double* %152, i64 2
  %155 = bitcast double* %154 to <2 x i64>*
  store <2 x i64> %151, <2 x i64>* %155, align 8, !alias.scope !13, !noalias !10
  %156 = add i64 %110, 16
  %157 = add i64 %111, -4
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %159, label %109, !llvm.loop !15

159:                                              ; preds = %109, %99
  %160 = phi i64 [ 0, %99 ], [ %156, %109 ]
  %161 = icmp eq i64 %105, 0
  br i1 %161, label %179, label %162

162:                                              ; preds = %159, %162
  %163 = phi i64 [ %176, %162 ], [ %160, %159 ]
  %164 = phi i64 [ %177, %162 ], [ %105, %159 ]
  %165 = or i64 %163, 1
  %166 = getelementptr inbounds double, double* %1, i64 %165
  %167 = bitcast double* %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 8, !alias.scope !10
  %169 = getelementptr inbounds double, double* %166, i64 2
  %170 = bitcast double* %169 to <2 x i64>*
  %171 = load <2 x i64>, <2 x i64>* %170, align 8, !alias.scope !10
  %172 = getelementptr inbounds double, double* %2, i64 %165
  %173 = bitcast double* %172 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %173, align 8, !alias.scope !13, !noalias !10
  %174 = getelementptr inbounds double, double* %172, i64 2
  %175 = bitcast double* %174 to <2 x i64>*
  store <2 x i64> %171, <2 x i64>* %175, align 8, !alias.scope !13, !noalias !10
  %176 = add i64 %163, 4
  %177 = add i64 %164, -1
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %162, !llvm.loop !17

179:                                              ; preds = %162, %159
  %180 = icmp eq i64 %68, %100
  br i1 %180, label %181, label %70

181:                                              ; preds = %88, %294, %179, %61
  br i1 %7, label %345, label %182

182:                                              ; preds = %181
  %183 = add i64 %0, -1
  %184 = and i64 %0, 3
  %185 = icmp ult i64 %183, 3
  br i1 %185, label %214, label %186

186:                                              ; preds = %182
  %187 = sub i64 %0, %184
  br label %188

188:                                              ; preds = %188, %186
  %189 = phi i64 [ 0, %186 ], [ %211, %188 ]
  %190 = phi double [ 0.000000e+00, %186 ], [ %210, %188 ]
  %191 = phi i64 [ %187, %186 ], [ %212, %188 ]
  %192 = getelementptr inbounds double, double* %2, i64 %189
  %193 = load double, double* %192, align 8, !alias.scope !18, !noalias !21
  %194 = fmul double %193, %193
  %195 = fadd double %190, %194
  %196 = or i64 %189, 1
  %197 = getelementptr inbounds double, double* %2, i64 %196
  %198 = load double, double* %197, align 8, !alias.scope !18, !noalias !21
  %199 = fmul double %198, %198
  %200 = fadd double %195, %199
  %201 = or i64 %189, 2
  %202 = getelementptr inbounds double, double* %2, i64 %201
  %203 = load double, double* %202, align 8, !alias.scope !18, !noalias !21
  %204 = fmul double %203, %203
  %205 = fadd double %200, %204
  %206 = or i64 %189, 3
  %207 = getelementptr inbounds double, double* %2, i64 %206
  %208 = load double, double* %207, align 8, !alias.scope !18, !noalias !21
  %209 = fmul double %208, %208
  %210 = fadd double %205, %209
  %211 = add nuw i64 %189, 4
  %212 = add i64 %191, -4
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %188

214:                                              ; preds = %188, %182
  %215 = phi double [ undef, %182 ], [ %210, %188 ]
  %216 = phi i64 [ 0, %182 ], [ %211, %188 ]
  %217 = phi double [ 0.000000e+00, %182 ], [ %210, %188 ]
  %218 = icmp eq i64 %184, 0
  br i1 %218, label %230, label %219

219:                                              ; preds = %214, %219
  %220 = phi i64 [ %227, %219 ], [ %216, %214 ]
  %221 = phi double [ %226, %219 ], [ %217, %214 ]
  %222 = phi i64 [ %228, %219 ], [ %184, %214 ]
  %223 = getelementptr inbounds double, double* %2, i64 %220
  %224 = load double, double* %223, align 8, !alias.scope !18, !noalias !21
  %225 = fmul double %224, %224
  %226 = fadd double %221, %225
  %227 = add nuw i64 %220, 1
  %228 = add i64 %222, -1
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %230, label %219, !llvm.loop !23

230:                                              ; preds = %219, %214
  %231 = phi double [ %215, %214 ], [ %226, %219 ]
  %232 = tail call double @sqrt(double %231) #9
  %233 = fdiv double 1.000000e+00, %232
  br i1 %7, label %345, label %234

234:                                              ; preds = %230
  %235 = icmp ult i64 %0, 4
  br i1 %235, label %236, label %238

236:                                              ; preds = %292, %234
  %237 = phi i64 [ 0, %234 ], [ %239, %292 ]
  br label %346

238:                                              ; preds = %234
  %239 = and i64 %0, -4
  %240 = insertelement <2 x double> undef, double %233, i32 0
  %241 = shufflevector <2 x double> %240, <2 x double> undef, <2 x i32> zeroinitializer
  %242 = insertelement <2 x double> undef, double %233, i32 0
  %243 = shufflevector <2 x double> %242, <2 x double> undef, <2 x i32> zeroinitializer
  %244 = add i64 %239, -4
  %245 = lshr exact i64 %244, 2
  %246 = add nuw nsw i64 %245, 1
  %247 = and i64 %246, 1
  %248 = icmp eq i64 %244, 0
  br i1 %248, label %278, label %249

249:                                              ; preds = %238
  %250 = sub nuw nsw i64 %246, %247
  br label %251

251:                                              ; preds = %251, %249
  %252 = phi i64 [ 0, %249 ], [ %275, %251 ]
  %253 = phi i64 [ %250, %249 ], [ %276, %251 ]
  %254 = getelementptr inbounds double, double* %2, i64 %252
  %255 = bitcast double* %254 to <2 x double>*
  %256 = load <2 x double>, <2 x double>* %255, align 8
  %257 = getelementptr inbounds double, double* %254, i64 2
  %258 = bitcast double* %257 to <2 x double>*
  %259 = load <2 x double>, <2 x double>* %258, align 8
  %260 = fmul <2 x double> %241, %256
  %261 = fmul <2 x double> %243, %259
  %262 = bitcast double* %254 to <2 x double>*
  store <2 x double> %260, <2 x double>* %262, align 8
  %263 = bitcast double* %257 to <2 x double>*
  store <2 x double> %261, <2 x double>* %263, align 8
  %264 = or i64 %252, 4
  %265 = getelementptr inbounds double, double* %2, i64 %264
  %266 = bitcast double* %265 to <2 x double>*
  %267 = load <2 x double>, <2 x double>* %266, align 8
  %268 = getelementptr inbounds double, double* %265, i64 2
  %269 = bitcast double* %268 to <2 x double>*
  %270 = load <2 x double>, <2 x double>* %269, align 8
  %271 = fmul <2 x double> %241, %267
  %272 = fmul <2 x double> %243, %270
  %273 = bitcast double* %265 to <2 x double>*
  store <2 x double> %271, <2 x double>* %273, align 8
  %274 = bitcast double* %268 to <2 x double>*
  store <2 x double> %272, <2 x double>* %274, align 8
  %275 = add i64 %252, 8
  %276 = add i64 %253, -2
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %278, label %251, !llvm.loop !24

278:                                              ; preds = %251, %238
  %279 = phi i64 [ 0, %238 ], [ %275, %251 ]
  %280 = icmp eq i64 %247, 0
  br i1 %280, label %292, label %281

281:                                              ; preds = %278
  %282 = getelementptr inbounds double, double* %2, i64 %279
  %283 = bitcast double* %282 to <2 x double>*
  %284 = load <2 x double>, <2 x double>* %283, align 8
  %285 = getelementptr inbounds double, double* %282, i64 2
  %286 = bitcast double* %285 to <2 x double>*
  %287 = load <2 x double>, <2 x double>* %286, align 8
  %288 = fmul <2 x double> %241, %284
  %289 = fmul <2 x double> %243, %287
  %290 = bitcast double* %282 to <2 x double>*
  store <2 x double> %288, <2 x double>* %290, align 8
  %291 = bitcast double* %285 to <2 x double>*
  store <2 x double> %289, <2 x double>* %291, align 8
  br label %292

292:                                              ; preds = %278, %281
  %293 = icmp eq i64 %239, %0
  br i1 %293, label %345, label %236

294:                                              ; preds = %88, %294
  %295 = phi i64 [ %343, %294 ], [ %89, %88 ]
  %296 = getelementptr inbounds double, double* %1, i64 %295
  %297 = bitcast double* %296 to i64*
  %298 = load i64, i64* %297, align 8
  %299 = getelementptr inbounds double, double* %2, i64 %295
  %300 = bitcast double* %299 to i64*
  store i64 %298, i64* %300, align 8
  %301 = add nuw i64 %295, 1
  %302 = getelementptr inbounds double, double* %1, i64 %301
  %303 = bitcast double* %302 to i64*
  %304 = load i64, i64* %303, align 8
  %305 = getelementptr inbounds double, double* %2, i64 %301
  %306 = bitcast double* %305 to i64*
  store i64 %304, i64* %306, align 8
  %307 = add nuw i64 %295, 2
  %308 = getelementptr inbounds double, double* %1, i64 %307
  %309 = bitcast double* %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = getelementptr inbounds double, double* %2, i64 %307
  %312 = bitcast double* %311 to i64*
  store i64 %310, i64* %312, align 8
  %313 = add nuw i64 %295, 3
  %314 = getelementptr inbounds double, double* %1, i64 %313
  %315 = bitcast double* %314 to i64*
  %316 = load i64, i64* %315, align 8
  %317 = getelementptr inbounds double, double* %2, i64 %313
  %318 = bitcast double* %317 to i64*
  store i64 %316, i64* %318, align 8
  %319 = add nuw i64 %295, 4
  %320 = getelementptr inbounds double, double* %1, i64 %319
  %321 = bitcast double* %320 to i64*
  %322 = load i64, i64* %321, align 8
  %323 = getelementptr inbounds double, double* %2, i64 %319
  %324 = bitcast double* %323 to i64*
  store i64 %322, i64* %324, align 8
  %325 = add nuw i64 %295, 5
  %326 = getelementptr inbounds double, double* %1, i64 %325
  %327 = bitcast double* %326 to i64*
  %328 = load i64, i64* %327, align 8
  %329 = getelementptr inbounds double, double* %2, i64 %325
  %330 = bitcast double* %329 to i64*
  store i64 %328, i64* %330, align 8
  %331 = add nuw i64 %295, 6
  %332 = getelementptr inbounds double, double* %1, i64 %331
  %333 = bitcast double* %332 to i64*
  %334 = load i64, i64* %333, align 8
  %335 = getelementptr inbounds double, double* %2, i64 %331
  %336 = bitcast double* %335 to i64*
  store i64 %334, i64* %336, align 8
  %337 = add nuw i64 %295, 7
  %338 = getelementptr inbounds double, double* %1, i64 %337
  %339 = bitcast double* %338 to i64*
  %340 = load i64, i64* %339, align 8
  %341 = getelementptr inbounds double, double* %2, i64 %337
  %342 = bitcast double* %341 to i64*
  store i64 %340, i64* %342, align 8
  %343 = add nuw i64 %295, 8
  %344 = icmp eq i64 %343, %0
  br i1 %344, label %181, label %294, !llvm.loop !25

345:                                              ; preds = %346, %292, %181, %230
  ret void

346:                                              ; preds = %236, %346
  %347 = phi i64 [ %351, %346 ], [ %237, %236 ]
  %348 = getelementptr inbounds double, double* %2, i64 %347
  %349 = load double, double* %348, align 8
  %350 = fmul double %233, %349
  store double %350, double* %348, align 8
  %351 = add nuw i64 %347, 1
  %352 = icmp eq i64 %351, %0
  br i1 %352, label %345, label %346, !llvm.loop !26
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl20ConvertToTridiagonalERKNS_5PlaneIdEEPS1_S4_(%"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* noalias, %"class.jxl::Plane"* noalias nocapture) local_unnamed_addr #0 {
  %4 = alloca %"class.jxl::Plane", align 8
  %5 = alloca %"class.jxl::Plane", align 8
  %6 = alloca %"class.std::__1::vector.4", align 8
  %7 = alloca %"class.jxl::Plane", align 8
  %8 = alloca %"class.jxl::Plane", align 8
  %9 = alloca %"class.jxl::Plane", align 8
  %10 = alloca %"class.jxl::Plane", align 8
  %11 = alloca %"class.jxl::Plane", align 8
  %12 = alloca %"class.jxl::Plane", align 8
  %13 = alloca %"class.jxl::Plane", align 8
  %14 = alloca %"class.jxl::Plane", align 8
  %15 = alloca %"class.jxl::Plane", align 8
  %16 = alloca %"class.jxl::Plane", align 8
  %17 = alloca %"class.jxl::Plane", align 8
  %18 = alloca %"class.jxl::Plane", align 8
  tail call void @_ZN3jxl15AssertSymmetricERKNS_5PlaneIdEE(%"class.jxl::Plane"* dereferenceable(32) %0)
  %19 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = zext i32 %20 to i64
  %22 = bitcast %"class.jxl::Plane"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22) #9
  %23 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 4
  %24 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 32, i1 false) #9, !alias.scope !28
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %25, i64 %21, i64 %21, i64 8) #9
  %26 = icmp eq i32 %20, 0
  br i1 %26, label %82, label %27

27:                                               ; preds = %3
  %28 = and i64 %21, 1
  %29 = icmp eq i32 %20, 1
  br i1 %29, label %63, label %30

30:                                               ; preds = %27
  %31 = sub nsw i64 %21, %28
  br label %32

32:                                               ; preds = %1574, %30
  %33 = phi i64 [ 0, %30 ], [ %1576, %1574 ]
  %34 = phi i64 [ %31, %30 ], [ %1577, %1574 ]
  %35 = load i8*, i8** %24, align 8, !alias.scope !28
  %36 = load i64, i64* %23, align 8, !alias.scope !28
  %37 = mul i64 %36, %33
  %38 = getelementptr inbounds i8, i8* %35, i64 %37
  %39 = ptrtoint i8* %38 to i64
  %40 = and i64 %39, 63
  %41 = icmp eq i64 %40, 0
  call void @llvm.assume(i1 %41) #9
  %42 = bitcast i8* %38 to double*
  %43 = getelementptr inbounds double, double* %42, i64 %21
  %44 = ptrtoint double* %43 to i64
  %45 = sub i64 %44, %39
  %46 = icmp sgt i64 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %32
  call void @llvm.memset.p0i8.i64(i8* align 64 %38, i8 0, i64 %45, i1 false) #9
  br label %48

48:                                               ; preds = %47, %32
  %49 = getelementptr inbounds double, double* %42, i64 %33
  store double 1.000000e+00, double* %49, align 16
  %50 = or i64 %33, 1
  %51 = load i8*, i8** %24, align 8, !alias.scope !28
  %52 = load i64, i64* %23, align 8, !alias.scope !28
  %53 = mul i64 %52, %50
  %54 = getelementptr inbounds i8, i8* %51, i64 %53
  %55 = ptrtoint i8* %54 to i64
  %56 = and i64 %55, 63
  %57 = icmp eq i64 %56, 0
  call void @llvm.assume(i1 %57) #9
  %58 = bitcast i8* %54 to double*
  %59 = getelementptr inbounds double, double* %58, i64 %21
  %60 = ptrtoint double* %59 to i64
  %61 = sub i64 %60, %55
  %62 = icmp sgt i64 %61, 0
  br i1 %62, label %1573, label %1574

63:                                               ; preds = %1574, %27
  %64 = phi i64 [ 0, %27 ], [ %1576, %1574 ]
  %65 = icmp eq i64 %28, 0
  br i1 %65, label %82, label %66

66:                                               ; preds = %63
  %67 = load i8*, i8** %24, align 8, !alias.scope !28
  %68 = load i64, i64* %23, align 8, !alias.scope !28
  %69 = mul i64 %68, %64
  %70 = getelementptr inbounds i8, i8* %67, i64 %69
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  call void @llvm.assume(i1 %73) #9
  %74 = bitcast i8* %70 to double*
  %75 = getelementptr inbounds double, double* %74, i64 %21
  %76 = ptrtoint double* %75 to i64
  %77 = sub i64 %76, %71
  %78 = icmp sgt i64 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %66
  call void @llvm.memset.p0i8.i64(i8* align 64 %70, i8 0, i64 %77, i1 false) #9
  br label %80

80:                                               ; preds = %79, %66
  %81 = getelementptr inbounds double, double* %74, i64 %64
  store double 1.000000e+00, double* %81, align 8
  br label %82

82:                                               ; preds = %80, %63, %3
  %83 = bitcast %"class.jxl::Plane"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %83, i8* nonnull align 8 %22, i64 24, i1 false) #9
  %84 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5
  %85 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 5
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %85, i64 0, i32 0, i32 0, i32 0
  %87 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i8* null, i8** %86, align 8
  %89 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 0, i32 0, i32 0, i32 0
  %90 = load i8*, i8** %89, align 8
  %91 = bitcast %"class.std::__1::unique_ptr"* %84 to i64*
  store i64 %88, i64* %91, align 8
  %92 = icmp eq i8* %90, null
  %93 = inttoptr i64 %88 to i8*
  br i1 %92, label %94, label %95

94:                                               ; preds = %82
  store i8* null, i8** %24, align 8
  br label %99

95:                                               ; preds = %82
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %90) #9
  %96 = load i8*, i8** %24, align 8
  store i8* null, i8** %24, align 8
  %97 = icmp eq i8* %96, null
  br i1 %97, label %99, label %98

98:                                               ; preds = %95
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %96) #9
  br label %99

99:                                               ; preds = %94, %95, %98
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #9
  %100 = bitcast %"class.jxl::Plane"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %100) #9
  call void @_ZN3jxl9CopyImageIdEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane"* nonnull sret %5, %"class.jxl::Plane"* dereferenceable(32) %0)
  %101 = bitcast %"class.jxl::Plane"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %101, i8* nonnull align 8 %100, i64 24, i1 false) #9
  %102 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %103 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %5, i64 0, i32 0, i32 5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %103, i64 0, i32 0, i32 0, i32 0
  %105 = bitcast %"class.std::__1::unique_ptr"* %103 to i64*
  %106 = load i64, i64* %105, align 8
  store i8* null, i8** %104, align 8
  %107 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %102, i64 0, i32 0, i32 0, i32 0
  %108 = load i8*, i8** %107, align 8
  %109 = bitcast %"class.std::__1::unique_ptr"* %102 to i64*
  store i64 %106, i64* %109, align 8
  %110 = icmp eq i8* %108, null
  br i1 %110, label %111, label %113

111:                                              ; preds = %99
  %112 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %5, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %112, align 8
  br label %119

113:                                              ; preds = %99
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %108) #9
  %114 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %5, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %115 = load i8*, i8** %114, align 8
  %116 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %5, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %116, align 8
  %117 = icmp eq i8* %115, null
  br i1 %117, label %119, label %118

118:                                              ; preds = %113
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %115) #9
  br label %119

119:                                              ; preds = %111, %113, %118
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %100) #9
  %120 = bitcast %"class.std::__1::vector.4"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %120) #9
  %121 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %6, i64 0, i32 0, i32 0
  %122 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %6, i64 0, i32 0, i32 1
  %123 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %120, i8 0, i64 24, i1 false) #9
  %124 = icmp ugt i32 %20, 2
  br i1 %124, label %125, label %1572

125:                                              ; preds = %119
  %126 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %127 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 4
  %128 = bitcast %"class.jxl::Plane"* %7 to i8*
  %129 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 0
  %130 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 1
  %131 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 4
  %132 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %133 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0
  %134 = bitcast %"class.jxl::Plane"* %8 to i8*
  %135 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %8, i64 0, i32 0, i32 0
  %136 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %8, i64 0, i32 0, i32 1
  %137 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %8, i64 0, i32 0, i32 4
  %138 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %8, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %139 = bitcast %"class.jxl::Plane"* %9 to i8*
  %140 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %8, i64 0, i32 0, i32 5
  %141 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 5
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = bitcast %"class.std::__1::unique_ptr"* %141 to i64*
  %144 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %140, i64 0, i32 0, i32 0, i32 0
  %145 = bitcast %"class.std::__1::unique_ptr"* %140 to i64*
  %146 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %147 = bitcast %"class.jxl::Plane"* %10 to i8*
  %148 = bitcast %"class.jxl::Plane"* %11 to i8*
  %149 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %11, i64 0, i32 0, i32 4
  %150 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %11, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %151 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %11, i64 0, i32 0
  %152 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %10, i64 0, i32 0, i32 0
  %153 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %10, i64 0, i32 0, i32 1
  %154 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %10, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %155 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %10, i64 0, i32 0, i32 4
  %156 = bitcast %"class.jxl::Plane"* %12 to i8*
  %157 = bitcast %"class.jxl::Plane"* %13 to i8*
  %158 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %13, i64 0, i32 0, i32 4
  %159 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %13, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %160 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %13, i64 0, i32 0
  %161 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 0, i32 0, i32 0
  %162 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 0, i32 0, i32 1
  %163 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 0, i32 0, i32 4
  %165 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 5
  %166 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %165, i64 0, i32 0, i32 0, i32 0
  %167 = bitcast %"class.std::__1::unique_ptr"* %165 to i64*
  %168 = bitcast %"class.jxl::Plane"** %122 to i64*
  %169 = add nsw i64 %21, -2
  %170 = bitcast %"class.jxl::Plane"* %7 to i8*
  %171 = bitcast %"class.jxl::Plane"* %8 to i8*
  %172 = shl nuw nsw i64 %21, 3
  %173 = add nsw i64 %21, -3
  %174 = add nsw i64 %21, -3
  %175 = add nsw i64 %21, -1
  br label %214

176:                                              ; preds = %1239
  %177 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %121, align 8
  %178 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %122, align 8
  %179 = icmp eq %"class.jxl::Plane"* %177, %178
  br i1 %179, label %1567, label %180

180:                                              ; preds = %176
  %181 = bitcast %"class.jxl::Plane"* %14 to i8*
  %182 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0, i32 0
  %183 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0, i32 1
  %184 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0, i32 4
  %185 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %186 = bitcast %"class.jxl::Plane"* %15 to i8*
  %187 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %15, i64 0, i32 0, i32 4
  %188 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %15, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %189 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 1
  %190 = load i32, i32* %189, align 4, !noalias !31
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 0
  %193 = load i32, i32* %192, align 8, !noalias !31
  %194 = zext i32 %193 to i64
  %195 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %15, i64 0, i32 0
  %196 = icmp eq i32 %193, 0
  %197 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 4
  %198 = bitcast %"class.jxl::Plane"* %16 to i8*
  %199 = bitcast %"class.jxl::Plane"* %17 to i8*
  %200 = bitcast %"class.jxl::Plane"* %18 to i8*
  %201 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %18, i64 0, i32 0, i32 4
  %202 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %18, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %203 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %18, i64 0, i32 0
  %204 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %16, i64 0, i32 0, i32 4
  %205 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %16, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %206 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %17, i64 0, i32 0, i32 0
  %207 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %17, i64 0, i32 0, i32 1
  %208 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %16, i64 0, i32 0
  %209 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %17, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %210 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %17, i64 0, i32 0, i32 4
  %211 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %16, i64 0, i32 0, i32 0
  %212 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %16, i64 0, i32 0, i32 1
  %213 = bitcast %"class.jxl::Plane"* %14 to i8*
  br label %1243

214:                                              ; preds = %1239, %125
  %215 = phi i64 [ 2, %125 ], [ %1241, %1239 ]
  %216 = phi i64 [ 0, %125 ], [ %1240, %1239 ]
  %217 = xor i64 %216, -1
  %218 = add nsw i64 %217, %21
  %219 = add i64 %218, -4
  %220 = lshr i64 %219, 2
  %221 = add nuw nsw i64 %220, 1
  %222 = sub i64 %175, %216
  %223 = sub i64 %169, %216
  %224 = sub i64 %175, %216
  %225 = sub i64 %169, %216
  %226 = sub i64 %169, %216
  %227 = add i64 %226, -4
  %228 = lshr i64 %227, 2
  %229 = add nuw nsw i64 %228, 1
  %230 = sub i64 %169, %216
  %231 = sub i64 %174, %216
  %232 = sub i64 %169, %216
  %233 = shl i64 %216, 3
  %234 = add i64 %233, 16
  %235 = sub i64 %169, %216
  %236 = xor i64 %216, -1
  %237 = add nsw i64 %236, %21
  %238 = sub nsw i64 %21, %216
  %239 = load i8*, i8** %126, align 8
  %240 = load i64, i64* %127, align 8
  %241 = mul i64 %240, %216
  %242 = getelementptr inbounds i8, i8* %239, i64 %241
  %243 = ptrtoint i8* %242 to i64
  %244 = and i64 %243, 63
  %245 = icmp eq i64 %244, 0
  call void @llvm.assume(i1 %245) #9
  %246 = bitcast i8* %242 to double*
  %247 = getelementptr inbounds double, double* %246, i64 %215
  %248 = icmp eq i64 %238, 2
  br i1 %248, label %1239, label %249

249:                                              ; preds = %214
  %250 = sub i64 %173, %216
  %251 = and i64 %232, 3
  %252 = icmp ult i64 %250, 3
  br i1 %252, label %281, label %253

253:                                              ; preds = %249
  %254 = sub i64 %232, %251
  br label %255

255:                                              ; preds = %255, %253
  %256 = phi i64 [ 0, %253 ], [ %278, %255 ]
  %257 = phi double [ 0.000000e+00, %253 ], [ %277, %255 ]
  %258 = phi i64 [ %254, %253 ], [ %279, %255 ]
  %259 = getelementptr inbounds double, double* %247, i64 %256
  %260 = load double, double* %259, align 8, !alias.scope !34, !noalias !37
  %261 = fmul double %260, %260
  %262 = fadd double %257, %261
  %263 = or i64 %256, 1
  %264 = getelementptr inbounds double, double* %247, i64 %263
  %265 = load double, double* %264, align 8, !alias.scope !34, !noalias !37
  %266 = fmul double %265, %265
  %267 = fadd double %262, %266
  %268 = or i64 %256, 2
  %269 = getelementptr inbounds double, double* %247, i64 %268
  %270 = load double, double* %269, align 8, !alias.scope !34, !noalias !37
  %271 = fmul double %270, %270
  %272 = fadd double %267, %271
  %273 = or i64 %256, 3
  %274 = getelementptr inbounds double, double* %247, i64 %273
  %275 = load double, double* %274, align 8, !alias.scope !34, !noalias !37
  %276 = fmul double %275, %275
  %277 = fadd double %272, %276
  %278 = add nuw i64 %256, 4
  %279 = add i64 %258, -4
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %281, label %255

281:                                              ; preds = %255, %249
  %282 = phi double [ undef, %249 ], [ %277, %255 ]
  %283 = phi i64 [ 0, %249 ], [ %278, %255 ]
  %284 = phi double [ 0.000000e+00, %249 ], [ %277, %255 ]
  %285 = icmp eq i64 %251, 0
  br i1 %285, label %297, label %286

286:                                              ; preds = %281, %286
  %287 = phi i64 [ %294, %286 ], [ %283, %281 ]
  %288 = phi double [ %293, %286 ], [ %284, %281 ]
  %289 = phi i64 [ %295, %286 ], [ %251, %281 ]
  %290 = getelementptr inbounds double, double* %247, i64 %287
  %291 = load double, double* %290, align 8, !alias.scope !34, !noalias !37
  %292 = fmul double %291, %291
  %293 = fadd double %288, %292
  %294 = add nuw i64 %287, 1
  %295 = add i64 %289, -1
  %296 = icmp eq i64 %295, 0
  br i1 %296, label %297, label %286, !llvm.loop !39

297:                                              ; preds = %286, %281
  %298 = phi double [ %282, %281 ], [ %293, %286 ]
  %299 = fcmp ogt double %298, 1.000000e-15
  br i1 %299, label %300, label %1239

300:                                              ; preds = %297
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %128) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %170, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %133, i64 %21, i64 1, i64 8) #9
  %301 = load i32, i32* %129, align 8
  %302 = icmp eq i32 %301, 0
  %303 = load i32, i32* %130, align 4
  %304 = icmp eq i32 %303, 0
  %305 = or i1 %302, %304
  br i1 %305, label %331, label %306

306:                                              ; preds = %300
  %307 = load i8*, i8** %132, align 8
  %308 = ptrtoint i8* %307 to i64
  %309 = and i64 %308, 63
  %310 = icmp eq i64 %309, 0
  call void @llvm.assume(i1 %310) #9
  %311 = zext i32 %301 to i64
  %312 = shl nuw nsw i64 %311, 3
  call void @llvm.memset.p0i8.i64(i8* align 64 %307, i8 0, i64 %312, i1 false) #9
  %313 = load i32, i32* %130, align 4
  %314 = icmp ugt i32 %313, 1
  br i1 %314, label %315, label %331

315:                                              ; preds = %306, %315
  %316 = phi i64 [ %327, %315 ], [ 1, %306 ]
  %317 = load i32, i32* %129, align 8
  %318 = load i8*, i8** %132, align 8
  %319 = load i64, i64* %131, align 8
  %320 = mul i64 %319, %316
  %321 = getelementptr inbounds i8, i8* %318, i64 %320
  %322 = ptrtoint i8* %321 to i64
  %323 = and i64 %322, 63
  %324 = icmp eq i64 %323, 0
  call void @llvm.assume(i1 %324) #9
  %325 = zext i32 %317 to i64
  %326 = shl nuw nsw i64 %325, 3
  call void @llvm.memset.p0i8.i64(i8* align 64 %321, i8 0, i64 %326, i1 false) #9
  %327 = add nuw nsw i64 %316, 1
  %328 = load i32, i32* %130, align 4
  %329 = zext i32 %328 to i64
  %330 = icmp ult i64 %327, %329
  br i1 %330, label %315, label %331

331:                                              ; preds = %315, %306, %300
  %332 = add nsw i64 %238, -1
  %333 = load i8*, i8** %126, align 8
  %334 = load i64, i64* %127, align 8
  %335 = mul i64 %334, %216
  %336 = getelementptr inbounds i8, i8* %333, i64 %335
  %337 = ptrtoint i8* %336 to i64
  %338 = and i64 %337, 63
  %339 = icmp eq i64 %338, 0
  call void @llvm.assume(i1 %339) #9
  %340 = bitcast i8* %336 to double*
  %341 = add nuw nsw i64 %216, 1
  %342 = getelementptr inbounds double, double* %340, i64 %341
  %343 = load i8*, i8** %132, align 8
  %344 = ptrtoint i8* %343 to i64
  %345 = and i64 %344, 63
  %346 = icmp eq i64 %345, 0
  call void @llvm.assume(i1 %346) #9
  %347 = bitcast i8* %343 to double*
  %348 = getelementptr inbounds double, double* %347, i64 %341
  %349 = load double, double* %342, align 8
  %350 = fcmp ole double %349, 0.000000e+00
  %351 = select i1 %350, double 1.000000e+00, double -1.000000e+00
  %352 = icmp eq i64 %332, 0
  br i1 %352, label %404, label %353

353:                                              ; preds = %331
  %354 = fmul double %349, %349
  %355 = fadd double %354, 0.000000e+00
  %356 = icmp eq i64 %332, 1
  br i1 %356, label %404, label %357

357:                                              ; preds = %353
  %358 = and i64 %230, 3
  %359 = icmp ult i64 %231, 3
  br i1 %359, label %388, label %360

360:                                              ; preds = %357
  %361 = sub i64 %230, %358
  br label %362

362:                                              ; preds = %362, %360
  %363 = phi i64 [ 1, %360 ], [ %385, %362 ]
  %364 = phi double [ %355, %360 ], [ %384, %362 ]
  %365 = phi i64 [ %361, %360 ], [ %386, %362 ]
  %366 = getelementptr inbounds double, double* %342, i64 %363
  %367 = load double, double* %366, align 8, !alias.scope !40, !noalias !43
  %368 = fmul double %367, %367
  %369 = fadd double %368, %364
  %370 = add nuw nsw i64 %363, 1
  %371 = getelementptr inbounds double, double* %342, i64 %370
  %372 = load double, double* %371, align 8, !alias.scope !40, !noalias !43
  %373 = fmul double %372, %372
  %374 = fadd double %373, %369
  %375 = add nuw nsw i64 %363, 2
  %376 = getelementptr inbounds double, double* %342, i64 %375
  %377 = load double, double* %376, align 8, !alias.scope !40, !noalias !43
  %378 = fmul double %377, %377
  %379 = fadd double %378, %374
  %380 = add nuw i64 %363, 3
  %381 = getelementptr inbounds double, double* %342, i64 %380
  %382 = load double, double* %381, align 8, !alias.scope !40, !noalias !43
  %383 = fmul double %382, %382
  %384 = fadd double %383, %379
  %385 = add nuw i64 %363, 4
  %386 = add i64 %365, -4
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %388, label %362

388:                                              ; preds = %362, %357
  %389 = phi double [ undef, %357 ], [ %384, %362 ]
  %390 = phi i64 [ 1, %357 ], [ %385, %362 ]
  %391 = phi double [ %355, %357 ], [ %384, %362 ]
  %392 = icmp eq i64 %358, 0
  br i1 %392, label %404, label %393

393:                                              ; preds = %388, %393
  %394 = phi i64 [ %401, %393 ], [ %390, %388 ]
  %395 = phi double [ %400, %393 ], [ %391, %388 ]
  %396 = phi i64 [ %402, %393 ], [ %358, %388 ]
  %397 = getelementptr inbounds double, double* %342, i64 %394
  %398 = load double, double* %397, align 8, !alias.scope !40, !noalias !43
  %399 = fmul double %398, %398
  %400 = fadd double %399, %395
  %401 = add nuw i64 %394, 1
  %402 = add i64 %396, -1
  %403 = icmp eq i64 %402, 0
  br i1 %403, label %404, label %393, !llvm.loop !45

404:                                              ; preds = %388, %393, %353, %331
  %405 = phi double [ 0.000000e+00, %331 ], [ %355, %353 ], [ %389, %388 ], [ %400, %393 ]
  %406 = call double @sqrt(double %405) #9
  %407 = fmul double %351, %406
  %408 = fsub double %349, %407
  store double %408, double* %348, align 8
  %409 = icmp ugt i64 %332, 1
  br i1 %409, label %410, label %521

410:                                              ; preds = %404
  %411 = icmp ult i64 %235, 4
  br i1 %411, label %412, label %432

412:                                              ; preds = %519, %432, %410
  %413 = phi i64 [ 1, %432 ], [ 1, %410 ], [ %444, %519 ]
  %414 = sub i64 %224, %413
  %415 = sub i64 %225, %413
  %416 = and i64 %414, 7
  %417 = icmp eq i64 %416, 0
  br i1 %417, label %429, label %418

418:                                              ; preds = %412, %418
  %419 = phi i64 [ %426, %418 ], [ %413, %412 ]
  %420 = phi i64 [ %427, %418 ], [ %416, %412 ]
  %421 = getelementptr inbounds double, double* %342, i64 %419
  %422 = bitcast double* %421 to i64*
  %423 = load i64, i64* %422, align 8
  %424 = getelementptr inbounds double, double* %348, i64 %419
  %425 = bitcast double* %424 to i64*
  store i64 %423, i64* %425, align 8
  %426 = add nuw i64 %419, 1
  %427 = add i64 %420, -1
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %429, label %418, !llvm.loop !46

429:                                              ; preds = %418, %412
  %430 = phi i64 [ %413, %412 ], [ %426, %418 ]
  %431 = icmp ult i64 %415, 7
  br i1 %431, label %521, label %629

432:                                              ; preds = %410
  %433 = getelementptr i8, i8* %343, i64 %234
  %434 = getelementptr i8, i8* %343, i64 %172
  %435 = add i64 %234, %335
  %436 = getelementptr i8, i8* %333, i64 %435
  %437 = getelementptr i8, i8* %333, i64 %172
  %438 = getelementptr i8, i8* %437, i64 %335
  %439 = icmp ult i8* %433, %438
  %440 = icmp ult i8* %436, %434
  %441 = and i1 %439, %440
  br i1 %441, label %412, label %442

442:                                              ; preds = %432
  %443 = and i64 %235, -4
  %444 = or i64 %443, 1
  %445 = and i64 %229, 3
  %446 = icmp ult i64 %227, 12
  br i1 %446, label %499, label %447

447:                                              ; preds = %442
  %448 = sub nsw i64 %229, %445
  br label %449

449:                                              ; preds = %449, %447
  %450 = phi i64 [ 0, %447 ], [ %496, %449 ]
  %451 = phi i64 [ %448, %447 ], [ %497, %449 ]
  %452 = or i64 %450, 1
  %453 = getelementptr inbounds double, double* %342, i64 %452
  %454 = bitcast double* %453 to <2 x i64>*
  %455 = load <2 x i64>, <2 x i64>* %454, align 8, !alias.scope !47
  %456 = getelementptr inbounds double, double* %453, i64 2
  %457 = bitcast double* %456 to <2 x i64>*
  %458 = load <2 x i64>, <2 x i64>* %457, align 8, !alias.scope !47
  %459 = getelementptr inbounds double, double* %348, i64 %452
  %460 = bitcast double* %459 to <2 x i64>*
  store <2 x i64> %455, <2 x i64>* %460, align 8, !alias.scope !50, !noalias !47
  %461 = getelementptr inbounds double, double* %459, i64 2
  %462 = bitcast double* %461 to <2 x i64>*
  store <2 x i64> %458, <2 x i64>* %462, align 8, !alias.scope !50, !noalias !47
  %463 = or i64 %450, 5
  %464 = getelementptr inbounds double, double* %342, i64 %463
  %465 = bitcast double* %464 to <2 x i64>*
  %466 = load <2 x i64>, <2 x i64>* %465, align 8, !alias.scope !47
  %467 = getelementptr inbounds double, double* %464, i64 2
  %468 = bitcast double* %467 to <2 x i64>*
  %469 = load <2 x i64>, <2 x i64>* %468, align 8, !alias.scope !47
  %470 = getelementptr inbounds double, double* %348, i64 %463
  %471 = bitcast double* %470 to <2 x i64>*
  store <2 x i64> %466, <2 x i64>* %471, align 8, !alias.scope !50, !noalias !47
  %472 = getelementptr inbounds double, double* %470, i64 2
  %473 = bitcast double* %472 to <2 x i64>*
  store <2 x i64> %469, <2 x i64>* %473, align 8, !alias.scope !50, !noalias !47
  %474 = or i64 %450, 9
  %475 = getelementptr inbounds double, double* %342, i64 %474
  %476 = bitcast double* %475 to <2 x i64>*
  %477 = load <2 x i64>, <2 x i64>* %476, align 8, !alias.scope !47
  %478 = getelementptr inbounds double, double* %475, i64 2
  %479 = bitcast double* %478 to <2 x i64>*
  %480 = load <2 x i64>, <2 x i64>* %479, align 8, !alias.scope !47
  %481 = getelementptr inbounds double, double* %348, i64 %474
  %482 = bitcast double* %481 to <2 x i64>*
  store <2 x i64> %477, <2 x i64>* %482, align 8, !alias.scope !50, !noalias !47
  %483 = getelementptr inbounds double, double* %481, i64 2
  %484 = bitcast double* %483 to <2 x i64>*
  store <2 x i64> %480, <2 x i64>* %484, align 8, !alias.scope !50, !noalias !47
  %485 = or i64 %450, 13
  %486 = getelementptr inbounds double, double* %342, i64 %485
  %487 = bitcast double* %486 to <2 x i64>*
  %488 = load <2 x i64>, <2 x i64>* %487, align 8, !alias.scope !47
  %489 = getelementptr inbounds double, double* %486, i64 2
  %490 = bitcast double* %489 to <2 x i64>*
  %491 = load <2 x i64>, <2 x i64>* %490, align 8, !alias.scope !47
  %492 = getelementptr inbounds double, double* %348, i64 %485
  %493 = bitcast double* %492 to <2 x i64>*
  store <2 x i64> %488, <2 x i64>* %493, align 8, !alias.scope !50, !noalias !47
  %494 = getelementptr inbounds double, double* %492, i64 2
  %495 = bitcast double* %494 to <2 x i64>*
  store <2 x i64> %491, <2 x i64>* %495, align 8, !alias.scope !50, !noalias !47
  %496 = add i64 %450, 16
  %497 = add i64 %451, -4
  %498 = icmp eq i64 %497, 0
  br i1 %498, label %499, label %449, !llvm.loop !52

499:                                              ; preds = %449, %442
  %500 = phi i64 [ 0, %442 ], [ %496, %449 ]
  %501 = icmp eq i64 %445, 0
  br i1 %501, label %519, label %502

502:                                              ; preds = %499, %502
  %503 = phi i64 [ %516, %502 ], [ %500, %499 ]
  %504 = phi i64 [ %517, %502 ], [ %445, %499 ]
  %505 = or i64 %503, 1
  %506 = getelementptr inbounds double, double* %342, i64 %505
  %507 = bitcast double* %506 to <2 x i64>*
  %508 = load <2 x i64>, <2 x i64>* %507, align 8, !alias.scope !47
  %509 = getelementptr inbounds double, double* %506, i64 2
  %510 = bitcast double* %509 to <2 x i64>*
  %511 = load <2 x i64>, <2 x i64>* %510, align 8, !alias.scope !47
  %512 = getelementptr inbounds double, double* %348, i64 %505
  %513 = bitcast double* %512 to <2 x i64>*
  store <2 x i64> %508, <2 x i64>* %513, align 8, !alias.scope !50, !noalias !47
  %514 = getelementptr inbounds double, double* %512, i64 2
  %515 = bitcast double* %514 to <2 x i64>*
  store <2 x i64> %511, <2 x i64>* %515, align 8, !alias.scope !50, !noalias !47
  %516 = add i64 %503, 4
  %517 = add i64 %504, -1
  %518 = icmp eq i64 %517, 0
  br i1 %518, label %519, label %502, !llvm.loop !53

519:                                              ; preds = %502, %499
  %520 = icmp eq i64 %235, %443
  br i1 %520, label %521, label %412

521:                                              ; preds = %429, %629, %519, %404
  br i1 %352, label %687, label %522

522:                                              ; preds = %521
  %523 = and i64 %222, 3
  %524 = icmp ult i64 %223, 3
  br i1 %524, label %553, label %525

525:                                              ; preds = %522
  %526 = sub i64 %222, %523
  br label %527

527:                                              ; preds = %527, %525
  %528 = phi i64 [ 0, %525 ], [ %550, %527 ]
  %529 = phi double [ 0.000000e+00, %525 ], [ %549, %527 ]
  %530 = phi i64 [ %526, %525 ], [ %551, %527 ]
  %531 = getelementptr inbounds double, double* %348, i64 %528
  %532 = load double, double* %531, align 8, !alias.scope !54, !noalias !57
  %533 = fmul double %532, %532
  %534 = fadd double %529, %533
  %535 = or i64 %528, 1
  %536 = getelementptr inbounds double, double* %348, i64 %535
  %537 = load double, double* %536, align 8, !alias.scope !54, !noalias !57
  %538 = fmul double %537, %537
  %539 = fadd double %534, %538
  %540 = or i64 %528, 2
  %541 = getelementptr inbounds double, double* %348, i64 %540
  %542 = load double, double* %541, align 8, !alias.scope !54, !noalias !57
  %543 = fmul double %542, %542
  %544 = fadd double %539, %543
  %545 = or i64 %528, 3
  %546 = getelementptr inbounds double, double* %348, i64 %545
  %547 = load double, double* %546, align 8, !alias.scope !54, !noalias !57
  %548 = fmul double %547, %547
  %549 = fadd double %544, %548
  %550 = add nuw i64 %528, 4
  %551 = add i64 %530, -4
  %552 = icmp eq i64 %551, 0
  br i1 %552, label %553, label %527

553:                                              ; preds = %527, %522
  %554 = phi double [ undef, %522 ], [ %549, %527 ]
  %555 = phi i64 [ 0, %522 ], [ %550, %527 ]
  %556 = phi double [ 0.000000e+00, %522 ], [ %549, %527 ]
  %557 = icmp eq i64 %523, 0
  br i1 %557, label %569, label %558

558:                                              ; preds = %553, %558
  %559 = phi i64 [ %566, %558 ], [ %555, %553 ]
  %560 = phi double [ %565, %558 ], [ %556, %553 ]
  %561 = phi i64 [ %567, %558 ], [ %523, %553 ]
  %562 = getelementptr inbounds double, double* %348, i64 %559
  %563 = load double, double* %562, align 8, !alias.scope !54, !noalias !57
  %564 = fmul double %563, %563
  %565 = fadd double %560, %564
  %566 = add nuw i64 %559, 1
  %567 = add i64 %561, -1
  %568 = icmp eq i64 %567, 0
  br i1 %568, label %569, label %558, !llvm.loop !59

569:                                              ; preds = %558, %553
  %570 = phi double [ %554, %553 ], [ %565, %558 ]
  %571 = call double @sqrt(double %570) #9
  %572 = fdiv double 1.000000e+00, %571
  %573 = icmp ult i64 %237, 4
  br i1 %573, label %574, label %576

574:                                              ; preds = %627, %569
  %575 = phi i64 [ 0, %569 ], [ %577, %627 ]
  br label %680

576:                                              ; preds = %569
  %577 = and i64 %237, -4
  %578 = insertelement <2 x double> undef, double %572, i32 0
  %579 = shufflevector <2 x double> %578, <2 x double> undef, <2 x i32> zeroinitializer
  %580 = insertelement <2 x double> undef, double %572, i32 0
  %581 = shufflevector <2 x double> %580, <2 x double> undef, <2 x i32> zeroinitializer
  %582 = and i64 %221, 1
  %583 = icmp eq i64 %220, 0
  br i1 %583, label %613, label %584

584:                                              ; preds = %576
  %585 = sub nuw nsw i64 %221, %582
  br label %586

586:                                              ; preds = %586, %584
  %587 = phi i64 [ 0, %584 ], [ %610, %586 ]
  %588 = phi i64 [ %585, %584 ], [ %611, %586 ]
  %589 = getelementptr inbounds double, double* %348, i64 %587
  %590 = bitcast double* %589 to <2 x double>*
  %591 = load <2 x double>, <2 x double>* %590, align 8
  %592 = getelementptr inbounds double, double* %589, i64 2
  %593 = bitcast double* %592 to <2 x double>*
  %594 = load <2 x double>, <2 x double>* %593, align 8
  %595 = fmul <2 x double> %579, %591
  %596 = fmul <2 x double> %581, %594
  %597 = bitcast double* %589 to <2 x double>*
  store <2 x double> %595, <2 x double>* %597, align 8
  %598 = bitcast double* %592 to <2 x double>*
  store <2 x double> %596, <2 x double>* %598, align 8
  %599 = or i64 %587, 4
  %600 = getelementptr inbounds double, double* %348, i64 %599
  %601 = bitcast double* %600 to <2 x double>*
  %602 = load <2 x double>, <2 x double>* %601, align 8
  %603 = getelementptr inbounds double, double* %600, i64 2
  %604 = bitcast double* %603 to <2 x double>*
  %605 = load <2 x double>, <2 x double>* %604, align 8
  %606 = fmul <2 x double> %579, %602
  %607 = fmul <2 x double> %581, %605
  %608 = bitcast double* %600 to <2 x double>*
  store <2 x double> %606, <2 x double>* %608, align 8
  %609 = bitcast double* %603 to <2 x double>*
  store <2 x double> %607, <2 x double>* %609, align 8
  %610 = add i64 %587, 8
  %611 = add i64 %588, -2
  %612 = icmp eq i64 %611, 0
  br i1 %612, label %613, label %586, !llvm.loop !60

613:                                              ; preds = %586, %576
  %614 = phi i64 [ 0, %576 ], [ %610, %586 ]
  %615 = icmp eq i64 %582, 0
  br i1 %615, label %627, label %616

616:                                              ; preds = %613
  %617 = getelementptr inbounds double, double* %348, i64 %614
  %618 = bitcast double* %617 to <2 x double>*
  %619 = load <2 x double>, <2 x double>* %618, align 8
  %620 = getelementptr inbounds double, double* %617, i64 2
  %621 = bitcast double* %620 to <2 x double>*
  %622 = load <2 x double>, <2 x double>* %621, align 8
  %623 = fmul <2 x double> %579, %619
  %624 = fmul <2 x double> %581, %622
  %625 = bitcast double* %617 to <2 x double>*
  store <2 x double> %623, <2 x double>* %625, align 8
  %626 = bitcast double* %620 to <2 x double>*
  store <2 x double> %624, <2 x double>* %626, align 8
  br label %627

627:                                              ; preds = %613, %616
  %628 = icmp eq i64 %237, %577
  br i1 %628, label %687, label %574

629:                                              ; preds = %429, %629
  %630 = phi i64 [ %678, %629 ], [ %430, %429 ]
  %631 = getelementptr inbounds double, double* %342, i64 %630
  %632 = bitcast double* %631 to i64*
  %633 = load i64, i64* %632, align 8
  %634 = getelementptr inbounds double, double* %348, i64 %630
  %635 = bitcast double* %634 to i64*
  store i64 %633, i64* %635, align 8
  %636 = add nuw i64 %630, 1
  %637 = getelementptr inbounds double, double* %342, i64 %636
  %638 = bitcast double* %637 to i64*
  %639 = load i64, i64* %638, align 8
  %640 = getelementptr inbounds double, double* %348, i64 %636
  %641 = bitcast double* %640 to i64*
  store i64 %639, i64* %641, align 8
  %642 = add nuw i64 %630, 2
  %643 = getelementptr inbounds double, double* %342, i64 %642
  %644 = bitcast double* %643 to i64*
  %645 = load i64, i64* %644, align 8
  %646 = getelementptr inbounds double, double* %348, i64 %642
  %647 = bitcast double* %646 to i64*
  store i64 %645, i64* %647, align 8
  %648 = add nuw i64 %630, 3
  %649 = getelementptr inbounds double, double* %342, i64 %648
  %650 = bitcast double* %649 to i64*
  %651 = load i64, i64* %650, align 8
  %652 = getelementptr inbounds double, double* %348, i64 %648
  %653 = bitcast double* %652 to i64*
  store i64 %651, i64* %653, align 8
  %654 = add nuw i64 %630, 4
  %655 = getelementptr inbounds double, double* %342, i64 %654
  %656 = bitcast double* %655 to i64*
  %657 = load i64, i64* %656, align 8
  %658 = getelementptr inbounds double, double* %348, i64 %654
  %659 = bitcast double* %658 to i64*
  store i64 %657, i64* %659, align 8
  %660 = add nuw i64 %630, 5
  %661 = getelementptr inbounds double, double* %342, i64 %660
  %662 = bitcast double* %661 to i64*
  %663 = load i64, i64* %662, align 8
  %664 = getelementptr inbounds double, double* %348, i64 %660
  %665 = bitcast double* %664 to i64*
  store i64 %663, i64* %665, align 8
  %666 = add nuw i64 %630, 6
  %667 = getelementptr inbounds double, double* %342, i64 %666
  %668 = bitcast double* %667 to i64*
  %669 = load i64, i64* %668, align 8
  %670 = getelementptr inbounds double, double* %348, i64 %666
  %671 = bitcast double* %670 to i64*
  store i64 %669, i64* %671, align 8
  %672 = add nuw i64 %630, 7
  %673 = getelementptr inbounds double, double* %342, i64 %672
  %674 = bitcast double* %673 to i64*
  %675 = load i64, i64* %674, align 8
  %676 = getelementptr inbounds double, double* %348, i64 %672
  %677 = bitcast double* %676 to i64*
  store i64 %675, i64* %677, align 8
  %678 = add nuw i64 %630, 8
  %679 = icmp eq i64 %678, %332
  br i1 %679, label %521, label %629, !llvm.loop !61

680:                                              ; preds = %574, %680
  %681 = phi i64 [ %685, %680 ], [ %575, %574 ]
  %682 = getelementptr inbounds double, double* %348, i64 %681
  %683 = load double, double* %682, align 8
  %684 = fmul double %572, %683
  store double %684, double* %682, align 8
  %685 = add nuw i64 %681, 1
  %686 = icmp eq i64 %685, %332
  br i1 %686, label %687, label %680, !llvm.loop !62

687:                                              ; preds = %680, %627, %521
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %134) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %171, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl6MatMulIdddEENS_5PlaneIT_EERKNS1_IT0_EERKNS1_IT1_EE(%"class.jxl::Plane"* nonnull sret %8, %"class.jxl::Plane"* dereferenceable(32) %1, %"class.jxl::Plane"* nonnull dereferenceable(32) %7) #9
  %688 = load i32, i32* %130, align 4
  %689 = icmp eq i32 %688, 1
  br i1 %689, label %693, label %690

690:                                              ; preds = %687
  %691 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.6, i64 0, i64 0), i32 60, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)) #9
  %692 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

693:                                              ; preds = %687
  %694 = load i32, i32* %136, align 4
  %695 = icmp eq i32 %694, 1
  br i1 %695, label %699, label %696

696:                                              ; preds = %693
  %697 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.6, i64 0, i64 0), i32 61, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)) #9
  %698 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

699:                                              ; preds = %693
  %700 = load i32, i32* %129, align 8
  %701 = zext i32 %700 to i64
  %702 = load i32, i32* %135, align 8
  %703 = icmp eq i32 %700, %702
  br i1 %703, label %707, label %704

704:                                              ; preds = %699
  %705 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.6, i64 0, i64 0), i32 62, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0)) #9
  %706 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

707:                                              ; preds = %699
  %708 = load i8*, i8** %132, align 8
  %709 = ptrtoint i8* %708 to i64
  %710 = and i64 %709, 63
  %711 = icmp eq i64 %710, 0
  call void @llvm.assume(i1 %711) #9
  %712 = bitcast i8* %708 to double*
  %713 = load i8*, i8** %138, align 8
  %714 = ptrtoint i8* %713 to i64
  %715 = and i64 %714, 63
  %716 = icmp eq i64 %715, 0
  call void @llvm.assume(i1 %716) #9
  %717 = bitcast i8* %713 to double*
  %718 = icmp eq i32 %700, 0
  br i1 %718, label %777, label %719

719:                                              ; preds = %707
  %720 = add nsw i64 %701, -1
  %721 = and i64 %701, 3
  %722 = icmp ult i64 %720, 3
  br i1 %722, label %759, label %723

723:                                              ; preds = %719
  %724 = sub nsw i64 %701, %721
  br label %725

725:                                              ; preds = %725, %723
  %726 = phi i64 [ 0, %723 ], [ %756, %725 ]
  %727 = phi double [ 0.000000e+00, %723 ], [ %755, %725 ]
  %728 = phi i64 [ %724, %723 ], [ %757, %725 ]
  %729 = getelementptr inbounds double, double* %712, i64 %726
  %730 = load double, double* %729, align 32, !alias.scope !63, !noalias !66
  %731 = getelementptr inbounds double, double* %717, i64 %726
  %732 = load double, double* %731, align 32, !alias.scope !66, !noalias !63
  %733 = fmul double %730, %732
  %734 = fadd double %727, %733
  %735 = or i64 %726, 1
  %736 = getelementptr inbounds double, double* %712, i64 %735
  %737 = load double, double* %736, align 8, !alias.scope !63, !noalias !66
  %738 = getelementptr inbounds double, double* %717, i64 %735
  %739 = load double, double* %738, align 8, !alias.scope !66, !noalias !63
  %740 = fmul double %737, %739
  %741 = fadd double %734, %740
  %742 = or i64 %726, 2
  %743 = getelementptr inbounds double, double* %712, i64 %742
  %744 = load double, double* %743, align 16, !alias.scope !63, !noalias !66
  %745 = getelementptr inbounds double, double* %717, i64 %742
  %746 = load double, double* %745, align 16, !alias.scope !66, !noalias !63
  %747 = fmul double %744, %746
  %748 = fadd double %741, %747
  %749 = or i64 %726, 3
  %750 = getelementptr inbounds double, double* %712, i64 %749
  %751 = load double, double* %750, align 8, !alias.scope !63, !noalias !66
  %752 = getelementptr inbounds double, double* %717, i64 %749
  %753 = load double, double* %752, align 8, !alias.scope !66, !noalias !63
  %754 = fmul double %751, %753
  %755 = fadd double %748, %754
  %756 = add nuw nsw i64 %726, 4
  %757 = add i64 %728, -4
  %758 = icmp eq i64 %757, 0
  br i1 %758, label %759, label %725

759:                                              ; preds = %725, %719
  %760 = phi double [ undef, %719 ], [ %755, %725 ]
  %761 = phi i64 [ 0, %719 ], [ %756, %725 ]
  %762 = phi double [ 0.000000e+00, %719 ], [ %755, %725 ]
  %763 = icmp eq i64 %721, 0
  br i1 %763, label %777, label %764

764:                                              ; preds = %759, %764
  %765 = phi i64 [ %774, %764 ], [ %761, %759 ]
  %766 = phi double [ %773, %764 ], [ %762, %759 ]
  %767 = phi i64 [ %775, %764 ], [ %721, %759 ]
  %768 = getelementptr inbounds double, double* %712, i64 %765
  %769 = load double, double* %768, align 8, !alias.scope !63, !noalias !66
  %770 = getelementptr inbounds double, double* %717, i64 %765
  %771 = load double, double* %770, align 8, !alias.scope !66, !noalias !63
  %772 = fmul double %769, %771
  %773 = fadd double %766, %772
  %774 = add nuw nsw i64 %765, 1
  %775 = add i64 %767, -1
  %776 = icmp eq i64 %775, 0
  br i1 %776, label %777, label %764, !llvm.loop !68

777:                                              ; preds = %759, %764, %707
  %778 = phi double [ 0.000000e+00, %707 ], [ %760, %759 ], [ %773, %764 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %139) #9
  %779 = fmul double %778, -2.000000e+00
  call void @_ZN3jxl7LinCombIdEENS_5PlaneIT_EES2_RKS3_S2_S5_(%"class.jxl::Plane"* nonnull sret %9, double 2.000000e+00, %"class.jxl::Plane"* nonnull dereferenceable(32) %8, double %779, %"class.jxl::Plane"* nonnull dereferenceable(32) %7)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %134, i8* nonnull align 8 %139, i64 24, i1 false) #9
  %780 = load i64, i64* %143, align 8
  store i8* null, i8** %142, align 8
  %781 = load i8*, i8** %144, align 8
  store i64 %780, i64* %145, align 8
  %782 = icmp eq i8* %781, null
  br i1 %782, label %783, label %784

783:                                              ; preds = %777
  store i8* null, i8** %146, align 8
  br label %788

784:                                              ; preds = %777
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %781) #9
  %785 = load i8*, i8** %146, align 8
  store i8* null, i8** %146, align 8
  %786 = icmp eq i8* %785, null
  br i1 %786, label %788, label %787

787:                                              ; preds = %784
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %785) #9
  br label %788

788:                                              ; preds = %783, %784, %787
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %139) #9
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %147) #9
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %148) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %148, i8 -86, i64 32, i1 false) #9, !alias.scope !69
  %789 = load i32, i32* %136, align 4, !noalias !69
  %790 = zext i32 %789 to i64
  %791 = load i32, i32* %135, align 8, !noalias !69
  %792 = zext i32 %791 to i64
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %151, i64 %790, i64 %792, i64 8) #9
  %793 = load i32, i32* %135, align 8, !noalias !69
  %794 = icmp eq i32 %793, 0
  br i1 %794, label %837, label %795

795:                                              ; preds = %788
  %796 = load i32, i32* %136, align 4, !noalias !69
  br label %797

797:                                              ; preds = %812, %795
  %798 = phi i32 [ %793, %795 ], [ %813, %812 ]
  %799 = phi i32 [ %796, %795 ], [ %814, %812 ]
  %800 = phi i64 [ 0, %795 ], [ %815, %812 ]
  %801 = load i8*, i8** %150, align 8, !alias.scope !69
  %802 = load i64, i64* %149, align 8, !alias.scope !69
  %803 = mul i64 %802, %800
  %804 = getelementptr inbounds i8, i8* %801, i64 %803
  %805 = ptrtoint i8* %804 to i64
  %806 = and i64 %805, 63
  %807 = icmp eq i64 %806, 0
  call void @llvm.assume(i1 %807) #9
  %808 = bitcast i8* %804 to double*
  %809 = icmp eq i32 %799, 0
  br i1 %809, label %812, label %818

810:                                              ; preds = %818
  %811 = load i32, i32* %135, align 8, !noalias !69
  br label %812

812:                                              ; preds = %810, %797
  %813 = phi i32 [ %811, %810 ], [ %798, %797 ]
  %814 = phi i32 [ %834, %810 ], [ 0, %797 ]
  %815 = add nuw nsw i64 %800, 1
  %816 = zext i32 %813 to i64
  %817 = icmp ult i64 %815, %816
  br i1 %817, label %797, label %837

818:                                              ; preds = %797, %818
  %819 = phi i64 [ %833, %818 ], [ 0, %797 ]
  %820 = load i8*, i8** %138, align 8, !noalias !69
  %821 = load i64, i64* %137, align 8, !noalias !69
  %822 = mul i64 %821, %819
  %823 = getelementptr inbounds i8, i8* %820, i64 %822
  %824 = ptrtoint i8* %823 to i64
  %825 = and i64 %824, 63
  %826 = icmp eq i64 %825, 0
  call void @llvm.assume(i1 %826) #9
  %827 = bitcast i8* %823 to double*
  %828 = getelementptr inbounds double, double* %827, i64 %800
  %829 = bitcast double* %828 to i64*
  %830 = load i64, i64* %829, align 8
  %831 = getelementptr inbounds double, double* %808, i64 %819
  %832 = bitcast double* %831 to i64*
  store i64 %830, i64* %832, align 8
  %833 = add nuw nsw i64 %819, 1
  %834 = load i32, i32* %136, align 4, !noalias !69
  %835 = zext i32 %834 to i64
  %836 = icmp ult i64 %833, %835
  br i1 %836, label %818, label %810

837:                                              ; preds = %812, %788
  call void @_ZN3jxl6MatMulIdddEENS_5PlaneIT_EERKNS1_IT0_EERKNS1_IT1_EE(%"class.jxl::Plane"* nonnull sret %10, %"class.jxl::Plane"* nonnull dereferenceable(32) %7, %"class.jxl::Plane"* nonnull dereferenceable(32) %11) #9
  %838 = load i32, i32* %152, align 8
  %839 = zext i32 %838 to i64
  %840 = load i32, i32* %153, align 4
  %841 = zext i32 %840 to i64
  %842 = icmp eq i32 %840, 0
  br i1 %842, label %995, label %843

843:                                              ; preds = %837
  %844 = icmp eq i32 %838, 0
  %845 = shl nuw nsw i64 %839, 3
  %846 = and i64 %839, 4294967292
  %847 = add nsw i64 %846, -4
  %848 = lshr exact i64 %847, 2
  %849 = add nuw nsw i64 %848, 1
  %850 = icmp ult i32 %838, 4
  %851 = and i64 %839, 4294967292
  %852 = and i64 %849, 1
  %853 = icmp eq i64 %847, 0
  %854 = sub nuw nsw i64 %849, %852
  %855 = icmp eq i64 %852, 0
  %856 = icmp eq i64 %851, %839
  %857 = and i64 %839, 3
  %858 = icmp eq i64 %857, 0
  br label %859

859:                                              ; preds = %965, %843
  %860 = phi i64 [ 0, %843 ], [ %966, %965 ]
  %861 = load i8*, i8** %154, align 8
  %862 = load i64, i64* %155, align 8
  %863 = mul i64 %862, %860
  %864 = getelementptr inbounds i8, i8* %861, i64 %863
  %865 = ptrtoint i8* %864 to i64
  %866 = and i64 %865, 63
  %867 = icmp eq i64 %866, 0
  call void @llvm.assume(i1 %867) #9
  %868 = bitcast i8* %864 to double*
  %869 = load i8*, i8** %126, align 8
  %870 = load i64, i64* %127, align 8
  %871 = mul i64 %870, %860
  %872 = getelementptr inbounds i8, i8* %869, i64 %871
  %873 = ptrtoint i8* %872 to i64
  %874 = and i64 %873, 63
  %875 = icmp eq i64 %874, 0
  call void @llvm.assume(i1 %875) #9
  %876 = bitcast i8* %872 to double*
  br i1 %844, label %965, label %877

877:                                              ; preds = %859
  br i1 %850, label %878, label %896

878:                                              ; preds = %964, %896, %877
  %879 = phi i64 [ 0, %896 ], [ 0, %877 ], [ %851, %964 ]
  %880 = xor i64 %879, -1
  %881 = add nsw i64 %880, %839
  br i1 %858, label %893, label %882

882:                                              ; preds = %878, %882
  %883 = phi i64 [ %890, %882 ], [ %879, %878 ]
  %884 = phi i64 [ %891, %882 ], [ %857, %878 ]
  %885 = getelementptr inbounds double, double* %868, i64 %883
  %886 = load double, double* %885, align 8
  %887 = getelementptr inbounds double, double* %876, i64 %883
  %888 = load double, double* %887, align 8
  %889 = fsub double %888, %886
  store double %889, double* %887, align 8
  %890 = add nuw nsw i64 %883, 1
  %891 = add i64 %884, -1
  %892 = icmp eq i64 %891, 0
  br i1 %892, label %893, label %882, !llvm.loop !72

893:                                              ; preds = %882, %878
  %894 = phi i64 [ %879, %878 ], [ %890, %882 ]
  %895 = icmp ult i64 %881, 3
  br i1 %895, label %965, label %968

896:                                              ; preds = %877
  %897 = getelementptr i8, i8* %869, i64 %845
  %898 = getelementptr i8, i8* %897, i64 %871
  %899 = getelementptr i8, i8* %861, i64 %845
  %900 = mul i64 %862, %860
  %901 = getelementptr i8, i8* %899, i64 %900
  %902 = icmp ult i8* %872, %901
  %903 = icmp ult i8* %864, %898
  %904 = and i1 %902, %903
  br i1 %904, label %878, label %905

905:                                              ; preds = %896
  br i1 %853, label %945, label %906

906:                                              ; preds = %905, %906
  %907 = phi i64 [ %942, %906 ], [ 0, %905 ]
  %908 = phi i64 [ %943, %906 ], [ %854, %905 ]
  %909 = getelementptr inbounds double, double* %868, i64 %907
  %910 = bitcast double* %909 to <2 x double>*
  %911 = load <2 x double>, <2 x double>* %910, align 64, !alias.scope !73
  %912 = getelementptr inbounds double, double* %909, i64 2
  %913 = bitcast double* %912 to <2 x double>*
  %914 = load <2 x double>, <2 x double>* %913, align 16, !alias.scope !73
  %915 = getelementptr inbounds double, double* %876, i64 %907
  %916 = bitcast double* %915 to <2 x double>*
  %917 = load <2 x double>, <2 x double>* %916, align 64, !alias.scope !76, !noalias !73
  %918 = getelementptr inbounds double, double* %915, i64 2
  %919 = bitcast double* %918 to <2 x double>*
  %920 = load <2 x double>, <2 x double>* %919, align 16, !alias.scope !76, !noalias !73
  %921 = fsub <2 x double> %917, %911
  %922 = fsub <2 x double> %920, %914
  %923 = bitcast double* %915 to <2 x double>*
  store <2 x double> %921, <2 x double>* %923, align 64, !alias.scope !76, !noalias !73
  %924 = bitcast double* %918 to <2 x double>*
  store <2 x double> %922, <2 x double>* %924, align 16, !alias.scope !76, !noalias !73
  %925 = or i64 %907, 4
  %926 = getelementptr inbounds double, double* %868, i64 %925
  %927 = bitcast double* %926 to <2 x double>*
  %928 = load <2 x double>, <2 x double>* %927, align 32, !alias.scope !73
  %929 = getelementptr inbounds double, double* %926, i64 2
  %930 = bitcast double* %929 to <2 x double>*
  %931 = load <2 x double>, <2 x double>* %930, align 16, !alias.scope !73
  %932 = getelementptr inbounds double, double* %876, i64 %925
  %933 = bitcast double* %932 to <2 x double>*
  %934 = load <2 x double>, <2 x double>* %933, align 32, !alias.scope !76, !noalias !73
  %935 = getelementptr inbounds double, double* %932, i64 2
  %936 = bitcast double* %935 to <2 x double>*
  %937 = load <2 x double>, <2 x double>* %936, align 16, !alias.scope !76, !noalias !73
  %938 = fsub <2 x double> %934, %928
  %939 = fsub <2 x double> %937, %931
  %940 = bitcast double* %932 to <2 x double>*
  store <2 x double> %938, <2 x double>* %940, align 32, !alias.scope !76, !noalias !73
  %941 = bitcast double* %935 to <2 x double>*
  store <2 x double> %939, <2 x double>* %941, align 16, !alias.scope !76, !noalias !73
  %942 = add i64 %907, 8
  %943 = add i64 %908, -2
  %944 = icmp eq i64 %943, 0
  br i1 %944, label %945, label %906, !llvm.loop !78

945:                                              ; preds = %906, %905
  %946 = phi i64 [ 0, %905 ], [ %942, %906 ]
  br i1 %855, label %964, label %947

947:                                              ; preds = %945
  %948 = getelementptr inbounds double, double* %868, i64 %946
  %949 = bitcast double* %948 to <2 x double>*
  %950 = load <2 x double>, <2 x double>* %949, align 32, !alias.scope !73
  %951 = getelementptr inbounds double, double* %948, i64 2
  %952 = bitcast double* %951 to <2 x double>*
  %953 = load <2 x double>, <2 x double>* %952, align 16, !alias.scope !73
  %954 = getelementptr inbounds double, double* %876, i64 %946
  %955 = bitcast double* %954 to <2 x double>*
  %956 = load <2 x double>, <2 x double>* %955, align 32, !alias.scope !76, !noalias !73
  %957 = getelementptr inbounds double, double* %954, i64 2
  %958 = bitcast double* %957 to <2 x double>*
  %959 = load <2 x double>, <2 x double>* %958, align 16, !alias.scope !76, !noalias !73
  %960 = fsub <2 x double> %956, %950
  %961 = fsub <2 x double> %959, %953
  %962 = bitcast double* %954 to <2 x double>*
  store <2 x double> %960, <2 x double>* %962, align 32, !alias.scope !76, !noalias !73
  %963 = bitcast double* %957 to <2 x double>*
  store <2 x double> %961, <2 x double>* %963, align 16, !alias.scope !76, !noalias !73
  br label %964

964:                                              ; preds = %945, %947
  br i1 %856, label %965, label %878

965:                                              ; preds = %893, %968, %964, %859
  %966 = add nuw nsw i64 %860, 1
  %967 = icmp eq i64 %966, %841
  br i1 %967, label %995, label %859

968:                                              ; preds = %893, %968
  %969 = phi i64 [ %993, %968 ], [ %894, %893 ]
  %970 = getelementptr inbounds double, double* %868, i64 %969
  %971 = load double, double* %970, align 8
  %972 = getelementptr inbounds double, double* %876, i64 %969
  %973 = load double, double* %972, align 8
  %974 = fsub double %973, %971
  store double %974, double* %972, align 8
  %975 = add nuw nsw i64 %969, 1
  %976 = getelementptr inbounds double, double* %868, i64 %975
  %977 = load double, double* %976, align 8
  %978 = getelementptr inbounds double, double* %876, i64 %975
  %979 = load double, double* %978, align 8
  %980 = fsub double %979, %977
  store double %980, double* %978, align 8
  %981 = add nuw nsw i64 %969, 2
  %982 = getelementptr inbounds double, double* %868, i64 %981
  %983 = load double, double* %982, align 8
  %984 = getelementptr inbounds double, double* %876, i64 %981
  %985 = load double, double* %984, align 8
  %986 = fsub double %985, %983
  store double %986, double* %984, align 8
  %987 = add nuw nsw i64 %969, 3
  %988 = getelementptr inbounds double, double* %868, i64 %987
  %989 = load double, double* %988, align 8
  %990 = getelementptr inbounds double, double* %876, i64 %987
  %991 = load double, double* %990, align 8
  %992 = fsub double %991, %989
  store double %992, double* %990, align 8
  %993 = add nuw nsw i64 %969, 4
  %994 = icmp eq i64 %993, %839
  br i1 %994, label %965, label %968, !llvm.loop !79

995:                                              ; preds = %965, %837
  %996 = load i8*, i8** %154, align 8
  store i8* null, i8** %154, align 8
  %997 = icmp eq i8* %996, null
  br i1 %997, label %999, label %998

998:                                              ; preds = %995
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %996) #9
  br label %999

999:                                              ; preds = %995, %998
  %1000 = load i8*, i8** %150, align 8
  store i8* null, i8** %150, align 8
  %1001 = icmp eq i8* %1000, null
  br i1 %1001, label %1003, label %1002

1002:                                             ; preds = %999
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1000) #9
  br label %1003

1003:                                             ; preds = %999, %1002
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %148) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %147) #9
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %156) #9
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %157) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %157, i8 -86, i64 32, i1 false) #9, !alias.scope !80
  %1004 = load i32, i32* %130, align 4, !noalias !80
  %1005 = zext i32 %1004 to i64
  %1006 = load i32, i32* %129, align 8, !noalias !80
  %1007 = zext i32 %1006 to i64
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %160, i64 %1005, i64 %1007, i64 8) #9
  %1008 = load i32, i32* %129, align 8, !noalias !80
  %1009 = icmp eq i32 %1008, 0
  br i1 %1009, label %1052, label %1010

1010:                                             ; preds = %1003
  %1011 = load i32, i32* %130, align 4, !noalias !80
  br label %1012

1012:                                             ; preds = %1027, %1010
  %1013 = phi i32 [ %1008, %1010 ], [ %1028, %1027 ]
  %1014 = phi i32 [ %1011, %1010 ], [ %1029, %1027 ]
  %1015 = phi i64 [ 0, %1010 ], [ %1030, %1027 ]
  %1016 = load i8*, i8** %159, align 8, !alias.scope !80
  %1017 = load i64, i64* %158, align 8, !alias.scope !80
  %1018 = mul i64 %1017, %1015
  %1019 = getelementptr inbounds i8, i8* %1016, i64 %1018
  %1020 = ptrtoint i8* %1019 to i64
  %1021 = and i64 %1020, 63
  %1022 = icmp eq i64 %1021, 0
  call void @llvm.assume(i1 %1022) #9
  %1023 = bitcast i8* %1019 to double*
  %1024 = icmp eq i32 %1014, 0
  br i1 %1024, label %1027, label %1033

1025:                                             ; preds = %1033
  %1026 = load i32, i32* %129, align 8, !noalias !80
  br label %1027

1027:                                             ; preds = %1025, %1012
  %1028 = phi i32 [ %1026, %1025 ], [ %1013, %1012 ]
  %1029 = phi i32 [ %1049, %1025 ], [ 0, %1012 ]
  %1030 = add nuw nsw i64 %1015, 1
  %1031 = zext i32 %1028 to i64
  %1032 = icmp ult i64 %1030, %1031
  br i1 %1032, label %1012, label %1052

1033:                                             ; preds = %1012, %1033
  %1034 = phi i64 [ %1048, %1033 ], [ 0, %1012 ]
  %1035 = load i8*, i8** %132, align 8, !noalias !80
  %1036 = load i64, i64* %131, align 8, !noalias !80
  %1037 = mul i64 %1036, %1034
  %1038 = getelementptr inbounds i8, i8* %1035, i64 %1037
  %1039 = ptrtoint i8* %1038 to i64
  %1040 = and i64 %1039, 63
  %1041 = icmp eq i64 %1040, 0
  call void @llvm.assume(i1 %1041) #9
  %1042 = bitcast i8* %1038 to double*
  %1043 = getelementptr inbounds double, double* %1042, i64 %1015
  %1044 = bitcast double* %1043 to i64*
  %1045 = load i64, i64* %1044, align 8
  %1046 = getelementptr inbounds double, double* %1023, i64 %1034
  %1047 = bitcast double* %1046 to i64*
  store i64 %1045, i64* %1047, align 8
  %1048 = add nuw nsw i64 %1034, 1
  %1049 = load i32, i32* %130, align 4, !noalias !80
  %1050 = zext i32 %1049 to i64
  %1051 = icmp ult i64 %1048, %1050
  br i1 %1051, label %1033, label %1025

1052:                                             ; preds = %1027, %1003
  call void @_ZN3jxl6MatMulIdddEENS_5PlaneIT_EERKNS1_IT0_EERKNS1_IT1_EE(%"class.jxl::Plane"* nonnull sret %12, %"class.jxl::Plane"* nonnull dereferenceable(32) %8, %"class.jxl::Plane"* nonnull dereferenceable(32) %13) #9
  %1053 = load i32, i32* %161, align 8
  %1054 = zext i32 %1053 to i64
  %1055 = load i32, i32* %162, align 4
  %1056 = zext i32 %1055 to i64
  %1057 = icmp eq i32 %1055, 0
  br i1 %1057, label %1210, label %1058

1058:                                             ; preds = %1052
  %1059 = icmp eq i32 %1053, 0
  %1060 = shl nuw nsw i64 %1054, 3
  %1061 = and i64 %1054, 4294967292
  %1062 = add nsw i64 %1061, -4
  %1063 = lshr exact i64 %1062, 2
  %1064 = add nuw nsw i64 %1063, 1
  %1065 = icmp ult i32 %1053, 4
  %1066 = and i64 %1054, 4294967292
  %1067 = and i64 %1064, 1
  %1068 = icmp eq i64 %1062, 0
  %1069 = sub nuw nsw i64 %1064, %1067
  %1070 = icmp eq i64 %1067, 0
  %1071 = icmp eq i64 %1066, %1054
  %1072 = and i64 %1054, 3
  %1073 = icmp eq i64 %1072, 0
  br label %1074

1074:                                             ; preds = %1180, %1058
  %1075 = phi i64 [ 0, %1058 ], [ %1181, %1180 ]
  %1076 = load i8*, i8** %163, align 8
  %1077 = load i64, i64* %164, align 8
  %1078 = mul i64 %1077, %1075
  %1079 = getelementptr inbounds i8, i8* %1076, i64 %1078
  %1080 = ptrtoint i8* %1079 to i64
  %1081 = and i64 %1080, 63
  %1082 = icmp eq i64 %1081, 0
  call void @llvm.assume(i1 %1082) #9
  %1083 = bitcast i8* %1079 to double*
  %1084 = load i8*, i8** %126, align 8
  %1085 = load i64, i64* %127, align 8
  %1086 = mul i64 %1085, %1075
  %1087 = getelementptr inbounds i8, i8* %1084, i64 %1086
  %1088 = ptrtoint i8* %1087 to i64
  %1089 = and i64 %1088, 63
  %1090 = icmp eq i64 %1089, 0
  call void @llvm.assume(i1 %1090) #9
  %1091 = bitcast i8* %1087 to double*
  br i1 %1059, label %1180, label %1092

1092:                                             ; preds = %1074
  br i1 %1065, label %1093, label %1111

1093:                                             ; preds = %1179, %1111, %1092
  %1094 = phi i64 [ 0, %1111 ], [ 0, %1092 ], [ %1066, %1179 ]
  %1095 = xor i64 %1094, -1
  %1096 = add nsw i64 %1095, %1054
  br i1 %1073, label %1108, label %1097

1097:                                             ; preds = %1093, %1097
  %1098 = phi i64 [ %1105, %1097 ], [ %1094, %1093 ]
  %1099 = phi i64 [ %1106, %1097 ], [ %1072, %1093 ]
  %1100 = getelementptr inbounds double, double* %1083, i64 %1098
  %1101 = load double, double* %1100, align 8
  %1102 = getelementptr inbounds double, double* %1091, i64 %1098
  %1103 = load double, double* %1102, align 8
  %1104 = fsub double %1103, %1101
  store double %1104, double* %1102, align 8
  %1105 = add nuw nsw i64 %1098, 1
  %1106 = add i64 %1099, -1
  %1107 = icmp eq i64 %1106, 0
  br i1 %1107, label %1108, label %1097, !llvm.loop !83

1108:                                             ; preds = %1097, %1093
  %1109 = phi i64 [ %1094, %1093 ], [ %1105, %1097 ]
  %1110 = icmp ult i64 %1096, 3
  br i1 %1110, label %1180, label %1183

1111:                                             ; preds = %1092
  %1112 = getelementptr i8, i8* %1084, i64 %1060
  %1113 = getelementptr i8, i8* %1112, i64 %1086
  %1114 = getelementptr i8, i8* %1076, i64 %1060
  %1115 = mul i64 %1077, %1075
  %1116 = getelementptr i8, i8* %1114, i64 %1115
  %1117 = icmp ult i8* %1087, %1116
  %1118 = icmp ult i8* %1079, %1113
  %1119 = and i1 %1117, %1118
  br i1 %1119, label %1093, label %1120

1120:                                             ; preds = %1111
  br i1 %1068, label %1160, label %1121

1121:                                             ; preds = %1120, %1121
  %1122 = phi i64 [ %1157, %1121 ], [ 0, %1120 ]
  %1123 = phi i64 [ %1158, %1121 ], [ %1069, %1120 ]
  %1124 = getelementptr inbounds double, double* %1083, i64 %1122
  %1125 = bitcast double* %1124 to <2 x double>*
  %1126 = load <2 x double>, <2 x double>* %1125, align 64, !alias.scope !84
  %1127 = getelementptr inbounds double, double* %1124, i64 2
  %1128 = bitcast double* %1127 to <2 x double>*
  %1129 = load <2 x double>, <2 x double>* %1128, align 16, !alias.scope !84
  %1130 = getelementptr inbounds double, double* %1091, i64 %1122
  %1131 = bitcast double* %1130 to <2 x double>*
  %1132 = load <2 x double>, <2 x double>* %1131, align 64, !alias.scope !87, !noalias !84
  %1133 = getelementptr inbounds double, double* %1130, i64 2
  %1134 = bitcast double* %1133 to <2 x double>*
  %1135 = load <2 x double>, <2 x double>* %1134, align 16, !alias.scope !87, !noalias !84
  %1136 = fsub <2 x double> %1132, %1126
  %1137 = fsub <2 x double> %1135, %1129
  %1138 = bitcast double* %1130 to <2 x double>*
  store <2 x double> %1136, <2 x double>* %1138, align 64, !alias.scope !87, !noalias !84
  %1139 = bitcast double* %1133 to <2 x double>*
  store <2 x double> %1137, <2 x double>* %1139, align 16, !alias.scope !87, !noalias !84
  %1140 = or i64 %1122, 4
  %1141 = getelementptr inbounds double, double* %1083, i64 %1140
  %1142 = bitcast double* %1141 to <2 x double>*
  %1143 = load <2 x double>, <2 x double>* %1142, align 32, !alias.scope !84
  %1144 = getelementptr inbounds double, double* %1141, i64 2
  %1145 = bitcast double* %1144 to <2 x double>*
  %1146 = load <2 x double>, <2 x double>* %1145, align 16, !alias.scope !84
  %1147 = getelementptr inbounds double, double* %1091, i64 %1140
  %1148 = bitcast double* %1147 to <2 x double>*
  %1149 = load <2 x double>, <2 x double>* %1148, align 32, !alias.scope !87, !noalias !84
  %1150 = getelementptr inbounds double, double* %1147, i64 2
  %1151 = bitcast double* %1150 to <2 x double>*
  %1152 = load <2 x double>, <2 x double>* %1151, align 16, !alias.scope !87, !noalias !84
  %1153 = fsub <2 x double> %1149, %1143
  %1154 = fsub <2 x double> %1152, %1146
  %1155 = bitcast double* %1147 to <2 x double>*
  store <2 x double> %1153, <2 x double>* %1155, align 32, !alias.scope !87, !noalias !84
  %1156 = bitcast double* %1150 to <2 x double>*
  store <2 x double> %1154, <2 x double>* %1156, align 16, !alias.scope !87, !noalias !84
  %1157 = add i64 %1122, 8
  %1158 = add i64 %1123, -2
  %1159 = icmp eq i64 %1158, 0
  br i1 %1159, label %1160, label %1121, !llvm.loop !89

1160:                                             ; preds = %1121, %1120
  %1161 = phi i64 [ 0, %1120 ], [ %1157, %1121 ]
  br i1 %1070, label %1179, label %1162

1162:                                             ; preds = %1160
  %1163 = getelementptr inbounds double, double* %1083, i64 %1161
  %1164 = bitcast double* %1163 to <2 x double>*
  %1165 = load <2 x double>, <2 x double>* %1164, align 32, !alias.scope !84
  %1166 = getelementptr inbounds double, double* %1163, i64 2
  %1167 = bitcast double* %1166 to <2 x double>*
  %1168 = load <2 x double>, <2 x double>* %1167, align 16, !alias.scope !84
  %1169 = getelementptr inbounds double, double* %1091, i64 %1161
  %1170 = bitcast double* %1169 to <2 x double>*
  %1171 = load <2 x double>, <2 x double>* %1170, align 32, !alias.scope !87, !noalias !84
  %1172 = getelementptr inbounds double, double* %1169, i64 2
  %1173 = bitcast double* %1172 to <2 x double>*
  %1174 = load <2 x double>, <2 x double>* %1173, align 16, !alias.scope !87, !noalias !84
  %1175 = fsub <2 x double> %1171, %1165
  %1176 = fsub <2 x double> %1174, %1168
  %1177 = bitcast double* %1169 to <2 x double>*
  store <2 x double> %1175, <2 x double>* %1177, align 32, !alias.scope !87, !noalias !84
  %1178 = bitcast double* %1172 to <2 x double>*
  store <2 x double> %1176, <2 x double>* %1178, align 16, !alias.scope !87, !noalias !84
  br label %1179

1179:                                             ; preds = %1160, %1162
  br i1 %1071, label %1180, label %1093

1180:                                             ; preds = %1108, %1183, %1179, %1074
  %1181 = add nuw nsw i64 %1075, 1
  %1182 = icmp eq i64 %1181, %1056
  br i1 %1182, label %1210, label %1074

1183:                                             ; preds = %1108, %1183
  %1184 = phi i64 [ %1208, %1183 ], [ %1109, %1108 ]
  %1185 = getelementptr inbounds double, double* %1083, i64 %1184
  %1186 = load double, double* %1185, align 8
  %1187 = getelementptr inbounds double, double* %1091, i64 %1184
  %1188 = load double, double* %1187, align 8
  %1189 = fsub double %1188, %1186
  store double %1189, double* %1187, align 8
  %1190 = add nuw nsw i64 %1184, 1
  %1191 = getelementptr inbounds double, double* %1083, i64 %1190
  %1192 = load double, double* %1191, align 8
  %1193 = getelementptr inbounds double, double* %1091, i64 %1190
  %1194 = load double, double* %1193, align 8
  %1195 = fsub double %1194, %1192
  store double %1195, double* %1193, align 8
  %1196 = add nuw nsw i64 %1184, 2
  %1197 = getelementptr inbounds double, double* %1083, i64 %1196
  %1198 = load double, double* %1197, align 8
  %1199 = getelementptr inbounds double, double* %1091, i64 %1196
  %1200 = load double, double* %1199, align 8
  %1201 = fsub double %1200, %1198
  store double %1201, double* %1199, align 8
  %1202 = add nuw nsw i64 %1184, 3
  %1203 = getelementptr inbounds double, double* %1083, i64 %1202
  %1204 = load double, double* %1203, align 8
  %1205 = getelementptr inbounds double, double* %1091, i64 %1202
  %1206 = load double, double* %1205, align 8
  %1207 = fsub double %1206, %1204
  store double %1207, double* %1205, align 8
  %1208 = add nuw nsw i64 %1184, 4
  %1209 = icmp eq i64 %1208, %1054
  br i1 %1209, label %1180, label %1183, !llvm.loop !90

1210:                                             ; preds = %1180, %1052
  %1211 = load i8*, i8** %163, align 8
  store i8* null, i8** %163, align 8
  %1212 = icmp eq i8* %1211, null
  br i1 %1212, label %1214, label %1213

1213:                                             ; preds = %1210
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1211) #9
  br label %1214

1214:                                             ; preds = %1210, %1213
  %1215 = load i8*, i8** %159, align 8
  store i8* null, i8** %159, align 8
  %1216 = icmp eq i8* %1215, null
  br i1 %1216, label %1218, label %1217

1217:                                             ; preds = %1214
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1215) #9
  br label %1218

1218:                                             ; preds = %1214, %1217
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %157) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %156) #9
  %1219 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %122, align 8
  %1220 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %123, align 8
  %1221 = icmp ult %"class.jxl::Plane"* %1219, %1220
  br i1 %1221, label %1222, label %1229

1222:                                             ; preds = %1218
  %1223 = bitcast %"class.jxl::Plane"* %1219 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1223, i8* nonnull align 8 %128, i64 24, i1 false) #9
  %1224 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1219, i64 0, i32 0, i32 5
  %1225 = load i64, i64* %167, align 8
  store i8* null, i8** %166, align 8
  %1226 = bitcast %"class.std::__1::unique_ptr"* %1224 to i64*
  store i64 %1225, i64* %1226, align 8
  %1227 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1219, i64 1
  %1228 = ptrtoint %"class.jxl::Plane"* %1227 to i64
  store i64 %1228, i64* %168, align 8
  br label %1230

1229:                                             ; preds = %1218
  call void @_ZNSt3__16vectorIN3jxl5PlaneIdEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.4"* nonnull %6, %"class.jxl::Plane"* nonnull dereferenceable(32) %7) #9
  br label %1230

1230:                                             ; preds = %1222, %1229
  %1231 = load i8*, i8** %138, align 8
  store i8* null, i8** %138, align 8
  %1232 = icmp eq i8* %1231, null
  br i1 %1232, label %1234, label %1233

1233:                                             ; preds = %1230
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1231) #9
  br label %1234

1234:                                             ; preds = %1230, %1233
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %134) #9
  %1235 = load i8*, i8** %132, align 8
  store i8* null, i8** %132, align 8
  %1236 = icmp eq i8* %1235, null
  br i1 %1236, label %1238, label %1237

1237:                                             ; preds = %1234
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1235) #9
  br label %1238

1238:                                             ; preds = %1234, %1237
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %128) #9
  br label %1239

1239:                                             ; preds = %214, %297, %1238
  %1240 = add nuw nsw i64 %216, 1
  %1241 = add nuw nsw i64 %216, 3
  %1242 = icmp eq i64 %1240, %169
  br i1 %1242, label %176, label %214

1243:                                             ; preds = %180, %1563
  %1244 = phi %"class.jxl::Plane"* [ %178, %180 ], [ %1564, %1563 ]
  %1245 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1244, i64 -1
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %181) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %213, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %186) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %186, i8 -86, i64 32, i1 false) #9, !alias.scope !31
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %195, i64 %191, i64 %194, i64 8) #9
  br i1 %196, label %1279, label %1246

1246:                                             ; preds = %1243, %1260
  %1247 = phi i32 [ %1261, %1260 ], [ %190, %1243 ]
  %1248 = phi i64 [ %1262, %1260 ], [ 0, %1243 ]
  %1249 = load i8*, i8** %188, align 8, !alias.scope !31
  %1250 = load i64, i64* %187, align 8, !alias.scope !31
  %1251 = mul i64 %1250, %1248
  %1252 = getelementptr inbounds i8, i8* %1249, i64 %1251
  %1253 = ptrtoint i8* %1252 to i64
  %1254 = and i64 %1253, 63
  %1255 = icmp eq i64 %1254, 0
  call void @llvm.assume(i1 %1255) #9
  %1256 = bitcast i8* %1252 to double*
  %1257 = icmp eq i32 %1247, 0
  br i1 %1257, label %1260, label %1258

1258:                                             ; preds = %1246
  %1259 = load i64, i64* %197, align 8, !noalias !31
  br label %1264

1260:                                             ; preds = %1264, %1246
  %1261 = phi i32 [ 0, %1246 ], [ %190, %1264 ]
  %1262 = add nuw nsw i64 %1248, 1
  %1263 = icmp eq i64 %1262, %194
  br i1 %1263, label %1279, label %1246

1264:                                             ; preds = %1258, %1264
  %1265 = phi i64 [ %1277, %1264 ], [ 0, %1258 ]
  %1266 = mul i64 %1259, %1265
  %1267 = getelementptr inbounds i8, i8* %93, i64 %1266
  %1268 = ptrtoint i8* %1267 to i64
  %1269 = and i64 %1268, 63
  %1270 = icmp eq i64 %1269, 0
  call void @llvm.assume(i1 %1270) #9
  %1271 = bitcast i8* %1267 to double*
  %1272 = getelementptr inbounds double, double* %1271, i64 %1248
  %1273 = bitcast double* %1272 to i64*
  %1274 = load i64, i64* %1273, align 8
  %1275 = getelementptr inbounds double, double* %1256, i64 %1265
  %1276 = bitcast double* %1275 to i64*
  store i64 %1274, i64* %1276, align 8
  %1277 = add nuw nsw i64 %1265, 1
  %1278 = icmp ult i64 %1277, %191
  br i1 %1278, label %1264, label %1260

1279:                                             ; preds = %1260, %1243
  call void @_ZN3jxl6MatMulIdddEENS_5PlaneIT_EERKNS1_IT0_EERKNS1_IT1_EE(%"class.jxl::Plane"* nonnull sret %14, %"class.jxl::Plane"* nonnull dereferenceable(32) %15, %"class.jxl::Plane"* dereferenceable(32) %1245) #9
  %1280 = load i8*, i8** %188, align 8
  store i8* null, i8** %188, align 8
  %1281 = icmp eq i8* %1280, null
  br i1 %1281, label %1283, label %1282

1282:                                             ; preds = %1279
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1280) #9
  br label %1283

1283:                                             ; preds = %1279, %1282
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %186) #9
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %198) #9
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %199) #9
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %200) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %200, i8 -86, i64 32, i1 false) #9, !alias.scope !91
  %1284 = load i32, i32* %183, align 4, !noalias !91
  %1285 = zext i32 %1284 to i64
  %1286 = load i32, i32* %182, align 8, !noalias !91
  %1287 = zext i32 %1286 to i64
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %203, i64 %1285, i64 %1287, i64 8) #9
  %1288 = load i32, i32* %182, align 8, !noalias !91
  %1289 = icmp eq i32 %1288, 0
  br i1 %1289, label %1332, label %1290

1290:                                             ; preds = %1283
  %1291 = load i32, i32* %183, align 4, !noalias !91
  br label %1292

1292:                                             ; preds = %1307, %1290
  %1293 = phi i32 [ %1288, %1290 ], [ %1308, %1307 ]
  %1294 = phi i32 [ %1291, %1290 ], [ %1309, %1307 ]
  %1295 = phi i64 [ 0, %1290 ], [ %1310, %1307 ]
  %1296 = load i8*, i8** %202, align 8, !alias.scope !91
  %1297 = load i64, i64* %201, align 8, !alias.scope !91
  %1298 = mul i64 %1297, %1295
  %1299 = getelementptr inbounds i8, i8* %1296, i64 %1298
  %1300 = ptrtoint i8* %1299 to i64
  %1301 = and i64 %1300, 63
  %1302 = icmp eq i64 %1301, 0
  call void @llvm.assume(i1 %1302) #9
  %1303 = bitcast i8* %1299 to double*
  %1304 = icmp eq i32 %1294, 0
  br i1 %1304, label %1307, label %1313

1305:                                             ; preds = %1313
  %1306 = load i32, i32* %182, align 8, !noalias !91
  br label %1307

1307:                                             ; preds = %1305, %1292
  %1308 = phi i32 [ %1306, %1305 ], [ %1293, %1292 ]
  %1309 = phi i32 [ %1329, %1305 ], [ 0, %1292 ]
  %1310 = add nuw nsw i64 %1295, 1
  %1311 = zext i32 %1308 to i64
  %1312 = icmp ult i64 %1310, %1311
  br i1 %1312, label %1292, label %1332

1313:                                             ; preds = %1292, %1313
  %1314 = phi i64 [ %1328, %1313 ], [ 0, %1292 ]
  %1315 = load i8*, i8** %185, align 8, !noalias !91
  %1316 = load i64, i64* %184, align 8, !noalias !91
  %1317 = mul i64 %1316, %1314
  %1318 = getelementptr inbounds i8, i8* %1315, i64 %1317
  %1319 = ptrtoint i8* %1318 to i64
  %1320 = and i64 %1319, 63
  %1321 = icmp eq i64 %1320, 0
  call void @llvm.assume(i1 %1321) #9
  %1322 = bitcast i8* %1318 to double*
  %1323 = getelementptr inbounds double, double* %1322, i64 %1295
  %1324 = bitcast double* %1323 to i64*
  %1325 = load i64, i64* %1324, align 8
  %1326 = getelementptr inbounds double, double* %1303, i64 %1314
  %1327 = bitcast double* %1326 to i64*
  store i64 %1325, i64* %1327, align 8
  %1328 = add nuw nsw i64 %1314, 1
  %1329 = load i32, i32* %183, align 4, !noalias !91
  %1330 = zext i32 %1329 to i64
  %1331 = icmp ult i64 %1328, %1330
  br i1 %1331, label %1313, label %1305

1332:                                             ; preds = %1307, %1283
  call void @_ZN3jxl6MatMulIdddEENS_5PlaneIT_EERKNS1_IT0_EERKNS1_IT1_EE(%"class.jxl::Plane"* nonnull sret %17, %"class.jxl::Plane"* dereferenceable(32) %1245, %"class.jxl::Plane"* nonnull dereferenceable(32) %18) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %198, i8 -86, i64 32, i1 false) #9, !alias.scope !94
  %1333 = load i32, i32* %206, align 8, !noalias !94
  %1334 = zext i32 %1333 to i64
  %1335 = load i32, i32* %207, align 4, !noalias !94
  %1336 = zext i32 %1335 to i64
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %208, i64 %1334, i64 %1336, i64 8) #9
  %1337 = load i32, i32* %207, align 4, !noalias !94
  %1338 = icmp eq i32 %1337, 0
  br i1 %1338, label %1380, label %1339

1339:                                             ; preds = %1332
  %1340 = load i32, i32* %206, align 8, !noalias !94
  br label %1341

1341:                                             ; preds = %1364, %1339
  %1342 = phi i32 [ %1337, %1339 ], [ %1365, %1364 ]
  %1343 = phi i32 [ %1340, %1339 ], [ %1366, %1364 ]
  %1344 = phi i64 [ 0, %1339 ], [ %1367, %1364 ]
  %1345 = load i8*, i8** %209, align 8, !noalias !94
  %1346 = load i64, i64* %210, align 8, !noalias !94
  %1347 = mul i64 %1346, %1344
  %1348 = getelementptr inbounds i8, i8* %1345, i64 %1347
  %1349 = ptrtoint i8* %1348 to i64
  %1350 = and i64 %1349, 63
  %1351 = icmp eq i64 %1350, 0
  call void @llvm.assume(i1 %1351) #9
  %1352 = bitcast i8* %1348 to double*
  %1353 = load i8*, i8** %205, align 8, !alias.scope !94
  %1354 = load i64, i64* %204, align 8, !alias.scope !94
  %1355 = mul i64 %1354, %1344
  %1356 = getelementptr inbounds i8, i8* %1353, i64 %1355
  %1357 = ptrtoint i8* %1356 to i64
  %1358 = and i64 %1357, 63
  %1359 = icmp eq i64 %1358, 0
  call void @llvm.assume(i1 %1359) #9
  %1360 = bitcast i8* %1356 to double*
  %1361 = icmp eq i32 %1343, 0
  br i1 %1361, label %1364, label %1370

1362:                                             ; preds = %1370
  %1363 = load i32, i32* %207, align 4, !noalias !94
  br label %1364

1364:                                             ; preds = %1362, %1341
  %1365 = phi i32 [ %1363, %1362 ], [ %1342, %1341 ]
  %1366 = phi i32 [ %1377, %1362 ], [ 0, %1341 ]
  %1367 = add nuw nsw i64 %1344, 1
  %1368 = zext i32 %1365 to i64
  %1369 = icmp ult i64 %1367, %1368
  br i1 %1369, label %1341, label %1380

1370:                                             ; preds = %1341, %1370
  %1371 = phi i64 [ %1376, %1370 ], [ 0, %1341 ]
  %1372 = getelementptr inbounds double, double* %1352, i64 %1371
  %1373 = load double, double* %1372, align 8
  %1374 = fmul double %1373, 2.000000e+00
  %1375 = getelementptr inbounds double, double* %1360, i64 %1371
  store double %1374, double* %1375, align 8
  %1376 = add nuw nsw i64 %1371, 1
  %1377 = load i32, i32* %206, align 8, !noalias !94
  %1378 = zext i32 %1377 to i64
  %1379 = icmp ult i64 %1376, %1378
  br i1 %1379, label %1370, label %1362

1380:                                             ; preds = %1364, %1332
  %1381 = load i32, i32* %211, align 8
  %1382 = zext i32 %1381 to i64
  %1383 = load i32, i32* %212, align 4
  %1384 = zext i32 %1383 to i64
  %1385 = icmp eq i32 %1383, 0
  br i1 %1385, label %1539, label %1386

1386:                                             ; preds = %1380
  %1387 = icmp eq i32 %1381, 0
  %1388 = load i64, i64* %197, align 8
  %1389 = shl nuw nsw i64 %1382, 3
  %1390 = and i64 %1382, 4294967292
  %1391 = add nsw i64 %1390, -4
  %1392 = lshr exact i64 %1391, 2
  %1393 = add nuw nsw i64 %1392, 1
  %1394 = icmp ult i32 %1381, 4
  %1395 = and i64 %1382, 4294967292
  %1396 = and i64 %1393, 1
  %1397 = icmp eq i64 %1391, 0
  %1398 = sub nuw nsw i64 %1393, %1396
  %1399 = icmp eq i64 %1396, 0
  %1400 = icmp eq i64 %1395, %1382
  %1401 = and i64 %1382, 3
  %1402 = icmp eq i64 %1401, 0
  br label %1403

1403:                                             ; preds = %1509, %1386
  %1404 = phi i64 [ 0, %1386 ], [ %1510, %1509 ]
  %1405 = mul i64 %1388, %1404
  %1406 = getelementptr i8, i8* %93, i64 %1405
  %1407 = add i64 %1389, %1405
  %1408 = getelementptr i8, i8* %93, i64 %1407
  %1409 = load i8*, i8** %205, align 8
  %1410 = load i64, i64* %204, align 8
  %1411 = mul i64 %1410, %1404
  %1412 = getelementptr inbounds i8, i8* %1409, i64 %1411
  %1413 = ptrtoint i8* %1412 to i64
  %1414 = and i64 %1413, 63
  %1415 = icmp eq i64 %1414, 0
  call void @llvm.assume(i1 %1415) #9
  %1416 = bitcast i8* %1412 to double*
  %1417 = mul i64 %1388, %1404
  %1418 = getelementptr inbounds i8, i8* %93, i64 %1417
  %1419 = ptrtoint i8* %1418 to i64
  %1420 = and i64 %1419, 63
  %1421 = icmp eq i64 %1420, 0
  call void @llvm.assume(i1 %1421) #9
  %1422 = bitcast i8* %1418 to double*
  br i1 %1387, label %1509, label %1423

1423:                                             ; preds = %1403
  br i1 %1394, label %1424, label %1442

1424:                                             ; preds = %1508, %1442, %1423
  %1425 = phi i64 [ 0, %1442 ], [ 0, %1423 ], [ %1395, %1508 ]
  %1426 = xor i64 %1425, -1
  %1427 = add nsw i64 %1426, %1382
  br i1 %1402, label %1439, label %1428

1428:                                             ; preds = %1424, %1428
  %1429 = phi i64 [ %1436, %1428 ], [ %1425, %1424 ]
  %1430 = phi i64 [ %1437, %1428 ], [ %1401, %1424 ]
  %1431 = getelementptr inbounds double, double* %1416, i64 %1429
  %1432 = load double, double* %1431, align 8
  %1433 = getelementptr inbounds double, double* %1422, i64 %1429
  %1434 = load double, double* %1433, align 8
  %1435 = fsub double %1434, %1432
  store double %1435, double* %1433, align 8
  %1436 = add nuw nsw i64 %1429, 1
  %1437 = add i64 %1430, -1
  %1438 = icmp eq i64 %1437, 0
  br i1 %1438, label %1439, label %1428, !llvm.loop !97

1439:                                             ; preds = %1428, %1424
  %1440 = phi i64 [ %1425, %1424 ], [ %1436, %1428 ]
  %1441 = icmp ult i64 %1427, 3
  br i1 %1441, label %1509, label %1512

1442:                                             ; preds = %1423
  %1443 = getelementptr i8, i8* %1409, i64 %1389
  %1444 = mul i64 %1410, %1404
  %1445 = getelementptr i8, i8* %1443, i64 %1444
  %1446 = icmp ult i8* %1406, %1445
  %1447 = icmp ult i8* %1412, %1408
  %1448 = and i1 %1446, %1447
  br i1 %1448, label %1424, label %1449

1449:                                             ; preds = %1442
  br i1 %1397, label %1489, label %1450

1450:                                             ; preds = %1449, %1450
  %1451 = phi i64 [ %1486, %1450 ], [ 0, %1449 ]
  %1452 = phi i64 [ %1487, %1450 ], [ %1398, %1449 ]
  %1453 = getelementptr inbounds double, double* %1416, i64 %1451
  %1454 = bitcast double* %1453 to <2 x double>*
  %1455 = load <2 x double>, <2 x double>* %1454, align 64, !alias.scope !98
  %1456 = getelementptr inbounds double, double* %1453, i64 2
  %1457 = bitcast double* %1456 to <2 x double>*
  %1458 = load <2 x double>, <2 x double>* %1457, align 16, !alias.scope !98
  %1459 = getelementptr inbounds double, double* %1422, i64 %1451
  %1460 = bitcast double* %1459 to <2 x double>*
  %1461 = load <2 x double>, <2 x double>* %1460, align 64, !alias.scope !101, !noalias !98
  %1462 = getelementptr inbounds double, double* %1459, i64 2
  %1463 = bitcast double* %1462 to <2 x double>*
  %1464 = load <2 x double>, <2 x double>* %1463, align 16, !alias.scope !101, !noalias !98
  %1465 = fsub <2 x double> %1461, %1455
  %1466 = fsub <2 x double> %1464, %1458
  %1467 = bitcast double* %1459 to <2 x double>*
  store <2 x double> %1465, <2 x double>* %1467, align 64, !alias.scope !101, !noalias !98
  %1468 = bitcast double* %1462 to <2 x double>*
  store <2 x double> %1466, <2 x double>* %1468, align 16, !alias.scope !101, !noalias !98
  %1469 = or i64 %1451, 4
  %1470 = getelementptr inbounds double, double* %1416, i64 %1469
  %1471 = bitcast double* %1470 to <2 x double>*
  %1472 = load <2 x double>, <2 x double>* %1471, align 32, !alias.scope !98
  %1473 = getelementptr inbounds double, double* %1470, i64 2
  %1474 = bitcast double* %1473 to <2 x double>*
  %1475 = load <2 x double>, <2 x double>* %1474, align 16, !alias.scope !98
  %1476 = getelementptr inbounds double, double* %1422, i64 %1469
  %1477 = bitcast double* %1476 to <2 x double>*
  %1478 = load <2 x double>, <2 x double>* %1477, align 32, !alias.scope !101, !noalias !98
  %1479 = getelementptr inbounds double, double* %1476, i64 2
  %1480 = bitcast double* %1479 to <2 x double>*
  %1481 = load <2 x double>, <2 x double>* %1480, align 16, !alias.scope !101, !noalias !98
  %1482 = fsub <2 x double> %1478, %1472
  %1483 = fsub <2 x double> %1481, %1475
  %1484 = bitcast double* %1476 to <2 x double>*
  store <2 x double> %1482, <2 x double>* %1484, align 32, !alias.scope !101, !noalias !98
  %1485 = bitcast double* %1479 to <2 x double>*
  store <2 x double> %1483, <2 x double>* %1485, align 16, !alias.scope !101, !noalias !98
  %1486 = add i64 %1451, 8
  %1487 = add i64 %1452, -2
  %1488 = icmp eq i64 %1487, 0
  br i1 %1488, label %1489, label %1450, !llvm.loop !103

1489:                                             ; preds = %1450, %1449
  %1490 = phi i64 [ 0, %1449 ], [ %1486, %1450 ]
  br i1 %1399, label %1508, label %1491

1491:                                             ; preds = %1489
  %1492 = getelementptr inbounds double, double* %1416, i64 %1490
  %1493 = bitcast double* %1492 to <2 x double>*
  %1494 = load <2 x double>, <2 x double>* %1493, align 32, !alias.scope !98
  %1495 = getelementptr inbounds double, double* %1492, i64 2
  %1496 = bitcast double* %1495 to <2 x double>*
  %1497 = load <2 x double>, <2 x double>* %1496, align 16, !alias.scope !98
  %1498 = getelementptr inbounds double, double* %1422, i64 %1490
  %1499 = bitcast double* %1498 to <2 x double>*
  %1500 = load <2 x double>, <2 x double>* %1499, align 32, !alias.scope !101, !noalias !98
  %1501 = getelementptr inbounds double, double* %1498, i64 2
  %1502 = bitcast double* %1501 to <2 x double>*
  %1503 = load <2 x double>, <2 x double>* %1502, align 16, !alias.scope !101, !noalias !98
  %1504 = fsub <2 x double> %1500, %1494
  %1505 = fsub <2 x double> %1503, %1497
  %1506 = bitcast double* %1498 to <2 x double>*
  store <2 x double> %1504, <2 x double>* %1506, align 32, !alias.scope !101, !noalias !98
  %1507 = bitcast double* %1501 to <2 x double>*
  store <2 x double> %1505, <2 x double>* %1507, align 16, !alias.scope !101, !noalias !98
  br label %1508

1508:                                             ; preds = %1489, %1491
  br i1 %1400, label %1509, label %1424

1509:                                             ; preds = %1439, %1512, %1508, %1403
  %1510 = add nuw nsw i64 %1404, 1
  %1511 = icmp eq i64 %1510, %1384
  br i1 %1511, label %1539, label %1403

1512:                                             ; preds = %1439, %1512
  %1513 = phi i64 [ %1537, %1512 ], [ %1440, %1439 ]
  %1514 = getelementptr inbounds double, double* %1416, i64 %1513
  %1515 = load double, double* %1514, align 8
  %1516 = getelementptr inbounds double, double* %1422, i64 %1513
  %1517 = load double, double* %1516, align 8
  %1518 = fsub double %1517, %1515
  store double %1518, double* %1516, align 8
  %1519 = add nuw nsw i64 %1513, 1
  %1520 = getelementptr inbounds double, double* %1416, i64 %1519
  %1521 = load double, double* %1520, align 8
  %1522 = getelementptr inbounds double, double* %1422, i64 %1519
  %1523 = load double, double* %1522, align 8
  %1524 = fsub double %1523, %1521
  store double %1524, double* %1522, align 8
  %1525 = add nuw nsw i64 %1513, 2
  %1526 = getelementptr inbounds double, double* %1416, i64 %1525
  %1527 = load double, double* %1526, align 8
  %1528 = getelementptr inbounds double, double* %1422, i64 %1525
  %1529 = load double, double* %1528, align 8
  %1530 = fsub double %1529, %1527
  store double %1530, double* %1528, align 8
  %1531 = add nuw nsw i64 %1513, 3
  %1532 = getelementptr inbounds double, double* %1416, i64 %1531
  %1533 = load double, double* %1532, align 8
  %1534 = getelementptr inbounds double, double* %1422, i64 %1531
  %1535 = load double, double* %1534, align 8
  %1536 = fsub double %1535, %1533
  store double %1536, double* %1534, align 8
  %1537 = add nuw nsw i64 %1513, 4
  %1538 = icmp eq i64 %1537, %1382
  br i1 %1538, label %1509, label %1512, !llvm.loop !104

1539:                                             ; preds = %1509, %1380
  %1540 = load i8*, i8** %205, align 8
  store i8* null, i8** %205, align 8
  %1541 = icmp eq i8* %1540, null
  br i1 %1541, label %1543, label %1542

1542:                                             ; preds = %1539
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1540) #9
  br label %1543

1543:                                             ; preds = %1539, %1542
  %1544 = load i8*, i8** %209, align 8
  store i8* null, i8** %209, align 8
  %1545 = icmp eq i8* %1544, null
  br i1 %1545, label %1547, label %1546

1546:                                             ; preds = %1543
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1544) #9
  br label %1547

1547:                                             ; preds = %1543, %1546
  %1548 = load i8*, i8** %202, align 8
  store i8* null, i8** %202, align 8
  %1549 = icmp eq i8* %1548, null
  br i1 %1549, label %1551, label %1550

1550:                                             ; preds = %1547
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1548) #9
  br label %1551

1551:                                             ; preds = %1547, %1550
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %200) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %199) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %198) #9
  %1552 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %122, align 8
  %1553 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1552, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1554 = load i8*, i8** %1553, align 8
  store i8* null, i8** %1553, align 8
  %1555 = icmp eq i8* %1554, null
  br i1 %1555, label %1557, label %1556

1556:                                             ; preds = %1551
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1554) #9
  br label %1557

1557:                                             ; preds = %1551, %1556
  %1558 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1552, i64 -1
  store %"class.jxl::Plane"* %1558, %"class.jxl::Plane"** %122, align 8
  %1559 = load i8*, i8** %185, align 8
  store i8* null, i8** %185, align 8
  %1560 = icmp eq i8* %1559, null
  br i1 %1560, label %1563, label %1561

1561:                                             ; preds = %1557
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1559) #9
  %1562 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %122, align 8
  br label %1563

1563:                                             ; preds = %1557, %1561
  %1564 = phi %"class.jxl::Plane"* [ %1558, %1557 ], [ %1562, %1561 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %181) #9
  %1565 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %121, align 8
  %1566 = icmp eq %"class.jxl::Plane"* %1565, %1564
  br i1 %1566, label %1567, label %1243

1567:                                             ; preds = %1563, %176
  %1568 = phi %"class.jxl::Plane"* [ %178, %176 ], [ %1564, %1563 ]
  %1569 = icmp eq %"class.jxl::Plane"* %1568, null
  br i1 %1569, label %1572, label %1570

1570:                                             ; preds = %1567
  %1571 = bitcast %"class.jxl::Plane"* %1568 to i8*
  store %"class.jxl::Plane"* %1568, %"class.jxl::Plane"** %122, align 8
  call void @_ZdlPv(i8* %1571) #14
  br label %1572

1572:                                             ; preds = %119, %1567, %1570
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %120) #9
  ret void

1573:                                             ; preds = %48
  call void @llvm.memset.p0i8.i64(i8* align 64 %54, i8 0, i64 %61, i1 false) #9
  br label %1574

1574:                                             ; preds = %1573, %48
  %1575 = getelementptr inbounds double, double* %58, i64 %50
  store double 1.000000e+00, double* %1575, align 8
  %1576 = add nuw nsw i64 %33, 2
  %1577 = add i64 %34, -2
  %1578 = icmp eq i64 %1577, 0
  br i1 %1578, label %63, label %32
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9CopyImageIdEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #0 comdat {
  %3 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %5 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %7 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 32, i1 false)
  %8 = load i32, i32* %6, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %13, i64 %9, i64 %12, i64 8) #9
  %14 = load i32, i32* %6, align 8, !noalias !105
  %15 = load i32, i32* %3, align 8, !alias.scope !105
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %19 = load i32, i32* %10, align 4, !noalias !105
  %20 = load i32, i32* %18, align 4, !alias.scope !105
  %21 = icmp eq i32 %19, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %17, %2
  %23 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.11, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)) #9, !noalias !105
  %24 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13, !noalias !105
  unreachable

25:                                               ; preds = %17
  %26 = icmp eq i32 %19, 0
  %27 = icmp eq i32 %14, 0
  %28 = or i1 %27, %26
  br i1 %28, label %66, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 4
  %32 = load i8*, i8** %5, align 8, !alias.scope !105
  %33 = load i64, i64* %4, align 8, !alias.scope !105
  %34 = load i8*, i8** %30, align 8, !noalias !105
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #9, !noalias !105
  %38 = ptrtoint i8* %32 to i64
  %39 = and i64 %38, 63
  %40 = icmp eq i64 %39, 0
  tail call void @llvm.assume(i1 %40) #9, !noalias !105
  %41 = zext i32 %14 to i64
  %42 = shl nuw nsw i64 %41, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %32, i8* align 64 %34, i64 %42, i1 false) #9, !noalias !105
  %43 = load i32, i32* %10, align 4, !noalias !105
  %44 = icmp ugt i32 %43, 1
  br i1 %44, label %45, label %66

45:                                               ; preds = %29, %45
  %46 = phi i64 [ %62, %45 ], [ 1, %29 ]
  %47 = load i32, i32* %6, align 8, !noalias !105
  %48 = load i8*, i8** %30, align 8, !noalias !105
  %49 = load i64, i64* %31, align 8, !noalias !105
  %50 = mul i64 %49, %46
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = ptrtoint i8* %51 to i64
  %53 = and i64 %52, 63
  %54 = icmp eq i64 %53, 0
  tail call void @llvm.assume(i1 %54) #9, !noalias !105
  %55 = mul i64 %46, %33
  %56 = getelementptr inbounds i8, i8* %32, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #9, !noalias !105
  %60 = zext i32 %47 to i64
  %61 = shl nuw nsw i64 %60, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %56, i8* align 64 %51, i64 %61, i1 false) #9, !noalias !105
  %62 = add nuw nsw i64 %46, 1
  %63 = load i32, i32* %10, align 4, !noalias !105
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %45, label %66

66:                                               ; preds = %45, %29, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl7LinCombIdEENS_5PlaneIT_EES2_RKS3_S2_S5_(%"class.jxl::Plane"* noalias sret, double, %"class.jxl::Plane"* dereferenceable(32), double, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #0 comdat {
  %6 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %7, %13
  br i1 %14, label %18, label %15

15:                                               ; preds = %5
  %16 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.11, i64 0, i64 0), i32 262, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.15, i64 0, i64 0)) #9
  %17 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

18:                                               ; preds = %5
  %19 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %10, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %18
  %23 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.11, i64 0, i64 0), i32 263, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0)) #9
  %24 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

25:                                               ; preds = %18
  %26 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %27 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  %29 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 -86, i64 32, i1 false)
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %28, i64 %8, i64 %11, i64 8) #9
  %30 = icmp eq i32 %10, 0
  br i1 %30, label %220, label %31

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 4
  %34 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %35 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 4
  %36 = icmp eq i32 %7, 0
  %37 = shl nuw nsw i64 %8, 3
  %38 = and i64 %8, 4294967292
  %39 = add nsw i64 %38, -4
  %40 = lshr exact i64 %39, 2
  %41 = add nuw nsw i64 %40, 1
  %42 = icmp ult i32 %7, 4
  %43 = and i64 %8, 4294967292
  %44 = insertelement <2 x double> undef, double %1, i32 0
  %45 = shufflevector <2 x double> %44, <2 x double> undef, <2 x i32> zeroinitializer
  %46 = insertelement <2 x double> undef, double %1, i32 0
  %47 = shufflevector <2 x double> %46, <2 x double> undef, <2 x i32> zeroinitializer
  %48 = insertelement <2 x double> undef, double %3, i32 0
  %49 = shufflevector <2 x double> %48, <2 x double> undef, <2 x i32> zeroinitializer
  %50 = insertelement <2 x double> undef, double %3, i32 0
  %51 = shufflevector <2 x double> %50, <2 x double> undef, <2 x i32> zeroinitializer
  %52 = and i64 %41, 1
  %53 = icmp eq i64 %39, 0
  %54 = sub nuw nsw i64 %41, %52
  %55 = icmp eq i64 %52, 0
  %56 = icmp eq i64 %43, %8
  %57 = and i64 %8, 1
  %58 = icmp eq i64 %57, 0
  %59 = sub nsw i64 0, %8
  br label %60

60:                                               ; preds = %196, %31
  %61 = phi i64 [ 0, %31 ], [ %197, %196 ]
  %62 = load i8*, i8** %32, align 8
  %63 = load i64, i64* %33, align 8
  %64 = mul i64 %63, %61
  %65 = getelementptr inbounds i8, i8* %62, i64 %64
  %66 = ptrtoint i8* %65 to i64
  %67 = and i64 %66, 63
  %68 = icmp eq i64 %67, 0
  tail call void @llvm.assume(i1 %68) #9
  %69 = bitcast i8* %65 to double*
  %70 = load i8*, i8** %34, align 8
  %71 = load i64, i64* %35, align 8
  %72 = mul i64 %71, %61
  %73 = getelementptr inbounds i8, i8* %70, i64 %72
  %74 = ptrtoint i8* %73 to i64
  %75 = and i64 %74, 63
  %76 = icmp eq i64 %75, 0
  tail call void @llvm.assume(i1 %76) #9
  %77 = bitcast i8* %73 to double*
  %78 = load i8*, i8** %27, align 8
  %79 = load i64, i64* %26, align 8
  %80 = mul i64 %79, %61
  %81 = getelementptr inbounds i8, i8* %78, i64 %80
  %82 = ptrtoint i8* %81 to i64
  %83 = and i64 %82, 63
  %84 = icmp eq i64 %83, 0
  tail call void @llvm.assume(i1 %84) #9
  %85 = bitcast i8* %81 to double*
  br i1 %36, label %196, label %86

86:                                               ; preds = %60
  br i1 %42, label %87, label %103

87:                                               ; preds = %195, %103, %86
  %88 = phi i64 [ 0, %103 ], [ 0, %86 ], [ %43, %195 ]
  %89 = xor i64 %88, -1
  br i1 %58, label %100, label %90

90:                                               ; preds = %87
  %91 = getelementptr inbounds double, double* %69, i64 %88
  %92 = load double, double* %91, align 32
  %93 = fmul double %92, %1
  %94 = getelementptr inbounds double, double* %77, i64 %88
  %95 = load double, double* %94, align 32
  %96 = fmul double %95, %3
  %97 = fadd double %93, %96
  %98 = getelementptr inbounds double, double* %85, i64 %88
  store double %97, double* %98, align 32
  %99 = or i64 %88, 1
  br label %100

100:                                              ; preds = %90, %87
  %101 = phi i64 [ %99, %90 ], [ %88, %87 ]
  %102 = icmp eq i64 %89, %59
  br i1 %102, label %196, label %199

103:                                              ; preds = %86
  %104 = getelementptr i8, i8* %78, i64 %37
  %105 = getelementptr i8, i8* %104, i64 %80
  %106 = getelementptr i8, i8* %62, i64 %37
  %107 = mul i64 %63, %61
  %108 = getelementptr i8, i8* %106, i64 %107
  %109 = getelementptr i8, i8* %70, i64 %37
  %110 = getelementptr i8, i8* %109, i64 %72
  %111 = icmp ult i8* %81, %108
  %112 = icmp ult i8* %65, %105
  %113 = and i1 %111, %112
  %114 = icmp ult i8* %81, %110
  %115 = icmp ult i8* %73, %105
  %116 = and i1 %114, %115
  %117 = or i1 %113, %116
  br i1 %117, label %87, label %118

118:                                              ; preds = %103
  br i1 %53, label %170, label %119

119:                                              ; preds = %118, %119
  %120 = phi i64 [ %167, %119 ], [ 0, %118 ]
  %121 = phi i64 [ %168, %119 ], [ %54, %118 ]
  %122 = getelementptr inbounds double, double* %69, i64 %120
  %123 = bitcast double* %122 to <2 x double>*
  %124 = load <2 x double>, <2 x double>* %123, align 64, !alias.scope !108
  %125 = getelementptr inbounds double, double* %122, i64 2
  %126 = bitcast double* %125 to <2 x double>*
  %127 = load <2 x double>, <2 x double>* %126, align 16, !alias.scope !108
  %128 = fmul <2 x double> %124, %45
  %129 = fmul <2 x double> %127, %47
  %130 = getelementptr inbounds double, double* %77, i64 %120
  %131 = bitcast double* %130 to <2 x double>*
  %132 = load <2 x double>, <2 x double>* %131, align 64, !alias.scope !111
  %133 = getelementptr inbounds double, double* %130, i64 2
  %134 = bitcast double* %133 to <2 x double>*
  %135 = load <2 x double>, <2 x double>* %134, align 16, !alias.scope !111
  %136 = fmul <2 x double> %132, %49
  %137 = fmul <2 x double> %135, %51
  %138 = fadd <2 x double> %128, %136
  %139 = fadd <2 x double> %129, %137
  %140 = getelementptr inbounds double, double* %85, i64 %120
  %141 = bitcast double* %140 to <2 x double>*
  store <2 x double> %138, <2 x double>* %141, align 64, !alias.scope !113, !noalias !115
  %142 = getelementptr inbounds double, double* %140, i64 2
  %143 = bitcast double* %142 to <2 x double>*
  store <2 x double> %139, <2 x double>* %143, align 16, !alias.scope !113, !noalias !115
  %144 = or i64 %120, 4
  %145 = getelementptr inbounds double, double* %69, i64 %144
  %146 = bitcast double* %145 to <2 x double>*
  %147 = load <2 x double>, <2 x double>* %146, align 32, !alias.scope !108
  %148 = getelementptr inbounds double, double* %145, i64 2
  %149 = bitcast double* %148 to <2 x double>*
  %150 = load <2 x double>, <2 x double>* %149, align 16, !alias.scope !108
  %151 = fmul <2 x double> %147, %45
  %152 = fmul <2 x double> %150, %47
  %153 = getelementptr inbounds double, double* %77, i64 %144
  %154 = bitcast double* %153 to <2 x double>*
  %155 = load <2 x double>, <2 x double>* %154, align 32, !alias.scope !111
  %156 = getelementptr inbounds double, double* %153, i64 2
  %157 = bitcast double* %156 to <2 x double>*
  %158 = load <2 x double>, <2 x double>* %157, align 16, !alias.scope !111
  %159 = fmul <2 x double> %155, %49
  %160 = fmul <2 x double> %158, %51
  %161 = fadd <2 x double> %151, %159
  %162 = fadd <2 x double> %152, %160
  %163 = getelementptr inbounds double, double* %85, i64 %144
  %164 = bitcast double* %163 to <2 x double>*
  store <2 x double> %161, <2 x double>* %164, align 32, !alias.scope !113, !noalias !115
  %165 = getelementptr inbounds double, double* %163, i64 2
  %166 = bitcast double* %165 to <2 x double>*
  store <2 x double> %162, <2 x double>* %166, align 16, !alias.scope !113, !noalias !115
  %167 = add i64 %120, 8
  %168 = add i64 %121, -2
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %119, !llvm.loop !116

170:                                              ; preds = %119, %118
  %171 = phi i64 [ 0, %118 ], [ %167, %119 ]
  br i1 %55, label %195, label %172

172:                                              ; preds = %170
  %173 = getelementptr inbounds double, double* %69, i64 %171
  %174 = bitcast double* %173 to <2 x double>*
  %175 = load <2 x double>, <2 x double>* %174, align 32, !alias.scope !108
  %176 = getelementptr inbounds double, double* %173, i64 2
  %177 = bitcast double* %176 to <2 x double>*
  %178 = load <2 x double>, <2 x double>* %177, align 16, !alias.scope !108
  %179 = fmul <2 x double> %175, %45
  %180 = fmul <2 x double> %178, %47
  %181 = getelementptr inbounds double, double* %77, i64 %171
  %182 = bitcast double* %181 to <2 x double>*
  %183 = load <2 x double>, <2 x double>* %182, align 32, !alias.scope !111
  %184 = getelementptr inbounds double, double* %181, i64 2
  %185 = bitcast double* %184 to <2 x double>*
  %186 = load <2 x double>, <2 x double>* %185, align 16, !alias.scope !111
  %187 = fmul <2 x double> %183, %49
  %188 = fmul <2 x double> %186, %51
  %189 = fadd <2 x double> %179, %187
  %190 = fadd <2 x double> %180, %188
  %191 = getelementptr inbounds double, double* %85, i64 %171
  %192 = bitcast double* %191 to <2 x double>*
  store <2 x double> %189, <2 x double>* %192, align 32, !alias.scope !113, !noalias !115
  %193 = getelementptr inbounds double, double* %191, i64 2
  %194 = bitcast double* %193 to <2 x double>*
  store <2 x double> %190, <2 x double>* %194, align 16, !alias.scope !113, !noalias !115
  br label %195

195:                                              ; preds = %170, %172
  br i1 %56, label %196, label %87

196:                                              ; preds = %100, %199, %195, %60
  %197 = add nuw nsw i64 %61, 1
  %198 = icmp eq i64 %197, %11
  br i1 %198, label %220, label %60

199:                                              ; preds = %100, %199
  %200 = phi i64 [ %218, %199 ], [ %101, %100 ]
  %201 = getelementptr inbounds double, double* %69, i64 %200
  %202 = load double, double* %201, align 8
  %203 = fmul double %202, %1
  %204 = getelementptr inbounds double, double* %77, i64 %200
  %205 = load double, double* %204, align 8
  %206 = fmul double %205, %3
  %207 = fadd double %203, %206
  %208 = getelementptr inbounds double, double* %85, i64 %200
  store double %207, double* %208, align 8
  %209 = add nuw nsw i64 %200, 1
  %210 = getelementptr inbounds double, double* %69, i64 %209
  %211 = load double, double* %210, align 8
  %212 = fmul double %211, %1
  %213 = getelementptr inbounds double, double* %77, i64 %209
  %214 = load double, double* %213, align 8
  %215 = fmul double %214, %3
  %216 = fadd double %212, %215
  %217 = getelementptr inbounds double, double* %85, i64 %209
  store double %216, double* %217, align 8
  %218 = add nuw nsw i64 %200, 2
  %219 = icmp eq i64 %218, %8
  br i1 %219, label %196, label %199, !llvm.loop !117

220:                                              ; preds = %196, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3jxl14WilkinsonShiftEddd(double, double, double) local_unnamed_addr #0 {
  %4 = fsub double %0, %1
  %5 = fmul double %4, 5.000000e-01
  %6 = fcmp oeq double %5, 0.000000e+00
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = tail call double @llvm.fabs.f64(double %2) #9
  br label %20

9:                                                ; preds = %3
  %10 = fcmp ogt double %5, 0.000000e+00
  %11 = select i1 %10, double 1.000000e+00, double -1.000000e+00
  %12 = fmul double %2, %2
  %13 = fptrunc double %5 to float
  %14 = fptrunc double %2 to float
  %15 = tail call float @hypotf(float %13, float %14) #9
  %16 = fpext float %15 to double
  %17 = fmul double %11, %16
  %18 = fadd double %5, %17
  %19 = fdiv double %12, %18
  br label %20

20:                                               ; preds = %9, %7
  %21 = phi double [ %8, %7 ], [ %19, %9 ]
  %22 = fsub double %1, %21
  ret double %22
}

; Function Attrs: nounwind
declare float @hypotf(float, float) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl14ImplicitQRStepEPNS_5PlaneIdEEPdS3_ii(%"class.jxl::Plane"* noalias nocapture readonly, double* noalias nocapture, double* noalias nocapture, i32, i32) local_unnamed_addr #0 {
  %6 = sub nsw i32 %4, %3
  %7 = icmp sgt i32 %6, 2
  br i1 %7, label %11, label %8

8:                                                ; preds = %5
  %9 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 135, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0)) #9
  %10 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

11:                                               ; preds = %5
  %12 = sext i32 %3 to i64
  %13 = getelementptr inbounds double, double* %1, i64 %12
  %14 = load double, double* %13, align 8
  %15 = add nsw i32 %4, -2
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds double, double* %1, i64 %16
  %18 = load double, double* %17, align 8
  %19 = add i32 %4, -1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds double, double* %1, i64 %20
  %22 = load double, double* %21, align 8
  %23 = getelementptr inbounds double, double* %2, i64 %20
  %24 = load double, double* %23, align 8
  %25 = fsub double %18, %22
  %26 = fmul double %25, 5.000000e-01
  %27 = fcmp oeq double %26, 0.000000e+00
  br i1 %27, label %28, label %30

28:                                               ; preds = %11
  %29 = tail call double @llvm.fabs.f64(double %24) #9
  br label %41

30:                                               ; preds = %11
  %31 = fcmp ogt double %26, 0.000000e+00
  %32 = select i1 %31, double 1.000000e+00, double -1.000000e+00
  %33 = fmul double %24, %24
  %34 = fptrunc double %26 to float
  %35 = fptrunc double %24 to float
  %36 = tail call float @hypotf(float %34, float %35) #9
  %37 = fpext float %36 to double
  %38 = fmul double %32, %37
  %39 = fadd double %26, %38
  %40 = fdiv double %33, %39
  br label %41

41:                                               ; preds = %28, %30
  %42 = phi double [ %29, %28 ], [ %40, %30 ]
  %43 = icmp sgt i32 %19, %3
  br i1 %43, label %44, label %97

44:                                               ; preds = %41
  %45 = add nsw i32 %3, 1
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds double, double* %2, i64 %46
  %48 = load double, double* %47, align 8
  %49 = fsub double %22, %42
  %50 = fsub double %14, %49
  %51 = fcmp oeq double %48, 0.000000e+00
  br i1 %51, label %58, label %52

52:                                               ; preds = %44
  %53 = tail call double @hypot(double %50, double %48) #9
  %54 = fdiv double 1.000000e+00, %53
  %55 = fmul double %50, %54
  %56 = fmul double %48, %54
  %57 = fsub double -0.000000e+00, %56
  br label %61

58:                                               ; preds = %44
  %59 = fcmp olt double %50, 0.000000e+00
  %60 = select i1 %59, double -1.000000e+00, double 1.000000e+00
  br label %61

61:                                               ; preds = %58, %52
  %62 = phi double [ %60, %58 ], [ %55, %52 ]
  %63 = phi double [ 0.000000e+00, %58 ], [ %57, %52 ]
  %64 = getelementptr inbounds double, double* %1, i64 %12
  %65 = add nsw i64 %12, 1
  %66 = add nsw i32 %3, 1
  %67 = getelementptr inbounds double, double* %1, i64 %65
  %68 = load double, double* %67, align 8
  %69 = fsub double %14, %68
  %70 = fmul double %62, 2.000000e+00
  %71 = getelementptr inbounds double, double* %2, i64 %65
  %72 = load double, double* %71, align 8
  %73 = fmul double %70, %72
  %74 = fmul double %63, %69
  %75 = fadd double %73, %74
  %76 = fmul double %63, %75
  %77 = fsub double %14, %76
  store double %77, double* %64, align 8
  %78 = fadd double %68, %76
  store double %78, double* %67, align 8
  %79 = fmul double %62, %69
  %80 = fmul double %63, %79
  %81 = fmul double %62, %62
  %82 = fmul double %63, %63
  %83 = fsub double %81, %82
  %84 = fmul double %83, %72
  %85 = fadd double %84, %80
  store double %85, double* %71, align 8
  %86 = icmp sgt i32 %15, %3
  br i1 %86, label %87, label %94

87:                                               ; preds = %61
  %88 = add nsw i64 %12, 2
  %89 = getelementptr inbounds double, double* %2, i64 %88
  %90 = load double, double* %89, align 8
  %91 = fmul double %63, %90
  %92 = fsub double -0.000000e+00, %91
  %93 = fmul double %62, %90
  store double %93, double* %89, align 8
  br label %94

94:                                               ; preds = %87, %61
  %95 = phi double [ %92, %87 ], [ %48, %61 ]
  tail call void @_ZN3jxl16RotateMatrixColsEPNS_5PlaneIdEEiidd(%"class.jxl::Plane"* %0, i32 %3, i32 %66, double %62, double %63)
  %96 = icmp eq i64 %65, %20
  br i1 %96, label %97, label %98

97:                                               ; preds = %94, %154, %41
  ret void

98:                                               ; preds = %94, %154
  %99 = phi double [ %131, %154 ], [ %78, %94 ]
  %100 = phi i64 [ %118, %154 ], [ %65, %94 ]
  %101 = phi double [ %138, %154 ], [ %85, %94 ]
  %102 = phi double [ %155, %154 ], [ %95, %94 ]
  %103 = phi i32 [ %119, %154 ], [ %66, %94 ]
  %104 = fcmp oeq double %102, 0.000000e+00
  br i1 %104, label %105, label %108

105:                                              ; preds = %98
  %106 = fcmp olt double %101, 0.000000e+00
  %107 = select i1 %106, double -1.000000e+00, double 1.000000e+00
  br label %114

108:                                              ; preds = %98
  %109 = tail call double @hypot(double %101, double %102) #9
  %110 = fdiv double 1.000000e+00, %109
  %111 = fmul double %101, %110
  %112 = fmul double %102, %110
  %113 = fsub double -0.000000e+00, %112
  br label %114

114:                                              ; preds = %105, %108
  %115 = phi double [ %107, %105 ], [ %111, %108 ]
  %116 = phi double [ 0.000000e+00, %105 ], [ %113, %108 ]
  %117 = getelementptr inbounds double, double* %1, i64 %100
  %118 = add nsw i64 %100, 1
  %119 = add nsw i32 %103, 1
  %120 = getelementptr inbounds double, double* %1, i64 %118
  %121 = load double, double* %120, align 8
  %122 = fsub double %99, %121
  %123 = fmul double %115, 2.000000e+00
  %124 = getelementptr inbounds double, double* %2, i64 %118
  %125 = load double, double* %124, align 8
  %126 = fmul double %123, %125
  %127 = fmul double %116, %122
  %128 = fadd double %126, %127
  %129 = fmul double %116, %128
  %130 = fsub double %99, %129
  store double %130, double* %117, align 8
  %131 = fadd double %121, %129
  store double %131, double* %120, align 8
  %132 = fmul double %115, %122
  %133 = fmul double %116, %132
  %134 = fmul double %115, %115
  %135 = fmul double %116, %116
  %136 = fsub double %134, %135
  %137 = fmul double %136, %125
  %138 = fadd double %137, %133
  store double %138, double* %124, align 8
  %139 = icmp sgt i64 %100, %12
  br i1 %139, label %140, label %145

140:                                              ; preds = %114
  %141 = fmul double %101, %115
  %142 = fmul double %102, %116
  %143 = fsub double %141, %142
  %144 = getelementptr inbounds double, double* %2, i64 %100
  store double %143, double* %144, align 8
  br label %145

145:                                              ; preds = %140, %114
  %146 = icmp slt i64 %100, %16
  br i1 %146, label %147, label %154

147:                                              ; preds = %145
  %148 = add nsw i64 %100, 2
  %149 = getelementptr inbounds double, double* %2, i64 %148
  %150 = load double, double* %149, align 8
  %151 = fmul double %116, %150
  %152 = fsub double -0.000000e+00, %151
  %153 = fmul double %115, %150
  store double %153, double* %149, align 8
  br label %154

154:                                              ; preds = %147, %145
  %155 = phi double [ %152, %147 ], [ %102, %145 ]
  %156 = trunc i64 %100 to i32
  tail call void @_ZN3jxl16RotateMatrixColsEPNS_5PlaneIdEEiidd(%"class.jxl::Plane"* %0, i32 %156, i32 %119, double %115, double %116)
  %157 = icmp eq i64 %118, %20
  br i1 %157, label %97, label %98, !llvm.loop !118
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl12ScanIntervalEPKdS1_iidPNSt3__15dequeINS2_4pairIiiEENS2_9allocatorIS5_EEEE(double* noalias nocapture readonly, double* noalias nocapture readonly, i32, i32, double, %"class.std::__1::deque"*) local_unnamed_addr #0 {
  %7 = icmp slt i32 %2, %3
  br i1 %7, label %8, label %17

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %5, i64 0, i32 0, i32 0, i32 2
  %10 = bitcast %"struct.std::__1::pair"*** %9 to i64*
  %11 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %5, i64 0, i32 0, i32 0, i32 1
  %12 = bitcast %"struct.std::__1::pair"*** %11 to i64*
  %13 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %5, i64 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = sext i32 %2 to i64
  %16 = sext i32 %3 to i64
  br label %18

17:                                               ; preds = %79, %6
  ret void

18:                                               ; preds = %79, %8
  %19 = phi i64 [ %15, %8 ], [ %21, %79 ]
  %20 = phi i32 [ %2, %8 ], [ %80, %79 ]
  %21 = add nsw i64 %19, 1
  %22 = icmp eq i64 %21, %16
  br i1 %22, label %36, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds double, double* %1, i64 %21
  %25 = load double, double* %24, align 8
  %26 = tail call double @llvm.fabs.f64(double %25) #9
  %27 = getelementptr inbounds double, double* %0, i64 %19
  %28 = bitcast double* %27 to <2 x double>*
  %29 = load <2 x double>, <2 x double>* %28, align 8
  %30 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %29)
  %31 = extractelement <2 x double> %30, i32 0
  %32 = extractelement <2 x double> %30, i32 1
  %33 = fadd double %31, %32
  %34 = fmul double %33, %4
  %35 = fcmp olt double %26, %34
  br i1 %35, label %36, label %79

36:                                               ; preds = %23, %18
  %37 = sext i32 %20 to i64
  %38 = icmp sgt i64 %19, %37
  %39 = trunc i64 %21 to i32
  br i1 %38, label %40, label %79

40:                                               ; preds = %36
  %41 = shl i64 %21, 32
  %42 = zext i32 %20 to i64
  %43 = or i64 %41, %42
  %44 = load i64, i64* %10, align 8
  %45 = load i64, i64* %12, align 8
  %46 = sub i64 %44, %45
  %47 = icmp eq i64 %46, 0
  %48 = shl i64 %46, 6
  %49 = add i64 %48, -1
  %50 = select i1 %47, i64 0, i64 %49
  %51 = load i64, i64* %13, align 8
  %52 = load i64, i64* %14, align 8
  %53 = add i64 %52, %51
  %54 = icmp eq i64 %50, %53
  %55 = inttoptr i64 %45 to %"struct.std::__1::pair"**
  %56 = inttoptr i64 %44 to %"struct.std::__1::pair"**
  br i1 %54, label %57, label %63

57:                                               ; preds = %40
  tail call void @_ZNSt3__15dequeINS_4pairIiiEENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %5) #9
  %58 = load i64, i64* %14, align 8
  %59 = load i64, i64* %13, align 8
  %60 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %11, align 8
  %61 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %9, align 8
  %62 = add i64 %59, %58
  br label %63

63:                                               ; preds = %57, %40
  %64 = phi i64 [ %62, %57 ], [ %53, %40 ]
  %65 = phi %"struct.std::__1::pair"** [ %61, %57 ], [ %56, %40 ]
  %66 = phi %"struct.std::__1::pair"** [ %60, %57 ], [ %55, %40 ]
  %67 = icmp eq %"struct.std::__1::pair"** %65, %66
  br i1 %67, label %75, label %68

68:                                               ; preds = %63
  %69 = lshr i64 %64, 9
  %70 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %66, i64 %69
  %71 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %70, align 8
  %72 = and i64 %64, 511
  %73 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %71, i64 %72
  %74 = bitcast %"struct.std::__1::pair"* %73 to i64*
  br label %75

75:                                               ; preds = %63, %68
  %76 = phi i64* [ %74, %68 ], [ null, %63 ]
  store i64 %43, i64* %76, align 4
  %77 = load i64, i64* %14, align 8
  %78 = add i64 %77, 1
  store i64 %78, i64* %14, align 8
  br label %79

79:                                               ; preds = %36, %75, %23
  %80 = phi i32 [ %20, %23 ], [ %39, %75 ], [ %39, %36 ]
  %81 = icmp eq i64 %21, %16
  br i1 %81, label %17, label %18
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl17ConvertToDiagonalERKNS_5PlaneIdEEPS1_S4_(%"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* noalias nocapture, %"class.jxl::Plane"* noalias nocapture) local_unnamed_addr #0 {
  %4 = alloca %"class.jxl::Plane", align 8
  %5 = alloca %"class.std::__1::deque", align 8
  %6 = alloca %"class.jxl::Plane", align 8
  tail call void @_ZN3jxl15AssertSymmetricERKNS_5PlaneIdEE(%"class.jxl::Plane"* dereferenceable(32) %0)
  %7 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = zext i32 %8 to i64
  %10 = bitcast %"class.jxl::Plane"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #9
  %11 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 32, i1 false) #9
  call void @_ZN3jxl20ConvertToTridiagonalERKNS_5PlaneIdEEPS1_S4_(%"class.jxl::Plane"* dereferenceable(32) %0, %"class.jxl::Plane"* nonnull %4, %"class.jxl::Plane"* %2)
  %12 = icmp eq i32 %8, 0
  br i1 %12, label %62, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 4
  %15 = shl nuw nsw i64 %9, 3
  %16 = call i8* @_Znwm(i64 %15) #14
  %17 = bitcast i8* %16 to double*
  %18 = ptrtoint i8* %16 to i64
  %19 = add nsw i64 %9, -1
  %20 = getelementptr double, double* %17, i64 %19
  %21 = ptrtoint double* %20 to i64
  %22 = sub i64 8, %18
  %23 = add i64 %22, %21
  %24 = and i64 %23, -8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 %24, i1 false) #9
  %25 = call i8* @_Znwm(i64 %15) #14
  %26 = bitcast i8* %25 to double*
  %27 = ptrtoint i8* %25 to i64
  %28 = getelementptr double, double* %26, i64 %19
  %29 = ptrtoint double* %28 to i64
  %30 = sub i64 8, %27
  %31 = add i64 %30, %29
  %32 = and i64 %31, -8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 0, i64 %32, i1 false) #9
  %33 = load i8*, i8** %11, align 8
  %34 = load i64, i64* %14, align 8
  %35 = and i64 %9, 1
  %36 = icmp eq i32 %8, 1
  br i1 %36, label %39, label %37

37:                                               ; preds = %13
  %38 = sub nsw i64 %9, %35
  br label %144

39:                                               ; preds = %166, %13
  %40 = phi i64 [ 0, %13 ], [ %184, %166 ]
  %41 = icmp eq i64 %35, 0
  br i1 %41, label %62, label %42

42:                                               ; preds = %39
  %43 = mul i64 %34, %40
  %44 = getelementptr inbounds i8, i8* %33, i64 %43
  %45 = ptrtoint i8* %44 to i64
  %46 = and i64 %45, 63
  %47 = icmp eq i64 %46, 0
  call void @llvm.assume(i1 %47) #9
  %48 = bitcast i8* %44 to double*
  %49 = getelementptr inbounds double, double* %48, i64 %40
  %50 = bitcast double* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds double, double* %17, i64 %40
  %53 = bitcast double* %52 to i64*
  store i64 %51, i64* %53, align 8
  %54 = icmp eq i64 %40, 0
  br i1 %54, label %62, label %55

55:                                               ; preds = %42
  %56 = add nsw i64 %40, -1
  %57 = getelementptr inbounds double, double* %48, i64 %56
  %58 = bitcast double* %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds double, double* %26, i64 %40
  %61 = bitcast double* %60 to i64*
  store i64 %59, i64* %61, align 8
  br label %62

62:                                               ; preds = %39, %42, %55, %3
  %63 = phi double* [ null, %3 ], [ %26, %55 ], [ %26, %42 ], [ %26, %39 ]
  %64 = phi i8* [ null, %3 ], [ %25, %55 ], [ %25, %42 ], [ %25, %39 ]
  %65 = phi i8* [ null, %3 ], [ %16, %55 ], [ %16, %42 ], [ %16, %39 ]
  %66 = phi double* [ null, %3 ], [ %17, %55 ], [ %17, %42 ], [ %17, %39 ]
  %67 = bitcast %"class.std::__1::deque"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %67) #9
  %68 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %5, i64 0, i32 0, i32 0, i32 0
  %69 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %5, i64 0, i32 0, i32 0, i32 1
  %70 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %5, i64 0, i32 0, i32 0, i32 2
  %71 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %5, i64 0, i32 0, i32 1
  %72 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %67, i8 0, i64 48, i1 false) #9
  %73 = icmp sgt i32 %8, 0
  br i1 %73, label %74, label %253

74:                                               ; preds = %62
  %75 = bitcast %"struct.std::__1::pair"*** %70 to i64*
  %76 = bitcast %"struct.std::__1::pair"*** %69 to i64*
  %77 = sext i32 %8 to i64
  br label %78

78:                                               ; preds = %139, %74
  %79 = phi i64 [ 0, %74 ], [ %140, %139 ]
  %80 = phi i64 [ 0, %74 ], [ %82, %139 ]
  %81 = phi i32 [ 0, %74 ], [ %141, %139 ]
  %82 = add nuw nsw i64 %80, 1
  %83 = icmp eq i64 %82, %77
  br i1 %83, label %97, label %84

84:                                               ; preds = %78
  %85 = getelementptr inbounds double, double* %63, i64 %82
  %86 = load double, double* %85, align 8, !alias.scope !119, !noalias !122
  %87 = call double @llvm.fabs.f64(double %86) #9
  %88 = getelementptr inbounds double, double* %66, i64 %80
  %89 = bitcast double* %88 to <2 x double>*
  %90 = load <2 x double>, <2 x double>* %89, align 8, !alias.scope !122, !noalias !119
  %91 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %90)
  %92 = extractelement <2 x double> %91, i32 0
  %93 = extractelement <2 x double> %91, i32 1
  %94 = fadd double %92, %93
  %95 = fmul double %94, 0x3D06849B86A12B9B
  %96 = fcmp olt double %87, %95
  br i1 %96, label %97, label %139

97:                                               ; preds = %84, %78
  %98 = sext i32 %81 to i64
  %99 = icmp sgt i64 %80, %98
  %100 = trunc i64 %82 to i32
  br i1 %99, label %101, label %139

101:                                              ; preds = %97
  %102 = shl i64 %82, 32
  %103 = zext i32 %81 to i64
  %104 = or i64 %102, %103
  %105 = load i64, i64* %75, align 8, !noalias !124
  %106 = load i64, i64* %76, align 8, !noalias !124
  %107 = sub i64 %105, %106
  %108 = icmp eq i64 %107, 0
  %109 = shl i64 %107, 6
  %110 = add i64 %109, -1
  %111 = select i1 %108, i64 0, i64 %110
  %112 = load i64, i64* %71, align 8, !noalias !124
  %113 = add i64 %79, %112
  %114 = icmp eq i64 %111, %113
  %115 = inttoptr i64 %106 to %"struct.std::__1::pair"**
  %116 = inttoptr i64 %105 to %"struct.std::__1::pair"**
  br i1 %114, label %117, label %123

117:                                              ; preds = %101
  call void @_ZNSt3__15dequeINS_4pairIiiEENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque"* nonnull %5) #9, !noalias !124
  %118 = load i64, i64* %72, align 8, !noalias !124
  %119 = load i64, i64* %71, align 8, !noalias !124
  %120 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %69, align 8, !noalias !124
  %121 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %70, align 8, !noalias !124
  %122 = add i64 %119, %118
  br label %123

123:                                              ; preds = %117, %101
  %124 = phi i64 [ %122, %117 ], [ %113, %101 ]
  %125 = phi %"struct.std::__1::pair"** [ %121, %117 ], [ %116, %101 ]
  %126 = phi %"struct.std::__1::pair"** [ %120, %117 ], [ %115, %101 ]
  %127 = icmp eq %"struct.std::__1::pair"** %125, %126
  br i1 %127, label %135, label %128

128:                                              ; preds = %123
  %129 = lshr i64 %124, 9
  %130 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %126, i64 %129
  %131 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %130, align 8, !noalias !124
  %132 = and i64 %124, 511
  %133 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %131, i64 %132
  %134 = bitcast %"struct.std::__1::pair"* %133 to i64*
  br label %135

135:                                              ; preds = %128, %123
  %136 = phi i64* [ %134, %128 ], [ null, %123 ]
  store i64 %104, i64* %136, align 4, !noalias !124
  %137 = load i64, i64* %72, align 8, !noalias !124
  %138 = add i64 %137, 1
  store i64 %138, i64* %72, align 8, !noalias !124
  br label %139

139:                                              ; preds = %135, %97, %84
  %140 = phi i64 [ %79, %84 ], [ %138, %135 ], [ %79, %97 ]
  %141 = phi i32 [ %81, %84 ], [ %100, %135 ], [ %100, %97 ]
  br i1 %83, label %142, label %78

142:                                              ; preds = %139
  %143 = icmp eq i64 %140, 0
  br i1 %143, label %253, label %187

144:                                              ; preds = %166, %37
  %145 = phi i64 [ 0, %37 ], [ %184, %166 ]
  %146 = phi i64 [ %38, %37 ], [ %185, %166 ]
  %147 = mul i64 %34, %145
  %148 = getelementptr inbounds i8, i8* %33, i64 %147
  %149 = ptrtoint i8* %148 to i64
  %150 = and i64 %149, 63
  %151 = icmp eq i64 %150, 0
  call void @llvm.assume(i1 %151) #9
  %152 = bitcast i8* %148 to double*
  %153 = getelementptr inbounds double, double* %152, i64 %145
  %154 = bitcast double* %153 to i64*
  %155 = load i64, i64* %154, align 16
  %156 = getelementptr inbounds double, double* %17, i64 %145
  %157 = bitcast double* %156 to i64*
  store i64 %155, i64* %157, align 8
  %158 = icmp eq i64 %145, 0
  br i1 %158, label %166, label %159

159:                                              ; preds = %144
  %160 = add nsw i64 %145, -1
  %161 = getelementptr inbounds double, double* %152, i64 %160
  %162 = bitcast double* %161 to i64*
  %163 = load i64, i64* %162, align 8
  %164 = getelementptr inbounds double, double* %26, i64 %145
  %165 = bitcast double* %164 to i64*
  store i64 %163, i64* %165, align 8
  br label %166

166:                                              ; preds = %144, %159
  %167 = or i64 %145, 1
  %168 = mul i64 %34, %167
  %169 = getelementptr inbounds i8, i8* %33, i64 %168
  %170 = ptrtoint i8* %169 to i64
  %171 = and i64 %170, 63
  %172 = icmp eq i64 %171, 0
  call void @llvm.assume(i1 %172) #9
  %173 = bitcast i8* %169 to double*
  %174 = getelementptr inbounds double, double* %173, i64 %167
  %175 = bitcast double* %174 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = getelementptr inbounds double, double* %17, i64 %167
  %178 = bitcast double* %177 to i64*
  store i64 %176, i64* %178, align 8
  %179 = getelementptr inbounds double, double* %173, i64 %145
  %180 = bitcast double* %179 to i64*
  %181 = load i64, i64* %180, align 16
  %182 = getelementptr inbounds double, double* %26, i64 %167
  %183 = bitcast double* %182 to i64*
  store i64 %181, i64* %183, align 8
  %184 = add nuw nsw i64 %145, 2
  %185 = add i64 %146, -2
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %39, label %144

187:                                              ; preds = %142, %250
  %188 = phi i64 [ %251, %250 ], [ %140, %142 ]
  %189 = load i64, i64* %71, align 8
  %190 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %69, align 8
  %191 = lshr i64 %189, 9
  %192 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %190, i64 %191
  %193 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %192, align 8
  %194 = and i64 %189, 511
  %195 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %193, i64 %194, i32 0
  %196 = load i32, i32* %195, align 4
  %197 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %193, i64 %194, i32 1
  %198 = load i32, i32* %197, align 4
  %199 = add i64 %188, -1
  store i64 %199, i64* %72, align 8
  %200 = add i64 %189, 1
  store i64 %200, i64* %71, align 8
  %201 = icmp ult i64 %200, 1024
  br i1 %201, label %209, label %202

202:                                              ; preds = %187
  %203 = bitcast %"struct.std::__1::pair"** %190 to i8**
  %204 = load i8*, i8** %203, align 8
  call void @_ZdlPv(i8* %204) #14
  %205 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %69, align 8
  %206 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %205, i64 1
  store %"struct.std::__1::pair"** %206, %"struct.std::__1::pair"*** %69, align 8
  %207 = load i64, i64* %71, align 8
  %208 = add i64 %207, -512
  store i64 %208, i64* %71, align 8
  br label %209

209:                                              ; preds = %187, %202
  %210 = add nsw i32 %196, 2
  %211 = icmp eq i32 %198, %210
  br i1 %211, label %212, label %249

212:                                              ; preds = %209
  %213 = sext i32 %196 to i64
  %214 = getelementptr inbounds double, double* %66, i64 %213
  %215 = add nsw i32 %196, 1
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds double, double* %66, i64 %216
  %218 = getelementptr inbounds double, double* %63, i64 %216
  %219 = load double, double* %218, align 8
  %220 = call double @llvm.fabs.f64(double %219) #9
  %221 = fcmp olt double %220, 1.000000e-15
  br i1 %221, label %235, label %222

222:                                              ; preds = %212
  %223 = load double, double* %217, align 8
  %224 = load double, double* %214, align 8
  %225 = fmul double %219, 2.000000e+00
  %226 = fsub double %223, %224
  %227 = call double @atan2(double %225, double %226) #9
  %228 = fcmp ogt double %219, 0.000000e+00
  %229 = fmul double %227, 5.000000e-01
  %230 = fadd double %229, 0x400921FB54442D18
  %231 = select i1 %228, double %229, double %230
  %232 = call double @cos(double %231) #9
  %233 = call double @sin(double %231) #9
  %234 = load double, double* %218, align 8
  br label %235

235:                                              ; preds = %212, %222
  %236 = phi double [ %234, %222 ], [ %219, %212 ]
  %237 = phi double [ %232, %222 ], [ 1.000000e+00, %212 ]
  %238 = phi double [ %233, %222 ], [ 0.000000e+00, %212 ]
  %239 = load double, double* %214, align 8
  %240 = load double, double* %217, align 8
  %241 = fsub double %239, %240
  %242 = fmul double %237, 2.000000e+00
  %243 = fmul double %242, %236
  %244 = fmul double %238, %241
  %245 = fadd double %243, %244
  %246 = fmul double %238, %245
  %247 = fsub double %239, %246
  store double %247, double* %214, align 8
  %248 = fadd double %240, %246
  store double %248, double* %217, align 8
  store double 0.000000e+00, double* %218, align 8
  call void @_ZN3jxl16RotateMatrixColsEPNS_5PlaneIdEEiidd(%"class.jxl::Plane"* %2, i32 %196, i32 %215, double %237, double %238)
  br label %250

249:                                              ; preds = %209
  call void @_ZN3jxl14ImplicitQRStepEPNS_5PlaneIdEEPdS3_ii(%"class.jxl::Plane"* %2, double* %66, double* %63, i32 %196, i32 %198)
  call void @_ZN3jxl12ScanIntervalEPKdS1_iidPNSt3__15dequeINS2_4pairIiiEENS2_9allocatorIS5_EEEE(double* %66, double* %63, i32 %196, i32 %198, double 0x3D06849B86A12B9B, %"class.std::__1::deque"* nonnull %5)
  br label %250

250:                                              ; preds = %249, %235
  %251 = load i64, i64* %72, align 8
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %253, label %187

253:                                              ; preds = %250, %62, %142
  %254 = bitcast %"class.jxl::Plane"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %254) #9
  %255 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %6, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %255, i64 %9, i64 1, i64 8) #9
  %256 = bitcast %"class.jxl::Plane"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %256, i8* nonnull align 8 %254, i64 24, i1 false) #9
  %257 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %258 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %6, i64 0, i32 0, i32 5
  %259 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %258, i64 0, i32 0, i32 0, i32 0
  %260 = bitcast %"class.std::__1::unique_ptr"* %258 to i64*
  %261 = load i64, i64* %260, align 8
  store i8* null, i8** %259, align 8
  %262 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %257, i64 0, i32 0, i32 0, i32 0
  %263 = load i8*, i8** %262, align 8
  %264 = bitcast %"class.std::__1::unique_ptr"* %257 to i64*
  store i64 %261, i64* %264, align 8
  %265 = icmp eq i8* %263, null
  br i1 %265, label %266, label %268

266:                                              ; preds = %253
  %267 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %6, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %267, align 8
  br label %274

268:                                              ; preds = %253
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %263) #9
  %269 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %6, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %270 = load i8*, i8** %269, align 8
  %271 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %6, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %271, align 8
  %272 = icmp eq i8* %270, null
  br i1 %272, label %274, label %273

273:                                              ; preds = %268
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %270) #9
  br label %274

274:                                              ; preds = %266, %268, %273
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %254) #9
  %275 = and i64 %261, 63
  %276 = icmp eq i64 %275, 0
  call void @llvm.assume(i1 %276) #9
  %277 = inttoptr i64 %261 to double*
  %278 = inttoptr i64 %261 to i8*
  br i1 %12, label %389, label %279

279:                                              ; preds = %274
  %280 = icmp ult i32 %8, 4
  br i1 %280, label %281, label %302

281:                                              ; preds = %387, %302, %279
  %282 = phi i64 [ 0, %302 ], [ 0, %279 ], [ %311, %387 ]
  %283 = sub nsw i64 %9, %282
  %284 = xor i64 %282, -1
  %285 = add nsw i64 %284, %9
  %286 = and i64 %283, 7
  %287 = icmp eq i64 %286, 0
  br i1 %287, label %299, label %288

288:                                              ; preds = %281, %288
  %289 = phi i64 [ %296, %288 ], [ %282, %281 ]
  %290 = phi i64 [ %297, %288 ], [ %286, %281 ]
  %291 = getelementptr inbounds double, double* %66, i64 %289
  %292 = bitcast double* %291 to i64*
  %293 = load i64, i64* %292, align 8
  %294 = getelementptr inbounds double, double* %277, i64 %289
  %295 = bitcast double* %294 to i64*
  store i64 %293, i64* %295, align 8
  %296 = add nuw nsw i64 %289, 1
  %297 = add i64 %290, -1
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %299, label %288, !llvm.loop !125

299:                                              ; preds = %288, %281
  %300 = phi i64 [ %282, %281 ], [ %296, %288 ]
  %301 = icmp ult i64 %285, 7
  br i1 %301, label %389, label %489

302:                                              ; preds = %279
  %303 = getelementptr double, double* %277, i64 %9
  %304 = bitcast double* %303 to i8*
  %305 = getelementptr double, double* %66, i64 %9
  %306 = bitcast double* %305 to i8*
  %307 = icmp ult i8* %278, %306
  %308 = icmp ult i8* %65, %304
  %309 = and i1 %307, %308
  br i1 %309, label %281, label %310

310:                                              ; preds = %302
  %311 = and i64 %9, 4294967292
  %312 = add nsw i64 %311, -4
  %313 = lshr exact i64 %312, 2
  %314 = add nuw nsw i64 %313, 1
  %315 = and i64 %314, 3
  %316 = icmp ult i64 %312, 12
  br i1 %316, label %368, label %317

317:                                              ; preds = %310
  %318 = sub nsw i64 %314, %315
  br label %319

319:                                              ; preds = %319, %317
  %320 = phi i64 [ 0, %317 ], [ %365, %319 ]
  %321 = phi i64 [ %318, %317 ], [ %366, %319 ]
  %322 = getelementptr inbounds double, double* %66, i64 %320
  %323 = bitcast double* %322 to <2 x i64>*
  %324 = load <2 x i64>, <2 x i64>* %323, align 8, !alias.scope !126
  %325 = getelementptr inbounds double, double* %322, i64 2
  %326 = bitcast double* %325 to <2 x i64>*
  %327 = load <2 x i64>, <2 x i64>* %326, align 8, !alias.scope !126
  %328 = getelementptr inbounds double, double* %277, i64 %320
  %329 = bitcast double* %328 to <2 x i64>*
  store <2 x i64> %324, <2 x i64>* %329, align 64, !alias.scope !129, !noalias !126
  %330 = getelementptr inbounds double, double* %328, i64 2
  %331 = bitcast double* %330 to <2 x i64>*
  store <2 x i64> %327, <2 x i64>* %331, align 16, !alias.scope !129, !noalias !126
  %332 = or i64 %320, 4
  %333 = getelementptr inbounds double, double* %66, i64 %332
  %334 = bitcast double* %333 to <2 x i64>*
  %335 = load <2 x i64>, <2 x i64>* %334, align 8, !alias.scope !126
  %336 = getelementptr inbounds double, double* %333, i64 2
  %337 = bitcast double* %336 to <2 x i64>*
  %338 = load <2 x i64>, <2 x i64>* %337, align 8, !alias.scope !126
  %339 = getelementptr inbounds double, double* %277, i64 %332
  %340 = bitcast double* %339 to <2 x i64>*
  store <2 x i64> %335, <2 x i64>* %340, align 32, !alias.scope !129, !noalias !126
  %341 = getelementptr inbounds double, double* %339, i64 2
  %342 = bitcast double* %341 to <2 x i64>*
  store <2 x i64> %338, <2 x i64>* %342, align 16, !alias.scope !129, !noalias !126
  %343 = or i64 %320, 8
  %344 = getelementptr inbounds double, double* %66, i64 %343
  %345 = bitcast double* %344 to <2 x i64>*
  %346 = load <2 x i64>, <2 x i64>* %345, align 8, !alias.scope !126
  %347 = getelementptr inbounds double, double* %344, i64 2
  %348 = bitcast double* %347 to <2 x i64>*
  %349 = load <2 x i64>, <2 x i64>* %348, align 8, !alias.scope !126
  %350 = getelementptr inbounds double, double* %277, i64 %343
  %351 = bitcast double* %350 to <2 x i64>*
  store <2 x i64> %346, <2 x i64>* %351, align 64, !alias.scope !129, !noalias !126
  %352 = getelementptr inbounds double, double* %350, i64 2
  %353 = bitcast double* %352 to <2 x i64>*
  store <2 x i64> %349, <2 x i64>* %353, align 16, !alias.scope !129, !noalias !126
  %354 = or i64 %320, 12
  %355 = getelementptr inbounds double, double* %66, i64 %354
  %356 = bitcast double* %355 to <2 x i64>*
  %357 = load <2 x i64>, <2 x i64>* %356, align 8, !alias.scope !126
  %358 = getelementptr inbounds double, double* %355, i64 2
  %359 = bitcast double* %358 to <2 x i64>*
  %360 = load <2 x i64>, <2 x i64>* %359, align 8, !alias.scope !126
  %361 = getelementptr inbounds double, double* %277, i64 %354
  %362 = bitcast double* %361 to <2 x i64>*
  store <2 x i64> %357, <2 x i64>* %362, align 32, !alias.scope !129, !noalias !126
  %363 = getelementptr inbounds double, double* %361, i64 2
  %364 = bitcast double* %363 to <2 x i64>*
  store <2 x i64> %360, <2 x i64>* %364, align 16, !alias.scope !129, !noalias !126
  %365 = add i64 %320, 16
  %366 = add i64 %321, -4
  %367 = icmp eq i64 %366, 0
  br i1 %367, label %368, label %319, !llvm.loop !131

368:                                              ; preds = %319, %310
  %369 = phi i64 [ 0, %310 ], [ %365, %319 ]
  %370 = icmp eq i64 %315, 0
  br i1 %370, label %387, label %371

371:                                              ; preds = %368, %371
  %372 = phi i64 [ %384, %371 ], [ %369, %368 ]
  %373 = phi i64 [ %385, %371 ], [ %315, %368 ]
  %374 = getelementptr inbounds double, double* %66, i64 %372
  %375 = bitcast double* %374 to <2 x i64>*
  %376 = load <2 x i64>, <2 x i64>* %375, align 8, !alias.scope !126
  %377 = getelementptr inbounds double, double* %374, i64 2
  %378 = bitcast double* %377 to <2 x i64>*
  %379 = load <2 x i64>, <2 x i64>* %378, align 8, !alias.scope !126
  %380 = getelementptr inbounds double, double* %277, i64 %372
  %381 = bitcast double* %380 to <2 x i64>*
  store <2 x i64> %376, <2 x i64>* %381, align 32, !alias.scope !129, !noalias !126
  %382 = getelementptr inbounds double, double* %380, i64 2
  %383 = bitcast double* %382 to <2 x i64>*
  store <2 x i64> %379, <2 x i64>* %383, align 16, !alias.scope !129, !noalias !126
  %384 = add i64 %372, 4
  %385 = add i64 %373, -1
  %386 = icmp eq i64 %385, 0
  br i1 %386, label %387, label %371, !llvm.loop !132

387:                                              ; preds = %371, %368
  %388 = icmp eq i64 %311, %9
  br i1 %388, label %389, label %281

389:                                              ; preds = %299, %489, %387, %274
  %390 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %69, align 8
  %391 = load i64, i64* %71, align 8
  %392 = lshr i64 %391, 9
  %393 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %390, i64 %392
  %394 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %70, align 8
  %395 = icmp eq %"struct.std::__1::pair"** %394, %390
  %396 = ptrtoint %"struct.std::__1::pair"** %394 to i64
  %397 = ptrtoint %"struct.std::__1::pair"** %390 to i64
  br i1 %395, label %410, label %398

398:                                              ; preds = %389
  %399 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %393, align 8
  %400 = and i64 %391, 511
  %401 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %399, i64 %400
  %402 = load i64, i64* %72, align 8
  %403 = add i64 %402, %391
  %404 = lshr i64 %403, 9
  %405 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %390, i64 %404
  %406 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %405, align 8
  %407 = and i64 %403, 511
  %408 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %406, i64 %407
  %409 = icmp eq %"struct.std::__1::pair"* %408, %401
  br i1 %409, label %410, label %415

410:                                              ; preds = %428, %389, %398
  store i64 0, i64* %72, align 8
  %411 = bitcast %"struct.std::__1::pair"*** %70 to i64*
  %412 = sub i64 %396, %397
  %413 = ashr exact i64 %412, 3
  %414 = icmp ugt i64 %413, 2
  br i1 %414, label %433, label %446

415:                                              ; preds = %398, %428
  %416 = phi %"struct.std::__1::pair"* [ %431, %428 ], [ %401, %398 ]
  %417 = phi %"struct.std::__1::pair"** [ %430, %428 ], [ %393, %398 ]
  %418 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %416, i64 1
  %419 = ptrtoint %"struct.std::__1::pair"* %418 to i64
  %420 = bitcast %"struct.std::__1::pair"** %417 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = sub i64 %419, %421
  %423 = icmp eq i64 %422, 4096
  br i1 %423, label %424, label %428

424:                                              ; preds = %415
  %425 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %417, i64 1
  %426 = bitcast %"struct.std::__1::pair"** %425 to i64*
  %427 = load i64, i64* %426, align 8
  br label %428

428:                                              ; preds = %424, %415
  %429 = phi i64 [ %427, %424 ], [ %419, %415 ]
  %430 = phi %"struct.std::__1::pair"** [ %425, %424 ], [ %417, %415 ]
  %431 = inttoptr i64 %429 to %"struct.std::__1::pair"*
  %432 = icmp eq %"struct.std::__1::pair"* %408, %431
  br i1 %432, label %410, label %415

433:                                              ; preds = %410, %433
  %434 = phi %"struct.std::__1::pair"** [ %438, %433 ], [ %390, %410 ]
  %435 = bitcast %"struct.std::__1::pair"** %434 to i8**
  %436 = load i8*, i8** %435, align 8
  call void @_ZdlPv(i8* %436) #14
  %437 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %69, align 8
  %438 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %437, i64 1
  store %"struct.std::__1::pair"** %438, %"struct.std::__1::pair"*** %69, align 8
  %439 = load i64, i64* %411, align 8
  %440 = ptrtoint %"struct.std::__1::pair"** %438 to i64
  %441 = sub i64 %439, %440
  %442 = ashr exact i64 %441, 3
  %443 = icmp ugt i64 %442, 2
  br i1 %443, label %433, label %444

444:                                              ; preds = %433
  %445 = inttoptr i64 %439 to %"struct.std::__1::pair"**
  br label %446

446:                                              ; preds = %444, %410
  %447 = phi %"struct.std::__1::pair"** [ %394, %410 ], [ %445, %444 ]
  %448 = phi %"struct.std::__1::pair"** [ %390, %410 ], [ %438, %444 ]
  %449 = phi i64 [ %413, %410 ], [ %442, %444 ]
  switch i64 %449, label %453 [
    i64 1, label %451
    i64 2, label %450
  ]

450:                                              ; preds = %446
  br label %451

451:                                              ; preds = %446, %450
  %452 = phi i64 [ 512, %450 ], [ 256, %446 ]
  store i64 %452, i64* %71, align 8
  br label %453

453:                                              ; preds = %451, %446
  %454 = icmp eq %"struct.std::__1::pair"** %448, %447
  br i1 %454, label %473, label %455

455:                                              ; preds = %453, %455
  %456 = phi %"struct.std::__1::pair"** [ %459, %455 ], [ %448, %453 ]
  %457 = bitcast %"struct.std::__1::pair"** %456 to i8**
  %458 = load i8*, i8** %457, align 8
  call void @_ZdlPv(i8* %458) #14
  %459 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %456, i64 1
  %460 = icmp eq %"struct.std::__1::pair"** %459, %447
  br i1 %460, label %461, label %455

461:                                              ; preds = %455
  %462 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %69, align 8
  %463 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %70, align 8
  %464 = icmp eq %"struct.std::__1::pair"** %463, %462
  br i1 %464, label %473, label %465

465:                                              ; preds = %461
  %466 = ptrtoint %"struct.std::__1::pair"** %462 to i64
  %467 = getelementptr %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %463, i64 -1
  %468 = ptrtoint %"struct.std::__1::pair"** %467 to i64
  %469 = sub i64 %468, %466
  %470 = lshr i64 %469, 3
  %471 = xor i64 %470, -1
  %472 = getelementptr %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %463, i64 %471
  store %"struct.std::__1::pair"** %472, %"struct.std::__1::pair"*** %70, align 8
  br label %473

473:                                              ; preds = %465, %461, %453
  %474 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %68, align 8
  %475 = icmp eq %"struct.std::__1::pair"** %474, null
  br i1 %475, label %478, label %476

476:                                              ; preds = %473
  %477 = bitcast %"struct.std::__1::pair"** %474 to i8*
  call void @_ZdlPv(i8* %477) #14
  br label %478

478:                                              ; preds = %473, %476
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %67) #9
  %479 = icmp eq double* %63, null
  br i1 %479, label %481, label %480

480:                                              ; preds = %478
  call void @_ZdlPv(i8* %64) #14
  br label %481

481:                                              ; preds = %478, %480
  %482 = icmp eq double* %66, null
  br i1 %482, label %484, label %483

483:                                              ; preds = %481
  call void @_ZdlPv(i8* %65) #14
  br label %484

484:                                              ; preds = %481, %483
  %485 = load i8*, i8** %11, align 8
  store i8* null, i8** %11, align 8
  %486 = icmp eq i8* %485, null
  br i1 %486, label %488, label %487

487:                                              ; preds = %484
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %485) #9
  br label %488

488:                                              ; preds = %484, %487
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #9
  ret void

489:                                              ; preds = %299, %489
  %490 = phi i64 [ %538, %489 ], [ %300, %299 ]
  %491 = getelementptr inbounds double, double* %66, i64 %490
  %492 = bitcast double* %491 to i64*
  %493 = load i64, i64* %492, align 8
  %494 = getelementptr inbounds double, double* %277, i64 %490
  %495 = bitcast double* %494 to i64*
  store i64 %493, i64* %495, align 8
  %496 = add nuw nsw i64 %490, 1
  %497 = getelementptr inbounds double, double* %66, i64 %496
  %498 = bitcast double* %497 to i64*
  %499 = load i64, i64* %498, align 8
  %500 = getelementptr inbounds double, double* %277, i64 %496
  %501 = bitcast double* %500 to i64*
  store i64 %499, i64* %501, align 8
  %502 = add nuw nsw i64 %490, 2
  %503 = getelementptr inbounds double, double* %66, i64 %502
  %504 = bitcast double* %503 to i64*
  %505 = load i64, i64* %504, align 8
  %506 = getelementptr inbounds double, double* %277, i64 %502
  %507 = bitcast double* %506 to i64*
  store i64 %505, i64* %507, align 8
  %508 = add nuw nsw i64 %490, 3
  %509 = getelementptr inbounds double, double* %66, i64 %508
  %510 = bitcast double* %509 to i64*
  %511 = load i64, i64* %510, align 8
  %512 = getelementptr inbounds double, double* %277, i64 %508
  %513 = bitcast double* %512 to i64*
  store i64 %511, i64* %513, align 8
  %514 = add nuw nsw i64 %490, 4
  %515 = getelementptr inbounds double, double* %66, i64 %514
  %516 = bitcast double* %515 to i64*
  %517 = load i64, i64* %516, align 8
  %518 = getelementptr inbounds double, double* %277, i64 %514
  %519 = bitcast double* %518 to i64*
  store i64 %517, i64* %519, align 8
  %520 = add nuw nsw i64 %490, 5
  %521 = getelementptr inbounds double, double* %66, i64 %520
  %522 = bitcast double* %521 to i64*
  %523 = load i64, i64* %522, align 8
  %524 = getelementptr inbounds double, double* %277, i64 %520
  %525 = bitcast double* %524 to i64*
  store i64 %523, i64* %525, align 8
  %526 = add nuw nsw i64 %490, 6
  %527 = getelementptr inbounds double, double* %66, i64 %526
  %528 = bitcast double* %527 to i64*
  %529 = load i64, i64* %528, align 8
  %530 = getelementptr inbounds double, double* %277, i64 %526
  %531 = bitcast double* %530 to i64*
  store i64 %529, i64* %531, align 8
  %532 = add nuw nsw i64 %490, 7
  %533 = getelementptr inbounds double, double* %66, i64 %532
  %534 = bitcast double* %533 to i64*
  %535 = load i64, i64* %534, align 8
  %536 = getelementptr inbounds double, double* %277, i64 %532
  %537 = bitcast double* %536 to i64*
  store i64 %535, i64* %537, align 8
  %538 = add nuw nsw i64 %490, 8
  %539 = icmp eq i64 %538, %9
  br i1 %539, label %389, label %489, !llvm.loop !133
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl22ComputeQRFactorizationERKNS_5PlaneIdEEPS1_S4_(%"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* noalias, %"class.jxl::Plane"* noalias) local_unnamed_addr #0 {
  %4 = alloca %"class.jxl::Plane", align 8
  %5 = alloca %"class.jxl::Plane", align 8
  %6 = alloca %"class.std::__1::vector.4", align 8
  %7 = alloca %"class.jxl::Plane", align 8
  %8 = alloca %"class.jxl::Plane", align 8
  %9 = alloca %"class.jxl::Plane", align 8
  %10 = alloca %"class.jxl::Plane", align 8
  %11 = alloca %"class.jxl::Plane", align 8
  %12 = alloca %"class.jxl::Plane", align 8
  %13 = alloca %"class.jxl::Plane", align 8
  %14 = alloca %"class.jxl::Plane", align 8
  %15 = alloca %"class.jxl::Plane", align 8
  %16 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %17, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %3
  %23 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 222, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0)) #9
  %24 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

25:                                               ; preds = %3
  %26 = bitcast %"class.jxl::Plane"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %26) #9
  %27 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 4
  %28 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 32, i1 false) #9, !alias.scope !134
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %29, i64 %18, i64 %18, i64 8) #9
  %30 = icmp eq i32 %17, 0
  br i1 %30, label %86, label %31

31:                                               ; preds = %25
  %32 = and i64 %18, 1
  %33 = icmp eq i32 %17, 1
  br i1 %33, label %67, label %34

34:                                               ; preds = %31
  %35 = sub nsw i64 %18, %32
  br label %36

36:                                               ; preds = %1248, %34
  %37 = phi i64 [ 0, %34 ], [ %1250, %1248 ]
  %38 = phi i64 [ %35, %34 ], [ %1251, %1248 ]
  %39 = load i8*, i8** %28, align 8, !alias.scope !134
  %40 = load i64, i64* %27, align 8, !alias.scope !134
  %41 = mul i64 %40, %37
  %42 = getelementptr inbounds i8, i8* %39, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = and i64 %43, 63
  %45 = icmp eq i64 %44, 0
  call void @llvm.assume(i1 %45) #9
  %46 = bitcast i8* %42 to double*
  %47 = getelementptr inbounds double, double* %46, i64 %18
  %48 = ptrtoint double* %47 to i64
  %49 = sub i64 %48, %43
  %50 = icmp sgt i64 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %36
  call void @llvm.memset.p0i8.i64(i8* align 64 %42, i8 0, i64 %49, i1 false) #9
  br label %52

52:                                               ; preds = %51, %36
  %53 = getelementptr inbounds double, double* %46, i64 %37
  store double 1.000000e+00, double* %53, align 16
  %54 = or i64 %37, 1
  %55 = load i8*, i8** %28, align 8, !alias.scope !134
  %56 = load i64, i64* %27, align 8, !alias.scope !134
  %57 = mul i64 %56, %54
  %58 = getelementptr inbounds i8, i8* %55, i64 %57
  %59 = ptrtoint i8* %58 to i64
  %60 = and i64 %59, 63
  %61 = icmp eq i64 %60, 0
  call void @llvm.assume(i1 %61) #9
  %62 = bitcast i8* %58 to double*
  %63 = getelementptr inbounds double, double* %62, i64 %18
  %64 = ptrtoint double* %63 to i64
  %65 = sub i64 %64, %59
  %66 = icmp sgt i64 %65, 0
  br i1 %66, label %1247, label %1248

67:                                               ; preds = %1248, %31
  %68 = phi i64 [ 0, %31 ], [ %1250, %1248 ]
  %69 = icmp eq i64 %32, 0
  br i1 %69, label %86, label %70

70:                                               ; preds = %67
  %71 = load i8*, i8** %28, align 8, !alias.scope !134
  %72 = load i64, i64* %27, align 8, !alias.scope !134
  %73 = mul i64 %72, %68
  %74 = getelementptr inbounds i8, i8* %71, i64 %73
  %75 = ptrtoint i8* %74 to i64
  %76 = and i64 %75, 63
  %77 = icmp eq i64 %76, 0
  call void @llvm.assume(i1 %77) #9
  %78 = bitcast i8* %74 to double*
  %79 = getelementptr inbounds double, double* %78, i64 %18
  %80 = ptrtoint double* %79 to i64
  %81 = sub i64 %80, %75
  %82 = icmp sgt i64 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %70
  call void @llvm.memset.p0i8.i64(i8* align 64 %74, i8 0, i64 %81, i1 false) #9
  br label %84

84:                                               ; preds = %83, %70
  %85 = getelementptr inbounds double, double* %78, i64 %68
  store double 1.000000e+00, double* %85, align 8
  br label %86

86:                                               ; preds = %84, %67, %25
  %87 = bitcast %"class.jxl::Plane"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* nonnull align 8 %26, i64 24, i1 false) #9
  %88 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %89 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 5
  %90 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %89, i64 0, i32 0, i32 0, i32 0
  %91 = bitcast %"class.std::__1::unique_ptr"* %89 to i64*
  %92 = load i64, i64* %91, align 8
  store i8* null, i8** %90, align 8
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %88, i64 0, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  %95 = bitcast %"class.std::__1::unique_ptr"* %88 to i64*
  store i64 %92, i64* %95, align 8
  %96 = icmp eq i8* %94, null
  br i1 %96, label %97, label %98

97:                                               ; preds = %86
  store i8* null, i8** %28, align 8
  br label %102

98:                                               ; preds = %86
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %94) #9
  %99 = load i8*, i8** %28, align 8
  store i8* null, i8** %28, align 8
  %100 = icmp eq i8* %99, null
  br i1 %100, label %102, label %101

101:                                              ; preds = %98
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %99) #9
  br label %102

102:                                              ; preds = %97, %98, %101
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %26) #9
  %103 = bitcast %"class.jxl::Plane"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %103) #9
  call void @_ZN3jxl9CopyImageIdEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane"* nonnull sret %5, %"class.jxl::Plane"* dereferenceable(32) %0)
  %104 = bitcast %"class.jxl::Plane"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* nonnull align 8 %103, i64 24, i1 false) #9
  %105 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5
  %106 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %5, i64 0, i32 0, i32 5
  %107 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %106, i64 0, i32 0, i32 0, i32 0
  %108 = bitcast %"class.std::__1::unique_ptr"* %106 to i64*
  %109 = load i64, i64* %108, align 8
  store i8* null, i8** %107, align 8
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %105, i64 0, i32 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  %112 = bitcast %"class.std::__1::unique_ptr"* %105 to i64*
  store i64 %109, i64* %112, align 8
  %113 = icmp eq i8* %111, null
  br i1 %113, label %114, label %116

114:                                              ; preds = %102
  %115 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %5, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %115, align 8
  br label %122

116:                                              ; preds = %102
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %111) #9
  %117 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %5, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %118 = load i8*, i8** %117, align 8
  %119 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %5, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %119, align 8
  %120 = icmp eq i8* %118, null
  br i1 %120, label %122, label %121

121:                                              ; preds = %116
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %118) #9
  br label %122

122:                                              ; preds = %114, %116, %121
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %103) #9
  %123 = bitcast %"class.std::__1::vector.4"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %123) #9
  %124 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %6, i64 0, i32 0, i32 0
  %125 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %6, i64 0, i32 0, i32 1
  %126 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %123, i8 0, i64 24, i1 false) #9
  %127 = icmp ugt i32 %17, 1
  br i1 %127, label %128, label %1246

128:                                              ; preds = %122
  %129 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %130 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 4
  %131 = bitcast %"class.jxl::Plane"* %7 to i8*
  %132 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 0
  %133 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 1
  %134 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 4
  %135 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %136 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0
  %137 = bitcast %"class.jxl::Plane"* %8 to i8*
  %138 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %8, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %139 = bitcast %"class.jxl::Plane"* %9 to i8*
  %140 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 4
  %141 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %142 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0
  %143 = bitcast %"class.jxl::Plane"* %10 to i8*
  %144 = bitcast %"class.jxl::Plane"* %11 to i8*
  %145 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %10, i64 0, i32 0, i32 4
  %146 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %10, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %147 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %11, i64 0, i32 0, i32 0
  %148 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %11, i64 0, i32 0, i32 1
  %149 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %10, i64 0, i32 0
  %150 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %11, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %151 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %11, i64 0, i32 0, i32 4
  %152 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %10, i64 0, i32 0, i32 0
  %153 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %10, i64 0, i32 0, i32 1
  %154 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 5
  %155 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %154, i64 0, i32 0, i32 0, i32 0
  %156 = bitcast %"class.std::__1::unique_ptr"* %154 to i64*
  %157 = bitcast %"class.jxl::Plane"** %125 to i64*
  %158 = add nsw i64 %18, -1
  %159 = bitcast %"class.jxl::Plane"* %7 to i8*
  %160 = bitcast %"class.jxl::Plane"* %8 to i8*
  %161 = shl nuw nsw i64 %18, 3
  %162 = add nsw i64 %18, -2
  %163 = add nsw i64 %18, -2
  br label %189

164:                                              ; preds = %948
  %165 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %124, align 8
  %166 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %125, align 8
  %167 = icmp eq %"class.jxl::Plane"* %165, %166
  br i1 %167, label %1241, label %168

168:                                              ; preds = %164
  %169 = bitcast %"class.jxl::Plane"* %12 to i8*
  %170 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %171 = bitcast %"class.jxl::Plane"* %13 to i8*
  %172 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %13, i64 0, i32 0, i32 4
  %173 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %13, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %174 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %13, i64 0, i32 0
  %175 = bitcast %"class.jxl::Plane"* %14 to i8*
  %176 = bitcast %"class.jxl::Plane"* %15 to i8*
  %177 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0, i32 4
  %178 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %179 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %15, i64 0, i32 0, i32 0
  %180 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %15, i64 0, i32 0, i32 1
  %181 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0
  %182 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %15, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %183 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %15, i64 0, i32 0, i32 4
  %184 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0, i32 0
  %185 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0, i32 1
  %186 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %187 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 4
  %188 = bitcast %"class.jxl::Plane"* %12 to i8*
  br label %952

189:                                              ; preds = %948, %128
  %190 = phi i64 [ 0, %128 ], [ %950, %948 ]
  %191 = phi i64 [ 1, %128 ], [ %949, %948 ]
  %192 = sub nsw i64 %18, %190
  %193 = add i64 %192, -4
  %194 = lshr i64 %193, 2
  %195 = add nuw nsw i64 %194, 1
  %196 = sub nsw i64 %18, %190
  %197 = sub i64 %158, %190
  %198 = sub nsw i64 %18, %190
  %199 = sub i64 %158, %190
  %200 = sub i64 %158, %190
  %201 = add i64 %200, -4
  %202 = lshr i64 %201, 2
  %203 = add nuw nsw i64 %202, 1
  %204 = sub i64 %158, %190
  %205 = sub i64 %163, %190
  %206 = sub i64 %158, %190
  %207 = shl i64 %190, 3
  %208 = add i64 %207, 8
  %209 = sub i64 %158, %190
  %210 = sub nsw i64 %18, %190
  %211 = sub nsw i64 %18, %190
  %212 = load i8*, i8** %129, align 8
  %213 = load i64, i64* %130, align 8
  %214 = mul i64 %213, %190
  %215 = getelementptr inbounds i8, i8* %212, i64 %214
  %216 = ptrtoint i8* %215 to i64
  %217 = and i64 %216, 63
  %218 = icmp eq i64 %217, 0
  call void @llvm.assume(i1 %218) #9
  %219 = bitcast i8* %215 to double*
  %220 = getelementptr inbounds double, double* %219, i64 %191
  %221 = icmp eq i64 %211, 1
  br i1 %221, label %948, label %222

222:                                              ; preds = %189
  %223 = sub i64 %162, %190
  %224 = and i64 %206, 3
  %225 = icmp ult i64 %223, 3
  br i1 %225, label %254, label %226

226:                                              ; preds = %222
  %227 = sub i64 %206, %224
  br label %228

228:                                              ; preds = %228, %226
  %229 = phi i64 [ 0, %226 ], [ %251, %228 ]
  %230 = phi double [ 0.000000e+00, %226 ], [ %250, %228 ]
  %231 = phi i64 [ %227, %226 ], [ %252, %228 ]
  %232 = getelementptr inbounds double, double* %220, i64 %229
  %233 = load double, double* %232, align 8, !alias.scope !137, !noalias !140
  %234 = fmul double %233, %233
  %235 = fadd double %230, %234
  %236 = or i64 %229, 1
  %237 = getelementptr inbounds double, double* %220, i64 %236
  %238 = load double, double* %237, align 8, !alias.scope !137, !noalias !140
  %239 = fmul double %238, %238
  %240 = fadd double %235, %239
  %241 = or i64 %229, 2
  %242 = getelementptr inbounds double, double* %220, i64 %241
  %243 = load double, double* %242, align 8, !alias.scope !137, !noalias !140
  %244 = fmul double %243, %243
  %245 = fadd double %240, %244
  %246 = or i64 %229, 3
  %247 = getelementptr inbounds double, double* %220, i64 %246
  %248 = load double, double* %247, align 8, !alias.scope !137, !noalias !140
  %249 = fmul double %248, %248
  %250 = fadd double %245, %249
  %251 = add nuw i64 %229, 4
  %252 = add i64 %231, -4
  %253 = icmp eq i64 %252, 0
  br i1 %253, label %254, label %228

254:                                              ; preds = %228, %222
  %255 = phi double [ undef, %222 ], [ %250, %228 ]
  %256 = phi i64 [ 0, %222 ], [ %251, %228 ]
  %257 = phi double [ 0.000000e+00, %222 ], [ %250, %228 ]
  %258 = icmp eq i64 %224, 0
  br i1 %258, label %270, label %259

259:                                              ; preds = %254, %259
  %260 = phi i64 [ %267, %259 ], [ %256, %254 ]
  %261 = phi double [ %266, %259 ], [ %257, %254 ]
  %262 = phi i64 [ %268, %259 ], [ %224, %254 ]
  %263 = getelementptr inbounds double, double* %220, i64 %260
  %264 = load double, double* %263, align 8, !alias.scope !137, !noalias !140
  %265 = fmul double %264, %264
  %266 = fadd double %261, %265
  %267 = add nuw i64 %260, 1
  %268 = add i64 %262, -1
  %269 = icmp eq i64 %268, 0
  br i1 %269, label %270, label %259, !llvm.loop !142

270:                                              ; preds = %259, %254
  %271 = phi double [ %255, %254 ], [ %266, %259 ]
  %272 = fcmp ogt double %271, 1.000000e-15
  br i1 %272, label %273, label %948

273:                                              ; preds = %270
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %131) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %159, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %136, i64 %18, i64 1, i64 8) #9
  %274 = load i32, i32* %133, align 4
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %306, label %276

276:                                              ; preds = %273
  %277 = load i32, i32* %132, align 8
  br label %278

278:                                              ; preds = %293, %276
  %279 = phi i32 [ %274, %276 ], [ %294, %293 ]
  %280 = phi i32 [ %277, %276 ], [ %295, %293 ]
  %281 = phi i64 [ 0, %276 ], [ %296, %293 ]
  %282 = load i8*, i8** %135, align 8
  %283 = load i64, i64* %134, align 8
  %284 = mul i64 %283, %281
  %285 = getelementptr inbounds i8, i8* %282, i64 %284
  %286 = ptrtoint i8* %285 to i64
  %287 = and i64 %286, 63
  %288 = icmp eq i64 %287, 0
  call void @llvm.assume(i1 %288) #9
  %289 = bitcast i8* %285 to double*
  %290 = icmp eq i32 %280, 0
  br i1 %290, label %293, label %299

291:                                              ; preds = %299
  %292 = load i32, i32* %133, align 4
  br label %293

293:                                              ; preds = %291, %278
  %294 = phi i32 [ %292, %291 ], [ %279, %278 ]
  %295 = phi i32 [ %303, %291 ], [ 0, %278 ]
  %296 = add nuw nsw i64 %281, 1
  %297 = zext i32 %294 to i64
  %298 = icmp ult i64 %296, %297
  br i1 %298, label %278, label %306

299:                                              ; preds = %278, %299
  %300 = phi i64 [ %302, %299 ], [ 0, %278 ]
  %301 = getelementptr inbounds double, double* %289, i64 %300
  store double 0.000000e+00, double* %301, align 8
  %302 = add nuw nsw i64 %300, 1
  %303 = load i32, i32* %132, align 8
  %304 = zext i32 %303 to i64
  %305 = icmp ult i64 %302, %304
  br i1 %305, label %299, label %291

306:                                              ; preds = %293, %273
  %307 = load i8*, i8** %129, align 8
  %308 = load i64, i64* %130, align 8
  %309 = mul i64 %308, %190
  %310 = getelementptr inbounds i8, i8* %307, i64 %309
  %311 = ptrtoint i8* %310 to i64
  %312 = and i64 %311, 63
  %313 = icmp eq i64 %312, 0
  call void @llvm.assume(i1 %313) #9
  %314 = bitcast i8* %310 to double*
  %315 = getelementptr inbounds double, double* %314, i64 %190
  %316 = load i8*, i8** %135, align 8
  %317 = ptrtoint i8* %316 to i64
  %318 = and i64 %317, 63
  %319 = icmp eq i64 %318, 0
  call void @llvm.assume(i1 %319) #9
  %320 = bitcast i8* %316 to double*
  %321 = getelementptr inbounds double, double* %320, i64 %190
  %322 = load double, double* %315, align 8
  %323 = fcmp ole double %322, 0.000000e+00
  %324 = select i1 %323, double 1.000000e+00, double -1.000000e+00
  %325 = icmp eq i64 %211, 0
  br i1 %325, label %377, label %326

326:                                              ; preds = %306
  %327 = fmul double %322, %322
  %328 = fadd double %327, 0.000000e+00
  %329 = icmp eq i64 %211, 1
  br i1 %329, label %377, label %330

330:                                              ; preds = %326
  %331 = and i64 %204, 3
  %332 = icmp ult i64 %205, 3
  br i1 %332, label %361, label %333

333:                                              ; preds = %330
  %334 = sub i64 %204, %331
  br label %335

335:                                              ; preds = %335, %333
  %336 = phi i64 [ 1, %333 ], [ %358, %335 ]
  %337 = phi double [ %328, %333 ], [ %357, %335 ]
  %338 = phi i64 [ %334, %333 ], [ %359, %335 ]
  %339 = getelementptr inbounds double, double* %315, i64 %336
  %340 = load double, double* %339, align 8, !alias.scope !143, !noalias !146
  %341 = fmul double %340, %340
  %342 = fadd double %341, %337
  %343 = add nuw nsw i64 %336, 1
  %344 = getelementptr inbounds double, double* %315, i64 %343
  %345 = load double, double* %344, align 8, !alias.scope !143, !noalias !146
  %346 = fmul double %345, %345
  %347 = fadd double %346, %342
  %348 = add nuw nsw i64 %336, 2
  %349 = getelementptr inbounds double, double* %315, i64 %348
  %350 = load double, double* %349, align 8, !alias.scope !143, !noalias !146
  %351 = fmul double %350, %350
  %352 = fadd double %351, %347
  %353 = add nuw i64 %336, 3
  %354 = getelementptr inbounds double, double* %315, i64 %353
  %355 = load double, double* %354, align 8, !alias.scope !143, !noalias !146
  %356 = fmul double %355, %355
  %357 = fadd double %356, %352
  %358 = add nuw i64 %336, 4
  %359 = add i64 %338, -4
  %360 = icmp eq i64 %359, 0
  br i1 %360, label %361, label %335

361:                                              ; preds = %335, %330
  %362 = phi double [ undef, %330 ], [ %357, %335 ]
  %363 = phi i64 [ 1, %330 ], [ %358, %335 ]
  %364 = phi double [ %328, %330 ], [ %357, %335 ]
  %365 = icmp eq i64 %331, 0
  br i1 %365, label %377, label %366

366:                                              ; preds = %361, %366
  %367 = phi i64 [ %374, %366 ], [ %363, %361 ]
  %368 = phi double [ %373, %366 ], [ %364, %361 ]
  %369 = phi i64 [ %375, %366 ], [ %331, %361 ]
  %370 = getelementptr inbounds double, double* %315, i64 %367
  %371 = load double, double* %370, align 8, !alias.scope !143, !noalias !146
  %372 = fmul double %371, %371
  %373 = fadd double %372, %368
  %374 = add nuw i64 %367, 1
  %375 = add i64 %369, -1
  %376 = icmp eq i64 %375, 0
  br i1 %376, label %377, label %366, !llvm.loop !148

377:                                              ; preds = %361, %366, %326, %306
  %378 = phi double [ 0.000000e+00, %306 ], [ %328, %326 ], [ %362, %361 ], [ %373, %366 ]
  %379 = call double @sqrt(double %378) #9
  %380 = fmul double %324, %379
  %381 = fsub double %322, %380
  store double %381, double* %321, align 8
  %382 = icmp ugt i64 %211, 1
  br i1 %382, label %383, label %494

383:                                              ; preds = %377
  %384 = icmp ult i64 %209, 4
  br i1 %384, label %385, label %405

385:                                              ; preds = %492, %405, %383
  %386 = phi i64 [ 1, %405 ], [ 1, %383 ], [ %417, %492 ]
  %387 = sub i64 %198, %386
  %388 = sub i64 %199, %386
  %389 = and i64 %387, 7
  %390 = icmp eq i64 %389, 0
  br i1 %390, label %402, label %391

391:                                              ; preds = %385, %391
  %392 = phi i64 [ %399, %391 ], [ %386, %385 ]
  %393 = phi i64 [ %400, %391 ], [ %389, %385 ]
  %394 = getelementptr inbounds double, double* %315, i64 %392
  %395 = bitcast double* %394 to i64*
  %396 = load i64, i64* %395, align 8
  %397 = getelementptr inbounds double, double* %321, i64 %392
  %398 = bitcast double* %397 to i64*
  store i64 %396, i64* %398, align 8
  %399 = add nuw i64 %392, 1
  %400 = add i64 %393, -1
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %402, label %391, !llvm.loop !149

402:                                              ; preds = %391, %385
  %403 = phi i64 [ %386, %385 ], [ %399, %391 ]
  %404 = icmp ult i64 %388, 7
  br i1 %404, label %494, label %602

405:                                              ; preds = %383
  %406 = getelementptr i8, i8* %316, i64 %208
  %407 = getelementptr i8, i8* %316, i64 %161
  %408 = add i64 %208, %309
  %409 = getelementptr i8, i8* %307, i64 %408
  %410 = getelementptr i8, i8* %307, i64 %161
  %411 = getelementptr i8, i8* %410, i64 %309
  %412 = icmp ult i8* %406, %411
  %413 = icmp ult i8* %409, %407
  %414 = and i1 %412, %413
  br i1 %414, label %385, label %415

415:                                              ; preds = %405
  %416 = and i64 %209, -4
  %417 = or i64 %416, 1
  %418 = and i64 %203, 3
  %419 = icmp ult i64 %201, 12
  br i1 %419, label %472, label %420

420:                                              ; preds = %415
  %421 = sub nsw i64 %203, %418
  br label %422

422:                                              ; preds = %422, %420
  %423 = phi i64 [ 0, %420 ], [ %469, %422 ]
  %424 = phi i64 [ %421, %420 ], [ %470, %422 ]
  %425 = or i64 %423, 1
  %426 = getelementptr inbounds double, double* %315, i64 %425
  %427 = bitcast double* %426 to <2 x i64>*
  %428 = load <2 x i64>, <2 x i64>* %427, align 8, !alias.scope !150
  %429 = getelementptr inbounds double, double* %426, i64 2
  %430 = bitcast double* %429 to <2 x i64>*
  %431 = load <2 x i64>, <2 x i64>* %430, align 8, !alias.scope !150
  %432 = getelementptr inbounds double, double* %321, i64 %425
  %433 = bitcast double* %432 to <2 x i64>*
  store <2 x i64> %428, <2 x i64>* %433, align 8, !alias.scope !153, !noalias !150
  %434 = getelementptr inbounds double, double* %432, i64 2
  %435 = bitcast double* %434 to <2 x i64>*
  store <2 x i64> %431, <2 x i64>* %435, align 8, !alias.scope !153, !noalias !150
  %436 = or i64 %423, 5
  %437 = getelementptr inbounds double, double* %315, i64 %436
  %438 = bitcast double* %437 to <2 x i64>*
  %439 = load <2 x i64>, <2 x i64>* %438, align 8, !alias.scope !150
  %440 = getelementptr inbounds double, double* %437, i64 2
  %441 = bitcast double* %440 to <2 x i64>*
  %442 = load <2 x i64>, <2 x i64>* %441, align 8, !alias.scope !150
  %443 = getelementptr inbounds double, double* %321, i64 %436
  %444 = bitcast double* %443 to <2 x i64>*
  store <2 x i64> %439, <2 x i64>* %444, align 8, !alias.scope !153, !noalias !150
  %445 = getelementptr inbounds double, double* %443, i64 2
  %446 = bitcast double* %445 to <2 x i64>*
  store <2 x i64> %442, <2 x i64>* %446, align 8, !alias.scope !153, !noalias !150
  %447 = or i64 %423, 9
  %448 = getelementptr inbounds double, double* %315, i64 %447
  %449 = bitcast double* %448 to <2 x i64>*
  %450 = load <2 x i64>, <2 x i64>* %449, align 8, !alias.scope !150
  %451 = getelementptr inbounds double, double* %448, i64 2
  %452 = bitcast double* %451 to <2 x i64>*
  %453 = load <2 x i64>, <2 x i64>* %452, align 8, !alias.scope !150
  %454 = getelementptr inbounds double, double* %321, i64 %447
  %455 = bitcast double* %454 to <2 x i64>*
  store <2 x i64> %450, <2 x i64>* %455, align 8, !alias.scope !153, !noalias !150
  %456 = getelementptr inbounds double, double* %454, i64 2
  %457 = bitcast double* %456 to <2 x i64>*
  store <2 x i64> %453, <2 x i64>* %457, align 8, !alias.scope !153, !noalias !150
  %458 = or i64 %423, 13
  %459 = getelementptr inbounds double, double* %315, i64 %458
  %460 = bitcast double* %459 to <2 x i64>*
  %461 = load <2 x i64>, <2 x i64>* %460, align 8, !alias.scope !150
  %462 = getelementptr inbounds double, double* %459, i64 2
  %463 = bitcast double* %462 to <2 x i64>*
  %464 = load <2 x i64>, <2 x i64>* %463, align 8, !alias.scope !150
  %465 = getelementptr inbounds double, double* %321, i64 %458
  %466 = bitcast double* %465 to <2 x i64>*
  store <2 x i64> %461, <2 x i64>* %466, align 8, !alias.scope !153, !noalias !150
  %467 = getelementptr inbounds double, double* %465, i64 2
  %468 = bitcast double* %467 to <2 x i64>*
  store <2 x i64> %464, <2 x i64>* %468, align 8, !alias.scope !153, !noalias !150
  %469 = add i64 %423, 16
  %470 = add i64 %424, -4
  %471 = icmp eq i64 %470, 0
  br i1 %471, label %472, label %422, !llvm.loop !155

472:                                              ; preds = %422, %415
  %473 = phi i64 [ 0, %415 ], [ %469, %422 ]
  %474 = icmp eq i64 %418, 0
  br i1 %474, label %492, label %475

475:                                              ; preds = %472, %475
  %476 = phi i64 [ %489, %475 ], [ %473, %472 ]
  %477 = phi i64 [ %490, %475 ], [ %418, %472 ]
  %478 = or i64 %476, 1
  %479 = getelementptr inbounds double, double* %315, i64 %478
  %480 = bitcast double* %479 to <2 x i64>*
  %481 = load <2 x i64>, <2 x i64>* %480, align 8, !alias.scope !150
  %482 = getelementptr inbounds double, double* %479, i64 2
  %483 = bitcast double* %482 to <2 x i64>*
  %484 = load <2 x i64>, <2 x i64>* %483, align 8, !alias.scope !150
  %485 = getelementptr inbounds double, double* %321, i64 %478
  %486 = bitcast double* %485 to <2 x i64>*
  store <2 x i64> %481, <2 x i64>* %486, align 8, !alias.scope !153, !noalias !150
  %487 = getelementptr inbounds double, double* %485, i64 2
  %488 = bitcast double* %487 to <2 x i64>*
  store <2 x i64> %484, <2 x i64>* %488, align 8, !alias.scope !153, !noalias !150
  %489 = add i64 %476, 4
  %490 = add i64 %477, -1
  %491 = icmp eq i64 %490, 0
  br i1 %491, label %492, label %475, !llvm.loop !156

492:                                              ; preds = %475, %472
  %493 = icmp eq i64 %209, %416
  br i1 %493, label %494, label %385

494:                                              ; preds = %402, %602, %492, %377
  br i1 %325, label %660, label %495

495:                                              ; preds = %494
  %496 = and i64 %196, 3
  %497 = icmp ult i64 %197, 3
  br i1 %497, label %526, label %498

498:                                              ; preds = %495
  %499 = sub i64 %196, %496
  br label %500

500:                                              ; preds = %500, %498
  %501 = phi i64 [ 0, %498 ], [ %523, %500 ]
  %502 = phi double [ 0.000000e+00, %498 ], [ %522, %500 ]
  %503 = phi i64 [ %499, %498 ], [ %524, %500 ]
  %504 = getelementptr inbounds double, double* %321, i64 %501
  %505 = load double, double* %504, align 8, !alias.scope !157, !noalias !160
  %506 = fmul double %505, %505
  %507 = fadd double %502, %506
  %508 = or i64 %501, 1
  %509 = getelementptr inbounds double, double* %321, i64 %508
  %510 = load double, double* %509, align 8, !alias.scope !157, !noalias !160
  %511 = fmul double %510, %510
  %512 = fadd double %507, %511
  %513 = or i64 %501, 2
  %514 = getelementptr inbounds double, double* %321, i64 %513
  %515 = load double, double* %514, align 8, !alias.scope !157, !noalias !160
  %516 = fmul double %515, %515
  %517 = fadd double %512, %516
  %518 = or i64 %501, 3
  %519 = getelementptr inbounds double, double* %321, i64 %518
  %520 = load double, double* %519, align 8, !alias.scope !157, !noalias !160
  %521 = fmul double %520, %520
  %522 = fadd double %517, %521
  %523 = add nuw i64 %501, 4
  %524 = add i64 %503, -4
  %525 = icmp eq i64 %524, 0
  br i1 %525, label %526, label %500

526:                                              ; preds = %500, %495
  %527 = phi double [ undef, %495 ], [ %522, %500 ]
  %528 = phi i64 [ 0, %495 ], [ %523, %500 ]
  %529 = phi double [ 0.000000e+00, %495 ], [ %522, %500 ]
  %530 = icmp eq i64 %496, 0
  br i1 %530, label %542, label %531

531:                                              ; preds = %526, %531
  %532 = phi i64 [ %539, %531 ], [ %528, %526 ]
  %533 = phi double [ %538, %531 ], [ %529, %526 ]
  %534 = phi i64 [ %540, %531 ], [ %496, %526 ]
  %535 = getelementptr inbounds double, double* %321, i64 %532
  %536 = load double, double* %535, align 8, !alias.scope !157, !noalias !160
  %537 = fmul double %536, %536
  %538 = fadd double %533, %537
  %539 = add nuw i64 %532, 1
  %540 = add i64 %534, -1
  %541 = icmp eq i64 %540, 0
  br i1 %541, label %542, label %531, !llvm.loop !162

542:                                              ; preds = %531, %526
  %543 = phi double [ %527, %526 ], [ %538, %531 ]
  %544 = call double @sqrt(double %543) #9
  %545 = fdiv double 1.000000e+00, %544
  %546 = icmp ult i64 %210, 4
  br i1 %546, label %547, label %549

547:                                              ; preds = %600, %542
  %548 = phi i64 [ 0, %542 ], [ %550, %600 ]
  br label %653

549:                                              ; preds = %542
  %550 = and i64 %210, -4
  %551 = insertelement <2 x double> undef, double %545, i32 0
  %552 = shufflevector <2 x double> %551, <2 x double> undef, <2 x i32> zeroinitializer
  %553 = insertelement <2 x double> undef, double %545, i32 0
  %554 = shufflevector <2 x double> %553, <2 x double> undef, <2 x i32> zeroinitializer
  %555 = and i64 %195, 1
  %556 = icmp eq i64 %194, 0
  br i1 %556, label %586, label %557

557:                                              ; preds = %549
  %558 = sub nuw nsw i64 %195, %555
  br label %559

559:                                              ; preds = %559, %557
  %560 = phi i64 [ 0, %557 ], [ %583, %559 ]
  %561 = phi i64 [ %558, %557 ], [ %584, %559 ]
  %562 = getelementptr inbounds double, double* %321, i64 %560
  %563 = bitcast double* %562 to <2 x double>*
  %564 = load <2 x double>, <2 x double>* %563, align 8
  %565 = getelementptr inbounds double, double* %562, i64 2
  %566 = bitcast double* %565 to <2 x double>*
  %567 = load <2 x double>, <2 x double>* %566, align 8
  %568 = fmul <2 x double> %552, %564
  %569 = fmul <2 x double> %554, %567
  %570 = bitcast double* %562 to <2 x double>*
  store <2 x double> %568, <2 x double>* %570, align 8
  %571 = bitcast double* %565 to <2 x double>*
  store <2 x double> %569, <2 x double>* %571, align 8
  %572 = or i64 %560, 4
  %573 = getelementptr inbounds double, double* %321, i64 %572
  %574 = bitcast double* %573 to <2 x double>*
  %575 = load <2 x double>, <2 x double>* %574, align 8
  %576 = getelementptr inbounds double, double* %573, i64 2
  %577 = bitcast double* %576 to <2 x double>*
  %578 = load <2 x double>, <2 x double>* %577, align 8
  %579 = fmul <2 x double> %552, %575
  %580 = fmul <2 x double> %554, %578
  %581 = bitcast double* %573 to <2 x double>*
  store <2 x double> %579, <2 x double>* %581, align 8
  %582 = bitcast double* %576 to <2 x double>*
  store <2 x double> %580, <2 x double>* %582, align 8
  %583 = add i64 %560, 8
  %584 = add i64 %561, -2
  %585 = icmp eq i64 %584, 0
  br i1 %585, label %586, label %559, !llvm.loop !163

586:                                              ; preds = %559, %549
  %587 = phi i64 [ 0, %549 ], [ %583, %559 ]
  %588 = icmp eq i64 %555, 0
  br i1 %588, label %600, label %589

589:                                              ; preds = %586
  %590 = getelementptr inbounds double, double* %321, i64 %587
  %591 = bitcast double* %590 to <2 x double>*
  %592 = load <2 x double>, <2 x double>* %591, align 8
  %593 = getelementptr inbounds double, double* %590, i64 2
  %594 = bitcast double* %593 to <2 x double>*
  %595 = load <2 x double>, <2 x double>* %594, align 8
  %596 = fmul <2 x double> %552, %592
  %597 = fmul <2 x double> %554, %595
  %598 = bitcast double* %590 to <2 x double>*
  store <2 x double> %596, <2 x double>* %598, align 8
  %599 = bitcast double* %593 to <2 x double>*
  store <2 x double> %597, <2 x double>* %599, align 8
  br label %600

600:                                              ; preds = %586, %589
  %601 = icmp eq i64 %210, %550
  br i1 %601, label %660, label %547

602:                                              ; preds = %402, %602
  %603 = phi i64 [ %651, %602 ], [ %403, %402 ]
  %604 = getelementptr inbounds double, double* %315, i64 %603
  %605 = bitcast double* %604 to i64*
  %606 = load i64, i64* %605, align 8
  %607 = getelementptr inbounds double, double* %321, i64 %603
  %608 = bitcast double* %607 to i64*
  store i64 %606, i64* %608, align 8
  %609 = add nuw i64 %603, 1
  %610 = getelementptr inbounds double, double* %315, i64 %609
  %611 = bitcast double* %610 to i64*
  %612 = load i64, i64* %611, align 8
  %613 = getelementptr inbounds double, double* %321, i64 %609
  %614 = bitcast double* %613 to i64*
  store i64 %612, i64* %614, align 8
  %615 = add nuw i64 %603, 2
  %616 = getelementptr inbounds double, double* %315, i64 %615
  %617 = bitcast double* %616 to i64*
  %618 = load i64, i64* %617, align 8
  %619 = getelementptr inbounds double, double* %321, i64 %615
  %620 = bitcast double* %619 to i64*
  store i64 %618, i64* %620, align 8
  %621 = add nuw i64 %603, 3
  %622 = getelementptr inbounds double, double* %315, i64 %621
  %623 = bitcast double* %622 to i64*
  %624 = load i64, i64* %623, align 8
  %625 = getelementptr inbounds double, double* %321, i64 %621
  %626 = bitcast double* %625 to i64*
  store i64 %624, i64* %626, align 8
  %627 = add nuw i64 %603, 4
  %628 = getelementptr inbounds double, double* %315, i64 %627
  %629 = bitcast double* %628 to i64*
  %630 = load i64, i64* %629, align 8
  %631 = getelementptr inbounds double, double* %321, i64 %627
  %632 = bitcast double* %631 to i64*
  store i64 %630, i64* %632, align 8
  %633 = add nuw i64 %603, 5
  %634 = getelementptr inbounds double, double* %315, i64 %633
  %635 = bitcast double* %634 to i64*
  %636 = load i64, i64* %635, align 8
  %637 = getelementptr inbounds double, double* %321, i64 %633
  %638 = bitcast double* %637 to i64*
  store i64 %636, i64* %638, align 8
  %639 = add nuw i64 %603, 6
  %640 = getelementptr inbounds double, double* %315, i64 %639
  %641 = bitcast double* %640 to i64*
  %642 = load i64, i64* %641, align 8
  %643 = getelementptr inbounds double, double* %321, i64 %639
  %644 = bitcast double* %643 to i64*
  store i64 %642, i64* %644, align 8
  %645 = add nuw i64 %603, 7
  %646 = getelementptr inbounds double, double* %315, i64 %645
  %647 = bitcast double* %646 to i64*
  %648 = load i64, i64* %647, align 8
  %649 = getelementptr inbounds double, double* %321, i64 %645
  %650 = bitcast double* %649 to i64*
  store i64 %648, i64* %650, align 8
  %651 = add nuw i64 %603, 8
  %652 = icmp eq i64 %651, %211
  br i1 %652, label %494, label %602, !llvm.loop !164

653:                                              ; preds = %547, %653
  %654 = phi i64 [ %658, %653 ], [ %548, %547 ]
  %655 = getelementptr inbounds double, double* %321, i64 %654
  %656 = load double, double* %655, align 8
  %657 = fmul double %545, %656
  store double %657, double* %655, align 8
  %658 = add nuw i64 %654, 1
  %659 = icmp eq i64 %658, %211
  br i1 %659, label %660, label %653, !llvm.loop !165

660:                                              ; preds = %653, %600, %494
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %137) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %160, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %139) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %139, i8 -86, i64 32, i1 false) #9, !alias.scope !166
  %661 = load i32, i32* %133, align 4, !noalias !166
  %662 = zext i32 %661 to i64
  %663 = load i32, i32* %132, align 8, !noalias !166
  %664 = zext i32 %663 to i64
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %142, i64 %662, i64 %664, i64 8) #9
  %665 = load i32, i32* %132, align 8, !noalias !166
  %666 = icmp eq i32 %665, 0
  br i1 %666, label %709, label %667

667:                                              ; preds = %660
  %668 = load i32, i32* %133, align 4, !noalias !166
  br label %669

669:                                              ; preds = %684, %667
  %670 = phi i32 [ %665, %667 ], [ %685, %684 ]
  %671 = phi i32 [ %668, %667 ], [ %686, %684 ]
  %672 = phi i64 [ 0, %667 ], [ %687, %684 ]
  %673 = load i8*, i8** %141, align 8, !alias.scope !166
  %674 = load i64, i64* %140, align 8, !alias.scope !166
  %675 = mul i64 %674, %672
  %676 = getelementptr inbounds i8, i8* %673, i64 %675
  %677 = ptrtoint i8* %676 to i64
  %678 = and i64 %677, 63
  %679 = icmp eq i64 %678, 0
  call void @llvm.assume(i1 %679) #9
  %680 = bitcast i8* %676 to double*
  %681 = icmp eq i32 %671, 0
  br i1 %681, label %684, label %690

682:                                              ; preds = %690
  %683 = load i32, i32* %132, align 8, !noalias !166
  br label %684

684:                                              ; preds = %682, %669
  %685 = phi i32 [ %683, %682 ], [ %670, %669 ]
  %686 = phi i32 [ %706, %682 ], [ 0, %669 ]
  %687 = add nuw nsw i64 %672, 1
  %688 = zext i32 %685 to i64
  %689 = icmp ult i64 %687, %688
  br i1 %689, label %669, label %709

690:                                              ; preds = %669, %690
  %691 = phi i64 [ %705, %690 ], [ 0, %669 ]
  %692 = load i8*, i8** %135, align 8, !noalias !166
  %693 = load i64, i64* %134, align 8, !noalias !166
  %694 = mul i64 %693, %691
  %695 = getelementptr inbounds i8, i8* %692, i64 %694
  %696 = ptrtoint i8* %695 to i64
  %697 = and i64 %696, 63
  %698 = icmp eq i64 %697, 0
  call void @llvm.assume(i1 %698) #9
  %699 = bitcast i8* %695 to double*
  %700 = getelementptr inbounds double, double* %699, i64 %672
  %701 = bitcast double* %700 to i64*
  %702 = load i64, i64* %701, align 8
  %703 = getelementptr inbounds double, double* %680, i64 %691
  %704 = bitcast double* %703 to i64*
  store i64 %702, i64* %704, align 8
  %705 = add nuw nsw i64 %691, 1
  %706 = load i32, i32* %133, align 4, !noalias !166
  %707 = zext i32 %706 to i64
  %708 = icmp ult i64 %705, %707
  br i1 %708, label %690, label %682

709:                                              ; preds = %684, %660
  call void @_ZN3jxl6MatMulIdddEENS_5PlaneIT_EERKNS1_IT0_EERKNS1_IT1_EE(%"class.jxl::Plane"* nonnull sret %8, %"class.jxl::Plane"* nonnull dereferenceable(32) %9, %"class.jxl::Plane"* dereferenceable(32) %2) #9
  %710 = load i8*, i8** %141, align 8
  store i8* null, i8** %141, align 8
  %711 = icmp eq i8* %710, null
  br i1 %711, label %713, label %712

712:                                              ; preds = %709
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %710) #9
  br label %713

713:                                              ; preds = %709, %712
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %139) #9
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %143) #9
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %144) #9
  call void @_ZN3jxl6MatMulIdddEENS_5PlaneIT_EERKNS1_IT0_EERKNS1_IT1_EE(%"class.jxl::Plane"* nonnull sret %11, %"class.jxl::Plane"* nonnull dereferenceable(32) %7, %"class.jxl::Plane"* nonnull dereferenceable(32) %8) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %143, i8 -86, i64 32, i1 false) #9, !alias.scope !169
  %714 = load i32, i32* %147, align 8, !noalias !169
  %715 = zext i32 %714 to i64
  %716 = load i32, i32* %148, align 4, !noalias !169
  %717 = zext i32 %716 to i64
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %149, i64 %715, i64 %717, i64 8) #9
  %718 = load i32, i32* %148, align 4, !noalias !169
  %719 = icmp eq i32 %718, 0
  br i1 %719, label %761, label %720

720:                                              ; preds = %713
  %721 = load i32, i32* %147, align 8, !noalias !169
  br label %722

722:                                              ; preds = %745, %720
  %723 = phi i32 [ %718, %720 ], [ %746, %745 ]
  %724 = phi i32 [ %721, %720 ], [ %747, %745 ]
  %725 = phi i64 [ 0, %720 ], [ %748, %745 ]
  %726 = load i8*, i8** %150, align 8, !noalias !169
  %727 = load i64, i64* %151, align 8, !noalias !169
  %728 = mul i64 %727, %725
  %729 = getelementptr inbounds i8, i8* %726, i64 %728
  %730 = ptrtoint i8* %729 to i64
  %731 = and i64 %730, 63
  %732 = icmp eq i64 %731, 0
  call void @llvm.assume(i1 %732) #9
  %733 = bitcast i8* %729 to double*
  %734 = load i8*, i8** %146, align 8, !alias.scope !169
  %735 = load i64, i64* %145, align 8, !alias.scope !169
  %736 = mul i64 %735, %725
  %737 = getelementptr inbounds i8, i8* %734, i64 %736
  %738 = ptrtoint i8* %737 to i64
  %739 = and i64 %738, 63
  %740 = icmp eq i64 %739, 0
  call void @llvm.assume(i1 %740) #9
  %741 = bitcast i8* %737 to double*
  %742 = icmp eq i32 %724, 0
  br i1 %742, label %745, label %751

743:                                              ; preds = %751
  %744 = load i32, i32* %148, align 4, !noalias !169
  br label %745

745:                                              ; preds = %743, %722
  %746 = phi i32 [ %744, %743 ], [ %723, %722 ]
  %747 = phi i32 [ %758, %743 ], [ 0, %722 ]
  %748 = add nuw nsw i64 %725, 1
  %749 = zext i32 %746 to i64
  %750 = icmp ult i64 %748, %749
  br i1 %750, label %722, label %761

751:                                              ; preds = %722, %751
  %752 = phi i64 [ %757, %751 ], [ 0, %722 ]
  %753 = getelementptr inbounds double, double* %733, i64 %752
  %754 = load double, double* %753, align 8
  %755 = fmul double %754, 2.000000e+00
  %756 = getelementptr inbounds double, double* %741, i64 %752
  store double %755, double* %756, align 8
  %757 = add nuw nsw i64 %752, 1
  %758 = load i32, i32* %147, align 8, !noalias !169
  %759 = zext i32 %758 to i64
  %760 = icmp ult i64 %757, %759
  br i1 %760, label %751, label %743

761:                                              ; preds = %745, %713
  %762 = load i32, i32* %152, align 8
  %763 = zext i32 %762 to i64
  %764 = load i32, i32* %153, align 4
  %765 = zext i32 %764 to i64
  %766 = icmp eq i32 %764, 0
  br i1 %766, label %919, label %767

767:                                              ; preds = %761
  %768 = icmp eq i32 %762, 0
  %769 = shl nuw nsw i64 %763, 3
  %770 = and i64 %763, 4294967292
  %771 = add nsw i64 %770, -4
  %772 = lshr exact i64 %771, 2
  %773 = add nuw nsw i64 %772, 1
  %774 = icmp ult i32 %762, 4
  %775 = and i64 %763, 4294967292
  %776 = and i64 %773, 1
  %777 = icmp eq i64 %771, 0
  %778 = sub nuw nsw i64 %773, %776
  %779 = icmp eq i64 %776, 0
  %780 = icmp eq i64 %775, %763
  %781 = and i64 %763, 3
  %782 = icmp eq i64 %781, 0
  br label %783

783:                                              ; preds = %889, %767
  %784 = phi i64 [ 0, %767 ], [ %890, %889 ]
  %785 = load i8*, i8** %146, align 8
  %786 = load i64, i64* %145, align 8
  %787 = mul i64 %786, %784
  %788 = getelementptr inbounds i8, i8* %785, i64 %787
  %789 = ptrtoint i8* %788 to i64
  %790 = and i64 %789, 63
  %791 = icmp eq i64 %790, 0
  call void @llvm.assume(i1 %791) #9
  %792 = bitcast i8* %788 to double*
  %793 = load i8*, i8** %129, align 8
  %794 = load i64, i64* %130, align 8
  %795 = mul i64 %794, %784
  %796 = getelementptr inbounds i8, i8* %793, i64 %795
  %797 = ptrtoint i8* %796 to i64
  %798 = and i64 %797, 63
  %799 = icmp eq i64 %798, 0
  call void @llvm.assume(i1 %799) #9
  %800 = bitcast i8* %796 to double*
  br i1 %768, label %889, label %801

801:                                              ; preds = %783
  br i1 %774, label %802, label %820

802:                                              ; preds = %888, %820, %801
  %803 = phi i64 [ 0, %820 ], [ 0, %801 ], [ %775, %888 ]
  %804 = xor i64 %803, -1
  %805 = add nsw i64 %804, %763
  br i1 %782, label %817, label %806

806:                                              ; preds = %802, %806
  %807 = phi i64 [ %814, %806 ], [ %803, %802 ]
  %808 = phi i64 [ %815, %806 ], [ %781, %802 ]
  %809 = getelementptr inbounds double, double* %792, i64 %807
  %810 = load double, double* %809, align 8
  %811 = getelementptr inbounds double, double* %800, i64 %807
  %812 = load double, double* %811, align 8
  %813 = fsub double %812, %810
  store double %813, double* %811, align 8
  %814 = add nuw nsw i64 %807, 1
  %815 = add i64 %808, -1
  %816 = icmp eq i64 %815, 0
  br i1 %816, label %817, label %806, !llvm.loop !172

817:                                              ; preds = %806, %802
  %818 = phi i64 [ %803, %802 ], [ %814, %806 ]
  %819 = icmp ult i64 %805, 3
  br i1 %819, label %889, label %892

820:                                              ; preds = %801
  %821 = getelementptr i8, i8* %793, i64 %769
  %822 = getelementptr i8, i8* %821, i64 %795
  %823 = getelementptr i8, i8* %785, i64 %769
  %824 = mul i64 %786, %784
  %825 = getelementptr i8, i8* %823, i64 %824
  %826 = icmp ult i8* %796, %825
  %827 = icmp ult i8* %788, %822
  %828 = and i1 %826, %827
  br i1 %828, label %802, label %829

829:                                              ; preds = %820
  br i1 %777, label %869, label %830

830:                                              ; preds = %829, %830
  %831 = phi i64 [ %866, %830 ], [ 0, %829 ]
  %832 = phi i64 [ %867, %830 ], [ %778, %829 ]
  %833 = getelementptr inbounds double, double* %792, i64 %831
  %834 = bitcast double* %833 to <2 x double>*
  %835 = load <2 x double>, <2 x double>* %834, align 64, !alias.scope !173
  %836 = getelementptr inbounds double, double* %833, i64 2
  %837 = bitcast double* %836 to <2 x double>*
  %838 = load <2 x double>, <2 x double>* %837, align 16, !alias.scope !173
  %839 = getelementptr inbounds double, double* %800, i64 %831
  %840 = bitcast double* %839 to <2 x double>*
  %841 = load <2 x double>, <2 x double>* %840, align 64, !alias.scope !176, !noalias !173
  %842 = getelementptr inbounds double, double* %839, i64 2
  %843 = bitcast double* %842 to <2 x double>*
  %844 = load <2 x double>, <2 x double>* %843, align 16, !alias.scope !176, !noalias !173
  %845 = fsub <2 x double> %841, %835
  %846 = fsub <2 x double> %844, %838
  %847 = bitcast double* %839 to <2 x double>*
  store <2 x double> %845, <2 x double>* %847, align 64, !alias.scope !176, !noalias !173
  %848 = bitcast double* %842 to <2 x double>*
  store <2 x double> %846, <2 x double>* %848, align 16, !alias.scope !176, !noalias !173
  %849 = or i64 %831, 4
  %850 = getelementptr inbounds double, double* %792, i64 %849
  %851 = bitcast double* %850 to <2 x double>*
  %852 = load <2 x double>, <2 x double>* %851, align 32, !alias.scope !173
  %853 = getelementptr inbounds double, double* %850, i64 2
  %854 = bitcast double* %853 to <2 x double>*
  %855 = load <2 x double>, <2 x double>* %854, align 16, !alias.scope !173
  %856 = getelementptr inbounds double, double* %800, i64 %849
  %857 = bitcast double* %856 to <2 x double>*
  %858 = load <2 x double>, <2 x double>* %857, align 32, !alias.scope !176, !noalias !173
  %859 = getelementptr inbounds double, double* %856, i64 2
  %860 = bitcast double* %859 to <2 x double>*
  %861 = load <2 x double>, <2 x double>* %860, align 16, !alias.scope !176, !noalias !173
  %862 = fsub <2 x double> %858, %852
  %863 = fsub <2 x double> %861, %855
  %864 = bitcast double* %856 to <2 x double>*
  store <2 x double> %862, <2 x double>* %864, align 32, !alias.scope !176, !noalias !173
  %865 = bitcast double* %859 to <2 x double>*
  store <2 x double> %863, <2 x double>* %865, align 16, !alias.scope !176, !noalias !173
  %866 = add i64 %831, 8
  %867 = add i64 %832, -2
  %868 = icmp eq i64 %867, 0
  br i1 %868, label %869, label %830, !llvm.loop !178

869:                                              ; preds = %830, %829
  %870 = phi i64 [ 0, %829 ], [ %866, %830 ]
  br i1 %779, label %888, label %871

871:                                              ; preds = %869
  %872 = getelementptr inbounds double, double* %792, i64 %870
  %873 = bitcast double* %872 to <2 x double>*
  %874 = load <2 x double>, <2 x double>* %873, align 32, !alias.scope !173
  %875 = getelementptr inbounds double, double* %872, i64 2
  %876 = bitcast double* %875 to <2 x double>*
  %877 = load <2 x double>, <2 x double>* %876, align 16, !alias.scope !173
  %878 = getelementptr inbounds double, double* %800, i64 %870
  %879 = bitcast double* %878 to <2 x double>*
  %880 = load <2 x double>, <2 x double>* %879, align 32, !alias.scope !176, !noalias !173
  %881 = getelementptr inbounds double, double* %878, i64 2
  %882 = bitcast double* %881 to <2 x double>*
  %883 = load <2 x double>, <2 x double>* %882, align 16, !alias.scope !176, !noalias !173
  %884 = fsub <2 x double> %880, %874
  %885 = fsub <2 x double> %883, %877
  %886 = bitcast double* %878 to <2 x double>*
  store <2 x double> %884, <2 x double>* %886, align 32, !alias.scope !176, !noalias !173
  %887 = bitcast double* %881 to <2 x double>*
  store <2 x double> %885, <2 x double>* %887, align 16, !alias.scope !176, !noalias !173
  br label %888

888:                                              ; preds = %869, %871
  br i1 %780, label %889, label %802

889:                                              ; preds = %817, %892, %888, %783
  %890 = add nuw nsw i64 %784, 1
  %891 = icmp eq i64 %890, %765
  br i1 %891, label %919, label %783

892:                                              ; preds = %817, %892
  %893 = phi i64 [ %917, %892 ], [ %818, %817 ]
  %894 = getelementptr inbounds double, double* %792, i64 %893
  %895 = load double, double* %894, align 8
  %896 = getelementptr inbounds double, double* %800, i64 %893
  %897 = load double, double* %896, align 8
  %898 = fsub double %897, %895
  store double %898, double* %896, align 8
  %899 = add nuw nsw i64 %893, 1
  %900 = getelementptr inbounds double, double* %792, i64 %899
  %901 = load double, double* %900, align 8
  %902 = getelementptr inbounds double, double* %800, i64 %899
  %903 = load double, double* %902, align 8
  %904 = fsub double %903, %901
  store double %904, double* %902, align 8
  %905 = add nuw nsw i64 %893, 2
  %906 = getelementptr inbounds double, double* %792, i64 %905
  %907 = load double, double* %906, align 8
  %908 = getelementptr inbounds double, double* %800, i64 %905
  %909 = load double, double* %908, align 8
  %910 = fsub double %909, %907
  store double %910, double* %908, align 8
  %911 = add nuw nsw i64 %893, 3
  %912 = getelementptr inbounds double, double* %792, i64 %911
  %913 = load double, double* %912, align 8
  %914 = getelementptr inbounds double, double* %800, i64 %911
  %915 = load double, double* %914, align 8
  %916 = fsub double %915, %913
  store double %916, double* %914, align 8
  %917 = add nuw nsw i64 %893, 4
  %918 = icmp eq i64 %917, %763
  br i1 %918, label %889, label %892, !llvm.loop !179

919:                                              ; preds = %889, %761
  %920 = load i8*, i8** %146, align 8
  store i8* null, i8** %146, align 8
  %921 = icmp eq i8* %920, null
  br i1 %921, label %923, label %922

922:                                              ; preds = %919
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %920) #9
  br label %923

923:                                              ; preds = %919, %922
  %924 = load i8*, i8** %150, align 8
  store i8* null, i8** %150, align 8
  %925 = icmp eq i8* %924, null
  br i1 %925, label %927, label %926

926:                                              ; preds = %923
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %924) #9
  br label %927

927:                                              ; preds = %923, %926
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %144) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %143) #9
  %928 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %125, align 8
  %929 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %126, align 8
  %930 = icmp ult %"class.jxl::Plane"* %928, %929
  br i1 %930, label %931, label %938

931:                                              ; preds = %927
  %932 = bitcast %"class.jxl::Plane"* %928 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %932, i8* nonnull align 8 %131, i64 24, i1 false) #9
  %933 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %928, i64 0, i32 0, i32 5
  %934 = load i64, i64* %156, align 8
  store i8* null, i8** %155, align 8
  %935 = bitcast %"class.std::__1::unique_ptr"* %933 to i64*
  store i64 %934, i64* %935, align 8
  %936 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %928, i64 1
  %937 = ptrtoint %"class.jxl::Plane"* %936 to i64
  store i64 %937, i64* %157, align 8
  br label %939

938:                                              ; preds = %927
  call void @_ZNSt3__16vectorIN3jxl5PlaneIdEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.4"* nonnull %6, %"class.jxl::Plane"* nonnull dereferenceable(32) %7) #9
  br label %939

939:                                              ; preds = %931, %938
  %940 = load i8*, i8** %138, align 8
  store i8* null, i8** %138, align 8
  %941 = icmp eq i8* %940, null
  br i1 %941, label %943, label %942

942:                                              ; preds = %939
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %940) #9
  br label %943

943:                                              ; preds = %939, %942
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %137) #9
  %944 = load i8*, i8** %135, align 8
  store i8* null, i8** %135, align 8
  %945 = icmp eq i8* %944, null
  br i1 %945, label %947, label %946

946:                                              ; preds = %943
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %944) #9
  br label %947

947:                                              ; preds = %943, %946
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %131) #9
  br label %948

948:                                              ; preds = %189, %270, %947
  %949 = add nuw nsw i64 %191, 1
  %950 = add nuw nsw i64 %190, 1
  %951 = icmp eq i64 %950, %158
  br i1 %951, label %164, label %189

952:                                              ; preds = %168, %1237
  %953 = phi %"class.jxl::Plane"* [ %166, %168 ], [ %1238, %1237 ]
  %954 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %953, i64 -1
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %169) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %188, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %171) #9
  %955 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %953, i64 -1, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %171, i8 -86, i64 32, i1 false) #9, !alias.scope !180
  %956 = load i32, i32* %955, align 4, !noalias !180
  %957 = zext i32 %956 to i64
  %958 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %954, i64 0, i32 0, i32 0
  %959 = load i32, i32* %958, align 8, !noalias !180
  %960 = zext i32 %959 to i64
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %174, i64 %957, i64 %960, i64 8) #9
  %961 = load i32, i32* %958, align 8, !noalias !180
  %962 = icmp eq i32 %961, 0
  br i1 %962, label %1007, label %963

963:                                              ; preds = %952
  %964 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %953, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %965 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %953, i64 -1, i32 0, i32 4
  %966 = load i32, i32* %955, align 4, !noalias !180
  br label %967

967:                                              ; preds = %982, %963
  %968 = phi i32 [ %961, %963 ], [ %983, %982 ]
  %969 = phi i32 [ %966, %963 ], [ %984, %982 ]
  %970 = phi i64 [ 0, %963 ], [ %985, %982 ]
  %971 = load i8*, i8** %173, align 8, !alias.scope !180
  %972 = load i64, i64* %172, align 8, !alias.scope !180
  %973 = mul i64 %972, %970
  %974 = getelementptr inbounds i8, i8* %971, i64 %973
  %975 = ptrtoint i8* %974 to i64
  %976 = and i64 %975, 63
  %977 = icmp eq i64 %976, 0
  call void @llvm.assume(i1 %977) #9
  %978 = bitcast i8* %974 to double*
  %979 = icmp eq i32 %969, 0
  br i1 %979, label %982, label %988

980:                                              ; preds = %988
  %981 = load i32, i32* %958, align 8, !noalias !180
  br label %982

982:                                              ; preds = %980, %967
  %983 = phi i32 [ %981, %980 ], [ %968, %967 ]
  %984 = phi i32 [ %1004, %980 ], [ 0, %967 ]
  %985 = add nuw nsw i64 %970, 1
  %986 = zext i32 %983 to i64
  %987 = icmp ult i64 %985, %986
  br i1 %987, label %967, label %1007

988:                                              ; preds = %967, %988
  %989 = phi i64 [ %1003, %988 ], [ 0, %967 ]
  %990 = load i8*, i8** %964, align 8, !noalias !180
  %991 = load i64, i64* %965, align 8, !noalias !180
  %992 = mul i64 %991, %989
  %993 = getelementptr inbounds i8, i8* %990, i64 %992
  %994 = ptrtoint i8* %993 to i64
  %995 = and i64 %994, 63
  %996 = icmp eq i64 %995, 0
  call void @llvm.assume(i1 %996) #9
  %997 = bitcast i8* %993 to double*
  %998 = getelementptr inbounds double, double* %997, i64 %970
  %999 = bitcast double* %998 to i64*
  %1000 = load i64, i64* %999, align 8
  %1001 = getelementptr inbounds double, double* %978, i64 %989
  %1002 = bitcast double* %1001 to i64*
  store i64 %1000, i64* %1002, align 8
  %1003 = add nuw nsw i64 %989, 1
  %1004 = load i32, i32* %955, align 4, !noalias !180
  %1005 = zext i32 %1004 to i64
  %1006 = icmp ult i64 %1003, %1005
  br i1 %1006, label %988, label %980

1007:                                             ; preds = %982, %952
  call void @_ZN3jxl6MatMulIdddEENS_5PlaneIT_EERKNS1_IT0_EERKNS1_IT1_EE(%"class.jxl::Plane"* nonnull sret %12, %"class.jxl::Plane"* nonnull dereferenceable(32) %13, %"class.jxl::Plane"* dereferenceable(32) %1) #9
  %1008 = load i8*, i8** %173, align 8
  store i8* null, i8** %173, align 8
  %1009 = icmp eq i8* %1008, null
  br i1 %1009, label %1011, label %1010

1010:                                             ; preds = %1007
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1008) #9
  br label %1011

1011:                                             ; preds = %1007, %1010
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %171) #9
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %175) #9
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %176) #9
  call void @_ZN3jxl6MatMulIdddEENS_5PlaneIT_EERKNS1_IT0_EERKNS1_IT1_EE(%"class.jxl::Plane"* nonnull sret %15, %"class.jxl::Plane"* dereferenceable(32) %954, %"class.jxl::Plane"* nonnull dereferenceable(32) %12) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %175, i8 -86, i64 32, i1 false) #9, !alias.scope !183
  %1012 = load i32, i32* %179, align 8, !noalias !183
  %1013 = zext i32 %1012 to i64
  %1014 = load i32, i32* %180, align 4, !noalias !183
  %1015 = zext i32 %1014 to i64
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %181, i64 %1013, i64 %1015, i64 8) #9
  %1016 = load i32, i32* %180, align 4, !noalias !183
  %1017 = icmp eq i32 %1016, 0
  br i1 %1017, label %1059, label %1018

1018:                                             ; preds = %1011
  %1019 = load i32, i32* %179, align 8, !noalias !183
  br label %1020

1020:                                             ; preds = %1043, %1018
  %1021 = phi i32 [ %1016, %1018 ], [ %1044, %1043 ]
  %1022 = phi i32 [ %1019, %1018 ], [ %1045, %1043 ]
  %1023 = phi i64 [ 0, %1018 ], [ %1046, %1043 ]
  %1024 = load i8*, i8** %182, align 8, !noalias !183
  %1025 = load i64, i64* %183, align 8, !noalias !183
  %1026 = mul i64 %1025, %1023
  %1027 = getelementptr inbounds i8, i8* %1024, i64 %1026
  %1028 = ptrtoint i8* %1027 to i64
  %1029 = and i64 %1028, 63
  %1030 = icmp eq i64 %1029, 0
  call void @llvm.assume(i1 %1030) #9
  %1031 = bitcast i8* %1027 to double*
  %1032 = load i8*, i8** %178, align 8, !alias.scope !183
  %1033 = load i64, i64* %177, align 8, !alias.scope !183
  %1034 = mul i64 %1033, %1023
  %1035 = getelementptr inbounds i8, i8* %1032, i64 %1034
  %1036 = ptrtoint i8* %1035 to i64
  %1037 = and i64 %1036, 63
  %1038 = icmp eq i64 %1037, 0
  call void @llvm.assume(i1 %1038) #9
  %1039 = bitcast i8* %1035 to double*
  %1040 = icmp eq i32 %1022, 0
  br i1 %1040, label %1043, label %1049

1041:                                             ; preds = %1049
  %1042 = load i32, i32* %180, align 4, !noalias !183
  br label %1043

1043:                                             ; preds = %1041, %1020
  %1044 = phi i32 [ %1042, %1041 ], [ %1021, %1020 ]
  %1045 = phi i32 [ %1056, %1041 ], [ 0, %1020 ]
  %1046 = add nuw nsw i64 %1023, 1
  %1047 = zext i32 %1044 to i64
  %1048 = icmp ult i64 %1046, %1047
  br i1 %1048, label %1020, label %1059

1049:                                             ; preds = %1020, %1049
  %1050 = phi i64 [ %1055, %1049 ], [ 0, %1020 ]
  %1051 = getelementptr inbounds double, double* %1031, i64 %1050
  %1052 = load double, double* %1051, align 8
  %1053 = fmul double %1052, 2.000000e+00
  %1054 = getelementptr inbounds double, double* %1039, i64 %1050
  store double %1053, double* %1054, align 8
  %1055 = add nuw nsw i64 %1050, 1
  %1056 = load i32, i32* %179, align 8, !noalias !183
  %1057 = zext i32 %1056 to i64
  %1058 = icmp ult i64 %1055, %1057
  br i1 %1058, label %1049, label %1041

1059:                                             ; preds = %1043, %1011
  %1060 = load i32, i32* %184, align 8
  %1061 = zext i32 %1060 to i64
  %1062 = load i32, i32* %185, align 4
  %1063 = zext i32 %1062 to i64
  %1064 = icmp eq i32 %1062, 0
  br i1 %1064, label %1217, label %1065

1065:                                             ; preds = %1059
  %1066 = icmp eq i32 %1060, 0
  %1067 = shl nuw nsw i64 %1061, 3
  %1068 = and i64 %1061, 4294967292
  %1069 = add nsw i64 %1068, -4
  %1070 = lshr exact i64 %1069, 2
  %1071 = add nuw nsw i64 %1070, 1
  %1072 = icmp ult i32 %1060, 4
  %1073 = and i64 %1061, 4294967292
  %1074 = and i64 %1071, 1
  %1075 = icmp eq i64 %1069, 0
  %1076 = sub nuw nsw i64 %1071, %1074
  %1077 = icmp eq i64 %1074, 0
  %1078 = icmp eq i64 %1073, %1061
  %1079 = and i64 %1061, 3
  %1080 = icmp eq i64 %1079, 0
  br label %1081

1081:                                             ; preds = %1187, %1065
  %1082 = phi i64 [ 0, %1065 ], [ %1188, %1187 ]
  %1083 = load i8*, i8** %178, align 8
  %1084 = load i64, i64* %177, align 8
  %1085 = mul i64 %1084, %1082
  %1086 = getelementptr inbounds i8, i8* %1083, i64 %1085
  %1087 = ptrtoint i8* %1086 to i64
  %1088 = and i64 %1087, 63
  %1089 = icmp eq i64 %1088, 0
  call void @llvm.assume(i1 %1089) #9
  %1090 = bitcast i8* %1086 to double*
  %1091 = load i8*, i8** %186, align 8
  %1092 = load i64, i64* %187, align 8
  %1093 = mul i64 %1092, %1082
  %1094 = getelementptr inbounds i8, i8* %1091, i64 %1093
  %1095 = ptrtoint i8* %1094 to i64
  %1096 = and i64 %1095, 63
  %1097 = icmp eq i64 %1096, 0
  call void @llvm.assume(i1 %1097) #9
  %1098 = bitcast i8* %1094 to double*
  br i1 %1066, label %1187, label %1099

1099:                                             ; preds = %1081
  br i1 %1072, label %1100, label %1118

1100:                                             ; preds = %1186, %1118, %1099
  %1101 = phi i64 [ 0, %1118 ], [ 0, %1099 ], [ %1073, %1186 ]
  %1102 = xor i64 %1101, -1
  %1103 = add nsw i64 %1102, %1061
  br i1 %1080, label %1115, label %1104

1104:                                             ; preds = %1100, %1104
  %1105 = phi i64 [ %1112, %1104 ], [ %1101, %1100 ]
  %1106 = phi i64 [ %1113, %1104 ], [ %1079, %1100 ]
  %1107 = getelementptr inbounds double, double* %1090, i64 %1105
  %1108 = load double, double* %1107, align 8
  %1109 = getelementptr inbounds double, double* %1098, i64 %1105
  %1110 = load double, double* %1109, align 8
  %1111 = fsub double %1110, %1108
  store double %1111, double* %1109, align 8
  %1112 = add nuw nsw i64 %1105, 1
  %1113 = add i64 %1106, -1
  %1114 = icmp eq i64 %1113, 0
  br i1 %1114, label %1115, label %1104, !llvm.loop !186

1115:                                             ; preds = %1104, %1100
  %1116 = phi i64 [ %1101, %1100 ], [ %1112, %1104 ]
  %1117 = icmp ult i64 %1103, 3
  br i1 %1117, label %1187, label %1190

1118:                                             ; preds = %1099
  %1119 = getelementptr i8, i8* %1091, i64 %1067
  %1120 = getelementptr i8, i8* %1119, i64 %1093
  %1121 = getelementptr i8, i8* %1083, i64 %1067
  %1122 = mul i64 %1084, %1082
  %1123 = getelementptr i8, i8* %1121, i64 %1122
  %1124 = icmp ult i8* %1094, %1123
  %1125 = icmp ult i8* %1086, %1120
  %1126 = and i1 %1124, %1125
  br i1 %1126, label %1100, label %1127

1127:                                             ; preds = %1118
  br i1 %1075, label %1167, label %1128

1128:                                             ; preds = %1127, %1128
  %1129 = phi i64 [ %1164, %1128 ], [ 0, %1127 ]
  %1130 = phi i64 [ %1165, %1128 ], [ %1076, %1127 ]
  %1131 = getelementptr inbounds double, double* %1090, i64 %1129
  %1132 = bitcast double* %1131 to <2 x double>*
  %1133 = load <2 x double>, <2 x double>* %1132, align 64, !alias.scope !187
  %1134 = getelementptr inbounds double, double* %1131, i64 2
  %1135 = bitcast double* %1134 to <2 x double>*
  %1136 = load <2 x double>, <2 x double>* %1135, align 16, !alias.scope !187
  %1137 = getelementptr inbounds double, double* %1098, i64 %1129
  %1138 = bitcast double* %1137 to <2 x double>*
  %1139 = load <2 x double>, <2 x double>* %1138, align 64, !alias.scope !190, !noalias !187
  %1140 = getelementptr inbounds double, double* %1137, i64 2
  %1141 = bitcast double* %1140 to <2 x double>*
  %1142 = load <2 x double>, <2 x double>* %1141, align 16, !alias.scope !190, !noalias !187
  %1143 = fsub <2 x double> %1139, %1133
  %1144 = fsub <2 x double> %1142, %1136
  %1145 = bitcast double* %1137 to <2 x double>*
  store <2 x double> %1143, <2 x double>* %1145, align 64, !alias.scope !190, !noalias !187
  %1146 = bitcast double* %1140 to <2 x double>*
  store <2 x double> %1144, <2 x double>* %1146, align 16, !alias.scope !190, !noalias !187
  %1147 = or i64 %1129, 4
  %1148 = getelementptr inbounds double, double* %1090, i64 %1147
  %1149 = bitcast double* %1148 to <2 x double>*
  %1150 = load <2 x double>, <2 x double>* %1149, align 32, !alias.scope !187
  %1151 = getelementptr inbounds double, double* %1148, i64 2
  %1152 = bitcast double* %1151 to <2 x double>*
  %1153 = load <2 x double>, <2 x double>* %1152, align 16, !alias.scope !187
  %1154 = getelementptr inbounds double, double* %1098, i64 %1147
  %1155 = bitcast double* %1154 to <2 x double>*
  %1156 = load <2 x double>, <2 x double>* %1155, align 32, !alias.scope !190, !noalias !187
  %1157 = getelementptr inbounds double, double* %1154, i64 2
  %1158 = bitcast double* %1157 to <2 x double>*
  %1159 = load <2 x double>, <2 x double>* %1158, align 16, !alias.scope !190, !noalias !187
  %1160 = fsub <2 x double> %1156, %1150
  %1161 = fsub <2 x double> %1159, %1153
  %1162 = bitcast double* %1154 to <2 x double>*
  store <2 x double> %1160, <2 x double>* %1162, align 32, !alias.scope !190, !noalias !187
  %1163 = bitcast double* %1157 to <2 x double>*
  store <2 x double> %1161, <2 x double>* %1163, align 16, !alias.scope !190, !noalias !187
  %1164 = add i64 %1129, 8
  %1165 = add i64 %1130, -2
  %1166 = icmp eq i64 %1165, 0
  br i1 %1166, label %1167, label %1128, !llvm.loop !192

1167:                                             ; preds = %1128, %1127
  %1168 = phi i64 [ 0, %1127 ], [ %1164, %1128 ]
  br i1 %1077, label %1186, label %1169

1169:                                             ; preds = %1167
  %1170 = getelementptr inbounds double, double* %1090, i64 %1168
  %1171 = bitcast double* %1170 to <2 x double>*
  %1172 = load <2 x double>, <2 x double>* %1171, align 32, !alias.scope !187
  %1173 = getelementptr inbounds double, double* %1170, i64 2
  %1174 = bitcast double* %1173 to <2 x double>*
  %1175 = load <2 x double>, <2 x double>* %1174, align 16, !alias.scope !187
  %1176 = getelementptr inbounds double, double* %1098, i64 %1168
  %1177 = bitcast double* %1176 to <2 x double>*
  %1178 = load <2 x double>, <2 x double>* %1177, align 32, !alias.scope !190, !noalias !187
  %1179 = getelementptr inbounds double, double* %1176, i64 2
  %1180 = bitcast double* %1179 to <2 x double>*
  %1181 = load <2 x double>, <2 x double>* %1180, align 16, !alias.scope !190, !noalias !187
  %1182 = fsub <2 x double> %1178, %1172
  %1183 = fsub <2 x double> %1181, %1175
  %1184 = bitcast double* %1176 to <2 x double>*
  store <2 x double> %1182, <2 x double>* %1184, align 32, !alias.scope !190, !noalias !187
  %1185 = bitcast double* %1179 to <2 x double>*
  store <2 x double> %1183, <2 x double>* %1185, align 16, !alias.scope !190, !noalias !187
  br label %1186

1186:                                             ; preds = %1167, %1169
  br i1 %1078, label %1187, label %1100

1187:                                             ; preds = %1115, %1190, %1186, %1081
  %1188 = add nuw nsw i64 %1082, 1
  %1189 = icmp eq i64 %1188, %1063
  br i1 %1189, label %1217, label %1081

1190:                                             ; preds = %1115, %1190
  %1191 = phi i64 [ %1215, %1190 ], [ %1116, %1115 ]
  %1192 = getelementptr inbounds double, double* %1090, i64 %1191
  %1193 = load double, double* %1192, align 8
  %1194 = getelementptr inbounds double, double* %1098, i64 %1191
  %1195 = load double, double* %1194, align 8
  %1196 = fsub double %1195, %1193
  store double %1196, double* %1194, align 8
  %1197 = add nuw nsw i64 %1191, 1
  %1198 = getelementptr inbounds double, double* %1090, i64 %1197
  %1199 = load double, double* %1198, align 8
  %1200 = getelementptr inbounds double, double* %1098, i64 %1197
  %1201 = load double, double* %1200, align 8
  %1202 = fsub double %1201, %1199
  store double %1202, double* %1200, align 8
  %1203 = add nuw nsw i64 %1191, 2
  %1204 = getelementptr inbounds double, double* %1090, i64 %1203
  %1205 = load double, double* %1204, align 8
  %1206 = getelementptr inbounds double, double* %1098, i64 %1203
  %1207 = load double, double* %1206, align 8
  %1208 = fsub double %1207, %1205
  store double %1208, double* %1206, align 8
  %1209 = add nuw nsw i64 %1191, 3
  %1210 = getelementptr inbounds double, double* %1090, i64 %1209
  %1211 = load double, double* %1210, align 8
  %1212 = getelementptr inbounds double, double* %1098, i64 %1209
  %1213 = load double, double* %1212, align 8
  %1214 = fsub double %1213, %1211
  store double %1214, double* %1212, align 8
  %1215 = add nuw nsw i64 %1191, 4
  %1216 = icmp eq i64 %1215, %1061
  br i1 %1216, label %1187, label %1190, !llvm.loop !193

1217:                                             ; preds = %1187, %1059
  %1218 = load i8*, i8** %178, align 8
  store i8* null, i8** %178, align 8
  %1219 = icmp eq i8* %1218, null
  br i1 %1219, label %1221, label %1220

1220:                                             ; preds = %1217
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1218) #9
  br label %1221

1221:                                             ; preds = %1217, %1220
  %1222 = load i8*, i8** %182, align 8
  store i8* null, i8** %182, align 8
  %1223 = icmp eq i8* %1222, null
  br i1 %1223, label %1225, label %1224

1224:                                             ; preds = %1221
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1222) #9
  br label %1225

1225:                                             ; preds = %1221, %1224
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %176) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %175) #9
  %1226 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %125, align 8
  %1227 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1226, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1228 = load i8*, i8** %1227, align 8
  store i8* null, i8** %1227, align 8
  %1229 = icmp eq i8* %1228, null
  br i1 %1229, label %1231, label %1230

1230:                                             ; preds = %1225
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1228) #9
  br label %1231

1231:                                             ; preds = %1225, %1230
  %1232 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1226, i64 -1
  store %"class.jxl::Plane"* %1232, %"class.jxl::Plane"** %125, align 8
  %1233 = load i8*, i8** %170, align 8
  store i8* null, i8** %170, align 8
  %1234 = icmp eq i8* %1233, null
  br i1 %1234, label %1237, label %1235

1235:                                             ; preds = %1231
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1233) #9
  %1236 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %125, align 8
  br label %1237

1237:                                             ; preds = %1231, %1235
  %1238 = phi %"class.jxl::Plane"* [ %1232, %1231 ], [ %1236, %1235 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %169) #9
  %1239 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %124, align 8
  %1240 = icmp eq %"class.jxl::Plane"* %1239, %1238
  br i1 %1240, label %1241, label %952

1241:                                             ; preds = %1237, %164
  %1242 = phi %"class.jxl::Plane"* [ %166, %164 ], [ %1238, %1237 ]
  %1243 = icmp eq %"class.jxl::Plane"* %1242, null
  br i1 %1243, label %1246, label %1244

1244:                                             ; preds = %1241
  %1245 = bitcast %"class.jxl::Plane"* %1242 to i8*
  store %"class.jxl::Plane"* %1242, %"class.jxl::Plane"** %125, align 8
  call void @_ZdlPv(i8* %1245) #14
  br label %1246

1246:                                             ; preds = %122, %1241, %1244
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %123) #9
  ret void

1247:                                             ; preds = %52
  call void @llvm.memset.p0i8.i64(i8* align 64 %58, i8 0, i64 %65, i1 false) #9
  br label %1248

1248:                                             ; preds = %1247, %52
  %1249 = getelementptr inbounds double, double* %62, i64 %54
  store double 1.000000e+00, double* %1249, align 8
  %1250 = add nuw nsw i64 %37, 2
  %1251 = add i64 %38, -2
  %1252 = icmp eq i64 %1251, 0
  br i1 %1252, label %67, label %36
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind
declare void @llvm.assume(i1) #9

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6MatMulIdddEENS_5PlaneIT_EERKNS1_IT0_EERKNS1_IT1_EE(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #0 comdat {
  %4 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %5, %7
  br i1 %8, label %12, label %9

9:                                                ; preds = %3
  %10 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.6, i64 0, i64 0), i32 81, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i64 0, i64 0)) #9
  %11 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %14 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %16 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 -86, i64 32, i1 false)
  %17 = load i32, i32* %15, align 8
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %22, i64 %18, i64 %21, i64 8) #9
  %23 = load i32, i32* %19, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %91, label %25

25:                                               ; preds = %12
  %26 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 4
  %28 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 4
  %30 = load i32, i32* %15, align 8
  br label %31

31:                                               ; preds = %25, %54
  %32 = phi i32 [ %23, %25 ], [ %55, %54 ]
  %33 = phi i32 [ %30, %25 ], [ %56, %54 ]
  %34 = phi i64 [ 0, %25 ], [ %57, %54 ]
  %35 = load i8*, i8** %26, align 8
  %36 = load i64, i64* %27, align 8
  %37 = mul i64 %36, %34
  %38 = getelementptr inbounds i8, i8* %35, i64 %37
  %39 = ptrtoint i8* %38 to i64
  %40 = and i64 %39, 63
  %41 = icmp eq i64 %40, 0
  tail call void @llvm.assume(i1 %41) #9
  %42 = bitcast i8* %38 to double*
  %43 = load i8*, i8** %14, align 8
  %44 = load i64, i64* %13, align 8
  %45 = mul i64 %44, %34
  %46 = getelementptr inbounds i8, i8* %43, i64 %45
  %47 = ptrtoint i8* %46 to i64
  %48 = and i64 %47, 63
  %49 = icmp eq i64 %48, 0
  tail call void @llvm.assume(i1 %49) #9
  %50 = bitcast i8* %46 to double*
  %51 = icmp eq i32 %33, 0
  br i1 %51, label %54, label %60

52:                                               ; preds = %65
  %53 = load i32, i32* %19, align 4
  br label %54

54:                                               ; preds = %52, %31
  %55 = phi i32 [ %53, %52 ], [ %32, %31 ]
  %56 = phi i32 [ %67, %52 ], [ 0, %31 ]
  %57 = add nuw nsw i64 %34, 1
  %58 = zext i32 %55 to i64
  %59 = icmp ult i64 %57, %58
  br i1 %59, label %31, label %91

60:                                               ; preds = %31, %65
  %61 = phi i64 [ %66, %65 ], [ 0, %31 ]
  %62 = getelementptr inbounds double, double* %50, i64 %61
  store double 0.000000e+00, double* %62, align 8
  %63 = load i32, i32* %6, align 8
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %70

65:                                               ; preds = %70, %60
  %66 = add nuw nsw i64 %61, 1
  %67 = load i32, i32* %15, align 8
  %68 = zext i32 %67 to i64
  %69 = icmp ult i64 %66, %68
  br i1 %69, label %60, label %52

70:                                               ; preds = %60, %70
  %71 = phi double [ %86, %70 ], [ 0.000000e+00, %60 ]
  %72 = phi i64 [ %87, %70 ], [ 0, %60 ]
  %73 = load i8*, i8** %28, align 8
  %74 = load i64, i64* %29, align 8
  %75 = mul i64 %74, %72
  %76 = getelementptr inbounds i8, i8* %73, i64 %75
  %77 = ptrtoint i8* %76 to i64
  %78 = and i64 %77, 63
  %79 = icmp eq i64 %78, 0
  tail call void @llvm.assume(i1 %79) #9
  %80 = bitcast i8* %76 to double*
  %81 = getelementptr inbounds double, double* %80, i64 %61
  %82 = load double, double* %81, align 8
  %83 = getelementptr inbounds double, double* %42, i64 %72
  %84 = load double, double* %83, align 8
  %85 = fmul double %82, %84
  %86 = fadd double %71, %85
  store double %86, double* %62, align 8
  %87 = add nuw nsw i64 %72, 1
  %88 = load i32, i32* %6, align 8
  %89 = zext i32 %88 to i64
  %90 = icmp ult i64 %87, %89
  br i1 %90, label %70, label %65

91:                                               ; preds = %54, %12
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIdEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.4"*, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #12 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::Plane"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.4"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.4"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::Plane"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #13
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #14
  %33 = bitcast i8* %32 to %"class.jxl::Plane"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.jxl::Plane"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %9
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %35
  %39 = ptrtoint %"class.jxl::Plane"* %38 to i64
  %40 = bitcast %"class.jxl::Plane"* %37 to i8*
  %41 = bitcast %"class.jxl::Plane"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #9
  %42 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %9, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 1
  %49 = ptrtoint %"class.jxl::Plane"* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %51 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %50, align 8
  %52 = ptrtoint %"class.jxl::Plane"* %51 to i64
  %53 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %54 = icmp eq %"class.jxl::Plane"* %53, %51
  br i1 %54, label %105, label %55

55:                                               ; preds = %34
  %56 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1, i32 0, i32 0
  %57 = ptrtoint i32* %56 to i64
  %58 = sub i64 %57, %52
  %59 = and i64 %58, 32
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %72

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 -1
  %63 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1
  %64 = bitcast %"class.jxl::Plane"* %62 to i8*
  %65 = bitcast %"class.jxl::Plane"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 24, i1 false) #9
  %66 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 -1, i32 0, i32 5
  %67 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1, i32 0, i32 5
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = bitcast %"class.std::__1::unique_ptr"* %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i8* null, i8** %68, align 8
  %71 = bitcast %"class.std::__1::unique_ptr"* %66 to i64*
  store i64 %70, i64* %71, align 8
  br label %72

72:                                               ; preds = %61, %55
  %73 = phi %"class.jxl::Plane"* [ undef, %55 ], [ %62, %61 ]
  %74 = phi %"class.jxl::Plane"* [ %37, %55 ], [ %62, %61 ]
  %75 = phi %"class.jxl::Plane"* [ %53, %55 ], [ %63, %61 ]
  %76 = icmp ult i64 %58, 32
  br i1 %76, label %101, label %77

77:                                               ; preds = %72, %77
  %78 = phi %"class.jxl::Plane"* [ %90, %77 ], [ %74, %72 ]
  %79 = phi %"class.jxl::Plane"* [ %91, %77 ], [ %75, %72 ]
  %80 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -1
  %81 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -1
  %82 = bitcast %"class.jxl::Plane"* %80 to i8*
  %83 = bitcast %"class.jxl::Plane"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 24, i1 false) #9
  %84 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -1, i32 0, i32 5
  %85 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -1, i32 0, i32 5
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %85, i64 0, i32 0, i32 0, i32 0
  %87 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i8* null, i8** %86, align 8
  %89 = bitcast %"class.std::__1::unique_ptr"* %84 to i64*
  store i64 %88, i64* %89, align 8
  %90 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -2
  %91 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -2
  %92 = bitcast %"class.jxl::Plane"* %90 to i8*
  %93 = bitcast %"class.jxl::Plane"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 24, i1 false) #9
  %94 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -2, i32 0, i32 5
  %95 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -2, i32 0, i32 5
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %95, i64 0, i32 0, i32 0, i32 0
  %97 = bitcast %"class.std::__1::unique_ptr"* %95 to i64*
  %98 = load i64, i64* %97, align 8
  store i8* null, i8** %96, align 8
  %99 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  store i64 %98, i64* %99, align 8
  %100 = icmp eq %"class.jxl::Plane"* %91, %51
  br i1 %100, label %101, label %77

101:                                              ; preds = %77, %72
  %102 = phi %"class.jxl::Plane"* [ %73, %72 ], [ %90, %77 ]
  %103 = load i64, i64* %6, align 8
  %104 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  br label %105

105:                                              ; preds = %34, %101
  %106 = phi %"class.jxl::Plane"* [ %104, %101 ], [ %51, %34 ]
  %107 = phi %"class.jxl::Plane"* [ %102, %101 ], [ %37, %34 ]
  %108 = phi i64 [ %103, %101 ], [ %52, %34 ]
  %109 = ptrtoint %"class.jxl::Plane"* %107 to i64
  store i64 %109, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %110 = inttoptr i64 %108 to %"class.jxl::Plane"*
  %111 = icmp eq %"class.jxl::Plane"* %106, %110
  br i1 %111, label %121, label %112

112:                                              ; preds = %105, %119
  %113 = phi %"class.jxl::Plane"* [ %114, %119 ], [ %106, %105 ]
  %114 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %113, i64 -1
  %115 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %113, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  store i8* null, i8** %115, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %119, label %118

118:                                              ; preds = %112
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %116) #9
  br label %119

119:                                              ; preds = %118, %112
  %120 = icmp eq %"class.jxl::Plane"* %114, %110
  br i1 %120, label %121, label %112

121:                                              ; preds = %119, %105
  %122 = icmp eq i64 %108, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %121
  %124 = inttoptr i64 %108 to i8*
  tail call void @_ZdlPv(i8* %124) #14
  br label %125

125:                                              ; preds = %121, %123
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeINS_4pairIiiEENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"struct.std::__1::pair"*, align 8
  %3 = alloca %"struct.std::__1::pair"*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.28", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 511
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -512
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %10, align 8
  %12 = bitcast %"struct.std::__1::pair"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %11, i64 1
  store %"struct.std::__1::pair"** %14, %"struct.std::__1::pair"*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %17, align 8
  %19 = icmp eq %"struct.std::__1::pair"** %16, %18
  %20 = ptrtoint %"struct.std::__1::pair"** %18 to i64
  %21 = bitcast %"struct.std::__1::pair"** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %23, align 8
  %25 = icmp ugt %"struct.std::__1::pair"** %14, %24
  %26 = ptrtoint %"struct.std::__1::pair"** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint %"struct.std::__1::pair"** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %14, i64 %32
  %34 = ptrtoint %"struct.std::__1::pair"** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast %"struct.std::__1::pair"** %33 to i8*
  %40 = bitcast %"struct.std::__1::pair"** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #9
  %41 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi %"struct.std::__1::pair"** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %33, i64 %36
  store %"struct.std::__1::pair"** %44, %"struct.std::__1::pair"*** %15, align 8
  %45 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %43, i64 %32
  store %"struct.std::__1::pair"** %45, %"struct.std::__1::pair"*** %10, align 8
  %46 = bitcast %"struct.std::__1::pair"** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast %"struct.std::__1::pair"*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #13
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #14
  %60 = bitcast i8* %59 to %"struct.std::__1::pair"**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %60, i64 %57
  %63 = ptrtoint %"struct.std::__1::pair"** %62 to i64
  %64 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %60, i64 %53
  %65 = ptrtoint %"struct.std::__1::pair"** %64 to i64
  %66 = ptrtoint %"struct.std::__1::pair"** %14 to i64
  %67 = ptrtoint %"struct.std::__1::pair"** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi %"struct.std::__1::pair"** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi %"struct.std::__1::pair"** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast %"struct.std::__1::pair"** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %79, i64 1
  %87 = ptrtoint %"struct.std::__1::pair"** %86 to i64
  %88 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !194

91:                                               ; preds = %78
  %92 = ptrtoint %"struct.std::__1::pair"** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi %"struct.std::__1::pair"** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi %"struct.std::__1::pair"** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi %"struct.std::__1::pair"** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi %"struct.std::__1::pair"** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast %"struct.std::__1::pair"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %99, i64 1
  %106 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %101, i64 1
  %107 = bitcast %"struct.std::__1::pair"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"struct.std::__1::pair"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %99, i64 2
  %111 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %101, i64 2
  %112 = bitcast %"struct.std::__1::pair"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"struct.std::__1::pair"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %99, i64 3
  %116 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %101, i64 3
  %117 = bitcast %"struct.std::__1::pair"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"struct.std::__1::pair"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %99, i64 4
  %121 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %101, i64 4
  %122 = bitcast %"struct.std::__1::pair"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"struct.std::__1::pair"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %99, i64 5
  %126 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %101, i64 5
  %127 = bitcast %"struct.std::__1::pair"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"struct.std::__1::pair"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %99, i64 6
  %131 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %101, i64 6
  %132 = bitcast %"struct.std::__1::pair"** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast %"struct.std::__1::pair"** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %99, i64 7
  %136 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %101, i64 7
  %137 = bitcast %"struct.std::__1::pair"** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %"struct.std::__1::pair"** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %99, i64 8
  %141 = ptrtoint %"struct.std::__1::pair"** %140 to i64
  %142 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %101, i64 8
  %143 = icmp eq %"struct.std::__1::pair"** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint %"struct.std::__1::pair"** %70 to i64
  %146 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi %"struct.std::__1::pair"** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast %"struct.std::__1::pair"*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast %"struct.std::__1::pair"*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq %"struct.std::__1::pair"** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast %"struct.std::__1::pair"** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #14
  %156 = bitcast %"struct.std::__1::pair"*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %15, align 8
  %161 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %160, i64 1
  store %"struct.std::__1::pair"** %161, %"struct.std::__1::pair"*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast %"struct.std::__1::pair"*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast %"struct.std::__1::pair"*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast %"struct.std::__1::pair"*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to %"struct.std::__1::pair"**
  %181 = inttoptr i64 %169 to %"struct.std::__1::pair"**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast %"struct.std::__1::pair"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #9
  %186 = tail call i8* @_Znwm(i64 4096) #14
  %187 = bitcast %"struct.std::__1::pair"** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIPNS_4pairIiiEENS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"* %163, %"struct.std::__1::pair"** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #9
  br label %460

188:                                              ; preds = %182
  %189 = bitcast %"struct.std::__1::pair"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #9
  %190 = tail call i8* @_Znwm(i64 4096) #14
  %191 = bitcast %"struct.std::__1::pair"** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIPNS_4pairIiiEENS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer"* %163, %"struct.std::__1::pair"** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #9
  %192 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %167, align 8
  %193 = bitcast %"struct.std::__1::pair"** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %192, i64 1
  store %"struct.std::__1::pair"** %195, %"struct.std::__1::pair"*** %167, align 8
  %196 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %164, align 8
  %197 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %172, align 8
  %198 = icmp eq %"struct.std::__1::pair"** %196, %197
  %199 = ptrtoint %"struct.std::__1::pair"** %197 to i64
  %200 = bitcast %"struct.std::__1::pair"** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %202, align 8
  %204 = icmp ugt %"struct.std::__1::pair"** %195, %203
  %205 = ptrtoint %"struct.std::__1::pair"** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint %"struct.std::__1::pair"** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %195, i64 %211
  %213 = ptrtoint %"struct.std::__1::pair"** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast %"struct.std::__1::pair"** %212 to i8*
  %219 = bitcast %"struct.std::__1::pair"** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #9
  %220 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi %"struct.std::__1::pair"** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %212, i64 %215
  store %"struct.std::__1::pair"** %223, %"struct.std::__1::pair"*** %164, align 8
  %224 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %222, i64 %211
  store %"struct.std::__1::pair"** %224, %"struct.std::__1::pair"*** %167, align 8
  %225 = bitcast %"struct.std::__1::pair"** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #13
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #14
  %237 = bitcast i8* %236 to %"struct.std::__1::pair"**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %237, i64 %234
  %240 = ptrtoint %"struct.std::__1::pair"** %239 to i64
  %241 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %237, i64 %230
  %242 = ptrtoint %"struct.std::__1::pair"** %241 to i64
  %243 = ptrtoint %"struct.std::__1::pair"** %195 to i64
  %244 = ptrtoint %"struct.std::__1::pair"** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi %"struct.std::__1::pair"** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi %"struct.std::__1::pair"** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast %"struct.std::__1::pair"** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %256, i64 1
  %264 = ptrtoint %"struct.std::__1::pair"** %263 to i64
  %265 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !195

268:                                              ; preds = %255
  %269 = ptrtoint %"struct.std::__1::pair"** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi %"struct.std::__1::pair"** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi %"struct.std::__1::pair"** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi %"struct.std::__1::pair"** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi %"struct.std::__1::pair"** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast %"struct.std::__1::pair"** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %276, i64 1
  %283 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %278, i64 1
  %284 = bitcast %"struct.std::__1::pair"** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %"struct.std::__1::pair"** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %276, i64 2
  %288 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %278, i64 2
  %289 = bitcast %"struct.std::__1::pair"** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %"struct.std::__1::pair"** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %276, i64 3
  %293 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %278, i64 3
  %294 = bitcast %"struct.std::__1::pair"** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast %"struct.std::__1::pair"** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %276, i64 4
  %298 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %278, i64 4
  %299 = bitcast %"struct.std::__1::pair"** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast %"struct.std::__1::pair"** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %276, i64 5
  %303 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %278, i64 5
  %304 = bitcast %"struct.std::__1::pair"** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast %"struct.std::__1::pair"** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %276, i64 6
  %308 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %278, i64 6
  %309 = bitcast %"struct.std::__1::pair"** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast %"struct.std::__1::pair"** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %276, i64 7
  %313 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %278, i64 7
  %314 = bitcast %"struct.std::__1::pair"** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast %"struct.std::__1::pair"** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %276, i64 8
  %318 = ptrtoint %"struct.std::__1::pair"** %317 to i64
  %319 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %278, i64 8
  %320 = icmp eq %"struct.std::__1::pair"** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint %"struct.std::__1::pair"** %247 to i64
  %323 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi %"struct.std::__1::pair"** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq %"struct.std::__1::pair"** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast %"struct.std::__1::pair"** %325 to i8*
  call void @_ZdlPv(i8* %330) #14
  %331 = bitcast %"struct.std::__1::pair"*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %164, align 8
  %336 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %335, i64 1
  store %"struct.std::__1::pair"** %336, %"struct.std::__1::pair"*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.28"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #9
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.28", %"struct.std::__1::__split_buffer.28"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.28", %"struct.std::__1::__split_buffer.28"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.28", %"struct.std::__1::__split_buffer.28"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.28", %"struct.std::__1::__split_buffer.28"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.28"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store %"struct.std::__1::pair"** null, %"struct.std::__1::pair"*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator.14"** %342 to %"class.std::__1::__compressed_pair.11"**
  store %"class.std::__1::__compressed_pair.11"* %346, %"class.std::__1::__compressed_pair.11"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #13
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #14
  %354 = bitcast i8* %353 to %"struct.std::__1::pair"**
  %355 = bitcast %"struct.std::__1::__split_buffer.28"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %354, i64 %171
  store %"struct.std::__1::pair"** %356, %"struct.std::__1::pair"*** %340, align 8
  store %"struct.std::__1::pair"** %356, %"struct.std::__1::pair"*** %339, align 8
  %357 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %354, i64 %345
  store %"struct.std::__1::pair"** %357, %"struct.std::__1::pair"*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4096) #14
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint %"struct.std::__1::pair"** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint %"struct.std::__1::pair"** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt %"struct.std::__1::pair"** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %356, i64 %370
  store %"struct.std::__1::pair"** %371, %"struct.std::__1::pair"*** %340, align 8
  store %"struct.std::__1::pair"** %371, %"struct.std::__1::pair"*** %339, align 8
  %372 = ptrtoint %"struct.std::__1::pair"** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #13
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.28"* %4 to i64*
  %382 = bitcast %"struct.std::__1::pair"*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #14
  %386 = bitcast i8* %385 to %"struct.std::__1::pair"**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %386, i64 %383
  %389 = ptrtoint %"struct.std::__1::pair"** %388 to i64
  %390 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %386, i64 %377
  %391 = ptrtoint %"struct.std::__1::pair"** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast %"struct.std::__1::pair"*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast %"struct.std::__1::pair"*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #14
  %394 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %164, align 8
  %395 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %167, align 8
  %396 = ptrtoint %"struct.std::__1::pair"** %395 to i64
  %397 = ptrtoint %"struct.std::__1::pair"** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi %"struct.std::__1::pair"** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi %"struct.std::__1::pair"** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi %"struct.std::__1::pair"** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast %"struct.std::__1::pair"** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %406, i64 1
  store %"struct.std::__1::pair"** %408, %"struct.std::__1::pair"*** %340, align 8
  %409 = icmp eq %"struct.std::__1::pair"** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint %"struct.std::__1::pair"** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.28"* %4 to i64*
  %413 = bitcast %"struct.std::__1::pair"*** %339 to i64*
  %414 = bitcast %"struct.std::__1::pair"*** %340 to i64*
  %415 = bitcast %"struct.std::__1::pair"*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint %"struct.std::__1::pair"** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.28"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast %"struct.std::__1::pair"*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast %"struct.std::__1::pair"*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast %"struct.std::__1::pair"*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to %"struct.std::__1::pair"**
  %441 = inttoptr i64 %434 to %"struct.std::__1::pair"**
  %442 = icmp eq %"struct.std::__1::pair"** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %441, i64 -1
  %445 = ptrtoint %"struct.std::__1::pair"** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %441, i64 %448
  store %"struct.std::__1::pair"** %449, %"struct.std::__1::pair"*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #14
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #9
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi %"struct.std::__1::pair"** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIPNS_4pairIiiEERNS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer.28"* nonnull %4, %"struct.std::__1::pair"** dereferenceable(8) %457)
  %458 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %167, align 8
  %459 = icmp eq %"struct.std::__1::pair"** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPNS_4pairIiiEENS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"*, %"struct.std::__1::pair"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %5, align 8
  %7 = icmp eq %"struct.std::__1::pair"** %4, %6
  %8 = ptrtoint %"struct.std::__1::pair"** %6 to i64
  %9 = bitcast %"struct.std::__1::pair"** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %13, align 8
  %15 = icmp ugt %"struct.std::__1::pair"** %12, %14
  %16 = ptrtoint %"struct.std::__1::pair"** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"struct.std::__1::pair"** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %12, i64 %22
  %24 = ptrtoint %"struct.std::__1::pair"** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"struct.std::__1::pair"** %23 to i8*
  %30 = bitcast %"struct.std::__1::pair"** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #9
  %31 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"struct.std::__1::pair"** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %23, i64 %26
  store %"struct.std::__1::pair"** %34, %"struct.std::__1::pair"*** %3, align 8
  %35 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %33, i64 %22
  store %"struct.std::__1::pair"** %35, %"struct.std::__1::pair"*** %11, align 8
  %36 = bitcast %"struct.std::__1::pair"** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %"struct.std::__1::pair"*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #13
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #14
  %50 = bitcast i8* %49 to %"struct.std::__1::pair"**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %50, i64 %47
  %53 = ptrtoint %"struct.std::__1::pair"** %52 to i64
  %54 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %50, i64 %43
  %55 = ptrtoint %"struct.std::__1::pair"** %54 to i64
  %56 = ptrtoint %"struct.std::__1::pair"** %12 to i64
  %57 = ptrtoint %"struct.std::__1::pair"** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %"struct.std::__1::pair"** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %"struct.std::__1::pair"** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %"struct.std::__1::pair"** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %69, i64 1
  %77 = ptrtoint %"struct.std::__1::pair"** %76 to i64
  %78 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !196

81:                                               ; preds = %68
  %82 = ptrtoint %"struct.std::__1::pair"** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %"struct.std::__1::pair"** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %"struct.std::__1::pair"** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %"struct.std::__1::pair"** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %"struct.std::__1::pair"** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %"struct.std::__1::pair"** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %89, i64 1
  %96 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %91, i64 1
  %97 = bitcast %"struct.std::__1::pair"** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"struct.std::__1::pair"** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %89, i64 2
  %101 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %91, i64 2
  %102 = bitcast %"struct.std::__1::pair"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"struct.std::__1::pair"** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %89, i64 3
  %106 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %91, i64 3
  %107 = bitcast %"struct.std::__1::pair"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"struct.std::__1::pair"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %89, i64 4
  %111 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %91, i64 4
  %112 = bitcast %"struct.std::__1::pair"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"struct.std::__1::pair"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %89, i64 5
  %116 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %91, i64 5
  %117 = bitcast %"struct.std::__1::pair"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"struct.std::__1::pair"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %89, i64 6
  %121 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %91, i64 6
  %122 = bitcast %"struct.std::__1::pair"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"struct.std::__1::pair"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %89, i64 7
  %126 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %91, i64 7
  %127 = bitcast %"struct.std::__1::pair"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"struct.std::__1::pair"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %89, i64 8
  %131 = ptrtoint %"struct.std::__1::pair"** %130 to i64
  %132 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %91, i64 8
  %133 = icmp eq %"struct.std::__1::pair"** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %"struct.std::__1::pair"** %60 to i64
  %136 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %"struct.std::__1::pair"** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %"struct.std::__1::pair"*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %"struct.std::__1::pair"*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %"struct.std::__1::pair"** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast %"struct.std::__1::pair"** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #14
  %146 = bitcast %"struct.std::__1::pair"*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %"struct.std::__1::pair"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %3, align 8
  %153 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %152, i64 1
  store %"struct.std::__1::pair"** %153, %"struct.std::__1::pair"*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPNS_4pairIiiEENS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer"*, %"struct.std::__1::pair"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %5, align 8
  %7 = icmp eq %"struct.std::__1::pair"** %4, %6
  %8 = ptrtoint %"struct.std::__1::pair"** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %12, align 8
  %14 = icmp ult %"struct.std::__1::pair"** %11, %13
  %15 = bitcast %"struct.std::__1::pair"*** %12 to i64*
  %16 = ptrtoint %"struct.std::__1::pair"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"struct.std::__1::pair"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %11, i64 %22
  %24 = ptrtoint %"struct.std::__1::pair"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %23, i64 %29
  %31 = bitcast %"struct.std::__1::pair"** %30 to i8*
  %32 = bitcast %"struct.std::__1::pair"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #9
  %33 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"struct.std::__1::pair"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"struct.std::__1::pair"** [ %30, %27 ], [ %23, %17 ]
  store %"struct.std::__1::pair"** %36, %"struct.std::__1::pair"*** %3, align 8
  %37 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %35, i64 %22
  store %"struct.std::__1::pair"** %37, %"struct.std::__1::pair"*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #13
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #14
  %51 = bitcast i8* %50 to %"struct.std::__1::pair"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %51, i64 %48
  %54 = ptrtoint %"struct.std::__1::pair"** %53 to i64
  %55 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %51, i64 %43
  %56 = ptrtoint %"struct.std::__1::pair"** %55 to i64
  %57 = ptrtoint %"struct.std::__1::pair"** %4 to i64
  %58 = ptrtoint %"struct.std::__1::pair"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"struct.std::__1::pair"** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"struct.std::__1::pair"** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"struct.std::__1::pair"** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %70, i64 1
  %78 = ptrtoint %"struct.std::__1::pair"** %77 to i64
  %79 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !197

82:                                               ; preds = %69
  %83 = ptrtoint %"struct.std::__1::pair"** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"struct.std::__1::pair"** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"struct.std::__1::pair"** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"struct.std::__1::pair"** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"struct.std::__1::pair"** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"struct.std::__1::pair"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 1
  %97 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 1
  %98 = bitcast %"struct.std::__1::pair"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"struct.std::__1::pair"** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 2
  %102 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 2
  %103 = bitcast %"struct.std::__1::pair"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"struct.std::__1::pair"** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 3
  %107 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 3
  %108 = bitcast %"struct.std::__1::pair"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"struct.std::__1::pair"** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 4
  %112 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 4
  %113 = bitcast %"struct.std::__1::pair"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"struct.std::__1::pair"** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 5
  %117 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 5
  %118 = bitcast %"struct.std::__1::pair"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"struct.std::__1::pair"** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 6
  %122 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 6
  %123 = bitcast %"struct.std::__1::pair"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"struct.std::__1::pair"** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 7
  %127 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 7
  %128 = bitcast %"struct.std::__1::pair"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"struct.std::__1::pair"** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 8
  %132 = ptrtoint %"struct.std::__1::pair"** %131 to i64
  %133 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 8
  %134 = icmp eq %"struct.std::__1::pair"** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"struct.std::__1::pair"** %61 to i64
  %137 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"struct.std::__1::pair"** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"struct.std::__1::pair"*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"struct.std::__1::pair"*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"struct.std::__1::pair"** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"struct.std::__1::pair"** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #14
  %146 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"struct.std::__1::pair"** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %148, i64 -1
  %150 = bitcast %"struct.std::__1::pair"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"struct.std::__1::pair"** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %3, align 8
  %154 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %153, i64 -1
  store %"struct.std::__1::pair"** %154, %"struct.std::__1::pair"*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPNS_4pairIiiEERNS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer.28"*, %"struct.std::__1::pair"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.28", %"struct.std::__1::__split_buffer.28"* %0, i64 0, i32 1
  %4 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.28", %"struct.std::__1::__split_buffer.28"* %0, i64 0, i32 0
  %6 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %5, align 8
  %7 = icmp eq %"struct.std::__1::pair"** %4, %6
  %8 = ptrtoint %"struct.std::__1::pair"** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.28", %"struct.std::__1::__split_buffer.28"* %0, i64 0, i32 2
  %11 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.28", %"struct.std::__1::__split_buffer.28"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %12, align 8
  %14 = icmp ult %"struct.std::__1::pair"** %11, %13
  %15 = bitcast %"struct.std::__1::pair"*** %12 to i64*
  %16 = ptrtoint %"struct.std::__1::pair"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"struct.std::__1::pair"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %11, i64 %22
  %24 = ptrtoint %"struct.std::__1::pair"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %23, i64 %29
  %31 = bitcast %"struct.std::__1::pair"** %30 to i8*
  %32 = bitcast %"struct.std::__1::pair"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #9
  %33 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"struct.std::__1::pair"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"struct.std::__1::pair"** [ %30, %27 ], [ %23, %17 ]
  store %"struct.std::__1::pair"** %36, %"struct.std::__1::pair"*** %3, align 8
  %37 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %35, i64 %22
  store %"struct.std::__1::pair"** %37, %"struct.std::__1::pair"*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.28"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #13
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #14
  %51 = bitcast i8* %50 to %"struct.std::__1::pair"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %51, i64 %48
  %54 = ptrtoint %"struct.std::__1::pair"** %53 to i64
  %55 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %51, i64 %43
  %56 = ptrtoint %"struct.std::__1::pair"** %55 to i64
  %57 = ptrtoint %"struct.std::__1::pair"** %4 to i64
  %58 = ptrtoint %"struct.std::__1::pair"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"struct.std::__1::pair"** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"struct.std::__1::pair"** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"struct.std::__1::pair"** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %70, i64 1
  %78 = ptrtoint %"struct.std::__1::pair"** %77 to i64
  %79 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !198

82:                                               ; preds = %69
  %83 = ptrtoint %"struct.std::__1::pair"** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"struct.std::__1::pair"** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"struct.std::__1::pair"** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"struct.std::__1::pair"** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"struct.std::__1::pair"** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"struct.std::__1::pair"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 1
  %97 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 1
  %98 = bitcast %"struct.std::__1::pair"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"struct.std::__1::pair"** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 2
  %102 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 2
  %103 = bitcast %"struct.std::__1::pair"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"struct.std::__1::pair"** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 3
  %107 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 3
  %108 = bitcast %"struct.std::__1::pair"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"struct.std::__1::pair"** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 4
  %112 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 4
  %113 = bitcast %"struct.std::__1::pair"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"struct.std::__1::pair"** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 5
  %117 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 5
  %118 = bitcast %"struct.std::__1::pair"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"struct.std::__1::pair"** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 6
  %122 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 6
  %123 = bitcast %"struct.std::__1::pair"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"struct.std::__1::pair"** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 7
  %127 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 7
  %128 = bitcast %"struct.std::__1::pair"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"struct.std::__1::pair"** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %90, i64 8
  %132 = ptrtoint %"struct.std::__1::pair"** %131 to i64
  %133 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %92, i64 8
  %134 = icmp eq %"struct.std::__1::pair"** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"struct.std::__1::pair"** %61 to i64
  %137 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"struct.std::__1::pair"** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"struct.std::__1::pair"*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"struct.std::__1::pair"*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"struct.std::__1::pair"** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"struct.std::__1::pair"** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #14
  %146 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"struct.std::__1::pair"** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %148, i64 -1
  %150 = bitcast %"struct.std::__1::pair"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"struct.std::__1::pair"** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"struct.std::__1::pair"**, %"struct.std::__1::pair"*** %3, align 8
  %154 = getelementptr inbounds %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %153, i64 -1
  store %"struct.std::__1::pair"** %154, %"struct.std::__1::pair"*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 0"}
!4 = distinct !{!4, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_"}
!5 = !{!6}
!6 = distinct !{!6, !4, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 1"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.unroll.disable"}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.isvectorized", i32 1}
!17 = distinct !{!17, !8}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 0"}
!20 = distinct !{!20, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_"}
!21 = !{!22}
!22 = distinct !{!22, !20, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 1"}
!23 = distinct !{!23, !8}
!24 = distinct !{!24, !16}
!25 = distinct !{!25, !16}
!26 = distinct !{!26, !27, !16}
!27 = !{!"llvm.loop.unroll.runtime.disable"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZN3jxl8IdentityIdEENS_5PlaneIT_EEm: argument 0"}
!30 = distinct !{!30, !"_ZN3jxl8IdentityIdEENS_5PlaneIT_EEm"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"_ZN3jxl9TransposeERKNS_5PlaneIdEE: argument 0"}
!33 = distinct !{!33, !"_ZN3jxl9TransposeERKNS_5PlaneIdEE"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 0"}
!36 = distinct !{!36, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_"}
!37 = !{!38}
!38 = distinct !{!38, !36, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 1"}
!39 = distinct !{!39, !8}
!40 = !{!41}
!41 = distinct !{!41, !42, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 0"}
!42 = distinct !{!42, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_"}
!43 = !{!44}
!44 = distinct !{!44, !42, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 1"}
!45 = distinct !{!45, !8}
!46 = distinct !{!46, !8}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !16}
!53 = distinct !{!53, !8}
!54 = !{!55}
!55 = distinct !{!55, !56, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 0"}
!56 = distinct !{!56, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_"}
!57 = !{!58}
!58 = distinct !{!58, !56, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 1"}
!59 = distinct !{!59, !8}
!60 = distinct !{!60, !16}
!61 = distinct !{!61, !16}
!62 = distinct !{!62, !27, !16}
!63 = !{!64}
!64 = distinct !{!64, !65, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 0"}
!65 = distinct !{!65, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_"}
!66 = !{!67}
!67 = distinct !{!67, !65, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 1"}
!68 = distinct !{!68, !8}
!69 = !{!70}
!70 = distinct !{!70, !71, !"_ZN3jxl9TransposeERKNS_5PlaneIdEE: argument 0"}
!71 = distinct !{!71, !"_ZN3jxl9TransposeERKNS_5PlaneIdEE"}
!72 = distinct !{!72, !8}
!73 = !{!74}
!74 = distinct !{!74, !75}
!75 = distinct !{!75, !"LVerDomain"}
!76 = !{!77}
!77 = distinct !{!77, !75}
!78 = distinct !{!78, !16}
!79 = distinct !{!79, !16}
!80 = !{!81}
!81 = distinct !{!81, !82, !"_ZN3jxl9TransposeERKNS_5PlaneIdEE: argument 0"}
!82 = distinct !{!82, !"_ZN3jxl9TransposeERKNS_5PlaneIdEE"}
!83 = distinct !{!83, !8}
!84 = !{!85}
!85 = distinct !{!85, !86}
!86 = distinct !{!86, !"LVerDomain"}
!87 = !{!88}
!88 = distinct !{!88, !86}
!89 = distinct !{!89, !16}
!90 = distinct !{!90, !16}
!91 = !{!92}
!92 = distinct !{!92, !93, !"_ZN3jxl9TransposeERKNS_5PlaneIdEE: argument 0"}
!93 = distinct !{!93, !"_ZN3jxl9TransposeERKNS_5PlaneIdEE"}
!94 = !{!95}
!95 = distinct !{!95, !96, !"_ZN3jxl10ScaleImageIdEENS_5PlaneIT_EES2_RKS3_: argument 0"}
!96 = distinct !{!96, !"_ZN3jxl10ScaleImageIdEENS_5PlaneIT_EES2_RKS3_"}
!97 = distinct !{!97, !8}
!98 = !{!99}
!99 = distinct !{!99, !100}
!100 = distinct !{!100, !"LVerDomain"}
!101 = !{!102}
!102 = distinct !{!102, !100}
!103 = distinct !{!103, !16}
!104 = distinct !{!104, !16}
!105 = !{!106}
!106 = distinct !{!106, !107, !"_ZN3jxl11CopyImageToIdEEvRKNS_5PlaneIT_EEPS3_: argument 0"}
!107 = distinct !{!107, !"_ZN3jxl11CopyImageToIdEEvRKNS_5PlaneIT_EEPS3_"}
!108 = !{!109}
!109 = distinct !{!109, !110}
!110 = distinct !{!110, !"LVerDomain"}
!111 = !{!112}
!112 = distinct !{!112, !110}
!113 = !{!114}
!114 = distinct !{!114, !110}
!115 = !{!109, !112}
!116 = distinct !{!116, !16}
!117 = distinct !{!117, !16}
!118 = distinct !{!118, !8}
!119 = !{!120}
!120 = distinct !{!120, !121, !"_ZN3jxl12ScanIntervalEPKdS1_iidPNSt3__15dequeINS2_4pairIiiEENS2_9allocatorIS5_EEEE: argument 1"}
!121 = distinct !{!121, !"_ZN3jxl12ScanIntervalEPKdS1_iidPNSt3__15dequeINS2_4pairIiiEENS2_9allocatorIS5_EEEE"}
!122 = !{!123}
!123 = distinct !{!123, !121, !"_ZN3jxl12ScanIntervalEPKdS1_iidPNSt3__15dequeINS2_4pairIiiEENS2_9allocatorIS5_EEEE: argument 0"}
!124 = !{!123, !120}
!125 = distinct !{!125, !8}
!126 = !{!127}
!127 = distinct !{!127, !128}
!128 = distinct !{!128, !"LVerDomain"}
!129 = !{!130}
!130 = distinct !{!130, !128}
!131 = distinct !{!131, !16}
!132 = distinct !{!132, !8}
!133 = distinct !{!133, !16}
!134 = !{!135}
!135 = distinct !{!135, !136, !"_ZN3jxl8IdentityIdEENS_5PlaneIT_EEm: argument 0"}
!136 = distinct !{!136, !"_ZN3jxl8IdentityIdEENS_5PlaneIT_EEm"}
!137 = !{!138}
!138 = distinct !{!138, !139, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 0"}
!139 = distinct !{!139, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_"}
!140 = !{!141}
!141 = distinct !{!141, !139, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 1"}
!142 = distinct !{!142, !8}
!143 = !{!144}
!144 = distinct !{!144, !145, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 0"}
!145 = distinct !{!145, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_"}
!146 = !{!147}
!147 = distinct !{!147, !145, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 1"}
!148 = distinct !{!148, !8}
!149 = distinct !{!149, !8}
!150 = !{!151}
!151 = distinct !{!151, !152}
!152 = distinct !{!152, !"LVerDomain"}
!153 = !{!154}
!154 = distinct !{!154, !152}
!155 = distinct !{!155, !16}
!156 = distinct !{!156, !8}
!157 = !{!158}
!158 = distinct !{!158, !159, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 0"}
!159 = distinct !{!159, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_"}
!160 = !{!161}
!161 = distinct !{!161, !159, !"_ZN3jxl10DotProductIdEET_mPKS1_S3_: argument 1"}
!162 = distinct !{!162, !8}
!163 = distinct !{!163, !16}
!164 = distinct !{!164, !16}
!165 = distinct !{!165, !27, !16}
!166 = !{!167}
!167 = distinct !{!167, !168, !"_ZN3jxl9TransposeERKNS_5PlaneIdEE: argument 0"}
!168 = distinct !{!168, !"_ZN3jxl9TransposeERKNS_5PlaneIdEE"}
!169 = !{!170}
!170 = distinct !{!170, !171, !"_ZN3jxl10ScaleImageIdEENS_5PlaneIT_EES2_RKS3_: argument 0"}
!171 = distinct !{!171, !"_ZN3jxl10ScaleImageIdEENS_5PlaneIT_EES2_RKS3_"}
!172 = distinct !{!172, !8}
!173 = !{!174}
!174 = distinct !{!174, !175}
!175 = distinct !{!175, !"LVerDomain"}
!176 = !{!177}
!177 = distinct !{!177, !175}
!178 = distinct !{!178, !16}
!179 = distinct !{!179, !16}
!180 = !{!181}
!181 = distinct !{!181, !182, !"_ZN3jxl9TransposeERKNS_5PlaneIdEE: argument 0"}
!182 = distinct !{!182, !"_ZN3jxl9TransposeERKNS_5PlaneIdEE"}
!183 = !{!184}
!184 = distinct !{!184, !185, !"_ZN3jxl10ScaleImageIdEENS_5PlaneIT_EES2_RKS3_: argument 0"}
!185 = distinct !{!185, !"_ZN3jxl10ScaleImageIdEENS_5PlaneIT_EES2_RKS3_"}
!186 = distinct !{!186, !8}
!187 = !{!188}
!188 = distinct !{!188, !189}
!189 = distinct !{!189, !"LVerDomain"}
!190 = !{!191}
!191 = distinct !{!191, !189}
!192 = distinct !{!192, !16}
!193 = distinct !{!193, !16}
!194 = distinct !{!194, !8}
!195 = distinct !{!195, !8}
!196 = distinct !{!196, !8}
!197 = distinct !{!197, !8}
!198 = distinct !{!198, !8}
