; ModuleID = '../../third_party/libgav1/src/src/post_filter/cdef.cc'
source_filename = "../../third_party/libgav1/src/src/post_filter/cdef.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.libgav1::PostFilter" = type <{ [2 x { i64, i64 }], %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::LoopRestoration"*, %"struct.libgav1::dsp::Dsp"*, i32, i32, i32, i32, i8, [3 x i8], [3 x i8], i8, i32, [4 x i8], i8*, i8*, i8, [8 x [4 x [8 x [2 x i8]]]], [3 x i8], [3 x %struct.anon], %"class.libgav1::Array2D.23"*, %"class.libgav1::Array2D.31"*, %"class.libgav1::LoopRestorationInfo"*, [2 x i8*], %"class.libgav1::YuvBuffer"*, %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"*, [3 x i8*], [3 x i8*], [3 x i8*], [3 x i8*], %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"*, i8, [7 x i8], %"class.libgav1::ThreadPool"*, i32, [9248 x i16], [4 x i8] }>
%"struct.libgav1::ObuFrameHeader" = type { i16, i16, i64, [7 x i16], i32, i32, i32, i32, i32, i32, i32, %"struct.libgav1::LoopRestoration", [32 x i32], i32, %"struct.std::__1::array", %"struct.libgav1::TileInfo", %"struct.libgav1::QuantizerParameters", %"struct.libgav1::Segmentation", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], i8, i8, i8, %"struct.libgav1::Delta", %"struct.libgav1::Delta", [7 x i8], [8 x i8], %"struct.libgav1::LoopFilter", %"struct.libgav1::Cdef", %"struct.libgav1::FilmGrainParams" }
%"struct.libgav1::LoopRestoration" = type { [3 x i8], [3 x i32] }
%"struct.std::__1::array" = type { [8 x %"struct.libgav1::GlobalMotion"] }
%"struct.libgav1::GlobalMotion" = type { i8, [6 x i32], i16, i16, i16, i16 }
%"struct.libgav1::TileInfo" = type { i8, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32, [65 x i32], [65 x i32], i16, i8 }
%"struct.libgav1::QuantizerParameters" = type { i8, [3 x i8], [3 x i8], i8, [3 x i8] }
%"struct.libgav1::Segmentation" = type { i8, i8, i8, i8, i8, i8, [8 x [8 x i8]], [8 x [8 x i16]], [8 x i8], [8 x i8] }
%"struct.libgav1::Delta" = type { i8, i8, i8 }
%"struct.libgav1::LoopFilter" = type { %"struct.std::__1::array.0", i8, i8, i8, %"struct.std::__1::array.1", %"struct.std::__1::array.2" }
%"struct.std::__1::array.0" = type { [4 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [2 x i8] }
%"struct.libgav1::Cdef" = type { i8, i8, [8 x i8], [8 x i8], [8 x i8], [8 x i8] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array.3", %"struct.std::__1::array.1", %"struct.std::__1::array.1", %"struct.std::__1::array.4", %"struct.std::__1::array.5", %"class.libgav1::Array2D", %"class.libgav1::Array2D.7" }
%"struct.std::__1::array.3" = type { [8 x i8] }
%"struct.std::__1::array.4" = type { [8 x i8] }
%"struct.std::__1::array.5" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.7" = type { %"class.std::__1::unique_ptr.8", i64, i64, %"class.libgav1::Array2DView.14" }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.14" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.7", %"class.libgav1::Array2D.15" }
%"class.libgav1::Array2D.15" = type { %"class.std::__1::unique_ptr.16", i64, i64, %"class.libgav1::Array2DView.22" }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { i8* }
%"class.libgav1::Array2DView.22" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }
%struct.anon = type { i32, i32, i32 }
%"class.libgav1::Array2D.23" = type { %"class.std::__1::unique_ptr.24", i64, i64, %"class.libgav1::Array2DView.30" }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i16* }
%"class.libgav1::Array2DView.30" = type { i32, i32, i16* }
%"class.libgav1::Array2D.31" = type { %"class.std::__1::unique_ptr.32", i64, i64, %"class.libgav1::Array2DView.38" }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { i8* }
%"class.libgav1::Array2DView.38" = type { i32, i32, i8* }
%"class.libgav1::LoopRestorationInfo" = type { [3 x %"struct.libgav1::RestorationUnitInfo"*], %"class.libgav1::DynamicBuffer", [3 x i8], %"struct.libgav1::LoopRestoration"*, i8, i8, [3 x i32], [3 x i32], [3 x i32] }
%"class.libgav1::DynamicBuffer" = type { %"class.std::__1::unique_ptr.39", i64 }
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.libgav1::RestorationUnitInfo"* }
%"class.libgav1::BlockParametersHolder" = type { i32, i32, %"class.libgav1::DynamicBuffer.51", %"struct.std::__1::atomic", %"class.libgav1::Array2D.60" }
%"class.libgav1::DynamicBuffer.51" = type { %"class.std::__1::unique_ptr.52", i64 }
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.std::__1::unique_ptr.55"* }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"struct.libgav1::BlockParameters"* }
%"struct.libgav1::BlockParameters" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x i8], [4 x i8], %"union.libgav1::CompoundMotionVector", %"struct.libgav1::PaletteModeInfo", %"class.std::__1::unique_ptr.64" }
%"struct.libgav1::PaletteModeInfo" = type { [2 x i8], [3 x [8 x i16]] }
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"struct.libgav1::PredictionParameters"* }
%"struct.libgav1::PredictionParameters" = type { i8, i8, [2 x i32], i8, i8, i32, i32, [2 x %"class.libgav1::Array2D.67"], i8, i8, i8, i32, i32, i8, i8, i8, %union.anon.69, [8 x i16], i32, i32, i32, [2 x %"struct.libgav1::MotionVector"], i32, [8 x [4 x i32]] }
%"class.libgav1::Array2D.67" = type { %"class.std::__1::unique_ptr.45", i64, i64, %"class.libgav1::Array2DView.68" }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { i8* }
%"class.libgav1::Array2DView.68" = type { i32, i32, i8* }
%union.anon.69 = type { [8 x %"union.libgav1::CompoundMotionVector"] }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.59" }
%"struct.std::__1::__atomic_base.59" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.libgav1::Array2D.60" = type { %"class.std::__1::unique_ptr.61", i64, i64, %"class.libgav1::Array2DView.76" }
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"struct.libgav1::BlockParameters"** }
%"class.libgav1::Array2DView.76" = type { i32, i32, %"struct.libgav1::BlockParameters"** }
%"class.libgav1::YuvBuffer" = type <{ i32, i8, [3 x i8], i32, i32, i32, i32, [3 x i32], [3 x i32], [3 x i32], [3 x i32], [3 x i32], [4 x i8], [3 x i8*], %"class.std::__1::unique_ptr.45", i64, i8, i8, [6 x i8] }>
%"class.libgav1::ThreadPool" = type { %"class.libgav1::Executor", %"class.std::__1::condition_variable", %"class.std::__1::mutex", %"class.libgav1::UnboundedQueue", %"class.std::__1::unique_ptr.81", i8, i32, [16 x i8] }
%"class.libgav1::Executor" = type { i32 (...)** }
%"class.std::__1::condition_variable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.77, %union.anon.79, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.77 = type { i64 }
%union.anon.79 = type { i64 }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.libgav1::UnboundedQueue" = type { %"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block"*, i64, %"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block"*, i64 }
%"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block" = type opaque
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.libgav1::ThreadPool::WorkerThread"** }
%"class.libgav1::ThreadPool::WorkerThread" = type opaque

$_ZN7libgav110PostFilter19ApplyCdefForOneUnitItEEvPtiiiiiPA3_A256_hPA2_b = comdat any

$_ZN7libgav110PostFilter19ApplyCdefForOneUnitIhEEvPtiiiiiPA3_A256_hPA2_b = comdat any

$_ZN7libgav110PostFilter16PrepareCdefBlockItEEviiiiPtlbPA256_Khb = comdat any

$_ZN7libgav110PostFilter16PrepareCdefBlockIhEEviiiiPtlbPA256_Khb = comdat any

@_ZN7libgav112_GLOBAL__N_115kCdefBorderRowsE = internal unnamed_addr constant [2 x [4 x i32]] [[4 x i32] [i32 0, i32 1, i32 62, i32 63], [4 x i32] [i32 0, i32 1, i32 30, i32 31]], align 16
@_ZN7libgav112_GLOBAL__N_116kCdefUvDirectionE = internal unnamed_addr constant [2 x [2 x [8 x i8]]] [[2 x [8 x i8]] [[8 x i8] c"\00\01\02\03\04\05\06\07", [8 x i8] c"\01\02\02\02\03\04\06\00"], [2 x [8 x i8]] [[8 x i8] c"\07\00\02\04\05\06\06\06", [8 x i8] c"\00\01\02\03\04\05\06\07"]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav110PostFilter15SetupCdefBorderEi(%"class.libgav1::PostFilter"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 27
  %4 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 32
  %5 = ashr i32 %1, 2
  %6 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 12
  %8 = shl i32 %1, 2
  %9 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 11
  %10 = sext i32 %5 to i64
  %11 = add nsw i64 %10, 1
  %12 = add nsw i64 %10, 2
  %13 = add nsw i64 %10, 3
  br label %14

14:                                               ; preds = %71, %2
  %15 = phi i64 [ %72, %71 ], [ 0, %2 ]
  %16 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %3, align 8
  %17 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %16, i64 0, i32 11, i64 %15
  %18 = load i32, i32* %17, align 4
  %19 = sext i32 %18 to i64
  %20 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %4, align 8
  %21 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %20, i64 0, i32 11, i64 %15
  %22 = load i32, i32* %21, align 4
  %23 = sext i32 %22 to i64
  %24 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %6, align 8
  %25 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %24, i64 0, i32 6
  %26 = load i32, i32* %25, align 8
  %27 = shl i32 %26, 2
  %28 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 %15
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = add nsw i32 %27, %30
  %32 = ashr i32 %31, %30
  %33 = load i32, i32* %7, align 8
  %34 = shl i32 %32, %33
  %35 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %24, i64 0, i32 7
  %36 = load i32, i32* %35, align 4
  %37 = shl i32 %36, 2
  %38 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 %15
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = add nsw i32 %37, %40
  %42 = ashr i32 %41, %40
  %43 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 28, i64 %15
  %44 = sext i32 %34 to i64
  %45 = sext i8 %39 to i64
  %46 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* @_ZN7libgav112_GLOBAL__N_115kCdefBorderRowsE, i64 0, i64 %45, i64 0
  %47 = load i32, i32* %46, align 16
  %48 = ashr i32 %8, %40
  %49 = add nsw i32 %48, %47
  %50 = icmp slt i32 %49, %42
  br i1 %50, label %51, label %71

51:                                               ; preds = %14
  %52 = load i8*, i8** %43, align 8
  %53 = mul nsw i32 %48, %18
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %52, i64 %54
  %56 = sext i32 %47 to i64
  %57 = mul nsw i64 %56, %19
  %58 = getelementptr inbounds i8, i8* %55, i64 %57
  %59 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %20, i64 0, i32 13, i64 %15
  %60 = load i8*, i8** %59, align 8
  %61 = mul nsw i64 %10, %23
  %62 = getelementptr inbounds i8, i8* %60, i64 %61
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 1 %58, i64 %44, i1 false)
  %63 = load i8, i8* %38, align 1
  %64 = sext i8 %63 to i64
  %65 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* @_ZN7libgav112_GLOBAL__N_115kCdefBorderRowsE, i64 0, i64 %64, i64 1
  %66 = load i32, i32* %65, align 4
  %67 = sext i8 %63 to i32
  %68 = ashr i32 %8, %67
  %69 = add nsw i32 %68, %66
  %70 = icmp slt i32 %69, %42
  br i1 %70, label %77, label %71

71:                                               ; preds = %125, %101, %77, %51, %14
  %72 = add nuw nsw i64 %15, 1
  %73 = load i8, i8* %9, align 1
  %74 = sext i8 %73 to i64
  %75 = icmp slt i64 %72, %74
  br i1 %75, label %14, label %76

76:                                               ; preds = %71
  ret void

77:                                               ; preds = %51
  %78 = load i8*, i8** %43, align 8
  %79 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %3, align 8
  %80 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %79, i64 0, i32 11, i64 %15
  %81 = load i32, i32* %80, align 4
  %82 = mul nsw i32 %68, %81
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %78, i64 %83
  %85 = sext i32 %66 to i64
  %86 = mul nsw i64 %85, %19
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  %88 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %4, align 8
  %89 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %88, i64 0, i32 13, i64 %15
  %90 = load i8*, i8** %89, align 8
  %91 = mul nsw i64 %11, %23
  %92 = getelementptr inbounds i8, i8* %90, i64 %91
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %92, i8* align 1 %87, i64 %44, i1 false)
  %93 = load i8, i8* %38, align 1
  %94 = sext i8 %93 to i64
  %95 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* @_ZN7libgav112_GLOBAL__N_115kCdefBorderRowsE, i64 0, i64 %94, i64 2
  %96 = load i32, i32* %95, align 8
  %97 = sext i8 %93 to i32
  %98 = ashr i32 %8, %97
  %99 = add nsw i32 %98, %96
  %100 = icmp slt i32 %99, %42
  br i1 %100, label %101, label %71

101:                                              ; preds = %77
  %102 = load i8*, i8** %43, align 8
  %103 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %3, align 8
  %104 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %103, i64 0, i32 11, i64 %15
  %105 = load i32, i32* %104, align 4
  %106 = mul nsw i32 %98, %105
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %102, i64 %107
  %109 = sext i32 %96 to i64
  %110 = mul nsw i64 %109, %19
  %111 = getelementptr inbounds i8, i8* %108, i64 %110
  %112 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %4, align 8
  %113 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %112, i64 0, i32 13, i64 %15
  %114 = load i8*, i8** %113, align 8
  %115 = mul nsw i64 %12, %23
  %116 = getelementptr inbounds i8, i8* %114, i64 %115
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %116, i8* align 1 %111, i64 %44, i1 false)
  %117 = load i8, i8* %38, align 1
  %118 = sext i8 %117 to i64
  %119 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* @_ZN7libgav112_GLOBAL__N_115kCdefBorderRowsE, i64 0, i64 %118, i64 3
  %120 = load i32, i32* %119, align 4
  %121 = sext i8 %117 to i32
  %122 = ashr i32 %8, %121
  %123 = add nsw i32 %122, %120
  %124 = icmp slt i32 %123, %42
  br i1 %124, label %125, label %71

125:                                              ; preds = %101
  %126 = load i8*, i8** %43, align 8
  %127 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %3, align 8
  %128 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %127, i64 0, i32 11, i64 %15
  %129 = load i32, i32* %128, align 4
  %130 = mul nsw i32 %122, %129
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %126, i64 %131
  %133 = sext i32 %120 to i64
  %134 = mul nsw i64 %133, %19
  %135 = getelementptr inbounds i8, i8* %132, i64 %134
  %136 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %4, align 8
  %137 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %136, i64 0, i32 13, i64 %15
  %138 = load i8*, i8** %137, align 8
  %139 = mul nsw i64 %13, %23
  %140 = getelementptr inbounds i8, i8* %138, i64 %139
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %140, i8* align 1 %135, i64 %44, i1 false)
  br label %71
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav110PostFilter34ApplyCdefForOneSuperBlockRowHelperEPtPA3_A256_hii(%"class.libgav1::PostFilter"*, i16*, [3 x [256 x i8]]*, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = alloca i32, align 4
  %7 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #3
  store i32 0, i32* %6, align 4
  %8 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 1
  %9 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %8, align 8
  %10 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %9, i64 0, i32 6
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %19

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 20
  %15 = ashr i32 %3, 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 8
  %18 = bitcast i32* %6 to [2 x i8]*
  br label %20

19:                                               ; preds = %44, %5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #3
  ret void

20:                                               ; preds = %13, %44
  %21 = phi i64 [ 0, %13 ], [ %45, %44 ]
  %22 = phi i32 [ %11, %13 ], [ %48, %44 ]
  %23 = load %"class.libgav1::Array2D.23"*, %"class.libgav1::Array2D.23"** %14, align 8
  %24 = getelementptr inbounds %"class.libgav1::Array2D.23", %"class.libgav1::Array2D.23"* %23, i64 0, i32 3, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = sext i32 %25 to i64
  %27 = mul nsw i64 %26, %16
  %28 = getelementptr inbounds %"class.libgav1::Array2D.23", %"class.libgav1::Array2D.23"* %23, i64 0, i32 3, i32 2
  %29 = load i16*, i16** %28, align 8
  %30 = getelementptr inbounds i16, i16* %29, i64 %27
  %31 = trunc i64 %21 to i32
  %32 = lshr exact i64 %21, 4
  %33 = and i64 %32, 268435455
  %34 = getelementptr inbounds i16, i16* %30, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = sext i16 %35 to i32
  %37 = sub nsw i32 %22, %31
  %38 = icmp slt i32 %37, 16
  %39 = select i1 %38, i32 %37, i32 16
  %40 = load i8, i8* %17, align 8
  %41 = icmp sgt i8 %40, 9
  br i1 %41, label %42, label %43

42:                                               ; preds = %20
  call void @_ZN7libgav110PostFilter19ApplyCdefForOneUnitItEEvPtiiiiiPA3_A256_hPA2_b(%"class.libgav1::PostFilter"* %0, i16* %1, i32 %36, i32 %39, i32 %4, i32 %3, i32 %31, [3 x [256 x i8]]* %2, [2 x i8]* nonnull %18)
  br label %44

43:                                               ; preds = %20
  call void @_ZN7libgav110PostFilter19ApplyCdefForOneUnitIhEEvPtiiiiiPA3_A256_hPA2_b(%"class.libgav1::PostFilter"* %0, i16* %1, i32 %36, i32 %39, i32 %4, i32 %3, i32 %31, [3 x [256 x i8]]* %2, [2 x i8]* nonnull %18)
  br label %44

44:                                               ; preds = %43, %42
  %45 = add nuw i64 %21, 16
  %46 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %8, align 8
  %47 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %46, i64 0, i32 6
  %48 = load i32, i32* %47, align 8
  %49 = trunc i64 %45 to i32
  %50 = icmp sgt i32 %48, %49
  br i1 %50, label %20, label %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7libgav110PostFilter19ApplyCdefForOneUnitItEEvPtiiiiiPA3_A256_hPA2_b(%"class.libgav1::PostFilter"*, i16*, i32, i32, i32, i32, i32, [3 x [256 x i8]]*, [2 x i8]*) local_unnamed_addr #0 comdat align 2 {
  %10 = alloca [3 x i32], align 4
  %11 = alloca [3 x i8*], align 16
  %12 = alloca [3 x i32], align 4
  %13 = alloca [3 x i8*], align 16
  %14 = alloca [3 x i16*], align 16
  %15 = alloca [3 x i32], align 4
  %16 = alloca [3 x i32], align 4
  %17 = alloca [64 x i8], align 16
  %18 = alloca i32, align 4
  %19 = bitcast [3 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %19) #3
  %20 = getelementptr inbounds [3 x i32], [3 x i32]* %10, i64 0, i64 0
  store i32 -1431655766, i32* %20, align 4
  %21 = getelementptr inbounds [3 x i32], [3 x i32]* %10, i64 0, i64 1
  store i32 -1431655766, i32* %21, align 4
  %22 = getelementptr inbounds [3 x i32], [3 x i32]* %10, i64 0, i64 2
  store i32 -1431655766, i32* %22, align 4
  %23 = bitcast [3 x i8*]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %23) #3
  %24 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 0
  %25 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 1
  %26 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 2
  %27 = bitcast [3 x i32]* %12 to i8*
  %28 = bitcast [3 x i8*]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %27) #3
  %29 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 0
  store i32 -1431655766, i32* %29, align 4
  %30 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 1
  store i32 -1431655766, i32* %30, align 4
  %31 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 2
  store i32 -1431655766, i32* %31, align 4
  %32 = bitcast [3 x i8*]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #3
  %33 = getelementptr inbounds [3 x i8*], [3 x i8*]* %13, i64 0, i64 0
  %34 = getelementptr inbounds [3 x i8*], [3 x i8*]* %13, i64 0, i64 1
  %35 = getelementptr inbounds [3 x i8*], [3 x i8*]* %13, i64 0, i64 2
  %36 = bitcast [3 x i16*]* %14 to i8*
  %37 = bitcast [3 x i8*]* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #3
  %38 = getelementptr inbounds [3 x i16*], [3 x i16*]* %14, i64 0, i64 0
  %39 = bitcast [3 x i32]* %15 to i8*
  %40 = bitcast [3 x i16*]* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %40, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %39) #3
  %41 = getelementptr inbounds [3 x i32], [3 x i32]* %15, i64 0, i64 0
  store i32 -1431655766, i32* %41, align 4
  %42 = getelementptr inbounds [3 x i32], [3 x i32]* %15, i64 0, i64 1
  store i32 -1431655766, i32* %42, align 4
  %43 = getelementptr inbounds [3 x i32], [3 x i32]* %15, i64 0, i64 2
  store i32 -1431655766, i32* %43, align 4
  %44 = bitcast [3 x i32]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %44) #3
  %45 = getelementptr inbounds [3 x i32], [3 x i32]* %16, i64 0, i64 0
  store i32 -1431655766, i32* %45, align 4
  %46 = getelementptr inbounds [3 x i32], [3 x i32]* %16, i64 0, i64 1
  store i32 -1431655766, i32* %46, align 4
  %47 = getelementptr inbounds [3 x i32], [3 x i32]* %16, i64 0, i64 2
  store i32 -1431655766, i32* %47, align 4
  %48 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 27
  %49 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %48, align 8
  %50 = shl i32 %5, 2
  %51 = shl i32 %6, 2
  %52 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 12
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds i16, i16* %1, i64 138
  %55 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 11
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i64
  br label %58

58:                                               ; preds = %58, %9
  %59 = phi i64 [ %97, %58 ], [ 0, %9 ]
  %60 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 29, i64 %59
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %49, i64 0, i32 11, i64 %59
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 %59
  %65 = load i8, i8* %64, align 1
  %66 = sext i8 %65 to i32
  %67 = ashr i32 %50, %66
  %68 = mul nsw i32 %67, %63
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %61, i64 %69
  %71 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 %59
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = ashr i32 %51, %73
  %75 = shl i32 %74, %53
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %70, i64 %76
  %78 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 %59
  store i8* %77, i8** %78, align 8
  %79 = lshr i32 8, %66
  %80 = mul nsw i32 %79, %63
  %81 = getelementptr inbounds [3 x i32], [3 x i32]* %10, i64 0, i64 %59
  store i32 %80, i32* %81, align 4
  %82 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 28, i64 %59
  %83 = load i8*, i8** %82, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 %69
  %85 = getelementptr inbounds i8, i8* %84, i64 %76
  %86 = getelementptr inbounds [3 x i8*], [3 x i8*]* %13, i64 0, i64 %59
  store i8* %85, i8** %86, align 8
  %87 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 %59
  store i32 %80, i32* %87, align 4
  %88 = icmp eq i64 %59, 2
  %89 = select i1 %88, i64 4624, i64 0
  %90 = getelementptr inbounds i16, i16* %54, i64 %89
  %91 = getelementptr inbounds [3 x i16*], [3 x i16*]* %14, i64 0, i64 %59
  store i16* %90, i16** %91, align 8
  %92 = mul nsw i32 %79, 68
  %93 = getelementptr inbounds [3 x i32], [3 x i32]* %15, i64 0, i64 %59
  store i32 %92, i32* %93, align 4
  %94 = lshr i32 8, %73
  %95 = shl i32 %94, 1
  %96 = getelementptr inbounds [3 x i32], [3 x i32]* %16, i64 0, i64 %59
  store i32 %95, i32* %96, align 4
  %97 = add nuw nsw i64 %59, 1
  %98 = icmp slt i64 %97, %57
  br i1 %98, label %58, label %99

99:                                               ; preds = %58
  %100 = lshr i32 %6, 4
  %101 = and i32 %100, 1
  %102 = xor i32 %101, 1
  %103 = icmp eq i32 %2, -1
  br i1 %103, label %104, label %174

104:                                              ; preds = %99
  %105 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 36
  %106 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %105, align 8
  %107 = icmp eq %"class.libgav1::ThreadPool"* %106, null
  br i1 %107, label %108, label %170

108:                                              ; preds = %104
  %109 = shl i32 %3, 2
  %110 = shl i32 %4, 2
  br label %111

111:                                              ; preds = %168, %108
  %112 = phi %"class.libgav1::YuvBuffer"* [ %49, %108 ], [ %169, %168 ]
  %113 = phi i64 [ 0, %108 ], [ %164, %168 ]
  %114 = getelementptr inbounds [3 x i8*], [3 x i8*]* %13, i64 0, i64 %113
  %115 = load i8*, i8** %114, align 8
  %116 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %112, i64 0, i32 11, i64 %113
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 %113
  %119 = load i8*, i8** %118, align 8
  %120 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 %113
  %121 = load i8, i8* %120, align 1
  %122 = sext i8 %121 to i32
  %123 = ashr i32 %109, %122
  %124 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 %113
  %125 = load i8, i8* %124, align 1
  %126 = sext i8 %125 to i32
  %127 = ashr i32 %110, %126
  %128 = sext i32 %123 to i64
  %129 = shl nsw i64 %128, 1
  %130 = sext i32 %117 to i64
  %131 = add nsw i32 %127, -1
  %132 = and i32 %127, 3
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %144, label %134

134:                                              ; preds = %111, %134
  %135 = phi i8* [ %140, %134 ], [ %119, %111 ]
  %136 = phi i8* [ %139, %134 ], [ %115, %111 ]
  %137 = phi i32 [ %141, %134 ], [ %127, %111 ]
  %138 = phi i32 [ %142, %134 ], [ %132, %111 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %135, i8* align 1 %136, i64 %129, i1 false) #3
  %139 = getelementptr inbounds i8, i8* %136, i64 %130
  %140 = getelementptr inbounds i8, i8* %135, i64 %130
  %141 = add nsw i32 %137, -1
  %142 = add i32 %138, -1
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %134, !llvm.loop !2

144:                                              ; preds = %134, %111
  %145 = phi i8* [ %119, %111 ], [ %140, %134 ]
  %146 = phi i8* [ %115, %111 ], [ %139, %134 ]
  %147 = phi i32 [ %127, %111 ], [ %141, %134 ]
  %148 = icmp ult i32 %131, 3
  br i1 %148, label %163, label %149

149:                                              ; preds = %144, %149
  %150 = phi i8* [ %160, %149 ], [ %145, %144 ]
  %151 = phi i8* [ %159, %149 ], [ %146, %144 ]
  %152 = phi i32 [ %161, %149 ], [ %147, %144 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %150, i8* align 1 %151, i64 %129, i1 false) #3
  %153 = getelementptr inbounds i8, i8* %151, i64 %130
  %154 = getelementptr inbounds i8, i8* %150, i64 %130
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %154, i8* align 1 %153, i64 %129, i1 false) #3
  %155 = getelementptr inbounds i8, i8* %153, i64 %130
  %156 = getelementptr inbounds i8, i8* %154, i64 %130
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %156, i8* align 1 %155, i64 %129, i1 false) #3
  %157 = getelementptr inbounds i8, i8* %155, i64 %130
  %158 = getelementptr inbounds i8, i8* %156, i64 %130
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %158, i8* align 1 %157, i64 %129, i1 false) #3
  %159 = getelementptr inbounds i8, i8* %157, i64 %130
  %160 = getelementptr inbounds i8, i8* %158, i64 %130
  %161 = add nsw i32 %152, -4
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %149

163:                                              ; preds = %149, %144
  %164 = add nuw nsw i64 %113, 1
  %165 = load i8, i8* %55, align 1
  %166 = sext i8 %165 to i64
  %167 = icmp slt i64 %164, %166
  br i1 %167, label %168, label %170

168:                                              ; preds = %163
  %169 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %48, align 8
  br label %111

170:                                              ; preds = %163, %104
  %171 = zext i32 %102 to i64
  %172 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 %171, i64 0
  store i8 0, i8* %172, align 1
  %173 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 %171, i64 1
  store i8 0, i8* %173, align 1
  br label %911

174:                                              ; preds = %99
  %175 = shl i32 %3, 2
  %176 = add nsw i32 %51, %175
  %177 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 6
  %178 = load i32, i32* %177, align 8
  %179 = icmp sge i32 %176, %178
  br i1 %179, label %280, label %180

180:                                              ; preds = %174
  %181 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 36
  %182 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %181, align 8
  %183 = icmp eq %"class.libgav1::ThreadPool"* %182, null
  br i1 %183, label %280, label %184

184:                                              ; preds = %180
  %185 = zext i32 %102 to i64
  %186 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 %185, i64 0
  store i8 1, i8* %186, align 1
  %187 = add nsw i32 %6, %3
  %188 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 28, i64 0
  %189 = load i8*, i8** %188, align 8
  %190 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %48, align 8
  %191 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %190, i64 0, i32 11, i64 0
  %192 = load i32, i32* %191, align 4
  %193 = shl i32 %187, 2
  %194 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 0
  %195 = load i8, i8* %194, align 1
  %196 = sext i8 %195 to i32
  %197 = ashr i32 %50, %196
  %198 = mul nsw i32 %197, %192
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds i8, i8* %189, i64 %199
  %201 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 0
  %202 = load i8, i8* %201, align 1
  %203 = sext i8 %202 to i32
  %204 = ashr i32 %193, %203
  %205 = load i32, i32* %52, align 8
  %206 = shl i32 %204, %205
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds i8, i8* %200, i64 %207
  %209 = getelementptr inbounds i8, i8* %208, i64 -4
  %210 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %7, i64 %185, i64 0, i64 0
  %211 = shl i32 %4, 2
  %212 = sext i32 %192 to i64
  %213 = add nsw i32 %211, -1
  %214 = and i32 %211, 4
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %229, label %216

216:                                              ; preds = %184, %216
  %217 = phi i8* [ %225, %216 ], [ %210, %184 ]
  %218 = phi i8* [ %224, %216 ], [ %209, %184 ]
  %219 = phi i32 [ %226, %216 ], [ %211, %184 ]
  %220 = phi i32 [ %227, %216 ], [ %214, %184 ]
  %221 = bitcast i8* %218 to i32*
  %222 = bitcast i8* %217 to i32*
  %223 = load i32, i32* %221, align 1
  store i32 %223, i32* %222, align 1
  %224 = getelementptr inbounds i8, i8* %218, i64 %212
  %225 = getelementptr inbounds i8, i8* %217, i64 4
  %226 = add nsw i32 %219, -1
  %227 = add i32 %220, -1
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %229, label %216, !llvm.loop !4

229:                                              ; preds = %216, %184
  %230 = phi i8* [ %210, %184 ], [ %225, %216 ]
  %231 = phi i8* [ %209, %184 ], [ %224, %216 ]
  %232 = phi i32 [ %211, %184 ], [ %226, %216 ]
  %233 = icmp ult i32 %213, 7
  br i1 %233, label %280, label %234

234:                                              ; preds = %229, %234
  %235 = phi i8* [ %277, %234 ], [ %230, %229 ]
  %236 = phi i8* [ %276, %234 ], [ %231, %229 ]
  %237 = phi i32 [ %278, %234 ], [ %232, %229 ]
  %238 = bitcast i8* %236 to i32*
  %239 = bitcast i8* %235 to i32*
  %240 = load i32, i32* %238, align 1
  store i32 %240, i32* %239, align 1
  %241 = getelementptr inbounds i8, i8* %236, i64 %212
  %242 = getelementptr inbounds i8, i8* %235, i64 4
  %243 = bitcast i8* %241 to i32*
  %244 = bitcast i8* %242 to i32*
  %245 = load i32, i32* %243, align 1
  store i32 %245, i32* %244, align 1
  %246 = getelementptr inbounds i8, i8* %241, i64 %212
  %247 = getelementptr inbounds i8, i8* %235, i64 8
  %248 = bitcast i8* %246 to i32*
  %249 = bitcast i8* %247 to i32*
  %250 = load i32, i32* %248, align 1
  store i32 %250, i32* %249, align 1
  %251 = getelementptr inbounds i8, i8* %246, i64 %212
  %252 = getelementptr inbounds i8, i8* %235, i64 12
  %253 = bitcast i8* %251 to i32*
  %254 = bitcast i8* %252 to i32*
  %255 = load i32, i32* %253, align 1
  store i32 %255, i32* %254, align 1
  %256 = getelementptr inbounds i8, i8* %251, i64 %212
  %257 = getelementptr inbounds i8, i8* %235, i64 16
  %258 = bitcast i8* %256 to i32*
  %259 = bitcast i8* %257 to i32*
  %260 = load i32, i32* %258, align 1
  store i32 %260, i32* %259, align 1
  %261 = getelementptr inbounds i8, i8* %256, i64 %212
  %262 = getelementptr inbounds i8, i8* %235, i64 20
  %263 = bitcast i8* %261 to i32*
  %264 = bitcast i8* %262 to i32*
  %265 = load i32, i32* %263, align 1
  store i32 %265, i32* %264, align 1
  %266 = getelementptr inbounds i8, i8* %261, i64 %212
  %267 = getelementptr inbounds i8, i8* %235, i64 24
  %268 = bitcast i8* %266 to i32*
  %269 = bitcast i8* %267 to i32*
  %270 = load i32, i32* %268, align 1
  store i32 %270, i32* %269, align 1
  %271 = getelementptr inbounds i8, i8* %266, i64 %212
  %272 = getelementptr inbounds i8, i8* %235, i64 28
  %273 = bitcast i8* %271 to i32*
  %274 = bitcast i8* %272 to i32*
  %275 = load i32, i32* %273, align 1
  store i32 %275, i32* %274, align 1
  %276 = getelementptr inbounds i8, i8* %271, i64 %212
  %277 = getelementptr inbounds i8, i8* %235, i64 32
  %278 = add nsw i32 %237, -8
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %280, label %234

280:                                              ; preds = %229, %234, %180, %174
  %281 = icmp eq [3 x [256 x i8]]* %7, null
  %282 = zext i32 %101 to i64
  %283 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %7, i64 %282, i64 0
  %284 = select i1 %281, [256 x i8]* null, [256 x i8]* %283
  %285 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 %282, i64 0
  %286 = load i8, i8* %285, align 1, !range !5
  %287 = icmp ne i8 %286, 0
  tail call void @_ZN7libgav110PostFilter16PrepareCdefBlockItEEviiiiPtlbPA256_Khb(%"class.libgav1::PostFilter"* %0, i32 %3, i32 %4, i32 %5, i32 %6, i16* %1, i64 68, i1 zeroext true, [256 x i8]* %284, i1 zeroext %287)
  %288 = getelementptr inbounds [64 x i8], [64 x i8]* %17, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %288) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %288, i8 -86, i64 64, i1 false)
  %289 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 1
  %290 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %289, align 8
  %291 = sext i32 %2 to i64
  %292 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %290, i64 0, i32 55, i32 2, i64 %291
  %293 = load i8, i8* %292, align 1
  %294 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %290, i64 0, i32 55, i32 3, i64 %291
  %295 = load i8, i8* %294, align 1
  %296 = zext i8 %295 to i32
  %297 = icmp eq i8 %295, 0
  %298 = zext i1 %297 to i64
  %299 = zext i8 %293 to i32
  %300 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %290, i64 0, i32 55, i32 4, i64 %291
  %301 = load i8, i8* %300, align 1
  %302 = or i8 %301, %293
  %303 = icmp eq i8 %302, 0
  %304 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 25
  %305 = load %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::BlockParametersHolder"** %304, align 8
  %306 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %305, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %307 = load %"struct.libgav1::BlockParameters"**, %"struct.libgav1::BlockParameters"*** %306, align 8
  %308 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %305, i64 0, i32 1
  %309 = load i32, i32* %308, align 4
  %310 = mul nsw i32 %309, %5
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %307, i64 %311
  %313 = sext i32 %6 to i64
  %314 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %312, i64 %313
  %315 = sext i32 %309 to i64
  %316 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %314, i64 %315
  %317 = shl i32 %309, 1
  %318 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 36
  %319 = bitcast i32* %18 to i8*
  %320 = add nsw i32 %5, %4
  %321 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 3
  %322 = icmp eq i8 %293, 0
  %323 = add nsw i32 %6, %3
  %324 = sext i32 %317 to i64
  %325 = load i8*, i8** %24, align 16
  %326 = load i8*, i8** %33, align 16
  %327 = load i16*, i16** %38, align 16
  br label %328

328:                                              ; preds = %479, %280
  %329 = phi i16* [ %327, %280 ], [ %491, %479 ]
  %330 = phi i8* [ %326, %280 ], [ %487, %479 ]
  %331 = phi i8* [ %325, %280 ], [ %483, %479 ]
  %332 = phi i64 [ 0, %280 ], [ %477, %479 ]
  %333 = phi %"struct.libgav1::BlockParameters"** [ %314, %280 ], [ %492, %479 ]
  %334 = phi %"struct.libgav1::BlockParameters"** [ %316, %280 ], [ %493, %479 ]
  %335 = phi i32 [ %5, %280 ], [ %336, %479 ]
  %336 = add nsw i32 %335, 2
  %337 = icmp slt i32 %336, %320
  %338 = shl i64 %332, 32
  %339 = ashr exact i64 %338, 32
  br label %340

340:                                              ; preds = %467, %328
  %341 = phi i64 [ %477, %467 ], [ %339, %328 ]
  %342 = phi i8* [ %470, %467 ], [ %331, %328 ]
  %343 = phi i8* [ %471, %467 ], [ %330, %328 ]
  %344 = phi i16* [ %473, %467 ], [ %329, %328 ]
  %345 = phi %"struct.libgav1::BlockParameters"** [ %474, %467 ], [ %333, %328 ]
  %346 = phi %"struct.libgav1::BlockParameters"** [ %475, %467 ], [ %334, %328 ]
  %347 = phi i32 [ %476, %467 ], [ %6, %328 ]
  %348 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %48, align 8
  %349 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %348, i64 0, i32 11, i64 0
  %350 = load i32, i32* %349, align 4
  %351 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %345, align 8
  %352 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %351, i64 0, i32 1
  %353 = load i8, i8* %352, align 1, !range !5
  %354 = icmp eq i8 %353, 0
  br i1 %354, label %366, label %355

355:                                              ; preds = %340
  %356 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %345, i64 1
  %357 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %356, align 8
  %358 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %357, i64 0, i32 1
  %359 = load i8, i8* %358, align 1, !range !5
  %360 = icmp eq i8 %359, 0
  br i1 %360, label %366, label %361

361:                                              ; preds = %355
  %362 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %346, align 8
  %363 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %362, i64 0, i32 1
  %364 = load i8, i8* %363, align 1, !range !5
  %365 = icmp eq i8 %364, 0
  br i1 %365, label %366, label %368

366:                                              ; preds = %361, %355, %340
  %367 = getelementptr inbounds [64 x i8], [64 x i8]* %17, i64 0, i64 %341
  br label %394

368:                                              ; preds = %361
  %369 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %346, i64 1
  %370 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %369, align 8
  %371 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %370, i64 0, i32 1
  %372 = load i8, i8* %371, align 1, !range !5
  %373 = icmp eq i8 %372, 0
  %374 = getelementptr inbounds [64 x i8], [64 x i8]* %17, i64 0, i64 %341
  br i1 %373, label %394, label %375

375:                                              ; preds = %368
  store i8 8, i8* %374, align 1
  %376 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %318, align 8
  %377 = icmp eq %"class.libgav1::ThreadPool"* %376, null
  br i1 %377, label %378, label %467

378:                                              ; preds = %375
  %379 = sext i32 %350 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %342, i8* align 1 %343, i64 16, i1 false) #3
  %380 = getelementptr inbounds i8, i8* %343, i64 %379
  %381 = getelementptr inbounds i8, i8* %342, i64 %379
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %381, i8* align 1 %380, i64 16, i1 false) #3
  %382 = getelementptr inbounds i8, i8* %380, i64 %379
  %383 = getelementptr inbounds i8, i8* %381, i64 %379
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %383, i8* align 1 %382, i64 16, i1 false) #3
  %384 = getelementptr inbounds i8, i8* %382, i64 %379
  %385 = getelementptr inbounds i8, i8* %383, i64 %379
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %385, i8* align 1 %384, i64 16, i1 false) #3
  %386 = getelementptr inbounds i8, i8* %384, i64 %379
  %387 = getelementptr inbounds i8, i8* %385, i64 %379
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %387, i8* align 1 %386, i64 16, i1 false) #3
  %388 = getelementptr inbounds i8, i8* %386, i64 %379
  %389 = getelementptr inbounds i8, i8* %387, i64 %379
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %389, i8* align 1 %388, i64 16, i1 false) #3
  %390 = getelementptr inbounds i8, i8* %388, i64 %379
  %391 = getelementptr inbounds i8, i8* %389, i64 %379
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %391, i8* align 1 %390, i64 16, i1 false) #3
  %392 = getelementptr inbounds i8, i8* %390, i64 %379
  %393 = getelementptr inbounds i8, i8* %391, i64 %379
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %393, i8* align 1 %392, i64 16, i1 false) #3
  br label %467

394:                                              ; preds = %368, %366
  %395 = phi i8* [ %367, %366 ], [ %374, %368 ]
  store i8 0, i8* %395, align 1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %319) #3
  store i32 0, i32* %18, align 4
  br i1 %303, label %407, label %396

396:                                              ; preds = %394
  %397 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %318, align 8
  %398 = icmp eq %"class.libgav1::ThreadPool"* %397, null
  %399 = or i1 %398, %337
  %400 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %321, align 8
  %401 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %400, i64 0, i32 1
  %402 = load void (i8*, i64, i8*, i32*)*, void (i8*, i64, i8*, i32*)** %401, align 8
  br i1 %399, label %403, label %405

403:                                              ; preds = %396
  %404 = sext i32 %350 to i64
  call void %402(i8* %343, i64 %404, i8* %395, i32* nonnull %18) #3
  br label %407

405:                                              ; preds = %396
  %406 = bitcast i16* %344 to i8*
  call void %402(i8* %406, i64 136, i8* %395, i32* nonnull %18) #3
  br label %407

407:                                              ; preds = %394, %403, %405
  br i1 %322, label %411, label %408

408:                                              ; preds = %407
  %409 = load i8, i8* %395, align 1
  %410 = zext i8 %409 to i32
  br label %411

411:                                              ; preds = %407, %408
  %412 = phi i32 [ %410, %408 ], [ 0, %407 ]
  %413 = load i32, i32* %18, align 4
  %414 = icmp ugt i32 %413, 63
  br i1 %414, label %415, label %421

415:                                              ; preds = %411
  %416 = ashr i32 %413, 6
  %417 = call i32 @llvm.ctlz.i32(i32 %416, i1 true) #3, !range !6
  %418 = xor i32 %417, 31
  %419 = icmp ult i32 %418, 12
  %420 = select i1 %419, i32 %418, i32 12
  br label %423

421:                                              ; preds = %411
  %422 = icmp eq i32 %413, 0
  br i1 %422, label %429, label %423

423:                                              ; preds = %415, %421
  %424 = phi i32 [ %420, %415 ], [ 0, %421 ]
  %425 = add nuw nsw i32 %424, 4
  %426 = mul nuw nsw i32 %425, %299
  %427 = add nuw nsw i32 %426, 8
  %428 = lshr i32 %427, 4
  br label %429

429:                                              ; preds = %421, %423
  %430 = phi i32 [ %428, %423 ], [ 0, %421 ]
  %431 = and i32 %430, 255
  %432 = or i32 %431, %296
  %433 = icmp eq i32 %432, 0
  br i1 %433, label %434, label %453

434:                                              ; preds = %429
  %435 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %318, align 8
  %436 = icmp eq %"class.libgav1::ThreadPool"* %435, null
  br i1 %436, label %437, label %466

437:                                              ; preds = %434
  %438 = sext i32 %350 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %342, i8* align 1 %343, i64 16, i1 false) #3
  %439 = getelementptr inbounds i8, i8* %343, i64 %438
  %440 = getelementptr inbounds i8, i8* %342, i64 %438
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %440, i8* align 1 %439, i64 16, i1 false) #3
  %441 = getelementptr inbounds i8, i8* %439, i64 %438
  %442 = getelementptr inbounds i8, i8* %440, i64 %438
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %442, i8* align 1 %441, i64 16, i1 false) #3
  %443 = getelementptr inbounds i8, i8* %441, i64 %438
  %444 = getelementptr inbounds i8, i8* %442, i64 %438
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %444, i8* align 1 %443, i64 16, i1 false) #3
  %445 = getelementptr inbounds i8, i8* %443, i64 %438
  %446 = getelementptr inbounds i8, i8* %444, i64 %438
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %446, i8* align 1 %445, i64 16, i1 false) #3
  %447 = getelementptr inbounds i8, i8* %445, i64 %438
  %448 = getelementptr inbounds i8, i8* %446, i64 %438
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %448, i8* align 1 %447, i64 16, i1 false) #3
  %449 = getelementptr inbounds i8, i8* %447, i64 %438
  %450 = getelementptr inbounds i8, i8* %448, i64 %438
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %450, i8* align 1 %449, i64 16, i1 false) #3
  %451 = getelementptr inbounds i8, i8* %449, i64 %438
  %452 = getelementptr inbounds i8, i8* %450, i64 %438
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %452, i8* align 1 %451, i64 16, i1 false) #3
  br label %466

453:                                              ; preds = %429
  %454 = icmp eq i32 %431, 0
  %455 = zext i1 %454 to i64
  %456 = shl nuw nsw i64 %455, 1
  %457 = or i64 %456, %298
  %458 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %321, align 8
  %459 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %458, i64 0, i32 2, i64 1, i64 %457
  %460 = load void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)** %459, align 8
  %461 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %289, align 8
  %462 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %461, i64 0, i32 55, i32 0
  %463 = load i8, i8* %462, align 1
  %464 = zext i8 %463 to i32
  %465 = sext i32 %350 to i64
  call void %460(i16* %344, i64 68, i32 8, i32 %431, i32 %296, i32 %464, i32 %412, i8* %342, i64 %465) #3
  br label %466

466:                                              ; preds = %437, %434, %453
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %319) #3
  br label %467

467:                                              ; preds = %378, %375, %466
  %468 = load i32, i32* %45, align 4
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds i8, i8* %342, i64 %469
  %471 = getelementptr inbounds i8, i8* %343, i64 %469
  %472 = lshr i64 %469, 1
  %473 = getelementptr inbounds i16, i16* %344, i64 %472
  %474 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %345, i64 2
  %475 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %346, i64 2
  %476 = add nsw i32 %347, 2
  %477 = add i64 %341, 1
  %478 = icmp slt i32 %476, %323
  br i1 %478, label %340, label %479

479:                                              ; preds = %467
  %480 = load i32, i32* %20, align 4
  %481 = load i8*, i8** %24, align 16
  %482 = sext i32 %480 to i64
  %483 = getelementptr inbounds i8, i8* %481, i64 %482
  store i8* %483, i8** %24, align 16
  %484 = load i32, i32* %29, align 4
  %485 = load i8*, i8** %33, align 16
  %486 = sext i32 %484 to i64
  %487 = getelementptr inbounds i8, i8* %485, i64 %486
  store i8* %487, i8** %33, align 16
  %488 = load i32, i32* %41, align 4
  %489 = load i16*, i16** %38, align 16
  %490 = sext i32 %488 to i64
  %491 = getelementptr inbounds i16, i16* %489, i64 %490
  store i16* %491, i16** %38, align 16
  %492 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %333, i64 %324
  %493 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %334, i64 %324
  br i1 %337, label %328, label %494

494:                                              ; preds = %479
  %495 = load i8, i8* %55, align 1
  %496 = icmp eq i8 %495, 1
  br i1 %496, label %910, label %497

497:                                              ; preds = %494
  %498 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %289, align 8
  %499 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %498, i64 0, i32 55, i32 4, i64 %291
  %500 = load i8, i8* %499, align 1
  %501 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %498, i64 0, i32 55, i32 5, i64 %291
  %502 = load i8, i8* %501, align 1
  %503 = zext i8 %500 to i32
  %504 = zext i8 %502 to i32
  %505 = or i8 %502, %500
  %506 = icmp eq i8 %505, 0
  br i1 %506, label %507, label %598

507:                                              ; preds = %497
  %508 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %318, align 8
  %509 = icmp eq %"class.libgav1::ThreadPool"* %508, null
  br i1 %509, label %510, label %595

510:                                              ; preds = %507
  %511 = shl i32 %4, 2
  %512 = load i8*, i8** %34, align 8
  %513 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %48, align 8
  %514 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %513, i64 0, i32 11, i64 1
  %515 = load i32, i32* %514, align 4
  %516 = load i8*, i8** %25, align 8
  %517 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 1
  %518 = load i8, i8* %517, align 1
  %519 = sext i8 %518 to i32
  %520 = ashr i32 %175, %519
  %521 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 1
  %522 = load i8, i8* %521, align 1
  %523 = sext i8 %522 to i32
  %524 = ashr i32 %511, %523
  %525 = sext i32 %520 to i64
  %526 = shl nsw i64 %525, 1
  %527 = sext i32 %515 to i64
  %528 = add nsw i32 %524, -1
  %529 = and i32 %524, 3
  %530 = icmp eq i32 %529, 0
  br i1 %530, label %541, label %531

531:                                              ; preds = %510, %531
  %532 = phi i8* [ %537, %531 ], [ %516, %510 ]
  %533 = phi i8* [ %536, %531 ], [ %512, %510 ]
  %534 = phi i32 [ %538, %531 ], [ %524, %510 ]
  %535 = phi i32 [ %539, %531 ], [ %529, %510 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %532, i8* align 1 %533, i64 %526, i1 false) #3
  %536 = getelementptr inbounds i8, i8* %533, i64 %527
  %537 = getelementptr inbounds i8, i8* %532, i64 %527
  %538 = add nsw i32 %534, -1
  %539 = add i32 %535, -1
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %541, label %531, !llvm.loop !7

541:                                              ; preds = %531, %510
  %542 = phi i8* [ %516, %510 ], [ %537, %531 ]
  %543 = phi i8* [ %512, %510 ], [ %536, %531 ]
  %544 = phi i32 [ %524, %510 ], [ %538, %531 ]
  %545 = icmp ult i32 %528, 3
  br i1 %545, label %560, label %546

546:                                              ; preds = %541, %546
  %547 = phi i8* [ %557, %546 ], [ %542, %541 ]
  %548 = phi i8* [ %556, %546 ], [ %543, %541 ]
  %549 = phi i32 [ %558, %546 ], [ %544, %541 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %547, i8* align 1 %548, i64 %526, i1 false) #3
  %550 = getelementptr inbounds i8, i8* %548, i64 %527
  %551 = getelementptr inbounds i8, i8* %547, i64 %527
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %551, i8* align 1 %550, i64 %526, i1 false) #3
  %552 = getelementptr inbounds i8, i8* %550, i64 %527
  %553 = getelementptr inbounds i8, i8* %551, i64 %527
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %553, i8* align 1 %552, i64 %526, i1 false) #3
  %554 = getelementptr inbounds i8, i8* %552, i64 %527
  %555 = getelementptr inbounds i8, i8* %553, i64 %527
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %555, i8* align 1 %554, i64 %526, i1 false) #3
  %556 = getelementptr inbounds i8, i8* %554, i64 %527
  %557 = getelementptr inbounds i8, i8* %555, i64 %527
  %558 = add nsw i32 %549, -4
  %559 = icmp eq i32 %558, 0
  br i1 %559, label %560, label %546

560:                                              ; preds = %546, %541
  %561 = load i8*, i8** %35, align 16
  %562 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %48, align 8
  %563 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %562, i64 0, i32 11, i64 2
  %564 = load i32, i32* %563, align 4
  %565 = load i8*, i8** %26, align 16
  %566 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 2
  %567 = load i8, i8* %566, align 1
  %568 = sext i8 %567 to i32
  %569 = ashr i32 %175, %568
  %570 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 2
  %571 = load i8, i8* %570, align 1
  %572 = sext i8 %571 to i32
  %573 = ashr i32 %511, %572
  %574 = sext i32 %569 to i64
  %575 = shl nsw i64 %574, 1
  %576 = sext i32 %564 to i64
  %577 = add nsw i32 %573, -1
  %578 = and i32 %573, 3
  %579 = icmp eq i32 %578, 0
  br i1 %579, label %590, label %580

580:                                              ; preds = %560, %580
  %581 = phi i8* [ %586, %580 ], [ %565, %560 ]
  %582 = phi i8* [ %585, %580 ], [ %561, %560 ]
  %583 = phi i32 [ %587, %580 ], [ %573, %560 ]
  %584 = phi i32 [ %588, %580 ], [ %578, %560 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %581, i8* align 1 %582, i64 %575, i1 false) #3
  %585 = getelementptr inbounds i8, i8* %582, i64 %576
  %586 = getelementptr inbounds i8, i8* %581, i64 %576
  %587 = add nsw i32 %583, -1
  %588 = add i32 %584, -1
  %589 = icmp eq i32 %588, 0
  br i1 %589, label %590, label %580, !llvm.loop !8

590:                                              ; preds = %580, %560
  %591 = phi i8* [ %565, %560 ], [ %586, %580 ]
  %592 = phi i8* [ %561, %560 ], [ %585, %580 ]
  %593 = phi i32 [ %573, %560 ], [ %587, %580 ]
  %594 = icmp ult i32 %577, 3
  br i1 %594, label %595, label %912

595:                                              ; preds = %590, %912, %507
  %596 = zext i32 %102 to i64
  %597 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 %596, i64 1
  store i8 0, i8* %597, align 1
  br label %910

598:                                              ; preds = %497
  br i1 %179, label %744, label %599

599:                                              ; preds = %598
  %600 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %318, align 8
  %601 = icmp eq %"class.libgav1::ThreadPool"* %600, null
  br i1 %601, label %744, label %602

602:                                              ; preds = %599
  %603 = zext i32 %102 to i64
  %604 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 %603, i64 1
  store i8 1, i8* %604, align 1
  %605 = shl i32 %323, 2
  %606 = shl i32 %4, 2
  %607 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 28, i64 1
  %608 = load i8*, i8** %607, align 8
  %609 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %48, align 8
  %610 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %609, i64 0, i32 11, i64 1
  %611 = load i32, i32* %610, align 4
  %612 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 1
  %613 = load i8, i8* %612, align 1
  %614 = sext i8 %613 to i32
  %615 = ashr i32 %50, %614
  %616 = mul nsw i32 %615, %611
  %617 = sext i32 %616 to i64
  %618 = getelementptr inbounds i8, i8* %608, i64 -4
  %619 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 1
  %620 = load i8, i8* %619, align 1
  %621 = sext i8 %620 to i32
  %622 = ashr i32 %605, %621
  %623 = load i32, i32* %52, align 8
  %624 = shl i32 %622, %623
  %625 = sext i32 %624 to i64
  %626 = getelementptr inbounds i8, i8* %618, i64 %617
  %627 = getelementptr inbounds i8, i8* %626, i64 %625
  %628 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %7, i64 %603, i64 1, i64 0
  %629 = ashr i32 %606, %614
  %630 = sext i32 %611 to i64
  %631 = add nsw i32 %629, -1
  %632 = and i32 %629, 7
  %633 = icmp eq i32 %632, 0
  br i1 %633, label %647, label %634

634:                                              ; preds = %602, %634
  %635 = phi i8* [ %643, %634 ], [ %628, %602 ]
  %636 = phi i8* [ %642, %634 ], [ %627, %602 ]
  %637 = phi i32 [ %644, %634 ], [ %629, %602 ]
  %638 = phi i32 [ %645, %634 ], [ %632, %602 ]
  %639 = bitcast i8* %636 to i32*
  %640 = bitcast i8* %635 to i32*
  %641 = load i32, i32* %639, align 1
  store i32 %641, i32* %640, align 1
  %642 = getelementptr inbounds i8, i8* %636, i64 %630
  %643 = getelementptr inbounds i8, i8* %635, i64 4
  %644 = add nsw i32 %637, -1
  %645 = add i32 %638, -1
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %647, label %634, !llvm.loop !9

647:                                              ; preds = %634, %602
  %648 = phi i8* [ %628, %602 ], [ %643, %634 ]
  %649 = phi i8* [ %627, %602 ], [ %642, %634 ]
  %650 = phi i32 [ %629, %602 ], [ %644, %634 ]
  %651 = icmp ult i32 %631, 7
  br i1 %651, label %698, label %652

652:                                              ; preds = %647, %652
  %653 = phi i8* [ %695, %652 ], [ %648, %647 ]
  %654 = phi i8* [ %694, %652 ], [ %649, %647 ]
  %655 = phi i32 [ %696, %652 ], [ %650, %647 ]
  %656 = bitcast i8* %654 to i32*
  %657 = bitcast i8* %653 to i32*
  %658 = load i32, i32* %656, align 1
  store i32 %658, i32* %657, align 1
  %659 = getelementptr inbounds i8, i8* %654, i64 %630
  %660 = getelementptr inbounds i8, i8* %653, i64 4
  %661 = bitcast i8* %659 to i32*
  %662 = bitcast i8* %660 to i32*
  %663 = load i32, i32* %661, align 1
  store i32 %663, i32* %662, align 1
  %664 = getelementptr inbounds i8, i8* %659, i64 %630
  %665 = getelementptr inbounds i8, i8* %653, i64 8
  %666 = bitcast i8* %664 to i32*
  %667 = bitcast i8* %665 to i32*
  %668 = load i32, i32* %666, align 1
  store i32 %668, i32* %667, align 1
  %669 = getelementptr inbounds i8, i8* %664, i64 %630
  %670 = getelementptr inbounds i8, i8* %653, i64 12
  %671 = bitcast i8* %669 to i32*
  %672 = bitcast i8* %670 to i32*
  %673 = load i32, i32* %671, align 1
  store i32 %673, i32* %672, align 1
  %674 = getelementptr inbounds i8, i8* %669, i64 %630
  %675 = getelementptr inbounds i8, i8* %653, i64 16
  %676 = bitcast i8* %674 to i32*
  %677 = bitcast i8* %675 to i32*
  %678 = load i32, i32* %676, align 1
  store i32 %678, i32* %677, align 1
  %679 = getelementptr inbounds i8, i8* %674, i64 %630
  %680 = getelementptr inbounds i8, i8* %653, i64 20
  %681 = bitcast i8* %679 to i32*
  %682 = bitcast i8* %680 to i32*
  %683 = load i32, i32* %681, align 1
  store i32 %683, i32* %682, align 1
  %684 = getelementptr inbounds i8, i8* %679, i64 %630
  %685 = getelementptr inbounds i8, i8* %653, i64 24
  %686 = bitcast i8* %684 to i32*
  %687 = bitcast i8* %685 to i32*
  %688 = load i32, i32* %686, align 1
  store i32 %688, i32* %687, align 1
  %689 = getelementptr inbounds i8, i8* %684, i64 %630
  %690 = getelementptr inbounds i8, i8* %653, i64 28
  %691 = bitcast i8* %689 to i32*
  %692 = bitcast i8* %690 to i32*
  %693 = load i32, i32* %691, align 1
  store i32 %693, i32* %692, align 1
  %694 = getelementptr inbounds i8, i8* %689, i64 %630
  %695 = getelementptr inbounds i8, i8* %653, i64 32
  %696 = add nsw i32 %655, -8
  %697 = icmp eq i32 %696, 0
  br i1 %697, label %698, label %652

698:                                              ; preds = %652, %647
  %699 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 28, i64 2
  %700 = load i8*, i8** %699, align 8
  %701 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %48, align 8
  %702 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %701, i64 0, i32 11, i64 2
  %703 = load i32, i32* %702, align 4
  %704 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 2
  %705 = load i8, i8* %704, align 1
  %706 = sext i8 %705 to i32
  %707 = ashr i32 %50, %706
  %708 = mul nsw i32 %707, %703
  %709 = sext i32 %708 to i64
  %710 = getelementptr inbounds i8, i8* %700, i64 -4
  %711 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 2
  %712 = load i8, i8* %711, align 1
  %713 = sext i8 %712 to i32
  %714 = ashr i32 %605, %713
  %715 = load i32, i32* %52, align 8
  %716 = shl i32 %714, %715
  %717 = sext i32 %716 to i64
  %718 = getelementptr inbounds i8, i8* %710, i64 %709
  %719 = getelementptr inbounds i8, i8* %718, i64 %717
  %720 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %7, i64 %603, i64 2, i64 0
  %721 = ashr i32 %606, %706
  %722 = sext i32 %703 to i64
  %723 = add nsw i32 %721, -1
  %724 = and i32 %721, 7
  %725 = icmp eq i32 %724, 0
  br i1 %725, label %739, label %726

726:                                              ; preds = %698, %726
  %727 = phi i8* [ %735, %726 ], [ %720, %698 ]
  %728 = phi i8* [ %734, %726 ], [ %719, %698 ]
  %729 = phi i32 [ %736, %726 ], [ %721, %698 ]
  %730 = phi i32 [ %737, %726 ], [ %724, %698 ]
  %731 = bitcast i8* %728 to i32*
  %732 = bitcast i8* %727 to i32*
  %733 = load i32, i32* %731, align 1
  store i32 %733, i32* %732, align 1
  %734 = getelementptr inbounds i8, i8* %728, i64 %722
  %735 = getelementptr inbounds i8, i8* %727, i64 4
  %736 = add nsw i32 %729, -1
  %737 = add i32 %730, -1
  %738 = icmp eq i32 %737, 0
  br i1 %738, label %739, label %726, !llvm.loop !10

739:                                              ; preds = %726, %698
  %740 = phi i8* [ %720, %698 ], [ %735, %726 ]
  %741 = phi i8* [ %719, %698 ], [ %734, %726 ]
  %742 = phi i32 [ %721, %698 ], [ %736, %726 ]
  %743 = icmp ult i32 %723, 7
  br i1 %743, label %744, label %926

744:                                              ; preds = %739, %926, %599, %598
  %745 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 %282, i64 1
  %746 = load i8, i8* %745, align 1, !range !5
  %747 = icmp ne i8 %746, 0
  call void @_ZN7libgav110PostFilter16PrepareCdefBlockItEEviiiiPtlbPA256_Khb(%"class.libgav1::PostFilter"* %0, i32 %3, i32 %4, i32 %5, i32 %6, i16* %1, i64 68, i1 zeroext false, [256 x i8]* %284, i1 zeroext %747)
  %748 = icmp eq i8 %500, 0
  %749 = zext i1 %748 to i64
  %750 = shl nuw nsw i64 %749, 1
  %751 = icmp eq i8 %502, 0
  %752 = zext i1 %751 to i64
  %753 = or i64 %750, %752
  br label %754

754:                                              ; preds = %907, %744
  %755 = phi i64 [ 1, %744 ], [ %908, %907 ]
  %756 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 %755
  %757 = load i8, i8* %756, align 1
  %758 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 %755
  %759 = load i8, i8* %758, align 1
  %760 = sext i8 %757 to i32
  %761 = lshr i32 8, %760
  %762 = sext i8 %759 to i32
  %763 = lshr i32 8, %762
  %764 = getelementptr inbounds [3 x i32], [3 x i32]* %10, i64 0, i64 %755
  %765 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 %755
  %766 = getelementptr inbounds [3 x i8*], [3 x i8*]* %13, i64 0, i64 %755
  %767 = getelementptr inbounds [3 x i16*], [3 x i16*]* %14, i64 0, i64 %755
  %768 = sext i32 %761 to i64
  %769 = shl nsw i64 %768, 1
  %770 = sext i8 %757 to i64
  %771 = sext i8 %759 to i64
  %772 = xor i32 %760, 1
  %773 = getelementptr inbounds [3 x i32], [3 x i32]* %16, i64 0, i64 %755
  %774 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 %755
  %775 = getelementptr inbounds [3 x i32], [3 x i32]* %15, i64 0, i64 %755
  %776 = load i8*, i8** %765, align 8
  %777 = load i8*, i8** %766, align 8
  %778 = load i16*, i16** %767, align 8
  %779 = add nsw i32 %763, -1
  %780 = and i32 %763, 3
  %781 = icmp eq i32 %780, 0
  %782 = icmp ult i32 %779, 3
  br label %783

783:                                              ; preds = %892, %754
  %784 = phi i16* [ %778, %754 ], [ %904, %892 ]
  %785 = phi i8* [ %777, %754 ], [ %900, %892 ]
  %786 = phi i8* [ %776, %754 ], [ %896, %892 ]
  %787 = phi i32 [ 0, %754 ], [ %890, %892 ]
  %788 = phi i32 [ %5, %754 ], [ %905, %892 ]
  br label %789

789:                                              ; preds = %875, %783
  %790 = phi i32 [ %787, %783 ], [ %890, %875 ]
  %791 = phi i8* [ %786, %783 ], [ %880, %875 ]
  %792 = phi i8* [ %785, %783 ], [ %881, %875 ]
  %793 = phi i16* [ %784, %783 ], [ %886, %875 ]
  %794 = phi i32 [ %6, %783 ], [ %888, %875 ]
  %795 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %48, align 8
  %796 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %795, i64 0, i32 11, i64 %755
  %797 = load i32, i32* %796, align 4
  %798 = sext i32 %790 to i64
  %799 = getelementptr inbounds [64 x i8], [64 x i8]* %17, i64 0, i64 %798
  %800 = load i8, i8* %799, align 1
  %801 = and i8 %800, 8
  %802 = icmp eq i8 %801, 0
  br i1 %802, label %836, label %803

803:                                              ; preds = %789
  %804 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %318, align 8
  %805 = icmp eq %"class.libgav1::ThreadPool"* %804, null
  br i1 %805, label %806, label %875

806:                                              ; preds = %803
  %807 = sext i32 %797 to i64
  br i1 %781, label %818, label %808

808:                                              ; preds = %806, %808
  %809 = phi i8* [ %814, %808 ], [ %791, %806 ]
  %810 = phi i8* [ %813, %808 ], [ %792, %806 ]
  %811 = phi i32 [ %815, %808 ], [ %763, %806 ]
  %812 = phi i32 [ %816, %808 ], [ %780, %806 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %809, i8* align 1 %810, i64 %769, i1 false) #3
  %813 = getelementptr inbounds i8, i8* %810, i64 %807
  %814 = getelementptr inbounds i8, i8* %809, i64 %807
  %815 = add nsw i32 %811, -1
  %816 = add i32 %812, -1
  %817 = icmp eq i32 %816, 0
  br i1 %817, label %818, label %808, !llvm.loop !11

818:                                              ; preds = %808, %806
  %819 = phi i8* [ %791, %806 ], [ %814, %808 ]
  %820 = phi i8* [ %792, %806 ], [ %813, %808 ]
  %821 = phi i32 [ %763, %806 ], [ %815, %808 ]
  br i1 %782, label %875, label %822

822:                                              ; preds = %818, %822
  %823 = phi i8* [ %833, %822 ], [ %819, %818 ]
  %824 = phi i8* [ %832, %822 ], [ %820, %818 ]
  %825 = phi i32 [ %834, %822 ], [ %821, %818 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %823, i8* align 1 %824, i64 %769, i1 false) #3
  %826 = getelementptr inbounds i8, i8* %824, i64 %807
  %827 = getelementptr inbounds i8, i8* %823, i64 %807
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %827, i8* align 1 %826, i64 %769, i1 false) #3
  %828 = getelementptr inbounds i8, i8* %826, i64 %807
  %829 = getelementptr inbounds i8, i8* %827, i64 %807
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %829, i8* align 1 %828, i64 %769, i1 false) #3
  %830 = getelementptr inbounds i8, i8* %828, i64 %807
  %831 = getelementptr inbounds i8, i8* %829, i64 %807
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %831, i8* align 1 %830, i64 %769, i1 false) #3
  %832 = getelementptr inbounds i8, i8* %830, i64 %807
  %833 = getelementptr inbounds i8, i8* %831, i64 %807
  %834 = add nsw i32 %825, -4
  %835 = icmp eq i32 %834, 0
  br i1 %835, label %875, label %822

836:                                              ; preds = %789
  %837 = add nsw i32 %794, 4
  %838 = icmp sgt i32 %837, %323
  %839 = select i1 %838, i32 0, i32 %760
  br i1 %748, label %845, label %840

840:                                              ; preds = %836
  %841 = zext i8 %800 to i64
  %842 = getelementptr inbounds [2 x [2 x [8 x i8]]], [2 x [2 x [8 x i8]]]* @_ZN7libgav112_GLOBAL__N_116kCdefUvDirectionE, i64 0, i64 %770, i64 %771, i64 %841
  %843 = load i8, i8* %842, align 1
  %844 = zext i8 %843 to i32
  br label %845

845:                                              ; preds = %836, %840
  %846 = phi i32 [ %844, %840 ], [ 0, %836 ]
  %847 = icmp eq i32 %839, 0
  br i1 %847, label %862, label %848

848:                                              ; preds = %845
  %849 = add nsw i32 %790, 1
  %850 = sext i32 %849 to i64
  br i1 %748, label %856, label %851

851:                                              ; preds = %848
  %852 = getelementptr inbounds [64 x i8], [64 x i8]* %17, i64 0, i64 %850
  %853 = load i8, i8* %852, align 1
  %854 = icmp eq i8 %800, %853
  %855 = select i1 %854, i32 %839, i32 0
  br label %856

856:                                              ; preds = %848, %851
  %857 = phi i32 [ %855, %851 ], [ %839, %848 ]
  %858 = getelementptr inbounds [64 x i8], [64 x i8]* %17, i64 0, i64 %850
  %859 = load i8, i8* %858, align 1
  %860 = icmp eq i8 %859, 8
  %861 = select i1 %860, i32 0, i32 %857
  br label %862

862:                                              ; preds = %856, %845
  %863 = phi i32 [ 0, %845 ], [ %861, %856 ]
  %864 = or i32 %863, %772
  %865 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %321, align 8
  %866 = sext i32 %864 to i64
  %867 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %865, i64 0, i32 2, i64 %866, i64 %753
  %868 = load void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)** %867, align 8
  %869 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %289, align 8
  %870 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %869, i64 0, i32 55, i32 0
  %871 = load i8, i8* %870, align 1
  %872 = zext i8 %871 to i32
  %873 = add nsw i32 %872, -1
  %874 = sext i32 %797 to i64
  call void %868(i16* %793, i64 68, i32 %763, i32 %503, i32 %504, i32 %873, i32 %846, i8* %791, i64 %874) #3
  br label %875

875:                                              ; preds = %818, %822, %803, %862
  %876 = phi i32 [ 0, %803 ], [ %863, %862 ], [ 0, %822 ], [ 0, %818 ]
  %877 = load i32, i32* %773, align 4
  %878 = shl i32 %877, %876
  %879 = sext i32 %878 to i64
  %880 = getelementptr inbounds i8, i8* %791, i64 %879
  %881 = getelementptr inbounds i8, i8* %792, i64 %879
  %882 = sext i32 %877 to i64
  %883 = lshr i64 %882, 1
  %884 = zext i32 %876 to i64
  %885 = shl i64 %883, %884
  %886 = getelementptr inbounds i16, i16* %793, i64 %885
  %887 = shl i32 2, %876
  %888 = add nsw i32 %887, %794
  %889 = shl i32 1, %876
  %890 = add nsw i32 %889, %790
  %891 = icmp slt i32 %888, %323
  br i1 %891, label %789, label %892

892:                                              ; preds = %875
  %893 = load i32, i32* %764, align 4
  %894 = load i8*, i8** %765, align 8
  %895 = sext i32 %893 to i64
  %896 = getelementptr inbounds i8, i8* %894, i64 %895
  store i8* %896, i8** %765, align 8
  %897 = load i32, i32* %774, align 4
  %898 = load i8*, i8** %766, align 8
  %899 = sext i32 %897 to i64
  %900 = getelementptr inbounds i8, i8* %898, i64 %899
  store i8* %900, i8** %766, align 8
  %901 = load i32, i32* %775, align 4
  %902 = load i16*, i16** %767, align 8
  %903 = sext i32 %901 to i64
  %904 = getelementptr inbounds i16, i16* %902, i64 %903
  store i16* %904, i16** %767, align 8
  %905 = add nsw i32 %788, 2
  %906 = icmp slt i32 %905, %320
  br i1 %906, label %783, label %907

907:                                              ; preds = %892
  %908 = add nuw nsw i64 %755, 1
  %909 = icmp eq i64 %908, 3
  br i1 %909, label %910, label %754

910:                                              ; preds = %907, %595, %494
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %288) #3
  br label %911

911:                                              ; preds = %910, %170
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %44) #3
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %39) #3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #3
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %27) #3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23) #3
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %19) #3
  ret void

912:                                              ; preds = %590, %912
  %913 = phi i8* [ %923, %912 ], [ %591, %590 ]
  %914 = phi i8* [ %922, %912 ], [ %592, %590 ]
  %915 = phi i32 [ %924, %912 ], [ %593, %590 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %913, i8* align 1 %914, i64 %575, i1 false) #3
  %916 = getelementptr inbounds i8, i8* %914, i64 %576
  %917 = getelementptr inbounds i8, i8* %913, i64 %576
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %917, i8* align 1 %916, i64 %575, i1 false) #3
  %918 = getelementptr inbounds i8, i8* %916, i64 %576
  %919 = getelementptr inbounds i8, i8* %917, i64 %576
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %919, i8* align 1 %918, i64 %575, i1 false) #3
  %920 = getelementptr inbounds i8, i8* %918, i64 %576
  %921 = getelementptr inbounds i8, i8* %919, i64 %576
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %921, i8* align 1 %920, i64 %575, i1 false) #3
  %922 = getelementptr inbounds i8, i8* %920, i64 %576
  %923 = getelementptr inbounds i8, i8* %921, i64 %576
  %924 = add nsw i32 %915, -4
  %925 = icmp eq i32 %924, 0
  br i1 %925, label %595, label %912

926:                                              ; preds = %739, %926
  %927 = phi i8* [ %969, %926 ], [ %740, %739 ]
  %928 = phi i8* [ %968, %926 ], [ %741, %739 ]
  %929 = phi i32 [ %970, %926 ], [ %742, %739 ]
  %930 = bitcast i8* %928 to i32*
  %931 = bitcast i8* %927 to i32*
  %932 = load i32, i32* %930, align 1
  store i32 %932, i32* %931, align 1
  %933 = getelementptr inbounds i8, i8* %928, i64 %722
  %934 = getelementptr inbounds i8, i8* %927, i64 4
  %935 = bitcast i8* %933 to i32*
  %936 = bitcast i8* %934 to i32*
  %937 = load i32, i32* %935, align 1
  store i32 %937, i32* %936, align 1
  %938 = getelementptr inbounds i8, i8* %933, i64 %722
  %939 = getelementptr inbounds i8, i8* %927, i64 8
  %940 = bitcast i8* %938 to i32*
  %941 = bitcast i8* %939 to i32*
  %942 = load i32, i32* %940, align 1
  store i32 %942, i32* %941, align 1
  %943 = getelementptr inbounds i8, i8* %938, i64 %722
  %944 = getelementptr inbounds i8, i8* %927, i64 12
  %945 = bitcast i8* %943 to i32*
  %946 = bitcast i8* %944 to i32*
  %947 = load i32, i32* %945, align 1
  store i32 %947, i32* %946, align 1
  %948 = getelementptr inbounds i8, i8* %943, i64 %722
  %949 = getelementptr inbounds i8, i8* %927, i64 16
  %950 = bitcast i8* %948 to i32*
  %951 = bitcast i8* %949 to i32*
  %952 = load i32, i32* %950, align 1
  store i32 %952, i32* %951, align 1
  %953 = getelementptr inbounds i8, i8* %948, i64 %722
  %954 = getelementptr inbounds i8, i8* %927, i64 20
  %955 = bitcast i8* %953 to i32*
  %956 = bitcast i8* %954 to i32*
  %957 = load i32, i32* %955, align 1
  store i32 %957, i32* %956, align 1
  %958 = getelementptr inbounds i8, i8* %953, i64 %722
  %959 = getelementptr inbounds i8, i8* %927, i64 24
  %960 = bitcast i8* %958 to i32*
  %961 = bitcast i8* %959 to i32*
  %962 = load i32, i32* %960, align 1
  store i32 %962, i32* %961, align 1
  %963 = getelementptr inbounds i8, i8* %958, i64 %722
  %964 = getelementptr inbounds i8, i8* %927, i64 28
  %965 = bitcast i8* %963 to i32*
  %966 = bitcast i8* %964 to i32*
  %967 = load i32, i32* %965, align 1
  store i32 %967, i32* %966, align 1
  %968 = getelementptr inbounds i8, i8* %963, i64 %722
  %969 = getelementptr inbounds i8, i8* %927, i64 32
  %970 = add nsw i32 %929, -8
  %971 = icmp eq i32 %970, 0
  br i1 %971, label %744, label %926
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7libgav110PostFilter19ApplyCdefForOneUnitIhEEvPtiiiiiPA3_A256_hPA2_b(%"class.libgav1::PostFilter"*, i16*, i32, i32, i32, i32, i32, [3 x [256 x i8]]*, [2 x i8]*) local_unnamed_addr #0 comdat align 2 {
  %10 = alloca [3 x i32], align 4
  %11 = alloca [3 x i8*], align 16
  %12 = alloca [3 x i32], align 4
  %13 = alloca [3 x i8*], align 16
  %14 = alloca [3 x i16*], align 16
  %15 = alloca [3 x i32], align 4
  %16 = alloca [3 x i32], align 4
  %17 = alloca [64 x i8], align 16
  %18 = alloca i32, align 4
  %19 = alloca [8 x [8 x i8]], align 16
  %20 = bitcast [3 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %20) #3
  %21 = getelementptr inbounds [3 x i32], [3 x i32]* %10, i64 0, i64 0
  store i32 -1431655766, i32* %21, align 4
  %22 = getelementptr inbounds [3 x i32], [3 x i32]* %10, i64 0, i64 1
  store i32 -1431655766, i32* %22, align 4
  %23 = getelementptr inbounds [3 x i32], [3 x i32]* %10, i64 0, i64 2
  store i32 -1431655766, i32* %23, align 4
  %24 = bitcast [3 x i8*]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #3
  %25 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 0
  %26 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 1
  %27 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 2
  %28 = bitcast [3 x i32]* %12 to i8*
  %29 = bitcast [3 x i8*]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %28) #3
  %30 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 0
  store i32 -1431655766, i32* %30, align 4
  %31 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 1
  store i32 -1431655766, i32* %31, align 4
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 2
  store i32 -1431655766, i32* %32, align 4
  %33 = bitcast [3 x i8*]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %33) #3
  %34 = getelementptr inbounds [3 x i8*], [3 x i8*]* %13, i64 0, i64 0
  %35 = getelementptr inbounds [3 x i8*], [3 x i8*]* %13, i64 0, i64 1
  %36 = getelementptr inbounds [3 x i8*], [3 x i8*]* %13, i64 0, i64 2
  %37 = bitcast [3 x i16*]* %14 to i8*
  %38 = bitcast [3 x i8*]* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #3
  %39 = getelementptr inbounds [3 x i16*], [3 x i16*]* %14, i64 0, i64 0
  %40 = bitcast [3 x i32]* %15 to i8*
  %41 = bitcast [3 x i16*]* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %41, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %40) #3
  %42 = getelementptr inbounds [3 x i32], [3 x i32]* %15, i64 0, i64 0
  store i32 -1431655766, i32* %42, align 4
  %43 = getelementptr inbounds [3 x i32], [3 x i32]* %15, i64 0, i64 1
  store i32 -1431655766, i32* %43, align 4
  %44 = getelementptr inbounds [3 x i32], [3 x i32]* %15, i64 0, i64 2
  store i32 -1431655766, i32* %44, align 4
  %45 = bitcast [3 x i32]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %45) #3
  %46 = getelementptr inbounds [3 x i32], [3 x i32]* %16, i64 0, i64 0
  store i32 -1431655766, i32* %46, align 4
  %47 = getelementptr inbounds [3 x i32], [3 x i32]* %16, i64 0, i64 1
  store i32 -1431655766, i32* %47, align 4
  %48 = getelementptr inbounds [3 x i32], [3 x i32]* %16, i64 0, i64 2
  store i32 -1431655766, i32* %48, align 4
  %49 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 27
  %50 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %49, align 8
  %51 = shl i32 %5, 2
  %52 = shl i32 %6, 2
  %53 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 12
  %54 = load i32, i32* %53, align 8
  %55 = getelementptr inbounds i16, i16* %1, i64 138
  %56 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 11
  %57 = load i8, i8* %56, align 1
  %58 = sext i8 %57 to i64
  br label %59

59:                                               ; preds = %59, %9
  %60 = phi i64 [ %97, %59 ], [ 0, %9 ]
  %61 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 29, i64 %60
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %50, i64 0, i32 11, i64 %60
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 %60
  %66 = load i8, i8* %65, align 1
  %67 = sext i8 %66 to i32
  %68 = ashr i32 %51, %67
  %69 = mul nsw i32 %68, %64
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %62, i64 %70
  %72 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 %60
  %73 = load i8, i8* %72, align 1
  %74 = sext i8 %73 to i32
  %75 = ashr i32 %52, %74
  %76 = shl i32 %75, %54
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %71, i64 %77
  %79 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 %60
  store i8* %78, i8** %79, align 8
  %80 = lshr i32 8, %67
  %81 = mul nsw i32 %80, %64
  %82 = getelementptr inbounds [3 x i32], [3 x i32]* %10, i64 0, i64 %60
  store i32 %81, i32* %82, align 4
  %83 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 28, i64 %60
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds i8, i8* %84, i64 %70
  %86 = getelementptr inbounds i8, i8* %85, i64 %77
  %87 = getelementptr inbounds [3 x i8*], [3 x i8*]* %13, i64 0, i64 %60
  store i8* %86, i8** %87, align 8
  %88 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 %60
  store i32 %81, i32* %88, align 4
  %89 = icmp eq i64 %60, 2
  %90 = select i1 %89, i64 4624, i64 0
  %91 = getelementptr inbounds i16, i16* %55, i64 %90
  %92 = getelementptr inbounds [3 x i16*], [3 x i16*]* %14, i64 0, i64 %60
  store i16* %91, i16** %92, align 8
  %93 = mul nsw i32 %80, 68
  %94 = getelementptr inbounds [3 x i32], [3 x i32]* %15, i64 0, i64 %60
  store i32 %93, i32* %94, align 4
  %95 = lshr i32 8, %74
  %96 = getelementptr inbounds [3 x i32], [3 x i32]* %16, i64 0, i64 %60
  store i32 %95, i32* %96, align 4
  %97 = add nuw nsw i64 %60, 1
  %98 = icmp slt i64 %97, %58
  br i1 %98, label %59, label %99

99:                                               ; preds = %59
  %100 = lshr i32 %6, 4
  %101 = and i32 %100, 1
  %102 = xor i32 %101, 1
  %103 = icmp eq i32 %2, -1
  br i1 %103, label %104, label %173

104:                                              ; preds = %99
  %105 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 36
  %106 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %105, align 8
  %107 = icmp eq %"class.libgav1::ThreadPool"* %106, null
  br i1 %107, label %108, label %169

108:                                              ; preds = %104
  %109 = shl i32 %3, 2
  %110 = shl i32 %4, 2
  br label %111

111:                                              ; preds = %167, %108
  %112 = phi %"class.libgav1::YuvBuffer"* [ %50, %108 ], [ %168, %167 ]
  %113 = phi i64 [ 0, %108 ], [ %163, %167 ]
  %114 = getelementptr inbounds [3 x i8*], [3 x i8*]* %13, i64 0, i64 %113
  %115 = load i8*, i8** %114, align 8
  %116 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %112, i64 0, i32 11, i64 %113
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 %113
  %119 = load i8*, i8** %118, align 8
  %120 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 %113
  %121 = load i8, i8* %120, align 1
  %122 = sext i8 %121 to i32
  %123 = ashr i32 %109, %122
  %124 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 %113
  %125 = load i8, i8* %124, align 1
  %126 = sext i8 %125 to i32
  %127 = ashr i32 %110, %126
  %128 = sext i32 %123 to i64
  %129 = sext i32 %117 to i64
  %130 = add nsw i32 %127, -1
  %131 = and i32 %127, 3
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %143, label %133

133:                                              ; preds = %111, %133
  %134 = phi i8* [ %139, %133 ], [ %119, %111 ]
  %135 = phi i8* [ %138, %133 ], [ %115, %111 ]
  %136 = phi i32 [ %140, %133 ], [ %127, %111 ]
  %137 = phi i32 [ %141, %133 ], [ %131, %111 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %134, i8* align 1 %135, i64 %128, i1 false) #3
  %138 = getelementptr inbounds i8, i8* %135, i64 %129
  %139 = getelementptr inbounds i8, i8* %134, i64 %129
  %140 = add nsw i32 %136, -1
  %141 = add i32 %137, -1
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %133, !llvm.loop !12

143:                                              ; preds = %133, %111
  %144 = phi i8* [ %119, %111 ], [ %139, %133 ]
  %145 = phi i8* [ %115, %111 ], [ %138, %133 ]
  %146 = phi i32 [ %127, %111 ], [ %140, %133 ]
  %147 = icmp ult i32 %130, 3
  br i1 %147, label %162, label %148

148:                                              ; preds = %143, %148
  %149 = phi i8* [ %159, %148 ], [ %144, %143 ]
  %150 = phi i8* [ %158, %148 ], [ %145, %143 ]
  %151 = phi i32 [ %160, %148 ], [ %146, %143 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %149, i8* align 1 %150, i64 %128, i1 false) #3
  %152 = getelementptr inbounds i8, i8* %150, i64 %129
  %153 = getelementptr inbounds i8, i8* %149, i64 %129
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %153, i8* align 1 %152, i64 %128, i1 false) #3
  %154 = getelementptr inbounds i8, i8* %152, i64 %129
  %155 = getelementptr inbounds i8, i8* %153, i64 %129
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %155, i8* align 1 %154, i64 %128, i1 false) #3
  %156 = getelementptr inbounds i8, i8* %154, i64 %129
  %157 = getelementptr inbounds i8, i8* %155, i64 %129
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %157, i8* align 1 %156, i64 %128, i1 false) #3
  %158 = getelementptr inbounds i8, i8* %156, i64 %129
  %159 = getelementptr inbounds i8, i8* %157, i64 %129
  %160 = add nsw i32 %151, -4
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %148

162:                                              ; preds = %148, %143
  %163 = add nuw nsw i64 %113, 1
  %164 = load i8, i8* %56, align 1
  %165 = sext i8 %164 to i64
  %166 = icmp slt i64 %163, %165
  br i1 %166, label %167, label %169

167:                                              ; preds = %162
  %168 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %49, align 8
  br label %111

169:                                              ; preds = %162, %104
  %170 = zext i32 %102 to i64
  %171 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 %170, i64 0
  store i8 0, i8* %171, align 1
  %172 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 %170, i64 1
  store i8 0, i8* %172, align 1
  br label %1211

173:                                              ; preds = %99
  %174 = shl i32 %3, 2
  %175 = add nsw i32 %52, %174
  %176 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 6
  %177 = load i32, i32* %176, align 8
  %178 = icmp sge i32 %175, %177
  br i1 %178, label %279, label %179

179:                                              ; preds = %173
  %180 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 36
  %181 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %180, align 8
  %182 = icmp eq %"class.libgav1::ThreadPool"* %181, null
  br i1 %182, label %279, label %183

183:                                              ; preds = %179
  %184 = zext i32 %102 to i64
  %185 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 %184, i64 0
  store i8 1, i8* %185, align 1
  %186 = add nsw i32 %6, %3
  %187 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 28, i64 0
  %188 = load i8*, i8** %187, align 8
  %189 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %49, align 8
  %190 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %189, i64 0, i32 11, i64 0
  %191 = load i32, i32* %190, align 4
  %192 = shl i32 %186, 2
  %193 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 0
  %194 = load i8, i8* %193, align 1
  %195 = sext i8 %194 to i32
  %196 = ashr i32 %51, %195
  %197 = mul nsw i32 %196, %191
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds i8, i8* %188, i64 %198
  %200 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 0
  %201 = load i8, i8* %200, align 1
  %202 = sext i8 %201 to i32
  %203 = ashr i32 %192, %202
  %204 = load i32, i32* %53, align 8
  %205 = shl i32 %203, %204
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds i8, i8* %199, i64 %206
  %208 = getelementptr inbounds i8, i8* %207, i64 -2
  %209 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %7, i64 %184, i64 0, i64 0
  %210 = shl i32 %4, 2
  %211 = sext i32 %191 to i64
  %212 = add nsw i32 %210, -1
  %213 = and i32 %210, 4
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %228, label %215

215:                                              ; preds = %183, %215
  %216 = phi i8* [ %224, %215 ], [ %209, %183 ]
  %217 = phi i8* [ %223, %215 ], [ %208, %183 ]
  %218 = phi i32 [ %225, %215 ], [ %210, %183 ]
  %219 = phi i32 [ %226, %215 ], [ %213, %183 ]
  %220 = bitcast i8* %217 to i16*
  %221 = bitcast i8* %216 to i16*
  %222 = load i16, i16* %220, align 1
  store i16 %222, i16* %221, align 1
  %223 = getelementptr inbounds i8, i8* %217, i64 %211
  %224 = getelementptr inbounds i8, i8* %216, i64 2
  %225 = add nsw i32 %218, -1
  %226 = add i32 %219, -1
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %228, label %215, !llvm.loop !13

228:                                              ; preds = %215, %183
  %229 = phi i8* [ %209, %183 ], [ %224, %215 ]
  %230 = phi i8* [ %208, %183 ], [ %223, %215 ]
  %231 = phi i32 [ %210, %183 ], [ %225, %215 ]
  %232 = icmp ult i32 %212, 7
  br i1 %232, label %279, label %233

233:                                              ; preds = %228, %233
  %234 = phi i8* [ %276, %233 ], [ %229, %228 ]
  %235 = phi i8* [ %275, %233 ], [ %230, %228 ]
  %236 = phi i32 [ %277, %233 ], [ %231, %228 ]
  %237 = bitcast i8* %235 to i16*
  %238 = bitcast i8* %234 to i16*
  %239 = load i16, i16* %237, align 1
  store i16 %239, i16* %238, align 1
  %240 = getelementptr inbounds i8, i8* %235, i64 %211
  %241 = getelementptr inbounds i8, i8* %234, i64 2
  %242 = bitcast i8* %240 to i16*
  %243 = bitcast i8* %241 to i16*
  %244 = load i16, i16* %242, align 1
  store i16 %244, i16* %243, align 1
  %245 = getelementptr inbounds i8, i8* %240, i64 %211
  %246 = getelementptr inbounds i8, i8* %234, i64 4
  %247 = bitcast i8* %245 to i16*
  %248 = bitcast i8* %246 to i16*
  %249 = load i16, i16* %247, align 1
  store i16 %249, i16* %248, align 1
  %250 = getelementptr inbounds i8, i8* %245, i64 %211
  %251 = getelementptr inbounds i8, i8* %234, i64 6
  %252 = bitcast i8* %250 to i16*
  %253 = bitcast i8* %251 to i16*
  %254 = load i16, i16* %252, align 1
  store i16 %254, i16* %253, align 1
  %255 = getelementptr inbounds i8, i8* %250, i64 %211
  %256 = getelementptr inbounds i8, i8* %234, i64 8
  %257 = bitcast i8* %255 to i16*
  %258 = bitcast i8* %256 to i16*
  %259 = load i16, i16* %257, align 1
  store i16 %259, i16* %258, align 1
  %260 = getelementptr inbounds i8, i8* %255, i64 %211
  %261 = getelementptr inbounds i8, i8* %234, i64 10
  %262 = bitcast i8* %260 to i16*
  %263 = bitcast i8* %261 to i16*
  %264 = load i16, i16* %262, align 1
  store i16 %264, i16* %263, align 1
  %265 = getelementptr inbounds i8, i8* %260, i64 %211
  %266 = getelementptr inbounds i8, i8* %234, i64 12
  %267 = bitcast i8* %265 to i16*
  %268 = bitcast i8* %266 to i16*
  %269 = load i16, i16* %267, align 1
  store i16 %269, i16* %268, align 1
  %270 = getelementptr inbounds i8, i8* %265, i64 %211
  %271 = getelementptr inbounds i8, i8* %234, i64 14
  %272 = bitcast i8* %270 to i16*
  %273 = bitcast i8* %271 to i16*
  %274 = load i16, i16* %272, align 1
  store i16 %274, i16* %273, align 1
  %275 = getelementptr inbounds i8, i8* %270, i64 %211
  %276 = getelementptr inbounds i8, i8* %234, i64 16
  %277 = add nsw i32 %236, -8
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %279, label %233

279:                                              ; preds = %228, %233, %179, %173
  %280 = icmp eq [3 x [256 x i8]]* %7, null
  %281 = zext i32 %101 to i64
  %282 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %7, i64 %281, i64 0
  %283 = select i1 %280, [256 x i8]* null, [256 x i8]* %282
  %284 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 %281, i64 0
  %285 = load i8, i8* %284, align 1, !range !5
  %286 = icmp ne i8 %285, 0
  tail call void @_ZN7libgav110PostFilter16PrepareCdefBlockIhEEviiiiPtlbPA256_Khb(%"class.libgav1::PostFilter"* %0, i32 %3, i32 %4, i32 %5, i32 %6, i16* %1, i64 68, i1 zeroext true, [256 x i8]* %283, i1 zeroext %286)
  %287 = getelementptr inbounds [64 x i8], [64 x i8]* %17, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %287) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %287, i8 -86, i64 64, i1 false)
  %288 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 1
  %289 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %288, align 8
  %290 = sext i32 %2 to i64
  %291 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %289, i64 0, i32 55, i32 2, i64 %290
  %292 = load i8, i8* %291, align 1
  %293 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %289, i64 0, i32 55, i32 3, i64 %290
  %294 = load i8, i8* %293, align 1
  %295 = zext i8 %294 to i32
  %296 = icmp eq i8 %294, 0
  %297 = zext i1 %296 to i64
  %298 = zext i8 %292 to i32
  %299 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %289, i64 0, i32 55, i32 4, i64 %290
  %300 = load i8, i8* %299, align 1
  %301 = or i8 %300, %292
  %302 = icmp eq i8 %301, 0
  %303 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 25
  %304 = load %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::BlockParametersHolder"** %303, align 8
  %305 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %304, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %306 = load %"struct.libgav1::BlockParameters"**, %"struct.libgav1::BlockParameters"*** %305, align 8
  %307 = getelementptr inbounds %"class.libgav1::BlockParametersHolder", %"class.libgav1::BlockParametersHolder"* %304, i64 0, i32 1
  %308 = load i32, i32* %307, align 4
  %309 = mul nsw i32 %308, %5
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %306, i64 %310
  %312 = sext i32 %6 to i64
  %313 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %311, i64 %312
  %314 = sext i32 %308 to i64
  %315 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %313, i64 %314
  %316 = shl i32 %308, 1
  %317 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 36
  %318 = bitcast i32* %18 to i8*
  %319 = add nsw i32 %5, %4
  %320 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 0, i64 0
  %321 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 3
  %322 = icmp eq i8 %292, 0
  %323 = add nsw i32 %6, %3
  %324 = sext i32 %316 to i64
  %325 = load i8*, i8** %25, align 16
  %326 = load i8*, i8** %34, align 16
  %327 = load i16*, i16** %39, align 16
  %328 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 0, i64 0
  %329 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 0, i64 1
  %330 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 0, i64 2
  %331 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 0, i64 3
  %332 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 0, i64 4
  %333 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 0, i64 5
  %334 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 0, i64 6
  %335 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 0, i64 7
  %336 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 1, i64 0
  %337 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 1, i64 1
  %338 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 1, i64 2
  %339 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 1, i64 3
  %340 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 1, i64 4
  %341 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 1, i64 5
  %342 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 1, i64 6
  %343 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 1, i64 7
  %344 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 2, i64 0
  %345 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 2, i64 1
  %346 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 2, i64 2
  %347 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 2, i64 3
  %348 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 2, i64 4
  %349 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 2, i64 5
  %350 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 2, i64 6
  %351 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 2, i64 7
  %352 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 3, i64 0
  %353 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 3, i64 1
  %354 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 3, i64 2
  %355 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 3, i64 3
  %356 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 3, i64 4
  %357 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 3, i64 5
  %358 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 3, i64 6
  %359 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 3, i64 7
  %360 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 4, i64 0
  %361 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 4, i64 1
  %362 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 4, i64 2
  %363 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 4, i64 3
  %364 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 4, i64 4
  %365 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 4, i64 5
  %366 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 4, i64 6
  %367 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 4, i64 7
  %368 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 5, i64 0
  %369 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 5, i64 1
  %370 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 5, i64 2
  %371 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 5, i64 3
  %372 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 5, i64 4
  %373 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 5, i64 5
  %374 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 5, i64 6
  %375 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 5, i64 7
  %376 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 6, i64 0
  %377 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 6, i64 1
  %378 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 6, i64 2
  %379 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 6, i64 3
  %380 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 6, i64 4
  %381 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 6, i64 5
  %382 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 6, i64 6
  %383 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 6, i64 7
  %384 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 7, i64 0
  %385 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 7, i64 1
  %386 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 7, i64 2
  %387 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 7, i64 3
  %388 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 7, i64 4
  %389 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 7, i64 5
  %390 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 7, i64 6
  %391 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %19, i64 0, i64 7, i64 7
  br label %392

392:                                              ; preds = %783, %279
  %393 = phi i16* [ %327, %279 ], [ %795, %783 ]
  %394 = phi i8* [ %326, %279 ], [ %791, %783 ]
  %395 = phi i8* [ %325, %279 ], [ %787, %783 ]
  %396 = phi %"struct.libgav1::BlockParameters"** [ %313, %279 ], [ %796, %783 ]
  %397 = phi %"struct.libgav1::BlockParameters"** [ %315, %279 ], [ %797, %783 ]
  %398 = phi i32 [ %5, %279 ], [ %400, %783 ]
  %399 = phi i64 [ 0, %279 ], [ %781, %783 ]
  %400 = add nsw i32 %398, 2
  %401 = icmp slt i32 %400, %319
  %402 = shl i64 %399, 32
  %403 = ashr exact i64 %402, 32
  br label %404

404:                                              ; preds = %772, %392
  %405 = phi i64 [ %781, %772 ], [ %403, %392 ]
  %406 = phi i8* [ %775, %772 ], [ %395, %392 ]
  %407 = phi i8* [ %776, %772 ], [ %394, %392 ]
  %408 = phi i16* [ %777, %772 ], [ %393, %392 ]
  %409 = phi %"struct.libgav1::BlockParameters"** [ %778, %772 ], [ %396, %392 ]
  %410 = phi %"struct.libgav1::BlockParameters"** [ %779, %772 ], [ %397, %392 ]
  %411 = phi i32 [ %780, %772 ], [ %6, %392 ]
  %412 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %49, align 8
  %413 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %412, i64 0, i32 11, i64 0
  %414 = load i32, i32* %413, align 4
  %415 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %409, align 8
  %416 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %415, i64 0, i32 1
  %417 = load i8, i8* %416, align 1, !range !5
  %418 = icmp eq i8 %417, 0
  br i1 %418, label %430, label %419

419:                                              ; preds = %404
  %420 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %409, i64 1
  %421 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %420, align 8
  %422 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %421, i64 0, i32 1
  %423 = load i8, i8* %422, align 1, !range !5
  %424 = icmp eq i8 %423, 0
  br i1 %424, label %430, label %425

425:                                              ; preds = %419
  %426 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %410, align 8
  %427 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %426, i64 0, i32 1
  %428 = load i8, i8* %427, align 1, !range !5
  %429 = icmp eq i8 %428, 0
  br i1 %429, label %430, label %432

430:                                              ; preds = %425, %419, %404
  %431 = getelementptr inbounds [64 x i8], [64 x i8]* %17, i64 0, i64 %405
  br label %482

432:                                              ; preds = %425
  %433 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %410, i64 1
  %434 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %433, align 8
  %435 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %434, i64 0, i32 1
  %436 = load i8, i8* %435, align 1, !range !5
  %437 = icmp eq i8 %436, 0
  %438 = getelementptr inbounds [64 x i8], [64 x i8]* %17, i64 0, i64 %405
  br i1 %437, label %482, label %439

439:                                              ; preds = %432
  store i8 8, i8* %438, align 1
  %440 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %317, align 8
  %441 = icmp eq %"class.libgav1::ThreadPool"* %440, null
  br i1 %441, label %442, label %772

442:                                              ; preds = %439
  %443 = sext i32 %414 to i64
  %444 = bitcast i8* %407 to i64*
  %445 = bitcast i8* %406 to i64*
  %446 = load i64, i64* %444, align 1
  store i64 %446, i64* %445, align 1
  %447 = getelementptr inbounds i8, i8* %407, i64 %443
  %448 = getelementptr inbounds i8, i8* %406, i64 %443
  %449 = bitcast i8* %447 to i64*
  %450 = bitcast i8* %448 to i64*
  %451 = load i64, i64* %449, align 1
  store i64 %451, i64* %450, align 1
  %452 = getelementptr inbounds i8, i8* %447, i64 %443
  %453 = getelementptr inbounds i8, i8* %448, i64 %443
  %454 = bitcast i8* %452 to i64*
  %455 = bitcast i8* %453 to i64*
  %456 = load i64, i64* %454, align 1
  store i64 %456, i64* %455, align 1
  %457 = getelementptr inbounds i8, i8* %452, i64 %443
  %458 = getelementptr inbounds i8, i8* %453, i64 %443
  %459 = bitcast i8* %457 to i64*
  %460 = bitcast i8* %458 to i64*
  %461 = load i64, i64* %459, align 1
  store i64 %461, i64* %460, align 1
  %462 = getelementptr inbounds i8, i8* %457, i64 %443
  %463 = getelementptr inbounds i8, i8* %458, i64 %443
  %464 = bitcast i8* %462 to i64*
  %465 = bitcast i8* %463 to i64*
  %466 = load i64, i64* %464, align 1
  store i64 %466, i64* %465, align 1
  %467 = getelementptr inbounds i8, i8* %462, i64 %443
  %468 = getelementptr inbounds i8, i8* %463, i64 %443
  %469 = bitcast i8* %467 to i64*
  %470 = bitcast i8* %468 to i64*
  %471 = load i64, i64* %469, align 1
  store i64 %471, i64* %470, align 1
  %472 = getelementptr inbounds i8, i8* %467, i64 %443
  %473 = getelementptr inbounds i8, i8* %468, i64 %443
  %474 = bitcast i8* %472 to i64*
  %475 = bitcast i8* %473 to i64*
  %476 = load i64, i64* %474, align 1
  store i64 %476, i64* %475, align 1
  %477 = getelementptr inbounds i8, i8* %472, i64 %443
  %478 = getelementptr inbounds i8, i8* %473, i64 %443
  %479 = bitcast i8* %477 to i64*
  %480 = bitcast i8* %478 to i64*
  %481 = load i64, i64* %479, align 1
  store i64 %481, i64* %480, align 1
  br label %772

482:                                              ; preds = %432, %430
  %483 = phi i8* [ %431, %430 ], [ %438, %432 ]
  store i8 0, i8* %483, align 1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %318) #3
  store i32 0, i32* %18, align 4
  br i1 %302, label %688, label %484

484:                                              ; preds = %482
  %485 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %317, align 8
  %486 = icmp eq %"class.libgav1::ThreadPool"* %485, null
  %487 = or i1 %486, %401
  br i1 %487, label %488, label %493

488:                                              ; preds = %484
  %489 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %321, align 8
  %490 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %489, i64 0, i32 1
  %491 = load void (i8*, i64, i8*, i32*)*, void (i8*, i64, i8*, i32*)** %490, align 8
  %492 = sext i32 %414 to i64
  call void %491(i8* %407, i64 %492, i8* %483, i32* nonnull %18) #3
  br label %688

493:                                              ; preds = %484
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %320) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %320, i8 -86, i64 64, i1 false)
  %494 = load i16, i16* %408, align 2
  %495 = trunc i16 %494 to i8
  store i8 %495, i8* %328, align 16
  %496 = getelementptr inbounds i16, i16* %408, i64 1
  %497 = load i16, i16* %496, align 2
  %498 = trunc i16 %497 to i8
  store i8 %498, i8* %329, align 1
  %499 = getelementptr inbounds i16, i16* %408, i64 2
  %500 = load i16, i16* %499, align 2
  %501 = trunc i16 %500 to i8
  store i8 %501, i8* %330, align 2
  %502 = getelementptr inbounds i16, i16* %408, i64 3
  %503 = load i16, i16* %502, align 2
  %504 = trunc i16 %503 to i8
  store i8 %504, i8* %331, align 1
  %505 = getelementptr inbounds i16, i16* %408, i64 4
  %506 = load i16, i16* %505, align 2
  %507 = trunc i16 %506 to i8
  store i8 %507, i8* %332, align 4
  %508 = getelementptr inbounds i16, i16* %408, i64 5
  %509 = load i16, i16* %508, align 2
  %510 = trunc i16 %509 to i8
  store i8 %510, i8* %333, align 1
  %511 = getelementptr inbounds i16, i16* %408, i64 6
  %512 = load i16, i16* %511, align 2
  %513 = trunc i16 %512 to i8
  store i8 %513, i8* %334, align 2
  %514 = getelementptr inbounds i16, i16* %408, i64 7
  %515 = load i16, i16* %514, align 2
  %516 = trunc i16 %515 to i8
  store i8 %516, i8* %335, align 1
  %517 = getelementptr inbounds i16, i16* %408, i64 68
  %518 = load i16, i16* %517, align 2
  %519 = trunc i16 %518 to i8
  store i8 %519, i8* %336, align 8
  %520 = getelementptr inbounds i16, i16* %408, i64 69
  %521 = load i16, i16* %520, align 2
  %522 = trunc i16 %521 to i8
  store i8 %522, i8* %337, align 1
  %523 = getelementptr inbounds i16, i16* %408, i64 70
  %524 = load i16, i16* %523, align 2
  %525 = trunc i16 %524 to i8
  store i8 %525, i8* %338, align 2
  %526 = getelementptr inbounds i16, i16* %408, i64 71
  %527 = load i16, i16* %526, align 2
  %528 = trunc i16 %527 to i8
  store i8 %528, i8* %339, align 1
  %529 = getelementptr inbounds i16, i16* %408, i64 72
  %530 = load i16, i16* %529, align 2
  %531 = trunc i16 %530 to i8
  store i8 %531, i8* %340, align 4
  %532 = getelementptr inbounds i16, i16* %408, i64 73
  %533 = load i16, i16* %532, align 2
  %534 = trunc i16 %533 to i8
  store i8 %534, i8* %341, align 1
  %535 = getelementptr inbounds i16, i16* %408, i64 74
  %536 = load i16, i16* %535, align 2
  %537 = trunc i16 %536 to i8
  store i8 %537, i8* %342, align 2
  %538 = getelementptr inbounds i16, i16* %408, i64 75
  %539 = load i16, i16* %538, align 2
  %540 = trunc i16 %539 to i8
  store i8 %540, i8* %343, align 1
  %541 = getelementptr inbounds i16, i16* %408, i64 136
  %542 = load i16, i16* %541, align 2
  %543 = trunc i16 %542 to i8
  store i8 %543, i8* %344, align 16
  %544 = getelementptr inbounds i16, i16* %408, i64 137
  %545 = load i16, i16* %544, align 2
  %546 = trunc i16 %545 to i8
  store i8 %546, i8* %345, align 1
  %547 = getelementptr inbounds i16, i16* %408, i64 138
  %548 = load i16, i16* %547, align 2
  %549 = trunc i16 %548 to i8
  store i8 %549, i8* %346, align 2
  %550 = getelementptr inbounds i16, i16* %408, i64 139
  %551 = load i16, i16* %550, align 2
  %552 = trunc i16 %551 to i8
  store i8 %552, i8* %347, align 1
  %553 = getelementptr inbounds i16, i16* %408, i64 140
  %554 = load i16, i16* %553, align 2
  %555 = trunc i16 %554 to i8
  store i8 %555, i8* %348, align 4
  %556 = getelementptr inbounds i16, i16* %408, i64 141
  %557 = load i16, i16* %556, align 2
  %558 = trunc i16 %557 to i8
  store i8 %558, i8* %349, align 1
  %559 = getelementptr inbounds i16, i16* %408, i64 142
  %560 = load i16, i16* %559, align 2
  %561 = trunc i16 %560 to i8
  store i8 %561, i8* %350, align 2
  %562 = getelementptr inbounds i16, i16* %408, i64 143
  %563 = load i16, i16* %562, align 2
  %564 = trunc i16 %563 to i8
  store i8 %564, i8* %351, align 1
  %565 = getelementptr inbounds i16, i16* %408, i64 204
  %566 = load i16, i16* %565, align 2
  %567 = trunc i16 %566 to i8
  store i8 %567, i8* %352, align 8
  %568 = getelementptr inbounds i16, i16* %408, i64 205
  %569 = load i16, i16* %568, align 2
  %570 = trunc i16 %569 to i8
  store i8 %570, i8* %353, align 1
  %571 = getelementptr inbounds i16, i16* %408, i64 206
  %572 = load i16, i16* %571, align 2
  %573 = trunc i16 %572 to i8
  store i8 %573, i8* %354, align 2
  %574 = getelementptr inbounds i16, i16* %408, i64 207
  %575 = load i16, i16* %574, align 2
  %576 = trunc i16 %575 to i8
  store i8 %576, i8* %355, align 1
  %577 = getelementptr inbounds i16, i16* %408, i64 208
  %578 = load i16, i16* %577, align 2
  %579 = trunc i16 %578 to i8
  store i8 %579, i8* %356, align 4
  %580 = getelementptr inbounds i16, i16* %408, i64 209
  %581 = load i16, i16* %580, align 2
  %582 = trunc i16 %581 to i8
  store i8 %582, i8* %357, align 1
  %583 = getelementptr inbounds i16, i16* %408, i64 210
  %584 = load i16, i16* %583, align 2
  %585 = trunc i16 %584 to i8
  store i8 %585, i8* %358, align 2
  %586 = getelementptr inbounds i16, i16* %408, i64 211
  %587 = load i16, i16* %586, align 2
  %588 = trunc i16 %587 to i8
  store i8 %588, i8* %359, align 1
  %589 = getelementptr inbounds i16, i16* %408, i64 272
  %590 = load i16, i16* %589, align 2
  %591 = trunc i16 %590 to i8
  store i8 %591, i8* %360, align 16
  %592 = getelementptr inbounds i16, i16* %408, i64 273
  %593 = load i16, i16* %592, align 2
  %594 = trunc i16 %593 to i8
  store i8 %594, i8* %361, align 1
  %595 = getelementptr inbounds i16, i16* %408, i64 274
  %596 = load i16, i16* %595, align 2
  %597 = trunc i16 %596 to i8
  store i8 %597, i8* %362, align 2
  %598 = getelementptr inbounds i16, i16* %408, i64 275
  %599 = load i16, i16* %598, align 2
  %600 = trunc i16 %599 to i8
  store i8 %600, i8* %363, align 1
  %601 = getelementptr inbounds i16, i16* %408, i64 276
  %602 = load i16, i16* %601, align 2
  %603 = trunc i16 %602 to i8
  store i8 %603, i8* %364, align 4
  %604 = getelementptr inbounds i16, i16* %408, i64 277
  %605 = load i16, i16* %604, align 2
  %606 = trunc i16 %605 to i8
  store i8 %606, i8* %365, align 1
  %607 = getelementptr inbounds i16, i16* %408, i64 278
  %608 = load i16, i16* %607, align 2
  %609 = trunc i16 %608 to i8
  store i8 %609, i8* %366, align 2
  %610 = getelementptr inbounds i16, i16* %408, i64 279
  %611 = load i16, i16* %610, align 2
  %612 = trunc i16 %611 to i8
  store i8 %612, i8* %367, align 1
  %613 = getelementptr inbounds i16, i16* %408, i64 340
  %614 = load i16, i16* %613, align 2
  %615 = trunc i16 %614 to i8
  store i8 %615, i8* %368, align 8
  %616 = getelementptr inbounds i16, i16* %408, i64 341
  %617 = load i16, i16* %616, align 2
  %618 = trunc i16 %617 to i8
  store i8 %618, i8* %369, align 1
  %619 = getelementptr inbounds i16, i16* %408, i64 342
  %620 = load i16, i16* %619, align 2
  %621 = trunc i16 %620 to i8
  store i8 %621, i8* %370, align 2
  %622 = getelementptr inbounds i16, i16* %408, i64 343
  %623 = load i16, i16* %622, align 2
  %624 = trunc i16 %623 to i8
  store i8 %624, i8* %371, align 1
  %625 = getelementptr inbounds i16, i16* %408, i64 344
  %626 = load i16, i16* %625, align 2
  %627 = trunc i16 %626 to i8
  store i8 %627, i8* %372, align 4
  %628 = getelementptr inbounds i16, i16* %408, i64 345
  %629 = load i16, i16* %628, align 2
  %630 = trunc i16 %629 to i8
  store i8 %630, i8* %373, align 1
  %631 = getelementptr inbounds i16, i16* %408, i64 346
  %632 = load i16, i16* %631, align 2
  %633 = trunc i16 %632 to i8
  store i8 %633, i8* %374, align 2
  %634 = getelementptr inbounds i16, i16* %408, i64 347
  %635 = load i16, i16* %634, align 2
  %636 = trunc i16 %635 to i8
  store i8 %636, i8* %375, align 1
  %637 = getelementptr inbounds i16, i16* %408, i64 408
  %638 = load i16, i16* %637, align 2
  %639 = trunc i16 %638 to i8
  store i8 %639, i8* %376, align 16
  %640 = getelementptr inbounds i16, i16* %408, i64 409
  %641 = load i16, i16* %640, align 2
  %642 = trunc i16 %641 to i8
  store i8 %642, i8* %377, align 1
  %643 = getelementptr inbounds i16, i16* %408, i64 410
  %644 = load i16, i16* %643, align 2
  %645 = trunc i16 %644 to i8
  store i8 %645, i8* %378, align 2
  %646 = getelementptr inbounds i16, i16* %408, i64 411
  %647 = load i16, i16* %646, align 2
  %648 = trunc i16 %647 to i8
  store i8 %648, i8* %379, align 1
  %649 = getelementptr inbounds i16, i16* %408, i64 412
  %650 = load i16, i16* %649, align 2
  %651 = trunc i16 %650 to i8
  store i8 %651, i8* %380, align 4
  %652 = getelementptr inbounds i16, i16* %408, i64 413
  %653 = load i16, i16* %652, align 2
  %654 = trunc i16 %653 to i8
  store i8 %654, i8* %381, align 1
  %655 = getelementptr inbounds i16, i16* %408, i64 414
  %656 = load i16, i16* %655, align 2
  %657 = trunc i16 %656 to i8
  store i8 %657, i8* %382, align 2
  %658 = getelementptr inbounds i16, i16* %408, i64 415
  %659 = load i16, i16* %658, align 2
  %660 = trunc i16 %659 to i8
  store i8 %660, i8* %383, align 1
  %661 = getelementptr inbounds i16, i16* %408, i64 476
  %662 = load i16, i16* %661, align 2
  %663 = trunc i16 %662 to i8
  store i8 %663, i8* %384, align 8
  %664 = getelementptr inbounds i16, i16* %408, i64 477
  %665 = load i16, i16* %664, align 2
  %666 = trunc i16 %665 to i8
  store i8 %666, i8* %385, align 1
  %667 = getelementptr inbounds i16, i16* %408, i64 478
  %668 = load i16, i16* %667, align 2
  %669 = trunc i16 %668 to i8
  store i8 %669, i8* %386, align 2
  %670 = getelementptr inbounds i16, i16* %408, i64 479
  %671 = load i16, i16* %670, align 2
  %672 = trunc i16 %671 to i8
  store i8 %672, i8* %387, align 1
  %673 = getelementptr inbounds i16, i16* %408, i64 480
  %674 = load i16, i16* %673, align 2
  %675 = trunc i16 %674 to i8
  store i8 %675, i8* %388, align 4
  %676 = getelementptr inbounds i16, i16* %408, i64 481
  %677 = load i16, i16* %676, align 2
  %678 = trunc i16 %677 to i8
  store i8 %678, i8* %389, align 1
  %679 = getelementptr inbounds i16, i16* %408, i64 482
  %680 = load i16, i16* %679, align 2
  %681 = trunc i16 %680 to i8
  store i8 %681, i8* %390, align 2
  %682 = getelementptr inbounds i16, i16* %408, i64 483
  %683 = load i16, i16* %682, align 2
  %684 = trunc i16 %683 to i8
  store i8 %684, i8* %391, align 1
  %685 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %321, align 8
  %686 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %685, i64 0, i32 1
  %687 = load void (i8*, i64, i8*, i32*)*, void (i8*, i64, i8*, i32*)** %686, align 8
  call void %687(i8* nonnull %320, i64 8, i8* %483, i32* nonnull %18) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %320) #3
  br label %688

688:                                              ; preds = %482, %488, %493
  br i1 %322, label %692, label %689

689:                                              ; preds = %688
  %690 = load i8, i8* %483, align 1
  %691 = zext i8 %690 to i32
  br label %692

692:                                              ; preds = %688, %689
  %693 = phi i32 [ %691, %689 ], [ 0, %688 ]
  %694 = load i32, i32* %18, align 4
  %695 = icmp ugt i32 %694, 63
  br i1 %695, label %696, label %702

696:                                              ; preds = %692
  %697 = ashr i32 %694, 6
  %698 = call i32 @llvm.ctlz.i32(i32 %697, i1 true) #3, !range !6
  %699 = xor i32 %698, 31
  %700 = icmp ult i32 %699, 12
  %701 = select i1 %700, i32 %699, i32 12
  br label %704

702:                                              ; preds = %692
  %703 = icmp eq i32 %694, 0
  br i1 %703, label %710, label %704

704:                                              ; preds = %696, %702
  %705 = phi i32 [ %701, %696 ], [ 0, %702 ]
  %706 = add nuw nsw i32 %705, 4
  %707 = mul nuw nsw i32 %706, %298
  %708 = add nuw nsw i32 %707, 8
  %709 = lshr i32 %708, 4
  br label %710

710:                                              ; preds = %702, %704
  %711 = phi i32 [ %709, %704 ], [ 0, %702 ]
  %712 = and i32 %711, 255
  %713 = or i32 %712, %295
  %714 = icmp eq i32 %713, 0
  br i1 %714, label %715, label %758

715:                                              ; preds = %710
  %716 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %317, align 8
  %717 = icmp eq %"class.libgav1::ThreadPool"* %716, null
  br i1 %717, label %718, label %771

718:                                              ; preds = %715
  %719 = sext i32 %414 to i64
  %720 = bitcast i8* %407 to i64*
  %721 = bitcast i8* %406 to i64*
  %722 = load i64, i64* %720, align 1
  store i64 %722, i64* %721, align 1
  %723 = getelementptr inbounds i8, i8* %407, i64 %719
  %724 = getelementptr inbounds i8, i8* %406, i64 %719
  %725 = bitcast i8* %723 to i64*
  %726 = bitcast i8* %724 to i64*
  %727 = load i64, i64* %725, align 1
  store i64 %727, i64* %726, align 1
  %728 = getelementptr inbounds i8, i8* %723, i64 %719
  %729 = getelementptr inbounds i8, i8* %724, i64 %719
  %730 = bitcast i8* %728 to i64*
  %731 = bitcast i8* %729 to i64*
  %732 = load i64, i64* %730, align 1
  store i64 %732, i64* %731, align 1
  %733 = getelementptr inbounds i8, i8* %728, i64 %719
  %734 = getelementptr inbounds i8, i8* %729, i64 %719
  %735 = bitcast i8* %733 to i64*
  %736 = bitcast i8* %734 to i64*
  %737 = load i64, i64* %735, align 1
  store i64 %737, i64* %736, align 1
  %738 = getelementptr inbounds i8, i8* %733, i64 %719
  %739 = getelementptr inbounds i8, i8* %734, i64 %719
  %740 = bitcast i8* %738 to i64*
  %741 = bitcast i8* %739 to i64*
  %742 = load i64, i64* %740, align 1
  store i64 %742, i64* %741, align 1
  %743 = getelementptr inbounds i8, i8* %738, i64 %719
  %744 = getelementptr inbounds i8, i8* %739, i64 %719
  %745 = bitcast i8* %743 to i64*
  %746 = bitcast i8* %744 to i64*
  %747 = load i64, i64* %745, align 1
  store i64 %747, i64* %746, align 1
  %748 = getelementptr inbounds i8, i8* %743, i64 %719
  %749 = getelementptr inbounds i8, i8* %744, i64 %719
  %750 = bitcast i8* %748 to i64*
  %751 = bitcast i8* %749 to i64*
  %752 = load i64, i64* %750, align 1
  store i64 %752, i64* %751, align 1
  %753 = getelementptr inbounds i8, i8* %748, i64 %719
  %754 = getelementptr inbounds i8, i8* %749, i64 %719
  %755 = bitcast i8* %753 to i64*
  %756 = bitcast i8* %754 to i64*
  %757 = load i64, i64* %755, align 1
  store i64 %757, i64* %756, align 1
  br label %771

758:                                              ; preds = %710
  %759 = icmp eq i32 %712, 0
  %760 = zext i1 %759 to i64
  %761 = shl nuw nsw i64 %760, 1
  %762 = or i64 %761, %297
  %763 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %321, align 8
  %764 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %763, i64 0, i32 2, i64 1, i64 %762
  %765 = load void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)** %764, align 8
  %766 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %288, align 8
  %767 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %766, i64 0, i32 55, i32 0
  %768 = load i8, i8* %767, align 1
  %769 = zext i8 %768 to i32
  %770 = sext i32 %414 to i64
  call void %765(i16* %408, i64 68, i32 8, i32 %712, i32 %295, i32 %769, i32 %693, i8* %406, i64 %770) #3
  br label %771

771:                                              ; preds = %718, %715, %758
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %318) #3
  br label %772

772:                                              ; preds = %442, %439, %771
  %773 = load i32, i32* %46, align 4
  %774 = sext i32 %773 to i64
  %775 = getelementptr inbounds i8, i8* %406, i64 %774
  %776 = getelementptr inbounds i8, i8* %407, i64 %774
  %777 = getelementptr inbounds i16, i16* %408, i64 %774
  %778 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %409, i64 2
  %779 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %410, i64 2
  %780 = add nsw i32 %411, 2
  %781 = add i64 %405, 1
  %782 = icmp slt i32 %780, %323
  br i1 %782, label %404, label %783

783:                                              ; preds = %772
  %784 = load i32, i32* %21, align 4
  %785 = load i8*, i8** %25, align 16
  %786 = sext i32 %784 to i64
  %787 = getelementptr inbounds i8, i8* %785, i64 %786
  store i8* %787, i8** %25, align 16
  %788 = load i32, i32* %30, align 4
  %789 = load i8*, i8** %34, align 16
  %790 = sext i32 %788 to i64
  %791 = getelementptr inbounds i8, i8* %789, i64 %790
  store i8* %791, i8** %34, align 16
  %792 = load i32, i32* %42, align 4
  %793 = load i16*, i16** %39, align 16
  %794 = sext i32 %792 to i64
  %795 = getelementptr inbounds i16, i16* %793, i64 %794
  store i16* %795, i16** %39, align 16
  %796 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %396, i64 %324
  %797 = getelementptr inbounds %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %397, i64 %324
  br i1 %401, label %392, label %798

798:                                              ; preds = %783
  %799 = load i8, i8* %56, align 1
  %800 = icmp eq i8 %799, 1
  br i1 %800, label %1210, label %801

801:                                              ; preds = %798
  %802 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %288, align 8
  %803 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %802, i64 0, i32 55, i32 4, i64 %290
  %804 = load i8, i8* %803, align 1
  %805 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %802, i64 0, i32 55, i32 5, i64 %290
  %806 = load i8, i8* %805, align 1
  %807 = zext i8 %804 to i32
  %808 = zext i8 %806 to i32
  %809 = or i8 %806, %804
  %810 = icmp eq i8 %809, 0
  br i1 %810, label %811, label %900

811:                                              ; preds = %801
  %812 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %317, align 8
  %813 = icmp eq %"class.libgav1::ThreadPool"* %812, null
  br i1 %813, label %814, label %897

814:                                              ; preds = %811
  %815 = shl i32 %4, 2
  %816 = load i8*, i8** %35, align 8
  %817 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %49, align 8
  %818 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %817, i64 0, i32 11, i64 1
  %819 = load i32, i32* %818, align 4
  %820 = load i8*, i8** %26, align 8
  %821 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 1
  %822 = load i8, i8* %821, align 1
  %823 = sext i8 %822 to i32
  %824 = ashr i32 %174, %823
  %825 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 1
  %826 = load i8, i8* %825, align 1
  %827 = sext i8 %826 to i32
  %828 = ashr i32 %815, %827
  %829 = sext i32 %824 to i64
  %830 = sext i32 %819 to i64
  %831 = add nsw i32 %828, -1
  %832 = and i32 %828, 3
  %833 = icmp eq i32 %832, 0
  br i1 %833, label %844, label %834

834:                                              ; preds = %814, %834
  %835 = phi i8* [ %840, %834 ], [ %820, %814 ]
  %836 = phi i8* [ %839, %834 ], [ %816, %814 ]
  %837 = phi i32 [ %841, %834 ], [ %828, %814 ]
  %838 = phi i32 [ %842, %834 ], [ %832, %814 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %835, i8* align 1 %836, i64 %829, i1 false) #3
  %839 = getelementptr inbounds i8, i8* %836, i64 %830
  %840 = getelementptr inbounds i8, i8* %835, i64 %830
  %841 = add nsw i32 %837, -1
  %842 = add i32 %838, -1
  %843 = icmp eq i32 %842, 0
  br i1 %843, label %844, label %834, !llvm.loop !14

844:                                              ; preds = %834, %814
  %845 = phi i8* [ %820, %814 ], [ %840, %834 ]
  %846 = phi i8* [ %816, %814 ], [ %839, %834 ]
  %847 = phi i32 [ %828, %814 ], [ %841, %834 ]
  %848 = icmp ult i32 %831, 3
  br i1 %848, label %863, label %849

849:                                              ; preds = %844, %849
  %850 = phi i8* [ %860, %849 ], [ %845, %844 ]
  %851 = phi i8* [ %859, %849 ], [ %846, %844 ]
  %852 = phi i32 [ %861, %849 ], [ %847, %844 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %850, i8* align 1 %851, i64 %829, i1 false) #3
  %853 = getelementptr inbounds i8, i8* %851, i64 %830
  %854 = getelementptr inbounds i8, i8* %850, i64 %830
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %854, i8* align 1 %853, i64 %829, i1 false) #3
  %855 = getelementptr inbounds i8, i8* %853, i64 %830
  %856 = getelementptr inbounds i8, i8* %854, i64 %830
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %856, i8* align 1 %855, i64 %829, i1 false) #3
  %857 = getelementptr inbounds i8, i8* %855, i64 %830
  %858 = getelementptr inbounds i8, i8* %856, i64 %830
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %858, i8* align 1 %857, i64 %829, i1 false) #3
  %859 = getelementptr inbounds i8, i8* %857, i64 %830
  %860 = getelementptr inbounds i8, i8* %858, i64 %830
  %861 = add nsw i32 %852, -4
  %862 = icmp eq i32 %861, 0
  br i1 %862, label %863, label %849

863:                                              ; preds = %849, %844
  %864 = load i8*, i8** %36, align 16
  %865 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %49, align 8
  %866 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %865, i64 0, i32 11, i64 2
  %867 = load i32, i32* %866, align 4
  %868 = load i8*, i8** %27, align 16
  %869 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 2
  %870 = load i8, i8* %869, align 1
  %871 = sext i8 %870 to i32
  %872 = ashr i32 %174, %871
  %873 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 2
  %874 = load i8, i8* %873, align 1
  %875 = sext i8 %874 to i32
  %876 = ashr i32 %815, %875
  %877 = sext i32 %872 to i64
  %878 = sext i32 %867 to i64
  %879 = add nsw i32 %876, -1
  %880 = and i32 %876, 3
  %881 = icmp eq i32 %880, 0
  br i1 %881, label %892, label %882

882:                                              ; preds = %863, %882
  %883 = phi i8* [ %888, %882 ], [ %868, %863 ]
  %884 = phi i8* [ %887, %882 ], [ %864, %863 ]
  %885 = phi i32 [ %889, %882 ], [ %876, %863 ]
  %886 = phi i32 [ %890, %882 ], [ %880, %863 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %883, i8* align 1 %884, i64 %877, i1 false) #3
  %887 = getelementptr inbounds i8, i8* %884, i64 %878
  %888 = getelementptr inbounds i8, i8* %883, i64 %878
  %889 = add nsw i32 %885, -1
  %890 = add i32 %886, -1
  %891 = icmp eq i32 %890, 0
  br i1 %891, label %892, label %882, !llvm.loop !15

892:                                              ; preds = %882, %863
  %893 = phi i8* [ %868, %863 ], [ %888, %882 ]
  %894 = phi i8* [ %864, %863 ], [ %887, %882 ]
  %895 = phi i32 [ %876, %863 ], [ %889, %882 ]
  %896 = icmp ult i32 %879, 3
  br i1 %896, label %897, label %1212

897:                                              ; preds = %892, %1212, %811
  %898 = zext i32 %102 to i64
  %899 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 %898, i64 1
  store i8 0, i8* %899, align 1
  br label %1210

900:                                              ; preds = %801
  br i1 %178, label %1046, label %901

901:                                              ; preds = %900
  %902 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %317, align 8
  %903 = icmp eq %"class.libgav1::ThreadPool"* %902, null
  br i1 %903, label %1046, label %904

904:                                              ; preds = %901
  %905 = zext i32 %102 to i64
  %906 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 %905, i64 1
  store i8 1, i8* %906, align 1
  %907 = shl i32 %323, 2
  %908 = shl i32 %4, 2
  %909 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 28, i64 1
  %910 = load i8*, i8** %909, align 8
  %911 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %49, align 8
  %912 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %911, i64 0, i32 11, i64 1
  %913 = load i32, i32* %912, align 4
  %914 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 1
  %915 = load i8, i8* %914, align 1
  %916 = sext i8 %915 to i32
  %917 = ashr i32 %51, %916
  %918 = mul nsw i32 %917, %913
  %919 = sext i32 %918 to i64
  %920 = getelementptr inbounds i8, i8* %910, i64 -2
  %921 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 1
  %922 = load i8, i8* %921, align 1
  %923 = sext i8 %922 to i32
  %924 = ashr i32 %907, %923
  %925 = load i32, i32* %53, align 8
  %926 = shl i32 %924, %925
  %927 = sext i32 %926 to i64
  %928 = getelementptr inbounds i8, i8* %920, i64 %919
  %929 = getelementptr inbounds i8, i8* %928, i64 %927
  %930 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %7, i64 %905, i64 1, i64 0
  %931 = ashr i32 %908, %916
  %932 = sext i32 %913 to i64
  %933 = add nsw i32 %931, -1
  %934 = and i32 %931, 7
  %935 = icmp eq i32 %934, 0
  br i1 %935, label %949, label %936

936:                                              ; preds = %904, %936
  %937 = phi i8* [ %945, %936 ], [ %930, %904 ]
  %938 = phi i8* [ %944, %936 ], [ %929, %904 ]
  %939 = phi i32 [ %946, %936 ], [ %931, %904 ]
  %940 = phi i32 [ %947, %936 ], [ %934, %904 ]
  %941 = bitcast i8* %938 to i16*
  %942 = bitcast i8* %937 to i16*
  %943 = load i16, i16* %941, align 1
  store i16 %943, i16* %942, align 1
  %944 = getelementptr inbounds i8, i8* %938, i64 %932
  %945 = getelementptr inbounds i8, i8* %937, i64 2
  %946 = add nsw i32 %939, -1
  %947 = add i32 %940, -1
  %948 = icmp eq i32 %947, 0
  br i1 %948, label %949, label %936, !llvm.loop !16

949:                                              ; preds = %936, %904
  %950 = phi i8* [ %930, %904 ], [ %945, %936 ]
  %951 = phi i8* [ %929, %904 ], [ %944, %936 ]
  %952 = phi i32 [ %931, %904 ], [ %946, %936 ]
  %953 = icmp ult i32 %933, 7
  br i1 %953, label %1000, label %954

954:                                              ; preds = %949, %954
  %955 = phi i8* [ %997, %954 ], [ %950, %949 ]
  %956 = phi i8* [ %996, %954 ], [ %951, %949 ]
  %957 = phi i32 [ %998, %954 ], [ %952, %949 ]
  %958 = bitcast i8* %956 to i16*
  %959 = bitcast i8* %955 to i16*
  %960 = load i16, i16* %958, align 1
  store i16 %960, i16* %959, align 1
  %961 = getelementptr inbounds i8, i8* %956, i64 %932
  %962 = getelementptr inbounds i8, i8* %955, i64 2
  %963 = bitcast i8* %961 to i16*
  %964 = bitcast i8* %962 to i16*
  %965 = load i16, i16* %963, align 1
  store i16 %965, i16* %964, align 1
  %966 = getelementptr inbounds i8, i8* %961, i64 %932
  %967 = getelementptr inbounds i8, i8* %955, i64 4
  %968 = bitcast i8* %966 to i16*
  %969 = bitcast i8* %967 to i16*
  %970 = load i16, i16* %968, align 1
  store i16 %970, i16* %969, align 1
  %971 = getelementptr inbounds i8, i8* %966, i64 %932
  %972 = getelementptr inbounds i8, i8* %955, i64 6
  %973 = bitcast i8* %971 to i16*
  %974 = bitcast i8* %972 to i16*
  %975 = load i16, i16* %973, align 1
  store i16 %975, i16* %974, align 1
  %976 = getelementptr inbounds i8, i8* %971, i64 %932
  %977 = getelementptr inbounds i8, i8* %955, i64 8
  %978 = bitcast i8* %976 to i16*
  %979 = bitcast i8* %977 to i16*
  %980 = load i16, i16* %978, align 1
  store i16 %980, i16* %979, align 1
  %981 = getelementptr inbounds i8, i8* %976, i64 %932
  %982 = getelementptr inbounds i8, i8* %955, i64 10
  %983 = bitcast i8* %981 to i16*
  %984 = bitcast i8* %982 to i16*
  %985 = load i16, i16* %983, align 1
  store i16 %985, i16* %984, align 1
  %986 = getelementptr inbounds i8, i8* %981, i64 %932
  %987 = getelementptr inbounds i8, i8* %955, i64 12
  %988 = bitcast i8* %986 to i16*
  %989 = bitcast i8* %987 to i16*
  %990 = load i16, i16* %988, align 1
  store i16 %990, i16* %989, align 1
  %991 = getelementptr inbounds i8, i8* %986, i64 %932
  %992 = getelementptr inbounds i8, i8* %955, i64 14
  %993 = bitcast i8* %991 to i16*
  %994 = bitcast i8* %992 to i16*
  %995 = load i16, i16* %993, align 1
  store i16 %995, i16* %994, align 1
  %996 = getelementptr inbounds i8, i8* %991, i64 %932
  %997 = getelementptr inbounds i8, i8* %955, i64 16
  %998 = add nsw i32 %957, -8
  %999 = icmp eq i32 %998, 0
  br i1 %999, label %1000, label %954

1000:                                             ; preds = %954, %949
  %1001 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 28, i64 2
  %1002 = load i8*, i8** %1001, align 8
  %1003 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %49, align 8
  %1004 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %1003, i64 0, i32 11, i64 2
  %1005 = load i32, i32* %1004, align 4
  %1006 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 2
  %1007 = load i8, i8* %1006, align 1
  %1008 = sext i8 %1007 to i32
  %1009 = ashr i32 %51, %1008
  %1010 = mul nsw i32 %1009, %1005
  %1011 = sext i32 %1010 to i64
  %1012 = getelementptr inbounds i8, i8* %1002, i64 -2
  %1013 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 2
  %1014 = load i8, i8* %1013, align 1
  %1015 = sext i8 %1014 to i32
  %1016 = ashr i32 %907, %1015
  %1017 = load i32, i32* %53, align 8
  %1018 = shl i32 %1016, %1017
  %1019 = sext i32 %1018 to i64
  %1020 = getelementptr inbounds i8, i8* %1012, i64 %1011
  %1021 = getelementptr inbounds i8, i8* %1020, i64 %1019
  %1022 = getelementptr inbounds [3 x [256 x i8]], [3 x [256 x i8]]* %7, i64 %905, i64 2, i64 0
  %1023 = ashr i32 %908, %1008
  %1024 = sext i32 %1005 to i64
  %1025 = add nsw i32 %1023, -1
  %1026 = and i32 %1023, 7
  %1027 = icmp eq i32 %1026, 0
  br i1 %1027, label %1041, label %1028

1028:                                             ; preds = %1000, %1028
  %1029 = phi i8* [ %1037, %1028 ], [ %1022, %1000 ]
  %1030 = phi i8* [ %1036, %1028 ], [ %1021, %1000 ]
  %1031 = phi i32 [ %1038, %1028 ], [ %1023, %1000 ]
  %1032 = phi i32 [ %1039, %1028 ], [ %1026, %1000 ]
  %1033 = bitcast i8* %1030 to i16*
  %1034 = bitcast i8* %1029 to i16*
  %1035 = load i16, i16* %1033, align 1
  store i16 %1035, i16* %1034, align 1
  %1036 = getelementptr inbounds i8, i8* %1030, i64 %1024
  %1037 = getelementptr inbounds i8, i8* %1029, i64 2
  %1038 = add nsw i32 %1031, -1
  %1039 = add i32 %1032, -1
  %1040 = icmp eq i32 %1039, 0
  br i1 %1040, label %1041, label %1028, !llvm.loop !17

1041:                                             ; preds = %1028, %1000
  %1042 = phi i8* [ %1022, %1000 ], [ %1037, %1028 ]
  %1043 = phi i8* [ %1021, %1000 ], [ %1036, %1028 ]
  %1044 = phi i32 [ %1023, %1000 ], [ %1038, %1028 ]
  %1045 = icmp ult i32 %1025, 7
  br i1 %1045, label %1046, label %1226

1046:                                             ; preds = %1041, %1226, %901, %900
  %1047 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 %281, i64 1
  %1048 = load i8, i8* %1047, align 1, !range !5
  %1049 = icmp ne i8 %1048, 0
  call void @_ZN7libgav110PostFilter16PrepareCdefBlockIhEEviiiiPtlbPA256_Khb(%"class.libgav1::PostFilter"* %0, i32 %3, i32 %4, i32 %5, i32 %6, i16* %1, i64 68, i1 zeroext false, [256 x i8]* %283, i1 zeroext %1049)
  %1050 = icmp eq i8 %804, 0
  %1051 = zext i1 %1050 to i64
  %1052 = shl nuw nsw i64 %1051, 1
  %1053 = icmp eq i8 %806, 0
  %1054 = zext i1 %1053 to i64
  %1055 = or i64 %1052, %1054
  br label %1056

1056:                                             ; preds = %1207, %1046
  %1057 = phi i64 [ 1, %1046 ], [ %1208, %1207 ]
  %1058 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 %1057
  %1059 = load i8, i8* %1058, align 1
  %1060 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 %1057
  %1061 = load i8, i8* %1060, align 1
  %1062 = sext i8 %1059 to i32
  %1063 = lshr i32 8, %1062
  %1064 = sext i8 %1061 to i32
  %1065 = lshr i32 8, %1064
  %1066 = getelementptr inbounds [3 x i32], [3 x i32]* %10, i64 0, i64 %1057
  %1067 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 %1057
  %1068 = getelementptr inbounds [3 x i8*], [3 x i8*]* %13, i64 0, i64 %1057
  %1069 = getelementptr inbounds [3 x i16*], [3 x i16*]* %14, i64 0, i64 %1057
  %1070 = sext i32 %1063 to i64
  %1071 = sext i8 %1059 to i64
  %1072 = sext i8 %1061 to i64
  %1073 = xor i32 %1062, 1
  %1074 = getelementptr inbounds [3 x i32], [3 x i32]* %16, i64 0, i64 %1057
  %1075 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 %1057
  %1076 = getelementptr inbounds [3 x i32], [3 x i32]* %15, i64 0, i64 %1057
  %1077 = load i8*, i8** %1067, align 8
  %1078 = load i8*, i8** %1068, align 8
  %1079 = load i16*, i16** %1069, align 8
  %1080 = add nsw i32 %1065, -1
  %1081 = and i32 %1065, 3
  %1082 = icmp eq i32 %1081, 0
  %1083 = icmp ult i32 %1080, 3
  br label %1084

1084:                                             ; preds = %1192, %1056
  %1085 = phi i16* [ %1079, %1056 ], [ %1204, %1192 ]
  %1086 = phi i8* [ %1078, %1056 ], [ %1200, %1192 ]
  %1087 = phi i8* [ %1077, %1056 ], [ %1196, %1192 ]
  %1088 = phi i32 [ 0, %1056 ], [ %1190, %1192 ]
  %1089 = phi i32 [ %5, %1056 ], [ %1205, %1192 ]
  br label %1090

1090:                                             ; preds = %1176, %1084
  %1091 = phi i32 [ %1088, %1084 ], [ %1190, %1176 ]
  %1092 = phi i8* [ %1087, %1084 ], [ %1181, %1176 ]
  %1093 = phi i8* [ %1086, %1084 ], [ %1182, %1176 ]
  %1094 = phi i16* [ %1085, %1084 ], [ %1186, %1176 ]
  %1095 = phi i32 [ %6, %1084 ], [ %1188, %1176 ]
  %1096 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %49, align 8
  %1097 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %1096, i64 0, i32 11, i64 %1057
  %1098 = load i32, i32* %1097, align 4
  %1099 = sext i32 %1091 to i64
  %1100 = getelementptr inbounds [64 x i8], [64 x i8]* %17, i64 0, i64 %1099
  %1101 = load i8, i8* %1100, align 1
  %1102 = and i8 %1101, 8
  %1103 = icmp eq i8 %1102, 0
  br i1 %1103, label %1137, label %1104

1104:                                             ; preds = %1090
  %1105 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %317, align 8
  %1106 = icmp eq %"class.libgav1::ThreadPool"* %1105, null
  br i1 %1106, label %1107, label %1176

1107:                                             ; preds = %1104
  %1108 = sext i32 %1098 to i64
  br i1 %1082, label %1119, label %1109

1109:                                             ; preds = %1107, %1109
  %1110 = phi i8* [ %1115, %1109 ], [ %1092, %1107 ]
  %1111 = phi i8* [ %1114, %1109 ], [ %1093, %1107 ]
  %1112 = phi i32 [ %1116, %1109 ], [ %1065, %1107 ]
  %1113 = phi i32 [ %1117, %1109 ], [ %1081, %1107 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1110, i8* align 1 %1111, i64 %1070, i1 false) #3
  %1114 = getelementptr inbounds i8, i8* %1111, i64 %1108
  %1115 = getelementptr inbounds i8, i8* %1110, i64 %1108
  %1116 = add nsw i32 %1112, -1
  %1117 = add i32 %1113, -1
  %1118 = icmp eq i32 %1117, 0
  br i1 %1118, label %1119, label %1109, !llvm.loop !18

1119:                                             ; preds = %1109, %1107
  %1120 = phi i8* [ %1092, %1107 ], [ %1115, %1109 ]
  %1121 = phi i8* [ %1093, %1107 ], [ %1114, %1109 ]
  %1122 = phi i32 [ %1065, %1107 ], [ %1116, %1109 ]
  br i1 %1083, label %1176, label %1123

1123:                                             ; preds = %1119, %1123
  %1124 = phi i8* [ %1134, %1123 ], [ %1120, %1119 ]
  %1125 = phi i8* [ %1133, %1123 ], [ %1121, %1119 ]
  %1126 = phi i32 [ %1135, %1123 ], [ %1122, %1119 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1124, i8* align 1 %1125, i64 %1070, i1 false) #3
  %1127 = getelementptr inbounds i8, i8* %1125, i64 %1108
  %1128 = getelementptr inbounds i8, i8* %1124, i64 %1108
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1128, i8* align 1 %1127, i64 %1070, i1 false) #3
  %1129 = getelementptr inbounds i8, i8* %1127, i64 %1108
  %1130 = getelementptr inbounds i8, i8* %1128, i64 %1108
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1130, i8* align 1 %1129, i64 %1070, i1 false) #3
  %1131 = getelementptr inbounds i8, i8* %1129, i64 %1108
  %1132 = getelementptr inbounds i8, i8* %1130, i64 %1108
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1132, i8* align 1 %1131, i64 %1070, i1 false) #3
  %1133 = getelementptr inbounds i8, i8* %1131, i64 %1108
  %1134 = getelementptr inbounds i8, i8* %1132, i64 %1108
  %1135 = add nsw i32 %1126, -4
  %1136 = icmp eq i32 %1135, 0
  br i1 %1136, label %1176, label %1123

1137:                                             ; preds = %1090
  %1138 = add nsw i32 %1095, 4
  %1139 = icmp sgt i32 %1138, %323
  %1140 = select i1 %1139, i32 0, i32 %1062
  br i1 %1050, label %1146, label %1141

1141:                                             ; preds = %1137
  %1142 = zext i8 %1101 to i64
  %1143 = getelementptr inbounds [2 x [2 x [8 x i8]]], [2 x [2 x [8 x i8]]]* @_ZN7libgav112_GLOBAL__N_116kCdefUvDirectionE, i64 0, i64 %1071, i64 %1072, i64 %1142
  %1144 = load i8, i8* %1143, align 1
  %1145 = zext i8 %1144 to i32
  br label %1146

1146:                                             ; preds = %1137, %1141
  %1147 = phi i32 [ %1145, %1141 ], [ 0, %1137 ]
  %1148 = icmp eq i32 %1140, 0
  br i1 %1148, label %1163, label %1149

1149:                                             ; preds = %1146
  %1150 = add nsw i32 %1091, 1
  %1151 = sext i32 %1150 to i64
  br i1 %1050, label %1157, label %1152

1152:                                             ; preds = %1149
  %1153 = getelementptr inbounds [64 x i8], [64 x i8]* %17, i64 0, i64 %1151
  %1154 = load i8, i8* %1153, align 1
  %1155 = icmp eq i8 %1101, %1154
  %1156 = select i1 %1155, i32 %1140, i32 0
  br label %1157

1157:                                             ; preds = %1149, %1152
  %1158 = phi i32 [ %1156, %1152 ], [ %1140, %1149 ]
  %1159 = getelementptr inbounds [64 x i8], [64 x i8]* %17, i64 0, i64 %1151
  %1160 = load i8, i8* %1159, align 1
  %1161 = icmp eq i8 %1160, 8
  %1162 = select i1 %1161, i32 0, i32 %1158
  br label %1163

1163:                                             ; preds = %1157, %1146
  %1164 = phi i32 [ 0, %1146 ], [ %1162, %1157 ]
  %1165 = or i32 %1164, %1073
  %1166 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %321, align 8
  %1167 = sext i32 %1165 to i64
  %1168 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1166, i64 0, i32 2, i64 %1167, i64 %1055
  %1169 = load void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)** %1168, align 8
  %1170 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %288, align 8
  %1171 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %1170, i64 0, i32 55, i32 0
  %1172 = load i8, i8* %1171, align 1
  %1173 = zext i8 %1172 to i32
  %1174 = add nsw i32 %1173, -1
  %1175 = sext i32 %1098 to i64
  call void %1169(i16* %1094, i64 68, i32 %1065, i32 %807, i32 %808, i32 %1174, i32 %1147, i8* %1092, i64 %1175) #3
  br label %1176

1176:                                             ; preds = %1119, %1123, %1104, %1163
  %1177 = phi i32 [ 0, %1104 ], [ %1164, %1163 ], [ 0, %1123 ], [ 0, %1119 ]
  %1178 = load i32, i32* %1074, align 4
  %1179 = shl i32 %1178, %1177
  %1180 = sext i32 %1179 to i64
  %1181 = getelementptr inbounds i8, i8* %1092, i64 %1180
  %1182 = getelementptr inbounds i8, i8* %1093, i64 %1180
  %1183 = sext i32 %1178 to i64
  %1184 = zext i32 %1177 to i64
  %1185 = shl i64 %1183, %1184
  %1186 = getelementptr inbounds i16, i16* %1094, i64 %1185
  %1187 = shl i32 2, %1177
  %1188 = add nsw i32 %1187, %1095
  %1189 = shl i32 1, %1177
  %1190 = add nsw i32 %1189, %1091
  %1191 = icmp slt i32 %1188, %323
  br i1 %1191, label %1090, label %1192

1192:                                             ; preds = %1176
  %1193 = load i32, i32* %1066, align 4
  %1194 = load i8*, i8** %1067, align 8
  %1195 = sext i32 %1193 to i64
  %1196 = getelementptr inbounds i8, i8* %1194, i64 %1195
  store i8* %1196, i8** %1067, align 8
  %1197 = load i32, i32* %1075, align 4
  %1198 = load i8*, i8** %1068, align 8
  %1199 = sext i32 %1197 to i64
  %1200 = getelementptr inbounds i8, i8* %1198, i64 %1199
  store i8* %1200, i8** %1068, align 8
  %1201 = load i32, i32* %1076, align 4
  %1202 = load i16*, i16** %1069, align 8
  %1203 = sext i32 %1201 to i64
  %1204 = getelementptr inbounds i16, i16* %1202, i64 %1203
  store i16* %1204, i16** %1069, align 8
  %1205 = add nsw i32 %1089, 2
  %1206 = icmp slt i32 %1205, %319
  br i1 %1206, label %1084, label %1207

1207:                                             ; preds = %1192
  %1208 = add nuw nsw i64 %1057, 1
  %1209 = icmp eq i64 %1208, 3
  br i1 %1209, label %1210, label %1056

1210:                                             ; preds = %1207, %897, %798
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %287) #3
  br label %1211

1211:                                             ; preds = %1210, %169
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %45) #3
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %40) #3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #3
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %28) #3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #3
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %20) #3
  ret void

1212:                                             ; preds = %892, %1212
  %1213 = phi i8* [ %1223, %1212 ], [ %893, %892 ]
  %1214 = phi i8* [ %1222, %1212 ], [ %894, %892 ]
  %1215 = phi i32 [ %1224, %1212 ], [ %895, %892 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1213, i8* align 1 %1214, i64 %877, i1 false) #3
  %1216 = getelementptr inbounds i8, i8* %1214, i64 %878
  %1217 = getelementptr inbounds i8, i8* %1213, i64 %878
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1217, i8* align 1 %1216, i64 %877, i1 false) #3
  %1218 = getelementptr inbounds i8, i8* %1216, i64 %878
  %1219 = getelementptr inbounds i8, i8* %1217, i64 %878
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1219, i8* align 1 %1218, i64 %877, i1 false) #3
  %1220 = getelementptr inbounds i8, i8* %1218, i64 %878
  %1221 = getelementptr inbounds i8, i8* %1219, i64 %878
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1221, i8* align 1 %1220, i64 %877, i1 false) #3
  %1222 = getelementptr inbounds i8, i8* %1220, i64 %878
  %1223 = getelementptr inbounds i8, i8* %1221, i64 %878
  %1224 = add nsw i32 %1215, -4
  %1225 = icmp eq i32 %1224, 0
  br i1 %1225, label %897, label %1212

1226:                                             ; preds = %1041, %1226
  %1227 = phi i8* [ %1269, %1226 ], [ %1042, %1041 ]
  %1228 = phi i8* [ %1268, %1226 ], [ %1043, %1041 ]
  %1229 = phi i32 [ %1270, %1226 ], [ %1044, %1041 ]
  %1230 = bitcast i8* %1228 to i16*
  %1231 = bitcast i8* %1227 to i16*
  %1232 = load i16, i16* %1230, align 1
  store i16 %1232, i16* %1231, align 1
  %1233 = getelementptr inbounds i8, i8* %1228, i64 %1024
  %1234 = getelementptr inbounds i8, i8* %1227, i64 2
  %1235 = bitcast i8* %1233 to i16*
  %1236 = bitcast i8* %1234 to i16*
  %1237 = load i16, i16* %1235, align 1
  store i16 %1237, i16* %1236, align 1
  %1238 = getelementptr inbounds i8, i8* %1233, i64 %1024
  %1239 = getelementptr inbounds i8, i8* %1227, i64 4
  %1240 = bitcast i8* %1238 to i16*
  %1241 = bitcast i8* %1239 to i16*
  %1242 = load i16, i16* %1240, align 1
  store i16 %1242, i16* %1241, align 1
  %1243 = getelementptr inbounds i8, i8* %1238, i64 %1024
  %1244 = getelementptr inbounds i8, i8* %1227, i64 6
  %1245 = bitcast i8* %1243 to i16*
  %1246 = bitcast i8* %1244 to i16*
  %1247 = load i16, i16* %1245, align 1
  store i16 %1247, i16* %1246, align 1
  %1248 = getelementptr inbounds i8, i8* %1243, i64 %1024
  %1249 = getelementptr inbounds i8, i8* %1227, i64 8
  %1250 = bitcast i8* %1248 to i16*
  %1251 = bitcast i8* %1249 to i16*
  %1252 = load i16, i16* %1250, align 1
  store i16 %1252, i16* %1251, align 1
  %1253 = getelementptr inbounds i8, i8* %1248, i64 %1024
  %1254 = getelementptr inbounds i8, i8* %1227, i64 10
  %1255 = bitcast i8* %1253 to i16*
  %1256 = bitcast i8* %1254 to i16*
  %1257 = load i16, i16* %1255, align 1
  store i16 %1257, i16* %1256, align 1
  %1258 = getelementptr inbounds i8, i8* %1253, i64 %1024
  %1259 = getelementptr inbounds i8, i8* %1227, i64 12
  %1260 = bitcast i8* %1258 to i16*
  %1261 = bitcast i8* %1259 to i16*
  %1262 = load i16, i16* %1260, align 1
  store i16 %1262, i16* %1261, align 1
  %1263 = getelementptr inbounds i8, i8* %1258, i64 %1024
  %1264 = getelementptr inbounds i8, i8* %1227, i64 14
  %1265 = bitcast i8* %1263 to i16*
  %1266 = bitcast i8* %1264 to i16*
  %1267 = load i16, i16* %1265, align 1
  store i16 %1267, i16* %1266, align 1
  %1268 = getelementptr inbounds i8, i8* %1263, i64 %1024
  %1269 = getelementptr inbounds i8, i8* %1227, i64 16
  %1270 = add nsw i32 %1229, -8
  %1271 = icmp eq i32 %1270, 0
  br i1 %1271, label %1046, label %1226
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav110PostFilter28ApplyCdefForOneSuperBlockRowEiib(%"class.libgav1::PostFilter"*, i32, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %39

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 1
  %8 = xor i1 %3, true
  %9 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 38, i64 0
  %10 = select i1 %3, i32 0, i32 2
  br label %11

11:                                               ; preds = %6, %36
  %12 = phi i32 [ 0, %6 ], [ %37, %36 ]
  %13 = add nsw i32 %12, %1
  %14 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %7, align 8
  %15 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %14, i64 0, i32 7
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %13, %16
  br i1 %17, label %18, label %39

18:                                               ; preds = %11
  %19 = icmp sgt i32 %13, 0
  %20 = icmp eq i32 %12, 0
  %21 = or i1 %20, %8
  %22 = and i1 %19, %21
  br i1 %22, label %23, label %28

23:                                               ; preds = %18
  %24 = add nsw i32 %13, -2
  tail call void @_ZN7libgav110PostFilter34ApplyCdefForOneSuperBlockRowHelperEPtPA3_A256_hii(%"class.libgav1::PostFilter"* %0, i16* %9, [3 x [256 x i8]]* null, i32 %24, i32 2)
  %25 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %7, align 8
  %26 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %25, i64 0, i32 7
  %27 = load i32, i32* %26, align 4
  br label %28

28:                                               ; preds = %23, %18
  %29 = phi i32 [ %27, %23 ], [ %16, %18 ]
  %30 = sub nsw i32 %29, %13
  %31 = icmp slt i32 %30, 16
  %32 = select i1 %31, i32 %30, i32 16
  %33 = sub nsw i32 %32, %10
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %28
  tail call void @_ZN7libgav110PostFilter34ApplyCdefForOneSuperBlockRowHelperEPtPA3_A256_hii(%"class.libgav1::PostFilter"* %0, i16* %9, [3 x [256 x i8]]* null, i32 %13, i32 %33)
  br label %36

36:                                               ; preds = %35, %28
  %37 = add nuw nsw i32 %12, 16
  %38 = icmp slt i32 %37, %2
  br i1 %38, label %11, label %39

39:                                               ; preds = %36, %11, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav110PostFilter15ApplyCdefWorkerEPNSt3__16atomicIiEE(%"class.libgav1::PostFilter"*, %"struct.std::__1::atomic"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca [9248 x i16], align 16
  %4 = alloca [2 x [3 x [256 x i8]]], align 32
  %5 = bitcast [9248 x i16]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 18496, i8* nonnull %5) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 18496, i1 false)
  %6 = getelementptr inbounds [2 x [3 x [256 x i8]]], [2 x [3 x [256 x i8]]]* %4, i64 0, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1536, i8* nonnull %6) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %6, i8 -86, i64 1536, i1 false)
  %7 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 16 monotonic
  %9 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 1
  %10 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %9, align 8
  %11 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %10, i64 0, i32 7
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, %8
  br i1 %13, label %14, label %28

14:                                               ; preds = %2
  %15 = getelementptr inbounds [9248 x i16], [9248 x i16]* %3, i64 0, i64 0
  %16 = getelementptr inbounds [2 x [3 x [256 x i8]]], [2 x [3 x [256 x i8]]]* %4, i64 0, i64 0
  br label %17

17:                                               ; preds = %14, %17
  %18 = phi i32 [ %12, %14 ], [ %26, %17 ]
  %19 = phi i32 [ %8, %14 ], [ %23, %17 ]
  %20 = sub nsw i32 %18, %19
  %21 = icmp slt i32 %20, 16
  %22 = select i1 %21, i32 %20, i32 16
  call void @_ZN7libgav110PostFilter34ApplyCdefForOneSuperBlockRowHelperEPtPA3_A256_hii(%"class.libgav1::PostFilter"* %0, i16* nonnull %15, [3 x [256 x i8]]* nonnull %16, i32 %19, i32 %22)
  %23 = atomicrmw add i32* %7, i32 16 monotonic
  %24 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %9, align 8
  %25 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %24, i64 0, i32 7
  %26 = load i32, i32* %25, align 4
  %27 = icmp sgt i32 %26, %23
  br i1 %27, label %17, label %28

28:                                               ; preds = %17, %2
  call void @llvm.lifetime.end.p0i8(i64 1536, i8* nonnull %6) #3
  call void @llvm.lifetime.end.p0i8(i64 18496, i8* nonnull %5) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7libgav110PostFilter16PrepareCdefBlockItEEviiiiPtlbPA256_Khb(%"class.libgav1::PostFilter"*, i32, i32, i32, i32, i16*, i64, i1 zeroext, [256 x i8]*, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  br i1 %7, label %18, label %11

11:                                               ; preds = %10
  %12 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  br label %18

18:                                               ; preds = %11, %10
  %19 = phi i32 [ %14, %11 ], [ 0, %10 ]
  %20 = phi i32 [ %17, %11 ], [ 0, %10 ]
  %21 = shl i32 %4, 2
  %22 = ashr i32 %21, %19
  %23 = shl i32 %3, 2
  %24 = ashr i32 %23, %20
  %25 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 6
  %26 = load i32, i32* %25, align 8
  %27 = add nsw i32 %26, %19
  %28 = ashr i32 %27, %19
  %29 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 7
  %30 = load i32, i32* %29, align 4
  %31 = add nsw i32 %30, %20
  %32 = ashr i32 %31, %20
  %33 = shl i32 %1, 2
  %34 = ashr i32 %33, %19
  %35 = shl i32 %2, 2
  %36 = ashr i32 %35, %20
  %37 = lshr i32 8, %19
  %38 = add i32 %34, -1
  %39 = add i32 %38, %37
  %40 = sub nsw i32 0, %37
  %41 = and i32 %39, %40
  %42 = lshr i32 8, %20
  %43 = icmp eq i32 %4, 0
  %44 = add nsw i32 %22, %34
  %45 = icmp sge i32 %44, %28
  %46 = icmp eq i32 %3, 0
  %47 = add nsw i32 %24, %36
  %48 = icmp sge i32 %47, %32
  %49 = select i1 %46, i32 0, i32 2
  %50 = ashr i32 %3, 2
  %51 = sub nsw i32 %50, %49
  %52 = add i32 %36, -1
  %53 = add i32 %52, %42
  %54 = sub nsw i32 0, %42
  %55 = and i32 %53, %54
  %56 = xor i1 %7, true
  %57 = getelementptr inbounds i16, i16* %5, i64 2
  %58 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 27
  %59 = sub i32 %24, %49
  %60 = sext i32 %22 to i64
  %61 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 32
  %62 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 36
  %63 = sext i32 %34 to i64
  %64 = shl nsw i64 %63, 1
  %65 = add nsw i32 %41, 2
  %66 = sub i32 %65, %34
  %67 = sext i32 %66 to i64
  %68 = shl nsw i64 %67, 1
  %69 = icmp eq i32 %66, 0
  %70 = add nsw i32 %41, 4
  %71 = sext i32 %70 to i64
  %72 = icmp eq i32 %70, 0
  %73 = xor i1 %9, true
  %74 = add nsw i32 %55, 2
  %75 = sub i32 %74, %36
  %76 = zext i1 %56 to i64
  %77 = select i1 %7, i64 1, i64 3
  %78 = add nsw i64 %67, -16
  %79 = lshr i64 %78, 4
  %80 = add nuw nsw i64 %79, 1
  %81 = add nsw i64 %71, -16
  %82 = lshr i64 %81, 4
  %83 = add nuw nsw i64 %82, 1
  %84 = icmp ult i32 %66, 16
  %85 = and i64 %67, -16
  %86 = and i64 %80, 7
  %87 = icmp ult i64 %78, 112
  %88 = sub nsw i64 %80, %86
  %89 = icmp eq i64 %86, 0
  %90 = icmp eq i64 %85, %67
  %91 = icmp ult i32 %66, 16
  %92 = and i64 %67, -16
  %93 = and i64 %80, 7
  %94 = icmp ult i64 %78, 112
  %95 = sub nsw i64 %80, %93
  %96 = icmp eq i64 %93, 0
  %97 = icmp eq i64 %92, %67
  %98 = icmp ult i32 %70, 16
  %99 = and i64 %71, -16
  %100 = and i64 %83, 7
  %101 = icmp ult i64 %81, 112
  %102 = sub nsw i64 %83, %100
  %103 = icmp eq i64 %100, 0
  %104 = icmp eq i64 %99, %71
  %105 = icmp ult i32 %70, 16
  %106 = and i64 %71, -16
  %107 = and i64 %83, 7
  %108 = icmp ult i64 %81, 112
  %109 = sub nsw i64 %83, %107
  %110 = icmp eq i64 %107, 0
  %111 = icmp eq i64 %106, %71
  %112 = icmp ult i32 %66, 16
  %113 = and i64 %67, -16
  %114 = and i64 %80, 7
  %115 = icmp ult i64 %78, 112
  %116 = sub nsw i64 %80, %114
  %117 = icmp eq i64 %114, 0
  %118 = icmp eq i64 %113, %67
  %119 = icmp ult i32 %66, 16
  %120 = and i64 %67, -16
  %121 = and i64 %80, 7
  %122 = icmp ult i64 %78, 112
  %123 = sub nsw i64 %80, %121
  %124 = icmp eq i64 %121, 0
  %125 = icmp eq i64 %120, %67
  %126 = icmp ult i32 %66, 16
  %127 = and i64 %67, -16
  %128 = and i64 %80, 7
  %129 = icmp ult i64 %78, 112
  %130 = sub nsw i64 %80, %128
  %131 = icmp eq i64 %128, 0
  %132 = icmp eq i64 %127, %67
  %133 = icmp ult i32 %66, 16
  %134 = and i64 %67, -16
  %135 = and i64 %80, 7
  %136 = icmp ult i64 %78, 112
  %137 = sub nsw i64 %80, %135
  %138 = icmp eq i64 %135, 0
  %139 = icmp eq i64 %134, %67
  %140 = icmp ult i32 %70, 16
  %141 = and i64 %71, -16
  %142 = and i64 %83, 7
  %143 = icmp ult i64 %81, 112
  %144 = sub nsw i64 %83, %142
  %145 = icmp eq i64 %142, 0
  %146 = icmp eq i64 %141, %71
  br label %148

147:                                              ; preds = %800
  ret void

148:                                              ; preds = %18, %800
  %149 = phi i64 [ %76, %18 ], [ %801, %800 ]
  %150 = icmp eq i64 %149, 2
  %151 = select i1 %150, i64 4624, i64 0
  %152 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %58, align 8
  %153 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %152, i64 0, i32 11, i64 %149
  %154 = load i32, i32* %153, align 4
  %155 = ashr i32 %154, 1
  %156 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 28, i64 %149
  %157 = bitcast i8** %156 to i16**
  %158 = load i16*, i16** %157, align 8
  %159 = mul i32 %155, %59
  %160 = sext i32 %159 to i64
  %161 = getelementptr i16, i16* %158, i64 %60
  %162 = getelementptr inbounds i16, i16* %161, i64 %160
  %163 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %61, align 8
  %164 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %163, i64 0, i32 11, i64 %149
  %165 = load i32, i32* %164, align 4
  %166 = ashr i32 %165, 1
  %167 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %62, align 8
  %168 = icmp eq %"class.libgav1::ThreadPool"* %167, null
  br i1 %168, label %177, label %169

169:                                              ; preds = %148
  %170 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %163, i64 0, i32 13, i64 %149
  %171 = bitcast i8** %170 to i16**
  %172 = load i16*, i16** %171, align 8
  %173 = mul nsw i32 %166, %51
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds i16, i16* %172, i64 %60
  %176 = getelementptr inbounds i16, i16* %175, i64 %174
  br label %177

177:                                              ; preds = %148, %169
  %178 = phi i16* [ %176, %169 ], [ null, %148 ]
  %179 = getelementptr inbounds i16, i16* %57, i64 %151
  br i1 %46, label %180, label %314

180:                                              ; preds = %177
  %181 = getelementptr inbounds i16, i16* %179, i64 -2
  br i1 %72, label %894, label %182

182:                                              ; preds = %180
  br i1 %98, label %242, label %183

183:                                              ; preds = %182
  br i1 %101, label %229, label %184

184:                                              ; preds = %183, %184
  %185 = phi i64 [ %226, %184 ], [ 0, %183 ]
  %186 = phi i64 [ %227, %184 ], [ %102, %183 ]
  %187 = getelementptr inbounds i16, i16* %181, i64 %185
  %188 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %188, align 2
  %189 = getelementptr inbounds i16, i16* %187, i64 8
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %190, align 2
  %191 = or i64 %185, 16
  %192 = getelementptr inbounds i16, i16* %181, i64 %191
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %193, align 2
  %194 = getelementptr inbounds i16, i16* %192, i64 8
  %195 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %195, align 2
  %196 = or i64 %185, 32
  %197 = getelementptr inbounds i16, i16* %181, i64 %196
  %198 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %198, align 2
  %199 = getelementptr inbounds i16, i16* %197, i64 8
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %200, align 2
  %201 = or i64 %185, 48
  %202 = getelementptr inbounds i16, i16* %181, i64 %201
  %203 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %203, align 2
  %204 = getelementptr inbounds i16, i16* %202, i64 8
  %205 = bitcast i16* %204 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %205, align 2
  %206 = or i64 %185, 64
  %207 = getelementptr inbounds i16, i16* %181, i64 %206
  %208 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %208, align 2
  %209 = getelementptr inbounds i16, i16* %207, i64 8
  %210 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %210, align 2
  %211 = or i64 %185, 80
  %212 = getelementptr inbounds i16, i16* %181, i64 %211
  %213 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %213, align 2
  %214 = getelementptr inbounds i16, i16* %212, i64 8
  %215 = bitcast i16* %214 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %215, align 2
  %216 = or i64 %185, 96
  %217 = getelementptr inbounds i16, i16* %181, i64 %216
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %218, align 2
  %219 = getelementptr inbounds i16, i16* %217, i64 8
  %220 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %220, align 2
  %221 = or i64 %185, 112
  %222 = getelementptr inbounds i16, i16* %181, i64 %221
  %223 = bitcast i16* %222 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %223, align 2
  %224 = getelementptr inbounds i16, i16* %222, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %225, align 2
  %226 = add i64 %185, 128
  %227 = add i64 %186, -8
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %229, label %184, !llvm.loop !19

229:                                              ; preds = %184, %183
  %230 = phi i64 [ 0, %183 ], [ %226, %184 ]
  br i1 %103, label %241, label %231

231:                                              ; preds = %229, %231
  %232 = phi i64 [ %238, %231 ], [ %230, %229 ]
  %233 = phi i64 [ %239, %231 ], [ %100, %229 ]
  %234 = getelementptr inbounds i16, i16* %181, i64 %232
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %235, align 2
  %236 = getelementptr inbounds i16, i16* %234, i64 8
  %237 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %237, align 2
  %238 = add i64 %232, 16
  %239 = add i64 %233, -1
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %241, label %231, !llvm.loop !21

241:                                              ; preds = %231, %229
  br i1 %104, label %249, label %242

242:                                              ; preds = %241, %182
  %243 = phi i64 [ 0, %182 ], [ %99, %241 ]
  br label %244

244:                                              ; preds = %242, %244
  %245 = phi i64 [ %247, %244 ], [ %243, %242 ]
  %246 = getelementptr inbounds i16, i16* %181, i64 %245
  store i16 16384, i16* %246, align 2
  %247 = add nuw i64 %245, 1
  %248 = icmp eq i64 %247, %71
  br i1 %248, label %249, label %244, !llvm.loop !22

249:                                              ; preds = %244, %241
  %250 = getelementptr inbounds i16, i16* %179, i64 %6
  %251 = getelementptr inbounds i16, i16* %250, i64 -2
  br i1 %72, label %894, label %252

252:                                              ; preds = %249
  br i1 %105, label %253, label %255

253:                                              ; preds = %313, %252
  %254 = phi i64 [ 0, %252 ], [ %106, %313 ]
  br label %889

255:                                              ; preds = %252
  br i1 %108, label %301, label %256

256:                                              ; preds = %255, %256
  %257 = phi i64 [ %298, %256 ], [ 0, %255 ]
  %258 = phi i64 [ %299, %256 ], [ %109, %255 ]
  %259 = getelementptr inbounds i16, i16* %251, i64 %257
  %260 = bitcast i16* %259 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %260, align 2
  %261 = getelementptr inbounds i16, i16* %259, i64 8
  %262 = bitcast i16* %261 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %262, align 2
  %263 = or i64 %257, 16
  %264 = getelementptr inbounds i16, i16* %251, i64 %263
  %265 = bitcast i16* %264 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %265, align 2
  %266 = getelementptr inbounds i16, i16* %264, i64 8
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %267, align 2
  %268 = or i64 %257, 32
  %269 = getelementptr inbounds i16, i16* %251, i64 %268
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %270, align 2
  %271 = getelementptr inbounds i16, i16* %269, i64 8
  %272 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %272, align 2
  %273 = or i64 %257, 48
  %274 = getelementptr inbounds i16, i16* %251, i64 %273
  %275 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %275, align 2
  %276 = getelementptr inbounds i16, i16* %274, i64 8
  %277 = bitcast i16* %276 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %277, align 2
  %278 = or i64 %257, 64
  %279 = getelementptr inbounds i16, i16* %251, i64 %278
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %280, align 2
  %281 = getelementptr inbounds i16, i16* %279, i64 8
  %282 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %282, align 2
  %283 = or i64 %257, 80
  %284 = getelementptr inbounds i16, i16* %251, i64 %283
  %285 = bitcast i16* %284 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %285, align 2
  %286 = getelementptr inbounds i16, i16* %284, i64 8
  %287 = bitcast i16* %286 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %287, align 2
  %288 = or i64 %257, 96
  %289 = getelementptr inbounds i16, i16* %251, i64 %288
  %290 = bitcast i16* %289 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %290, align 2
  %291 = getelementptr inbounds i16, i16* %289, i64 8
  %292 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %292, align 2
  %293 = or i64 %257, 112
  %294 = getelementptr inbounds i16, i16* %251, i64 %293
  %295 = bitcast i16* %294 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %295, align 2
  %296 = getelementptr inbounds i16, i16* %294, i64 8
  %297 = bitcast i16* %296 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %297, align 2
  %298 = add i64 %257, 128
  %299 = add i64 %258, -8
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %301, label %256, !llvm.loop !24

301:                                              ; preds = %256, %255
  %302 = phi i64 [ 0, %255 ], [ %298, %256 ]
  br i1 %110, label %313, label %303

303:                                              ; preds = %301, %303
  %304 = phi i64 [ %310, %303 ], [ %302, %301 ]
  %305 = phi i64 [ %311, %303 ], [ %107, %301 ]
  %306 = getelementptr inbounds i16, i16* %251, i64 %304
  %307 = bitcast i16* %306 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %307, align 2
  %308 = getelementptr inbounds i16, i16* %306, i64 8
  %309 = bitcast i16* %308 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %309, align 2
  %310 = add i64 %304, 16
  %311 = add i64 %305, -1
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %313, label %303, !llvm.loop !25

313:                                              ; preds = %303, %301
  br i1 %111, label %894, label %253

314:                                              ; preds = %177
  %315 = select i1 %168, i16* %162, i16* %178
  %316 = select i1 %168, i32 %155, i32 %166
  %317 = sext i32 %316 to i64
  %318 = sext i32 %166 to i64
  %319 = sext i32 %155 to i64
  %320 = shl nsw i64 %319, 1
  %321 = add nsw i64 %320, %160
  %322 = shl nsw i64 %318, 1
  %323 = getelementptr inbounds i16, i16* %179, i64 -2
  br i1 %43, label %324, label %326

324:                                              ; preds = %314
  store i16 16384, i16* %323, align 2
  %325 = getelementptr inbounds i16, i16* %179, i64 -1
  store i16 16384, i16* %325, align 2
  br label %331

326:                                              ; preds = %314
  %327 = getelementptr inbounds i16, i16* %315, i64 -2
  %328 = bitcast i16* %327 to i32*
  %329 = bitcast i16* %323 to i32*
  %330 = load i32, i32* %328, align 2
  store i32 %330, i32* %329, align 2
  br label %331

331:                                              ; preds = %326, %324
  %332 = bitcast i16* %179 to i8*
  %333 = bitcast i16* %315 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %332, i8* align 2 %333, i64 %64, i1 false) #3
  %334 = getelementptr inbounds i16, i16* %179, i64 %63
  br i1 %45, label %335, label %403

335:                                              ; preds = %331
  br i1 %69, label %407, label %336

336:                                              ; preds = %335
  br i1 %84, label %396, label %337

337:                                              ; preds = %336
  br i1 %87, label %383, label %338

338:                                              ; preds = %337, %338
  %339 = phi i64 [ %380, %338 ], [ 0, %337 ]
  %340 = phi i64 [ %381, %338 ], [ %88, %337 ]
  %341 = getelementptr inbounds i16, i16* %334, i64 %339
  %342 = bitcast i16* %341 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %342, align 2
  %343 = getelementptr inbounds i16, i16* %341, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %344, align 2
  %345 = or i64 %339, 16
  %346 = getelementptr inbounds i16, i16* %334, i64 %345
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %347, align 2
  %348 = getelementptr inbounds i16, i16* %346, i64 8
  %349 = bitcast i16* %348 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %349, align 2
  %350 = or i64 %339, 32
  %351 = getelementptr inbounds i16, i16* %334, i64 %350
  %352 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %352, align 2
  %353 = getelementptr inbounds i16, i16* %351, i64 8
  %354 = bitcast i16* %353 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %354, align 2
  %355 = or i64 %339, 48
  %356 = getelementptr inbounds i16, i16* %334, i64 %355
  %357 = bitcast i16* %356 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %357, align 2
  %358 = getelementptr inbounds i16, i16* %356, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %359, align 2
  %360 = or i64 %339, 64
  %361 = getelementptr inbounds i16, i16* %334, i64 %360
  %362 = bitcast i16* %361 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %362, align 2
  %363 = getelementptr inbounds i16, i16* %361, i64 8
  %364 = bitcast i16* %363 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %364, align 2
  %365 = or i64 %339, 80
  %366 = getelementptr inbounds i16, i16* %334, i64 %365
  %367 = bitcast i16* %366 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %367, align 2
  %368 = getelementptr inbounds i16, i16* %366, i64 8
  %369 = bitcast i16* %368 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %369, align 2
  %370 = or i64 %339, 96
  %371 = getelementptr inbounds i16, i16* %334, i64 %370
  %372 = bitcast i16* %371 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %372, align 2
  %373 = getelementptr inbounds i16, i16* %371, i64 8
  %374 = bitcast i16* %373 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %374, align 2
  %375 = or i64 %339, 112
  %376 = getelementptr inbounds i16, i16* %334, i64 %375
  %377 = bitcast i16* %376 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %377, align 2
  %378 = getelementptr inbounds i16, i16* %376, i64 8
  %379 = bitcast i16* %378 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %379, align 2
  %380 = add i64 %339, 128
  %381 = add i64 %340, -8
  %382 = icmp eq i64 %381, 0
  br i1 %382, label %383, label %338, !llvm.loop !26

383:                                              ; preds = %338, %337
  %384 = phi i64 [ 0, %337 ], [ %380, %338 ]
  br i1 %89, label %395, label %385

385:                                              ; preds = %383, %385
  %386 = phi i64 [ %392, %385 ], [ %384, %383 ]
  %387 = phi i64 [ %393, %385 ], [ %86, %383 ]
  %388 = getelementptr inbounds i16, i16* %334, i64 %386
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %389, align 2
  %390 = getelementptr inbounds i16, i16* %388, i64 8
  %391 = bitcast i16* %390 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %391, align 2
  %392 = add i64 %386, 16
  %393 = add i64 %387, -1
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %395, label %385, !llvm.loop !27

395:                                              ; preds = %385, %383
  br i1 %90, label %407, label %396

396:                                              ; preds = %395, %336
  %397 = phi i64 [ 0, %336 ], [ %85, %395 ]
  br label %398

398:                                              ; preds = %396, %398
  %399 = phi i64 [ %401, %398 ], [ %397, %396 ]
  %400 = getelementptr inbounds i16, i16* %334, i64 %399
  store i16 16384, i16* %400, align 2
  %401 = add nuw i64 %399, 1
  %402 = icmp eq i64 %401, %67
  br i1 %402, label %407, label %398, !llvm.loop !28

403:                                              ; preds = %331
  %404 = bitcast i16* %334 to i8*
  %405 = getelementptr inbounds i16, i16* %315, i64 %63
  %406 = bitcast i16* %405 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %404, i8* align 2 %406, i64 %68, i1 false) #3
  br label %407

407:                                              ; preds = %398, %395, %335, %403
  %408 = getelementptr inbounds i16, i16* %315, i64 %317
  %409 = getelementptr inbounds i16, i16* %179, i64 %6
  %410 = getelementptr inbounds i16, i16* %409, i64 -2
  br i1 %43, label %808, label %803

411:                                              ; preds = %886, %894
  %412 = phi i64 [ %319, %886 ], [ %895, %894 ]
  %413 = phi i16* [ %887, %886 ], [ %162, %894 ]
  %414 = phi i16* [ %888, %886 ], [ %178, %894 ]
  %415 = getelementptr inbounds i16, i16* %179, i64 %6
  %416 = getelementptr inbounds i16, i16* %415, i64 %6
  %417 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %62, align 8
  %418 = icmp eq %"class.libgav1::ThreadPool"* %417, null
  %419 = or i1 %48, %418
  %420 = select i1 %419, i32 0, i32 2
  %421 = or i1 %418, %73
  %422 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 %149, i64 0
  %423 = bitcast i8* %422 to i16*
  %424 = select i1 %421, i16* null, i16* %423
  br label %425

425:                                              ; preds = %521, %411
  %426 = phi i16* [ %416, %411 ], [ %522, %521 ]
  %427 = phi i16* [ %413, %411 ], [ %523, %521 ]
  %428 = phi i32 [ %36, %411 ], [ %527, %521 ]
  %429 = phi i16* [ %424, %411 ], [ %526, %521 ]
  br i1 %43, label %430, label %433

430:                                              ; preds = %425
  %431 = getelementptr inbounds i16, i16* %426, i64 -2
  store i16 16384, i16* %431, align 2
  %432 = getelementptr inbounds i16, i16* %426, i64 -1
  store i16 16384, i16* %432, align 2
  br label %445

433:                                              ; preds = %425
  %434 = icmp eq i16* %429, null
  %435 = getelementptr inbounds i16, i16* %426, i64 -2
  br i1 %434, label %436, label %441

436:                                              ; preds = %433
  %437 = getelementptr inbounds i16, i16* %427, i64 -2
  %438 = bitcast i16* %437 to i32*
  %439 = bitcast i16* %435 to i32*
  %440 = load i32, i32* %438, align 2
  store i32 %440, i32* %439, align 2
  br label %445

441:                                              ; preds = %433
  %442 = bitcast i16* %429 to i32*
  %443 = bitcast i16* %435 to i32*
  %444 = load i32, i32* %442, align 2
  store i32 %444, i32* %443, align 2
  br label %445

445:                                              ; preds = %441, %436, %430
  %446 = bitcast i16* %426 to i8*
  %447 = bitcast i16* %427 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %446, i8* align 2 %447, i64 %64, i1 false) #3
  %448 = getelementptr inbounds i16, i16* %426, i64 %63
  br i1 %45, label %449, label %517

449:                                              ; preds = %445
  br i1 %69, label %521, label %450

450:                                              ; preds = %449
  br i1 %112, label %510, label %451

451:                                              ; preds = %450
  br i1 %115, label %497, label %452

452:                                              ; preds = %451, %452
  %453 = phi i64 [ %494, %452 ], [ 0, %451 ]
  %454 = phi i64 [ %495, %452 ], [ %116, %451 ]
  %455 = getelementptr inbounds i16, i16* %448, i64 %453
  %456 = bitcast i16* %455 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %456, align 2
  %457 = getelementptr inbounds i16, i16* %455, i64 8
  %458 = bitcast i16* %457 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %458, align 2
  %459 = or i64 %453, 16
  %460 = getelementptr inbounds i16, i16* %448, i64 %459
  %461 = bitcast i16* %460 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %461, align 2
  %462 = getelementptr inbounds i16, i16* %460, i64 8
  %463 = bitcast i16* %462 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %463, align 2
  %464 = or i64 %453, 32
  %465 = getelementptr inbounds i16, i16* %448, i64 %464
  %466 = bitcast i16* %465 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %466, align 2
  %467 = getelementptr inbounds i16, i16* %465, i64 8
  %468 = bitcast i16* %467 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %468, align 2
  %469 = or i64 %453, 48
  %470 = getelementptr inbounds i16, i16* %448, i64 %469
  %471 = bitcast i16* %470 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %471, align 2
  %472 = getelementptr inbounds i16, i16* %470, i64 8
  %473 = bitcast i16* %472 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %473, align 2
  %474 = or i64 %453, 64
  %475 = getelementptr inbounds i16, i16* %448, i64 %474
  %476 = bitcast i16* %475 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %476, align 2
  %477 = getelementptr inbounds i16, i16* %475, i64 8
  %478 = bitcast i16* %477 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %478, align 2
  %479 = or i64 %453, 80
  %480 = getelementptr inbounds i16, i16* %448, i64 %479
  %481 = bitcast i16* %480 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %481, align 2
  %482 = getelementptr inbounds i16, i16* %480, i64 8
  %483 = bitcast i16* %482 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %483, align 2
  %484 = or i64 %453, 96
  %485 = getelementptr inbounds i16, i16* %448, i64 %484
  %486 = bitcast i16* %485 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %486, align 2
  %487 = getelementptr inbounds i16, i16* %485, i64 8
  %488 = bitcast i16* %487 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %488, align 2
  %489 = or i64 %453, 112
  %490 = getelementptr inbounds i16, i16* %448, i64 %489
  %491 = bitcast i16* %490 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %491, align 2
  %492 = getelementptr inbounds i16, i16* %490, i64 8
  %493 = bitcast i16* %492 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %493, align 2
  %494 = add i64 %453, 128
  %495 = add i64 %454, -8
  %496 = icmp eq i64 %495, 0
  br i1 %496, label %497, label %452, !llvm.loop !29

497:                                              ; preds = %452, %451
  %498 = phi i64 [ 0, %451 ], [ %494, %452 ]
  br i1 %117, label %509, label %499

499:                                              ; preds = %497, %499
  %500 = phi i64 [ %506, %499 ], [ %498, %497 ]
  %501 = phi i64 [ %507, %499 ], [ %114, %497 ]
  %502 = getelementptr inbounds i16, i16* %448, i64 %500
  %503 = bitcast i16* %502 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %503, align 2
  %504 = getelementptr inbounds i16, i16* %502, i64 8
  %505 = bitcast i16* %504 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %505, align 2
  %506 = add i64 %500, 16
  %507 = add i64 %501, -1
  %508 = icmp eq i64 %507, 0
  br i1 %508, label %509, label %499, !llvm.loop !30

509:                                              ; preds = %499, %497
  br i1 %118, label %521, label %510

510:                                              ; preds = %509, %450
  %511 = phi i64 [ 0, %450 ], [ %113, %509 ]
  br label %512

512:                                              ; preds = %510, %512
  %513 = phi i64 [ %515, %512 ], [ %511, %510 ]
  %514 = getelementptr inbounds i16, i16* %448, i64 %513
  store i16 16384, i16* %514, align 2
  %515 = add nuw i64 %513, 1
  %516 = icmp eq i64 %515, %67
  br i1 %516, label %521, label %512, !llvm.loop !31

517:                                              ; preds = %445
  %518 = bitcast i16* %448 to i8*
  %519 = getelementptr inbounds i16, i16* %427, i64 %63
  %520 = bitcast i16* %519 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %518, i8* align 2 %520, i64 %68, i1 false) #3
  br label %521

521:                                              ; preds = %512, %509, %449, %517
  %522 = getelementptr inbounds i16, i16* %426, i64 %6
  %523 = getelementptr inbounds i16, i16* %427, i64 %412
  %524 = icmp eq i16* %429, null
  %525 = getelementptr inbounds i16, i16* %429, i64 2
  %526 = select i1 %524, i16* null, i16* %525
  %527 = add nsw i32 %428, -1
  %528 = icmp eq i32 %527, %420
  br i1 %528, label %529, label %425

529:                                              ; preds = %521
  br i1 %419, label %623, label %530

530:                                              ; preds = %529
  %531 = and i32 %165, -2
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds i16, i16* %414, i64 %532
  %534 = sext i32 %166 to i64
  %535 = getelementptr inbounds i16, i16* %522, i64 -2
  br i1 %43, label %536, label %538

536:                                              ; preds = %530
  store i16 16384, i16* %535, align 2
  %537 = getelementptr inbounds i16, i16* %522, i64 -1
  store i16 16384, i16* %537, align 2
  br label %543

538:                                              ; preds = %530
  %539 = getelementptr inbounds i16, i16* %533, i64 -2
  %540 = bitcast i16* %539 to i32*
  %541 = bitcast i16* %535 to i32*
  %542 = load i32, i32* %540, align 2
  store i32 %542, i32* %541, align 2
  br label %543

543:                                              ; preds = %538, %536
  %544 = bitcast i16* %522 to i8*
  %545 = bitcast i16* %533 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %544, i8* align 2 %545, i64 %64, i1 false) #3
  %546 = getelementptr inbounds i16, i16* %522, i64 %63
  br i1 %45, label %547, label %615

547:                                              ; preds = %543
  br i1 %69, label %619, label %548

548:                                              ; preds = %547
  br i1 %119, label %608, label %549

549:                                              ; preds = %548
  br i1 %122, label %595, label %550

550:                                              ; preds = %549, %550
  %551 = phi i64 [ %592, %550 ], [ 0, %549 ]
  %552 = phi i64 [ %593, %550 ], [ %123, %549 ]
  %553 = getelementptr inbounds i16, i16* %546, i64 %551
  %554 = bitcast i16* %553 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %554, align 2
  %555 = getelementptr inbounds i16, i16* %553, i64 8
  %556 = bitcast i16* %555 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %556, align 2
  %557 = or i64 %551, 16
  %558 = getelementptr inbounds i16, i16* %546, i64 %557
  %559 = bitcast i16* %558 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %559, align 2
  %560 = getelementptr inbounds i16, i16* %558, i64 8
  %561 = bitcast i16* %560 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %561, align 2
  %562 = or i64 %551, 32
  %563 = getelementptr inbounds i16, i16* %546, i64 %562
  %564 = bitcast i16* %563 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %564, align 2
  %565 = getelementptr inbounds i16, i16* %563, i64 8
  %566 = bitcast i16* %565 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %566, align 2
  %567 = or i64 %551, 48
  %568 = getelementptr inbounds i16, i16* %546, i64 %567
  %569 = bitcast i16* %568 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %569, align 2
  %570 = getelementptr inbounds i16, i16* %568, i64 8
  %571 = bitcast i16* %570 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %571, align 2
  %572 = or i64 %551, 64
  %573 = getelementptr inbounds i16, i16* %546, i64 %572
  %574 = bitcast i16* %573 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %574, align 2
  %575 = getelementptr inbounds i16, i16* %573, i64 8
  %576 = bitcast i16* %575 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %576, align 2
  %577 = or i64 %551, 80
  %578 = getelementptr inbounds i16, i16* %546, i64 %577
  %579 = bitcast i16* %578 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %579, align 2
  %580 = getelementptr inbounds i16, i16* %578, i64 8
  %581 = bitcast i16* %580 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %581, align 2
  %582 = or i64 %551, 96
  %583 = getelementptr inbounds i16, i16* %546, i64 %582
  %584 = bitcast i16* %583 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %584, align 2
  %585 = getelementptr inbounds i16, i16* %583, i64 8
  %586 = bitcast i16* %585 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %586, align 2
  %587 = or i64 %551, 112
  %588 = getelementptr inbounds i16, i16* %546, i64 %587
  %589 = bitcast i16* %588 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %589, align 2
  %590 = getelementptr inbounds i16, i16* %588, i64 8
  %591 = bitcast i16* %590 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %591, align 2
  %592 = add i64 %551, 128
  %593 = add i64 %552, -8
  %594 = icmp eq i64 %593, 0
  br i1 %594, label %595, label %550, !llvm.loop !32

595:                                              ; preds = %550, %549
  %596 = phi i64 [ 0, %549 ], [ %592, %550 ]
  br i1 %124, label %607, label %597

597:                                              ; preds = %595, %597
  %598 = phi i64 [ %604, %597 ], [ %596, %595 ]
  %599 = phi i64 [ %605, %597 ], [ %121, %595 ]
  %600 = getelementptr inbounds i16, i16* %546, i64 %598
  %601 = bitcast i16* %600 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %601, align 2
  %602 = getelementptr inbounds i16, i16* %600, i64 8
  %603 = bitcast i16* %602 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %603, align 2
  %604 = add i64 %598, 16
  %605 = add i64 %599, -1
  %606 = icmp eq i64 %605, 0
  br i1 %606, label %607, label %597, !llvm.loop !33

607:                                              ; preds = %597, %595
  br i1 %125, label %619, label %608

608:                                              ; preds = %607, %548
  %609 = phi i64 [ 0, %548 ], [ %120, %607 ]
  br label %610

610:                                              ; preds = %608, %610
  %611 = phi i64 [ %613, %610 ], [ %609, %608 ]
  %612 = getelementptr inbounds i16, i16* %546, i64 %611
  store i16 16384, i16* %612, align 2
  %613 = add nuw i64 %611, 1
  %614 = icmp eq i64 %613, %67
  br i1 %614, label %619, label %610, !llvm.loop !34

615:                                              ; preds = %543
  %616 = bitcast i16* %546 to i8*
  %617 = getelementptr inbounds i16, i16* %533, i64 %63
  %618 = bitcast i16* %617 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %616, i8* align 2 %618, i64 %68, i1 false) #3
  br label %619

619:                                              ; preds = %610, %607, %547, %615
  %620 = getelementptr inbounds i16, i16* %522, i64 %6
  %621 = getelementptr inbounds i16, i16* %533, i64 %534
  %622 = getelementptr inbounds i16, i16* %620, i64 -2
  br i1 %43, label %901, label %896

623:                                              ; preds = %529, %979
  %624 = phi i16* [ %522, %529 ], [ %980, %979 ]
  %625 = phi i16* [ %414, %529 ], [ %981, %979 ]
  br i1 %48, label %626, label %701

626:                                              ; preds = %623, %697
  %627 = phi i16* [ %698, %697 ], [ %624, %623 ]
  %628 = phi i32 [ %699, %697 ], [ 0, %623 ]
  %629 = getelementptr inbounds i16, i16* %627, i64 -2
  br i1 %72, label %697, label %630

630:                                              ; preds = %626
  br i1 %140, label %690, label %631

631:                                              ; preds = %630
  br i1 %143, label %677, label %632

632:                                              ; preds = %631, %632
  %633 = phi i64 [ %674, %632 ], [ 0, %631 ]
  %634 = phi i64 [ %675, %632 ], [ %144, %631 ]
  %635 = getelementptr inbounds i16, i16* %629, i64 %633
  %636 = bitcast i16* %635 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %636, align 2
  %637 = getelementptr inbounds i16, i16* %635, i64 8
  %638 = bitcast i16* %637 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %638, align 2
  %639 = or i64 %633, 16
  %640 = getelementptr inbounds i16, i16* %629, i64 %639
  %641 = bitcast i16* %640 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %641, align 2
  %642 = getelementptr inbounds i16, i16* %640, i64 8
  %643 = bitcast i16* %642 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %643, align 2
  %644 = or i64 %633, 32
  %645 = getelementptr inbounds i16, i16* %629, i64 %644
  %646 = bitcast i16* %645 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %646, align 2
  %647 = getelementptr inbounds i16, i16* %645, i64 8
  %648 = bitcast i16* %647 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %648, align 2
  %649 = or i64 %633, 48
  %650 = getelementptr inbounds i16, i16* %629, i64 %649
  %651 = bitcast i16* %650 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %651, align 2
  %652 = getelementptr inbounds i16, i16* %650, i64 8
  %653 = bitcast i16* %652 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %653, align 2
  %654 = or i64 %633, 64
  %655 = getelementptr inbounds i16, i16* %629, i64 %654
  %656 = bitcast i16* %655 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %656, align 2
  %657 = getelementptr inbounds i16, i16* %655, i64 8
  %658 = bitcast i16* %657 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %658, align 2
  %659 = or i64 %633, 80
  %660 = getelementptr inbounds i16, i16* %629, i64 %659
  %661 = bitcast i16* %660 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %661, align 2
  %662 = getelementptr inbounds i16, i16* %660, i64 8
  %663 = bitcast i16* %662 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %663, align 2
  %664 = or i64 %633, 96
  %665 = getelementptr inbounds i16, i16* %629, i64 %664
  %666 = bitcast i16* %665 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %666, align 2
  %667 = getelementptr inbounds i16, i16* %665, i64 8
  %668 = bitcast i16* %667 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %668, align 2
  %669 = or i64 %633, 112
  %670 = getelementptr inbounds i16, i16* %629, i64 %669
  %671 = bitcast i16* %670 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %671, align 2
  %672 = getelementptr inbounds i16, i16* %670, i64 8
  %673 = bitcast i16* %672 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %673, align 2
  %674 = add i64 %633, 128
  %675 = add i64 %634, -8
  %676 = icmp eq i64 %675, 0
  br i1 %676, label %677, label %632, !llvm.loop !35

677:                                              ; preds = %632, %631
  %678 = phi i64 [ 0, %631 ], [ %674, %632 ]
  br i1 %145, label %689, label %679

679:                                              ; preds = %677, %679
  %680 = phi i64 [ %686, %679 ], [ %678, %677 ]
  %681 = phi i64 [ %687, %679 ], [ %142, %677 ]
  %682 = getelementptr inbounds i16, i16* %629, i64 %680
  %683 = bitcast i16* %682 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %683, align 2
  %684 = getelementptr inbounds i16, i16* %682, i64 8
  %685 = bitcast i16* %684 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %685, align 2
  %686 = add i64 %680, 16
  %687 = add i64 %681, -1
  %688 = icmp eq i64 %687, 0
  br i1 %688, label %689, label %679, !llvm.loop !36

689:                                              ; preds = %679, %677
  br i1 %146, label %697, label %690

690:                                              ; preds = %689, %630
  %691 = phi i64 [ 0, %630 ], [ %141, %689 ]
  br label %692

692:                                              ; preds = %690, %692
  %693 = phi i64 [ %695, %692 ], [ %691, %690 ]
  %694 = getelementptr inbounds i16, i16* %629, i64 %693
  store i16 16384, i16* %694, align 2
  %695 = add nuw i64 %693, 1
  %696 = icmp eq i64 %695, %71
  br i1 %696, label %697, label %692, !llvm.loop !37

697:                                              ; preds = %692, %689, %626
  %698 = getelementptr inbounds i16, i16* %627, i64 %6
  %699 = add nuw nsw i32 %628, 1
  %700 = icmp slt i32 %699, %75
  br i1 %700, label %626, label %800

701:                                              ; preds = %623
  %702 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %62, align 8
  %703 = icmp eq %"class.libgav1::ThreadPool"* %702, null
  %704 = select i1 %703, i16* %523, i16* %625
  %705 = select i1 %703, i32 %155, i32 %166
  %706 = sext i32 %705 to i64
  br label %707

707:                                              ; preds = %795, %701
  %708 = phi i16* [ %624, %701 ], [ %797, %795 ]
  %709 = phi i32 [ 0, %701 ], [ %798, %795 ]
  %710 = phi i16* [ %704, %701 ], [ %796, %795 ]
  %711 = getelementptr inbounds i16, i16* %708, i64 -2
  br i1 %43, label %712, label %714

712:                                              ; preds = %707
  store i16 16384, i16* %711, align 2
  %713 = getelementptr inbounds i16, i16* %708, i64 -1
  store i16 16384, i16* %713, align 2
  br label %719

714:                                              ; preds = %707
  %715 = getelementptr inbounds i16, i16* %710, i64 -2
  %716 = bitcast i16* %715 to i32*
  %717 = bitcast i16* %711 to i32*
  %718 = load i32, i32* %716, align 2
  store i32 %718, i32* %717, align 2
  br label %719

719:                                              ; preds = %714, %712
  %720 = bitcast i16* %708 to i8*
  %721 = bitcast i16* %710 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %720, i8* align 2 %721, i64 %64, i1 false) #3
  %722 = getelementptr inbounds i16, i16* %708, i64 %63
  br i1 %45, label %723, label %791

723:                                              ; preds = %719
  br i1 %69, label %795, label %724

724:                                              ; preds = %723
  br i1 %133, label %784, label %725

725:                                              ; preds = %724
  br i1 %136, label %771, label %726

726:                                              ; preds = %725, %726
  %727 = phi i64 [ %768, %726 ], [ 0, %725 ]
  %728 = phi i64 [ %769, %726 ], [ %137, %725 ]
  %729 = getelementptr inbounds i16, i16* %722, i64 %727
  %730 = bitcast i16* %729 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %730, align 2
  %731 = getelementptr inbounds i16, i16* %729, i64 8
  %732 = bitcast i16* %731 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %732, align 2
  %733 = or i64 %727, 16
  %734 = getelementptr inbounds i16, i16* %722, i64 %733
  %735 = bitcast i16* %734 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %735, align 2
  %736 = getelementptr inbounds i16, i16* %734, i64 8
  %737 = bitcast i16* %736 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %737, align 2
  %738 = or i64 %727, 32
  %739 = getelementptr inbounds i16, i16* %722, i64 %738
  %740 = bitcast i16* %739 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %740, align 2
  %741 = getelementptr inbounds i16, i16* %739, i64 8
  %742 = bitcast i16* %741 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %742, align 2
  %743 = or i64 %727, 48
  %744 = getelementptr inbounds i16, i16* %722, i64 %743
  %745 = bitcast i16* %744 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %745, align 2
  %746 = getelementptr inbounds i16, i16* %744, i64 8
  %747 = bitcast i16* %746 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %747, align 2
  %748 = or i64 %727, 64
  %749 = getelementptr inbounds i16, i16* %722, i64 %748
  %750 = bitcast i16* %749 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %750, align 2
  %751 = getelementptr inbounds i16, i16* %749, i64 8
  %752 = bitcast i16* %751 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %752, align 2
  %753 = or i64 %727, 80
  %754 = getelementptr inbounds i16, i16* %722, i64 %753
  %755 = bitcast i16* %754 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %755, align 2
  %756 = getelementptr inbounds i16, i16* %754, i64 8
  %757 = bitcast i16* %756 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %757, align 2
  %758 = or i64 %727, 96
  %759 = getelementptr inbounds i16, i16* %722, i64 %758
  %760 = bitcast i16* %759 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %760, align 2
  %761 = getelementptr inbounds i16, i16* %759, i64 8
  %762 = bitcast i16* %761 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %762, align 2
  %763 = or i64 %727, 112
  %764 = getelementptr inbounds i16, i16* %722, i64 %763
  %765 = bitcast i16* %764 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %765, align 2
  %766 = getelementptr inbounds i16, i16* %764, i64 8
  %767 = bitcast i16* %766 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %767, align 2
  %768 = add i64 %727, 128
  %769 = add i64 %728, -8
  %770 = icmp eq i64 %769, 0
  br i1 %770, label %771, label %726, !llvm.loop !38

771:                                              ; preds = %726, %725
  %772 = phi i64 [ 0, %725 ], [ %768, %726 ]
  br i1 %138, label %783, label %773

773:                                              ; preds = %771, %773
  %774 = phi i64 [ %780, %773 ], [ %772, %771 ]
  %775 = phi i64 [ %781, %773 ], [ %135, %771 ]
  %776 = getelementptr inbounds i16, i16* %722, i64 %774
  %777 = bitcast i16* %776 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %777, align 2
  %778 = getelementptr inbounds i16, i16* %776, i64 8
  %779 = bitcast i16* %778 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %779, align 2
  %780 = add i64 %774, 16
  %781 = add i64 %775, -1
  %782 = icmp eq i64 %781, 0
  br i1 %782, label %783, label %773, !llvm.loop !39

783:                                              ; preds = %773, %771
  br i1 %139, label %795, label %784

784:                                              ; preds = %783, %724
  %785 = phi i64 [ 0, %724 ], [ %134, %783 ]
  br label %786

786:                                              ; preds = %784, %786
  %787 = phi i64 [ %789, %786 ], [ %785, %784 ]
  %788 = getelementptr inbounds i16, i16* %722, i64 %787
  store i16 16384, i16* %788, align 2
  %789 = add nuw i64 %787, 1
  %790 = icmp eq i64 %789, %67
  br i1 %790, label %795, label %786, !llvm.loop !40

791:                                              ; preds = %719
  %792 = bitcast i16* %722 to i8*
  %793 = getelementptr inbounds i16, i16* %710, i64 %63
  %794 = bitcast i16* %793 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %792, i8* align 2 %794, i64 %68, i1 false) #3
  br label %795

795:                                              ; preds = %786, %783, %723, %791
  %796 = getelementptr inbounds i16, i16* %710, i64 %706
  %797 = getelementptr inbounds i16, i16* %708, i64 %6
  %798 = add nuw nsw i32 %709, 1
  %799 = icmp slt i32 %798, %75
  br i1 %799, label %707, label %800

800:                                              ; preds = %795, %697
  %801 = add nuw nsw i64 %149, 1
  %802 = icmp ult i64 %801, %77
  br i1 %802, label %148, label %147

803:                                              ; preds = %407
  %804 = getelementptr inbounds i16, i16* %408, i64 -2
  %805 = bitcast i16* %804 to i32*
  %806 = bitcast i16* %410 to i32*
  %807 = load i32, i32* %805, align 2
  store i32 %807, i32* %806, align 2
  br label %810

808:                                              ; preds = %407
  store i16 16384, i16* %410, align 2
  %809 = getelementptr inbounds i16, i16* %409, i64 -1
  store i16 16384, i16* %809, align 2
  br label %810

810:                                              ; preds = %808, %803
  %811 = bitcast i16* %409 to i8*
  %812 = bitcast i16* %408 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %811, i8* align 2 %812, i64 %64, i1 false) #3
  %813 = getelementptr inbounds i16, i16* %409, i64 %63
  br i1 %45, label %818, label %814

814:                                              ; preds = %810
  %815 = bitcast i16* %813 to i8*
  %816 = getelementptr inbounds i16, i16* %408, i64 %63
  %817 = bitcast i16* %816 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %815, i8* align 2 %817, i64 %68, i1 false) #3
  br label %886

818:                                              ; preds = %810
  br i1 %69, label %886, label %819

819:                                              ; preds = %818
  br i1 %91, label %879, label %820

820:                                              ; preds = %819
  br i1 %94, label %866, label %821

821:                                              ; preds = %820, %821
  %822 = phi i64 [ %863, %821 ], [ 0, %820 ]
  %823 = phi i64 [ %864, %821 ], [ %95, %820 ]
  %824 = getelementptr inbounds i16, i16* %813, i64 %822
  %825 = bitcast i16* %824 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %825, align 2
  %826 = getelementptr inbounds i16, i16* %824, i64 8
  %827 = bitcast i16* %826 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %827, align 2
  %828 = or i64 %822, 16
  %829 = getelementptr inbounds i16, i16* %813, i64 %828
  %830 = bitcast i16* %829 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %830, align 2
  %831 = getelementptr inbounds i16, i16* %829, i64 8
  %832 = bitcast i16* %831 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %832, align 2
  %833 = or i64 %822, 32
  %834 = getelementptr inbounds i16, i16* %813, i64 %833
  %835 = bitcast i16* %834 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %835, align 2
  %836 = getelementptr inbounds i16, i16* %834, i64 8
  %837 = bitcast i16* %836 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %837, align 2
  %838 = or i64 %822, 48
  %839 = getelementptr inbounds i16, i16* %813, i64 %838
  %840 = bitcast i16* %839 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %840, align 2
  %841 = getelementptr inbounds i16, i16* %839, i64 8
  %842 = bitcast i16* %841 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %842, align 2
  %843 = or i64 %822, 64
  %844 = getelementptr inbounds i16, i16* %813, i64 %843
  %845 = bitcast i16* %844 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %845, align 2
  %846 = getelementptr inbounds i16, i16* %844, i64 8
  %847 = bitcast i16* %846 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %847, align 2
  %848 = or i64 %822, 80
  %849 = getelementptr inbounds i16, i16* %813, i64 %848
  %850 = bitcast i16* %849 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %850, align 2
  %851 = getelementptr inbounds i16, i16* %849, i64 8
  %852 = bitcast i16* %851 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %852, align 2
  %853 = or i64 %822, 96
  %854 = getelementptr inbounds i16, i16* %813, i64 %853
  %855 = bitcast i16* %854 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %855, align 2
  %856 = getelementptr inbounds i16, i16* %854, i64 8
  %857 = bitcast i16* %856 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %857, align 2
  %858 = or i64 %822, 112
  %859 = getelementptr inbounds i16, i16* %813, i64 %858
  %860 = bitcast i16* %859 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %860, align 2
  %861 = getelementptr inbounds i16, i16* %859, i64 8
  %862 = bitcast i16* %861 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %862, align 2
  %863 = add i64 %822, 128
  %864 = add i64 %823, -8
  %865 = icmp eq i64 %864, 0
  br i1 %865, label %866, label %821, !llvm.loop !41

866:                                              ; preds = %821, %820
  %867 = phi i64 [ 0, %820 ], [ %863, %821 ]
  br i1 %96, label %878, label %868

868:                                              ; preds = %866, %868
  %869 = phi i64 [ %875, %868 ], [ %867, %866 ]
  %870 = phi i64 [ %876, %868 ], [ %93, %866 ]
  %871 = getelementptr inbounds i16, i16* %813, i64 %869
  %872 = bitcast i16* %871 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %872, align 2
  %873 = getelementptr inbounds i16, i16* %871, i64 8
  %874 = bitcast i16* %873 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %874, align 2
  %875 = add i64 %869, 16
  %876 = add i64 %870, -1
  %877 = icmp eq i64 %876, 0
  br i1 %877, label %878, label %868, !llvm.loop !42

878:                                              ; preds = %868, %866
  br i1 %97, label %886, label %879

879:                                              ; preds = %878, %819
  %880 = phi i64 [ 0, %819 ], [ %92, %878 ]
  br label %881

881:                                              ; preds = %879, %881
  %882 = phi i64 [ %884, %881 ], [ %880, %879 ]
  %883 = getelementptr inbounds i16, i16* %813, i64 %882
  store i16 16384, i16* %883, align 2
  %884 = add nuw i64 %882, 1
  %885 = icmp eq i64 %884, %67
  br i1 %885, label %886, label %881, !llvm.loop !43

886:                                              ; preds = %881, %878, %818, %814
  %887 = getelementptr i16, i16* %161, i64 %321
  %888 = getelementptr i16, i16* %178, i64 %322
  br label %411

889:                                              ; preds = %253, %889
  %890 = phi i64 [ %892, %889 ], [ %254, %253 ]
  %891 = getelementptr inbounds i16, i16* %251, i64 %890
  store i16 16384, i16* %891, align 2
  %892 = add nuw i64 %890, 1
  %893 = icmp eq i64 %892, %71
  br i1 %893, label %894, label %889, !llvm.loop !44

894:                                              ; preds = %889, %313, %180, %249
  %895 = sext i32 %155 to i64
  br label %411

896:                                              ; preds = %619
  %897 = getelementptr inbounds i16, i16* %621, i64 -2
  %898 = bitcast i16* %897 to i32*
  %899 = bitcast i16* %622 to i32*
  %900 = load i32, i32* %898, align 2
  store i32 %900, i32* %899, align 2
  br label %903

901:                                              ; preds = %619
  store i16 16384, i16* %622, align 2
  %902 = getelementptr inbounds i16, i16* %620, i64 -1
  store i16 16384, i16* %902, align 2
  br label %903

903:                                              ; preds = %901, %896
  %904 = bitcast i16* %620 to i8*
  %905 = bitcast i16* %621 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %904, i8* align 2 %905, i64 %64, i1 false) #3
  %906 = getelementptr inbounds i16, i16* %620, i64 %63
  br i1 %45, label %911, label %907

907:                                              ; preds = %903
  %908 = bitcast i16* %906 to i8*
  %909 = getelementptr inbounds i16, i16* %621, i64 %63
  %910 = bitcast i16* %909 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %908, i8* align 2 %910, i64 %68, i1 false) #3
  br label %979

911:                                              ; preds = %903
  br i1 %69, label %979, label %912

912:                                              ; preds = %911
  br i1 %126, label %972, label %913

913:                                              ; preds = %912
  br i1 %129, label %959, label %914

914:                                              ; preds = %913, %914
  %915 = phi i64 [ %956, %914 ], [ 0, %913 ]
  %916 = phi i64 [ %957, %914 ], [ %130, %913 ]
  %917 = getelementptr inbounds i16, i16* %906, i64 %915
  %918 = bitcast i16* %917 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %918, align 2
  %919 = getelementptr inbounds i16, i16* %917, i64 8
  %920 = bitcast i16* %919 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %920, align 2
  %921 = or i64 %915, 16
  %922 = getelementptr inbounds i16, i16* %906, i64 %921
  %923 = bitcast i16* %922 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %923, align 2
  %924 = getelementptr inbounds i16, i16* %922, i64 8
  %925 = bitcast i16* %924 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %925, align 2
  %926 = or i64 %915, 32
  %927 = getelementptr inbounds i16, i16* %906, i64 %926
  %928 = bitcast i16* %927 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %928, align 2
  %929 = getelementptr inbounds i16, i16* %927, i64 8
  %930 = bitcast i16* %929 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %930, align 2
  %931 = or i64 %915, 48
  %932 = getelementptr inbounds i16, i16* %906, i64 %931
  %933 = bitcast i16* %932 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %933, align 2
  %934 = getelementptr inbounds i16, i16* %932, i64 8
  %935 = bitcast i16* %934 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %935, align 2
  %936 = or i64 %915, 64
  %937 = getelementptr inbounds i16, i16* %906, i64 %936
  %938 = bitcast i16* %937 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %938, align 2
  %939 = getelementptr inbounds i16, i16* %937, i64 8
  %940 = bitcast i16* %939 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %940, align 2
  %941 = or i64 %915, 80
  %942 = getelementptr inbounds i16, i16* %906, i64 %941
  %943 = bitcast i16* %942 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %943, align 2
  %944 = getelementptr inbounds i16, i16* %942, i64 8
  %945 = bitcast i16* %944 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %945, align 2
  %946 = or i64 %915, 96
  %947 = getelementptr inbounds i16, i16* %906, i64 %946
  %948 = bitcast i16* %947 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %948, align 2
  %949 = getelementptr inbounds i16, i16* %947, i64 8
  %950 = bitcast i16* %949 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %950, align 2
  %951 = or i64 %915, 112
  %952 = getelementptr inbounds i16, i16* %906, i64 %951
  %953 = bitcast i16* %952 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %953, align 2
  %954 = getelementptr inbounds i16, i16* %952, i64 8
  %955 = bitcast i16* %954 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %955, align 2
  %956 = add i64 %915, 128
  %957 = add i64 %916, -8
  %958 = icmp eq i64 %957, 0
  br i1 %958, label %959, label %914, !llvm.loop !45

959:                                              ; preds = %914, %913
  %960 = phi i64 [ 0, %913 ], [ %956, %914 ]
  br i1 %131, label %971, label %961

961:                                              ; preds = %959, %961
  %962 = phi i64 [ %968, %961 ], [ %960, %959 ]
  %963 = phi i64 [ %969, %961 ], [ %128, %959 ]
  %964 = getelementptr inbounds i16, i16* %906, i64 %962
  %965 = bitcast i16* %964 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %965, align 2
  %966 = getelementptr inbounds i16, i16* %964, i64 8
  %967 = bitcast i16* %966 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %967, align 2
  %968 = add i64 %962, 16
  %969 = add i64 %963, -1
  %970 = icmp eq i64 %969, 0
  br i1 %970, label %971, label %961, !llvm.loop !46

971:                                              ; preds = %961, %959
  br i1 %132, label %979, label %972

972:                                              ; preds = %971, %912
  %973 = phi i64 [ 0, %912 ], [ %127, %971 ]
  br label %974

974:                                              ; preds = %972, %974
  %975 = phi i64 [ %977, %974 ], [ %973, %972 ]
  %976 = getelementptr inbounds i16, i16* %906, i64 %975
  store i16 16384, i16* %976, align 2
  %977 = add nuw i64 %975, 1
  %978 = icmp eq i64 %977, %67
  br i1 %978, label %979, label %974, !llvm.loop !47

979:                                              ; preds = %974, %971, %911, %907
  %980 = getelementptr inbounds i16, i16* %620, i64 %6
  %981 = getelementptr inbounds i16, i16* %621, i64 %534
  br label %623
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7libgav110PostFilter16PrepareCdefBlockIhEEviiiiPtlbPA256_Khb(%"class.libgav1::PostFilter"*, i32, i32, i32, i32, i16*, i64, i1 zeroext, [256 x i8]*, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  br i1 %7, label %18, label %11

11:                                               ; preds = %10
  %12 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  br label %18

18:                                               ; preds = %11, %10
  %19 = phi i32 [ %14, %11 ], [ 0, %10 ]
  %20 = phi i32 [ %17, %11 ], [ 0, %10 ]
  %21 = shl i32 %4, 2
  %22 = ashr i32 %21, %19
  %23 = shl i32 %3, 2
  %24 = ashr i32 %23, %20
  %25 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 6
  %26 = load i32, i32* %25, align 8
  %27 = add nsw i32 %26, %19
  %28 = ashr i32 %27, %19
  %29 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 7
  %30 = load i32, i32* %29, align 4
  %31 = add nsw i32 %30, %20
  %32 = ashr i32 %31, %20
  %33 = shl i32 %1, 2
  %34 = ashr i32 %33, %19
  %35 = shl i32 %2, 2
  %36 = ashr i32 %35, %20
  %37 = lshr i32 8, %19
  %38 = add i32 %34, -1
  %39 = add i32 %38, %37
  %40 = sub nsw i32 0, %37
  %41 = and i32 %39, %40
  %42 = lshr i32 8, %20
  %43 = icmp eq i32 %4, 0
  %44 = add nsw i32 %22, %34
  %45 = icmp sge i32 %44, %28
  %46 = icmp eq i32 %3, 0
  %47 = add nsw i32 %24, %36
  %48 = icmp sge i32 %47, %32
  %49 = select i1 %46, i32 0, i32 2
  %50 = ashr i32 %3, 2
  %51 = sub nsw i32 %50, %49
  %52 = add i32 %36, -1
  %53 = add i32 %52, %42
  %54 = sub nsw i32 0, %42
  %55 = and i32 %53, %54
  %56 = xor i1 %7, true
  %57 = getelementptr inbounds i16, i16* %5, i64 2
  %58 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 27
  %59 = sub i32 %24, %49
  %60 = sext i32 %22 to i64
  %61 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 32
  %62 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 36
  %63 = icmp sgt i32 %34, 0
  %64 = zext i32 %34 to i64
  %65 = add i32 %41, 2
  %66 = icmp sgt i32 %65, %34
  %67 = sext i32 %34 to i64
  %68 = sext i32 %65 to i64
  %69 = add nsw i32 %41, 4
  %70 = sext i32 %69 to i64
  %71 = icmp eq i32 %69, 0
  %72 = add nsw i32 %55, 2
  %73 = sub i32 %72, %36
  %74 = zext i1 %56 to i64
  %75 = select i1 %7, i64 1, i64 3
  %76 = add i64 %64, %6
  %77 = shl nsw i64 %6, 1
  %78 = add i64 %77, 2
  %79 = add i64 %77, %64
  %80 = add i64 %79, 2
  %81 = add i64 %76, 2
  %82 = getelementptr i16, i16* %5, i64 %81
  %83 = add nuw nsw i64 %64, 2
  %84 = getelementptr i16, i16* %5, i64 %83
  %85 = and i64 %64, 4294967280
  %86 = add nsw i64 %85, -16
  %87 = lshr exact i64 %86, 4
  %88 = add nuw nsw i64 %87, 1
  %89 = sub nsw i64 %68, %67
  %90 = xor i64 %67, -1
  %91 = add nsw i64 %90, %68
  %92 = add nsw i64 %70, -16
  %93 = lshr i64 %92, 4
  %94 = add nuw nsw i64 %93, 1
  %95 = icmp ult i32 %34, 16
  %96 = and i64 %64, 4294967280
  %97 = and i64 %88, 1
  %98 = icmp eq i64 %86, 0
  %99 = sub nuw nsw i64 %88, %97
  %100 = icmp eq i64 %97, 0
  %101 = icmp eq i64 %96, %64
  %102 = and i64 %64, 3
  %103 = icmp eq i64 %102, 0
  %104 = and i64 %89, 3
  %105 = icmp eq i64 %104, 0
  %106 = icmp ult i64 %91, 3
  %107 = icmp ult i32 %34, 16
  %108 = and i64 %64, 4294967280
  %109 = and i64 %88, 1
  %110 = icmp eq i64 %86, 0
  %111 = sub nuw nsw i64 %88, %109
  %112 = icmp eq i64 %109, 0
  %113 = icmp eq i64 %108, %64
  %114 = and i64 %64, 3
  %115 = icmp eq i64 %114, 0
  %116 = and i64 %89, 3
  %117 = icmp eq i64 %116, 0
  %118 = icmp ult i64 %91, 3
  %119 = icmp ult i32 %69, 16
  %120 = and i64 %70, -16
  %121 = and i64 %94, 7
  %122 = icmp ult i64 %92, 112
  %123 = sub nsw i64 %94, %121
  %124 = icmp eq i64 %121, 0
  %125 = icmp eq i64 %120, %70
  %126 = icmp ult i32 %69, 16
  %127 = and i64 %70, -16
  %128 = and i64 %94, 7
  %129 = icmp ult i64 %92, 112
  %130 = sub nsw i64 %94, %128
  %131 = icmp eq i64 %128, 0
  %132 = icmp eq i64 %127, %70
  %133 = icmp ult i32 %34, 16
  %134 = and i64 %64, 4294967280
  %135 = and i64 %88, 1
  %136 = icmp eq i64 %86, 0
  %137 = sub nuw nsw i64 %88, %135
  %138 = icmp eq i64 %135, 0
  %139 = icmp eq i64 %134, %64
  %140 = and i64 %64, 3
  %141 = icmp eq i64 %140, 0
  %142 = and i64 %89, 3
  %143 = icmp eq i64 %142, 0
  %144 = icmp ult i64 %91, 3
  %145 = icmp ult i32 %34, 16
  %146 = and i64 %64, 4294967280
  %147 = and i64 %88, 1
  %148 = icmp eq i64 %86, 0
  %149 = sub nuw nsw i64 %88, %147
  %150 = icmp eq i64 %147, 0
  %151 = icmp eq i64 %146, %64
  %152 = and i64 %64, 3
  %153 = icmp eq i64 %152, 0
  %154 = and i64 %89, 3
  %155 = icmp eq i64 %154, 0
  %156 = icmp ult i64 %91, 3
  %157 = icmp ult i32 %34, 16
  %158 = and i64 %64, 4294967280
  %159 = and i64 %88, 1
  %160 = icmp eq i64 %86, 0
  %161 = sub nuw nsw i64 %88, %159
  %162 = icmp eq i64 %159, 0
  %163 = icmp eq i64 %158, %64
  %164 = and i64 %64, 3
  %165 = icmp eq i64 %164, 0
  %166 = and i64 %89, 3
  %167 = icmp eq i64 %166, 0
  %168 = icmp ult i64 %91, 3
  %169 = icmp ult i32 %34, 16
  %170 = and i64 %64, 4294967280
  %171 = and i64 %88, 1
  %172 = icmp eq i64 %86, 0
  %173 = sub nuw nsw i64 %88, %171
  %174 = icmp eq i64 %171, 0
  %175 = icmp eq i64 %170, %64
  %176 = and i64 %64, 3
  %177 = icmp eq i64 %176, 0
  %178 = and i64 %89, 3
  %179 = icmp eq i64 %178, 0
  %180 = icmp ult i64 %91, 3
  %181 = icmp ult i32 %69, 16
  %182 = and i64 %70, -16
  %183 = and i64 %94, 7
  %184 = icmp ult i64 %92, 112
  %185 = sub nsw i64 %94, %183
  %186 = icmp eq i64 %183, 0
  %187 = icmp eq i64 %182, %70
  br label %189

188:                                              ; preds = %1068
  ret void

189:                                              ; preds = %18, %1068
  %190 = phi i64 [ %74, %18 ], [ %1069, %1068 ]
  %191 = icmp eq i64 %190, 2
  %192 = select i1 %191, i64 4624, i64 0
  %193 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %58, align 8
  %194 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %193, i64 0, i32 11, i64 %190
  %195 = load i32, i32* %194, align 4
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 28, i64 %190
  %198 = load i8*, i8** %197, align 8
  %199 = mul i32 %195, %59
  %200 = sext i32 %199 to i64
  %201 = getelementptr i8, i8* %198, i64 %60
  %202 = getelementptr inbounds i8, i8* %201, i64 %200
  %203 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %61, align 8
  %204 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %203, i64 0, i32 11, i64 %190
  %205 = load i32, i32* %204, align 4
  %206 = sext i32 %205 to i64
  %207 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %62, align 8
  %208 = icmp eq %"class.libgav1::ThreadPool"* %207, null
  br i1 %208, label %216, label %209

209:                                              ; preds = %189
  %210 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %203, i64 0, i32 13, i64 %190
  %211 = load i8*, i8** %210, align 8
  %212 = mul nsw i32 %205, %51
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i8, i8* %211, i64 %60
  %215 = getelementptr inbounds i8, i8* %214, i64 %213
  br label %216

216:                                              ; preds = %189, %209
  %217 = phi i8* [ %215, %209 ], [ null, %189 ]
  %218 = getelementptr inbounds i16, i16* %57, i64 %192
  %219 = bitcast i16* %218 to i8*
  br i1 %46, label %220, label %354

220:                                              ; preds = %216
  %221 = getelementptr inbounds i16, i16* %218, i64 -2
  br i1 %71, label %501, label %222

222:                                              ; preds = %220
  br i1 %119, label %282, label %223

223:                                              ; preds = %222
  br i1 %122, label %269, label %224

224:                                              ; preds = %223, %224
  %225 = phi i64 [ %266, %224 ], [ 0, %223 ]
  %226 = phi i64 [ %267, %224 ], [ %123, %223 ]
  %227 = getelementptr inbounds i16, i16* %221, i64 %225
  %228 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %228, align 2
  %229 = getelementptr inbounds i16, i16* %227, i64 8
  %230 = bitcast i16* %229 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %230, align 2
  %231 = or i64 %225, 16
  %232 = getelementptr inbounds i16, i16* %221, i64 %231
  %233 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %233, align 2
  %234 = getelementptr inbounds i16, i16* %232, i64 8
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %235, align 2
  %236 = or i64 %225, 32
  %237 = getelementptr inbounds i16, i16* %221, i64 %236
  %238 = bitcast i16* %237 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %238, align 2
  %239 = getelementptr inbounds i16, i16* %237, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %240, align 2
  %241 = or i64 %225, 48
  %242 = getelementptr inbounds i16, i16* %221, i64 %241
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %243, align 2
  %244 = getelementptr inbounds i16, i16* %242, i64 8
  %245 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %245, align 2
  %246 = or i64 %225, 64
  %247 = getelementptr inbounds i16, i16* %221, i64 %246
  %248 = bitcast i16* %247 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %248, align 2
  %249 = getelementptr inbounds i16, i16* %247, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %250, align 2
  %251 = or i64 %225, 80
  %252 = getelementptr inbounds i16, i16* %221, i64 %251
  %253 = bitcast i16* %252 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %253, align 2
  %254 = getelementptr inbounds i16, i16* %252, i64 8
  %255 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %255, align 2
  %256 = or i64 %225, 96
  %257 = getelementptr inbounds i16, i16* %221, i64 %256
  %258 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %258, align 2
  %259 = getelementptr inbounds i16, i16* %257, i64 8
  %260 = bitcast i16* %259 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %260, align 2
  %261 = or i64 %225, 112
  %262 = getelementptr inbounds i16, i16* %221, i64 %261
  %263 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %263, align 2
  %264 = getelementptr inbounds i16, i16* %262, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %265, align 2
  %266 = add i64 %225, 128
  %267 = add i64 %226, -8
  %268 = icmp eq i64 %267, 0
  br i1 %268, label %269, label %224, !llvm.loop !48

269:                                              ; preds = %224, %223
  %270 = phi i64 [ 0, %223 ], [ %266, %224 ]
  br i1 %124, label %281, label %271

271:                                              ; preds = %269, %271
  %272 = phi i64 [ %278, %271 ], [ %270, %269 ]
  %273 = phi i64 [ %279, %271 ], [ %121, %269 ]
  %274 = getelementptr inbounds i16, i16* %221, i64 %272
  %275 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %275, align 2
  %276 = getelementptr inbounds i16, i16* %274, i64 8
  %277 = bitcast i16* %276 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %277, align 2
  %278 = add i64 %272, 16
  %279 = add i64 %273, -1
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %281, label %271, !llvm.loop !49

281:                                              ; preds = %271, %269
  br i1 %125, label %289, label %282

282:                                              ; preds = %281, %222
  %283 = phi i64 [ 0, %222 ], [ %120, %281 ]
  br label %284

284:                                              ; preds = %282, %284
  %285 = phi i64 [ %287, %284 ], [ %283, %282 ]
  %286 = getelementptr inbounds i16, i16* %221, i64 %285
  store i16 16384, i16* %286, align 2
  %287 = add nuw i64 %285, 1
  %288 = icmp eq i64 %287, %70
  br i1 %288, label %289, label %284, !llvm.loop !50

289:                                              ; preds = %284, %281
  %290 = getelementptr inbounds i16, i16* %218, i64 %6
  %291 = getelementptr inbounds i16, i16* %290, i64 -2
  br i1 %71, label %501, label %292

292:                                              ; preds = %289
  br i1 %126, label %293, label %295

293:                                              ; preds = %353, %292
  %294 = phi i64 [ 0, %292 ], [ %127, %353 ]
  br label %1211

295:                                              ; preds = %292
  br i1 %129, label %341, label %296

296:                                              ; preds = %295, %296
  %297 = phi i64 [ %338, %296 ], [ 0, %295 ]
  %298 = phi i64 [ %339, %296 ], [ %130, %295 ]
  %299 = getelementptr inbounds i16, i16* %291, i64 %297
  %300 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %300, align 2
  %301 = getelementptr inbounds i16, i16* %299, i64 8
  %302 = bitcast i16* %301 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %302, align 2
  %303 = or i64 %297, 16
  %304 = getelementptr inbounds i16, i16* %291, i64 %303
  %305 = bitcast i16* %304 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %305, align 2
  %306 = getelementptr inbounds i16, i16* %304, i64 8
  %307 = bitcast i16* %306 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %307, align 2
  %308 = or i64 %297, 32
  %309 = getelementptr inbounds i16, i16* %291, i64 %308
  %310 = bitcast i16* %309 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %310, align 2
  %311 = getelementptr inbounds i16, i16* %309, i64 8
  %312 = bitcast i16* %311 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %312, align 2
  %313 = or i64 %297, 48
  %314 = getelementptr inbounds i16, i16* %291, i64 %313
  %315 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %315, align 2
  %316 = getelementptr inbounds i16, i16* %314, i64 8
  %317 = bitcast i16* %316 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %317, align 2
  %318 = or i64 %297, 64
  %319 = getelementptr inbounds i16, i16* %291, i64 %318
  %320 = bitcast i16* %319 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %320, align 2
  %321 = getelementptr inbounds i16, i16* %319, i64 8
  %322 = bitcast i16* %321 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %322, align 2
  %323 = or i64 %297, 80
  %324 = getelementptr inbounds i16, i16* %291, i64 %323
  %325 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %325, align 2
  %326 = getelementptr inbounds i16, i16* %324, i64 8
  %327 = bitcast i16* %326 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %327, align 2
  %328 = or i64 %297, 96
  %329 = getelementptr inbounds i16, i16* %291, i64 %328
  %330 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %330, align 2
  %331 = getelementptr inbounds i16, i16* %329, i64 8
  %332 = bitcast i16* %331 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %332, align 2
  %333 = or i64 %297, 112
  %334 = getelementptr inbounds i16, i16* %291, i64 %333
  %335 = bitcast i16* %334 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %335, align 2
  %336 = getelementptr inbounds i16, i16* %334, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %337, align 2
  %338 = add i64 %297, 128
  %339 = add i64 %298, -8
  %340 = icmp eq i64 %339, 0
  br i1 %340, label %341, label %296, !llvm.loop !51

341:                                              ; preds = %296, %295
  %342 = phi i64 [ 0, %295 ], [ %338, %296 ]
  br i1 %131, label %353, label %343

343:                                              ; preds = %341, %343
  %344 = phi i64 [ %350, %343 ], [ %342, %341 ]
  %345 = phi i64 [ %351, %343 ], [ %128, %341 ]
  %346 = getelementptr inbounds i16, i16* %291, i64 %344
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %347, align 2
  %348 = getelementptr inbounds i16, i16* %346, i64 8
  %349 = bitcast i16* %348 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %349, align 2
  %350 = add i64 %344, 16
  %351 = add i64 %345, -1
  %352 = icmp eq i64 %351, 0
  br i1 %352, label %353, label %343, !llvm.loop !52

353:                                              ; preds = %343, %341
  br i1 %132, label %501, label %293

354:                                              ; preds = %216
  %355 = select i1 %208, i8* %202, i8* %217
  %356 = select i1 %208, i32 %195, i32 %205
  %357 = sext i32 %356 to i64
  %358 = shl nsw i64 %196, 1
  %359 = add nsw i64 %358, %200
  %360 = shl nsw i64 %206, 1
  br i1 %43, label %361, label %363

361:                                              ; preds = %354
  %362 = getelementptr inbounds i16, i16* %218, i64 -2
  store i16 16384, i16* %362, align 2
  br label %371

363:                                              ; preds = %354
  %364 = getelementptr inbounds i8, i8* %355, i64 -2
  %365 = load i8, i8* %364, align 1
  %366 = zext i8 %365 to i16
  %367 = getelementptr inbounds i16, i16* %218, i64 -2
  store i16 %366, i16* %367, align 2
  %368 = getelementptr inbounds i8, i8* %355, i64 -1
  %369 = load i8, i8* %368, align 1
  %370 = zext i8 %369 to i16
  br label %371

371:                                              ; preds = %363, %361
  %372 = phi i16 [ %370, %363 ], [ 16384, %361 ]
  %373 = getelementptr inbounds i16, i16* %218, i64 -1
  store i16 %372, i16* %373, align 2
  br i1 %63, label %374, label %447

374:                                              ; preds = %371
  br i1 %95, label %375, label %392

375:                                              ; preds = %446, %392, %374
  %376 = phi i64 [ 0, %392 ], [ 0, %374 ], [ %96, %446 ]
  %377 = xor i64 %376, -1
  %378 = add nsw i64 %377, %64
  br i1 %103, label %389, label %379

379:                                              ; preds = %375, %379
  %380 = phi i64 [ %386, %379 ], [ %376, %375 ]
  %381 = phi i64 [ %387, %379 ], [ %102, %375 ]
  %382 = getelementptr inbounds i8, i8* %355, i64 %380
  %383 = load i8, i8* %382, align 1
  %384 = zext i8 %383 to i16
  %385 = getelementptr inbounds i16, i16* %218, i64 %380
  store i16 %384, i16* %385, align 2
  %386 = add nuw nsw i64 %380, 1
  %387 = add i64 %381, -1
  %388 = icmp eq i64 %387, 0
  br i1 %388, label %389, label %379, !llvm.loop !53

389:                                              ; preds = %379, %375
  %390 = phi i64 [ %376, %375 ], [ %386, %379 ]
  %391 = icmp ult i64 %378, 3
  br i1 %391, label %447, label %464

392:                                              ; preds = %374
  %393 = getelementptr i16, i16* %84, i64 %192
  %394 = bitcast i16* %393 to i8*
  %395 = getelementptr i8, i8* %355, i64 %64
  %396 = icmp ugt i8* %395, %219
  %397 = icmp ult i8* %355, %394
  %398 = and i1 %396, %397
  br i1 %398, label %375, label %399

399:                                              ; preds = %392
  br i1 %98, label %431, label %400

400:                                              ; preds = %399, %400
  %401 = phi i64 [ %428, %400 ], [ 0, %399 ]
  %402 = phi i64 [ %429, %400 ], [ %99, %399 ]
  %403 = getelementptr inbounds i8, i8* %355, i64 %401
  %404 = bitcast i8* %403 to <8 x i8>*
  %405 = load <8 x i8>, <8 x i8>* %404, align 1, !alias.scope !54
  %406 = getelementptr inbounds i8, i8* %403, i64 8
  %407 = bitcast i8* %406 to <8 x i8>*
  %408 = load <8 x i8>, <8 x i8>* %407, align 1, !alias.scope !54
  %409 = zext <8 x i8> %405 to <8 x i16>
  %410 = zext <8 x i8> %408 to <8 x i16>
  %411 = getelementptr inbounds i16, i16* %218, i64 %401
  %412 = bitcast i16* %411 to <8 x i16>*
  store <8 x i16> %409, <8 x i16>* %412, align 2, !alias.scope !57, !noalias !54
  %413 = getelementptr inbounds i16, i16* %411, i64 8
  %414 = bitcast i16* %413 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %414, align 2, !alias.scope !57, !noalias !54
  %415 = or i64 %401, 16
  %416 = getelementptr inbounds i8, i8* %355, i64 %415
  %417 = bitcast i8* %416 to <8 x i8>*
  %418 = load <8 x i8>, <8 x i8>* %417, align 1, !alias.scope !54
  %419 = getelementptr inbounds i8, i8* %416, i64 8
  %420 = bitcast i8* %419 to <8 x i8>*
  %421 = load <8 x i8>, <8 x i8>* %420, align 1, !alias.scope !54
  %422 = zext <8 x i8> %418 to <8 x i16>
  %423 = zext <8 x i8> %421 to <8 x i16>
  %424 = getelementptr inbounds i16, i16* %218, i64 %415
  %425 = bitcast i16* %424 to <8 x i16>*
  store <8 x i16> %422, <8 x i16>* %425, align 2, !alias.scope !57, !noalias !54
  %426 = getelementptr inbounds i16, i16* %424, i64 8
  %427 = bitcast i16* %426 to <8 x i16>*
  store <8 x i16> %423, <8 x i16>* %427, align 2, !alias.scope !57, !noalias !54
  %428 = add i64 %401, 32
  %429 = add i64 %402, -2
  %430 = icmp eq i64 %429, 0
  br i1 %430, label %431, label %400, !llvm.loop !59

431:                                              ; preds = %400, %399
  %432 = phi i64 [ 0, %399 ], [ %428, %400 ]
  br i1 %100, label %446, label %433

433:                                              ; preds = %431
  %434 = getelementptr inbounds i8, i8* %355, i64 %432
  %435 = bitcast i8* %434 to <8 x i8>*
  %436 = load <8 x i8>, <8 x i8>* %435, align 1, !alias.scope !54
  %437 = getelementptr inbounds i8, i8* %434, i64 8
  %438 = bitcast i8* %437 to <8 x i8>*
  %439 = load <8 x i8>, <8 x i8>* %438, align 1, !alias.scope !54
  %440 = zext <8 x i8> %436 to <8 x i16>
  %441 = zext <8 x i8> %439 to <8 x i16>
  %442 = getelementptr inbounds i16, i16* %218, i64 %432
  %443 = bitcast i16* %442 to <8 x i16>*
  store <8 x i16> %440, <8 x i16>* %443, align 2, !alias.scope !57, !noalias !54
  %444 = getelementptr inbounds i16, i16* %442, i64 8
  %445 = bitcast i16* %444 to <8 x i16>*
  store <8 x i16> %441, <8 x i16>* %445, align 2, !alias.scope !57, !noalias !54
  br label %446

446:                                              ; preds = %431, %433
  br i1 %101, label %447, label %375

447:                                              ; preds = %389, %464, %446, %371
  br i1 %66, label %448, label %497

448:                                              ; preds = %447
  br i1 %105, label %462, label %449

449:                                              ; preds = %448, %456
  %450 = phi i64 [ %459, %456 ], [ %67, %448 ]
  %451 = phi i64 [ %460, %456 ], [ %104, %448 ]
  br i1 %45, label %456, label %452

452:                                              ; preds = %449
  %453 = getelementptr inbounds i8, i8* %355, i64 %450
  %454 = load i8, i8* %453, align 1
  %455 = zext i8 %454 to i16
  br label %456

456:                                              ; preds = %452, %449
  %457 = phi i16 [ %455, %452 ], [ 16384, %449 ]
  %458 = getelementptr inbounds i16, i16* %218, i64 %450
  store i16 %457, i16* %458, align 2
  %459 = add nsw i64 %450, 1
  %460 = add i64 %451, -1
  %461 = icmp eq i64 %460, 0
  br i1 %461, label %462, label %449, !llvm.loop !60

462:                                              ; preds = %456, %448
  %463 = phi i64 [ %67, %448 ], [ %459, %456 ]
  br i1 %106, label %497, label %487

464:                                              ; preds = %389, %464
  %465 = phi i64 [ %485, %464 ], [ %390, %389 ]
  %466 = getelementptr inbounds i8, i8* %355, i64 %465
  %467 = load i8, i8* %466, align 1
  %468 = zext i8 %467 to i16
  %469 = getelementptr inbounds i16, i16* %218, i64 %465
  store i16 %468, i16* %469, align 2
  %470 = add nuw nsw i64 %465, 1
  %471 = getelementptr inbounds i8, i8* %355, i64 %470
  %472 = load i8, i8* %471, align 1
  %473 = zext i8 %472 to i16
  %474 = getelementptr inbounds i16, i16* %218, i64 %470
  store i16 %473, i16* %474, align 2
  %475 = add nuw nsw i64 %465, 2
  %476 = getelementptr inbounds i8, i8* %355, i64 %475
  %477 = load i8, i8* %476, align 1
  %478 = zext i8 %477 to i16
  %479 = getelementptr inbounds i16, i16* %218, i64 %475
  store i16 %478, i16* %479, align 2
  %480 = add nuw nsw i64 %465, 3
  %481 = getelementptr inbounds i8, i8* %355, i64 %480
  %482 = load i8, i8* %481, align 1
  %483 = zext i8 %482 to i16
  %484 = getelementptr inbounds i16, i16* %218, i64 %480
  store i16 %483, i16* %484, align 2
  %485 = add nuw nsw i64 %465, 4
  %486 = icmp eq i64 %485, %64
  br i1 %486, label %447, label %464, !llvm.loop !61

487:                                              ; preds = %462, %1377
  %488 = phi i64 [ %1380, %1377 ], [ %463, %462 ]
  br i1 %45, label %493, label %489

489:                                              ; preds = %487
  %490 = getelementptr inbounds i8, i8* %355, i64 %488
  %491 = load i8, i8* %490, align 1
  %492 = zext i8 %491 to i16
  br label %493

493:                                              ; preds = %489, %487
  %494 = phi i16 [ %492, %489 ], [ 16384, %487 ]
  %495 = getelementptr inbounds i16, i16* %218, i64 %488
  store i16 %494, i16* %495, align 2
  %496 = add nsw i64 %488, 1
  br i1 %45, label %1361, label %1357

497:                                              ; preds = %462, %1377, %447
  %498 = getelementptr inbounds i8, i8* %355, i64 %357
  %499 = getelementptr inbounds i16, i16* %218, i64 %6
  %500 = bitcast i16* %499 to i8*
  br i1 %43, label %1079, label %1071

501:                                              ; preds = %1211, %353, %220, %289, %1208
  %502 = phi i8* [ %1209, %1208 ], [ %202, %289 ], [ %202, %220 ], [ %202, %353 ], [ %202, %1211 ]
  %503 = phi i8* [ %1210, %1208 ], [ %217, %289 ], [ %217, %220 ], [ %217, %353 ], [ %217, %1211 ]
  %504 = getelementptr inbounds i16, i16* %218, i64 %6
  %505 = getelementptr inbounds i16, i16* %504, i64 %6
  %506 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %62, align 8
  %507 = icmp eq %"class.libgav1::ThreadPool"* %506, null
  %508 = or i1 %48, %507
  %509 = select i1 %508, i32 0, i32 2
  %510 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 %190, i64 0
  %511 = select i1 %9, i8* %510, i8* null
  %512 = select i1 %507, i8* null, i8* %511
  %513 = add i64 %78, %192
  %514 = add i64 %80, %192
  br label %515

515:                                              ; preds = %674, %501
  %516 = phi i64 [ %682, %674 ], [ 0, %501 ]
  %517 = phi i16* [ %675, %674 ], [ %505, %501 ]
  %518 = phi i8* [ %676, %674 ], [ %502, %501 ]
  %519 = phi i32 [ %680, %674 ], [ %36, %501 ]
  %520 = phi i8* [ %679, %674 ], [ %512, %501 ]
  %521 = mul i64 %516, %6
  %522 = add i64 %513, %521
  %523 = getelementptr i16, i16* %5, i64 %522
  %524 = bitcast i16* %523 to i8*
  %525 = add i64 %514, %521
  %526 = getelementptr i16, i16* %5, i64 %525
  %527 = bitcast i16* %526 to i8*
  %528 = mul i64 %516, %196
  %529 = getelementptr i8, i8* %502, i64 %528
  %530 = add i64 %528, %64
  %531 = getelementptr i8, i8* %502, i64 %530
  br i1 %43, label %532, label %534

532:                                              ; preds = %515
  %533 = getelementptr inbounds i16, i16* %517, i64 -2
  store i16 16384, i16* %533, align 2
  br label %551

534:                                              ; preds = %515
  %535 = icmp eq i8* %520, null
  br i1 %535, label %543, label %536

536:                                              ; preds = %534
  %537 = load i8, i8* %520, align 1
  %538 = zext i8 %537 to i16
  %539 = getelementptr inbounds i16, i16* %517, i64 -2
  store i16 %538, i16* %539, align 2
  %540 = getelementptr inbounds i8, i8* %520, i64 1
  %541 = load i8, i8* %540, align 1
  %542 = zext i8 %541 to i16
  br label %551

543:                                              ; preds = %534
  %544 = getelementptr inbounds i8, i8* %518, i64 -2
  %545 = load i8, i8* %544, align 1
  %546 = zext i8 %545 to i16
  %547 = getelementptr inbounds i16, i16* %517, i64 -2
  store i16 %546, i16* %547, align 2
  %548 = getelementptr inbounds i8, i8* %518, i64 -1
  %549 = load i8, i8* %548, align 1
  %550 = zext i8 %549 to i16
  br label %551

551:                                              ; preds = %543, %536, %532
  %552 = phi i16 [ %550, %543 ], [ %542, %536 ], [ 16384, %532 ]
  %553 = getelementptr inbounds i16, i16* %517, i64 -1
  store i16 %552, i16* %553, align 2
  br i1 %63, label %554, label %624

554:                                              ; preds = %551
  br i1 %133, label %555, label %572

555:                                              ; preds = %623, %572, %554
  %556 = phi i64 [ 0, %572 ], [ 0, %554 ], [ %134, %623 ]
  %557 = xor i64 %556, -1
  %558 = add nsw i64 %557, %64
  br i1 %141, label %569, label %559

559:                                              ; preds = %555, %559
  %560 = phi i64 [ %566, %559 ], [ %556, %555 ]
  %561 = phi i64 [ %567, %559 ], [ %140, %555 ]
  %562 = getelementptr inbounds i8, i8* %518, i64 %560
  %563 = load i8, i8* %562, align 1
  %564 = zext i8 %563 to i16
  %565 = getelementptr inbounds i16, i16* %517, i64 %560
  store i16 %564, i16* %565, align 2
  %566 = add nuw nsw i64 %560, 1
  %567 = add i64 %561, -1
  %568 = icmp eq i64 %567, 0
  br i1 %568, label %569, label %559, !llvm.loop !62

569:                                              ; preds = %559, %555
  %570 = phi i64 [ %556, %555 ], [ %566, %559 ]
  %571 = icmp ult i64 %558, 3
  br i1 %571, label %624, label %641

572:                                              ; preds = %554
  %573 = icmp ugt i8* %531, %524
  %574 = icmp ult i8* %529, %527
  %575 = and i1 %573, %574
  br i1 %575, label %555, label %576

576:                                              ; preds = %572
  br i1 %136, label %608, label %577

577:                                              ; preds = %576, %577
  %578 = phi i64 [ %605, %577 ], [ 0, %576 ]
  %579 = phi i64 [ %606, %577 ], [ %137, %576 ]
  %580 = getelementptr inbounds i8, i8* %518, i64 %578
  %581 = bitcast i8* %580 to <8 x i8>*
  %582 = load <8 x i8>, <8 x i8>* %581, align 1, !alias.scope !63
  %583 = getelementptr inbounds i8, i8* %580, i64 8
  %584 = bitcast i8* %583 to <8 x i8>*
  %585 = load <8 x i8>, <8 x i8>* %584, align 1, !alias.scope !63
  %586 = zext <8 x i8> %582 to <8 x i16>
  %587 = zext <8 x i8> %585 to <8 x i16>
  %588 = getelementptr inbounds i16, i16* %517, i64 %578
  %589 = bitcast i16* %588 to <8 x i16>*
  store <8 x i16> %586, <8 x i16>* %589, align 2, !alias.scope !66, !noalias !63
  %590 = getelementptr inbounds i16, i16* %588, i64 8
  %591 = bitcast i16* %590 to <8 x i16>*
  store <8 x i16> %587, <8 x i16>* %591, align 2, !alias.scope !66, !noalias !63
  %592 = or i64 %578, 16
  %593 = getelementptr inbounds i8, i8* %518, i64 %592
  %594 = bitcast i8* %593 to <8 x i8>*
  %595 = load <8 x i8>, <8 x i8>* %594, align 1, !alias.scope !63
  %596 = getelementptr inbounds i8, i8* %593, i64 8
  %597 = bitcast i8* %596 to <8 x i8>*
  %598 = load <8 x i8>, <8 x i8>* %597, align 1, !alias.scope !63
  %599 = zext <8 x i8> %595 to <8 x i16>
  %600 = zext <8 x i8> %598 to <8 x i16>
  %601 = getelementptr inbounds i16, i16* %517, i64 %592
  %602 = bitcast i16* %601 to <8 x i16>*
  store <8 x i16> %599, <8 x i16>* %602, align 2, !alias.scope !66, !noalias !63
  %603 = getelementptr inbounds i16, i16* %601, i64 8
  %604 = bitcast i16* %603 to <8 x i16>*
  store <8 x i16> %600, <8 x i16>* %604, align 2, !alias.scope !66, !noalias !63
  %605 = add i64 %578, 32
  %606 = add i64 %579, -2
  %607 = icmp eq i64 %606, 0
  br i1 %607, label %608, label %577, !llvm.loop !68

608:                                              ; preds = %577, %576
  %609 = phi i64 [ 0, %576 ], [ %605, %577 ]
  br i1 %138, label %623, label %610

610:                                              ; preds = %608
  %611 = getelementptr inbounds i8, i8* %518, i64 %609
  %612 = bitcast i8* %611 to <8 x i8>*
  %613 = load <8 x i8>, <8 x i8>* %612, align 1, !alias.scope !63
  %614 = getelementptr inbounds i8, i8* %611, i64 8
  %615 = bitcast i8* %614 to <8 x i8>*
  %616 = load <8 x i8>, <8 x i8>* %615, align 1, !alias.scope !63
  %617 = zext <8 x i8> %613 to <8 x i16>
  %618 = zext <8 x i8> %616 to <8 x i16>
  %619 = getelementptr inbounds i16, i16* %517, i64 %609
  %620 = bitcast i16* %619 to <8 x i16>*
  store <8 x i16> %617, <8 x i16>* %620, align 2, !alias.scope !66, !noalias !63
  %621 = getelementptr inbounds i16, i16* %619, i64 8
  %622 = bitcast i16* %621 to <8 x i16>*
  store <8 x i16> %618, <8 x i16>* %622, align 2, !alias.scope !66, !noalias !63
  br label %623

623:                                              ; preds = %608, %610
  br i1 %139, label %624, label %555

624:                                              ; preds = %569, %641, %623, %551
  br i1 %66, label %625, label %674

625:                                              ; preds = %624
  br i1 %143, label %639, label %626

626:                                              ; preds = %625, %633
  %627 = phi i64 [ %636, %633 ], [ %67, %625 ]
  %628 = phi i64 [ %637, %633 ], [ %142, %625 ]
  br i1 %45, label %633, label %629

629:                                              ; preds = %626
  %630 = getelementptr inbounds i8, i8* %518, i64 %627
  %631 = load i8, i8* %630, align 1
  %632 = zext i8 %631 to i16
  br label %633

633:                                              ; preds = %629, %626
  %634 = phi i16 [ %632, %629 ], [ 16384, %626 ]
  %635 = getelementptr inbounds i16, i16* %517, i64 %627
  store i16 %634, i16* %635, align 2
  %636 = add nsw i64 %627, 1
  %637 = add i64 %628, -1
  %638 = icmp eq i64 %637, 0
  br i1 %638, label %639, label %626, !llvm.loop !69

639:                                              ; preds = %633, %625
  %640 = phi i64 [ %67, %625 ], [ %636, %633 ]
  br i1 %144, label %674, label %664

641:                                              ; preds = %569, %641
  %642 = phi i64 [ %662, %641 ], [ %570, %569 ]
  %643 = getelementptr inbounds i8, i8* %518, i64 %642
  %644 = load i8, i8* %643, align 1
  %645 = zext i8 %644 to i16
  %646 = getelementptr inbounds i16, i16* %517, i64 %642
  store i16 %645, i16* %646, align 2
  %647 = add nuw nsw i64 %642, 1
  %648 = getelementptr inbounds i8, i8* %518, i64 %647
  %649 = load i8, i8* %648, align 1
  %650 = zext i8 %649 to i16
  %651 = getelementptr inbounds i16, i16* %517, i64 %647
  store i16 %650, i16* %651, align 2
  %652 = add nuw nsw i64 %642, 2
  %653 = getelementptr inbounds i8, i8* %518, i64 %652
  %654 = load i8, i8* %653, align 1
  %655 = zext i8 %654 to i16
  %656 = getelementptr inbounds i16, i16* %517, i64 %652
  store i16 %655, i16* %656, align 2
  %657 = add nuw nsw i64 %642, 3
  %658 = getelementptr inbounds i8, i8* %518, i64 %657
  %659 = load i8, i8* %658, align 1
  %660 = zext i8 %659 to i16
  %661 = getelementptr inbounds i16, i16* %517, i64 %657
  store i16 %660, i16* %661, align 2
  %662 = add nuw nsw i64 %642, 4
  %663 = icmp eq i64 %662, %64
  br i1 %663, label %624, label %641, !llvm.loop !70

664:                                              ; preds = %639, %1427
  %665 = phi i64 [ %1430, %1427 ], [ %640, %639 ]
  br i1 %45, label %670, label %666

666:                                              ; preds = %664
  %667 = getelementptr inbounds i8, i8* %518, i64 %665
  %668 = load i8, i8* %667, align 1
  %669 = zext i8 %668 to i16
  br label %670

670:                                              ; preds = %666, %664
  %671 = phi i16 [ %669, %666 ], [ 16384, %664 ]
  %672 = getelementptr inbounds i16, i16* %517, i64 %665
  store i16 %671, i16* %672, align 2
  %673 = add nsw i64 %665, 1
  br i1 %45, label %1411, label %1407

674:                                              ; preds = %639, %1427, %624
  %675 = getelementptr inbounds i16, i16* %517, i64 %6
  %676 = getelementptr inbounds i8, i8* %518, i64 %196
  %677 = icmp eq i8* %520, null
  %678 = getelementptr inbounds i8, i8* %520, i64 2
  %679 = select i1 %677, i8* null, i8* %678
  %680 = add nsw i32 %519, -1
  %681 = icmp eq i32 %680, %509
  %682 = add i64 %516, 1
  br i1 %681, label %683, label %515

683:                                              ; preds = %674
  %684 = bitcast i16* %675 to i8*
  br i1 %508, label %830, label %685

685:                                              ; preds = %683
  %686 = shl i32 %205, 1
  %687 = sext i32 %686 to i64
  %688 = getelementptr inbounds i8, i8* %503, i64 %687
  br i1 %43, label %689, label %691

689:                                              ; preds = %685
  %690 = getelementptr inbounds i16, i16* %675, i64 -2
  store i16 16384, i16* %690, align 2
  br label %699

691:                                              ; preds = %685
  %692 = getelementptr inbounds i8, i8* %688, i64 -2
  %693 = load i8, i8* %692, align 1
  %694 = zext i8 %693 to i16
  %695 = getelementptr inbounds i16, i16* %675, i64 -2
  store i16 %694, i16* %695, align 2
  %696 = getelementptr inbounds i8, i8* %688, i64 -1
  %697 = load i8, i8* %696, align 1
  %698 = zext i8 %697 to i16
  br label %699

699:                                              ; preds = %691, %689
  %700 = phi i16 [ %698, %691 ], [ 16384, %689 ]
  %701 = getelementptr inbounds i16, i16* %675, i64 -1
  store i16 %700, i16* %701, align 2
  br i1 %63, label %702, label %776

702:                                              ; preds = %699
  br i1 %145, label %703, label %720

703:                                              ; preds = %775, %720, %702
  %704 = phi i64 [ 0, %720 ], [ 0, %702 ], [ %146, %775 ]
  %705 = xor i64 %704, -1
  %706 = add nsw i64 %705, %64
  br i1 %153, label %717, label %707

707:                                              ; preds = %703, %707
  %708 = phi i64 [ %714, %707 ], [ %704, %703 ]
  %709 = phi i64 [ %715, %707 ], [ %152, %703 ]
  %710 = getelementptr inbounds i8, i8* %688, i64 %708
  %711 = load i8, i8* %710, align 1
  %712 = zext i8 %711 to i16
  %713 = getelementptr inbounds i16, i16* %675, i64 %708
  store i16 %712, i16* %713, align 2
  %714 = add nuw nsw i64 %708, 1
  %715 = add i64 %709, -1
  %716 = icmp eq i64 %715, 0
  br i1 %716, label %717, label %707, !llvm.loop !71

717:                                              ; preds = %707, %703
  %718 = phi i64 [ %704, %703 ], [ %714, %707 ]
  %719 = icmp ult i64 %706, 3
  br i1 %719, label %776, label %793

720:                                              ; preds = %702
  %721 = getelementptr i16, i16* %675, i64 %64
  %722 = bitcast i16* %721 to i8*
  %723 = getelementptr i8, i8* %503, i64 %64
  %724 = getelementptr i8, i8* %723, i64 %687
  %725 = icmp ugt i8* %724, %684
  %726 = icmp ult i8* %688, %722
  %727 = and i1 %725, %726
  br i1 %727, label %703, label %728

728:                                              ; preds = %720
  br i1 %148, label %760, label %729

729:                                              ; preds = %728, %729
  %730 = phi i64 [ %757, %729 ], [ 0, %728 ]
  %731 = phi i64 [ %758, %729 ], [ %149, %728 ]
  %732 = getelementptr inbounds i8, i8* %688, i64 %730
  %733 = bitcast i8* %732 to <8 x i8>*
  %734 = load <8 x i8>, <8 x i8>* %733, align 1, !alias.scope !72
  %735 = getelementptr inbounds i8, i8* %732, i64 8
  %736 = bitcast i8* %735 to <8 x i8>*
  %737 = load <8 x i8>, <8 x i8>* %736, align 1, !alias.scope !72
  %738 = zext <8 x i8> %734 to <8 x i16>
  %739 = zext <8 x i8> %737 to <8 x i16>
  %740 = getelementptr inbounds i16, i16* %675, i64 %730
  %741 = bitcast i16* %740 to <8 x i16>*
  store <8 x i16> %738, <8 x i16>* %741, align 2, !alias.scope !75, !noalias !72
  %742 = getelementptr inbounds i16, i16* %740, i64 8
  %743 = bitcast i16* %742 to <8 x i16>*
  store <8 x i16> %739, <8 x i16>* %743, align 2, !alias.scope !75, !noalias !72
  %744 = or i64 %730, 16
  %745 = getelementptr inbounds i8, i8* %688, i64 %744
  %746 = bitcast i8* %745 to <8 x i8>*
  %747 = load <8 x i8>, <8 x i8>* %746, align 1, !alias.scope !72
  %748 = getelementptr inbounds i8, i8* %745, i64 8
  %749 = bitcast i8* %748 to <8 x i8>*
  %750 = load <8 x i8>, <8 x i8>* %749, align 1, !alias.scope !72
  %751 = zext <8 x i8> %747 to <8 x i16>
  %752 = zext <8 x i8> %750 to <8 x i16>
  %753 = getelementptr inbounds i16, i16* %675, i64 %744
  %754 = bitcast i16* %753 to <8 x i16>*
  store <8 x i16> %751, <8 x i16>* %754, align 2, !alias.scope !75, !noalias !72
  %755 = getelementptr inbounds i16, i16* %753, i64 8
  %756 = bitcast i16* %755 to <8 x i16>*
  store <8 x i16> %752, <8 x i16>* %756, align 2, !alias.scope !75, !noalias !72
  %757 = add i64 %730, 32
  %758 = add i64 %731, -2
  %759 = icmp eq i64 %758, 0
  br i1 %759, label %760, label %729, !llvm.loop !77

760:                                              ; preds = %729, %728
  %761 = phi i64 [ 0, %728 ], [ %757, %729 ]
  br i1 %150, label %775, label %762

762:                                              ; preds = %760
  %763 = getelementptr inbounds i8, i8* %688, i64 %761
  %764 = bitcast i8* %763 to <8 x i8>*
  %765 = load <8 x i8>, <8 x i8>* %764, align 1, !alias.scope !72
  %766 = getelementptr inbounds i8, i8* %763, i64 8
  %767 = bitcast i8* %766 to <8 x i8>*
  %768 = load <8 x i8>, <8 x i8>* %767, align 1, !alias.scope !72
  %769 = zext <8 x i8> %765 to <8 x i16>
  %770 = zext <8 x i8> %768 to <8 x i16>
  %771 = getelementptr inbounds i16, i16* %675, i64 %761
  %772 = bitcast i16* %771 to <8 x i16>*
  store <8 x i16> %769, <8 x i16>* %772, align 2, !alias.scope !75, !noalias !72
  %773 = getelementptr inbounds i16, i16* %771, i64 8
  %774 = bitcast i16* %773 to <8 x i16>*
  store <8 x i16> %770, <8 x i16>* %774, align 2, !alias.scope !75, !noalias !72
  br label %775

775:                                              ; preds = %760, %762
  br i1 %151, label %776, label %703

776:                                              ; preds = %717, %793, %775, %699
  br i1 %66, label %777, label %826

777:                                              ; preds = %776
  br i1 %155, label %791, label %778

778:                                              ; preds = %777, %785
  %779 = phi i64 [ %788, %785 ], [ %67, %777 ]
  %780 = phi i64 [ %789, %785 ], [ %154, %777 ]
  br i1 %45, label %785, label %781

781:                                              ; preds = %778
  %782 = getelementptr inbounds i8, i8* %688, i64 %779
  %783 = load i8, i8* %782, align 1
  %784 = zext i8 %783 to i16
  br label %785

785:                                              ; preds = %781, %778
  %786 = phi i16 [ %784, %781 ], [ 16384, %778 ]
  %787 = getelementptr inbounds i16, i16* %675, i64 %779
  store i16 %786, i16* %787, align 2
  %788 = add nsw i64 %779, 1
  %789 = add i64 %780, -1
  %790 = icmp eq i64 %789, 0
  br i1 %790, label %791, label %778, !llvm.loop !78

791:                                              ; preds = %785, %777
  %792 = phi i64 [ %67, %777 ], [ %788, %785 ]
  br i1 %156, label %826, label %816

793:                                              ; preds = %717, %793
  %794 = phi i64 [ %814, %793 ], [ %718, %717 ]
  %795 = getelementptr inbounds i8, i8* %688, i64 %794
  %796 = load i8, i8* %795, align 1
  %797 = zext i8 %796 to i16
  %798 = getelementptr inbounds i16, i16* %675, i64 %794
  store i16 %797, i16* %798, align 2
  %799 = add nuw nsw i64 %794, 1
  %800 = getelementptr inbounds i8, i8* %688, i64 %799
  %801 = load i8, i8* %800, align 1
  %802 = zext i8 %801 to i16
  %803 = getelementptr inbounds i16, i16* %675, i64 %799
  store i16 %802, i16* %803, align 2
  %804 = add nuw nsw i64 %794, 2
  %805 = getelementptr inbounds i8, i8* %688, i64 %804
  %806 = load i8, i8* %805, align 1
  %807 = zext i8 %806 to i16
  %808 = getelementptr inbounds i16, i16* %675, i64 %804
  store i16 %807, i16* %808, align 2
  %809 = add nuw nsw i64 %794, 3
  %810 = getelementptr inbounds i8, i8* %688, i64 %809
  %811 = load i8, i8* %810, align 1
  %812 = zext i8 %811 to i16
  %813 = getelementptr inbounds i16, i16* %675, i64 %809
  store i16 %812, i16* %813, align 2
  %814 = add nuw nsw i64 %794, 4
  %815 = icmp eq i64 %814, %64
  br i1 %815, label %776, label %793, !llvm.loop !79

816:                                              ; preds = %791, %1452
  %817 = phi i64 [ %1455, %1452 ], [ %792, %791 ]
  br i1 %45, label %822, label %818

818:                                              ; preds = %816
  %819 = getelementptr inbounds i8, i8* %688, i64 %817
  %820 = load i8, i8* %819, align 1
  %821 = zext i8 %820 to i16
  br label %822

822:                                              ; preds = %818, %816
  %823 = phi i16 [ %821, %818 ], [ 16384, %816 ]
  %824 = getelementptr inbounds i16, i16* %675, i64 %817
  store i16 %823, i16* %824, align 2
  %825 = add nsw i64 %817, 1
  br i1 %45, label %1436, label %1432

826:                                              ; preds = %791, %1452, %776
  %827 = getelementptr inbounds i16, i16* %675, i64 %6
  %828 = bitcast i16* %827 to i8*
  %829 = getelementptr inbounds i8, i8* %688, i64 %206
  br i1 %43, label %1224, label %1216

830:                                              ; preds = %683, %1354
  %831 = phi i16* [ %675, %683 ], [ %1355, %1354 ]
  %832 = phi i8* [ %503, %683 ], [ %1356, %1354 ]
  br i1 %48, label %833, label %908

833:                                              ; preds = %830, %904
  %834 = phi i16* [ %905, %904 ], [ %831, %830 ]
  %835 = phi i32 [ %906, %904 ], [ 0, %830 ]
  %836 = getelementptr inbounds i16, i16* %834, i64 -2
  br i1 %71, label %904, label %837

837:                                              ; preds = %833
  br i1 %181, label %897, label %838

838:                                              ; preds = %837
  br i1 %184, label %884, label %839

839:                                              ; preds = %838, %839
  %840 = phi i64 [ %881, %839 ], [ 0, %838 ]
  %841 = phi i64 [ %882, %839 ], [ %185, %838 ]
  %842 = getelementptr inbounds i16, i16* %836, i64 %840
  %843 = bitcast i16* %842 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %843, align 2
  %844 = getelementptr inbounds i16, i16* %842, i64 8
  %845 = bitcast i16* %844 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %845, align 2
  %846 = or i64 %840, 16
  %847 = getelementptr inbounds i16, i16* %836, i64 %846
  %848 = bitcast i16* %847 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %848, align 2
  %849 = getelementptr inbounds i16, i16* %847, i64 8
  %850 = bitcast i16* %849 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %850, align 2
  %851 = or i64 %840, 32
  %852 = getelementptr inbounds i16, i16* %836, i64 %851
  %853 = bitcast i16* %852 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %853, align 2
  %854 = getelementptr inbounds i16, i16* %852, i64 8
  %855 = bitcast i16* %854 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %855, align 2
  %856 = or i64 %840, 48
  %857 = getelementptr inbounds i16, i16* %836, i64 %856
  %858 = bitcast i16* %857 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %858, align 2
  %859 = getelementptr inbounds i16, i16* %857, i64 8
  %860 = bitcast i16* %859 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %860, align 2
  %861 = or i64 %840, 64
  %862 = getelementptr inbounds i16, i16* %836, i64 %861
  %863 = bitcast i16* %862 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %863, align 2
  %864 = getelementptr inbounds i16, i16* %862, i64 8
  %865 = bitcast i16* %864 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %865, align 2
  %866 = or i64 %840, 80
  %867 = getelementptr inbounds i16, i16* %836, i64 %866
  %868 = bitcast i16* %867 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %868, align 2
  %869 = getelementptr inbounds i16, i16* %867, i64 8
  %870 = bitcast i16* %869 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %870, align 2
  %871 = or i64 %840, 96
  %872 = getelementptr inbounds i16, i16* %836, i64 %871
  %873 = bitcast i16* %872 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %873, align 2
  %874 = getelementptr inbounds i16, i16* %872, i64 8
  %875 = bitcast i16* %874 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %875, align 2
  %876 = or i64 %840, 112
  %877 = getelementptr inbounds i16, i16* %836, i64 %876
  %878 = bitcast i16* %877 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %878, align 2
  %879 = getelementptr inbounds i16, i16* %877, i64 8
  %880 = bitcast i16* %879 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %880, align 2
  %881 = add i64 %840, 128
  %882 = add i64 %841, -8
  %883 = icmp eq i64 %882, 0
  br i1 %883, label %884, label %839, !llvm.loop !80

884:                                              ; preds = %839, %838
  %885 = phi i64 [ 0, %838 ], [ %881, %839 ]
  br i1 %186, label %896, label %886

886:                                              ; preds = %884, %886
  %887 = phi i64 [ %893, %886 ], [ %885, %884 ]
  %888 = phi i64 [ %894, %886 ], [ %183, %884 ]
  %889 = getelementptr inbounds i16, i16* %836, i64 %887
  %890 = bitcast i16* %889 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %890, align 2
  %891 = getelementptr inbounds i16, i16* %889, i64 8
  %892 = bitcast i16* %891 to <8 x i16>*
  store <8 x i16> <i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384, i16 16384>, <8 x i16>* %892, align 2
  %893 = add i64 %887, 16
  %894 = add i64 %888, -1
  %895 = icmp eq i64 %894, 0
  br i1 %895, label %896, label %886, !llvm.loop !81

896:                                              ; preds = %886, %884
  br i1 %187, label %904, label %897

897:                                              ; preds = %896, %837
  %898 = phi i64 [ 0, %837 ], [ %182, %896 ]
  br label %899

899:                                              ; preds = %897, %899
  %900 = phi i64 [ %902, %899 ], [ %898, %897 ]
  %901 = getelementptr inbounds i16, i16* %836, i64 %900
  store i16 16384, i16* %901, align 2
  %902 = add nuw i64 %900, 1
  %903 = icmp eq i64 %902, %70
  br i1 %903, label %904, label %899, !llvm.loop !82

904:                                              ; preds = %899, %896, %833
  %905 = getelementptr inbounds i16, i16* %834, i64 %6
  %906 = add nuw nsw i32 %835, 1
  %907 = icmp slt i32 %906, %73
  br i1 %907, label %833, label %1068

908:                                              ; preds = %830
  %909 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %62, align 8
  %910 = icmp eq %"class.libgav1::ThreadPool"* %909, null
  %911 = select i1 %910, i8* %676, i8* %832
  %912 = select i1 %910, i32 %195, i32 %205
  %913 = sext i32 %912 to i64
  br label %914

914:                                              ; preds = %1062, %908
  %915 = phi i64 [ %1067, %1062 ], [ 0, %908 ]
  %916 = phi i16* [ %1064, %1062 ], [ %831, %908 ]
  %917 = phi i32 [ %1065, %1062 ], [ 0, %908 ]
  %918 = phi i8* [ %1063, %1062 ], [ %911, %908 ]
  %919 = mul i64 %915, %6
  %920 = getelementptr i16, i16* %831, i64 %919
  %921 = bitcast i16* %920 to i8*
  %922 = add i64 %919, %64
  %923 = getelementptr i16, i16* %831, i64 %922
  %924 = bitcast i16* %923 to i8*
  %925 = mul i64 %915, %913
  %926 = getelementptr i8, i8* %911, i64 %925
  %927 = add i64 %925, %64
  %928 = getelementptr i8, i8* %911, i64 %927
  br i1 %43, label %929, label %931

929:                                              ; preds = %914
  %930 = getelementptr inbounds i16, i16* %916, i64 -2
  store i16 16384, i16* %930, align 2
  br label %939

931:                                              ; preds = %914
  %932 = getelementptr inbounds i8, i8* %918, i64 -2
  %933 = load i8, i8* %932, align 1
  %934 = zext i8 %933 to i16
  %935 = getelementptr inbounds i16, i16* %916, i64 -2
  store i16 %934, i16* %935, align 2
  %936 = getelementptr inbounds i8, i8* %918, i64 -1
  %937 = load i8, i8* %936, align 1
  %938 = zext i8 %937 to i16
  br label %939

939:                                              ; preds = %931, %929
  %940 = phi i16 [ %938, %931 ], [ 16384, %929 ]
  %941 = getelementptr inbounds i16, i16* %916, i64 -1
  store i16 %940, i16* %941, align 2
  br i1 %63, label %942, label %1012

942:                                              ; preds = %939
  br i1 %169, label %943, label %960

943:                                              ; preds = %1011, %960, %942
  %944 = phi i64 [ 0, %960 ], [ 0, %942 ], [ %170, %1011 ]
  %945 = xor i64 %944, -1
  %946 = add nsw i64 %945, %64
  br i1 %177, label %957, label %947

947:                                              ; preds = %943, %947
  %948 = phi i64 [ %954, %947 ], [ %944, %943 ]
  %949 = phi i64 [ %955, %947 ], [ %176, %943 ]
  %950 = getelementptr inbounds i8, i8* %918, i64 %948
  %951 = load i8, i8* %950, align 1
  %952 = zext i8 %951 to i16
  %953 = getelementptr inbounds i16, i16* %916, i64 %948
  store i16 %952, i16* %953, align 2
  %954 = add nuw nsw i64 %948, 1
  %955 = add i64 %949, -1
  %956 = icmp eq i64 %955, 0
  br i1 %956, label %957, label %947, !llvm.loop !83

957:                                              ; preds = %947, %943
  %958 = phi i64 [ %944, %943 ], [ %954, %947 ]
  %959 = icmp ult i64 %946, 3
  br i1 %959, label %1012, label %1029

960:                                              ; preds = %942
  %961 = icmp ugt i8* %928, %921
  %962 = icmp ult i8* %926, %924
  %963 = and i1 %961, %962
  br i1 %963, label %943, label %964

964:                                              ; preds = %960
  br i1 %172, label %996, label %965

965:                                              ; preds = %964, %965
  %966 = phi i64 [ %993, %965 ], [ 0, %964 ]
  %967 = phi i64 [ %994, %965 ], [ %173, %964 ]
  %968 = getelementptr inbounds i8, i8* %918, i64 %966
  %969 = bitcast i8* %968 to <8 x i8>*
  %970 = load <8 x i8>, <8 x i8>* %969, align 1, !alias.scope !84
  %971 = getelementptr inbounds i8, i8* %968, i64 8
  %972 = bitcast i8* %971 to <8 x i8>*
  %973 = load <8 x i8>, <8 x i8>* %972, align 1, !alias.scope !84
  %974 = zext <8 x i8> %970 to <8 x i16>
  %975 = zext <8 x i8> %973 to <8 x i16>
  %976 = getelementptr inbounds i16, i16* %916, i64 %966
  %977 = bitcast i16* %976 to <8 x i16>*
  store <8 x i16> %974, <8 x i16>* %977, align 2, !alias.scope !87, !noalias !84
  %978 = getelementptr inbounds i16, i16* %976, i64 8
  %979 = bitcast i16* %978 to <8 x i16>*
  store <8 x i16> %975, <8 x i16>* %979, align 2, !alias.scope !87, !noalias !84
  %980 = or i64 %966, 16
  %981 = getelementptr inbounds i8, i8* %918, i64 %980
  %982 = bitcast i8* %981 to <8 x i8>*
  %983 = load <8 x i8>, <8 x i8>* %982, align 1, !alias.scope !84
  %984 = getelementptr inbounds i8, i8* %981, i64 8
  %985 = bitcast i8* %984 to <8 x i8>*
  %986 = load <8 x i8>, <8 x i8>* %985, align 1, !alias.scope !84
  %987 = zext <8 x i8> %983 to <8 x i16>
  %988 = zext <8 x i8> %986 to <8 x i16>
  %989 = getelementptr inbounds i16, i16* %916, i64 %980
  %990 = bitcast i16* %989 to <8 x i16>*
  store <8 x i16> %987, <8 x i16>* %990, align 2, !alias.scope !87, !noalias !84
  %991 = getelementptr inbounds i16, i16* %989, i64 8
  %992 = bitcast i16* %991 to <8 x i16>*
  store <8 x i16> %988, <8 x i16>* %992, align 2, !alias.scope !87, !noalias !84
  %993 = add i64 %966, 32
  %994 = add i64 %967, -2
  %995 = icmp eq i64 %994, 0
  br i1 %995, label %996, label %965, !llvm.loop !89

996:                                              ; preds = %965, %964
  %997 = phi i64 [ 0, %964 ], [ %993, %965 ]
  br i1 %174, label %1011, label %998

998:                                              ; preds = %996
  %999 = getelementptr inbounds i8, i8* %918, i64 %997
  %1000 = bitcast i8* %999 to <8 x i8>*
  %1001 = load <8 x i8>, <8 x i8>* %1000, align 1, !alias.scope !84
  %1002 = getelementptr inbounds i8, i8* %999, i64 8
  %1003 = bitcast i8* %1002 to <8 x i8>*
  %1004 = load <8 x i8>, <8 x i8>* %1003, align 1, !alias.scope !84
  %1005 = zext <8 x i8> %1001 to <8 x i16>
  %1006 = zext <8 x i8> %1004 to <8 x i16>
  %1007 = getelementptr inbounds i16, i16* %916, i64 %997
  %1008 = bitcast i16* %1007 to <8 x i16>*
  store <8 x i16> %1005, <8 x i16>* %1008, align 2, !alias.scope !87, !noalias !84
  %1009 = getelementptr inbounds i16, i16* %1007, i64 8
  %1010 = bitcast i16* %1009 to <8 x i16>*
  store <8 x i16> %1006, <8 x i16>* %1010, align 2, !alias.scope !87, !noalias !84
  br label %1011

1011:                                             ; preds = %996, %998
  br i1 %175, label %1012, label %943

1012:                                             ; preds = %957, %1029, %1011, %939
  br i1 %66, label %1013, label %1062

1013:                                             ; preds = %1012
  br i1 %179, label %1027, label %1014

1014:                                             ; preds = %1013, %1021
  %1015 = phi i64 [ %1024, %1021 ], [ %67, %1013 ]
  %1016 = phi i64 [ %1025, %1021 ], [ %178, %1013 ]
  br i1 %45, label %1021, label %1017

1017:                                             ; preds = %1014
  %1018 = getelementptr inbounds i8, i8* %918, i64 %1015
  %1019 = load i8, i8* %1018, align 1
  %1020 = zext i8 %1019 to i16
  br label %1021

1021:                                             ; preds = %1017, %1014
  %1022 = phi i16 [ %1020, %1017 ], [ 16384, %1014 ]
  %1023 = getelementptr inbounds i16, i16* %916, i64 %1015
  store i16 %1022, i16* %1023, align 2
  %1024 = add nsw i64 %1015, 1
  %1025 = add i64 %1016, -1
  %1026 = icmp eq i64 %1025, 0
  br i1 %1026, label %1027, label %1014, !llvm.loop !90

1027:                                             ; preds = %1021, %1013
  %1028 = phi i64 [ %67, %1013 ], [ %1024, %1021 ]
  br i1 %180, label %1062, label %1052

1029:                                             ; preds = %957, %1029
  %1030 = phi i64 [ %1050, %1029 ], [ %958, %957 ]
  %1031 = getelementptr inbounds i8, i8* %918, i64 %1030
  %1032 = load i8, i8* %1031, align 1
  %1033 = zext i8 %1032 to i16
  %1034 = getelementptr inbounds i16, i16* %916, i64 %1030
  store i16 %1033, i16* %1034, align 2
  %1035 = add nuw nsw i64 %1030, 1
  %1036 = getelementptr inbounds i8, i8* %918, i64 %1035
  %1037 = load i8, i8* %1036, align 1
  %1038 = zext i8 %1037 to i16
  %1039 = getelementptr inbounds i16, i16* %916, i64 %1035
  store i16 %1038, i16* %1039, align 2
  %1040 = add nuw nsw i64 %1030, 2
  %1041 = getelementptr inbounds i8, i8* %918, i64 %1040
  %1042 = load i8, i8* %1041, align 1
  %1043 = zext i8 %1042 to i16
  %1044 = getelementptr inbounds i16, i16* %916, i64 %1040
  store i16 %1043, i16* %1044, align 2
  %1045 = add nuw nsw i64 %1030, 3
  %1046 = getelementptr inbounds i8, i8* %918, i64 %1045
  %1047 = load i8, i8* %1046, align 1
  %1048 = zext i8 %1047 to i16
  %1049 = getelementptr inbounds i16, i16* %916, i64 %1045
  store i16 %1048, i16* %1049, align 2
  %1050 = add nuw nsw i64 %1030, 4
  %1051 = icmp eq i64 %1050, %64
  br i1 %1051, label %1012, label %1029, !llvm.loop !91

1052:                                             ; preds = %1027, %1502
  %1053 = phi i64 [ %1505, %1502 ], [ %1028, %1027 ]
  br i1 %45, label %1058, label %1054

1054:                                             ; preds = %1052
  %1055 = getelementptr inbounds i8, i8* %918, i64 %1053
  %1056 = load i8, i8* %1055, align 1
  %1057 = zext i8 %1056 to i16
  br label %1058

1058:                                             ; preds = %1054, %1052
  %1059 = phi i16 [ %1057, %1054 ], [ 16384, %1052 ]
  %1060 = getelementptr inbounds i16, i16* %916, i64 %1053
  store i16 %1059, i16* %1060, align 2
  %1061 = add nsw i64 %1053, 1
  br i1 %45, label %1486, label %1482

1062:                                             ; preds = %1027, %1502, %1012
  %1063 = getelementptr inbounds i8, i8* %918, i64 %913
  %1064 = getelementptr inbounds i16, i16* %916, i64 %6
  %1065 = add nuw nsw i32 %917, 1
  %1066 = icmp slt i32 %1065, %73
  %1067 = add i64 %915, 1
  br i1 %1066, label %914, label %1068

1068:                                             ; preds = %1062, %904
  %1069 = add nuw nsw i64 %190, 1
  %1070 = icmp ult i64 %1069, %75
  br i1 %1070, label %189, label %188

1071:                                             ; preds = %497
  %1072 = getelementptr inbounds i8, i8* %498, i64 -2
  %1073 = load i8, i8* %1072, align 1
  %1074 = zext i8 %1073 to i16
  %1075 = getelementptr inbounds i16, i16* %499, i64 -2
  store i16 %1074, i16* %1075, align 2
  %1076 = getelementptr inbounds i8, i8* %498, i64 -1
  %1077 = load i8, i8* %1076, align 1
  %1078 = zext i8 %1077 to i16
  br label %1081

1079:                                             ; preds = %497
  %1080 = getelementptr inbounds i16, i16* %499, i64 -2
  store i16 16384, i16* %1080, align 2
  br label %1081

1081:                                             ; preds = %1079, %1071
  %1082 = phi i16 [ 16384, %1079 ], [ %1078, %1071 ]
  %1083 = getelementptr inbounds i16, i16* %499, i64 -1
  store i16 %1082, i16* %1083, align 2
  br i1 %63, label %1084, label %1181

1084:                                             ; preds = %1081
  br i1 %107, label %1141, label %1085

1085:                                             ; preds = %1084
  %1086 = getelementptr i16, i16* %82, i64 %192
  %1087 = bitcast i16* %1086 to i8*
  %1088 = getelementptr i8, i8* %355, i64 %64
  %1089 = getelementptr i8, i8* %1088, i64 %357
  %1090 = icmp ugt i8* %1089, %500
  %1091 = icmp ult i8* %498, %1087
  %1092 = and i1 %1090, %1091
  br i1 %1092, label %1141, label %1093

1093:                                             ; preds = %1085
  br i1 %110, label %1125, label %1094

1094:                                             ; preds = %1093, %1094
  %1095 = phi i64 [ %1122, %1094 ], [ 0, %1093 ]
  %1096 = phi i64 [ %1123, %1094 ], [ %111, %1093 ]
  %1097 = getelementptr inbounds i8, i8* %498, i64 %1095
  %1098 = bitcast i8* %1097 to <8 x i8>*
  %1099 = load <8 x i8>, <8 x i8>* %1098, align 1, !alias.scope !92
  %1100 = getelementptr inbounds i8, i8* %1097, i64 8
  %1101 = bitcast i8* %1100 to <8 x i8>*
  %1102 = load <8 x i8>, <8 x i8>* %1101, align 1, !alias.scope !92
  %1103 = zext <8 x i8> %1099 to <8 x i16>
  %1104 = zext <8 x i8> %1102 to <8 x i16>
  %1105 = getelementptr inbounds i16, i16* %499, i64 %1095
  %1106 = bitcast i16* %1105 to <8 x i16>*
  store <8 x i16> %1103, <8 x i16>* %1106, align 2, !alias.scope !95, !noalias !92
  %1107 = getelementptr inbounds i16, i16* %1105, i64 8
  %1108 = bitcast i16* %1107 to <8 x i16>*
  store <8 x i16> %1104, <8 x i16>* %1108, align 2, !alias.scope !95, !noalias !92
  %1109 = or i64 %1095, 16
  %1110 = getelementptr inbounds i8, i8* %498, i64 %1109
  %1111 = bitcast i8* %1110 to <8 x i8>*
  %1112 = load <8 x i8>, <8 x i8>* %1111, align 1, !alias.scope !92
  %1113 = getelementptr inbounds i8, i8* %1110, i64 8
  %1114 = bitcast i8* %1113 to <8 x i8>*
  %1115 = load <8 x i8>, <8 x i8>* %1114, align 1, !alias.scope !92
  %1116 = zext <8 x i8> %1112 to <8 x i16>
  %1117 = zext <8 x i8> %1115 to <8 x i16>
  %1118 = getelementptr inbounds i16, i16* %499, i64 %1109
  %1119 = bitcast i16* %1118 to <8 x i16>*
  store <8 x i16> %1116, <8 x i16>* %1119, align 2, !alias.scope !95, !noalias !92
  %1120 = getelementptr inbounds i16, i16* %1118, i64 8
  %1121 = bitcast i16* %1120 to <8 x i16>*
  store <8 x i16> %1117, <8 x i16>* %1121, align 2, !alias.scope !95, !noalias !92
  %1122 = add i64 %1095, 32
  %1123 = add i64 %1096, -2
  %1124 = icmp eq i64 %1123, 0
  br i1 %1124, label %1125, label %1094, !llvm.loop !97

1125:                                             ; preds = %1094, %1093
  %1126 = phi i64 [ 0, %1093 ], [ %1122, %1094 ]
  br i1 %112, label %1140, label %1127

1127:                                             ; preds = %1125
  %1128 = getelementptr inbounds i8, i8* %498, i64 %1126
  %1129 = bitcast i8* %1128 to <8 x i8>*
  %1130 = load <8 x i8>, <8 x i8>* %1129, align 1, !alias.scope !92
  %1131 = getelementptr inbounds i8, i8* %1128, i64 8
  %1132 = bitcast i8* %1131 to <8 x i8>*
  %1133 = load <8 x i8>, <8 x i8>* %1132, align 1, !alias.scope !92
  %1134 = zext <8 x i8> %1130 to <8 x i16>
  %1135 = zext <8 x i8> %1133 to <8 x i16>
  %1136 = getelementptr inbounds i16, i16* %499, i64 %1126
  %1137 = bitcast i16* %1136 to <8 x i16>*
  store <8 x i16> %1134, <8 x i16>* %1137, align 2, !alias.scope !95, !noalias !92
  %1138 = getelementptr inbounds i16, i16* %1136, i64 8
  %1139 = bitcast i16* %1138 to <8 x i16>*
  store <8 x i16> %1135, <8 x i16>* %1139, align 2, !alias.scope !95, !noalias !92
  br label %1140

1140:                                             ; preds = %1125, %1127
  br i1 %113, label %1181, label %1141

1141:                                             ; preds = %1140, %1085, %1084
  %1142 = phi i64 [ 0, %1085 ], [ 0, %1084 ], [ %108, %1140 ]
  %1143 = xor i64 %1142, -1
  %1144 = add nsw i64 %1143, %64
  br i1 %115, label %1155, label %1145

1145:                                             ; preds = %1141, %1145
  %1146 = phi i64 [ %1152, %1145 ], [ %1142, %1141 ]
  %1147 = phi i64 [ %1153, %1145 ], [ %114, %1141 ]
  %1148 = getelementptr inbounds i8, i8* %498, i64 %1146
  %1149 = load i8, i8* %1148, align 1
  %1150 = zext i8 %1149 to i16
  %1151 = getelementptr inbounds i16, i16* %499, i64 %1146
  store i16 %1150, i16* %1151, align 2
  %1152 = add nuw nsw i64 %1146, 1
  %1153 = add i64 %1147, -1
  %1154 = icmp eq i64 %1153, 0
  br i1 %1154, label %1155, label %1145, !llvm.loop !98

1155:                                             ; preds = %1145, %1141
  %1156 = phi i64 [ %1142, %1141 ], [ %1152, %1145 ]
  %1157 = icmp ult i64 %1144, 3
  br i1 %1157, label %1181, label %1158

1158:                                             ; preds = %1155, %1158
  %1159 = phi i64 [ %1179, %1158 ], [ %1156, %1155 ]
  %1160 = getelementptr inbounds i8, i8* %498, i64 %1159
  %1161 = load i8, i8* %1160, align 1
  %1162 = zext i8 %1161 to i16
  %1163 = getelementptr inbounds i16, i16* %499, i64 %1159
  store i16 %1162, i16* %1163, align 2
  %1164 = add nuw nsw i64 %1159, 1
  %1165 = getelementptr inbounds i8, i8* %498, i64 %1164
  %1166 = load i8, i8* %1165, align 1
  %1167 = zext i8 %1166 to i16
  %1168 = getelementptr inbounds i16, i16* %499, i64 %1164
  store i16 %1167, i16* %1168, align 2
  %1169 = add nuw nsw i64 %1159, 2
  %1170 = getelementptr inbounds i8, i8* %498, i64 %1169
  %1171 = load i8, i8* %1170, align 1
  %1172 = zext i8 %1171 to i16
  %1173 = getelementptr inbounds i16, i16* %499, i64 %1169
  store i16 %1172, i16* %1173, align 2
  %1174 = add nuw nsw i64 %1159, 3
  %1175 = getelementptr inbounds i8, i8* %498, i64 %1174
  %1176 = load i8, i8* %1175, align 1
  %1177 = zext i8 %1176 to i16
  %1178 = getelementptr inbounds i16, i16* %499, i64 %1174
  store i16 %1177, i16* %1178, align 2
  %1179 = add nuw nsw i64 %1159, 4
  %1180 = icmp eq i64 %1179, %64
  br i1 %1180, label %1181, label %1158, !llvm.loop !99

1181:                                             ; preds = %1155, %1158, %1140, %1081
  br i1 %66, label %1182, label %1208

1182:                                             ; preds = %1181
  br i1 %117, label %1196, label %1183

1183:                                             ; preds = %1182, %1190
  %1184 = phi i64 [ %1193, %1190 ], [ %67, %1182 ]
  %1185 = phi i64 [ %1194, %1190 ], [ %116, %1182 ]
  br i1 %45, label %1190, label %1186

1186:                                             ; preds = %1183
  %1187 = getelementptr inbounds i8, i8* %498, i64 %1184
  %1188 = load i8, i8* %1187, align 1
  %1189 = zext i8 %1188 to i16
  br label %1190

1190:                                             ; preds = %1186, %1183
  %1191 = phi i16 [ %1189, %1186 ], [ 16384, %1183 ]
  %1192 = getelementptr inbounds i16, i16* %499, i64 %1184
  store i16 %1191, i16* %1192, align 2
  %1193 = add nsw i64 %1184, 1
  %1194 = add i64 %1185, -1
  %1195 = icmp eq i64 %1194, 0
  br i1 %1195, label %1196, label %1183, !llvm.loop !100

1196:                                             ; preds = %1190, %1182
  %1197 = phi i64 [ %67, %1182 ], [ %1193, %1190 ]
  br i1 %118, label %1208, label %1198

1198:                                             ; preds = %1196, %1402
  %1199 = phi i64 [ %1405, %1402 ], [ %1197, %1196 ]
  br i1 %45, label %1204, label %1200

1200:                                             ; preds = %1198
  %1201 = getelementptr inbounds i8, i8* %498, i64 %1199
  %1202 = load i8, i8* %1201, align 1
  %1203 = zext i8 %1202 to i16
  br label %1204

1204:                                             ; preds = %1200, %1198
  %1205 = phi i16 [ %1203, %1200 ], [ 16384, %1198 ]
  %1206 = getelementptr inbounds i16, i16* %499, i64 %1199
  store i16 %1205, i16* %1206, align 2
  %1207 = add nsw i64 %1199, 1
  br i1 %45, label %1386, label %1382

1208:                                             ; preds = %1196, %1402, %1181
  %1209 = getelementptr i8, i8* %201, i64 %359
  %1210 = getelementptr i8, i8* %217, i64 %360
  br label %501

1211:                                             ; preds = %293, %1211
  %1212 = phi i64 [ %1214, %1211 ], [ %294, %293 ]
  %1213 = getelementptr inbounds i16, i16* %291, i64 %1212
  store i16 16384, i16* %1213, align 2
  %1214 = add nuw i64 %1212, 1
  %1215 = icmp eq i64 %1214, %70
  br i1 %1215, label %501, label %1211, !llvm.loop !101

1216:                                             ; preds = %826
  %1217 = getelementptr inbounds i8, i8* %829, i64 -2
  %1218 = load i8, i8* %1217, align 1
  %1219 = zext i8 %1218 to i16
  %1220 = getelementptr inbounds i16, i16* %827, i64 -2
  store i16 %1219, i16* %1220, align 2
  %1221 = getelementptr inbounds i8, i8* %829, i64 -1
  %1222 = load i8, i8* %1221, align 1
  %1223 = zext i8 %1222 to i16
  br label %1226

1224:                                             ; preds = %826
  %1225 = getelementptr inbounds i16, i16* %827, i64 -2
  store i16 16384, i16* %1225, align 2
  br label %1226

1226:                                             ; preds = %1224, %1216
  %1227 = phi i16 [ 16384, %1224 ], [ %1223, %1216 ]
  %1228 = getelementptr inbounds i16, i16* %827, i64 -1
  store i16 %1227, i16* %1228, align 2
  br i1 %63, label %1229, label %1327

1229:                                             ; preds = %1226
  br i1 %157, label %1287, label %1230

1230:                                             ; preds = %1229
  %1231 = getelementptr i16, i16* %675, i64 %76
  %1232 = bitcast i16* %1231 to i8*
  %1233 = getelementptr i8, i8* %503, i64 %64
  %1234 = add nsw i64 %206, %687
  %1235 = getelementptr i8, i8* %1233, i64 %1234
  %1236 = icmp ugt i8* %1235, %828
  %1237 = icmp ult i8* %829, %1232
  %1238 = and i1 %1236, %1237
  br i1 %1238, label %1287, label %1239

1239:                                             ; preds = %1230
  br i1 %160, label %1271, label %1240

1240:                                             ; preds = %1239, %1240
  %1241 = phi i64 [ %1268, %1240 ], [ 0, %1239 ]
  %1242 = phi i64 [ %1269, %1240 ], [ %161, %1239 ]
  %1243 = getelementptr inbounds i8, i8* %829, i64 %1241
  %1244 = bitcast i8* %1243 to <8 x i8>*
  %1245 = load <8 x i8>, <8 x i8>* %1244, align 1, !alias.scope !102
  %1246 = getelementptr inbounds i8, i8* %1243, i64 8
  %1247 = bitcast i8* %1246 to <8 x i8>*
  %1248 = load <8 x i8>, <8 x i8>* %1247, align 1, !alias.scope !102
  %1249 = zext <8 x i8> %1245 to <8 x i16>
  %1250 = zext <8 x i8> %1248 to <8 x i16>
  %1251 = getelementptr inbounds i16, i16* %827, i64 %1241
  %1252 = bitcast i16* %1251 to <8 x i16>*
  store <8 x i16> %1249, <8 x i16>* %1252, align 2, !alias.scope !105, !noalias !102
  %1253 = getelementptr inbounds i16, i16* %1251, i64 8
  %1254 = bitcast i16* %1253 to <8 x i16>*
  store <8 x i16> %1250, <8 x i16>* %1254, align 2, !alias.scope !105, !noalias !102
  %1255 = or i64 %1241, 16
  %1256 = getelementptr inbounds i8, i8* %829, i64 %1255
  %1257 = bitcast i8* %1256 to <8 x i8>*
  %1258 = load <8 x i8>, <8 x i8>* %1257, align 1, !alias.scope !102
  %1259 = getelementptr inbounds i8, i8* %1256, i64 8
  %1260 = bitcast i8* %1259 to <8 x i8>*
  %1261 = load <8 x i8>, <8 x i8>* %1260, align 1, !alias.scope !102
  %1262 = zext <8 x i8> %1258 to <8 x i16>
  %1263 = zext <8 x i8> %1261 to <8 x i16>
  %1264 = getelementptr inbounds i16, i16* %827, i64 %1255
  %1265 = bitcast i16* %1264 to <8 x i16>*
  store <8 x i16> %1262, <8 x i16>* %1265, align 2, !alias.scope !105, !noalias !102
  %1266 = getelementptr inbounds i16, i16* %1264, i64 8
  %1267 = bitcast i16* %1266 to <8 x i16>*
  store <8 x i16> %1263, <8 x i16>* %1267, align 2, !alias.scope !105, !noalias !102
  %1268 = add i64 %1241, 32
  %1269 = add i64 %1242, -2
  %1270 = icmp eq i64 %1269, 0
  br i1 %1270, label %1271, label %1240, !llvm.loop !107

1271:                                             ; preds = %1240, %1239
  %1272 = phi i64 [ 0, %1239 ], [ %1268, %1240 ]
  br i1 %162, label %1286, label %1273

1273:                                             ; preds = %1271
  %1274 = getelementptr inbounds i8, i8* %829, i64 %1272
  %1275 = bitcast i8* %1274 to <8 x i8>*
  %1276 = load <8 x i8>, <8 x i8>* %1275, align 1, !alias.scope !102
  %1277 = getelementptr inbounds i8, i8* %1274, i64 8
  %1278 = bitcast i8* %1277 to <8 x i8>*
  %1279 = load <8 x i8>, <8 x i8>* %1278, align 1, !alias.scope !102
  %1280 = zext <8 x i8> %1276 to <8 x i16>
  %1281 = zext <8 x i8> %1279 to <8 x i16>
  %1282 = getelementptr inbounds i16, i16* %827, i64 %1272
  %1283 = bitcast i16* %1282 to <8 x i16>*
  store <8 x i16> %1280, <8 x i16>* %1283, align 2, !alias.scope !105, !noalias !102
  %1284 = getelementptr inbounds i16, i16* %1282, i64 8
  %1285 = bitcast i16* %1284 to <8 x i16>*
  store <8 x i16> %1281, <8 x i16>* %1285, align 2, !alias.scope !105, !noalias !102
  br label %1286

1286:                                             ; preds = %1271, %1273
  br i1 %163, label %1327, label %1287

1287:                                             ; preds = %1286, %1230, %1229
  %1288 = phi i64 [ 0, %1230 ], [ 0, %1229 ], [ %158, %1286 ]
  %1289 = xor i64 %1288, -1
  %1290 = add nsw i64 %1289, %64
  br i1 %165, label %1301, label %1291

1291:                                             ; preds = %1287, %1291
  %1292 = phi i64 [ %1298, %1291 ], [ %1288, %1287 ]
  %1293 = phi i64 [ %1299, %1291 ], [ %164, %1287 ]
  %1294 = getelementptr inbounds i8, i8* %829, i64 %1292
  %1295 = load i8, i8* %1294, align 1
  %1296 = zext i8 %1295 to i16
  %1297 = getelementptr inbounds i16, i16* %827, i64 %1292
  store i16 %1296, i16* %1297, align 2
  %1298 = add nuw nsw i64 %1292, 1
  %1299 = add i64 %1293, -1
  %1300 = icmp eq i64 %1299, 0
  br i1 %1300, label %1301, label %1291, !llvm.loop !108

1301:                                             ; preds = %1291, %1287
  %1302 = phi i64 [ %1288, %1287 ], [ %1298, %1291 ]
  %1303 = icmp ult i64 %1290, 3
  br i1 %1303, label %1327, label %1304

1304:                                             ; preds = %1301, %1304
  %1305 = phi i64 [ %1325, %1304 ], [ %1302, %1301 ]
  %1306 = getelementptr inbounds i8, i8* %829, i64 %1305
  %1307 = load i8, i8* %1306, align 1
  %1308 = zext i8 %1307 to i16
  %1309 = getelementptr inbounds i16, i16* %827, i64 %1305
  store i16 %1308, i16* %1309, align 2
  %1310 = add nuw nsw i64 %1305, 1
  %1311 = getelementptr inbounds i8, i8* %829, i64 %1310
  %1312 = load i8, i8* %1311, align 1
  %1313 = zext i8 %1312 to i16
  %1314 = getelementptr inbounds i16, i16* %827, i64 %1310
  store i16 %1313, i16* %1314, align 2
  %1315 = add nuw nsw i64 %1305, 2
  %1316 = getelementptr inbounds i8, i8* %829, i64 %1315
  %1317 = load i8, i8* %1316, align 1
  %1318 = zext i8 %1317 to i16
  %1319 = getelementptr inbounds i16, i16* %827, i64 %1315
  store i16 %1318, i16* %1319, align 2
  %1320 = add nuw nsw i64 %1305, 3
  %1321 = getelementptr inbounds i8, i8* %829, i64 %1320
  %1322 = load i8, i8* %1321, align 1
  %1323 = zext i8 %1322 to i16
  %1324 = getelementptr inbounds i16, i16* %827, i64 %1320
  store i16 %1323, i16* %1324, align 2
  %1325 = add nuw nsw i64 %1305, 4
  %1326 = icmp eq i64 %1325, %64
  br i1 %1326, label %1327, label %1304, !llvm.loop !109

1327:                                             ; preds = %1301, %1304, %1286, %1226
  br i1 %66, label %1328, label %1354

1328:                                             ; preds = %1327
  br i1 %167, label %1342, label %1329

1329:                                             ; preds = %1328, %1336
  %1330 = phi i64 [ %1339, %1336 ], [ %67, %1328 ]
  %1331 = phi i64 [ %1340, %1336 ], [ %166, %1328 ]
  br i1 %45, label %1336, label %1332

1332:                                             ; preds = %1329
  %1333 = getelementptr inbounds i8, i8* %829, i64 %1330
  %1334 = load i8, i8* %1333, align 1
  %1335 = zext i8 %1334 to i16
  br label %1336

1336:                                             ; preds = %1332, %1329
  %1337 = phi i16 [ %1335, %1332 ], [ 16384, %1329 ]
  %1338 = getelementptr inbounds i16, i16* %827, i64 %1330
  store i16 %1337, i16* %1338, align 2
  %1339 = add nsw i64 %1330, 1
  %1340 = add i64 %1331, -1
  %1341 = icmp eq i64 %1340, 0
  br i1 %1341, label %1342, label %1329, !llvm.loop !110

1342:                                             ; preds = %1336, %1328
  %1343 = phi i64 [ %67, %1328 ], [ %1339, %1336 ]
  br i1 %168, label %1354, label %1344

1344:                                             ; preds = %1342, %1477
  %1345 = phi i64 [ %1480, %1477 ], [ %1343, %1342 ]
  br i1 %45, label %1350, label %1346

1346:                                             ; preds = %1344
  %1347 = getelementptr inbounds i8, i8* %829, i64 %1345
  %1348 = load i8, i8* %1347, align 1
  %1349 = zext i8 %1348 to i16
  br label %1350

1350:                                             ; preds = %1346, %1344
  %1351 = phi i16 [ %1349, %1346 ], [ 16384, %1344 ]
  %1352 = getelementptr inbounds i16, i16* %827, i64 %1345
  store i16 %1351, i16* %1352, align 2
  %1353 = add nsw i64 %1345, 1
  br i1 %45, label %1461, label %1457

1354:                                             ; preds = %1342, %1477, %1327
  %1355 = getelementptr inbounds i16, i16* %827, i64 %6
  %1356 = getelementptr inbounds i8, i8* %829, i64 %206
  br label %830

1357:                                             ; preds = %493
  %1358 = getelementptr inbounds i8, i8* %355, i64 %496
  %1359 = load i8, i8* %1358, align 1
  %1360 = zext i8 %1359 to i16
  br label %1361

1361:                                             ; preds = %1357, %493
  %1362 = phi i16 [ %1360, %1357 ], [ 16384, %493 ]
  %1363 = getelementptr inbounds i16, i16* %218, i64 %496
  store i16 %1362, i16* %1363, align 2
  %1364 = add nsw i64 %488, 2
  br i1 %45, label %1369, label %1365

1365:                                             ; preds = %1361
  %1366 = getelementptr inbounds i8, i8* %355, i64 %1364
  %1367 = load i8, i8* %1366, align 1
  %1368 = zext i8 %1367 to i16
  br label %1369

1369:                                             ; preds = %1365, %1361
  %1370 = phi i16 [ %1368, %1365 ], [ 16384, %1361 ]
  %1371 = getelementptr inbounds i16, i16* %218, i64 %1364
  store i16 %1370, i16* %1371, align 2
  %1372 = add nsw i64 %488, 3
  br i1 %45, label %1377, label %1373

1373:                                             ; preds = %1369
  %1374 = getelementptr inbounds i8, i8* %355, i64 %1372
  %1375 = load i8, i8* %1374, align 1
  %1376 = zext i8 %1375 to i16
  br label %1377

1377:                                             ; preds = %1373, %1369
  %1378 = phi i16 [ %1376, %1373 ], [ 16384, %1369 ]
  %1379 = getelementptr inbounds i16, i16* %218, i64 %1372
  store i16 %1378, i16* %1379, align 2
  %1380 = add nsw i64 %488, 4
  %1381 = icmp eq i64 %1380, %68
  br i1 %1381, label %497, label %487

1382:                                             ; preds = %1204
  %1383 = getelementptr inbounds i8, i8* %498, i64 %1207
  %1384 = load i8, i8* %1383, align 1
  %1385 = zext i8 %1384 to i16
  br label %1386

1386:                                             ; preds = %1382, %1204
  %1387 = phi i16 [ %1385, %1382 ], [ 16384, %1204 ]
  %1388 = getelementptr inbounds i16, i16* %499, i64 %1207
  store i16 %1387, i16* %1388, align 2
  %1389 = add nsw i64 %1199, 2
  br i1 %45, label %1394, label %1390

1390:                                             ; preds = %1386
  %1391 = getelementptr inbounds i8, i8* %498, i64 %1389
  %1392 = load i8, i8* %1391, align 1
  %1393 = zext i8 %1392 to i16
  br label %1394

1394:                                             ; preds = %1390, %1386
  %1395 = phi i16 [ %1393, %1390 ], [ 16384, %1386 ]
  %1396 = getelementptr inbounds i16, i16* %499, i64 %1389
  store i16 %1395, i16* %1396, align 2
  %1397 = add nsw i64 %1199, 3
  br i1 %45, label %1402, label %1398

1398:                                             ; preds = %1394
  %1399 = getelementptr inbounds i8, i8* %498, i64 %1397
  %1400 = load i8, i8* %1399, align 1
  %1401 = zext i8 %1400 to i16
  br label %1402

1402:                                             ; preds = %1398, %1394
  %1403 = phi i16 [ %1401, %1398 ], [ 16384, %1394 ]
  %1404 = getelementptr inbounds i16, i16* %499, i64 %1397
  store i16 %1403, i16* %1404, align 2
  %1405 = add nsw i64 %1199, 4
  %1406 = icmp eq i64 %1405, %68
  br i1 %1406, label %1208, label %1198

1407:                                             ; preds = %670
  %1408 = getelementptr inbounds i8, i8* %518, i64 %673
  %1409 = load i8, i8* %1408, align 1
  %1410 = zext i8 %1409 to i16
  br label %1411

1411:                                             ; preds = %1407, %670
  %1412 = phi i16 [ %1410, %1407 ], [ 16384, %670 ]
  %1413 = getelementptr inbounds i16, i16* %517, i64 %673
  store i16 %1412, i16* %1413, align 2
  %1414 = add nsw i64 %665, 2
  br i1 %45, label %1419, label %1415

1415:                                             ; preds = %1411
  %1416 = getelementptr inbounds i8, i8* %518, i64 %1414
  %1417 = load i8, i8* %1416, align 1
  %1418 = zext i8 %1417 to i16
  br label %1419

1419:                                             ; preds = %1415, %1411
  %1420 = phi i16 [ %1418, %1415 ], [ 16384, %1411 ]
  %1421 = getelementptr inbounds i16, i16* %517, i64 %1414
  store i16 %1420, i16* %1421, align 2
  %1422 = add nsw i64 %665, 3
  br i1 %45, label %1427, label %1423

1423:                                             ; preds = %1419
  %1424 = getelementptr inbounds i8, i8* %518, i64 %1422
  %1425 = load i8, i8* %1424, align 1
  %1426 = zext i8 %1425 to i16
  br label %1427

1427:                                             ; preds = %1423, %1419
  %1428 = phi i16 [ %1426, %1423 ], [ 16384, %1419 ]
  %1429 = getelementptr inbounds i16, i16* %517, i64 %1422
  store i16 %1428, i16* %1429, align 2
  %1430 = add nsw i64 %665, 4
  %1431 = icmp eq i64 %1430, %68
  br i1 %1431, label %674, label %664

1432:                                             ; preds = %822
  %1433 = getelementptr inbounds i8, i8* %688, i64 %825
  %1434 = load i8, i8* %1433, align 1
  %1435 = zext i8 %1434 to i16
  br label %1436

1436:                                             ; preds = %1432, %822
  %1437 = phi i16 [ %1435, %1432 ], [ 16384, %822 ]
  %1438 = getelementptr inbounds i16, i16* %675, i64 %825
  store i16 %1437, i16* %1438, align 2
  %1439 = add nsw i64 %817, 2
  br i1 %45, label %1444, label %1440

1440:                                             ; preds = %1436
  %1441 = getelementptr inbounds i8, i8* %688, i64 %1439
  %1442 = load i8, i8* %1441, align 1
  %1443 = zext i8 %1442 to i16
  br label %1444

1444:                                             ; preds = %1440, %1436
  %1445 = phi i16 [ %1443, %1440 ], [ 16384, %1436 ]
  %1446 = getelementptr inbounds i16, i16* %675, i64 %1439
  store i16 %1445, i16* %1446, align 2
  %1447 = add nsw i64 %817, 3
  br i1 %45, label %1452, label %1448

1448:                                             ; preds = %1444
  %1449 = getelementptr inbounds i8, i8* %688, i64 %1447
  %1450 = load i8, i8* %1449, align 1
  %1451 = zext i8 %1450 to i16
  br label %1452

1452:                                             ; preds = %1448, %1444
  %1453 = phi i16 [ %1451, %1448 ], [ 16384, %1444 ]
  %1454 = getelementptr inbounds i16, i16* %675, i64 %1447
  store i16 %1453, i16* %1454, align 2
  %1455 = add nsw i64 %817, 4
  %1456 = icmp eq i64 %1455, %68
  br i1 %1456, label %826, label %816

1457:                                             ; preds = %1350
  %1458 = getelementptr inbounds i8, i8* %829, i64 %1353
  %1459 = load i8, i8* %1458, align 1
  %1460 = zext i8 %1459 to i16
  br label %1461

1461:                                             ; preds = %1457, %1350
  %1462 = phi i16 [ %1460, %1457 ], [ 16384, %1350 ]
  %1463 = getelementptr inbounds i16, i16* %827, i64 %1353
  store i16 %1462, i16* %1463, align 2
  %1464 = add nsw i64 %1345, 2
  br i1 %45, label %1469, label %1465

1465:                                             ; preds = %1461
  %1466 = getelementptr inbounds i8, i8* %829, i64 %1464
  %1467 = load i8, i8* %1466, align 1
  %1468 = zext i8 %1467 to i16
  br label %1469

1469:                                             ; preds = %1465, %1461
  %1470 = phi i16 [ %1468, %1465 ], [ 16384, %1461 ]
  %1471 = getelementptr inbounds i16, i16* %827, i64 %1464
  store i16 %1470, i16* %1471, align 2
  %1472 = add nsw i64 %1345, 3
  br i1 %45, label %1477, label %1473

1473:                                             ; preds = %1469
  %1474 = getelementptr inbounds i8, i8* %829, i64 %1472
  %1475 = load i8, i8* %1474, align 1
  %1476 = zext i8 %1475 to i16
  br label %1477

1477:                                             ; preds = %1473, %1469
  %1478 = phi i16 [ %1476, %1473 ], [ 16384, %1469 ]
  %1479 = getelementptr inbounds i16, i16* %827, i64 %1472
  store i16 %1478, i16* %1479, align 2
  %1480 = add nsw i64 %1345, 4
  %1481 = icmp eq i64 %1480, %68
  br i1 %1481, label %1354, label %1344

1482:                                             ; preds = %1058
  %1483 = getelementptr inbounds i8, i8* %918, i64 %1061
  %1484 = load i8, i8* %1483, align 1
  %1485 = zext i8 %1484 to i16
  br label %1486

1486:                                             ; preds = %1482, %1058
  %1487 = phi i16 [ %1485, %1482 ], [ 16384, %1058 ]
  %1488 = getelementptr inbounds i16, i16* %916, i64 %1061
  store i16 %1487, i16* %1488, align 2
  %1489 = add nsw i64 %1053, 2
  br i1 %45, label %1494, label %1490

1490:                                             ; preds = %1486
  %1491 = getelementptr inbounds i8, i8* %918, i64 %1489
  %1492 = load i8, i8* %1491, align 1
  %1493 = zext i8 %1492 to i16
  br label %1494

1494:                                             ; preds = %1490, %1486
  %1495 = phi i16 [ %1493, %1490 ], [ 16384, %1486 ]
  %1496 = getelementptr inbounds i16, i16* %916, i64 %1489
  store i16 %1495, i16* %1496, align 2
  %1497 = add nsw i64 %1053, 3
  br i1 %45, label %1502, label %1498

1498:                                             ; preds = %1494
  %1499 = getelementptr inbounds i8, i8* %918, i64 %1497
  %1500 = load i8, i8* %1499, align 1
  %1501 = zext i8 %1500 to i16
  br label %1502

1502:                                             ; preds = %1498, %1494
  %1503 = phi i16 [ %1501, %1498 ], [ 16384, %1494 ]
  %1504 = getelementptr inbounds i16, i16* %916, i64 %1497
  store i16 %1503, i16* %1504, align 2
  %1505 = add nsw i64 %1053, 4
  %1506 = icmp eq i64 %1505, %68
  br i1 %1506, label %1062, label %1052
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = !{i8 0, i8 2}
!6 = !{i32 0, i32 33}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !20}
!20 = !{!"llvm.loop.isvectorized", i32 1}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !23, !20}
!23 = !{!"llvm.loop.unroll.runtime.disable"}
!24 = distinct !{!24, !20}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !20}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !23, !20}
!29 = distinct !{!29, !20}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !23, !20}
!32 = distinct !{!32, !20}
!33 = distinct !{!33, !3}
!34 = distinct !{!34, !23, !20}
!35 = distinct !{!35, !20}
!36 = distinct !{!36, !3}
!37 = distinct !{!37, !23, !20}
!38 = distinct !{!38, !20}
!39 = distinct !{!39, !3}
!40 = distinct !{!40, !23, !20}
!41 = distinct !{!41, !20}
!42 = distinct !{!42, !3}
!43 = distinct !{!43, !23, !20}
!44 = distinct !{!44, !23, !20}
!45 = distinct !{!45, !20}
!46 = distinct !{!46, !3}
!47 = distinct !{!47, !23, !20}
!48 = distinct !{!48, !20}
!49 = distinct !{!49, !3}
!50 = distinct !{!50, !23, !20}
!51 = distinct !{!51, !20}
!52 = distinct !{!52, !3}
!53 = distinct !{!53, !3}
!54 = !{!55}
!55 = distinct !{!55, !56}
!56 = distinct !{!56, !"LVerDomain"}
!57 = !{!58}
!58 = distinct !{!58, !56}
!59 = distinct !{!59, !20}
!60 = distinct !{!60, !3}
!61 = distinct !{!61, !20}
!62 = distinct !{!62, !3}
!63 = !{!64}
!64 = distinct !{!64, !65}
!65 = distinct !{!65, !"LVerDomain"}
!66 = !{!67}
!67 = distinct !{!67, !65}
!68 = distinct !{!68, !20}
!69 = distinct !{!69, !3}
!70 = distinct !{!70, !20}
!71 = distinct !{!71, !3}
!72 = !{!73}
!73 = distinct !{!73, !74}
!74 = distinct !{!74, !"LVerDomain"}
!75 = !{!76}
!76 = distinct !{!76, !74}
!77 = distinct !{!77, !20}
!78 = distinct !{!78, !3}
!79 = distinct !{!79, !20}
!80 = distinct !{!80, !20}
!81 = distinct !{!81, !3}
!82 = distinct !{!82, !23, !20}
!83 = distinct !{!83, !3}
!84 = !{!85}
!85 = distinct !{!85, !86}
!86 = distinct !{!86, !"LVerDomain"}
!87 = !{!88}
!88 = distinct !{!88, !86}
!89 = distinct !{!89, !20}
!90 = distinct !{!90, !3}
!91 = distinct !{!91, !20}
!92 = !{!93}
!93 = distinct !{!93, !94}
!94 = distinct !{!94, !"LVerDomain"}
!95 = !{!96}
!96 = distinct !{!96, !94}
!97 = distinct !{!97, !20}
!98 = distinct !{!98, !3}
!99 = distinct !{!99, !20}
!100 = distinct !{!100, !3}
!101 = distinct !{!101, !23, !20}
!102 = !{!103}
!103 = distinct !{!103, !104}
!104 = distinct !{!104, !"LVerDomain"}
!105 = !{!106}
!106 = distinct !{!106, !104}
!107 = distinct !{!107, !20}
!108 = distinct !{!108, !3}
!109 = distinct !{!109, !20}
!110 = distinct !{!110, !3}
