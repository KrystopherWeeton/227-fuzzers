; ModuleID = '../../components/payments/core/secure_payment_confirmation_instrument.cc'
source_filename = "../../components/payments/core/secure_payment_confirmation_instrument.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.payments::SecurePaymentConfirmationInstrument" = type { %"class.std::__1::vector", %"class.std::__1::basic_string", %"class.std::__1::basic_string.6", %"class.std::__1::vector" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_string.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.9 }
%union.anon.9 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.10 }
%struct.anon.10 = type { %"struct.std::__1::__padding.11", i8 }
%"struct.std::__1::__padding.11" = type { [1 x i8] }
%"class.std::__1::__basic_string_common" = type { i8 }

@.str = private unnamed_addr constant [64 x i8] c"PaymentRequest.SecurePaymentConfirmationCredentialIdSizeInBytes\00", align 1

@_ZN8payments35SecurePaymentConfirmationInstrumentC1Ev = hidden unnamed_addr alias void (%"struct.payments::SecurePaymentConfirmationInstrument"*), void (%"struct.payments::SecurePaymentConfirmationInstrument"*)* @_ZN8payments35SecurePaymentConfirmationInstrumentC2Ev
@_ZN8payments35SecurePaymentConfirmationInstrumentC1ENSt3__16vectorIhNS1_9allocatorIhEEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS3_IcEEEERKNS6_IDsNS7_IDsEENS3_IDsEEEES5_ = hidden unnamed_addr alias void (%"struct.payments::SecurePaymentConfirmationInstrument"*, %"class.std::__1::vector"*, %"class.std::__1::basic_string"*, %"class.std::__1::basic_string.6"*, %"class.std::__1::vector"*), void (%"struct.payments::SecurePaymentConfirmationInstrument"*, %"class.std::__1::vector"*, %"class.std::__1::basic_string"*, %"class.std::__1::basic_string.6"*, %"class.std::__1::vector"*)* @_ZN8payments35SecurePaymentConfirmationInstrumentC2ENSt3__16vectorIhNS1_9allocatorIhEEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS3_IcEEEERKNS6_IDsNS7_IDsEENS3_IDsEEEES5_
@_ZN8payments35SecurePaymentConfirmationInstrumentD1Ev = hidden unnamed_addr alias void (%"struct.payments::SecurePaymentConfirmationInstrument"*), void (%"struct.payments::SecurePaymentConfirmationInstrument"*)* @_ZN8payments35SecurePaymentConfirmationInstrumentD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8payments35SecurePaymentConfirmationInstrumentC2Ev(%"struct.payments::SecurePaymentConfirmationInstrument"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.payments::SecurePaymentConfirmationInstrument"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 96, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8payments35SecurePaymentConfirmationInstrumentC2ENSt3__16vectorIhNS1_9allocatorIhEEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS3_IcEEEERKNS6_IDsNS7_IDsEENS3_IDsEEEES5_(%"struct.payments::SecurePaymentConfirmationInstrument"*, %"class.std::__1::vector"* nocapture, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), %"class.std::__1::basic_string.6"* nocapture readonly dereferenceable(24), %"class.std::__1::vector"* nocapture) unnamed_addr #0 align 2 {
  %6 = bitcast %"struct.payments::SecurePaymentConfirmationInstrument"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #8
  %7 = bitcast %"class.std::__1::vector"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"struct.payments::SecurePaymentConfirmationInstrument"* %0 to i64*
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = bitcast i8** %13 to i64*
  store i64 %12, i64* %14, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast i8** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %19 = bitcast i8** %18 to i64*
  store i64 %17, i64* %19, align 8
  %20 = bitcast %"class.std::__1::vector"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 24, i1 false) #8
  %21 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 1
  %22 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  %24 = load i8, i8* %23, align 1
  %25 = icmp slt i8 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %5
  %27 = bitcast %"class.std::__1::basic_string"* %21 to i8*
  %28 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 24, i1 false) #8
  br label %34

29:                                               ; preds = %5
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %21, i8* %31, i64 %33) #8
  br label %34

34:                                               ; preds = %26, %29
  %35 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 2
  %36 = bitcast %"class.std::__1::basic_string.6"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %36, i64 0, i32 1, i32 1
  %38 = load i8, i8* %37, align 1
  %39 = icmp slt i8 %38, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %34
  %41 = bitcast %"class.std::__1::basic_string.6"* %35 to i8*
  %42 = bitcast %"class.std::__1::basic_string.6"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 24, i1 false) #8
  br label %218

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.std::__1::basic_string.6", %"class.std::__1::basic_string.6"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load i16*, i16** %44, align 8
  %46 = getelementptr inbounds %"class.std::__1::basic_string.6", %"class.std::__1::basic_string.6"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = icmp ult i64 %47, 11
  br i1 %48, label %49, label %54

49:                                               ; preds = %43
  %50 = bitcast %"class.std::__1::basic_string.6"* %35 to i16*
  %51 = trunc i64 %47 to i8
  %52 = bitcast %"class.std::__1::basic_string.6"* %35 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %53 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %52, i64 0, i32 1, i32 1
  store i8 %51, i8* %53, align 1
  br label %71

54:                                               ; preds = %43
  %55 = icmp ugt i64 %47, 9223372036854775791
  br i1 %55, label %56, label %58

56:                                               ; preds = %54
  %57 = bitcast %"class.std::__1::basic_string.6"* %35 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %57) #9
  unreachable

58:                                               ; preds = %54
  %59 = add nuw nsw i64 %47, 8
  %60 = and i64 %59, -8
  %61 = icmp slt i64 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %58
  tail call void @abort() #9
  unreachable

63:                                               ; preds = %58
  %64 = shl i64 %60, 1
  %65 = tail call i8* @_Znwm(i64 %64) #10
  %66 = bitcast i8* %65 to i16*
  %67 = bitcast %"class.std::__1::basic_string.6"* %35 to i8**
  store i8* %65, i8** %67, align 8
  %68 = or i64 %60, -9223372036854775808
  %69 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %68, i64* %69, align 8
  %70 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %47, i64* %70, align 8
  br label %71

71:                                               ; preds = %63, %49
  %72 = phi i16* [ %50, %49 ], [ %66, %63 ]
  %73 = add nuw nsw i64 %47, 1
  %74 = add i64 %47, 1
  %75 = icmp ult i64 %74, 16
  br i1 %75, label %165, label %76

76:                                               ; preds = %71
  %77 = add i64 %47, 1
  %78 = getelementptr i16, i16* %72, i64 %77
  %79 = getelementptr i16, i16* %45, i64 %77
  %80 = icmp ult i16* %72, %79
  %81 = icmp ult i16* %45, %78
  %82 = and i1 %80, %81
  br i1 %82, label %165, label %83

83:                                               ; preds = %76
  %84 = and i64 %74, -16
  %85 = sub i64 %73, %84
  %86 = getelementptr i16, i16* %45, i64 %84
  %87 = getelementptr i16, i16* %72, i64 %84
  %88 = add i64 %84, -16
  %89 = lshr exact i64 %88, 4
  %90 = add nuw nsw i64 %89, 1
  %91 = and i64 %90, 3
  %92 = icmp ult i64 %88, 48
  br i1 %92, label %144, label %93

93:                                               ; preds = %83
  %94 = sub nsw i64 %90, %91
  br label %95

95:                                               ; preds = %95, %93
  %96 = phi i64 [ 0, %93 ], [ %141, %95 ]
  %97 = phi i64 [ %94, %93 ], [ %142, %95 ]
  %98 = getelementptr i16, i16* %45, i64 %96
  %99 = getelementptr i16, i16* %72, i64 %96
  %100 = bitcast i16* %98 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !2
  %102 = getelementptr i16, i16* %98, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !2
  %105 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %105, align 2, !alias.scope !5, !noalias !2
  %106 = getelementptr i16, i16* %99, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %107, align 2, !alias.scope !5, !noalias !2
  %108 = or i64 %96, 16
  %109 = getelementptr i16, i16* %45, i64 %108
  %110 = getelementptr i16, i16* %72, i64 %108
  %111 = bitcast i16* %109 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2, !alias.scope !2
  %113 = getelementptr i16, i16* %109, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2, !alias.scope !2
  %116 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %116, align 2, !alias.scope !5, !noalias !2
  %117 = getelementptr i16, i16* %110, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %118, align 2, !alias.scope !5, !noalias !2
  %119 = or i64 %96, 32
  %120 = getelementptr i16, i16* %45, i64 %119
  %121 = getelementptr i16, i16* %72, i64 %119
  %122 = bitcast i16* %120 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !2
  %124 = getelementptr i16, i16* %120, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2, !alias.scope !2
  %127 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %127, align 2, !alias.scope !5, !noalias !2
  %128 = getelementptr i16, i16* %121, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %129, align 2, !alias.scope !5, !noalias !2
  %130 = or i64 %96, 48
  %131 = getelementptr i16, i16* %45, i64 %130
  %132 = getelementptr i16, i16* %72, i64 %130
  %133 = bitcast i16* %131 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !2
  %135 = getelementptr i16, i16* %131, i64 8
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 2, !alias.scope !2
  %138 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %138, align 2, !alias.scope !5, !noalias !2
  %139 = getelementptr i16, i16* %132, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %140, align 2, !alias.scope !5, !noalias !2
  %141 = add i64 %96, 64
  %142 = add i64 %97, -4
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %95, !llvm.loop !7

144:                                              ; preds = %95, %83
  %145 = phi i64 [ 0, %83 ], [ %141, %95 ]
  %146 = icmp eq i64 %91, 0
  br i1 %146, label %163, label %147

147:                                              ; preds = %144, %147
  %148 = phi i64 [ %160, %147 ], [ %145, %144 ]
  %149 = phi i64 [ %161, %147 ], [ %91, %144 ]
  %150 = getelementptr i16, i16* %45, i64 %148
  %151 = getelementptr i16, i16* %72, i64 %148
  %152 = bitcast i16* %150 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2, !alias.scope !2
  %154 = getelementptr i16, i16* %150, i64 8
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2, !alias.scope !2
  %157 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %157, align 2, !alias.scope !5, !noalias !2
  %158 = getelementptr i16, i16* %151, i64 8
  %159 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %159, align 2, !alias.scope !5, !noalias !2
  %160 = add i64 %148, 16
  %161 = add i64 %149, -1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %147, !llvm.loop !9

163:                                              ; preds = %147, %144
  %164 = icmp eq i64 %74, %84
  br i1 %164, label %218, label %165

165:                                              ; preds = %163, %76, %71
  %166 = phi i64 [ %73, %76 ], [ %73, %71 ], [ %85, %163 ]
  %167 = phi i16* [ %45, %76 ], [ %45, %71 ], [ %86, %163 ]
  %168 = phi i16* [ %72, %76 ], [ %72, %71 ], [ %87, %163 ]
  %169 = add i64 %166, -1
  %170 = and i64 %166, 7
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %183, label %172

172:                                              ; preds = %165, %172
  %173 = phi i64 [ %178, %172 ], [ %166, %165 ]
  %174 = phi i16* [ %180, %172 ], [ %167, %165 ]
  %175 = phi i16* [ %179, %172 ], [ %168, %165 ]
  %176 = phi i64 [ %181, %172 ], [ %170, %165 ]
  %177 = load i16, i16* %174, align 2
  store i16 %177, i16* %175, align 2
  %178 = add i64 %173, -1
  %179 = getelementptr inbounds i16, i16* %175, i64 1
  %180 = getelementptr inbounds i16, i16* %174, i64 1
  %181 = add i64 %176, -1
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %183, label %172, !llvm.loop !11

183:                                              ; preds = %172, %165
  %184 = phi i64 [ %166, %165 ], [ %178, %172 ]
  %185 = phi i16* [ %167, %165 ], [ %180, %172 ]
  %186 = phi i16* [ %168, %165 ], [ %179, %172 ]
  %187 = icmp ult i64 %169, 7
  br i1 %187, label %218, label %188

188:                                              ; preds = %183, %188
  %189 = phi i64 [ %214, %188 ], [ %184, %183 ]
  %190 = phi i16* [ %216, %188 ], [ %185, %183 ]
  %191 = phi i16* [ %215, %188 ], [ %186, %183 ]
  %192 = load i16, i16* %190, align 2
  store i16 %192, i16* %191, align 2
  %193 = getelementptr inbounds i16, i16* %191, i64 1
  %194 = getelementptr inbounds i16, i16* %190, i64 1
  %195 = load i16, i16* %194, align 2
  store i16 %195, i16* %193, align 2
  %196 = getelementptr inbounds i16, i16* %191, i64 2
  %197 = getelementptr inbounds i16, i16* %190, i64 2
  %198 = load i16, i16* %197, align 2
  store i16 %198, i16* %196, align 2
  %199 = getelementptr inbounds i16, i16* %191, i64 3
  %200 = getelementptr inbounds i16, i16* %190, i64 3
  %201 = load i16, i16* %200, align 2
  store i16 %201, i16* %199, align 2
  %202 = getelementptr inbounds i16, i16* %191, i64 4
  %203 = getelementptr inbounds i16, i16* %190, i64 4
  %204 = load i16, i16* %203, align 2
  store i16 %204, i16* %202, align 2
  %205 = getelementptr inbounds i16, i16* %191, i64 5
  %206 = getelementptr inbounds i16, i16* %190, i64 5
  %207 = load i16, i16* %206, align 2
  store i16 %207, i16* %205, align 2
  %208 = getelementptr inbounds i16, i16* %191, i64 6
  %209 = getelementptr inbounds i16, i16* %190, i64 6
  %210 = load i16, i16* %209, align 2
  store i16 %210, i16* %208, align 2
  %211 = getelementptr inbounds i16, i16* %191, i64 7
  %212 = getelementptr inbounds i16, i16* %190, i64 7
  %213 = load i16, i16* %212, align 2
  store i16 %213, i16* %211, align 2
  %214 = add i64 %189, -8
  %215 = getelementptr inbounds i16, i16* %191, i64 8
  %216 = getelementptr inbounds i16, i16* %190, i64 8
  %217 = icmp eq i64 %214, 0
  br i1 %217, label %218, label %188, !llvm.loop !12

218:                                              ; preds = %183, %188, %163, %40
  %219 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 3
  %220 = bitcast %"class.std::__1::vector"* %219 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %220, i8 0, i64 24, i1 false) #8
  %221 = bitcast %"class.std::__1::vector"* %4 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = bitcast %"class.std::__1::vector"* %219 to i64*
  store i64 %222, i64* %223, align 8
  %224 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %225 = bitcast i8** %224 to i64*
  %226 = load i64, i64* %225, align 8
  %227 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 3, i32 0, i32 1
  %228 = bitcast i8** %227 to i64*
  store i64 %226, i64* %228, align 8
  %229 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %230 = bitcast i8** %229 to i64*
  %231 = load i64, i64* %230, align 8
  %232 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %233 = bitcast i8** %232 to i64*
  store i64 %231, i64* %233, align 8
  %234 = bitcast %"class.std::__1::vector"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %234, i8 0, i64 24, i1 false) #8
  %235 = load i64, i64* %14, align 8
  %236 = load i64, i64* %9, align 8
  %237 = sub i64 %235, %236
  %238 = trunc i64 %237 to i32
  tail call void @_ZN4base23UmaHistogramCounts10000EPKci(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 %238) #8
  ret void
}

declare void @_ZN4base23UmaHistogramCounts10000EPKci(i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8payments35SecurePaymentConfirmationInstrumentD2Ev(%"struct.payments::SecurePaymentConfirmationInstrument"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  tail call void @_ZdlPv(i8* nonnull %3) #10
  br label %9

9:                                                ; preds = %1, %5
  %10 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 2
  %11 = bitcast %"class.std::__1::basic_string.6"* %10 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %11, i64 0, i32 1, i32 1
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %9
  %16 = bitcast %"class.std::__1::basic_string.6"* %10 to i8**
  %17 = load i8*, i8** %16, align 8
  tail call void @_ZdlPv(i8* %17) #10
  br label %18

18:                                               ; preds = %9, %15
  %19 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 1
  %20 = bitcast %"class.std::__1::basic_string"* %19 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  tail call void @_ZdlPv(i8* %26) #10
  br label %27

27:                                               ; preds = %18, %24
  %28 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %35, label %31

31:                                               ; preds = %27
  %32 = ptrtoint i8* %29 to i64
  %33 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 0, i32 0, i32 1
  %34 = bitcast i8** %33 to i64*
  store i64 %32, i64* %34, align 8
  tail call void @_ZdlPv(i8* nonnull %29) #10
  br label %35

35:                                               ; preds = %27, %31
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8payments35SecurePaymentConfirmationInstrument7IsValidEv(%"struct.payments::SecurePaymentConfirmationInstrument"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %3, %5
  br i1 %6, label %41, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 1
  %9 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  br label %18

16:                                               ; preds = %7
  %17 = zext i8 %11 to i64
  br label %18

18:                                               ; preds = %13, %16
  %19 = phi i64 [ %15, %13 ], [ %17, %16 ]
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %41, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 2
  %23 = bitcast %"class.std::__1::basic_string.6"* %22 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %23, i64 0, i32 1, i32 1
  %25 = load i8, i8* %24, align 1
  %26 = icmp slt i8 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  br label %32

30:                                               ; preds = %21
  %31 = zext i8 %25 to i64
  br label %32

32:                                               ; preds = %27, %30
  %33 = phi i64 [ %29, %27 ], [ %31, %30 ]
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %41, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 3, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %"struct.payments::SecurePaymentConfirmationInstrument", %"struct.payments::SecurePaymentConfirmationInstrument"* %0, i64 0, i32 3, i32 0, i32 1
  %39 = load i8*, i8** %38, align 8
  %40 = icmp ne i8* %37, %39
  br label %41

41:                                               ; preds = %35, %32, %18, %1
  %42 = phi i1 [ false, %32 ], [ false, %18 ], [ false, %1 ], [ %40, %35 ]
  ret i1 %42
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
