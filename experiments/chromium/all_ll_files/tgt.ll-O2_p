; ModuleID = '../../third_party/pdfium/third_party/libopenjpeg20/tgt.c'
source_filename = "../../third_party/pdfium/third_party/libopenjpeg20/tgt.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.opj_tgt_tree = type { i32, i32, i32, %struct.opj_tgt_node*, i32 }
%struct.opj_tgt_node = type { %struct.opj_tgt_node*, i32, i32, i32 }
%struct.opj_event_mgr = type { i8*, i8*, i8*, void (i8*, i8*)*, void (i8*, i8*)*, void (i8*, i8*)* }
%struct.opj_bio = type { i8*, i8*, i8*, i32, i32 }

@.str = private unnamed_addr constant [38 x i8] c"Not enough memory to create Tag-tree\0A\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"Not enough memory to create Tag-tree nodes\0A\00", align 1
@.str.2 = private unnamed_addr constant [48 x i8] c"Not enough memory to reinitialize the tag tree\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_tgt_tree* @opj_tgt_create(i32, i32, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %4 = alloca [32 x i32], align 16
  %5 = alloca [32 x i32], align 16
  %6 = bitcast [32 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %6) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 128, i1 false)
  %7 = bitcast [32 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 128, i1 false)
  %8 = tail call i8* @opj_calloc(i64 1, i64 32) #4
  %9 = bitcast i8* %8 to %struct.opj_tgt_tree*
  %10 = icmp eq i8* %8, null
  br i1 %10, label %11, label %13

11:                                               ; preds = %3
  %12 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0)) #4
  br label %135

13:                                               ; preds = %3
  %14 = bitcast i8* %8 to i32*
  store i32 %0, i32* %14, align 8
  %15 = getelementptr inbounds i8, i8* %8, i64 4
  %16 = bitcast i8* %15 to i32*
  store i32 %1, i32* %16, align 4
  %17 = getelementptr inbounds [32 x i32], [32 x i32]* %4, i64 0, i64 0
  store i32 %0, i32* %17, align 16
  %18 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 0
  store i32 %1, i32* %18, align 16
  %19 = getelementptr inbounds i8, i8* %8, i64 8
  %20 = bitcast i8* %19 to i32*
  store i32 0, i32* %20, align 8
  br label %21

21:                                               ; preds = %21, %13
  %22 = phi i32 [ %1, %13 ], [ %33, %21 ]
  %23 = phi i32 [ %0, %13 ], [ %28, %21 ]
  %24 = phi i32 [ 0, %13 ], [ %35, %21 ]
  %25 = phi i32 [ 0, %13 ], [ %29, %21 ]
  %26 = mul nsw i32 %22, %23
  %27 = add nsw i32 %23, 1
  %28 = sdiv i32 %27, 2
  %29 = add i32 %25, 1
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [32 x i32], [32 x i32]* %4, i64 0, i64 %30
  store i32 %28, i32* %31, align 4
  %32 = add nsw i32 %22, 1
  %33 = sdiv i32 %32, 2
  %34 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %30
  store i32 %33, i32* %34, align 4
  %35 = add i32 %24, %26
  %36 = icmp ugt i32 %26, 1
  br i1 %36, label %21, label %37

37:                                               ; preds = %21
  %38 = zext i32 %25 to i64
  store i32 %35, i32* %20, align 8
  %39 = icmp eq i32 %35, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  tail call void @opj_free(i8* nonnull %8) #4
  br label %135

41:                                               ; preds = %37
  %42 = zext i32 %35 to i64
  %43 = tail call i8* @opj_calloc(i64 %42, i64 24) #4
  %44 = getelementptr inbounds i8, i8* %8, i64 16
  %45 = bitcast i8* %44 to i8**
  store i8* %43, i8** %45, align 8
  %46 = icmp eq i8* %43, null
  %47 = bitcast i8* %43 to %struct.opj_tgt_node*
  br i1 %46, label %48, label %50

48:                                               ; preds = %41
  %49 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0)) #4
  tail call void @opj_free(i8* nonnull %8) #4
  br label %135

50:                                               ; preds = %41
  %51 = bitcast i8* %44 to %struct.opj_tgt_node**
  %52 = load i32, i32* %20, align 8
  %53 = mul i32 %52, 24
  %54 = getelementptr inbounds i8, i8* %8, i64 24
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 8
  %56 = load i32, i32* %14, align 8
  %57 = load i32, i32* %16, align 4
  %58 = mul i32 %57, %56
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %47, i64 %59
  %61 = icmp eq i32 %25, 0
  br i1 %61, label %118, label %62

62:                                               ; preds = %50, %112
  %63 = phi i64 [ %116, %112 ], [ 0, %50 ]
  %64 = phi %struct.opj_tgt_node* [ %115, %112 ], [ %60, %50 ]
  %65 = phi %struct.opj_tgt_node* [ %114, %112 ], [ %60, %50 ]
  %66 = phi %struct.opj_tgt_node* [ %113, %112 ], [ %47, %50 ]
  %67 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %63
  %68 = load i32, i32* %67, align 4
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %70, label %112

70:                                               ; preds = %62
  %71 = getelementptr inbounds [32 x i32], [32 x i32]* %4, i64 0, i64 %63
  br label %72

72:                                               ; preds = %70, %107
  %73 = phi i32 [ 0, %70 ], [ %110, %107 ]
  %74 = phi %struct.opj_tgt_node* [ %64, %70 ], [ %109, %107 ]
  %75 = phi %struct.opj_tgt_node* [ %65, %70 ], [ %108, %107 ]
  %76 = phi %struct.opj_tgt_node* [ %66, %70 ], [ %95, %107 ]
  %77 = load i32, i32* %71, align 4
  %78 = icmp sgt i32 %77, 0
  br i1 %78, label %79, label %94

79:                                               ; preds = %72, %89
  %80 = phi i32 [ %85, %89 ], [ %77, %72 ]
  %81 = phi %struct.opj_tgt_node* [ %92, %89 ], [ %75, %72 ]
  %82 = phi %struct.opj_tgt_node* [ %91, %89 ], [ %76, %72 ]
  %83 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %82, i64 0, i32 0
  store %struct.opj_tgt_node* %81, %struct.opj_tgt_node** %83, align 8
  %84 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %82, i64 1
  %85 = add nsw i32 %80, -2
  %86 = icmp sgt i32 %85, -1
  br i1 %86, label %89, label %87

87:                                               ; preds = %79
  %88 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %81, i64 1
  br label %94

89:                                               ; preds = %79
  %90 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %84, i64 0, i32 0
  store %struct.opj_tgt_node* %81, %struct.opj_tgt_node** %90, align 8
  %91 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %82, i64 2
  %92 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %81, i64 1
  %93 = icmp eq i32 %85, 0
  br i1 %93, label %94, label %79

94:                                               ; preds = %89, %87, %72
  %95 = phi %struct.opj_tgt_node* [ %76, %72 ], [ %84, %87 ], [ %91, %89 ]
  %96 = phi %struct.opj_tgt_node* [ %75, %72 ], [ %88, %87 ], [ %92, %89 ]
  %97 = and i32 %73, 1
  %98 = icmp ne i32 %97, 0
  %99 = load i32, i32* %67, align 4
  %100 = add nsw i32 %99, -1
  %101 = icmp eq i32 %73, %100
  %102 = or i1 %98, %101
  br i1 %102, label %107, label %103

103:                                              ; preds = %94
  %104 = load i32, i32* %71, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %74, i64 %105
  br label %107

107:                                              ; preds = %94, %103
  %108 = phi %struct.opj_tgt_node* [ %74, %103 ], [ %96, %94 ]
  %109 = phi %struct.opj_tgt_node* [ %106, %103 ], [ %96, %94 ]
  %110 = add nuw nsw i32 %73, 1
  %111 = icmp slt i32 %110, %99
  br i1 %111, label %72, label %112

112:                                              ; preds = %107, %62
  %113 = phi %struct.opj_tgt_node* [ %66, %62 ], [ %95, %107 ]
  %114 = phi %struct.opj_tgt_node* [ %65, %62 ], [ %108, %107 ]
  %115 = phi %struct.opj_tgt_node* [ %64, %62 ], [ %109, %107 ]
  %116 = add nuw nsw i64 %63, 1
  %117 = icmp eq i64 %116, %38
  br i1 %117, label %118, label %62

118:                                              ; preds = %112, %50
  %119 = phi %struct.opj_tgt_node* [ %47, %50 ], [ %113, %112 ]
  %120 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %119, i64 0, i32 0
  store %struct.opj_tgt_node* null, %struct.opj_tgt_node** %120, align 8
  %121 = load i32, i32* %20, align 8
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %135, label %123

123:                                              ; preds = %118
  %124 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %51, align 8
  br label %125

125:                                              ; preds = %125, %123
  %126 = phi %struct.opj_tgt_node* [ %131, %125 ], [ %124, %123 ]
  %127 = phi i32 [ %132, %125 ], [ 0, %123 ]
  %128 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %126, i64 0, i32 1
  store i32 999, i32* %128, align 8
  %129 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %126, i64 0, i32 2
  store i32 0, i32* %129, align 4
  %130 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %126, i64 0, i32 3
  store i32 0, i32* %130, align 8
  %131 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %126, i64 1
  %132 = add nuw i32 %127, 1
  %133 = load i32, i32* %20, align 8
  %134 = icmp ult i32 %132, %133
  br i1 %134, label %125, label %135

135:                                              ; preds = %125, %118, %48, %40, %11
  %136 = phi %struct.opj_tgt_tree* [ null, %40 ], [ null, %48 ], [ null, %11 ], [ %9, %118 ], [ %9, %125 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %7) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %6) #4
  ret %struct.opj_tgt_tree* %136
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i8* @opj_calloc(i64, i64) local_unnamed_addr #2

declare i32 @opj_event_msg(%struct.opj_event_mgr*, i32, i8*, ...) local_unnamed_addr #2

declare void @opj_free(i8*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_tgt_reset(%struct.opj_tgt_tree* readonly) local_unnamed_addr #3 {
  %2 = icmp eq %struct.opj_tgt_tree* %0, null
  br i1 %2, label %20, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %20, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 3
  %9 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %8, align 8
  br label %10

10:                                               ; preds = %7, %10
  %11 = phi %struct.opj_tgt_node* [ %16, %10 ], [ %9, %7 ]
  %12 = phi i32 [ %17, %10 ], [ 0, %7 ]
  %13 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %11, i64 0, i32 1
  store i32 999, i32* %13, align 8
  %14 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %11, i64 0, i32 2
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %11, i64 0, i32 3
  store i32 0, i32* %15, align 8
  %16 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %11, i64 1
  %17 = add nuw i32 %12, 1
  %18 = load i32, i32* %4, align 8
  %19 = icmp ult i32 %17, %18
  br i1 %19, label %10, label %20

20:                                               ; preds = %10, %3, %1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_tgt_tree* @opj_tgt_init(%struct.opj_tgt_tree*, i32, i32, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %5 = alloca [32 x i32], align 16
  %6 = alloca [32 x i32], align 16
  %7 = bitcast [32 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 128, i1 false)
  %8 = bitcast [32 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 128, i1 false)
  %9 = icmp eq %struct.opj_tgt_tree* %0, null
  br i1 %9, label %163, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, %1
  br i1 %13, label %14, label %18

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, %2
  br i1 %17, label %146, label %18

18:                                               ; preds = %14, %10
  store i32 %1, i32* %11, align 8
  %19 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 1
  store i32 %2, i32* %19, align 4
  %20 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 0
  store i32 %1, i32* %20, align 16
  %21 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 0
  store i32 %2, i32* %21, align 16
  %22 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 2
  store i32 0, i32* %22, align 8
  br label %23

23:                                               ; preds = %23, %18
  %24 = phi i32 [ %2, %18 ], [ %35, %23 ]
  %25 = phi i32 [ %1, %18 ], [ %30, %23 ]
  %26 = phi i32 [ 0, %18 ], [ %37, %23 ]
  %27 = phi i32 [ 0, %18 ], [ %31, %23 ]
  %28 = mul nsw i32 %24, %25
  %29 = add nsw i32 %25, 1
  %30 = sdiv i32 %29, 2
  %31 = add i32 %27, 1
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %32
  store i32 %30, i32* %33, align 4
  %34 = add nsw i32 %24, 1
  %35 = sdiv i32 %34, 2
  %36 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %32
  store i32 %35, i32* %36, align 4
  %37 = add i32 %26, %28
  %38 = icmp ugt i32 %28, 1
  br i1 %38, label %23, label %39

39:                                               ; preds = %23
  %40 = zext i32 %27 to i64
  store i32 %37, i32* %22, align 8
  %41 = icmp eq i32 %37, 0
  br i1 %41, label %42, label %50

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 3
  %44 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %43, align 8
  %45 = icmp eq %struct.opj_tgt_node* %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %42
  %47 = bitcast %struct.opj_tgt_node* %44 to i8*
  tail call void @opj_free(i8* nonnull %47) #4
  store %struct.opj_tgt_node* null, %struct.opj_tgt_node** %43, align 8
  br label %48

48:                                               ; preds = %42, %46
  %49 = bitcast %struct.opj_tgt_tree* %0 to i8*
  tail call void @opj_free(i8* nonnull %49) #4
  br label %163

50:                                               ; preds = %39
  %51 = mul i32 %37, 24
  %52 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 4
  %53 = load i32, i32* %52, align 8
  %54 = icmp ugt i32 %51, %53
  br i1 %54, label %55, label %78

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 3
  %57 = bitcast %struct.opj_tgt_node** %56 to i8**
  %58 = load i8*, i8** %57, align 8
  %59 = zext i32 %51 to i64
  %60 = tail call i8* @opj_realloc(i8* %58, i64 %59) #4
  %61 = icmp eq i8* %60, null
  br i1 %61, label %62, label %70

62:                                               ; preds = %55
  %63 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0)) #4
  %64 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %56, align 8
  %65 = icmp eq %struct.opj_tgt_node* %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %62
  %67 = bitcast %struct.opj_tgt_node* %64 to i8*
  tail call void @opj_free(i8* nonnull %67) #4
  store %struct.opj_tgt_node* null, %struct.opj_tgt_node** %56, align 8
  br label %68

68:                                               ; preds = %62, %66
  %69 = bitcast %struct.opj_tgt_tree* %0 to i8*
  tail call void @opj_free(i8* nonnull %69) #4
  br label %163

70:                                               ; preds = %55
  store i8* %60, i8** %57, align 8
  %71 = load i32, i32* %52, align 8
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %60, i64 %72
  %74 = sub i32 %51, %71
  %75 = zext i32 %74 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %73, i8 0, i64 %75, i1 false)
  store i32 %51, i32* %52, align 8
  %76 = load i32, i32* %11, align 8
  %77 = load i32, i32* %19, align 4
  br label %78

78:                                               ; preds = %70, %50
  %79 = phi i32 [ %77, %70 ], [ %2, %50 ]
  %80 = phi i32 [ %76, %70 ], [ %1, %50 ]
  %81 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 3
  %82 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %81, align 8
  %83 = mul i32 %79, %80
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %82, i64 %84
  %86 = icmp eq i32 %27, 0
  br i1 %86, label %143, label %87

87:                                               ; preds = %78, %137
  %88 = phi i64 [ %141, %137 ], [ 0, %78 ]
  %89 = phi %struct.opj_tgt_node* [ %140, %137 ], [ %85, %78 ]
  %90 = phi %struct.opj_tgt_node* [ %139, %137 ], [ %85, %78 ]
  %91 = phi %struct.opj_tgt_node* [ %138, %137 ], [ %82, %78 ]
  %92 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %88
  %93 = load i32, i32* %92, align 4
  %94 = icmp sgt i32 %93, 0
  br i1 %94, label %95, label %137

95:                                               ; preds = %87
  %96 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %88
  br label %97

97:                                               ; preds = %95, %132
  %98 = phi i32 [ 0, %95 ], [ %135, %132 ]
  %99 = phi %struct.opj_tgt_node* [ %89, %95 ], [ %134, %132 ]
  %100 = phi %struct.opj_tgt_node* [ %90, %95 ], [ %133, %132 ]
  %101 = phi %struct.opj_tgt_node* [ %91, %95 ], [ %120, %132 ]
  %102 = load i32, i32* %96, align 4
  %103 = icmp sgt i32 %102, 0
  br i1 %103, label %104, label %119

104:                                              ; preds = %97, %114
  %105 = phi i32 [ %110, %114 ], [ %102, %97 ]
  %106 = phi %struct.opj_tgt_node* [ %117, %114 ], [ %100, %97 ]
  %107 = phi %struct.opj_tgt_node* [ %116, %114 ], [ %101, %97 ]
  %108 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %107, i64 0, i32 0
  store %struct.opj_tgt_node* %106, %struct.opj_tgt_node** %108, align 8
  %109 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %107, i64 1
  %110 = add nsw i32 %105, -2
  %111 = icmp sgt i32 %110, -1
  br i1 %111, label %114, label %112

112:                                              ; preds = %104
  %113 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %106, i64 1
  br label %119

114:                                              ; preds = %104
  %115 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %109, i64 0, i32 0
  store %struct.opj_tgt_node* %106, %struct.opj_tgt_node** %115, align 8
  %116 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %107, i64 2
  %117 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %106, i64 1
  %118 = icmp eq i32 %110, 0
  br i1 %118, label %119, label %104

119:                                              ; preds = %114, %112, %97
  %120 = phi %struct.opj_tgt_node* [ %101, %97 ], [ %109, %112 ], [ %116, %114 ]
  %121 = phi %struct.opj_tgt_node* [ %100, %97 ], [ %113, %112 ], [ %117, %114 ]
  %122 = and i32 %98, 1
  %123 = icmp ne i32 %122, 0
  %124 = load i32, i32* %92, align 4
  %125 = add nsw i32 %124, -1
  %126 = icmp eq i32 %98, %125
  %127 = or i1 %123, %126
  br i1 %127, label %132, label %128

128:                                              ; preds = %119
  %129 = load i32, i32* %96, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %99, i64 %130
  br label %132

132:                                              ; preds = %119, %128
  %133 = phi %struct.opj_tgt_node* [ %99, %128 ], [ %121, %119 ]
  %134 = phi %struct.opj_tgt_node* [ %131, %128 ], [ %121, %119 ]
  %135 = add nuw nsw i32 %98, 1
  %136 = icmp slt i32 %135, %124
  br i1 %136, label %97, label %137

137:                                              ; preds = %132, %87
  %138 = phi %struct.opj_tgt_node* [ %91, %87 ], [ %120, %132 ]
  %139 = phi %struct.opj_tgt_node* [ %90, %87 ], [ %133, %132 ]
  %140 = phi %struct.opj_tgt_node* [ %89, %87 ], [ %134, %132 ]
  %141 = add nuw nsw i64 %88, 1
  %142 = icmp eq i64 %141, %40
  br i1 %142, label %143, label %87

143:                                              ; preds = %137, %78
  %144 = phi %struct.opj_tgt_node* [ %82, %78 ], [ %138, %137 ]
  %145 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %144, i64 0, i32 0
  store %struct.opj_tgt_node* null, %struct.opj_tgt_node** %145, align 8
  br label %146

146:                                              ; preds = %143, %14
  %147 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 2
  %148 = load i32, i32* %147, align 8
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %163, label %150

150:                                              ; preds = %146
  %151 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 3
  %152 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %151, align 8
  br label %153

153:                                              ; preds = %153, %150
  %154 = phi %struct.opj_tgt_node* [ %159, %153 ], [ %152, %150 ]
  %155 = phi i32 [ %160, %153 ], [ 0, %150 ]
  %156 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %154, i64 0, i32 1
  store i32 999, i32* %156, align 8
  %157 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %154, i64 0, i32 2
  store i32 0, i32* %157, align 4
  %158 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %154, i64 0, i32 3
  store i32 0, i32* %158, align 8
  %159 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %154, i64 1
  %160 = add nuw i32 %155, 1
  %161 = load i32, i32* %147, align 8
  %162 = icmp ult i32 %160, %161
  br i1 %162, label %153, label %163

163:                                              ; preds = %153, %146, %68, %4, %48
  %164 = phi %struct.opj_tgt_tree* [ null, %48 ], [ null, %68 ], [ null, %4 ], [ %0, %146 ], [ %0, %153 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %7) #4
  ret %struct.opj_tgt_tree* %164
}

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_tgt_destroy(%struct.opj_tgt_tree*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.opj_tgt_tree* %0, null
  br i1 %2, label %11, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 3
  %5 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %4, align 8
  %6 = icmp eq %struct.opj_tgt_node* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = bitcast %struct.opj_tgt_node* %5 to i8*
  tail call void @opj_free(i8* nonnull %8) #4
  store %struct.opj_tgt_node* null, %struct.opj_tgt_node** %4, align 8
  br label %9

9:                                                ; preds = %3, %7
  %10 = bitcast %struct.opj_tgt_tree* %0 to i8*
  tail call void @opj_free(i8* nonnull %10) #4
  br label %11

11:                                               ; preds = %1, %9
  ret void
}

declare i8* @opj_realloc(i8*, i64) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_tgt_setvalue(%struct.opj_tgt_tree* nocapture readonly, i32, i32) local_unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %0, i64 0, i32 3
  %5 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %4, align 8
  %6 = zext i32 %1 to i64
  %7 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %5, i64 %6
  %8 = icmp eq %struct.opj_tgt_node* %7, null
  br i1 %8, label %18, label %9

9:                                                ; preds = %3, %14
  %10 = phi %struct.opj_tgt_node* [ %16, %14 ], [ %7, %3 ]
  %11 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %10, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = icmp sgt i32 %12, %2
  br i1 %13, label %14, label %18

14:                                               ; preds = %9
  store i32 %2, i32* %11, align 8
  %15 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %10, i64 0, i32 0
  %16 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %15, align 8
  %17 = icmp eq %struct.opj_tgt_node* %16, null
  br i1 %17, label %18, label %9

18:                                               ; preds = %9, %14, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_tgt_encode(%struct.opj_bio*, %struct.opj_tgt_tree* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [31 x %struct.opj_tgt_node*], align 16
  %6 = bitcast [31 x %struct.opj_tgt_node*]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 248, i8* nonnull %6) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 248, i1 false)
  %7 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %1, i64 0, i32 3
  %8 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %7, align 8
  %9 = zext i32 %2 to i64
  %10 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %8, i64 %9
  %11 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %10, i64 0, i32 0
  %12 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %11, align 8
  %13 = icmp eq %struct.opj_tgt_node* %12, null
  br i1 %13, label %23, label %14

14:                                               ; preds = %4, %14
  %15 = phi %struct.opj_tgt_node* [ %21, %14 ], [ %12, %4 ]
  %16 = phi %struct.opj_tgt_node* [ %15, %14 ], [ %10, %4 ]
  %17 = phi i64 [ %19, %14 ], [ 0, %4 ]
  %18 = getelementptr inbounds [31 x %struct.opj_tgt_node*], [31 x %struct.opj_tgt_node*]* %5, i64 0, i64 %17
  %19 = add nuw nsw i64 %17, 1
  store %struct.opj_tgt_node* %16, %struct.opj_tgt_node** %18, align 8
  %20 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %15, i64 0, i32 0
  %21 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %20, align 8
  %22 = icmp eq %struct.opj_tgt_node* %21, null
  br i1 %22, label %23, label %14

23:                                               ; preds = %14, %4
  %24 = phi i64 [ 0, %4 ], [ %19, %14 ]
  %25 = phi %struct.opj_tgt_node* [ %10, %4 ], [ %15, %14 ]
  br label %26

26:                                               ; preds = %23, %54
  %27 = phi i64 [ %55, %54 ], [ %24, %23 ]
  %28 = phi %struct.opj_tgt_node* [ %57, %54 ], [ %25, %23 ]
  %29 = phi i32 [ %52, %54 ], [ 0, %23 ]
  %30 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %28, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = icmp sgt i32 %29, %31
  br i1 %32, label %33, label %34

33:                                               ; preds = %26
  store i32 %29, i32* %30, align 4
  br label %34

34:                                               ; preds = %26, %33
  %35 = phi i32 [ %29, %33 ], [ %31, %26 ]
  %36 = icmp slt i32 %35, %3
  br i1 %36, label %37, label %51

37:                                               ; preds = %34
  %38 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %28, i64 0, i32 1
  br label %39

39:                                               ; preds = %37, %48
  %40 = phi i32 [ %35, %37 ], [ %49, %48 ]
  %41 = load i32, i32* %38, align 8
  %42 = icmp slt i32 %40, %41
  br i1 %42, label %48, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %28, i64 0, i32 3
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %43
  tail call void @opj_bio_write(%struct.opj_bio* %0, i32 1, i32 1) #4
  store i32 1, i32* %44, align 8
  br label %51

48:                                               ; preds = %39
  tail call void @opj_bio_write(%struct.opj_bio* %0, i32 0, i32 1) #4
  %49 = add nsw i32 %40, 1
  %50 = icmp slt i32 %49, %3
  br i1 %50, label %39, label %51

51:                                               ; preds = %48, %34, %43, %47
  %52 = phi i32 [ %40, %43 ], [ %40, %47 ], [ %35, %34 ], [ %49, %48 ]
  store i32 %52, i32* %30, align 4
  %53 = icmp eq i64 %27, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %51
  %55 = add nsw i64 %27, -1
  %56 = getelementptr inbounds [31 x %struct.opj_tgt_node*], [31 x %struct.opj_tgt_node*]* %5, i64 0, i64 %55
  %57 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %56, align 8
  br label %26

58:                                               ; preds = %51
  call void @llvm.lifetime.end.p0i8(i64 248, i8* nonnull %6) #4
  ret void
}

declare void @opj_bio_write(%struct.opj_bio*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_tgt_decode(%struct.opj_bio*, %struct.opj_tgt_tree* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [31 x %struct.opj_tgt_node*], align 16
  %6 = bitcast [31 x %struct.opj_tgt_node*]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 248, i8* nonnull %6) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 248, i1 false)
  %7 = getelementptr inbounds %struct.opj_tgt_tree, %struct.opj_tgt_tree* %1, i64 0, i32 3
  %8 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %7, align 8
  %9 = zext i32 %2 to i64
  %10 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %8, i64 %9
  %11 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %10, i64 0, i32 0
  %12 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %11, align 8
  %13 = icmp eq %struct.opj_tgt_node* %12, null
  br i1 %13, label %23, label %14

14:                                               ; preds = %4, %14
  %15 = phi %struct.opj_tgt_node* [ %21, %14 ], [ %12, %4 ]
  %16 = phi %struct.opj_tgt_node* [ %15, %14 ], [ %10, %4 ]
  %17 = phi i64 [ %19, %14 ], [ 0, %4 ]
  %18 = getelementptr inbounds [31 x %struct.opj_tgt_node*], [31 x %struct.opj_tgt_node*]* %5, i64 0, i64 %17
  %19 = add nuw nsw i64 %17, 1
  store %struct.opj_tgt_node* %16, %struct.opj_tgt_node** %18, align 8
  %20 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %15, i64 0, i32 0
  %21 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %20, align 8
  %22 = icmp eq %struct.opj_tgt_node* %21, null
  br i1 %22, label %23, label %14

23:                                               ; preds = %14, %4
  %24 = phi i64 [ 0, %4 ], [ %19, %14 ]
  %25 = phi %struct.opj_tgt_node* [ %10, %4 ], [ %15, %14 ]
  br label %26

26:                                               ; preds = %23, %54
  %27 = phi i64 [ %55, %54 ], [ %24, %23 ]
  %28 = phi %struct.opj_tgt_node* [ %57, %54 ], [ %25, %23 ]
  %29 = phi i32 [ %52, %54 ], [ 0, %23 ]
  %30 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %28, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = icmp sgt i32 %29, %31
  br i1 %32, label %33, label %34

33:                                               ; preds = %26
  store i32 %29, i32* %30, align 4
  br label %34

34:                                               ; preds = %26, %33
  %35 = phi i32 [ %29, %33 ], [ %31, %26 ]
  %36 = getelementptr inbounds %struct.opj_tgt_node, %struct.opj_tgt_node* %28, i64 0, i32 1
  %37 = icmp slt i32 %35, %3
  br i1 %37, label %38, label %51

38:                                               ; preds = %34, %48
  %39 = phi i32 [ %49, %48 ], [ %35, %34 ]
  %40 = load i32, i32* %36, align 8
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %42, label %51

42:                                               ; preds = %38
  %43 = tail call i32 @opj_bio_read(%struct.opj_bio* %0, i32 1) #4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %46, label %45

45:                                               ; preds = %42
  store i32 %39, i32* %36, align 8
  br label %48

46:                                               ; preds = %42
  %47 = add nsw i32 %39, 1
  br label %48

48:                                               ; preds = %46, %45
  %49 = phi i32 [ %39, %45 ], [ %47, %46 ]
  %50 = icmp slt i32 %49, %3
  br i1 %50, label %38, label %51

51:                                               ; preds = %38, %48, %34
  %52 = phi i32 [ %35, %34 ], [ %49, %48 ], [ %39, %38 ]
  store i32 %52, i32* %30, align 4
  %53 = icmp eq i64 %27, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %51
  %55 = add nsw i64 %27, -1
  %56 = getelementptr inbounds [31 x %struct.opj_tgt_node*], [31 x %struct.opj_tgt_node*]* %5, i64 0, i64 %55
  %57 = load %struct.opj_tgt_node*, %struct.opj_tgt_node** %56, align 8
  br label %26

58:                                               ; preds = %51
  %59 = load i32, i32* %36, align 8
  %60 = icmp slt i32 %59, %3
  %61 = zext i1 %60 to i32
  call void @llvm.lifetime.end.p0i8(i64 248, i8* nonnull %6) #4
  ret i32 %61
}

declare i32 @opj_bio_read(%struct.opj_bio*, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
