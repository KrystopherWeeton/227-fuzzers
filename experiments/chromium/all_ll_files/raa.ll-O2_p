; ModuleID = '../../third_party/nasm/nasmlib/raa.c'
source_filename = "../../third_party/nasm/nasmlib/raa.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.RAA = type { i64, i32, i32, %union.RAA_UNION }
%union.RAA_UNION = type { %struct.RAA_LEAF }
%struct.RAA_LEAF = type { [2048 x %union.intorptr] }
%union.intorptr = type { i64 }

@.str = private unnamed_addr constant [37 x i8] c"../../third_party/nasm/nasmlib/raa.c\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"posn <= (~(raaindex)0 >> 1)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @raa_free(%struct.RAA*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.RAA* %0, null
  br i1 %2, label %19, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.RAA, %struct.RAA* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %17, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.RAA, %struct.RAA* %0, i64 0, i32 3
  %9 = bitcast %union.RAA_UNION* %8 to %struct.RAA**
  br label %10

10:                                               ; preds = %10, %7
  %11 = phi i64 [ 0, %7 ], [ %15, %10 ]
  %12 = phi %struct.RAA** [ %9, %7 ], [ %13, %10 ]
  %13 = getelementptr inbounds %struct.RAA*, %struct.RAA** %12, i64 1
  %14 = load %struct.RAA*, %struct.RAA** %12, align 8
  tail call void @raa_free(%struct.RAA* %14)
  %15 = add nuw nsw i64 %11, 1
  %16 = icmp eq i64 %15, 2048
  br i1 %16, label %17, label %10

17:                                               ; preds = %10, %3
  %18 = bitcast %struct.RAA* %0 to i8*
  tail call void @nasm_free(i8* nonnull %18) #4
  br label %19

19:                                               ; preds = %1, %17
  ret void
}

declare void @nasm_free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @raa_read(%struct.RAA* readonly, i64) local_unnamed_addr #0 {
  %3 = icmp slt i64 %1, 0
  br i1 %3, label %4, label %5, !prof !2

4:                                                ; preds = %2
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i32 119, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0)) #5
  unreachable

5:                                                ; preds = %2
  %6 = icmp eq %struct.RAA* %0, null
  br i1 %6, label %34, label %7, !prof !2

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct.RAA, %struct.RAA* %0, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %34, label %11, !prof !2

11:                                               ; preds = %7, %16
  %12 = phi %struct.RAA* [ %25, %16 ], [ %0, %7 ]
  %13 = getelementptr inbounds %struct.RAA, %struct.RAA* %12, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %27, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.RAA, %struct.RAA* %12, i64 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = lshr i64 %1, %19
  %21 = and i64 %20, 2047
  %22 = getelementptr inbounds %struct.RAA, %struct.RAA* %12, i64 0, i32 3
  %23 = bitcast %union.RAA_UNION* %22 to [2048 x %struct.RAA*]*
  %24 = getelementptr inbounds [2048 x %struct.RAA*], [2048 x %struct.RAA*]* %23, i64 0, i64 %21
  %25 = load %struct.RAA*, %struct.RAA** %24, align 8
  %26 = icmp eq %struct.RAA* %25, null
  br i1 %26, label %34, label %11

27:                                               ; preds = %11
  %28 = and i64 %1, 2047
  %29 = getelementptr inbounds %struct.RAA, %struct.RAA* %12, i64 0, i32 3, i32 0, i32 0, i64 %28
  %30 = icmp eq %union.intorptr* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %union.intorptr, %union.intorptr* %29, i64 0, i32 0
  %33 = load i64, i64* %32, align 8
  br label %34

34:                                               ; preds = %16, %5, %7, %27, %31
  %35 = phi i64 [ %33, %31 ], [ 0, %27 ], [ 0, %7 ], [ 0, %5 ], [ 0, %16 ]
  ret i64 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @raa_read_ptr(%struct.RAA* readonly, i64) local_unnamed_addr #0 {
  %3 = icmp slt i64 %1, 0
  br i1 %3, label %4, label %5, !prof !2

4:                                                ; preds = %2
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i32 119, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0)) #5
  unreachable

5:                                                ; preds = %2
  %6 = icmp eq %struct.RAA* %0, null
  br i1 %6, label %34, label %7, !prof !2

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct.RAA, %struct.RAA* %0, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %34, label %11, !prof !2

11:                                               ; preds = %7, %16
  %12 = phi %struct.RAA* [ %25, %16 ], [ %0, %7 ]
  %13 = getelementptr inbounds %struct.RAA, %struct.RAA* %12, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %27, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.RAA, %struct.RAA* %12, i64 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = lshr i64 %1, %19
  %21 = and i64 %20, 2047
  %22 = getelementptr inbounds %struct.RAA, %struct.RAA* %12, i64 0, i32 3
  %23 = bitcast %union.RAA_UNION* %22 to [2048 x %struct.RAA*]*
  %24 = getelementptr inbounds [2048 x %struct.RAA*], [2048 x %struct.RAA*]* %23, i64 0, i64 %21
  %25 = load %struct.RAA*, %struct.RAA** %24, align 8
  %26 = icmp eq %struct.RAA* %25, null
  br i1 %26, label %34, label %11

27:                                               ; preds = %11
  %28 = and i64 %1, 2047
  %29 = getelementptr inbounds %struct.RAA, %struct.RAA* %12, i64 0, i32 3, i32 0, i32 0, i64 %28
  %30 = icmp eq %union.intorptr* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %27
  %32 = bitcast %union.intorptr* %29 to i8**
  %33 = load i8*, i8** %32, align 8
  br label %34

34:                                               ; preds = %16, %5, %7, %27, %31
  %35 = phi i8* [ %33, %31 ], [ null, %27 ], [ null, %7 ], [ null, %5 ], [ null, %16 ]
  ret i8* %35
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.RAA* @raa_write(%struct.RAA*, i64, i64) local_unnamed_addr #0 {
  %4 = tail call fastcc %struct.RAA* @real_raa_write(%struct.RAA* %0, i64 %1, i64 %2)
  ret %struct.RAA* %4
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct.RAA* @real_raa_write(%struct.RAA*, i64, i64) unnamed_addr #0 {
  %4 = icmp slt i64 %1, 0
  br i1 %4, label %5, label %6, !prof !2

5:                                                ; preds = %3
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i32 155, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0)) #5
  unreachable

6:                                                ; preds = %3
  %7 = icmp eq %struct.RAA* %0, null
  br i1 %7, label %12, label %8, !prof !2

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.RAA, %struct.RAA* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %28, label %51, !prof !2

12:                                               ; preds = %6
  %13 = tail call i64 asm "bsrq $1,$0", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i64 %1, i64 0) #6, !srcloc !3
  %14 = trunc i64 %13 to i32
  %15 = udiv i32 %14, 11
  %16 = tail call noalias i8* @nasm_zalloc(i64 16400) #7
  %17 = bitcast i8* %16 to %struct.RAA*
  %18 = mul i32 %15, 11
  %19 = getelementptr inbounds i8, i8* %16, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 4
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  store i32 %15, i32* %22, align 8
  %23 = zext i32 %18 to i64
  %24 = shl i64 2048, %23
  %25 = add i64 %24, -1
  %26 = or i64 %25, %1
  %27 = bitcast i8* %16 to i64*
  store i64 %26, i64* %27, align 8
  br label %51

28:                                               ; preds = %8, %28
  %29 = phi i64 [ %44, %28 ], [ %10, %8 ]
  %30 = phi %struct.RAA* [ %35, %28 ], [ %0, %8 ]
  %31 = getelementptr inbounds %struct.RAA, %struct.RAA* %30, i64 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = add i32 %32, 1
  %34 = tail call noalias i8* @nasm_zalloc(i64 16400) #7
  %35 = bitcast i8* %34 to %struct.RAA*
  %36 = mul i32 %33, 11
  %37 = getelementptr inbounds i8, i8* %34, i64 12
  %38 = bitcast i8* %37 to i32*
  store i32 %36, i32* %38, align 4
  %39 = getelementptr inbounds i8, i8* %34, i64 8
  %40 = bitcast i8* %39 to i32*
  store i32 %33, i32* %40, align 8
  %41 = zext i32 %36 to i64
  %42 = shl i64 2048, %41
  %43 = add i64 %42, -1
  %44 = or i64 %43, %29
  %45 = bitcast i8* %34 to i64*
  store i64 %44, i64* %45, align 8
  %46 = getelementptr inbounds i8, i8* %34, i64 16
  %47 = bitcast i8* %46 to %struct.RAA**
  store %struct.RAA* %30, %struct.RAA** %47, align 8
  %48 = icmp ult i64 %44, %1
  br i1 %48, label %28, label %49, !prof !2

49:                                               ; preds = %28
  %50 = bitcast i8* %34 to %struct.RAA*
  br label %51

51:                                               ; preds = %49, %8, %12
  %52 = phi %struct.RAA* [ %17, %12 ], [ %0, %8 ], [ %50, %49 ]
  %53 = getelementptr inbounds %struct.RAA, %struct.RAA* %52, i64 0, i32 1
  %54 = load i32, i32* %53, align 8
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %89, label %56

56:                                               ; preds = %51, %84
  %57 = phi i32 [ %87, %84 ], [ %54, %51 ]
  %58 = phi %struct.RAA* [ %85, %84 ], [ %52, %51 ]
  %59 = getelementptr inbounds %struct.RAA, %struct.RAA* %58, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = lshr i64 %1, %61
  %63 = and i64 %62, 2047
  %64 = getelementptr inbounds %struct.RAA, %struct.RAA* %58, i64 0, i32 3
  %65 = bitcast %union.RAA_UNION* %64 to [2048 x %struct.RAA*]*
  %66 = getelementptr inbounds [2048 x %struct.RAA*], [2048 x %struct.RAA*]* %65, i64 0, i64 %63
  %67 = load %struct.RAA*, %struct.RAA** %66, align 8
  %68 = icmp eq %struct.RAA* %67, null
  br i1 %68, label %69, label %84, !prof !2

69:                                               ; preds = %56
  %70 = add i32 %57, -1
  %71 = tail call noalias i8* @nasm_zalloc(i64 16400) #7
  %72 = mul i32 %70, 11
  %73 = getelementptr inbounds i8, i8* %71, i64 12
  %74 = bitcast i8* %73 to i32*
  store i32 %72, i32* %74, align 4
  %75 = getelementptr inbounds i8, i8* %71, i64 8
  %76 = bitcast i8* %75 to i32*
  store i32 %70, i32* %76, align 8
  %77 = zext i32 %72 to i64
  %78 = shl i64 2048, %77
  %79 = add i64 %78, -1
  %80 = or i64 %79, %1
  %81 = bitcast i8* %71 to i64*
  store i64 %80, i64* %81, align 8
  %82 = bitcast %struct.RAA** %66 to i8**
  store i8* %71, i8** %82, align 8
  %83 = bitcast i8* %71 to %struct.RAA*
  br label %84

84:                                               ; preds = %69, %56
  %85 = phi %struct.RAA* [ %83, %69 ], [ %67, %56 ]
  %86 = getelementptr inbounds %struct.RAA, %struct.RAA* %85, i64 0, i32 1
  %87 = load i32, i32* %86, align 8
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %56

89:                                               ; preds = %84, %51
  %90 = phi %struct.RAA* [ %52, %51 ], [ %85, %84 ]
  %91 = and i64 %1, 2047
  %92 = getelementptr inbounds %struct.RAA, %struct.RAA* %90, i64 0, i32 3, i32 0, i32 0, i64 %91, i32 0
  store i64 %2, i64* %92, align 8
  ret %struct.RAA* %52
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.RAA* @raa_write_ptr(%struct.RAA*, i64, i8*) local_unnamed_addr #0 {
  %4 = ptrtoint i8* %2 to i64
  %5 = tail call fastcc %struct.RAA* @real_raa_write(%struct.RAA* %0, i64 %1, i64 %4)
  ret %struct.RAA* %5
}

; Function Attrs: cold noreturn
declare void @nasm_assert_failed(i8*, i32, i8*) local_unnamed_addr #2

; Function Attrs: allocsize(0)
declare noalias i8* @nasm_zalloc(i64) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind readonly }
attributes #7 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i32 483550}
