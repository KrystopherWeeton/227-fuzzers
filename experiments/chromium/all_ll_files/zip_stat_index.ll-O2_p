; ModuleID = '../../third_party/libzip/src/lib/zip_stat_index.c'
source_filename = "../../third_party/libzip/src/lib/zip_stat_index.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct.zip_stat = type { i64, i8*, i64, i64, i64, i64, i32, i16, i16, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_stat_index(%struct.zip*, i64, i32, %struct.zip_stat*) local_unnamed_addr #0 {
  %5 = tail call %struct.zip_dirent* @_zip_get_dirent(%struct.zip* %0, i64 %1, i32 %2, %struct.zip_error* null) #2
  %6 = icmp eq %struct.zip_dirent* %5, null
  br i1 %6, label %72, label %7

7:                                                ; preds = %4
  %8 = tail call i8* @zip_get_name(%struct.zip* %0, i64 %1, i32 %2) #2
  %9 = icmp eq i8* %8, null
  br i1 %9, label %72, label %10

10:                                               ; preds = %7
  %11 = and i32 %2, 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %41

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %15 = load %struct.zip_entry*, %struct.zip_entry** %14, align 8
  %16 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %15, i64 %1, i32 2
  %17 = load %struct.zip_source*, %struct.zip_source** %16, align 8
  %18 = icmp eq %struct.zip_source* %17, null
  br i1 %18, label %41, label %19

19:                                               ; preds = %13
  %20 = tail call i32 @zip_source_stat(%struct.zip_source* nonnull %17, %struct.zip_stat* %3) #2
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %23, i32 15, i32 0) #2
  br label %72

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %15, i64 %1, i32 1
  %26 = load %struct.zip_dirent*, %struct.zip_dirent** %25, align 8
  %27 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %26, i64 0, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = and i32 %28, 32
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %34

31:                                               ; preds = %24
  %32 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 0
  %33 = load i64, i64* %32, align 8
  br label %66

34:                                               ; preds = %24
  %35 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %5, i64 0, i32 8
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 5
  store i64 %36, i64* %37, align 8
  %38 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = or i64 %39, 16
  store i64 %40, i64* %38, align 8
  br label %66

41:                                               ; preds = %13, %10
  tail call void @zip_stat_init(%struct.zip_stat* %3) #2
  %42 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %5, i64 0, i32 9
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 6
  store i32 %43, i32* %44, align 8
  %45 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %5, i64 0, i32 11
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 3
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %5, i64 0, i32 8
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 5
  store i64 %49, i64* %50, align 8
  %51 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %5, i64 0, i32 10
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 4
  store i64 %52, i64* %53, align 8
  %54 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %5, i64 0, i32 7
  %55 = load i32, i32* %54, align 8
  %56 = trunc i32 %55 to i16
  %57 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 7
  store i16 %56, i16* %57, align 4
  %58 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %5, i64 0, i32 20
  %59 = load i16, i16* %58, align 2
  %60 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 8
  store i16 %59, i16* %60, align 2
  %61 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %5, i64 0, i32 3
  %62 = load i8, i8* %61, align 2, !range !2
  %63 = icmp eq i8 %62, 0
  %64 = select i1 %63, i64 220, i64 252
  %65 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 0
  store i64 %64, i64* %65, align 8
  br label %66

66:                                               ; preds = %31, %34, %41
  %67 = phi i64 [ %33, %31 ], [ %40, %34 ], [ %64, %41 ]
  %68 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 2
  store i64 %1, i64* %68, align 8
  %69 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 1
  store i8* %8, i8** %69, align 8
  %70 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 0
  %71 = or i64 %67, 3
  store i64 %71, i64* %70, align 8
  br label %72

72:                                               ; preds = %22, %7, %4, %66
  %73 = phi i32 [ 0, %66 ], [ -1, %4 ], [ -1, %7 ], [ -1, %22 ]
  ret i32 %73
}

declare %struct.zip_dirent* @_zip_get_dirent(%struct.zip*, i64, i32, %struct.zip_error*) local_unnamed_addr #1

declare i8* @zip_get_name(%struct.zip*, i64, i32) local_unnamed_addr #1

declare i32 @zip_source_stat(%struct.zip_source*, %struct.zip_stat*) local_unnamed_addr #1

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

declare void @zip_stat_init(%struct.zip_stat*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
