; ModuleID = '../../third_party/blink/renderer/core/dom/dom_token_list.cc'
source_filename = "../../third_party/blink/renderer/core/dom/dom_token_list.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.v8::Isolate" = type { i8 }
%"class.blink::DOMWrapperWorld" = type opaque
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.blink::DOMTokenList" = type <{ %"class.blink::ScriptWrappable", %"class.blink::SpaceSplitString", %"class.blink::Member", %"class.blink::QualifiedName", i8, [7 x i8] }>
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted", %"class.WTF::AtomicString", %"class.WTF::Vector" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.0 }
%class.scoped_refptr.0 = type { %"class.WTF::StringImpl"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.13" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.2", %"class.blink::Member.2" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.2", %"class.blink::Member.4", %"class.blink::Member.2", %"class.blink::Member.2", %"class.blink::Member.6" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.4" = type { %"class.blink::MemberBase.5" }
%"class.blink::MemberBase.5" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.21", %"class.blink::Member.23", %"class.blink::Member.4", %"class.blink::Member.25", %"class.blink::Member.25", %"class.blink::Member.42", %"class.blink::Member.44", %"class.blink::Member.46", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.51", %"class.blink::HeapVector.53" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.21" = type { %"class.blink::MemberBase.22" }
%"class.blink::MemberBase.22" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.23" = type { %"class.blink::MemberBase.24" }
%"class.blink::MemberBase.24" = type { %"class.blink::Document"* }
%"class.blink::Document" = type opaque
%"class.blink::Member.25" = type { %"class.blink::MemberBase.26" }
%"class.blink::MemberBase.26" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %"class.blink::Member.32" }
%"class.blink::Member.32" = type { %"class.blink::MemberBase.33" }
%"class.blink::MemberBase.33" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member", i32, %"class.blink::HeapVector" }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.38" }
%"class.WTF::Vector.38" = type { %"class.WTF::VectorBuffer.39" }
%"class.WTF::VectorBuffer.39" = type { %"class.WTF::VectorBufferBase.40" }
%"class.WTF::VectorBufferBase.40" = type { %"class.blink::Member"*, i32, i32 }
%"class.blink::Member.42" = type { %"class.blink::MemberBase.43" }
%"class.blink::MemberBase.43" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.44" = type { %"class.blink::MemberBase.45" }
%"class.blink::MemberBase.45" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.46" = type { %"class.blink::MemberBase.47" }
%"class.blink::MemberBase.47" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.48" }
%"class.blink::Member.48" = type { %"class.blink::MemberBase.49" }
%"class.blink::MemberBase.49" = type { %"class.blink::HeapHashMap.50"* }
%"class.blink::HeapHashMap.50" = type opaque
%"class.blink::Member.51" = type { %"class.blink::MemberBase.52" }
%"class.blink::MemberBase.52" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.53" = type { %"class.WTF::Vector.56" }
%"class.WTF::Vector.56" = type { %"class.WTF::VectorBuffer.57" }
%"class.WTF::VectorBuffer.57" = type { %"class.WTF::VectorBufferBase.58" }
%"class.WTF::VectorBufferBase.58" = type { %"class.blink::Member.59"*, i32, i32 }
%"class.blink::Member.59" = type opaque
%"class.blink::Member.6" = type { %"class.blink::MemberBase.7" }
%"class.blink::MemberBase.7" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.2" = type { %"class.blink::MemberBase.3" }
%"class.blink::MemberBase.3" = type { %"class.blink::Node"* }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::Member.13" = type { %"class.blink::MemberBase.14" }
%"class.blink::MemberBase.14" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.17", %"class.blink::Member.19", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.17" = type { %"class.WTF::SingleThreadedBitField.18" }
%"class.WTF::SingleThreadedBitField.18" = type { i32 }
%"class.blink::Member.19" = type { %"class.blink::MemberBase.20" }
%"class.blink::MemberBase.20" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type opaque
%"class.blink::QualifiedName" = type { %class.scoped_refptr.10 }
%class.scoped_refptr.10 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted.11", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.11" = type { %"class.base::RefCounted.12" }
%"class.base::RefCounted.12" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.192", %"class.std::__1::unique_ptr.192", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.202", %"class.std::__1::unique_ptr.208", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.220", %"class.std::__1::unique_ptr.226", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.233", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.71", %"class.std::__1::unique_ptr.77", %"class.std::__1::unique_ptr.83", %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.100", %"class.std::__1::unique_ptr.107", %"class.std::__1::unique_ptr.107", %"class.std::__1::unique_ptr.114", %"class.std::__1::unique_ptr.121", %"class.std::__1::unique_ptr.128", %"class.std::__1::unique_ptr.128", %"class.std::__1::unique_ptr.135", %"class.std::__1::unique_ptr.142", %"class.std::__1::unique_ptr.149", %"class.std::__1::unique_ptr.172", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.71" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.83" = type { %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.92" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.92" = type { %"struct.std::__1::__atomic_base.93" }
%"struct.std::__1::__atomic_base.93" = type { %"struct.std::__1::__atomic_base.94" }
%"struct.std::__1::__atomic_base.94" = type { %"struct.std::__1::__cxx_atomic_impl.95" }
%"struct.std::__1::__cxx_atomic_impl.95" = type { %"struct.std::__1::__cxx_atomic_base_impl.96" }
%"struct.std::__1::__cxx_atomic_base_impl.96" = type { i64 }
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.blink::Worklist.103"* }
%"class.blink::Worklist.103" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.92" }
%"class.std::__1::unique_ptr.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"class.blink::Worklist.110"* }
%"class.blink::Worklist.110" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.92" }
%"class.std::__1::unique_ptr.114" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"class.blink::Worklist.117"* }
%"class.blink::Worklist.117" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.92" }
%"class.std::__1::unique_ptr.121" = type { %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"class.blink::Worklist.124"* }
%"class.blink::Worklist.124" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.92" }
%"class.std::__1::unique_ptr.128" = type { %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130" }
%"struct.std::__1::__compressed_pair_elem.130" = type { %"class.blink::Worklist.131"* }
%"class.blink::Worklist.131" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.92" }
%"class.std::__1::unique_ptr.135" = type { %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"class.blink::Worklist.138"* }
%"class.blink::Worklist.138" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.92" }
%"class.std::__1::unique_ptr.142" = type { %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"class.blink::Worklist.145"* }
%"class.blink::Worklist.145" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.92" }
%"class.std::__1::unique_ptr.149" = type { %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.152", %"class.std::__1::__compressed_pair.159", %"class.std::__1::__compressed_pair.164", %"class.std::__1::__compressed_pair.166", [4 x i8] }>
%"class.std::__1::unique_ptr.152" = type { %"class.std::__1::__compressed_pair.153" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154", %"struct.std::__1::__compressed_pair_elem.155" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.155" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { i64 }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { float }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.175", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.175" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.184" }
%"class.WTF::Vector.184" = type { %"class.WTF::VectorBuffer.185" }
%"class.WTF::VectorBuffer.185" = type { %"class.WTF::VectorBufferBase.186" }
%"class.WTF::VectorBufferBase.186" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.192" = type { %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.200" }
%"class.WTF::VectorBuffer.200" = type { %"class.WTF::VectorBufferBase.201" }
%"class.WTF::VectorBufferBase.201" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.202" = type { %"class.std::__1::__compressed_pair.203" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204" }
%"struct.std::__1::__compressed_pair_elem.204" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.208" = type { %"class.std::__1::__compressed_pair.209" }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.214" }
%"class.std::__1::unique_ptr.214" = type { %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.103"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.110"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.117"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.124"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.131"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.237" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.238" }
%"struct.std::__1::__compressed_pair_elem.238" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.220" = type { %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.226" = type { %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.232 }
%class.scoped_refptr.232 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.233" = type { %"struct.std::__1::__atomic_base.234" }
%"struct.std::__1::__atomic_base.234" = type { %"struct.std::__1::__cxx_atomic_impl.235" }
%"struct.std::__1::__cxx_atomic_impl.235" = type { %"struct.std::__1::__cxx_atomic_base_impl.236" }
%"struct.std::__1::__cxx_atomic_base_impl.236" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.242" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference.242" = type { %"class.v8::TracedReference.243" }
%"class.v8::TracedReference.243" = type { %"class.v8::BasicTracedReference.244" }
%"class.v8::BasicTracedReference.244" = type { %"class.v8::TracedReferenceBase" }
%"class.WTF::Vector.245" = type { %"class.WTF::VectorBuffer.246" }
%"class.WTF::VectorBuffer.246" = type { %"class.WTF::VectorBufferBase.247" }
%"class.WTF::VectorBufferBase.247" = type { %"class.WTF::String"*, i32, i32 }
%"class.blink::DummyExceptionStateForTesting" = type { %"class.blink::ExceptionState" }
%"class.v8::internal::Isolate" = type opaque
%"class.v8::Value" = type { i8 }
%"class.WTF::StringAppend" = type { %"class.WTF::StringAppend.253", i8* }
%"class.WTF::StringAppend.253" = type { i8*, %"class.WTF::String" }
%"class.blink::ScriptState" = type opaque
%"class.WTF::StringTypeAdapter.254" = type <{ i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.257" }
%"class.std::__1::__compressed_pair.257" = type { %"struct.std::__1::__compressed_pair_elem.258" }
%"struct.std::__1::__compressed_pair_elem.258" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.WTF::StringTypeAdapter.255" = type { %"class.WTF::StringTypeAdapter.256" }
%"class.WTF::StringTypeAdapter.256" = type { %"class.WTF::StringView" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

$_ZN5blink12DOMTokenListD2Ev = comdat any

$_ZN5blink12DOMTokenListD0Ev = comdat any

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink15ScriptWrappable17HasEventListenersEv = comdat any

$_ZNK5blink12DOMTokenList18GetWrapperTypeInfoEv = comdat any

$_ZN5blink11IsHTMLSpaceIDsEEbT_ = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv = comdat any

$_ZN3WTF6VectorINS_12AtomicStringELj4ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN5blink10TraceTraitINS_7ElementEE5TraceEPNS_7VisitorEPKv = comdat any

@.str = private unnamed_addr constant [38 x i8] c"DOMTokenList has no supported tokens.\00", align 1
@_ZTVN5blink12DOMTokenListE = hidden unnamed_addr constant { [12 x i8*] } { [12 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::DOMTokenList"*)* @_ZN5blink12DOMTokenListD2Ev to i8*), i8* bitcast (void (%"class.blink::DOMTokenList"*)* @_ZN5blink12DOMTokenListD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::DOMTokenList"*, %"class.blink::Visitor"*)* @_ZNK5blink12DOMTokenList5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::DOMTokenList"*)* @_ZNK5blink12DOMTokenList18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*), i8* bitcast (i1 (%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"*, %"class.blink::ExceptionState"*)* @_ZNK5blink12DOMTokenList18ValidateTokenValueERKN3WTF12AtomicStringERNS_14ExceptionStateE to i8*)] }, align 8
@_ZTVN5blink29DummyExceptionStateForTestingE = external unnamed_addr constant { [9 x i8*] }, align 8
@_ZTVN5blink14ExceptionStateE = external unnamed_addr constant { [9 x i8*] }, align 8
@.str.1 = private unnamed_addr constant [38 x i8] c"The token provided must not be empty.\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"The token provided ('\00", align 1
@.str.3 = private unnamed_addr constant [66 x i8] c"') contains HTML space characters, which are not valid in tokens.\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.4 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.5 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.8 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@_ZN5blink12DOMTokenList18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink12DOMTokenList5TraceEPNS_7VisitorE(%"class.blink::DOMTokenList"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 2
  %4 = bitcast %"class.blink::Member"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_7ElementEE5TraceEPNS_7VisitorEPKv) #8
  br label %13

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 0
  tail call void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"* %14, %"class.blink::Visitor"* %1) #8
  ret void
}

declare void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink12DOMTokenList18ValidateTokenValueERKN3WTF12AtomicStringERNS_14ExceptionStateE(%"class.blink::DOMTokenList"* nocapture readnone, %"class.WTF::AtomicString"* nocapture readnone dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) unnamed_addr #0 align 2 {
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %2, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0)) #8
  ret i1 false
}

declare void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink12DOMTokenList8containsERKN3WTF12AtomicStringE(%"class.blink::DOMTokenList"* nocapture readonly, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %3, align 8
  %5 = icmp eq %"class.blink::SpaceSplitString::Data"* %4, null
  br i1 %5, label %32, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %4, i64 0, i32 2, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %8, i64 %11
  %13 = icmp eq i32 %10, 0
  br i1 %13, label %32, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  br label %17

17:                                               ; preds = %22, %14
  %18 = phi %"class.WTF::AtomicString"* [ %8, %14 ], [ %23, %22 ]
  %19 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %18, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, %16
  br i1 %21, label %25, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %18, i64 1
  %24 = icmp ult %"class.WTF::AtomicString"* %23, %12
  br i1 %24, label %17, label %32

25:                                               ; preds = %17
  %26 = ptrtoint %"class.WTF::AtomicString"* %18 to i64
  %27 = ptrtoint %"class.WTF::AtomicString"* %8 to i64
  %28 = sub i64 %26, %27
  %29 = lshr exact i64 %28, 3
  %30 = trunc i64 %29 to i32
  %31 = icmp ne i32 %30, -1
  br label %32

32:                                               ; preds = %22, %2, %6, %25
  %33 = phi i1 [ false, %2 ], [ %31, %25 ], [ false, %6 ], [ false, %22 ]
  ret i1 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12DOMTokenList3AddERKN3WTF12AtomicStringE(%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::Vector.245", align 8
  %4 = alloca %"class.blink::DummyExceptionStateForTesting", align 8
  %5 = bitcast %"class.WTF::Vector.245"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %26, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %26

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #8
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %14
  tail call void @llvm.trap() #8
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %26

26:                                               ; preds = %2, %9, %24
  %27 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %3, i64 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %3, i64 0, i32 0, i32 0, i32 1
  %29 = tail call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 8) #8
  %30 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %29, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  %31 = ptrtoint i8* %30 to i64
  %32 = bitcast %"class.WTF::Vector.245"* %3 to i64*
  store atomic i64 %31, i64* %32 monotonic, align 8
  %33 = lshr i64 %29, 3
  %34 = trunc i64 %33 to i32
  store i32 %34, i32* %28, align 8
  %35 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %3, i64 0, i32 0, i32 0, i32 2
  store i32 1, i32* %35, align 4
  %36 = bitcast i8* %30 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"** %36, align 8
  %37 = bitcast i8* %30 to %"class.WTF::String"*
  br i1 %8, label %55, label %38

38:                                               ; preds = %26
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #8
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !2

52:                                               ; preds = %43
  call void @llvm.trap() #8
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %55

55:                                               ; preds = %26, %38, %53
  %56 = bitcast %"class.blink::DummyExceptionStateForTesting"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %56) #8
  %57 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 0
  %58 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 1, i32 0
  store i16 1, i16* %58, align 8
  %59 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 1, i32 1
  store i16 0, i16* %59, align 2
  %60 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 1, i32 2
  %61 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 5, i32 0, i32 0
  %62 = bitcast %"class.WTF::StringImpl"** %61 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 16, i1 false) #8
  %63 = bitcast i8** %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 36, i1 false) #8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %57, align 8
  %64 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0
  %65 = bitcast i8* %30 to %"class.WTF::StringImpl"**
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %73, label %69

68:                                               ; preds = %74
  call void @_ZN5blink12DOMTokenList9AddTokensERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::DOMTokenList"* %0, %"class.WTF::Vector.245"* nonnull dereferenceable(16) %3) #8
  br label %76

69:                                               ; preds = %55
  %70 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 1
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %74

73:                                               ; preds = %69, %55
  call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* nonnull %64, i32 12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #8
  br label %76

74:                                               ; preds = %69
  %75 = call fastcc zeroext i1 @_ZN5blink12_GLOBAL__N_124CheckTokenWithWhitespaceERKN3WTF6StringERNS_14ExceptionStateE(%"class.WTF::String"* dereferenceable(8) %37, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %64) #8
  br i1 %75, label %68, label %76

76:                                               ; preds = %74, %73, %68
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %57, align 8
  %77 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 4
  %78 = load i32, i32* %77, align 8
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %81, label %80

80:                                               ; preds = %76
  call void @_ZN5blink14ExceptionState14ClearExceptionEv(%"class.blink::ExceptionState"* nonnull %64) #8
  br label %81

81:                                               ; preds = %76, %80
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink14ExceptionStateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %57, align 8
  %82 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %83 = load i64*, i64** %82, align 8
  %84 = icmp eq i64* %83, null
  br i1 %84, label %95, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 3
  %87 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %86, align 8
  %88 = bitcast %"class.v8::Isolate"* %87 to %"class.v8::internal::Isolate"*
  %89 = load i64, i64* %83, align 8
  %90 = call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %88, i64 %89) #8
  %91 = call zeroext i1 @_ZN2v87Isolate22IsExecutionTerminatingEv(%"class.v8::Isolate"* %87) #8
  br i1 %91, label %95, label %92

92:                                               ; preds = %85
  %93 = bitcast i64* %90 to %"class.v8::Value"*
  %94 = call %"class.v8::Value"* @_ZN2v87Isolate14ThrowExceptionENS_5LocalINS_5ValueEEE(%"class.v8::Isolate"* %87, %"class.v8::Value"* %93) #8
  br label %95

95:                                               ; preds = %92, %85, %81
  %96 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %61, align 8
  %97 = icmp eq %"class.WTF::StringImpl"* %96, null
  br i1 %97, label %111, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %100 = load atomic i32, i32* %99 monotonic, align 4
  %101 = and i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 0
  %104 = load i32, i32* %103, align 4
  br i1 %102, label %105, label %107

105:                                              ; preds = %98
  %106 = add i32 %104, -1
  store i32 %106, i32* %103, align 4
  br label %107

107:                                              ; preds = %105, %98
  %108 = phi i32 [ %106, %105 ], [ %104, %98 ]
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %111

110:                                              ; preds = %107
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %96) #8
  br label %111

111:                                              ; preds = %95, %107, %110
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %56) #8
  %112 = icmp eq i8* %30, null
  br i1 %112, label %131, label %113, !prof !3

113:                                              ; preds = %111
  %114 = bitcast i8* %30 to %"class.WTF::StringImpl"**
  %115 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %114, align 8
  %116 = icmp eq %"class.WTF::StringImpl"* %115, null
  br i1 %116, label %130, label %117

117:                                              ; preds = %113
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %119 = load atomic i32, i32* %118 monotonic, align 4
  %120 = and i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 0, i32 0
  %123 = load i32, i32* %122, align 4
  br i1 %121, label %124, label %126

124:                                              ; preds = %117
  %125 = add i32 %123, -1
  store i32 %125, i32* %122, align 4
  br label %126

126:                                              ; preds = %124, %117
  %127 = phi i32 [ %125, %124 ], [ %123, %117 ]
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %130

129:                                              ; preds = %126
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %115) #8
  br label %130

130:                                              ; preds = %129, %126, %113
  store i32 0, i32* %35, align 4
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %30) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %27, align 8
  br label %131

131:                                              ; preds = %111, %130
  br i1 %8, label %145, label %132

132:                                              ; preds = %131
  %133 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %134 = load atomic i32, i32* %133 monotonic, align 4
  %135 = and i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  br i1 %136, label %139, label %141

139:                                              ; preds = %132
  %140 = add i32 %138, -1
  store i32 %140, i32* %137, align 4
  br label %141

141:                                              ; preds = %139, %132
  %142 = phi i32 [ %140, %139 ], [ %138, %132 ]
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %145

144:                                              ; preds = %141
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %7) #8
  br label %145

145:                                              ; preds = %131, %141, %144
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12DOMTokenList3addERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEERNS_14ExceptionStateE(%"class.blink::DOMTokenList"*, %"class.WTF::Vector.245"* nocapture readonly dereferenceable(16), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::String"*, %"class.WTF::String"** %4, align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %1, i64 0, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %26, label %13

11:                                               ; preds = %23
  %12 = icmp eq %"class.WTF::String"* %25, %9
  br i1 %12, label %26, label %13

13:                                               ; preds = %3, %11
  %14 = phi %"class.WTF::String"* [ %25, %11 ], [ %5, %3 ]
  %15 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %14, i64 0, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %18, %13
  tail call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %2, i32 12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #8
  br label %27

23:                                               ; preds = %18
  %24 = tail call fastcc zeroext i1 @_ZN5blink12_GLOBAL__N_124CheckTokenWithWhitespaceERKN3WTF6StringERNS_14ExceptionStateE(%"class.WTF::String"* dereferenceable(8) %14, %"class.blink::ExceptionState"* dereferenceable(72) %2) #8
  %25 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %14, i64 1
  br i1 %24, label %11, label %27

26:                                               ; preds = %11, %3
  tail call void @_ZN5blink12DOMTokenList9AddTokensERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::DOMTokenList"* %0, %"class.WTF::Vector.245"* dereferenceable(16) %1)
  br label %27

27:                                               ; preds = %23, %22, %26
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12DOMTokenList9AddTokensERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::DOMTokenList"*, %"class.WTF::Vector.245"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::AtomicString", align 8
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::String"*, %"class.WTF::String"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 %9
  %11 = icmp eq i32 %8, 0
  %12 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 1
  br i1 %11, label %17, label %13

13:                                               ; preds = %2
  %14 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  %15 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  br label %42

17:                                               ; preds = %88, %2
  %18 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 4
  %19 = load i8, i8* %18, align 1, !range !4
  store i8 1, i8* %18, align 1
  %20 = bitcast %"class.WTF::AtomicString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  %21 = call %"class.WTF::StringImpl"* @_ZNK5blink16SpaceSplitString17SerializeToStringEv(%"class.blink::SpaceSplitString"* %12) #8
  %22 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %21, %"class.WTF::StringImpl"** %22, align 8
  %23 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 2, i32 0, i32 0
  %24 = load %"class.blink::Element"*, %"class.blink::Element"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 3
  call void @_ZN5blink7Element12setAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::Element"* %24, %"class.blink::QualifiedName"* dereferenceable(8) %25, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %3) #8
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %41, label %28

28:                                               ; preds = %17
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  br i1 %32, label %35, label %37

35:                                               ; preds = %28
  %36 = add i32 %34, -1
  store i32 %36, i32* %33, align 4
  br label %37

37:                                               ; preds = %35, %28
  %38 = phi i32 [ %36, %35 ], [ %34, %28 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #8
  br label %41

41:                                               ; preds = %17, %37, %40
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  store i8 %19, i8* %18, align 1
  ret void

42:                                               ; preds = %13, %88
  %43 = phi %"class.WTF::String"* [ %6, %13 ], [ %89, %88 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #8
  %44 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %43, i64 0, i32 0, i32 0
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8
  %46 = icmp eq %"class.WTF::StringImpl"* %45, null
  br i1 %46, label %70, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 acquire, align 4
  %50 = and i32 %49, 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %68, label %52

52:                                               ; preds = %47
  %53 = load atomic i32, i32* %48 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %70

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = zext i32 %58 to i33
  %60 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %59, i33 1) #8
  %61 = extractvalue { i33, i1 } %60, 1
  %62 = extractvalue { i33, i1 } %60, 0
  %63 = icmp slt i33 %62, 0
  %64 = or i1 %61, %63
  br i1 %64, label %65, label %66, !prof !2

65:                                               ; preds = %56
  call void @llvm.trap() #8
  unreachable

66:                                               ; preds = %56
  %67 = trunc i33 %62 to i32
  store i32 %67, i32* %57, align 4
  br label %70

68:                                               ; preds = %47
  %69 = call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %45) #8
  br label %70

70:                                               ; preds = %42, %52, %66, %68
  %71 = phi %"class.WTF::StringImpl"* [ %69, %68 ], [ %45, %52 ], [ %45, %66 ], [ null, %42 ]
  %72 = ptrtoint %"class.WTF::StringImpl"* %71 to i64
  store i64 %72, i64* %15, align 8
  call void @_ZN5blink16SpaceSplitString3AddERKN3WTF12AtomicStringE(%"class.blink::SpaceSplitString"* %12, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4) #8
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %74 = icmp eq %"class.WTF::StringImpl"* %73, null
  br i1 %74, label %88, label %75

75:                                               ; preds = %70
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = load atomic i32, i32* %76 monotonic, align 4
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 0
  %81 = load i32, i32* %80, align 4
  br i1 %79, label %82, label %84

82:                                               ; preds = %75
  %83 = add i32 %81, -1
  store i32 %83, i32* %80, align 4
  br label %84

84:                                               ; preds = %82, %75
  %85 = phi i32 [ %83, %82 ], [ %81, %75 ]
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %84
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %73) #8
  br label %88

88:                                               ; preds = %70, %84, %87
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #8
  %89 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %43, i64 1
  %90 = icmp eq %"class.WTF::String"* %89, %10
  br i1 %90, label %17, label %42
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12DOMTokenList6RemoveERKN3WTF12AtomicStringE(%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::Vector.245", align 8
  %4 = alloca %"class.blink::DummyExceptionStateForTesting", align 8
  %5 = bitcast %"class.WTF::Vector.245"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %26, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %26

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #8
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %14
  tail call void @llvm.trap() #8
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %26

26:                                               ; preds = %2, %9, %24
  %27 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %3, i64 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %3, i64 0, i32 0, i32 0, i32 1
  %29 = tail call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 8) #8
  %30 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %29, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  %31 = ptrtoint i8* %30 to i64
  %32 = bitcast %"class.WTF::Vector.245"* %3 to i64*
  store atomic i64 %31, i64* %32 monotonic, align 8
  %33 = lshr i64 %29, 3
  %34 = trunc i64 %33 to i32
  store i32 %34, i32* %28, align 8
  %35 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %3, i64 0, i32 0, i32 0, i32 2
  store i32 1, i32* %35, align 4
  %36 = bitcast i8* %30 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"** %36, align 8
  br i1 %8, label %54, label %37

37:                                               ; preds = %26
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %54

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = zext i32 %44 to i33
  %46 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %45, i33 1) #8
  %47 = extractvalue { i33, i1 } %46, 1
  %48 = extractvalue { i33, i1 } %46, 0
  %49 = icmp slt i33 %48, 0
  %50 = or i1 %47, %49
  br i1 %50, label %51, label %52, !prof !2

51:                                               ; preds = %42
  call void @llvm.trap() #8
  unreachable

52:                                               ; preds = %42
  %53 = trunc i33 %48 to i32
  store i32 %53, i32* %43, align 4
  br label %54

54:                                               ; preds = %52, %37, %26
  %55 = bitcast %"class.blink::DummyExceptionStateForTesting"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %55) #8
  %56 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 0
  %57 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 1, i32 0
  store i16 1, i16* %57, align 8
  %58 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 1, i32 1
  store i16 0, i16* %58, align 2
  %59 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 1, i32 2
  %60 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 5, i32 0, i32 0
  %61 = bitcast %"class.WTF::StringImpl"** %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 16, i1 false) #8
  %62 = bitcast i8** %59 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 36, i1 false) #8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %63 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0
  call void @_ZN5blink12DOMTokenList6removeERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEERNS_14ExceptionStateE(%"class.blink::DOMTokenList"* %0, %"class.WTF::Vector.245"* nonnull dereferenceable(16) %3, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %63)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink29DummyExceptionStateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %64 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 4
  %65 = load i32, i32* %64, align 8
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %68, label %67

67:                                               ; preds = %54
  call void @_ZN5blink14ExceptionState14ClearExceptionEv(%"class.blink::ExceptionState"* nonnull %63) #8
  br label %68

68:                                               ; preds = %54, %67
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink14ExceptionStateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %69 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %70 = load i64*, i64** %69, align 8
  %71 = icmp eq i64* %70, null
  br i1 %71, label %82, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.blink::DummyExceptionStateForTesting", %"class.blink::DummyExceptionStateForTesting"* %4, i64 0, i32 0, i32 3
  %74 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %73, align 8
  %75 = bitcast %"class.v8::Isolate"* %74 to %"class.v8::internal::Isolate"*
  %76 = load i64, i64* %70, align 8
  %77 = call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %75, i64 %76) #8
  %78 = call zeroext i1 @_ZN2v87Isolate22IsExecutionTerminatingEv(%"class.v8::Isolate"* %74) #8
  br i1 %78, label %82, label %79

79:                                               ; preds = %72
  %80 = bitcast i64* %77 to %"class.v8::Value"*
  %81 = call %"class.v8::Value"* @_ZN2v87Isolate14ThrowExceptionENS_5LocalINS_5ValueEEE(%"class.v8::Isolate"* %74, %"class.v8::Value"* %80) #8
  br label %82

82:                                               ; preds = %79, %72, %68
  %83 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %84 = icmp eq %"class.WTF::StringImpl"* %83, null
  br i1 %84, label %98, label %85

85:                                               ; preds = %82
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %83, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = load atomic i32, i32* %86 monotonic, align 4
  %88 = and i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %83, i64 0, i32 0
  %91 = load i32, i32* %90, align 4
  br i1 %89, label %92, label %94

92:                                               ; preds = %85
  %93 = add i32 %91, -1
  store i32 %93, i32* %90, align 4
  br label %94

94:                                               ; preds = %92, %85
  %95 = phi i32 [ %93, %92 ], [ %91, %85 ]
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %94
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %83) #8
  br label %98

98:                                               ; preds = %82, %94, %97
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %55) #8
  %99 = icmp eq i8* %30, null
  br i1 %99, label %118, label %100, !prof !3

100:                                              ; preds = %98
  %101 = bitcast i8* %30 to %"class.WTF::StringImpl"**
  %102 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %101, align 8
  %103 = icmp eq %"class.WTF::StringImpl"* %102, null
  br i1 %103, label %117, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %102, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = load atomic i32, i32* %105 monotonic, align 4
  %107 = and i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %102, i64 0, i32 0
  %110 = load i32, i32* %109, align 4
  br i1 %108, label %111, label %113

111:                                              ; preds = %104
  %112 = add i32 %110, -1
  store i32 %112, i32* %109, align 4
  br label %113

113:                                              ; preds = %111, %104
  %114 = phi i32 [ %112, %111 ], [ %110, %104 ]
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %117

116:                                              ; preds = %113
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %102) #8
  br label %117

117:                                              ; preds = %116, %113, %100
  store i32 0, i32* %35, align 4
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %30) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %27, align 8
  br label %118

118:                                              ; preds = %98, %117
  br i1 %8, label %132, label %119

119:                                              ; preds = %118
  %120 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %121 = load atomic i32, i32* %120 monotonic, align 4
  %122 = and i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %125 = load i32, i32* %124, align 4
  br i1 %123, label %126, label %128

126:                                              ; preds = %119
  %127 = add i32 %125, -1
  store i32 %127, i32* %124, align 4
  br label %128

128:                                              ; preds = %126, %119
  %129 = phi i32 [ %127, %126 ], [ %125, %119 ]
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %132

131:                                              ; preds = %128
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %7) #8
  br label %132

132:                                              ; preds = %118, %128, %131
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12DOMTokenList6removeERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEERNS_14ExceptionStateE(%"class.blink::DOMTokenList"*, %"class.WTF::Vector.245"* nocapture readonly dereferenceable(16), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::String"*, %"class.WTF::String"** %4, align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %1, i64 0, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %26, label %13

11:                                               ; preds = %23
  %12 = icmp eq %"class.WTF::String"* %25, %9
  br i1 %12, label %26, label %13

13:                                               ; preds = %3, %11
  %14 = phi %"class.WTF::String"* [ %25, %11 ], [ %5, %3 ]
  %15 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %14, i64 0, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %18, %13
  tail call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %2, i32 12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #8
  br label %64

23:                                               ; preds = %18
  %24 = tail call fastcc zeroext i1 @_ZN5blink12_GLOBAL__N_124CheckTokenWithWhitespaceERKN3WTF6StringERNS_14ExceptionStateE(%"class.WTF::String"* dereferenceable(8) %14, %"class.blink::ExceptionState"* dereferenceable(72) %2) #8
  %25 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %14, i64 1
  br i1 %24, label %11, label %64

26:                                               ; preds = %11, %3
  %27 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 2, i32 0, i32 0
  %28 = load %"class.blink::Element"*, %"class.blink::Element"** %27, align 8
  %29 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 3
  %30 = tail call dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink7Element12getAttributeERKNS_13QualifiedNameE(%"class.blink::Element"* %28, %"class.blink::QualifiedName"* dereferenceable(8) %29) #8
  %31 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %30, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %33, label %64, label %34

34:                                               ; preds = %26
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  br i1 %38, label %41, label %51

41:                                               ; preds = %34
  %42 = zext i32 %40 to i33
  %43 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %42, i33 1) #8
  %44 = extractvalue { i33, i1 } %43, 1
  %45 = extractvalue { i33, i1 } %43, 0
  %46 = icmp slt i33 %45, 0
  %47 = or i1 %44, %46
  br i1 %47, label %48, label %49, !prof !2

48:                                               ; preds = %41
  tail call void @llvm.trap() #8
  unreachable

49:                                               ; preds = %41
  %50 = trunc i33 %45 to i32
  store i32 %50, i32* %39, align 4
  br label %51

51:                                               ; preds = %34, %49
  %52 = phi i32 [ %50, %49 ], [ %40, %34 ]
  %53 = load atomic i32, i32* %35 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %51
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %58 = add i32 %52, -1
  store i32 %58, i32* %57, align 4
  br label %59

59:                                               ; preds = %56, %51
  %60 = phi i32 [ %58, %56 ], [ %52, %51 ]
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %59
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #8
  br label %63

63:                                               ; preds = %59, %62
  tail call void @_ZN5blink12DOMTokenList12RemoveTokensERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::DOMTokenList"* %0, %"class.WTF::Vector.245"* dereferenceable(16) %1)
  br label %64

64:                                               ; preds = %23, %26, %22, %63
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink12DOMTokenList5valueEv(%"class.blink::DOMTokenList"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.blink::Element"*, %"class.blink::Element"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 3
  %5 = tail call dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink7Element12getAttributeERKNS_13QualifiedNameE(%"class.blink::Element"* %3, %"class.blink::QualifiedName"* dereferenceable(8) %4) #8
  %6 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %5, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %26, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %26

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #8
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %14
  tail call void @llvm.trap() #8
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %26

26:                                               ; preds = %1, %9, %24
  ret %"class.WTF::StringImpl"* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12DOMTokenList12RemoveTokensERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::DOMTokenList"*, %"class.WTF::Vector.245"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::AtomicString", align 8
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::String"*, %"class.WTF::String"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 %9
  %11 = icmp eq i32 %8, 0
  %12 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 1
  br i1 %11, label %17, label %13

13:                                               ; preds = %2
  %14 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  %15 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  br label %42

17:                                               ; preds = %89, %2
  %18 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 4
  %19 = load i8, i8* %18, align 1, !range !4
  store i8 1, i8* %18, align 1
  %20 = bitcast %"class.WTF::AtomicString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  %21 = call %"class.WTF::StringImpl"* @_ZNK5blink16SpaceSplitString17SerializeToStringEv(%"class.blink::SpaceSplitString"* %12) #8
  %22 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %21, %"class.WTF::StringImpl"** %22, align 8
  %23 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 2, i32 0, i32 0
  %24 = load %"class.blink::Element"*, %"class.blink::Element"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 3
  call void @_ZN5blink7Element12setAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::Element"* %24, %"class.blink::QualifiedName"* dereferenceable(8) %25, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %3) #8
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %41, label %28

28:                                               ; preds = %17
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  br i1 %32, label %35, label %37

35:                                               ; preds = %28
  %36 = add i32 %34, -1
  store i32 %36, i32* %33, align 4
  br label %37

37:                                               ; preds = %35, %28
  %38 = phi i32 [ %36, %35 ], [ %34, %28 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #8
  br label %41

41:                                               ; preds = %17, %37, %40
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  store i8 %19, i8* %18, align 1
  ret void

42:                                               ; preds = %13, %89
  %43 = phi %"class.WTF::String"* [ %6, %13 ], [ %90, %89 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #8
  %44 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %43, i64 0, i32 0, i32 0
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8
  %46 = icmp eq %"class.WTF::StringImpl"* %45, null
  br i1 %46, label %70, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 acquire, align 4
  %50 = and i32 %49, 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %68, label %52

52:                                               ; preds = %47
  %53 = load atomic i32, i32* %48 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %70

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = zext i32 %58 to i33
  %60 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %59, i33 1) #8
  %61 = extractvalue { i33, i1 } %60, 1
  %62 = extractvalue { i33, i1 } %60, 0
  %63 = icmp slt i33 %62, 0
  %64 = or i1 %61, %63
  br i1 %64, label %65, label %66, !prof !2

65:                                               ; preds = %56
  call void @llvm.trap() #8
  unreachable

66:                                               ; preds = %56
  %67 = trunc i33 %62 to i32
  store i32 %67, i32* %57, align 4
  br label %70

68:                                               ; preds = %47
  %69 = call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %45) #8
  br label %70

70:                                               ; preds = %42, %52, %66, %68
  %71 = phi %"class.WTF::StringImpl"* [ %69, %68 ], [ %45, %52 ], [ %45, %66 ], [ null, %42 ]
  %72 = ptrtoint %"class.WTF::StringImpl"* %71 to i64
  store i64 %72, i64* %15, align 8
  %73 = call zeroext i1 @_ZN5blink16SpaceSplitString6RemoveERKN3WTF12AtomicStringE(%"class.blink::SpaceSplitString"* %12, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4) #8
  %74 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %75 = icmp eq %"class.WTF::StringImpl"* %74, null
  br i1 %75, label %89, label %76

76:                                               ; preds = %70
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = and i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %82 = load i32, i32* %81, align 4
  br i1 %80, label %83, label %85

83:                                               ; preds = %76
  %84 = add i32 %82, -1
  store i32 %84, i32* %81, align 4
  br label %85

85:                                               ; preds = %83, %76
  %86 = phi i32 [ %84, %83 ], [ %82, %76 ]
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %85
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %74) #8
  br label %89

89:                                               ; preds = %70, %85, %88
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #8
  %90 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %43, i64 1
  %91 = icmp eq %"class.WTF::String"* %90, %10
  br i1 %91, label %17, label %42
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12DOMTokenList6toggleERKN3WTF12AtomicStringERNS_14ExceptionStateE(%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::Vector.245", align 8
  %5 = alloca %"class.WTF::Vector.245", align 8
  %6 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0
  %7 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %14, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %3, %10
  tail call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %2, i32 12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #8
  br label %213

15:                                               ; preds = %10
  %16 = tail call fastcc zeroext i1 @_ZN5blink12_GLOBAL__N_124CheckTokenWithWhitespaceERKN3WTF6StringERNS_14ExceptionStateE(%"class.WTF::String"* dereferenceable(8) %6, %"class.blink::ExceptionState"* dereferenceable(72) %2) #8
  br i1 %16, label %17, label %213

17:                                               ; preds = %15
  %18 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 1, i32 0, i32 0
  %19 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %18, align 8
  %20 = icmp eq %"class.blink::SpaceSplitString::Data"* %19, null
  br i1 %20, label %129, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %19, i64 0, i32 2, i32 0, i32 0, i32 0
  %23 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %22, align 8
  %24 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %19, i64 0, i32 2, i32 0, i32 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %23, i64 %26
  %28 = icmp eq i32 %25, 0
  br i1 %28, label %129, label %29

29:                                               ; preds = %21
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  br label %31

31:                                               ; preds = %36, %29
  %32 = phi %"class.WTF::AtomicString"* [ %23, %29 ], [ %37, %36 ]
  %33 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %32, i64 0, i32 0, i32 0, i32 0
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %34, %30
  br i1 %35, label %39, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %32, i64 1
  %38 = icmp ult %"class.WTF::AtomicString"* %37, %27
  br i1 %38, label %31, label %129

39:                                               ; preds = %31
  %40 = ptrtoint %"class.WTF::AtomicString"* %32 to i64
  %41 = ptrtoint %"class.WTF::AtomicString"* %23 to i64
  %42 = sub i64 %40, %41
  %43 = lshr exact i64 %42, 3
  %44 = trunc i64 %43 to i32
  %45 = icmp eq i32 %44, -1
  br i1 %45, label %129, label %46

46:                                               ; preds = %39
  %47 = bitcast %"class.WTF::Vector.245"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %47) #8
  %48 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %48, label %66, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %66

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = zext i32 %56 to i33
  %58 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %57, i33 1) #8
  %59 = extractvalue { i33, i1 } %58, 1
  %60 = extractvalue { i33, i1 } %58, 0
  %61 = icmp slt i33 %60, 0
  %62 = or i1 %59, %61
  br i1 %62, label %63, label %64, !prof !2

63:                                               ; preds = %54
  tail call void @llvm.trap() #8
  unreachable

64:                                               ; preds = %54
  %65 = trunc i33 %60 to i32
  store i32 %65, i32* %55, align 4
  br label %66

66:                                               ; preds = %46, %49, %64
  %67 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %4, i64 0, i32 0, i32 0, i32 0
  %68 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %4, i64 0, i32 0, i32 0, i32 1
  %69 = tail call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 8) #8
  %70 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %69, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  %71 = ptrtoint i8* %70 to i64
  %72 = bitcast %"class.WTF::Vector.245"* %4 to i64*
  store atomic i64 %71, i64* %72 monotonic, align 8
  %73 = lshr i64 %69, 3
  %74 = trunc i64 %73 to i32
  store i32 %74, i32* %68, align 8
  %75 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %4, i64 0, i32 0, i32 0, i32 2
  store i32 1, i32* %75, align 4
  %76 = bitcast i8* %70 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %30, %"class.WTF::StringImpl"** %76, align 8
  br i1 %48, label %94, label %77

77:                                               ; preds = %66
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load atomic i32, i32* %78 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %94

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i33
  %86 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %85, i33 1) #8
  %87 = extractvalue { i33, i1 } %86, 1
  %88 = extractvalue { i33, i1 } %86, 0
  %89 = icmp slt i33 %88, 0
  %90 = or i1 %87, %89
  br i1 %90, label %91, label %92, !prof !2

91:                                               ; preds = %82
  call void @llvm.trap() #8
  unreachable

92:                                               ; preds = %82
  %93 = trunc i33 %88 to i32
  store i32 %93, i32* %83, align 4
  br label %94

94:                                               ; preds = %92, %77, %66
  call void @_ZN5blink12DOMTokenList12RemoveTokensERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::DOMTokenList"* %0, %"class.WTF::Vector.245"* nonnull dereferenceable(16) %4)
  %95 = icmp eq i8* %70, null
  br i1 %95, label %114, label %96, !prof !3

96:                                               ; preds = %94
  %97 = bitcast i8* %70 to %"class.WTF::StringImpl"**
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #8
  br label %113

113:                                              ; preds = %112, %109, %96
  store i32 0, i32* %75, align 4
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %70) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %67, align 8
  br label %114

114:                                              ; preds = %94, %113
  br i1 %48, label %128, label %115

115:                                              ; preds = %114
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = and i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %121 = load i32, i32* %120, align 4
  br i1 %119, label %122, label %124

122:                                              ; preds = %115
  %123 = add i32 %121, -1
  store i32 %123, i32* %120, align 4
  br label %124

124:                                              ; preds = %122, %115
  %125 = phi i32 [ %123, %122 ], [ %121, %115 ]
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %124
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %30) #8
  br label %128

128:                                              ; preds = %114, %124, %127
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %47) #8
  br label %213

129:                                              ; preds = %36, %39, %21, %17
  %130 = bitcast %"class.WTF::Vector.245"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %130) #8
  %131 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %132 = icmp eq %"class.WTF::StringImpl"* %131, null
  br i1 %132, label %150, label %133

133:                                              ; preds = %129
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load atomic i32, i32* %134 monotonic, align 4
  %136 = and i32 %135, 2
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %150

138:                                              ; preds = %133
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = zext i32 %140 to i33
  %142 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %141, i33 1) #8
  %143 = extractvalue { i33, i1 } %142, 1
  %144 = extractvalue { i33, i1 } %142, 0
  %145 = icmp slt i33 %144, 0
  %146 = or i1 %143, %145
  br i1 %146, label %147, label %148, !prof !2

147:                                              ; preds = %138
  tail call void @llvm.trap() #8
  unreachable

148:                                              ; preds = %138
  %149 = trunc i33 %144 to i32
  store i32 %149, i32* %139, align 4
  br label %150

150:                                              ; preds = %129, %133, %148
  %151 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %5, i64 0, i32 0, i32 0, i32 0
  %152 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %5, i64 0, i32 0, i32 0, i32 1
  %153 = tail call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 8) #8
  %154 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %153, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  %155 = ptrtoint i8* %154 to i64
  %156 = bitcast %"class.WTF::Vector.245"* %5 to i64*
  store atomic i64 %155, i64* %156 monotonic, align 8
  %157 = lshr i64 %153, 3
  %158 = trunc i64 %157 to i32
  store i32 %158, i32* %152, align 8
  %159 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %5, i64 0, i32 0, i32 0, i32 2
  store i32 1, i32* %159, align 4
  %160 = bitcast i8* %154 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %131, %"class.WTF::StringImpl"** %160, align 8
  br i1 %132, label %178, label %161

161:                                              ; preds = %150
  %162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %163 = load atomic i32, i32* %162 monotonic, align 4
  %164 = and i32 %163, 2
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %178

166:                                              ; preds = %161
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 0
  %168 = load i32, i32* %167, align 4
  %169 = zext i32 %168 to i33
  %170 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %169, i33 1) #8
  %171 = extractvalue { i33, i1 } %170, 1
  %172 = extractvalue { i33, i1 } %170, 0
  %173 = icmp slt i33 %172, 0
  %174 = or i1 %171, %173
  br i1 %174, label %175, label %176, !prof !2

175:                                              ; preds = %166
  call void @llvm.trap() #8
  unreachable

176:                                              ; preds = %166
  %177 = trunc i33 %172 to i32
  store i32 %177, i32* %167, align 4
  br label %178

178:                                              ; preds = %176, %161, %150
  call void @_ZN5blink12DOMTokenList9AddTokensERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::DOMTokenList"* %0, %"class.WTF::Vector.245"* nonnull dereferenceable(16) %5)
  %179 = icmp eq i8* %154, null
  br i1 %179, label %198, label %180, !prof !3

180:                                              ; preds = %178
  %181 = bitcast i8* %154 to %"class.WTF::StringImpl"**
  %182 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %181, align 8
  %183 = icmp eq %"class.WTF::StringImpl"* %182, null
  br i1 %183, label %197, label %184

184:                                              ; preds = %180
  %185 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %182, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %186 = load atomic i32, i32* %185 monotonic, align 4
  %187 = and i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %182, i64 0, i32 0
  %190 = load i32, i32* %189, align 4
  br i1 %188, label %191, label %193

191:                                              ; preds = %184
  %192 = add i32 %190, -1
  store i32 %192, i32* %189, align 4
  br label %193

193:                                              ; preds = %191, %184
  %194 = phi i32 [ %192, %191 ], [ %190, %184 ]
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %197

196:                                              ; preds = %193
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %182) #8
  br label %197

197:                                              ; preds = %196, %193, %180
  store i32 0, i32* %159, align 4
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %154) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %151, align 8
  br label %198

198:                                              ; preds = %178, %197
  br i1 %132, label %212, label %199

199:                                              ; preds = %198
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %201 = load atomic i32, i32* %200 monotonic, align 4
  %202 = and i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 0
  %205 = load i32, i32* %204, align 4
  br i1 %203, label %206, label %208

206:                                              ; preds = %199
  %207 = add i32 %205, -1
  store i32 %207, i32* %204, align 4
  br label %208

208:                                              ; preds = %206, %199
  %209 = phi i32 [ %207, %206 ], [ %205, %199 ]
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %212

211:                                              ; preds = %208
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %131) #8
  br label %212

212:                                              ; preds = %198, %208, %211
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %130) #8
  br label %213

213:                                              ; preds = %14, %15, %212, %128
  %214 = phi i1 [ false, %128 ], [ true, %212 ], [ false, %15 ], [ false, %14 ]
  ret i1 %214
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12DOMTokenList6toggleERKN3WTF12AtomicStringEbRNS_14ExceptionStateE(%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), i1 zeroext, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::Vector.245", align 8
  %6 = alloca %"class.WTF::Vector.245", align 8
  %7 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %4, %11
  tail call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %3, i32 12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #8
  br label %216

16:                                               ; preds = %11
  %17 = tail call fastcc zeroext i1 @_ZN5blink12_GLOBAL__N_124CheckTokenWithWhitespaceERKN3WTF6StringERNS_14ExceptionStateE(%"class.WTF::String"* dereferenceable(8) %7, %"class.blink::ExceptionState"* dereferenceable(72) %3) #8
  br i1 %17, label %18, label %216

18:                                               ; preds = %16
  %19 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 1, i32 0, i32 0
  %20 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %19, align 8
  %21 = icmp eq %"class.blink::SpaceSplitString::Data"* %20, null
  br i1 %21, label %131, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %20, i64 0, i32 2, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %20, i64 0, i32 2, i32 0, i32 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %24, i64 %27
  %29 = icmp eq i32 %26, 0
  br i1 %29, label %131, label %30

30:                                               ; preds = %22
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  br label %32

32:                                               ; preds = %37, %30
  %33 = phi %"class.WTF::AtomicString"* [ %24, %30 ], [ %38, %37 ]
  %34 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %33, i64 0, i32 0, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %35, %31
  br i1 %36, label %40, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %33, i64 1
  %39 = icmp ult %"class.WTF::AtomicString"* %38, %28
  br i1 %39, label %32, label %131

40:                                               ; preds = %32
  %41 = ptrtoint %"class.WTF::AtomicString"* %33 to i64
  %42 = ptrtoint %"class.WTF::AtomicString"* %24 to i64
  %43 = sub i64 %41, %42
  %44 = lshr exact i64 %43, 3
  %45 = trunc i64 %44 to i32
  %46 = icmp eq i32 %45, -1
  br i1 %46, label %131, label %47

47:                                               ; preds = %40
  br i1 %2, label %216, label %48

48:                                               ; preds = %47
  %49 = bitcast %"class.WTF::Vector.245"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %49) #8
  %50 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %50, label %68, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %68

56:                                               ; preds = %51
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = zext i32 %58 to i33
  %60 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %59, i33 1) #8
  %61 = extractvalue { i33, i1 } %60, 1
  %62 = extractvalue { i33, i1 } %60, 0
  %63 = icmp slt i33 %62, 0
  %64 = or i1 %61, %63
  br i1 %64, label %65, label %66, !prof !2

65:                                               ; preds = %56
  tail call void @llvm.trap() #8
  unreachable

66:                                               ; preds = %56
  %67 = trunc i33 %62 to i32
  store i32 %67, i32* %57, align 4
  br label %68

68:                                               ; preds = %48, %51, %66
  %69 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %5, i64 0, i32 0, i32 0, i32 0
  %70 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %5, i64 0, i32 0, i32 0, i32 1
  %71 = tail call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 8) #8
  %72 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %71, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  %73 = ptrtoint i8* %72 to i64
  %74 = bitcast %"class.WTF::Vector.245"* %5 to i64*
  store atomic i64 %73, i64* %74 monotonic, align 8
  %75 = lshr i64 %71, 3
  %76 = trunc i64 %75 to i32
  store i32 %76, i32* %70, align 8
  %77 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %5, i64 0, i32 0, i32 0, i32 2
  store i32 1, i32* %77, align 4
  %78 = bitcast i8* %72 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %31, %"class.WTF::StringImpl"** %78, align 8
  br i1 %50, label %96, label %79

79:                                               ; preds = %68
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %96

84:                                               ; preds = %79
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = zext i32 %86 to i33
  %88 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %87, i33 1) #8
  %89 = extractvalue { i33, i1 } %88, 1
  %90 = extractvalue { i33, i1 } %88, 0
  %91 = icmp slt i33 %90, 0
  %92 = or i1 %89, %91
  br i1 %92, label %93, label %94, !prof !2

93:                                               ; preds = %84
  call void @llvm.trap() #8
  unreachable

94:                                               ; preds = %84
  %95 = trunc i33 %90 to i32
  store i32 %95, i32* %85, align 4
  br label %96

96:                                               ; preds = %94, %79, %68
  call void @_ZN5blink12DOMTokenList12RemoveTokensERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::DOMTokenList"* %0, %"class.WTF::Vector.245"* nonnull dereferenceable(16) %5)
  %97 = icmp eq i8* %72, null
  br i1 %97, label %116, label %98, !prof !3

98:                                               ; preds = %96
  %99 = bitcast i8* %72 to %"class.WTF::StringImpl"**
  %100 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %99, align 8
  %101 = icmp eq %"class.WTF::StringImpl"* %100, null
  br i1 %101, label %115, label %102

102:                                              ; preds = %98
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = and i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 0
  %108 = load i32, i32* %107, align 4
  br i1 %106, label %109, label %111

109:                                              ; preds = %102
  %110 = add i32 %108, -1
  store i32 %110, i32* %107, align 4
  br label %111

111:                                              ; preds = %109, %102
  %112 = phi i32 [ %110, %109 ], [ %108, %102 ]
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %111
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %100) #8
  br label %115

115:                                              ; preds = %114, %111, %98
  store i32 0, i32* %77, align 4
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %72) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %69, align 8
  br label %116

116:                                              ; preds = %96, %115
  br i1 %50, label %130, label %117

117:                                              ; preds = %116
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %119 = load atomic i32, i32* %118 monotonic, align 4
  %120 = and i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 0
  %123 = load i32, i32* %122, align 4
  br i1 %121, label %124, label %126

124:                                              ; preds = %117
  %125 = add i32 %123, -1
  store i32 %125, i32* %122, align 4
  br label %126

126:                                              ; preds = %124, %117
  %127 = phi i32 [ %125, %124 ], [ %123, %117 ]
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %130

129:                                              ; preds = %126
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %31) #8
  br label %130

130:                                              ; preds = %116, %126, %129
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %49) #8
  br label %216

131:                                              ; preds = %37, %40, %22, %18
  br i1 %2, label %132, label %216

132:                                              ; preds = %131
  %133 = bitcast %"class.WTF::Vector.245"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %133) #8
  %134 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %135 = icmp eq %"class.WTF::StringImpl"* %134, null
  br i1 %135, label %153, label %136

136:                                              ; preds = %132
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %138 = load atomic i32, i32* %137 monotonic, align 4
  %139 = and i32 %138, 2
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %153

141:                                              ; preds = %136
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 0
  %143 = load i32, i32* %142, align 4
  %144 = zext i32 %143 to i33
  %145 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %144, i33 1) #8
  %146 = extractvalue { i33, i1 } %145, 1
  %147 = extractvalue { i33, i1 } %145, 0
  %148 = icmp slt i33 %147, 0
  %149 = or i1 %146, %148
  br i1 %149, label %150, label %151, !prof !2

150:                                              ; preds = %141
  tail call void @llvm.trap() #8
  unreachable

151:                                              ; preds = %141
  %152 = trunc i33 %147 to i32
  store i32 %152, i32* %142, align 4
  br label %153

153:                                              ; preds = %132, %136, %151
  %154 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %6, i64 0, i32 0, i32 0, i32 0
  %155 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %6, i64 0, i32 0, i32 0, i32 1
  %156 = tail call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 8) #8
  %157 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %156, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  %158 = ptrtoint i8* %157 to i64
  %159 = bitcast %"class.WTF::Vector.245"* %6 to i64*
  store atomic i64 %158, i64* %159 monotonic, align 8
  %160 = lshr i64 %156, 3
  %161 = trunc i64 %160 to i32
  store i32 %161, i32* %155, align 8
  %162 = getelementptr inbounds %"class.WTF::Vector.245", %"class.WTF::Vector.245"* %6, i64 0, i32 0, i32 0, i32 2
  store i32 1, i32* %162, align 4
  %163 = bitcast i8* %157 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %134, %"class.WTF::StringImpl"** %163, align 8
  br i1 %135, label %181, label %164

164:                                              ; preds = %153
  %165 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %166 = load atomic i32, i32* %165 monotonic, align 4
  %167 = and i32 %166, 2
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %181

169:                                              ; preds = %164
  %170 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 0
  %171 = load i32, i32* %170, align 4
  %172 = zext i32 %171 to i33
  %173 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %172, i33 1) #8
  %174 = extractvalue { i33, i1 } %173, 1
  %175 = extractvalue { i33, i1 } %173, 0
  %176 = icmp slt i33 %175, 0
  %177 = or i1 %174, %176
  br i1 %177, label %178, label %179, !prof !2

178:                                              ; preds = %169
  call void @llvm.trap() #8
  unreachable

179:                                              ; preds = %169
  %180 = trunc i33 %175 to i32
  store i32 %180, i32* %170, align 4
  br label %181

181:                                              ; preds = %179, %164, %153
  call void @_ZN5blink12DOMTokenList9AddTokensERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::DOMTokenList"* %0, %"class.WTF::Vector.245"* nonnull dereferenceable(16) %6)
  %182 = icmp eq i8* %157, null
  br i1 %182, label %201, label %183, !prof !3

183:                                              ; preds = %181
  %184 = bitcast i8* %157 to %"class.WTF::StringImpl"**
  %185 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %184, align 8
  %186 = icmp eq %"class.WTF::StringImpl"* %185, null
  br i1 %186, label %200, label %187

187:                                              ; preds = %183
  %188 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %189 = load atomic i32, i32* %188 monotonic, align 4
  %190 = and i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 0
  %193 = load i32, i32* %192, align 4
  br i1 %191, label %194, label %196

194:                                              ; preds = %187
  %195 = add i32 %193, -1
  store i32 %195, i32* %192, align 4
  br label %196

196:                                              ; preds = %194, %187
  %197 = phi i32 [ %195, %194 ], [ %193, %187 ]
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %200

199:                                              ; preds = %196
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %185) #8
  br label %200

200:                                              ; preds = %199, %196, %183
  store i32 0, i32* %162, align 4
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %157) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %154, align 8
  br label %201

201:                                              ; preds = %181, %200
  br i1 %135, label %215, label %202

202:                                              ; preds = %201
  %203 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %204 = load atomic i32, i32* %203 monotonic, align 4
  %205 = and i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 0
  %208 = load i32, i32* %207, align 4
  br i1 %206, label %209, label %211

209:                                              ; preds = %202
  %210 = add i32 %208, -1
  store i32 %210, i32* %207, align 4
  br label %211

211:                                              ; preds = %209, %202
  %212 = phi i32 [ %210, %209 ], [ %208, %202 ]
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %214, label %215

214:                                              ; preds = %211
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %134) #8
  br label %215

215:                                              ; preds = %201, %211, %214
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %133) #8
  br label %216

216:                                              ; preds = %15, %130, %47, %215, %131, %16
  %217 = phi i1 [ false, %16 ], [ false, %131 ], [ true, %215 ], [ true, %47 ], [ false, %130 ], [ false, %15 ]
  ret i1 %217
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12DOMTokenList7replaceERKN3WTF12AtomicStringES4_RNS_14ExceptionStateE(%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::AtomicString", align 8
  %6 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0
  %7 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %14, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %4, %10
  tail call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %3, i32 12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #8
  br label %104

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0
  %17 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %24, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %15, %20
  tail call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %3, i32 12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #8
  br label %104

25:                                               ; preds = %20
  %26 = tail call fastcc zeroext i1 @_ZN5blink12_GLOBAL__N_124CheckTokenWithWhitespaceERKN3WTF6StringERNS_14ExceptionStateE(%"class.WTF::String"* dereferenceable(8) %6, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %26, label %27, label %104

27:                                               ; preds = %25
  %28 = tail call fastcc zeroext i1 @_ZN5blink12_GLOBAL__N_124CheckTokenWithWhitespaceERKN3WTF6StringERNS_14ExceptionStateE(%"class.WTF::String"* dereferenceable(8) %16, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %28, label %29, label %104

29:                                               ; preds = %27
  %30 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 1
  %31 = getelementptr inbounds %"class.blink::SpaceSplitString", %"class.blink::SpaceSplitString"* %30, i64 0, i32 0, i32 0
  br label %32

32:                                               ; preds = %29, %71
  %33 = phi i8 [ %72, %71 ], [ 0, %29 ]
  %34 = phi i8 [ %73, %71 ], [ 0, %29 ]
  %35 = phi i8 [ %74, %71 ], [ 0, %29 ]
  %36 = phi i32 [ %75, %71 ], [ 0, %29 ]
  %37 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %31, align 8
  %38 = icmp eq %"class.blink::SpaceSplitString::Data"* %37, null
  br i1 %38, label %42, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %37, i64 0, i32 2, i32 0, i32 0, i32 2
  %41 = load i32, i32* %40, align 4
  br label %42

42:                                               ; preds = %32, %39
  %43 = phi i32 [ %41, %39 ], [ 0, %32 ]
  %44 = icmp ult i32 %36, %43
  br i1 %44, label %45, label %76

45:                                               ; preds = %42
  %46 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %37, i64 0, i32 2
  %47 = tail call dereferenceable(8) %"class.WTF::AtomicString"* @_ZN3WTF6VectorINS_12AtomicStringELj4ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %46, i32 %36) #8
  %48 = and i8 %33, 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %56, label %50

50:                                               ; preds = %45
  %51 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %47, i64 0, i32 0, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %54 = icmp eq %"class.WTF::StringImpl"* %52, %53
  br i1 %54, label %55, label %71

55:                                               ; preds = %50
  tail call void @_ZN5blink16SpaceSplitString6RemoveEj(%"class.blink::SpaceSplitString"* %30, i32 %36) #8
  br label %76

56:                                               ; preds = %45
  %57 = and i8 %34, 1
  %58 = icmp eq i8 %57, 0
  %59 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %47, i64 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %60, %61
  br i1 %58, label %65, label %63

63:                                               ; preds = %56
  br i1 %62, label %64, label %71

64:                                               ; preds = %63
  tail call void @_ZN5blink16SpaceSplitString6RemoveEj(%"class.blink::SpaceSplitString"* %30, i32 %36) #8
  br label %79

65:                                               ; preds = %56
  br i1 %62, label %66, label %67

66:                                               ; preds = %65
  tail call void @_ZN5blink16SpaceSplitString9ReplaceAtEjRKN3WTF12AtomicStringE(%"class.blink::SpaceSplitString"* %30, i32 %36, %"class.WTF::AtomicString"* dereferenceable(8) %2) #8
  br label %71

67:                                               ; preds = %65
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %69 = icmp eq %"class.WTF::StringImpl"* %60, %68
  %70 = select i1 %69, i8 1, i8 %34
  br label %71

71:                                               ; preds = %63, %67, %66, %50
  %72 = phi i8 [ %33, %67 ], [ 1, %66 ], [ %33, %63 ], [ %33, %50 ]
  %73 = phi i8 [ %70, %67 ], [ %34, %66 ], [ %34, %63 ], [ %34, %50 ]
  %74 = phi i8 [ %35, %67 ], [ 1, %66 ], [ %35, %63 ], [ %35, %50 ]
  %75 = add nuw i32 %36, 1
  br label %32

76:                                               ; preds = %42, %55
  %77 = and i8 %35, 1
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %104, label %79

79:                                               ; preds = %64, %76
  %80 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 4
  %81 = load i8, i8* %80, align 1, !range !4
  store i8 1, i8* %80, align 1
  %82 = bitcast %"class.WTF::AtomicString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #8
  %83 = tail call %"class.WTF::StringImpl"* @_ZNK5blink16SpaceSplitString17SerializeToStringEv(%"class.blink::SpaceSplitString"* %30) #8
  %84 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %5, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %83, %"class.WTF::StringImpl"** %84, align 8
  %85 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 2, i32 0, i32 0
  %86 = load %"class.blink::Element"*, %"class.blink::Element"** %85, align 8
  %87 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 3
  call void @_ZN5blink7Element12setAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::Element"* %86, %"class.blink::QualifiedName"* dereferenceable(8) %87, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5) #8
  %88 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %84, align 8
  %89 = icmp eq %"class.WTF::StringImpl"* %88, null
  br i1 %89, label %103, label %90

90:                                               ; preds = %79
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load atomic i32, i32* %91 monotonic, align 4
  %93 = and i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 0, i32 0
  %96 = load i32, i32* %95, align 4
  br i1 %94, label %97, label %99

97:                                               ; preds = %90
  %98 = add i32 %96, -1
  store i32 %98, i32* %95, align 4
  br label %99

99:                                               ; preds = %97, %90
  %100 = phi i32 [ %98, %97 ], [ %96, %90 ]
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %103

102:                                              ; preds = %99
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %88) #8
  br label %103

103:                                              ; preds = %79, %99, %102
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #8
  store i8 %81, i8* %80, align 1
  br label %104

104:                                              ; preds = %24, %14, %103, %76, %25, %27
  %105 = phi i1 [ false, %24 ], [ false, %14 ], [ false, %27 ], [ false, %25 ], [ true, %103 ], [ false, %76 ]
  ret i1 %105
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN5blink12_GLOBAL__N_124CheckTokenWithWhitespaceERKN3WTF6StringERNS_14ExceptionStateE(%"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) unnamed_addr #0 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.WTF::StringAppend", align 8
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %160, label %8

8:                                                ; preds = %2
  %9 = tail call i32 @_ZN3WTF10StringImpl4FindEPFbDsEj(%"class.WTF::StringImpl"* nonnull %6, i1 (i16)* nonnull @_ZN5blink11IsHTMLSpaceIDsEEbT_, i32 0) #8
  %10 = icmp eq i32 %9, -1
  br i1 %10, label %160, label %11

11:                                               ; preds = %8
  %12 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #8
  %13 = bitcast %"class.WTF::StringAppend"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #8
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %15 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %15, label %91, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  br i1 %20, label %23, label %33

23:                                               ; preds = %16
  %24 = zext i32 %22 to i33
  %25 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %24, i33 1) #8
  %26 = extractvalue { i33, i1 } %25, 1
  %27 = extractvalue { i33, i1 } %25, 0
  %28 = icmp slt i33 %27, 0
  %29 = or i1 %26, %28
  br i1 %29, label %30, label %31, !prof !2

30:                                               ; preds = %23
  tail call void @llvm.trap() #8
  unreachable

31:                                               ; preds = %23
  %32 = trunc i33 %27 to i32
  store i32 %32, i32* %21, align 4
  br label %33

33:                                               ; preds = %31, %16
  %34 = phi i32 [ %32, %31 ], [ %22, %16 ]
  %35 = load atomic i32, i32* %17 monotonic, align 4
  %36 = and i32 %35, 2
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %48

38:                                               ; preds = %33
  %39 = zext i32 %34 to i33
  %40 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %39, i33 1) #8
  %41 = extractvalue { i33, i1 } %40, 1
  %42 = extractvalue { i33, i1 } %40, 0
  %43 = icmp slt i33 %42, 0
  %44 = or i1 %41, %43
  br i1 %44, label %45, label %46, !prof !2

45:                                               ; preds = %38
  tail call void @llvm.trap() #8
  unreachable

46:                                               ; preds = %38
  %47 = trunc i33 %42 to i32
  store i32 %47, i32* %21, align 4
  br label %48

48:                                               ; preds = %46, %33
  %49 = phi i32 [ %47, %46 ], [ %34, %33 ]
  %50 = load atomic i32, i32* %17 monotonic, align 4
  %51 = and i32 %50, 2
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %48
  %54 = add i32 %49, -1
  store i32 %54, i32* %21, align 4
  br label %55

55:                                               ; preds = %53, %48
  %56 = phi i32 [ %54, %53 ], [ %49, %48 ]
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %14) #8
  br label %59

59:                                               ; preds = %55, %58
  %60 = load atomic i32, i32* %17 monotonic, align 4
  %61 = and i32 %60, 2
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %74

63:                                               ; preds = %59
  %64 = load i32, i32* %21, align 4
  %65 = zext i32 %64 to i33
  %66 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %65, i33 1) #8
  %67 = extractvalue { i33, i1 } %66, 1
  %68 = extractvalue { i33, i1 } %66, 0
  %69 = icmp slt i33 %68, 0
  %70 = or i1 %67, %69
  br i1 %70, label %71, label %72, !prof !2

71:                                               ; preds = %63
  tail call void @llvm.trap() #8
  unreachable

72:                                               ; preds = %63
  %73 = trunc i33 %68 to i32
  store i32 %73, i32* %21, align 4
  br label %74

74:                                               ; preds = %59, %72
  %75 = bitcast %"class.WTF::StringAppend"* %4 to i64*
  store i64 ptrtoint ([22 x i8]* @.str.2 to i64), i64* %75, align 8
  %76 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %14, %"class.WTF::StringImpl"** %76, align 8
  %77 = load atomic i32, i32* %17 monotonic, align 4
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %95

80:                                               ; preds = %74
  %81 = load i32, i32* %21, align 4
  %82 = zext i32 %81 to i33
  %83 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %82, i33 1) #8
  %84 = extractvalue { i33, i1 } %83, 1
  %85 = extractvalue { i33, i1 } %83, 0
  %86 = icmp slt i33 %85, 0
  %87 = or i1 %84, %86
  br i1 %87, label %88, label %89, !prof !2

88:                                               ; preds = %80
  tail call void @llvm.trap() #8
  unreachable

89:                                               ; preds = %80
  %90 = trunc i33 %85 to i32
  store i32 %90, i32* %21, align 4
  br label %95

91:                                               ; preds = %11
  %92 = bitcast %"class.WTF::StringAppend"* %4 to i64*
  store i64 ptrtoint ([22 x i8]* @.str.2 to i64), i64* %92, align 8
  %93 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %93, align 8
  %94 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %4, i64 0, i32 1
  store i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.3, i64 0, i64 0), i8** %94, align 8
  br label %107

95:                                               ; preds = %89, %74
  %96 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %4, i64 0, i32 1
  store i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.3, i64 0, i64 0), i8** %96, align 8
  %97 = load atomic i32, i32* %17 monotonic, align 4
  %98 = and i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = load i32, i32* %21, align 4
  br i1 %99, label %101, label %103

101:                                              ; preds = %95
  %102 = add i32 %100, -1
  store i32 %102, i32* %21, align 4
  br label %103

103:                                              ; preds = %101, %95
  %104 = phi i32 [ %102, %101 ], [ %100, %95 ]
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %107

106:                                              ; preds = %103
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %14) #8
  br label %107

107:                                              ; preds = %91, %103, %106
  %108 = phi %"class.WTF::StringImpl"** [ %93, %91 ], [ %76, %103 ], [ %76, %106 ]
  %109 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %4)
  %110 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %109, %"class.WTF::StringImpl"** %110, align 8
  %111 = bitcast %"class.blink::ExceptionState"* %1 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %112 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %111, align 8
  %113 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %112, align 8
  call void %113(%"class.blink::ExceptionState"* %1, i32 5, %"class.WTF::String"* nonnull dereferenceable(8) %3) #8
  %114 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %110, align 8
  %115 = icmp eq %"class.WTF::StringImpl"* %114, null
  br i1 %115, label %129, label %116

116:                                              ; preds = %107
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %114, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %118 = load atomic i32, i32* %117 monotonic, align 4
  %119 = and i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %114, i64 0, i32 0
  %122 = load i32, i32* %121, align 4
  br i1 %120, label %123, label %125

123:                                              ; preds = %116
  %124 = add i32 %122, -1
  store i32 %124, i32* %121, align 4
  br label %125

125:                                              ; preds = %123, %116
  %126 = phi i32 [ %124, %123 ], [ %122, %116 ]
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %129

128:                                              ; preds = %125
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %114) #8
  br label %129

129:                                              ; preds = %107, %125, %128
  %130 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %108, align 8
  %131 = icmp eq %"class.WTF::StringImpl"* %130, null
  br i1 %131, label %145, label %132

132:                                              ; preds = %129
  %133 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %130, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %134 = load atomic i32, i32* %133 monotonic, align 4
  %135 = and i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %130, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  br i1 %136, label %139, label %141

139:                                              ; preds = %132
  %140 = add i32 %138, -1
  store i32 %140, i32* %137, align 4
  br label %141

141:                                              ; preds = %139, %132
  %142 = phi i32 [ %140, %139 ], [ %138, %132 ]
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %145

144:                                              ; preds = %141
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %130) #8
  br label %145

145:                                              ; preds = %129, %141, %144
  br i1 %15, label %159, label %146

146:                                              ; preds = %145
  %147 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = load atomic i32, i32* %147 monotonic, align 4
  %149 = and i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 0
  %152 = load i32, i32* %151, align 4
  br i1 %150, label %153, label %155

153:                                              ; preds = %146
  %154 = add i32 %152, -1
  store i32 %154, i32* %151, align 4
  br label %155

155:                                              ; preds = %153, %146
  %156 = phi i32 [ %154, %153 ], [ %152, %146 ]
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %159

158:                                              ; preds = %155
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %14) #8
  br label %159

159:                                              ; preds = %145, %155, %158
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #8
  br label %160

160:                                              ; preds = %2, %8, %159
  %161 = phi i1 [ false, %159 ], [ true, %8 ], [ true, %2 ]
  ret i1 %161
}

declare void @_ZN5blink16SpaceSplitString6RemoveEj(%"class.blink::SpaceSplitString"*, i32) local_unnamed_addr #1

declare void @_ZN5blink16SpaceSplitString9ReplaceAtEjRKN3WTF12AtomicStringE(%"class.blink::SpaceSplitString"*, i32, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12DOMTokenList18UpdateWithTokenSetERKNS_16SpaceSplitStringE(%"class.blink::DOMTokenList"*, %"class.blink::SpaceSplitString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::AtomicString", align 8
  %4 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 4
  %5 = load i8, i8* %4, align 1, !range !4
  store i8 1, i8* %4, align 1
  %6 = bitcast %"class.WTF::AtomicString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = tail call %"class.WTF::StringImpl"* @_ZNK5blink16SpaceSplitString17SerializeToStringEv(%"class.blink::SpaceSplitString"* %1) #8
  %8 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"** %8, align 8
  %9 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 2, i32 0, i32 0
  %10 = load %"class.blink::Element"*, %"class.blink::Element"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 3
  call void @_ZN5blink7Element12setAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::Element"* %10, %"class.blink::QualifiedName"* dereferenceable(8) %11, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %3) #8
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %27, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  br i1 %18, label %21, label %23

21:                                               ; preds = %14
  %22 = add i32 %20, -1
  store i32 %22, i32* %19, align 4
  br label %23

23:                                               ; preds = %21, %14
  %24 = phi i32 [ %22, %21 ], [ %20, %14 ]
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %23
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %12) #8
  br label %27

27:                                               ; preds = %2, %23, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %28 = icmp eq i8* %4, null
  br i1 %28, label %30, label %29

29:                                               ; preds = %27
  store i8 %5, i8* %4, align 1
  br label %30

30:                                               ; preds = %27, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12DOMTokenList8supportsERKN3WTF12AtomicStringERNS_14ExceptionStateE(%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF12AtomicString10LowerASCIIEv(%"class.WTF::AtomicString"* %1) #8
  %7 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %6, %"class.WTF::StringImpl"** %7, align 8
  %8 = bitcast %"class.blink::DOMTokenList"* %0 to i1 (%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"*, %"class.blink::ExceptionState"*)***
  %9 = load i1 (%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"*, %"class.blink::ExceptionState"*)**, i1 (%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"*, %"class.blink::ExceptionState"*)*** %8, align 8
  %10 = getelementptr inbounds i1 (%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"*, %"class.blink::ExceptionState"*)*, i1 (%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"*, %"class.blink::ExceptionState"*)** %9, i64 9
  %11 = load i1 (%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"*, %"class.blink::ExceptionState"*)*, i1 (%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"*, %"class.blink::ExceptionState"*)** %10, align 8
  %12 = call zeroext i1 %11(%"class.blink::DOMTokenList"* %0, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4, %"class.blink::ExceptionState"* dereferenceable(72) %2) #8
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  br i1 %14, label %28, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  br i1 %19, label %22, label %24

22:                                               ; preds = %15
  %23 = add i32 %21, -1
  store i32 %23, i32* %20, align 4
  br label %24

24:                                               ; preds = %22, %15
  %25 = phi i32 [ %23, %22 ], [ %21, %15 ]
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %24
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %13) #8
  br label %28

28:                                               ; preds = %3, %24, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  ret i1 %12
}

declare %"class.WTF::StringImpl"* @_ZNK3WTF12AtomicString10LowerASCIIEv(%"class.WTF::AtomicString"*) local_unnamed_addr #1

declare void @_ZN5blink16SpaceSplitString3AddERKN3WTF12AtomicStringE(%"class.blink::SpaceSplitString"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink16SpaceSplitString6RemoveERKN3WTF12AtomicStringE(%"class.blink::SpaceSplitString"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12DOMTokenList8setValueERKN3WTF12AtomicStringE(%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.blink::Element"*, %"class.blink::Element"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 3
  tail call void @_ZN5blink7Element12setAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::Element"* %4, %"class.blink::QualifiedName"* dereferenceable(8) %5, %"class.WTF::AtomicString"* dereferenceable(8) %1) #8
  ret void
}

declare %"class.WTF::StringImpl"* @_ZNK5blink16SpaceSplitString17SerializeToStringEv(%"class.blink::SpaceSplitString"*) local_unnamed_addr #1

declare dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink7Element12getAttributeERKNS_13QualifiedNameE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #1

declare void @_ZN5blink7Element12setAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12DOMTokenList23DidUpdateAttributeValueERKN3WTF12AtomicStringES4_(%"class.blink::DOMTokenList"*, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 4
  %5 = load i8, i8* %4, align 8, !range !4
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %15

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %9, %11
  br i1 %12, label %15, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 1
  tail call void @_ZN5blink16SpaceSplitString3SetERKN3WTF12AtomicStringE(%"class.blink::SpaceSplitString"* %14, %"class.WTF::AtomicString"* dereferenceable(8) %2) #8
  br label %15

15:                                               ; preds = %7, %3, %13
  ret void
}

declare void @_ZN5blink16SpaceSplitString3SetERKN3WTF12AtomicStringE(%"class.blink::SpaceSplitString"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink12DOMTokenList4itemEj(%"class.blink::DOMTokenList"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %3, align 8
  %5 = icmp eq %"class.blink::SpaceSplitString::Data"* %4, null
  br i1 %5, label %34, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %4, i64 0, i32 2, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %8, %1
  br i1 %9, label %10, label %34

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %4, i64 0, i32 2
  %12 = tail call dereferenceable(8) %"class.WTF::AtomicString"* @_ZN3WTF6VectorINS_12AtomicStringELj4ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %11, i32 %1) #8
  %13 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %12, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = ptrtoint %"class.WTF::StringImpl"* %14 to i64
  %16 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %16, label %34, label %17

17:                                               ; preds = %10
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i32 %19, 2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %34

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i33
  %26 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %25, i33 1) #8
  %27 = extractvalue { i33, i1 } %26, 1
  %28 = extractvalue { i33, i1 } %26, 0
  %29 = icmp slt i33 %28, 0
  %30 = or i1 %27, %29
  br i1 %30, label %31, label %32, !prof !2

31:                                               ; preds = %22
  tail call void @llvm.trap() #8
  unreachable

32:                                               ; preds = %22
  %33 = trunc i33 %28 to i32
  store i32 %33, i32* %23, align 4
  br label %34

34:                                               ; preds = %2, %32, %17, %10, %6
  %35 = phi i64 [ 0, %6 ], [ %15, %10 ], [ %15, %17 ], [ %15, %32 ], [ 0, %2 ]
  %36 = inttoptr i64 %35 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink12DOMTokenListD2Ev(%"class.blink::DOMTokenList"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN5blink12DOMTokenListE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 3
  tail call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %3) #8
  %4 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %4, align 8
  %6 = icmp eq %"class.blink::SpaceSplitString::Data"* %5, null
  br i1 %6, label %14, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %5, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %8) #8
  %9 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %7
  tail call void @_ZN5blink16SpaceSplitString4DataD1Ev(%"class.blink::SpaceSplitString::Data"* nonnull %5) #8
  %13 = bitcast %"class.blink::SpaceSplitString::Data"* %5 to i8*
  tail call void @free(i8* %13) #8
  br label %14

14:                                               ; preds = %1, %7, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink12DOMTokenListD0Ev(%"class.blink::DOMTokenList"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN5blink12DOMTokenListE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 3
  tail call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* %3) #8
  %4 = getelementptr inbounds %"class.blink::DOMTokenList", %"class.blink::DOMTokenList"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %4, align 8
  %6 = icmp eq %"class.blink::SpaceSplitString::Data"* %5, null
  br i1 %6, label %14, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %5, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %8) #8
  %9 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %7
  tail call void @_ZN5blink16SpaceSplitString4DataD1Ev(%"class.blink::SpaceSplitString::Data"* nonnull %5) #8
  %13 = bitcast %"class.blink::SpaceSplitString::Data"* %5 to i8*
  tail call void @free(i8* %13) #8
  br label %14

14:                                               ; preds = %1, %7, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable17HasEventListenersEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink12DOMTokenList18GetWrapperTypeInfoEv(%"class.blink::DOMTokenList"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink12DOMTokenList18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #1

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

declare void @_ZN5blink14ExceptionState14ClearExceptionEv(%"class.blink::ExceptionState"*) unnamed_addr #1

declare zeroext i1 @_ZN2v87Isolate22IsExecutionTerminatingEv(%"class.v8::Isolate"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZN2v87Isolate14ThrowExceptionENS_5LocalINS_5ValueEEE(%"class.v8::Isolate"*, %"class.v8::Value"*) local_unnamed_addr #1

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

declare void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"*, i32, i8*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink11IsHTMLSpaceIDsEEbT_(i16 zeroext) #6 comdat {
  %2 = icmp ult i16 %0, 33
  br i1 %2, label %3, label %11

3:                                                ; preds = %1
  %4 = add i16 %0, -9
  %5 = icmp ult i16 %4, 24
  br i1 %5, label %6, label %11

6:                                                ; preds = %3
  %7 = zext i16 %4 to i24
  %8 = lshr i24 -8388581, %7
  %9 = and i24 %8, 1
  %10 = icmp ne i24 %9, 0
  ret i1 %10

11:                                               ; preds = %3, %1
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.254", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.254", align 8
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = bitcast %"class.WTF::StringTypeAdapter.254"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false) #8
  %8 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.254"* nonnull %3, i8* %8) #8
  %9 = bitcast %"class.WTF::StringTypeAdapter.254"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #8
  %10 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false) #8
  %11 = load i8*, i8** %10, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.254"* nonnull %2, i8* %11) #8
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %16 = select i1 %14, %"class.WTF::StringImpl"* %15, %"class.WTF::StringImpl"* %13
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8
  br i1 %20, label %57, label %21

21:                                               ; preds = %1
  %22 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #8
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %23 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %24 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %23, i8** nonnull dereferenceable(8) %4) #8
  %25 = load i8*, i8** %4, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"* %0, i8* %25)
  %26 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %26, label %93, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  br i1 %31, label %34, label %44

34:                                               ; preds = %27
  %35 = zext i32 %33 to i33
  %36 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %35, i33 1) #8
  %37 = extractvalue { i33, i1 } %36, 1
  %38 = extractvalue { i33, i1 } %36, 0
  %39 = icmp slt i33 %38, 0
  %40 = or i1 %37, %39
  br i1 %40, label %41, label %42, !prof !2

41:                                               ; preds = %34
  call void @llvm.trap() #8
  unreachable

42:                                               ; preds = %34
  %43 = trunc i33 %38 to i32
  store i32 %43, i32* %32, align 4
  br label %44

44:                                               ; preds = %27, %42
  %45 = phi i32 [ %43, %42 ], [ %33, %27 ]
  %46 = ptrtoint %"class.WTF::StringImpl"* %24 to i64
  %47 = load atomic i32, i32* %28 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %52 = add i32 %45, -1
  store i32 %52, i32* %51, align 4
  br label %53

53:                                               ; preds = %50, %44
  %54 = phi i32 [ %52, %50 ], [ %45, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %93

56:                                               ; preds = %53
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #8
  br label %93

57:                                               ; preds = %1
  %58 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #8
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %5, align 8
  %59 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %60 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %59, i16** nonnull dereferenceable(8) %5) #8
  %61 = load i16*, i16** %5, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"* %0, i16* %61)
  %62 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %62, label %93, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  br i1 %67, label %70, label %80

70:                                               ; preds = %63
  %71 = zext i32 %69 to i33
  %72 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #8
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !2

77:                                               ; preds = %70
  call void @llvm.trap() #8
  unreachable

78:                                               ; preds = %70
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %68, align 4
  br label %80

80:                                               ; preds = %63, %78
  %81 = phi i32 [ %79, %78 ], [ %69, %63 ]
  %82 = ptrtoint %"class.WTF::StringImpl"* %60 to i64
  %83 = load atomic i32, i32* %64 monotonic, align 4
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %89

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %88 = add i32 %81, -1
  store i32 %88, i32* %87, align 4
  br label %89

89:                                               ; preds = %86, %80
  %90 = phi i32 [ %88, %86 ], [ %81, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #8
  br label %93

93:                                               ; preds = %92, %89, %57, %56, %53, %21
  %94 = phi i8* [ %22, %21 ], [ %22, %53 ], [ %22, %56 ], [ %58, %57 ], [ %58, %89 ], [ %58, %92 ]
  %95 = phi i64 [ 0, %21 ], [ %46, %53 ], [ %46, %56 ], [ 0, %57 ], [ %82, %89 ], [ %82, %92 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #8
  %96 = inttoptr i64 %95 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %96
}

declare i32 @_ZN3WTF10StringImpl4FindEPFbDsEj(%"class.WTF::StringImpl"*, i1 (i16)*, i32) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.254", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.254"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #8
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.254", %"class.WTF::StringTypeAdapter.254"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.254"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.254"* nonnull %4, i8* %14) #8
  %15 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.253"* %9) #8
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #8
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.253"* %9) #8
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #8
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0), i8* %25, i8* %26) #8
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.5, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #8
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #8
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #8
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #8
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #8
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i8* %41, i8* %42) #8
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.5, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #8
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #8
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #8
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.254", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.255", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.254", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.254"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.254"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.254"* nonnull %5, i8* %10) #8
  %11 = bitcast %"class.WTF::StringTypeAdapter.254"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #8
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.254", %"class.WTF::StringTypeAdapter.254"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #8
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.254"* nonnull %3, i8* %14) #8
  %15 = bitcast %"class.WTF::StringTypeAdapter.255"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #8
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.255", %"class.WTF::StringTypeAdapter.255"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.255", %"class.WTF::StringTypeAdapter.255"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #8
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.255"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.254"* nonnull %3, i8* %1) #8
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.255", %"class.WTF::StringTypeAdapter.255"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.256"* nonnull %34, i8* %37) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #8
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.253"* %6) #8
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.254"* nonnull %5, i8* %40) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #8
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.254", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.255", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.254", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.254"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.254"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.254"* nonnull %5, i8* %10) #8
  %11 = bitcast %"class.WTF::StringTypeAdapter.254"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #8
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.254", %"class.WTF::StringTypeAdapter.254"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #8
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.254"* nonnull %3, i8* %14) #8
  %15 = bitcast %"class.WTF::StringTypeAdapter.255"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #8
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.255", %"class.WTF::StringTypeAdapter.255"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.255", %"class.WTF::StringTypeAdapter.255"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #8
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.255"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.254"* nonnull %3, i16* %1) #8
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.255", %"class.WTF::StringTypeAdapter.255"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i16, i16* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.256"* nonnull %34, i16* %37) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #8
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.253"* %6) #8
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.254"* nonnull %5, i16* %40) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #8
  ret void
}

declare void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.254"*, i8*) unnamed_addr #1

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.253"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.254", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.WTF::StringTypeAdapter.254"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #8
  %10 = getelementptr inbounds %"class.WTF::StringTypeAdapter.254", %"class.WTF::StringTypeAdapter.254"* %4, i64 0, i32 1
  %11 = getelementptr inbounds %"class.WTF::StringAppend.253", %"class.WTF::StringAppend.253"* %0, i64 0, i32 0
  %12 = bitcast %"class.WTF::StringTypeAdapter.254"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false)
  %13 = load i8*, i8** %11, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.254"* nonnull %4, i8* %13) #8
  %14 = getelementptr inbounds %"class.WTF::StringAppend.253", %"class.WTF::StringAppend.253"* %0, i64 0, i32 1, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  br label %20

20:                                               ; preds = %1, %17
  %21 = phi i32 [ %19, %17 ], [ 0, %1 ]
  %22 = load i32, i32* %10, align 8
  %23 = add i32 %22, %21
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #8
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %22
  br i1 %27, label %29, label %28

28:                                               ; preds = %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %20
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #8
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %22) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0), i8* %30, i8* %31) #8
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.5, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #8
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #8
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #8
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #8
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41)
  %42 = icmp ult i32 %23, %21
  br i1 %42, label %44, label %43

43:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* null, i8** %40, align 8
  br label %53

44:                                               ; preds = %38
  %45 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #8
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i8* %45, i8* %46) #8
  %47 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* %48, i8** %40, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %44
  %51 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.5, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #8
  %52 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #8
  br label %53

53:                                               ; preds = %43, %44, %50
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #8
  ret i32 %23
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.254"*, i8*) local_unnamed_addr #1

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.256"*, i8*) local_unnamed_addr #1

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.254"*, i16*) local_unnamed_addr #1

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.256"*, i16*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.WTF::AtomicString"* @_ZN3WTF6VectorINS_12AtomicStringELj4ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #8
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i8* %14, i8* %15) #8
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.8, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %24, i64 %25
  ret %"class.WTF::AtomicString"* %26
}

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"*) unnamed_addr #7

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5blink16SpaceSplitString4DataD1Ev(%"class.blink::SpaceSplitString::Data"*) unnamed_addr #7

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_7ElementEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Element"*
  %4 = bitcast i8* %1 to void (%"class.blink::Element"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::Element"*, %"class.blink::Visitor"*)**, void (%"class.blink::Element"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::Element"*, %"class.blink::Visitor"*)*, void (%"class.blink::Element"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::Element"*, %"class.blink::Visitor"*)*, void (%"class.blink::Element"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::Element"* %3, %"class.blink::Visitor"* %0) #8
  ret void
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i8 0, i8 2}
