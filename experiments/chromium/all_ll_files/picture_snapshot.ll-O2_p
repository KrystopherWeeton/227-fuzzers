; ModuleID = '../../third_party/blink/renderer/platform/graphics/picture_snapshot.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/picture_snapshot.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkRect = type { float, float, float, float }
%class.sk_sp.14 = type { %class.SkBBoxHierarchy* }
%class.SkBBoxHierarchy = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRecorder* }
%class.SkRecorder = type opaque
%class.sk_sp.16 = type { %class.SkRecord* }
%class.SkRecord = type opaque
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %class.SkMiniRecorder* }
%class.SkMiniRecorder = type opaque
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.23 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.24 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr.25" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"class.SkPicture::AbortCallback" = type { i32 (...)** }
%"class.WTF::Vector.60" = type { %"class.WTF::VectorBuffer.61" }
%"class.WTF::VectorBuffer.61" = type { %"class.WTF::VectorBufferBase.62" }
%"class.WTF::VectorBufferBase.62" = type { %"class.base::TimeDelta"*, i32, i32 }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.blink::JSONArray"* }
%"class.blink::JSONArray" = type { %"class.blink::JSONValue.base", %"class.WTF::Vector.71" }
%"class.blink::JSONValue.base" = type <{ i32 (...)**, i32 }>
%"class.WTF::Vector.71" = type { %"class.WTF::VectorBuffer.72" }
%"class.WTF::VectorBuffer.72" = type { %"class.WTF::VectorBufferBase.73" }
%"class.WTF::VectorBufferBase.73" = type { %"class.std::__1::unique_ptr.74"*, i32, i32 }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.blink::JSONValue"* }
%"class.blink::JSONValue" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.blink::PictureSnapshot" = type { %"class.WTF::RefCounted", %class.sk_sp }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%class.sk_sp = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.1", [7 x i8] }>
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl.3" }
%"struct.std::__1::__cxx_atomic_impl.3" = type { %"struct.std::__1::__cxx_atomic_base_impl.4" }
%"struct.std::__1::__cxx_atomic_base_impl.4" = type { i8 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %class.scoped_refptr.5*, i32, i32 }
%class.scoped_refptr.5 = type { %"struct.blink::PictureSnapshot::TilePictureStream"* }
%"struct.blink::PictureSnapshot::TilePictureStream" = type { %"class.WTF::RefCounted.6", %"class.blink::FloatPoint", %class.sk_sp.8 }
%"class.WTF::RefCounted.6" = type { %"class.base::RefCounted.7" }
%"class.base::RefCounted.7" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::FloatPoint" = type { float, float }
%class.sk_sp.8 = type { %class.SkPicture* }
%"class.WTF::Vector.9" = type { %"class.WTF::VectorBuffer.10" }
%"class.WTF::VectorBuffer.10" = type { %"class.WTF::VectorBufferBase.11" }
%"class.WTF::VectorBufferBase.11" = type { %class.sk_sp.8*, i32, i32 }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatSize" = type { float, float }
%class.SkPictureRecorder = type { i8, %struct.SkRect, %class.sk_sp.14, %"class.std::__1::unique_ptr", %class.sk_sp.16, %"class.std::__1::unique_ptr.17" }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" }
%class.SkBBHFactory = type { i32 (...)** }
%"class.WTF::Vector.37" = type { %"class.WTF::VectorBuffer.38" }
%"class.WTF::VectorBuffer.38" = type { %"class.WTF::VectorBufferBase.39" }
%"class.WTF::VectorBufferBase.39" = type { i8*, i32, i32 }
%class.SkBitmap = type { %class.sk_sp.42, %class.SkPixmap, %class.sk_sp.49 }
%class.sk_sp.42 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.43, i32, i32 }
%class.sk_sp.43 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.44" }
%"struct.std::__1::atomic.44" = type { %"struct.std::__1::__atomic_base.45" }
%"struct.std::__1::__atomic_base.45" = type { %"struct.std::__1::__atomic_base.46" }
%"struct.std::__1::__atomic_base.46" = type { %"struct.std::__1::__cxx_atomic_impl.47" }
%"struct.std::__1::__cxx_atomic_impl.47" = type { %"struct.std::__1::__cxx_atomic_base_impl.48" }
%"struct.std::__1::__cxx_atomic_base_impl.48" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.49 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.blink::ReplayingCanvas" = type <{ %"class.blink::InterceptingCanvas", %"class.SkPicture::AbortCallback", i32, i32, i8, [7 x i8] }>
%"class.blink::InterceptingCanvas" = type { %"class.blink::InterceptingCanvasBase" }
%"class.blink::InterceptingCanvasBase" = type { %class.SkCanvas, i32, i32 }
%"struct.SkPngEncoder::Options" = type { i32, i32, %class.sk_sp.55 }
%class.sk_sp.55 = type { %class.SkDataTable* }
%class.SkDataTable = type { %class.SkRefCnt.base, i32, i64, %union.anon.56, void (i8*)*, i8* }
%union.anon.56 = type { %"struct.SkDataTable::Dir"* }
%"struct.SkDataTable::Dir" = type { i8*, i64 }
%class.SkPaint = type <{ %class.sk_sp.50, %class.sk_sp.51, %class.sk_sp.52, %class.sk_sp.53, %class.sk_sp.54, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.50 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.sk_sp.51 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.52 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.53 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.54 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%"class.WTF::Vector.57" = type { %"class.WTF::VectorBuffer.58" }
%"class.WTF::VectorBuffer.58" = type { %"class.WTF::VectorBufferBase.59" }
%"class.WTF::VectorBufferBase.59" = type { %"class.WTF::Vector.60"*, i32, i32 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.87 }
%union.anon.87 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::ProfilingCanvas" = type { %"class.blink::InterceptingCanvas.67", %"class.WTF::Vector.60"* }
%"class.blink::InterceptingCanvas.67" = type { %"class.blink::InterceptingCanvasBase" }
%"class.blink::LoggingCanvas" = type { %"class.blink::InterceptingCanvasBase", %"class.std::__1::unique_ptr.68" }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF6VectorI5sk_spI9SkPictureELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeI5sk_spI9SkPictureEEEmm = comdat any

$_ZN3WTF6VectorI5sk_spI9SkPictureELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_ = comdat any

$_ZN3WTF6VectorI5sk_spI9SkPictureELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZNK3WTF6VectorI13scoped_refptrIN5blink15PictureSnapshot17TilePictureStreamEELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6VectorIN4base9TimeDeltaELj0ES0_EEEEmm = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN4base9TimeDeltaEEEmm = comdat any

$_ZN3WTF6VectorINS0_IN4base9TimeDeltaELj0ENS_18PartitionAllocatorEEELj0ES3_E2atEj = comdat any

$_ZN3WTF6VectorINS0_IN4base9TimeDeltaELj0ENS_18PartitionAllocatorEEELj0ES3_E14AppendSlowCaseIS4_EEvOT_ = comdat any

$_ZN3WTF6VectorINS0_IN4base9TimeDeltaELj0ENS_18PartitionAllocatorEEELj0ES3_E16ReallocateBufferEj = comdat any

@__const._ZN5blink15PictureSnapshot4LoadERKN3WTF6VectorI13scoped_refptrINS0_17TilePictureStreamEELj0ENS1_18PartitionAllocatorEEE.recorder = private unnamed_addr constant { i8, [3 x i8], %struct.SkRect, [4 x i8], %class.sk_sp.14, %"class.std::__1::unique_ptr", %class.sk_sp.16, %"class.std::__1::unique_ptr.17" } { i8 -86, [3 x i8] c"\AA\AA\AA", %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, [4 x i8] c"\AA\AA\AA\AA", %class.sk_sp.14 { %class.SkBBoxHierarchy* inttoptr (i64 -6148914691236517206 to %class.SkBBoxHierarchy*) }, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { %class.SkRecorder* inttoptr (i64 -6148914691236517206 to %class.SkRecorder*) } } }, %class.sk_sp.16 { %class.SkRecord* inttoptr (i64 -6148914691236517206 to %class.SkRecord*) }, %"class.std::__1::unique_ptr.17" { %"class.std::__1::__compressed_pair.18" { %"struct.std::__1::__compressed_pair_elem.19" { %class.SkMiniRecorder* inttoptr (i64 -6148914691236517206 to %class.SkMiniRecorder*) } } } }, align 8
@__const._ZNK5blink15PictureSnapshot6ReplayEjjd.canvas = private unnamed_addr constant <{ { { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" }, i32, i32 } }, %"class.SkPicture::AbortCallback", i32, i32, i8, [7 x i8] }> <{ { { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" }, i32, i32 } } { { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" }, i32, i32 } { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" } { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**), %class.SkDeque { i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), %"struct.SkDeque::Block"* inttoptr (i64 -6148914691236517206 to %"struct.SkDeque::Block"*), %"struct.SkDeque::Block"* inttoptr (i64 -6148914691236517206 to %"struct.SkDeque::Block"*), i64 -6148914691236517206, i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766 }, %"class.SkCanvas::MCRec"* inttoptr (i64 -6148914691236517206 to %"class.SkCanvas::MCRec"*), %class.sk_sp.23 { %class.SkMarkerStack* inttoptr (i64 -6148914691236517206 to %class.SkMarkerStack*) }, [384 x i64] [i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206], %class.sk_sp.24 { %class.SkBaseDevice* inttoptr (i64 -6148914691236517206 to %class.SkBaseDevice*) }, %class.SkSurfaceProps { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::unique_ptr.25" { %"class.std::__1::__compressed_pair.26" { %"struct.std::__1::__compressed_pair_elem.27" { %class.SkRasterHandleAllocator* inttoptr (i64 -6148914691236517206 to %class.SkRasterHandleAllocator*) } } }, %class.SkSurface_Base* inttoptr (i64 -6148914691236517206 to %class.SkSurface_Base*), %struct.SkIRect { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %"class.std::__1::unique_ptr.31" { %"class.std::__1::__compressed_pair.32" { %"struct.std::__1::__compressed_pair_elem.33" { %class.SkGlyphRunBuilder* inttoptr (i64 -6148914691236517206 to %class.SkGlyphRunBuilder*) } } } }, i32 -1431655766, i32 -1431655766 } }, %"class.SkPicture::AbortCallback" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, align 8
@__const._ZNK5blink15PictureSnapshot7ProfileEjN4base9TimeDeltaEPKNS_9FloatRectE.canvas = private unnamed_addr constant { { { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" }, i32, i32 } }, %"class.WTF::Vector.60"* } { { { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" }, i32, i32 } } { { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" }, i32, i32 } { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" } { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**), %class.SkDeque { i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), %"struct.SkDeque::Block"* inttoptr (i64 -6148914691236517206 to %"struct.SkDeque::Block"*), %"struct.SkDeque::Block"* inttoptr (i64 -6148914691236517206 to %"struct.SkDeque::Block"*), i64 -6148914691236517206, i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766 }, %"class.SkCanvas::MCRec"* inttoptr (i64 -6148914691236517206 to %"class.SkCanvas::MCRec"*), %class.sk_sp.23 { %class.SkMarkerStack* inttoptr (i64 -6148914691236517206 to %class.SkMarkerStack*) }, [384 x i64] [i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206], %class.sk_sp.24 { %class.SkBaseDevice* inttoptr (i64 -6148914691236517206 to %class.SkBaseDevice*) }, %class.SkSurfaceProps { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::unique_ptr.25" { %"class.std::__1::__compressed_pair.26" { %"struct.std::__1::__compressed_pair_elem.27" { %class.SkRasterHandleAllocator* inttoptr (i64 -6148914691236517206 to %class.SkRasterHandleAllocator*) } } }, %class.SkSurface_Base* inttoptr (i64 -6148914691236517206 to %class.SkSurface_Base*), %struct.SkIRect { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %"class.std::__1::unique_ptr.31" { %"class.std::__1::__compressed_pair.32" { %"struct.std::__1::__compressed_pair_elem.33" { %class.SkGlyphRunBuilder* inttoptr (i64 -6148914691236517206 to %class.SkGlyphRunBuilder*) } } } }, i32 -1431655766, i32 -1431655766 } }, %"class.WTF::Vector.60"* inttoptr (i64 -6148914691236517206 to %"class.WTF::Vector.60"*) }, align 8
@__const._ZNK5blink15PictureSnapshot18SnapshotCommandLogEv.canvas = private unnamed_addr constant { { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" }, i32, i32 }, %"class.std::__1::unique_ptr.68" } { { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" }, i32, i32 } { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" } { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**), %class.SkDeque { i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), %"struct.SkDeque::Block"* inttoptr (i64 -6148914691236517206 to %"struct.SkDeque::Block"*), %"struct.SkDeque::Block"* inttoptr (i64 -6148914691236517206 to %"struct.SkDeque::Block"*), i64 -6148914691236517206, i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766 }, %"class.SkCanvas::MCRec"* inttoptr (i64 -6148914691236517206 to %"class.SkCanvas::MCRec"*), %class.sk_sp.23 { %class.SkMarkerStack* inttoptr (i64 -6148914691236517206 to %class.SkMarkerStack*) }, [384 x i64] [i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206], %class.sk_sp.24 { %class.SkBaseDevice* inttoptr (i64 -6148914691236517206 to %class.SkBaseDevice*) }, %class.SkSurfaceProps { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::unique_ptr.25" { %"class.std::__1::__compressed_pair.26" { %"struct.std::__1::__compressed_pair_elem.27" { %class.SkRasterHandleAllocator* inttoptr (i64 -6148914691236517206 to %class.SkRasterHandleAllocator*) } } }, %class.SkSurface_Base* inttoptr (i64 -6148914691236517206 to %class.SkSurface_Base*), %struct.SkIRect { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %"class.std::__1::unique_ptr.31" { %"class.std::__1::__compressed_pair.32" { %"struct.std::__1::__compressed_pair_elem.33" { %class.SkGlyphRunBuilder* inttoptr (i64 -6148914691236517206 to %class.SkGlyphRunBuilder*) } } } }, i32 -1431655766, i32 -1431655766 }, %"class.std::__1::unique_ptr.68" { %"class.std::__1::__compressed_pair.69" { %"struct.std::__1::__compressed_pair_elem.70" { %"class.blink::JSONArray"* inttoptr (i64 -6148914691236517206 to %"class.blink::JSONArray"*) } } } }, align 8
@.str = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"!is_inf() || (delta_ == other.delta_)\00", align 1
@_ZTVN5blink13LoggingCanvasE = external unnamed_addr constant { [56 x i8*] }, align 8
@.str.2 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.4 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.5 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI5sk_spI9SkPictureEEEPKcv = private unnamed_addr constant [64 x i8] c"const char *WTF::GetStringWithTypeName() [T = sk_sp<SkPicture>]\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6VectorIN4base9TimeDeltaELj0ENS_18PartitionAllocatorEEEEEPKcv = private unnamed_addr constant [104 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::Vector<base::TimeDelta, 0, WTF::PartitionAllocator>]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN4base9TimeDeltaEEEPKcv = private unnamed_addr constant [63 x i8] c"const char *WTF::GetStringWithTypeName() [T = base::TimeDelta]\00", align 1

@_ZN5blink15PictureSnapshotC1E5sk_spIK9SkPictureE = hidden unnamed_addr alias void (%"class.blink::PictureSnapshot"*, %class.sk_sp*), void (%"class.blink::PictureSnapshot"*, %class.sk_sp*)* @_ZN5blink15PictureSnapshotC2E5sk_spIK9SkPictureE

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink15PictureSnapshotC2E5sk_spIK9SkPictureE(%"class.blink::PictureSnapshot"* nocapture, %class.sk_sp* nocapture) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::PictureSnapshot", %"class.blink::PictureSnapshot"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.blink::PictureSnapshot", %"class.blink::PictureSnapshot"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %6 = bitcast %class.sk_sp* %1 to i64*
  %7 = load i64, i64* %6, align 8
  store %class.SkPicture* null, %class.SkPicture** %5, align 8
  %8 = bitcast %class.sk_sp* %4 to i64*
  store i64 %7, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::PictureSnapshot"* @_ZN5blink15PictureSnapshot4LoadERKN3WTF6VectorI13scoped_refptrINS0_17TilePictureStreamEELj0ENS1_18PartitionAllocatorEEE(%"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %2 = alloca { <2 x float>, <2 x float> }, align 8
  %3 = alloca %"class.WTF::Vector.9", align 8
  %4 = alloca %"class.blink::FloatRect", align 4
  %5 = alloca %class.sk_sp.8, align 8
  %6 = alloca %"class.blink::FloatRect", align 4
  %7 = alloca %class.SkPictureRecorder, align 8
  %8 = alloca %class.sk_sp.8, align 8
  %9 = bitcast %"class.WTF::Vector.9"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %3, i64 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %3, i64 0, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %3, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 16, i1 false) #9
  %13 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %25, label %16, !prof !2

16:                                               ; preds = %1
  %17 = zext i32 %14 to i64
  %18 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI5sk_spI9SkPictureEEEmm(i64 %17) #9
  %19 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %18, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI5sk_spI9SkPictureEEEPKcv, i64 0, i64 0)) #9
  %20 = ptrtoint i8* %19 to i64
  %21 = bitcast %"class.WTF::Vector.9"* %3 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = lshr i64 %18, 3
  %23 = trunc i64 %22 to i32
  store i32 %23, i32* %11, align 8
  %24 = load i32, i32* %13, align 4
  br label %25

25:                                               ; preds = %1, %16
  %26 = phi i32 [ 0, %1 ], [ %24, %16 ]
  %27 = bitcast %"class.blink::FloatRect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #9
  %28 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %4, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %4, i64 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %4, i64 0, i32 1, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %27, i8 0, i64 16, i1 false) #9
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load %class.scoped_refptr.5*, %class.scoped_refptr.5** %31, align 8
  %33 = zext i32 %26 to i64
  %34 = getelementptr inbounds %class.scoped_refptr.5, %class.scoped_refptr.5* %32, i64 %33
  %35 = icmp eq i32 %26, 0
  br i1 %35, label %119, label %36

36:                                               ; preds = %25
  %37 = bitcast %class.sk_sp.8* %5 to i8*
  %38 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %5, i64 0, i32 0
  %39 = bitcast %class.sk_sp.8* %5 to i64*
  %40 = bitcast %"class.blink::FloatRect"* %6 to i8*
  %41 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %6, i64 0, i32 0, i32 0
  %42 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %6, i64 0, i32 0, i32 1
  %43 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %6, i64 0, i32 1, i32 0
  %44 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %6, i64 0, i32 1, i32 1
  %45 = bitcast %"class.blink::FloatRect"* %6 to i8*
  br label %46

46:                                               ; preds = %36, %102
  %47 = phi %class.scoped_refptr.5* [ %32, %36 ], [ %103, %102 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #9
  store %class.SkPicture* inttoptr (i64 -6148914691236517206 to %class.SkPicture*), %class.SkPicture** %38, align 8
  %48 = getelementptr inbounds %class.scoped_refptr.5, %class.scoped_refptr.5* %47, i64 0, i32 0
  %49 = load %"struct.blink::PictureSnapshot::TilePictureStream"*, %"struct.blink::PictureSnapshot::TilePictureStream"** %48, align 8
  %50 = getelementptr inbounds %"struct.blink::PictureSnapshot::TilePictureStream", %"struct.blink::PictureSnapshot::TilePictureStream"* %49, i64 0, i32 2
  %51 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %50, i64 0, i32 0
  %52 = bitcast %class.sk_sp.8* %50 to i64*
  %53 = load i64, i64* %52, align 8
  store %class.SkPicture* null, %class.SkPicture** %51, align 8
  store i64 %53, i64* %39, align 8
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %105, label %55

55:                                               ; preds = %46
  %56 = inttoptr i64 %53 to %class.SkPicture*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #9
  %57 = inttoptr i64 %53 to { <2 x float>, <2 x float> } (%class.SkPicture*)***
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %45, i8 -1, i64 16, i1 false)
  %58 = load { <2 x float>, <2 x float> } (%class.SkPicture*)**, { <2 x float>, <2 x float> } (%class.SkPicture*)*** %57, align 8
  %59 = getelementptr inbounds { <2 x float>, <2 x float> } (%class.SkPicture*)*, { <2 x float>, <2 x float> } (%class.SkPicture*)** %58, i64 4
  %60 = load { <2 x float>, <2 x float> } (%class.SkPicture*)*, { <2 x float>, <2 x float> } (%class.SkPicture*)** %59, align 8
  %61 = call { <2 x float>, <2 x float> } %60(%class.SkPicture* nonnull %56) #9
  %62 = extractvalue { <2 x float>, <2 x float> } %61, 0
  %63 = extractvalue { <2 x float>, <2 x float> } %61, 1
  %64 = extractelement <2 x float> %62, i32 0
  %65 = extractelement <2 x float> %62, i32 1
  %66 = extractelement <2 x float> %63, i32 0
  %67 = fsub float %66, %64
  %68 = extractelement <2 x float> %63, i32 1
  %69 = fsub float %68, %65
  store float %64, float* %41, align 4
  store float %65, float* %42, align 4
  store float %67, float* %43, align 4
  store float %69, float* %44, align 4
  %70 = load %"struct.blink::PictureSnapshot::TilePictureStream"*, %"struct.blink::PictureSnapshot::TilePictureStream"** %48, align 8
  %71 = getelementptr inbounds %"struct.blink::PictureSnapshot::TilePictureStream", %"struct.blink::PictureSnapshot::TilePictureStream"* %70, i64 0, i32 1, i32 0
  %72 = load float, float* %71, align 4
  %73 = getelementptr inbounds %"struct.blink::PictureSnapshot::TilePictureStream", %"struct.blink::PictureSnapshot::TilePictureStream"* %70, i64 0, i32 1, i32 1
  %74 = load float, float* %73, align 4
  %75 = fadd float %64, %72
  store float %75, float* %41, align 4
  %76 = fadd float %65, %74
  store float %76, float* %42, align 4
  call void @_ZN5blink9FloatRect5UniteERKS0_(%"class.blink::FloatRect"* nonnull %4, %"class.blink::FloatRect"* nonnull dereferenceable(16) %6) #9
  %77 = load i32, i32* %12, align 4
  %78 = load i32, i32* %11, align 8
  %79 = icmp eq i32 %77, %78
  br i1 %79, label %88, label %80, !prof !2

80:                                               ; preds = %55
  %81 = load %class.sk_sp.8*, %class.sk_sp.8** %10, align 8
  %82 = zext i32 %77 to i64
  %83 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %81, i64 %82
  %84 = load i64, i64* %39, align 8
  store %class.SkPicture* null, %class.SkPicture** %38, align 8
  %85 = bitcast %class.sk_sp.8* %83 to i64*
  store i64 %84, i64* %85, align 8
  %86 = load i32, i32* %12, align 4
  %87 = add i32 %86, 1
  store i32 %87, i32* %12, align 4
  br label %89

88:                                               ; preds = %55
  call void @_ZN3WTF6VectorI5sk_spI9SkPictureELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector.9"* nonnull %3, %class.sk_sp.8* nonnull dereferenceable(8) %5) #9
  br label %89

89:                                               ; preds = %88, %80
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #9
  %90 = load %class.SkPicture*, %class.SkPicture** %38, align 8
  %91 = icmp eq %class.SkPicture* %90, null
  br i1 %91, label %102, label %92

92:                                               ; preds = %89
  %93 = getelementptr inbounds %class.SkPicture, %class.SkPicture* %90, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = atomicrmw add i32* %93, i32 -1 acq_rel
  %95 = icmp eq i32 %94, 1
  br i1 %95, label %96, label %102

96:                                               ; preds = %92
  %97 = bitcast %class.SkPicture* %90 to %class.SkRefCntBase*
  %98 = bitcast %class.SkPicture* %90 to void (%class.SkRefCntBase*)***
  %99 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %98, align 8
  %100 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %99, i64 2
  %101 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %100, align 8
  call void %101(%class.SkRefCntBase* nonnull %97) #9
  br label %102

102:                                              ; preds = %89, %92, %96
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #9
  %103 = getelementptr inbounds %class.scoped_refptr.5, %class.scoped_refptr.5* %47, i64 1
  %104 = icmp eq %class.scoped_refptr.5* %103, %34
  br i1 %104, label %106, label %46

105:                                              ; preds = %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #9
  br label %169

106:                                              ; preds = %102
  %107 = load i32, i32* %13, align 4
  %108 = icmp eq i32 %107, 1
  br i1 %108, label %109, label %119

109:                                              ; preds = %106
  %110 = call noalias i8* @malloc(i64 16) #9
  %111 = bitcast i8* %110 to %"class.blink::PictureSnapshot"*
  %112 = call dereferenceable(8) %class.sk_sp.8* @_ZN3WTF6VectorI5sk_spI9SkPictureELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.9"* nonnull %3, i32 0) #9
  %113 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %112, i64 0, i32 0
  %114 = bitcast %class.sk_sp.8* %112 to i64*
  %115 = load i64, i64* %114, align 8
  store %class.SkPicture* null, %class.SkPicture** %113, align 8
  %116 = bitcast i8* %110 to i32*
  store i32 1, i32* %116, align 4
  %117 = getelementptr inbounds i8, i8* %110, i64 8
  %118 = bitcast i8* %117 to i64*
  store i64 %115, i64* %118, align 8
  br label %169

119:                                              ; preds = %25, %106
  %120 = getelementptr inbounds %class.SkPictureRecorder, %class.SkPictureRecorder* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %120) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %120, i8* align 8 getelementptr inbounds ({ i8, [3 x i8], %struct.SkRect, [4 x i8], %class.sk_sp.14, %"class.std::__1::unique_ptr", %class.sk_sp.16, %"class.std::__1::unique_ptr.17" }, { i8, [3 x i8], %struct.SkRect, [4 x i8], %class.sk_sp.14, %"class.std::__1::unique_ptr", %class.sk_sp.16, %"class.std::__1::unique_ptr.17" }* @__const._ZN5blink15PictureSnapshot4LoadERKN3WTF6VectorI13scoped_refptrINS0_17TilePictureStreamEELj0ENS1_18PartitionAllocatorEEE.recorder, i64 0, i32 0), i64 56, i1 false)
  call void @_ZN17SkPictureRecorderC1Ev(%class.SkPictureRecorder* nonnull %7) #9
  %121 = bitcast float* %30 to i64*
  %122 = load i64, i64* %121, align 4
  %123 = bitcast { <2 x float>, <2 x float> }* %2 to %struct.SkRect*
  %124 = bitcast { <2 x float>, <2 x float> }* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %124) #9
  %125 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %2, i64 0, i32 0
  store <2 x float> zeroinitializer, <2 x float>* %125, align 8
  %126 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %2, i64 0, i32 1
  %127 = bitcast <2 x float>* %126 to i64*
  store i64 %122, i64* %127, align 8
  %128 = call %class.SkCanvas* @_ZN17SkPictureRecorder14beginRecordingERK6SkRectP12SkBBHFactory(%class.SkPictureRecorder* nonnull %7, %struct.SkRect* nonnull dereferenceable(16) %123, %class.SkBBHFactory* null) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %124) #9
  %129 = load i32, i32* %12, align 4
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %140

131:                                              ; preds = %140, %119
  %132 = call noalias i8* @malloc(i64 16) #9
  %133 = bitcast i8* %132 to %"class.blink::PictureSnapshot"*
  %134 = bitcast %class.sk_sp.8* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %134) #9
  call void @_ZN17SkPictureRecorder24finishRecordingAsPictureEv(%class.sk_sp.8* nonnull sret %8, %class.SkPictureRecorder* nonnull %7) #9
  %135 = bitcast %class.sk_sp.8* %8 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = bitcast i8* %132 to i32*
  store i32 1, i32* %137, align 4
  %138 = getelementptr inbounds i8, i8* %132, i64 8
  %139 = bitcast i8* %138 to i64*
  store i64 %136, i64* %139, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %134) #9
  call void @_ZN17SkPictureRecorderD1Ev(%class.SkPictureRecorder* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %120) #9
  br label %169

140:                                              ; preds = %119, %140
  %141 = phi i64 [ %165, %140 ], [ 0, %119 ]
  %142 = call i32 @_ZN8SkCanvas4saveEv(%class.SkCanvas* %128) #9
  %143 = trunc i64 %141 to i32
  %144 = call dereferenceable(8) %class.scoped_refptr.5* @_ZNK3WTF6VectorI13scoped_refptrIN5blink15PictureSnapshot17TilePictureStreamEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %0, i32 %143) #9
  %145 = getelementptr inbounds %class.scoped_refptr.5, %class.scoped_refptr.5* %144, i64 0, i32 0
  %146 = load %"struct.blink::PictureSnapshot::TilePictureStream"*, %"struct.blink::PictureSnapshot::TilePictureStream"** %145, align 8
  %147 = getelementptr inbounds %"struct.blink::PictureSnapshot::TilePictureStream", %"struct.blink::PictureSnapshot::TilePictureStream"* %146, i64 0, i32 1, i32 0
  %148 = load float, float* %147, align 4
  %149 = load float, float* %28, align 4
  %150 = fsub float %148, %149
  %151 = call dereferenceable(8) %class.scoped_refptr.5* @_ZNK3WTF6VectorI13scoped_refptrIN5blink15PictureSnapshot17TilePictureStreamEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %0, i32 %143) #9
  %152 = getelementptr inbounds %class.scoped_refptr.5, %class.scoped_refptr.5* %151, i64 0, i32 0
  %153 = load %"struct.blink::PictureSnapshot::TilePictureStream"*, %"struct.blink::PictureSnapshot::TilePictureStream"** %152, align 8
  %154 = getelementptr inbounds %"struct.blink::PictureSnapshot::TilePictureStream", %"struct.blink::PictureSnapshot::TilePictureStream"* %153, i64 0, i32 1, i32 1
  %155 = load float, float* %154, align 4
  %156 = load float, float* %29, align 4
  %157 = fsub float %155, %156
  call void @_ZN8SkCanvas9translateEff(%class.SkCanvas* %128, float %150, float %157) #9
  %158 = call dereferenceable(8) %class.sk_sp.8* @_ZN3WTF6VectorI5sk_spI9SkPictureELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.9"* nonnull %3, i32 %143) #9
  %159 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %158, i64 0, i32 0
  %160 = load %class.SkPicture*, %class.SkPicture** %159, align 8
  %161 = bitcast %class.SkPicture* %160 to void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)***
  %162 = load void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)**, void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)*** %161, align 8
  %163 = getelementptr inbounds void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)*, void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)** %162, i64 3
  %164 = load void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)*, void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)** %163, align 8
  call void %164(%class.SkPicture* %160, %class.SkCanvas* %128, %"class.SkPicture::AbortCallback"* null) #9
  call void @_ZN8SkCanvas7restoreEv(%class.SkCanvas* %128) #9
  %165 = add nuw nsw i64 %141, 1
  %166 = load i32, i32* %12, align 4
  %167 = zext i32 %166 to i64
  %168 = icmp ult i64 %165, %167
  br i1 %168, label %140, label %131

169:                                              ; preds = %105, %131, %109
  %170 = phi %"class.blink::PictureSnapshot"* [ %111, %109 ], [ %133, %131 ], [ null, %105 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #9
  %171 = load %class.sk_sp.8*, %class.sk_sp.8** %10, align 8
  %172 = icmp eq %class.sk_sp.8* %171, null
  br i1 %172, label %203, label %173, !prof !3

173:                                              ; preds = %169
  %174 = bitcast %class.sk_sp.8* %171 to i8*
  %175 = load i32, i32* %12, align 4
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %201, label %177, !prof !2

177:                                              ; preds = %173
  %178 = zext i32 %175 to i64
  %179 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %171, i64 %178
  br label %180

180:                                              ; preds = %195, %177
  %181 = phi %class.sk_sp.8* [ %196, %195 ], [ %171, %177 ]
  %182 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %181, i64 0, i32 0
  %183 = load %class.SkPicture*, %class.SkPicture** %182, align 8
  %184 = icmp eq %class.SkPicture* %183, null
  br i1 %184, label %195, label %185

185:                                              ; preds = %180
  %186 = getelementptr inbounds %class.SkPicture, %class.SkPicture* %183, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %187 = atomicrmw add i32* %186, i32 -1 acq_rel
  %188 = icmp eq i32 %187, 1
  br i1 %188, label %189, label %195

189:                                              ; preds = %185
  %190 = bitcast %class.SkPicture* %183 to %class.SkRefCntBase*
  %191 = bitcast %class.SkPicture* %183 to void (%class.SkRefCntBase*)***
  %192 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %191, align 8
  %193 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %192, i64 2
  %194 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %193, align 8
  call void %194(%class.SkRefCntBase* nonnull %190) #9
  br label %195

195:                                              ; preds = %189, %185, %180
  %196 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %181, i64 1
  %197 = icmp eq %class.sk_sp.8* %196, %179
  br i1 %197, label %198, label %180

198:                                              ; preds = %195
  store i32 0, i32* %12, align 4
  %199 = bitcast %"class.WTF::Vector.9"* %3 to i8**
  %200 = load i8*, i8** %199, align 8
  br label %201

201:                                              ; preds = %198, %173
  %202 = phi i8* [ %200, %198 ], [ %174, %173 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %202) #9
  store %class.sk_sp.8* null, %class.sk_sp.8** %10, align 8
  br label %203

203:                                              ; preds = %169, %201
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #9
  ret %"class.blink::PictureSnapshot"* %170
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN5blink9FloatRect5UniteERKS0_(%"class.blink::FloatRect"*, %"class.blink::FloatRect"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN17SkPictureRecorderC1Ev(%class.SkPictureRecorder*) unnamed_addr #3

declare i32 @_ZN8SkCanvas4saveEv(%class.SkCanvas*) local_unnamed_addr #3

declare void @_ZN8SkCanvas9translateEff(%class.SkCanvas*, float, float) local_unnamed_addr #3

declare void @_ZN8SkCanvas7restoreEv(%class.SkCanvas*) local_unnamed_addr #3

declare void @_ZN17SkPictureRecorder24finishRecordingAsPictureEv(%class.sk_sp.8* sret, %class.SkPictureRecorder*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN17SkPictureRecorderD1Ev(%class.SkPictureRecorder*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink15PictureSnapshot7IsEmptyEv(%"class.blink::PictureSnapshot"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::PictureSnapshot", %"class.blink::PictureSnapshot"* %0, i64 0, i32 1, i32 0
  %3 = load %class.SkPicture*, %class.SkPicture** %2, align 8
  %4 = bitcast %class.SkPicture* %3 to { <2 x float>, <2 x float> } (%class.SkPicture*)***
  %5 = load { <2 x float>, <2 x float> } (%class.SkPicture*)**, { <2 x float>, <2 x float> } (%class.SkPicture*)*** %4, align 8
  %6 = getelementptr inbounds { <2 x float>, <2 x float> } (%class.SkPicture*)*, { <2 x float>, <2 x float> } (%class.SkPicture*)** %5, i64 4
  %7 = load { <2 x float>, <2 x float> } (%class.SkPicture*)*, { <2 x float>, <2 x float> } (%class.SkPicture*)** %6, align 8
  %8 = tail call { <2 x float>, <2 x float> } %7(%class.SkPicture* %3) #9
  %9 = extractvalue { <2 x float>, <2 x float> } %8, 0
  %10 = extractvalue { <2 x float>, <2 x float> } %8, 1
  %11 = extractelement <2 x float> %9, i32 0
  %12 = extractelement <2 x float> %10, i32 0
  %13 = fcmp olt float %11, %12
  br i1 %13, label %14, label %18

14:                                               ; preds = %1
  %15 = extractelement <2 x float> %9, i32 1
  %16 = extractelement <2 x float> %10, i32 1
  %17 = fcmp uge float %15, %16
  br label %18

18:                                               ; preds = %1, %14
  %19 = phi i1 [ true, %1 ], [ %17, %14 ]
  ret i1 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink15PictureSnapshot6ReplayEjjd(%"class.WTF::Vector.37"* noalias nocapture sret, %"class.blink::PictureSnapshot"* nocapture readonly, i32, i32, double) local_unnamed_addr #1 align 2 {
  %6 = alloca %class.SkBitmap, align 8
  %7 = alloca %struct.SkImageInfo, align 16
  %8 = alloca %"class.blink::ReplayingCanvas", align 8
  %9 = alloca %class.SkBitmap, align 8
  %10 = alloca %"class.WTF::Vector.37", align 8
  %11 = alloca %class.SkPixmap, align 8
  %12 = alloca %"struct.SkPngEncoder::Options", align 8
  %13 = getelementptr inbounds %"class.blink::PictureSnapshot", %"class.blink::PictureSnapshot"* %1, i64 0, i32 1, i32 0
  %14 = load %class.SkPicture*, %class.SkPicture** %13, align 8
  %15 = bitcast %class.SkPicture* %14 to { <2 x float>, <2 x float> } (%class.SkPicture*)***
  %16 = load { <2 x float>, <2 x float> } (%class.SkPicture*)**, { <2 x float>, <2 x float> } (%class.SkPicture*)*** %15, align 8
  %17 = getelementptr inbounds { <2 x float>, <2 x float> } (%class.SkPicture*)*, { <2 x float>, <2 x float> } (%class.SkPicture*)** %16, i64 4
  %18 = load { <2 x float>, <2 x float> } (%class.SkPicture*)*, { <2 x float>, <2 x float> } (%class.SkPicture*)** %17, align 8
  %19 = tail call { <2 x float>, <2 x float> } %18(%class.SkPicture* %14) #9
  %20 = extractvalue { <2 x float>, <2 x float> } %19, 0
  %21 = extractvalue { <2 x float>, <2 x float> } %19, 1
  %22 = extractelement <2 x float> %20, i32 0
  %23 = tail call float @llvm.floor.f32(float %22) #9
  %24 = fcmp olt float %23, 0x41DFFFFFE0000000
  %25 = select i1 %24, float %23, float 0x41DFFFFFE0000000
  %26 = fcmp ogt float %25, 0xC1DFFFFFE0000000
  %27 = select i1 %26, float %25, float 0xC1DFFFFFE0000000
  %28 = fptosi float %27 to i32
  %29 = extractelement <2 x float> %20, i32 1
  %30 = tail call float @llvm.floor.f32(float %29) #9
  %31 = fcmp olt float %30, 0x41DFFFFFE0000000
  %32 = select i1 %31, float %30, float 0x41DFFFFFE0000000
  %33 = fcmp ogt float %32, 0xC1DFFFFFE0000000
  %34 = select i1 %33, float %32, float 0xC1DFFFFFE0000000
  %35 = fptosi float %34 to i32
  %36 = extractelement <2 x float> %21, i32 0
  %37 = tail call float @llvm.ceil.f32(float %36) #9
  %38 = fcmp olt float %37, 0x41DFFFFFE0000000
  %39 = select i1 %38, float %37, float 0x41DFFFFFE0000000
  %40 = fcmp ogt float %39, 0xC1DFFFFFE0000000
  %41 = select i1 %40, float %39, float 0xC1DFFFFFE0000000
  %42 = fptosi float %41 to i32
  %43 = extractelement <2 x float> %21, i32 1
  %44 = tail call float @llvm.ceil.f32(float %43) #9
  %45 = fcmp olt float %44, 0x41DFFFFFE0000000
  %46 = select i1 %45, float %44, float 0x41DFFFFFE0000000
  %47 = fcmp ogt float %46, 0xC1DFFFFFE0000000
  %48 = select i1 %47, float %46, float 0xC1DFFFFFE0000000
  %49 = fptosi float %48 to i32
  %50 = sub i32 %42, %28
  %51 = sitofp i32 %50 to double
  %52 = fmul double %51, %4
  %53 = tail call double @llvm.ceil.f64(double %52)
  %54 = fptosi double %53 to i32
  %55 = sub i32 %49, %35
  %56 = sitofp i32 %55 to double
  %57 = fmul double %56, %4
  %58 = tail call double @llvm.ceil.f64(double %57)
  %59 = fptosi double %58 to i32
  %60 = bitcast %class.SkBitmap* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %60) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %60, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %6) #9
  %61 = bitcast %struct.SkImageInfo* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %61) #9
  %62 = zext i32 %59 to i64
  %63 = shl nuw i64 %62, 32
  %64 = zext i32 %54 to i64
  %65 = or i64 %63, %64
  %66 = bitcast %struct.SkImageInfo* %7 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8589934598>, <2 x i64>* %66, align 16, !alias.scope !4
  %67 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 1
  %68 = bitcast %struct.SkISize* %67 to i64*
  store i64 %65, i64* %68, align 16, !alias.scope !4
  call void @_ZN8SkBitmap11allocPixelsERK11SkImageInfo(%class.SkBitmap* nonnull %6, %struct.SkImageInfo* nonnull dereferenceable(24) %7) #9
  %69 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 0, i32 0, i32 0
  %70 = load %class.SkColorSpace*, %class.SkColorSpace** %69, align 16
  %71 = icmp eq %class.SkColorSpace* %70, null
  br i1 %71, label %78, label %72

72:                                               ; preds = %5
  %73 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %70, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = atomicrmw add i32* %73, i32 -1 acq_rel
  %75 = icmp eq i32 %74, 1
  br i1 %75, label %76, label %78

76:                                               ; preds = %72
  %77 = bitcast %class.SkColorSpace* %70 to i8*
  call void @_ZdlPv(i8* %77) #10
  br label %78

78:                                               ; preds = %76, %72, %5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %61) #9
  call void @_ZNK8SkBitmap10eraseColorEj(%class.SkBitmap* nonnull %6, i32 0) #9
  %79 = bitcast %"class.blink::ReplayingCanvas"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3264, i8* nonnull %79) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %79, i8* align 8 bitcast (<{ { { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" }, i32, i32 } }, %"class.SkPicture::AbortCallback", i32, i32, i8, [7 x i8] }>* @__const._ZNK5blink15PictureSnapshot6ReplayEjjd.canvas to i8*), i64 3264, i1 false)
  call void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap* nonnull %9, %class.SkBitmap* nonnull dereferenceable(56) %6) #9
  call void @_ZN5blink15ReplayingCanvasC1E8SkBitmapjj(%"class.blink::ReplayingCanvas"* nonnull %8, %class.SkBitmap* nonnull %9, i32 %2, i32 %3) #9
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %9) #9
  %80 = getelementptr inbounds %"class.blink::ReplayingCanvas", %"class.blink::ReplayingCanvas"* %8, i64 0, i32 0, i32 0, i32 0
  %81 = call i32 @_ZNK8SkCanvas12getSaveCountEv(%class.SkCanvas* nonnull %80) #9
  %82 = call i32 @_ZN8SkCanvas9saveLayerEPK6SkRectPK7SkPaint(%class.SkCanvas* nonnull %80, %struct.SkRect* null, %class.SkPaint* null) #9
  %83 = fptrunc double %4 to float
  call void @_ZN8SkCanvas5scaleEff(%class.SkCanvas* nonnull %80, float %83, float %83) #9
  %84 = getelementptr inbounds %"class.blink::ReplayingCanvas", %"class.blink::ReplayingCanvas"* %8, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %84, align 4
  %85 = load %class.SkPicture*, %class.SkPicture** %13, align 8
  %86 = getelementptr inbounds %"class.blink::ReplayingCanvas", %"class.blink::ReplayingCanvas"* %8, i64 0, i32 1
  %87 = bitcast %class.SkPicture* %85 to void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)***
  %88 = load void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)**, void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)*** %87, align 8
  %89 = getelementptr inbounds void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)*, void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)** %88, i64 3
  %90 = load void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)*, void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)** %89, align 8
  call void %90(%class.SkPicture* %85, %class.SkCanvas* nonnull %80, %"class.SkPicture::AbortCallback"* %86) #9
  call void @_ZN8SkCanvas14restoreToCountEi(%class.SkCanvas* nonnull %80, i32 %81) #9
  call void @_ZN8SkCanvasD2Ev(%class.SkCanvas* nonnull %80) #9
  call void @llvm.lifetime.end.p0i8(i64 3264, i8* nonnull %79) #9
  %91 = bitcast %"class.WTF::Vector.37"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %91) #9
  %92 = getelementptr inbounds %"class.WTF::Vector.37", %"class.WTF::Vector.37"* %10, i64 0, i32 0, i32 0, i32 0
  %93 = getelementptr inbounds %"class.WTF::Vector.37", %"class.WTF::Vector.37"* %10, i64 0, i32 0, i32 0, i32 1
  %94 = getelementptr inbounds %"class.WTF::Vector.37", %"class.WTF::Vector.37"* %10, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %91, i8 0, i64 16, i1 false) #9
  %95 = bitcast %class.SkPixmap* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %95) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %95, i8 0, i64 40, i1 false) #9
  %96 = call zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap* nonnull %6, %class.SkPixmap* nonnull %11) #9
  %97 = bitcast %"struct.SkPngEncoder::Options"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %97) #9
  %98 = getelementptr inbounds %"struct.SkPngEncoder::Options", %"struct.SkPngEncoder::Options"* %12, i64 0, i32 0
  %99 = getelementptr inbounds %"struct.SkPngEncoder::Options", %"struct.SkPngEncoder::Options"* %12, i64 0, i32 1
  %100 = getelementptr inbounds %"struct.SkPngEncoder::Options", %"struct.SkPngEncoder::Options"* %12, i64 0, i32 2, i32 0
  store %class.SkDataTable* null, %class.SkDataTable** %100, align 8
  store i32 16, i32* %98, align 8
  store i32 3, i32* %99, align 4
  %101 = call zeroext i1 @_ZN5blink12ImageEncoder6EncodeEPN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEERK8SkPixmapRKN12SkPngEncoder7OptionsE(%"class.WTF::Vector.37"* nonnull %10, %class.SkPixmap* nonnull dereferenceable(40) %11, %"struct.SkPngEncoder::Options"* nonnull dereferenceable(16) %12) #9
  br i1 %101, label %104, label %102

102:                                              ; preds = %78
  %103 = bitcast %"class.WTF::Vector.37"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %103, i8 0, i64 16, i1 false) #9
  br label %113

104:                                              ; preds = %78
  %105 = getelementptr inbounds %"class.WTF::Vector.37", %"class.WTF::Vector.37"* %0, i64 0, i32 0, i32 0, i32 1
  %106 = getelementptr inbounds %"class.WTF::Vector.37", %"class.WTF::Vector.37"* %0, i64 0, i32 0, i32 0, i32 2
  %107 = bitcast %"class.WTF::Vector.37"* %10 to i64*
  %108 = bitcast %"class.WTF::Vector.37"* %0 to i64*
  store i64 0, i64* %108, align 8
  %109 = load i64, i64* %107, align 8
  %110 = bitcast %"class.WTF::Vector.37"* %0 to i64*
  store atomic i64 0, i64* %107 monotonic, align 8
  store atomic i64 %109, i64* %110 monotonic, align 8
  %111 = load i32, i32* %93, align 8
  store i32 %111, i32* %105, align 8
  store i32 0, i32* %93, align 8
  %112 = load i32, i32* %94, align 4
  store i32 %112, i32* %106, align 4
  store i32 0, i32* %94, align 4
  br label %113

113:                                              ; preds = %104, %102
  %114 = load %class.SkDataTable*, %class.SkDataTable** %100, align 8
  %115 = icmp eq %class.SkDataTable* %114, null
  br i1 %115, label %126, label %116

116:                                              ; preds = %113
  %117 = getelementptr inbounds %class.SkDataTable, %class.SkDataTable* %114, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %118 = atomicrmw add i32* %117, i32 -1 acq_rel
  %119 = icmp eq i32 %118, 1
  br i1 %119, label %120, label %126

120:                                              ; preds = %116
  %121 = bitcast %class.SkDataTable* %114 to %class.SkRefCntBase*
  %122 = bitcast %class.SkDataTable* %114 to void (%class.SkRefCntBase*)***
  %123 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %122, align 8
  %124 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %123, i64 2
  %125 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %124, align 8
  call void %125(%class.SkRefCntBase* nonnull %121) #9
  br label %126

126:                                              ; preds = %113, %116, %120
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %97) #9
  %127 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %11, i64 0, i32 2, i32 0, i32 0, i32 0
  %128 = load %class.SkColorSpace*, %class.SkColorSpace** %127, align 8
  %129 = icmp eq %class.SkColorSpace* %128, null
  br i1 %129, label %136, label %130

130:                                              ; preds = %126
  %131 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %128, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %132 = atomicrmw add i32* %131, i32 -1 acq_rel
  %133 = icmp eq i32 %132, 1
  br i1 %133, label %134, label %136

134:                                              ; preds = %130
  %135 = bitcast %class.SkColorSpace* %128 to i8*
  call void @_ZdlPv(i8* %135) #10
  br label %136

136:                                              ; preds = %126, %130, %134
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %95) #9
  %137 = load i8*, i8** %92, align 8
  %138 = icmp eq i8* %137, null
  br i1 %138, label %144, label %139, !prof !3

139:                                              ; preds = %136
  %140 = load i32, i32* %94, align 4
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %143, label %142, !prof !2

142:                                              ; preds = %139
  store i32 0, i32* %94, align 4
  br label %143

143:                                              ; preds = %142, %139
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %137) #9
  store i8* null, i8** %92, align 8
  br label %144

144:                                              ; preds = %136, %143
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %91) #9
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %60) #9
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #3

declare void @_ZN8SkBitmap11allocPixelsERK11SkImageInfo(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24)) local_unnamed_addr #3

declare void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #3

declare void @_ZN5blink15ReplayingCanvasC1E8SkBitmapjj(%"class.blink::ReplayingCanvas"*, %class.SkBitmap*, i32, i32) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #4

declare i32 @_ZN8SkCanvas9saveLayerEPK6SkRectPK7SkPaint(%class.SkCanvas*, %struct.SkRect*, %class.SkPaint*) local_unnamed_addr #3

declare void @_ZN8SkCanvas5scaleEff(%class.SkCanvas*, float, float) local_unnamed_addr #3

declare zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap*, %class.SkPixmap*) local_unnamed_addr #3

declare zeroext i1 @_ZN5blink12ImageEncoder6EncodeEPN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEERK8SkPixmapRKN12SkPngEncoder7OptionsE(%"class.WTF::Vector.37"*, %class.SkPixmap* dereferenceable(40), %"struct.SkPngEncoder::Options"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink15PictureSnapshot7ProfileEjN4base9TimeDeltaEPKNS_9FloatRectE(%"class.WTF::Vector.57"* noalias sret, %"class.blink::PictureSnapshot"* nocapture readonly, i32, i64, %"class.blink::FloatRect"* readonly) local_unnamed_addr #1 align 2 {
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %class.SkBitmap, align 8
  %8 = alloca %struct.SkImageInfo, align 16
  %9 = alloca %"class.WTF::Vector.60", align 8
  %10 = alloca %"class.blink::ProfilingCanvas", align 8
  %11 = alloca %class.SkBitmap, align 8
  %12 = alloca { <2 x float>, <2 x float> }, align 8
  %13 = bitcast { <2 x float>, <2 x float> }* %12 to %struct.SkRect*
  %14 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = bitcast %"class.WTF::Vector.57"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 16, i1 false) #9
  %18 = icmp eq i32 %2, 0
  br i1 %18, label %27, label %19

19:                                               ; preds = %5
  %20 = zext i32 %2 to i64
  %21 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6VectorIN4base9TimeDeltaELj0ES0_EEEEmm(i64 %20) #9
  %22 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %21, i8* getelementptr inbounds ([104 x i8], [104 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6VectorIN4base9TimeDeltaELj0ENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #9
  %23 = ptrtoint i8* %22 to i64
  %24 = bitcast %"class.WTF::Vector.57"* %0 to i64*
  store atomic i64 %23, i64* %24 monotonic, align 8
  %25 = lshr i64 %21, 4
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 8
  br label %27

27:                                               ; preds = %5, %19
  %28 = getelementptr inbounds %"class.blink::PictureSnapshot", %"class.blink::PictureSnapshot"* %1, i64 0, i32 1, i32 0
  %29 = load %class.SkPicture*, %class.SkPicture** %28, align 8
  %30 = bitcast %class.SkPicture* %29 to { <2 x float>, <2 x float> } (%class.SkPicture*)***
  %31 = load { <2 x float>, <2 x float> } (%class.SkPicture*)**, { <2 x float>, <2 x float> } (%class.SkPicture*)*** %30, align 8
  %32 = getelementptr inbounds { <2 x float>, <2 x float> } (%class.SkPicture*)*, { <2 x float>, <2 x float> } (%class.SkPicture*)** %31, i64 4
  %33 = load { <2 x float>, <2 x float> } (%class.SkPicture*)*, { <2 x float>, <2 x float> } (%class.SkPicture*)** %32, align 8
  %34 = tail call { <2 x float>, <2 x float> } %33(%class.SkPicture* %29) #9
  %35 = extractvalue { <2 x float>, <2 x float> } %34, 0
  %36 = extractvalue { <2 x float>, <2 x float> } %34, 1
  %37 = extractelement <2 x float> %35, i32 0
  %38 = tail call float @llvm.floor.f32(float %37) #9
  %39 = fcmp olt float %38, 0x41DFFFFFE0000000
  %40 = select i1 %39, float %38, float 0x41DFFFFFE0000000
  %41 = fcmp ogt float %40, 0xC1DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0xC1DFFFFFE0000000
  %43 = fptosi float %42 to i32
  %44 = extractelement <2 x float> %35, i32 1
  %45 = tail call float @llvm.floor.f32(float %44) #9
  %46 = fcmp olt float %45, 0x41DFFFFFE0000000
  %47 = select i1 %46, float %45, float 0x41DFFFFFE0000000
  %48 = fcmp ogt float %47, 0xC1DFFFFFE0000000
  %49 = select i1 %48, float %47, float 0xC1DFFFFFE0000000
  %50 = fptosi float %49 to i32
  %51 = extractelement <2 x float> %36, i32 0
  %52 = tail call float @llvm.ceil.f32(float %51) #9
  %53 = fcmp olt float %52, 0x41DFFFFFE0000000
  %54 = select i1 %53, float %52, float 0x41DFFFFFE0000000
  %55 = fcmp ogt float %54, 0xC1DFFFFFE0000000
  %56 = select i1 %55, float %54, float 0xC1DFFFFFE0000000
  %57 = fptosi float %56 to i32
  %58 = extractelement <2 x float> %36, i32 1
  %59 = tail call float @llvm.ceil.f32(float %58) #9
  %60 = fcmp olt float %59, 0x41DFFFFFE0000000
  %61 = select i1 %60, float %59, float 0x41DFFFFFE0000000
  %62 = fcmp ogt float %61, 0xC1DFFFFFE0000000
  %63 = select i1 %62, float %61, float 0xC1DFFFFFE0000000
  %64 = fptosi float %63 to i32
  %65 = bitcast %class.SkBitmap* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %65) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %7) #9
  %66 = bitcast %struct.SkImageInfo* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %66) #9
  %67 = sub i32 %57, %43
  %68 = sub i32 %64, %50
  %69 = zext i32 %68 to i64
  %70 = shl nuw i64 %69, 32
  %71 = zext i32 %67 to i64
  %72 = or i64 %70, %71
  %73 = bitcast %struct.SkImageInfo* %8 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8589934598>, <2 x i64>* %73, align 16, !alias.scope !9
  %74 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %8, i64 0, i32 1
  %75 = bitcast %struct.SkISize* %74 to i64*
  store i64 %72, i64* %75, align 16, !alias.scope !9
  call void @_ZN8SkBitmap11allocPixelsERK11SkImageInfo(%class.SkBitmap* nonnull %7, %struct.SkImageInfo* nonnull dereferenceable(24) %8) #9
  %76 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %8, i64 0, i32 0, i32 0, i32 0
  %77 = load %class.SkColorSpace*, %class.SkColorSpace** %76, align 16
  %78 = icmp eq %class.SkColorSpace* %77, null
  br i1 %78, label %85, label %79

79:                                               ; preds = %27
  %80 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %77, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = atomicrmw add i32* %80, i32 -1 acq_rel
  %82 = icmp eq i32 %81, 1
  br i1 %82, label %83, label %85

83:                                               ; preds = %79
  %84 = bitcast %class.SkColorSpace* %77 to i8*
  call void @_ZdlPv(i8* %84) #10
  br label %85

85:                                               ; preds = %83, %79, %27
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %66) #9
  call void @_ZNK8SkBitmap10eraseColorEj(%class.SkBitmap* nonnull %7, i32 0) #9
  %86 = call i64 @_ZN4base9TimeTicks3NowEv() #9
  %87 = add i64 %3, -9223372036854775807
  %88 = icmp ult i64 %87, 2
  br i1 %88, label %96, label %89

89:                                               ; preds = %85
  %90 = icmp slt i64 %3, 0
  %91 = select i1 %90, i64 -9223372036854775808, i64 9223372036854775807
  %92 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %86, i64 %3) #9
  %93 = extractvalue { i64, i1 } %92, 1
  %94 = extractvalue { i64, i1 } %92, 0
  %95 = select i1 %93, i64 %91, i64 %94, !prof !2
  br label %104

96:                                               ; preds = %85
  %97 = add i64 %86, -9223372036854775807
  %98 = icmp ugt i64 %97, 1
  %99 = icmp eq i64 %86, %3
  %100 = or i1 %99, %98
  br i1 %100, label %104, label %101

101:                                              ; preds = %96
  %102 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #9
  %103 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %102) #9
  br label %104

104:                                              ; preds = %89, %96, %101
  %105 = phi i64 [ %95, %89 ], [ %3, %96 ], [ %3, %101 ]
  %106 = icmp ne i32 %2, 0
  %107 = icmp slt i64 %86, %105
  %108 = or i1 %107, %106
  br i1 %108, label %109, label %125

109:                                              ; preds = %104
  %110 = bitcast %"class.WTF::Vector.60"* %9 to i8*
  %111 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %9, i64 0, i32 0, i32 0, i32 0
  %112 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %9, i64 0, i32 0, i32 0, i32 1
  %113 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %9, i64 0, i32 0, i32 0, i32 2
  %114 = bitcast %"class.WTF::Vector.60"* %9 to i64*
  %115 = bitcast %"class.blink::ProfilingCanvas"* %10 to i8*
  %116 = icmp eq %"class.blink::FloatRect"* %4, null
  %117 = getelementptr inbounds %"class.blink::ProfilingCanvas", %"class.blink::ProfilingCanvas"* %10, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast { <2 x float>, <2 x float> }* %12 to i8*
  %119 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %4, i64 0, i32 1, i32 0
  %120 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %12, i64 0, i32 0
  %121 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %12, i64 0, i32 1
  %122 = getelementptr inbounds %"class.blink::ProfilingCanvas", %"class.blink::ProfilingCanvas"* %10, i64 0, i32 0, i32 0, i32 2
  %123 = bitcast %"class.blink::FloatRect"* %4 to <2 x float>*
  %124 = bitcast float* %119 to <2 x float>*
  br label %126

125:                                              ; preds = %182, %104
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %65) #9
  ret void

126:                                              ; preds = %109, %182
  %127 = phi i32 [ 0, %109 ], [ %183, %182 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %110) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %110, i8 0, i64 16, i1 false) #9
  %128 = load i32, i32* %16, align 4
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %142, label %130

130:                                              ; preds = %126
  %131 = call dereferenceable(16) %"class.WTF::Vector.60"* @_ZN3WTF6VectorINS0_IN4base9TimeDeltaELj0ENS_18PartitionAllocatorEEELj0ES3_E2atEj(%"class.WTF::Vector.57"* %0, i32 0) #9
  %132 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %131, i64 0, i32 0, i32 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %142, label %135

135:                                              ; preds = %130
  %136 = zext i32 %133 to i64
  %137 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN4base9TimeDeltaEEEmm(i64 %136) #9
  %138 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %137, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN4base9TimeDeltaEEEPKcv, i64 0, i64 0)) #9
  %139 = ptrtoint i8* %138 to i64
  store atomic i64 %139, i64* %114 monotonic, align 8
  %140 = lshr i64 %137, 3
  %141 = trunc i64 %140 to i32
  store i32 %141, i32* %112, align 8
  br label %142

142:                                              ; preds = %135, %130, %126
  call void @llvm.lifetime.start.p0i8(i64 3248, i8* nonnull %115) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %115, i8* align 8 bitcast ({ { { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" }, i32, i32 } }, %"class.WTF::Vector.60"* }* @__const._ZNK5blink15PictureSnapshot7ProfileEjN4base9TimeDeltaEPKNS_9FloatRectE.canvas to i8*), i64 3248, i1 false)
  call void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap* nonnull %11, %class.SkBitmap* nonnull dereferenceable(56) %7) #9
  call void @_ZN5blink15ProfilingCanvasC1E8SkBitmap(%"class.blink::ProfilingCanvas"* nonnull %10, %class.SkBitmap* nonnull %11) #9
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %11) #9
  br i1 %116, label %147, label %143

143:                                              ; preds = %142
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %118) #9
  %144 = load <2 x float>, <2 x float>* %123, align 4
  %145 = load <2 x float>, <2 x float>* %124, align 4
  %146 = fadd <2 x float> %144, %145
  store <2 x float> %144, <2 x float>* %120, align 8
  store <2 x float> %146, <2 x float>* %121, align 8
  call void @_ZN8SkCanvas8clipRectERK6SkRect8SkClipOpb(%class.SkCanvas* nonnull %117, %struct.SkRect* nonnull dereferenceable(16) %13, i32 1, i1 zeroext false) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %118) #9
  store i32 0, i32* %122, align 4
  br label %147

147:                                              ; preds = %142, %143
  call void @_ZN5blink15ProfilingCanvas10SetTimingsEPN3WTF6VectorIN4base9TimeDeltaELj0ENS1_18PartitionAllocatorEEE(%"class.blink::ProfilingCanvas"* nonnull %10, %"class.WTF::Vector.60"* nonnull %9) #9
  %148 = load %class.SkPicture*, %class.SkPicture** %28, align 8
  %149 = bitcast %class.SkPicture* %148 to void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)***
  %150 = load void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)**, void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)*** %149, align 8
  %151 = getelementptr inbounds void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)*, void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)** %150, i64 3
  %152 = load void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)*, void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)** %151, align 8
  call void %152(%class.SkPicture* %148, %class.SkCanvas* nonnull %117, %"class.SkPicture::AbortCallback"* null) #9
  %153 = load i32, i32* %16, align 4
  %154 = load i32, i32* %15, align 8
  %155 = icmp eq i32 %153, %154
  br i1 %155, label %171, label %156, !prof !2

156:                                              ; preds = %147
  %157 = load %"class.WTF::Vector.60"*, %"class.WTF::Vector.60"** %14, align 8
  %158 = zext i32 %153 to i64
  %159 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %157, i64 %158
  %160 = bitcast %"class.WTF::Vector.60"* %159 to i8*
  %161 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %157, i64 %158, i32 0, i32 0, i32 1
  %162 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %157, i64 %158, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 8 %160, i8 0, i64 16, i1 false) #9
  %163 = load i64, i64* %114, align 8
  %164 = bitcast %"class.WTF::Vector.60"* %159 to i64*
  store atomic i64 0, i64* %114 monotonic, align 8
  store atomic i64 %163, i64* %164 monotonic, align 8
  %165 = load i32, i32* %161, align 4
  %166 = load i32, i32* %112, align 8
  store i32 %166, i32* %161, align 4
  store i32 %165, i32* %112, align 8
  %167 = load i32, i32* %162, align 4
  %168 = load i32, i32* %113, align 4
  store i32 %168, i32* %162, align 4
  store i32 %167, i32* %113, align 4
  %169 = load i32, i32* %16, align 4
  %170 = add i32 %169, 1
  store i32 %170, i32* %16, align 4
  br label %172

171:                                              ; preds = %147
  call void @_ZN3WTF6VectorINS0_IN4base9TimeDeltaELj0ENS_18PartitionAllocatorEEELj0ES3_E14AppendSlowCaseIS4_EEvOT_(%"class.WTF::Vector.57"* %0, %"class.WTF::Vector.60"* nonnull dereferenceable(16) %9) #9
  br label %172

172:                                              ; preds = %156, %171
  %173 = call i64 @_ZN4base9TimeTicks3NowEv() #9
  call void @_ZN8SkCanvasD2Ev(%class.SkCanvas* nonnull %117) #9
  call void @llvm.lifetime.end.p0i8(i64 3248, i8* nonnull %115) #9
  %174 = load %"class.base::TimeDelta"*, %"class.base::TimeDelta"** %111, align 8
  %175 = icmp eq %"class.base::TimeDelta"* %174, null
  %176 = bitcast %"class.base::TimeDelta"* %174 to i8*
  br i1 %175, label %182, label %177, !prof !3

177:                                              ; preds = %172
  %178 = load i32, i32* %113, align 4
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %181, label %180, !prof !2

180:                                              ; preds = %177
  store i32 0, i32* %113, align 4
  br label %181

181:                                              ; preds = %180, %177
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %176) #9
  store %"class.base::TimeDelta"* null, %"class.base::TimeDelta"** %111, align 8
  br label %182

182:                                              ; preds = %172, %181
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %110) #9
  %183 = add i32 %127, 1
  %184 = icmp ult i32 %183, %2
  %185 = icmp slt i64 %173, %105
  %186 = or i1 %185, %184
  br i1 %186, label %126, label %125
}

declare i64 @_ZN4base9TimeTicks3NowEv() local_unnamed_addr #3

declare void @_ZN5blink15ProfilingCanvasC1E8SkBitmap(%"class.blink::ProfilingCanvas"*, %class.SkBitmap*) unnamed_addr #3

declare void @_ZN5blink15ProfilingCanvas10SetTimingsEPN3WTF6VectorIN4base9TimeDeltaELj0ENS1_18PartitionAllocatorEEE(%"class.blink::ProfilingCanvas"*, %"class.WTF::Vector.60"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN8SkCanvasD2Ev(%class.SkCanvas*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::JSONArray"* @_ZNK5blink15PictureSnapshot18SnapshotCommandLogEv(%"class.blink::PictureSnapshot"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.blink::LoggingCanvas", align 8
  %3 = bitcast %"class.blink::LoggingCanvas"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3248, i8* nonnull %3) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %3, i8* align 8 bitcast ({ { { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.23, [384 x i64], %class.sk_sp.24, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.25", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.31" }, i32, i32 }, %"class.std::__1::unique_ptr.68" }* @__const._ZNK5blink15PictureSnapshot18SnapshotCommandLogEv.canvas to i8*), i64 3248, i1 false)
  call void @_ZN5blink13LoggingCanvasC1Ev(%"class.blink::LoggingCanvas"* nonnull %2) #9
  %4 = getelementptr inbounds %"class.blink::PictureSnapshot", %"class.blink::PictureSnapshot"* %0, i64 0, i32 1, i32 0
  %5 = load %class.SkPicture*, %class.SkPicture** %4, align 8
  %6 = getelementptr inbounds %"class.blink::LoggingCanvas", %"class.blink::LoggingCanvas"* %2, i64 0, i32 0, i32 0
  %7 = bitcast %class.SkPicture* %5 to void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)***
  %8 = load void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)**, void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)*** %7, align 8
  %9 = getelementptr inbounds void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)*, void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)** %8, i64 3
  %10 = load void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)*, void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)** %9, align 8
  call void %10(%class.SkPicture* %5, %class.SkCanvas* nonnull %6, %"class.SkPicture::AbortCallback"* null) #9
  %11 = call %"class.blink::JSONArray"* @_ZN5blink13LoggingCanvas3LogEv(%"class.blink::LoggingCanvas"* nonnull %2) #9
  %12 = getelementptr inbounds %"class.blink::LoggingCanvas", %"class.blink::LoggingCanvas"* %2, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [56 x i8*] }, { [56 x i8*] }* @_ZTVN5blink13LoggingCanvasE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds %"class.blink::LoggingCanvas", %"class.blink::LoggingCanvas"* %2, i64 0, i32 1, i32 0, i32 0, i32 0
  %14 = load %"class.blink::JSONArray"*, %"class.blink::JSONArray"** %13, align 8
  store %"class.blink::JSONArray"* null, %"class.blink::JSONArray"** %13, align 8
  %15 = icmp eq %"class.blink::JSONArray"* %14, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %1
  %17 = bitcast %"class.blink::JSONArray"* %14 to void (%"class.blink::JSONArray"*)***
  %18 = load void (%"class.blink::JSONArray"*)**, void (%"class.blink::JSONArray"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.blink::JSONArray"*)*, void (%"class.blink::JSONArray"*)** %18, i64 1
  %20 = load void (%"class.blink::JSONArray"*)*, void (%"class.blink::JSONArray"*)** %19, align 8
  call void %20(%"class.blink::JSONArray"* nonnull %14) #9
  br label %21

21:                                               ; preds = %1, %16
  call void @_ZN8SkCanvasD2Ev(%class.SkCanvas* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 3248, i8* nonnull %3) #9
  ret %"class.blink::JSONArray"* %11
}

declare void @_ZN5blink13LoggingCanvasC1Ev(%"class.blink::LoggingCanvas"*) unnamed_addr #3

declare %"class.blink::JSONArray"* @_ZN5blink13LoggingCanvas3LogEv(%"class.blink::LoggingCanvas"*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #6

declare %class.SkCanvas* @_ZN17SkPictureRecorder14beginRecordingERK6SkRectP12SkBBHFactory(%class.SkPictureRecorder*, %struct.SkRect* dereferenceable(16), %class.SkBBHFactory*) local_unnamed_addr #3

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #5

declare void @_ZNK8SkBitmap10eraseColorEj(%class.SkBitmap*, i32) local_unnamed_addr #3

declare i32 @_ZNK8SkCanvas12getSaveCountEv(%class.SkCanvas*) local_unnamed_addr #3

declare void @_ZN8SkCanvas14restoreToCountEi(%class.SkCanvas*, i32) local_unnamed_addr #3

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #5

declare void @_ZN8SkCanvas8clipRectERK6SkRect8SkClipOpb(%class.SkCanvas*, %struct.SkRect* dereferenceable(16), i32, i1 zeroext) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorI5sk_spI9SkPictureELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.9"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %39

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %class.sk_sp.8*, %class.sk_sp.8** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %37, label %14

14:                                               ; preds = %4, %33
  %15 = phi %class.sk_sp.8* [ %35, %33 ], [ %6, %4 ]
  %16 = phi %class.sk_sp.8* [ %34, %33 ], [ null, %4 ]
  %17 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %15, i64 0, i32 0
  %18 = bitcast %class.sk_sp.8* %15 to i64*
  %19 = load i64, i64* %18, align 8
  store %class.SkPicture* null, %class.SkPicture** %17, align 8
  %20 = bitcast %class.sk_sp.8* %16 to i64*
  store i64 %19, i64* %20, align 8
  %21 = load %class.SkPicture*, %class.SkPicture** %17, align 8
  %22 = icmp eq %class.SkPicture* %21, null
  br i1 %22, label %33, label %23

23:                                               ; preds = %14
  %24 = getelementptr inbounds %class.SkPicture, %class.SkPicture* %21, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw add i32* %24, i32 -1 acq_rel
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %33

27:                                               ; preds = %23
  %28 = bitcast %class.SkPicture* %21 to %class.SkRefCntBase*
  %29 = bitcast %class.SkPicture* %21 to void (%class.SkRefCntBase*)***
  %30 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %29, align 8
  %31 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %30, i64 2
  %32 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %31, align 8
  tail call void %32(%class.SkRefCntBase* nonnull %28) #9
  br label %33

33:                                               ; preds = %27, %23, %14
  %34 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %16, i64 1
  %35 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %15, i64 1
  %36 = icmp eq %class.sk_sp.8* %35, %10
  br i1 %36, label %37, label %14

37:                                               ; preds = %33, %4
  %38 = bitcast %class.sk_sp.8* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %38) #9
  br label %87

39:                                               ; preds = %2
  %40 = zext i32 %1 to i64
  %41 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI5sk_spI9SkPictureEEEmm(i64 %40) #9
  %42 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %41, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI5sk_spI9SkPictureEEEPKcv, i64 0, i64 0)) #9
  %43 = lshr i64 %41, 3
  %44 = ptrtoint i8* %42 to i64
  %45 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  %46 = load %class.sk_sp.8*, %class.sk_sp.8** %45, align 8
  %47 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %46, i64 %49
  %51 = icmp eq i32 %48, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %39
  %53 = bitcast %class.sk_sp.8* %46 to i8*
  br label %82

54:                                               ; preds = %39
  %55 = bitcast i8* %42 to %class.sk_sp.8*
  br label %56

56:                                               ; preds = %54, %75
  %57 = phi %class.sk_sp.8* [ %77, %75 ], [ %46, %54 ]
  %58 = phi %class.sk_sp.8* [ %76, %75 ], [ %55, %54 ]
  %59 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %57, i64 0, i32 0
  %60 = bitcast %class.sk_sp.8* %57 to i64*
  %61 = load i64, i64* %60, align 8
  store %class.SkPicture* null, %class.SkPicture** %59, align 8
  %62 = bitcast %class.sk_sp.8* %58 to i64*
  store i64 %61, i64* %62, align 8
  %63 = load %class.SkPicture*, %class.SkPicture** %59, align 8
  %64 = icmp eq %class.SkPicture* %63, null
  br i1 %64, label %75, label %65

65:                                               ; preds = %56
  %66 = getelementptr inbounds %class.SkPicture, %class.SkPicture* %63, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = atomicrmw add i32* %66, i32 -1 acq_rel
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %69, label %75

69:                                               ; preds = %65
  %70 = bitcast %class.SkPicture* %63 to %class.SkRefCntBase*
  %71 = bitcast %class.SkPicture* %63 to void (%class.SkRefCntBase*)***
  %72 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %71, align 8
  %73 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %72, i64 2
  %74 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %73, align 8
  tail call void %74(%class.SkRefCntBase* nonnull %70) #9
  br label %75

75:                                               ; preds = %69, %65, %56
  %76 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %58, i64 1
  %77 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %57, i64 1
  %78 = icmp eq %class.sk_sp.8* %77, %50
  br i1 %78, label %79, label %56

79:                                               ; preds = %75
  %80 = bitcast %"class.WTF::Vector.9"* %0 to i8**
  %81 = load i8*, i8** %80, align 8
  br label %82

82:                                               ; preds = %52, %79
  %83 = phi i8* [ %81, %79 ], [ %53, %52 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %83) #9
  %84 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 %44, i64* %84 monotonic, align 8
  %85 = trunc i64 %43 to i32
  %86 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %85, i32* %86, align 8
  br label %87

87:                                               ; preds = %82, %37
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI5sk_spI9SkPictureEEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.5, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorI5sk_spI9SkPictureELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector.9"*, %class.sk_sp.8* dereferenceable(8)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %class.sk_sp.8*, %class.sk_sp.8** %6, align 8
  %8 = icmp ugt %class.sk_sp.8* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %7, i64 %10
  %12 = icmp ugt %class.sk_sp.8* %11, %1
  br i1 %12, label %37, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %68, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq %class.sk_sp.8* %7, null
  br i1 %25, label %26, label %35

26:                                               ; preds = %24
  %27 = zext i32 %22 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI5sk_spI9SkPictureEEEmm(i64 %27) #9
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI5sk_spI9SkPictureEEEPKcv, i64 0, i64 0)) #9
  %30 = ptrtoint i8* %29 to i64
  %31 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %28, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %29 to %class.sk_sp.8*
  br label %68

35:                                               ; preds = %24
  tail call void @_ZN3WTF6VectorI5sk_spI9SkPictureELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.9"* %0, i32 %22) #9
  %36 = load %class.sk_sp.8*, %class.sk_sp.8** %6, align 8
  br label %68

37:                                               ; preds = %9
  %38 = ptrtoint %class.sk_sp.8* %1 to i64
  %39 = ptrtoint %class.sk_sp.8* %7 to i64
  %40 = sub i64 %38, %39
  %41 = ashr exact i64 %40, 3
  %42 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = lshr i32 %43, 2
  %45 = add i32 %43, 1
  %46 = add i32 %45, %44
  %47 = icmp ugt i32 %46, 4
  %48 = select i1 %47, i32 %46, i32 4
  %49 = icmp ugt i32 %48, %5
  %50 = select i1 %49, i32 %48, i32 %5
  %51 = icmp ult i32 %43, %50
  br i1 %51, label %52, label %65, !prof !3

52:                                               ; preds = %37
  %53 = icmp eq %class.sk_sp.8* %7, null
  br i1 %53, label %54, label %63

54:                                               ; preds = %52
  %55 = zext i32 %50 to i64
  %56 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI5sk_spI9SkPictureEEEmm(i64 %55) #9
  %57 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %56, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI5sk_spI9SkPictureEEEPKcv, i64 0, i64 0)) #9
  %58 = ptrtoint i8* %57 to i64
  %59 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 %58, i64* %59 monotonic, align 8
  %60 = lshr i64 %56, 3
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %42, align 8
  %62 = bitcast i8* %57 to %class.sk_sp.8*
  br label %65

63:                                               ; preds = %52
  tail call void @_ZN3WTF6VectorI5sk_spI9SkPictureELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.9"* %0, i32 %50) #9
  %64 = load %class.sk_sp.8*, %class.sk_sp.8** %6, align 8
  br label %65

65:                                               ; preds = %37, %54, %63
  %66 = phi %class.sk_sp.8* [ %7, %37 ], [ %62, %54 ], [ %64, %63 ]
  %67 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %66, i64 %41
  br label %68

68:                                               ; preds = %35, %26, %13, %65
  %69 = phi %class.sk_sp.8* [ %66, %65 ], [ %7, %13 ], [ %34, %26 ], [ %36, %35 ]
  %70 = phi %class.sk_sp.8* [ %67, %65 ], [ %1, %13 ], [ %1, %26 ], [ %1, %35 ]
  %71 = load i32, i32* %3, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %69, i64 %72
  %74 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %70, i64 0, i32 0
  %75 = bitcast %class.sk_sp.8* %70 to i64*
  %76 = load i64, i64* %75, align 8
  store %class.SkPicture* null, %class.SkPicture** %74, align 8
  %77 = bitcast %class.sk_sp.8* %73 to i64*
  store i64 %76, i64* %77, align 8
  %78 = load i32, i32* %3, align 4
  %79 = add i32 %78, 1
  store i32 %79, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %class.sk_sp.8* @_ZN3WTF6VectorI5sk_spI9SkPictureELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.9"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %class.sk_sp.8*, %class.sk_sp.8** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %24, i64 %25
  ret %class.sk_sp.8* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %class.scoped_refptr.5* @_ZNK3WTF6VectorI13scoped_refptrIN5blink15PictureSnapshot17TilePictureStreamEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %class.scoped_refptr.5*, %class.scoped_refptr.5** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %class.scoped_refptr.5, %class.scoped_refptr.5* %24, i64 %25
  ret %class.scoped_refptr.5* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6VectorIN4base9TimeDeltaELj0ES0_EEEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 134086656
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 134086656) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.5, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 4
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN4base9TimeDeltaEEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.5, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector.60"* @_ZN3WTF6VectorINS0_IN4base9TimeDeltaELj0ENS_18PartitionAllocatorEEELj0ES3_E2atEj(%"class.WTF::Vector.57"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::Vector.60"*, %"class.WTF::Vector.60"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %24, i64 %25
  ret %"class.WTF::Vector.60"* %26
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS0_IN4base9TimeDeltaELj0ENS_18PartitionAllocatorEEELj0ES3_E14AppendSlowCaseIS4_EEvOT_(%"class.WTF::Vector.57"*, %"class.WTF::Vector.60"* dereferenceable(16)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::Vector.60"*, %"class.WTF::Vector.60"** %6, align 8
  %8 = icmp ugt %"class.WTF::Vector.60"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::Vector.60"* %11, %1
  br i1 %12, label %37, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %68, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::Vector.60"* %7, null
  br i1 %25, label %26, label %35

26:                                               ; preds = %24
  %27 = zext i32 %22 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6VectorIN4base9TimeDeltaELj0ES0_EEEEmm(i64 %27) #9
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([104 x i8], [104 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6VectorIN4base9TimeDeltaELj0ENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #9
  %30 = ptrtoint i8* %29 to i64
  %31 = bitcast %"class.WTF::Vector.57"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %28, 4
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %29 to %"class.WTF::Vector.60"*
  br label %68

35:                                               ; preds = %24
  tail call void @_ZN3WTF6VectorINS0_IN4base9TimeDeltaELj0ENS_18PartitionAllocatorEEELj0ES3_E16ReallocateBufferEj(%"class.WTF::Vector.57"* %0, i32 %22) #9
  %36 = load %"class.WTF::Vector.60"*, %"class.WTF::Vector.60"** %6, align 8
  br label %68

37:                                               ; preds = %9
  %38 = ptrtoint %"class.WTF::Vector.60"* %1 to i64
  %39 = ptrtoint %"class.WTF::Vector.60"* %7 to i64
  %40 = sub i64 %38, %39
  %41 = ashr exact i64 %40, 4
  %42 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = lshr i32 %43, 2
  %45 = add i32 %43, 1
  %46 = add i32 %45, %44
  %47 = icmp ugt i32 %46, 4
  %48 = select i1 %47, i32 %46, i32 4
  %49 = icmp ugt i32 %48, %5
  %50 = select i1 %49, i32 %48, i32 %5
  %51 = icmp ult i32 %43, %50
  br i1 %51, label %52, label %65, !prof !3

52:                                               ; preds = %37
  %53 = icmp eq %"class.WTF::Vector.60"* %7, null
  br i1 %53, label %54, label %63

54:                                               ; preds = %52
  %55 = zext i32 %50 to i64
  %56 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6VectorIN4base9TimeDeltaELj0ES0_EEEEmm(i64 %55) #9
  %57 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %56, i8* getelementptr inbounds ([104 x i8], [104 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6VectorIN4base9TimeDeltaELj0ENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #9
  %58 = ptrtoint i8* %57 to i64
  %59 = bitcast %"class.WTF::Vector.57"* %0 to i64*
  store atomic i64 %58, i64* %59 monotonic, align 8
  %60 = lshr i64 %56, 4
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %42, align 8
  %62 = bitcast i8* %57 to %"class.WTF::Vector.60"*
  br label %65

63:                                               ; preds = %52
  tail call void @_ZN3WTF6VectorINS0_IN4base9TimeDeltaELj0ENS_18PartitionAllocatorEEELj0ES3_E16ReallocateBufferEj(%"class.WTF::Vector.57"* %0, i32 %50) #9
  %64 = load %"class.WTF::Vector.60"*, %"class.WTF::Vector.60"** %6, align 8
  br label %65

65:                                               ; preds = %37, %54, %63
  %66 = phi %"class.WTF::Vector.60"* [ %7, %37 ], [ %62, %54 ], [ %64, %63 ]
  %67 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %66, i64 %41
  br label %68

68:                                               ; preds = %35, %26, %13, %65
  %69 = phi %"class.WTF::Vector.60"* [ %66, %65 ], [ %7, %13 ], [ %34, %26 ], [ %36, %35 ]
  %70 = phi %"class.WTF::Vector.60"* [ %67, %65 ], [ %1, %13 ], [ %1, %26 ], [ %1, %35 ]
  %71 = load i32, i32* %3, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %69, i64 %72
  %74 = bitcast %"class.WTF::Vector.60"* %73 to i8*
  %75 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %69, i64 %72, i32 0, i32 0, i32 1
  %76 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %69, i64 %72, i32 0, i32 0, i32 2
  %77 = bitcast %"class.WTF::Vector.60"* %70 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 16, i1 false) #9
  %78 = load i64, i64* %77, align 8
  %79 = bitcast %"class.WTF::Vector.60"* %73 to i64*
  store atomic i64 0, i64* %77 monotonic, align 8
  store atomic i64 %78, i64* %79 monotonic, align 8
  %80 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %70, i64 0, i32 0, i32 0, i32 1
  %81 = load i32, i32* %75, align 4
  %82 = load i32, i32* %80, align 4
  store i32 %82, i32* %75, align 4
  store i32 %81, i32* %80, align 4
  %83 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %70, i64 0, i32 0, i32 0, i32 2
  %84 = load i32, i32* %76, align 4
  %85 = load i32, i32* %83, align 4
  store i32 %85, i32* %76, align 4
  store i32 %84, i32* %83, align 4
  %86 = load i32, i32* %3, align 4
  %87 = add i32 %86, 1
  store i32 %87, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS0_IN4base9TimeDeltaELj0ENS_18PartitionAllocatorEEELj0ES3_E16ReallocateBufferEj(%"class.WTF::Vector.57"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %43

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::Vector.60"*, %"class.WTF::Vector.60"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector.57"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %41, label %14

14:                                               ; preds = %4, %37
  %15 = phi %"class.WTF::Vector.60"* [ %39, %37 ], [ %6, %4 ]
  %16 = phi %"class.WTF::Vector.60"* [ %38, %37 ], [ null, %4 ]
  %17 = bitcast %"class.WTF::Vector.60"* %16 to i8*
  %18 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %16, i64 0, i32 0, i32 0, i32 1
  %19 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %16, i64 0, i32 0, i32 0, i32 2
  %20 = bitcast %"class.WTF::Vector.60"* %15 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 16, i1 false) #9
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.WTF::Vector.60"* %16 to i64*
  store atomic i64 0, i64* %20 monotonic, align 8
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %15, i64 0, i32 0, i32 0, i32 1
  %24 = load i32, i32* %18, align 4
  %25 = load i32, i32* %23, align 4
  store i32 %25, i32* %18, align 4
  store i32 %24, i32* %23, align 4
  %26 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %15, i64 0, i32 0, i32 0, i32 2
  %27 = load i32, i32* %19, align 4
  %28 = load i32, i32* %26, align 4
  store i32 %28, i32* %19, align 4
  store i32 %27, i32* %26, align 4
  %29 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %15, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.base::TimeDelta"*, %"class.base::TimeDelta"** %29, align 8
  %31 = icmp eq %"class.base::TimeDelta"* %30, null
  %32 = bitcast %"class.base::TimeDelta"* %30 to i8*
  br i1 %31, label %37, label %33, !prof !3

33:                                               ; preds = %14
  %34 = icmp eq i32 %27, 0
  br i1 %34, label %36, label %35, !prof !2

35:                                               ; preds = %33
  store i32 0, i32* %26, align 4
  br label %36

36:                                               ; preds = %35, %33
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %32) #9
  store %"class.base::TimeDelta"* null, %"class.base::TimeDelta"** %29, align 8
  br label %37

37:                                               ; preds = %36, %14
  %38 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %16, i64 1
  %39 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %15, i64 1
  %40 = icmp eq %"class.WTF::Vector.60"* %39, %10
  br i1 %40, label %41, label %14

41:                                               ; preds = %37, %4
  %42 = bitcast %"class.WTF::Vector.60"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %42) #9
  br label %95

43:                                               ; preds = %2
  %44 = zext i32 %1 to i64
  %45 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6VectorIN4base9TimeDeltaELj0ES0_EEEEmm(i64 %44) #9
  %46 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %45, i8* getelementptr inbounds ([104 x i8], [104 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6VectorIN4base9TimeDeltaELj0ENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #9
  %47 = lshr i64 %45, 4
  %48 = ptrtoint i8* %46 to i64
  %49 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 0
  %50 = load %"class.WTF::Vector.60"*, %"class.WTF::Vector.60"** %49, align 8
  %51 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %50, i64 %53
  %55 = icmp eq i32 %52, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %43
  %57 = bitcast %"class.WTF::Vector.60"* %50 to i8*
  br label %90

58:                                               ; preds = %43
  %59 = bitcast i8* %46 to %"class.WTF::Vector.60"*
  br label %60

60:                                               ; preds = %58, %83
  %61 = phi %"class.WTF::Vector.60"* [ %85, %83 ], [ %50, %58 ]
  %62 = phi %"class.WTF::Vector.60"* [ %84, %83 ], [ %59, %58 ]
  %63 = bitcast %"class.WTF::Vector.60"* %62 to i8*
  %64 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %62, i64 0, i32 0, i32 0, i32 1
  %65 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %62, i64 0, i32 0, i32 0, i32 2
  %66 = bitcast %"class.WTF::Vector.60"* %61 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 16, i1 false) #9
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %"class.WTF::Vector.60"* %62 to i64*
  store atomic i64 0, i64* %66 monotonic, align 8
  store atomic i64 %67, i64* %68 monotonic, align 8
  %69 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %61, i64 0, i32 0, i32 0, i32 1
  %70 = load i32, i32* %64, align 4
  %71 = load i32, i32* %69, align 4
  store i32 %71, i32* %64, align 4
  store i32 %70, i32* %69, align 4
  %72 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %61, i64 0, i32 0, i32 0, i32 2
  %73 = load i32, i32* %65, align 4
  %74 = load i32, i32* %72, align 4
  store i32 %74, i32* %65, align 4
  store i32 %73, i32* %72, align 4
  %75 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %61, i64 0, i32 0, i32 0, i32 0
  %76 = load %"class.base::TimeDelta"*, %"class.base::TimeDelta"** %75, align 8
  %77 = icmp eq %"class.base::TimeDelta"* %76, null
  %78 = bitcast %"class.base::TimeDelta"* %76 to i8*
  br i1 %77, label %83, label %79, !prof !3

79:                                               ; preds = %60
  %80 = icmp eq i32 %73, 0
  br i1 %80, label %82, label %81, !prof !2

81:                                               ; preds = %79
  store i32 0, i32* %72, align 4
  br label %82

82:                                               ; preds = %81, %79
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %78) #9
  store %"class.base::TimeDelta"* null, %"class.base::TimeDelta"** %75, align 8
  br label %83

83:                                               ; preds = %82, %60
  %84 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %62, i64 1
  %85 = getelementptr inbounds %"class.WTF::Vector.60", %"class.WTF::Vector.60"* %61, i64 1
  %86 = icmp eq %"class.WTF::Vector.60"* %85, %54
  br i1 %86, label %87, label %60

87:                                               ; preds = %83
  %88 = bitcast %"class.WTF::Vector.57"* %0 to i8**
  %89 = load i8*, i8** %88, align 8
  br label %90

90:                                               ; preds = %56, %87
  %91 = phi i8* [ %89, %87 ], [ %57, %56 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %91) #9
  %92 = bitcast %"class.WTF::Vector.57"* %0 to i64*
  store atomic i64 %48, i64* %92 monotonic, align 8
  %93 = trunc i64 %47 to i32
  %94 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %93, i32* %94, align 8
  br label %95

95:                                               ; preds = %90, %41
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!5, !7}
!5 = distinct !{!5, !6, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!6 = distinct !{!6, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!7 = distinct !{!7, !8, !"_ZN11SkImageInfo13MakeN32PremulEii5sk_spI12SkColorSpaceE: argument 0"}
!8 = distinct !{!8, !"_ZN11SkImageInfo13MakeN32PremulEii5sk_spI12SkColorSpaceE"}
!9 = !{!10, !12}
!10 = distinct !{!10, !11, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!11 = distinct !{!11, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!12 = distinct !{!12, !13, !"_ZN11SkImageInfo13MakeN32PremulEii5sk_spI12SkColorSpaceE: argument 0"}
!13 = distinct !{!13, !"_ZN11SkImageInfo13MakeN32PremulEii5sk_spI12SkColorSpaceE"}
