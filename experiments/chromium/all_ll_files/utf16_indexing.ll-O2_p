; ModuleID = '../../ui/gfx/utf16_indexing.cc'
source_filename = "../../ui/gfx/utf16_indexing.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN3gfx21IsValidCodePointIndexERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEEm(%"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), i64) local_unnamed_addr #0 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %29, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %5, i64 0, i32 1, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = zext i8 %7 to i64
  %12 = select i1 %8, i64 %10, i64 %11
  %13 = icmp eq i64 %12, %1
  br i1 %13, label %29, label %14

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i16*, i16** %15, align 8
  %17 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %18 = select i1 %8, i16* %16, i16* %17
  %19 = getelementptr inbounds i16, i16* %18, i64 %1
  %20 = load i16, i16* %19, align 2
  %21 = and i16 %20, -1024
  %22 = icmp eq i16 %21, -9216
  br i1 %22, label %23, label %29

23:                                               ; preds = %14
  %24 = add i64 %1, -1
  %25 = getelementptr inbounds i16, i16* %18, i64 %24
  %26 = load i16, i16* %25, align 2
  %27 = and i16 %26, -1024
  %28 = icmp ne i16 %27, -10240
  br label %29

29:                                               ; preds = %14, %23, %4, %2
  %30 = phi i1 [ true, %4 ], [ true, %2 ], [ true, %14 ], [ %28, %23 ]
  ret i1 %30
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN3gfx18UTF16IndexToOffsetERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEEmm(%"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), i64, i64) local_unnamed_addr #0 {
  %4 = icmp ult i64 %1, %2
  br i1 %4, label %5, label %18

5:                                                ; preds = %3
  %6 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = zext i8 %8 to i64
  %13 = select i1 %9, i64 %11, i64 %12
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i16*, i16** %14, align 8
  %16 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %17 = select i1 %9, i16* %15, i16* %16
  br label %33

18:                                               ; preds = %3
  %19 = icmp ugt i64 %1, %2
  br i1 %19, label %20, label %79

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %21, i64 0, i32 1, i32 1
  %23 = load i8, i8* %22, align 1
  %24 = icmp slt i8 %23, 0
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = zext i8 %23 to i64
  %28 = select i1 %24, i64 %26, i64 %27
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i16*, i16** %29, align 8
  %31 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %32 = select i1 %24, i16* %30, i16* %31
  br label %56

33:                                               ; preds = %51, %5
  %34 = phi i64 [ 0, %5 ], [ %54, %51 ]
  %35 = phi i64 [ %1, %5 ], [ %36, %51 ]
  %36 = add nuw i64 %35, 1
  %37 = icmp eq i64 %35, 0
  %38 = icmp eq i64 %13, %35
  %39 = or i1 %37, %38
  br i1 %39, label %51, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds i16, i16* %17, i64 %35
  %42 = load i16, i16* %41, align 2
  %43 = and i16 %42, -1024
  %44 = icmp eq i16 %43, -9216
  br i1 %44, label %45, label %51

45:                                               ; preds = %40
  %46 = add i64 %35, -1
  %47 = getelementptr inbounds i16, i16* %17, i64 %46
  %48 = load i16, i16* %47, align 2
  %49 = and i16 %48, -1024
  %50 = icmp ne i16 %49, -10240
  br label %51

51:                                               ; preds = %33, %40, %45
  %52 = phi i1 [ true, %33 ], [ true, %40 ], [ %50, %45 ]
  %53 = zext i1 %52 to i64
  %54 = add nuw nsw i64 %34, %53
  %55 = icmp eq i64 %36, %2
  br i1 %55, label %79, label %33

56:                                               ; preds = %74, %20
  %57 = phi i64 [ 0, %20 ], [ %77, %74 ]
  %58 = phi i64 [ %2, %20 ], [ %59, %74 ]
  %59 = add nuw i64 %58, 1
  %60 = icmp eq i64 %58, 0
  %61 = icmp eq i64 %28, %58
  %62 = or i1 %60, %61
  br i1 %62, label %74, label %63

63:                                               ; preds = %56
  %64 = getelementptr inbounds i16, i16* %32, i64 %58
  %65 = load i16, i16* %64, align 2
  %66 = and i16 %65, -1024
  %67 = icmp eq i16 %66, -9216
  br i1 %67, label %68, label %74

68:                                               ; preds = %63
  %69 = add i64 %58, -1
  %70 = getelementptr inbounds i16, i16* %32, i64 %69
  %71 = load i16, i16* %70, align 2
  %72 = and i16 %71, -1024
  %73 = icmp ne i16 %72, -10240
  br label %74

74:                                               ; preds = %56, %63, %68
  %75 = phi i1 [ true, %56 ], [ true, %63 ], [ %73, %68 ]
  %76 = zext i1 %75 to i64
  %77 = sub nsw i64 %57, %76
  %78 = icmp eq i64 %59, %1
  br i1 %78, label %79, label %56

79:                                               ; preds = %74, %51, %18
  %80 = phi i64 [ 0, %18 ], [ %54, %51 ], [ %77, %74 ]
  ret i64 %80
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN3gfx18UTF16OffsetToIndexERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEEml(%"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), i64, i64) local_unnamed_addr #0 {
  %4 = icmp sgt i64 %2, 0
  br i1 %4, label %5, label %41

5:                                                ; preds = %3
  %6 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = zext i8 %8 to i64
  %13 = select i1 %9, i64 %11, i64 %12
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i16*, i16** %14, align 8
  %16 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %17 = select i1 %9, i16* %15, i16* %16
  br label %18

18:                                               ; preds = %5, %36
  %19 = phi i64 [ %1, %5 ], [ %23, %36 ]
  %20 = phi i64 [ %2, %5 ], [ %39, %36 ]
  %21 = icmp ult i64 %19, %13
  br i1 %21, label %22, label %85

22:                                               ; preds = %18
  %23 = add nuw i64 %19, 1
  %24 = icmp eq i64 %19, 0
  br i1 %24, label %36, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds i16, i16* %17, i64 %19
  %27 = load i16, i16* %26, align 2
  %28 = and i16 %27, -1024
  %29 = icmp eq i16 %28, -9216
  br i1 %29, label %30, label %36

30:                                               ; preds = %25
  %31 = add i64 %19, -1
  %32 = getelementptr inbounds i16, i16* %17, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = and i16 %33, -1024
  %35 = icmp ne i16 %34, -10240
  br label %36

36:                                               ; preds = %22, %25, %30
  %37 = phi i1 [ true, %22 ], [ true, %25 ], [ %35, %30 ]
  %38 = zext i1 %37 to i64
  %39 = sub nuw nsw i64 %20, %38
  %40 = icmp sgt i64 %39, 0
  br i1 %40, label %18, label %41

41:                                               ; preds = %36, %3
  %42 = phi i64 [ %2, %3 ], [ %39, %36 ]
  %43 = phi i64 [ %1, %3 ], [ %23, %36 ]
  %44 = icmp slt i64 %42, 0
  %45 = icmp ne i64 %43, 0
  %46 = and i1 %44, %45
  br i1 %46, label %47, label %85

47:                                               ; preds = %41
  %48 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %48, i64 0, i32 1, i32 1
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  %52 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = zext i8 %50 to i64
  %55 = select i1 %51, i64 %53, i64 %54
  %56 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load i16*, i16** %56, align 8
  %58 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %59 = select i1 %51, i16* %57, i16* %58
  br label %60

60:                                               ; preds = %47, %78
  %61 = phi i64 [ %43, %47 ], [ %63, %78 ]
  %62 = phi i64 [ %42, %47 ], [ %81, %78 ]
  %63 = add i64 %61, -1
  %64 = icmp eq i64 %63, 0
  %65 = icmp eq i64 %55, %63
  %66 = or i1 %64, %65
  br i1 %66, label %78, label %67

67:                                               ; preds = %60
  %68 = getelementptr inbounds i16, i16* %59, i64 %63
  %69 = load i16, i16* %68, align 2
  %70 = and i16 %69, -1024
  %71 = icmp eq i16 %70, -9216
  br i1 %71, label %72, label %78

72:                                               ; preds = %67
  %73 = add i64 %61, -2
  %74 = getelementptr inbounds i16, i16* %59, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = and i16 %75, -1024
  %77 = icmp ne i16 %76, -10240
  br label %78

78:                                               ; preds = %60, %67, %72
  %79 = phi i1 [ true, %60 ], [ true, %67 ], [ %77, %72 ]
  %80 = zext i1 %79 to i64
  %81 = add nsw i64 %62, %80
  %82 = icmp slt i64 %81, 0
  %83 = icmp ne i64 %63, 0
  %84 = and i1 %82, %83
  br i1 %84, label %60, label %85

85:                                               ; preds = %18, %78, %41
  %86 = phi i64 [ %43, %41 ], [ %63, %78 ], [ %19, %18 ]
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %114, label %88

88:                                               ; preds = %85
  %89 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %90 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %89, i64 0, i32 1, i32 1
  %91 = load i8, i8* %90, align 1
  %92 = icmp slt i8 %91, 0
  %93 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %94 = load i64, i64* %93, align 8
  %95 = zext i8 %91 to i64
  %96 = select i1 %92, i64 %94, i64 %95
  %97 = icmp eq i64 %96, %86
  br i1 %97, label %114, label %98

98:                                               ; preds = %88
  %99 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %100 = load i16*, i16** %99, align 8
  %101 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %102 = select i1 %92, i16* %100, i16* %101
  %103 = getelementptr inbounds i16, i16* %102, i64 %86
  %104 = load i16, i16* %103, align 2
  %105 = and i16 %104, -1024
  %106 = icmp eq i16 %105, -9216
  br i1 %106, label %107, label %114

107:                                              ; preds = %98
  %108 = add i64 %86, -1
  %109 = getelementptr inbounds i16, i16* %102, i64 %108
  %110 = load i16, i16* %109, align 2
  %111 = and i16 %110, -1024
  %112 = icmp eq i16 %111, -10240
  %113 = add i64 %86, 1
  br i1 %112, label %115, label %114

114:                                              ; preds = %107, %98, %85, %88
  br label %115

115:                                              ; preds = %107, %114
  %116 = phi i64 [ %86, %114 ], [ %113, %107 ]
  ret i64 %116
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
