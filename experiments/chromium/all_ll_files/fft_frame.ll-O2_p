; ModuleID = '../../third_party/blink/renderer/platform/audio/fft_frame.cc'
source_filename = "../../third_party/blink/renderer/platform/audio/fft_frame.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::FFTFrame" = type { i32, i32, %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.blink::AudioArray" = type <{ float*, float*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink10AudioArrayIfE8AllocateEm = comdat any

@.str = private unnamed_addr constant [54 x i8] c"n <= std::numeric_limits<unsigned>::max() / sizeof(T)\00", align 1
@.str.1 = private unnamed_addr constant [62 x i8] c"../../third_party/blink/renderer/platform/audio/audio_array.h\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"allocation_\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIfEEEEPKcv = private unnamed_addr constant [72 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::AudioArray<float>]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8FFTFrame11DoPaddedFFTEPKfm(%"class.blink::FFTFrame"*, float* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::AudioArray", align 8
  %5 = bitcast %"class.blink::AudioArray"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %4, i64 0, i32 1
  %7 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %4, i64 0, i32 2
  %8 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 0
  %9 = bitcast %"class.blink::AudioArray"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  %10 = load i32, i32* %8, align 8
  %11 = zext i32 %10 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 20, i1 false) #7
  call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* nonnull %4, i64 %11) #7
  %12 = trunc i64 %2 to i32
  %13 = load i32, i32* %7, align 8
  %14 = icmp ult i32 %13, %12
  br i1 %14, label %21, label %15

15:                                               ; preds = %3
  %16 = bitcast float** %6 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast float* %1 to i8*
  %19 = shl i64 %2, 2
  %20 = and i64 %19, 17179869180
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %17, i8* align 4 %18, i64 %20, i1 false) #7
  br label %21

21:                                               ; preds = %3, %15
  %22 = load float*, float** %6, align 8
  call void @_ZN5blink8FFTFrame5DoFFTEPKf(%"class.blink::FFTFrame"* %0, float* %22) #7
  %23 = bitcast %"class.blink::AudioArray"* %4 to i8**
  %24 = load i8*, i8** %23, align 8
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %24) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN5blink8FFTFrame5DoFFTEPKf(%"class.blink::FFTFrame"*, float*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::FFTFrame"* @_ZN5blink8FFTFrame23CreateInterpolatedFrameERKS0_S2_d(%"class.blink::FFTFrame"* nocapture readonly dereferenceable(104), %"class.blink::FFTFrame"* nocapture readonly dereferenceable(104), double) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::AudioArray", align 8
  %5 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = tail call noalias i8* @malloc(i64 104) #7
  %8 = bitcast i8* %7 to %"class.blink::FFTFrame"*
  tail call void @_ZN5blink8FFTFrameC1Ej(%"class.blink::FFTFrame"* %8, i32 %6) #7
  tail call void @_ZN5blink8FFTFrame30InterpolateFrequencyComponentsERKS0_S2_d(%"class.blink::FFTFrame"* %8, %"class.blink::FFTFrame"* dereferenceable(104) %0, %"class.blink::FFTFrame"* dereferenceable(104) %1, double %2)
  %9 = bitcast i8* %7 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = bitcast %"class.blink::AudioArray"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #7
  %12 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %4, i64 0, i32 1
  %13 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %4, i64 0, i32 2
  %14 = sext i32 %10 to i64
  %15 = bitcast %"class.blink::AudioArray"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 20, i1 false) #7
  call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* nonnull %4, i64 %14) #7
  %16 = load float*, float** %12, align 8
  call void @_ZN5blink8FFTFrame12DoInverseFFTEPf(%"class.blink::FFTFrame"* %8, float* %16) #7
  %17 = sdiv i32 %10, 2
  %18 = icmp ult i32 %10, %17
  %19 = load i32, i32* %13, align 8
  %20 = icmp ult i32 %19, %10
  %21 = or i1 %18, %20
  br i1 %21, label %30, label %22

22:                                               ; preds = %3
  %23 = load float*, float** %12, align 8
  %24 = zext i32 %17 to i64
  %25 = getelementptr inbounds float, float* %23, i64 %24
  %26 = bitcast float* %25 to i8*
  %27 = sub i32 %10, %17
  %28 = zext i32 %27 to i64
  %29 = shl nuw nsw i64 %28, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %26, i8 0, i64 %29, i1 false) #7
  br label %30

30:                                               ; preds = %3, %22
  %31 = load float*, float** %12, align 8
  call void @_ZN5blink8FFTFrame5DoFFTEPKf(%"class.blink::FFTFrame"* %8, float* %31) #7
  %32 = bitcast %"class.blink::AudioArray"* %4 to i8**
  %33 = load i8*, i8** %32, align 8
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %33) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #7
  ret %"class.blink::FFTFrame"* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8FFTFrame30InterpolateFrequencyComponentsERKS0_S2_d(%"class.blink::FFTFrame"* nocapture, %"class.blink::FFTFrame"* nocapture readonly dereferenceable(104), %"class.blink::FFTFrame"* nocapture readonly dereferenceable(104), double) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 0
  store i32 %6, i32* %7, align 8
  %8 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 1
  store i32 %9, i32* %10, align 4
  %11 = fsub double 1.000000e+00, %3
  %12 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %1, i64 0, i32 2, i32 1
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %2, i64 0, i32 2, i32 1
  %15 = load float*, float** %14, align 8
  %16 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %1, i64 0, i32 3, i32 1
  %17 = load float*, float** %16, align 8
  %18 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %2, i64 0, i32 3, i32 1
  %19 = load float*, float** %18, align 8
  %20 = load float, float* %13, align 4
  %21 = fpext float %20 to double
  %22 = fmul double %11, %21
  %23 = load float, float* %15, align 4
  %24 = fpext float %23 to double
  %25 = fmul double %24, %3
  %26 = fadd double %22, %25
  %27 = fptrunc double %26 to float
  %28 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 2, i32 1
  %29 = load float*, float** %28, align 8
  store float %27, float* %29, align 4
  %30 = load float, float* %17, align 4
  %31 = fpext float %30 to double
  %32 = fmul double %11, %31
  %33 = load float, float* %19, align 4
  %34 = fpext float %33 to double
  %35 = fmul double %34, %3
  %36 = fadd double %32, %35
  %37 = fptrunc double %36 to float
  %38 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 3, i32 1
  %39 = load float*, float** %38, align 8
  store float %37, float* %39, align 4
  %40 = load i32, i32* %7, align 8
  %41 = icmp ugt i32 %40, 3
  br i1 %41, label %42, label %45

42:                                               ; preds = %4
  %43 = lshr i32 %40, 1
  %44 = zext i32 %43 to i64
  br label %46

45:                                               ; preds = %158, %4
  ret void

46:                                               ; preds = %42, %158
  %47 = phi i64 [ 1, %42 ], [ %167, %158 ]
  %48 = phi double [ 0.000000e+00, %42 ], [ %94, %158 ]
  %49 = phi double [ 0.000000e+00, %42 ], [ %95, %158 ]
  %50 = phi double [ 0.000000e+00, %42 ], [ %131, %158 ]
  %51 = getelementptr inbounds float, float* %13, i64 %47
  %52 = load float, float* %51, align 4
  %53 = fpext float %52 to double
  %54 = getelementptr inbounds float, float* %17, i64 %47
  %55 = load float, float* %54, align 4
  %56 = fpext float %55 to double
  %57 = getelementptr inbounds float, float* %15, i64 %47
  %58 = load float, float* %57, align 4
  %59 = fpext float %58 to double
  %60 = getelementptr inbounds float, float* %19, i64 %47
  %61 = load float, float* %60, align 4
  %62 = fpext float %61 to double
  %63 = tail call double @hypot(double %53, double %56) #7
  %64 = tail call double @hypot(double %59, double %62) #7
  %65 = tail call double @_ZN6fdlibm5log10Ed(double %63) #7
  %66 = fmul double %65, 2.000000e+01
  %67 = tail call double @_ZN6fdlibm5log10Ed(double %64) #7
  %68 = fmul double %67, 2.000000e+01
  %69 = fsub double %66, %68
  %70 = icmp ugt i64 %47, 16
  %71 = select i1 %70, double 5.000000e+00, double 2.000000e+00
  %72 = fsub double -0.000000e+00, %71
  %73 = fcmp olt double %69, %72
  %74 = fcmp olt double %66, 0.000000e+00
  %75 = and i1 %74, %73
  br i1 %75, label %76, label %79

76:                                               ; preds = %46
  %77 = tail call double @_ZN6fdlibm3powEdd(double %11, double 7.500000e-01) #7
  %78 = fsub double 1.000000e+00, %77
  br label %86

79:                                               ; preds = %46
  %80 = fcmp ogt double %69, %71
  %81 = fcmp olt double %68, 0.000000e+00
  %82 = and i1 %81, %80
  br i1 %82, label %83, label %86

83:                                               ; preds = %79
  %84 = tail call double @_ZN6fdlibm3powEdd(double %3, double 7.500000e-01) #7
  %85 = fsub double 1.000000e+00, %84
  br label %86

86:                                               ; preds = %79, %83, %76
  %87 = phi double [ %77, %76 ], [ %85, %83 ], [ %11, %79 ]
  %88 = phi double [ %78, %76 ], [ %84, %83 ], [ %3, %79 ]
  %89 = fmul double %66, %87
  %90 = fmul double %68, %88
  %91 = fadd double %89, %90
  %92 = fmul double %91, 5.000000e-02
  %93 = tail call double @_ZN6fdlibm3powEdd(double 1.000000e+01, double %92) #7
  %94 = tail call double @atan2(double %56, double %53) #7
  %95 = tail call double @atan2(double %62, double %59) #7
  %96 = fsub double %94, %48
  %97 = fsub double %95, %49
  %98 = fcmp ogt double %96, 0x400921FB54442D18
  %99 = fadd double %96, 0xC01921FB54442D18
  %100 = select i1 %98, double %99, double %96
  %101 = fcmp olt double %100, 0xC00921FB54442D18
  %102 = fadd double %100, 0x401921FB54442D18
  %103 = select i1 %101, double %102, double %100
  %104 = fcmp ogt double %97, 0x400921FB54442D18
  %105 = fadd double %97, 0xC01921FB54442D18
  %106 = select i1 %104, double %105, double %97
  %107 = fcmp olt double %106, 0xC00921FB54442D18
  %108 = fadd double %106, 0x401921FB54442D18
  %109 = select i1 %107, double %108, double %106
  %110 = fsub double %103, %109
  %111 = fcmp ogt double %110, 0x400921FB54442D18
  br i1 %111, label %112, label %114

112:                                              ; preds = %86
  %113 = fadd double %109, 0x401921FB54442D18
  br label %119

114:                                              ; preds = %86
  %115 = fsub double %109, %103
  %116 = fcmp ogt double %115, 0x400921FB54442D18
  br i1 %116, label %117, label %119

117:                                              ; preds = %114
  %118 = fadd double %103, 0x401921FB54442D18
  br label %119

119:                                              ; preds = %114, %117, %112
  %120 = phi double [ %109, %117 ], [ %113, %112 ], [ %109, %114 ]
  %121 = phi double [ %118, %117 ], [ %103, %112 ], [ %103, %114 ]
  %122 = fmul double %87, %121
  %123 = fmul double %88, %120
  %124 = fadd double %122, %123
  %125 = fadd double %50, %124
  %126 = fcmp ogt double %125, 0x400921FB54442D18
  %127 = fadd double %125, 0xC01921FB54442D18
  %128 = select i1 %126, double %127, double %125
  %129 = fcmp olt double %128, 0xC00921FB54442D18
  %130 = fadd double %128, 0x401921FB54442D18
  %131 = select i1 %129, double %130, double %128
  %132 = fcmp uno double %93, 0.000000e+00
  %133 = bitcast double %93 to i64
  %134 = icmp slt i64 %133, 0
  %135 = or i1 %132, %134
  br i1 %135, label %158, label %136

136:                                              ; preds = %119
  %137 = fcmp uno double %131, 0.000000e+00
  br i1 %137, label %138, label %142

138:                                              ; preds = %136
  %139 = tail call double @llvm.fabs.f64(double %93) #8
  %140 = fcmp oeq double %139, 0x7FF0000000000000
  br i1 %140, label %158, label %141

141:                                              ; preds = %138
  br label %158

142:                                              ; preds = %136
  %143 = tail call double @llvm.fabs.f64(double %131) #8
  %144 = fcmp oeq double %143, 0x7FF0000000000000
  br i1 %144, label %145, label %149

145:                                              ; preds = %142
  %146 = tail call double @llvm.fabs.f64(double %93) #8
  %147 = fcmp oeq double %146, 0x7FF0000000000000
  br i1 %147, label %158, label %148

148:                                              ; preds = %145
  br label %158

149:                                              ; preds = %142
  %150 = tail call double @cos(double %131) #7
  %151 = fmul double %93, %150
  %152 = fcmp ord double %151, 0.000000e+00
  %153 = select i1 %152, double %151, double 0.000000e+00
  %154 = tail call double @sin(double %131) #7
  %155 = fmul double %93, %154
  %156 = fcmp ord double %155, 0.000000e+00
  %157 = select i1 %156, double %155, double 0.000000e+00
  br label %158

158:                                              ; preds = %119, %138, %141, %145, %148, %149
  %159 = phi double [ %131, %141 ], [ 0x7FF8000000000000, %148 ], [ %157, %149 ], [ 0x7FF8000000000000, %119 ], [ %131, %138 ], [ 0x7FF8000000000000, %145 ]
  %160 = phi double [ %131, %141 ], [ 0x7FF8000000000000, %148 ], [ %153, %149 ], [ 0x7FF8000000000000, %119 ], [ %93, %138 ], [ %93, %145 ]
  %161 = fptrunc double %160 to float
  %162 = load float*, float** %28, align 8
  %163 = getelementptr inbounds float, float* %162, i64 %47
  store float %161, float* %163, align 4
  %164 = fptrunc double %159 to float
  %165 = load float*, float** %38, align 8
  %166 = getelementptr inbounds float, float* %165, i64 %47
  store float %164, float* %166, align 4
  %167 = add nuw nsw i64 %47, 1
  %168 = icmp ult i64 %167, %44
  br i1 %168, label %46, label %45
}

declare void @_ZN5blink8FFTFrame12DoInverseFFTEPf(%"class.blink::FFTFrame"*, float*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8FFTFrame8ScaleFFTEf(%"class.blink::FFTFrame"* nocapture readonly, float) local_unnamed_addr #0 align 2 {
  %3 = alloca float, align 4
  store float %1, float* %3, align 4
  %4 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 2, i32 1
  %5 = load float*, float** %4, align 8
  %6 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 2, i32 2
  %7 = load i32, i32* %6, align 8
  call void @_ZN5blink11vector_math5VsmulEPKfiS2_Pfij(float* %5, i32 1, float* nonnull %3, float* %5, i32 1, i32 %7) #7
  %8 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 3, i32 1
  %9 = load float*, float** %8, align 8
  %10 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 3, i32 2
  %11 = load i32, i32* %10, align 8
  call void @_ZN5blink11vector_math5VsmulEPKfiS2_Pfij(float* %9, i32 1, float* nonnull %3, float* %9, i32 1, i32 %11) #7
  ret void
}

declare void @_ZN5blink11vector_math5VsmulEPKfiS2_Pfij(float*, i32, float*, float*, i32, i32) local_unnamed_addr #2

declare double @_ZN6fdlibm5log10Ed(double) local_unnamed_addr #2

declare double @_ZN6fdlibm3powEdd(double, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN5blink8FFTFrame24ExtractAverageGroupDelayEv(%"class.blink::FFTFrame"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = lshr i32 %3, 1
  %5 = uitofp i32 %3 to double
  %6 = fdiv double 0x401921FB54442D18, %5
  %7 = icmp eq i32 %4, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 3, i32 1
  %11 = zext i32 %4 to i64
  br label %24

12:                                               ; preds = %24, %1
  %13 = phi double [ 0.000000e+00, %1 ], [ %47, %24 ]
  %14 = phi double [ 0.000000e+00, %1 ], [ %48, %24 ]
  %15 = fdiv double %13, %14
  %16 = fsub double -0.000000e+00, %15
  %17 = fdiv double %16, %6
  %18 = fcmp ogt double %17, 2.000000e+01
  %19 = fadd double %17, -2.000000e+01
  %20 = select i1 %18, double %19, double %17
  %21 = fsub double -0.000000e+00, %20
  tail call void @_ZN5blink8FFTFrame21AddConstantGroupDelayEd(%"class.blink::FFTFrame"* %0, double %21)
  %22 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 2, i32 1
  %23 = load float*, float** %22, align 8
  store float 0.000000e+00, float* %23, align 4
  ret double %20

24:                                               ; preds = %24, %8
  %25 = phi i64 [ 0, %8 ], [ %49, %24 ]
  %26 = phi double [ 0.000000e+00, %8 ], [ %38, %24 ]
  %27 = phi double [ 0.000000e+00, %8 ], [ %48, %24 ]
  %28 = phi double [ 0.000000e+00, %8 ], [ %47, %24 ]
  %29 = load float*, float** %9, align 8
  %30 = getelementptr inbounds float, float* %29, i64 %25
  %31 = load float, float* %30, align 4
  %32 = fpext float %31 to double
  %33 = load float*, float** %10, align 8
  %34 = getelementptr inbounds float, float* %33, i64 %25
  %35 = load float, float* %34, align 4
  %36 = fpext float %35 to double
  %37 = tail call double @hypot(double %32, double %36) #7
  %38 = tail call double @atan2(double %36, double %32) #7
  %39 = fsub double %38, %26
  %40 = fcmp olt double %39, 0xC00921FB54442D18
  %41 = fadd double %39, 0x401921FB54442D18
  %42 = select i1 %40, double %41, double %39
  %43 = fcmp ogt double %42, 0x400921FB54442D18
  %44 = fadd double %42, 0xC01921FB54442D18
  %45 = select i1 %43, double %44, double %42
  %46 = fmul double %37, %45
  %47 = fadd double %28, %46
  %48 = fadd double %27, %37
  %49 = add nuw nsw i64 %25, 1
  %50 = icmp eq i64 %49, %11
  br i1 %50, label %12, label %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8FFTFrame21AddConstantGroupDelayEd(%"class.blink::FFTFrame"* nocapture readonly, double) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = uitofp i32 %4 to double
  %6 = fdiv double 0x401921FB54442D18, %5
  %7 = fmul double %6, %1
  %8 = icmp ugt i32 %4, 3
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = lshr i32 %4, 1
  %11 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 3, i32 1
  %13 = zext i32 %10 to i64
  br label %15

14:                                               ; preds = %57, %2
  ret void

15:                                               ; preds = %9, %57
  %16 = phi i64 [ 1, %9 ], [ %66, %57 ]
  %17 = load float*, float** %11, align 8
  %18 = getelementptr inbounds float, float* %17, i64 %16
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  %21 = load float*, float** %12, align 8
  %22 = getelementptr inbounds float, float* %21, i64 %16
  %23 = load float, float* %22, align 4
  %24 = fpext float %23 to double
  %25 = tail call double @hypot(double %20, double %24) #7
  %26 = tail call double @atan2(double %24, double %20) #7
  %27 = trunc i64 %16 to i32
  %28 = sitofp i32 %27 to double
  %29 = fmul double %7, %28
  %30 = fsub double %26, %29
  %31 = fcmp uno double %25, 0.000000e+00
  %32 = bitcast double %25 to i64
  %33 = icmp slt i64 %32, 0
  %34 = or i1 %31, %33
  br i1 %34, label %57, label %35

35:                                               ; preds = %15
  %36 = fcmp uno double %30, 0.000000e+00
  br i1 %36, label %37, label %41

37:                                               ; preds = %35
  %38 = tail call double @llvm.fabs.f64(double %25) #8
  %39 = fcmp oeq double %38, 0x7FF0000000000000
  br i1 %39, label %57, label %40

40:                                               ; preds = %37
  br label %57

41:                                               ; preds = %35
  %42 = tail call double @llvm.fabs.f64(double %30) #8
  %43 = fcmp oeq double %42, 0x7FF0000000000000
  br i1 %43, label %44, label %48

44:                                               ; preds = %41
  %45 = tail call double @llvm.fabs.f64(double %25) #8
  %46 = fcmp oeq double %45, 0x7FF0000000000000
  br i1 %46, label %57, label %47

47:                                               ; preds = %44
  br label %57

48:                                               ; preds = %41
  %49 = tail call double @cos(double %30) #7
  %50 = fmul double %25, %49
  %51 = fcmp ord double %50, 0.000000e+00
  %52 = select i1 %51, double %50, double 0.000000e+00
  %53 = tail call double @sin(double %30) #7
  %54 = fmul double %25, %53
  %55 = fcmp ord double %54, 0.000000e+00
  %56 = select i1 %55, double %54, double 0.000000e+00
  br label %57

57:                                               ; preds = %15, %37, %40, %44, %47, %48
  %58 = phi double [ %30, %40 ], [ 0x7FF8000000000000, %47 ], [ %56, %48 ], [ 0x7FF8000000000000, %15 ], [ %30, %37 ], [ 0x7FF8000000000000, %44 ]
  %59 = phi double [ %30, %40 ], [ 0x7FF8000000000000, %47 ], [ %52, %48 ], [ 0x7FF8000000000000, %15 ], [ %25, %37 ], [ %25, %44 ]
  %60 = fptrunc double %59 to float
  %61 = load float*, float** %11, align 8
  %62 = getelementptr inbounds float, float* %61, i64 %16
  store float %60, float* %62, align 4
  %63 = fptrunc double %58 to float
  %64 = load float*, float** %12, align 8
  %65 = getelementptr inbounds float, float* %64, i64 %16
  store float %63, float* %65, align 4
  %66 = add nuw nsw i64 %16, 1
  %67 = icmp ult i64 %66, %13
  br i1 %67, label %15, label %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8FFTFrame8MultiplyERKS0_(%"class.blink::FFTFrame"* nocapture readonly, %"class.blink::FFTFrame"* nocapture readonly dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = lshr i32 %4, 1
  %6 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 2, i32 1
  %7 = load float*, float** %6, align 8
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %0, i64 0, i32 3, i32 1
  %10 = load float*, float** %9, align 8
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %1, i64 0, i32 2, i32 1
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds %"class.blink::FFTFrame", %"class.blink::FFTFrame"* %1, i64 0, i32 3, i32 1
  %15 = load float*, float** %14, align 8
  tail call void @_ZN5blink11vector_math5ZvmulEPKfS2_S2_S2_PfS3_j(float* %7, float* %10, float* %13, float* %15, float* %7, float* %10, i32 %5) #7
  %16 = load float*, float** %12, align 8
  %17 = load float, float* %16, align 4
  %18 = fmul float %8, %17
  %19 = load float*, float** %6, align 8
  store float %18, float* %19, align 4
  %20 = load float*, float** %14, align 8
  %21 = load float, float* %20, align 4
  %22 = fmul float %11, %21
  %23 = load float*, float** %9, align 8
  store float %22, float* %23, align 4
  ret void
}

declare void @_ZN5blink11vector_math5ZvmulEPKfS2_S2_S2_PfS3_j(float*, float*, float*, float*, float*, float*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #7
  %8 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = icmp ugt i64 %1, 1073741823
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* null, i8** %8, align 8
  br label %21

12:                                               ; preds = %2
  %13 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #7
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1073741823) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i8* %13, i8* %14) #7
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* %16, i8** %8, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 63, %"class.logging::CheckOpResult"* nonnull %4) #7
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #7
  br label %21

21:                                               ; preds = %11, %12, %18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #7
  %22 = trunc i64 %1 to i32
  %23 = shl i32 %22, 2
  %24 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 0
  %25 = load float*, float** %24, align 8
  %26 = icmp eq float* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %21
  %28 = bitcast float* %25 to i8*
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %28) #7
  br label %29

29:                                               ; preds = %21, %27
  %30 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %23, i32 32) #7
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %29
  call void @llvm.trap() #7
  unreachable

33:                                               ; preds = %29
  %34 = extractvalue { i32, i1 } %30, 0
  %35 = zext i32 %34 to i64
  %36 = call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 %35, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIfEEEEPKcv, i64 0, i64 0)) #7
  %37 = bitcast %"class.blink::AudioArray"* %0 to i8**
  store i8* %36, i8** %37, align 8
  %38 = icmp eq i8* %36, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %33
  %40 = ptrtoint i8* %36 to i64
  br label %46

41:                                               ; preds = %33
  %42 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)) #7
  %43 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #7
  %44 = bitcast %"class.blink::AudioArray"* %0 to i64*
  %45 = load i64, i64* %44, align 8
  br label %46

46:                                               ; preds = %39, %41
  %47 = phi i64 [ %40, %39 ], [ %45, %41 ]
  %48 = add i64 %47, 31
  %49 = and i64 %48, -32
  %50 = inttoptr i64 %49 to float*
  %51 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 1
  store float* %50, float** %51, align 8
  %52 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 2
  store i32 %22, i32* %52, align 8
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #2

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN5blink8FFTFrameC1Ej(%"class.blink::FFTFrame"*, i32) unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind
declare double @hypot(double, double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @atan2(double, double) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
