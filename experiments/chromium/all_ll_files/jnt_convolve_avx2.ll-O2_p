; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/jnt_convolve_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/jnt_convolve_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.InterpFilterParams = type { i16*, i16, i8 }
%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_dist_wtd_convolve_x_avx2(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %10 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 1
  %11 = load i16*, i16** %10, align 8
  %12 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = sub nsw i32 7, %15
  %17 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 8
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 9
  %20 = load i32, i32* %19, align 4
  %21 = trunc i32 %18 to i16
  %22 = insertelement <16 x i16> undef, i16 %21, i32 0
  %23 = shufflevector <16 x i16> %22, <16 x i16> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %24 = trunc i32 %20 to i16
  %25 = insertelement <16 x i16> undef, i16 %24, i32 0
  %26 = shufflevector <16 x i16> %25, <16 x i16> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %27 = shufflevector <16 x i16> %23, <16 x i16> %26, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %28 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 7
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = sub nsw i32 22, %33
  %35 = sub i32 %34, %15
  %36 = shl i32 1, %35
  %37 = add nsw i32 %35, -1
  %38 = shl i32 1, %37
  %39 = add nsw i32 %38, %36
  %40 = trunc i32 %39 to i16
  %41 = insertelement <16 x i16> undef, i16 %40, i32 0
  %42 = shufflevector <16 x i16> %41, <16 x i16> undef, <16 x i32> zeroinitializer
  %43 = sub nsw i32 14, %33
  %44 = sub i32 %43, %15
  %45 = shl i32 1, %44
  %46 = lshr i32 %45, 1
  %47 = trunc i32 %46 to i16
  %48 = insertelement <16 x i16> undef, i16 %47, i32 0
  %49 = shufflevector <16 x i16> %48, <16 x i16> undef, <16 x i32> zeroinitializer
  %50 = add nsw i32 %33, -1
  %51 = shl i32 1, %50
  %52 = lshr i32 %51, 1
  %53 = trunc i32 %52 to i16
  %54 = insertelement <16 x i16> undef, i16 %53, i32 0
  %55 = shufflevector <16 x i16> %54, <16 x i16> undef, <16 x i32> zeroinitializer
  %56 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %50, i32 0
  %57 = and i32 %7, 15
  %58 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %59 = load i16*, i16** %58, align 8
  %60 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %61 = load i16, i16* %60, align 8
  %62 = zext i16 %61 to i32
  %63 = mul nuw nsw i32 %57, %62
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i16, i16* %59, i64 %64
  %66 = bitcast i16* %65 to <2 x i64>*
  %67 = load <2 x i64>, <2 x i64>* %66, align 1
  %68 = shufflevector <2 x i64> %67, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %69 = bitcast <4 x i64> %68 to <16 x i16>
  %70 = ashr <16 x i16> %69, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %71 = bitcast <16 x i16> %70 to <32 x i8>
  %72 = shufflevector <32 x i8> %71, <32 x i8> undef, <32 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18>
  %73 = shufflevector <32 x i8> %71, <32 x i8> undef, <32 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22>
  %74 = shufflevector <32 x i8> %71, <32 x i8> undef, <32 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26>
  %75 = shufflevector <32 x i8> %71, <32 x i8> undef, <32 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30>
  %76 = or <32 x i8> %75, %72
  %77 = bitcast <32 x i8> %76 to <8 x i32>
  %78 = extractelement <8 x i32> %77, i64 0
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %188

80:                                               ; preds = %9
  %81 = getelementptr inbounds i8, i8* %0, i64 -1
  %82 = icmp sgt i32 %5, 0
  br i1 %82, label %83, label %305

83:                                               ; preds = %80
  %84 = icmp sgt i32 %4, 0
  %85 = bitcast <4 x i32> %56 to <8 x i16>
  %86 = icmp eq i32 %29, 0
  %87 = icmp eq i32 %31, 0
  %88 = sub <16 x i16> %49, %42
  %89 = icmp sgt i32 %4, 4
  %90 = sext i32 %13 to i64
  %91 = sext i32 %3 to i64
  %92 = sext i32 %1 to i64
  %93 = sext i32 %4 to i64
  %94 = sext i32 %5 to i64
  br label %95

95:                                               ; preds = %83, %185
  %96 = phi i64 [ 0, %83 ], [ %186, %185 ]
  %97 = mul nsw i64 %96, %92
  %98 = getelementptr inbounds i8, i8* %81, i64 %97
  %99 = mul nsw i64 %96, %90
  %100 = getelementptr inbounds i16, i16* %11, i64 %99
  br i1 %84, label %101, label %185

101:                                              ; preds = %95
  %102 = mul nsw i64 %96, %91
  br label %103

103:                                              ; preds = %101, %182
  %104 = phi i64 [ 0, %101 ], [ %183, %182 ]
  %105 = getelementptr inbounds i8, i8* %98, i64 %104
  %106 = add nsw i64 %104, %92
  %107 = getelementptr inbounds i8, i8* %98, i64 %106
  %108 = bitcast i8* %105 to <2 x i64>*
  %109 = load <2 x i64>, <2 x i64>* %108, align 1
  %110 = bitcast i8* %107 to <2 x i64>*
  %111 = load <2 x i64>, <2 x i64>* %110, align 1
  %112 = shufflevector <2 x i64> %109, <2 x i64> %111, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %113 = bitcast <4 x i64> %112 to <32 x i8>
  %114 = shufflevector <32 x i8> %113, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %115 = shufflevector <32 x i8> %113, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %116 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %114, <32 x i8> %73) #3
  %117 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %115, <32 x i8> %74) #3
  %118 = add <16 x i16> %116, %55
  %119 = add <16 x i16> %118, %117
  %120 = tail call <16 x i16> @llvm.x86.avx2.psra.w(<16 x i16> %119, <8 x i16> %85) #3
  %121 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %120, i32 %16) #3
  %122 = add <16 x i16> %121, %42
  %123 = bitcast <16 x i16> %122 to <4 x i64>
  br i1 %86, label %173, label %124

124:                                              ; preds = %103
  %125 = getelementptr inbounds i16, i16* %100, i64 %104
  %126 = add nsw i64 %104, %90
  %127 = getelementptr inbounds i16, i16* %100, i64 %126
  %128 = bitcast i16* %125 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 1
  %130 = bitcast i16* %127 to <2 x i64>*
  %131 = load <2 x i64>, <2 x i64>* %130, align 1
  %132 = shufflevector <2 x i64> %129, <2 x i64> %131, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %133 = bitcast <4 x i64> %132 to <16 x i16>
  br i1 %87, label %142, label %134

134:                                              ; preds = %124
  %135 = shufflevector <16 x i16> %133, <16 x i16> %122, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %136 = shufflevector <16 x i16> %133, <16 x i16> %122, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %137 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %135, <16 x i16> %27) #3
  %138 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %136, <16 x i16> %27) #3
  %139 = ashr <8 x i32> %137, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %140 = ashr <8 x i32> %138, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %141 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %139, <8 x i32> %140) #3
  br label %145

142:                                              ; preds = %124
  %143 = add <16 x i16> %122, %133
  %144 = ashr <16 x i16> %143, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %145

145:                                              ; preds = %134, %142
  %146 = phi <16 x i16> [ %141, %134 ], [ %144, %142 ]
  %147 = add <16 x i16> %88, %146
  %148 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %147, i32 %44) #3
  %149 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %148, <16 x i16> %148) #3
  %150 = bitcast <32 x i8> %149 to <4 x i64>
  br i1 %89, label %151, label %160

151:                                              ; preds = %145
  %152 = add nsw i64 %104, %102
  %153 = getelementptr inbounds i8, i8* %2, i64 %152
  %154 = extractelement <4 x i64> %150, i32 0
  %155 = bitcast i8* %153 to i64*
  store i64 %154, i64* %155, align 1
  %156 = add nsw i64 %152, %91
  %157 = getelementptr inbounds i8, i8* %2, i64 %156
  %158 = extractelement <4 x i64> %150, i32 2
  %159 = bitcast i8* %157 to i64*
  store i64 %158, i64* %159, align 1
  br label %182

160:                                              ; preds = %145
  %161 = shufflevector <4 x i64> %150, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %162 = shufflevector <4 x i64> %150, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %163 = bitcast <2 x i64> %162 to <4 x i32>
  %164 = extractelement <4 x i32> %163, i32 0
  %165 = add nsw i64 %104, %102
  %166 = getelementptr inbounds i8, i8* %2, i64 %165
  %167 = bitcast i8* %166 to i32*
  store i32 %164, i32* %167, align 4
  %168 = bitcast <2 x i64> %161 to <4 x i32>
  %169 = extractelement <4 x i32> %168, i32 0
  %170 = add nsw i64 %165, %91
  %171 = getelementptr inbounds i8, i8* %2, i64 %170
  %172 = bitcast i8* %171 to i32*
  store i32 %169, i32* %172, align 4
  br label %182

173:                                              ; preds = %103
  %174 = shufflevector <4 x i64> %123, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %175 = add nsw i64 %104, %99
  %176 = getelementptr inbounds i16, i16* %11, i64 %175
  %177 = bitcast i16* %176 to <2 x i64>*
  store <2 x i64> %174, <2 x i64>* %177, align 16
  %178 = shufflevector <4 x i64> %123, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %179 = add nsw i64 %175, %90
  %180 = getelementptr inbounds i16, i16* %11, i64 %179
  %181 = bitcast i16* %180 to <2 x i64>*
  store <2 x i64> %178, <2 x i64>* %181, align 16
  br label %182

182:                                              ; preds = %151, %160, %173
  %183 = add nuw nsw i64 %104, 8
  %184 = icmp slt i64 %183, %93
  br i1 %184, label %103, label %185

185:                                              ; preds = %182, %95
  %186 = add nuw nsw i64 %96, 2
  %187 = icmp slt i64 %186, %94
  br i1 %187, label %95, label %305

188:                                              ; preds = %9
  %189 = lshr i16 %61, 1
  %190 = zext i16 %189 to i64
  %191 = sub nsw i64 1, %190
  %192 = getelementptr inbounds i8, i8* %0, i64 %191
  %193 = icmp sgt i32 %5, 0
  br i1 %193, label %194, label %305

194:                                              ; preds = %188
  %195 = icmp sgt i32 %4, 0
  %196 = bitcast <4 x i32> %56 to <8 x i16>
  %197 = icmp eq i32 %29, 0
  %198 = icmp eq i32 %31, 0
  %199 = sub <16 x i16> %49, %42
  %200 = icmp sgt i32 %4, 4
  %201 = sext i32 %13 to i64
  %202 = sext i32 %3 to i64
  %203 = sext i32 %1 to i64
  %204 = sext i32 %4 to i64
  %205 = sext i32 %5 to i64
  br label %206

206:                                              ; preds = %194, %302
  %207 = phi i64 [ 0, %194 ], [ %303, %302 ]
  %208 = mul nsw i64 %207, %203
  %209 = getelementptr inbounds i8, i8* %192, i64 %208
  %210 = mul nsw i64 %207, %201
  %211 = getelementptr inbounds i16, i16* %11, i64 %210
  br i1 %195, label %212, label %302

212:                                              ; preds = %206
  %213 = mul nsw i64 %207, %202
  br label %214

214:                                              ; preds = %212, %299
  %215 = phi i64 [ 0, %212 ], [ %300, %299 ]
  %216 = getelementptr inbounds i8, i8* %209, i64 %215
  %217 = add nsw i64 %215, %203
  %218 = getelementptr inbounds i8, i8* %209, i64 %217
  %219 = bitcast i8* %216 to <2 x i64>*
  %220 = load <2 x i64>, <2 x i64>* %219, align 1
  %221 = bitcast i8* %218 to <2 x i64>*
  %222 = load <2 x i64>, <2 x i64>* %221, align 1
  %223 = shufflevector <2 x i64> %220, <2 x i64> %222, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %224 = bitcast <4 x i64> %223 to <32 x i8>
  %225 = shufflevector <32 x i8> %224, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %226 = shufflevector <32 x i8> %224, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %227 = shufflevector <32 x i8> %224, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %228 = shufflevector <32 x i8> %224, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30>
  %229 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %225, <32 x i8> %72) #3
  %230 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %226, <32 x i8> %73) #3
  %231 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %227, <32 x i8> %74) #3
  %232 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %228, <32 x i8> %75) #3
  %233 = add <16 x i16> %229, %55
  %234 = add <16 x i16> %233, %230
  %235 = add <16 x i16> %234, %231
  %236 = add <16 x i16> %235, %232
  %237 = tail call <16 x i16> @llvm.x86.avx2.psra.w(<16 x i16> %236, <8 x i16> %196) #3
  %238 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %237, i32 %16) #3
  %239 = add <16 x i16> %238, %42
  %240 = bitcast <16 x i16> %239 to <4 x i64>
  br i1 %197, label %290, label %241

241:                                              ; preds = %214
  %242 = getelementptr inbounds i16, i16* %211, i64 %215
  %243 = add nsw i64 %215, %201
  %244 = getelementptr inbounds i16, i16* %211, i64 %243
  %245 = bitcast i16* %242 to <2 x i64>*
  %246 = load <2 x i64>, <2 x i64>* %245, align 1
  %247 = bitcast i16* %244 to <2 x i64>*
  %248 = load <2 x i64>, <2 x i64>* %247, align 1
  %249 = shufflevector <2 x i64> %246, <2 x i64> %248, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %250 = bitcast <4 x i64> %249 to <16 x i16>
  br i1 %198, label %259, label %251

251:                                              ; preds = %241
  %252 = shufflevector <16 x i16> %250, <16 x i16> %239, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %253 = shufflevector <16 x i16> %250, <16 x i16> %239, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %254 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %252, <16 x i16> %27) #3
  %255 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %253, <16 x i16> %27) #3
  %256 = ashr <8 x i32> %254, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %257 = ashr <8 x i32> %255, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %258 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %256, <8 x i32> %257) #3
  br label %262

259:                                              ; preds = %241
  %260 = add <16 x i16> %239, %250
  %261 = ashr <16 x i16> %260, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %262

262:                                              ; preds = %251, %259
  %263 = phi <16 x i16> [ %258, %251 ], [ %261, %259 ]
  %264 = add <16 x i16> %199, %263
  %265 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %264, i32 %44) #3
  %266 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %265, <16 x i16> %265) #3
  %267 = bitcast <32 x i8> %266 to <4 x i64>
  br i1 %200, label %268, label %277

268:                                              ; preds = %262
  %269 = add nsw i64 %215, %213
  %270 = getelementptr inbounds i8, i8* %2, i64 %269
  %271 = extractelement <4 x i64> %267, i32 0
  %272 = bitcast i8* %270 to i64*
  store i64 %271, i64* %272, align 1
  %273 = add nsw i64 %269, %202
  %274 = getelementptr inbounds i8, i8* %2, i64 %273
  %275 = extractelement <4 x i64> %267, i32 2
  %276 = bitcast i8* %274 to i64*
  store i64 %275, i64* %276, align 1
  br label %299

277:                                              ; preds = %262
  %278 = shufflevector <4 x i64> %267, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %279 = shufflevector <4 x i64> %267, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %280 = bitcast <2 x i64> %279 to <4 x i32>
  %281 = extractelement <4 x i32> %280, i32 0
  %282 = add nsw i64 %215, %213
  %283 = getelementptr inbounds i8, i8* %2, i64 %282
  %284 = bitcast i8* %283 to i32*
  store i32 %281, i32* %284, align 4
  %285 = bitcast <2 x i64> %278 to <4 x i32>
  %286 = extractelement <4 x i32> %285, i32 0
  %287 = add nsw i64 %282, %202
  %288 = getelementptr inbounds i8, i8* %2, i64 %287
  %289 = bitcast i8* %288 to i32*
  store i32 %286, i32* %289, align 4
  br label %299

290:                                              ; preds = %214
  %291 = shufflevector <4 x i64> %240, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %292 = add nsw i64 %215, %210
  %293 = getelementptr inbounds i16, i16* %11, i64 %292
  %294 = bitcast i16* %293 to <2 x i64>*
  store <2 x i64> %291, <2 x i64>* %294, align 16
  %295 = shufflevector <4 x i64> %240, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %296 = add nsw i64 %292, %201
  %297 = getelementptr inbounds i16, i16* %11, i64 %296
  %298 = bitcast i16* %297 to <2 x i64>*
  store <2 x i64> %295, <2 x i64>* %298, align 16
  br label %299

299:                                              ; preds = %268, %277, %290
  %300 = add nuw nsw i64 %215, 8
  %301 = icmp slt i64 %300, %204
  br i1 %301, label %214, label %302

302:                                              ; preds = %299, %206
  %303 = add nuw nsw i64 %207, 2
  %304 = icmp slt i64 %303, %205
  br i1 %304, label %206, label %305

305:                                              ; preds = %302, %185, %188, %80
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_dist_wtd_convolve_y_avx2(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %10 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 1
  %11 = load i16*, i16** %10, align 8
  %12 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = sub i32 8, %15
  %17 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 4
  %18 = load i32, i32* %17, align 8
  %19 = shl i32 1, %18
  %20 = ashr i32 %19, 1
  %21 = insertelement <8 x i32> undef, i32 %20, i32 0
  %22 = shufflevector <8 x i32> %21, <8 x i32> undef, <8 x i32> zeroinitializer
  %23 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %18, i32 0
  %24 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 8
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 9
  %27 = load i32, i32* %26, align 4
  %28 = trunc i32 %25 to i16
  %29 = insertelement <16 x i16> undef, i16 %28, i32 0
  %30 = shufflevector <16 x i16> %29, <16 x i16> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = trunc i32 %27 to i16
  %32 = insertelement <16 x i16> undef, i16 %31, i32 0
  %33 = shufflevector <16 x i16> %32, <16 x i16> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %34 = shufflevector <16 x i16> %30, <16 x i16> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %35 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 7
  %38 = load i32, i32* %37, align 4
  %39 = sub nsw i32 22, %15
  %40 = sub i32 %39, %18
  %41 = shl i32 1, %40
  %42 = add nsw i32 %40, -1
  %43 = shl i32 1, %42
  %44 = add nsw i32 %43, %41
  %45 = trunc i32 %44 to i16
  %46 = insertelement <16 x i16> undef, i16 %45, i32 0
  %47 = sub <16 x i16> <i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %46
  %48 = shufflevector <16 x i16> %47, <16 x i16> undef, <16 x i32> zeroinitializer
  %49 = trunc i32 %41 to i16
  %50 = insertelement <16 x i16> undef, i16 %49, i32 0
  %51 = shufflevector <16 x i16> %50, <16 x i16> undef, <16 x i32> zeroinitializer
  %52 = sub nsw i32 14, %15
  %53 = sub i32 %52, %18
  %54 = shl i32 1, %53
  %55 = lshr i32 %54, 1
  %56 = trunc i32 %55 to i16
  %57 = insertelement <16 x i16> undef, i16 %56, i32 0
  %58 = shufflevector <16 x i16> %57, <16 x i16> undef, <16 x i32> zeroinitializer
  %59 = and i32 %7, 15
  %60 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %61 = load i16*, i16** %60, align 8
  %62 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %63 = load i16, i16* %62, align 8
  %64 = zext i16 %63 to i32
  %65 = mul nuw nsw i32 %59, %64
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds i16, i16* %61, i64 %66
  %68 = bitcast i16* %67 to <2 x i64>*
  %69 = load <2 x i64>, <2 x i64>* %68, align 1
  %70 = shufflevector <2 x i64> %69, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %71 = bitcast <4 x i64> %70 to <16 x i16>
  %72 = ashr <16 x i16> %71, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %73 = bitcast <16 x i16> %72 to <32 x i8>
  %74 = shufflevector <32 x i8> %73, <32 x i8> undef, <32 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18>
  %75 = shufflevector <32 x i8> %73, <32 x i8> undef, <32 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22>
  %76 = shufflevector <32 x i8> %73, <32 x i8> undef, <32 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26>
  %77 = shufflevector <32 x i8> %73, <32 x i8> undef, <32 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30>
  %78 = or <32 x i8> %77, %74
  %79 = bitcast <32 x i8> %78 to <8 x i32>
  %80 = extractelement <8 x i32> %79, i64 0
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %339

82:                                               ; preds = %9
  %83 = sext i32 %1 to i64
  %84 = sub nsw i64 0, %83
  %85 = getelementptr inbounds i8, i8* %0, i64 %84
  %86 = icmp sgt i32 %4, 0
  br i1 %86, label %87, label %623

87:                                               ; preds = %82
  %88 = icmp sgt i32 %5, 0
  %89 = icmp eq i32 %36, 0
  %90 = icmp eq i32 %38, 0
  %91 = add <16 x i16> %48, %58
  %92 = sext i32 %13 to i64
  %93 = sext i32 %3 to i64
  %94 = sext i32 %5 to i64
  %95 = sext i32 %4 to i64
  br label %96

96:                                               ; preds = %87, %336
  %97 = phi i64 [ 0, %87 ], [ %337, %336 ]
  %98 = getelementptr inbounds i8, i8* %85, i64 %97
  %99 = bitcast i8* %98 to <2 x i64>*
  %100 = load <2 x i64>, <2 x i64>* %99, align 1
  %101 = getelementptr inbounds i8, i8* %98, i64 %83
  %102 = bitcast i8* %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 1
  %104 = shufflevector <2 x i64> %100, <2 x i64> %103, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %105 = getelementptr inbounds i8, i8* %101, i64 %83
  %106 = bitcast i8* %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 1
  %108 = shufflevector <2 x i64> %103, <2 x i64> %107, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %109 = getelementptr inbounds i8, i8* %105, i64 %83
  %110 = bitcast i8* %109 to <2 x i64>*
  %111 = load <2 x i64>, <2 x i64>* %110, align 1
  %112 = shufflevector <2 x i64> %107, <2 x i64> %111, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %113 = getelementptr inbounds i8, i8* %109, i64 %83
  %114 = bitcast i8* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 1
  %116 = shufflevector <2 x i64> %111, <2 x i64> %115, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %117 = bitcast <4 x i64> %104 to <32 x i8>
  %118 = bitcast <4 x i64> %108 to <32 x i8>
  %119 = bitcast <4 x i64> %112 to <32 x i8>
  %120 = bitcast <4 x i64> %116 to <32 x i8>
  br i1 %88, label %121, label %336

121:                                              ; preds = %96
  %122 = shufflevector <2 x i64> %115, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %123 = shufflevector <32 x i8> %119, <32 x i8> %120, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %124 = shufflevector <32 x i8> %117, <32 x i8> %118, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %125 = shufflevector <32 x i8> %119, <32 x i8> %120, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %126 = shufflevector <32 x i8> %117, <32 x i8> %118, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %127 = trunc i64 %97 to i32
  %128 = sub nsw i32 %4, %127
  %129 = icmp slt i32 %128, 16
  %130 = icmp sgt i32 %128, 4
  br label %131

131:                                              ; preds = %121, %333
  %132 = phi i64 [ 0, %121 ], [ %334, %333 ]
  %133 = phi <4 x i64> [ %122, %121 ], [ %149, %333 ]
  %134 = phi <32 x i8> [ %126, %121 ], [ %135, %333 ]
  %135 = phi <32 x i8> [ %125, %121 ], [ %153, %333 ]
  %136 = phi <32 x i8> [ %124, %121 ], [ %137, %333 ]
  %137 = phi <32 x i8> [ %123, %121 ], [ %154, %333 ]
  %138 = add nuw nsw i64 %132, 5
  %139 = mul nsw i64 %138, %83
  %140 = add nsw i64 %139, %97
  %141 = getelementptr inbounds i8, i8* %85, i64 %140
  %142 = bitcast i8* %141 to <2 x i64>*
  %143 = load <2 x i64>, <2 x i64>* %142, align 1
  %144 = shufflevector <2 x i64> %143, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %145 = shufflevector <4 x i64> %133, <4 x i64> %144, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %146 = getelementptr inbounds i8, i8* %141, i64 %83
  %147 = bitcast i8* %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 1
  %149 = shufflevector <2 x i64> %148, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %150 = shufflevector <2 x i64> %143, <2 x i64> %148, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %151 = bitcast <4 x i64> %145 to <32 x i8>
  %152 = bitcast <4 x i64> %150 to <32 x i8>
  %153 = shufflevector <32 x i8> %151, <32 x i8> %152, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %154 = shufflevector <32 x i8> %151, <32 x i8> %152, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %155 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %134, <32 x i8> %75) #3
  %156 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %135, <32 x i8> %76) #3
  %157 = add <16 x i16> %155, <i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192>
  %158 = add <16 x i16> %157, %156
  %159 = shufflevector <16 x i16> %158, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %160 = bitcast <16 x i16> %159 to <8 x i32>
  %161 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %160, i32 %16) #3
  %162 = add <8 x i32> %161, %22
  %163 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %162, <4 x i32> %23) #3
  %164 = shufflevector <16 x i16> %158, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %165 = bitcast <16 x i16> %164 to <8 x i32>
  %166 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %165, i32 %16) #3
  %167 = add <8 x i32> %166, %22
  %168 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %167, <4 x i32> %23) #3
  %169 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %163, <8 x i32> %168) #3
  %170 = add <16 x i16> %169, %51
  %171 = bitcast <16 x i16> %170 to <4 x i64>
  br i1 %129, label %172, label %236

172:                                              ; preds = %131
  br i1 %89, label %226, label %173

173:                                              ; preds = %172
  %174 = mul nsw i64 %132, %92
  %175 = add nsw i64 %174, %97
  %176 = getelementptr inbounds i16, i16* %11, i64 %175
  %177 = add nsw i64 %175, %92
  %178 = getelementptr inbounds i16, i16* %11, i64 %177
  %179 = bitcast i16* %176 to <2 x i64>*
  %180 = load <2 x i64>, <2 x i64>* %179, align 1
  %181 = bitcast i16* %178 to <2 x i64>*
  %182 = load <2 x i64>, <2 x i64>* %181, align 1
  %183 = shufflevector <2 x i64> %180, <2 x i64> %182, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %184 = bitcast <4 x i64> %183 to <16 x i16>
  br i1 %90, label %193, label %185

185:                                              ; preds = %173
  %186 = shufflevector <16 x i16> %184, <16 x i16> %170, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %187 = shufflevector <16 x i16> %184, <16 x i16> %170, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %188 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %186, <16 x i16> %34) #3
  %189 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %187, <16 x i16> %34) #3
  %190 = ashr <8 x i32> %188, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %191 = ashr <8 x i32> %189, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %192 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %190, <8 x i32> %191) #3
  br label %196

193:                                              ; preds = %173
  %194 = add <16 x i16> %170, %184
  %195 = ashr <16 x i16> %194, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %196

196:                                              ; preds = %185, %193
  %197 = phi <16 x i16> [ %192, %185 ], [ %195, %193 ]
  %198 = add <16 x i16> %91, %197
  %199 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %198, i32 %53) #3
  %200 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %199, <16 x i16> %199) #3
  %201 = bitcast <32 x i8> %200 to <4 x i64>
  br i1 %130, label %202, label %212

202:                                              ; preds = %196
  %203 = mul nsw i64 %132, %93
  %204 = add nsw i64 %203, %97
  %205 = getelementptr inbounds i8, i8* %2, i64 %204
  %206 = extractelement <4 x i64> %201, i32 0
  %207 = bitcast i8* %205 to i64*
  store i64 %206, i64* %207, align 1
  %208 = add nsw i64 %204, %93
  %209 = getelementptr inbounds i8, i8* %2, i64 %208
  %210 = extractelement <4 x i64> %201, i32 2
  %211 = bitcast i8* %209 to i64*
  store i64 %210, i64* %211, align 1
  br label %333

212:                                              ; preds = %196
  %213 = shufflevector <4 x i64> %201, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %214 = shufflevector <4 x i64> %201, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %215 = bitcast <2 x i64> %214 to <4 x i32>
  %216 = extractelement <4 x i32> %215, i32 0
  %217 = mul nsw i64 %132, %93
  %218 = add nsw i64 %217, %97
  %219 = getelementptr inbounds i8, i8* %2, i64 %218
  %220 = bitcast i8* %219 to i32*
  store i32 %216, i32* %220, align 4
  %221 = bitcast <2 x i64> %213 to <4 x i32>
  %222 = extractelement <4 x i32> %221, i32 0
  %223 = add nsw i64 %218, %93
  %224 = getelementptr inbounds i8, i8* %2, i64 %223
  %225 = bitcast i8* %224 to i32*
  store i32 %222, i32* %225, align 4
  br label %333

226:                                              ; preds = %172
  %227 = shufflevector <4 x i64> %171, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %228 = mul nsw i64 %132, %92
  %229 = add nsw i64 %228, %97
  %230 = getelementptr inbounds i16, i16* %11, i64 %229
  %231 = bitcast i16* %230 to <2 x i64>*
  store <2 x i64> %227, <2 x i64>* %231, align 16
  %232 = shufflevector <4 x i64> %171, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %233 = add nsw i64 %229, %92
  %234 = getelementptr inbounds i16, i16* %11, i64 %233
  %235 = bitcast i16* %234 to <2 x i64>*
  store <2 x i64> %232, <2 x i64>* %235, align 16
  br label %333

236:                                              ; preds = %131
  %237 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %136, <32 x i8> %75) #3
  %238 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %137, <32 x i8> %76) #3
  %239 = add <16 x i16> %237, <i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192>
  %240 = add <16 x i16> %239, %238
  %241 = shufflevector <16 x i16> %240, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %242 = bitcast <16 x i16> %241 to <8 x i32>
  %243 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %242, i32 %16) #3
  %244 = add <8 x i32> %243, %22
  %245 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %244, <4 x i32> %23) #3
  %246 = shufflevector <16 x i16> %240, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %247 = bitcast <16 x i16> %246 to <8 x i32>
  %248 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %247, i32 %16) #3
  %249 = add <8 x i32> %248, %22
  %250 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %249, <4 x i32> %23) #3
  %251 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %245, <8 x i32> %250) #3
  %252 = add <16 x i16> %251, %51
  %253 = bitcast <16 x i16> %252 to <4 x i64>
  br i1 %89, label %315, label %254

254:                                              ; preds = %236
  %255 = mul nsw i64 %132, %92
  %256 = add nsw i64 %255, %97
  %257 = getelementptr inbounds i16, i16* %11, i64 %256
  %258 = add nsw i64 %256, %92
  %259 = getelementptr inbounds i16, i16* %11, i64 %258
  %260 = bitcast i16* %257 to <2 x i64>*
  %261 = load <2 x i64>, <2 x i64>* %260, align 1
  %262 = bitcast i16* %259 to <2 x i64>*
  %263 = load <2 x i64>, <2 x i64>* %262, align 1
  %264 = shufflevector <2 x i64> %261, <2 x i64> %263, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %265 = add nsw i64 %256, 8
  %266 = getelementptr inbounds i16, i16* %11, i64 %265
  %267 = add nsw i64 %265, %92
  %268 = getelementptr inbounds i16, i16* %11, i64 %267
  %269 = bitcast i16* %266 to <2 x i64>*
  %270 = load <2 x i64>, <2 x i64>* %269, align 1
  %271 = bitcast i16* %268 to <2 x i64>*
  %272 = load <2 x i64>, <2 x i64>* %271, align 1
  %273 = shufflevector <2 x i64> %270, <2 x i64> %272, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %274 = bitcast <4 x i64> %264 to <16 x i16>
  br i1 %90, label %291, label %275

275:                                              ; preds = %254
  %276 = shufflevector <16 x i16> %274, <16 x i16> %170, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %277 = shufflevector <16 x i16> %274, <16 x i16> %170, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %278 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %276, <16 x i16> %34) #3
  %279 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %277, <16 x i16> %34) #3
  %280 = ashr <8 x i32> %278, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %281 = ashr <8 x i32> %279, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %282 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %280, <8 x i32> %281) #3
  %283 = bitcast <4 x i64> %273 to <16 x i16>
  %284 = shufflevector <16 x i16> %283, <16 x i16> %252, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %285 = shufflevector <16 x i16> %283, <16 x i16> %252, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %286 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %284, <16 x i16> %34) #3
  %287 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %285, <16 x i16> %34) #3
  %288 = ashr <8 x i32> %286, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %289 = ashr <8 x i32> %287, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %290 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %288, <8 x i32> %289) #3
  br label %297

291:                                              ; preds = %254
  %292 = add <16 x i16> %170, %274
  %293 = ashr <16 x i16> %292, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %294 = bitcast <4 x i64> %273 to <16 x i16>
  %295 = add <16 x i16> %252, %294
  %296 = ashr <16 x i16> %295, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %297

297:                                              ; preds = %275, %291
  %298 = phi <16 x i16> [ %282, %275 ], [ %293, %291 ]
  %299 = phi <16 x i16> [ %290, %275 ], [ %296, %291 ]
  %300 = add <16 x i16> %91, %298
  %301 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %300, i32 %53) #3
  %302 = add <16 x i16> %91, %299
  %303 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %302, i32 %53) #3
  %304 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %301, <16 x i16> %303) #3
  %305 = bitcast <32 x i8> %304 to <4 x i64>
  %306 = shufflevector <4 x i64> %305, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %307 = shufflevector <4 x i64> %305, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %308 = mul nsw i64 %132, %93
  %309 = add nsw i64 %308, %97
  %310 = getelementptr inbounds i8, i8* %2, i64 %309
  %311 = bitcast i8* %310 to <2 x i64>*
  store <2 x i64> %306, <2 x i64>* %311, align 16
  %312 = add nsw i64 %309, %93
  %313 = getelementptr inbounds i8, i8* %2, i64 %312
  %314 = bitcast i8* %313 to <2 x i64>*
  store <2 x i64> %307, <2 x i64>* %314, align 16
  br label %333

315:                                              ; preds = %236
  %316 = shufflevector <4 x i64> %171, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %317 = mul nsw i64 %132, %92
  %318 = add nsw i64 %317, %97
  %319 = getelementptr inbounds i16, i16* %11, i64 %318
  %320 = bitcast i16* %319 to <2 x i64>*
  store <2 x i64> %316, <2 x i64>* %320, align 16
  %321 = shufflevector <4 x i64> %171, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %322 = add nsw i64 %318, %92
  %323 = getelementptr inbounds i16, i16* %11, i64 %322
  %324 = bitcast i16* %323 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %324, align 16
  %325 = shufflevector <4 x i64> %253, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %326 = add nsw i64 %318, 8
  %327 = getelementptr inbounds i16, i16* %11, i64 %326
  %328 = bitcast i16* %327 to <2 x i64>*
  store <2 x i64> %325, <2 x i64>* %328, align 16
  %329 = shufflevector <4 x i64> %253, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %330 = add nsw i64 %326, %92
  %331 = getelementptr inbounds i16, i16* %11, i64 %330
  %332 = bitcast i16* %331 to <2 x i64>*
  store <2 x i64> %329, <2 x i64>* %332, align 16
  br label %333

333:                                              ; preds = %297, %315, %202, %212, %226
  %334 = add nuw nsw i64 %132, 2
  %335 = icmp slt i64 %334, %94
  br i1 %335, label %131, label %336

336:                                              ; preds = %333, %96
  %337 = add nuw nsw i64 %97, 16
  %338 = icmp slt i64 %337, %95
  br i1 %338, label %96, label %623

339:                                              ; preds = %9
  %340 = lshr i16 %63, 1
  %341 = zext i16 %340 to i32
  %342 = add nsw i32 %341, -1
  %343 = mul nsw i32 %342, %1
  %344 = sext i32 %343 to i64
  %345 = sub nsw i64 0, %344
  %346 = getelementptr inbounds i8, i8* %0, i64 %345
  %347 = icmp sgt i32 %4, 0
  br i1 %347, label %348, label %623

348:                                              ; preds = %339
  %349 = sext i32 %1 to i64
  %350 = icmp sgt i32 %5, 0
  %351 = icmp eq i32 %36, 0
  %352 = icmp eq i32 %38, 0
  %353 = add <16 x i16> %48, %58
  %354 = sext i32 %13 to i64
  %355 = sext i32 %3 to i64
  %356 = sext i32 %5 to i64
  %357 = sext i32 %4 to i64
  br label %358

358:                                              ; preds = %348, %620
  %359 = phi i64 [ 0, %348 ], [ %621, %620 ]
  %360 = getelementptr inbounds i8, i8* %346, i64 %359
  %361 = bitcast i8* %360 to <2 x i64>*
  %362 = load <2 x i64>, <2 x i64>* %361, align 1
  %363 = getelementptr inbounds i8, i8* %360, i64 %349
  %364 = bitcast i8* %363 to <2 x i64>*
  %365 = load <2 x i64>, <2 x i64>* %364, align 1
  %366 = shufflevector <2 x i64> %362, <2 x i64> %365, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %367 = getelementptr inbounds i8, i8* %363, i64 %349
  %368 = bitcast i8* %367 to <2 x i64>*
  %369 = load <2 x i64>, <2 x i64>* %368, align 1
  %370 = shufflevector <2 x i64> %365, <2 x i64> %369, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %371 = getelementptr inbounds i8, i8* %367, i64 %349
  %372 = bitcast i8* %371 to <2 x i64>*
  %373 = load <2 x i64>, <2 x i64>* %372, align 1
  %374 = shufflevector <2 x i64> %369, <2 x i64> %373, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %375 = getelementptr inbounds i8, i8* %371, i64 %349
  %376 = bitcast i8* %375 to <2 x i64>*
  %377 = load <2 x i64>, <2 x i64>* %376, align 1
  %378 = shufflevector <2 x i64> %373, <2 x i64> %377, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %379 = getelementptr inbounds i8, i8* %375, i64 %349
  %380 = bitcast i8* %379 to <2 x i64>*
  %381 = load <2 x i64>, <2 x i64>* %380, align 1
  %382 = shufflevector <2 x i64> %377, <2 x i64> %381, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %383 = getelementptr inbounds i8, i8* %379, i64 %349
  %384 = bitcast i8* %383 to <2 x i64>*
  %385 = load <2 x i64>, <2 x i64>* %384, align 1
  %386 = shufflevector <2 x i64> %381, <2 x i64> %385, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %387 = bitcast <4 x i64> %366 to <32 x i8>
  %388 = bitcast <4 x i64> %370 to <32 x i8>
  %389 = bitcast <4 x i64> %374 to <32 x i8>
  %390 = bitcast <4 x i64> %378 to <32 x i8>
  %391 = bitcast <4 x i64> %382 to <32 x i8>
  %392 = bitcast <4 x i64> %386 to <32 x i8>
  br i1 %350, label %393, label %620

393:                                              ; preds = %358
  %394 = shufflevector <2 x i64> %385, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %395 = shufflevector <32 x i8> %391, <32 x i8> %392, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %396 = shufflevector <32 x i8> %389, <32 x i8> %390, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %397 = shufflevector <32 x i8> %387, <32 x i8> %388, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %398 = shufflevector <32 x i8> %391, <32 x i8> %392, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %399 = shufflevector <32 x i8> %389, <32 x i8> %390, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %400 = shufflevector <32 x i8> %387, <32 x i8> %388, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %401 = trunc i64 %359 to i32
  %402 = sub nsw i32 %4, %401
  %403 = icmp slt i32 %402, 16
  %404 = icmp sgt i32 %402, 4
  br label %405

405:                                              ; preds = %393, %617
  %406 = phi i64 [ 0, %393 ], [ %618, %617 ]
  %407 = phi <4 x i64> [ %394, %393 ], [ %425, %617 ]
  %408 = phi <32 x i8> [ %400, %393 ], [ %409, %617 ]
  %409 = phi <32 x i8> [ %399, %393 ], [ %410, %617 ]
  %410 = phi <32 x i8> [ %398, %393 ], [ %429, %617 ]
  %411 = phi <32 x i8> [ %397, %393 ], [ %412, %617 ]
  %412 = phi <32 x i8> [ %396, %393 ], [ %413, %617 ]
  %413 = phi <32 x i8> [ %395, %393 ], [ %430, %617 ]
  %414 = add nuw nsw i64 %406, 7
  %415 = mul nsw i64 %414, %349
  %416 = add nsw i64 %415, %359
  %417 = getelementptr inbounds i8, i8* %346, i64 %416
  %418 = bitcast i8* %417 to <2 x i64>*
  %419 = load <2 x i64>, <2 x i64>* %418, align 1
  %420 = shufflevector <2 x i64> %419, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %421 = shufflevector <4 x i64> %407, <4 x i64> %420, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %422 = getelementptr inbounds i8, i8* %417, i64 %349
  %423 = bitcast i8* %422 to <2 x i64>*
  %424 = load <2 x i64>, <2 x i64>* %423, align 1
  %425 = shufflevector <2 x i64> %424, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %426 = shufflevector <2 x i64> %419, <2 x i64> %424, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %427 = bitcast <4 x i64> %421 to <32 x i8>
  %428 = bitcast <4 x i64> %426 to <32 x i8>
  %429 = shufflevector <32 x i8> %427, <32 x i8> %428, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %430 = shufflevector <32 x i8> %427, <32 x i8> %428, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %431 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %408, <32 x i8> %74) #3
  %432 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %409, <32 x i8> %75) #3
  %433 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %410, <32 x i8> %76) #3
  %434 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %429, <32 x i8> %77) #3
  %435 = add <16 x i16> %431, <i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192>
  %436 = add <16 x i16> %435, %432
  %437 = add <16 x i16> %436, %433
  %438 = add <16 x i16> %437, %434
  %439 = shufflevector <16 x i16> %438, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %440 = bitcast <16 x i16> %439 to <8 x i32>
  %441 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %440, i32 %16) #3
  %442 = add <8 x i32> %441, %22
  %443 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %442, <4 x i32> %23) #3
  %444 = shufflevector <16 x i16> %438, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %445 = bitcast <16 x i16> %444 to <8 x i32>
  %446 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %445, i32 %16) #3
  %447 = add <8 x i32> %446, %22
  %448 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %447, <4 x i32> %23) #3
  %449 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %443, <8 x i32> %448) #3
  %450 = add <16 x i16> %449, %51
  %451 = bitcast <16 x i16> %450 to <4 x i64>
  br i1 %403, label %452, label %516

452:                                              ; preds = %405
  br i1 %351, label %506, label %453

453:                                              ; preds = %452
  %454 = mul nsw i64 %406, %354
  %455 = add nsw i64 %454, %359
  %456 = getelementptr inbounds i16, i16* %11, i64 %455
  %457 = add nsw i64 %455, %354
  %458 = getelementptr inbounds i16, i16* %11, i64 %457
  %459 = bitcast i16* %456 to <2 x i64>*
  %460 = load <2 x i64>, <2 x i64>* %459, align 1
  %461 = bitcast i16* %458 to <2 x i64>*
  %462 = load <2 x i64>, <2 x i64>* %461, align 1
  %463 = shufflevector <2 x i64> %460, <2 x i64> %462, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %464 = bitcast <4 x i64> %463 to <16 x i16>
  br i1 %352, label %473, label %465

465:                                              ; preds = %453
  %466 = shufflevector <16 x i16> %464, <16 x i16> %450, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %467 = shufflevector <16 x i16> %464, <16 x i16> %450, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %468 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %466, <16 x i16> %34) #3
  %469 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %467, <16 x i16> %34) #3
  %470 = ashr <8 x i32> %468, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %471 = ashr <8 x i32> %469, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %472 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %470, <8 x i32> %471) #3
  br label %476

473:                                              ; preds = %453
  %474 = add <16 x i16> %450, %464
  %475 = ashr <16 x i16> %474, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %476

476:                                              ; preds = %465, %473
  %477 = phi <16 x i16> [ %472, %465 ], [ %475, %473 ]
  %478 = add <16 x i16> %353, %477
  %479 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %478, i32 %53) #3
  %480 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %479, <16 x i16> %479) #3
  %481 = bitcast <32 x i8> %480 to <4 x i64>
  br i1 %404, label %482, label %492

482:                                              ; preds = %476
  %483 = mul nsw i64 %406, %355
  %484 = add nsw i64 %483, %359
  %485 = getelementptr inbounds i8, i8* %2, i64 %484
  %486 = extractelement <4 x i64> %481, i32 0
  %487 = bitcast i8* %485 to i64*
  store i64 %486, i64* %487, align 1
  %488 = add nsw i64 %484, %355
  %489 = getelementptr inbounds i8, i8* %2, i64 %488
  %490 = extractelement <4 x i64> %481, i32 2
  %491 = bitcast i8* %489 to i64*
  store i64 %490, i64* %491, align 1
  br label %617

492:                                              ; preds = %476
  %493 = shufflevector <4 x i64> %481, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %494 = shufflevector <4 x i64> %481, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %495 = bitcast <2 x i64> %494 to <4 x i32>
  %496 = extractelement <4 x i32> %495, i32 0
  %497 = mul nsw i64 %406, %355
  %498 = add nsw i64 %497, %359
  %499 = getelementptr inbounds i8, i8* %2, i64 %498
  %500 = bitcast i8* %499 to i32*
  store i32 %496, i32* %500, align 4
  %501 = bitcast <2 x i64> %493 to <4 x i32>
  %502 = extractelement <4 x i32> %501, i32 0
  %503 = add nsw i64 %498, %355
  %504 = getelementptr inbounds i8, i8* %2, i64 %503
  %505 = bitcast i8* %504 to i32*
  store i32 %502, i32* %505, align 4
  br label %617

506:                                              ; preds = %452
  %507 = shufflevector <4 x i64> %451, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %508 = mul nsw i64 %406, %354
  %509 = add nsw i64 %508, %359
  %510 = getelementptr inbounds i16, i16* %11, i64 %509
  %511 = bitcast i16* %510 to <2 x i64>*
  store <2 x i64> %507, <2 x i64>* %511, align 16
  %512 = shufflevector <4 x i64> %451, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %513 = add nsw i64 %509, %354
  %514 = getelementptr inbounds i16, i16* %11, i64 %513
  %515 = bitcast i16* %514 to <2 x i64>*
  store <2 x i64> %512, <2 x i64>* %515, align 16
  br label %617

516:                                              ; preds = %405
  %517 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %411, <32 x i8> %74) #3
  %518 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %412, <32 x i8> %75) #3
  %519 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %413, <32 x i8> %76) #3
  %520 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %430, <32 x i8> %77) #3
  %521 = add <16 x i16> %517, <i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192>
  %522 = add <16 x i16> %521, %518
  %523 = add <16 x i16> %522, %519
  %524 = add <16 x i16> %523, %520
  %525 = shufflevector <16 x i16> %524, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %526 = bitcast <16 x i16> %525 to <8 x i32>
  %527 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %526, i32 %16) #3
  %528 = add <8 x i32> %527, %22
  %529 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %528, <4 x i32> %23) #3
  %530 = shufflevector <16 x i16> %524, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %531 = bitcast <16 x i16> %530 to <8 x i32>
  %532 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %531, i32 %16) #3
  %533 = add <8 x i32> %532, %22
  %534 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %533, <4 x i32> %23) #3
  %535 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %529, <8 x i32> %534) #3
  %536 = add <16 x i16> %535, %51
  %537 = bitcast <16 x i16> %536 to <4 x i64>
  br i1 %351, label %599, label %538

538:                                              ; preds = %516
  %539 = mul nsw i64 %406, %354
  %540 = add nsw i64 %539, %359
  %541 = getelementptr inbounds i16, i16* %11, i64 %540
  %542 = add nsw i64 %540, %354
  %543 = getelementptr inbounds i16, i16* %11, i64 %542
  %544 = bitcast i16* %541 to <2 x i64>*
  %545 = load <2 x i64>, <2 x i64>* %544, align 1
  %546 = bitcast i16* %543 to <2 x i64>*
  %547 = load <2 x i64>, <2 x i64>* %546, align 1
  %548 = shufflevector <2 x i64> %545, <2 x i64> %547, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %549 = add nsw i64 %540, 8
  %550 = getelementptr inbounds i16, i16* %11, i64 %549
  %551 = add nsw i64 %549, %354
  %552 = getelementptr inbounds i16, i16* %11, i64 %551
  %553 = bitcast i16* %550 to <2 x i64>*
  %554 = load <2 x i64>, <2 x i64>* %553, align 1
  %555 = bitcast i16* %552 to <2 x i64>*
  %556 = load <2 x i64>, <2 x i64>* %555, align 1
  %557 = shufflevector <2 x i64> %554, <2 x i64> %556, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %558 = bitcast <4 x i64> %548 to <16 x i16>
  br i1 %352, label %575, label %559

559:                                              ; preds = %538
  %560 = shufflevector <16 x i16> %558, <16 x i16> %450, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %561 = shufflevector <16 x i16> %558, <16 x i16> %450, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %562 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %560, <16 x i16> %34) #3
  %563 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %561, <16 x i16> %34) #3
  %564 = ashr <8 x i32> %562, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %565 = ashr <8 x i32> %563, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %566 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %564, <8 x i32> %565) #3
  %567 = bitcast <4 x i64> %557 to <16 x i16>
  %568 = shufflevector <16 x i16> %567, <16 x i16> %536, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %569 = shufflevector <16 x i16> %567, <16 x i16> %536, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %570 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %568, <16 x i16> %34) #3
  %571 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %569, <16 x i16> %34) #3
  %572 = ashr <8 x i32> %570, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %573 = ashr <8 x i32> %571, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %574 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %572, <8 x i32> %573) #3
  br label %581

575:                                              ; preds = %538
  %576 = add <16 x i16> %450, %558
  %577 = ashr <16 x i16> %576, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %578 = bitcast <4 x i64> %557 to <16 x i16>
  %579 = add <16 x i16> %536, %578
  %580 = ashr <16 x i16> %579, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %581

581:                                              ; preds = %559, %575
  %582 = phi <16 x i16> [ %566, %559 ], [ %577, %575 ]
  %583 = phi <16 x i16> [ %574, %559 ], [ %580, %575 ]
  %584 = add <16 x i16> %353, %582
  %585 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %584, i32 %53) #3
  %586 = add <16 x i16> %353, %583
  %587 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %586, i32 %53) #3
  %588 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %585, <16 x i16> %587) #3
  %589 = bitcast <32 x i8> %588 to <4 x i64>
  %590 = shufflevector <4 x i64> %589, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %591 = shufflevector <4 x i64> %589, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %592 = mul nsw i64 %406, %355
  %593 = add nsw i64 %592, %359
  %594 = getelementptr inbounds i8, i8* %2, i64 %593
  %595 = bitcast i8* %594 to <2 x i64>*
  store <2 x i64> %590, <2 x i64>* %595, align 16
  %596 = add nsw i64 %593, %355
  %597 = getelementptr inbounds i8, i8* %2, i64 %596
  %598 = bitcast i8* %597 to <2 x i64>*
  store <2 x i64> %591, <2 x i64>* %598, align 16
  br label %617

599:                                              ; preds = %516
  %600 = shufflevector <4 x i64> %451, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %601 = mul nsw i64 %406, %354
  %602 = add nsw i64 %601, %359
  %603 = getelementptr inbounds i16, i16* %11, i64 %602
  %604 = bitcast i16* %603 to <2 x i64>*
  store <2 x i64> %600, <2 x i64>* %604, align 16
  %605 = shufflevector <4 x i64> %451, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %606 = add nsw i64 %602, %354
  %607 = getelementptr inbounds i16, i16* %11, i64 %606
  %608 = bitcast i16* %607 to <2 x i64>*
  store <2 x i64> %605, <2 x i64>* %608, align 16
  %609 = shufflevector <4 x i64> %537, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %610 = add nsw i64 %602, 8
  %611 = getelementptr inbounds i16, i16* %11, i64 %610
  %612 = bitcast i16* %611 to <2 x i64>*
  store <2 x i64> %609, <2 x i64>* %612, align 16
  %613 = shufflevector <4 x i64> %537, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %614 = add nsw i64 %610, %354
  %615 = getelementptr inbounds i16, i16* %11, i64 %614
  %616 = bitcast i16* %615 to <2 x i64>*
  store <2 x i64> %613, <2 x i64>* %616, align 16
  br label %617

617:                                              ; preds = %581, %599, %482, %492, %506
  %618 = add nuw nsw i64 %406, 2
  %619 = icmp slt i64 %618, %356
  br i1 %619, label %405, label %620

620:                                              ; preds = %617, %358
  %621 = add nuw nsw i64 %359, 16
  %622 = icmp slt i64 %621, %357
  br i1 %622, label %358, label %623

623:                                              ; preds = %620, %336, %339, %82
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_dist_wtd_convolve_2d_avx2(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, %struct.InterpFilterParams* nocapture readonly, i32, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %12 = alloca [1120 x i16], align 32
  %13 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 1
  %14 = load i16*, i16** %13, align 8
  %15 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = bitcast [1120 x i16]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2240, i8* nonnull %17) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %17, i8 -86, i64 2240, i1 false)
  %18 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 8
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 9
  %21 = load i32, i32* %20, align 4
  %22 = trunc i32 %19 to i16
  %23 = insertelement <16 x i16> undef, i16 %22, i32 0
  %24 = shufflevector <16 x i16> %23, <16 x i16> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %25 = trunc i32 %21 to i16
  %26 = insertelement <16 x i16> undef, i16 %25, i32 0
  %27 = shufflevector <16 x i16> %26, <16 x i16> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = shufflevector <16 x i16> %24, <16 x i16> %27, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %29 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 7
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = sub nsw i32 22, %34
  %36 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 4
  %37 = load i32, i32* %36, align 8
  %38 = sub i32 %35, %37
  %39 = shl i32 1, %38
  %40 = add nsw i32 %38, -1
  %41 = shl i32 1, %40
  %42 = add nsw i32 %41, %39
  %43 = trunc i32 %42 to i16
  %44 = insertelement <16 x i16> undef, i16 %43, i32 0
  %45 = shufflevector <16 x i16> %44, <16 x i16> undef, <16 x i32> zeroinitializer
  %46 = sub nsw i32 14, %34
  %47 = sub i32 %46, %37
  %48 = shl i32 1, %47
  %49 = lshr i32 %48, 1
  %50 = trunc i32 %49 to i16
  %51 = insertelement <16 x i16> undef, i16 %50, i32 0
  %52 = shufflevector <16 x i16> %51, <16 x i16> undef, <16 x i32> zeroinitializer
  %53 = add nsw i32 %34, -1
  %54 = shl i32 1, %53
  %55 = lshr i32 %54, 1
  %56 = trunc i32 %55 to i16
  %57 = add i16 %56, 8192
  %58 = insertelement <16 x i16> undef, i16 %57, i32 0
  %59 = shufflevector <16 x i16> %58, <16 x i16> undef, <16 x i32> zeroinitializer
  %60 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %53, i32 0
  %61 = shl i32 1, %37
  %62 = ashr i32 %61, 1
  %63 = sub i32 21, %34
  %64 = shl i32 1, %63
  %65 = sub nsw i32 %62, %64
  %66 = insertelement <8 x i32> undef, i32 %65, i32 0
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <8 x i32> zeroinitializer
  %68 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %37, i32 0
  %69 = and i32 %8, 15
  %70 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %71 = load i16*, i16** %70, align 8
  %72 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %73 = load i16, i16* %72, align 8
  %74 = zext i16 %73 to i32
  %75 = mul nuw nsw i32 %69, %74
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i16, i16* %71, i64 %76
  %78 = bitcast i16* %77 to <2 x i64>*
  %79 = load <2 x i64>, <2 x i64>* %78, align 1
  %80 = shufflevector <2 x i64> %79, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %81 = bitcast <4 x i64> %80 to <16 x i16>
  %82 = ashr <16 x i16> %81, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %83 = bitcast <16 x i16> %82 to <32 x i8>
  %84 = shufflevector <32 x i8> %83, <32 x i8> undef, <32 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18>
  %85 = shufflevector <32 x i8> %83, <32 x i8> undef, <32 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22>
  %86 = shufflevector <32 x i8> %83, <32 x i8> undef, <32 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26>
  %87 = shufflevector <32 x i8> %83, <32 x i8> undef, <32 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30>
  %88 = and i32 %9, 15
  %89 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 0
  %90 = load i16*, i16** %89, align 8
  %91 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 1
  %92 = load i16, i16* %91, align 8
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %88, %93
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i16, i16* %90, i64 %95
  %97 = bitcast i16* %96 to <2 x i64>*
  %98 = load <2 x i64>, <2 x i64>* %97, align 1
  %99 = shufflevector <2 x i64> %98, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %100 = bitcast <4 x i64> %99 to <8 x i32>
  %101 = shufflevector <8 x i32> %100, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 4, i32 4>
  %102 = shufflevector <8 x i32> %100, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %103 = shufflevector <8 x i32> %100, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  %104 = shufflevector <8 x i32> %100, <8 x i32> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7>
  %105 = or <32 x i8> %87, %84
  %106 = bitcast <32 x i8> %105 to <8 x i32>
  %107 = extractelement <8 x i32> %106, i64 0
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %352

109:                                              ; preds = %11
  %110 = add i32 %5, -1
  %111 = add i32 %110, %93
  %112 = lshr i32 %93, 1
  %113 = add nsw i32 %112, -1
  %114 = mul nsw i32 %113, %1
  %115 = sext i32 %114 to i64
  %116 = sub nsw i64 0, %115
  %117 = getelementptr inbounds i8, i8* %0, i64 %116
  %118 = getelementptr inbounds i8, i8* %117, i64 -1
  %119 = icmp sgt i32 %4, 0
  br i1 %119, label %120, label %835

120:                                              ; preds = %109
  %121 = icmp sgt i32 %111, 0
  %122 = sext i32 %1 to i64
  %123 = shl i32 %1, 1
  %124 = sext i32 %123 to i64
  %125 = bitcast <4 x i32> %60 to <8 x i16>
  %126 = bitcast [1120 x i16]* %12 to <16 x i16>*
  %127 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 8
  %128 = bitcast i16* %127 to <16 x i16>*
  %129 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 16
  %130 = bitcast i16* %129 to <16 x i16>*
  %131 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 24
  %132 = bitcast i16* %131 to <16 x i16>*
  %133 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 32
  %134 = bitcast i16* %133 to <16 x i16>*
  %135 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 40
  %136 = bitcast i16* %135 to <16 x i16>*
  %137 = icmp sgt i32 %5, 0
  %138 = bitcast <8 x i32> %101 to <16 x i16>
  %139 = bitcast <8 x i32> %102 to <16 x i16>
  %140 = bitcast <8 x i32> %103 to <16 x i16>
  %141 = bitcast <8 x i32> %104 to <16 x i16>
  %142 = icmp eq i32 %30, 0
  %143 = icmp eq i32 %32, 0
  %144 = sub <16 x i16> %52, %45
  %145 = sext i32 %111 to i64
  %146 = sext i32 %16 to i64
  %147 = sext i32 %3 to i64
  %148 = sext i32 %5 to i64
  %149 = sext i32 %4 to i64
  br label %150

150:                                              ; preds = %120, %349
  %151 = phi i64 [ 0, %120 ], [ %350, %349 ]
  br i1 %121, label %152, label %184

152:                                              ; preds = %150
  %153 = getelementptr inbounds i8, i8* %118, i64 %151
  br label %154

154:                                              ; preds = %152, %167
  %155 = phi i64 [ 0, %152 ], [ %182, %167 ]
  %156 = phi i8* [ %153, %152 ], [ %169, %167 ]
  %157 = bitcast i8* %156 to <2 x i64>*
  %158 = load <2 x i64>, <2 x i64>* %157, align 1
  %159 = shufflevector <2 x i64> %158, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %160 = or i64 %155, 1
  %161 = icmp slt i64 %160, %145
  br i1 %161, label %162, label %167

162:                                              ; preds = %154
  %163 = getelementptr inbounds i8, i8* %156, i64 %122
  %164 = bitcast i8* %163 to <2 x i64>*
  %165 = load <2 x i64>, <2 x i64>* %164, align 1
  %166 = shufflevector <2 x i64> %158, <2 x i64> %165, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  br label %167

167:                                              ; preds = %162, %154
  %168 = phi <4 x i64> [ %166, %162 ], [ %159, %154 ]
  %169 = getelementptr inbounds i8, i8* %156, i64 %124
  %170 = bitcast <4 x i64> %168 to <32 x i8>
  %171 = shufflevector <32 x i8> %170, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %172 = shufflevector <32 x i8> %170, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %173 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %171, <32 x i8> %85) #3
  %174 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %172, <32 x i8> %86) #3
  %175 = add <16 x i16> %173, %59
  %176 = add <16 x i16> %175, %174
  %177 = tail call <16 x i16> @llvm.x86.avx2.psra.w(<16 x i16> %176, <8 x i16> %125) #3
  %178 = shl i64 %155, 3
  %179 = and i64 %178, 4294967280
  %180 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 %179
  %181 = bitcast i16* %180 to <16 x i16>*
  store <16 x i16> %177, <16 x i16>* %181, align 32
  %182 = add nuw nsw i64 %155, 2
  %183 = icmp slt i64 %182, %145
  br i1 %183, label %154, label %184

184:                                              ; preds = %167, %150
  %185 = load <16 x i16>, <16 x i16>* %126, align 32
  %186 = load <16 x i16>, <16 x i16>* %128, align 16
  %187 = load <16 x i16>, <16 x i16>* %130, align 32
  %188 = load <16 x i16>, <16 x i16>* %132, align 16
  %189 = load <16 x i16>, <16 x i16>* %134, align 32
  %190 = load <16 x i16>, <16 x i16>* %136, align 16
  br i1 %137, label %191, label %349

191:                                              ; preds = %184
  %192 = shufflevector <16 x i16> %189, <16 x i16> %190, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %193 = shufflevector <16 x i16> %187, <16 x i16> %188, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %194 = shufflevector <16 x i16> %185, <16 x i16> %186, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %195 = shufflevector <16 x i16> %189, <16 x i16> %190, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %196 = shufflevector <16 x i16> %187, <16 x i16> %188, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %197 = shufflevector <16 x i16> %185, <16 x i16> %186, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %198 = trunc i64 %151 to i32
  %199 = sub nsw i32 %4, %198
  %200 = icmp sgt i32 %199, 4
  br label %201

201:                                              ; preds = %191, %346
  %202 = phi i64 [ 0, %191 ], [ %347, %346 ]
  %203 = phi <16 x i16> [ %197, %191 ], [ %204, %346 ]
  %204 = phi <16 x i16> [ %196, %191 ], [ %205, %346 ]
  %205 = phi <16 x i16> [ %195, %191 ], [ %218, %346 ]
  %206 = phi <16 x i16> [ %194, %191 ], [ %207, %346 ]
  %207 = phi <16 x i16> [ %193, %191 ], [ %208, %346 ]
  %208 = phi <16 x i16> [ %192, %191 ], [ %219, %346 ]
  %209 = shl i64 %202, 3
  %210 = and i64 %209, 4294967280
  %211 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 %210
  %212 = getelementptr inbounds i16, i16* %211, i64 48
  %213 = bitcast i16* %212 to <16 x i16>*
  %214 = load <16 x i16>, <16 x i16>* %213, align 32
  %215 = getelementptr inbounds i16, i16* %211, i64 56
  %216 = bitcast i16* %215 to <16 x i16>*
  %217 = load <16 x i16>, <16 x i16>* %216, align 16
  %218 = shufflevector <16 x i16> %214, <16 x i16> %217, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %219 = shufflevector <16 x i16> %214, <16 x i16> %217, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %220 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %203, <16 x i16> %138) #3
  %221 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %204, <16 x i16> %139) #3
  %222 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %205, <16 x i16> %140) #3
  %223 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %218, <16 x i16> %141) #3
  %224 = add <8 x i32> %220, %67
  %225 = add <8 x i32> %224, %221
  %226 = add <8 x i32> %225, %222
  %227 = add <8 x i32> %226, %223
  %228 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %227, <4 x i32> %68) #3
  br i1 %200, label %229, label %290

229:                                              ; preds = %201
  %230 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %206, <16 x i16> %138) #3
  %231 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %207, <16 x i16> %139) #3
  %232 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %208, <16 x i16> %140) #3
  %233 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %219, <16 x i16> %141) #3
  %234 = add <8 x i32> %230, %67
  %235 = add <8 x i32> %234, %231
  %236 = add <8 x i32> %235, %232
  %237 = add <8 x i32> %236, %233
  %238 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %237, <4 x i32> %68) #3
  %239 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %228, <8 x i32> %238) #3
  %240 = add <16 x i16> %239, %45
  %241 = bitcast <16 x i16> %240 to <4 x i64>
  br i1 %142, label %280, label %242

242:                                              ; preds = %229
  %243 = mul nsw i64 %202, %146
  %244 = add nsw i64 %243, %151
  %245 = getelementptr inbounds i16, i16* %14, i64 %244
  %246 = add nsw i64 %244, %146
  %247 = getelementptr inbounds i16, i16* %14, i64 %246
  %248 = bitcast i16* %245 to <2 x i64>*
  %249 = load <2 x i64>, <2 x i64>* %248, align 1
  %250 = bitcast i16* %247 to <2 x i64>*
  %251 = load <2 x i64>, <2 x i64>* %250, align 1
  %252 = shufflevector <2 x i64> %249, <2 x i64> %251, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %253 = bitcast <4 x i64> %252 to <16 x i16>
  br i1 %143, label %262, label %254

254:                                              ; preds = %242
  %255 = shufflevector <16 x i16> %253, <16 x i16> %240, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %256 = shufflevector <16 x i16> %253, <16 x i16> %240, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %257 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %255, <16 x i16> %28) #3
  %258 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %256, <16 x i16> %28) #3
  %259 = ashr <8 x i32> %257, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %260 = ashr <8 x i32> %258, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %261 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %259, <8 x i32> %260) #3
  br label %265

262:                                              ; preds = %242
  %263 = add <16 x i16> %240, %253
  %264 = ashr <16 x i16> %263, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %265

265:                                              ; preds = %254, %262
  %266 = phi <16 x i16> [ %261, %254 ], [ %264, %262 ]
  %267 = add <16 x i16> %144, %266
  %268 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %267, i32 %47) #3
  %269 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %268, <16 x i16> %268) #3
  %270 = bitcast <32 x i8> %269 to <4 x i64>
  %271 = mul nsw i64 %202, %147
  %272 = add nsw i64 %271, %151
  %273 = getelementptr inbounds i8, i8* %2, i64 %272
  %274 = extractelement <4 x i64> %270, i32 0
  %275 = bitcast i8* %273 to i64*
  store i64 %274, i64* %275, align 1
  %276 = add nsw i64 %272, %147
  %277 = getelementptr inbounds i8, i8* %2, i64 %276
  %278 = extractelement <4 x i64> %270, i32 2
  %279 = bitcast i8* %277 to i64*
  store i64 %278, i64* %279, align 1
  br label %346

280:                                              ; preds = %229
  %281 = shufflevector <4 x i64> %241, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %282 = mul nsw i64 %202, %146
  %283 = add nsw i64 %282, %151
  %284 = getelementptr inbounds i16, i16* %14, i64 %283
  %285 = bitcast i16* %284 to <2 x i64>*
  store <2 x i64> %281, <2 x i64>* %285, align 16
  %286 = shufflevector <4 x i64> %241, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %287 = add nsw i64 %283, %146
  %288 = getelementptr inbounds i16, i16* %14, i64 %287
  %289 = bitcast i16* %288 to <2 x i64>*
  store <2 x i64> %286, <2 x i64>* %289, align 16
  br label %346

290:                                              ; preds = %201
  %291 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %228, <8 x i32> %228) #3
  %292 = add <16 x i16> %291, %45
  %293 = bitcast <16 x i16> %292 to <4 x i64>
  br i1 %142, label %336, label %294

294:                                              ; preds = %290
  %295 = mul nsw i64 %202, %146
  %296 = add nsw i64 %295, %151
  %297 = getelementptr inbounds i16, i16* %14, i64 %296
  %298 = add nsw i64 %296, %146
  %299 = getelementptr inbounds i16, i16* %14, i64 %298
  %300 = bitcast i16* %297 to <2 x i64>*
  %301 = load <2 x i64>, <2 x i64>* %300, align 1
  %302 = bitcast i16* %299 to <2 x i64>*
  %303 = load <2 x i64>, <2 x i64>* %302, align 1
  %304 = shufflevector <2 x i64> %301, <2 x i64> %303, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %305 = bitcast <4 x i64> %304 to <16 x i16>
  br i1 %143, label %314, label %306

306:                                              ; preds = %294
  %307 = shufflevector <16 x i16> %305, <16 x i16> %292, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %308 = shufflevector <16 x i16> %305, <16 x i16> %292, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %309 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %307, <16 x i16> %28) #3
  %310 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %308, <16 x i16> %28) #3
  %311 = ashr <8 x i32> %309, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %312 = ashr <8 x i32> %310, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %313 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %311, <8 x i32> %312) #3
  br label %317

314:                                              ; preds = %294
  %315 = add <16 x i16> %292, %305
  %316 = ashr <16 x i16> %315, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %317

317:                                              ; preds = %306, %314
  %318 = phi <16 x i16> [ %313, %306 ], [ %316, %314 ]
  %319 = add <16 x i16> %144, %318
  %320 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %319, i32 %47) #3
  %321 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %320, <16 x i16> %320) #3
  %322 = bitcast <32 x i8> %321 to <4 x i64>
  %323 = shufflevector <4 x i64> %322, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %324 = shufflevector <4 x i64> %322, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %325 = bitcast <2 x i64> %323 to <4 x i32>
  %326 = extractelement <4 x i32> %325, i32 0
  %327 = mul nsw i64 %202, %147
  %328 = add nsw i64 %327, %151
  %329 = getelementptr inbounds i8, i8* %2, i64 %328
  %330 = bitcast i8* %329 to i32*
  store i32 %326, i32* %330, align 4
  %331 = bitcast <2 x i64> %324 to <4 x i32>
  %332 = extractelement <4 x i32> %331, i32 0
  %333 = add nsw i64 %328, %147
  %334 = getelementptr inbounds i8, i8* %2, i64 %333
  %335 = bitcast i8* %334 to i32*
  store i32 %332, i32* %335, align 4
  br label %346

336:                                              ; preds = %290
  %337 = shufflevector <4 x i64> %293, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %338 = mul nsw i64 %202, %146
  %339 = add nsw i64 %338, %151
  %340 = getelementptr inbounds i16, i16* %14, i64 %339
  %341 = bitcast i16* %340 to <2 x i64>*
  store <2 x i64> %337, <2 x i64>* %341, align 16
  %342 = shufflevector <4 x i64> %293, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %343 = add nsw i64 %339, %146
  %344 = getelementptr inbounds i16, i16* %14, i64 %343
  %345 = bitcast i16* %344 to <2 x i64>*
  store <2 x i64> %342, <2 x i64>* %345, align 16
  br label %346

346:                                              ; preds = %317, %336, %265, %280
  %347 = add nuw nsw i64 %202, 2
  %348 = icmp slt i64 %347, %148
  br i1 %348, label %201, label %349

349:                                              ; preds = %346, %184
  %350 = add nuw nsw i64 %151, 8
  %351 = icmp slt i64 %350, %149
  br i1 %351, label %150, label %835

352:                                              ; preds = %11
  %353 = or <8 x i32> %104, %101
  %354 = extractelement <8 x i32> %353, i64 0
  %355 = icmp eq i32 %354, 0
  br i1 %355, label %356, label %583

356:                                              ; preds = %352
  %357 = add nsw i32 %5, 3
  %358 = lshr i16 %73, 1
  %359 = zext i16 %358 to i64
  %360 = sext i32 %1 to i64
  %361 = sub nsw i64 0, %360
  %362 = getelementptr inbounds i8, i8* %0, i64 %361
  %363 = sub nsw i64 1, %359
  %364 = getelementptr inbounds i8, i8* %362, i64 %363
  %365 = icmp sgt i32 %4, 0
  br i1 %365, label %366, label %835

366:                                              ; preds = %356
  %367 = icmp sgt i32 %357, 0
  %368 = shl i32 %1, 1
  %369 = sext i32 %368 to i64
  %370 = bitcast <4 x i32> %60 to <8 x i16>
  %371 = bitcast [1120 x i16]* %12 to <16 x i16>*
  %372 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 8
  %373 = bitcast i16* %372 to <16 x i16>*
  %374 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 16
  %375 = bitcast i16* %374 to <16 x i16>*
  %376 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 24
  %377 = bitcast i16* %376 to <16 x i16>*
  %378 = icmp sgt i32 %5, 0
  %379 = bitcast <8 x i32> %102 to <16 x i16>
  %380 = bitcast <8 x i32> %103 to <16 x i16>
  %381 = icmp eq i32 %30, 0
  %382 = icmp eq i32 %32, 0
  %383 = sub <16 x i16> %52, %45
  %384 = sext i32 %357 to i64
  %385 = sext i32 %16 to i64
  %386 = sext i32 %3 to i64
  %387 = sext i32 %5 to i64
  %388 = sext i32 %4 to i64
  br label %389

389:                                              ; preds = %366, %580
  %390 = phi i64 [ 0, %366 ], [ %581, %580 ]
  br i1 %367, label %391, label %429

391:                                              ; preds = %389
  %392 = getelementptr inbounds i8, i8* %364, i64 %390
  br label %393

393:                                              ; preds = %391, %406
  %394 = phi i64 [ 0, %391 ], [ %427, %406 ]
  %395 = phi i8* [ %392, %391 ], [ %408, %406 ]
  %396 = bitcast i8* %395 to <2 x i64>*
  %397 = load <2 x i64>, <2 x i64>* %396, align 1
  %398 = shufflevector <2 x i64> %397, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %399 = or i64 %394, 1
  %400 = icmp slt i64 %399, %384
  br i1 %400, label %401, label %406

401:                                              ; preds = %393
  %402 = getelementptr inbounds i8, i8* %395, i64 %360
  %403 = bitcast i8* %402 to <2 x i64>*
  %404 = load <2 x i64>, <2 x i64>* %403, align 1
  %405 = shufflevector <2 x i64> %397, <2 x i64> %404, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  br label %406

406:                                              ; preds = %401, %393
  %407 = phi <4 x i64> [ %405, %401 ], [ %398, %393 ]
  %408 = getelementptr inbounds i8, i8* %395, i64 %369
  %409 = bitcast <4 x i64> %407 to <32 x i8>
  %410 = shufflevector <32 x i8> %409, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %411 = shufflevector <32 x i8> %409, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %412 = shufflevector <32 x i8> %409, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %413 = shufflevector <32 x i8> %409, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30>
  %414 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %410, <32 x i8> %84) #3
  %415 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %411, <32 x i8> %85) #3
  %416 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %412, <32 x i8> %86) #3
  %417 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %413, <32 x i8> %87) #3
  %418 = add <16 x i16> %414, %59
  %419 = add <16 x i16> %418, %415
  %420 = add <16 x i16> %419, %416
  %421 = add <16 x i16> %420, %417
  %422 = tail call <16 x i16> @llvm.x86.avx2.psra.w(<16 x i16> %421, <8 x i16> %370) #3
  %423 = shl i64 %394, 3
  %424 = and i64 %423, 4294967280
  %425 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 %424
  %426 = bitcast i16* %425 to <16 x i16>*
  store <16 x i16> %422, <16 x i16>* %426, align 32
  %427 = add nuw nsw i64 %394, 2
  %428 = icmp slt i64 %427, %384
  br i1 %428, label %393, label %429

429:                                              ; preds = %406, %389
  %430 = load <16 x i16>, <16 x i16>* %371, align 32
  %431 = load <16 x i16>, <16 x i16>* %373, align 16
  %432 = load <16 x i16>, <16 x i16>* %375, align 32
  %433 = load <16 x i16>, <16 x i16>* %377, align 16
  br i1 %378, label %434, label %580

434:                                              ; preds = %429
  %435 = shufflevector <16 x i16> %432, <16 x i16> %433, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %436 = shufflevector <16 x i16> %430, <16 x i16> %431, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %437 = shufflevector <16 x i16> %432, <16 x i16> %433, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %438 = shufflevector <16 x i16> %430, <16 x i16> %431, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %439 = trunc i64 %390 to i32
  %440 = sub nsw i32 %4, %439
  %441 = icmp sgt i32 %440, 4
  br label %442

442:                                              ; preds = %434, %577
  %443 = phi i64 [ 0, %434 ], [ %578, %577 ]
  %444 = phi <16 x i16> [ %438, %434 ], [ %445, %577 ]
  %445 = phi <16 x i16> [ %437, %434 ], [ %457, %577 ]
  %446 = phi <16 x i16> [ %436, %434 ], [ %447, %577 ]
  %447 = phi <16 x i16> [ %435, %434 ], [ %458, %577 ]
  %448 = shl i64 %443, 3
  %449 = and i64 %448, 4294967280
  %450 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 %449
  %451 = getelementptr inbounds i16, i16* %450, i64 32
  %452 = bitcast i16* %451 to <16 x i16>*
  %453 = load <16 x i16>, <16 x i16>* %452, align 32
  %454 = getelementptr inbounds i16, i16* %450, i64 40
  %455 = bitcast i16* %454 to <16 x i16>*
  %456 = load <16 x i16>, <16 x i16>* %455, align 16
  %457 = shufflevector <16 x i16> %453, <16 x i16> %456, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %458 = shufflevector <16 x i16> %453, <16 x i16> %456, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %459 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %444, <16 x i16> %379) #3
  %460 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %445, <16 x i16> %380) #3
  %461 = add <8 x i32> %459, %67
  %462 = add <8 x i32> %461, %460
  %463 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %462, <4 x i32> %68) #3
  br i1 %441, label %464, label %521

464:                                              ; preds = %442
  %465 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %446, <16 x i16> %379) #3
  %466 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %447, <16 x i16> %380) #3
  %467 = add <8 x i32> %465, %67
  %468 = add <8 x i32> %467, %466
  %469 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %468, <4 x i32> %68) #3
  %470 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %463, <8 x i32> %469) #3
  %471 = add <16 x i16> %470, %45
  %472 = bitcast <16 x i16> %471 to <4 x i64>
  br i1 %381, label %511, label %473

473:                                              ; preds = %464
  %474 = mul nsw i64 %443, %385
  %475 = add nsw i64 %474, %390
  %476 = getelementptr inbounds i16, i16* %14, i64 %475
  %477 = add nsw i64 %475, %385
  %478 = getelementptr inbounds i16, i16* %14, i64 %477
  %479 = bitcast i16* %476 to <2 x i64>*
  %480 = load <2 x i64>, <2 x i64>* %479, align 1
  %481 = bitcast i16* %478 to <2 x i64>*
  %482 = load <2 x i64>, <2 x i64>* %481, align 1
  %483 = shufflevector <2 x i64> %480, <2 x i64> %482, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %484 = bitcast <4 x i64> %483 to <16 x i16>
  br i1 %382, label %493, label %485

485:                                              ; preds = %473
  %486 = shufflevector <16 x i16> %484, <16 x i16> %471, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %487 = shufflevector <16 x i16> %484, <16 x i16> %471, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %488 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %486, <16 x i16> %28) #3
  %489 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %487, <16 x i16> %28) #3
  %490 = ashr <8 x i32> %488, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %491 = ashr <8 x i32> %489, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %492 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %490, <8 x i32> %491) #3
  br label %496

493:                                              ; preds = %473
  %494 = add <16 x i16> %471, %484
  %495 = ashr <16 x i16> %494, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %496

496:                                              ; preds = %485, %493
  %497 = phi <16 x i16> [ %492, %485 ], [ %495, %493 ]
  %498 = add <16 x i16> %383, %497
  %499 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %498, i32 %47) #3
  %500 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %499, <16 x i16> %499) #3
  %501 = bitcast <32 x i8> %500 to <4 x i64>
  %502 = mul nsw i64 %443, %386
  %503 = add nsw i64 %502, %390
  %504 = getelementptr inbounds i8, i8* %2, i64 %503
  %505 = extractelement <4 x i64> %501, i32 0
  %506 = bitcast i8* %504 to i64*
  store i64 %505, i64* %506, align 1
  %507 = add nsw i64 %503, %386
  %508 = getelementptr inbounds i8, i8* %2, i64 %507
  %509 = extractelement <4 x i64> %501, i32 2
  %510 = bitcast i8* %508 to i64*
  store i64 %509, i64* %510, align 1
  br label %577

511:                                              ; preds = %464
  %512 = shufflevector <4 x i64> %472, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %513 = mul nsw i64 %443, %385
  %514 = add nsw i64 %513, %390
  %515 = getelementptr inbounds i16, i16* %14, i64 %514
  %516 = bitcast i16* %515 to <2 x i64>*
  store <2 x i64> %512, <2 x i64>* %516, align 16
  %517 = shufflevector <4 x i64> %472, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %518 = add nsw i64 %514, %385
  %519 = getelementptr inbounds i16, i16* %14, i64 %518
  %520 = bitcast i16* %519 to <2 x i64>*
  store <2 x i64> %517, <2 x i64>* %520, align 16
  br label %577

521:                                              ; preds = %442
  %522 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %463, <8 x i32> %463) #3
  %523 = add <16 x i16> %522, %45
  %524 = bitcast <16 x i16> %523 to <4 x i64>
  br i1 %381, label %567, label %525

525:                                              ; preds = %521
  %526 = mul nsw i64 %443, %385
  %527 = add nsw i64 %526, %390
  %528 = getelementptr inbounds i16, i16* %14, i64 %527
  %529 = add nsw i64 %527, %385
  %530 = getelementptr inbounds i16, i16* %14, i64 %529
  %531 = bitcast i16* %528 to <2 x i64>*
  %532 = load <2 x i64>, <2 x i64>* %531, align 1
  %533 = bitcast i16* %530 to <2 x i64>*
  %534 = load <2 x i64>, <2 x i64>* %533, align 1
  %535 = shufflevector <2 x i64> %532, <2 x i64> %534, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %536 = bitcast <4 x i64> %535 to <16 x i16>
  br i1 %382, label %545, label %537

537:                                              ; preds = %525
  %538 = shufflevector <16 x i16> %536, <16 x i16> %523, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %539 = shufflevector <16 x i16> %536, <16 x i16> %523, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %540 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %538, <16 x i16> %28) #3
  %541 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %539, <16 x i16> %28) #3
  %542 = ashr <8 x i32> %540, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %543 = ashr <8 x i32> %541, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %544 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %542, <8 x i32> %543) #3
  br label %548

545:                                              ; preds = %525
  %546 = add <16 x i16> %523, %536
  %547 = ashr <16 x i16> %546, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %548

548:                                              ; preds = %537, %545
  %549 = phi <16 x i16> [ %544, %537 ], [ %547, %545 ]
  %550 = add <16 x i16> %383, %549
  %551 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %550, i32 %47) #3
  %552 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %551, <16 x i16> %551) #3
  %553 = bitcast <32 x i8> %552 to <4 x i64>
  %554 = shufflevector <4 x i64> %553, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %555 = shufflevector <4 x i64> %553, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %556 = bitcast <2 x i64> %554 to <4 x i32>
  %557 = extractelement <4 x i32> %556, i32 0
  %558 = mul nsw i64 %443, %386
  %559 = add nsw i64 %558, %390
  %560 = getelementptr inbounds i8, i8* %2, i64 %559
  %561 = bitcast i8* %560 to i32*
  store i32 %557, i32* %561, align 4
  %562 = bitcast <2 x i64> %555 to <4 x i32>
  %563 = extractelement <4 x i32> %562, i32 0
  %564 = add nsw i64 %559, %386
  %565 = getelementptr inbounds i8, i8* %2, i64 %564
  %566 = bitcast i8* %565 to i32*
  store i32 %563, i32* %566, align 4
  br label %577

567:                                              ; preds = %521
  %568 = shufflevector <4 x i64> %524, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %569 = mul nsw i64 %443, %385
  %570 = add nsw i64 %569, %390
  %571 = getelementptr inbounds i16, i16* %14, i64 %570
  %572 = bitcast i16* %571 to <2 x i64>*
  store <2 x i64> %568, <2 x i64>* %572, align 16
  %573 = shufflevector <4 x i64> %524, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %574 = add nsw i64 %570, %385
  %575 = getelementptr inbounds i16, i16* %14, i64 %574
  %576 = bitcast i16* %575 to <2 x i64>*
  store <2 x i64> %573, <2 x i64>* %576, align 16
  br label %577

577:                                              ; preds = %548, %567, %496, %511
  %578 = add nuw nsw i64 %443, 2
  %579 = icmp slt i64 %578, %387
  br i1 %579, label %442, label %580

580:                                              ; preds = %577, %429
  %581 = add nuw nsw i64 %390, 8
  %582 = icmp slt i64 %581, %388
  br i1 %582, label %389, label %835

583:                                              ; preds = %352
  %584 = add i32 %5, -1
  %585 = add i32 %584, %93
  %586 = lshr i32 %93, 1
  %587 = add nsw i32 %586, -1
  %588 = lshr i16 %73, 1
  %589 = zext i16 %588 to i64
  %590 = mul nsw i32 %587, %1
  %591 = sext i32 %590 to i64
  %592 = sub nsw i64 0, %591
  %593 = getelementptr inbounds i8, i8* %0, i64 %592
  %594 = sub nsw i64 1, %589
  %595 = getelementptr inbounds i8, i8* %593, i64 %594
  %596 = icmp sgt i32 %4, 0
  br i1 %596, label %597, label %835

597:                                              ; preds = %583
  %598 = icmp sgt i32 %585, 0
  %599 = sext i32 %1 to i64
  %600 = shl i32 %1, 1
  %601 = sext i32 %600 to i64
  %602 = bitcast <4 x i32> %60 to <8 x i16>
  %603 = bitcast [1120 x i16]* %12 to <16 x i16>*
  %604 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 8
  %605 = bitcast i16* %604 to <16 x i16>*
  %606 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 16
  %607 = bitcast i16* %606 to <16 x i16>*
  %608 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 24
  %609 = bitcast i16* %608 to <16 x i16>*
  %610 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 32
  %611 = bitcast i16* %610 to <16 x i16>*
  %612 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 40
  %613 = bitcast i16* %612 to <16 x i16>*
  %614 = icmp sgt i32 %5, 0
  %615 = bitcast <8 x i32> %101 to <16 x i16>
  %616 = bitcast <8 x i32> %102 to <16 x i16>
  %617 = bitcast <8 x i32> %103 to <16 x i16>
  %618 = bitcast <8 x i32> %104 to <16 x i16>
  %619 = icmp eq i32 %30, 0
  %620 = icmp eq i32 %32, 0
  %621 = sub <16 x i16> %52, %45
  %622 = sext i32 %585 to i64
  %623 = sext i32 %16 to i64
  %624 = sext i32 %3 to i64
  %625 = sext i32 %5 to i64
  %626 = sext i32 %4 to i64
  br label %627

627:                                              ; preds = %597, %832
  %628 = phi i64 [ 0, %597 ], [ %833, %832 ]
  br i1 %598, label %629, label %667

629:                                              ; preds = %627
  %630 = getelementptr inbounds i8, i8* %595, i64 %628
  br label %631

631:                                              ; preds = %629, %644
  %632 = phi i64 [ 0, %629 ], [ %665, %644 ]
  %633 = phi i8* [ %630, %629 ], [ %646, %644 ]
  %634 = bitcast i8* %633 to <2 x i64>*
  %635 = load <2 x i64>, <2 x i64>* %634, align 1
  %636 = shufflevector <2 x i64> %635, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %637 = or i64 %632, 1
  %638 = icmp slt i64 %637, %622
  br i1 %638, label %639, label %644

639:                                              ; preds = %631
  %640 = getelementptr inbounds i8, i8* %633, i64 %599
  %641 = bitcast i8* %640 to <2 x i64>*
  %642 = load <2 x i64>, <2 x i64>* %641, align 1
  %643 = shufflevector <2 x i64> %635, <2 x i64> %642, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  br label %644

644:                                              ; preds = %639, %631
  %645 = phi <4 x i64> [ %643, %639 ], [ %636, %631 ]
  %646 = getelementptr inbounds i8, i8* %633, i64 %601
  %647 = bitcast <4 x i64> %645 to <32 x i8>
  %648 = shufflevector <32 x i8> %647, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %649 = shufflevector <32 x i8> %647, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %650 = shufflevector <32 x i8> %647, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %651 = shufflevector <32 x i8> %647, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30>
  %652 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %648, <32 x i8> %84) #3
  %653 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %649, <32 x i8> %85) #3
  %654 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %650, <32 x i8> %86) #3
  %655 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %651, <32 x i8> %87) #3
  %656 = add <16 x i16> %652, %59
  %657 = add <16 x i16> %656, %653
  %658 = add <16 x i16> %657, %654
  %659 = add <16 x i16> %658, %655
  %660 = tail call <16 x i16> @llvm.x86.avx2.psra.w(<16 x i16> %659, <8 x i16> %602) #3
  %661 = shl i64 %632, 3
  %662 = and i64 %661, 4294967280
  %663 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 %662
  %664 = bitcast i16* %663 to <16 x i16>*
  store <16 x i16> %660, <16 x i16>* %664, align 32
  %665 = add nuw nsw i64 %632, 2
  %666 = icmp slt i64 %665, %622
  br i1 %666, label %631, label %667

667:                                              ; preds = %644, %627
  %668 = load <16 x i16>, <16 x i16>* %603, align 32
  %669 = load <16 x i16>, <16 x i16>* %605, align 16
  %670 = load <16 x i16>, <16 x i16>* %607, align 32
  %671 = load <16 x i16>, <16 x i16>* %609, align 16
  %672 = load <16 x i16>, <16 x i16>* %611, align 32
  %673 = load <16 x i16>, <16 x i16>* %613, align 16
  br i1 %614, label %674, label %832

674:                                              ; preds = %667
  %675 = shufflevector <16 x i16> %672, <16 x i16> %673, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %676 = shufflevector <16 x i16> %670, <16 x i16> %671, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %677 = shufflevector <16 x i16> %668, <16 x i16> %669, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %678 = shufflevector <16 x i16> %672, <16 x i16> %673, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %679 = shufflevector <16 x i16> %670, <16 x i16> %671, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %680 = shufflevector <16 x i16> %668, <16 x i16> %669, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %681 = trunc i64 %628 to i32
  %682 = sub nsw i32 %4, %681
  %683 = icmp sgt i32 %682, 4
  br label %684

684:                                              ; preds = %674, %829
  %685 = phi i64 [ 0, %674 ], [ %830, %829 ]
  %686 = phi <16 x i16> [ %680, %674 ], [ %687, %829 ]
  %687 = phi <16 x i16> [ %679, %674 ], [ %688, %829 ]
  %688 = phi <16 x i16> [ %678, %674 ], [ %701, %829 ]
  %689 = phi <16 x i16> [ %677, %674 ], [ %690, %829 ]
  %690 = phi <16 x i16> [ %676, %674 ], [ %691, %829 ]
  %691 = phi <16 x i16> [ %675, %674 ], [ %702, %829 ]
  %692 = shl i64 %685, 3
  %693 = and i64 %692, 4294967280
  %694 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 %693
  %695 = getelementptr inbounds i16, i16* %694, i64 48
  %696 = bitcast i16* %695 to <16 x i16>*
  %697 = load <16 x i16>, <16 x i16>* %696, align 32
  %698 = getelementptr inbounds i16, i16* %694, i64 56
  %699 = bitcast i16* %698 to <16 x i16>*
  %700 = load <16 x i16>, <16 x i16>* %699, align 16
  %701 = shufflevector <16 x i16> %697, <16 x i16> %700, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %702 = shufflevector <16 x i16> %697, <16 x i16> %700, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %703 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %686, <16 x i16> %615) #3
  %704 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %687, <16 x i16> %616) #3
  %705 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %688, <16 x i16> %617) #3
  %706 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %701, <16 x i16> %618) #3
  %707 = add <8 x i32> %703, %67
  %708 = add <8 x i32> %707, %704
  %709 = add <8 x i32> %708, %705
  %710 = add <8 x i32> %709, %706
  %711 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %710, <4 x i32> %68) #3
  br i1 %683, label %712, label %773

712:                                              ; preds = %684
  %713 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %689, <16 x i16> %615) #3
  %714 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %690, <16 x i16> %616) #3
  %715 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %691, <16 x i16> %617) #3
  %716 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %702, <16 x i16> %618) #3
  %717 = add <8 x i32> %713, %67
  %718 = add <8 x i32> %717, %714
  %719 = add <8 x i32> %718, %715
  %720 = add <8 x i32> %719, %716
  %721 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %720, <4 x i32> %68) #3
  %722 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %711, <8 x i32> %721) #3
  %723 = add <16 x i16> %722, %45
  %724 = bitcast <16 x i16> %723 to <4 x i64>
  br i1 %619, label %763, label %725

725:                                              ; preds = %712
  %726 = mul nsw i64 %685, %623
  %727 = add nsw i64 %726, %628
  %728 = getelementptr inbounds i16, i16* %14, i64 %727
  %729 = add nsw i64 %727, %623
  %730 = getelementptr inbounds i16, i16* %14, i64 %729
  %731 = bitcast i16* %728 to <2 x i64>*
  %732 = load <2 x i64>, <2 x i64>* %731, align 1
  %733 = bitcast i16* %730 to <2 x i64>*
  %734 = load <2 x i64>, <2 x i64>* %733, align 1
  %735 = shufflevector <2 x i64> %732, <2 x i64> %734, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %736 = bitcast <4 x i64> %735 to <16 x i16>
  br i1 %620, label %745, label %737

737:                                              ; preds = %725
  %738 = shufflevector <16 x i16> %736, <16 x i16> %723, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %739 = shufflevector <16 x i16> %736, <16 x i16> %723, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %740 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %738, <16 x i16> %28) #3
  %741 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %739, <16 x i16> %28) #3
  %742 = ashr <8 x i32> %740, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %743 = ashr <8 x i32> %741, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %744 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %742, <8 x i32> %743) #3
  br label %748

745:                                              ; preds = %725
  %746 = add <16 x i16> %723, %736
  %747 = ashr <16 x i16> %746, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %748

748:                                              ; preds = %737, %745
  %749 = phi <16 x i16> [ %744, %737 ], [ %747, %745 ]
  %750 = add <16 x i16> %621, %749
  %751 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %750, i32 %47) #3
  %752 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %751, <16 x i16> %751) #3
  %753 = bitcast <32 x i8> %752 to <4 x i64>
  %754 = mul nsw i64 %685, %624
  %755 = add nsw i64 %754, %628
  %756 = getelementptr inbounds i8, i8* %2, i64 %755
  %757 = extractelement <4 x i64> %753, i32 0
  %758 = bitcast i8* %756 to i64*
  store i64 %757, i64* %758, align 1
  %759 = add nsw i64 %755, %624
  %760 = getelementptr inbounds i8, i8* %2, i64 %759
  %761 = extractelement <4 x i64> %753, i32 2
  %762 = bitcast i8* %760 to i64*
  store i64 %761, i64* %762, align 1
  br label %829

763:                                              ; preds = %712
  %764 = shufflevector <4 x i64> %724, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %765 = mul nsw i64 %685, %623
  %766 = add nsw i64 %765, %628
  %767 = getelementptr inbounds i16, i16* %14, i64 %766
  %768 = bitcast i16* %767 to <2 x i64>*
  store <2 x i64> %764, <2 x i64>* %768, align 16
  %769 = shufflevector <4 x i64> %724, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %770 = add nsw i64 %766, %623
  %771 = getelementptr inbounds i16, i16* %14, i64 %770
  %772 = bitcast i16* %771 to <2 x i64>*
  store <2 x i64> %769, <2 x i64>* %772, align 16
  br label %829

773:                                              ; preds = %684
  %774 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %711, <8 x i32> %711) #3
  %775 = add <16 x i16> %774, %45
  %776 = bitcast <16 x i16> %775 to <4 x i64>
  br i1 %619, label %819, label %777

777:                                              ; preds = %773
  %778 = mul nsw i64 %685, %623
  %779 = add nsw i64 %778, %628
  %780 = getelementptr inbounds i16, i16* %14, i64 %779
  %781 = add nsw i64 %779, %623
  %782 = getelementptr inbounds i16, i16* %14, i64 %781
  %783 = bitcast i16* %780 to <2 x i64>*
  %784 = load <2 x i64>, <2 x i64>* %783, align 1
  %785 = bitcast i16* %782 to <2 x i64>*
  %786 = load <2 x i64>, <2 x i64>* %785, align 1
  %787 = shufflevector <2 x i64> %784, <2 x i64> %786, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %788 = bitcast <4 x i64> %787 to <16 x i16>
  br i1 %620, label %797, label %789

789:                                              ; preds = %777
  %790 = shufflevector <16 x i16> %788, <16 x i16> %775, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %791 = shufflevector <16 x i16> %788, <16 x i16> %775, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %792 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %790, <16 x i16> %28) #3
  %793 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %791, <16 x i16> %28) #3
  %794 = ashr <8 x i32> %792, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %795 = ashr <8 x i32> %793, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %796 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %794, <8 x i32> %795) #3
  br label %800

797:                                              ; preds = %777
  %798 = add <16 x i16> %775, %788
  %799 = ashr <16 x i16> %798, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %800

800:                                              ; preds = %789, %797
  %801 = phi <16 x i16> [ %796, %789 ], [ %799, %797 ]
  %802 = add <16 x i16> %621, %801
  %803 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %802, i32 %47) #3
  %804 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %803, <16 x i16> %803) #3
  %805 = bitcast <32 x i8> %804 to <4 x i64>
  %806 = shufflevector <4 x i64> %805, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %807 = shufflevector <4 x i64> %805, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %808 = bitcast <2 x i64> %806 to <4 x i32>
  %809 = extractelement <4 x i32> %808, i32 0
  %810 = mul nsw i64 %685, %624
  %811 = add nsw i64 %810, %628
  %812 = getelementptr inbounds i8, i8* %2, i64 %811
  %813 = bitcast i8* %812 to i32*
  store i32 %809, i32* %813, align 4
  %814 = bitcast <2 x i64> %807 to <4 x i32>
  %815 = extractelement <4 x i32> %814, i32 0
  %816 = add nsw i64 %811, %624
  %817 = getelementptr inbounds i8, i8* %2, i64 %816
  %818 = bitcast i8* %817 to i32*
  store i32 %815, i32* %818, align 4
  br label %829

819:                                              ; preds = %773
  %820 = shufflevector <4 x i64> %776, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %821 = mul nsw i64 %685, %623
  %822 = add nsw i64 %821, %628
  %823 = getelementptr inbounds i16, i16* %14, i64 %822
  %824 = bitcast i16* %823 to <2 x i64>*
  store <2 x i64> %820, <2 x i64>* %824, align 16
  %825 = shufflevector <4 x i64> %776, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %826 = add nsw i64 %822, %623
  %827 = getelementptr inbounds i16, i16* %14, i64 %826
  %828 = bitcast i16* %827 to <2 x i64>*
  store <2 x i64> %825, <2 x i64>* %828, align 16
  br label %829

829:                                              ; preds = %800, %819, %748, %763
  %830 = add nuw nsw i64 %685, 2
  %831 = icmp slt i64 %830, %625
  br i1 %831, label %684, label %832

832:                                              ; preds = %829, %667
  %833 = add nuw nsw i64 %628, 8
  %834 = icmp slt i64 %833, %626
  br i1 %834, label %627, label %835

835:                                              ; preds = %832, %580, %349, %583, %356, %109
  call void @llvm.lifetime.end.p0i8(i64 2240, i8* nonnull %17) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_dist_wtd_convolve_2d_copy_avx2(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 1
  %9 = load i16*, i16** %8, align 8
  %10 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = sub i32 14, %13
  %15 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = sub i32 %14, %16
  %18 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  %19 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 7
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 8
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %6, i64 0, i32 9
  %26 = load i32, i32* %25, align 4
  %27 = trunc i32 %24 to i16
  %28 = insertelement <16 x i16> undef, i16 %27, i32 0
  %29 = shufflevector <16 x i16> %28, <16 x i16> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = trunc i32 %26 to i16
  %31 = insertelement <16 x i16> undef, i16 %30, i32 0
  %32 = shufflevector <16 x i16> %31, <16 x i16> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = shufflevector <16 x i16> %29, <16 x i16> %32, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %34 = sub nsw i32 22, %16
  %35 = sub i32 %34, %13
  %36 = shl i32 1, %35
  %37 = add nsw i32 %35, -1
  %38 = shl i32 1, %37
  %39 = add nsw i32 %38, %36
  %40 = trunc i32 %39 to i16
  %41 = insertelement <16 x i16> undef, i16 %40, i32 0
  %42 = shufflevector <16 x i16> %41, <16 x i16> undef, <16 x i32> zeroinitializer
  %43 = sub nsw i32 14, %16
  %44 = sub i32 %43, %13
  %45 = shl i32 1, %44
  %46 = lshr i32 %45, 1
  %47 = trunc i32 %46 to i16
  %48 = insertelement <16 x i16> undef, i16 %47, i32 0
  %49 = shufflevector <16 x i16> %48, <16 x i16> undef, <16 x i32> zeroinitializer
  %50 = and i32 %4, 15
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %113

52:                                               ; preds = %7
  %53 = icmp sgt i32 %5, 0
  br i1 %53, label %54, label %223

54:                                               ; preds = %52
  %55 = icmp sgt i32 %4, 0
  %56 = bitcast <4 x i32> %18 to <8 x i16>
  %57 = icmp eq i32 %20, 0
  %58 = icmp eq i32 %22, 0
  %59 = sub <16 x i16> %49, %42
  %60 = sext i32 %4 to i64
  %61 = sext i32 %3 to i64
  %62 = sext i32 %11 to i64
  %63 = sext i32 %1 to i64
  %64 = zext i32 %5 to i64
  br label %65

65:                                               ; preds = %110, %54
  %66 = phi i64 [ 0, %54 ], [ %111, %110 ]
  br i1 %55, label %67, label %110

67:                                               ; preds = %65
  %68 = mul nsw i64 %66, %63
  %69 = mul nsw i64 %66, %62
  %70 = mul nsw i64 %66, %61
  br label %71

71:                                               ; preds = %67, %107
  %72 = phi i64 [ 0, %67 ], [ %108, %107 ]
  %73 = add nsw i64 %72, %68
  %74 = getelementptr inbounds i8, i8* %0, i64 %73
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1
  %77 = zext <16 x i8> %76 to <16 x i16>
  %78 = tail call <16 x i16> @llvm.x86.avx2.psll.w(<16 x i16> %77, <8 x i16> %56) #3
  %79 = add <16 x i16> %78, %42
  %80 = add nsw i64 %72, %69
  %81 = getelementptr inbounds i16, i16* %9, i64 %80
  %82 = bitcast i16* %81 to <16 x i16>*
  br i1 %57, label %106, label %83

83:                                               ; preds = %71
  %84 = load <16 x i16>, <16 x i16>* %82, align 1
  br i1 %58, label %93, label %85

85:                                               ; preds = %83
  %86 = shufflevector <16 x i16> %84, <16 x i16> %79, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %87 = shufflevector <16 x i16> %84, <16 x i16> %79, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %88 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %86, <16 x i16> %33) #3
  %89 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %87, <16 x i16> %33) #3
  %90 = ashr <8 x i32> %88, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %91 = ashr <8 x i32> %89, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %92 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %90, <8 x i32> %91) #3
  br label %96

93:                                               ; preds = %83
  %94 = add <16 x i16> %84, %79
  %95 = ashr <16 x i16> %94, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %96

96:                                               ; preds = %85, %93
  %97 = phi <16 x i16> [ %92, %85 ], [ %95, %93 ]
  %98 = add <16 x i16> %59, %97
  %99 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %98, i32 %44) #3
  %100 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %99, <16 x i16> undef) #3
  %101 = bitcast <32 x i8> %100 to <4 x i64>
  %102 = add nsw i64 %72, %70
  %103 = getelementptr inbounds i8, i8* %2, i64 %102
  %104 = bitcast i8* %103 to <2 x i64>*
  %105 = shufflevector <4 x i64> %101, <4 x i64> undef, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %105, <2 x i64>* %104, align 16
  br label %107

106:                                              ; preds = %71
  store <16 x i16> %79, <16 x i16>* %82, align 32
  br label %107

107:                                              ; preds = %106, %96
  %108 = add nuw nsw i64 %72, 16
  %109 = icmp slt i64 %108, %60
  br i1 %109, label %71, label %110

110:                                              ; preds = %107, %65
  %111 = add nuw nsw i64 %66, 1
  %112 = icmp eq i64 %111, %64
  br i1 %112, label %223, label %65

113:                                              ; preds = %7
  %114 = and i32 %4, 3
  %115 = icmp eq i32 %114, 0
  %116 = icmp sgt i32 %5, 0
  %117 = and i1 %115, %116
  br i1 %117, label %118, label %223

118:                                              ; preds = %113
  %119 = icmp sgt i32 %4, 0
  %120 = bitcast <4 x i32> %18 to <8 x i16>
  %121 = icmp eq i32 %20, 0
  %122 = icmp eq i32 %22, 0
  %123 = sub <16 x i16> %49, %42
  %124 = icmp sgt i32 %4, 4
  %125 = sext i32 %11 to i64
  %126 = sext i32 %3 to i64
  %127 = sext i32 %1 to i64
  %128 = sext i32 %4 to i64
  %129 = sext i32 %5 to i64
  br label %130

130:                                              ; preds = %118, %220
  %131 = phi i64 [ 0, %118 ], [ %221, %220 ]
  br i1 %119, label %132, label %220

132:                                              ; preds = %130
  %133 = mul nsw i64 %131, %127
  %134 = mul nsw i64 %131, %125
  %135 = mul nsw i64 %131, %126
  br label %136

136:                                              ; preds = %132, %217
  %137 = phi i64 [ 0, %132 ], [ %218, %217 ]
  %138 = add nsw i64 %137, %133
  %139 = getelementptr inbounds i8, i8* %0, i64 %138
  %140 = bitcast i8* %139 to i64*
  %141 = load i64, i64* %140, align 1
  %142 = insertelement <4 x i64> undef, i64 %141, i32 0
  %143 = add nsw i64 %138, %127
  %144 = getelementptr inbounds i8, i8* %0, i64 %143
  %145 = bitcast i8* %144 to i64*
  %146 = load i64, i64* %145, align 1
  %147 = insertelement <2 x i64> undef, i64 %146, i32 0
  %148 = bitcast <4 x i64> %142 to <8 x i32>
  %149 = bitcast <2 x i64> %147 to <4 x i32>
  %150 = shufflevector <4 x i32> %149, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %151 = shufflevector <8 x i32> %148, <8 x i32> %150, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 8, i32 9, i32 undef, i32 undef>
  %152 = bitcast <8 x i32> %151 to <32 x i8>
  %153 = shufflevector <32 x i8> %152, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %154 = bitcast <32 x i8> %153 to <16 x i16>
  %155 = tail call <16 x i16> @llvm.x86.avx2.psll.w(<16 x i16> %154, <8 x i16> %120) #3
  %156 = add <16 x i16> %155, %42
  %157 = bitcast <16 x i16> %156 to <4 x i64>
  br i1 %121, label %208, label %158

158:                                              ; preds = %136
  %159 = add nsw i64 %137, %134
  %160 = getelementptr inbounds i16, i16* %9, i64 %159
  %161 = add nsw i64 %159, %125
  %162 = getelementptr inbounds i16, i16* %9, i64 %161
  %163 = bitcast i16* %160 to <2 x i64>*
  %164 = load <2 x i64>, <2 x i64>* %163, align 1
  %165 = bitcast i16* %162 to <2 x i64>*
  %166 = load <2 x i64>, <2 x i64>* %165, align 1
  %167 = shufflevector <2 x i64> %164, <2 x i64> %166, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %168 = bitcast <4 x i64> %167 to <16 x i16>
  br i1 %122, label %177, label %169

169:                                              ; preds = %158
  %170 = shufflevector <16 x i16> %168, <16 x i16> %156, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %171 = shufflevector <16 x i16> %168, <16 x i16> %156, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %172 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %170, <16 x i16> %33) #3
  %173 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %171, <16 x i16> %33) #3
  %174 = ashr <8 x i32> %172, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %175 = ashr <8 x i32> %173, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %176 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %174, <8 x i32> %175) #3
  br label %180

177:                                              ; preds = %158
  %178 = add <16 x i16> %156, %168
  %179 = ashr <16 x i16> %178, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %180

180:                                              ; preds = %169, %177
  %181 = phi <16 x i16> [ %176, %169 ], [ %179, %177 ]
  %182 = add <16 x i16> %123, %181
  %183 = tail call <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16> %182, i32 %44) #3
  %184 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %183, <16 x i16> %183) #3
  %185 = bitcast <32 x i8> %184 to <4 x i64>
  br i1 %124, label %186, label %195

186:                                              ; preds = %180
  %187 = add nsw i64 %137, %135
  %188 = getelementptr inbounds i8, i8* %2, i64 %187
  %189 = extractelement <4 x i64> %185, i32 0
  %190 = bitcast i8* %188 to i64*
  store i64 %189, i64* %190, align 1
  %191 = add nsw i64 %187, %126
  %192 = getelementptr inbounds i8, i8* %2, i64 %191
  %193 = extractelement <4 x i64> %185, i32 2
  %194 = bitcast i8* %192 to i64*
  store i64 %193, i64* %194, align 1
  br label %217

195:                                              ; preds = %180
  %196 = shufflevector <4 x i64> %185, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %197 = shufflevector <4 x i64> %185, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %198 = bitcast <2 x i64> %197 to <4 x i32>
  %199 = extractelement <4 x i32> %198, i32 0
  %200 = add nsw i64 %137, %135
  %201 = getelementptr inbounds i8, i8* %2, i64 %200
  %202 = bitcast i8* %201 to i32*
  store i32 %199, i32* %202, align 4
  %203 = bitcast <2 x i64> %196 to <4 x i32>
  %204 = extractelement <4 x i32> %203, i32 0
  %205 = add nsw i64 %200, %126
  %206 = getelementptr inbounds i8, i8* %2, i64 %205
  %207 = bitcast i8* %206 to i32*
  store i32 %204, i32* %207, align 4
  br label %217

208:                                              ; preds = %136
  %209 = shufflevector <4 x i64> %157, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %210 = add nsw i64 %137, %134
  %211 = getelementptr inbounds i16, i16* %9, i64 %210
  %212 = bitcast i16* %211 to <2 x i64>*
  store <2 x i64> %209, <2 x i64>* %212, align 16
  %213 = shufflevector <4 x i64> %157, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %214 = add nsw i64 %210, %125
  %215 = getelementptr inbounds i16, i16* %9, i64 %214
  %216 = bitcast i16* %215 to <2 x i64>*
  store <2 x i64> %213, <2 x i64>* %216, align 16
  br label %217

217:                                              ; preds = %186, %195, %208
  %218 = add nuw nsw i64 %137, 8
  %219 = icmp slt i64 %218, %128
  br i1 %219, label %136, label %220

220:                                              ; preds = %217, %130
  %221 = add nuw nsw i64 %131, 2
  %222 = icmp slt i64 %221, %129
  br i1 %222, label %130, label %223

223:                                              ; preds = %220, %110, %52, %113
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.psrai.w(<16 x i16>, i32) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.psra.w(<16 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16>, i32) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8>, <32 x i8>) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32>, i32) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.psll.w(<16 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
