; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/common/reconintra.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/common/reconintra.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%union.int_mv = type { i32 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }

@dc_pred = internal unnamed_addr global [2 x [2 x [2 x void (i8*, i64, i8*, i8*)*]]] zeroinitializer, align 16
@pred = internal unnamed_addr global [4 x [2 x void (i8*, i64, i8*, i8*)*]] zeroinitializer, align 16
@once.lock = internal global i32 0, align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_build_intra_predictors_mby_s(%struct.macroblockd* nocapture readonly, i8*, i8* nocapture readonly, i32, i8*, i32) local_unnamed_addr #0 {
  %7 = alloca [16 x i8], align 16
  %8 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 13
  %9 = load %struct.modeinfo*, %struct.modeinfo** %8, align 32
  %10 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %9, i64 0, i32 0, i32 0
  %11 = load i8, i8* %10, align 4
  %12 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #3
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 1
  %14 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 2
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 3
  %16 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 4
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 5
  %18 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 6
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 7
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 8
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 9
  %22 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 10
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 11
  %24 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 12
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 13
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 14
  %27 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  %28 = sext i32 %3 to i64
  %29 = load i8, i8* %2, align 1
  store i8 %29, i8* %12, align 16
  %30 = getelementptr inbounds i8, i8* %2, i64 %28
  %31 = load i8, i8* %30, align 1
  store i8 %31, i8* %13, align 1
  %32 = shl nsw i64 %28, 1
  %33 = getelementptr inbounds i8, i8* %2, i64 %32
  %34 = load i8, i8* %33, align 1
  store i8 %34, i8* %14, align 2
  %35 = mul nsw i64 %28, 3
  %36 = getelementptr inbounds i8, i8* %2, i64 %35
  %37 = load i8, i8* %36, align 1
  store i8 %37, i8* %15, align 1
  %38 = shl nsw i64 %28, 2
  %39 = getelementptr inbounds i8, i8* %2, i64 %38
  %40 = load i8, i8* %39, align 1
  store i8 %40, i8* %16, align 4
  %41 = mul nsw i64 %28, 5
  %42 = getelementptr inbounds i8, i8* %2, i64 %41
  %43 = load i8, i8* %42, align 1
  store i8 %43, i8* %17, align 1
  %44 = mul nsw i64 %28, 6
  %45 = getelementptr inbounds i8, i8* %2, i64 %44
  %46 = load i8, i8* %45, align 1
  store i8 %46, i8* %18, align 2
  %47 = mul nsw i64 %28, 7
  %48 = getelementptr inbounds i8, i8* %2, i64 %47
  %49 = load i8, i8* %48, align 1
  store i8 %49, i8* %19, align 1
  %50 = shl nsw i64 %28, 3
  %51 = getelementptr inbounds i8, i8* %2, i64 %50
  %52 = load i8, i8* %51, align 1
  store i8 %52, i8* %20, align 8
  %53 = mul nsw i64 %28, 9
  %54 = getelementptr inbounds i8, i8* %2, i64 %53
  %55 = load i8, i8* %54, align 1
  store i8 %55, i8* %21, align 1
  %56 = mul nsw i64 %28, 10
  %57 = getelementptr inbounds i8, i8* %2, i64 %56
  %58 = load i8, i8* %57, align 1
  store i8 %58, i8* %22, align 2
  %59 = mul nsw i64 %28, 11
  %60 = getelementptr inbounds i8, i8* %2, i64 %59
  %61 = load i8, i8* %60, align 1
  store i8 %61, i8* %23, align 1
  %62 = mul nsw i64 %28, 12
  %63 = getelementptr inbounds i8, i8* %2, i64 %62
  %64 = load i8, i8* %63, align 1
  store i8 %64, i8* %24, align 4
  %65 = mul nsw i64 %28, 13
  %66 = getelementptr inbounds i8, i8* %2, i64 %65
  %67 = load i8, i8* %66, align 1
  store i8 %67, i8* %25, align 1
  %68 = mul nsw i64 %28, 14
  %69 = getelementptr inbounds i8, i8* %2, i64 %68
  %70 = load i8, i8* %69, align 1
  store i8 %70, i8* %26, align 2
  %71 = mul nsw i64 %28, 15
  %72 = getelementptr inbounds i8, i8* %2, i64 %71
  %73 = load i8, i8* %72, align 1
  store i8 %73, i8* %27, align 1
  %74 = icmp eq i8 %11, 0
  br i1 %74, label %75, label %83

75:                                               ; preds = %6
  %76 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 17
  %77 = load i32, i32* %76, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 16
  %80 = load i32, i32* %79, align 16
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [2 x [2 x [2 x void (i8*, i64, i8*, i8*)*]]], [2 x [2 x [2 x void (i8*, i64, i8*, i8*)*]]]* @dc_pred, i64 0, i64 %78, i64 %81, i64 0
  br label %86

83:                                               ; preds = %6
  %84 = zext i8 %11 to i64
  %85 = getelementptr inbounds [4 x [2 x void (i8*, i64, i8*, i8*)*]], [4 x [2 x void (i8*, i64, i8*, i8*)*]]* @pred, i64 0, i64 %84, i64 0
  br label %86

86:                                               ; preds = %83, %75
  %87 = phi void (i8*, i64, i8*, i8*)** [ %82, %75 ], [ %85, %83 ]
  %88 = load void (i8*, i64, i8*, i8*)*, void (i8*, i64, i8*, i8*)** %87, align 16
  %89 = sext i32 %5 to i64
  call void %88(i8* %4, i64 %89, i8* %1, i8* nonnull %12) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_build_intra_predictors_mbuv_s(%struct.macroblockd* nocapture readonly, i8*, i8*, i8* nocapture readonly, i8* nocapture readonly, i32, i8*, i8*, i32) local_unnamed_addr #0 {
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to [8 x i8]*
  %12 = alloca i64, align 8
  %13 = bitcast i64* %12 to [8 x i8]*
  %14 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 13
  %15 = load %struct.modeinfo*, %struct.modeinfo** %14, align 32
  %16 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %15, i64 0, i32 0, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #3
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 1
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 2
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 3
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 4
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 5
  %24 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 6
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 7
  %26 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #3
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 1
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 2
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 3
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 4
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 5
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 6
  %33 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 7
  %34 = sext i32 %5 to i64
  %35 = load i8, i8* %3, align 1
  store i8 %35, i8* %18, align 8
  %36 = load i8, i8* %4, align 1
  store i8 %36, i8* %26, align 8
  %37 = getelementptr inbounds i8, i8* %3, i64 %34
  %38 = load i8, i8* %37, align 1
  store i8 %38, i8* %19, align 1
  %39 = getelementptr inbounds i8, i8* %4, i64 %34
  %40 = load i8, i8* %39, align 1
  store i8 %40, i8* %27, align 1
  %41 = shl nsw i64 %34, 1
  %42 = getelementptr inbounds i8, i8* %3, i64 %41
  %43 = load i8, i8* %42, align 1
  store i8 %43, i8* %20, align 2
  %44 = getelementptr inbounds i8, i8* %4, i64 %41
  %45 = load i8, i8* %44, align 1
  store i8 %45, i8* %28, align 2
  %46 = mul nsw i64 %34, 3
  %47 = getelementptr inbounds i8, i8* %3, i64 %46
  %48 = load i8, i8* %47, align 1
  store i8 %48, i8* %21, align 1
  %49 = getelementptr inbounds i8, i8* %4, i64 %46
  %50 = load i8, i8* %49, align 1
  store i8 %50, i8* %29, align 1
  %51 = shl nsw i64 %34, 2
  %52 = getelementptr inbounds i8, i8* %3, i64 %51
  %53 = load i8, i8* %52, align 1
  store i8 %53, i8* %22, align 4
  %54 = getelementptr inbounds i8, i8* %4, i64 %51
  %55 = load i8, i8* %54, align 1
  store i8 %55, i8* %30, align 4
  %56 = mul nsw i64 %34, 5
  %57 = getelementptr inbounds i8, i8* %3, i64 %56
  %58 = load i8, i8* %57, align 1
  store i8 %58, i8* %23, align 1
  %59 = getelementptr inbounds i8, i8* %4, i64 %56
  %60 = load i8, i8* %59, align 1
  store i8 %60, i8* %31, align 1
  %61 = mul nsw i64 %34, 6
  %62 = getelementptr inbounds i8, i8* %3, i64 %61
  %63 = load i8, i8* %62, align 1
  store i8 %63, i8* %24, align 2
  %64 = getelementptr inbounds i8, i8* %4, i64 %61
  %65 = load i8, i8* %64, align 1
  store i8 %65, i8* %32, align 2
  %66 = mul nsw i64 %34, 7
  %67 = getelementptr inbounds i8, i8* %3, i64 %66
  %68 = load i8, i8* %67, align 1
  store i8 %68, i8* %25, align 1
  %69 = getelementptr inbounds i8, i8* %4, i64 %66
  %70 = load i8, i8* %69, align 1
  store i8 %70, i8* %33, align 1
  %71 = icmp eq i8 %17, 0
  br i1 %71, label %72, label %80

72:                                               ; preds = %9
  %73 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 17
  %74 = load i32, i32* %73, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 16
  %77 = load i32, i32* %76, align 16
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [2 x [2 x [2 x void (i8*, i64, i8*, i8*)*]]], [2 x [2 x [2 x void (i8*, i64, i8*, i8*)*]]]* @dc_pred, i64 0, i64 %75, i64 %78, i64 1
  br label %83

80:                                               ; preds = %9
  %81 = zext i8 %17 to i64
  %82 = getelementptr inbounds [4 x [2 x void (i8*, i64, i8*, i8*)*]], [4 x [2 x void (i8*, i64, i8*, i8*)*]]* @pred, i64 0, i64 %81, i64 1
  br label %83

83:                                               ; preds = %80, %72
  %84 = phi void (i8*, i64, i8*, i8*)** [ %79, %72 ], [ %82, %80 ]
  %85 = load void (i8*, i64, i8*, i8*)*, void (i8*, i64, i8*, i8*)** %84, align 8
  %86 = sext i32 %8 to i64
  call void %85(i8* %6, i64 %86, i8* %1, i8* nonnull %18) #3
  call void %85(i8* %7, i64 %86, i8* %2, i8* nonnull %26) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_init_intra_predictors() local_unnamed_addr #0 {
  %1 = tail call i32 @pthread_once(i32* nonnull @once.lock, void ()* nonnull @vp8_init_intra_predictors_internal) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @vp8_init_intra_predictors_internal() #0 {
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @vpx_v_predictor_16x16_sse2, void (i8*, i64, i8*, i8*)* @vpx_v_predictor_8x8_sse2>, <2 x void (i8*, i64, i8*, i8*)*>* bitcast (void (i8*, i64, i8*, i8*)** getelementptr inbounds ([4 x [2 x void (i8*, i64, i8*, i8*)*]], [4 x [2 x void (i8*, i64, i8*, i8*)*]]* @pred, i64 0, i64 1, i64 0) to <2 x void (i8*, i64, i8*, i8*)*>*), align 16
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @vpx_h_predictor_16x16_sse2, void (i8*, i64, i8*, i8*)* @vpx_h_predictor_8x8_sse2>, <2 x void (i8*, i64, i8*, i8*)*>* bitcast (void (i8*, i64, i8*, i8*)** getelementptr inbounds ([4 x [2 x void (i8*, i64, i8*, i8*)*]], [4 x [2 x void (i8*, i64, i8*, i8*)*]]* @pred, i64 0, i64 2, i64 0) to <2 x void (i8*, i64, i8*, i8*)*>*), align 16
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @vpx_tm_predictor_16x16_sse2, void (i8*, i64, i8*, i8*)* @vpx_tm_predictor_8x8_sse2>, <2 x void (i8*, i64, i8*, i8*)*>* bitcast (void (i8*, i64, i8*, i8*)** getelementptr inbounds ([4 x [2 x void (i8*, i64, i8*, i8*)*]], [4 x [2 x void (i8*, i64, i8*, i8*)*]]* @pred, i64 0, i64 3, i64 0) to <2 x void (i8*, i64, i8*, i8*)*>*), align 16
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @vpx_dc_128_predictor_16x16_sse2, void (i8*, i64, i8*, i8*)* @vpx_dc_128_predictor_8x8_sse2>, <2 x void (i8*, i64, i8*, i8*)*>* bitcast ([2 x [2 x [2 x void (i8*, i64, i8*, i8*)*]]]* @dc_pred to <2 x void (i8*, i64, i8*, i8*)*>*), align 16
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @vpx_dc_top_predictor_16x16_sse2, void (i8*, i64, i8*, i8*)* @vpx_dc_top_predictor_8x8_sse2>, <2 x void (i8*, i64, i8*, i8*)*>* bitcast (void (i8*, i64, i8*, i8*)** getelementptr inbounds ([2 x [2 x [2 x void (i8*, i64, i8*, i8*)*]]], [2 x [2 x [2 x void (i8*, i64, i8*, i8*)*]]]* @dc_pred, i64 0, i64 0, i64 1, i64 0) to <2 x void (i8*, i64, i8*, i8*)*>*), align 16
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @vpx_dc_left_predictor_16x16_sse2, void (i8*, i64, i8*, i8*)* @vpx_dc_left_predictor_8x8_sse2>, <2 x void (i8*, i64, i8*, i8*)*>* bitcast (void (i8*, i64, i8*, i8*)** getelementptr inbounds ([2 x [2 x [2 x void (i8*, i64, i8*, i8*)*]]], [2 x [2 x [2 x void (i8*, i64, i8*, i8*)*]]]* @dc_pred, i64 0, i64 1, i64 0, i64 0) to <2 x void (i8*, i64, i8*, i8*)*>*), align 16
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @vpx_dc_predictor_16x16_sse2, void (i8*, i64, i8*, i8*)* @vpx_dc_predictor_8x8_sse2>, <2 x void (i8*, i64, i8*, i8*)*>* bitcast (void (i8*, i64, i8*, i8*)** getelementptr inbounds ([2 x [2 x [2 x void (i8*, i64, i8*, i8*)*]]], [2 x [2 x [2 x void (i8*, i64, i8*, i8*)*]]]* @dc_pred, i64 0, i64 1, i64 1, i64 0) to <2 x void (i8*, i64, i8*, i8*)*>*), align 16
  tail call void @vp8_init_intra4x4_predictors_internal() #3
  ret void
}

declare i32 @pthread_once(i32*, void ()*) local_unnamed_addr #2

declare void @vpx_v_predictor_16x16_sse2(i8*, i64, i8*, i8*) #2

declare void @vpx_h_predictor_16x16_sse2(i8*, i64, i8*, i8*) #2

declare void @vpx_tm_predictor_16x16_sse2(i8*, i64, i8*, i8*) #2

declare void @vpx_dc_128_predictor_16x16_sse2(i8*, i64, i8*, i8*) #2

declare void @vpx_dc_top_predictor_16x16_sse2(i8*, i64, i8*, i8*) #2

declare void @vpx_dc_left_predictor_16x16_sse2(i8*, i64, i8*, i8*) #2

declare void @vpx_dc_predictor_16x16_sse2(i8*, i64, i8*, i8*) #2

declare void @vpx_v_predictor_8x8_sse2(i8*, i64, i8*, i8*) #2

declare void @vpx_h_predictor_8x8_sse2(i8*, i64, i8*, i8*) #2

declare void @vpx_tm_predictor_8x8_sse2(i8*, i64, i8*, i8*) #2

declare void @vpx_dc_128_predictor_8x8_sse2(i8*, i64, i8*, i8*) #2

declare void @vpx_dc_top_predictor_8x8_sse2(i8*, i64, i8*, i8*) #2

declare void @vpx_dc_left_predictor_8x8_sse2(i8*, i64, i8*, i8*) #2

declare void @vpx_dc_predictor_8x8_sse2(i8*, i64, i8*, i8*) #2

declare void @vp8_init_intra4x4_predictors_internal() local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
