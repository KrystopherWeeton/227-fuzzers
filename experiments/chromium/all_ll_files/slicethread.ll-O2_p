; ModuleID = '../../third_party/ffmpeg/libavutil/slicethread.c'
source_filename = "../../third_party/ffmpeg/libavutil/slicethread.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVSliceThread = type { %struct.WorkerContext*, i32, i32, i32, i32, i32, %union.pthread_mutex_t, %union.pthread_cond_t, i32, i32, i8*, void (i8*, i32, i32, i32, i32)*, void (i8*)* }
%struct.WorkerContext = type { %struct.AVSliceThread*, %union.pthread_mutex_t, %union.pthread_cond_t, i64, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%union.pthread_mutexattr_t = type { i32 }
%union.pthread_condattr_t = type { i32 }
%union.pthread_attr_t = type { i64, [48 x i8] }

@.str = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"nb_threads >= 0\00", align 1
@.str.2 = private unnamed_addr constant [49 x i8] c"../../third_party/ffmpeg/libavutil/slicethread.c\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"nb_jobs > 0\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @avpriv_slicethread_create(%struct.AVSliceThread**, i8*, void (i8*, i32, i32, i32, i32)*, void (i8*)*, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, -1
  br i1 %6, label %8, label %7

7:                                                ; preds = %5
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i64 0, i64 0), i32 102) #5
  tail call void @abort() #6
  unreachable

8:                                                ; preds = %5
  %9 = icmp eq i32 %4, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %8
  %11 = tail call i32 @av_cpu_count() #5
  %12 = icmp sgt i32 %11, 1
  %13 = add nsw i32 %11, 1
  %14 = select i1 %12, i32 %13, i32 1
  br label %15

15:                                               ; preds = %10, %8
  %16 = phi i32 [ %4, %8 ], [ %14, %10 ]
  %17 = icmp eq void (i8*)* %3, null
  %18 = zext i1 %17 to i32
  %19 = sub i32 %16, %18
  %20 = tail call noalias i8* @av_mallocz(i64 152) #5
  %21 = bitcast %struct.AVSliceThread** %0 to i8**
  store i8* %20, i8** %21, align 8
  %22 = icmp eq i8* %20, null
  br i1 %22, label %89, label %23

23:                                               ; preds = %15
  %24 = icmp eq i32 %19, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = sext i32 %19 to i64
  %27 = tail call noalias i8* @av_calloc(i64 %26, i64 112) #5
  %28 = bitcast i8* %20 to i8**
  store i8* %27, i8** %28, align 8
  %29 = icmp eq i8* %27, null
  br i1 %29, label %30, label %32

30:                                               ; preds = %25
  %31 = bitcast %struct.AVSliceThread** %0 to i8*
  tail call void @av_freep(i8* %31) #5
  br label %89

32:                                               ; preds = %25, %23
  %33 = getelementptr inbounds i8, i8* %20, i64 128
  %34 = bitcast i8* %33 to i8**
  store i8* %1, i8** %34, align 8
  %35 = getelementptr inbounds i8, i8* %20, i64 136
  %36 = bitcast i8* %35 to void (i8*, i32, i32, i32, i32)**
  store void (i8*, i32, i32, i32, i32)* %2, void (i8*, i32, i32, i32, i32)** %36, align 8
  %37 = getelementptr inbounds i8, i8* %20, i64 144
  %38 = bitcast i8* %37 to void (i8*)**
  store void (i8*)* %3, void (i8*)** %38, align 8
  %39 = getelementptr inbounds i8, i8* %20, i64 8
  %40 = bitcast i8* %39 to i32*
  store i32 %16, i32* %40, align 8
  %41 = getelementptr inbounds i8, i8* %20, i64 12
  %42 = getelementptr inbounds i8, i8* %20, i64 124
  %43 = bitcast i8* %42 to i32*
  store i32 0, i32* %43, align 4
  %44 = getelementptr inbounds i8, i8* %20, i64 32
  %45 = bitcast i8* %44 to %union.pthread_mutex_t*
  call void @llvm.memset.p0i8.i64(i8* align 4 %41, i8 0, i64 16, i1 false)
  %46 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* %45, %union.pthread_mutexattr_t* null) #5
  %47 = getelementptr inbounds i8, i8* %20, i64 72
  %48 = bitcast i8* %47 to %union.pthread_cond_t*
  %49 = tail call i32 @pthread_cond_init(%union.pthread_cond_t* %48, %union.pthread_condattr_t* null) #5
  %50 = getelementptr inbounds i8, i8* %20, i64 120
  %51 = bitcast i8* %50 to i32*
  store i32 0, i32* %51, align 8
  %52 = icmp sgt i32 %19, 0
  br i1 %52, label %53, label %89

53:                                               ; preds = %32
  %54 = bitcast i8* %20 to %struct.WorkerContext**
  %55 = zext i32 %19 to i64
  br label %56

56:                                               ; preds = %85, %53
  %57 = phi i64 [ 0, %53 ], [ %87, %85 ]
  %58 = load %struct.WorkerContext*, %struct.WorkerContext** %54, align 8
  %59 = getelementptr inbounds %struct.WorkerContext, %struct.WorkerContext* %58, i64 %57
  %60 = bitcast %struct.WorkerContext* %59 to i8**
  store i8* %20, i8** %60, align 8
  %61 = getelementptr inbounds %struct.WorkerContext, %struct.WorkerContext* %58, i64 %57, i32 1
  %62 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* %61, %union.pthread_mutexattr_t* null) #5
  %63 = getelementptr inbounds %struct.WorkerContext, %struct.WorkerContext* %58, i64 %57, i32 2
  %64 = tail call i32 @pthread_cond_init(%union.pthread_cond_t* %63, %union.pthread_condattr_t* null) #5
  %65 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %61) #5
  %66 = getelementptr inbounds %struct.WorkerContext, %struct.WorkerContext* %58, i64 %57, i32 4
  store i32 0, i32* %66, align 8
  %67 = getelementptr inbounds %struct.WorkerContext, %struct.WorkerContext* %58, i64 %57, i32 3
  %68 = bitcast %struct.WorkerContext* %59 to i8*
  %69 = tail call i32 @pthread_create(i64* %67, %union.pthread_attr_t* null, i8* (i8*)* nonnull @thread_worker, i8* %68) #5
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %78

71:                                               ; preds = %56
  %72 = load i32, i32* %66, align 8
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %85

74:                                               ; preds = %71, %74
  %75 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* %63, %union.pthread_mutex_t* %61) #5
  %76 = load i32, i32* %66, align 8
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %74, label %85

78:                                               ; preds = %56
  %79 = trunc i64 %57 to i32
  %80 = add nuw nsw i32 %79, %18
  store i32 %80, i32* %40, align 8
  %81 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %61) #5
  %82 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %63) #5
  %83 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %61) #5
  tail call void @avpriv_slicethread_free(%struct.AVSliceThread** %0)
  %84 = sub nsw i32 0, %69
  br label %89

85:                                               ; preds = %74, %71
  %86 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %61) #5
  %87 = add nuw nsw i64 %57, 1
  %88 = icmp eq i64 %87, %55
  br i1 %88, label %89, label %56

89:                                               ; preds = %85, %32, %78, %15, %30
  %90 = phi i32 [ %84, %78 ], [ -12, %30 ], [ -12, %15 ], [ %16, %32 ], [ %16, %85 ]
  ret i32 %90
}

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #2

declare i32 @av_cpu_count() local_unnamed_addr #1

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #1

declare noalias i8* @av_calloc(i64, i64) local_unnamed_addr #1

declare void @av_freep(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_cond_init(%union.pthread_cond_t*, %union.pthread_condattr_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_create(i64*, %union.pthread_attr_t*, i8* (i8*)*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @thread_worker(i8*) #0 {
  %2 = bitcast i8* %0 to %struct.AVSliceThread**
  %3 = load %struct.AVSliceThread*, %struct.AVSliceThread** %2, align 8
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %union.pthread_mutex_t*
  %6 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %5) #5
  %7 = getelementptr inbounds i8, i8* %0, i64 48
  %8 = bitcast i8* %7 to %union.pthread_cond_t*
  %9 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* %8) #5
  %10 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %3, i64 0, i32 9
  %11 = getelementptr inbounds i8, i8* %0, i64 104
  %12 = bitcast i8* %11 to i32*
  %13 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %3, i64 0, i32 3
  %14 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %3, i64 0, i32 2
  %15 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %3, i64 0, i32 4
  %16 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %3, i64 0, i32 11
  %17 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %3, i64 0, i32 10
  %18 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %3, i64 0, i32 5
  %19 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %3, i64 0, i32 6
  %20 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %3, i64 0, i32 8
  %21 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %3, i64 0, i32 7
  br label %22

22:                                               ; preds = %46, %1
  store i32 1, i32* %12, align 8
  br label %23

23:                                               ; preds = %22, %23
  %24 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* %8, %union.pthread_mutex_t* %5) #5
  %25 = load i32, i32* %12, align 8
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %23

27:                                               ; preds = %23
  %28 = load i32, i32* %10, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %27
  %31 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %5) #5
  ret i8* null

32:                                               ; preds = %27
  %33 = load i32, i32* %13, align 8
  %34 = load i32, i32* %14, align 4
  %35 = atomicrmw add i32* %15, i32 1 acq_rel
  br label %36

36:                                               ; preds = %36, %32
  %37 = phi i32 [ %35, %32 ], [ %40, %36 ]
  %38 = load void (i8*, i32, i32, i32, i32)*, void (i8*, i32, i32, i32, i32)** %16, align 8
  %39 = load i8*, i8** %17, align 8
  tail call void %38(i8* %39, i32 %37, i32 %35, i32 %33, i32 %34) #5
  %40 = atomicrmw add i32* %18, i32 1 acq_rel
  %41 = icmp ult i32 %40, %33
  br i1 %41, label %36, label %42

42:                                               ; preds = %36
  %43 = add i32 %33, -1
  %44 = add i32 %43, %34
  %45 = icmp eq i32 %40, %44
  br i1 %45, label %47, label %46

46:                                               ; preds = %42, %47
  br label %22

47:                                               ; preds = %42
  %48 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %19) #5
  store i32 1, i32* %20, align 8
  %49 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* %21) #5
  %50 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %19) #5
  br label %46
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_cond_destroy(%union.pthread_cond_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @avpriv_slicethread_free(%struct.AVSliceThread**) local_unnamed_addr #0 {
  %2 = icmp eq %struct.AVSliceThread** %0, null
  br i1 %2, label %53, label %3

3:                                                ; preds = %1
  %4 = load %struct.AVSliceThread*, %struct.AVSliceThread** %0, align 8
  %5 = icmp eq %struct.AVSliceThread* %4, null
  br i1 %5, label %53, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %4, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %4, i64 0, i32 12
  %10 = load void (i8*)*, void (i8*)** %9, align 8
  %11 = icmp eq void (i8*)* %10, null
  %12 = zext i1 %11 to i32
  %13 = sub i32 %8, %12
  %14 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %4, i64 0, i32 9
  store i32 1, i32* %14, align 4
  %15 = icmp sgt i32 %13, 0
  br i1 %15, label %16, label %46

16:                                               ; preds = %6
  %17 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %4, i64 0, i32 0
  %18 = zext i32 %13 to i64
  br label %23

19:                                               ; preds = %23
  br i1 %15, label %20, label %46

20:                                               ; preds = %19
  %21 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %4, i64 0, i32 0
  %22 = zext i32 %13 to i64
  br label %34

23:                                               ; preds = %23, %16
  %24 = phi i64 [ 0, %16 ], [ %32, %23 ]
  %25 = load %struct.WorkerContext*, %struct.WorkerContext** %17, align 8
  %26 = getelementptr inbounds %struct.WorkerContext, %struct.WorkerContext* %25, i64 %24, i32 1
  %27 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %26) #5
  %28 = getelementptr inbounds %struct.WorkerContext, %struct.WorkerContext* %25, i64 %24, i32 4
  store i32 0, i32* %28, align 8
  %29 = getelementptr inbounds %struct.WorkerContext, %struct.WorkerContext* %25, i64 %24, i32 2
  %30 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* %29) #5
  %31 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %26) #5
  %32 = add nuw nsw i64 %24, 1
  %33 = icmp eq i64 %32, %18
  br i1 %33, label %19, label %23

34:                                               ; preds = %34, %20
  %35 = phi i64 [ 0, %20 ], [ %44, %34 ]
  %36 = load %struct.WorkerContext*, %struct.WorkerContext** %21, align 8
  %37 = getelementptr inbounds %struct.WorkerContext, %struct.WorkerContext* %36, i64 %35, i32 3
  %38 = load i64, i64* %37, align 8
  %39 = tail call i32 @pthread_join(i64 %38, i8** null) #5
  %40 = getelementptr inbounds %struct.WorkerContext, %struct.WorkerContext* %36, i64 %35, i32 2
  %41 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %40) #5
  %42 = getelementptr inbounds %struct.WorkerContext, %struct.WorkerContext* %36, i64 %35, i32 1
  %43 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %42) #5
  %44 = add nuw nsw i64 %35, 1
  %45 = icmp eq i64 %44, %22
  br i1 %45, label %46, label %34

46:                                               ; preds = %34, %6, %19
  %47 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %4, i64 0, i32 7
  %48 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %47) #5
  %49 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %4, i64 0, i32 6
  %50 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %49) #5
  %51 = bitcast %struct.AVSliceThread* %4 to i8*
  tail call void @av_freep(i8* nonnull %51) #5
  %52 = bitcast %struct.AVSliceThread** %0 to i8*
  tail call void @av_freep(i8* nonnull %52) #5
  br label %53

53:                                               ; preds = %1, %3, %46
  ret void
}

declare i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @avpriv_slicethread_execute(%struct.AVSliceThread*, i32, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %1, 0
  br i1 %4, label %6, label %5

5:                                                ; preds = %3
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i64 0, i64 0), i32 168) #5
  tail call void @abort() #6
  unreachable

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %0, i64 0, i32 3
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp slt i32 %9, %1
  %11 = select i1 %10, i32 %9, i32 %1
  %12 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %0, i64 0, i32 2
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %0, i64 0, i32 4
  store atomic i32 0, i32* %13 monotonic, align 4
  %14 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %0, i64 0, i32 5
  store atomic i32 %11, i32* %14 monotonic, align 8
  %15 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %0, i64 0, i32 12
  %16 = load void (i8*)*, void (i8*)** %15, align 8
  %17 = icmp ne void (i8*)* %16, null
  %18 = icmp ne i32 %2, 0
  %19 = and i1 %18, %17
  %20 = xor i1 %19, true
  %21 = zext i1 %20 to i32
  %22 = sub i32 %11, %21
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %40

24:                                               ; preds = %6
  %25 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %0, i64 0, i32 0
  %26 = zext i32 %22 to i64
  br label %27

27:                                               ; preds = %27, %24
  %28 = phi i64 [ 0, %24 ], [ %36, %27 ]
  %29 = load %struct.WorkerContext*, %struct.WorkerContext** %25, align 8
  %30 = getelementptr inbounds %struct.WorkerContext, %struct.WorkerContext* %29, i64 %28, i32 1
  %31 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %30) #5
  %32 = getelementptr inbounds %struct.WorkerContext, %struct.WorkerContext* %29, i64 %28, i32 4
  store i32 0, i32* %32, align 8
  %33 = getelementptr inbounds %struct.WorkerContext, %struct.WorkerContext* %29, i64 %28, i32 2
  %34 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* %33) #5
  %35 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %30) #5
  %36 = add nuw nsw i64 %28, 1
  %37 = icmp eq i64 %36, %26
  br i1 %37, label %38, label %27

38:                                               ; preds = %27
  %39 = load void (i8*)*, void (i8*)** %15, align 8
  br label %40

40:                                               ; preds = %38, %6
  %41 = phi void (i8*)* [ %39, %38 ], [ %16, %6 ]
  %42 = icmp ne void (i8*)* %41, null
  %43 = and i1 %18, %42
  br i1 %43, label %44, label %47

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %0, i64 0, i32 10
  %46 = load i8*, i8** %45, align 8
  tail call void %41(i8* %46) #5
  br label %63

47:                                               ; preds = %40
  %48 = load i32, i32* %7, align 8
  %49 = load i32, i32* %12, align 4
  %50 = atomicrmw add i32* %13, i32 1 acq_rel
  %51 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %0, i64 0, i32 11
  %52 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %0, i64 0, i32 10
  br label %53

53:                                               ; preds = %53, %47
  %54 = phi i32 [ %50, %47 ], [ %57, %53 ]
  %55 = load void (i8*, i32, i32, i32, i32)*, void (i8*, i32, i32, i32, i32)** %51, align 8
  %56 = load i8*, i8** %52, align 8
  tail call void %55(i8* %56, i32 %54, i32 %50, i32 %48, i32 %49) #5
  %57 = atomicrmw add i32* %14, i32 1 acq_rel
  %58 = icmp ult i32 %57, %48
  br i1 %58, label %53, label %59

59:                                               ; preds = %53
  %60 = add i32 %48, -1
  %61 = add i32 %60, %49
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %77, label %63

63:                                               ; preds = %44, %59
  %64 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %0, i64 0, i32 6
  %65 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %64) #5
  %66 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %0, i64 0, i32 8
  %67 = load i32, i32* %66, align 8
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %75

69:                                               ; preds = %63
  %70 = getelementptr inbounds %struct.AVSliceThread, %struct.AVSliceThread* %0, i64 0, i32 7
  br label %71

71:                                               ; preds = %69, %71
  %72 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* %70, %union.pthread_mutex_t* %64) #5
  %73 = load i32, i32* %66, align 8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %71, label %75

75:                                               ; preds = %71, %63
  store i32 0, i32* %66, align 8
  %76 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %64) #5
  br label %77

77:                                               ; preds = %75, %59
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_cond_signal(%union.pthread_cond_t*) local_unnamed_addr #3

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
