; ModuleID = '../../third_party/blink/renderer/platform/mediastream/media_stream_track_platform.cc'
source_filename = "../../third_party/blink/renderer/platform/mediastream/media_stream_track_platform.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::MediaStreamTrackPlatform" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.blink::WebMediaStreamTrack" = type { %"class.blink::WebPrivatePtr" }
%"class.blink::WebPrivatePtr" = type { i8* }
%"class.blink::MediaStreamComponent" = type { %"class.blink::ThreadState::PrefinalizerRegistration", %"class.blink::MediaStreamComponent::AudioSourceProviderImpl", %"class.blink::Member", %"class.WTF::String", i32, i8, i8, i32, %"class.blink::MediaConstraints", %"class.std::__1::unique_ptr" }
%"class.blink::ThreadState::PrefinalizerRegistration" = type { i8 }
%"class.blink::MediaStreamComponent::AudioSourceProviderImpl" = type { %"class.blink::AudioSourceProvider", %"class.blink::WebAudioSourceProvider"*, %"class.WTF::Mutex", %"class.blink::WebVector" }
%"class.blink::AudioSourceProvider" = type { i32 (...)** }
%"class.blink::WebAudioSourceProvider" = type opaque
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.blink::WebVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float**, float**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float** }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::MediaStreamSource"* }
%"class.blink::MediaStreamSource" = type opaque
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::MediaConstraints" = type { %"class.blink::WebPrivatePtr.2" }
%"class.blink::WebPrivatePtr.2" = type { i8* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.blink::MediaStreamTrackPlatform"* }
%"struct.blink::MediaStreamTrackPlatform::Settings" = type { double, i32, i32, double, %"class.WTF::String", %"class.WTF::String", i32, %"class.WTF::String", %"class.absl::optional", %"class.absl::optional", %"class.absl::optional", %"class.WTF::String", i32, i32, i32, double, %"class.WTF::String", %"class.absl::optional.6", %"class.absl::optional", %"class.absl::optional.11", %"class.absl::optional.16" }
%"class.absl::optional.6" = type { %"class.absl::optional_internal::optional_data.7" }
%"class.absl::optional_internal::optional_data.7" = type { %"class.absl::optional_internal::optional_data_base.8" }
%"class.absl::optional_internal::optional_data_base.8" = type { %"class.absl::optional_internal::optional_data_dtor_base.9" }
%"class.absl::optional_internal::optional_data_dtor_base.9" = type { i8, %union.anon.10 }
%union.anon.10 = type { i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i8 }
%"class.absl::optional.11" = type { %"class.absl::optional_internal::optional_data.12" }
%"class.absl::optional_internal::optional_data.12" = type { %"class.absl::optional_internal::optional_data_base.13" }
%"class.absl::optional_internal::optional_data_base.13" = type { %"class.absl::optional_internal::optional_data_dtor_base.14" }
%"class.absl::optional_internal::optional_data_dtor_base.14" = type { i8, %union.anon.15 }
%union.anon.15 = type { i32 }
%"class.absl::optional.16" = type { %"class.absl::optional_internal::optional_data.17" }
%"class.absl::optional_internal::optional_data.17" = type { %"class.absl::optional_internal::optional_data_base.18" }
%"class.absl::optional_internal::optional_data_base.18" = type { %"class.absl::optional_internal::optional_data_dtor_base.19" }
%"class.absl::optional_internal::optional_data_dtor_base.19" = type { i8, %union.anon.20 }
%union.anon.20 = type { %"struct.blink::MediaStreamTrackPlatform::CaptureHandle" }
%"struct.blink::MediaStreamTrackPlatform::CaptureHandle" = type { %"class.WTF::String", %"class.WTF::String" }

$_ZN5blink24MediaStreamTrackPlatform11GetSettingsERNS0_8SettingsE = comdat any

@_ZTVN5blink24MediaStreamTrackPlatformE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::MediaStreamTrackPlatform"*)* @_ZN5blink24MediaStreamTrackPlatformD2Ev to i8*), i8* bitcast (void (%"class.blink::MediaStreamTrackPlatform"*)* @_ZN5blink24MediaStreamTrackPlatformD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.blink::MediaStreamTrackPlatform"*, %"struct.blink::MediaStreamTrackPlatform::Settings"*)* @_ZN5blink24MediaStreamTrackPlatform11GetSettingsERNS0_8SettingsE to i8*)] }, align 8

@_ZN5blink24MediaStreamTrackPlatformD1Ev = hidden unnamed_addr alias void (%"class.blink::MediaStreamTrackPlatform"*), void (%"class.blink::MediaStreamTrackPlatform"*)* @_ZN5blink24MediaStreamTrackPlatformD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::MediaStreamTrackPlatform"* @_ZN5blink24MediaStreamTrackPlatform8GetTrackERKNS_19WebMediaStreamTrackE(%"class.blink::WebMediaStreamTrack"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::WebMediaStreamTrack", %"class.blink::WebMediaStreamTrack"* %0, i64 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = tail call %"class.blink::MediaStreamComponent"* @_ZNK5blink19WebMediaStreamTrackcvPNS_20MediaStreamComponentEEv(%"class.blink::WebMediaStreamTrack"* %0) #6
  %7 = getelementptr inbounds %"class.blink::MediaStreamComponent", %"class.blink::MediaStreamComponent"* %6, i64 0, i32 9, i32 0, i32 0, i32 0
  %8 = load %"class.blink::MediaStreamTrackPlatform"*, %"class.blink::MediaStreamTrackPlatform"** %7, align 8
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi %"class.blink::MediaStreamTrackPlatform"* [ %8, %5 ], [ null, %1 ]
  ret %"class.blink::MediaStreamTrackPlatform"* %10
}

declare %"class.blink::MediaStreamComponent"* @_ZNK5blink19WebMediaStreamTrackcvPNS_20MediaStreamComponentEEv(%"class.blink::WebMediaStreamTrack"*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink24MediaStreamTrackPlatformC2Eb(%"class.blink::MediaStreamTrackPlatform"* nocapture, i1 zeroext) unnamed_addr #2 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.blink::MediaStreamTrackPlatform", %"class.blink::MediaStreamTrackPlatform"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN5blink24MediaStreamTrackPlatformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.blink::MediaStreamTrackPlatform", %"class.blink::MediaStreamTrackPlatform"* %0, i64 0, i32 1
  store i8 %3, i8* %5, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink24MediaStreamTrackPlatformD2Ev(%"class.blink::MediaStreamTrackPlatform"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN5blink24MediaStreamTrackPlatformD0Ev(%"class.blink::MediaStreamTrackPlatform"* nocapture readnone) unnamed_addr #4 align 2 {
  tail call void @llvm.trap() #7
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink24MediaStreamTrackPlatform11GetSettingsERNS0_8SettingsE(%"class.blink::MediaStreamTrackPlatform"*, %"struct.blink::MediaStreamTrackPlatform::Settings"* dereferenceable(152)) unnamed_addr #0 comdat align 2 {
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
