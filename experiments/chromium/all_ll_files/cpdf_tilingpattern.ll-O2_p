; ModuleID = '../../third_party/pdfium/core/fpdfapi/page/cpdf_tilingpattern.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/page/cpdf_tilingpattern.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CPDF_AllStates = type <{ %class.CPDF_GraphicStates, %class.CFX_Matrix, %class.CFX_Matrix, %class.CFX_Matrix, %class.CFX_PTemplate, %class.CFX_PTemplate, float, float, float, [4 x i8] }>
%class.CPDF_GraphicStates = type { i32 (...)**, %class.CPDF_ClipPath, %class.CFX_GraphState, %class.CPDF_ColorState, %class.CPDF_TextState, %class.CPDF_GeneralState }
%class.CPDF_ClipPath = type { %"class.fxcrt::SharedCopyOnWrite" }
%"class.fxcrt::SharedCopyOnWrite" = type { %"class.fxcrt::RetainPtr.117" }
%"class.fxcrt::RetainPtr.117" = type { %"class.std::__1::unique_ptr.118" }
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"class.CPDF_ClipPath::PathData"* }
%"class.CPDF_ClipPath::PathData" = type { %"class.fxcrt::Retainable", %"class.std::__1::vector.121", %"class.std::__1::vector.128" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.std::__1::vector.121" = type { %"class.std::__1::__vector_base.122" }
%"class.std::__1::__vector_base.122" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.123" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.128" = type { %"class.std::__1::__vector_base.129" }
%"class.std::__1::__vector_base.129" = type { %"class.std::__1::unique_ptr.130"*, %"class.std::__1::unique_ptr.130"*, %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::unique_ptr.130" = type opaque
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"class.std::__1::unique_ptr.130"* }
%class.CFX_GraphState = type { %"class.fxcrt::SharedCopyOnWrite.138" }
%"class.fxcrt::SharedCopyOnWrite.138" = type { %"class.fxcrt::RetainPtr.139" }
%"class.fxcrt::RetainPtr.139" = type { %"class.std::__1::unique_ptr.140" }
%"class.std::__1::unique_ptr.140" = type { %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %class.CFX_RetainableGraphStateData* }
%class.CFX_RetainableGraphStateData = type { %"class.fxcrt::Retainable", %class.CFX_GraphStateData }
%class.CFX_GraphStateData = type { i8, i8, float, float, float, %"class.std::__1::vector.143" }
%"class.std::__1::vector.143" = type { %"class.std::__1::__vector_base.144" }
%"class.std::__1::__vector_base.144" = type { float*, float*, %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { float* }
%class.CPDF_ColorState = type { %"class.fxcrt::SharedCopyOnWrite.152" }
%"class.fxcrt::SharedCopyOnWrite.152" = type { %"class.fxcrt::RetainPtr.153" }
%"class.fxcrt::RetainPtr.153" = type { %"class.std::__1::unique_ptr.154" }
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.CPDF_ColorState::ColorData"* }
%"class.CPDF_ColorState::ColorData" = type { %"class.fxcrt::Retainable", i32, i32, %class.CPDF_Color, %class.CPDF_Color }
%class.CPDF_Color = type { %"class.std::__1::vector.143", %"class.std::__1::unique_ptr.157", %"class.fxcrt::RetainPtr.163" }
%"class.std::__1::unique_ptr.157" = type { %"class.std::__1::__compressed_pair.158" }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %class.PatternValue* }
%class.PatternValue = type opaque
%"class.fxcrt::RetainPtr.163" = type { %"class.std::__1::unique_ptr.164" }
%"class.std::__1::unique_ptr.164" = type { %"class.std::__1::__compressed_pair.165" }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %class.CPDF_ColorSpace* }
%class.CPDF_ColorSpace = type opaque
%class.CPDF_TextState = type { %"class.fxcrt::SharedCopyOnWrite.171" }
%"class.fxcrt::SharedCopyOnWrite.171" = type { %"class.fxcrt::RetainPtr.172" }
%"class.fxcrt::RetainPtr.172" = type { %"class.std::__1::unique_ptr.173" }
%"class.std::__1::unique_ptr.173" = type { %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.CPDF_TextState::TextData"* }
%"class.CPDF_TextState::TextData" = type { %"class.fxcrt::Retainable", %"class.fxcrt::RetainPtr.176", %"class.fxcrt::UnownedPtr.253", float, float, float, i32, [4 x float], [4 x float] }
%"class.fxcrt::RetainPtr.176" = type { %"class.std::__1::unique_ptr.177" }
%"class.std::__1::unique_ptr.177" = type { %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.179" = type { %class.CPDF_Font* }
%class.CPDF_Font = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.fxcrt::UnownedPtr", %class.CFX_Font, %"class.std::__1::vector.219", %"class.fxcrt::RetainPtr.227", %"class.fxcrt::RetainPtr.31", %"class.fxcrt::ByteString", %"class.std::__1::unique_ptr.245", i8, i32, i32, i32, i32, i32, %struct.FX_RECT }
%"class.fxcrt::Observable" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.fxcrt::UnownedPtr" = type { %class.CPDF_Document* }
%class.CPDF_Document = type opaque
%class.CFX_Font = type <{ %"class.fxcrt::RetainPtr.106", %"class.std::__1::unique_ptr.180", %"class.fxcrt::RetainPtr.186", %"class.fxcrt::RetainPtr.202", %"class.std::__1::unique_ptr.208", %"class.std::__1::unique_ptr.102", %"class.std::__1::vector.214", %"class.pdfium::span", i8, i8, [6 x i8] }>
%"class.fxcrt::RetainPtr.106" = type { %"class.std::__1::unique_ptr.107" }
%"class.std::__1::unique_ptr.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %class.IFX_SeekableReadStream* }
%class.IFX_SeekableReadStream = type { %class.IFX_StreamWithSize, %"class.fxcrt::Retainable" }
%class.IFX_StreamWithSize = type { i32 (...)** }
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %struct.FT_StreamRec_* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%"class.fxcrt::RetainPtr.186" = type { %"class.std::__1::unique_ptr.187" }
%"class.std::__1::unique_ptr.187" = type { %"class.std::__1::__compressed_pair.188" }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %class.CFX_Face* }
%class.CFX_Face = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.std::__1::unique_ptr.190", %"class.fxcrt::RetainPtr.194" }
%"class.std::__1::unique_ptr.190" = type { %"class.std::__1::__compressed_pair.191" }
%"class.std::__1::__compressed_pair.191" = type { %"struct.std::__1::__compressed_pair_elem.192" }
%"struct.std::__1::__compressed_pair_elem.192" = type { %struct.FT_FaceRec_* }
%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_LibraryRec_ = type opaque
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type opaque
%struct.FT_Slot_InternalRec_ = type opaque
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type opaque
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type opaque
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Face_InternalRec_ = type opaque
%"class.fxcrt::RetainPtr.194" = type { %"class.std::__1::unique_ptr.195" }
%"class.std::__1::unique_ptr.195" = type { %"class.std::__1::__compressed_pair.196" }
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"class.fxcrt::Retainable"* }
%"class.fxcrt::RetainPtr.202" = type { %"class.std::__1::unique_ptr.203" }
%"class.std::__1::unique_ptr.203" = type { %"class.std::__1::__compressed_pair.204" }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.205" }
%"struct.std::__1::__compressed_pair_elem.205" = type { %class.CFX_GlyphCache* }
%class.CFX_GlyphCache = type opaque
%"class.std::__1::unique_ptr.208" = type { %"class.std::__1::__compressed_pair.209" }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %class.CFX_SubstFont* }
%class.CFX_SubstFont = type opaque
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { i8* }
%"class.std::__1::vector.214" = type { %"class.std::__1::__vector_base.215" }
%"class.std::__1::__vector_base.215" = type { i8*, i8*, %"class.std::__1::__compressed_pair.216" }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.218", i64 }
%"class.fxcrt::UnownedPtr.218" = type { i8* }
%"class.std::__1::vector.219" = type { %"class.std::__1::__vector_base.220" }
%"class.std::__1::__vector_base.220" = type { %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"*, %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::unique_ptr.221" = type opaque
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"class.std::__1::unique_ptr.221"* }
%"class.fxcrt::RetainPtr.227" = type { %"class.std::__1::unique_ptr.228" }
%"class.std::__1::unique_ptr.228" = type { %"class.std::__1::__compressed_pair.229" }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %class.CPDF_StreamAcc* }
%class.CPDF_StreamAcc = type { %"class.fxcrt::Retainable", %"class.fxcrt::MaybeOwned", i32, %"class.fxcrt::ByteString", %"class.fxcrt::RetainPtr.231", %"class.fxcrt::RetainPtr.237" }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.102", %"class.fxcrt::UnownedPtr.218" }
%"class.fxcrt::RetainPtr.231" = type { %"class.std::__1::unique_ptr.232" }
%"class.std::__1::unique_ptr.232" = type { %"class.std::__1::__compressed_pair.233" }
%"class.std::__1::__compressed_pair.233" = type { %"struct.std::__1::__compressed_pair_elem.234" }
%"struct.std::__1::__compressed_pair_elem.234" = type { %class.CPDF_Dictionary* }
%class.CPDF_Dictionary = type { %class.CPDF_Object, i32, %"class.fxcrt::WeakPtr", %"class.std::__1::map" }
%class.CPDF_Object = type { %"class.fxcrt::Retainable", i32, i32 }
%"class.fxcrt::WeakPtr" = type { %"class.fxcrt::RetainPtr.7" }
%"class.fxcrt::RetainPtr.7" = type { %"class.std::__1::unique_ptr.8" }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle"* }
%"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle" = type { i64, %"class.std::__1::unique_ptr.289" }
%"class.std::__1::unique_ptr.289" = type { %"class.std::__1::__compressed_pair.290" }
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"class.fxcrt::StringPoolTemplate"* }
%"class.fxcrt::StringPoolTemplate" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.292", %"class.std::__1::__compressed_pair.300", %"class.std::__1::__compressed_pair.305", %"class.std::__1::__compressed_pair.307", [4 x i8] }>
%"class.std::__1::unique_ptr.292" = type { %"class.std::__1::__compressed_pair.293" }
%"class.std::__1::__compressed_pair.293" = type { %"struct.std::__1::__compressed_pair_elem.294", %"struct.std::__1::__compressed_pair_elem.295" }
%"struct.std::__1::__compressed_pair_elem.294" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.295" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.296" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.300" = type { %"struct.std::__1::__compressed_pair_elem.301" }
%"struct.std::__1::__compressed_pair_elem.301" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.305" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.307" = type { %"struct.std::__1::__compressed_pair_elem.308" }
%"struct.std::__1::__compressed_pair_elem.308" = type { float }
%"class.std::__1::map" = type { %"class.std::__1::__tree.13" }
%"class.std::__1::__tree.13" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.fxcrt::RetainPtr.237" = type { %"class.std::__1::unique_ptr.238" }
%"class.std::__1::unique_ptr.238" = type { %"class.std::__1::__compressed_pair.239" }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.240" }
%"struct.std::__1::__compressed_pair_elem.240" = type { %class.CPDF_Stream* }
%class.CPDF_Stream = type { %class.CPDF_Object, i8, i32, %"class.fxcrt::RetainPtr.31", %"class.std::__1::unique_ptr.102", %"class.fxcrt::RetainPtr.106" }
%"class.fxcrt::RetainPtr.31" = type { %"class.std::__1::unique_ptr.32" }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %class.CPDF_Dictionary* }
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.22" }
%"class.fxcrt::RetainPtr.22" = type { %"class.std::__1::unique_ptr.23" }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.std::__1::unique_ptr.245" = type { %"class.std::__1::__compressed_pair.246" }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.247" }
%"struct.std::__1::__compressed_pair_elem.247" = type { %class.CPDF_ToUnicodeMap* }
%class.CPDF_ToUnicodeMap = type opaque
%struct.FX_RECT = type { i32, i32, i32, i32 }
%"class.fxcrt::UnownedPtr.253" = type { %class.CPDF_Document* }
%class.CPDF_GeneralState = type { %"class.fxcrt::SharedCopyOnWrite.256" }
%"class.fxcrt::SharedCopyOnWrite.256" = type { %"class.fxcrt::RetainPtr.257" }
%"class.fxcrt::RetainPtr.257" = type { %"class.std::__1::unique_ptr.258" }
%"class.std::__1::unique_ptr.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"class.CPDF_GeneralState::StateData"* }
%"class.CPDF_GeneralState::StateData" = type { %"class.fxcrt::Retainable", %"class.fxcrt::ByteString", i32, %"class.fxcrt::RetainPtr", %class.CFX_Matrix, float, float, %"class.fxcrt::RetainPtr.261", %"class.fxcrt::RetainPtr.267", %class.CFX_Matrix, i32, i8, i8, i8, i8, i8, i32, %"class.fxcrt::RetainPtr.261", %"class.fxcrt::RetainPtr.261", %"class.fxcrt::RetainPtr.261", float, float }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %class.CPDF_Object* }
%"class.fxcrt::RetainPtr.267" = type { %"class.std::__1::unique_ptr.268" }
%"class.std::__1::unique_ptr.268" = type { %"class.std::__1::__compressed_pair.269" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %class.CPDF_TransferFunc* }
%class.CPDF_TransferFunc = type opaque
%"class.fxcrt::RetainPtr.261" = type { %"class.std::__1::unique_ptr.262" }
%"class.std::__1::unique_ptr.262" = type { %"class.std::__1::__compressed_pair.263" }
%"class.std::__1::__compressed_pair.263" = type { %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.264" = type { %class.CPDF_Object* }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%class.CFX_PTemplate = type { float, float }
%class.CPDF_TilingPattern = type <{ %class.CPDF_Pattern, i8, [3 x i8], %class.CFX_FloatRect, float, float, [4 x i8] }>
%class.CPDF_Pattern = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.fxcrt::UnownedPtr", %"class.fxcrt::RetainPtr", %class.CFX_Matrix, %class.CFX_Matrix }
%class.CFX_FloatRect = type { float, float, float, float }
%class.CPDF_Form = type { %class.CPDF_PageObjectHolder, %"class.CPDF_Font::FormIface", %"class.std::__1::set.88", %"class.fxcrt::RetainPtr.98" }
%class.CPDF_PageObjectHolder = type { i32 (...)**, %"class.fxcrt::RetainPtr.31", %"class.fxcrt::RetainPtr.31", %"class.std::__1::map.37", %"class.std::__1::map.48", %class.CFX_FloatRect, %class.CPDF_Transparency, i8, i8, %"class.fxcrt::RetainPtr.31", %"class.fxcrt::UnownedPtr", %"class.std::__1::vector", %"class.std::__1::unique_ptr.64", %"class.std::__1::deque", %class.CFX_Matrix, %"class.std::__1::set.78" }
%"class.std::__1::map.37" = type { %"class.std::__1::__tree.38" }
%"class.std::__1::__tree.38" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.39", %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::map.48" = type { %"class.std::__1::__tree.49" }
%"class.std::__1::__tree.49" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.50", %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%class.CPDF_Transparency = type { i8, i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.CFX_FloatRect*, %class.CFX_FloatRect*, %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %class.CFX_FloatRect* }
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %class.CPDF_ContentParser* }
%class.CPDF_ContentParser = type opaque
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.74" }
%"struct.std::__1::__split_buffer" = type { %"class.std::__1::unique_ptr.68"**, %"class.std::__1::unique_ptr.68"**, %"class.std::__1::unique_ptr.68"**, %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.313" }
%"class.std::__1::__compressed_pair.313" = type { %"struct.std::__1::__compressed_pair_elem.314" }
%"struct.std::__1::__compressed_pair_elem.314" = type { %class.CPDF_PageObject* }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.std::__1::unique_ptr.68"** }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::set.78" = type { %"class.std::__1::__tree.79" }
%"class.std::__1::__tree.79" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.80", %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.CPDF_Font::FormIface" = type { i32 (...)** }
%"class.std::__1::set.88" = type { %"class.std::__1::__tree.89" }
%"class.std::__1::__tree.89" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.90", %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.fxcrt::RetainPtr.98" = type { %"class.std::__1::unique_ptr.99" }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %class.CPDF_Stream* }
%class.CPDF_PageObject = type { %class.CPDF_GraphicStates, %class.CFX_FloatRect, %class.CPDF_ContentMarks, i8, i32 }
%class.CPDF_ContentMarks = type { %"class.fxcrt::RetainPtr.275" }
%"class.fxcrt::RetainPtr.275" = type { %"class.std::__1::unique_ptr.276" }
%"class.std::__1::unique_ptr.276" = type { %"class.std::__1::__compressed_pair.277" }
%"class.std::__1::__compressed_pair.277" = type { %"struct.std::__1::__compressed_pair_elem.278" }
%"struct.std::__1::__compressed_pair_elem.278" = type { %"class.CPDF_ContentMarks::MarkData"* }
%"class.CPDF_ContentMarks::MarkData" = type { %"class.fxcrt::Retainable", %"class.std::__1::vector.279" }
%"class.std::__1::vector.279" = type { %"class.std::__1::__vector_base.280" }
%"class.std::__1::__vector_base.280" = type { %"class.fxcrt::RetainPtr.281"*, %"class.fxcrt::RetainPtr.281"*, %"class.std::__1::__compressed_pair.282" }
%"class.fxcrt::RetainPtr.281" = type opaque
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.fxcrt::RetainPtr.281"* }
%class.CPDF_ShadingPattern = type opaque

@_ZTV18CPDF_TilingPattern = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CPDF_TilingPattern*)* @_ZN18CPDF_TilingPatternD2Ev to i8*), i8* bitcast (void (%class.CPDF_TilingPattern*)* @_ZN18CPDF_TilingPatternD0Ev to i8*), i8* bitcast (%class.CPDF_TilingPattern* (%class.CPDF_TilingPattern*)* @_ZN18CPDF_TilingPattern15AsTilingPatternEv to i8*), i8* bitcast (%class.CPDF_ShadingPattern* (%class.CPDF_Pattern*)* @_ZN12CPDF_Pattern16AsShadingPatternEv to i8*)] }, align 8
@.str = private unnamed_addr constant [10 x i8] c"PaintType\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"XStep\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"YStep\00", align 1
@__const._ZN18CPDF_TilingPattern4LoadEP15CPDF_PageObject.allStates = private unnamed_addr constant %class.CPDF_AllStates <{ %class.CPDF_GraphicStates { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**), %class.CPDF_ClipPath { %"class.fxcrt::SharedCopyOnWrite" { %"class.fxcrt::RetainPtr.117" { %"class.std::__1::unique_ptr.118" { %"class.std::__1::__compressed_pair.119" { %"struct.std::__1::__compressed_pair_elem.120" { %"class.CPDF_ClipPath::PathData"* inttoptr (i64 -6148914691236517206 to %"class.CPDF_ClipPath::PathData"*) } } } } } }, %class.CFX_GraphState { %"class.fxcrt::SharedCopyOnWrite.138" { %"class.fxcrt::RetainPtr.139" { %"class.std::__1::unique_ptr.140" { %"class.std::__1::__compressed_pair.141" { %"struct.std::__1::__compressed_pair_elem.142" { %class.CFX_RetainableGraphStateData* inttoptr (i64 -6148914691236517206 to %class.CFX_RetainableGraphStateData*) } } } } } }, %class.CPDF_ColorState { %"class.fxcrt::SharedCopyOnWrite.152" { %"class.fxcrt::RetainPtr.153" { %"class.std::__1::unique_ptr.154" { %"class.std::__1::__compressed_pair.155" { %"struct.std::__1::__compressed_pair_elem.156" { %"class.CPDF_ColorState::ColorData"* inttoptr (i64 -6148914691236517206 to %"class.CPDF_ColorState::ColorData"*) } } } } } }, %class.CPDF_TextState { %"class.fxcrt::SharedCopyOnWrite.171" { %"class.fxcrt::RetainPtr.172" { %"class.std::__1::unique_ptr.173" { %"class.std::__1::__compressed_pair.174" { %"struct.std::__1::__compressed_pair_elem.175" { %"class.CPDF_TextState::TextData"* inttoptr (i64 -6148914691236517206 to %"class.CPDF_TextState::TextData"*) } } } } } }, %class.CPDF_GeneralState { %"class.fxcrt::SharedCopyOnWrite.256" { %"class.fxcrt::RetainPtr.257" { %"class.std::__1::unique_ptr.258" { %"class.std::__1::__compressed_pair.259" { %"struct.std::__1::__compressed_pair_elem.260" { %"class.CPDF_GeneralState::StateData"* inttoptr (i64 -6148914691236517206 to %"class.CPDF_GeneralState::StateData"*) } } } } } } }, %class.CFX_Matrix { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %class.CFX_Matrix { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %class.CFX_Matrix { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %class.CFX_PTemplate { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %class.CFX_PTemplate { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, align 8
@.str.3 = private unnamed_addr constant [5 x i8] c"BBox\00", align 1

@_ZN18CPDF_TilingPatternC1EP13CPDF_DocumentP11CPDF_ObjectRK10CFX_Matrix = hidden unnamed_addr alias void (%class.CPDF_TilingPattern*, %class.CPDF_Document*, %class.CPDF_Object*, %class.CFX_Matrix*), void (%class.CPDF_TilingPattern*, %class.CPDF_Document*, %class.CPDF_Object*, %class.CFX_Matrix*)* @_ZN18CPDF_TilingPatternC2EP13CPDF_DocumentP11CPDF_ObjectRK10CFX_Matrix
@_ZN18CPDF_TilingPatternD1Ev = hidden unnamed_addr alias void (%class.CPDF_TilingPattern*), void (%class.CPDF_TilingPattern*)* @_ZN18CPDF_TilingPatternD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CPDF_TilingPatternC2EP13CPDF_DocumentP11CPDF_ObjectRK10CFX_Matrix(%class.CPDF_TilingPattern*, %class.CPDF_Document*, %class.CPDF_Object*, %class.CFX_Matrix* dereferenceable(24)) unnamed_addr #0 align 2 {
  %5 = alloca %"class.fxcrt::ByteString", align 8
  %6 = getelementptr inbounds %class.CPDF_TilingPattern, %class.CPDF_TilingPattern* %0, i64 0, i32 0
  tail call void @_ZN12CPDF_PatternC2EP13CPDF_DocumentP11CPDF_ObjectRK10CFX_Matrix(%class.CPDF_Pattern* %6, %class.CPDF_Document* %1, %class.CPDF_Object* %2, %class.CFX_Matrix* dereferenceable(24) %3) #8
  %7 = getelementptr inbounds %class.CPDF_TilingPattern, %class.CPDF_TilingPattern* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV18CPDF_TilingPattern, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %class.CPDF_TilingPattern, %class.CPDF_TilingPattern* %0, i64 0, i32 3
  %9 = bitcast %class.CFX_FloatRect* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 16, i1 false) #8
  %10 = getelementptr inbounds %class.CPDF_TilingPattern, %class.CPDF_TilingPattern* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %11 = load %class.CPDF_Object*, %class.CPDF_Object** %10, align 8
  %12 = bitcast %class.CPDF_Object* %11 to %class.CPDF_Dictionary* (%class.CPDF_Object*)***
  %13 = load %class.CPDF_Dictionary* (%class.CPDF_Object*)**, %class.CPDF_Dictionary* (%class.CPDF_Object*)*** %12, align 8
  %14 = getelementptr inbounds %class.CPDF_Dictionary* (%class.CPDF_Object*)*, %class.CPDF_Dictionary* (%class.CPDF_Object*)** %13, i64 11
  %15 = load %class.CPDF_Dictionary* (%class.CPDF_Object*)*, %class.CPDF_Dictionary* (%class.CPDF_Object*)** %14, align 8
  %16 = tail call %class.CPDF_Dictionary* %15(%class.CPDF_Object* %11) #8
  %17 = bitcast %"class.fxcrt::ByteString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %5, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0)) #8
  %18 = call i32 @_ZNK15CPDF_Dictionary13GetIntegerForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %16, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %5) #8
  %19 = icmp eq i32 %18, 1
  %20 = getelementptr inbounds %class.CPDF_TilingPattern, %class.CPDF_TilingPattern* %0, i64 0, i32 1
  %21 = zext i1 %19 to i8
  store i8 %21, i8* %20, align 8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN12CPDF_Pattern22SetPatternToFormMatrixEv(%class.CPDF_Pattern* %6) #8
  ret void
}

declare void @_ZN12CPDF_PatternC2EP13CPDF_DocumentP11CPDF_ObjectRK10CFX_Matrix(%class.CPDF_Pattern*, %class.CPDF_Document*, %class.CPDF_Object*, %class.CFX_Matrix* dereferenceable(24)) unnamed_addr #1

declare i32 @_ZNK15CPDF_Dictionary13GetIntegerForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"*, i8*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN12CPDF_Pattern22SetPatternToFormMatrixEv(%class.CPDF_Pattern*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN12CPDF_PatternD2Ev(%class.CPDF_Pattern*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CPDF_TilingPatternD2Ev(%class.CPDF_TilingPattern*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_TilingPattern, %class.CPDF_TilingPattern* %0, i64 0, i32 0
  tail call void @_ZN12CPDF_PatternD2Ev(%class.CPDF_Pattern* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CPDF_TilingPatternD0Ev(%class.CPDF_TilingPattern*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_TilingPattern, %class.CPDF_TilingPattern* %0, i64 0, i32 0
  tail call void @_ZN12CPDF_PatternD2Ev(%class.CPDF_Pattern* %2) #8
  %3 = bitcast %class.CPDF_TilingPattern* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %class.CPDF_TilingPattern* @_ZN18CPDF_TilingPattern15AsTilingPatternEv(%class.CPDF_TilingPattern* readnone returned) unnamed_addr #5 align 2 {
  ret %class.CPDF_TilingPattern* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.CPDF_Form* @_ZN18CPDF_TilingPattern4LoadEP15CPDF_PageObject(%class.CPDF_TilingPattern*, %class.CPDF_PageObject* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.fxcrt::ByteString", align 8
  %4 = alloca %"class.fxcrt::ByteString", align 8
  %5 = alloca %"class.fxcrt::ByteString", align 8
  %6 = alloca %class.CPDF_AllStates, align 8
  %7 = alloca %"class.fxcrt::ByteString", align 8
  %8 = getelementptr inbounds %class.CPDF_TilingPattern, %class.CPDF_TilingPattern* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %9 = load %class.CPDF_Object*, %class.CPDF_Object** %8, align 8
  %10 = bitcast %class.CPDF_Object* %9 to %class.CPDF_Dictionary* (%class.CPDF_Object*)***
  %11 = load %class.CPDF_Dictionary* (%class.CPDF_Object*)**, %class.CPDF_Dictionary* (%class.CPDF_Object*)*** %10, align 8
  %12 = getelementptr inbounds %class.CPDF_Dictionary* (%class.CPDF_Object*)*, %class.CPDF_Dictionary* (%class.CPDF_Object*)** %11, i64 11
  %13 = load %class.CPDF_Dictionary* (%class.CPDF_Object*)*, %class.CPDF_Dictionary* (%class.CPDF_Object*)** %12, align 8
  %14 = tail call %class.CPDF_Dictionary* %13(%class.CPDF_Object* %9) #8
  %15 = bitcast %"class.fxcrt::ByteString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #8
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0)) #8
  %16 = call i32 @_ZNK15CPDF_Dictionary13GetIntegerForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %14, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %3) #8
  %17 = icmp eq i32 %16, 1
  %18 = getelementptr inbounds %class.CPDF_TilingPattern, %class.CPDF_TilingPattern* %0, i64 0, i32 1
  %19 = zext i1 %17 to i8
  store i8 %19, i8* %18, align 8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #8
  %20 = bitcast %"class.fxcrt::ByteString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0)) #8
  %21 = call float @_ZNK15CPDF_Dictionary12GetNumberForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %14, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %4) #8
  %22 = call float @llvm.fabs.f32(float %21) #8
  %23 = getelementptr inbounds %class.CPDF_TilingPattern, %class.CPDF_TilingPattern* %0, i64 0, i32 4
  store float %22, float* %23, align 4
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  %24 = bitcast %"class.fxcrt::ByteString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #8
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)) #8
  %25 = call float @_ZNK15CPDF_Dictionary12GetNumberForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %14, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %5) #8
  %26 = call float @llvm.fabs.f32(float %25) #8
  %27 = getelementptr inbounds %class.CPDF_TilingPattern, %class.CPDF_TilingPattern* %0, i64 0, i32 5
  store float %26, float* %27, align 8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #8
  %28 = load %class.CPDF_Object*, %class.CPDF_Object** %8, align 8
  %29 = bitcast %class.CPDF_Object* %28 to %class.CPDF_Stream* (%class.CPDF_Object*)***
  %30 = load %class.CPDF_Stream* (%class.CPDF_Object*)**, %class.CPDF_Stream* (%class.CPDF_Object*)*** %29, align 8
  %31 = getelementptr inbounds %class.CPDF_Stream* (%class.CPDF_Object*)*, %class.CPDF_Stream* (%class.CPDF_Object*)** %30, i64 35
  %32 = load %class.CPDF_Stream* (%class.CPDF_Object*)*, %class.CPDF_Stream* (%class.CPDF_Object*)** %31, align 8
  %33 = call %class.CPDF_Stream* %32(%class.CPDF_Object* %28) #8
  %34 = icmp eq %class.CPDF_Stream* %33, null
  br i1 %34, label %80, label %35

35:                                               ; preds = %2
  %36 = getelementptr inbounds %class.CPDF_TilingPattern, %class.CPDF_TilingPattern* %0, i64 0, i32 0, i32 5
  %37 = getelementptr inbounds %class.CPDF_TilingPattern, %class.CPDF_TilingPattern* %0, i64 0, i32 0, i32 2, i32 0
  %38 = load %class.CPDF_Document*, %class.CPDF_Document** %37, align 8
  %39 = call i8* @_Znwm(i64 280) #9
  %40 = bitcast i8* %39 to %class.CPDF_Form*
  call void @_ZN9CPDF_FormC1EP13CPDF_DocumentP15CPDF_DictionaryP11CPDF_Stream(%class.CPDF_Form* nonnull %40, %class.CPDF_Document* %38, %class.CPDF_Dictionary* null, %class.CPDF_Stream* nonnull %33) #8
  %41 = bitcast %class.CPDF_AllStates* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %41) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %41, i8* align 8 bitcast (%class.CPDF_AllStates* @__const._ZN18CPDF_TilingPattern4LoadEP15CPDF_PageObject.allStates to i8*), i64 152, i1 false)
  call void @_ZN14CPDF_AllStatesC1Ev(%class.CPDF_AllStates* nonnull %6) #8
  %42 = getelementptr inbounds %class.CPDF_AllStates, %class.CPDF_AllStates* %6, i64 0, i32 0, i32 3
  call void @_ZN15CPDF_ColorState7EmplaceEv(%class.CPDF_ColorState* %42) #8
  %43 = getelementptr inbounds %class.CPDF_AllStates, %class.CPDF_AllStates* %6, i64 0, i32 0, i32 2
  call void @_ZN14CFX_GraphState7EmplaceEv(%class.CFX_GraphState* %43) #8
  %44 = getelementptr inbounds %class.CPDF_AllStates, %class.CPDF_AllStates* %6, i64 0, i32 0, i32 4
  call void @_ZN14CPDF_TextState7EmplaceEv(%class.CPDF_TextState* %44) #8
  %45 = getelementptr inbounds %class.CPDF_AllStates, %class.CPDF_AllStates* %6, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load %"class.CPDF_GeneralState::StateData"*, %"class.CPDF_GeneralState::StateData"** %45, align 8
  %47 = getelementptr inbounds %class.CPDF_PageObject, %class.CPDF_PageObject* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load %"class.CPDF_GeneralState::StateData"*, %"class.CPDF_GeneralState::StateData"** %47, align 8
  %49 = icmp eq %"class.CPDF_GeneralState::StateData"* %46, %48
  br i1 %49, label %71, label %50

50:                                               ; preds = %35
  %51 = icmp eq %"class.CPDF_GeneralState::StateData"* %48, null
  br i1 %51, label %57, label %52

52:                                               ; preds = %50
  %53 = getelementptr inbounds %"class.CPDF_GeneralState::StateData", %"class.CPDF_GeneralState::StateData"* %48, i64 0, i32 0, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = add nsw i64 %54, 1
  store i64 %55, i64* %53, align 8
  %56 = load %"class.CPDF_GeneralState::StateData"*, %"class.CPDF_GeneralState::StateData"** %45, align 8
  br label %57

57:                                               ; preds = %52, %50
  %58 = phi %"class.CPDF_GeneralState::StateData"* [ %56, %52 ], [ %46, %50 ]
  store %"class.CPDF_GeneralState::StateData"* %48, %"class.CPDF_GeneralState::StateData"** %45, align 8
  %59 = icmp eq %"class.CPDF_GeneralState::StateData"* %58, null
  br i1 %59, label %71, label %60

60:                                               ; preds = %57
  %61 = getelementptr inbounds %"class.CPDF_GeneralState::StateData", %"class.CPDF_GeneralState::StateData"* %58, i64 0, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = add nsw i64 %62, -1
  store i64 %63, i64* %61, align 8
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %71

65:                                               ; preds = %60
  %66 = getelementptr inbounds %"class.CPDF_GeneralState::StateData", %"class.CPDF_GeneralState::StateData"* %58, i64 0, i32 0
  %67 = bitcast %"class.CPDF_GeneralState::StateData"* %58 to void (%"class.fxcrt::Retainable"*)***
  %68 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %67, align 8
  %69 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %68, i64 1
  %70 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %69, align 8
  call void %70(%"class.fxcrt::Retainable"* nonnull %66) #8
  br label %71

71:                                               ; preds = %65, %60, %57, %35
  call void @_ZN9CPDF_Form12ParseContentEPK14CPDF_AllStatesPK10CFX_MatrixPNSt3__13setIPKhNS6_4lessIS9_EENS6_9allocatorIS9_EEEE(%class.CPDF_Form* nonnull %40, %class.CPDF_AllStates* nonnull %6, %class.CFX_Matrix* %36, %"class.std::__1::set.88"* null) #8
  %72 = bitcast %"class.fxcrt::ByteString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #8
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)) #8
  %73 = call { <2 x float>, <2 x float> } @_ZNK15CPDF_Dictionary10GetRectForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %14, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %7) #8
  %74 = extractvalue { <2 x float>, <2 x float> } %73, 0
  %75 = extractvalue { <2 x float>, <2 x float> } %73, 1
  %76 = getelementptr inbounds %class.CPDF_TilingPattern, %class.CPDF_TilingPattern* %0, i64 0, i32 3
  %77 = bitcast %class.CFX_FloatRect* %76 to <2 x float>*
  store <2 x float> %74, <2 x float>* %77, align 4
  %78 = getelementptr inbounds %class.CPDF_TilingPattern, %class.CPDF_TilingPattern* %0, i64 0, i32 3, i32 2
  %79 = bitcast float* %78 to <2 x float>*
  store <2 x float> %75, <2 x float>* %79, align 4
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %7) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #8
  call void @_ZN14CPDF_AllStatesD1Ev(%class.CPDF_AllStates* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %41) #8
  br label %80

80:                                               ; preds = %2, %71
  %81 = phi %class.CPDF_Form* [ %40, %71 ], [ null, %2 ]
  ret %class.CPDF_Form* %81
}

declare float @_ZNK15CPDF_Dictionary12GetNumberForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN14CPDF_AllStatesC1Ev(%class.CPDF_AllStates*) unnamed_addr #1

declare void @_ZN15CPDF_ColorState7EmplaceEv(%class.CPDF_ColorState*) local_unnamed_addr #1

declare void @_ZN14CFX_GraphState7EmplaceEv(%class.CFX_GraphState*) local_unnamed_addr #1

declare void @_ZN14CPDF_TextState7EmplaceEv(%class.CPDF_TextState*) local_unnamed_addr #1

declare void @_ZN9CPDF_Form12ParseContentEPK14CPDF_AllStatesPK10CFX_MatrixPNSt3__13setIPKhNS6_4lessIS9_EENS6_9allocatorIS9_EEEE(%class.CPDF_Form*, %class.CPDF_AllStates*, %class.CFX_Matrix*, %"class.std::__1::set.88"*) local_unnamed_addr #1

declare { <2 x float>, <2 x float> } @_ZNK15CPDF_Dictionary10GetRectForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN14CPDF_AllStatesD1Ev(%class.CPDF_AllStates*) unnamed_addr #3

declare %class.CPDF_ShadingPattern* @_ZN12CPDF_Pattern16AsShadingPatternEv(%class.CPDF_Pattern*) unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare void @_ZN9CPDF_FormC1EP13CPDF_DocumentP15CPDF_DictionaryP11CPDF_Stream(%class.CPDF_Form*, %class.CPDF_Document*, %class.CPDF_Dictionary*, %class.CPDF_Stream*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
